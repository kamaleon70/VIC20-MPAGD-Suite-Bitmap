ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "testsound.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               ;swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 12
000000r 3               	CentreY		= 34
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  08           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  0E           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  40           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 CC        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3               	lda #<objdta		; objects table.
000026r 3               	sta z80_x
000026r 3               	lda #>objdta
000026r 3               	sta z80_i
000026r 3               
000026r 3               	ldx numob 		; number of objects in the game.
000026r 3               iniob0:
000026r 3               	ldy #36
000026r 3               	lda (z80_ix),y 		; start screen.
000026r 3               	ldy #33
000026r 3               	sta (z80_ix),y 		; set start screen.
000026r 3               
000026r 3               	ldy #37
000026r 3               	lda (z80_ix),y 		; find start y.
000026r 3               	ldy #34
000026r 3               	sta (z80_ix),y 		; set start y.
000026r 3               
000026r 3               	ldy #38
000026r 3               	lda (z80_ix),y 		; get initial x.
000026r 3               	ldy #35
000026r 3               	sta (z80_ix),y 		; set x coord.
000026r 3               
000026r 3               	clc 			; point to next object.
000026r 3               	lda z80_x
000026r 3               	adc #39			; distance between objects.
000026r 3               	sta z80_x
000026r 3               	bcc :+
000026r 3               	inc z80_i
000026r 3               :
000026r 3               	dex 			; repeat.
000026r 3               	bne iniob0
000026r 3               
000026r 3               	rts
000026r 3               .endif
000026r 3               
000026r 3               ;-----------------------------------------------
000026r 3               ; Redraw the screen.
000026r 3               ;
000026r 3               ; Remove old copy of all sprites for redraw.
000026r 3               ;-----------------------------------------------
000026r 3               
000026r 3               redraw:
000026r 3               .if xflag
000026r 3               	lda #WINDOWWID
000026r 3               	sta winwid
000026r 3               	lda #WINDOWHGT
000026r 3               	sta winhgt
000026r 3               .endif
000026r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000028r 3  48           	pha
000029r 3  A5 rr        	lda z80_x
00002Br 3  48           	pha
00002Cr 3               
00002Cr 3  20 rr rr     	jsr droom		; show screen layout.
00002Fr 3               .if oflag
00002Fr 3               	jsr shwob		; draw objects.
00002Fr 3               .endif
00002Fr 3               numsp0:
00002Fr 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000031r 3  85 rr        	sta tmp
000033r 3               
000033r 3  A9 rr        	lda #<sprtab		; sprite table.
000035r 3  85 rr        	sta z80_x
000037r 3  A9 rr        	lda #>sprtab
000039r 3  85 rr        	sta z80_i
00003Br 3               redrw0:
00003Br 3  A0 00        	ldy #0
00003Dr 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00003Fr 3  C9 FF        	cmp #255		; is it enabled?
000041r 3  F0 0B        	beq redrw1 		; no, find next one.
000043r 3               
000043r 3  A0 03        	ldy #var_Y
000045r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000047r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000049r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
00004Br 3               
00004Br 3  20 rr rr     	jsr sspria		; show single sprite.
00004Er 3               
00004Er 3               redrw1:
00004Er 3  18           	clc			; next sprite.
00004Fr 3  A5 rr        	lda z80_x
000051r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000053r 3  85 rr        	sta z80_x
000055r 3  90 02        	bcc :+
000057r 3  E6 rr        	inc z80_i
000059r 3               :
000059r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
00005Br 3  D0 DE        	bne redrw0
00005Dr 3               
00005Dr 3               rpblc1:
00005Dr 3               ;	jsr dshrp		; redraw shrapnel.
00005Dr 3               
00005Dr 3               .if aflag
00005Dr 3               	jsr rbloc		; draw blocks for this screen
00005Dr 3               .endif
00005Dr 3  68           	pla			; retrieve sprite pointer.
00005Er 3  85 rr        	sta z80_x
000060r 3  68           	pla
000061r 3  85 rr        	sta z80_i
000063r 3               
000063r 3  60           	rts
000064r 3               
000064r 3               ;----------------------------------------------------------------------
000064r 3               ; Clear screen routine.
000064r 3               ;
000064r 3               ; Fill screenmem $8000-$97ff with ScrFillByte
000064r 3               ;----------------------------------------------------------------------
000064r 3               
000064r 3               cls:
000064r 3  A9 10        	lda #>CharAddress	; Character RAM address.
000066r 3  8D rr rr     	sta clrdata+2
000069r 3               
000069r 3               ; Clear bitmap data
000069r 3               
000069r 3  A9 00        	lda #ScrFillByte	; Clear screen
00006Br 3  A0 00        	ldy #0
00006Dr 3  A2 10        	ldx #16
00006Fr 3               clrdata:
00006Fr 3  99 00 10     	sta CharAddress,y
000072r 3  C8           	iny
000073r 3  D0 FA        	bne clrdata
000075r 3  EE rr rr     	inc clrdata+2
000078r 3  CA           	dex
000079r 3  D0 F4        	bne clrdata
00007Br 3               
00007Br 3               ; Clear colour attributes
00007Br 3               
00007Br 3  AD rr rr     	lda fontcol
00007Er 3  A2 00        	ldx #0
000080r 3               clrcolour:
000080r 3  9D 00 96     	sta ColorAttr,x
000083r 3  E8           	inx
000084r 3  D0 FA        	bne clrcolour
000086r 3  60           	rts
000087r 3               
000087r 3               ;----------------------------------------------------------------------
000087r 3               ; Clear colour attributes
000087r 3               ;
000087r 3               ; Reset colour attributes to fontcol
000087r 3               ;----------------------------------------------------------------------
000087r 3               
000087r 3               clrcol:
000087r 3  AD rr rr     	lda fontcol		; Clear colour attributes
00008Ar 3  A2 00        	ldx #0
00008Cr 3               clscol:
00008Cr 3  9D 00 96     	sta ColorAttr,x
00008Fr 3  E8           	inx
000090r 3  E0 F2        	cpx #242
000092r 3  D0 F8        	bne clscol
000094r 3               
000094r 3  60           	rts
000095r 3               
000095r 3               ;----------------------------------------------------------------------
000095r 3               ; FODDER check
000095r 3               ;----------------------------------------------------------------------
000095r 3               
000095r 3               .if pflag .or dflag
000095r 3               fdchk:
000095r 3               	cmp #FODDER 		; is it fodder?
000095r 3               	beq :+
000095r 3               	rts 			; no.
000095r 3               :
000095r 3               	lda #0			; wipe fodder in MAP
000095r 3               	ldy #0
000095r 3               	sta (bufaddr),y 	; rewrite block type.
000095r 3               
000095r 3               	lda dispx		; x=x/8
000095r 3               	pha
000095r 3               	lsr a
000095r 3               	lsr a
000095r 3               	lsr a
000095r 3               	sta dispx
000095r 3               
000095r 3               	lda dispy		; y=y/8
000095r 3               	pha
000095r 3               	lsr a
000095r 3               	lsr a
000095r 3               	lsr a
000095r 3               	sta dispy
000095r 3               
000095r 3               	lda #0 			; block to write.
000095r 3               	jsr pattr 		; write block.
000095r 3               
000095r 3               	pla
000095r 3               	sta dispy
000095r 3               	pla
000095r 3               	sta dispx
000095r 3               	rts
000095r 3               .endif
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Scrolly text and puzzle variables.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               .if sflag
000095r 3               txtbit:	.byte 128		; bit to write.
000095r 3               txtwid:	.byte 16		; width of ticker message.
000095r 3               txtpos:	.word msgdat
000095r 3               txtini:	.word msgdat
000095r 3               txtscr:	.word ScreenAddr
000095r 3               .endif
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Specialist routines.
000095r 3               ; Process shrapnel.
000095r 3               ;----------------------------------------------------
000095r 3               proshr:
000095r 3               .if pflag
000095r 3               	lda #<SHRAPN		; table.
000095r 3               	sta z80_x
000095r 3               	lda #>SHRAPN
000095r 3               	sta z80_i
000095r 3               
000095r 3               	lda #NUMSHR		; shrapnel pieces to process.
000095r 3               	sta shrctr
000095r 3               prosh0:
000095r 3               	ldy #0
000095r 3               	lda (z80_ix),y		; on/off marker.
000095r 3               	asl a
000095r 3               proshx:
000095r 3               	bcs :+
000095r 3               	jsr prosh1 		; on, so process it.
000095r 3               :
000095r 3               	clc
000095r 3               	lda z80_x
000095r 3               	adc #SHRSIZ
000095r 3               	sta z80_x
000095r 3               	bcc :+
000095r 3               	inc z80_i
000095r 3               :
000095r 3               	dec shrctr		; round again.
000095r 3               	bne prosh0
000095r 3               .endif
000095r 3               .if sflag
000095r 3               	jsr scrly
000095r 3               .endif
000095r 3  60           	rts
000096r 3               
000096r 3               .if pflag
000096r 3               ;----------------------------------------------------
000096r 3               ; Proces shrapnel piece
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               prosh1:
000096r 3               	jsr plot 		; delete the pixel.
000096r 3               
000096r 3               	lda #<shrptr		; shrapnel routine pointers.
000096r 3               	sta z80_l
000096r 3               	lda #>shrptr
000096r 3               	sta z80_h
000096r 3               
000096r 3               	ldy #0
000096r 3               	lda (z80_ix),y		; restore shrapnel type.
000096r 3               	jsr prosh2 		; run the routine.
000096r 3               	jsr chkxy		; check x and y are good before we redisplay.
000096r 3               
000096r 3               	lda #<SHRSIZ 		; distance to next.
000096r 3               	sta z80_e
000096r 3               	lda #>SHRSIZ
000096r 3               	sta z80_d
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Run the routine
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               prosh2:
000096r 3               	asl a 			; 2 bytes per address.
000096r 3               	tay
000096r 3               	lda shrptr,y
000096r 3               	sta z80_l
000096r 3               	lda shrptr+1,y 		; fetch high byte from table.
000096r 3               	sta z80_h
000096r 3               	jmp (z80_hl) 		; jump to routine.
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Paricle routine table
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               shrptr:	.word laser		; laser.
000096r 3               	.word trail		; vapour trail.
000096r 3               	.word shrap		; shrapnel from explosion.
000096r 3               	.word dotl		; horizontal starfield left.
000096r 3               	.word dotr		; horizontal starfield right.
000096r 3               	.word dotu		; vertical starfield up.
000096r 3               	.word dotd		; vertical starfield down.
000096r 3               	.word ptcusr		; user particle.
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Explosion shrapnel.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               shrap:
000096r 3               	ldy #1
000096r 3               	lda (z80_ix),y 		; get the angle.
000096r 3               	clc
000096r 3               	adc #<shrsin		; shrapnel sine table.
000096r 3               	sta z80_l
000096r 3               	lda #>shrsin
000096r 3               	adc #0
000096r 3               	sta z80_h
000096r 3               
000096r 3               	ldy #0
000096r 3               	lda (z80_hl),y 		; fetch value from table.
000096r 3               	sta z80_e
000096r 3               	inc z80_l 		; next byte of table.
000096r 3               	bne :+
000096r 3               	inc z80_h
000096r 3               :
000096r 3               	ldy #0
000096r 3               	lda (z80_hl),y		; fetch value from table.
000096r 3               	sta z80_d
000096r 3               	inc z80_l		; next byte of table.
000096r 3               	bne :+
000096r 3               	inc z80_h
000096r 3               :
000096r 3               	ldy #0
000096r 3               	lda (z80_hl),y 		; fetch value from table.
000096r 3               	sta z80_c
000096r 3               	inc z80_l 		; next byte of table.
000096r 3               	bne :+
000096r 3               	inc z80_h
000096r 3               :
000096r 3               	ldy #0
000096r 3               	lda (z80_hl),y 		; fetch value from table.
000096r 3               	sta z80_b
000096r 3               
000096r 3               	ldy #2
000096r 3               	lda (z80_ix),y 		; x coordinate in hl.
000096r 3               	clc
000096r 3               	adc z80_e		; add sine lb
000096r 3               	sta (z80_ix),y		; store new coordinate lb.
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y
000096r 3               	adc z80_d		; add sine hb
000096r 3               	sta (z80_ix),y		; store new coordinate hb.
000096r 3               
000096r 3               	ldy #4
000096r 3               	lda (z80_ix),y	 	; y coordinate in hl.
000096r 3               	clc
000096r 3               	adc z80_c		; add cosine lb
000096r 3               	sta (z80_ix),y		; store new coordinate lb.
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y
000096r 3               	adc z80_b		; add cosine lb
000096r 3               	sta (z80_ix),y		; store new coordinate hb.
000096r 3               
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Move dots
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               dotl:
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y
000096r 3               	sec
000096r 3               	sbc #1		 	; move left.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               dotr:
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y
000096r 3               	clc
000096r 3               	adc #1		 	; move left.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               dotu:
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y
000096r 3               	sec
000096r 3               	sbc #1		 	; move up.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               dotd:
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y
000096r 3               	clc
000096r 3               	adc #1			; move down.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Check if coordinates are ok before redrawing at new position.
000096r 3               ;
000096r 3               ; left:   X>L		X=L	Ok
000096r 3               ; right:  R+15>X	X=R	Ok
000096r 3               ; top:    Y>T		Y=T	Ok
000096r 3               ; bottom: B+15>Y	Y=B	Ok
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               chkxy:
000096r 3               
000096r 3               ; top:    Y>T		Y=T	Ok
000096r 3               
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000096r 3               	cmp wntopx		; window top.
000096r 3               	bcs :+			; compare with top window limit.
000096r 3               	jmp kilshr		; out of window, kill shrapnel.
000096r 3               :
000096r 3               ; left:   X>L		X=L	Ok
000096r 3               
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000096r 3               	cmp wnlftx		; left edge.
000096r 3               	bcs :+			; compare with left window limit.
000096r 3               	jmp kilshr		; out of window, kill shrapnel.
000096r 3               :
000096r 3               ; bottom: B+15>Y	Y=B	Ok
000096r 3               
000096r 3               	lda wnbotx		; point to bottom.
000096r 3               	clc
000096r 3               	adc #15
000096r 3               	ldy #3
000096r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000096r 3               	bcs :+			; compare with shrapnel x coordinate.
000096r 3               	jmp kilshr		; off screen, kill shrapnel..
000096r 3               :
000096r 3               ; right:  R+15>X	X=R	Ok
000096r 3               
000096r 3               	lda wnrgtx		; point to right edge.
000096r 3               	clc
000096r 3               	adc #15
000096r 3               	ldy #5
000096r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000096r 3               	bcs :+			; compare with window limit.
000096r 3               	jmp kilshr		; off screen, kill shrapnel.
000096r 3               :
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Drop through.
000096r 3               ; Display shrapnel.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               plot:
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y		; y integer.
000096r 3               	sta dispy	 	; workspace coordinates.
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y	 	; x integer.
000096r 3               	sta dispx 		; workspace coordinates.
000096r 3               
000096r 3               	ldy #0
000096r 3               	lda (z80_ix),y 		; type.
000096r 3               	bne :+			; is it a laser?
000096r 3               	jmp plot1 		; yes, draw laser instead.
000096r 3               :
000096r 3               plot0:
000096r 3               	lda dispx		; which pixel within byte do we
000096r 3               	and #7			; want to set first?
000096r 3               	tay
000096r 3               	lda dots,y 		; table of small pixel positions.
000096r 3               	sta z80_e 		; get value.
000096r 3               
000096r 3               	jsr scadd 		; screen address.
000096r 3               	ldy #0
000096r 3               	lda (scraddr),y		; see what's already there.
000096r 3               	eor z80_e
000096r 3               	sta (scraddr),y 	; put back on screen.
000096r 3               	rts
000096r 3               
000096r 3               plot1:
000096r 3               	jsr scadd 		; screen address.
000096r 3               	ldy #0
000096r 3               	lda (scraddr),y 	; fetch byte there.
000096r 3               	eor #255 		; toggle all bits.
000096r 3               	sta (scraddr),y 	; new byte.
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Switch off shrapnel
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               kilshr:
000096r 3               	lda #128
000096r 3               	ldy #0
000096r 3               	sta (z80_ix),y	; switch off shrapnel.
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Sine/cosine table
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
000096r 3               	.word 1024,0,946,65144,724,64811,391,64589
000096r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000096r 3               	.word 64512,0,64589,391,64811,724,65144,946
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Create trail
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               trail:
000096r 3               	ldy #1
000096r 3               	lda (z80_ix),y 	; time remaining.
000096r 3               	sec
000096r 3               	sbc #1
000096r 3               	sta (z80_ix),y
000096r 3               	bne :+
000096r 3               	jmp trailk		; time to switch it off.
000096r 3               :
000096r 3               	jsr qrand		; get a random number.
000096r 3               	lsr a 			; x or y axis?
000096r 3               	bcc :+
000096r 3               	jmp trailv		; use y.
000096r 3               :
000096r 3               ; Trail horizontal
000096r 3               
000096r 3               	lsr a 			; which direction?
000096r 3               	bcc :+
000096r 3               	jmp traill		; go left.
000096r 3               :
000096r 3               ; Trail right
000096r 3               
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y
000096r 3               	clc
000096r 3               	adc #1	 		; go right.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               
000096r 3               ; Trail left
000096r 3               
000096r 3               traill:
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y
000096r 3               	sec
000096r 3               	sbc #1 			; go left.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               
000096r 3               ; Trail vertical
000096r 3               
000096r 3               trailv:
000096r 3               	lsr a		 	; which direction?
000096r 3               	bcc :+
000096r 3               	jmp trailu		; go up.
000096r 3               :
000096r 3               ; Trail down
000096r 3               
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y
000096r 3               	clc
000096r 3               	adc #1 			; go down.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               
000096r 3               ; Trail up
000096r 3               
000096r 3               trailu:
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y
000096r 3               	sec
000096r 3               	sbc #1 			; go up.
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               
000096r 3               ; Kill trail
000096r 3               
000096r 3               trailk:
000096r 3               	lda #200		; set off-screen to kill vapour trail.
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Create laser beam
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               laser:
000096r 3               	ldy #1
000096r 3               	lda (z80_ix),y 		; direction.
000096r 3               	ror a 			; left or right?
000096r 3               	bcs :+
000096r 3               	jmp laserl		; move left.
000096r 3               :
000096r 3               ; Laser right
000096r 3               
000096r 3               	lda #8			; distance to travel.
000096r 3               	sta z80_b
000096r 3               	jmp laserm		; move laser.
000096r 3               
000096r 3               ; Laser left
000096r 3               
000096r 3               laserl:
000096r 3               	lda #248		; distance to travel.
000096r 3               	sta z80_b
000096r 3               laserm:
000096r 3               	ldy #5
000096r 3               	lda (z80_ix),y		; x position.
000096r 3               	clc
000096r 3               	adc z80_b		; add distance.
000096r 3               	sta (z80_ix),y		; set new x coordinate.
000096r 3               
000096r 3               ; Test new block.
000096r 3               
000096r 3               	sta dispx 		; set x for block collision detection purposes.
000096r 3               	ldy #3
000096r 3               	lda (z80_ix),y 		; get y.
000096r 3               	sta dispy		; set coordinate for collision test.
000096r 3               	jsr tstbl 		; get block type there.
000096r 3               	cmp #WALL		; is it solid?
000096r 3               	bne :+
000096r 3               	jmp trailk		; yes, it cannot pass.
000096r 3               :
000096r 3               .if pflag .or dflag
000096r 3                       cmp #FODDER             ; is it fodder?
000096r 3                       bne :+
000096r 3                       jsr fdchk               ; remove fodder block.
000096r 3                       jmp trailk              ; destroy laser.
000096r 3               :
000096r 3               .endif
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Dots mask
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               dots:	.byte 128,64,32,16,8,4,2,1
000096r 3               
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Plot, preserving de.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               plotde:
000096r 3               	lda z80_d 		; put de on stack.
000096r 3               	pha
000096r 3               	lda z80_e
000096r 3               	pha
000096r 3               
000096r 3               	jsr plot 		; plot pixel.
000096r 3               
000096r 3               	pla			; restore de from stack.
000096r 3               	sta z80_e
000096r 3               	pla
000096r 3               	sta z80_d
000096r 3               
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Shoot a laser.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               shoot:
000096r 3               	sta z80_c		; store direction in c register.
000096r 3               	ldy #8
000096r 3               	lda (z80_ix),y 		; y coordinate.
000096r 3               	clc
000096r 3               shoot1:
000096r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000096r 3               	sta z80_l 		; puty y coordinate in l.
000096r 3               
000096r 3               	ldy #9
000096r 3               	lda (z80_ix),y 		; x coordinate in h.
000096r 3               	sta z80_h
000096r 3               
000096r 3               	lda z80_i		; store pointer to sprite.
000096r 3               	pha
000096r 3               	lda z80_x
000096r 3               	pha
000096r 3               
000096r 3               	jsr fpslot 		; find particle slot.
000096r 3               	bcs :+
000096r 3               	jmp vapou2		; failed, restore ix.
000096r 3               :
000096r 3               	lda #0
000096r 3               	ldy #0
000096r 3               	sta (z80_ix),y 		; set up a laser.
000096r 3               
000096r 3               	lda z80_c
000096r 3               	ldy #1
000096r 3               	sta (z80_ix),y 		; set the direction.
000096r 3               
000096r 3               	lda z80_l
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y		; set y coordinate.
000096r 3               
000096r 3               	ror z80_c		; check direction we want.
000096r 3               	bcc :+
000096r 3               	jmp shootr		; shoot right.
000096r 3               :
000096r 3               	lda z80_h		; X position.
000096r 3               shoot0:
000096r 3               	and #248		; align on character boundary.
000096r 3               	ldy #5
000096r 3               	sta (z80_ix),y		; set x coordinate.
000096r 3               	jmp vapou0 		; draw first image.
000096r 3               shootr:
000096r 3               	lda z80_h		; x position.
000096r 3               	clc
000096r 3               	adc #15			; look right.
000096r 3               	jmp shoot0		; align and continue.
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Create a bit of vapour trail.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               vapour:
000096r 3               	lda z80_i		; store pointer to sprite.
000096r 3               	pha
000096r 3               	lda z80_x
000096r 3               	pha
000096r 3               
000096r 3               	ldy #8
000096r 3               	lda (z80_ix),y 		; y coordinate.
000096r 3               	clc
000096r 3               vapou3:
000096r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000096r 3               	sta z80_l
000096r 3               
000096r 3               	ldy #9
000096r 3               	lda (z80_ix),y 		; x coordinate.
000096r 3               	adc #7
000096r 3               	sta z80_h
000096r 3               
000096r 3               	jsr fpslot 		; find particle slot.
000096r 3               	bcc :+
000096r 3               	jmp vapou1		; no, we can use it.
000096r 3               :
000096r 3               vapou2:
000096r 3               	pla
000096r 3               	sta z80_x
000096r 3               	pla
000096r 3               	sta z80_i
000096r 3               	rts
000096r 3               vapou1:
000096r 3               	lda z80_l
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y		; set up y.
000096r 3               
000096r 3               	lda z80_h
000096r 3               	ldy #5
000096r 3               	sta (z80_ix),y 		; set up x coordinate.
000096r 3               
000096r 3               	jsr qrand		; get quick random number.
000096r 3               	and #15			; random time.
000096r 3               	clc
000096r 3               	adc #15			; minimum time on screen.
000096r 3               	ldy #1
000096r 3               	sta (z80_ix),y		; set time on screen.
000096r 3               
000096r 3               	lda #1
000096r 3               	ldy #0
000096r 3               	sta (z80_ix),y		; define particle as vapour trail.
000096r 3               vapou0:
000096r 3               	jsr chkxy		; plot first position.
000096r 3               	jmp vapou2
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Create a user particle.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               ptusr:
000096r 3               	sta z80_f		; store timer.
000096r 3               
000096r 3               	ldy #8
000096r 3               	lda (z80_ix),y 		; y coordinate.
000096r 3               	clc
000096r 3               	adc #7			; mid-point of sprite.
000096r 3               	sta z80_l
000096r 3               
000096r 3               	ldy #9
000096r 3               	lda (z80_ix),y 		; x coordinate.
000096r 3               	clc
000096r 3               	adc #7			; mid-point of sprite.
000096r 3               	sta z80_h
000096r 3               
000096r 3               	jsr fpslot 		; find particle slot.
000096r 3               	bcs ptusr1
000096r 3               	rts 			; out of slots, can't generate anything.
000096r 3               ptusr1:
000096r 3               	lda z80_l
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y 		; set up y.
000096r 3               
000096r 3               	lda z80_h
000096r 3               	ldy #5
000096r 3               	sta (z80_ix),y		; set up x coordinate.
000096r 3               
000096r 3               	lda z80_f 		; restore timer.
000096r 3               	ldy #1
000096r 3               	sta (z80_ix),y		; set time on screen.
000096r 3               
000096r 3               	lda #7
000096r 3               	ldy #0
000096r 3               	sta (z80_ix),y		; define particle as user particle.
000096r 3               
000096r 3               	jmp chkxy		; plot first position.
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Create a vertical or horizontal star.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               star:
000096r 3               	lda z80_i		; store pointer to sprite.
000096r 3               	pha
000096r 3               	lda z80_x
000096r 3               	pha
000096r 3               
000096r 3               	jsr fpslot 		; find particle slot.
000096r 3               	bcs star7		; found one we can use.
000096r 3               star0:
000096r 3               	pla 			; restore sprite pointer.
000096r 3               	sta z80_x
000096r 3               	pla
000096r 3               	sta z80_i
000096r 3               	rts 			; out of slots, can't generate anything.
000096r 3               star7:
000096r 3               	lda z80_c		; direction.
000096r 3               	and #3 			; is it left?
000096r 3               	bne :+
000096r 3               	jmp star1 		; yes, it's left.
000096r 3               :
000096r 3               	cmp #1 			; is it right?
000096r 3               	bne :+
000096r 3               	jmp star2 		; yes, it's right.
000096r 3               :
000096r 3               	cmp #2 			; is it up?
000096r 3               	bne :+
000096r 3               	jmp star3 		; yes, it's up.
000096r 3               :
000096r 3               	ldy wntopx 		; get edge of screen.
000096r 3               	iny			; down one pixel.
000096r 3               	tya
000096r 3               star8:
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y 		; set y coord.
000096r 3               	jsr qrand 		; get quick random number.
000096r 3               star9:
000096r 3               	ldy #5
000096r 3               	sta (z80_ix),y		; set x position.
000096r 3               
000096r 3               	lda z80_c		; direction.
000096r 3               	and #3			; zero to three.
000096r 3               	clc
000096r 3               	adc #3			; 3 to 6 for starfield.
000096r 3               	ldy #0
000096r 3               	sta (z80_ix),y		; define particle as star.
000096r 3               	jsr chkxy		; plot first position.
000096r 3               	jmp star0
000096r 3               star1:
000096r 3               	jsr qrand		; get quick random number.
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y 		; set y coord.
000096r 3               
000096r 3               	lda wnrgtx 		; get edge of screen.
000096r 3               	clc
000096r 3               	adc #15			; add width of sprite minus 1.
000096r 3               	jmp star9
000096r 3               star2:
000096r 3               	jsr qrand 		; get quick random number.
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y		; set y coord.
000096r 3               
000096r 3               	lda wnlftx		; get edge of screen.
000096r 3               	jmp star9
000096r 3               star3:
000096r 3               	lda wnbotx 		; get edge of screen.
000096r 3               	clc
000096r 3               	adc #15 		; height of sprite minus one pixel.
000096r 3               	jmp star8
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Find particle slot for lasers or vapour trail.
000096r 3               ; can't use alternate accumulator.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               fpslot:
000096r 3               	lda #<SHRAPN 		; shrapnel table.
000096r 3               	sta z80_x
000096r 3               	lda #>SHRAPN
000096r 3               	sta z80_i
000096r 3               
000096r 3               	lda #NUMSHR		; number of pieces in table.
000096r 3               	sta z80_b
000096r 3               fpslt0:
000096r 3               	ldy #0
000096r 3               	lda (z80_ix),y		; get type.
000096r 3               	asl a  			; is this slot in use?
000096r 3               	bcc :+
000096r 3               	rts			; no, we can use it.
000096r 3               :
000096r 3               	clc			; point to more shrapnel.
000096r 3               	lda z80_x
000096r 3               	adc #SHRSIZ
000096r 3               	sta z80_x
000096r 3               	bcc :+
000096r 3               	inc z80_i
000096r 3               :
000096r 3               	dec z80_b		; repeat for all shrapnel.
000096r 3               	bne fpslt0
000096r 3               
000096r 3               	clc
000096r 3               	rts 			; out of slots, can't generate anything.
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Create an explosion at sprite position.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               explod:
000096r 3               	sta z80_c 		; particles to create.
000096r 3               
000096r 3               	lda z80_i 		; store pointer to sprite.
000096r 3               	pha
000096r 3               	lda z80_x
000096r 3               	pha
000096r 3               
000096r 3               	ldy #8
000096r 3               	lda (z80_ix),y 		; y coordinate.
000096r 3               	sta z80_l
000096r 3               	ldy #9
000096r 3               	lda (z80_ix),y		; x coordinate.
000096r 3               	sta z80_h
000096r 3               
000096r 3               	lda #<SHRAPN		; shrapnel table.
000096r 3               	sta z80_x
000096r 3               	lda #>SHRAPN
000096r 3               	sta z80_i
000096r 3               
000096r 3               	lda #NUMSHR		; number of pieces in table.
000096r 3               	sta explcnt
000096r 3               expld0:
000096r 3               	ldy #0
000096r 3               	lda (z80_ix),y		; get type.
000096r 3               	asl a 			; is this slot in use?
000096r 3               	bcs expld1		; no, we can use it.
000096r 3               expld2:
000096r 3               	clc
000096r 3               	lda z80_x
000096r 3               	adc #SHRSIZ
000096r 3               	sta z80_x
000096r 3               	bcc :+
000096r 3               	inc z80_i
000096r 3               :
000096r 3               	dec explcnt		; repeat for all shrapnel.
000096r 3               	bne expld0
000096r 3               expld3:
000096r 3               	pla			; restore sprite pointer.
000096r 3               	sta z80_x
000096r 3               	pla
000096r 3               	sta z80_i
000096r 3               	rts 			; out of slots, can't generate any more.
000096r 3               
000096r 3               expld1:
000096r 3               	lda z80_c		; shrapnel counter.
000096r 3               	and #15			; 0 to 15.
000096r 3               	clc			; add to x.
000096r 3               	adc z80_l
000096r 3               	ldy #3
000096r 3               	sta (z80_ix),y		; y coord.
000096r 3               
000096r 3               	lda seed3 		; crap random number.
000096r 3               	and #15			; 0 to 15.
000096r 3               	clc 			; add to y.
000096r 3               	adc z80_h
000096r 3               	ldy #5
000096r 3               	sta (z80_ix),y		; x coord.
000096r 3               
000096r 3               	lda #2
000096r 3               	ldy #0
000096r 3               	sta (z80_ix),y		; switch it on.
000096r 3               
000096r 3               	jsr chkxy		; plot first position.
000096r 3               	jsr qrand		; quick random angle.
000096r 3               	and #60 		; keep within range.
000096r 3               	ldy #1
000096r 3               	sta (z80_ix),y		; angle.
000096r 3               
000096r 3               	dec z80_c		; one less piece of shrapnel to generate.
000096r 3               	bne expld2 		; back to main explosion loop.
000096r 3               	jmp expld3 		; restore sprite pointer and exit.
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Quick random
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               qrand:
000096r 3               	jsr random		; r register.
000096r 3               	eor seed3		; combine with seed.
000096r 3               	sta seed3 		; new seed.
000096r 3               	rts
000096r 3               
000096r 3               ;----------------------------------------------------
000096r 3               ; Display all shrapnel.
000096r 3               ;----------------------------------------------------
000096r 3               
000096r 3               dshrp:
000096r 3               	lda #<plotde		; display routine.
000096r 3               	sta proshx+1
000096r 3               	lda #>plotde
000096r 3               	sta proshx+2
000096r 3               	jsr proshr		; process shrapnel.
000096r 3               
000096r 3               	lda #<prosh1		; processing routine.
000096r 3               	sta proshx+1
000096r 3               	lda #>prosh1
000096r 3               	sta proshx+2
000096r 3               	rts
000096r 3               
000096r 3               ;------------------------------------------------------
000096r 3               ; Particle engine.
000096r 3               ;
000096r 3               ; Init particle data for 55 particles in SHRAPN table.
000096r 3               ; Every particle has 6 bytes.
000096r 3               ;
000096r 3               ; global:	-
000096r 3               ; local:	x,y,hl
000096r 3               ; calls:	-
000096r 3               ;------------------------------------------------------
000096r 3               
000096r 3               inishr:
000096r 3               	lda #<SHRAPN 		; table.
000096r 3               	sta z80_l
000096r 3               	lda #>SHRAPN
000096r 3               	sta z80_h
000096r 3               
000096r 3               	ldy #0
000096r 3               	ldx #NUMSHR		; shrapnel pieces to process.
000096r 3               inish0:
000096r 3               	lda #255 		; kill the shrapnel.
000096r 3               	sta (z80_hl),y
000096r 3               
000096r 3               	clc 			; point there.
000096r 3               	lda z80_l
000096r 3               	adc #SHRSIZ		; distance to next.
000096r 3               	sta z80_l
000096r 3               	bcc :+
000096r 3               	inc z80_h
000096r 3               :
000096r 3               	dex
000096r 3               	bne inish0 		; round again.
000096r 3               	rts
000096r 3               
000096r 3               ;------------------------------------------------------
000096r 3               ; Check for collision between laser and sprite.
000096r 3               ;------------------------------------------------------
000096r 3               
000096r 3               lcol:
000096r 3               	lda #<SHRAPN		; shrapnel table.
000096r 3               	sta z80_l
000096r 3               	lda #>SHRAPN
000096r 3               	sta z80_h
000096r 3               
000096r 3               	lda #NUMSHR		; number of pieces in table.
000096r 3               	sta z80_b
000096r 3               lcol0:
000096r 3               	ldy #0
000096r 3               	lda (z80_hl),y 		; get type.
000096r 3               	beq lcol1		; yes, check collision.
000096r 3               lcol3:
000096r 3               	clc			; point to more shrapnel.
000096r 3               	lda z80_l
000096r 3               	adc #SHRSIZ
000096r 3               	sta z80_l
000096r 3               	bcc :+
000096r 3               	inc z80_h
000096r 3               :
000096r 3               	dec z80_b		; repeat for all shrapnel.
000096r 3               	bne lcol0
000096r 3               	clc
000096r 3               	rts 			; no collision, carry not set.
000096r 3               lcol1:
000096r 3               	ldy #3
000096r 3               	lda (z80_hl),y		; get y.
000096r 3               	sec
000096r 3               	ldy #8
000096r 3               	sbc (z80_ix),y		; subtract sprite y.
000096r 3               lcolh:
000096r 3               	cmp #SPR_HGT 		; within range?
000096r 3               	bcc :+
000096r 3               	jmp lcol2		; no, missed.
000096r 3               :
000096r 3               	ldy #5
000096r 3               	lda (z80_hl),y 		; get x.
000096r 3               	sec
000096r 3               	ldy #9
000096r 3               	sbc (z80_ix),y 		; subtract sprite y.
000096r 3               	cmp #16			; within range?
000096r 3               	bcs :+
000096r 3               	jmp lcol4 		; yes, collision occurred.
000096r 3               :
000096r 3               lcol2:
000096r 3               	jmp lcol3
000096r 3               lcol4:
000096r 3               	sec
000096r 3               	rts 			; return with carry set for collision.
000096r 3               .endif
000096r 3               
000096r 3               ;------------------------------------------------------
000096r 3               ; Main game engine code starts here.
000096r 3               ; After initialisation, mloop is the main loop
000096r 3               ;------------------------------------------------------
000096r 3               
000096r 3               game:
000096r 3               
000096r 3               ; Set up screen address table.
000096r 3               
000096r 3               setsat:
000096r 3  A9 00        	lda #<CharAddress	; start of screen.
000098r 3  85 rr        	sta scraddr
00009Ar 3  A9 10        	lda #>CharAddress
00009Cr 3  85 rr        	sta scraddr+1
00009Er 3               
00009Er 3  A0 00        	ldy #0			; vertical lines on screen.
0000A0r 3               setsa0:
0000A0r 3  A5 rr        	lda scraddr
0000A2r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000A5r 3  A5 rr        	lda scraddr+1
0000A7r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000AAr 3  20 rr rr     	jsr nline		; next line down.
0000ADr 3  C8           	iny			; next position in table.
0000AEr 3  D0 F0        	bne setsa0
0000B0r 3               
0000B0r 3               ; Set up colour address table
0000B0r 3               
0000B0r 3               setsof:
0000B0r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000B2r 3  85 rr        	sta bufaddr
0000B4r 3  A9 96        	lda #>ColorAttr
0000B6r 3  85 rr        	sta bufaddr+1
0000B8r 3               
0000B8r 3  A0 00        	ldy #0			; vertical lines on screen.
0000BAr 3               setof0:
0000BAr 3  A5 rr        	lda bufaddr
0000BCr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000BFr 3  A5 rr        	lda bufaddr+1
0000C1r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000C4r 3  18           	clc			; next line down.
0000C5r 3  A5 rr        	lda bufaddr
0000C7r 3  69 16        	adc #ScrWidth
0000C9r 3  85 rr        	sta bufaddr
0000CBr 3  90 02        	bcc :+
0000CDr 3  E6 rr        	inc bufaddr+1
0000CFr 3               :
0000CFr 3  C8           	iny			; next position in table.
0000D0r 3  C0 0B        	cpy #ScrHeight/2
0000D2r 3  D0 E6        	bne setof0
0000D4r 3               
0000D4r 3               ; Init graphics mode
0000D4r 3               
0000D4r 3  20 rr rr     	jsr init
0000D7r 3               
0000D7r 3               ; Init joysticks
0000D7r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0000DAr 3               
0000DAr 3               rpblc2:
0000DAr 3               .if pflag
0000DAr 3               	jsr inishr 		; initialise particle engine.
0000DAr 3               .endif
0000DAr 3               evintr:
0000DAr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0000DDr 3               
0000DDr 3  A9 02        	lda #WALL 		; write default property.
0000DFr 3  A2 00        	ldx #0
0000E1r 3               clrmap:
0000E1r 3  9D 00 04     	sta MAP,x 		; block properties.
0000E4r 3  9D 00 05     	sta MAP+256,x
0000E7r 3  E8           	inx
0000E8r 3  D0 F7        	bne clrmap
0000EAr 3               
0000EAr 3               .if oflag
0000EAr 3               	jsr iniob 		; initialise objects.
0000EAr 3               .endif
0000EAr 3  A9 00        	lda #0			; put zero in accumulator.
0000ECr 3  85 rr        	sta gamwon		; reset game won flag.
0000EEr 3               
0000EEr 3  20 rr rr     	jsr inisc 		; init the score.
0000F1r 3               mapst:
0000F1r 3  AD rr rr     	lda stmap 		; start position on map.
0000F4r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0000F7r 3               
0000F7r 3               inipbl:
0000F7r 3               .if aflag
0000F7r 3               	lda #<eop		; reset blockpointer
0000F7r 3               	sta pbptr
0000F7r 3               	lda #>eop
0000F7r 3               	sta pbptr+1
0000F7r 3               .endif
0000F7r 3  20 rr rr     	jsr initsc 		; set up first screen.
0000FAr 3               
0000FAr 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0000FCr 3  85 rr        	sta z80_x
0000FEr 3  A9 rr        	lda #>ssprit
000100r 3  85 rr        	sta z80_i
000102r 3               evini:
000102r 3  20 rr rr     	jsr evnt13 		; initialisation.
000105r 3               
000105r 3               ; Two restarts.
000105r 3               ; First restart - clear all sprites and initialise everything.
000105r 3               
000105r 3               rstrt:
000105r 3  20 rr rr     	jsr rsevt 		; restart events.
000108r 3  20 rr rr     	jsr xspr 		; clear sprite table.
00010Br 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
00010Er 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000111r 3  4C rr rr     	jmp rstrt0
000114r 3               
000114r 3               ; Second restart - clear all but player, and don't initialise him.
000114r 3               
000114r 3               rstrtn:
000114r 3  20 rr rr     	jsr rsevt		; restart events.
000117r 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
00011Ar 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
00011Dr 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000120r 3               
000120r 3               ; Set up the player and/or enemy sprites.
000120r 3               
000120r 3               rstrt0:
000120r 3  A9 00        	lda #0 			; zero in accumulator.
000122r 3  85 rr        	sta nexlev 		; reset next level flag.
000124r 3  85 rr        	sta restfl 		; reset restart flag.
000126r 3  85 rr        	sta deadf 		; reset dead flag.
000128r 3               
000128r 3  20 rr rr     	jsr droom 		; show screen layout.
00012Br 3               rpblc0:
00012Br 3               .if pflag
00012Br 3               	jsr inishr 		; initialise particle engine.
00012Br 3               .endif
00012Br 3               .if aflag
00012Br 3               	jsr rbloc		; draw blocks for this screen
00012Br 3               .endif
00012Br 3               .if oflag
00012Br 3               	jsr shwob		; draw objects.
00012Br 3               .endif
00012Br 3               
00012Br 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00012Dr 3  85 rr        	sta z80_x
00012Fr 3  A9 rr        	lda #>sprtab
000131r 3  85 rr        	sta z80_i
000133r 3  20 rr rr     	jsr dspr 		; display sprites.
000136r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000138r 3  85 rr        	sta z80_x
00013Ar 3  A9 rr        	lda #>(sprtab+TABSIZ)
00013Cr 3  85 rr        	sta z80_i
00013Er 3  20 rr rr     	jsr dspr 		; display sprites.
000141r 3               mloop:
000141r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000144r 3               
000144r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000146r 3  85 rr        	sta z80_x
000148r 3  A9 rr        	lda #>sprtab
00014Ar 3  85 rr        	sta z80_i
00014Cr 3  20 rr rr     	jsr dspr 		; display even sprites.
00014Fr 3               
00014Fr 3               ;	jsr plsnd 		; play sounds.
00014Fr 3  20 rr rr     	jsr vsync 		; synchronise with display.
000152r 3  20 rr rr     	jsr proshr
000155r 3               
000155r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000157r 3  85 rr        	sta z80_x
000159r 3  A9 rr        	lda #>(sprtab+TABSIZ)
00015Br 3  85 rr        	sta z80_i
00015Dr 3  20 rr rr     	jsr dspr 		; display odd sprites.
000160r 3               
000160r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000162r 3  85 rr        	sta z80_x
000164r 3  A9 rr        	lda #>(ssprit)
000166r 3  85 rr        	sta z80_i
000168r 3               evlp1:
000168r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
00016Br 3  20 rr rr     	jsr pspr 		; process sprites.
00016Er 3               
00016Er 3               ; Main loop events.
00016Er 3               
00016Er 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000170r 3  85 rr        	sta z80_x
000172r 3  A9 rr        	lda #>ssprit
000174r 3  85 rr        	sta z80_i
000176r 3               evlp2:
000176r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
000179r 3               bsortx:
000179r 3  20 rr rr     	jsr bsort 		; sort sprites.
00017Cr 3               
00017Cr 3  A5 rr        	lda nexlev		; finished level flag.
00017Er 3  D0 1F        	bne newlev		; is set, go to next level.
000180r 3  A5 rr        	lda gamwon		; finished game flag.
000182r 3  D0 2A        	bne evwon		; is set, finish the game.
000184r 3  A5 rr        	lda restfl 		; finished level flag.
000186r 3  C9 01        	cmp #1			; has it been set?
000188r 3  D0 03        	bne :+
00018Ar 3  4C rr rr     	jmp rstrt		; yes, go to next level.
00018Dr 3               :
00018Dr 3  C9 02        	cmp #2			; has it been set?
00018Fr 3  D0 03        	bne :+
000191r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
000194r 3               :
000194r 3  A5 rr        	lda deadf 		; dead flag.
000196r 3  D0 1C        	bne pdead		; yes, player dead.
000198r 3               
000198r 3               ; back to start of main loop.
000198r 3               
000198r 3  E6 rr        	inc frmno
00019Ar 3  E6 rr        	inc clock
00019Cr 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
00019Fr 3               
00019Fr 3               ;----------------------------------------------------------
00019Fr 3               ; Read blocks from list and update screen accordingly.
00019Fr 3               ;----------------------------------------------------------
00019Fr 3               
00019Fr 3               .if aflag
00019Fr 3               rbloc:
00019Fr 3               	lda #<eop		; reset blockpointer
00019Fr 3               	sta pbbuf
00019Fr 3               	lda #>eop
00019Fr 3               	sta pbbuf+1
00019Fr 3               
00019Fr 3               rbloc2:
00019Fr 3               	lda pbbuf			; check for last block
00019Fr 3               	cmp pbptr
00019Fr 3               	bne rbloc1
00019Fr 3               	lda pbbuf+1
00019Fr 3               	cmp pbptr+1
00019Fr 3               	bne rbloc1
00019Fr 3               	rts
00019Fr 3               rbloc1:
00019Fr 3               	ldy #0
00019Fr 3               	lda (pbbuf),y		; check if block for this scno
00019Fr 3               	cmp scno
00019Fr 3               	bne rbloc0		; if not, skip
00019Fr 3               	iny
00019Fr 3               	lda (pbbuf),y		; get y
00019Fr 3               	sta dispy
00019Fr 3               	iny
00019Fr 3               	lda (pbbuf),y		; get x
00019Fr 3               	sta dispx
00019Fr 3               	iny
00019Fr 3               	lda (pbbuf),y		; get blocknr
00019Fr 3               	jsr pattr2		; draw block
00019Fr 3               rbloc0:
00019Fr 3               	clc			; point to next block
00019Fr 3               	lda pbbuf
00019Fr 3               	adc #4
00019Fr 3               	sta pbbuf
00019Fr 3               	bcc rbloc2
00019Fr 3               	inc pbbuf+1
00019Fr 3               	jmp rbloc2
00019Fr 3               .endif
00019Fr 3               
00019Fr 3               ;----------------------------------------------------------
00019Fr 3               ; New level
00019Fr 3               ;----------------------------------------------------------
00019Fr 3               
00019Fr 3               newlev:
00019Fr 3  A5 rr        	lda scno 			; current screen.
0001A1r 3  18           	clc
0001A2r 3  69 01        	adc #1				; next screen.
0001A4r 3  CD rr rr     	cmp numsc 			; total number of screens.
0001A7r 3  B0 05        	bcs evwon			; yes, game finished.
0001A9r 3  85 rr        	sta scno			; set new level number.
0001ABr 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001AEr 3               
0001AEr 3               evwon:
0001AEr 3  20 rr rr     	jsr evnt18		 	; game completed.
0001B1r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001B4r 3               
0001B4r 3               ;----------------------------------------------------------
0001B4r 3               ; Player dead.
0001B4r 3               ;----------------------------------------------------------
0001B4r 3               
0001B4r 3               pdead:
0001B4r 3  A9 00        	lda #0				; zeroise accumulator.
0001B6r 3  85 rr        	sta deadf			; reset dead flag.
0001B8r 3               evdie:
0001B8r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001BBr 3  A5 rr        	lda numlif			; number of lives.
0001BDr 3  F0 03        	beq :+
0001BFr 3  4C rr rr     	jmp rstrt 			; restart game.
0001C2r 3               :
0001C2r 3               evfail:
0001C2r 3  20 rr rr     	jsr evnt17 			; failure event.
0001C5r 3  4C rr rr     	jmp game			; restart game
0001C8r 3               
0001C8r 3               ;----------------------------------------------------------
0001C8r 3               ; Tidy things up
0001C8r 3               ;----------------------------------------------------------
0001C8r 3               
0001C8r 3               tidyup:
0001C8r 3  A0 00        	ldy #0				; digits to check.
0001CAr 3               tidyu2:
0001CAr 3  B9 rr rr     	lda score,y 			; get score digit.
0001CDr 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001D0r 3  90 07        	bcc tidyu0			; high score is bigger.
0001D2r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001D4r 3  C8           	iny				; next digit of high score.
0001D5r 3  C0 06        	cpy #6
0001D7r 3  D0 F1        	bne tidyu2			; repeat for all digits
0001D9r 3               tidyu0:
0001D9r 3  A9 rr        	lda #<score			; return pointing to score.
0001DBr 3  85 rr        	sta z80_c
0001DDr 3  A9 rr        	lda #>score
0001DFr 3  85 rr        	sta z80_b
0001E1r 3  60           	rts
0001E2r 3               tidyu1:
0001E2r 3  A0 05        	ldy #5
0001E4r 3               tidyu3:
0001E4r 3  B9 rr rr     	lda score,y			; score.
0001E7r 3  99 rr rr     	sta hiscor,y			; high score.
0001EAr 3  88           	dey
0001EBr 3  10 F7        	bpl tidyu3 			; copy score to high score.
0001EDr 3               evnewh:
0001EDr 3  20 rr rr     	jsr evnt19			; new high score event.
0001F0r 3  4C rr rr     	jmp tidyu0			; tidy up.
0001F3r 3               
0001F3r 3               ;--------------------------------------------------
0001F3r 3               ; Restart event.
0001F3r 3               ;--------------------------------------------------
0001F3r 3               
0001F3r 3               rsevt:
0001F3r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0001F5r 3  85 rr        	sta z80_x
0001F7r 3  A9 rr        	lda #>ssprit
0001F9r 3  85 rr        	sta z80_i
0001FBr 3               
0001FBr 3               evrs:
0001FBr 3  4C rr rr     	jmp evnt14	 		; call restart event.
0001FEr 3               
0001FEr 3               ;------------------------------------------------------------------
0001FEr 3               ; Copy number passed in a to string position bc, right-justified.
0001FEr 3               ;
0001FEr 3               ; Input:
0001FEr 3               ;  A  = number
0001FEr 3               ;  BC = string address
0001FEr 3               ;
0001FEr 3               ; Output:
0001FEr 3               ;  BC = string with number
0001FEr 3               ;-----------------------------------------------------------------
0001FEr 3               
0001FEr 3               num2ch:
0001FEr 3  85 rr        	sta z80_d		; Save number
000200r 3               
000200r 3  A9 00        	lda #0
000202r 3  85 rr        	sta flag
000204r 3               numdg3:
000204r 3  A2 64        	ldx #100		; hundreds column.
000206r 3  86 rr        	stx z80_e
000208r 3  20 rr rr     	jsr numdg		; show digit.
00020Br 3               numdg2:
00020Br 3  A2 0A        	ldx #10			; tens column.
00020Dr 3  86 rr        	stx z80_e
00020Fr 3  20 rr rr     	jsr numdg		; show digit.
000212r 3               
000212r 3  E6 rr        	inc flag
000214r 3  A2 01        	ldx #1			; units column.
000216r 3  86 rr        	stx z80_e
000218r 3               numdg:
000218r 3  A9 30        	lda #48			; clear digit.
00021Ar 3  85 rr        	sta z80_a
00021Cr 3               numdg1:
00021Cr 3  A5 rr        	lda z80_d
00021Er 3  C5 rr        	cmp z80_e
000220r 3  90 0E        	bcc numdg0		; nothing to show.
000222r 3  38           	sec
000223r 3  A5 rr        	lda z80_d
000225r 3  E5 rr        	sbc z80_e		; subtract from column.
000227r 3  85 rr        	sta z80_d
000229r 3  E6 rr        	inc z80_a		; increment digit.
00022Br 3  E6 rr        	inc flag
00022Dr 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
000230r 3               numdg0:
000230r 3  A0 00        	ldy #0
000232r 3  A5 rr        	lda z80_a
000234r 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000236r 3  A5 rr        	lda flag
000238r 3  F0 06        	beq :+
00023Ar 3  E6 rr        	inc z80_c		; next buffer position.
00023Cr 3  D0 02        	bne :+
00023Er 3  E6 rr        	inc z80_b
000240r 3               :
000240r 3  60           	rts
000241r 3               num2dd:
000241r 3  85 rr        	sta z80_d		; Save number
000243r 3               
000243r 3  A9 01        	lda #1
000245r 3  85 rr        	sta flag
000247r 3               
000247r 3  4C rr rr     	jmp numdg2
00024Ar 3               num2td:
00024Ar 3  85 rr        	sta z80_d		; Save number
00024Cr 3               
00024Cr 3  A9 01        	lda #1
00024Er 3  85 rr        	sta flag
000250r 3  4C rr rr     	jmp numdg3
000253r 3               
000253r 3               ;---------------------------------------------------------
000253r 3               ; Reset score to "000000"
000253r 3               ;---------------------------------------------------------
000253r 3               
000253r 3               inisc:
000253r 3  A9 30        	lda #'0'
000255r 3  A2 05        	ldx #5			; digits to initialise.
000257r 3               inisc0:
000257r 3  9D rr rr     	sta score,x 		; write zero digit.
00025Ar 3  CA           	dex			; next column.
00025Br 3  10 FA        	bpl inisc0		; repeat for all digits.
00025Dr 3               
00025Dr 3  60           	rts
00025Er 3               
00025Er 3               ;-----------------------------------------------------
00025Er 3               ; Multiply h by d and return in hl.
00025Er 3               ;
00025Er 3               ; Input:
00025Er 3               ;  H = first number
00025Er 3               ;  D = second number
00025Er 3               ;
00025Er 3               ; Output:
00025Er 3               ;  HL = result H x D
00025Er 3               ;-----------------------------------------------------
00025Er 3               
00025Er 3               imul:
00025Er 3  A5 rr        	lda z80_d		; HL = H * D
000260r 3  85 rr        	sta z80_e
000262r 3  A5 rr        	lda z80_h
000264r 3  85 rr        	sta z80_c		; make c first multiplier.
000266r 3               imul0:
000266r 3  A9 00        	lda #0			; zeroise total.
000268r 3  85 rr        	sta z80_l
00026Ar 3  85 rr        	sta z80_h
00026Cr 3               
00026Cr 3  A5 rr        	lda z80_h
00026Er 3  85 rr        	sta z80_d		; zeroise high byte.
000270r 3               
000270r 3  A9 08        	lda #8			; repeat 8 times.
000272r 3  85 rr        	sta z80_b
000274r 3               imul1:
000274r 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
000276r 3  90 0E        	bcc imul2		; wasn't set.
000278r 3  18           	clc			; bit was set, so add de.
000279r 3  A5 rr        	lda z80_l
00027Br 3  65 rr        	adc z80_e
00027Dr 3  85 rr        	sta z80_l
00027Fr 3  A5 rr        	lda z80_h
000281r 3  65 rr        	adc z80_d
000283r 3  85 rr        	sta z80_h
000285r 3  18           	clc 			; reset carry.
000286r 3               imul2:
000286r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
000288r 3  26 rr        	rol z80_d
00028Ar 3  C6 rr        	dec z80_b
00028Cr 3  D0 E6        	bne imul1		; repeat 8 times.
00028Er 3               
00028Er 3  60           	rts
00028Fr 3               
00028Fr 3               ;-----------------------------------------------
00028Fr 3               ; Divide d by e and return in d, remainder in a.
00028Fr 3               ;
00028Fr 3               ; Input:
00028Fr 3               ;  D = first number
00028Fr 3               ;  E = second number
00028Fr 3               ;
00028Fr 3               ; Output:
00028Fr 3               ;  D = result D/E
00028Fr 3               ;  A = remainder
00028Fr 3               ;-----------------------------------------------
00028Fr 3               
00028Fr 3               idiv:
00028Fr 3  A9 00        	lda #0
000291r 3  A0 08        	ldy #8		 	; bits to shift.
000293r 3  06 rr        	asl z80_d
000295r 3               idiv0:
000295r 3  2A           	rol a 			; multiply d by 2.
000296r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
000298r 3  90 02        	bcc idiv1		; e is greater, no division this time.
00029Ar 3  E5 rr        	sbc z80_e		; subtract it.
00029Cr 3               idiv1:
00029Cr 3  26 rr        	rol z80_d		; rotate into d.
00029Er 3  88           	dey
00029Fr 3  D0 F4        	bne idiv0		; repeat
0002A1r 3  60           	rts
0002A2r 3               
0002A2r 3               ;---------------------------------------------------
0002A2r 3               ; Play AY sound effect
0002A2r 3               ;---------------------------------------------------
0002A2r 3               
0002A2r 3               plsnd:
0002A2r 3  60           	rts
0002A3r 3               
0002A3r 3               ;---------------------------------------------------
0002A3r 3               ; Objects handling.
0002A3r 3               ; 32 bytes for image
0002A3r 3               ; 1 for colour
0002A3r 3               ; 3 for room, y and x
0002A3r 3               ; 3 for starting room, y and x.
0002A3r 3               ; 254 = disabled.
0002A3r 3               ; 255 = object in player"s pockets.
0002A3r 3               ;---------------------------------------------------
0002A3r 3               
0002A3r 3               ;---------------------------------------------------
0002A3r 3               ; Show items present.
0002A3r 3               ;---------------------------------------------------
0002A3r 3               
0002A3r 3               .if oflag
0002A3r 3               shwob:
0002A3r 3               	lda #<objdta			; objects table.
0002A3r 3               	sta z80_l
0002A3r 3               	lda #>objdta
0002A3r 3               	sta z80_h
0002A3r 3               	lda numob 			; number of objects in the game.
0002A3r 3               	sta sprcnt
0002A3r 3               shwob0:
0002A3r 3               	ldy #33 			; distance to room number.
0002A3r 3               	lda (z80_hl),y 			; same as an item?
0002A3r 3               	cmp scno 			; current location.
0002A3r 3               	bne :+
0002A3r 3               	jsr dobj 			; yes, display object.
0002A3r 3               :
0002A3r 3               	clc
0002A3r 3               	lda z80_l
0002A3r 3               	adc #39 			; distance to next item.
0002A3r 3               	sta z80_l
0002A3r 3               	lda z80_h
0002A3r 3               	adc #0
0002A3r 3               	sta z80_h	 		; point to it.
0002A3r 3               	dec sprcnt
0002A3r 3               	bne shwob0 			; repeat for others.
0002A3r 3               	rts
0002A3r 3               
0002A3r 3               ;---------------------------------------------------
0002A3r 3               ; Display object.
0002A3r 3               ; hl must point to object's start address.
0002A3r 3               ;
0002A3r 3               ; Input:
0002A3r 3               ;  HL = object address
0002A3r 3               ;---------------------------------------------------
0002A3r 3               
0002A3r 3               dobj:
0002A3r 3               	ldy #32
0002A3r 3               	lda (z80_hl),y 			; point to y.
0002A3r 3               	sta objcol
0002A3r 3               	ldy #34
0002A3r 3               	lda (z80_hl),y 			; point to y.
0002A3r 3               	sta dispy
0002A3r 3               	iny
0002A3r 3               	lda (z80_hl),y 			; point to x.
0002A3r 3               	sta dispx
0002A3r 3               dobj1:
0002A3r 3               	jmp sprite 			; draw this sprite.
0002A3r 3               
0002A3r 3               ;--------------------------------------
0002A3r 3               ; Remove an object.
0002A3r 3               ;
0002A3r 3               ; Input:
0002A3r 3               ;  A = object number
0002A3r 3               ;--------------------------------------
0002A3r 3               
0002A3r 3               remob:
0002A3r 3               	cmp numob			; number of objects in game.
0002A3r 3               	bcc :+				; are we checking past the end?
0002A3r 3               	rts				; yes, can't get non-existent item.
0002A3r 3               :
0002A3r 3               	pha				; remember object.
0002A3r 3               	jsr getob			; pick it up if we haven't already got it.
0002A3r 3               	pla				; retrieve object number.
0002A3r 3               	jsr gotob			; get its address.
0002A3r 3               	lda #254
0002A3r 3               	ldy #33
0002A3r 3               	sta (z80_hl),y			; remove it.
0002A3r 3               	rts
0002A3r 3               
0002A3r 3               ;---------------------------------------------------
0002A3r 3               ; Pick up object number held in the accumulator.
0002A3r 3               ;
0002A3r 3               ; Input:
0002A3r 3               ;  A = object number
0002A3r 3               ;---------------------------------------------------
0002A3r 3               
0002A3r 3               getob:
0002A3r 3               	cmp numob 		; number of objects in game.
0002A3r 3               	bcc :+			; are we checking past the end?
0002A3r 3               	rts			; yes, can't get non-existent item.
0002A3r 3               :
0002A3r 3               	jsr gotob 		; check if we already have it.
0002A3r 3               	cmp #255
0002A3r 3               	bne :+
0002A3r 3               	rts			; we already do.
0002A3r 3               :
0002A3r 3               	ldy #33
0002A3r 3               	lda (z80_hl),y		; is it on this screen?
0002A3r 3               	cmp scno 		; current screen.
0002A3r 3               	bne getob0		; not on screen, so nothing to delete.
0002A3r 3               
0002A3r 3               	lda #255
0002A3r 3               	sta (z80_hl),y		; pick it up.
0002A3r 3               	iny 			; point to y coord.
0002A3r 3               getob1:
0002A3r 3               	ldy #34
0002A3r 3               	lda (z80_hl),y		; y coord.
0002A3r 3               	sta dispy
0002A3r 3               	ldy #35
0002A3r 3               	lda (z80_hl),y 		; x coord.
0002A3r 3               	sta dispx
0002A3r 3               	jmp dobj1 		; delete object sprite.
0002A3r 3               getob0:
0002A3r 3               	lda #255
0002A3r 3               	sta (z80_hl),y 		; pick it up.
0002A3r 3               	rts
0002A3r 3               .endif
0002A3r 3               
0002A3r 3               ;-----------------------------------------------------------------
0002A3r 3               ; Got object check.
0002A3r 3               ; Call with object in accumulator, returns zero set if in pockets.
0002A3r 3               ;
0002A3r 3               ; Input:
0002A3r 3               ;  A = object number
0002A3r 3               ;-----------------------------------------------------------------
0002A3r 3               .if oflag .or mflag
0002A3r 3               gotob:
0002A3r 3               	cmp numob 		; number of objects in game.
0002A3r 3               	bcc :+ 			; are we checking past the end?
0002A3r 3               	jmp gotob0 		; yes, we can't have a non-existent object.
0002A3r 3               :
0002A3r 3               	jsr findob		; find the object.
0002A3r 3               gotob1:
0002A3r 3               	rts
0002A3r 3               
0002A3r 3               gotob0:
0002A3r 3               	lda #254 		; missing.
0002A3r 3               	jmp gotob1
0002A3r 3               
0002A3r 3               findob:
0002A3r 3               	pha			; save object number
0002A3r 3               	lda #<objdta 		; objects.
0002A3r 3               	sta z80_l
0002A3r 3               	lda #>objdta
0002A3r 3               	sta z80_h
0002A3r 3               	pla			; retreive object number
0002A3r 3               	beq fndob1 		; is it zero? yes, skip loop.
0002A3r 3               	tax 			; loop counter
0002A3r 3               fndob2:
0002A3r 3               	clc
0002A3r 3               	lda z80_l
0002A3r 3               	adc #39 		; size of each object.
0002A3r 3               	sta z80_l
0002A3r 3               	bcc :+
0002A3r 3               	inc z80_h
0002A3r 3               :
0002A3r 3               	dex 			; repeat until we find address.
0002A3r 3               	bne fndob2
0002A3r 3               fndob1:
0002A3r 3               	ldy #33			; distance to room it's in.
0002A3r 3               	lda (z80_hl),y		; fetch status.
0002A3r 3               	rts
0002A3r 3               .endif
0002A3r 3               
0002A3r 3               ;---------------------------------------------
0002A3r 3               ; Drop object number at (dispx, dispy).
0002A3r 3               ;
0002A3r 3               ; Input:
0002A3r 3               ;  A = object number
0002A3r 3               ;---------------------------------------------
0002A3r 3               
0002A3r 3               .if oflag
0002A3r 3               drpob:
0002A3r 3               	cmp numob 		; are we checking past the end?
0002A3r 3               	bcc :+
0002A3r 3               	rts			; yes, can't drop non-existent item.
0002A3r 3               :
0002A3r 3               	jsr gotob		; make sure object is in inventory.
0002A3r 3               	cmp scno		; already on this screen?
0002A3r 3               	bne :+
0002A3r 3               	rts			; yes, nothing to do.
0002A3r 3               :
0002A3r 3               	ldy #33
0002A3r 3               	lda scno
0002A3r 3               	sta (z80_hl),y		; bring onto screen.
0002A3r 3               	lda dispy		; sprite y coordinate.
0002A3r 3               	iny
0002A3r 3               	sta (z80_hl),y		; point to object y.
0002A3r 3               	lda dispx 		; sprite x coordinate.
0002A3r 3               	iny
0002A3r 3               	sta (z80_hl),y 		; point to object x
0002A3r 3               	jmp dobj		; draw the object sprite.
0002A3r 3               
0002A3r 3               ;-----------------------------------------------
0002A3r 3               ; Seek objects at sprite position.
0002A3r 3               ;
0002A3r 3               ; Output:
0002A3r 3               ;  A = object number, if not found A=255
0002A3r 3               ;-----------------------------------------------
0002A3r 3               
0002A3r 3               skobj:
0002A3r 3               	lda #<objdta 		; pointer to objects.
0002A3r 3               	sta z80_l
0002A3r 3               	lda #>objdta
0002A3r 3               	sta z80_h
0002A3r 3               
0002A3r 3               	lda numob 		; number of objects in game.
0002A3r 3               	sta z80_b 		; set up the loop counter.
0002A3r 3               skobj0:
0002A3r 3               	lda scno		; current room number.
0002A3r 3               	ldy #33
0002A3r 3               	cmp (z80_hl),y		; is object in here?
0002A3r 3               	bne :+
0002A3r 3               	jsr skobj1		; yes, check coordinates.
0002A3r 3               :
0002A3r 3               	clc			; point to next object in table.
0002A3r 3               	lda z80_l
0002A3r 3               	adc #39			; size of each object.
0002A3r 3               	sta z80_l
0002A3r 3               	bcc :+
0002A3r 3               	inc z80_h
0002A3r 3               :
0002A3r 3               	dec z80_b
0002A3r 3               	bne skobj0		; repeat for all objects.
0002A3r 3               
0002A3r 3               	lda #255		; end of list and nothing found, return 255.
0002A3r 3               	rts
0002A3r 3               
0002A3r 3               skobj1:
0002A3r 3               	ldy #34			; point to y coordinate.
0002A3r 3               	lda (z80_hl),y		; point to y coordinate.
0002A3r 3               	sec
0002A3r 3               	ldy #var_newY
0002A3r 3               	sbc (z80_ix),y 		; subtract sprite y.
0002A3r 3               	clc
0002A3r 3               	adc #15			; add sprite height minus one.
0002A3r 3               	cmp #31			; within range?
0002A3r 3               	bcs skobj2		; no, ignore object.
0002A3r 3               
0002A3r 3               	ldy #35			; point to x coordinate now.
0002A3r 3               	lda (z80_hl),y 		; get coordinate.
0002A3r 3               	sec
0002A3r 3               	ldy #var_newX
0002A3r 3               	sbc (z80_ix),y 		; subtract the sprite x.
0002A3r 3               	clc			; add sprite width minus one.
0002A3r 3               	adc #15
0002A3r 3               	cmp #31			; within range?
0002A3r 3               	bcs skobj2		; no, ignore object.
0002A3r 3               
0002A3r 3               	pla			; remove return address from stack.
0002A3r 3               	pla
0002A3r 3               
0002A3r 3               	lda numob 		; objects in game.
0002A3r 3               	sec
0002A3r 3               	sbc z80_b		; subtract loop counter.
0002A3r 3               skobj2:
0002A3r 3               	rts			; accumulator now points to object.
0002A3r 3               .endif
0002A3r 3               
0002A3r 3               ;---------------------------------------------------------------------
0002A3r 3               ; Spawn a new sprite.
0002A3r 3               ;---------------------------------------------------------------------
0002A3r 3               
0002A3r 3               spawn:
0002A3r 3  A9 rr        	lda #<sprtab		; sprite table.
0002A5r 3  85 rr        	sta z80_l
0002A7r 3  A9 rr        	lda #>sprtab
0002A9r 3  85 rr        	sta z80_h
0002ABr 3               numsp1:
0002ABr 3  A9 0C        	lda #NUMSPR		; number of sprites.
0002ADr 3  85 rr        	sta spcnt
0002AFr 3               spaw0:
0002AFr 3  A0 00        	ldy #var_Type
0002B1r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0002B3r 3  C9 FF        	cmp #255		; is it an unused slot?
0002B5r 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0002B7r 3               
0002B7r 3  18           	clc 			; point to next sprite in table.
0002B8r 3  A5 rr        	lda z80_l
0002BAr 3  69 11        	adc #TABSIZ		; size of each entry.
0002BCr 3  85 rr        	sta z80_l
0002BEr 3  90 02        	bcc :+
0002C0r 3  E6 rr        	inc z80_h
0002C2r 3               :
0002C2r 3  C6 rr        	dec spcnt		; one less iteration.
0002C4r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0002C6r 3               
0002C6r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0002C6r 3               
0002C6r 3               spaw1:
0002C6r 3  A5 rr        	lda z80_i		; address of original sprite.
0002C8r 3  48           	pha
0002C9r 3  A5 rr        	lda z80_x
0002CBr 3  48           	pha
0002CCr 3               
0002CCr 3  A5 rr        	lda z80_l		; store spawned sprite address.
0002CEr 3  85 rr        	sta spptr
0002D0r 3  A5 rr        	lda z80_h
0002D2r 3  85 rr        	sta spptr+1
0002D4r 3               
0002D4r 3  A5 rr        	lda z80_c
0002D6r 3  A0 00        	ldy #var_Type
0002D8r 3  91 rr        	sta (z80_hl),y 		; set the type.
0002DAr 3  A0 05        	ldy #var_newType
0002DCr 3  91 rr        	sta (z80_hl),y		; copy
0002DEr 3               
0002DEr 3  A5 rr        	lda z80_b
0002E0r 3  A0 01        	ldy #var_Image
0002E2r 3  91 rr        	sta (z80_hl),y		; set the image.
0002E4r 3  A0 06        	ldy #var_newImage
0002E6r 3  91 rr        	sta (z80_hl),y		; copy
0002E8r 3               
0002E8r 3  A9 00        	lda #0 				; frame zero.
0002EAr 3  A0 02        	ldy #var_Frame
0002ECr 3  91 rr        	sta (z80_hl),y		; set frame.
0002EEr 3  A0 07        	ldy #var_newFrame
0002F0r 3  91 rr        	sta (z80_hl),y		; copy
0002F2r 3               
0002F2r 3  A0 08        	ldy #8
0002F4r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0002F6r 3  A0 03        	ldy #3
0002F8r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002FAr 3  A0 08        	ldy #8
0002FCr 3  91 rr        	sta (z80_hl),y		; copy
0002FEr 3               
0002FEr 3  A0 09        	ldy #9
000300r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000302r 3  A0 04        	ldy #4
000304r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000306r 3  A0 09        	ldy #9
000308r 3  91 rr        	sta (z80_hl),y		; copy
00030Ar 3               
00030Ar 3  A0 0A        	ldy #10				; direction of original.
00030Cr 3  B1 rr        	lda (z80_ix),y
00030Er 3  91 rr        	sta (z80_hl),y		; direction
000310r 3               
000310r 3  A9 00        	lda #0
000312r 3  A0 0D        	ldy #var_jumpLo
000314r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000316r 3  C8           	iny
000317r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000319r 3  C8           	iny
00031Ar 3  91 rr        	sta (z80_hl),y		; reset parameter.
00031Cr 3  C8           	iny
00031Dr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00031Fr 3               rtssp:
00031Fr 3  A5 rr        	lda spptr			; address of new sprite.
000321r 3  85 rr        	sta z80_x
000323r 3  A5 rr        	lda spptr+1
000325r 3  85 rr        	sta z80_i
000327r 3               evis1:
000327r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
00032Ar 3               
00032Ar 3  A5 rr        	lda spptr 			; address of new sprite.
00032Cr 3  85 rr        	sta z80_x
00032Er 3  A5 rr        	lda spptr+1
000330r 3  85 rr        	sta z80_i
000332r 3               
000332r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000332r 3  A0 03        	ldy #var_Y
000334r 3  B1 rr        	lda (z80_hl), y		; old x coord
000336r 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
000338r 3  B0 03        	bcs :+				; yes, don't draw it.
00033Ar 3               
00033Ar 3  20 rr rr     	jsr sspria 			; display the new sprite.
00033Dr 3               :
00033Dr 3  68           	pla					; address of original sprite.
00033Er 3  85 rr        	sta z80_x
000340r 3  68           	pla
000341r 3  85 rr        	sta z80_i
000343r 3               
000343r 3  60           	rts
000344r 3               
000344r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000348r 3  30 30        
00034Ar 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00034Er 3  30 30        
000350r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000354r 3  30 30        
000356r 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000358r 3               
000358r 3               ;----------------------------------------------------
000358r 3               ; Check y-pos
000358r 3               ;----------------------------------------------------
000358r 3               
000358r 3               checkx:
000358r 3  A5 rr        	lda dispy		; y position.
00035Ar 3  C9 16        	cmp #22			; off screen?
00035Cr 3  B0 01        	bcs :+
00035Er 3  60           	rts			; no, it's okay.
00035Fr 3               :
00035Fr 3  68           	pla			; remove return address from stack.
000360r 3  85 rr        	sta z80_l
000362r 3  68           	pla
000363r 3  85 rr        	sta z80_h
000365r 3  60           	rts
000366r 3               
000366r 3               ;-----------------------------------------------
000366r 3               ; Displays the current high score.
000366r 3               ;-----------------------------------------------
000366r 3               
000366r 3               dhisc:
000366r 3  A9 rr        	lda #<hiscor 		; high score text.
000368r 3  8D rr rr     	sta dscor3+1
00036Br 3  8D rr rr     	sta bscor3+1
00036Er 3  A9 rr        	lda #>hiscor
000370r 3  8D rr rr     	sta dscor3+2
000373r 3  8D rr rr     	sta bscor3+2
000376r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000379r 3               
000379r 3               ;------------------------------------------------------
000379r 3               ; Displays the current score.
000379r 3               ;------------------------------------------------------
000379r 3               
000379r 3               dscor:
000379r 3  A9 rr        	lda #<score		; score text.
00037Br 3  8D rr rr     	sta dscor3+1
00037Er 3  8D rr rr     	sta bscor3+1
000381r 3  A9 rr        	lda #>score
000383r 3  8D rr rr     	sta dscor3+2
000386r 3  8D rr rr     	sta bscor3+2
000389r 3               dscor1:
000389r 3  8C rr rr     	sty tmpscr
00038Cr 3  20 rr rr     	jsr preprt		; set up font and print position.
00038Fr 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
000392r 3               
000392r 3               ;	lda #6			; digits to display.
000392r 3               ;	sta z80_b
000392r 3  A5 rr        	lda prtmod		; get print mode.
000394r 3  F0 03        	beq :+			; standard size text?
000396r 3  4C rr rr     	jmp bscor0		; no, show double-height.
000399r 3               :
000399r 3               dscor0:
000399r 3               ;	ldy #0
000399r 3               ;	lda (z80_hl),y 		; fetch character.
000399r 3  AC rr rr     	ldy tmpscr
00039Cr 3               dscor3:
00039Cr 3  B9 rr rr     	lda score,y
00039Fr 3  20 rr rr     	jsr pchar 		; display character.
0003A2r 3  E6 rr        	inc dispx		; move along x coordinate
0003A4r 3               
0003A4r 3               ;	inc z80_l		; next score column.
0003A4r 3               ;	bne :+
0003A4r 3               ;	inc z80_h
0003A4r 3               ;:
0003A4r 3  EE rr rr     	inc tmpscr
0003A7r 3  C6 rr        	dec z80_b
0003A9r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0003ABr 3               dscor2:
0003ABr 3  A5 rr        	lda dispx 		; set up display coordinates.
0003ADr 3  85 rr        	sta charx
0003AFr 3  A5 rr        	lda dispy
0003B1r 3  85 rr        	sta chary
0003B3r 3  60           	rts
0003B4r 3               
0003B4r 3  00           tmpscr:	.byte 0
0003B5r 3               ;------------------------------------------------------
0003B5r 3               ; Displays the current score in double-height characters.
0003B5r 3               ;
0003B5r 3               ; Input:
0003B5r 3               ;  B  = digit number
0003B5r 3               ;  HL = score string
0003B5r 3               ;------------------------------------------------------
0003B5r 3               
0003B5r 3               bscor0:
0003B5r 3               ;	ldy #0
0003B5r 3               
0003B5r 3               ;	lda (z80_hl),y 		; fetch character.
0003B5r 3  A4 rr        	ldy tmp
0003B7r 3               bscor3:
0003B7r 3  B9 rr rr     	lda score,y
0003BAr 3  20 rr rr     	jsr bchar 		; display big char.
0003BDr 3               
0003BDr 3               ;	inc z80_l 		; next score column.
0003BDr 3               ;	bne :+
0003BDr 3               ;	inc z80_h
0003BDr 3               ;:
0003BDr 3  E6 rr        	inc tmp
0003BFr 3  C6 rr        	dec z80_b
0003C1r 3  F0 03        	beq :+
0003C3r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0003C6r 3               :
0003C6r 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0003C9r 3               
0003C9r 3               ;-----------------------------------------------------
0003C9r 3               ; Adds number in the hl pair to the score.
0003C9r 3               ;-----------------------------------------------------
0003C9r 3               
0003C9r 3               addsc:
0003C9r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0003CBr 3  85 rr        	sta z80_e
0003CDr 3  A9 rr        	lda #>(score+1)
0003CFr 3  85 rr        	sta z80_d
0003D1r 3  A9 10        	lda #<10000		; amount to add each time.
0003D3r 3  85 rr        	sta z80_c
0003D5r 3  A9 27        	lda #>10000
0003D7r 3  85 rr        	sta z80_b
0003D9r 3  20 rr rr     	jsr incsc		; add to score.
0003DCr 3               
0003DCr 3  E6 rr        	inc z80_e		; thousands column.
0003DEr 3  D0 02        	bne :+
0003E0r 3  E6 rr        	inc z80_d
0003E2r 3               :
0003E2r 3  A9 E8        	lda #<1000		; amount to add each time.
0003E4r 3  85 rr        	sta z80_c
0003E6r 3  A9 03        	lda #>1000
0003E8r 3  85 rr        	sta z80_b
0003EAr 3  20 rr rr     	jsr incsc 		; add to score.
0003EDr 3               
0003EDr 3  E6 rr        	inc z80_e		; hundreds column.
0003EFr 3  D0 02        	bne :+
0003F1r 3  E6 rr        	inc z80_d
0003F3r 3               :
0003F3r 3  A9 64        	lda #<100		; amount to add each time.
0003F5r 3  85 rr        	sta z80_c
0003F7r 3  A9 00        	lda #>100
0003F9r 3  85 rr        	sta z80_b
0003FBr 3  20 rr rr     	jsr incsc		; add to score.
0003FEr 3               
0003FEr 3  E6 rr        	inc z80_e 		; tens column.
000400r 3  D0 02        	bne :+
000402r 3  E6 rr        	inc z80_d
000404r 3               :
000404r 3  A9 0A        	lda #<10		; amount to add each time.
000406r 3  85 rr        	sta z80_c
000408r 3  A9 00        	lda #>10
00040Ar 3  85 rr        	sta z80_b
00040Cr 3  20 rr rr     	jsr incsc 		; add to score.
00040Fr 3               
00040Fr 3  E6 rr        	inc z80_e		; units column.
000411r 3  D0 02        	bne :+
000413r 3  E6 rr        	inc z80_d
000415r 3               :
000415r 3  A9 01        	lda #<1			; units.
000417r 3  85 rr        	sta z80_c
000419r 3  A9 00        	lda #>1
00041Br 3  85 rr        	sta z80_b
00041Dr 3               incsc:
00041Dr 3  A5 rr        	lda z80_h		; store amount to add.
00041Fr 3  48           	pha
000420r 3  A5 rr        	lda z80_l
000422r 3  48           	pha
000423r 3               
000423r 3  38           	sec			; subtract from amount to add.
000424r 3  A5 rr        	lda z80_l
000426r 3  E5 rr        	sbc z80_c
000428r 3  85 rr        	sta z80_l
00042Ar 3  A5 rr        	lda z80_h
00042Cr 3  E5 rr        	sbc z80_b
00042Er 3  85 rr        	sta z80_h
000430r 3  90 14        	bcc incsc0		; too much, restore value.
000432r 3               
000432r 3  68           	pla			; delete the previous amount from the stack.
000433r 3  68           	pla
000434r 3               
000434r 3  A5 rr        	lda z80_d 		; store column position.
000436r 3  48           	pha
000437r 3  A5 rr        	lda z80_e
000439r 3  48           	pha
00043Ar 3  20 rr rr     	jsr incsc2		; do the increment.
00043Dr 3               
00043Dr 3  68           	pla			; restore column.
00043Er 3  85 rr        	sta z80_e
000440r 3  68           	pla
000441r 3  85 rr        	sta z80_d
000443r 3  4C rr rr     	jmp incsc		; repeat until all added.
000446r 3               
000446r 3               incsc0:
000446r 3  68           	pla			; restore previous value.
000447r 3  85 rr        	sta z80_l
000449r 3  68           	pla
00044Ar 3  85 rr        	sta z80_h
00044Cr 3  60           	rts
00044Dr 3               incsc2:
00044Dr 3  A0 00        	ldy #0
00044Fr 3  B1 rr        	lda (z80_de),y 		; get amount.
000451r 3  18           	clc
000452r 3  69 01        	adc #1			; add one to column.
000454r 3  91 rr        	sta (z80_de),y		; write new column total.
000456r 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000458r 3  B0 01        	bcs :+
00045Ar 3  60           	rts			; no, carry on.
00045Br 3               :
00045Br 3  A9 30        	lda #'0'		; make it zero.
00045Dr 3  91 rr        	sta (z80_de),y		; write new column total.
00045Fr 3  C6 rr        	dec z80_e		; back one column.
000461r 3  D0 02        	bne :+
000463r 3  C6 rr        	dec z80_d
000465r 3               :
000465r 3  4C rr rr     	jmp incsc2
000468r 3               
000468r 3               ;------------------------------------
000468r 3               ; Add bonus to score and reset bonus
000468r 3               ;------------------------------------
000468r 3               
000468r 3               addbo:
000468r 3  A2 05        	ldx #5			; last digit.
00046Ar 3  18           	clc
00046Br 3               addbo0:
00046Br 3  BD rr rr     	lda score,x		; get score.
00046Er 3  7D rr rr     	adc bonus,x		; add bonus.
000471r 3  38           	sec			; 0 to 18.
000472r 3  E9 30        	sbc #48
000474r 3  48           	pha
000475r 3  A9 30        	lda #'0'
000477r 3  9D rr rr     	sta bonus,x
00047Ar 3  68           	pla
00047Br 3  C9 3A        	cmp #58
00047Dr 3  90 03        	bcc addbo1
00047Fr 3  38           	sec
000480r 3  E9 0A        	sbc #10
000482r 3               addbo1:
000482r 3  9D rr rr     	sta score,x		; zeroise bonus.
000485r 3  CA           	dex			; next digit.
000486r 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000488r 3  60           	rts
000489r 3               
000489r 3               ;------------------------------------
000489r 3               ; Swap score and bonus.
000489r 3               ;------------------------------------
000489r 3               
000489r 3               swpsb:
000489r 3  A2 05        	ldx #5			; digits to add.
00048Br 3               swpsb0:
00048Br 3  BD rr rr     	lda score,x 		; get score digits.
00048Er 3  48           	pha			; save digit
00048Fr 3  BD rr rr     	lda bonus,x 		; get bonus digits.
000492r 3  9D rr rr     	sta score,x		; switch score-bonus
000495r 3  68           	pla
000496r 3  9D rr rr     	sta bonus,x
000499r 3  CA           	dex 			; repeat for all 6 digits.
00049Ar 3  10 EF        	bpl swpsb0
00049Cr 3  60           	rts
00049Dr 3               
00049Dr 3               ;----------------------------------------------------
00049Dr 3               ; Get print address.
00049Dr 3               ;----------------------------------------------------
00049Dr 3               
00049Dr 3               gprad:
00049Dr 3  98           	tya
00049Er 3  48           	pha
00049Fr 3               
00049Fr 3  A5 rr        	lda dispx 		; x coordinate.
0004A1r 3  85 rr        	sta scraddr
0004A3r 3  A9 00        	lda #0
0004A5r 3  85 rr        	sta scraddr+1
0004A7r 3  06 rr        	asl scraddr  		; multiply char by 16
0004A9r 3  26 rr        	rol scraddr+1
0004ABr 3  06 rr        	asl scraddr
0004ADr 3  26 rr        	rol scraddr+1
0004AFr 3  06 rr        	asl scraddr
0004B1r 3  26 rr        	rol scraddr+1
0004B3r 3  06 rr        	asl scraddr
0004B5r 3  26 rr        	rol scraddr+1
0004B7r 3               
0004B7r 3  A5 rr        	lda dispy		; y coordinate.
0004B9r 3  0A           	asl a
0004BAr 3  0A           	asl a
0004BBr 3  0A           	asl a			; multiply char by 8
0004BCr 3  A8           	tay
0004BDr 3               
0004BDr 3  18           	clc
0004BEr 3  A5 rr        	lda scraddr
0004C0r 3  79 00 07     	adc SCADTB_lb,y
0004C3r 3  85 rr        	sta scraddr
0004C5r 3  A5 rr        	lda scraddr+1
0004C7r 3  79 00 08     	adc SCADTB_hb,y
0004CAr 3  85 rr        	sta scraddr+1
0004CCr 3               
0004CCr 3  A5 rr        	lda prtmod		; Double line if bigtxt
0004CEr 3  F0 08        	beq noskip
0004D0r 3  A5 rr        	lda dispx
0004D2r 3  29 E0        	and #$e0
0004D4r 3  F0 02        	beq noskip
0004D6r 3  E6 rr        	inc scraddr+1
0004D8r 3               noskip:
0004D8r 3               
0004D8r 3  68           	pla
0004D9r 3  A8           	tay
0004DAr 3  60           	rts
0004DBr 3               ;--------------------------------------------------------------
0004DBr 3               ; Get property buffer address of char at (dispx, dispy) in hl.
0004DBr 3               ;
0004DBr 3               ; Output:
0004DBr 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
0004DBr 3               ;--------------------------------------------------------------
0004DBr 3               
0004DBr 3               pradd:
0004DBr 3  A5 rr        	lda dispy 		; y coordinate.
0004DDr 3  85 rr        	sta bufaddr
0004DFr 3  A9 00        	lda #0
0004E1r 3  85 rr        	sta bufaddr+1
0004E3r 3  06 rr        	asl bufaddr  		; multiply char by 32
0004E5r 3  26 rr        	rol bufaddr+1
0004E7r 3  06 rr        	asl bufaddr
0004E9r 3  26 rr        	rol bufaddr+1
0004EBr 3  06 rr        	asl bufaddr
0004EDr 3  26 rr        	rol bufaddr+1
0004EFr 3  06 rr        	asl bufaddr
0004F1r 3  26 rr        	rol bufaddr+1
0004F3r 3  06 rr        	asl bufaddr
0004F5r 3  26 rr        	rol bufaddr+1
0004F7r 3  18           	clc			; add address of MAP graphics.
0004F8r 3  A5 rr        	lda bufaddr
0004FAr 3  65 rr        	adc dispx
0004FCr 3  69 00        	adc #<MAP
0004FEr 3  85 rr        	sta bufaddr
000500r 3  A5 rr        	lda bufaddr+1
000502r 3  69 04        	adc #>MAP
000504r 3  85 rr        	sta bufaddr+1
000506r 3  60           	rts
000507r 3               
000507r 3               ;--------------------------------------------------------------
000507r 3               ; Get attribute address at (dispx, dispy).
000507r 3               ;
000507r 3               ; Output:
000507r 3               ;  bufaddr = COLOR + dispy*22 + dispx
000507r 3               ;--------------------------------------------------------------
000507r 3               
000507r 3               gaadd:
000507r 3  A5 rr        	lda dispy
000509r 3  4A           	lsr a
00050Ar 3  A8           	tay
00050Br 3  B9 55 0A     	lda COLATTTB_hb,y
00050Er 3  85 rr        	sta bufaddr+1
000510r 3  B9 4A 0A     	lda COLATTTB_lb,y
000513r 3  18           	clc
000514r 3  65 rr        	adc dispx
000516r 3  85 rr        	sta bufaddr
000518r 3  60           	rts
000519r 3               
000519r 3               ;----------------------------------------------
000519r 3               ; Print attributes, properties and pixels.
000519r 3               ;
000519r 3               ; Input:
000519r 3               ;  A	= tile number
000519r 3               ;----------------------------------------------
000519r 3               
000519r 3               pbpattr:			; entry PUTBLOCK command
000519r 3  A4 rr        	ldy charx
00051Br 3  84 rr        	sty dispx
00051Dr 3  A4 rr        	ldy chary
00051Fr 3  84 rr        	sty dispy
000521r 3               pattr:
000521r 3               .if aflag
000521r 3               	pha
000521r 3               	jsr wbloc		; save blockinfo
000521r 3               	pla
000521r 3               .endif
000521r 3               
000521r 3               pattr2:
000521r 3  85 rr        	sta z80_b		; store cell in b register for now.
000523r 3  AA           	tax
000524r 3  BD rr rr     	lda bprop,x 		; block properties.
000527r 3  85 rr        	sta z80_c
000529r 3  C9 08        	cmp #COLECT
00052Br 3  D0 04        	bne :+
00052Dr 3  A5 rr        	lda z80_b
00052Fr 3  85 rr        	sta colpatt
000531r 3               :
000531r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000534r 3  A5 rr        	lda z80_c
000536r 3  A0 00        	ldy #0
000538r 3  91 rr        	sta (bufaddr),y 	; write property.
00053Ar 3  A5 rr        	lda z80_b 		; restore cell.
00053Cr 3  4C rr rr     	jmp panp
00053Fr 3               ; Print attributes, no properties.
00053Fr 3               
00053Fr 3               ;colpatt:	.byte 0
00053Fr 3               
00053Fr 3               panp:
00053Fr 3  85 rr        	sta z80_e		; displacement in e.
000541r 3  A9 00        	lda #0
000543r 3  85 rr        	sta z80_d		; no high byte.
000545r 3  06 rr        	asl z80_e  		; multiply char by 8.
000547r 3  26 rr        	rol z80_d
000549r 3  06 rr        	asl z80_e
00054Br 3  26 rr        	rol z80_d
00054Dr 3  06 rr        	asl z80_e
00054Fr 3  26 rr        	rol z80_d
000551r 3  18           	clc
000552r 3  A5 rr        	lda z80_e
000554r 3  69 rr        	adc #<chgfx 		; address of graphics.
000556r 3  85 rr        	sta tileaddr
000558r 3  A5 rr        	lda z80_d
00055Ar 3  69 rr        	adc #>chgfx
00055Cr 3  85 rr        	sta tileaddr+1
00055Er 3               
00055Er 3  A6 rr        	ldx z80_b		; set colour attribute
000560r 3  BD rr rr     	lda bCol,x
000563r 3  48           	pha
000564r 3  20 rr rr     	jsr gaadd
000567r 3  A0 00        	ldy #0
000569r 3  68           	pla
00056Ar 3  91 rr        	sta (bufaddr),y
00056Cr 3               
00056Cr 3  20 rr rr     	jsr gprad 		; get screen address.
00056Fr 3  A2 07        	ldx #7			; number of pixel rows to write.
000571r 3               panp0:
000571r 3  A0 00        	ldy #0
000573r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
000575r 3               .if iflag
000575r 3               	eor #$ff		; Invert
000575r 3               .endif
000575r 3  BC rr rr     	ldy scrtab,x
000578r 3  91 rr        	sta (scraddr),y 	; copy to screen.
00057Ar 3  E6 rr        	inc tileaddr 		; next image byte.
00057Cr 3  D0 02        	bne :+
00057Er 3  E6 rr        	inc tileaddr+1
000580r 3               :
000580r 3  CA           	dex	 		; repeat for 8 pixel rows.
000581r 3  10 EE        	bpl panp0
000583r 3  E6 rr        	inc dispx 		; move along one.
000585r 3  E6 rr        	inc charx
000587r 3  60           	rts
000588r 3               
000588r 3               ;----------------------------------------------
000588r 3               ; Write block
000588r 3               ;----------------------------------------------
000588r 3               
000588r 3               .if aflag
000588r 3               wbloc:
000588r 3               	ldy #3
000588r 3               	sta (pbptr),y		; store block number
000588r 3               	dey
000588r 3               	lda dispx
000588r 3               	sta (pbptr),y		; write x position of block.
000588r 3               	dey
000588r 3               	lda dispy
000588r 3               	sta (pbptr),y		; write y position of block.
000588r 3               	dey
000588r 3               	lda scno
000588r 3               	sta (pbptr),y		; write screen.
000588r 3               	clc			; point to next free location
000588r 3               	lda pbptr
000588r 3               	adc #4
000588r 3               	sta pbptr
000588r 3               	bcc :+
000588r 3               	inc pbptr+1
000588r 3               :
000588r 3               	rts
000588r 3               .endif
000588r 3               
000588r 3               ;.if kflag
000588r 3               ;panp:
000588r 3               ;.endif
000588r 3               
000588r 3               ;----------------------------------------------
000588r 3               ; Print character pixels, no more.
000588r 3               ;
000588r 3               ; Input:
000588r 3               ;  A	= character to print
000588r 3               ;----------------------------------------------
000588r 3               
000588r 3               pchr:
000588r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
00058Br 3  E6 rr        	inc dispx		; move along one.
00058Dr 3  60           	rts
00058Er 3               
00058Er 3               ;----------------------------------------------------
00058Er 3               ; Shifter sprite routine for objects.
00058Er 3               ;----------------------------------------------------
00058Er 3               
00058Er 3               .if oflag
00058Er 3               sprit7:
00058Er 3               	lda z80_b
00058Er 3               	beq sprit0
00058Er 3               	sta z80_a
00058Er 3               sprit3:
00058Er 3               	lsr spr			; shift into position.
00058Er 3               	ror spr+1
00058Er 3               	ror spr+2
00058Er 3               	dec z80_a		; one less iteration.
00058Er 3               	bne sprit3
00058Er 3               sprit0:
00058Er 3               	rts 			; now apply to screen.
00058Er 3               .endif
00058Er 3               
00058Er 3               ;-----------------------------------------------------------
00058Er 3               ; Get room address.
00058Er 3               ;-----------------------------------------------------------
00058Er 3               
00058Er 3               groom:
00058Er 3  A6 rr        	ldx scno 		; screen number.
000590r 3  A0 00        	ldy #0
000592r 3               groomx:
000592r 3  A9 rr        	lda #<scdat 		; pointer to screens.
000594r 3  85 rr        	sta z80_l
000596r 3  A9 rr        	lda #>scdat
000598r 3  85 rr        	sta z80_h
00059Ar 3               groom1:
00059Ar 3  E0 00        	cpx #0			; is it the first one?
00059Cr 3  F0 15        	beq groom0 		; no more screens to skip.
00059Er 3               
00059Er 3  18           	clc
00059Fr 3  A5 rr        	lda z80_l
0005A1r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0005A4r 3  85 rr        	sta z80_l
0005A6r 3  C8           	iny			; point to high byte.
0005A7r 3  A5 rr        	lda z80_h
0005A9r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
0005ACr 3  85 rr        	sta z80_h
0005AEr 3  C8           	iny			; next address.
0005AFr 3               
0005AFr 3  CA           	dex 			; one less iteration.
0005B0r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
0005B3r 3               groom0:
0005B3r 3  AD rr rr     	lda numsc		; add displacement.
0005B6r 3  0A           	asl a
0005B7r 3  18           	clc			; add double displacement to address.
0005B8r 3  65 rr        	adc z80_l
0005BAr 3  85 rr        	sta z80_l
0005BCr 3  A5 rr        	lda z80_h
0005BEr 3  69 00        	adc #0
0005C0r 3  85 rr        	sta z80_h
0005C2r 3  60           	rts
0005C3r 3               
0005C3r 3               ;-----------------------------------------------------------
0005C3r 3               ; Draw present room.
0005C3r 3               ;-----------------------------------------------------------
0005C3r 3               
0005C3r 3               droom:
0005C3r 3  AD rr rr     	lda wintop 		; window top.
0005C6r 3  85 rr        	sta dispy		; set cursor y position.
0005C8r 3               droom2:
0005C8r 3  20 rr rr     	jsr groom 		; get address of current room.
0005CBr 3  A9 00        	lda #0	 		; zero in accumulator.
0005CDr 3  85 rr        	sta comcnt 		; reset compression counter.
0005CFr 3  AD rr rr     	lda winhgt 		; height of window.
0005D2r 3  85 rr        	sta rrow		; set row counter
0005D4r 3               droom0:
0005D4r 3  AD rr rr     	lda winlft 		; window left edge.
0005D7r 3  85 rr        	sta dispx 		; set cursor x position.
0005D9r 3  AD rr rr     	lda winwid 		; width of window.
0005DCr 3  85 rr        	sta rcol		; set column counter
0005DEr 3               droom1:
0005DEr 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
0005E1r 3               .if xflag
0005E1r 3               	jsr drwmeta
0005E1r 3               .else
0005E1r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
0005E4r 3               .endif
0005E4r 3  C6 rr        	dec rcol		; one less column.
0005E6r 3  D0 F6        	bne droom1 		; repeat for entire line.
0005E8r 3  E6 rr        	inc dispy		; move down one line.
0005EAr 3               .if xflag
0005EAr 3               	inc dispy		; move down one line.
0005EAr 3               .endif
0005EAr 3  C6 rr        	dec rrow 		; one less row.
0005ECr 3  D0 E6        	bne droom0 		; repeat for all rows.
0005EEr 3  60           	rts
0005EFr 3               
0005EFr 3               ;----------------------------------------------
0005EFr 3               ; Decompress bytes on-the-fly.
0005EFr 3               ;----------------------------------------------
0005EFr 3               
0005EFr 3               flbyt:
0005EFr 3  A5 rr        	lda comcnt 		; compression counter.
0005F1r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
0005F3r 3               
0005F3r 3  A0 00        	ldy #0
0005F5r 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
0005F7r 3  E6 rr        	inc z80_l 		; point to next cell.
0005F9r 3  D0 02        	bne :+
0005FBr 3  E6 rr        	inc z80_h
0005FDr 3               :
0005FDr 3  C9 FF        	cmp #255 		; is this byte a control code?
0005FFr 3  F0 01        	beq :+
000601r 3  60           	rts 			; no, this byte is uncompressed.
000602r 3               :
000602r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000604r 3  85 rr        	sta combyt 		; set up the type.
000606r 3  E6 rr        	inc z80_l 		; point to quantity.
000608r 3  D0 02        	bne :+
00060Ar 3  E6 rr        	inc z80_h
00060Cr 3               :
00060Cr 3  B1 rr        	lda (z80_hl),y 		; get quantity.
00060Er 3  E6 rr        	inc z80_l 		; point to next byte.
000610r 3  D0 02        	bne :+
000612r 3  E6 rr        	inc z80_h
000614r 3               :
000614r 3               flbyt1:
000614r 3  85 rr        	sta comcnt 		; store new quantity.
000616r 3  C6 rr        	dec comcnt		; one less.
000618r 3  A5 rr        	lda combyt 		; byte to expand.
00061Ar 3  60           	rts
00061Br 3               
00061Br 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00061Br 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
00061Br 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
00061Br 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00061Br 3               .if xflag
00061Br 3               drwmeta:
00061Br 3               	sta tmpblk
00061Br 3               	jsr pattr2
00061Br 3               
00061Br 3               	inc dispy
00061Br 3               	dec dispx
00061Br 3               	ldx tmpblk
00061Br 3               	beq :+
00061Br 3               	inx
00061Br 3               :
00061Br 3               	txa
00061Br 3               	jsr pattr2
00061Br 3               
00061Br 3               	ldx tmpblk
00061Br 3               	beq :+
00061Br 3               	inx
00061Br 3               	inx
00061Br 3               	inx
00061Br 3               :
00061Br 3               	txa
00061Br 3               	jsr pattr2
00061Br 3               
00061Br 3               	dec dispy
00061Br 3               	dec dispx
00061Br 3               	ldx tmpblk
00061Br 3               	beq :+
00061Br 3               	inx
00061Br 3               	inx
00061Br 3               :
00061Br 3               	txa
00061Br 3               	jsr pattr2
00061Br 3               	rts
00061Br 3               
00061Br 3               tmpblk:	.byte 0
00061Br 3               
00061Br 3               .endif
00061Br 3               
00061Br 3               ;------------------------------------------
00061Br 3               ; Ladder down check.
00061Br 3               ;
00061Br 3               ; Input:
00061Br 3               ;  IX = sprite pointer
00061Br 3               ;------------------------------------------
00061Br 3               
00061Br 3               .if lflag
00061Br 3               laddd:
00061Br 3               	ldy #9
00061Br 3               	lda (z80_ix),y		; x coordinate.
00061Br 3               	sta dispx
00061Br 3               
00061Br 3               	ldy #8
00061Br 3               	lda (z80_ix),y		; y coordinate.
00061Br 3               	and #254		; make it even.
00061Br 3               	sta (z80_ix),y 		; reset it.
00061Br 3               	clc 			; look down 16 pixels.
00061Br 3               numsp5:
00061Br 3               	adc #SPR_HGT
00061Br 3               	sta dispy		; coords in dispx,dispy.
00061Br 3               	jmp laddv
00061Br 3               
00061Br 3               ;------------------------------------------
00061Br 3               ; Ladder up check.
00061Br 3               ;
00061Br 3               ; Input:
00061Br 3               ;  IX = sprite pointer
00061Br 3               ;
00061Br 3               ; Output:
00061Br 3               ;  A  = 0 is ok, A <>0 is not ok
00061Br 3               ;------------------------------------------
00061Br 3               
00061Br 3               laddu:
00061Br 3               	ldy #9
00061Br 3               	lda (z80_ix),y		; x coordinate.
00061Br 3               	sta dispx
00061Br 3               
00061Br 3               	ldy #8
00061Br 3               	lda (z80_ix),y		; y coordinate.
00061Br 3               	and #254 		; make it even.
00061Br 3               	sta (z80_ix),y		; reset it.
00061Br 3               	clc 			; look 2 pixels above feet.
00061Br 3               numsp6:
00061Br 3               	adc #SPR_HGT-2
00061Br 3               	sta dispy		; coords in dispx,dispy.
00061Br 3               laddv:
00061Br 3               	jsr tstbl 		; get map address.
00061Br 3               	jsr ldchk 		; standard ladder check.
00061Br 3               	beq :+
00061Br 3               	rts 			; no way through.
00061Br 3               :
00061Br 3               	inc bufaddr 		; look right one cell.
00061Br 3               	bne :+
00061Br 3               	inc bufaddr+1
00061Br 3               :
00061Br 3               	jsr ldchk 		; do the check.
00061Br 3               	beq :+
00061Br 3               	rts 			; impassable.
00061Br 3               :
00061Br 3               	lda dispx 		; y coordinate.
00061Br 3               	and #7 			; position straddling block cells.
00061Br 3               	bne :+
00061Br 3               	rts 			; no more checks needed.
00061Br 3               :
00061Br 3               	inc bufaddr 		; look to third cell.
00061Br 3               	bne :+
00061Br 3               	inc bufaddr+1
00061Br 3               :
00061Br 3               	jsr ldchk 		; do the check.
00061Br 3               	rts  			; return with zero flag set accordingly.
00061Br 3               .endif
00061Br 3               
00061Br 3               ;---------------------------------------------------------
00061Br 3               ; Can go up check.
00061Br 3               ;
00061Br 3               ; Input:
00061Br 3               ;  IX = sprite pointer
00061Br 3               ;
00061Br 3               ; Output:
00061Br 3               ;  A  = 0 is ok, A <>0 is not ok
00061Br 3               ;---------------------------------------------------------
00061Br 3               
00061Br 3               cangu:
00061Br 3  A0 09        	ldy #9
00061Dr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00061Fr 3  85 rr        	sta dispx
000621r 3  A0 08        	ldy #8
000623r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000625r 3  38           	sec
000626r 3  E9 02        	sbc #2
000628r 3  85 rr        	sta dispy		; coords in dispx,dispy.
00062Ar 3  20 rr rr     	jsr tstbl 		; get map address.
00062Dr 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000630r 3  F0 01        	beq :+
000632r 3  60           	rts			; no way through.
000633r 3               :
000633r 3  E6 rr        	inc bufaddr		; look right one cell.
000635r 3  D0 02        	bne :+
000637r 3  E6 rr        	inc bufaddr+1
000639r 3               :
000639r 3  20 rr rr     	jsr lrchk 		; do the check.
00063Cr 3  F0 01        	beq :+
00063Er 3  60           	rts			; impassable.
00063Fr 3               :
00063Fr 3  A5 rr        	lda dispx		; x coordinate.
000641r 3  29 07        	and #7			; position straddling block cells.
000643r 3  D0 01        	bne :+
000645r 3  60           	rts			; no more checks needed.
000646r 3               :
000646r 3  E6 rr        	inc bufaddr		; look to third cell.
000648r 3  D0 02        	bne :+
00064Ar 3  E6 rr        	inc bufaddr+1
00064Cr 3               :
00064Cr 3  20 rr rr     	jsr lrchk		; do the check.
00064Fr 3  60           	rts 			; return with zero flag set accordingly.
000650r 3               
000650r 3               ;---------------------------------------------------------
000650r 3               ; Can go down check.
000650r 3               ;
000650r 3               ; Input:
000650r 3               ;  IX = sprite pointer
000650r 3               ;
000650r 3               ; Output:
000650r 3               ;  A  = 0 is ok, A <>0 is not ok
000650r 3               ;---------------------------------------------------------
000650r 3               
000650r 3               cangd:
000650r 3  A0 09        	ldy #9
000652r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000654r 3  85 rr        	sta dispx
000656r 3  A0 08        	ldy #8
000658r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00065Ar 3  18           	clc
00065Br 3               numsp3:
00065Br 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
00065Dr 3  85 rr        	sta dispy		; coords in dispx,dispy.
00065Fr 3  20 rr rr     	jsr tstbl 		; get map address.
000662r 3  20 rr rr     	jsr plchk 		; block, platform check.
000665r 3  F0 01        	beq :+
000667r 3  60           	rts			; no way through.
000668r 3               :
000668r 3  E6 rr        	inc bufaddr		; look right one cell.
00066Ar 3  D0 02        	bne :+
00066Cr 3  E6 rr        	inc bufaddr+1
00066Er 3               :
00066Er 3  20 rr rr     	jsr plchk		; block, platform check.
000671r 3  F0 01        	beq :+
000673r 3  60           	rts			; impassable.
000674r 3               :
000674r 3  A5 rr        	lda dispx		; x coordinate.
000676r 3  29 07        	and #7			; position straddling block cells.
000678r 3  D0 01        	bne :+
00067Ar 3  60           	rts			; no more checks needed.
00067Br 3               :
00067Br 3  E6 rr        	inc bufaddr		; look to third cell.
00067Dr 3  D0 02        	bne :+
00067Fr 3  E6 rr        	inc bufaddr+1
000681r 3               :
000681r 3  20 rr rr     	jsr plchk		; block, platform check.
000684r 3  60           	rts			; return with zero flag set accordingly.
000685r 3               
000685r 3               ;---------------------------------------------------------
000685r 3               ; Can go left check.
000685r 3               ;
000685r 3               ; Input:
000685r 3               ;  IX = sprite pointer
000685r 3               ;
000685r 3               ; Output:
000685r 3               ;  A  = 0 is ok, A <>0 is not ok
000685r 3               ;---------------------------------------------------------
000685r 3               
000685r 3               cangl:
000685r 3  A0 08        	ldy #8
000687r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000689r 3  85 rr        	sta dispy
00068Br 3  A0 09        	ldy #9
00068Dr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00068Fr 3  38           	sec
000690r 3  E9 02        	sbc #2			; look left 2 pixels.
000692r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000694r 3  4C rr rr     	jmp cangh		; test if we can go there.
000697r 3               
000697r 3               ;---------------------------------------------------------
000697r 3               ; Can go right check.
000697r 3               ;
000697r 3               ; Input:
000697r 3               ;  IX = sprite pointer
000697r 3               ;
000697r 3               ; Output:
000697r 3               ;  A  = 0 is ok, A <>0 is not ok
000697r 3               ;---------------------------------------------------------
000697r 3               
000697r 3               cangr:
000697r 3  A0 08        	ldy #8
000699r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00069Br 3  85 rr        	sta dispy
00069Dr 3  A0 09        	ldy #9
00069Fr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0006A1r 3  18           	clc
0006A2r 3  69 10        	adc #16			; look right 16 pixels.
0006A4r 3  85 rr        	sta dispx		; coords in dispx,dispy.
0006A6r 3               cangh:
0006A6r 3               cangh2:
0006A6r 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0006A8r 3  85 rr        	sta z80_b
0006AAr 3  A5 rr        	lda dispy		; y position.
0006ACr 3  29 07        	and #7			; does x straddle cells?
0006AEr 3  D0 02        	bne cangh0		; yes, loop counter is good.
0006B0r 3  C6 rr        	dec z80_b		; one less row to write.
0006B2r 3               cangh0:
0006B2r 3  20 rr rr     	jsr tstbl		; get map address.
0006B5r 3               cangh1:
0006B5r 3  20 rr rr     	jsr lrchk		; standard left/right check.
0006B8r 3  F0 01        	beq :+
0006BAr 3  60           	rts			; no way through.
0006BBr 3               :
0006BBr 3  48           	pha
0006BCr 3  18           	clc
0006BDr 3  A5 rr        	lda bufaddr
0006BFr 3  69 20        	adc #32		; look down.
0006C1r 3  85 rr        	sta bufaddr
0006C3r 3  90 02        	bcc :+
0006C5r 3  E6 rr        	inc bufaddr+1
0006C7r 3               :
0006C7r 3  68           	pla
0006C8r 3               
0006C8r 3  C6 rr        	dec z80_b
0006CAr 3  D0 E9        	bne cangh1
0006CCr 3  60           	rts
0006CDr 3               
0006CDr 3               ;-------------------------------------
0006CDr 3               ; Check left/right movement is okay.
0006CDr 3               ;
0006CDr 3               ; Input:
0006CDr 3               ;  bufaddr = MAP + x/8 + y/8*32
0006CDr 3               ;
0006CDr 3               ; Output:
0006CDr 3               ;  A  = 0 is ok, A <>0 is not ok
0006CDr 3               ;-------------------------------------
0006CDr 3               
0006CDr 3               lrchk:
0006CDr 3  A0 00        	ldy #0
0006CFr 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0006D1r 3  C9 02        	cmp #WALL 		; is it passable?
0006D3r 3  F0 0A        	beq lrchkx		; no.
0006D5r 3               
0006D5r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
0006D7r 3  F0 06        	beq lrchkx		; not passable.
0006D9r 3  A9 00        	lda #0
0006DBr 3  60           	rts
0006DCr 3               
0006DCr 3               ;--------------------------------------------------------------
0006DCr 3               ; Called by mmenu
0006DCr 3               ;--------------------------------------------------------------
0006DCr 3               
0006DCr 3               always:
0006DCr 3  A9 FF        	lda #255		; report it as okay.
0006DEr 3  60           	rts
0006DFr 3               
0006DFr 3               lrchkx:
0006DFr 3  A9 01        	lda #1 			; reset all bits.
0006E1r 3  60           	rts
0006E2r 3               
0006E2r 3               
0006E2r 3               ;--------------------------------------------------------------
0006E2r 3               ; Check platform or solid item is not in way.
0006E2r 3               ;
0006E2r 3               ; Input:
0006E2r 3               ;  bufaddr = MAP + x/8 + y/8*32
0006E2r 3               ;
0006E2r 3               ; Output:
0006E2r 3               ;  A  = 0 is ok, A <>0 is not ok
0006E2r 3               ;--------------------------------------------------------------
0006E2r 3               
0006E2r 3               plchk:
0006E2r 3  A0 00        	ldy #0
0006E4r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0006E6r 3  C9 02        	cmp #WALL 		; is it passable?
0006E8r 3  F0 F5        	beq lrchkx		; no.
0006EAr 3               .if pflag .or dflag
0006EAr 3               	cmp #FODDER		; fodder has to be dug.
0006EAr 3               	beq lrchkx		; not passable.
0006EAr 3               .endif
0006EAr 3  C9 01        	cmp #PLATFM		; platform is solid.
0006ECr 3  F0 03        	beq plchkx		; not passable.
0006EEr 3               .if lflag
0006EEr 3               	cmp #LADDER		; is it a ladder?
0006EEr 3               	beq lrchkx		; on ladder, deny movement.
0006EEr 3               .endif
0006EEr 3               plchk0:
0006EEr 3  A9 00        	lda #0			; report as ok
0006F0r 3  60           	rts
0006F1r 3               plchkx:
0006F1r 3  A5 rr        	lda dispy		; x coordinate.
0006F3r 3  29 07        	and #7			; position straddling blocks.
0006F5r 3  F0 E8        	beq lrchkx		; on platform, deny movement.
0006F7r 3  4C rr rr     	jmp plchk0
0006FAr 3               
0006FAr 3               ;--------------------------------------------------------------
0006FAr 3               ; Check ladder is available.
0006FAr 3               ;
0006FAr 3               ; Input:
0006FAr 3               ;  bufaddr = MAP + x/8 + y/8*32
0006FAr 3               ;
0006FAr 3               ; Output:
0006FAr 3               ;  A  = 0 is ok, A <>0 is not ok
0006FAr 3               ;--------------------------------------------------------------
0006FAr 3               
0006FAr 3               .if lflag
0006FAr 3               ldchk:
0006FAr 3               	ldy #0
0006FAr 3               	lda (bufaddr),y 	; fetch cell.
0006FAr 3               	cmp #LADDER 		; is it a ladder?
0006FAr 3               	beq ldchk1
0006FAr 3               	lda #1
0006FAr 3               	rts  			; return with zero flag set accordingly.
0006FAr 3               ldchk1:
0006FAr 3               	lda #0
0006FAr 3               	rts
0006FAr 3               .endif
0006FAr 3               
0006FAr 3               ;--------------------------------------------------------------
0006FAr 3               ; Get collectables.
0006FAr 3               ;--------------------------------------------------------------
0006FAr 3               
0006FAr 3               .if cflag
0006FAr 3               getcol:
0006FAr 3                       lda #COLECT             ; collectable blocks.
0006FAr 3                       sta z80_b
0006FAr 3                       jsr tded                ; test for collectable blocks.
0006FAr 3                       cmp z80_b               ; did we find one?
0006FAr 3                       beq :+
0006FAr 3                       rts                     ; none were found, job done.
0006FAr 3               :
0006FAr 3                       jsr gtblk               ; get block.
0006FAr 3                       jsr evnt20              ; collected block event.
0006FAr 3                       jmp getcol              ; repeat until none left.
0006FAr 3               
0006FAr 3               ; Get collectable block.
0006FAr 3               
0006FAr 3               gtblk:
0006FAr 3               	ldy #0
0006FAr 3               	lda (bufaddr),y
0006FAr 3               	sta z80_a
0006FAr 3                       lda #0
0006FAr 3                       sta (bufaddr),y		; make it empty now.
0006FAr 3               
0006FAr 3               	lda bufaddr		; set dispx
0006FAr 3               	and #31
0006FAr 3               	sta dispx
0006FAr 3               
0006FAr 3               	lda bufaddr+1		; Set dispy
0006FAr 3               	sec
0006FAr 3               	sbc #>MAP
0006FAr 3               	sta bufaddr+1
0006FAr 3               	asl bufaddr
0006FAr 3               	rol bufaddr+1
0006FAr 3               	asl bufaddr
0006FAr 3               	rol bufaddr+1
0006FAr 3               	asl bufaddr
0006FAr 3               	rol bufaddr+1
0006FAr 3               	lda bufaddr+1
0006FAr 3               	sta dispy
0006FAr 3               
0006FAr 3               	lda colpatt		; get blocknr
0006FAr 3               	sta z80_e		; displacement in e.
0006FAr 3               	lda #0
0006FAr 3               	sta z80_d		; no high byte.
0006FAr 3               	asl z80_e  		; multiply char by 8.
0006FAr 3               	rol z80_d
0006FAr 3               	asl z80_e
0006FAr 3               	rol z80_d
0006FAr 3               	asl z80_e
0006FAr 3               	rol z80_d
0006FAr 3               	clc
0006FAr 3               	lda z80_e
0006FAr 3               	adc #<chgfx 		; address of graphics.
0006FAr 3               	sta tileaddr
0006FAr 3               	lda z80_d
0006FAr 3               	adc #>chgfx
0006FAr 3               	sta tileaddr+1
0006FAr 3               
0006FAr 3               	jsr gprad 		; get screen address.
0006FAr 3               	ldx #7			; number of pixel rows to write.
0006FAr 3               gtblk0:
0006FAr 3               	ldy #0
0006FAr 3               	lda (tileaddr),y 	; get image byte.
0006FAr 3               	ldy scrtab,x
0006FAr 3               	eor (scraddr),y 	; XOR tile on screen
0006FAr 3               	sta (scraddr),y 	; copy to screen.
0006FAr 3               	inc tileaddr 		; next image byte.
0006FAr 3               	bne :+
0006FAr 3               	inc tileaddr+1
0006FAr 3               :
0006FAr 3               	dex	 		; repeat for 8 pixel rows.
0006FAr 3               	bpl gtblk0
0006FAr 3               	rts
0006FAr 3               .endif
0006FAr 3               
0006FAr 3               ;--------------------------------------------------------------
0006FAr 3               ; Touched deadly block check.
0006FAr 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0006FAr 3               ;
0006FAr 3               ; Input:
0006FAr 3               ;  IX = sprite address
0006FAr 3               ;
0006FAr 3               ; Output:
0006FAr 3               ;  A  = 0 is ok, A=5 is not ok
0006FAr 3               ;--------------------------------------------------------------
0006FAr 3               
0006FAr 3               tded:
0006FAr 3  A0 08        	ldy #8
0006FCr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0006FEr 3  85 rr        	sta dispy
000700r 3  C8           	iny
000701r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000703r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000705r 3  20 rr rr     	jsr tstbl		; get map address.
000708r 3  48           	pha
000709r 3  A9 1F        	lda #31			; default distance to next line down.
00070Br 3  85 rr        	sta z80_e
00070Dr 3  68           	pla
00070Er 3  C5 rr        	cmp z80_b		; is this the required block?
000710r 3  D0 01        	bne :+
000712r 3  60           	rts			; yes.
000713r 3               :
000713r 3  E6 rr        	inc bufaddr 		; next cell.
000715r 3  D0 02        	bne :+
000717r 3  E6 rr        	inc bufaddr+1
000719r 3               :
000719r 3  A0 00        	ldy #0
00071Br 3  B1 rr        	lda (bufaddr),y		; fetch type.
00071Dr 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
00071Fr 3  D0 01        	bne :+
000721r 3  60           	rts			; yes.
000722r 3               :
000722r 3  A5 rr        	lda dispx		; horizontal position.
000724r 3  85 rr        	sta z80_c 		; store column in c register.
000726r 3  29 07        	and #7			; is it straddling cells?
000728r 3  D0 03        	bne :+
00072Ar 3  4C rr rr     	jmp tded0		; no.
00072Dr 3               :
00072Dr 3  E6 rr        	inc bufaddr 		; last cell.
00072Fr 3  D0 02        	bne :+
000731r 3  E6 rr        	inc bufaddr+1
000733r 3               :
000733r 3  A0 00        	ldy #0
000735r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000737r 3  C5 rr        	cmp z80_b		; is this the block?
000739r 3  D0 01        	bne :+
00073Br 3  60           	rts			; yes.
00073Cr 3               :
00073Cr 3  C6 rr        	dec z80_e		; one less cell to next row down.
00073Er 3               tded0:
00073Er 3  18           	clc 			; point to next row.
00073Fr 3  A5 rr        	lda bufaddr
000741r 3  65 rr        	adc z80_e
000743r 3  85 rr        	sta bufaddr
000745r 3  90 02        	bcc :+
000747r 3  E6 rr        	inc bufaddr+1
000749r 3               :
000749r 3  A0 00        	ldy #0
00074Br 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00074Dr 3  C5 rr        	cmp z80_b		; is this fatal?
00074Fr 3  D0 01        	bne :+
000751r 3  60           	rts			; yes.
000752r 3               :
000752r 3  E6 rr        	inc bufaddr 		; next cell.
000754r 3  D0 02        	bne :+
000756r 3  E6 rr        	inc bufaddr+1
000758r 3               :
000758r 3  A0 00        	ldy #0
00075Ar 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00075Cr 3  C5 rr        	cmp z80_b		; is this fatal?
00075Er 3  D0 01        	bne :+
000760r 3  60           	rts			; yes.
000761r 3               :
000761r 3  A5 rr        	lda z80_c		; horizontal position.
000763r 3  29 07        	and #7			; is it straddling cells?
000765r 3  D0 03        	bne :+
000767r 3  4C rr rr     	jmp tded1 		; no.
00076Ar 3               :
00076Ar 3  E6 rr        	inc bufaddr		; last cell.
00076Cr 3  D0 02        	bne :+
00076Er 3  E6 rr        	inc bufaddr+1
000770r 3               :
000770r 3  A0 00        	ldy #0
000772r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000774r 3  C5 rr        	cmp z80_b		; is this fatal?
000776r 3  D0 01        	bne :+
000778r 3  60           	rts			; yes.
000779r 3               :
000779r 3               tded1:
000779r 3  A5 rr        	lda dispy		; vertical position.
00077Br 3  29 07        	and #7 			; is it straddling cells?
00077Dr 3  D0 01        	bne :+
00077Fr 3  60           	rts			; no, job done.
000780r 3               :
000780r 3  18           	clc			; point to next row.
000781r 3  A5 rr        	lda bufaddr
000783r 3  65 rr        	adc z80_e
000785r 3  85 rr        	sta bufaddr
000787r 3  90 02        	bcc :+
000789r 3  E6 rr        	inc bufaddr+1
00078Br 3               :
00078Br 3  A0 00        	ldy #0
00078Dr 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00078Fr 3  C5 rr        	cmp z80_b		; is this fatal?
000791r 3  D0 01        	bne :+
000793r 3  60           	rts			; yes.
000794r 3               :
000794r 3  E6 rr        	inc bufaddr		; next cell.
000796r 3  D0 02        	bne :+
000798r 3  E6 rr        	inc bufaddr+1
00079Ar 3               :
00079Ar 3  A0 00        	ldy #0
00079Cr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00079Er 3  C5 rr        	cmp z80_b		; is this fatal?
0007A0r 3  D0 01        	bne :+
0007A2r 3  60           	rts			; yes.
0007A3r 3               :
0007A3r 3  A5 rr        	lda z80_c		; horizontal position.
0007A5r 3  29 07        	and #7			; is it straddling cells?
0007A7r 3  D0 01        	bne :+
0007A9r 3  60           	rts			; no.
0007AAr 3               :
0007AAr 3  E6 rr        	inc bufaddr		; last cell.
0007ACr 3  D0 02        	bne :+
0007AEr 3  E6 rr        	inc bufaddr+1
0007B0r 3               :
0007B0r 3  A0 00        	ldy #0
0007B2r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
0007B4r 3  60           	rts 			; return with final type in accumulator.
0007B5r 3               
0007B5r 3               ;---------------------------------------------------
0007B5r 3               ; Fetch block type at (dispx, dispy).
0007B5r 3               ;
0007B5r 3               ; Output:
0007B5r 3               ;  A = block type
0007B5r 3               ;---------------------------------------------------
0007B5r 3               
0007B5r 3               tstbl:
0007B5r 3  A5 rr        	lda dispy 		; fetch y coord.
0007B7r 3  4A           	lsr a			; bufaddr = y/8
0007B8r 3  4A           	lsr a
0007B9r 3  4A           	lsr a
0007BAr 3               ;	sta chary
0007BAr 3               
0007BAr 3  85 rr        	sta bufaddr
0007BCr 3  A9 00        	lda #0
0007BEr 3  85 rr        	sta bufaddr+1
0007C0r 3               
0007C0r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0007C2r 3  26 rr        	rol bufaddr+1
0007C4r 3  06 rr        	asl bufaddr
0007C6r 3  26 rr        	rol bufaddr+1
0007C8r 3  06 rr        	asl bufaddr
0007CAr 3  26 rr        	rol bufaddr+1
0007CCr 3  06 rr        	asl bufaddr
0007CEr 3  26 rr        	rol bufaddr+1
0007D0r 3  06 rr        	asl bufaddr
0007D2r 3  26 rr        	rol bufaddr+1
0007D4r 3               
0007D4r 3  A5 rr        	lda dispx		; x/8
0007D6r 3  4A           	lsr a
0007D7r 3  4A           	lsr a
0007D8r 3  4A           	lsr a
0007D9r 3               ;	sta charx
0007D9r 3               
0007D9r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0007DAr 3  65 rr        	adc bufaddr
0007DCr 3  69 00        	adc #<MAP
0007DEr 3  85 rr        	sta bufaddr
0007E0r 3  A5 rr        	lda bufaddr+1
0007E2r 3  69 04        	adc #>MAP
0007E4r 3  85 rr        	sta bufaddr+1
0007E6r 3               
0007E6r 3  A0 00        	ldy #0
0007E8r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0007EAr 3  60           	rts
0007EBr 3               
0007EBr 3               ;-------------------------------------------------------------------
0007EBr 3               ; Jump - if we can.
0007EBr 3               ; Requires initial speed to be set up in accumulator prior to call.
0007EBr 3               ;
0007EBr 3               ; Input:
0007EBr 3               ;  IX = sprite address
0007EBr 3               ;-------------------------------------------------------------------
0007EBr 3               
0007EBr 3               jump:
0007EBr 3  A0 0D        	ldy #var_jumpLo
0007EDr 3  B1 rr        	lda (z80_ix),y		; jump table low.
0007EFr 3  A0 0E        	ldy #var_jumpHi
0007F1r 3  11 rr        	ora (z80_ix),y		; jump table high.
0007F3r 3  F0 01        	beq :+
0007F5r 3  60           	rts			; already in the air.
0007F6r 3               :
0007F6r 3  A9 rr        	lda #>jtab
0007F8r 3  A0 0E        	ldy #var_jumpHi
0007FAr 3  91 rr        	sta (z80_ix),y		; set jump high.
0007FCr 3  A9 rr        	lda #<jtab		; jump table start.
0007FEr 3  A0 0D        	ldy #var_jumpLo
000800r 3  91 rr        	sta (z80_ix),y		; set jump low.
000802r 3  60           	rts
000803r 3               
000803r 3               ; Jump table.
000803r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000803r 3               ;.align 32
000803r 3               ;jtab:
000803r 3               ;	.byte 248,250,252
000803r 3               ;	.byte 254,254,255
000803r 3               ;	.byte 255,255,0,0
000803r 3               ;	.byte 0,1,1,1,2,2
000803r 3               ;	.byte 4,6,8,8,8,99
000803r 3               
000803r 3               ;------------------------------------------------
000803r 3               ; Random numbers code.
000803r 3               ; Pseudo-random number generator, 8-bit.
000803r 3               ;
000803r 3               ; Output:
000803r 3               ;  RND = random number
000803r 3               ;------------------------------------------------
000803r 3               
000803r 3               random:
000803r 3  A5 rr        	lda seed
000805r 3  F0 05        	beq doEor
000807r 3  0A           	asl a
000808r 3  F0 04        	beq noEor
00080Ar 3  90 02        	bcc noEor
00080Cr 3  49 1D        doEor:	eor #$1d
00080Er 3  85 rr        noEor:	sta seed
000810r 3  60           	rts
000811r 3               
000811r 3               ;	lda seed		; get last random number.
000811r 3               ;	asl a
000811r 3               ;	asl a
000811r 3               ;	clc
000811r 3               ;	adc seed
000811r 3               ;	clc
000811r 3               ;	adc #$45
000811r 3               ;	sta seed		; store new seed.
000811r 3               ;	sta varrnd		; return number in variable.
000811r 3               ;	rts
000811r 3               
000811r 3               ;-------------------------------------------------------
000811r 3               ; Joystick and keyboard reading routines.
000811r 3               ;
000811r 3               ; contrl = 0, Keyboard
000811r 3               ;          1, JoyKeyb
000811r 3               ;          2, JoyMMC
000811r 3               ;
000811r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000811r 3               ;             ||||||||
000811r 3               ;             |||||||+> Right    KEY 0  - X
000811r 3               ;             ||||||+-> Left     KEY 1  - Z
000811r 3               ;             |||||+--> Down     KEY 2  - .
000811r 3               ;             ||||+---> Up       KEY 3  - ;
000811r 3               ;             |||+----> Fire1    KEY 4  - SPC
000811r 3               ;             ||+-----> Fire2    KEY 5  - Q
000811r 3               ;             |+------> Fire3    KEY 6  - P
000811r 3               ;             +-------> Not used
000811r 3               ;
000811r 3               ;                       Option1  KEY 7  - 1
000811r 3               ;                       Option2  KEY 8  - 2
000811r 3               ;                       Option3  KEY 9  - 3
000811r 3               ;                       Option4  KEY 10 - 4
000811r 3               ;-------------------------------------------------------
000811r 3               
000811r 3               joykey:
000811r 3  A5 rr        	lda contrl 		; control flag.
000813r 3  C9 01        	cmp #1
000815r 3  F0 1A        	beq joy1 		; scan joystick1
000817r 3  C9 02        	cmp #2
000819r 3  F0 1C        	beq joy2 		; scan joystick2
00081Br 3               
00081Br 3               ; Scan keyboard
00081Br 3               
00081Br 3  A9 00        	lda #0		 	; zero reading.
00081Dr 3  85 rr        	sta z80_e
00081Fr 3               
00081Fr 3  A0 06        	ldy #6	 		; address of last key.
000821r 3               joyke0:
000821r 3  B9 rr rr     	lda keys,y 		; get key from table.
000824r 3  20 rr rr     	jsr ktest		; being pressed?
000827r 3  26 rr        	rol z80_e 		; rotate into reading.
000829r 3               
000829r 3  88           	dey		 	; next key.
00082Ar 3  10 F5        	bpl joyke0 		; repeat for all keys.
00082Cr 3               joyret:
00082Cr 3  A5 rr        	lda z80_e
00082Er 3  85 rr        	sta joyval
000830r 3  60           	rts
000831r 3               
000831r 3               ; Scan joystick 1
000831r 3               
000831r 3               joy1:
000831r 3  20 rr rr     	jsr joy1scan
000834r 3  4C rr rr     	jmp joyret 		; store the value.
000837r 3               
000837r 3               ; Scan joystick 2
000837r 3               
000837r 3               joy2:
000837r 3  20 rr rr     	jsr joy2scan
00083Ar 3  4C rr rr     	jmp joyret 		; store the value.
00083Dr 3               
00083Dr 3               ;---------------------------------------------------------------
00083Dr 3               ; Display message.
00083Dr 3               ;
00083Dr 3               ; Input:
00083Dr 3               ;  A = message number
00083Dr 3               ;---------------------------------------------------------------
00083Dr 3               
00083Dr 3               dmsg:
00083Dr 3  AA           	tax
00083Er 3  A9 rr        	lda #<msgdat		; pointer to messages.
000840r 3  85 rr        	sta z80_l
000842r 3  A9 rr        	lda #>msgdat
000844r 3  85 rr        	sta z80_h
000846r 3  20 rr rr     	jsr getwrd		; get message number.
000849r 3               dmsg3:
000849r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
00084Cr 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
00084Fr 3  A5 rr        	lda prtmod		; print mode.
000851r 3  D0 47        	bne bmsg1		; no, double-height text.
000853r 3               dmsg0:
000853r 3  A5 rr        	lda z80_h		; store string pointer.
000855r 3  48           	pha
000856r 3  A5 rr        	lda z80_l
000858r 3  48           	pha
000859r 3               
000859r 3  A0 00        	ldy #0
00085Br 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
00085Dr 3  29 7F        	and #127		; remove any end marker.
00085Fr 3  C9 0D        	cmp #ASCII_NEWLINE
000861r 3  F0 24        	beq dmsg1
000863r 3  20 rr rr     	jsr pchar		; display character.
000866r 3  20 rr rr     	jsr nexpos 		; display position.
000869r 3  D0 03        	bne dmsg2		; not on a new line.
00086Br 3  20 rr rr     	jsr nexlin		; next line down.
00086Er 3               dmsg2:
00086Er 3  68           	pla			; retrieve string pointer
00086Fr 3  85 rr        	sta z80_l
000871r 3  68           	pla
000872r 3  85 rr        	sta z80_h
000874r 3               
000874r 3  A0 00        	ldy #0
000876r 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000878r 3  0A           	asl a  			; was it the end?
000879r 3  90 03        	bcc :+
00087Br 3  4C rr rr     	jmp dscor2		; yes, job done.
00087Er 3               :
00087Er 3  E6 rr        	inc z80_l		; next character to display.
000880r 3  D0 02        	bne :+
000882r 3  E6 rr        	inc z80_h
000884r 3               :
000884r 3  4C rr rr     	jmp dmsg0
000887r 3               dmsg1:
000887r 3  E6 rr        	inc dispy
000889r 3  A5 rr        	lda dispy
00088Br 3  C9 18        	cmp #24
00088Dr 3  90 04        	bcc dmsg4
00088Fr 3  A9 00        	lda #0
000891r 3  85 rr        	sta dispy
000893r 3               dmsg4:
000893r 3  A9 00        	lda #0
000895r 3  85 rr        	sta dispx
000897r 3  4C rr rr     	jmp dmsg2
00089Ar 3               
00089Ar 3               
00089Ar 3               ;----------------------------------------------------------
00089Ar 3               ; Display message in big text.
00089Ar 3               ;
00089Ar 3               ; Input:
00089Ar 3               ;  HL = string pointer
00089Ar 3               ;----------------------------------------------------------
00089Ar 3               
00089Ar 3               bmsg1:
00089Ar 3  A0 00        	ldy #0
00089Cr 3  B1 rr        	lda (z80_hl),y 		; get character to display.
00089Er 3  29 7F        	and #127		; only want 7 bits.
0008A0r 3  C9 0D        	cmp #ASCII_NEWLINE
0008A2r 3  F0 13        	beq bmsg2
0008A4r 3  20 rr rr     	jsr bchar 		; display big char.
0008A7r 3               bmsg3:
0008A7r 3  A0 00        	ldy #0
0008A9r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
0008ABr 3  48           	pha
0008ACr 3  E6 rr        	inc z80_l 		; next character in list.
0008AEr 3  D0 02        	bne :+
0008B0r 3  E6 rr        	inc z80_h
0008B2r 3               :
0008B2r 3  68           	pla
0008B3r 3  0A           	asl a  			; was terminator flag set?
0008B4r 3  90 E4        	bcc bmsg1		; no, keep going.
0008B6r 3               
0008B6r 3  60           	rts
0008B7r 3               bmsg2:
0008B7r 3  A9 00        	lda #0
0008B9r 3  85 rr        	sta dispx
0008BBr 3  E6 rr        	inc dispy
0008BDr 3  E6 rr        	inc dispy
0008BFr 3  A5 rr        	lda dispy
0008C1r 3  C9 17        	cmp #23
0008C3r 3  90 E2        	bcc bmsg3
0008C5r 3  A9 00        	lda #0
0008C7r 3  85 rr        	sta dispy
0008C9r 3  4C rr rr     	jmp bmsg3
0008CCr 3               
0008CCr 3               ;----------------------------------------------------------
0008CCr 3               ; Big character display.
0008CCr 3               ;
0008CCr 3               ; Input:
0008CCr 3               ;  A = character
0008CCr 3               ;----------------------------------------------------------
0008CCr 3               
0008CCr 3               bchar:
0008CCr 3  85 rr        	sta z80_e		; save char in lb
0008CEr 3  A9 00        	lda #0
0008D0r 3  85 rr        	sta z80_d		; reset hb
0008D2r 3               
0008D2r 3  06 rr        	asl z80_e 		; multiply char by 8.
0008D4r 3  26 rr        	rol z80_d
0008D6r 3  06 rr        	asl z80_e
0008D8r 3  26 rr        	rol z80_d
0008DAr 3  06 rr        	asl z80_e
0008DCr 3  26 rr        	rol z80_d		; de = a*8
0008DEr 3               
0008DEr 3  18           	clc			; de = #<(FONT-256) + a*8
0008DFr 3  A5 rr        	lda z80_e
0008E1r 3  69 rr        	adc #<(FONT-256) 		; address of font.
0008E3r 3  85 rr        	sta z80_e
0008E5r 3  A5 rr        	lda z80_d
0008E7r 3  69 rr        	adc #>(FONT-256)
0008E9r 3  85 rr        	sta z80_d
0008EBr 3               
0008EBr 3  20 rr rr     	jsr gaadd		; set colour attribute
0008EEr 3  AD rr rr     	lda fontcol
0008F1r 3  A0 00        	ldy #0
0008F3r 3  91 rr        	sta (bufaddr),y
0008F5r 3               
0008F5r 3  20 rr rr     	jsr gprad 		; get screen address.
0008F8r 3               
0008F8r 3  A2 00        	ldx #0			; height of character in font.
0008FAr 3               bchar0:
0008FAr 3  A0 00        	ldy #0
0008FCr 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
0008FEr 3               
0008FEr 3               .if iflag
0008FEr 3               	eor #$ff
0008FEr 3               .endif
0008FEr 3               
0008FEr 3  91 rr        	sta (scraddr),y
000900r 3  48           	pha
000901r 3  20 rr rr     	jsr nline 		; next line down.
000904r 3  68           	pla
000905r 3  91 rr        	sta (scraddr),y
000907r 3  20 rr rr     	jsr nline 		; next line down.
00090Ar 3               
00090Ar 3  18           	clc
00090Br 3  E6 rr        	inc z80_e 		; next line of font.
00090Dr 3  D0 02        	bne :+
00090Fr 3  E6 rr        	inc z80_d
000911r 3               :
000911r 3  E8           	inx
000912r 3  E0 08        	cpx #8
000914r 3  D0 E4        	bne bchar0
000916r 3               
000916r 3  20 rr rr     	jsr nexpos		; display position.
000919r 3  D0 05        	bne bchar2 		; not on a new line.
00091Br 3               bchar3:
00091Br 3  E6 rr        	inc dispy
00091Dr 3  20 rr rr     	jsr nexlin 		; next line check.
000920r 3               bchar2:
000920r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000923r 3               
000923r 3               
000923r 3               ;-------------------------------------------------
000923r 3               ; Display a character.
000923r 3               ;
000923r 3               ; Input:
000923r 3               ;  A = character
000923r 3               ;-------------------------------------------------
000923r 3               
000923r 3               achar:
000923r 3  85 rr        	sta z80_b 		; copy to b.
000925r 3  20 rr rr     	jsr preprt 		; get ready to print.
000928r 3  A5 rr        	lda z80_b		; character in accumulator.
00092Ar 3  A6 rr        	ldx prtmod 		; print mode.
00092Cr 3  F0 03        	beq :+
00092Er 3  4C rr rr     	jmp bchar 		; no, double-height text.
000931r 3               :
000931r 3  20 rr rr     	jsr pchar 		; display character.
000934r 3  20 rr rr     	jsr nexpos 		; display position.
000937r 3  F0 E2        	beq bchar3		; next line down.
000939r 3  4C rr rr     	jmp bchar2 		; tidy up.
00093Cr 3               
00093Cr 3               
00093Cr 3               ;-------------------------------------------------
00093Cr 3               ; Get next print column position.
00093Cr 3               ;-------------------------------------------------
00093Cr 3               
00093Cr 3               nexpos:
00093Cr 3  E6 rr        	inc dispx		; move along one position.
00093Er 3  A5 rr        	lda dispx 		; get coordinate.
000940r 3  C9 16        	cmp #22
000942r 3  D0 0E        	bne :+
000944r 3  A9 00        	lda #0
000946r 3  85 rr        	sta dispx
000948r 3  A5 rr        	lda prtmod
00094Ar 3  F0 06        	beq :+
00094Cr 3  20 rr rr     	jsr nexlin
00094Fr 3  4C rr rr     	jmp nexlin
000952r 3               :
000952r 3  60           	rts
000953r 3               
000953r 3               ;-------------------------------------------------
000953r 3               ; Get next print line position.
000953r 3               ;-------------------------------------------------
000953r 3               
000953r 3               nexlin:
000953r 3  E6 rr        	inc dispy 		; newline.
000955r 3  A5 rr        	lda dispy		; vertical position.
000957r 3  C9 16        	cmp #22			; past screen edge?
000959r 3  B0 01        	bcs :+
00095Br 3  60           	rts			; no, still okay.
00095Cr 3               :
00095Cr 3  A9 00        	lda #0			; restart at top.
00095Er 3  85 rr        	sta dispy
000960r 3  60           	rts
000961r 3               
000961r 3               ;--------------------------------------------------------
000961r 3               ; Pre-print preliminaries.
000961r 3               ;--------------------------------------------------------
000961r 3               
000961r 3               preprt:
000961r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000963r 3  8D rr rr     	sta grbase		; set up graphics base.
000966r 3  A9 rr        	lda #>(FONT-256)
000968r 3  8D rr rr     	sta grbase+1
00096Br 3               prescr:
00096Br 3  A5 rr        	lda charx 		; display coordinates.
00096Dr 3  85 rr        	sta dispx		; set up general coordinates.
00096Fr 3  A5 rr        	lda chary
000971r 3  85 rr        	sta dispy
000973r 3  60           	rts
000974r 3               
000974r 3               ;--------------------------------------------------------------
000974r 3               ; Get messagenr x in hl
000974r 3               ;
000974r 3               ; Input:
000974r 3               ;  HL = pointer to message list
000974r 3               ;  X  = message number.
000974r 3               ;--------------------------------------------------------------
000974r 3               
000974r 3               getwrd:
000974r 3  E0 00        	cpx #0
000976r 3  D0 01        	bne:+ 			; first word in list?
000978r 3  60           	rts 			; yep, don't search.
000979r 3               :
000979r 3  A0 00        	ldy #0
00097Br 3               getwd0:
00097Br 3  B1 rr        	lda (z80_hl),y
00097Dr 3  48           	pha
00097Er 3  E6 rr        	inc z80_l
000980r 3  D0 02        	bne :+
000982r 3  E6 rr        	inc z80_h
000984r 3               :
000984r 3  68           	pla
000985r 3  C9 80        	cmp #128		; found end?
000987r 3  30 F2        	bmi getwd0		; no, carry on.
000989r 3  CA           	dex			; until we have right number.
00098Ar 3  D0 EF        	bne getwd0
00098Cr 3  60           	rts
00098Dr 3               
00098Dr 3               ;-----------------------------------------------------------
00098Dr 3               ; Bubble sort.
00098Dr 3               ;-----------------------------------------------------------
00098Dr 3               
00098Dr 3               bsort:
00098Dr 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
00098Fr 3  85 rr        	sta qscnt
000991r 3               
000991r 3  A9 rr        	lda #<sprtab 		; sprite table.
000993r 3  85 rr        	sta z80_x
000995r 3  A9 rr        	lda #>sprtab
000997r 3  85 rr        	sta z80_i
000999r 3               bsort0:
000999r 3  A0 00        	ldy #0
00099Br 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
00099Dr 3  C9 FF        	cmp #255 		; is it switched off?
00099Fr 3  F0 30        	beq swemp		; yes, may need to switch another in here.
0009A1r 3               
0009A1r 3  A0 11        	ldy #TABSIZ
0009A3r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
0009A5r 3  C9 FF        	cmp #255 		; is it enabled?
0009A7r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
0009A9r 3               
0009A9r 3  A0 14        	ldy #TABSIZ+3
0009ABr 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0009ADr 3  A0 03        	ldy #3
0009AFr 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
0009B1r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0009B3r 3               bsort2:
0009B3r 3  18           	clc
0009B4r 3  A5 rr        	lda z80_x
0009B6r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0009B8r 3  85 rr        	sta z80_x
0009BAr 3  90 02        	bcc :+
0009BCr 3  E6 rr        	inc z80_i
0009BEr 3               :
0009BEr 3  C6 rr        	dec qscnt
0009C0r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0009C2r 3  60           	rts
0009C3r 3               
0009C3r 3               bsort1:
0009C3r 3  A0 11        	ldy #TABSIZ
0009C5r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
0009C7r 3  C9 FF        	cmp #255		; is it enabled?
0009C9r 3  F0 E8        	beq bsort2		; no, nothing to swap.
0009CBr 3  20 rr rr     	jsr swspr		; swap positions.
0009CEr 3  4C rr rr     	jmp bsort2
0009D1r 3               swemp:
0009D1r 3  A0 11        	ldy #TABSIZ
0009D3r 3  B1 rr        	lda (z80_ix),y		; next table entry.
0009D5r 3  C9 FF        	cmp #255		; is that one on?
0009D7r 3  F0 DA        	beq bsort2		; no, nothing to swap.
0009D9r 3  20 rr rr     	jsr swspr		; swap positions.
0009DCr 3  4C rr rr     	jmp bsort2
0009DFr 3               
0009DFr 3               ; Swap sprites.
0009DFr 3               
0009DFr 3               swspr:
0009DFr 3  A5 rr        	lda z80_x		; table address
0009E1r 3  85 rr        	sta z80_e		; copy to de pair.
0009E3r 3  85 rr        	sta z80_l		; copy to hl pair.
0009E5r 3  A5 rr        	lda z80_i
0009E7r 3  85 rr        	sta z80_h
0009E9r 3  85 rr        	sta z80_d
0009EBr 3               
0009EBr 3  18           	clc
0009ECr 3  A5 rr        	lda z80_l
0009EEr 3  69 11        	adc #TABSIZ		; distance to second entry.
0009F0r 3  85 rr        	sta z80_l
0009F2r 3  90 02        	bcc :+
0009F4r 3  E6 rr        	inc z80_h
0009F6r 3               :
0009F6r 3  A9 11        	lda #TABSIZ		; bytes to swap.
0009F8r 3  85 rr        	sta z80_b
0009FAr 3  A0 00        	ldy #0
0009FCr 3               swspr0:
0009FCr 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
0009FEr 3  48           	pha
0009FFr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000A01r 3  91 rr        	sta (z80_hl),y 		; copy to second.
000A03r 3  68           	pla
000A04r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000A06r 3               
000A06r 3  E6 rr        	inc z80_e 		; next byte.
000A08r 3  D0 02        	bne :+
000A0Ar 3  E6 rr        	inc z80_d
000A0Cr 3               :
000A0Cr 3  E6 rr        	inc z80_l 		; next byte.
000A0Er 3  D0 02        	bne :+
000A10r 3  E6 rr        	inc z80_h
000A12r 3               :
000A12r 3  C6 rr        	dec z80_b
000A14r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000A16r 3  60           	rts
000A17r 3               
000A17r 3               ;----------------------------------------------------
000A17r 3               ; Process sprites.
000A17r 3               ;----------------------------------------------------
000A17r 3               
000A17r 3               pspr:
000A17r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000A19r 3  85 rr        	sta sprptr
000A1Br 3               
000A1Br 3  A9 rr        	lda #<sprtab 		; sprite table.
000A1Dr 3  85 rr        	sta z80_x
000A1Fr 3  A9 rr        	lda #>sprtab
000A21r 3  85 rr        	sta z80_i
000A23r 3               pspr1:
000A23r 3  A0 00        	ldy #0
000A25r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000A27r 3  C9 09        	cmp #9 			; within range of sprite types?
000A29r 3  B0 03        	bcs :+
000A2Br 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000A2Er 3               :
000A2Er 3  18           	clc
000A2Fr 3  A5 rr        	lda z80_x
000A31r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000A33r 3  85 rr        	sta z80_x
000A35r 3  90 02        	bcc :+
000A37r 3  E6 rr        	inc z80_i		; next sprite.
000A39r 3               :
000A39r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000A3Br 3  D0 E6        	bne pspr1
000A3Dr 3  60           	rts
000A3Er 3               
000A3Er 3               pspr2:
000A3Er 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000A40r 3  85 rr        	sta ogptr
000A42r 3  A5 rr        	lda z80_i
000A44r 3  85 rr        	sta ogptr+1
000A46r 3  20 rr rr     	jsr pspr3		; do the routine.
000A49r 3               rtorg:
000A49r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000A4Br 3  85 rr        	sta z80_x
000A4Dr 3  A5 rr        	lda ogptr+1
000A4Fr 3  85 rr        	sta z80_i
000A51r 3               rtorg0:
000A51r 3  60           	rts
000A52r 3               
000A52r 3               pspr3:
000A52r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000A54r 3  85 rr        	sta z80_l
000A56r 3  A9 rr        	lda #>evtyp0
000A58r 3  85 rr        	sta z80_h
000A5Ar 3               pspr4:
000A5Ar 3  B1 rr        	lda (z80_ix),y
000A5Cr 3  0A           	asl a			; double accumulator.
000A5Dr 3  18           	clc
000A5Er 3  65 rr        	adc z80_l
000A60r 3  85 rr        	sta z80_l
000A62r 3  90 02        	bcc :+
000A64r 3  E6 rr        	inc z80_h
000A66r 3               :
000A66r 3  B1 rr        	lda (z80_hl),y
000A68r 3  85 rr        	sta z80_e 		; copy to de.
000A6Ar 3  48           	pha
000A6Br 3               
000A6Br 3  E6 rr        	inc z80_l 		; next byte of address.
000A6Dr 3  D0 02        	bne :+
000A6Fr 3  E6 rr        	inc z80_h
000A71r 3               :
000A71r 3  B1 rr        	lda (z80_hl),y 		; address high.
000A73r 3  85 rr        	sta z80_d
000A75r 3               
000A75r 3  48           	pha	 		; swap address into hl.
000A76r 3  A5 rr        	lda z80_h
000A78r 3  85 rr        	sta z80_d
000A7Ar 3  68           	pla
000A7Br 3  85 rr        	sta z80_h
000A7Dr 3  68           	pla
000A7Er 3  85 rr        	sta z80_l
000A80r 3  A5 rr        	lda z80_l
000A82r 3  85 rr        	sta z80_e
000A84r 3               
000A84r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000A87r 3               
000A87r 3               ; Address of each sprite type's routine.
000A87r 3               
000A87r 3  rr rr        evtyp0:	.word evnt00
000A89r 3  rr rr        evtyp1:	.word evnt01
000A8Br 3  rr rr        evtyp2:	.word evnt02
000A8Dr 3  rr rr        evtyp3:	.word evnt03
000A8Fr 3  rr rr        evtyp4:	.word evnt04
000A91r 3  rr rr        evtyp5:	.word evnt05
000A93r 3  rr rr        evtyp6:	.word evnt06
000A95r 3  rr rr        evtyp7:	.word evnt07
000A97r 3  rr rr        evtyp8:	.word evnt08
000A99r 3               
000A99r 3               ;--------------------------------------------------------------
000A99r 3               ; Display sprites.
000A99r 3               ;
000A99r 3               ; Input:
000A99r 3               ;  IX = sprite table
000A99r 3               ;--------------------------------------------------------------
000A99r 3               
000A99r 3               dspr:
000A99r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000A9Br 3  85 rr        	sta sprcnt
000A9Dr 3               
000A9Dr 3               dspr0:
000A9Dr 3  A0 00        	ldy #var_Type
000A9Fr 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000AA1r 3  C9 FF        	cmp #255 		; is it enabled?
000AA3r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000AA5r 3               dspr5:
000AA5r 3  A0 05        	ldy #var_newType
000AA7r 3  B1 rr        	lda (z80_ix),y 		; new type.
000AA9r 3  C9 FF        	cmp #255		; is it enabled?
000AABr 3  F0 03        	beq dspr2
000AADr 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000AB0r 3               dspr2:
000AB0r 3  A0 05        	ldy #var_newType
000AB2r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000AB4r 3  A0 00        	ldy #var_Type
000AB6r 3  91 rr        	sta (z80_ix),y
000AB8r 3  A0 06        	ldy #var_newImage
000ABAr 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000ABCr 3  A0 01        	ldy #var_Image
000ABEr 3  91 rr        	sta (z80_ix),y
000AC0r 3  A0 07        	ldy #var_newFrame
000AC2r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000AC4r 3  A0 02        	ldy #var_Frame
000AC6r 3  91 rr        	sta (z80_ix),y
000AC8r 3  A0 08        	ldy #var_newY
000ACAr 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000ACCr 3  A0 03        	ldy #var_Y
000ACEr 3  91 rr        	sta (z80_ix),y
000AD0r 3  A0 09        	ldy #var_newX
000AD2r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000AD4r 3  A0 04        	ldy #var_X
000AD6r 3  91 rr        	sta (z80_ix),y
000AD8r 3               
000AD8r 3  18           	clc
000AD9r 3  A5 rr        	lda z80_x
000ADBr 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000ADDr 3  85 rr        	sta z80_x
000ADFr 3  A5 rr        	lda z80_i
000AE1r 3  69 00        	adc #0
000AE3r 3  85 rr        	sta z80_i 		; next sprite.
000AE5r 3  C6 rr        	dec sprcnt
000AE7r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000AE9r 3  60           	rts
000AEAr 3               
000AEAr 3               dspr1:
000AEAr 3               	; _BEEB clipping code copied from CPC Engine
000AEAr 3  A0 03        	ldy #var_Y
000AECr 3  B1 rr        	lda (z80_ix), y		; old x coord
000AEEr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AF0r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000AF2r 3               
000AF2r 3  A0 05        	ldy #var_newType
000AF4r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000AF6r 3  C9 FF        	cmp #255		; is this enabled?
000AF8r 3  D0 06        	bne dspr4 		; yes, display both.
000AFAr 3               
000AFAr 3               dspr6:
000AFAr 3  20 rr rr     	jsr sspria 		; show single sprite.
000AFDr 3  4C rr rr     	jmp dspr2
000B00r 3               
000B00r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000B00r 3               
000B00r 3               dspr4:
000B00r 3               	; _BEEB clipping code copied from CPC Engine
000B00r 3  A0 08        	ldy #var_newY
000B02r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B04r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B06r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000B08r 3               
000B08r 3  A0 04        	ldy #var_X
000B0Ar 3  B1 rr        	lda (z80_ix),y		; old x.
000B0Cr 3  A0 09        	ldy #var_newX
000B0Er 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000B10r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000B12r 3               
000B12r 3  A0 03        	ldy #var_Y
000B14r 3  B1 rr        	lda (z80_ix),y		; old y.
000B16r 3  A0 08        	ldy #var_newY
000B18r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B1Ar 3  D0 17        	bne dspr7		; they differ, need to redraw.
000B1Cr 3               
000B1Cr 3  A0 02        	ldy #var_Frame
000B1Er 3  B1 rr        	lda (z80_ix),y 		; old frame.
000B20r 3  A0 07        	ldy #var_newFrame
000B22r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B24r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000B26r 3               
000B26r 3  A0 01        	ldy #var_Image
000B28r 3  B1 rr        	lda (z80_ix),y 		; old image.
000B2Ar 3  A0 06        	ldy #var_newImage
000B2Cr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B2Er 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000B30r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000B33r 3               dspr7:
000B33r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000B36r 3  4C rr rr     	jmp dspr2
000B39r 3               dspr3:
000B39r 3               	; _BEEB clipping code copied from CPC Engine
000B39r 3  A0 08        	ldy #var_newY
000B3Br 3  B1 rr        	lda (z80_ix), y		; old x coord
000B3Dr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B3Fr 3  90 03        	bcc :+			; no, continue
000B41r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000B44r 3               :
000B44r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000B47r 3  4C rr rr     	jmp dspr2
000B4Ar 3               
000B4Ar 3               ;-----------------------------------------
000B4Ar 3               ; Get sprite address calculations.
000B4Ar 3               ; gspran = new sprite, gsprad = old sprite.
000B4Ar 3               ;
000B4Ar 3               ; Input:
000B4Ar 3               ;  IX = sprite address
000B4Ar 3               ;-----------------------------------------
000B4Ar 3               
000B4Ar 3               gspran:
000B4Ar 3  A0 08        	ldy #var_newY
000B4Cr 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000B4Er 3  85 rr        	sta dispy
000B50r 3  A0 09        	ldy #var_newX
000B52r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000B54r 3  85 rr        	sta dispx
000B56r 3  A0 06        	ldy #var_newImage
000B58r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000B5Ar 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000B5Dr 3               
000B5Dr 3  A0 00        	ldy #0
000B5Fr 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B61r 3  A0 07        	ldy #var_newFrame
000B63r 3  18           	clc
000B64r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000B66r 3  4C rr rr     	jmp gspra0
000B69r 3               
000B69r 3               ;-----------------------------------------
000B69r 3               ; Calculate old sprite address
000B69r 3               ;
000B69r 3               ; Input:
000B69r 3               ;  IX = sprite address
000B69r 3               ;
000B69r 3               ; Output:
000B69r 3               ;  B  = right byte mask
000B69r 3               ;  C  = left byte mask
000B69r 3               ;  DE = spriteframe address
000B69r 3               ;  scraddr = screenaddress(dispx,dispy)
000B69r 3               ;-----------------------------------------
000B69r 3               
000B69r 3               gsprad:
000B69r 3  A0 03        	ldy #var_Y
000B6Br 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B6Dr 3  85 rr        	sta dispy
000B6Fr 3  A0 04        	ldy #var_X
000B71r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B73r 3  85 rr        	sta dispx
000B75r 3  A0 01        	ldy #var_Image
000B77r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000B79r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000B7Cr 3               
000B7Cr 3  A0 00        	ldy #0
000B7Er 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B80r 3  A0 02        	ldy #var_Frame
000B82r 3  18           	clc
000B83r 3  71 rr        	adc (z80_ix),y 		; add frame number.
000B85r 3               
000B85r 3               gspra0:
000B85r 3               .if rflag
000B85r 3               	sta z80_e		; multiply by 32.
000B85r 3               	lda #0
000B85r 3               	sta z80_d
000B85r 3               
000B85r 3               	asl z80_e
000B85r 3               	rol z80_d
000B85r 3               	asl z80_e
000B85r 3               	rol z80_d
000B85r 3               	asl z80_e
000B85r 3               	rol z80_d
000B85r 3               	asl z80_e
000B85r 3               	rol z80_d
000B85r 3               .if bflag
000B85r 3               	lda z80_e		; multiply by 48
000B85r 3               	sta tmp1
000B85r 3               	lda z80_d
000B85r 3               	sta tmp2
000B85r 3               .endif
000B85r 3               	asl z80_e
000B85r 3               	rol z80_d
000B85r 3               .if bflag
000B85r 3               	clc
000B85r 3               	lda z80_e
000B85r 3               	adc tmp1
000B85r 3               	sta z80_e
000B85r 3               	lda z80_d
000B85r 3               	adc tmp2
000B85r 3               	sta z80_d
000B85r 3               .endif
000B85r 3               .else
000B85r 3  4A           	lsr a	  		; multiply by 128.
000B86r 3  85 rr        	sta z80_d 		; store in d.
000B88r 3  85 rr        	sta tmp1
000B8Ar 3  A9 00        	lda #0
000B8Cr 3  6A           	ror a
000B8Dr 3  85 rr        	sta z80_e 		; got low byte.
000B8Fr 3  85 rr        	sta tmp2
000B91r 3               .if bflag
000B91r 3               	lsr tmp1		; multiply by 192
000B91r 3               	ror tmp2
000B91r 3               	clc
000B91r 3               	lda tmp2
000B91r 3               	adc z80_e
000B91r 3               	sta z80_e
000B91r 3               	lda tmp1
000B91r 3               	adc z80_d
000B91r 3               	sta z80_d
000B91r 3               .endif
000B91r 3               .endif
000B91r 3  18           	clc 			; address of play sprites.
000B92r 3  A5 rr        	lda z80_e
000B94r 3  69 rr        	adc #<sprgfx
000B96r 3  85 rr        	sta z80_e
000B98r 3  A5 rr        	lda z80_d
000B9Ar 3  69 rr        	adc #>sprgfx
000B9Cr 3  85 rr        	sta z80_d
000B9Er 3               
000B9Er 3  A5 rr        	lda dispx 		; y coordinate.
000BA0r 3  29 06        	and #6 			; position within byte boundary.
000BA2r 3  AA           	tax	 		; low byte of table displacement.
000BA3r 3               .if rflag
000BA3r 3               	stx sprshft
000BA3r 3               .else
000BA3r 3  0A           	asl a	  		; multiply by 32.
000BA4r 3  0A           	asl a  			; already a multiple
000BA5r 3  0A           	asl a  			; of 2, so just 4
000BA6r 3               .if bflag
000BA6r 3               	sta tmp1
000BA6r 3               	asl a  			; shifts needed.
000BA6r 3               	clc
000BA6r 3               	adc tmp1
000BA6r 3               .else
000BA6r 3  0A           	asl a  			; shifts needed.
000BA7r 3               .endif
000BA7r 3  18           	clc 			; add to sprite address.
000BA8r 3  65 rr        	adc z80_e
000BAAr 3  85 rr        	sta z80_e
000BACr 3  90 02        	bcc :+
000BAEr 3  E6 rr        	inc z80_d
000BB0r 3               :
000BB0r 3               .endif
000BB0r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000BB3r 3  85 rr        	sta z80_c 		; left mask.
000BB5r 3  BD rr rr     	lda spmask+1,x
000BB8r 3  85 rr        	sta z80_b 		; right mask.
000BBAr 3               ; Drop into screen address routine.
000BBAr 3  4C rr rr     	jmp scadd
000BBDr 3               
000BBDr 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000BC1r 3  0F F0 03 FC  
000BC5r 3               
000BC5r 3               
000BC5r 3               ;-----------------------------------------------------------
000BC5r 3               ; Animates a sprite.
000BC5r 3               ;
000BC5r 3               ; Input:
000BC5r 3               ;  IX = sprite address
000BC5r 3               ;  HL = last sprite address
000BC5r 3               ;-----------------------------------------------------------
000BC5r 3               
000BC5r 3               animsp:
000BC5r 3  25 rr        	and frmno
000BC7r 3  F0 01        	beq :+
000BC9r 3  60           	rts
000BCAr 3               :
000BCAr 3  A0 06        	ldy #var_newImage
000BCCr 3  B1 rr        	lda (z80_ix),y		; sprite image
000BCEr 3  20 rr rr     	jsr gfrm		; get frame data.
000BD1r 3               
000BD1r 3  E6 rr        	inc z80_l		; point to frames.
000BD3r 3  D0 02        	bne :+
000BD5r 3  E6 rr        	inc z80_h
000BD7r 3               :
000BD7r 3  A0 07        	ldy #var_newFrame
000BD9r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000BDBr 3  18           	clc
000BDCr 3  69 01        	adc #1			; next one along.
000BDEr 3  A0 00        	ldy #0
000BE0r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000BE2r 3  90 02        	bcc anims0		; no, not yet.
000BE4r 3  A9 00        	lda #0			; start at first frame.
000BE6r 3               anims0:
000BE6r 3  A0 07        	ldy #var_newFrame
000BE8r 3  91 rr        	sta (z80_ix),y		; new frame.
000BEAr 3  60           	rts
000BEBr 3               
000BEBr 3               ;--------------------------------------------------------------
000BEBr 3               ; Animate back
000BEBr 3               ;
000BEBr 3               ; Input:
000BEBr 3               ;  IX = sprite address
000BEBr 3               ;  HL = last sprite address
000BEBr 3               ;--------------------------------------------------------------
000BEBr 3               
000BEBr 3               animbk:
000BEBr 3  25 rr        	and frmno
000BEDr 3  F0 01        	beq :+
000BEFr 3  60           	rts
000BF0r 3               :
000BF0r 3  A0 06        	ldy #var_newImage
000BF2r 3  B1 rr        	lda (z80_ix),y		; sprite image.
000BF4r 3  20 rr rr     	jsr gfrm		; get frame data.
000BF7r 3               
000BF7r 3  E6 rr        	inc z80_l 		; point to frames.
000BF9r 3  D0 02        	bne :+
000BFBr 3  E6 rr        	inc z80_h
000BFDr 3               :
000BFDr 3  A0 07        	ldy #var_newFrame
000BFFr 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000C01r 3  F0 03        	beq :+
000C03r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000C06r 3               :
000C06r 3  A0 00        	ldy #0
000C08r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000C0Ar 3               rtanb0:
000C0Ar 3  38           	sec
000C0Br 3  E9 01        	sbc #1			; next one along.
000C0Dr 3  4C rr rr     	jmp anims0		; set new frame.
000C10r 3               
000C10r 3               ;--------------------------------------------------------------
000C10r 3               ; Check for collision with other sprite, strict enforcement.
000C10r 3               ;
000C10r 3               ; Input:
000C10r 3               ;  b		= sprite to test for
000C10r 3               ;  ix		= current sprite pointer
000C10r 3               ;
000C10r 3               ; global:	b
000C10r 3               ; local:	x,y,hl,de,skptr
000C10r 3               ; calls:	-
000C10r 3               ;--------------------------------------------------------------
000C10r 3               
000C10r 3               sktyp:
000C10r 3  A9 rr        	lda #<sprtab				; sprite table.
000C12r 3  85 rr        	sta z80_l
000C14r 3  A9 rr        	lda #>sprtab
000C16r 3  85 rr        	sta z80_h
000C18r 3               numsp2:
000C18r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000C1Ar 3  85 rr        	sta sktptr
000C1Cr 3               sktyp0:
000C1Cr 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000C1Er 3  85 rr        	sta skptr
000C20r 3  A5 rr        	lda z80_h
000C22r 3  85 rr        	sta skptr+1
000C24r 3               
000C24r 3  A0 00        	ldy #0
000C26r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000C28r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000C2Ar 3  F0 1D        	beq coltyp				; yes, we can use this one.
000C2Cr 3               sktyp1:
000C2Cr 3  18           	clc
000C2Dr 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000C2Fr 3  69 11        	adc #TABSIZ				; size of each entry.
000C31r 3  85 rr        	sta z80_l
000C33r 3  A5 rr        	lda skptr+1
000C35r 3  69 00        	adc #0
000C37r 3  85 rr        	sta z80_h
000C39r 3  C6 rr        	dec sktptr					; one less iteration.
000C3Br 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000C3Dr 3  A9 00        	lda #0					; default to ROM address - no sprite.
000C3Fr 3  85 rr        	sta z80_l
000C41r 3  85 rr        	sta z80_h
000C43r 3  85 rr        	sta skptr				; store pointer to sprite.
000C45r 3  85 rr        	sta skptr+1
000C47r 3               
000C47r 3  18           	clc					; don't return with zero flag set.
000C48r 3  60           	rts 					; didn't find one.
000C49r 3               
000C49r 3               coltyp:
000C49r 3  A0 00        	ldy #0
000C4Br 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000C4Dr 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000C4Fr 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000C51r 3               colty0:
000C51r 3  A0 09        	ldy #9					; distance to x position in table.
000C53r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000C55r 3  85 rr        	sta z80_e
000C57r 3  88           	dey
000C58r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000C5Ar 3  85 rr        	sta z80_d
000C5Cr 3               
000C5Cr 3               ; Drop into collision detection.
000C5Cr 3               
000C5Cr 3               colc16:
000C5Cr 3  A0 09        	ldy #9
000C5Er 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000C60r 3  38           	sec					; subtract x.
000C61r 3  E5 rr        	sbc z80_e
000C63r 3  B0 05        	bcs  colc1a 				; result is positive.
000C65r 3  49 FF        	eor #$ff				; make negative positive.
000C67r 3  18           	clc
000C68r 3  69 01        	adc #1
000C6Ar 3               colc1a:
000C6Ar 3  C9 10        	cmp #16 				; within x range?
000C6Cr 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000C6Er 3  85 rr        	sta z80_c				; store difference.
000C70r 3               
000C70r 3  A0 08        	ldy #8
000C72r 3  B1 rr        	lda (z80_ix),y				; y coord.
000C74r 3  38           	sec
000C75r 3  E5 rr        	sbc z80_d				; subtract y.
000C77r 3  B0 05        	bcs colc1b				; result is positive.
000C79r 3  49 FF        	eor #$ff				; make negative positive.
000C7Br 3  18           	clc
000C7Cr 3  69 01        	adc #1
000C7Er 3               colc1b:
000C7Er 3  C9 10        	cmp #16					; within y range?
000C80r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000C82r 3  18           	clc					; add x difference.
000C83r 3  65 rr        	adc z80_c
000C85r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000C87r 3  B0 02        	bcs :+
000C89r 3  38           	sec
000C8Ar 3  60           	rts 					; carry set if there's a collision.
000C8Br 3               :
000C8Br 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000C8Er 3               colty1:
000C8Er 3  A5 rr        	lda z80_x  				; compare the two.
000C90r 3  C5 rr        	cmp z80_l
000C92r 3  D0 09        	bne end_col
000C94r 3  A5 rr        	lda z80_i
000C96r 3  C5 rr        	cmp z80_h
000C98r 3  D0 03        	bne end_col
000C9Ar 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000C9Dr 3               end_col:
000C9Dr 3  4C rr rr     	jmp colty0
000CA0r 3               
000CA0r 3               ;-----------------------------------------------------------
000CA0r 3               ; Display number, left aligned
000CA0r 3               ;
000CA0r 3               ; Input:
000CA0r 3               ;  a		= number
000CA0r 3               ;
000CA0r 3               ; global:	-
000CA0r 3               ; local:	a,y,bc,hl,displ0
000CA0r 3               ; calls:	num2ch,dmsg3
000CA0r 3               ;-----------------------------------------------------------
000CA0r 3               
000CA0r 3               disply:
000CA0r 3  85 rr        	sta z80_a
000CA2r 3  A9 rr        	lda #<displ0				; display workspace.
000CA4r 3  85 rr        	sta z80_c
000CA6r 3  A9 rr        	lda #>displ0
000CA8r 3  85 rr        	sta z80_b
000CAAr 3  A5 rr        	lda z80_a
000CACr 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000CAFr 3               displ1:
000CAFr 3  C6 rr        	dec z80_c				; back one character.
000CB1r 3  A5 rr        	lda z80_c
000CB3r 3  C9 FF        	cmp #$ff
000CB5r 3  D0 02        	bne :+
000CB7r 3  C6 rr        	dec z80_b
000CB9r 3               :
000CB9r 3  A0 00        	ldy #0
000CBBr 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000CBDr 3  09 80        	ora #128				; insert end marker.
000CBFr 3  91 rr        	sta (z80_bc),y				; new value.
000CC1r 3               
000CC1r 3  A9 rr        	lda #<displ0				; display space.
000CC3r 3  85 rr        	sta z80_l
000CC5r 3  A9 rr        	lda #>displ0
000CC7r 3  85 rr        	sta z80_h
000CC9r 3  4C rr rr     	jmp dmsg3				; display the string.
000CCCr 3               
000CCCr 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000CD0r 3               
000CD0r 3               ;----------------------------------------------------------------
000CD0r 3               ; Initialise screen.
000CD0r 3               ;
000CD0r 3               ; global:	roomtb,scno
000CD0r 3               ; local:	-
000CD0r 3               ; calls:	tstcs
000CD0r 3               ;----------------------------------------------------------------
000CD0r 3               
000CD0r 3               initsc:
000CD0r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000CD3r 3  20 rr rr     	jsr tstsc 			; find displacement.
000CD6r 3  C9 FF        	cmp #255 			; is it valid?
000CD8r 3  F0 02        	beq init_end 			; no, it's rubbish.
000CDAr 3  85 rr        	sta scno			; store new room number.
000CDCr 3               init_end:
000CDCr 3  60           	rts
000CDDr 3               
000CDDr 3               ;----------------------------------------------------------------
000CDDr 3               ; Test screen.
000CDDr 3               ;
000CDDr 3               ; global:	-
000CDDr 3               ; local:	x
000CDDr 3               ; calls:	-
000CDDr 3               ;----------------------------------------------------------------
000CDDr 3               
000CDDr 3               tstsc:
000CDDr 3  85 rr        	sta tmproom
000CDFr 3  18           	clc
000CE0r 3  69 03        	adc #MAPWID 			; add width in case we"re negative.
000CE2r 3  AA           	tax 				; add displacement to map data.
000CE3r 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000CE6r 3  60           	rts
000CE7r 3               
000CE7r 3               ;--------------------------
000CE7r 3               ; Screen left.
000CE7r 3               ;--------------------------
000CE7r 3               
000CE7r 3               scrl:
000CE7r 3  AD rr rr     	lda roomtb 			; present room table pointer.
000CEAr 3  38           	sec
000CEBr 3  E9 01        	sbc #1				; room left.
000CEDr 3               scrl0:
000CEDr 3  20 rr rr     	jsr tstsc			; test screen.
000CF0r 3  C9 FF        	cmp #255			; is there a screen this way?
000CF2r 3  D0 01        	bne :+
000CF4r 3  60           	rts				; no, return to loop.
000CF5r 3               :
000CF5r 3  A5 rr        	lda tmproom			; restore room displacement.
000CF7r 3  8D rr rr     	sta roomtb			; new room table position.
000CFAr 3               scrl1:
000CFAr 3  20 rr rr     	jsr initsc 			; set new screen.
000CFDr 3  A9 02        	lda #2
000CFFr 3  85 rr        	sta restfl 			; set it.
000D01r 3  60           	rts
000D02r 3               scrr:
000D02r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D05r 3  18           	clc
000D06r 3  69 01        	adc #1				; room right.
000D08r 3  4C rr rr     	jmp scrl0
000D0Br 3               scru:
000D0Br 3  AD rr rr     	lda roomtb 			; room table pointer.
000D0Er 3  38           	sec
000D0Fr 3  E9 03        	sbc #MAPWID 			; room up.
000D11r 3  4C rr rr     	jmp scrl0
000D14r 3               scrd:
000D14r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D17r 3  18           	clc
000D18r 3  69 03        	adc #MAPWID 			; room down.
000D1Ar 3  4C rr rr     	jmp scrl0
000D1Dr 3               
000D1Dr 3               ;-----------------------------------------
000D1Dr 3               ; Jump to new screen.
000D1Dr 3               ;-----------------------------------------
000D1Dr 3               
000D1Dr 3               nwscr:
000D1Dr 3  A2 00        	ldx #0				; start of map data.
000D1Fr 3               nwscr0:
000D1Fr 3  DD rr rr     	cmp mapdat,x
000D22r 3  F0 06        	beq nwscr1			; have we found a match for screen?
000D24r 3  E8           	inx 				; next room.
000D25r 3  E0 50        	cpx #80				; zero room count, 80 to search.
000D27r 3  D0 F6        	bne nwscr0			; keep looking.
000D29r 3  60           	rts
000D2Ar 3               nwscr1:
000D2Ar 3  8E rr rr     	stx roomtb			; set the map position.
000D2Dr 3  4C rr rr     	jmp scrl1			; draw new room.
000D30r 3               
000D30r 3               
000D30r 3               ;----------------------------------------------------------
000D30r 3               ; Gravity processing.
000D30r 3               ;----------------------------------------------------------
000D30r 3               
000D30r 3               grav:
000D30r 3  A0 0D        	ldy #13
000D32r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D34r 3  85 rr        	sta z80_l
000D36r 3  A0 0E        	ldy #14
000D38r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D3Ar 3  85 rr        	sta z80_h
000D3Cr 3  05 rr        	ora z80_l			; merge in low byte.
000D3Er 3  D0 01        	bne :+
000D40r 3  60           	rts				; if neither is set, we're not in the air.
000D41r 3               :
000D41r 3  A0 00        	ldy #0
000D43r 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000D45r 3  85 rr        	sta z80_a
000D47r 3  C9 63        	cmp #99				; reached the end?
000D49r 3  D0 0C        	bne grav0			; no, continue.
000D4Br 3               grav2:
000D4Br 3  C6 rr        	dec z80_l			; go back to previous value.
000D4Dr 3  C9 FF        	cmp #$ff
000D4Fr 3  D0 02        	bne :+
000D51r 3  C6 rr        	dec z80_h
000D53r 3               :
000D53r 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000D55r 3  85 rr        	sta z80_a
000D57r 3               grav0:
000D57r 3  E6 rr        	inc z80_l			; point to next table entry.
000D59r 3  D0 02        	bne :+
000D5Br 3  E6 rr        	inc z80_h
000D5Dr 3               :
000D5Dr 3  A5 rr        	lda z80_l
000D5Fr 3  A0 0D        	ldy #13
000D61r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000D63r 3  A5 rr        	lda z80_h
000D65r 3  A0 0E        	ldy #14
000D67r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000D69r 3               grav1:
000D69r 3  A5 rr        	lda z80_a
000D6Br 3  D0 01        	bne :+				; any movement required?
000D6Dr 3  60           	rts				; no, not this time.
000D6Er 3               :
000D6Er 3  A5 rr        	lda z80_a
000D70r 3  C9 80        	cmp #128			; is it up or down?
000D72r 3  B0 15        	bcs gravu			; it's up.
000D74r 3               gravd:
000D74r 3  85 rr        	sta z80_b			; set pixels to move.
000D76r 3               gravd0:
000D76r 3  20 rr rr     	jsr cangd			; can we go down?
000D79r 3  D0 28        	bne gravst			; can't move down, so stop.
000D7Br 3  A0 08        	ldy #8
000D7Dr 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000D7Fr 3  18           	clc
000D80r 3  69 01        	adc #1
000D82r 3  91 rr        	sta (z80_ix),y
000D84r 3  C6 rr        	dec z80_b
000D86r 3  D0 EE        	bne gravd0
000D88r 3  60           	rts
000D89r 3               gravu:
000D89r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000D8Br 3  18           	clc
000D8Cr 3  69 01        	adc #1
000D8Er 3  85 rr        	sta z80_b			; set pixels to move.
000D90r 3               gravu0:
000D90r 3  20 rr rr     	jsr cangu			; can we go up?
000D93r 3  D0 6E        	bne ifalls			; can't move up, go down next.
000D95r 3  A0 08        	ldy #8
000D97r 3  B1 rr        	lda (z80_ix),y
000D99r 3  38           	sec
000D9Ar 3  E9 01        	sbc #1
000D9Cr 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000D9Er 3  C6 rr        	dec z80_b
000DA0r 3  D0 EE        	bne gravu0
000DA2r 3  60           	rts
000DA3r 3               gravst:
000DA3r 3  A0 0D        	ldy #var_jumpLo
000DA5r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000DA7r 3  85 rr        	sta z80_l
000DA9r 3  A0 0E        	ldy #var_jumpHi
000DABr 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000DADr 3  85 rr        	sta z80_h
000DAFr 3               
000DAFr 3  A9 00        	lda #0				; null value in pointer.
000DB1r 3  A0 0D        	ldy #var_jumpLo
000DB3r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000DB5r 3  C8           	iny
000DB6r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000DB8r 3               
000DB8r 3  A0 00        	ldy #0
000DBAr 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000DBCr 3  C9 63        	cmp #99				; is it the end marker?
000DBEr 3               evftf:
000DBEr 3  F0 01        	beq :+				; yes, fallen too far.
000DC0r 3  60           	rts
000DC1r 3               :
000DC1r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000DC4r 3               
000DC4r 3               ;------------------------------------------------
000DC4r 3               ; Initiate fall check.
000DC4r 3               ;------------------------------------------------
000DC4r 3               
000DC4r 3               ifall:
000DC4r 3  A0 0D        	ldy #var_jumpLo
000DC6r 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000DC8r 3  85 rr        	sta z80_l
000DCAr 3  A0 0E        	ldy #var_jumpHi
000DCCr 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000DCEr 3  85 rr        	sta z80_h			; high byte in accumulator.
000DD0r 3  05 rr        	ora z80_l			; merge in low byte.
000DD2r 3  F0 01        	beq :+
000DD4r 3  60           	rts				; if either is set, we're already in the air.
000DD5r 3               :
000DD5r 3  A0 09        	ldy #9
000DD7r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000DD9r 3  85 rr        	sta dispx
000DDBr 3  A0 08        	ldy #8
000DDDr 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000DDFr 3  18           	clc
000DE0r 3               numsp7:
000DE0r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000DE2r 3  85 rr        	sta dispy			; set up test coordinates.
000DE4r 3  20 rr rr     	jsr tstbl			; get map address.
000DE7r 3  20 rr rr     	jsr plchk			; block, platform check.
000DEAr 3  F0 01        	beq :+
000DECr 3  60           	rts				; it's solid, don't fall.
000DEDr 3               :
000DEDr 3  E6 rr        	inc bufaddr			; look right one cell.
000DEFr 3  20 rr rr     	jsr plchk			; block, platform check.
000DF2r 3  F0 01        	beq :+
000DF4r 3  60           	rts				; it's solid, don't fall.
000DF5r 3               :
000DF5r 3  A5 rr        	lda dispx			; y coordinate.
000DF7r 3  29 07        	and #7				; position straddling block cells.
000DF9r 3  F0 08        	beq ifalls			; no more checks needed.
000DFBr 3  E6 rr        	inc bufaddr			; look to third cell.
000DFDr 3  20 rr rr     	jsr plchk			; block, platform check.
000E00r 3  F0 01        	beq :+
000E02r 3  60           	rts				; it's solid, don't fall.
000E03r 3               :
000E03r 3               ifalls:
000E03r 3  A9 rr        	lda #<jtab			; jump table start.
000E05r 3  85 rr        	sta z80_l
000E07r 3  A9 rr        	lda #>jtab
000E09r 3  85 rr        	sta z80_h
000E0Br 3               ifal0:
000E0Br 3  E6 rr        	inc z80_l			; point to next value.
000E0Dr 3  D0 02        	bne :+
000E0Fr 3  E6 rr        	inc z80_h
000E11r 3               :
000E11r 3  A0 00        	ldy #0
000E13r 3  B1 rr        	lda (z80_hl),y			; fetch value.
000E15r 3  F0 F4        	beq ifal0			; no, get next value.
000E17r 3  C9 63        	cmp #99				; reached end of table?
000E19r 3  D0 01        	bne :+
000E1Br 3  60           	rts				; yes, don't fall.
000E1Cr 3               :
000E1Cr 3  C9 80        	cmp #128			; is it going up?
000E1Er 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000E20r 3               
000E20r 3  A0 0D        	ldy #13
000E22r 3  A5 rr        	lda z80_l
000E24r 3  91 rr        	sta (z80_ix),y 			; set jump low.
000E26r 3  A0 0E        	ldy #14
000E28r 3  A5 rr        	lda z80_h
000E2Ar 3  91 rr        	sta (z80_ix),y 			; set jump high.
000E2Cr 3  60           	rts
000E2Dr 3               
000E2Dr 3               
000E2Dr 3               ;----------------------------------------------------
000E2Dr 3               ; Get frame data for a particular sprite.
000E2Dr 3               ; Input:
000E2Dr 3               ;  a		= framenumer
000E2Dr 3               ; Output:
000E2Dr 3               ;  hl		= frame address
000E2Dr 3               ;
000E2Dr 3               ; global:	hl,frmptr
000E2Dr 3               ; local:	-
000E2Dr 3               ; calls:	-
000E2Dr 3               ;----------------------------------------------------
000E2Dr 3               
000E2Dr 3               gfrm:
000E2Dr 3  0A           	asl a	 		 	; multiple of 2.
000E2Er 3  18           	clc
000E2Fr 3  6D rr rr     	adc frmptr 			; frames used by game.
000E32r 3  85 rr        	sta z80_l
000E34r 3  AD rr rr     	lda frmptr+1
000E37r 3  69 00        	adc #0
000E39r 3  85 rr        	sta z80_h 			; point to frame start.
000E3Br 3  60           	rts
000E3Cr 3               
000E3Cr 3               ;----------------------------------------------------
000E3Cr 3               ; Find sprite list for current room.
000E3Cr 3               ;
000E3Cr 3               ; global:	hl
000E3Cr 3               ; local:	x,y
000E3Cr 3               ; calls:	-
000E3Cr 3               ;----------------------------------------------------
000E3Cr 3               
000E3Cr 3               sprlst:
000E3Cr 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000E3Er 3  85 rr        	sta z80_l
000E40r 3  A9 rr        	lda #>nmedat
000E42r 3  85 rr        	sta z80_h
000E44r 3  A6 rr        	ldx scno 			; screen number.
000E46r 3  D0 01        	bne sprls2 			; is it the first screen?
000E48r 3  60           	rts 				; yes, don't need to search data.
000E49r 3               sprls2:
000E49r 3  A0 00        	ldy #0
000E4Br 3               sprls1:
000E4Br 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000E4Dr 3  C9 FF        	cmp #255			; is it an end marker?
000E4Fr 3  F0 0E        	beq sprls0 			; yes, end of this room.
000E51r 3               
000E51r 3  18           	clc 				; point to next sprite in list.
000E52r 3  A5 rr        	lda z80_l
000E54r 3  69 04        	adc #NMESIZ
000E56r 3  85 rr        	sta z80_l
000E58r 3  90 02        	bcc :+
000E5Ar 3  E6 rr        	inc z80_h
000E5Cr 3               :
000E5Cr 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000E5Fr 3               sprls0:
000E5Fr 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000E61r 3  D0 02        	bne :+
000E63r 3  E6 rr        	inc z80_h
000E65r 3               :
000E65r 3  CA           	dex
000E66r 3  D0 E3        	bne sprls1 			; continue until room found.
000E68r 3  60           	rts
000E69r 3               
000E69r 3               
000E69r 3               ;----------------------------------------------------
000E69r 3               ; Clear all but a single player sprite.
000E69r 3               ;
000E69r 3               ; global:	-
000E69r 3               ; local:	x,y,ix
000E69r 3               ; calls:	-
000E69r 3               ;----------------------------------------------------
000E69r 3               
000E69r 3               nspr:
000E69r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E6Br 3  85 rr        	sta sprcnt
000E6Dr 3  A9 rr        	lda #<sprtab 			; sprite table.
000E6Fr 3  85 rr        	sta z80_x
000E71r 3  A9 rr        	lda #>sprtab
000E73r 3  85 rr        	sta z80_i
000E75r 3               nspr0:
000E75r 3  A0 00        	ldy #0 				; fetch sprite type.
000E77r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000E79r 3  F0 1A        	beq nspr1 			; yes, keep this one.
000E7Br 3               
000E7Br 3  A9 FF        	lda #255
000E7Dr 3  A0 00        	ldy #0 				; fetch sprite type.
000E7Fr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E81r 3  A0 05        	ldy #5
000E83r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000E85r 3               
000E85r 3  18           	clc	 			; next sprite.
000E86r 3  A5 rr        	lda z80_x
000E88r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E8Ar 3  85 rr        	sta z80_x
000E8Cr 3  90 02        	bcc :+
000E8Er 3  E6 rr        	inc z80_i
000E90r 3               :
000E90r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000E92r 3  D0 E1        	bne nspr0
000E94r 3  60           	rts
000E95r 3               nspr1:
000E95r 3  A9 FF        	lda #255
000E97r 3  A0 00        	ldy #0
000E99r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E9Br 3               
000E9Br 3  18           	clc	 			; point to next sprite.
000E9Cr 3  A5 rr        	lda z80_x
000E9Er 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000EA0r 3  85 rr        	sta z80_x
000EA2r 3  90 02        	bcc :+
000EA4r 3  E6 rr        	inc z80_i
000EA6r 3               :
000EA6r 3  C6 rr        	dec sprcnt	 			; one less to do.
000EA8r 3  D0 01        	bne nspr2
000EAAr 3  60           	rts
000EABr 3               nspr2:
000EABr 3  A9 FF        	lda #255
000EADr 3  A0 00        	ldy #0
000EAFr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EB1r 3  A0 05        	ldy #5
000EB3r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000EB5r 3               
000EB5r 3  18           	clc	 			; next sprite.
000EB6r 3  A5 rr        	lda z80_x
000EB8r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000EBAr 3  85 rr        	sta z80_x
000EBCr 3  90 02        	bcc :+
000EBEr 3  E6 rr        	inc z80_i
000EC0r 3               :
000EC0r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000EC2r 3  D0 E7        	bne nspr2
000EC4r 3  60           	rts
000EC5r 3               
000EC5r 3               ;----------------------------------------------------------
000EC5r 3               ; Two initialisation routines.
000EC5r 3               ; Initialise sprites - copy everything from list to table.
000EC5r 3               ;
000EC5r 3               ; global:	-
000EC5r 3               ; local:	x,y,ix
000EC5r 3               ; calls:	cpsp
000EC5r 3               ;----------------------------------------------------------
000EC5r 3               
000EC5r 3               ispr:
000EC5r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000EC7r 3  85 rr        	sta sprcnt
000EC9r 3  A9 rr        	lda #<sprtab			; sprite table.
000ECBr 3  85 rr        	sta z80_x
000ECDr 3  A9 rr        	lda #>sprtab
000ECFr 3  85 rr        	sta z80_i
000ED1r 3               ispr2:
000ED1r 3  A0 00        	ldy #0
000ED3r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000ED5r 3  C9 FF        	cmp #255 			; is it an end marker?
000ED7r 3  D0 01        	bne :+
000ED9r 3  60           	rts 				; yes, no more to do.
000EDAr 3               :
000EDAr 3               ispr1:
000EDAr 3  A0 00        	ldy #0
000EDCr 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000EDEr 3  C9 FF        	cmp #255 			; is it enabled yet?
000EE0r 3  D0 08        	bne ispr4			; yes, try another slot.
000EE2r 3               
000EE2r 3  A0 05        	ldy #5
000EE4r 3  B1 rr        	lda (z80_ix),y		 	; next type.
000EE6r 3  C9 FF        	cmp #255 			; is it enabled yet?
000EE8r 3  F0 10        	beq ispr3 			; no, process this one.
000EEAr 3               ispr4:
000EEAr 3  18           	clc 				; next sprite.
000EEBr 3  A5 rr        	lda z80_x
000EEDr 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000EEFr 3  85 rr        	sta z80_x
000EF1r 3  90 02        	bcc :+
000EF3r 3  E6 rr        	inc z80_i
000EF5r 3               :
000EF5r 3  C6 rr        	dec sprcnt
000EF7r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000EF9r 3  60           	rts  				; no more room in table.
000EFAr 3               ispr3:
000EFAr 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000EFDr 3  C6 rr        	dec sprcnt			; one less space in the table.
000EFFr 3  D0 D0        	bne ispr2
000F01r 3  60           	rts
000F02r 3               
000F02r 3               
000F02r 3               ;-----------------------------------------------------------------------
000F02r 3               ; Initialise sprites - but not player, we're keeping the old one.
000F02r 3               ;
000F02r 3               ; global:	-
000F02r 3               ; local:	x,y,ix
000F02r 3               ; calls:	cpsp
000F02r 3               ;-----------------------------------------------------------------------
000F02r 3               
000F02r 3               kspr:
000F02r 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000F04r 3  A9 rr        	lda #<sprtab 			; sprite table.
000F06r 3  85 rr        	sta z80_x
000F08r 3  A9 rr        	lda #>sprtab
000F0Ar 3  85 rr        	sta z80_i
000F0Cr 3               kspr2:
000F0Cr 3  A0 00        	ldy #0
000F0Er 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F10r 3  C9 FF        	cmp #255 			; is it an end marker?
000F12r 3  D0 01        	bne :+
000F14r 3  60           	rts 				; yes, no more to do.
000F15r 3               :
000F15r 3  C9 00        	cmp #0
000F17r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000F19r 3               
000F19r 3  18           	clc 				; next sprite.
000F1Ar 3  A5 rr        	lda z80_l
000F1Cr 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000F1Er 3  85 rr        	sta z80_l
000F20r 3  90 02        	bcc :+
000F22r 3  E6 rr        	inc z80_h
000F24r 3               :
000F24r 3  4C rr rr     	jmp kspr2
000F27r 3               kspr1:
000F27r 3  A0 00        	ldy #0 				; fetch sprite type.
000F29r 3  B1 rr        	lda (z80_ix),y
000F2Br 3  C9 FF        	cmp #255 			; is it enabled yet?
000F2Dr 3  D0 08        	bne kspr4 			; yes, try another slot.
000F2Fr 3               
000F2Fr 3  A0 05        	ldy #5 				; next type.
000F31r 3  B1 rr        	lda (z80_ix),y
000F33r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F35r 3  F0 0F        	beq kspr3 			; no, process this one.
000F37r 3               kspr4:
000F37r 3  18           	clc 				; next sprite.
000F38r 3  A5 rr        	lda z80_x
000F3Ar 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000F3Cr 3  85 rr        	sta z80_x
000F3Er 3  90 02        	bcc :+
000F40r 3  E6 rr        	inc z80_i
000F42r 3               :
000F42r 3  CA           	dex	 			; repeat for remaining sprites.
000F43r 3  D0 E2        	bne kspr1
000F45r 3  60           	rts  				; no more room in table.
000F46r 3               kspr3:
000F46r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000F49r 3  CA           	dex	 			; one less space in the table.
000F4Ar 3  D0 C0        	bne kspr2
000F4Cr 3  60           	rts
000F4Dr 3               
000F4Dr 3               ;----------------------------------------------
000F4Dr 3               ; Copy sprite from list to table.
000F4Dr 3               ;
000F4Dr 3               ; global:	hl,ix
000F4Dr 3               ; local:	y
000F4Dr 3               ; calls:	evnt09
000F4Dr 3               ;----------------------------------------------
000F4Dr 3               
000F4Dr 3               cpsp:
000F4Dr 3  A0 00        	ldy #0					; fetch byte from table.
000F4Fr 3  B1 rr        	lda (z80_hl),y
000F51r 3               	; y=var_Type
000F51r 3  91 rr        	sta (z80_ix),y			; set up type.
000F53r 3  A0 05        	ldy #var_newType
000F55r 3  91 rr        	sta (z80_ix),y 			; set up type.
000F57r 3               
000F57r 3  E6 rr        	inc z80_l 				; move to next byte.
000F59r 3  D0 02        	bne :+
000F5Br 3  E6 rr        	inc z80_h
000F5Dr 3               :
000F5Dr 3  A0 00        	ldy #0 					; fetch byte from table.
000F5Fr 3  B1 rr        	lda (z80_hl),y
000F61r 3  A0 06        	ldy #var_newImage
000F63r 3  91 rr        	sta (z80_ix),y			; set up image.
000F65r 3               
000F65r 3  E6 rr        	inc z80_l 				; move to next byte.
000F67r 3  D0 02        	bne :+
000F69r 3  E6 rr        	inc z80_h
000F6Br 3               :
000F6Br 3  A0 00        	ldy #0
000F6Dr 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
000F6Fr 3  A0 08        	ldy #var_newY
000F71r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F73r 3               
000F73r 3  A9 C8        	lda #200 				; set initial coordinate off screen.
000F75r 3  A0 03        	ldy #var_Y
000F77r 3  91 rr        	sta (z80_ix),y
000F79r 3               
000F79r 3  E6 rr        	inc z80_l 				; move to next byte.
000F7Br 3  D0 02        	bne :+
000F7Dr 3  E6 rr        	inc z80_h
000F7Fr 3               :
000F7Fr 3  A0 00        	ldy #0 					; fetch byte from table.
000F81r 3  B1 rr        	lda (z80_hl),y
000F83r 3  A0 09        	ldy #var_newX
000F85r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F87r 3               
000F87r 3  E6 rr        	inc z80_l 				; move to next byte.
000F89r 3  D0 02        	bne :+
000F8Br 3  E6 rr        	inc z80_h
000F8Dr 3               :
000F8Dr 3  A9 00        	lda #0					; zeroes in accumulator.
000F8Fr 3  A0 07        	ldy #var_newFrame 		; reset frame number.
000F91r 3  91 rr        	sta (z80_ix),y
000F93r 3  A0 0A        	ldy #var_Direction 		; reset direction.
000F95r 3  91 rr        	sta (z80_ix),y
000F97r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
000F99r 3  91 rr        	sta (z80_ix),y
000F9Br 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
000F9Dr 3  91 rr        	sta (z80_ix),y
000F9Fr 3               
000F9Fr 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
000FA1r 3  A0 10        	ldy #var_dataHi
000FA3r 3  91 rr        	sta (z80_ix),y
000FA5r 3               evis0:
000FA5r 3  A5 rr        	lda z80_i
000FA7r 3  48           	pha
000FA8r 3  A5 rr        	lda z80_x
000FAAr 3  48           	pha
000FABr 3  A5 rr        	lda z80_h
000FADr 3  48           	pha
000FAEr 3  A5 rr        	lda z80_l
000FB0r 3  48           	pha
000FB1r 3               
000FB1r 3  20 rr rr     	jsr evnt09 				; perform event.
000FB4r 3               
000FB4r 3  68           	pla
000FB5r 3  85 rr        	sta z80_l
000FB7r 3  68           	pla
000FB8r 3  85 rr        	sta z80_h
000FBAr 3  68           	pla
000FBBr 3  85 rr        	sta z80_x
000FBDr 3  68           	pla
000FBEr 3  85 rr        	sta z80_i
000FC0r 3               
000FC0r 3  18           	clc
000FC1r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
000FC3r 3  69 11        	adc #TABSIZ		 	; next sprite.
000FC5r 3  85 rr        	sta z80_x
000FC7r 3  90 02        	bcc :+
000FC9r 3  E6 rr        	inc z80_i
000FCBr 3               :
000FCBr 3  60           	rts
000FCCr 3               
000FCCr 3               
000FCCr 3               ;-------------------------------------
000FCCr 3               ; Clear the play area window.
000FCCr 3               ;-------------------------------------
000FCCr 3               
000FCCr 3               clw:
000FCCr 3  AD rr rr     	lda wintop			; get coordinates of window.
000FCFr 3  85 rr        	sta dispy			; put into dispx for calculation.
000FD1r 3  AD rr rr     	lda winlft
000FD4r 3  85 rr        	sta dispx
000FD6r 3               
000FD6r 3  AD rr rr     	lda winhgt			; height of window.
000FD9r 3  85 rr        	sta rrow			; copy to b register.
000FDBr 3               clw3:
000FDBr 3  AD rr rr     	lda winwid 			; width of window.
000FDEr 3  85 rr        	sta rcol
000FE0r 3               clw2:
000FE0r 3  20 rr rr     	jsr gprad 			; get print address.
000FE3r 3  A9 20        	lda #32
000FE5r 3  20 rr rr     	jsr pchar
000FE8r 3  E6 rr        	inc dispx			; next column.
000FEAr 3  C6 rr        	dec rcol			; one less to do.
000FECr 3  D0 F2        	bne clw2			; repeat for remaining columns.
000FEEr 3               
000FEEr 3  AD rr rr     	lda winlft			; get left edge.
000FF1r 3  85 rr        	sta dispx 			; reset x.
000FF3r 3  E6 rr        	inc dispy 			; next line down.
000FF5r 3               
000FF5r 3  C6 rr        	dec rrow
000FF7r 3  D0 E2        	bne clw3			; repeat down the screen.
000FF9r 3               
000FF9r 3  AD rr rr     	lda wintop			; get coordinates of window.
000FFCr 3  85 rr        	sta chary			; put into display position.
000FFEr 3  AD rr rr     	lda winlft
001001r 3  85 rr        	sta charx
001003r 3  60           	rts
001004r 3               
001004r 3               
001004r 3               ;----------------------------------------------------------
001004r 3               ; Effects code.
001004r 3               ; Ticker routine is called 25 times per second.
001004r 3               ;
001004r 3               ; txtini = text scroller address
001004r 3               ; txtscr = left text screen address
001004r 3               ; txtwid = scroller width
001004r 3               ; txtbit = 128
001004r 3               ; X      = message nr
001004r 3               ;----------------------------------------------------------
001004r 3               
001004r 3               .if sflag
001004r 3               
001004r 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
001004r 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
001004r 3               		.byte $00,$10,$20,$30,$40,$50
001004r 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
001004r 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
001004r 3               		.byte $01,$01,$01,$01,$01,$01
001004r 3               
001004r 3               scrly:
001004r 3               
001004r 3               ; Set scr_l = txtscr
001004r 3               
001004r 3               	rts
001004r 3               	.word txtscr         	; set scr_l = left screen address.
001004r 3               	sta scr_l
001004r 3               	sta scr_r
001004r 3               	lda txtscr+1
001004r 3               	sta scr_l+1
001004r 3               	sta scr_r+1
001004r 3               
001004r 3               	stx xtmp		; save x
001004r 3               
001004r 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
001004r 3               
001004r 3               	ldx txtwid
001004r 3               	dex
001004r 3               	lda scrollpos_lb,x
001004r 3               	clc
001004r 3               	adc scr_r
001004r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
001004r 3               	bcc :+
001004r 3               	inc scr_r+1
001004r 3               :
001004r 3               	clc
001004r 3               	lda scrollpos_hb,x
001004r 3               	adc scr_r+1
001004r 3               	sta scr_r+1
001004r 3               
001004r 3               ; Scroll string
001004r 3               
001004r 3               	lda #0
001004r 3               	sta line_cnt		; Set line counter
001004r 3               scrly1:
001004r 3               	clc
001004r 3               	lda scr_r
001004r 3               	adc line_cnt
001004r 3               	sta scr_tmp
001004r 3               	lda scr_r+1
001004r 3               	sta scr_tmp+1
001004r 3               
001004r 3               	ldx txtwid		; set column counter
001004r 3               	dex
001004r 3               	ldy #0
001004r 3               	clc			; Reset pixel to be shifted in
001004r 3               scrly0:
001004r 3               	lda (scr_tmp),y
001004r 3               	rol a			; Shift screenbyte
001004r 3               	sta (scr_tmp),y		; store screenbyte
001004r 3               	php			; save carry
001004r 3               
001004r 3               	sec			; subtract 16 form screenaddress
001004r 3               	lda scr_tmp
001004r 3               	sbc #$10
001004r 3               	sta scr_tmp
001004r 3               	bcs :+
001004r 3               	dec scr_tmp+1
001004r 3               :
001004r 3               	plp			; restore carry
001004r 3               	dex			; previous column
001004r 3               	bpl scrly0		; repeat for all columns
001004r 3               
001004r 3               	inc line_cnt		; next line
001004r 3               	lda line_cnt
001004r 3               	cmp #8
001004r 3               	bne scrly1		; repeat for 8 lines
001004r 3               
001004r 3               ; Get next character in string
001004r 3               
001004r 3               	lda txtpos 		; get text pointer.
001004r 3               	sta scr_txt
001004r 3               	lda txtpos+1
001004r 3               	sta scr_txt+1
001004r 3               
001004r 3               	ldy #0
001004r 3               	lda (scr_txt),y 	; find character we're displaying.
001004r 3               	and #127 		; remove end marker bit if applicable.
001004r 3               	cmp #13			; is it newline?
001004r 3               	bne scrly5 		; no, it's okay.
001004r 3               	lda #32			; convert to a space instead.
001004r 3               scrly5:
001004r 3               	sta fntaddr		; calculate char address
001004r 3               	lda #0
001004r 3               	sta fntaddr+1
001004r 3               	asl fntaddr  		; multiply char by 8.
001004r 3               	rol fntaddr+1
001004r 3               	asl fntaddr
001004r 3               	rol fntaddr+1
001004r 3               	asl fntaddr
001004r 3               	rol fntaddr+1
001004r 3               	lda fntaddr
001004r 3               	clc
001004r 3               	adc #<(FONT-256)
001004r 3               	sta scrly3+1		; that's the low byte.
001004r 3               	lda fntaddr+1
001004r 3               	adc #>(FONT-256)
001004r 3               	sta scrly3+2		; add displacement.
001004r 3               
001004r 3               	ldy #0
001004r 3               scrly3:
001004r 3               	lda $3333,y		; get image of char line.
001004r 3               	and txtbit
001004r 3               	beq scrly2		; don't plot pixel
001004r 3               	lda (scr_r),y
001004r 3               	clc
001004r 3               	ora #1
001004r 3               	sta (scr_r),y		; plot pixel
001004r 3               scrly2:
001004r 3               	iny			; next line of char.
001004r 3               	cpy #8
001004r 3               	bne scrly3
001004r 3               
001004r 3               	lsr txtbit		; bit of text to display.
001004r 3               	bcs :+
001004r 3               	rts
001004r 3               :
001004r 3               	ldy #0
001004r 3               	lda (scr_txt),y 	; what was the character?
001004r 3               	asl a	  		; end of message?
001004r 3               	bcs scrly4
001004r 3               	inc txtpos
001004r 3               	bne :+
001004r 3               	inc txtpos+1
001004r 3               :
001004r 3               	jmp scrly6 		; not yet - continue.
001004r 3               scrly4:
001004r 3               	lda txtini 		; start of scrolling message.
001004r 3               	sta txtpos
001004r 3               	lda txtini+1
001004r 3               	sta txtpos+1
001004r 3               scrly6:
001004r 3               	lda #128
001004r 3               	sta txtbit
001004r 3               	ldx xtmp
001004r 3               	rts
001004r 3               
001004r 3               tmp_byte:	.byte 0
001004r 3               line_cnt:	.byte 0
001004r 3               
001004r 3               ;-------------------------------------------------------
001004r 3               ; Entry TICKER command
001004r 3               ;
001004r 3               ; Entry:
001004r 3               ;  z80_b = message nr
001004r 3               ;  z80_c = width
001004r 3               ;-------------------------------------------------------
001004r 3               
001004r 3               iscrly:
001004r 3               	jsr prescr 		; set up display position.
001004r 3               	lda #<msgdat 		; text messages.
001004r 3               	sta z80_l
001004r 3               	lda #>msgdat
001004r 3               	sta z80_h
001004r 3               	lda z80_c 		; width.
001004r 3               	sec
001004r 3               	sbc #1			; subtract one.
001004r 3               	cmp #32 		; is it between 1 and 32?
001004r 3               	bcc :+
001004r 3               	lda #$60
001004r 3               	jmp iscrl0		; no, disable messages.
001004r 3               :
001004r 3               	ldx z80_b		; message number.
001004r 3               	jsr getwrd 		; find message start.
001004r 3               
001004r 3               	lda z80_l		; set initial text position.
001004r 3               	sta txtini
001004r 3               	lda z80_h
001004r 3               	sta txtini+1
001004r 3               
001004r 3               	lda #$ad		; code for lda adrr
001004r 3               iscrl0:
001004r 3               	sta scrly		; enable/disable scrolling routine.
001004r 3               
001004r 3               	jsr prescr 		; set up display position.
001004r 3               	jsr gprad 		; get print address.
001004r 3               
001004r 3               	lda scraddr 		; set text screen address.
001004r 3               	sta txtscr
001004r 3               	lda scraddr+1
001004r 3               	sta txtscr+1
001004r 3               
001004r 3               	lda z80_c		; width.
001004r 3               	sta txtwid		; set width in working storage.
001004r 3               
001004r 3               	lda #128 		; start with leftmost bit.
001004r 3               	sta txtbit
001004r 3               
001004r 3               	jmp scrly4
001004r 3               .endif
001004r 3               
001004r 3               ;------------------------------------------------------------------
001004r 3               ; Dig routine, conditional assembly depending on dflag
001004r 3               ;------------------------------------------------------------------
001004r 3               .if dflag
001004r 3               dig:
001004r 3               	and #3
001004r 3               	beq digr		; dig right
001004r 3               	cmp #1
001004r 3               	beq digl		; dig left
001004r 3               	cmp #2
001004r 3               	beq digd		; dig down
001004r 3               
001004r 3               ; Dig up.
001004r 3               
001004r 3               digu:				; dig up
001004r 3               	ldy #8
001004r 3               	lda (z80_ix),y
001004r 3               	sec
001004r 3               	sbc #2
001004r 3               	sta dispy		; set y
001004r 3               
001004r 3               	iny
001004r 3               	lda (z80_ix),y
001004r 3               	sta dispx		; set x
001004r 3               	jmp digv
001004r 3               
001004r 3               ; Dig down.
001004r 3               
001004r 3               digd:
001004r 3               	ldy #9
001004r 3               	lda (z80_ix),y
001004r 3               	sta dispx		; set y
001004r 3               
001004r 3               	dey
001004r 3               	clc
001004r 3               	lda (z80_ix),y
001004r 3               	adc #16
001004r 3               	sta dispy		; set y
001004r 3               	jmp digv
001004r 3               
001004r 3               ; Dig left.
001004r 3               
001004r 3               digl:
001004r 3               	ldy #8
001004r 3               	lda (z80_ix),y
001004r 3               	sta dispy		; set y
001004r 3               
001004r 3               	iny
001004r 3               	lda (z80_ix),y
001004r 3               	sec
001004r 3               	sbc #2			; x=x-2
001004r 3               	sta dispx		; set x
001004r 3               	jmp digh
001004r 3               
001004r 3               ; Dig right.
001004r 3               
001004r 3               digr:
001004r 3               	ldy #8
001004r 3               	lda (z80_ix),y
001004r 3               	sta dispy		; set y
001004r 3               
001004r 3               	iny
001004r 3               	lda (z80_ix),y
001004r 3               	clc
001004r 3               	adc #16
001004r 3               	sta dispx		; set x+16
001004r 3               	jmp digh
001004r 3               
001004r 3               ; Vertical digging
001004r 3               
001004r 3               digv:
001004r 3               	jsr tstbl		; check blocktype in MAP
001004r 3               	jsr fdchk		; test if FODDER
001004r 3               
001004r 3               	clc
001004r 3               	lda dispx		; look 1 cell down
001004r 3               	adc #8
001004r 3               	sta dispx
001004r 3               	jsr tstbl		; check blocktype in MAP
001004r 3               	jsr fdchk
001004r 3               	lda dispx
001004r 3               	and #7
001004r 3               	bne :+
001004r 3               	rts
001004r 3               :
001004r 3               	clc
001004r 3               	lda dispx		; look 1 cell down
001004r 3               	adc #8
001004r 3               	sta dispx
001004r 3               	jsr tstbl		; check blocktype in MAP
001004r 3               	jmp fdchk
001004r 3               
001004r 3               ; Horizontal digging
001004r 3               
001004r 3               digh:
001004r 3               	jsr tstbl		; check blocktype in MAP
001004r 3               	jsr fdchk		; test if FODDER
001004r 3               
001004r 3               	clc
001004r 3               	lda dispy		; look 1 cell down
001004r 3               	adc #8
001004r 3               	sta dispy
001004r 3               	jsr tstbl		; check blocktype in MAP
001004r 3               	jsr fdchk
001004r 3               	lda dispy
001004r 3               	and #7
001004r 3               	bne :+
001004r 3               	rts
001004r 3               :
001004r 3               	clc
001004r 3               	lda dispy		; look 1 cell down
001004r 3               	adc #8
001004r 3               	sta dispy
001004r 3               	jsr tstbl		; check blocktype in MAP
001004r 3               	jmp fdchk
001004r 3               
001004r 3               digcnt:	.byte 0
001004r 3               
001004r 3               .endif
001004r 3               
001004r 3               ;------------------------------------------------------------------
001004r 3               ; Sprite table
001004r 3               ;------------------------------------------------------------------
001004r 3               
001004r 3               
001004r 3               ; ix+0  = type.
001004r 3               ; ix+1  = sprite image number.
001004r 3               ; ix+2  = frame.
001004r 3               ; ix+3  = y coord.
001004r 3               ; ix+4  = x coord.
001004r 3               
001004r 3               ; ix+5  = new type.
001004r 3               ; ix+6  = new image number.
001004r 3               ; ix+7  = new frame.
001004r 3               ; ix+8  = new y coord.
001004r 3               ; ix+9  = new x coord.
001004r 3               
001004r 3               ; ix+10 = direction.
001004r 3               ; ix+11 = parameter 1.
001004r 3               ; ix+12 = parameter 2.
001004r 3               ; ix+13 = jump pointer low.
001004r 3               ; ix+14 = jump pointer high.
001004r 3               ; ix+15 = data pointer low.
001004r 3               ; ix+16 = data pointer high.
001004r 3               
001004r 3               ; block NUMSPR * TABSIZ,255
001004r 3               
001004r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001008r 3  FF FF FF FF  
00100Cr 3  FF FF FF FF  
0010D0r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0010D4r 3  FF FF FF 00  
0010D8r 3  C0 78 00 00  
0010E1r 3  07           roomtb:	.byte 7                      ; start room map offset.
0010E2r 3               
0010E2r 3               setfgcol:
0010E2r 3               setbgcol:
0010E2r 3  60           	rts
0010E3r 3               
0010E3r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0010E3r 3               ; if USER has an argument it will be passed in the accumulator.
0010E3r 3               
0010E3r 3               user:
0010E3r 3               	.include "user.inc"
0010E3r 4               music_init	= $a900
0010E3r 4               music_on	= $a903
0010E3r 4               music_off	= $a906
0010E3r 4               music_play	= $a909
0010E3r 4               
0010E3r 4               api:
0010E3r 4  C9 00        	cmp #0
0010E5r 4  D0 03        	bne api1
0010E7r 4  4C 00 A9     	jmp music_init
0010EAr 4               api1:
0010EAr 4  C9 01        	cmp #1
0010ECr 4  D0 03        	bne api2
0010EEr 4  4C 03 A9     	jmp music_on
0010F1r 4               api2:
0010F1r 4  C9 02        	cmp #2
0010F3r 4  D0 03        	bne api3
0010F5r 4  4C 06 A9     	jmp music_off
0010F8r 4               api3:
0010F8r 4  C9 03        	cmp #3
0010FAr 4  D0 03        	bne snd_1
0010FCr 4  4C 09 A9     	jmp music_play
0010FFr 4               snd_1:
0010FFr 4  C9 05        	cmp #5
001101r 4  D0 06        	bne snd_2
001103r 4  A9 DE        	lda #222
001105r 4  8D rr rr     	sta SetSoundVars
001108r 4  60           	rts
001109r 4               snd_2:
001109r 4  C9 06        	cmp #6
00110Br 4  D0 06        	bne api_end
00110Dr 4  A9 DE        	lda #222
00110Fr 4  8D rr rr     	sta SetSoundVars+3
001112r 4  60           	rts
001113r 4               api_end:
001113r 4  60           	rts
001114r 4               
001114r 3               
001114r 3               ; Everything below here will be generated by the editors.
001114r 3               
001114r 3               
001114r 3  60                   rts
001115r 3               WINDOWTOP = 8
001115r 3               WINDOWLFT = 0
001115r 3               WINDOWHGT = 14
001115r 3               WINDOWWID = 22 ;a
001115r 3               MAPWID = 3
001115r 3  FF FF FF             .byte 255,255,255
001118r 3               mapdat:
001118r 3  FF 00 FF             .byte 255,0,255
00111Br 3  FF FF FF             .byte 255,255,255
00111Er 3  01           stmap:  .byte 1
00111Fr 3               
00111Fr 3               evnt00:
00111Fr 3  60                   rts
001120r 3               evnt01:
001120r 3  60                   rts
001121r 3               evnt02:
001121r 3  60                   rts
001122r 3               evnt03:
001122r 3  60                   rts
001123r 3               evnt04:
001123r 3  60                   rts
001124r 3               evnt05:
001124r 3  60                   rts
001125r 3               evnt06:
001125r 3  60                   rts
001126r 3               evnt07:
001126r 3  60                   rts
001127r 3               evnt08:
001127r 3  60                   rts
001128r 3               evnt09:
001128r 3  60                   rts
001129r 3               evnt10:
001129r 3  A0 07                ldy #7 	; KEY
00112Br 3  B9 rr rr             lda keys,y
00112Er 3  20 rr rr             jsr ktest
001131r 3  90 03                bcc :+
001133r 3  4C rr rr             jmp k00033
001136r 3               :
001136r 3  A9 01                lda #1
001138r 3  20 rr rr             jsr user
00113Br 3  A0 08        k00033: ldy #8 	; KEY
00113Dr 3  B9 rr rr             lda keys,y
001140r 3  20 rr rr             jsr ktest
001143r 3  90 03                bcc :+
001145r 3  4C rr rr             jmp k00065
001148r 3               :
001148r 3  A9 02                lda #2
00114Ar 3  20 rr rr             jsr user
00114Dr 3  A0 09        k00065: ldy #9 	; KEY
00114Fr 3  B9 rr rr             lda keys,y
001152r 3  20 rr rr             jsr ktest
001155r 3  90 03                bcc :+
001157r 3  4C rr rr             jmp k00097
00115Ar 3               :
00115Ar 3  A9 05                lda #5
00115Cr 3  20 rr rr             jsr user
00115Fr 3  A0 0A        k00097: ldy #10 	; KEY
001161r 3  B9 rr rr             lda keys,y
001164r 3  20 rr rr             jsr ktest
001167r 3  90 03                bcc :+
001169r 3  4C rr rr             jmp k00129
00116Cr 3               :
00116Cr 3  A9 06                lda #6
00116Er 3  20 rr rr             jsr user
001171r 3  60           k00129: rts
001172r 3               evnt11:
001172r 3  60                   rts
001173r 3               evnt12:
001173r 3  A9 00                lda #0 	; PAPER
001175r 3  0A                   asl a
001176r 3  0A                   asl a
001177r 3  0A                   asl a
001178r 3  0A                   asl a
001179r 3  85 rr                sta tmp
00117Br 3  AD 0F 90             lda RegF
00117Er 3  29 8F                and #%10001111
001180r 3  05 rr                ora tmp
001182r 3  8D 0F 90             sta RegF
001185r 3  A9 01                lda #1 	; INK
001187r 3  8D rr rr             sta fontcol
00118Ar 3  20 rr rr             jsr cls		; CLS
00118Dr 3  A9 00                lda #0		; AT
00118Fr 3  85 rr                sta chary
001191r 3  A9 00                lda #0
001193r 3  85 rr                sta charx
001195r 3  A9 01                lda #1		; PRINTMODE
001197r 3  85 rr                sta prtmod
001199r 3  A9 00                lda #0		; PRINT
00119Br 3  20 rr rr             jsr dmsg
00119Er 3  A9 00                lda #0		; PRINTMODE
0011A0r 3  85 rr                sta prtmod
0011A2r 3  A9 02                lda #2		; AT
0011A4r 3  85 rr                sta chary
0011A6r 3  A9 03                lda #3
0011A8r 3  85 rr                sta charx
0011AAr 3  A9 01                lda #1		; PRINT
0011ACr 3  20 rr rr             jsr dmsg
0011AFr 3  A9 03                lda #3		; AT
0011B1r 3  85 rr                sta chary
0011B3r 3  A9 03                lda #3
0011B5r 3  85 rr                sta charx
0011B7r 3  A9 02                lda #2		; PRINT
0011B9r 3  20 rr rr             jsr dmsg
0011BCr 3  A9 04                lda #4		; AT
0011BEr 3  85 rr                sta chary
0011C0r 3  A9 03                lda #3
0011C2r 3  85 rr                sta charx
0011C4r 3  A9 03                lda #3		; PRINT
0011C6r 3  20 rr rr             jsr dmsg
0011C9r 3  A9 05                lda #5		; AT
0011CBr 3  85 rr                sta chary
0011CDr 3  A9 03                lda #3
0011CFr 3  85 rr                sta charx
0011D1r 3  A9 04                lda #4		; PRINT
0011D3r 3  20 rr rr             jsr dmsg
0011D6r 3  60                   rts
0011D7r 3               evnt13:
0011D7r 3  A9 05                lda #5		; LOAD
0011D9r 3  20 rr rr             jsr loadfile
0011DCr 3  A9 00                lda #0
0011DEr 3  20 rr rr             jsr user
0011E1r 3  60                   rts
0011E2r 3               evnt14:
0011E2r 3  60                   rts
0011E3r 3               evnt15:
0011E3r 3  60                   rts
0011E4r 3               evnt16:
0011E4r 3  60                   rts
0011E5r 3               evnt17:
0011E5r 3  60                   rts
0011E6r 3               evnt18:
0011E6r 3  60                   rts
0011E7r 3               evnt19:
0011E7r 3  60                   rts
0011E8r 3               evnt20:
0011E8r 3  60                   rts
0011E9r 3  60           ptcusr: rts
0011EAr 3               data_start:
0011EAr 3               msgdat:
0011EAr 3  53 4F 55 4E          .byte "SOUND TES",212
0011EEr 3  44 20 54 45  
0011F2r 3  53 D4        
0011F4r 3  31 20 2D 20          .byte "1 - START MUSI",195
0011F8r 3  53 54 41 52  
0011FCr 3  54 20 4D 55  
001203r 3  32 20 2D 20          .byte "2 - STOP MUSI",195
001207r 3  53 54 4F 50  
00120Br 3  20 4D 55 53  
001211r 3  33 20 2D 20          .byte "3 - LASER SOUN",196
001215r 3  4C 41 53 45  
001219r 3  52 20 53 4F  
001220r 3  34 20 2D 20          .byte "4 - EXPLOSIO",206
001224r 3  45 58 50 4C  
001228r 3  4F 53 49 4F  
00122Dr 3  50 4C 41 59          .byte "PLAYER",177
001231r 3  45 52 B1     
001234r 3               nummsg:
001234r 3  06                   .byte 6
001235r 3               chgfx:
001235r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001239r 3  00 00 00 00  
00123Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001241r 3  00 00 00 00  
001245r 3               bCol:
001245r 3  01                   .byte 1
001246r 3  01                   .byte 1
001247r 3               bprop:
001247r 3  00                   .byte 0
001248r 3  02                   .byte 2
001249r 3               sprgfx:
001249r 3  00 00 03 C0          .byte 0,0,3,192,15,240,29,248,59,252,55,252,111,254,111,254,111,254,111,254,55,252,59,252,29,248,15,240,3,192,0,0
00124Dr 3  0F F0 1D F8  
001251r 3  3B FC 37 FC  
001269r 3  00 00 00 F0          .byte 0,0,0,240,3,252,7,126,14,255,13,255,155,255,155,255,155,255,155,255,13,255,14,255,7,126,3,252,0,240,0,0
00126Dr 3  03 FC 07 7E  
001271r 3  0E FF 0D FF  
001289r 3  00 00 00 3C          .byte 0,0,0,60,0,255,129,223,195,191,195,127,230,255,230,255,230,255,230,255,195,127,195,191,129,223,0,255,0,60,0,0
00128Dr 3  00 FF 81 DF  
001291r 3  C3 BF C3 7F  
0012A9r 3  00 00 00 0F          .byte 0,0,0,15,192,63,224,119,240,239,240,223,249,191,249,191,249,191,249,191,240,223,240,239,224,119,192,63,0,15,0,0
0012ADr 3  C0 3F E0 77  
0012B1r 3  F0 EF F0 DF  
0012C9r 3               frmlst:
0012C9r 3  00 01 01 00          .byte 0,1,1,0
0012CDr 3               scdat:
0012CDr 3  40 00                .word 64
0012CFr 3  FF 01 17 FF          .byte 255,1,23,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1
0012D3r 3  00 14 01 01  
0012D7r 3  FF 00 14 01  
0012F0r 3  FF 00 14 01          .byte 255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,23
0012F4r 3  01 FF 00 14  
0012F8r 3  01 01 FF 00  
00130Fr 3               numsc:
00130Fr 3  01                   .byte 1
001310r 3               nmedat:
001310r 3  01 00 C8 40          .byte 1,0,200,64,255
001314r 3  FF           
001315r 3               NUMOBJ = 1
001315r 3               objdta:
001315r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,32,0,160,32
001319r 3  00 00 00 00  
00131Dr 3  00 00 00 00  
00133Cr 3               font:
00133Cr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001340r 3  00 00 00 00  
001344r 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
001348r 3  30 00 30 00  
00134Cr 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
001350r 3  00 00 00 00  
001354r 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
001358r 3  6C FE 6C 00  
00135Cr 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
001360r 3  7E 1E 7E 18  
001364r 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
001368r 3  30 6E CE 00  
00136Cr 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
001370r 3  7E CC 7E 00  
001374r 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
001378r 3  00 00 00 00  
00137Cr 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
001380r 3  18 18 0C 00  
001384r 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
001388r 3  30 30 60 00  
00138Cr 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
001390r 3  7E 18 3C 00  
001394r 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
001398r 3  7E 18 18 00  
00139Cr 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0013A0r 3  00 18 18 30  
0013A4r 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0013A8r 3  7E 00 00 00  
0013ACr 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0013B0r 3  00 38 38 00  
0013B4r 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0013B8r 3  18 30 60 00  
0013BCr 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0013C0r 3  F6 E6 7C 00  
0013C4r 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0013C8r 3  18 18 7E 00  
0013CCr 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0013D0r 3  7C C0 FE 00  
0013D4r 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0013D8r 3  06 C6 7C 00  
0013DCr 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0013E0r 3  D8 FE 18 00  
0013E4r 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0013E8r 3  06 C6 7C 00  
0013ECr 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0013F0r 3  C6 C6 7C 00  
0013F4r 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
0013F8r 3  18 30 30 00  
0013FCr 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
001400r 3  C6 C6 7C 00  
001404r 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
001408r 3  7E 06 7C 00  
00140Cr 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
001410r 3  00 00 30 00  
001414r 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
001418r 3  00 30 30 60  
00141Cr 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
001420r 3  30 18 0C 00  
001424r 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
001428r 3  00 7E 00 00  
00142Cr 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
001430r 3  0C 18 30 00  
001434r 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
001438r 3  18 00 18 00  
00143Cr 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
001440r 3  FE C0 7C 00  
001444r 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
001448r 3  FE C6 C6 00  
00144Cr 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
001450r 3  C6 C6 FC 00  
001454r 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
001458r 3  C0 C6 7C 00  
00145Cr 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
001460r 3  C6 CC F8 00  
001464r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
001468r 3  C0 C0 FE 00  
00146Cr 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
001470r 3  C0 C0 C0 00  
001474r 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
001478r 3  DE C6 7C 00  
00147Cr 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
001480r 3  C6 C6 C6 00  
001484r 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
001488r 3  18 18 7E 00  
00148Cr 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
001490r 3  C6 C6 7C 00  
001494r 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
001498r 3  D8 CC C6 00  
00149Cr 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0014A0r 3  C0 C0 FE 00  
0014A4r 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0014A8r 3  C6 C6 C6 00  
0014ACr 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0014B0r 3  DE CE C6 00  
0014B4r 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0014B8r 3  C6 C6 7C 00  
0014BCr 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0014C0r 3  FC C0 C0 00  
0014C4r 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0014C8r 3  F6 DE 7C 00  
0014CCr 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0014D0r 3  FC CC C6 00  
0014D4r 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0014D8r 3  06 C6 7C 00  
0014DCr 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0014E0r 3  30 30 30 00  
0014E4r 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0014E8r 3  C6 C6 7C 00  
0014ECr 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0014F0r 3  C6 6C 38 00  
0014F4r 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
0014F8r 3  C6 FE 6C 00  
0014FCr 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
001500r 3  38 6C C6 00  
001504r 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
001508r 3  30 30 30 00  
00150Cr 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
001510r 3  30 60 FE 00  
001514r 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
001518r 3  18 18 1E 00  
00151Cr 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
001520r 3  30 18 0C 00  
001524r 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
001528r 3  30 30 F0 00  
00152Cr 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
001530r 3  30 30 30 00  
001534r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
001538r 3  00 00 00 FF  
00153Cr 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
001540r 3  60 60 FE 00  
001544r 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
001548r 3  7C CC 7C 00  
00154Cr 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
001550r 3  66 66 7C 00  
001554r 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
001558r 3  60 60 3C 00  
00155Cr 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
001560r 3  CC CC 7C 00  
001564r 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
001568r 3  F8 C0 7C 00  
00156Cr 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
001570r 3  30 30 30 00  
001574r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
001578r 3  CC 7C 0C 78  
00157Cr 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
001580r 3  CC CC CC 00  
001584r 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
001588r 3  30 30 78 00  
00158Cr 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
001590r 3  0C 0C 6C 38  
001594r 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
001598r 3  70 78 6C 00  
00159Cr 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0015A0r 3  30 30 1C 00  
0015A4r 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0015A8r 3  FC FC FC 00  
0015ACr 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0015B0r 3  CC CC CC 00  
0015B4r 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0015B8r 3  CC CC 78 00  
0015BCr 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0015C0r 3  CC F8 C0 C0  
0015C4r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0015C8r 3  CC 7C 0C 0E  
0015CCr 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0015D0r 3  60 60 60 00  
0015D4r 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0015D8r 3  78 0C F8 00  
0015DCr 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0015E0r 3  30 30 1C 00  
0015E4r 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0015E8r 3  CC CC 78 00  
0015ECr 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0015F0r 3  78 78 30 00  
0015F4r 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0015F8r 3  FC FC 78 00  
0015FCr 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
001600r 3  30 78 CC 00  
001604r 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
001608r 3  CC 7C 0C 78  
00160Cr 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
001610r 3  30 60 FC 00  
001614r 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
001618r 3  18 18 1E 00  
00161Cr 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
001620r 3  18 18 18 00  
001624r 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
001628r 3  30 30 F0 00  
00162Cr 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
001630r 3  00 00 00 00  
001634r 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
001638r 3  E3 BB C6 7C  
00163Cr 3               jtab:
00163Cr 3  63                   .byte 99
00163Dr 3  65 14 51 10  keys:   .byte 101,20,81,16,48,68,52,112,0,113,1
001641r 3  30 44 34 70  
001645r 3  00 71 01     
001648r 3               
001648r 2               
001648r 1               	.include "lib.inc"
001648r 2               ;----------------------------------------------------------------------
001648r 2               ; VIC20 Platform Specific functions
001648r 2               ;----------------------------------------------------------------------
001648r 2               
001648r 2               ;============================================================
001648r 2               ; PLATFORM VARIABLES
001648r 2               ;============================================================
001648r 2               ;
001648r 2               ; Memory map:
001648r 2               ;
001648r 2               ;	$0000-$01ff	 0.5kB	CPU WS
001648r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
001648r 2               ;	$0400-$0fff	 3,0kB	RAM
001648r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
001648r 2               ;	$2000-$7fff	24,0kB	RAM
001648r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
001648r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
001648r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
001648r 2               ;	$9800-$9fff	 2,0kB	I/O
001648r 2               ;	$a000-$bfff	 8,0kB	RAM
001648r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
001648r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
001648r 2               ;
001648r 2               ; Keyboard matrix:
001648r 2               ;                          	  $9121
001648r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
001648r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
001648r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
001648r 2               ;                 VIC   07  06  05  04  03  02  01  00
001648r 2               ;
001648r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
001648r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
001648r 2               ;                 VIC   17  16  15  14  13  12  11  10
001648r 2               ;
001648r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
001648r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
001648r 2               ;                 VIC   27  26  25  24  23  22  21  20
001648r 2               ;
001648r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
001648r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
001648r 2               ;                 VIC   37  36  35  34  33  32  31  30
001648r 2               ;
001648r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
001648r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
001648r 2               ;                 VIC   47  46  45  44  43  42  41  40
001648r 2               ;
001648r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
001648r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
001648r 2               ;                 VIC   57  56  55  54  53  52  51  50
001648r 2               ;
001648r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
001648r 2               ;               ASCII   13  42  80  73  89  82  87
001648r 2               ;                 VIC   67  66  65  64  63  62  61  60
001648r 2               ;
001648r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
001648r 2               ;               ASCII   08  ??  43  57  55  53  51  49
001648r 2               ;                 VIC   77  76  75  74  73  72  71  70
001648r 2               ;
001648r 2               ;	 P =$65,O=$14,A=$51,Q=$10
001648r 2               ;	SPC=$30,N=$44,M=$34
001648r 2               ;	 1 =$70,2=$00,3=$71,4=$01
001648r 2               ;
001648r 2               ; Joysticks:
001648r 2               ;
001648r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
001648r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
001648r 2               ;	$9120	Right -     -     -     -     -     -     -
001648r 2               ;
001648r 2               ;	$9122	DDRB = Data Direction Register port $9120
001648r 2               ;               0 = input, 1 = output
001648r 2               ;		Bit7 should be 0 to read joystick $9120
001648r 2               ;
001648r 2               ; Video registers:
001648r 2               ;
001648r 2               ;	$9000	horizontal centering
001648r 2               ;		bits 0-6 horizontal centering
001648r 2               ;		bit  7 sets interlace scan
001648r 2               ;	$9001	vertical centering
001648r 2               ;	$9002	set # of columns
001648r 2               ;		bits 0-6 set # of columns
001648r 2               ;		bit 7 is part of video matrix address
001648r 2               ;	$9003	set # of rows
001648r 2               ;		bit 0 sets 8x8 or 16x8 chars
001648r 2               ;		bits 1-6 set # of rows
001648r 2               ;	$9005	start of character memory
001648r 2               ;		bits 0-3 start of character memory (default = 0)
001648r 2               ;		bits 4-7 is rest of video address (default= F)
001648r 2               ;		BITS 3,2,1,0 CM startinq address
001648r 2               ;			     HEX   DEC
001648r 2               ;		0000   ROM   8000  32768
001648r 2               ;		0001	     8400  33792
001648r 2               ;		0010	     8800  34816
001648r 2               ;		0011	     8C00  35840
001648r 2               ;		1000   RAM   0000  0000
001648r 2               ;		1001  xxxx
001648r 2               ;		1010  xxxx   unavail.
001648r 2               ;		1011  xxxx
001648r 2               ;		1100	     1000  4096
001648r 2               ;		1101	     1400  5120
001648r 2               ;		1110	     1800  6144
001648r 2               ;		1111	     1C00  7168
001648r 2               ;	$900f	Screen and border color register
001648r 2               ;		bits 4-7 select background color
001648r 2               ;		bits 0-2 select border color
001648r 2               ;		bit 3 selects inverted or normal mode
001648r 2               ;
001648r 2               ; $9110-$911F 6522 VIA#1
001648r 2               ; $9120-$912F 6522 VIA#2
001648r 2               ;
001648r 2               ;	$9110,$9120 	Port B output register
001648r 2               ;	$9111,$9121 	Port A output register
001648r 2               ;			(PA0) Bit 0=Serial CLK IN
001648r 2               ;			(PA1) Bit 1=Serial DATA IN
001648r 2               ;			(PA2) Bit 2=Joy 0
001648r 2               ;			(PA3) Bit 3=Joy 1
001648r 2               ;			(PA4) Bit 4=Joy 2
001648r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
001648r 2               ;			(PA6) Bit 6=Cassette switch sense
001648r 2               ;			(PA7) Bit 7=Serial ATN out
001648r 2               ;	$9112,$9122	Data direction register B
001648r 2               ;	$9113,$9123	Data direction register A
001648r 2               ;	$9114,$9124	Timer 1 low byte
001648r 2               ;	$9115,$9125	Timer 1 high byte & counter
001648r 2               ;	$9116,$9126	Timer 1 low byte
001648r 2               ;	$9117,$9127	Timer 1 high byte
001648r 2               ;	$9118,$9128	Timer 2 low byte
001648r 2               ;	$9119,$9129	Timer 2 high byte
001648r 2               ;	$911A,$912A	Shift register
001648r 2               ;	$911B,$912B	Auxiliary control register
001648r 2               ;	$911C,$912C	Peripheral control register
001648r 2               ;			(CA1, CA2, CB1, CB2)
001648r 2               ;			CA1 = restore key (Bit 0)
001648r 2               ;			CA2 = cassette motor control (Bits 1-3)
001648r 2               ;			CB1 = interrupt signal for received
001648r 2               ;			RS-232 data (Bit 4)
001648r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
001648r 2               ;	$911D,$912D	Interrupt flag register
001648r 2               ;	$911E,$912E	Interrupt enable register
001648r 2               ;	$911F,$912F	Port A (Sense cassette switch)
001648r 2               
001648r 2               ; VIC constants
001648r 2               
001648r 2               ;	scrchar 	= 22				; char/line
001648r 2               ;	scrline		= 22				; lines/screen
001648r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
001648r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
001648r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
001648r 2               
001648r 2               ; VIC variables:
001648r 2               
001648r 2  00           	fontcol:	.byte 0		; Frontcolour text
001649r 2               
001649r 2               ; Addresses
001649r 2               
001649r 2               	MapAddr		= $400		; RAM
001649r 2               	ScreenAddr	= $0200		; VIDEO RAM
001649r 2               	CharAddress	= $1000		; CHAR RAM
001649r 2               	Reg0		= $9000		; Horizontal centering
001649r 2               	Reg1		= $9001		; Vertical centering
001649r 2               	Reg2		= $9002		; Set # of columns
001649r 2               	Reg3		= $9003		; Set # of rows
001649r 2               	Reg4		= $9004		; Vsync signal
001649r 2               	Reg5		= $9005		; Start of character memory
001649r 2               	RegE		= $900e		; Colour and auxcolour register
001649r 2               	RegF		= $900f		; Screen and border color register
001649r 2               
001649r 2               	JoyAddr1	= $9111		; Joystick address 1
001649r 2               	Timer11_Low  	= $9114		; Timer 1 low byte
001649r 2               	Timer11_High 	= $9115		; Timer 1 high byte
001649r 2               	Timer12_Low  	= $9118		; Timer 2 low byte
001649r 2               	Timer12_High 	= $9119		; Timer 2 high byte
001649r 2               	AUX1		= $911b		; Auxiliary control register
001649r 2               	IFR1		= $911d		; Interrupt Flag Register
001649r 2               	IER1		= $911e		; Interrupt Enable Register
001649r 2               
001649r 2               	KeyColAddr	= $9120		; Keyboard column (write)
001649r 2               	JoyAddr2	= $9120		; Joystick address 2
001649r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
001649r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
001649r 2               	Timer21_Low  	= $9124		; Timer 1 low byte
001649r 2               	Timer21_High 	= $9125		; Timer 1 high byte
001649r 2               	AUX2		= $912b		; Auxiliary control register
001649r 2               	IFR2		= $912d		; Interrupt Flag Register
001649r 2               	IER2		= $912e		; Interrupt Enable Register
001649r 2               
001649r 2               	ColorAttr	= $9600		; Color attributes
001649r 2               	HiRAM		= $a000		; Hi RAM 8kB
001649r 2               
001649r 2               ;----------------------------------------------------------------------
001649r 2               ; VIC20 video hardware fns
001649r 2               ;----------------------------------------------------------------------
001649r 2               
001649r 2               init:
001649r 2               
001649r 2               ; Disable interrupts
001649r 2               
001649r 2  A9 7F        	lda #$7f
00164Br 2  8D 1E 91     	sta $911e
00164Er 2  8D 2D 91     	sta $912d
001651r 2  8D 2E 91     	sta $912e
001654r 2               
001654r 2               ; Set audio volume to max and flag to check when disabling
001654r 2               ; beep and crash
001654r 2               
001654r 2  A9 00        	lda #0
001656r 2  8D 0A 90     	sta $900a
001659r 2  8D 0B 90     	sta $900b
00165Cr 2  8D 0C 90     	sta $900c
00165Fr 2  8D 0D 90     	sta $900d
001662r 2               
001662r 2  A9 0F        	lda #$0f
001664r 2  8D 0E 90     	sta $900e
001667r 2  A9 00        	lda #$00
001669r 2  85 rr        	sta SOUNDS_STATUS
00166Br 2               
00166Br 2               ; Init screen for NTSC
00166Br 2               ; this sets the background and border color of the screen
00166Br 2               ; in this case border black and background black
00166Br 2               
00166Br 2  A9 18        	lda #%00011000
00166Dr 2  8D 0F 90     	sta RegF
001670r 2               
001670r 2               ; Reset fontcolor
001670r 2  A9 00        	lda #0		; Black
001672r 2  8D rr rr     	sta fontcol
001675r 2               
001675r 2               
001675r 2               ; max num of columns 22
001675r 2               
001675r 2  AD 02 90     	lda Reg2
001678r 2  29 80        	and #%10000000
00167Ar 2  09 16        	ora #ScrWidth
00167Cr 2  8D 02 90     	sta Reg2
00167Fr 2               
00167Fr 2               ; max num of lines (mult by 2 - 22) for 8x8 chars
00167Fr 2               ; no multiply for 8x16 chars
00167Fr 2               
00167Fr 2  AD 03 90     	lda Reg3
001682r 2  29 81        	and #%10000001
001684r 2  09 16        	ora #ScrHeight		; number of rows multipled by two
001686r 2  8D 03 90     	sta Reg3
001689r 2               
001689r 2               ; horizontal and vertical position must be set for
001689r 2               ; non standard screen resolution (standard 22x23)
001689r 2               ; same games even allow the user to change them
001689r 2               ; these values are for PAL for NTSC should be different
001689r 2               ; move horizontal position in the screen
001689r 2               
001689r 2  AD 00 90     	lda Reg0
00168Cr 2  29 80        	and #%10000000
00168Er 2  09 04        	ora #CentreX
001690r 2  8D 00 90     	sta Reg0
001693r 2               
001693r 2               ; move vertical position in the screen
001693r 2               
001693r 2  A9 1B        	lda #CentreY
001695r 2  8D 01 90     	sta Reg1
001698r 2               
001698r 2               ; Set screem memory to $200
001698r 2               ; bit 7 on $9002 has to be set
001698r 2               
001698r 2  AD 02 90     	lda Reg2
00169Br 2  09 80        	ora #%10000000
00169Dr 2  8D 02 90     	sta Reg2
0016A0r 2               
0016A0r 2               ; Set character data pointer to CHAR RAM at $1000
0016A0r 2               ; bit 7 on $9005 has always to be set
0016A0r 2               ; (based on compute - mapping the vic book)
0016A0r 2               ; color ram goes to 9600
0016A0r 2               
0016A0r 2  AD 05 90     	lda Reg5
0016A3r 2  29 0C        	and #%00001100
0016A5r 2  09 8C        	ora #%10001100
0016A7r 2  8D 05 90     	sta Reg5
0016AAr 2               
0016AAr 2               ; This set the char size to 8x16
0016AAr 2               
0016AAr 2  AD 03 90     	lda Reg3
0016ADr 2  09 01        	ora #%00000001
0016AFr 2  8D 03 90     	sta Reg3
0016B2r 2               
0016B2r 2               ; Init screencharacters
0016B2r 2               ; Fill screen with characters from left to right, up to down
0016B2r 2               
0016B2r 2  A2 00        	ldx #0
0016B4r 2  A0 00        	ldy #0
0016B6r 2               scrinit:
0016B6r 2  8A           	txa
0016B7r 2  9D 00 02     	sta ScreenAddr,x
0016BAr 2  98           	tya
0016BBr 2  9D 00 96     	sta ColorAttr,x
0016BEr 2  E8           	inx
0016BFr 2  E0 F2        	cpx#242
0016C1r 2  D0 F3        	bne scrinit
0016C3r 2               
0016C3r 2               ; Reset fontcolor
0016C3r 2               
0016C3r 2  A9 00        	lda #0			; Black
0016C5r 2  8D rr rr     	sta fontcol
0016C8r 2               
0016C8r 2               ; Init music
0016C8r 2               
0016C8r 2               ;	jsr initmusic
0016C8r 2               
0016C8r 2               ; Init VIA1 timer11 for timeout 1/25 sec
0016C8r 2               
0016C8r 2  A9 E0        	lda #$e0		; T1 continuous
0016CAr 2  8D 1B 91     	sta AUX1
0016CDr 2  A9 7F        	lda #$7f		; No int
0016CFr 2  8D 1E 91     	sta IER1
0016D2r 2  A9 00        	lda #0
0016D4r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
0016D7r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
0016D9r 2  8D 14 91     	sta Timer11_Low
0016DCr 2  A9 4E        	lda #>timervalue
0016DEr 2  8D 15 91     	sta Timer11_High
0016E1r 2               
0016E1r 2               ; Pre-shifted byte tables if parameter 'r' given
0016E1r 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
0016E1r 2               ; The bits are shifted to the right and overflow bits are
0016E1r 2               ; inserted to the left. So 1 byte contains a left and right part
0016E1r 2               
0016E1r 2               .if rflag
0016E1r 2               shift0 = HiRAM
0016E1r 2               shift2 = HiRAM+256
0016E1r 2               shift4 = HiRAM+512
0016E1r 2               shift6 = HiRAM+768
0016E1r 2               
0016E1r 2               ; Pre-shifted table 0 pixels
0016E1r 2               
0016E1r 2               	ldx #0
0016E1r 2               shf0:
0016E1r 2               	txa
0016E1r 2               	sta shift0,x
0016E1r 2               	inx
0016E1r 2               	bne shf0
0016E1r 2               
0016E1r 2               ; Pre-shifted table 2 pixels
0016E1r 2               
0016E1r 2               	ldx #0
0016E1r 2               shf2:
0016E1r 2               	ldy #2
0016E1r 2               	txa
0016E1r 2               shf2loop:
0016E1r 2               	lsr a
0016E1r 2               	bcc :+
0016E1r 2               	ora #$80
0016E1r 2               :
0016E1r 2               	dey
0016E1r 2               	bne shf2loop
0016E1r 2               	sta shift2,x
0016E1r 2               	inx
0016E1r 2               	bne shf2
0016E1r 2               
0016E1r 2               ; Pre-shifted table 4 pixels
0016E1r 2               
0016E1r 2               	ldx #0
0016E1r 2               shf4:
0016E1r 2               	ldy #4
0016E1r 2               	txa
0016E1r 2               shf4loop:
0016E1r 2               	lsr a
0016E1r 2               	bcc :+
0016E1r 2               	ora #$80
0016E1r 2               :
0016E1r 2               	dey
0016E1r 2               	bne shf4loop
0016E1r 2               	sta shift4,x
0016E1r 2               	inx
0016E1r 2               	bne shf4
0016E1r 2               
0016E1r 2               ; Pre-shifted table 6 pixels
0016E1r 2               
0016E1r 2               	ldx #0
0016E1r 2               shf6:
0016E1r 2               	ldy #6
0016E1r 2               	txa
0016E1r 2               shf6loop:
0016E1r 2               	lsr a
0016E1r 2               	bcc :+
0016E1r 2               	ora #$80
0016E1r 2               :
0016E1r 2               	dey
0016E1r 2               	bne shf6loop
0016E1r 2               	sta shift6,x
0016E1r 2               	inx
0016E1r 2               	bne shf6
0016E1r 2               .endif
0016E1r 2               
0016E1r 2  60           	rts
0016E2r 2               
0016E2r 2               ;========================================================
0016E2r 2               ; KEY AND JOYSTICK ROUTINES
0016E2r 2               ;--------------------------------------------------------
0016E2r 2               ; Keys
0016E2r 2               ;
0016E2r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0016E2r 2               ;             ||||||||
0016E2r 2               ;             |||||||+> Right    KEY 0  - X
0016E2r 2               ;             ||||||+-> Left     KEY 1  - Z
0016E2r 2               ;             |||||+--> Down     KEY 2  - .
0016E2r 2               ;             ||||+---> Up       KEY 3  - ;
0016E2r 2               ;             |||+----> Fire1    KEY 4  - SPC
0016E2r 2               ;             ||+-----> Fire2    KEY 5  - Q
0016E2r 2               ;             |+------> Fire3    KEY 6  - P
0016E2r 2               ;             +-------> Not used
0016E2r 2               ;
0016E2r 2               ;                       Option1  KEY 7  - 1
0016E2r 2               ;                       Option2  KEY 8  - 2
0016E2r 2               ;                       Option3  KEY 9  - 3
0016E2r 2               ;                       Option4  KEY 10 - 4
0016E2r 2               ;--------------------------------------------------------
0016E2r 2               
0016E2r 2               ;----------------------------------------------------
0016E2r 2               ; Interrupt service
0016E2r 2               ;----------------------------------------------------
0016E2r 2               
0016E2r 2               intserv:
0016E2r 2  EE 01 96     	inc $9601	; scroll colour char topleft
0016E5r 2  68           	pla
0016E6r 2  A8           	tay
0016E7r 2  68           	pla
0016E8r 2  AA           	tax
0016E9r 2  68           	pla
0016EAr 2  40           	rti
0016EBr 2               
0016EBr 2               ;--------------------------------------------------------
0016EBr 2               ; PRSKEY
0016EBr 2               ;
0016EBr 2               ; Wait for keypress.
0016EBr 2               ;--------------------------------------------------------
0016EBr 2               
0016EBr 2               prskey:
0016EBr 2  98           	tya
0016ECr 2  48           	pha
0016EDr 2               prsloop:
0016EDr 2  20 rr rr     	jsr vsync
0016F0r 2  20 rr rr     	jsr joykey
0016F3r 2  09 80        	ora #$80
0016F5r 2  C9 FF        	cmp #$ff
0016F7r 2  D0 07        	bne :+
0016F9r 2  20 rr rr     	jsr readkey
0016FCr 2  C9 FF        	cmp #255
0016FEr 2  F0 ED        	beq prsloop		; wait until key pressed
001700r 2               :
001700r 2               prsrelease:
001700r 2  20 rr rr     	jsr vsync
001703r 2  20 rr rr     	jsr joykey
001706r 2  09 80        	ora #$80
001708r 2  C9 FF        	cmp #$ff
00170Ar 2  F0 07        	beq :+
00170Cr 2  20 rr rr     	jsr readkey
00170Fr 2  C9 FF        	cmp #255
001711r 2  D0 ED        	bne prsrelease		; wait until key released
001713r 2               :
001713r 2  68           	pla
001714r 2  A8           	tay
001715r 2  60           	rts
001716r 2               
001716r 2               ;--------------------------------------------------------
001716r 2               ; KTEST
001716r 2               ;
001716r 2               ; Keyboard test routine with key in A.
001716r 2               ; Scan key and clear carry if key pressed
001716r 2               ;--------------------------------------------------------
001716r 2               
001716r 2               ktest:
001716r 2  85 rr        	sta z80_a		; save key
001718r 2               
001718r 2  4A           	lsr a
001719r 2  4A           	lsr a
00171Ar 2  4A           	lsr a
00171Br 2  4A           	lsr a
00171Cr 2  AA           	tax
00171Dr 2  BD rr rr     	lda colmask,x
001720r 2  8D 20 91     	sta KeyColAddr		; set row
001723r 2               
001723r 2  A5 rr        	lda z80_a
001725r 2  29 0F        	and #$0f
001727r 2  AA           	tax			; get column
001728r 2               
001728r 2  AD 21 91     	lda KeyRowAddr		; read column
00172Br 2  3D rr rr     	and keymask,x		; check if key pressed
00172Er 2  F0 02        	beq pressed		; Skip if pressed
001730r 2  38           	sec			; key not pressed
001731r 2  60           	rts
001732r 2               pressed:
001732r 2  18           	clc			; key pressed
001733r 2  60           	rts
001734r 2               
001734r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
001738r 2  F7 FB FD FE  
00173Cr 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
001740r 2  10 20 40 80  
001744r 2               
001744r 2               ;---------------------------------------------------------------
001744r 2               ; KGET
001744r 2               ;
001744r 2               ; Read keyboard matrix if a key is pressed.
001744r 2               ; Return A = high nibble=row and low nibble=col
001744r 2               ;---------------------------------------------------------------
001744r 2               
001744r 2               kget:
001744r 2  86 rr        	stx xtmp		; Save x-reg
001746r 2               kget0:
001746r 2  A2 00        	ldx #0			; reset row
001748r 2               kget1:
001748r 2  BD rr rr     	lda colmask,x		; Get mask
00174Br 2  8D 20 91     	sta KeyColAddr		; Set row
00174Er 2  AD 21 91     	lda KeyRowAddr		; Read columns
001751r 2  85 rr        	sta tmp			; Save colums
001753r 2  C9 FF        	cmp #$ff		; Key pressed?
001755r 2  D0 08        	bne kget2		; Yes, skip
001757r 2  E8           	inx			; Next row
001758r 2  E0 08        	cpx #8			; All rows scanned?
00175Ar 2  D0 EC        	bne kget1		; No, repeat
00175Cr 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
00175Fr 2               kget2:
00175Fr 2  A0 00        	ldy #0			; Reset column
001761r 2               kget3:
001761r 2  46 rr        	lsr tmp			; Test bit
001763r 2  90 04        	bcc kget4		; If clear, key pressed
001765r 2  C8           	iny			; Next column
001766r 2  4C rr rr     	jmp kget3		; Repeat
001769r 2               kget4:
001769r 2  86 rr        	stx tmp			; Get row
00176Br 2  06 rr        	asl tmp			; Make high nibble
00176Dr 2  06 rr        	asl tmp
00176Fr 2  06 rr        	asl tmp
001771r 2  06 rr        	asl tmp
001773r 2  98           	tya			; Get column
001774r 2  18           	clc
001775r 2  65 rr        	adc tmp			; Add row as low nibble
001777r 2  85 rr        	sta tmp
001779r 2               kget5:
001779r 2  AD 21 91     	lda KeyRowAddr		; Read columns
00177Cr 2  C9 FF        	cmp #$ff
00177Er 2  D0 F9        	bne kget5
001780r 2               
001780r 2  A5 rr        	lda tmp			; Return keycode
001782r 2  A6 rr        	ldx xtmp		; Restore X-reg
001784r 2  60           	rts			; Return
001785r 2               
001785r 2               ;-------------------------------------------------------------
001785r 2               ; READKEY
001785r 2               ;
001785r 2               ; Check keyboard matrix if a key is pressed
001785r 2               ; Return keymask in Y
001785r 2               ;-------------------------------------------------------------
001785r 2               
001785r 2               readkey:
001785r 2  A9 FF        	lda #$ff		; Keymask
001787r 2  85 rr        	sta tmp
001789r 2  A2 07        	ldx #7
00178Br 2               scanrow:
00178Br 2  BD rr rr     	lda colmask,x
00178Er 2  8D 20 91     	sta KeyColAddr		; set row
001791r 2  AD 21 91     	lda KeyRowAddr		; read column
001794r 2  25 rr        	and tmp			; Reset bit is key pressed
001796r 2  85 rr        	sta tmp
001798r 2  CA           	dex
001799r 2  10 F0        	bpl scanrow
00179Br 2  A5 rr        	lda tmp
00179Dr 2  A8           	tay
00179Er 2  60           	rts
00179Fr 2               
00179Fr 2               ;-------------------------------------------------------------
00179Fr 2               ; JOY1SCAN
00179Fr 2               ;
00179Fr 2               ; Initializes joystick
00179Fr 2               ;-------------------------------------------------------------
00179Fr 2               
00179Fr 2               joyinit:
00179Fr 2  60           	rts
0017A0r 2               
0017A0r 2               ;-------------------------------------------------------------
0017A0r 2               ; JOY1SCAN
0017A0r 2               ;
0017A0r 2               ; Scan joystick1 and return key in z80_e
0017A0r 2               ; Up, down, left, right and fire are read from the joystick
0017A0r 2               ; Fire2 and fire3 are read from the keyboard
0017A0r 2               ;-------------------------------------------------------------
0017A0r 2               
0017A0r 2               joy1scan:
0017A0r 2  A9 FF        	lda #$ff
0017A2r 2  85 rr        	sta z80_e
0017A4r 2               
0017A4r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
0017A7r 2  4A           	lsr a
0017A8r 2  4A           	lsr a
0017A9r 2               
0017A9r 2  4A           	lsr a
0017AAr 2  26 rr        	rol z80_e		; Up
0017ACr 2  4A           	lsr a
0017ADr 2  26 rr        	rol z80_e		; Down
0017AFr 2  4A           	lsr a
0017B0r 2  26 rr        	rol z80_e		; Left
0017B2r 2               
0017B2r 2  A9 7F        	lda #%01111111
0017B4r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
0017B7r 2  AD 20 91     	lda JoyAddr2
0017BAr 2  0A           	asl a
0017BBr 2  26 rr        	rol z80_e		; Right
0017BDr 2  A9 FF        	lda #%11111111
0017BFr 2  8D 22 91     	sta DDRB		; Reset
0017C2r 2               
0017C2r 2  AD 11 91     	lda JoyAddr1
0017C5r 2  29 20        	and #%00100000
0017C7r 2  D0 06        	bne :+
0017C9r 2  A5 rr        	lda z80_e
0017CBr 2  29 EF        	and #%11101111		; Fire
0017CDr 2  85 rr        	sta z80_e
0017CFr 2               :
0017CFr 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
0017D2r 2  20 rr rr     	jsr ktest
0017D5r 2  B0 06        	bcs :+
0017D7r 2  A5 rr        	lda z80_e
0017D9r 2  29 BF        	and #%10111111
0017DBr 2  85 rr        	sta z80_e
0017DDr 2               :
0017DDr 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
0017E0r 2  20 rr rr     	jsr ktest
0017E3r 2  B0 06        	bcs :+
0017E5r 2  A5 rr        	lda z80_e
0017E7r 2  29 DF        	and #%11011111
0017E9r 2  85 rr        	sta z80_e
0017EBr 2               :
0017EBr 2  60           	rts
0017ECr 2               
0017ECr 2               ;-------------------------------------------------------------
0017ECr 2               ; JOY2SCAN
0017ECr 2               ;
0017ECr 2               ; TODO, Scan joystick2 and return key in z80_e
0017ECr 2               ;-------------------------------------------------------------
0017ECr 2               
0017ECr 2               joy2scan:
0017ECr 2  60           	rts
0017EDr 2               
0017EDr 2               
0017EDr 2               
0017EDr 2               ;========================================================
0017EDr 2               ; HARDWARE DEPENDING ROUTINES
0017EDr 2               ;========================================================
0017EDr 2               
0017EDr 2               ;----------------------------------------------------
0017EDr 2               ; DELAY
0017EDr 2               ;
0017EDr 2               ; Delay routine A * 1/50 sec
0017EDr 2               ;----------------------------------------------------
0017EDr 2               
0017EDr 2               delay:
0017EDr 2  85 rr        	sta xtmp		; set delaycounter
0017EFr 2               del_loop:
0017EFr 2  AD 04 90     	lda Reg4
0017F2r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
0017F4r 2               
0017F4r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0017F6r 2               delay1:
0017F6r 2  61 80        	adc ($80,x)		;	 6 usec
0017F8r 2  61 80        	adc ($80,x)		;	 6 usec
0017FAr 2  88           	dey			;	 2 usec
0017FBr 2  D0 F9        	bne delay1		;	 2 usec
0017FDr 2  EA           	nop			; 2 usec
0017FEr 2  EA           	nop			; 2 usec
0017FFr 2               				; tot: 20000 usec
0017FFr 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
001801r 2  D0 EC        	bne del_loop
001803r 2  60           	rts
001804r 2               
001804r 2               ;-------------------------------------------------------------
001804r 2               ; VSYNC
001804r 2               ;
001804r 2               ; - read joystick/keyboard
001804r 2               ; - sync framerate with timer 25Hz
001804r 2               ; - handle shrapnel every even frame
001804r 2               ; - handle sound
001804r 2               ;-------------------------------------------------------------
001804r 2               
001804r 2               vsync:
001804r 2  48           	pha			; save registers
001805r 2  98           	tya
001806r 2  48           	pha
001807r 2  8A           	txa
001808r 2  48           	pha
001809r 2               
001809r 2               ; Read joystick/keyboard.
001809r 2               
001809r 2  20 rr rr     	jsr joykey
00180Cr 2               
00180Cr 2               ; Sync framerate with timer 25Hz
00180Cr 2               
00180Cr 2  A9 40        	lda #$40		; set Timer1 expired bit
00180Er 2               vsync1:
00180Er 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
001811r 2  F0 FB        	beq vsync1		; wait if timer not expired
001813r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
001816r 2               
001816r 2               ; Handle sound command
001816r 2               
001816r 2  20 rr rr     	jsr make_sound2
001819r 2               
001819r 2               ; Handle shrapnel every even frame
001819r 2               
001819r 2  A5 rr        	lda clock		; get clock
00181Br 2  29 01        	and #1			; 2 frames expired
00181Dr 2  D0 03        	bne:+
00181Fr 2  20 rr rr     	jsr proshr		; process shrapnel
001822r 2               :
001822r 2               
001822r 2               ; Handle sound
001822r 2               
001822r 2  AD rr rr         lda sndtyp
001825r 2  F0 3E            beq sndskip
001827r 2               
001827r 2               sndloop:
001827r 2  AC rr rr         ldy sndtyp
00182Ar 2               sndwait:
00182Ar 2  88               dey
00182Br 2  D0 FD            bne sndwait
00182Dr 2               
00182Dr 2  AD rr rr         lda sndtyp
001830r 2  30 16            bmi crashaudio
001832r 2               
001832r 2               
001832r 2               beepaudio:
001832r 2                   ; enable sound on channel 2
001832r 2                   ; add 128 because sound is in range 128-255
001832r 2               ;    lsr
001832r 2  A5 rr        	lda SOUNDS_STATUS
001834r 2  09 40        	ora #%01000000
001836r 2  85 rr        	sta SOUNDS_STATUS
001838r 2  A9 FF            lda #$ff
00183Ar 2  38               sec
00183Br 2  ED rr rr         sbc sndtyp
00183Er 2  4A               lsr
00183Fr 2  4A               lsr
001840r 2  09 C0            ora #%11000000
001842r 2  8D 0C 90         sta $900c
001845r 2  4C rr rr         jmp endaudiotype
001848r 2               crashaudio:
001848r 2  A5 rr        	lda SOUNDS_STATUS
00184Ar 2  09 80        	ora #%10000000
00184Cr 2  85 rr        	sta SOUNDS_STATUS
00184Er 2  A9 FF            lda #$ff
001850r 2  38               sec
001851r 2  ED rr rr         sbc sndtyp
001854r 2  09 80            ora #%10000000
001856r 2  8D 0D 90         sta $900d
001859r 2               
001859r 2               endaudiotype:
001859r 2               
001859r 2  CE rr rr         dec sndtyp
00185Cr 2  F0 07            beq sndskip
00185Er 2  C9 80            cmp #128
001860r 2  F0 03            beq sndskip
001862r 2  4C rr rr         jmp sndloop
001865r 2               sndskip:
001865r 2                   ; disable sound
001865r 2  24 rr        	bit SOUNDS_STATUS
001867r 2  50 0B        	bvc :+
001869r 2  A5 rr        	lda SOUNDS_STATUS
00186Br 2  29 BF        	and #%10111111
00186Dr 2  85 rr        	sta SOUNDS_STATUS
00186Fr 2  A9 00        	lda #$00
001871r 2  8D 0C 90         sta $900c
001874r 2               :
001874r 2  24 rr        	bit SOUNDS_STATUS
001876r 2  10 0B        	bpl :+
001878r 2               
001878r 2  A5 rr        	lda SOUNDS_STATUS
00187Ar 2  29 7F        	and #%01111111
00187Cr 2  85 rr        	sta SOUNDS_STATUS
00187Er 2  A9 00        	lda #$00
001880r 2  8D 0D 90         sta $900d
001883r 2               :
001883r 2  68               pla
001884r 2  AA               tax
001885r 2  68               pla
001886r 2  A8               tay
001887r 2  68               pla
001888r 2  60               rts
001889r 2  00           sndtyp:		.byte 0		; Beep sound parameter
00188Ar 2               
00188Ar 2               
00188Ar 2               
00188Ar 2               
00188Ar 2               
00188Ar 2               
00188Ar 2               ;========================================================
00188Ar 2               ; SPRITE HANDLING ROUTINES
00188Ar 2               ;========================================================
00188Ar 2               
00188Ar 2               ;----------------------------------------------------
00188Ar 2               ; SPRITE
00188Ar 2               ;
00188Ar 2               ; Draw object sprite
00188Ar 2               ;----------------------------------------------------
00188Ar 2               
00188Ar 2               .if oflag
00188Ar 2               sprite:
00188Ar 2               	stx xtmp		; Save X-reg
00188Ar 2               	jsr scadd 		; get screen address in scraddr.
00188Ar 2               
00188Ar 2               	lda dispx 		; x position.
00188Ar 2               	and #7 			; position straddling cells.
00188Ar 2               	sta z80_b		; store in b register.
00188Ar 2               
00188Ar 2               	lda z80_l		; store sprite graphic address.
00188Ar 2               	sta sprit1+1
00188Ar 2               	sta sprit2+1
00188Ar 2               	lda z80_h
00188Ar 2               	sta sprit1+2
00188Ar 2               	sta sprit2+2
00188Ar 2               
00188Ar 2               	ldx #0			; pixel height.
00188Ar 2               	ldy #0
00188Ar 2               sprit1:
00188Ar 2               	lda objdta,x		; fetch first byte.
00188Ar 2               	sta spr
00188Ar 2               	inx
00188Ar 2               sprit2:
00188Ar 2               	lda objdta,x
00188Ar 2               	sta spr+1
00188Ar 2               
00188Ar 2               	lda #0
00188Ar 2               	sta spr+2
00188Ar 2               	jsr sprit7		; shift sprite
00188Ar 2               
00188Ar 2               	lda spr			; fetch graphic.
00188Ar 2               	ldy #0			; _BEEB
00188Ar 2               	eor (scraddr),y		; merge with screen image.
00188Ar 2               	sta (scraddr),y		; write to screen.
00188Ar 2               
00188Ar 2               	lda spr+1		; fetch graphic.
00188Ar 2               	ldy #16			; _BEEB
00188Ar 2               	eor (scraddr),y		; merge with screen image.
00188Ar 2               	sta (scraddr),y		; write to screen.
00188Ar 2               
00188Ar 2               	lda spr+2		; fetch graphic.
00188Ar 2               	ldy #32			; _BEEB
00188Ar 2               	eor (scraddr),y		; merge with screen image.
00188Ar 2               	sta (scraddr),y		; write to screen.
00188Ar 2               
00188Ar 2               	jsr nline
00188Ar 2               
00188Ar 2               	inx			; next source byte.
00188Ar 2               	cpx #32
00188Ar 2               	bne sprit1		; repeat
00188Ar 2               
00188Ar 2               	ldx xtmp		; retreive X-reg
00188Ar 2               	rts
00188Ar 2               
00188Ar 2               .endif
00188Ar 2               
00188Ar 2               ;------------------------------------------------------------------
00188Ar 2               ; SCADD
00188Ar 2               ;
00188Ar 2               ; This routine returns a screen address for X,Y in scraddr.
00188Ar 2               ;------------------------------------------------------------------
00188Ar 2               
00188Ar 2               scadd:
00188Ar 2  A5 rr        	lda dispx		; get x
00188Cr 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
00188Er 2  85 rr        	sta scraddr		; set lb scraddr
001890r 2  A9 00        	lda #0
001892r 2  85 rr        	sta scraddr+1		; set hb scraddr
001894r 2  06 rr        	asl scraddr		; multiply X by 2
001896r 2  26 rr        	rol scraddr+1
001898r 2               
001898r 2               ; Add line address Y pos to X
001898r 2               
001898r 2  A6 rr        	ldx dispy		; get row address Y pos
00189Ar 2  18           	clc
00189Br 2  A5 rr        	lda scraddr
00189Dr 2  7D 00 07     	adc SCADTB_lb,x
0018A0r 2  85 rr        	sta scraddr
0018A2r 2  A5 rr        	lda scraddr+1
0018A4r 2  7D 00 08     	adc SCADTB_hb,x
0018A7r 2  85 rr        	sta scraddr+1
0018A9r 2               
0018A9r 2  60           	rts
0018AAr 2               
0018AAr 2               ;------------------------------------------------------------------
0018AAr 2               ; SSPRIA
0018AAr 2               ;
0018AAr 2               ; Erase single sprite, old (ix+0).
0018AAr 2               ;------------------------------------------------------------------
0018AAr 2               
0018AAr 2               sspria:
0018AAr 2  20 rr rr     	jsr gsprad		; get old sprite address.
0018ADr 2               sspri2:
0018ADr 2               .if rflag
0018ADr 2               	lda z80_e		; 3c
0018ADr 2               	sta dline_spraddr1+1	; 4c
0018ADr 2               	sta dline_spraddr2+1	; 4c
0018ADr 2               	lda z80_d		; 3c
0018ADr 2               	sta dline_spraddr1+2	; 4c
0018ADr 2               	sta dline_spraddr2+2	; 4c
0018ADr 2               
0018ADr 2               	ldx sprshft
0018ADr 2               	lda shift_table,x
0018ADr 2               	sta dline_shift1+1
0018ADr 2               	sta dline_shift2+1
0018ADr 2               	lda shift_table+1,x
0018ADr 2               	sta dline_shift1+2
0018ADr 2               	sta dline_shift2+2
0018ADr 2               
0018ADr 2               	ldx #0			; byte counter.
0018ADr 2               sspri0:
0018ADr 2               	jsr dline		; draw a line.
0018ADr 2                 .if bflag
0018ADr 2               	cpx #48			; big sprites have 24 bytes
0018ADr 2                 .else
0018ADr 2               	cpx #32			; normal sprites have 32 bytes
0018ADr 2                 .endif
0018ADr 2               	bne sspri0		; repeat 16 times x 2 bytes
0018ADr 2               	rts
0018ADr 2               .else
0018ADr 2                 .if bflag
0018ADr 2               	lda #24			; big sprites have 24 lines
0018ADr 2                 .else
0018ADr 2  A9 10        	lda #16			; normal sprites have 16 lines.
0018AFr 2                 .endif
0018AFr 2  8D rr rr     	sta acnt
0018B2r 2               sspri0:
0018B2r 2  20 rr rr     	jsr dline		; draw a line.
0018B5r 2  CE rr rr     	dec acnt
0018B8r 2  D0 F8        	bne sspri0		; repeat 16 times
0018BAr 2  60           	rts
0018BBr 2               
0018BBr 2  00           acnt:	.byte 0			; line counter
0018BCr 2               
0018BCr 2               .endif
0018BCr 2               
0018BCr 2               ;------------------------------------------------------------------
0018BCr 2               ; SSPRIB
0018BCr 2               ;
0018BCr 2               ; Display single sprite, new (ix+5).
0018BCr 2               ;------------------------------------------------------------------
0018BCr 2               
0018BCr 2               ssprib:
0018BCr 2  20 rr rr     	jsr gspran 		; get new sprite address.
0018BFr 2  4C rr rr     	jmp sspri2		; Display sprite
0018C2r 2               
0018C2r 2               ;------------------------------------------------------------------
0018C2r 2               ; SSPRIC
0018C2r 2               ;
0018C2r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
0018C2r 2               ;------------------------------------------------------------------
0018C2r 2               
0018C2r 2               sspric:
0018C2r 2               .if rflag
0018C2r 2               	jsr gsprad 		; get old sprite address.
0018C2r 2               
0018C2r 2               	lda z80_e		; 3c
0018C2r 2               	sta ddline_spraddr3+1	; 4c
0018C2r 2               	sta ddline_spraddr4+1	; 4c
0018C2r 2               
0018C2r 2               	lda z80_d		; 3c
0018C2r 2               	sta ddline_spraddr3+2	; 4c
0018C2r 2               	sta ddline_spraddr4+2	; 4c
0018C2r 2               
0018C2r 2               	ldx sprshft		; set spriteshift table addresses
0018C2r 2               	lda shift_table,x
0018C2r 2               	sta ddline_shift3+1
0018C2r 2               	sta ddline_shift4+1
0018C2r 2               	lda shift_table+1,x
0018C2r 2               	sta ddline_shift3+2
0018C2r 2               	sta ddline_shift4+2
0018C2r 2               
0018C2r 2               	jsr exx  		; store addresses.
0018C2r 2               	jsr gspran 		; get new sprite addresses.
0018C2r 2               
0018C2r 2               	lda z80_e		; 3c
0018C2r 2               	sta ddline_spraddr1+1	; 4c
0018C2r 2               	sta ddline_spraddr2+1	; 4c
0018C2r 2               
0018C2r 2               	lda z80_d		; 3c
0018C2r 2               	sta ddline_spraddr1+2	; 4c
0018C2r 2               	sta ddline_spraddr2+2	; 4c
0018C2r 2               
0018C2r 2               	ldx sprshft
0018C2r 2               	lda shift_table,x
0018C2r 2               	sta ddline_shift1+1
0018C2r 2               	sta ddline_shift2+1
0018C2r 2               	lda shift_table+1,x
0018C2r 2               	sta ddline_shift1+2
0018C2r 2               	sta ddline_shift2+2
0018C2r 2               
0018C2r 2               	ldx #0
0018C2r 2               lloop:
0018C2r 2               	jsr ddline 		; draw a line.
0018C2r 2                 .if bflag
0018C2r 2               	cpx #48
0018C2r 2                 .else
0018C2r 2               	cpx #32
0018C2r 2                 .endif
0018C2r 2               	bne lloop
0018C2r 2               	rts
0018C2r 2               
0018C2r 2               shift_table:
0018C2r 2               	.word shift0
0018C2r 2               	.word shift2
0018C2r 2               	.word shift4
0018C2r 2               	.word shift6
0018C2r 2               
0018C2r 2               ;------------------------------------------------------------------
0018C2r 2               ; DLINE
0018C2r 2               ;
0018C2r 2               ; Draw a sprite line, now work out next target address.
0018C2r 2               ;
0018C2r 2               ; Input:
0018C2r 2               ;  B  = right mask
0018C2r 2               ;  C  = left mask
0018C2r 2               ;  DE = spriteaddress
0018C2r 2               ;  scraddr = screen address
0018C2r 2               ;------------------------------------------------------------------
0018C2r 2               
0018C2r 2               dline:
0018C2r 2               
0018C2r 2               dline_spraddr1:
0018C2r 2               	ldy $ffff,x 		; get graphic data as pointer.
0018C2r 2               dline_shift1:
0018C2r 2               	lda $ffff,y		; get pre-shifted data
0018C2r 2               	sta sprtmp		; save byte
0018C2r 2               	and z80_c 		; mask right for left byte
0018C2r 2               
0018C2r 2               	ldy #0
0018C2r 2               	eor (scraddr),y 	; XOR with what's there.
0018C2r 2               	sta (scraddr),y 	; display left byte
0018C2r 2               
0018C2r 2               ; carry to next screen byte
0018C2r 2               
0018C2r 2               	lda sprtmp		; fetch data.
0018C2r 2               	and z80_b 		; mask for left part
0018C2r 2               	sta sprtmp
0018C2r 2               
0018C2r 2               ; middle screen byte
0018C2r 2               
0018C2r 2               	inx
0018C2r 2               dline_spraddr2:
0018C2r 2               	ldy $ffff,x 		; second bit of data.
0018C2r 2               dline_shift2:
0018C2r 2               	lda $ffff,y
0018C2r 2               	sta sprtmp2
0018C2r 2               	and z80_c 		; mask away what's not needed.
0018C2r 2               	ora sprtmp
0018C2r 2               	ldy #16
0018C2r 2               	eor (scraddr),y 	; XOR with what's there.
0018C2r 2               	sta (scraddr),y 	; display middle bye.
0018C2r 2               
0018C2r 2               ; carry to last screen byte
0018C2r 2               
0018C2r 2               	lda sprtmp2
0018C2r 2               	and z80_b 		; mask away unwanted
0018C2r 2               
0018C2r 2               	ldy #32
0018C2r 2               	eor (scraddr),y 	; XOR with what's there.
0018C2r 2               	sta (scraddr),y 	; display right byte.
0018C2r 2               
0018C2r 2               	inx
0018C2r 2               .else
0018C2r 2               
0018C2r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
0018C5r 2  20 rr rr     	jsr exx  		; store addresses.
0018C8r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
0018CBr 2               
0018CBr 2               .if bflag
0018CBr 2               	lda #23
0018CBr 2               .else
0018CBr 2  A9 0F        	lda #15
0018CDr 2               .endif
0018CDr 2  85 rr        	sta ccnt
0018CFr 2               lloop:
0018CFr 2  20 rr rr     	jsr dline 		; draw a line.
0018D2r 2  20 rr rr     	jsr exx  		; restore old addresses.
0018D5r 2  20 rr rr     	jsr dline 		; delete a line.
0018D8r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
0018DBr 2  C6 rr        	dec ccnt
0018DDr 2  D0 F0        	bne lloop
0018DFr 2               
0018DFr 2  20 rr rr     	jsr dline		; draw a line.
0018E2r 2  20 rr rr     	jsr exx 		; restore old addresses.
0018E5r 2               
0018E5r 2               ;-------------------------------------------------------------
0018E5r 2               ; Drop through.
0018E5r 2               ; Line drawn, now work out next target address.
0018E5r 2               ;
0018E5r 2               ; Input:
0018E5r 2               ;  B  = right mask
0018E5r 2               ;  C  = left mask
0018E5r 2               ;  DE = spriteaddress
0018E5r 2               ;  scraddr = screen address
0018E5r 2               ;-------------------------------------------------------------
0018E5r 2               
0018E5r 2               dline:
0018E5r 2  A0 00        	ldy #0
0018E7r 2  B1 rr        	lda (z80_de),y 		; graphic data.
0018E9r 2  48           	pha
0018EAr 2  25 rr        	and z80_c 		; mask away what's not needed.
0018ECr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0018EEr 2  91 rr        	sta (scraddr),y 	; left byte on screen.
0018F0r 2               
0018F0r 2  68           	pla
0018F1r 2  25 rr        	and z80_b 		; mask away unwanted bits.
0018F3r 2  A0 20        	ldy #32
0018F5r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0018F7r 2  91 rr        	sta (scraddr),y 	; right byte on screen
0018F9r 2               
0018F9r 2  E6 rr        	inc z80_e 		; next graphic.
0018FBr 2  D0 02        	bne :+
0018FDr 2  E6 rr        	inc z80_d
0018FFr 2               :
0018FFr 2               ; _BEEB screen arrangement
0018FFr 2               ;	sec
0018FFr 2               ;	lda scraddr 		; one character cell to the left.
0018FFr 2               ;	sbc #8
0018FFr 2               ;	sta scraddr
0018FFr 2               ;	lda scraddr+1
0018FFr 2               ;	sbc #0
0018FFr 2               ;	sta scraddr+1
0018FFr 2  A0 00        	ldy #0
001901r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
001903r 2  A0 10        	ldy #16
001905r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
001907r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
001909r 2               
001909r 2  E6 rr        	inc z80_e 		; point to next line of data.
00190Br 2  D0 02        	bne :+
00190Dr 2  E6 rr        	inc z80_d
00190Fr 2               :
00190Fr 2               ; _BEEB screen arrangement
00190Fr 2               ;	sec
00190Fr 2               ;	lda scraddr 		; another char left.
00190Fr 2               ;	sbc #8
00190Fr 2               ;	sta scraddr
00190Fr 2               ;	lda scraddr+1
00190Fr 2               ;	sbc #0
00190Fr 2               ;	sta scraddr+1
00190Fr 2               .endif
00190Fr 2               
00190Fr 2               ;----------------------------------------------------------------------
00190Fr 2               ; Line drawn, now work out next target address.
00190Fr 2               ;----------------------------------------------------------------------
00190Fr 2               
00190Fr 2               ; _BEEB screen arrangement
00190Fr 2               
00190Fr 2               nline:
00190Fr 2  A5 rr        	lda scraddr 			; get low byte of address.
001911r 2  29 0F        	and #15
001913r 2  C9 0F        	cmp #15				; is this last line of row?
001915r 2  F0 03        	beq beeb_next_row
001917r 2               
001917r 2               	; within same row
001917r 2  E6 rr        	inc scraddr			; new low byte of address.
001919r 2  60           	rts
00191Ar 2               
00191Ar 2               beeb_next_row:
00191Ar 2  18           	clc
00191Br 2  A5 rr        	lda scraddr
00191Dr 2  69 51        	adc #<(ScreenRowBytes-15)
00191Fr 2  85 rr        	sta scraddr			; new low byte of address.
001921r 2  A5 rr        	lda scraddr+1
001923r 2  69 01        	adc #>(ScreenRowBytes-15)
001925r 2  85 rr        	sta scraddr+1			; new high byte of address.
001927r 2  60           	rts
001928r 2               
001928r 2               .if rflag
001928r 2               ;-------------------------------------------------------------
001928r 2               ; Drop through.
001928r 2               ; Line drawn, now work out next target address.
001928r 2               ;
001928r 2               ; Input:
001928r 2               ;  B  = right mask
001928r 2               ;  C  = left mask
001928r 2               ;  DE = spriteaddress
001928r 2               ;  scraddr = screen address
001928r 2               ;-------------------------------------------------------------
001928r 2               
001928r 2               ddline:
001928r 2               
001928r 2               ; NEW SPRITE
001928r 2               
001928r 2               ; first screen byte
001928r 2               
001928r 2               ddline_spraddr1:
001928r 2               	ldy $ffff,x 		; graphic data.
001928r 2               ddline_shift1:
001928r 2               	lda $ffff,y
001928r 2               	sta sprtmp
001928r 2               	and z80_c 			; mask away what's not needed.
001928r 2               
001928r 2               	ldy #0
001928r 2               	eor (scraddr),y 	; XOR with what's there.
001928r 2               	sta (scraddr),y 	; bung it in.
001928r 2               
001928r 2               ; carry to next screen byte
001928r 2               
001928r 2               	lda sprtmp			; fetch data.
001928r 2               	and z80_b 			; mask away unwanted
001928r 2               	sta sprtmp
001928r 2               
001928r 2               ; middle screen byte
001928r 2               
001928r 2               	inx
001928r 2               ddline_spraddr2:
001928r 2               	ldy $ffff,x 		; second bit of data.
001928r 2               ddline_shift2:
001928r 2               	lda $ffff,y
001928r 2               	sta sprtmp2
001928r 2               	and z80_c 			; mask away what's not needed.
001928r 2               	ora sprtmp
001928r 2               
001928r 2               	ldy #16
001928r 2               	eor (scraddr),y 	; XOR with what's there.
001928r 2               	sta (scraddr),y 	; bung it in.
001928r 2               
001928r 2               ; carry to last screen byte
001928r 2               
001928r 2               	lda sprtmp2
001928r 2               	and z80_b 			; mask away unwanted
001928r 2               
001928r 2               	ldy #32
001928r 2               	eor (scraddr),y 	; XOR with what's there.
001928r 2               	sta (scraddr),y 	; bung it in.
001928r 2               
001928r 2               ; _BEEB next row
001928r 2               
001928r 2               	lda scraddr 		; get low byte of address.
001928r 2               	and #15
001928r 2               	cmp #15				; is this last line of row?
001928r 2               	beq :+
001928r 2               
001928r 2               	; within same row can't increment page
001928r 2               	inc scraddr			; new low byte of address.
001928r 2               	bne ddline2
001928r 2               
001928r 2               :
001928r 2               	clc
001928r 2               	lda scraddr
001928r 2               	adc #<(ScreenRowBytes-15)
001928r 2               	sta scraddr			; new low byte of address.
001928r 2               	lda scraddr+1
001928r 2               	adc #>(ScreenRowBytes-15)
001928r 2               	sta scraddr+1		; new high byte of address.
001928r 2               
001928r 2               ; OLD SPRITE
001928r 2               
001928r 2               ddline2:
001928r 2               
001928r 2               ; still first row but different data!
001928r 2               
001928r 2               	dex
001928r 2               
001928r 2               ; first screen byte
001928r 2               
001928r 2               ddline_spraddr3:
001928r 2               	ldy $ffff,x			; graphic data.
001928r 2               ddline_shift3:
001928r 2               	lda $ffff,y
001928r 2               	sta sprtmp
001928r 2               	and z80_cp 			; mask away what's not needed.
001928r 2               
001928r 2               	ldy #0
001928r 2               	eor (z80_hlp),y 	; XOR with what's there.
001928r 2               	sta (z80_hlp),y 	; bung it in.
001928r 2               
001928r 2               ; carry to next screen byte
001928r 2               
001928r 2               	lda sprtmp			; fetch data.
001928r 2               	and z80_bp 			; mask away unwanted
001928r 2               	sta sprtmp
001928r 2               
001928r 2               ; middle screen byte
001928r 2               
001928r 2               	inx
001928r 2               ddline_spraddr4:
001928r 2               	ldy $ffff,x 		; second bit of data.
001928r 2               ddline_shift4:
001928r 2               	lda $ffff,y
001928r 2               	sta sprtmp2
001928r 2               	and z80_cp 			; mask away what's not needed.
001928r 2               	ora sprtmp
001928r 2               
001928r 2               	ldy #16
001928r 2               	eor (z80_hlp),y 	; XOR with what's there.
001928r 2               	sta (z80_hlp),y 	; bung it in.
001928r 2               
001928r 2               ; last screen byte
001928r 2               
001928r 2               	lda sprtmp2			; fetch data.
001928r 2               	and z80_bp 			; mask away unwanted
001928r 2               
001928r 2               	ldy #32
001928r 2               	eor (z80_hlp),y 	; XOR with what's there.
001928r 2               	sta (z80_hlp),y 	; bung it in.
001928r 2               
001928r 2               ; next row of sprite data
001928r 2               
001928r 2               	inx
001928r 2               
001928r 2               ; _BEEB screen arrangement
001928r 2               
001928r 2               	lda z80_lp 			; get low byte of address.
001928r 2               	and #15
001928r 2               	cmp #15				; is this last line of row?
001928r 2               	beq :+
001928r 2               
001928r 2               	; within same row can't increment page
001928r 2               	inc z80_lp			; new low byte of address.
001928r 2               	rts
001928r 2               
001928r 2               :
001928r 2               	clc
001928r 2               	lda z80_lp
001928r 2               	adc #<(ScreenRowBytes-15)
001928r 2               	sta z80_lp			; new low byte of address.
001928r 2               	lda z80_lp+1
001928r 2               	adc #>(ScreenRowBytes-15)
001928r 2               	sta z80_lp+1		; new high byte of address.
001928r 2               	rts
001928r 2               .endif
001928r 2               
001928r 2               ;----------------------------------------------------
001928r 2               ; Display character in A at dispx,dispy.
001928r 2               ;
001928r 2               ; Input:
001928r 2               ;  A 	   = character to print
001928r 2               ;----------------------------------------------------
001928r 2               
001928r 2               pchar:
001928r 2  85 rr        	sta fntaddr
00192Ar 2  A9 00        	lda #0
00192Cr 2  85 rr        	sta fntaddr+1
00192Er 2  06 rr        	asl fntaddr  		; multiply char by 8.
001930r 2  26 rr        	rol fntaddr+1
001932r 2  06 rr        	asl fntaddr
001934r 2  26 rr        	rol fntaddr+1
001936r 2  06 rr        	asl fntaddr
001938r 2  26 rr        	rol fntaddr+1
00193Ar 2               
00193Ar 2  A5 rr        	lda fntaddr
00193Cr 2  18           	clc
00193Dr 2  69 rr        	adc #<(FONT-256)
00193Fr 2  85 rr        	sta fntaddr		; that's the low byte.
001941r 2  A5 rr        	lda fntaddr+1
001943r 2  69 rr        	adc #>(FONT-256)
001945r 2  85 rr        	sta fntaddr+1		; add displacement.
001947r 2               
001947r 2               pchark:
001947r 2  20 rr rr     	jsr gaadd		; set colour attribute
00194Ar 2  AD rr rr     	lda fontcol
00194Dr 2  A0 00        	ldy #0
00194Fr 2  91 rr        	sta (bufaddr),y
001951r 2               
001951r 2  20 rr rr     	jsr gprad		; get screen address.
001954r 2  A2 07        	ldx #7			; lines to write.
001956r 2               pchar0:
001956r 2  A0 00        	ldy #0
001958r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
00195Ar 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
00195Dr 2               .if iflag
00195Dr 2               	eor #TxtInvert		; Invert
00195Dr 2               .endif
00195Dr 2  91 rr        	sta (scraddr),y 	; copy to screen.
00195Fr 2  E6 rr        	inc fntaddr		; next image byte.
001961r 2  D0 02        	bne :+
001963r 2  E6 rr        	inc fntaddr+1
001965r 2               :
001965r 2  CA           	dex			; next screen row down.
001966r 2  10 EE        	bpl pchar0		; repeat.
001968r 2               
001968r 2  60           	rts
001969r 2               
001969r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
00196Dr 2  03 02 01 00  
001971r 2               
001971r 2               ;----------------------------------------------------
001971r 2               ; LoadFile
001971r 2               ;----------------------------------------------------
001971r 2               
001971r 2               loadfile:
001971r 2  AA           	tax
001972r 2  A9 rr        	lda #<msgdat		; pointer to messages.
001974r 2  85 rr        	sta z80_l
001976r 2  A9 rr        	lda #>msgdat
001978r 2  85 rr        	sta z80_h
00197Ar 2  20 rr rr     	jsr getwrd		; get message number.
00197Dr 2               
00197Dr 2               ; Init screen for NTSC
00197Dr 2               ; this sets the background and border color of the screen
00197Dr 2               ; in this case border black and background black
00197Dr 2               
00197Dr 2  A9 08        	lda #%00001000
00197Fr 2  8D 0F 90     	sta RegF
001982r 2               
001982r 2               ; z80_hl should point to the textstring now.
001982r 2               ; Read filename +length into buffer
001982r 2               
001982r 2  A0 00        	ldy #0
001984r 2               nameloop:
001984r 2  B1 rr        	lda (z80_hl),y
001986r 2  30 07        	bmi lastchar
001988r 2  99 rr rr     	sta filename,y
00198Br 2  C8           	iny
00198Cr 2  4C rr rr     	jmp nameloop
00198Fr 2               lastchar:
00198Fr 2  29 7F        	and #$7f
001991r 2  99 rr rr     	sta filename,y
001994r 2  C8           	iny
001995r 2  8C rr rr     	sty filelen
001998r 2               
001998r 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
001998r 2               ;                       usually the first drive, and y set to 1 reads from the header
001998r 2               ;                       of the file the location where to save it)
001998r 2  A9 01        	lda #1
00199Ar 2  A2 08        	ldx #8		; Disk device
00199Cr 2  A0 01        	ldy #1
00199Er 2  20 BA FF     	jsr $ffba
0019A1r 2               
0019A1r 2               ; Load the file name (in accumulator the size of the string
0019A1r 2               ;                      containing the name, x low address for FileName,
0019A1r 2               ;                      y high address for FileName)
0019A1r 2  AD rr rr     	lda filelen
0019A4r 2  A2 rr        	ldx #<filename
0019A6r 2  A0 rr        	ldy #>filename
0019A8r 2  20 BD FF     	jsr $ffbd
0019ABr 2               
0019ABr 2               ; load from disk to ram
0019ABr 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
0019ADr 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
0019AFr 2  A0 00        	ldy #>$ff	; target location high (got from header)
0019B1r 2  20 D5 FF     	jsr $ffd5
0019B4r 2               
0019B4r 2  60           	rts
0019B5r 2               
0019B5r 2               filename:
0019B5r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0019B9r 2  00 00 00 00  
0019BDr 2  00 00 00 00  
0019C5r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0019C9r 2  00 00 00 00  
0019CDr 2  00 00 00 00  
0019D5r 2               filelen:
0019D5r 2  00           	.byte 0
0019D6r 2               
0019D6r 2               ;----------------------------------------------------
0019D6r 2               ; Sound
0019D6r 2               ;----------------------------------------------------
0019D6r 2               
0019D6r 2               ; Actual memory locations
0019D6r 2               
0019D6r 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
0019DAr 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
0019DEr 2  DE           SetSoundTone: 		.byte $de
0019DFr 2               
0019DFr 2               ;   asl a ; $034e
0019DFr 2               ;   ora $4010,y ; $034f $0350 $0351
0019DFr 2               
0019DFr 2               ; Start of code
0019DFr 2               
0019DFr 2               CHANNEL1_ENABLED  = $ea
0019DFr 2               CHANNEL2_ENABLED  = $eb
0019DFr 2               CHANNEL3_ENABLED  = $ec
0019DFr 2               CHANNEL4_ENABLED  = $ed
0019DFr 2               
0019DFr 2               make_sound2:
0019DFr 2               ;	lda #$01
0019DFr 2               ;	sta CHANNEL1_ENABLED
0019DFr 2               ;	sta CHANNEL2_ENABLED
0019DFr 2               ;	sta CHANNEL3_ENABLED
0019DFr 2               ;	sta CHANNEL4_ENABLED
0019DFr 2               
0019DFr 2  A0 00        	ldy #$00
0019E1r 2  AE rr rr     	ldx SetSoundTone
0019E4r 2  AD rr rr     	lda SetSoundVars
0019E7r 2  CD rr rr     	cmp SetSoundDuration		; $0359 $035a
0019EAr 2  B0 15        	bcs l0366
0019ECr 2               
0019ECr 2  AD rr rr     	lda SetSoundVars
0019EFr 2  CD rr rr     	cmp SetSoundDuration
0019F2r 2  F0 1B        	beq l0374
0019F4r 2               
0019F4r 2  A9 00        	lda #$0
0019F6r 2  85 EA        	sta CHANNEL1_ENABLED
0019F8r 2               
0019F8r 2  EE rr rr     	inc SetSoundVars
0019FBr 2  EE 0A 90     	inc $900a
0019FEr 2  4C rr rr     	jmp l0374
001A01r 2               
001A01r 2  8C 0A 90     l0366:	sty $900a
001A04r 2  EC rr rr     	cpx SetSoundVars
001A07r 2  D0 06        	bne l0374
001A09r 2  8C rr rr     	sty SetSoundVars
001A0Cr 2  8E 0A 90     	stx $900a
001A0Fr 2               
001A0Fr 2  AD rr rr     l0374:	lda SetSoundVars+1
001A12r 2  CD rr rr     	cmp SetSoundDuration+1
001A15r 2  F0 23        	beq l0392
001A17r 2               
001A17r 2  A9 00        	lda #$0
001A19r 2  85 EB        	sta CHANNEL2_ENABLED
001A1Br 2               
001A1Br 2  AD rr rr     	lda SetSoundVars+1
001A1Er 2  CD rr rr     	cmp SetSoundDuration+1		; $0377 $0378
001A21r 2  B0 09        	bcs l0384
001A23r 2  EE rr rr     	inc SetSoundVars+1
001A26r 2  EE 0B 90     	inc $900b
001A29r 2  4C rr rr     	jmp l0392
001A2Cr 2  8C 0B 90     l0384:	sty $900b
001A2Fr 2  EC rr rr     	cpx SetSoundVars+1
001A32r 2  D0 06        	bne l0392
001A34r 2  8C rr rr     	sty SetSoundVars+1
001A37r 2  8E 0B 90     	stx $900b
001A3Ar 2               
001A3Ar 2  AD rr rr     l0392:	lda SetSoundVars+2
001A3Dr 2  CD rr rr     	cmp SetSoundDuration+2
001A40r 2  F0 23        	beq l03b0
001A42r 2  A9 00        	lda #$0
001A44r 2  85 EC        	sta CHANNEL3_ENABLED
001A46r 2               
001A46r 2  AD rr rr     	lda SetSoundVars+2
001A49r 2  CD rr rr     	cmp SetSoundDuration+2		; $0395 $0396
001A4Cr 2  B0 09        	bcs l03a2
001A4Er 2  EE rr rr     	inc SetSoundVars+2
001A51r 2  CE 0C 90     	dec $900c
001A54r 2  4C rr rr     	jmp l03b0
001A57r 2  8C 0C 90     l03a2:	sty $900c
001A5Ar 2  EC rr rr     	cpx SetSoundVars+2
001A5Dr 2  D0 06        	bne l03b0
001A5Fr 2  8C rr rr     	sty SetSoundVars+2
001A62r 2  8E 0C 90     	stx $900c
001A65r 2               
001A65r 2  AD rr rr     l03b0:	lda SetSoundVars+3
001A68r 2  CD rr rr     	cmp SetSoundDuration+3		; $03b3 $03b4
001A6Br 2  B0 28        	bcs l03d3
001A6Dr 2               
001A6Dr 2  AD rr rr     	lda SetSoundVars+3
001A70r 2  CD rr rr     	cmp SetSoundDuration+3
001A73r 2  F0 2E        	beq l03e1
001A75r 2               
001A75r 2  A9 00        	lda #$0
001A77r 2  85 ED        	sta CHANNEL4_ENABLED
001A79r 2               
001A79r 2  EE rr rr     	inc SetSoundVars+3
001A7Cr 2  AD rr rr     	lda SetSoundVars+3
001A7Fr 2  C9 16        	cmp #$16
001A81r 2  D0 07        	bne l03c8
001A83r 2  A9 B0        	lda #$b0
001A85r 2  8D 0D 90     	sta $900d
001A88r 2  F0 19        	beq l03e1
001A8Ar 2  C9 2B        l03c8:	cmp #$2b
001A8Cr 2  D0 15        	bne l03e1
001A8Er 2  A9 A0        	lda #$a0
001A90r 2  8D 0D 90     	sta $900d
001A93r 2  F0 0E        	beq l03e1
001A95r 2  8C 0D 90     l03d3:	sty $900d
001A98r 2  EC rr rr     	cpx SetSoundVars+3
001A9Br 2  D0 06        	bne l03e1
001A9Dr 2  8C rr rr     	sty SetSoundVars+3
001AA0r 2  8E 0D 90     	stx $900d
001AA3r 2               
001AA3r 2  60           l03e1:	rts
001AA4r 2               
001AA4r 1               ;	.include "music.inc"
001AA4r 1               	.include "z80.asm"
001AA4r 2               ;------------------------------------------------------
001AA4r 2               ; z80.asm
001AA4r 2               ; spectrum stuff
001AA4r 2               ; adresses
001AA4r 2               
001AA4r 2               ;ws	 = $60
001AA4r 2               
001AA4r 2               ;z80_f	 = ws+$00
001AA4r 2               ;z80_a	 = ws+$01
001AA4r 2               ;z80_af	 = z80_f
001AA4r 2               
001AA4r 2               ;z80_c	 = ws+$02
001AA4r 2               ;z80_b	 = ws+$03
001AA4r 2               ;z80_bc	 = z80_c
001AA4r 2               
001AA4r 2               ;z80_e	 = ws+$04
001AA4r 2               ;z80_d	 = ws+$05
001AA4r 2               ;z80_de	 = z80_e
001AA4r 2               
001AA4r 2               ;z80_l	 = ws+$06
001AA4r 2               ;z80_h	 = ws+$07
001AA4r 2               ;z80_hl	 = z80_l
001AA4r 2               
001AA4r 2               ;z80_x    = ws+$08
001AA4r 2               ;z80_i    = ws+$09
001AA4r 2               ;z80_ix	 = z80_x
001AA4r 2               
001AA4r 2               ;z80_iy	 = ws+$0a
001AA4r 2               
001AA4r 2               ;z80_fp	 = ws+$0c
001AA4r 2               ;z80_ap	 = ws+$0d
001AA4r 2               
001AA4r 2               ;z80_cp	 = ws+$0e
001AA4r 2               ;z80_bp	 = ws+$0f
001AA4r 2               ;z80_bcp = z80_cp
001AA4r 2               
001AA4r 2               ;z80_ep	 = ws+$10
001AA4r 2               ;z80_dp	 = ws+$11
001AA4r 2               ;z80_dep = z80_ep
001AA4r 2               
001AA4r 2               ;z80_lp	 = ws+$12
001AA4r 2               ;z80_hp	 = ws+$13
001AA4r 2               ;z80_hlp = z80_lp
001AA4r 2               
001AA4r 2               ;z80_sp   = ws+$14
001AA4r 2               
001AA4r 2               ;z80_reg0 = ws+$16
001AA4r 2               ;z80_reg1 = ws+$17
001AA4r 2               ;z80_reg2 = ws+$18
001AA4r 2               ;z80_reg3 = ws+$19
001AA4r 2               
001AA4r 2               ;z80_r	 = ws+$1a
001AA4r 2               
001AA4r 2               ; Contains seperatly 1 bit set
001AA4r 2               ; _BEEB this is not safe memory to use as required by MOS
001AA4r 2               
001AA4r 2               _bitmem0	= $f8
001AA4r 2               _bitmem1	= $f9
001AA4r 2               _bitmem2	= $fa
001AA4r 2               _bitmem3	= $fb
001AA4r 2               _bitmem4	= $fc
001AA4r 2               _bitmem5	= $fd
001AA4r 2               _bitmem6	= $fe
001AA4r 2               _bitmem7	= $ff
001AA4r 2               
001AA4r 2               ; constants
001AA4r 2               _bitvalue0	= $01
001AA4r 2               _bitvalue1	= $02
001AA4r 2               _bitvalue2	= $04
001AA4r 2               _bitvalue3	= $08
001AA4r 2               _bitvalue4	= $10
001AA4r 2               _bitvalue5	= $20
001AA4r 2               _bitvalue6	= $40
001AA4r 2               _bitvalue7	= $80
001AA4r 2               
001AA4r 2               _notbitvalue0	= $fe
001AA4r 2               _notbitvalue1	= $fd
001AA4r 2               _notbitvalue2	= $fb
001AA4r 2               _notbitvalue3	= $f7
001AA4r 2               _notbitvalue4	= $ef
001AA4r 2               _notbitvalue5	= $df
001AA4r 2               _notbitvalue6	= $bf
001AA4r 2               _notbitvalue7	= $7f
001AA4r 2               
001AA4r 2               
001AA4r 2               ;add_hl_bc:
001AA4r 2               ;		lda z80_l
001AA4r 2               ;		clc
001AA4r 2               ;		adc z80_c
001AA4r 2               ;		sta z80_l
001AA4r 2               ;		lda z80_h
001AA4r 2               ;		adc z80_b
001AA4r 2               ;		sta z80_h
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;add_ix_de:
001AA4r 2               ;		lda z80_ix
001AA4r 2               ;		clc
001AA4r 2               ;		adc z80_e
001AA4r 2               ;		sta z80_ix
001AA4r 2               ;		lda z80_ix+1
001AA4r 2               ;		adc z80_d
001AA4r 2               ;		sta z80_ix+1
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;add_iy_de:
001AA4r 2               ;		lda z80_iy
001AA4r 2               ;		clc
001AA4r 2               ;		adc z80_e
001AA4r 2               ;		sta z80_iy
001AA4r 2               ;		lda z80_iy+1
001AA4r 2               ;		adc z80_d
001AA4r 2               ;		sta z80_iy+1
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;add_hl_de:
001AA4r 2               ;		lda z80_l
001AA4r 2               ;		clc
001AA4r 2               ;		adc z80_e
001AA4r 2               ;		sta z80_l
001AA4r 2               ;		lda z80_h
001AA4r 2               ;		adc z80_d
001AA4r 2               ;		sta z80_h
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;add_ix_bc:
001AA4r 2               ;		lda z80_ix
001AA4r 2               ;		clc
001AA4r 2               ;		adc z80_c
001AA4r 2               ;		sta z80_ix
001AA4r 2               ;		lda z80_ix+1
001AA4r 2               ;		adc z80_b
001AA4r 2               ;		sta z80_ix+1
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;add_iy_bc:
001AA4r 2               ;		lda z80_iy
001AA4r 2               ;		clc
001AA4r 2               ;		adc z80_c
001AA4r 2               ;		sta z80_iy
001AA4r 2               ;		lda z80_iy+1
001AA4r 2               ;		adc z80_b
001AA4r 2               ;		sta z80_iy+1
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;sbc_hl_de:
001AA4r 2               ;		lda z80_l
001AA4r 2               ;		sbc z80_e
001AA4r 2               ;		sta z80_l
001AA4r 2               ;		lda z80_h
001AA4r 2               ;		sbc z80_d
001AA4r 2               ;		sta z80_h
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;sbc_hl_bc:
001AA4r 2               ;		lda z80_l
001AA4r 2               ;		sbc z80_c
001AA4r 2               ;		sta z80_l
001AA4r 2               ;		lda z80_h
001AA4r 2               ;		sbc z80_b
001AA4r 2               ;		sta z80_h
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;cmp_hl_bc:
001AA4r 2               ;		lda z80_l
001AA4r 2               ;		cmp z80_c
001AA4r 2               ;		bne cmp_hl_bc_end
001AA4r 2               ;		lda z80_h
001AA4r 2               ;		cmp z80_b
001AA4r 2               ;cmp_hl_bc_end:
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;cmp_iy_ix:
001AA4r 2               ;		lda z80_iy
001AA4r 2               ;		cmp z80_ix
001AA4r 2               ;		bne cmp_iy_ix_end
001AA4r 2               ;		lda z80_iy+1
001AA4r 2               ;		cmp z80_ix+1
001AA4r 2               ;cmp_iy_ix_end:
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;dec_hl:
001AA4r 2               ;		lda z80_l
001AA4r 2               ;		bne dec_hl_no_dec_h
001AA4r 2               ;		dec z80_h
001AA4r 2               ;dec_hl_no_dec_h:
001AA4r 2               ;		dec z80_l
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;dec_ix:
001AA4r 2               ;		lda z80_ix
001AA4r 2               ;		bne dec_ix_no_dec_h
001AA4r 2               ;		dec z80_ix+1
001AA4r 2               ;dec_ix_no_dec_h:
001AA4r 2               ;		dec z80_ix
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;dec_bc:
001AA4r 2               ;		lda z80_c
001AA4r 2               ;		bne dec_bc_no_dec_b
001AA4r 2               ;		dec z80_b
001AA4r 2               ;dec_bc_no_dec_b:
001AA4r 2               ;		dec z80_c
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;dec_de:
001AA4r 2               ;		lda z80_e
001AA4r 2               ;		bne dec_de_no_dec_d
001AA4r 2               ;		dec z80_d
001AA4r 2               ;dec_de_no_dec_d:
001AA4r 2               ;		dec z80_e
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               ;ex_af_afs:
001AA4r 2               ;	rts
001AA4r 2               ;ex_de_hl:
001AA4r 2               ;		lda z80_e
001AA4r 2               ;		ldx z80_l
001AA4r 2               ;		stx z80_e
001AA4r 2               ;		sta z80_l
001AA4r 2               ;		lda z80_d
001AA4r 2               ;		ldx z80_h
001AA4r 2               ;		stx z80_d
001AA4r 2               ;		sta z80_h
001AA4r 2               ;		rts
001AA4r 2               ;
001AA4r 2               exx:
001AA4r 2  A5 rr        		lda z80_c
001AA6r 2  A4 rr        		ldy z80_cp
001AA8r 2  84 rr        		sty z80_c
001AAAr 2  85 rr        		sta z80_cp
001AACr 2  A5 rr        		lda z80_b
001AAEr 2  A4 rr        		ldy z80_bp
001AB0r 2  84 rr        		sty z80_b
001AB2r 2  85 rr        		sta z80_bp
001AB4r 2  A5 rr        		lda z80_e
001AB6r 2  A4 rr        		ldy z80_ep
001AB8r 2  84 rr        		sty z80_e
001ABAr 2  85 rr        		sta z80_ep
001ABCr 2  A5 rr        		lda z80_d
001ABEr 2  A4 rr        		ldy z80_dp
001AC0r 2  84 rr        		sty z80_d
001AC2r 2  85 rr        		sta z80_dp
001AC4r 2  A5 rr        		lda scraddr
001AC6r 2  A4 rr        		ldy z80_lp
001AC8r 2  84 rr        		sty scraddr
001ACAr 2  85 rr        		sta z80_lp
001ACCr 2  A5 rr        		lda scraddr+1
001ACEr 2  A4 rr        		ldy z80_hp
001AD0r 2  84 rr        		sty scraddr+1
001AD2r 2  85 rr        		sta z80_hp
001AD4r 2  60           		rts
001AD5r 2               
001AD5r 2               ;ex_sp_hl:
001AD5r 2               ;		tsx
001AD5r 2               ;		lda $0103,x
001AD5r 2               ;		ldy z80_h
001AD5r 2               ;		sta z80_h
001AD5r 2               ;		tya
001AD5r 2               ;		sta $0103,x
001AD5r 2               ;		lda $0104,x
001AD5r 2               ;		ldy z80_l
001AD5r 2               ;		sta z80_l
001AD5r 2               ;		tya
001AD5r 2               ;		sta $104,x
001AD5r 2               ;		rts
001AD5r 2               ;
001AD5r 2               ;ldi:
001AD5r 2               ;	rts
001AD5r 2               ;ldir:
001AD5r 2               ;		ldy #$00
001AD5r 2               ;		ldx z80_b
001AD5r 2               ;		beq ldir_last_page
001AD5r 2               ;ldir_loop:
001AD5r 2               ;		lda (z80_hl),y
001AD5r 2               ;		sta (z80_de),y
001AD5r 2               ;		iny
001AD5r 2               ;		bne ldir_loop
001AD5r 2               ;		inc z80_h
001AD5r 2               ;		inc z80_d
001AD5r 2               ;		dex
001AD5r 2               ;		bne ldir_loop
001AD5r 2               ;ldir_last_page:
001AD5r 2               ;		lda z80_c
001AD5r 2               ;		beq ldir_end
001AD5r 2               ;ldir_last_page_loop:
001AD5r 2               ;		lda (z80_hl),y
001AD5r 2               ;		sta (z80_de),y
001AD5r 2               ;		iny
001AD5r 2               ;		cpy z80_c
001AD5r 2               ;		bne ldir_last_page_loop
001AD5r 2               ;ldir_end:
001AD5r 2               ;		stx z80_c
001AD5r 2               ;		stx z80_b
001AD5r 2               ;		tya
001AD5r 2               ;		clc
001AD5r 2               ;		adc z80_l
001AD5r 2               ;		sta z80_l
001AD5r 2               ;		bcc *+4
001AD5r 2               ;		inc z80_h
001AD5r 2               ;		tya
001AD5r 2               ;		clc
001AD5r 2               ;		adc z80_e
001AD5r 2               ;		sta z80_e
001AD5r 2               ;		bcc *+4
001AD5r 2               ;		inc z80_d
001AD5r 2               ;		rts
001AD5r 2               ;
001AD5r 2               ;lddr:		ldy #$00
001AD5r 2               ;lddr_loop:
001AD5r 2               ;		lda (z80_hl),y
001AD5r 2               ;		sta (z80_de),y
001AD5r 2               ;		jsr dec_hl
001AD5r 2               ;		jsr dec_de
001AD5r 2               ;		jsr dec_bc
001AD5r 2               ;		lda z80_b
001AD5r 2               ;		ora z80_c
001AD5r 2               ;		bne lddr_loop
001AD5r 2               ;		rts
001AD5r 2               ;ei:
001AD5r 2               ;		rts
001AD5r 2               ;di:
001AD5r 2               ;		rts
001AD5r 2               
001AD5r 2               ;-------------------------------------------------------------
001AD5r 2               ; Set bits in bitmem
001AD5r 2               ;-------------------------------------------------------------
001AD5r 2               
001AD5r 2               .if 0
001AD5r 2               z80_init:
001AD5r 2               	ldx #$00
001AD5r 2               	lda #$01
001AD5r 2               z80_init_loop:
001AD5r 2               	sta _bitmem0,x
001AD5r 2               	inx
001AD5r 2               	asl a
001AD5r 2               	bne z80_init_loop
001AD5r 2               	rts
001AD5r 2               .endif
001AD5r 2               
001AD5r 2               push_af:
001AD5r 2               push_bc:
001AD5r 2               push_de:
001AD5r 2               push_hl:
001AD5r 2               
001AD5r 2               pop_af:
001AD5r 2               pop_bc:
001AD5r 2               pop_de:
001AD5r 2               pop_ix:
001AD5r 2               pop_hl:
001AD5r 2               
001AD5r 2               add_hl_hl:
001AD5r 2               
001AD5r 2               inc_bc:
001AD5r 2               inc_de:
001AD5r 2               inc_hl:
001AD5r 2               inc_ix:
001AD5r 2               inc_sp:
001AD5r 2               
001AD5r 2               cpir:
001AD5r 2               
001AD5r 2               ex_af_af:
001AD5r 2               ;	rts
001AD5r 2               
001AD5r 1               
001AD5r 1               eind_asm:
001AD5r 1               eop:					; End Of Program
001AD5r 1               
001AD5r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
001AD5r 1               
