ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 1 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2  xx           shrctr:	    .res 1
000060r 2  xx           explcnt:    .res 1
000061r 2  xx           seed3:	    .res 1
000062r 2               .endif
000062r 2               
000062r 2               .if aflag
000062r 2               pbbuf:      .res 2
000062r 2               pbptr:      .res 2
000062r 2               .endif
000062r 2               
000062r 2  xx           tmp1:       .res 1
000063r 2  xx           tmp2:       .res 1
000064r 2               
000064r 2  xx           SOUNDS_STATUS:      .res 1
000065r 2               
000065r 2               ;----------------------------------------------------
000065r 2               ; Music player variables
000065r 2               ;----------------------------------------------------
000065r 2               
000065r 2               ;SONG_POS:		.res 1	; = $90
000065r 2               ;PATTERN_POS:		.res 1	; = $91
000065r 2               ;FRAME_COUNT:		.res 1	; = $92
000065r 2               ;FRAME_LENGTH:		.res 1	; = $93
000065r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000065r 2               ;SONG_END_TRUE:		.res 1	; = $95
000065r 2               
000065r 2               ; 2 byte address of pattern data
000065r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000065r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000065r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000065r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000065r 2               
000065r 2               ; #$00 == inactive mode
000065r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000065r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000065r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000065r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000065r 2               
000065r 2               ;TEMP_GUY:		.res 1	; = $a4
000065r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000065r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000065r 2               ;FAST_COUNTER:		.res 1	; = $a7
000065r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000065r 2               
000065r 1               	.include "z80-zp.inc"
000065r 2               ;ws	 = $60
000065r 2               
000065r 2  xx           z80_f: .res 1;	 = ws+$00
000066r 2  xx           z80_a: .res 1;	 = ws+$01
000067r 2               z80_af	 = z80_f
000067r 2               
000067r 2  xx           z80_c: .res 1;	 = ws+$02
000068r 2  xx           z80_b: .res 1;	 = ws+$03
000069r 2               z80_bc	 = z80_c
000069r 2               
000069r 2  xx           z80_e: .res 1;	 = ws+$04
00006Ar 2  xx           z80_d: .res 1;	 = ws+$05
00006Br 2               z80_de	 = z80_e
00006Br 2               
00006Br 2  xx           z80_l: .res 1;	 = ws+$06
00006Cr 2  xx           z80_h: .res 1;	 = ws+$07
00006Dr 2               z80_hl	 = z80_l
00006Dr 2               
00006Dr 2  xx           z80_x: .res 1;    = ws+$08
00006Er 2  xx           z80_i: .res 1;    = ws+$09
00006Fr 2               z80_ix	 = z80_x
00006Fr 2               
00006Fr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
000071r 2               
000071r 2  xx           z80_fp: .res 1;	 = ws+$0c
000072r 2  xx           z80_ap: .res 1;	 = ws+$0d
000073r 2               
000073r 2  xx           z80_cp: .res 1;	 = ws+$0e
000074r 2  xx           z80_bp: .res 1;	 = ws+$0f
000075r 2               z80_bcp	 = z80_cp
000075r 2               
000075r 2  xx           z80_ep: .res 1;	 = ws+$10
000076r 2  xx           z80_dp: .res 1;	 = ws+$11
000077r 2               z80_dep	 = z80_ep
000077r 2               
000077r 2  xx           z80_lp: .res 1;	 = ws+$12
000078r 2  xx           z80_hp: .res 1;	 = ws+$13
000079r 2               z80_hlp	 = z80_lp
000079r 2               
000079r 2  xx xx        z80_sp: .res 2;   = ws+$14
00007Br 2               
00007Br 2  xx           z80_reg0: .res 1; = ws+$16
00007Cr 2  xx           z80_reg1: .res 1; = ws+$17
00007Dr 2  xx           z80_reg2: .res 1; = ws+$18
00007Er 2  xx           z80_reg3: .res 1; = ws+$19
00007Fr 2               
00007Fr 2               ;z80_r: .res 1;	 = ws+$1a
00007Fr 2               
00007Fr 1               
00007Fr 1               ;----------------------------------------------
00007Fr 1               ; BASIC header
00007Fr 1               ;----------------------------------------------
00007Fr 1               
00007Fr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "bs-test-joy.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 12
000000r 3               	CentreY		= 38
000000r 3               	CentreXMP   = 14
000000r 3               	CentreYMP   = 36
000000r 3               	timervalue	= 24000
000000r 3               	timerint	= 24000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	CentreXMP   = 6
000000r 3               	CentreYMP   = 24
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  01           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  14           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  1F           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  08           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  98           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  A0           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 CC        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3  A9 rr        	lda #<objdta		; objects table.
000028r 3  85 rr        	sta z80_x
00002Ar 3  A9 rr        	lda #>objdta
00002Cr 3  85 rr        	sta z80_i
00002Er 3               
00002Er 3  AE rr rr     	ldx numob 		; number of objects in the game.
000031r 3               iniob0:
000031r 3  A0 24        	ldy #36
000033r 3  B1 rr        	lda (z80_ix),y 		; start screen.
000035r 3  A0 21        	ldy #33
000037r 3  91 rr        	sta (z80_ix),y 		; set start screen.
000039r 3               
000039r 3  A0 25        	ldy #37
00003Br 3  B1 rr        	lda (z80_ix),y 		; find start y.
00003Dr 3  A0 22        	ldy #34
00003Fr 3  91 rr        	sta (z80_ix),y 		; set start y.
000041r 3               
000041r 3  A0 26        	ldy #38
000043r 3  B1 rr        	lda (z80_ix),y 		; get initial x.
000045r 3  A0 23        	ldy #35
000047r 3  91 rr        	sta (z80_ix),y 		; set x coord.
000049r 3               
000049r 3  18           	clc 			; point to next object.
00004Ar 3  A5 rr        	lda z80_x
00004Cr 3  69 27        	adc #39			; distance between objects.
00004Er 3  85 rr        	sta z80_x
000050r 3  90 02        	bcc :+
000052r 3  E6 rr        	inc z80_i
000054r 3               :
000054r 3  CA           	dex 			; repeat.
000055r 3  D0 DA        	bne iniob0
000057r 3               
000057r 3  60           	rts
000058r 3               .endif
000058r 3               
000058r 3               ;-----------------------------------------------
000058r 3               ; Redraw the screen.
000058r 3               ;
000058r 3               ; Remove old copy of all sprites for redraw.
000058r 3               ;-----------------------------------------------
000058r 3               
000058r 3               redraw:
000058r 3               .if xflag
000058r 3               	lda #WINDOWWID
000058r 3               	sta winwid
000058r 3               	lda #WINDOWHGT
000058r 3               	sta winhgt
000058r 3               .endif
000058r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00005Ar 3  48           	pha
00005Br 3  A5 rr        	lda z80_x
00005Dr 3  48           	pha
00005Er 3               
00005Er 3  20 rr rr     	jsr droom		; show screen layout.
000061r 3               .if oflag
000061r 3  20 rr rr     	jsr shwob		; draw objects.
000064r 3               .endif
000064r 3               numsp0:
000064r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000066r 3  85 rr        	sta tmp
000068r 3               
000068r 3  A9 rr        	lda #<sprtab		; sprite table.
00006Ar 3  85 rr        	sta z80_x
00006Cr 3  A9 rr        	lda #>sprtab
00006Er 3  85 rr        	sta z80_i
000070r 3               redrw0:
000070r 3  A0 00        	ldy #0
000072r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
000074r 3  C9 FF        	cmp #255		; is it enabled?
000076r 3  F0 0B        	beq redrw1 		; no, find next one.
000078r 3               
000078r 3  A0 03        	ldy #var_Y
00007Ar 3  B1 rr        	lda (z80_ix),y 		; sprite y.
00007Cr 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
00007Er 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000080r 3               
000080r 3  20 rr rr     	jsr sspria		; show single sprite.
000083r 3               
000083r 3               redrw1:
000083r 3  18           	clc			; next sprite.
000084r 3  A5 rr        	lda z80_x
000086r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000088r 3  85 rr        	sta z80_x
00008Ar 3  90 02        	bcc :+
00008Cr 3  E6 rr        	inc z80_i
00008Er 3               :
00008Er 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000090r 3  D0 DE        	bne redrw0
000092r 3               
000092r 3               rpblc1:
000092r 3               ;	jsr dshrp		; redraw shrapnel.
000092r 3               
000092r 3               .if aflag
000092r 3               	jsr rbloc		; draw blocks for this screen
000092r 3               .endif
000092r 3  68           	pla			; retrieve sprite pointer.
000093r 3  85 rr        	sta z80_x
000095r 3  68           	pla
000096r 3  85 rr        	sta z80_i
000098r 3               
000098r 3  60           	rts
000099r 3               
000099r 3               ;----------------------------------------------------------------------
000099r 3               ; Clear screen routine.
000099r 3               ;
000099r 3               ; Fill screenmem $9400-$97ff with ScrFillByte
000099r 3               ;----------------------------------------------------------------------
000099r 3               
000099r 3               cls:
000099r 3  A9 10        	lda #>CharAddress	; Character RAM address.
00009Br 3  8D rr rr     	sta clrdata+2
00009Er 3               
00009Er 3               ; Clear bitmap data
00009Er 3               
00009Er 3  A9 00        	lda #ScrFillByte	; Clear screen
0000A0r 3  A0 00        	ldy #0
0000A2r 3  A2 10        	ldx #16
0000A4r 3               clrdata:
0000A4r 3  99 00 10     	sta CharAddress,y
0000A7r 3  C8           	iny
0000A8r 3  D0 FA        	bne clrdata
0000AAr 3  EE rr rr     	inc clrdata+2
0000ADr 3  CA           	dex
0000AEr 3  D0 F4        	bne clrdata
0000B0r 3               
0000B0r 3               ; Clear colour attributes
0000B0r 3               
0000B0r 3  AD rr rr     	lda fontcol
0000B3r 3  A2 00        	ldx #0
0000B5r 3               clrcolour:
0000B5r 3  9D 00 94     	sta ColorAttr-$200,x
0000B8r 3  9D 00 96     	sta ColorAttr,x
0000BBr 3  E8           	inx
0000BCr 3  D0 F7        	bne clrcolour
0000BEr 3  60           	rts
0000BFr 3               
0000BFr 3               ;----------------------------------------------------------------------
0000BFr 3               ; Clear colour attributes
0000BFr 3               ;
0000BFr 3               ; Reset colour attributes to fontcol
0000BFr 3               ;----------------------------------------------------------------------
0000BFr 3               
0000BFr 3               clrcol:
0000BFr 3  AD rr rr     	lda fontcol		; Clear colour attributes
0000C2r 3  A2 00        	ldx #0
0000C4r 3               clscol:
0000C4r 3  9D 00 96     	sta ColorAttr,x
0000C7r 3  E8           	inx
0000C8r 3  E0 F2        	cpx #242
0000CAr 3  D0 F8        	bne clscol
0000CCr 3               
0000CCr 3  60           	rts
0000CDr 3               
0000CDr 3               ;----------------------------------------------------------------------
0000CDr 3               ; FODDER check
0000CDr 3               ;----------------------------------------------------------------------
0000CDr 3               
0000CDr 3               .if pflag .or dflag
0000CDr 3               fdchk:
0000CDr 3  C9 04        	cmp #FODDER 		; is it fodder?
0000CFr 3  F0 01        	beq :+
0000D1r 3  60           	rts 			; no.
0000D2r 3               :
0000D2r 3  A9 00        	lda #0			; wipe fodder in MAP
0000D4r 3  A0 00        	ldy #0
0000D6r 3  91 rr        	sta (bufaddr),y 	; rewrite block type.
0000D8r 3               
0000D8r 3  A5 rr        	lda dispx		; x=x/8
0000DAr 3  48           	pha
0000DBr 3  4A           	lsr a
0000DCr 3  4A           	lsr a
0000DDr 3  4A           	lsr a
0000DEr 3  85 rr        	sta dispx
0000E0r 3               
0000E0r 3  A5 rr        	lda dispy		; y=y/8
0000E2r 3  48           	pha
0000E3r 3  4A           	lsr a
0000E4r 3  4A           	lsr a
0000E5r 3  4A           	lsr a
0000E6r 3  85 rr        	sta dispy
0000E8r 3               
0000E8r 3  A9 00        	lda #0 			; block to write.
0000EAr 3  20 rr rr     	jsr pattr 		; write block.
0000EDr 3               
0000EDr 3  68           	pla
0000EEr 3  85 rr        	sta dispy
0000F0r 3  68           	pla
0000F1r 3  85 rr        	sta dispx
0000F3r 3  60           	rts
0000F4r 3               .endif
0000F4r 3               
0000F4r 3               ;----------------------------------------------------
0000F4r 3               ; Scrolly text and puzzle variables.
0000F4r 3               ;----------------------------------------------------
0000F4r 3               
0000F4r 3               .if sflag
0000F4r 3               txtbit:	.byte 128		; bit to write.
0000F4r 3               txtwid:	.byte 16		; width of ticker message.
0000F4r 3               txtpos:	.word msgdat
0000F4r 3               txtini:	.word msgdat
0000F4r 3               txtscr:	.word ScreenAddr
0000F4r 3               .endif
0000F4r 3               
0000F4r 3               ;----------------------------------------------------
0000F4r 3               ; Specialist routines.
0000F4r 3               ; Process shrapnel.
0000F4r 3               ;----------------------------------------------------
0000F4r 3               proshr:
0000F4r 3               .if pflag
0000F4r 3  A9 00        	lda #<SHRAPN		; table.
0000F6r 3  85 rr        	sta z80_x
0000F8r 3  A9 09        	lda #>SHRAPN
0000FAr 3  85 rr        	sta z80_i
0000FCr 3               
0000FCr 3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
0000FEr 3  85 rr        	sta shrctr
000100r 3               prosh0:
000100r 3  A0 00        	ldy #0
000102r 3  B1 rr        	lda (z80_ix),y		; on/off marker.
000104r 3  0A           	asl a
000105r 3               proshx:
000105r 3  B0 03        	bcs :+
000107r 3  20 rr rr     	jsr prosh1 		; on, so process it.
00010Ar 3               :
00010Ar 3  18           	clc
00010Br 3  A5 rr        	lda z80_x
00010Dr 3  69 06        	adc #SHRSIZ
00010Fr 3  85 rr        	sta z80_x
000111r 3  90 02        	bcc :+
000113r 3  E6 rr        	inc z80_i
000115r 3               :
000115r 3  C6 rr        	dec shrctr		; round again.
000117r 3  D0 E7        	bne prosh0
000119r 3               .endif
000119r 3               .if sflag
000119r 3               	jsr scrly
000119r 3               .endif
000119r 3  60           	rts
00011Ar 3               
00011Ar 3               .if pflag
00011Ar 3               ;----------------------------------------------------
00011Ar 3               ; Proces shrapnel piece
00011Ar 3               ;----------------------------------------------------
00011Ar 3               
00011Ar 3               prosh1:
00011Ar 3  20 rr rr     	jsr plot 		; delete the pixel.
00011Dr 3               
00011Dr 3  A9 rr        	lda #<shrptr		; shrapnel routine pointers.
00011Fr 3  85 rr        	sta z80_l
000121r 3  A9 rr        	lda #>shrptr
000123r 3  85 rr        	sta z80_h
000125r 3               
000125r 3  A0 00        	ldy #0
000127r 3  B1 rr        	lda (z80_ix),y		; restore shrapnel type.
000129r 3  20 rr rr     	jsr prosh2 		; run the routine.
00012Cr 3  20 rr rr     	jsr chkxy		; check x and y are good before we redisplay.
00012Fr 3               
00012Fr 3  A9 06        	lda #<SHRSIZ 		; distance to next.
000131r 3  85 rr        	sta z80_e
000133r 3  A9 00        	lda #>SHRSIZ
000135r 3  85 rr        	sta z80_d
000137r 3  60           	rts
000138r 3               
000138r 3               ;----------------------------------------------------
000138r 3               ; Run the routine
000138r 3               ;----------------------------------------------------
000138r 3               
000138r 3               prosh2:
000138r 3  0A           	asl a 			; 2 bytes per address.
000139r 3  A8           	tay
00013Ar 3  B9 rr rr     	lda shrptr,y
00013Dr 3  85 rr        	sta z80_l
00013Fr 3  B9 rr rr     	lda shrptr+1,y 		; fetch high byte from table.
000142r 3  85 rr        	sta z80_h
000144r 3  6C rr rr     	jmp (z80_hl) 		; jump to routine.
000147r 3               
000147r 3               ;----------------------------------------------------
000147r 3               ; Paricle routine table
000147r 3               ;----------------------------------------------------
000147r 3               
000147r 3  rr rr        shrptr:	.word laser		; laser.
000149r 3  rr rr        	.word trail		; vapour trail.
00014Br 3  rr rr        	.word shrap		; shrapnel from explosion.
00014Dr 3  rr rr        	.word dotl		; horizontal starfield left.
00014Fr 3  rr rr        	.word dotr		; horizontal starfield right.
000151r 3  rr rr        	.word dotu		; vertical starfield up.
000153r 3  rr rr        	.word dotd		; vertical starfield down.
000155r 3  rr rr        	.word ptcusr		; user particle.
000157r 3               
000157r 3               ;----------------------------------------------------
000157r 3               ; Explosion shrapnel.
000157r 3               ;----------------------------------------------------
000157r 3               
000157r 3               shrap:
000157r 3  A0 01        	ldy #1
000159r 3  B1 rr        	lda (z80_ix),y 		; get the angle.
00015Br 3  18           	clc
00015Cr 3  69 rr        	adc #<shrsin		; shrapnel sine table.
00015Er 3  85 rr        	sta z80_l
000160r 3  A9 rr        	lda #>shrsin
000162r 3  69 00        	adc #0
000164r 3  85 rr        	sta z80_h
000166r 3               
000166r 3  A0 00        	ldy #0
000168r 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
00016Ar 3  85 rr        	sta z80_e
00016Cr 3  E6 rr        	inc z80_l 		; next byte of table.
00016Er 3  D0 02        	bne :+
000170r 3  E6 rr        	inc z80_h
000172r 3               :
000172r 3  A0 00        	ldy #0
000174r 3  B1 rr        	lda (z80_hl),y		; fetch value from table.
000176r 3  85 rr        	sta z80_d
000178r 3  E6 rr        	inc z80_l		; next byte of table.
00017Ar 3  D0 02        	bne :+
00017Cr 3  E6 rr        	inc z80_h
00017Er 3               :
00017Er 3  A0 00        	ldy #0
000180r 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000182r 3  85 rr        	sta z80_c
000184r 3  E6 rr        	inc z80_l 		; next byte of table.
000186r 3  D0 02        	bne :+
000188r 3  E6 rr        	inc z80_h
00018Ar 3               :
00018Ar 3  A0 00        	ldy #0
00018Cr 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
00018Er 3  85 rr        	sta z80_b
000190r 3               
000190r 3  A0 02        	ldy #2
000192r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in hl.
000194r 3  18           	clc
000195r 3  65 rr        	adc z80_e		; add sine lb
000197r 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
000199r 3  A0 03        	ldy #3
00019Br 3  B1 rr        	lda (z80_ix),y
00019Dr 3  65 rr        	adc z80_d		; add sine hb
00019Fr 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
0001A1r 3               
0001A1r 3  A0 04        	ldy #4
0001A3r 3  B1 rr        	lda (z80_ix),y	 	; y coordinate in hl.
0001A5r 3  18           	clc
0001A6r 3  65 rr        	adc z80_c		; add cosine lb
0001A8r 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
0001AAr 3  A0 05        	ldy #5
0001ACr 3  B1 rr        	lda (z80_ix),y
0001AEr 3  65 rr        	adc z80_b		; add cosine lb
0001B0r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
0001B2r 3               
0001B2r 3  60           	rts
0001B3r 3               
0001B3r 3               ;----------------------------------------------------
0001B3r 3               ; Move dots
0001B3r 3               ;----------------------------------------------------
0001B3r 3               
0001B3r 3               dotl:
0001B3r 3  A0 05        	ldy #5
0001B5r 3  B1 rr        	lda (z80_ix),y
0001B7r 3  38           	sec
0001B8r 3  E9 01        	sbc #1		 	; move left.
0001BAr 3  91 rr        	sta (z80_ix),y
0001BCr 3  60           	rts
0001BDr 3               dotr:
0001BDr 3  A0 05        	ldy #5
0001BFr 3  B1 rr        	lda (z80_ix),y
0001C1r 3  18           	clc
0001C2r 3  69 01        	adc #1		 	; move left.
0001C4r 3  91 rr        	sta (z80_ix),y
0001C6r 3  60           	rts
0001C7r 3               dotu:
0001C7r 3  A0 03        	ldy #3
0001C9r 3  B1 rr        	lda (z80_ix),y
0001CBr 3  38           	sec
0001CCr 3  E9 01        	sbc #1		 	; move up.
0001CEr 3  91 rr        	sta (z80_ix),y
0001D0r 3  60           	rts
0001D1r 3               dotd:
0001D1r 3  A0 03        	ldy #3
0001D3r 3  B1 rr        	lda (z80_ix),y
0001D5r 3  18           	clc
0001D6r 3  69 01        	adc #1			; move down.
0001D8r 3  91 rr        	sta (z80_ix),y
0001DAr 3  60           	rts
0001DBr 3               
0001DBr 3               ;----------------------------------------------------
0001DBr 3               ; Check if coordinates are ok before redrawing at new position.
0001DBr 3               ;
0001DBr 3               ; left:   X>L		X=L	Ok
0001DBr 3               ; right:  R+15>X	X=R	Ok
0001DBr 3               ; top:    Y>T		Y=T	Ok
0001DBr 3               ; bottom: B+15>Y	Y=B	Ok
0001DBr 3               ;----------------------------------------------------
0001DBr 3               
0001DBr 3               chkxy:
0001DBr 3               
0001DBr 3               ; top:    Y>T		Y=T	Ok
0001DBr 3               
0001DBr 3  A0 03        	ldy #3
0001DDr 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0001DFr 3  CD rr rr     	cmp wntopx		; window top.
0001E2r 3  B0 03        	bcs :+			; compare with top window limit.
0001E4r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
0001E7r 3               :
0001E7r 3               ; left:   X>L		X=L	Ok
0001E7r 3               
0001E7r 3  A0 05        	ldy #5
0001E9r 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0001EBr 3  CD rr rr     	cmp wnlftx		; left edge.
0001EEr 3  B0 03        	bcs :+			; compare with left window limit.
0001F0r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
0001F3r 3               :
0001F3r 3               ; bottom: B+15>Y	Y=B	Ok
0001F3r 3               
0001F3r 3  AD rr rr     	lda wnbotx		; point to bottom.
0001F6r 3  18           	clc
0001F7r 3  69 0F        	adc #15
0001F9r 3  A0 03        	ldy #3
0001FBr 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001FDr 3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
0001FFr 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel..
000202r 3               :
000202r 3               ; right:  R+15>X	X=R	Ok
000202r 3               
000202r 3  AD rr rr     	lda wnrgtx		; point to right edge.
000205r 3  18           	clc
000206r 3  69 0F        	adc #15
000208r 3  A0 05        	ldy #5
00020Ar 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00020Cr 3  B0 03        	bcs :+			; compare with window limit.
00020Er 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel.
000211r 3               :
000211r 3               
000211r 3               ;----------------------------------------------------
000211r 3               ; Drop through.
000211r 3               ; Display shrapnel.
000211r 3               ;----------------------------------------------------
000211r 3               
000211r 3               plot:
000211r 3  A0 03        	ldy #3
000213r 3  B1 rr        	lda (z80_ix),y		; y integer.
000215r 3  85 rr        	sta dispy	 	; workspace coordinates.
000217r 3  A0 05        	ldy #5
000219r 3  B1 rr        	lda (z80_ix),y	 	; x integer.
00021Br 3  85 rr        	sta dispx 		; workspace coordinates.
00021Dr 3               
00021Dr 3  A0 00        	ldy #0
00021Fr 3  B1 rr        	lda (z80_ix),y 		; type.
000221r 3  D0 03        	bne :+			; is it a laser?
000223r 3  4C rr rr     	jmp plot1 		; yes, draw laser instead.
000226r 3               :
000226r 3               plot0:
000226r 3  A5 rr        	lda dispx		; which pixel within byte do we
000228r 3  29 07        	and #7			; want to set first?
00022Ar 3  A8           	tay
00022Br 3  B9 rr rr     	lda dots,y 		; table of small pixel positions.
00022Er 3  85 rr        	sta z80_e 		; get value.
000230r 3               
000230r 3  20 rr rr     	jsr scadd 		; screen address.
000233r 3  A0 00        	ldy #0
000235r 3  B1 rr        	lda (scraddr),y		; see what's already there.
000237r 3  45 rr        	eor z80_e
000239r 3  91 rr        	sta (scraddr),y 	; put back on screen.
00023Br 3  60           	rts
00023Cr 3               
00023Cr 3               plot1:
00023Cr 3  20 rr rr     	jsr scadd 		; screen address.
00023Fr 3  A0 00        	ldy #0
000241r 3  B1 rr        	lda (scraddr),y 	; fetch byte there.
000243r 3  49 FF        	eor #255 		; toggle all bits.
000245r 3  91 rr        	sta (scraddr),y 	; new byte.
000247r 3  60           	rts
000248r 3               
000248r 3               ;----------------------------------------------------
000248r 3               ; Switch off shrapnel
000248r 3               ;----------------------------------------------------
000248r 3               
000248r 3               kilshr:
000248r 3  A9 80        	lda #128
00024Ar 3  A0 00        	ldy #0
00024Cr 3  91 rr        	sta (z80_ix),y	; switch off shrapnel.
00024Er 3  60           	rts
00024Fr 3               
00024Fr 3               ;----------------------------------------------------
00024Fr 3               ; Sine/cosine table
00024Fr 3               ;----------------------------------------------------
00024Fr 3               
00024Fr 3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
000253r 3  87 01 B2 03  
000257r 3  D4 02 D4 02  
00025Fr 3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
000263r 3  B2 03 78 FE  
000267r 3  D4 02 2B FD  
00026Fr 3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
000273r 3  78 FE 4D FC  
000277r 3  2B FD 2B FD  
00027Fr 3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
000283r 3  4D FC 87 01  
000287r 3  2B FD D4 02  
00028Fr 3               
00028Fr 3               ;----------------------------------------------------
00028Fr 3               ; Create trail
00028Fr 3               ;----------------------------------------------------
00028Fr 3               
00028Fr 3               trail:
00028Fr 3  A0 01        	ldy #1
000291r 3  B1 rr        	lda (z80_ix),y 	; time remaining.
000293r 3  38           	sec
000294r 3  E9 01        	sbc #1
000296r 3  91 rr        	sta (z80_ix),y
000298r 3  D0 03        	bne :+
00029Ar 3  4C rr rr     	jmp trailk		; time to switch it off.
00029Dr 3               :
00029Dr 3  20 rr rr     	jsr qrand		; get a random number.
0002A0r 3  4A           	lsr a 			; x or y axis?
0002A1r 3  90 03        	bcc :+
0002A3r 3  4C rr rr     	jmp trailv		; use y.
0002A6r 3               :
0002A6r 3               ; Trail horizontal
0002A6r 3               
0002A6r 3  4A           	lsr a 			; which direction?
0002A7r 3  90 03        	bcc :+
0002A9r 3  4C rr rr     	jmp traill		; go left.
0002ACr 3               :
0002ACr 3               ; Trail right
0002ACr 3               
0002ACr 3  A0 05        	ldy #5
0002AEr 3  B1 rr        	lda (z80_ix),y
0002B0r 3  18           	clc
0002B1r 3  69 01        	adc #1	 		; go right.
0002B3r 3  91 rr        	sta (z80_ix),y
0002B5r 3  60           	rts
0002B6r 3               
0002B6r 3               ; Trail left
0002B6r 3               
0002B6r 3               traill:
0002B6r 3  A0 05        	ldy #5
0002B8r 3  B1 rr        	lda (z80_ix),y
0002BAr 3  38           	sec
0002BBr 3  E9 01        	sbc #1 			; go left.
0002BDr 3  91 rr        	sta (z80_ix),y
0002BFr 3  60           	rts
0002C0r 3               
0002C0r 3               ; Trail vertical
0002C0r 3               
0002C0r 3               trailv:
0002C0r 3  4A           	lsr a		 	; which direction?
0002C1r 3  90 03        	bcc :+
0002C3r 3  4C rr rr     	jmp trailu		; go up.
0002C6r 3               :
0002C6r 3               ; Trail down
0002C6r 3               
0002C6r 3  A0 03        	ldy #3
0002C8r 3  B1 rr        	lda (z80_ix),y
0002CAr 3  18           	clc
0002CBr 3  69 01        	adc #1 			; go down.
0002CDr 3  91 rr        	sta (z80_ix),y
0002CFr 3  60           	rts
0002D0r 3               
0002D0r 3               ; Trail up
0002D0r 3               
0002D0r 3               trailu:
0002D0r 3  A0 03        	ldy #3
0002D2r 3  B1 rr        	lda (z80_ix),y
0002D4r 3  38           	sec
0002D5r 3  E9 01        	sbc #1 			; go up.
0002D7r 3  91 rr        	sta (z80_ix),y
0002D9r 3  60           	rts
0002DAr 3               
0002DAr 3               ; Kill trail
0002DAr 3               
0002DAr 3               trailk:
0002DAr 3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
0002DCr 3  A0 03        	ldy #3
0002DEr 3  91 rr        	sta (z80_ix),y
0002E0r 3  60           	rts
0002E1r 3               
0002E1r 3               ;----------------------------------------------------
0002E1r 3               ; Create laser beam
0002E1r 3               ;----------------------------------------------------
0002E1r 3               
0002E1r 3               laser:
0002E1r 3  A0 01        	ldy #1
0002E3r 3  B1 rr        	lda (z80_ix),y 		; direction.
0002E5r 3  6A           	ror a 			; left or right?
0002E6r 3  B0 03        	bcs :+
0002E8r 3  4C rr rr     	jmp laserl		; move left.
0002EBr 3               :
0002EBr 3               ; Laser right
0002EBr 3               
0002EBr 3  A9 08        	lda #8			; distance to travel.
0002EDr 3  85 rr        	sta z80_b
0002EFr 3  4C rr rr     	jmp laserm		; move laser.
0002F2r 3               
0002F2r 3               ; Laser left
0002F2r 3               
0002F2r 3               laserl:
0002F2r 3  A9 F8        	lda #248		; distance to travel.
0002F4r 3  85 rr        	sta z80_b
0002F6r 3               laserm:
0002F6r 3  A0 05        	ldy #5
0002F8r 3  B1 rr        	lda (z80_ix),y		; x position.
0002FAr 3  18           	clc
0002FBr 3  65 rr        	adc z80_b		; add distance.
0002FDr 3  91 rr        	sta (z80_ix),y		; set new x coordinate.
0002FFr 3               
0002FFr 3               ; Test new block.
0002FFr 3               
0002FFr 3  85 rr        	sta dispx 		; set x for block collision detection purposes.
000301r 3  A0 03        	ldy #3
000303r 3  B1 rr        	lda (z80_ix),y 		; get y.
000305r 3  85 rr        	sta dispy		; set coordinate for collision test.
000307r 3  20 rr rr     	jsr tstbl 		; get block type there.
00030Ar 3  C9 02        	cmp #WALL		; is it solid?
00030Cr 3  D0 03        	bne :+
00030Er 3  4C rr rr     	jmp trailk		; yes, it cannot pass.
000311r 3               :
000311r 3               .if pflag .or dflag
000311r 3  C9 04                cmp #FODDER             ; is it fodder?
000313r 3  D0 06                bne :+
000315r 3  20 rr rr             jsr fdchk               ; remove fodder block.
000318r 3  4C rr rr             jmp trailk              ; destroy laser.
00031Br 3               :
00031Br 3               .endif
00031Br 3  60           	rts
00031Cr 3               
00031Cr 3               ;----------------------------------------------------
00031Cr 3               ; Dots mask
00031Cr 3               ;----------------------------------------------------
00031Cr 3               
00031Cr 3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
000320r 3  08 04 02 01  
000324r 3               
000324r 3               
000324r 3               ;----------------------------------------------------
000324r 3               ; Plot, preserving de.
000324r 3               ;----------------------------------------------------
000324r 3               
000324r 3               plotde:
000324r 3  A5 rr        	lda z80_d 		; put de on stack.
000326r 3  48           	pha
000327r 3  A5 rr        	lda z80_e
000329r 3  48           	pha
00032Ar 3               
00032Ar 3  20 rr rr     	jsr plot 		; plot pixel.
00032Dr 3               
00032Dr 3  68           	pla			; restore de from stack.
00032Er 3  85 rr        	sta z80_e
000330r 3  68           	pla
000331r 3  85 rr        	sta z80_d
000333r 3               
000333r 3  60           	rts
000334r 3               
000334r 3               ;----------------------------------------------------
000334r 3               ; Shoot a laser.
000334r 3               ;----------------------------------------------------
000334r 3               
000334r 3               shoot:
000334r 3  85 rr        	sta z80_c		; store direction in c register.
000336r 3  A0 08        	ldy #8
000338r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00033Ar 3  18           	clc
00033Br 3               shoot1:
00033Br 3  69 07        	adc #(SPR_HGT/2-1)	; down 7 pixels.
00033Dr 3  85 rr        	sta z80_l 		; puty y coordinate in l.
00033Fr 3               
00033Fr 3  A0 09        	ldy #9
000341r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in h.
000343r 3  85 rr        	sta z80_h
000345r 3               
000345r 3  A5 rr        	lda z80_i		; store pointer to sprite.
000347r 3  48           	pha
000348r 3  A5 rr        	lda z80_x
00034Ar 3  48           	pha
00034Br 3               
00034Br 3  20 rr rr     	jsr fpslot 		; find particle slot.
00034Er 3  B0 03        	bcs :+
000350r 3  4C rr rr     	jmp vapou2		; failed, restore ix.
000353r 3               :
000353r 3  A9 00        	lda #0
000355r 3  A0 00        	ldy #0
000357r 3  91 rr        	sta (z80_ix),y 		; set up a laser.
000359r 3               
000359r 3  A5 rr        	lda z80_c
00035Br 3  A0 01        	ldy #1
00035Dr 3  91 rr        	sta (z80_ix),y 		; set the direction.
00035Fr 3               
00035Fr 3  A5 rr        	lda z80_l
000361r 3  A0 03        	ldy #3
000363r 3  91 rr        	sta (z80_ix),y		; set y coordinate.
000365r 3               
000365r 3  66 rr        	ror z80_c		; check direction we want.
000367r 3  90 03        	bcc :+
000369r 3  4C rr rr     	jmp shootr		; shoot right.
00036Cr 3               :
00036Cr 3  A5 rr        	lda z80_h		; X position.
00036Er 3               shoot0:
00036Er 3  29 F8        	and #248		; align on character boundary.
000370r 3  A0 05        	ldy #5
000372r 3  91 rr        	sta (z80_ix),y		; set x coordinate.
000374r 3  4C rr rr     	jmp vapou0 		; draw first image.
000377r 3               shootr:
000377r 3  A5 rr        	lda z80_h		; x position.
000379r 3  18           	clc
00037Ar 3  69 0F        	adc #15			; look right.
00037Cr 3  4C rr rr     	jmp shoot0		; align and continue.
00037Fr 3               
00037Fr 3               ;----------------------------------------------------
00037Fr 3               ; Create a bit of vapour trail.
00037Fr 3               ;----------------------------------------------------
00037Fr 3               
00037Fr 3               vapour:
00037Fr 3  A5 rr        	lda z80_i		; store pointer to sprite.
000381r 3  48           	pha
000382r 3  A5 rr        	lda z80_x
000384r 3  48           	pha
000385r 3               
000385r 3  A0 08        	ldy #8
000387r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000389r 3  18           	clc
00038Ar 3               vapou3:
00038Ar 3  69 07        	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00038Cr 3  85 rr        	sta z80_l
00038Er 3               
00038Er 3  A0 09        	ldy #9
000390r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000392r 3  69 07        	adc #7
000394r 3  85 rr        	sta z80_h
000396r 3               
000396r 3  20 rr rr     	jsr fpslot 		; find particle slot.
000399r 3  90 03        	bcc :+
00039Br 3  4C rr rr     	jmp vapou1		; no, we can use it.
00039Er 3               :
00039Er 3               vapou2:
00039Er 3  68           	pla
00039Fr 3  85 rr        	sta z80_x
0003A1r 3  68           	pla
0003A2r 3  85 rr        	sta z80_i
0003A4r 3  60           	rts
0003A5r 3               vapou1:
0003A5r 3  A5 rr        	lda z80_l
0003A7r 3  A0 03        	ldy #3
0003A9r 3  91 rr        	sta (z80_ix),y		; set up y.
0003ABr 3               
0003ABr 3  A5 rr        	lda z80_h
0003ADr 3  A0 05        	ldy #5
0003AFr 3  91 rr        	sta (z80_ix),y 		; set up x coordinate.
0003B1r 3               
0003B1r 3  20 rr rr     	jsr qrand		; get quick random number.
0003B4r 3  29 0F        	and #15			; random time.
0003B6r 3  18           	clc
0003B7r 3  69 0F        	adc #15			; minimum time on screen.
0003B9r 3  A0 01        	ldy #1
0003BBr 3  91 rr        	sta (z80_ix),y		; set time on screen.
0003BDr 3               
0003BDr 3  A9 01        	lda #1
0003BFr 3  A0 00        	ldy #0
0003C1r 3  91 rr        	sta (z80_ix),y		; define particle as vapour trail.
0003C3r 3               vapou0:
0003C3r 3  20 rr rr     	jsr chkxy		; plot first position.
0003C6r 3  4C rr rr     	jmp vapou2
0003C9r 3               
0003C9r 3               ;----------------------------------------------------
0003C9r 3               ; Create a user particle.
0003C9r 3               ;----------------------------------------------------
0003C9r 3               
0003C9r 3               ptusr:
0003C9r 3  85 rr        	sta z80_f		; store timer.
0003CBr 3               
0003CBr 3  A0 08        	ldy #8
0003CDr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0003CFr 3  18           	clc
0003D0r 3  69 07        	adc #7			; mid-point of sprite.
0003D2r 3  85 rr        	sta z80_l
0003D4r 3               
0003D4r 3  A0 09        	ldy #9
0003D6r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0003D8r 3  18           	clc
0003D9r 3  69 07        	adc #7			; mid-point of sprite.
0003DBr 3  85 rr        	sta z80_h
0003DDr 3               
0003DDr 3  20 rr rr     	jsr fpslot 		; find particle slot.
0003E0r 3  B0 01        	bcs ptusr1
0003E2r 3  60           	rts 			; out of slots, can't generate anything.
0003E3r 3               ptusr1:
0003E3r 3  A5 rr        	lda z80_l
0003E5r 3  A0 03        	ldy #3
0003E7r 3  91 rr        	sta (z80_ix),y 		; set up y.
0003E9r 3               
0003E9r 3  A5 rr        	lda z80_h
0003EBr 3  A0 05        	ldy #5
0003EDr 3  91 rr        	sta (z80_ix),y		; set up x coordinate.
0003EFr 3               
0003EFr 3  A5 rr        	lda z80_f 		; restore timer.
0003F1r 3  A0 01        	ldy #1
0003F3r 3  91 rr        	sta (z80_ix),y		; set time on screen.
0003F5r 3               
0003F5r 3  A9 07        	lda #7
0003F7r 3  A0 00        	ldy #0
0003F9r 3  91 rr        	sta (z80_ix),y		; define particle as user particle.
0003FBr 3               
0003FBr 3  4C rr rr     	jmp chkxy		; plot first position.
0003FEr 3               
0003FEr 3               ;----------------------------------------------------
0003FEr 3               ; Create a vertical or horizontal star.
0003FEr 3               ;----------------------------------------------------
0003FEr 3               
0003FEr 3               star:
0003FEr 3  A5 rr        	lda z80_i		; store pointer to sprite.
000400r 3  48           	pha
000401r 3  A5 rr        	lda z80_x
000403r 3  48           	pha
000404r 3               
000404r 3  20 rr rr     	jsr fpslot 		; find particle slot.
000407r 3  B0 07        	bcs star7		; found one we can use.
000409r 3               star0:
000409r 3  68           	pla 			; restore sprite pointer.
00040Ar 3  85 rr        	sta z80_x
00040Cr 3  68           	pla
00040Dr 3  85 rr        	sta z80_i
00040Fr 3  60           	rts 			; out of slots, can't generate anything.
000410r 3               star7:
000410r 3  A5 rr        	lda z80_c		; direction.
000412r 3  29 03        	and #3 			; is it left?
000414r 3  D0 03        	bne :+
000416r 3  4C rr rr     	jmp star1 		; yes, it's left.
000419r 3               :
000419r 3  C9 01        	cmp #1 			; is it right?
00041Br 3  D0 03        	bne :+
00041Dr 3  4C rr rr     	jmp star2 		; yes, it's right.
000420r 3               :
000420r 3  C9 02        	cmp #2 			; is it up?
000422r 3  D0 03        	bne :+
000424r 3  4C rr rr     	jmp star3 		; yes, it's up.
000427r 3               :
000427r 3  AC rr rr     	ldy wntopx 		; get edge of screen.
00042Ar 3  C8           	iny			; down one pixel.
00042Br 3  98           	tya
00042Cr 3               star8:
00042Cr 3  A0 03        	ldy #3
00042Er 3  91 rr        	sta (z80_ix),y 		; set y coord.
000430r 3  20 rr rr     	jsr qrand 		; get quick random number.
000433r 3               star9:
000433r 3  A0 05        	ldy #5
000435r 3  91 rr        	sta (z80_ix),y		; set x position.
000437r 3               
000437r 3  A5 rr        	lda z80_c		; direction.
000439r 3  29 03        	and #3			; zero to three.
00043Br 3  18           	clc
00043Cr 3  69 03        	adc #3			; 3 to 6 for starfield.
00043Er 3  A0 00        	ldy #0
000440r 3  91 rr        	sta (z80_ix),y		; define particle as star.
000442r 3  20 rr rr     	jsr chkxy		; plot first position.
000445r 3  4C rr rr     	jmp star0
000448r 3               star1:
000448r 3  20 rr rr     	jsr qrand		; get quick random number.
00044Br 3  A0 03        	ldy #3
00044Dr 3  91 rr        	sta (z80_ix),y 		; set y coord.
00044Fr 3               
00044Fr 3  AD rr rr     	lda wnrgtx 		; get edge of screen.
000452r 3  18           	clc
000453r 3  69 0F        	adc #15			; add width of sprite minus 1.
000455r 3  4C rr rr     	jmp star9
000458r 3               star2:
000458r 3  20 rr rr     	jsr qrand 		; get quick random number.
00045Br 3  A0 03        	ldy #3
00045Dr 3  91 rr        	sta (z80_ix),y		; set y coord.
00045Fr 3               
00045Fr 3  AD rr rr     	lda wnlftx		; get edge of screen.
000462r 3  4C rr rr     	jmp star9
000465r 3               star3:
000465r 3  AD rr rr     	lda wnbotx 		; get edge of screen.
000468r 3  18           	clc
000469r 3  69 0F        	adc #15 		; height of sprite minus one pixel.
00046Br 3  4C rr rr     	jmp star8
00046Er 3               
00046Er 3               ;----------------------------------------------------
00046Er 3               ; Find particle slot for lasers or vapour trail.
00046Er 3               ; can't use alternate accumulator.
00046Er 3               ;----------------------------------------------------
00046Er 3               
00046Er 3               fpslot:
00046Er 3  A9 00        	lda #<SHRAPN 		; shrapnel table.
000470r 3  85 rr        	sta z80_x
000472r 3  A9 09        	lda #>SHRAPN
000474r 3  85 rr        	sta z80_i
000476r 3               
000476r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
000478r 3  85 rr        	sta z80_b
00047Ar 3               fpslt0:
00047Ar 3  A0 00        	ldy #0
00047Cr 3  B1 rr        	lda (z80_ix),y		; get type.
00047Er 3  0A           	asl a  			; is this slot in use?
00047Fr 3  90 01        	bcc :+
000481r 3  60           	rts			; no, we can use it.
000482r 3               :
000482r 3  18           	clc			; point to more shrapnel.
000483r 3  A5 rr        	lda z80_x
000485r 3  69 06        	adc #SHRSIZ
000487r 3  85 rr        	sta z80_x
000489r 3  90 02        	bcc :+
00048Br 3  E6 rr        	inc z80_i
00048Dr 3               :
00048Dr 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
00048Fr 3  D0 E9        	bne fpslt0
000491r 3               
000491r 3  18           	clc
000492r 3  60           	rts 			; out of slots, can't generate anything.
000493r 3               
000493r 3               ;----------------------------------------------------
000493r 3               ; Create an explosion at sprite position.
000493r 3               ;----------------------------------------------------
000493r 3               
000493r 3               explod:
000493r 3  85 rr        	sta z80_c 		; particles to create.
000495r 3               
000495r 3  A5 rr        	lda z80_i 		; store pointer to sprite.
000497r 3  48           	pha
000498r 3  A5 rr        	lda z80_x
00049Ar 3  48           	pha
00049Br 3               
00049Br 3  A0 08        	ldy #8
00049Dr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00049Fr 3  85 rr        	sta z80_l
0004A1r 3  A0 09        	ldy #9
0004A3r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0004A5r 3  85 rr        	sta z80_h
0004A7r 3               
0004A7r 3  A9 00        	lda #<SHRAPN		; shrapnel table.
0004A9r 3  85 rr        	sta z80_x
0004ABr 3  A9 09        	lda #>SHRAPN
0004ADr 3  85 rr        	sta z80_i
0004AFr 3               
0004AFr 3  A9 37        	lda #NUMSHR		; number of pieces in table.
0004B1r 3  85 rr        	sta explcnt
0004B3r 3               expld0:
0004B3r 3  A0 00        	ldy #0
0004B5r 3  B1 rr        	lda (z80_ix),y		; get type.
0004B7r 3  0A           	asl a 			; is this slot in use?
0004B8r 3  B0 16        	bcs expld1		; no, we can use it.
0004BAr 3               expld2:
0004BAr 3  18           	clc
0004BBr 3  A5 rr        	lda z80_x
0004BDr 3  69 06        	adc #SHRSIZ
0004BFr 3  85 rr        	sta z80_x
0004C1r 3  90 02        	bcc :+
0004C3r 3  E6 rr        	inc z80_i
0004C5r 3               :
0004C5r 3  C6 rr        	dec explcnt		; repeat for all shrapnel.
0004C7r 3  D0 EA        	bne expld0
0004C9r 3               expld3:
0004C9r 3  68           	pla			; restore sprite pointer.
0004CAr 3  85 rr        	sta z80_x
0004CCr 3  68           	pla
0004CDr 3  85 rr        	sta z80_i
0004CFr 3  60           	rts 			; out of slots, can't generate any more.
0004D0r 3               
0004D0r 3               expld1:
0004D0r 3  A5 rr        	lda z80_c		; shrapnel counter.
0004D2r 3  29 0F        	and #15			; 0 to 15.
0004D4r 3  18           	clc			; add to x.
0004D5r 3  65 rr        	adc z80_l
0004D7r 3  A0 03        	ldy #3
0004D9r 3  91 rr        	sta (z80_ix),y		; y coord.
0004DBr 3               
0004DBr 3  A5 rr        	lda seed3 		; crap random number.
0004DDr 3  29 0F        	and #15			; 0 to 15.
0004DFr 3  18           	clc 			; add to y.
0004E0r 3  65 rr        	adc z80_h
0004E2r 3  A0 05        	ldy #5
0004E4r 3  91 rr        	sta (z80_ix),y		; x coord.
0004E6r 3               
0004E6r 3  A9 02        	lda #2
0004E8r 3  A0 00        	ldy #0
0004EAr 3  91 rr        	sta (z80_ix),y		; switch it on.
0004ECr 3               
0004ECr 3  20 rr rr     	jsr chkxy		; plot first position.
0004EFr 3  20 rr rr     	jsr qrand		; quick random angle.
0004F2r 3  29 3C        	and #60 		; keep within range.
0004F4r 3  A0 01        	ldy #1
0004F6r 3  91 rr        	sta (z80_ix),y		; angle.
0004F8r 3               
0004F8r 3  C6 rr        	dec z80_c		; one less piece of shrapnel to generate.
0004FAr 3  D0 BE        	bne expld2 		; back to main explosion loop.
0004FCr 3  4C rr rr     	jmp expld3 		; restore sprite pointer and exit.
0004FFr 3               
0004FFr 3               ;----------------------------------------------------
0004FFr 3               ; Quick random
0004FFr 3               ;----------------------------------------------------
0004FFr 3               
0004FFr 3               qrand:
0004FFr 3  20 rr rr     	jsr random		; r register.
000502r 3  45 rr        	eor seed3		; combine with seed.
000504r 3  85 rr        	sta seed3 		; new seed.
000506r 3  60           	rts
000507r 3               
000507r 3               ;----------------------------------------------------
000507r 3               ; Display all shrapnel.
000507r 3               ;----------------------------------------------------
000507r 3               
000507r 3               dshrp:
000507r 3  A9 rr        	lda #<plotde		; display routine.
000509r 3  8D rr rr     	sta proshx+1
00050Cr 3  A9 rr        	lda #>plotde
00050Er 3  8D rr rr     	sta proshx+2
000511r 3  20 rr rr     	jsr proshr		; process shrapnel.
000514r 3               
000514r 3  A9 rr        	lda #<prosh1		; processing routine.
000516r 3  8D rr rr     	sta proshx+1
000519r 3  A9 rr        	lda #>prosh1
00051Br 3  8D rr rr     	sta proshx+2
00051Er 3  60           	rts
00051Fr 3               
00051Fr 3               ;------------------------------------------------------
00051Fr 3               ; Particle engine.
00051Fr 3               ;
00051Fr 3               ; Init particle data for 55 particles in SHRAPN table.
00051Fr 3               ; Every particle has 6 bytes.
00051Fr 3               ;
00051Fr 3               ; global:	-
00051Fr 3               ; local:	x,y,hl
00051Fr 3               ; calls:	-
00051Fr 3               ;------------------------------------------------------
00051Fr 3               
00051Fr 3               inishr:
00051Fr 3  A9 00        	lda #<SHRAPN 		; table.
000521r 3  85 rr        	sta z80_l
000523r 3  A9 09        	lda #>SHRAPN
000525r 3  85 rr        	sta z80_h
000527r 3               
000527r 3  A0 00        	ldy #0
000529r 3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
00052Br 3               inish0:
00052Br 3  A9 FF        	lda #255 		; kill the shrapnel.
00052Dr 3  91 rr        	sta (z80_hl),y
00052Fr 3               
00052Fr 3  18           	clc 			; point there.
000530r 3  A5 rr        	lda z80_l
000532r 3  69 06        	adc #SHRSIZ		; distance to next.
000534r 3  85 rr        	sta z80_l
000536r 3  90 02        	bcc :+
000538r 3  E6 rr        	inc z80_h
00053Ar 3               :
00053Ar 3  CA           	dex
00053Br 3  D0 EE        	bne inish0 		; round again.
00053Dr 3  60           	rts
00053Er 3               
00053Er 3               ;------------------------------------------------------
00053Er 3               ; Check for collision between laser and sprite.
00053Er 3               ;------------------------------------------------------
00053Er 3               
00053Er 3               lcol:
00053Er 3  A9 00        	lda #<SHRAPN		; shrapnel table.
000540r 3  85 rr        	sta z80_l
000542r 3  A9 09        	lda #>SHRAPN
000544r 3  85 rr        	sta z80_h
000546r 3               
000546r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
000548r 3  85 rr        	sta z80_b
00054Ar 3               lcol0:
00054Ar 3  A0 00        	ldy #0
00054Cr 3  B1 rr        	lda (z80_hl),y 		; get type.
00054Er 3  F0 11        	beq lcol1		; yes, check collision.
000550r 3               lcol3:
000550r 3  18           	clc			; point to more shrapnel.
000551r 3  A5 rr        	lda z80_l
000553r 3  69 06        	adc #SHRSIZ
000555r 3  85 rr        	sta z80_l
000557r 3  90 02        	bcc :+
000559r 3  E6 rr        	inc z80_h
00055Br 3               :
00055Br 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
00055Dr 3  D0 EB        	bne lcol0
00055Fr 3  18           	clc
000560r 3  60           	rts 			; no collision, carry not set.
000561r 3               lcol1:
000561r 3  A0 03        	ldy #3
000563r 3  B1 rr        	lda (z80_hl),y		; get y.
000565r 3  38           	sec
000566r 3  A0 08        	ldy #8
000568r 3  F1 rr        	sbc (z80_ix),y		; subtract sprite y.
00056Ar 3               lcolh:
00056Ar 3  C9 10        	cmp #SPR_HGT 		; within range?
00056Cr 3  90 03        	bcc :+
00056Er 3  4C rr rr     	jmp lcol2		; no, missed.
000571r 3               :
000571r 3  A0 05        	ldy #5
000573r 3  B1 rr        	lda (z80_hl),y 		; get x.
000575r 3  38           	sec
000576r 3  A0 09        	ldy #9
000578r 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
00057Ar 3  C9 10        	cmp #16			; within range?
00057Cr 3  B0 03        	bcs :+
00057Er 3  4C rr rr     	jmp lcol4 		; yes, collision occurred.
000581r 3               :
000581r 3               lcol2:
000581r 3  4C rr rr     	jmp lcol3
000584r 3               lcol4:
000584r 3  38           	sec
000585r 3  60           	rts 			; return with carry set for collision.
000586r 3               .endif
000586r 3               
000586r 3               ;------------------------------------------------------
000586r 3               ; Main game engine code starts here.
000586r 3               ; After initialisation, mloop is the main loop
000586r 3               ;------------------------------------------------------
000586r 3               
000586r 3               game:
000586r 3               
000586r 3               ; Set up screen address table.
000586r 3               
000586r 3               setsat:
000586r 3  A9 00        	lda #<CharAddress	; start of screen.
000588r 3  85 rr        	sta scraddr
00058Ar 3  A9 10        	lda #>CharAddress
00058Cr 3  85 rr        	sta scraddr+1
00058Er 3               
00058Er 3  A0 00        	ldy #0			; vertical lines on screen.
000590r 3               setsa0:
000590r 3  A5 rr        	lda scraddr
000592r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
000595r 3  A5 rr        	lda scraddr+1
000597r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
00059Ar 3  20 rr rr     	jsr nline		; next line down.
00059Dr 3  C8           	iny			; next position in table.
00059Er 3  D0 F0        	bne setsa0
0005A0r 3               
0005A0r 3               ; Set up colour address table
0005A0r 3               
0005A0r 3               setsof:
0005A0r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0005A2r 3  85 rr        	sta bufaddr
0005A4r 3  A9 96        	lda #>ColorAttr
0005A6r 3  85 rr        	sta bufaddr+1
0005A8r 3               
0005A8r 3  A0 00        	ldy #0			; vertical lines on screen.
0005AAr 3               setof0:
0005AAr 3  A5 rr        	lda bufaddr
0005ACr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0005AFr 3  A5 rr        	lda bufaddr+1
0005B1r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0005B4r 3  18           	clc			; next line down.
0005B5r 3  A5 rr        	lda bufaddr
0005B7r 3  69 16        	adc #ScrWidth
0005B9r 3  85 rr        	sta bufaddr
0005BBr 3  90 02        	bcc :+
0005BDr 3  E6 rr        	inc bufaddr+1
0005BFr 3               :
0005BFr 3  C8           	iny			; next position in table.
0005C0r 3  C0 0B        	cpy #ScrHeight/2
0005C2r 3  D0 E6        	bne setof0
0005C4r 3               
0005C4r 3               ; Init graphics mode
0005C4r 3               
0005C4r 3  20 rr rr     	jsr init
0005C7r 3               
0005C7r 3               ; Init joysticks
0005C7r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0005CAr 3               
0005CAr 3               rpblc2:
0005CAr 3               .if pflag
0005CAr 3  20 rr rr     	jsr inishr 		; initialise particle engine.
0005CDr 3               .endif
0005CDr 3               evintr:
0005CDr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0005D0r 3               
0005D0r 3  A9 02        	lda #WALL 		; write default property.
0005D2r 3  A2 00        	ldx #0
0005D4r 3               clrmap:
0005D4r 3  9D 00 04     	sta MAP,x 		; block properties.
0005D7r 3  9D 00 05     	sta MAP+256,x
0005DAr 3  E8           	inx
0005DBr 3  D0 F7        	bne clrmap
0005DDr 3               
0005DDr 3               .if oflag
0005DDr 3  20 rr rr     	jsr iniob 		; initialise objects.
0005E0r 3               .endif
0005E0r 3  A9 00        	lda #0			; put zero in accumulator.
0005E2r 3  85 rr        	sta gamwon		; reset game won flag.
0005E4r 3               
0005E4r 3  20 rr rr     	jsr inisc 		; init the score.
0005E7r 3               mapst:
0005E7r 3  AD rr rr     	lda stmap 		; start position on map.
0005EAr 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0005EDr 3               
0005EDr 3               inipbl:
0005EDr 3               .if aflag
0005EDr 3               	lda #<eop		; reset blockpointer
0005EDr 3               	sta pbptr
0005EDr 3               	lda #>eop
0005EDr 3               	sta pbptr+1
0005EDr 3               .endif
0005EDr 3  20 rr rr     	jsr initsc 		; set up first screen.
0005F0r 3               
0005F0r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0005F2r 3  85 rr        	sta z80_x
0005F4r 3  A9 rr        	lda #>ssprit
0005F6r 3  85 rr        	sta z80_i
0005F8r 3               evini:
0005F8r 3  20 rr rr     	jsr evnt13 		; initialisation.
0005FBr 3               
0005FBr 3               ; Two restarts.
0005FBr 3               ; First restart - clear all sprites and initialise everything.
0005FBr 3               
0005FBr 3               rstrt:
0005FBr 3  20 rr rr     	jsr rsevt 		; restart events.
0005FEr 3  20 rr rr     	jsr xspr 		; clear sprite table.
000601r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000604r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000607r 3  4C rr rr     	jmp rstrt0
00060Ar 3               
00060Ar 3               ; Second restart - clear all but player, and don't initialise him.
00060Ar 3               
00060Ar 3               rstrtn:
00060Ar 3  20 rr rr     	jsr rsevt		; restart events.
00060Dr 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
000610r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000613r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000616r 3               
000616r 3               ; Set up the player and/or enemy sprites.
000616r 3               
000616r 3               rstrt0:
000616r 3  A9 00        	lda #0 			; zero in accumulator.
000618r 3  85 rr        	sta nexlev 		; reset next level flag.
00061Ar 3  85 rr        	sta restfl 		; reset restart flag.
00061Cr 3  85 rr        	sta deadf 		; reset dead flag.
00061Er 3               
00061Er 3  20 rr rr     	jsr droom 		; show screen layout.
000621r 3               rpblc0:
000621r 3               .if pflag
000621r 3  20 rr rr     	jsr inishr 		; initialise particle engine.
000624r 3               .endif
000624r 3               .if aflag
000624r 3               	jsr rbloc		; draw blocks for this screen
000624r 3               .endif
000624r 3               .if oflag
000624r 3  20 rr rr     	jsr shwob		; draw objects.
000627r 3               .endif
000627r 3               
000627r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000629r 3  85 rr        	sta z80_x
00062Br 3  A9 rr        	lda #>sprtab
00062Dr 3  85 rr        	sta z80_i
00062Fr 3  20 rr rr     	jsr dspr 		; display sprites.
000632r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000634r 3  85 rr        	sta z80_x
000636r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000638r 3  85 rr        	sta z80_i
00063Ar 3  20 rr rr     	jsr dspr 		; display sprites.
00063Dr 3               mloop:
00063Dr 3  20 rr rr     	jsr vsync 		; synchronise with display.
000640r 3               
000640r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000642r 3  85 rr        	sta z80_x
000644r 3  A9 rr        	lda #>sprtab
000646r 3  85 rr        	sta z80_i
000648r 3  20 rr rr     	jsr dspr 		; display even sprites.
00064Br 3               
00064Br 3               ;	jsr plsnd 		; play sounds.
00064Br 3  20 rr rr     	jsr vsync 		; synchronise with display.
00064Er 3  20 rr rr     	jsr proshr
000651r 3               
000651r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000653r 3  85 rr        	sta z80_x
000655r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000657r 3  85 rr        	sta z80_i
000659r 3  20 rr rr     	jsr dspr 		; display odd sprites.
00065Cr 3               
00065Cr 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00065Er 3  85 rr        	sta z80_x
000660r 3  A9 rr        	lda #>(ssprit)
000662r 3  85 rr        	sta z80_i
000664r 3               evlp1:
000664r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000667r 3  20 rr rr     	jsr pspr 		; process sprites.
00066Ar 3               
00066Ar 3               ; Main loop events.
00066Ar 3               
00066Ar 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00066Cr 3  85 rr        	sta z80_x
00066Er 3  A9 rr        	lda #>ssprit
000670r 3  85 rr        	sta z80_i
000672r 3               evlp2:
000672r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
000675r 3               bsortx:
000675r 3  20 rr rr     	jsr bsort 		; sort sprites.
000678r 3               
000678r 3  A5 rr        	lda nexlev		; finished level flag.
00067Ar 3  D0 1F        	bne newlev		; is set, go to next level.
00067Cr 3  A5 rr        	lda gamwon		; finished game flag.
00067Er 3  D0 2A        	bne evwon		; is set, finish the game.
000680r 3  A5 rr        	lda restfl 		; finished level flag.
000682r 3  C9 01        	cmp #1			; has it been set?
000684r 3  D0 03        	bne :+
000686r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000689r 3               :
000689r 3  C9 02        	cmp #2			; has it been set?
00068Br 3  D0 03        	bne :+
00068Dr 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
000690r 3               :
000690r 3  A5 rr        	lda deadf 		; dead flag.
000692r 3  D0 1C        	bne pdead		; yes, player dead.
000694r 3               
000694r 3               ; back to start of main loop.
000694r 3               
000694r 3  E6 rr        	inc frmno
000696r 3  E6 rr        	inc clock
000698r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
00069Br 3               
00069Br 3               ;----------------------------------------------------------
00069Br 3               ; Read blocks from list and update screen accordingly.
00069Br 3               ;----------------------------------------------------------
00069Br 3               
00069Br 3               .if aflag
00069Br 3               rbloc:
00069Br 3               	lda #<eop		; reset blockpointer
00069Br 3               	sta pbbuf
00069Br 3               	lda #>eop
00069Br 3               	sta pbbuf+1
00069Br 3               
00069Br 3               rbloc2:
00069Br 3               	lda pbbuf			; check for last block
00069Br 3               	cmp pbptr
00069Br 3               	bne rbloc1
00069Br 3               	lda pbbuf+1
00069Br 3               	cmp pbptr+1
00069Br 3               	bne rbloc1
00069Br 3               	rts
00069Br 3               rbloc1:
00069Br 3               	ldy #0
00069Br 3               	lda (pbbuf),y		; check if block for this scno
00069Br 3               	cmp scno
00069Br 3               	bne rbloc0		; if not, skip
00069Br 3               	iny
00069Br 3               	lda (pbbuf),y		; get y
00069Br 3               	sta dispy
00069Br 3               	iny
00069Br 3               	lda (pbbuf),y		; get x
00069Br 3               	sta dispx
00069Br 3               	iny
00069Br 3               	lda (pbbuf),y		; get blocknr
00069Br 3               	jsr pattr2		; draw block
00069Br 3               rbloc0:
00069Br 3               	clc			; point to next block
00069Br 3               	lda pbbuf
00069Br 3               	adc #4
00069Br 3               	sta pbbuf
00069Br 3               	bcc rbloc2
00069Br 3               	inc pbbuf+1
00069Br 3               	jmp rbloc2
00069Br 3               .endif
00069Br 3               
00069Br 3               ;----------------------------------------------------------
00069Br 3               ; New level
00069Br 3               ;----------------------------------------------------------
00069Br 3               
00069Br 3               newlev:
00069Br 3  A5 rr        	lda scno 			; current screen.
00069Dr 3  18           	clc
00069Er 3  69 01        	adc #1				; next screen.
0006A0r 3  CD rr rr     	cmp numsc 			; total number of screens.
0006A3r 3  B0 05        	bcs evwon			; yes, game finished.
0006A5r 3  85 rr        	sta scno			; set new level number.
0006A7r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0006AAr 3               
0006AAr 3               evwon:
0006AAr 3  20 rr rr     	jsr evnt18		 	; game completed.
0006ADr 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0006B0r 3               
0006B0r 3               ;----------------------------------------------------------
0006B0r 3               ; Player dead.
0006B0r 3               ;----------------------------------------------------------
0006B0r 3               
0006B0r 3               pdead:
0006B0r 3  A9 00        	lda #0				; zeroise accumulator.
0006B2r 3  85 rr        	sta deadf			; reset dead flag.
0006B4r 3               evdie:
0006B4r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0006B7r 3  A5 rr        	lda numlif			; number of lives.
0006B9r 3  F0 03        	beq :+
0006BBr 3  4C rr rr     	jmp rstrt 			; restart game.
0006BEr 3               :
0006BEr 3               evfail:
0006BEr 3  20 rr rr     	jsr evnt17 			; failure event.
0006C1r 3  4C rr rr     	jmp game			; restart game
0006C4r 3               
0006C4r 3               ;----------------------------------------------------------
0006C4r 3               ; Tidy things up
0006C4r 3               ;----------------------------------------------------------
0006C4r 3               
0006C4r 3               tidyup:
0006C4r 3  A0 00        	ldy #0				; digits to check.
0006C6r 3               tidyu2:
0006C6r 3  B9 rr rr     	lda score,y 			; get score digit.
0006C9r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0006CCr 3  90 07        	bcc tidyu0			; high score is bigger.
0006CEr 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0006D0r 3  C8           	iny				; next digit of high score.
0006D1r 3  C0 06        	cpy #6
0006D3r 3  D0 F1        	bne tidyu2			; repeat for all digits
0006D5r 3               tidyu0:
0006D5r 3  A9 rr        	lda #<score			; return pointing to score.
0006D7r 3  85 rr        	sta z80_c
0006D9r 3  A9 rr        	lda #>score
0006DBr 3  85 rr        	sta z80_b
0006DDr 3  60           	rts
0006DEr 3               tidyu1:
0006DEr 3  A0 05        	ldy #5
0006E0r 3               tidyu3:
0006E0r 3  B9 rr rr     	lda score,y			; score.
0006E3r 3  99 rr rr     	sta hiscor,y			; high score.
0006E6r 3  88           	dey
0006E7r 3  10 F7        	bpl tidyu3 			; copy score to high score.
0006E9r 3               evnewh:
0006E9r 3  20 rr rr     	jsr evnt19			; new high score event.
0006ECr 3  4C rr rr     	jmp tidyu0			; tidy up.
0006EFr 3               
0006EFr 3               ;--------------------------------------------------
0006EFr 3               ; Restart event.
0006EFr 3               ;--------------------------------------------------
0006EFr 3               
0006EFr 3               rsevt:
0006EFr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0006F1r 3  85 rr        	sta z80_x
0006F3r 3  A9 rr        	lda #>ssprit
0006F5r 3  85 rr        	sta z80_i
0006F7r 3               
0006F7r 3               evrs:
0006F7r 3  4C rr rr     	jmp evnt14	 		; call restart event.
0006FAr 3               
0006FAr 3               ;------------------------------------------------------------------
0006FAr 3               ; Copy number passed in a to string position bc, right-justified.
0006FAr 3               ;
0006FAr 3               ; Input:
0006FAr 3               ;  A  = number
0006FAr 3               ;  BC = string address
0006FAr 3               ;
0006FAr 3               ; Output:
0006FAr 3               ;  BC = string with number
0006FAr 3               ;-----------------------------------------------------------------
0006FAr 3               
0006FAr 3               num2ch:
0006FAr 3  85 rr        	sta z80_d		; Save number
0006FCr 3               
0006FCr 3  A9 00        	lda #0
0006FEr 3  85 rr        	sta flag
000700r 3               numdg3:
000700r 3  A2 64        	ldx #100		; hundreds column.
000702r 3  86 rr        	stx z80_e
000704r 3  20 rr rr     	jsr numdg		; show digit.
000707r 3               numdg2:
000707r 3  A2 0A        	ldx #10			; tens column.
000709r 3  86 rr        	stx z80_e
00070Br 3  20 rr rr     	jsr numdg		; show digit.
00070Er 3               
00070Er 3  E6 rr        	inc flag
000710r 3  A2 01        	ldx #1			; units column.
000712r 3  86 rr        	stx z80_e
000714r 3               numdg:
000714r 3  A9 30        	lda #48			; clear digit.
000716r 3  85 rr        	sta z80_a
000718r 3               numdg1:
000718r 3  A5 rr        	lda z80_d
00071Ar 3  C5 rr        	cmp z80_e
00071Cr 3  90 0E        	bcc numdg0		; nothing to show.
00071Er 3  38           	sec
00071Fr 3  A5 rr        	lda z80_d
000721r 3  E5 rr        	sbc z80_e		; subtract from column.
000723r 3  85 rr        	sta z80_d
000725r 3  E6 rr        	inc z80_a		; increment digit.
000727r 3  E6 rr        	inc flag
000729r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
00072Cr 3               numdg0:
00072Cr 3  A0 00        	ldy #0
00072Er 3  A5 rr        	lda z80_a
000730r 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000732r 3  A5 rr        	lda flag
000734r 3  F0 06        	beq :+
000736r 3  E6 rr        	inc z80_c		; next buffer position.
000738r 3  D0 02        	bne :+
00073Ar 3  E6 rr        	inc z80_b
00073Cr 3               :
00073Cr 3  60           	rts
00073Dr 3               num2dd:
00073Dr 3  85 rr        	sta z80_d		; Save number
00073Fr 3               
00073Fr 3  A9 01        	lda #1
000741r 3  85 rr        	sta flag
000743r 3               
000743r 3  4C rr rr     	jmp numdg2
000746r 3               num2td:
000746r 3  85 rr        	sta z80_d		; Save number
000748r 3               
000748r 3  A9 01        	lda #1
00074Ar 3  85 rr        	sta flag
00074Cr 3  4C rr rr     	jmp numdg3
00074Fr 3               
00074Fr 3               ;---------------------------------------------------------
00074Fr 3               ; Reset score to "000000"
00074Fr 3               ;---------------------------------------------------------
00074Fr 3               
00074Fr 3               inisc:
00074Fr 3  A9 30        	lda #'0'
000751r 3  A2 05        	ldx #5			; digits to initialise.
000753r 3               inisc0:
000753r 3  9D rr rr     	sta score,x 		; write zero digit.
000756r 3  CA           	dex			; next column.
000757r 3  10 FA        	bpl inisc0		; repeat for all digits.
000759r 3               
000759r 3  60           	rts
00075Ar 3               
00075Ar 3               ;-----------------------------------------------------
00075Ar 3               ; Multiply h by d and return in hl.
00075Ar 3               ;
00075Ar 3               ; Input:
00075Ar 3               ;  H = first number
00075Ar 3               ;  D = second number
00075Ar 3               ;
00075Ar 3               ; Output:
00075Ar 3               ;  HL = result H x D
00075Ar 3               ;-----------------------------------------------------
00075Ar 3               
00075Ar 3               imul:
00075Ar 3  A5 rr        	lda z80_d		; HL = H * D
00075Cr 3  85 rr        	sta z80_e
00075Er 3  A5 rr        	lda z80_h
000760r 3  85 rr        	sta z80_c		; make c first multiplier.
000762r 3               imul0:
000762r 3  A9 00        	lda #0			; zeroise total.
000764r 3  85 rr        	sta z80_l
000766r 3  85 rr        	sta z80_h
000768r 3               
000768r 3  A5 rr        	lda z80_h
00076Ar 3  85 rr        	sta z80_d		; zeroise high byte.
00076Cr 3               
00076Cr 3  A9 08        	lda #8			; repeat 8 times.
00076Er 3  85 rr        	sta z80_b
000770r 3               imul1:
000770r 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
000772r 3  90 0E        	bcc imul2		; wasn't set.
000774r 3  18           	clc			; bit was set, so add de.
000775r 3  A5 rr        	lda z80_l
000777r 3  65 rr        	adc z80_e
000779r 3  85 rr        	sta z80_l
00077Br 3  A5 rr        	lda z80_h
00077Dr 3  65 rr        	adc z80_d
00077Fr 3  85 rr        	sta z80_h
000781r 3  18           	clc 			; reset carry.
000782r 3               imul2:
000782r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
000784r 3  26 rr        	rol z80_d
000786r 3  C6 rr        	dec z80_b
000788r 3  D0 E6        	bne imul1		; repeat 8 times.
00078Ar 3               
00078Ar 3  60           	rts
00078Br 3               
00078Br 3               ;-----------------------------------------------
00078Br 3               ; Divide d by e and return in d, remainder in a.
00078Br 3               ;
00078Br 3               ; Input:
00078Br 3               ;  D = first number
00078Br 3               ;  E = second number
00078Br 3               ;
00078Br 3               ; Output:
00078Br 3               ;  D = result D/E
00078Br 3               ;  A = remainder
00078Br 3               ;-----------------------------------------------
00078Br 3               
00078Br 3               idiv:
00078Br 3  A9 00        	lda #0
00078Dr 3  A0 08        	ldy #8		 	; bits to shift.
00078Fr 3  06 rr        	asl z80_d
000791r 3               idiv0:
000791r 3  2A           	rol a 			; multiply d by 2.
000792r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
000794r 3  90 02        	bcc idiv1		; e is greater, no division this time.
000796r 3  E5 rr        	sbc z80_e		; subtract it.
000798r 3               idiv1:
000798r 3  26 rr        	rol z80_d		; rotate into d.
00079Ar 3  88           	dey
00079Br 3  D0 F4        	bne idiv0		; repeat
00079Dr 3  60           	rts
00079Er 3               
00079Er 3               ;---------------------------------------------------
00079Er 3               ; Play AY sound effect
00079Er 3               ;---------------------------------------------------
00079Er 3               
00079Er 3               plsnd:
00079Er 3  60           	rts
00079Fr 3               
00079Fr 3               ;---------------------------------------------------
00079Fr 3               ; Objects handling.
00079Fr 3               ; 32 bytes for image
00079Fr 3               ; 1 for colour
00079Fr 3               ; 3 for room, y and x
00079Fr 3               ; 3 for starting room, y and x.
00079Fr 3               ; 254 = disabled.
00079Fr 3               ; 255 = object in player"s pockets.
00079Fr 3               ;---------------------------------------------------
00079Fr 3               
00079Fr 3               ;---------------------------------------------------
00079Fr 3               ; Show items present.
00079Fr 3               ;---------------------------------------------------
00079Fr 3               
00079Fr 3               .if oflag
00079Fr 3               shwob:
00079Fr 3  A9 rr        	lda #<objdta			; objects table.
0007A1r 3  85 rr        	sta z80_l
0007A3r 3  A9 rr        	lda #>objdta
0007A5r 3  85 rr        	sta z80_h
0007A7r 3  AD rr rr     	lda numob 			; number of objects in the game.
0007AAr 3  85 rr        	sta sprcnt
0007ACr 3               shwob0:
0007ACr 3  A0 21        	ldy #33 			; distance to room number.
0007AEr 3  B1 rr        	lda (z80_hl),y 			; same as an item?
0007B0r 3  C5 rr        	cmp scno 			; current location.
0007B2r 3  D0 03        	bne :+
0007B4r 3  20 rr rr     	jsr dobj 			; yes, display object.
0007B7r 3               :
0007B7r 3  18           	clc
0007B8r 3  A5 rr        	lda z80_l
0007BAr 3  69 27        	adc #39 			; distance to next item.
0007BCr 3  85 rr        	sta z80_l
0007BEr 3  A5 rr        	lda z80_h
0007C0r 3  69 00        	adc #0
0007C2r 3  85 rr        	sta z80_h	 		; point to it.
0007C4r 3  C6 rr        	dec sprcnt
0007C6r 3  D0 E4        	bne shwob0 			; repeat for others.
0007C8r 3  60           	rts
0007C9r 3               
0007C9r 3               ;---------------------------------------------------
0007C9r 3               ; Display object.
0007C9r 3               ; hl must point to object's start address.
0007C9r 3               ;
0007C9r 3               ; Input:
0007C9r 3               ;  HL = object address
0007C9r 3               ;---------------------------------------------------
0007C9r 3               
0007C9r 3               dobj:
0007C9r 3  A0 20        	ldy #32
0007CBr 3  B1 rr        	lda (z80_hl),y 			; point to y.
0007CDr 3  85 rr        	sta objcol
0007CFr 3  A0 22        	ldy #34
0007D1r 3  B1 rr        	lda (z80_hl),y 			; point to y.
0007D3r 3  85 rr        	sta dispy
0007D5r 3  C8           	iny
0007D6r 3  B1 rr        	lda (z80_hl),y 			; point to x.
0007D8r 3  85 rr        	sta dispx
0007DAr 3               dobj1:
0007DAr 3  4C rr rr     	jmp sprite 			; draw this sprite.
0007DDr 3               
0007DDr 3               ;--------------------------------------
0007DDr 3               ; Remove an object.
0007DDr 3               ;
0007DDr 3               ; Input:
0007DDr 3               ;  A = object number
0007DDr 3               ;--------------------------------------
0007DDr 3               
0007DDr 3               remob:
0007DDr 3  CD rr rr     	cmp numob			; number of objects in game.
0007E0r 3  90 01        	bcc :+				; are we checking past the end?
0007E2r 3  60           	rts				; yes, can't get non-existent item.
0007E3r 3               :
0007E3r 3  48           	pha				; remember object.
0007E4r 3  20 rr rr     	jsr getob			; pick it up if we haven't already got it.
0007E7r 3  68           	pla				; retrieve object number.
0007E8r 3  20 rr rr     	jsr gotob			; get its address.
0007EBr 3  A9 FE        	lda #254
0007EDr 3  A0 21        	ldy #33
0007EFr 3  91 rr        	sta (z80_hl),y			; remove it.
0007F1r 3  60           	rts
0007F2r 3               
0007F2r 3               ;---------------------------------------------------
0007F2r 3               ; Pick up object number held in the accumulator.
0007F2r 3               ;
0007F2r 3               ; Input:
0007F2r 3               ;  A = object number
0007F2r 3               ;---------------------------------------------------
0007F2r 3               
0007F2r 3               getob:
0007F2r 3  CD rr rr     	cmp numob 		; number of objects in game.
0007F5r 3  90 01        	bcc :+			; are we checking past the end?
0007F7r 3  60           	rts			; yes, can't get non-existent item.
0007F8r 3               :
0007F8r 3  20 rr rr     	jsr gotob 		; check if we already have it.
0007FBr 3  C9 FF        	cmp #255
0007FDr 3  D0 01        	bne :+
0007FFr 3  60           	rts			; we already do.
000800r 3               :
000800r 3  A0 21        	ldy #33
000802r 3  B1 rr        	lda (z80_hl),y		; is it on this screen?
000804r 3  C5 rr        	cmp scno 		; current screen.
000806r 3  D0 14        	bne getob0		; not on screen, so nothing to delete.
000808r 3               
000808r 3  A9 FF        	lda #255
00080Ar 3  91 rr        	sta (z80_hl),y		; pick it up.
00080Cr 3  C8           	iny 			; point to y coord.
00080Dr 3               getob1:
00080Dr 3  A0 22        	ldy #34
00080Fr 3  B1 rr        	lda (z80_hl),y		; y coord.
000811r 3  85 rr        	sta dispy
000813r 3  A0 23        	ldy #35
000815r 3  B1 rr        	lda (z80_hl),y 		; x coord.
000817r 3  85 rr        	sta dispx
000819r 3  4C rr rr     	jmp dobj1 		; delete object sprite.
00081Cr 3               getob0:
00081Cr 3  A9 FF        	lda #255
00081Er 3  91 rr        	sta (z80_hl),y 		; pick it up.
000820r 3  60           	rts
000821r 3               .endif
000821r 3               
000821r 3               ;-----------------------------------------------------------------
000821r 3               ; Got object check.
000821r 3               ; Call with object in accumulator, returns zero set if in pockets.
000821r 3               ;
000821r 3               ; Input:
000821r 3               ;  A = object number
000821r 3               ;-----------------------------------------------------------------
000821r 3               .if oflag .or mflag
000821r 3               gotob:
000821r 3  CD rr rr     	cmp numob 		; number of objects in game.
000824r 3  90 03        	bcc :+ 			; are we checking past the end?
000826r 3  4C rr rr     	jmp gotob0 		; yes, we can't have a non-existent object.
000829r 3               :
000829r 3  20 rr rr     	jsr findob		; find the object.
00082Cr 3               gotob1:
00082Cr 3  60           	rts
00082Dr 3               
00082Dr 3               gotob0:
00082Dr 3  A9 FE        	lda #254 		; missing.
00082Fr 3  4C rr rr     	jmp gotob1
000832r 3               
000832r 3               findob:
000832r 3  48           	pha			; save object number
000833r 3  A9 rr        	lda #<objdta 		; objects.
000835r 3  85 rr        	sta z80_l
000837r 3  A9 rr        	lda #>objdta
000839r 3  85 rr        	sta z80_h
00083Br 3  68           	pla			; retreive object number
00083Cr 3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
00083Er 3  AA           	tax 			; loop counter
00083Fr 3               fndob2:
00083Fr 3  18           	clc
000840r 3  A5 rr        	lda z80_l
000842r 3  69 27        	adc #39 		; size of each object.
000844r 3  85 rr        	sta z80_l
000846r 3  90 02        	bcc :+
000848r 3  E6 rr        	inc z80_h
00084Ar 3               :
00084Ar 3  CA           	dex 			; repeat until we find address.
00084Br 3  D0 F2        	bne fndob2
00084Dr 3               fndob1:
00084Dr 3  A0 21        	ldy #33			; distance to room it's in.
00084Fr 3  B1 rr        	lda (z80_hl),y		; fetch status.
000851r 3  60           	rts
000852r 3               .endif
000852r 3               
000852r 3               ;---------------------------------------------
000852r 3               ; Drop object number at (dispx, dispy).
000852r 3               ;
000852r 3               ; Input:
000852r 3               ;  A = object number
000852r 3               ;---------------------------------------------
000852r 3               
000852r 3               .if oflag
000852r 3               drpob:
000852r 3  CD rr rr     	cmp numob 		; are we checking past the end?
000855r 3  90 01        	bcc :+
000857r 3  60           	rts			; yes, can't drop non-existent item.
000858r 3               :
000858r 3  20 rr rr     	jsr gotob		; make sure object is in inventory.
00085Br 3  C5 rr        	cmp scno		; already on this screen?
00085Dr 3  D0 01        	bne :+
00085Fr 3  60           	rts			; yes, nothing to do.
000860r 3               :
000860r 3  A0 21        	ldy #33
000862r 3  A5 rr        	lda scno
000864r 3  91 rr        	sta (z80_hl),y		; bring onto screen.
000866r 3  A5 rr        	lda dispy		; sprite y coordinate.
000868r 3  C8           	iny
000869r 3  91 rr        	sta (z80_hl),y		; point to object y.
00086Br 3  A5 rr        	lda dispx 		; sprite x coordinate.
00086Dr 3  C8           	iny
00086Er 3  91 rr        	sta (z80_hl),y 		; point to object x
000870r 3  4C rr rr     	jmp dobj		; draw the object sprite.
000873r 3               
000873r 3               ;-----------------------------------------------
000873r 3               ; Seek objects at sprite position.
000873r 3               ;
000873r 3               ; Output:
000873r 3               ;  A = object number, if not found A=255
000873r 3               ;-----------------------------------------------
000873r 3               
000873r 3               skobj:
000873r 3  A9 rr        	lda #<objdta 		; pointer to objects.
000875r 3  85 rr        	sta z80_l
000877r 3  A9 rr        	lda #>objdta
000879r 3  85 rr        	sta z80_h
00087Br 3               
00087Br 3  AD rr rr     	lda numob 		; number of objects in game.
00087Er 3  85 rr        	sta z80_b 		; set up the loop counter.
000880r 3               skobj0:
000880r 3  A5 rr        	lda scno		; current room number.
000882r 3  A0 21        	ldy #33
000884r 3  D1 rr        	cmp (z80_hl),y		; is object in here?
000886r 3  D0 03        	bne :+
000888r 3  20 rr rr     	jsr skobj1		; yes, check coordinates.
00088Br 3               :
00088Br 3  18           	clc			; point to next object in table.
00088Cr 3  A5 rr        	lda z80_l
00088Er 3  69 27        	adc #39			; size of each object.
000890r 3  85 rr        	sta z80_l
000892r 3  90 02        	bcc :+
000894r 3  E6 rr        	inc z80_h
000896r 3               :
000896r 3  C6 rr        	dec z80_b
000898r 3  D0 E6        	bne skobj0		; repeat for all objects.
00089Ar 3               
00089Ar 3  A9 FF        	lda #255		; end of list and nothing found, return 255.
00089Cr 3  60           	rts
00089Dr 3               
00089Dr 3               skobj1:
00089Dr 3  A0 22        	ldy #34			; point to y coordinate.
00089Fr 3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
0008A1r 3  38           	sec
0008A2r 3  A0 08        	ldy #var_newY
0008A4r 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
0008A6r 3  18           	clc
0008A7r 3  69 0F        	adc #15			; add sprite height minus one.
0008A9r 3  C9 1F        	cmp #31			; within range?
0008ABr 3  B0 18        	bcs skobj2		; no, ignore object.
0008ADr 3               
0008ADr 3  A0 23        	ldy #35			; point to x coordinate now.
0008AFr 3  B1 rr        	lda (z80_hl),y 		; get coordinate.
0008B1r 3  38           	sec
0008B2r 3  A0 09        	ldy #var_newX
0008B4r 3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
0008B6r 3  18           	clc			; add sprite width minus one.
0008B7r 3  69 0F        	adc #15
0008B9r 3  C9 1F        	cmp #31			; within range?
0008BBr 3  B0 08        	bcs skobj2		; no, ignore object.
0008BDr 3               
0008BDr 3  68           	pla			; remove return address from stack.
0008BEr 3  68           	pla
0008BFr 3               
0008BFr 3  AD rr rr     	lda numob 		; objects in game.
0008C2r 3  38           	sec
0008C3r 3  E5 rr        	sbc z80_b		; subtract loop counter.
0008C5r 3               skobj2:
0008C5r 3  60           	rts			; accumulator now points to object.
0008C6r 3               .endif
0008C6r 3               
0008C6r 3               ;---------------------------------------------------------------------
0008C6r 3               ; Spawn a new sprite.
0008C6r 3               ;---------------------------------------------------------------------
0008C6r 3               
0008C6r 3               spawn:
0008C6r 3  A9 rr        	lda #<sprtab		; sprite table.
0008C8r 3  85 rr        	sta z80_l
0008CAr 3  A9 rr        	lda #>sprtab
0008CCr 3  85 rr        	sta z80_h
0008CEr 3               numsp1:
0008CEr 3  A9 0C        	lda #NUMSPR		; number of sprites.
0008D0r 3  85 rr        	sta spcnt
0008D2r 3               spaw0:
0008D2r 3  A0 00        	ldy #var_Type
0008D4r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0008D6r 3  C9 FF        	cmp #255		; is it an unused slot?
0008D8r 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0008DAr 3               
0008DAr 3  18           	clc 			; point to next sprite in table.
0008DBr 3  A5 rr        	lda z80_l
0008DDr 3  69 11        	adc #TABSIZ		; size of each entry.
0008DFr 3  85 rr        	sta z80_l
0008E1r 3  90 02        	bcc :+
0008E3r 3  E6 rr        	inc z80_h
0008E5r 3               :
0008E5r 3  C6 rr        	dec spcnt		; one less iteration.
0008E7r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0008E9r 3               
0008E9r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0008E9r 3               
0008E9r 3               spaw1:
0008E9r 3  A5 rr        	lda z80_i		; address of original sprite.
0008EBr 3  48           	pha
0008ECr 3  A5 rr        	lda z80_x
0008EEr 3  48           	pha
0008EFr 3               
0008EFr 3  A5 rr        	lda z80_l		; store spawned sprite address.
0008F1r 3  85 rr        	sta spptr
0008F3r 3  A5 rr        	lda z80_h
0008F5r 3  85 rr        	sta spptr+1
0008F7r 3               
0008F7r 3  A5 rr        	lda z80_c
0008F9r 3  A0 00        	ldy #var_Type
0008FBr 3  91 rr        	sta (z80_hl),y 		; set the type.
0008FDr 3  A0 05        	ldy #var_newType
0008FFr 3  91 rr        	sta (z80_hl),y		; copy
000901r 3               
000901r 3  A5 rr        	lda z80_b
000903r 3  A0 01        	ldy #var_Image
000905r 3  91 rr        	sta (z80_hl),y		; set the image.
000907r 3  A0 06        	ldy #var_newImage
000909r 3  91 rr        	sta (z80_hl),y		; copy
00090Br 3               
00090Br 3  A9 00        	lda #0 				; frame zero.
00090Dr 3  A0 02        	ldy #var_Frame
00090Fr 3  91 rr        	sta (z80_hl),y		; set frame.
000911r 3  A0 07        	ldy #var_newFrame
000913r 3  91 rr        	sta (z80_hl),y		; copy
000915r 3               
000915r 3  A0 08        	ldy #8
000917r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000919r 3  A0 03        	ldy #3
00091Br 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
00091Dr 3  A0 08        	ldy #8
00091Fr 3  91 rr        	sta (z80_hl),y		; copy
000921r 3               
000921r 3  A0 09        	ldy #9
000923r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000925r 3  A0 04        	ldy #4
000927r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000929r 3  A0 09        	ldy #9
00092Br 3  91 rr        	sta (z80_hl),y		; copy
00092Dr 3               
00092Dr 3  A0 0A        	ldy #10				; direction of original.
00092Fr 3  B1 rr        	lda (z80_ix),y
000931r 3  91 rr        	sta (z80_hl),y		; direction
000933r 3               
000933r 3  A9 00        	lda #0
000935r 3  A0 0D        	ldy #var_jumpLo
000937r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000939r 3  C8           	iny
00093Ar 3  91 rr        	sta (z80_hl),y		; reset parameter.
00093Cr 3  C8           	iny
00093Dr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00093Fr 3  C8           	iny
000940r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000942r 3               rtssp:
000942r 3  A5 rr        	lda spptr			; address of new sprite.
000944r 3  85 rr        	sta z80_x
000946r 3  A5 rr        	lda spptr+1
000948r 3  85 rr        	sta z80_i
00094Ar 3               evis1:
00094Ar 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
00094Dr 3               
00094Dr 3  A5 rr        	lda spptr 			; address of new sprite.
00094Fr 3  85 rr        	sta z80_x
000951r 3  A5 rr        	lda spptr+1
000953r 3  85 rr        	sta z80_i
000955r 3               
000955r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000955r 3  A0 03        	ldy #var_Y
000957r 3  B1 rr        	lda (z80_hl), y		; old x coord
000959r 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
00095Br 3  B0 03        	bcs :+				; yes, don't draw it.
00095Dr 3               
00095Dr 3  20 rr rr     	jsr sspria 			; display the new sprite.
000960r 3               :
000960r 3  68           	pla					; address of original sprite.
000961r 3  85 rr        	sta z80_x
000963r 3  68           	pla
000964r 3  85 rr        	sta z80_i
000966r 3               
000966r 3  60           	rts
000967r 3               
000967r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
00096Br 3  30 30        
00096Dr 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000971r 3  30 30        
000973r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000977r 3  30 30        
000979r 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
00097Br 3               
00097Br 3               ;----------------------------------------------------
00097Br 3               ; Check y-pos
00097Br 3               ;----------------------------------------------------
00097Br 3               
00097Br 3               checkx:
00097Br 3  A5 rr        	lda dispy		; y position.
00097Dr 3  C9 16        	cmp #22			; off screen?
00097Fr 3  B0 01        	bcs :+
000981r 3  60           	rts			; no, it's okay.
000982r 3               :
000982r 3  68           	pla			; remove return address from stack.
000983r 3  85 rr        	sta z80_l
000985r 3  68           	pla
000986r 3  85 rr        	sta z80_h
000988r 3  60           	rts
000989r 3               
000989r 3               ;-----------------------------------------------
000989r 3               ; Displays the current high score.
000989r 3               ;-----------------------------------------------
000989r 3               
000989r 3               dhisc:
000989r 3  A9 rr        	lda #<hiscor 		; high score text.
00098Br 3  8D rr rr     	sta dscor3+1
00098Er 3  8D rr rr     	sta bscor3+1
000991r 3  A9 rr        	lda #>hiscor
000993r 3  8D rr rr     	sta dscor3+2
000996r 3  8D rr rr     	sta bscor3+2
000999r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
00099Cr 3               
00099Cr 3               ;------------------------------------------------------
00099Cr 3               ; Displays the current score.
00099Cr 3               ;------------------------------------------------------
00099Cr 3               
00099Cr 3               dscor:
00099Cr 3  A9 rr        	lda #<score		; score text.
00099Er 3  8D rr rr     	sta dscor3+1
0009A1r 3  8D rr rr     	sta bscor3+1
0009A4r 3  A9 rr        	lda #>score
0009A6r 3  8D rr rr     	sta dscor3+2
0009A9r 3  8D rr rr     	sta bscor3+2
0009ACr 3               dscor1:
0009ACr 3  8C rr rr     	sty tmpscr
0009AFr 3  20 rr rr     	jsr preprt		; set up font and print position.
0009B2r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
0009B5r 3               
0009B5r 3               ;	lda #6			; digits to display.
0009B5r 3               ;	sta z80_b
0009B5r 3  A5 rr        	lda prtmod		; get print mode.
0009B7r 3  F0 03        	beq :+			; standard size text?
0009B9r 3  4C rr rr     	jmp bscor0		; no, show double-height.
0009BCr 3               :
0009BCr 3               dscor0:
0009BCr 3               ;	ldy #0
0009BCr 3               ;	lda (z80_hl),y 		; fetch character.
0009BCr 3  AC rr rr     	ldy tmpscr
0009BFr 3               dscor3:
0009BFr 3  B9 rr rr     	lda score,y
0009C2r 3  20 rr rr     	jsr pchar 		; display character.
0009C5r 3  E6 rr        	inc dispx		; move along x coordinate
0009C7r 3               
0009C7r 3               ;	inc z80_l		; next score column.
0009C7r 3               ;	bne :+
0009C7r 3               ;	inc z80_h
0009C7r 3               ;:
0009C7r 3  EE rr rr     	inc tmpscr
0009CAr 3  C6 rr        	dec z80_b
0009CCr 3  D0 EE        	bne dscor0 		; repeat for all digits.
0009CEr 3               dscor2:
0009CEr 3  A5 rr        	lda dispx 		; set up display coordinates.
0009D0r 3  85 rr        	sta charx
0009D2r 3  A5 rr        	lda dispy
0009D4r 3  85 rr        	sta chary
0009D6r 3  60           	rts
0009D7r 3               
0009D7r 3  00           tmpscr:	.byte 0
0009D8r 3               ;------------------------------------------------------
0009D8r 3               ; Displays the current score in double-height characters.
0009D8r 3               ;
0009D8r 3               ; Input:
0009D8r 3               ;  B  = digit number
0009D8r 3               ;  HL = score string
0009D8r 3               ;------------------------------------------------------
0009D8r 3               
0009D8r 3               bscor0:
0009D8r 3               ;	ldy #0
0009D8r 3               
0009D8r 3               ;	lda (z80_hl),y 		; fetch character.
0009D8r 3  A4 rr        	ldy tmp
0009DAr 3               bscor3:
0009DAr 3  B9 rr rr     	lda score,y
0009DDr 3  20 rr rr     	jsr bchar 		; display big char.
0009E0r 3               
0009E0r 3               ;	inc z80_l 		; next score column.
0009E0r 3               ;	bne :+
0009E0r 3               ;	inc z80_h
0009E0r 3               ;:
0009E0r 3  E6 rr        	inc tmp
0009E2r 3  C6 rr        	dec z80_b
0009E4r 3  F0 03        	beq :+
0009E6r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0009E9r 3               :
0009E9r 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0009ECr 3               
0009ECr 3               ;-----------------------------------------------------
0009ECr 3               ; Adds number in the hl pair to the score.
0009ECr 3               ;-----------------------------------------------------
0009ECr 3               
0009ECr 3               addsc:
0009ECr 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0009EEr 3  85 rr        	sta z80_e
0009F0r 3  A9 rr        	lda #>(score+1)
0009F2r 3  85 rr        	sta z80_d
0009F4r 3  A9 10        	lda #<10000		; amount to add each time.
0009F6r 3  85 rr        	sta z80_c
0009F8r 3  A9 27        	lda #>10000
0009FAr 3  85 rr        	sta z80_b
0009FCr 3  20 rr rr     	jsr incsc		; add to score.
0009FFr 3               
0009FFr 3  E6 rr        	inc z80_e		; thousands column.
000A01r 3  D0 02        	bne :+
000A03r 3  E6 rr        	inc z80_d
000A05r 3               :
000A05r 3  A9 E8        	lda #<1000		; amount to add each time.
000A07r 3  85 rr        	sta z80_c
000A09r 3  A9 03        	lda #>1000
000A0Br 3  85 rr        	sta z80_b
000A0Dr 3  20 rr rr     	jsr incsc 		; add to score.
000A10r 3               
000A10r 3  E6 rr        	inc z80_e		; hundreds column.
000A12r 3  D0 02        	bne :+
000A14r 3  E6 rr        	inc z80_d
000A16r 3               :
000A16r 3  A9 64        	lda #<100		; amount to add each time.
000A18r 3  85 rr        	sta z80_c
000A1Ar 3  A9 00        	lda #>100
000A1Cr 3  85 rr        	sta z80_b
000A1Er 3  20 rr rr     	jsr incsc		; add to score.
000A21r 3               
000A21r 3  E6 rr        	inc z80_e 		; tens column.
000A23r 3  D0 02        	bne :+
000A25r 3  E6 rr        	inc z80_d
000A27r 3               :
000A27r 3  A9 0A        	lda #<10		; amount to add each time.
000A29r 3  85 rr        	sta z80_c
000A2Br 3  A9 00        	lda #>10
000A2Dr 3  85 rr        	sta z80_b
000A2Fr 3  20 rr rr     	jsr incsc 		; add to score.
000A32r 3               
000A32r 3  E6 rr        	inc z80_e		; units column.
000A34r 3  D0 02        	bne :+
000A36r 3  E6 rr        	inc z80_d
000A38r 3               :
000A38r 3  A9 01        	lda #<1			; units.
000A3Ar 3  85 rr        	sta z80_c
000A3Cr 3  A9 00        	lda #>1
000A3Er 3  85 rr        	sta z80_b
000A40r 3               incsc:
000A40r 3  A5 rr        	lda z80_h		; store amount to add.
000A42r 3  48           	pha
000A43r 3  A5 rr        	lda z80_l
000A45r 3  48           	pha
000A46r 3               
000A46r 3  38           	sec			; subtract from amount to add.
000A47r 3  A5 rr        	lda z80_l
000A49r 3  E5 rr        	sbc z80_c
000A4Br 3  85 rr        	sta z80_l
000A4Dr 3  A5 rr        	lda z80_h
000A4Fr 3  E5 rr        	sbc z80_b
000A51r 3  85 rr        	sta z80_h
000A53r 3  90 14        	bcc incsc0		; too much, restore value.
000A55r 3               
000A55r 3  68           	pla			; delete the previous amount from the stack.
000A56r 3  68           	pla
000A57r 3               
000A57r 3  A5 rr        	lda z80_d 		; store column position.
000A59r 3  48           	pha
000A5Ar 3  A5 rr        	lda z80_e
000A5Cr 3  48           	pha
000A5Dr 3  20 rr rr     	jsr incsc2		; do the increment.
000A60r 3               
000A60r 3  68           	pla			; restore column.
000A61r 3  85 rr        	sta z80_e
000A63r 3  68           	pla
000A64r 3  85 rr        	sta z80_d
000A66r 3  4C rr rr     	jmp incsc		; repeat until all added.
000A69r 3               
000A69r 3               incsc0:
000A69r 3  68           	pla			; restore previous value.
000A6Ar 3  85 rr        	sta z80_l
000A6Cr 3  68           	pla
000A6Dr 3  85 rr        	sta z80_h
000A6Fr 3  60           	rts
000A70r 3               incsc2:
000A70r 3  A0 00        	ldy #0
000A72r 3  B1 rr        	lda (z80_de),y 		; get amount.
000A74r 3  18           	clc
000A75r 3  69 01        	adc #1			; add one to column.
000A77r 3  91 rr        	sta (z80_de),y		; write new column total.
000A79r 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000A7Br 3  B0 01        	bcs :+
000A7Dr 3  60           	rts			; no, carry on.
000A7Er 3               :
000A7Er 3  A9 30        	lda #'0'		; make it zero.
000A80r 3  91 rr        	sta (z80_de),y		; write new column total.
000A82r 3  C6 rr        	dec z80_e		; back one column.
000A84r 3  D0 02        	bne :+
000A86r 3  C6 rr        	dec z80_d
000A88r 3               :
000A88r 3  4C rr rr     	jmp incsc2
000A8Br 3               
000A8Br 3               ;------------------------------------
000A8Br 3               ; Add bonus to score and reset bonus
000A8Br 3               ;------------------------------------
000A8Br 3               
000A8Br 3               addbo:
000A8Br 3  A2 05        	ldx #5			; last digit.
000A8Dr 3  18           	clc
000A8Er 3               addbo0:
000A8Er 3  BD rr rr     	lda score,x		; get score.
000A91r 3  7D rr rr     	adc bonus,x		; add bonus.
000A94r 3  38           	sec			; 0 to 18.
000A95r 3  E9 30        	sbc #48
000A97r 3  48           	pha
000A98r 3  A9 30        	lda #'0'
000A9Ar 3  9D rr rr     	sta bonus,x
000A9Dr 3  68           	pla
000A9Er 3  C9 3A        	cmp #58
000AA0r 3  90 03        	bcc addbo1
000AA2r 3  38           	sec
000AA3r 3  E9 0A        	sbc #10
000AA5r 3               addbo1:
000AA5r 3  9D rr rr     	sta score,x		; zeroise bonus.
000AA8r 3  CA           	dex			; next digit.
000AA9r 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000AABr 3  60           	rts
000AACr 3               
000AACr 3               ;------------------------------------
000AACr 3               ; Swap score and bonus.
000AACr 3               ;------------------------------------
000AACr 3               
000AACr 3               swpsb:
000AACr 3  A2 05        	ldx #5			; digits to add.
000AAEr 3               swpsb0:
000AAEr 3  BD rr rr     	lda score,x 		; get score digits.
000AB1r 3  48           	pha			; save digit
000AB2r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
000AB5r 3  9D rr rr     	sta score,x		; switch score-bonus
000AB8r 3  68           	pla
000AB9r 3  9D rr rr     	sta bonus,x
000ABCr 3  CA           	dex 			; repeat for all 6 digits.
000ABDr 3  10 EF        	bpl swpsb0
000ABFr 3  60           	rts
000AC0r 3               
000AC0r 3               ;----------------------------------------------------
000AC0r 3               ; Get print address.
000AC0r 3               ;----------------------------------------------------
000AC0r 3               
000AC0r 3               gprad:
000AC0r 3  98           	tya
000AC1r 3  48           	pha
000AC2r 3               
000AC2r 3  A5 rr        	lda dispx 		; x coordinate.
000AC4r 3  85 rr        	sta scraddr
000AC6r 3  A9 00        	lda #0
000AC8r 3  85 rr        	sta scraddr+1
000ACAr 3  06 rr        	asl scraddr  		; multiply char by 16
000ACCr 3  26 rr        	rol scraddr+1
000ACEr 3  06 rr        	asl scraddr
000AD0r 3  26 rr        	rol scraddr+1
000AD2r 3  06 rr        	asl scraddr
000AD4r 3  26 rr        	rol scraddr+1
000AD6r 3  06 rr        	asl scraddr
000AD8r 3  26 rr        	rol scraddr+1
000ADAr 3               
000ADAr 3  A5 rr        	lda dispy		; y coordinate.
000ADCr 3  0A           	asl a
000ADDr 3  0A           	asl a
000ADEr 3  0A           	asl a			; multiply char by 8
000ADFr 3  A8           	tay
000AE0r 3               
000AE0r 3  18           	clc
000AE1r 3  A5 rr        	lda scraddr
000AE3r 3  79 00 07     	adc SCADTB_lb,y
000AE6r 3  85 rr        	sta scraddr
000AE8r 3  A5 rr        	lda scraddr+1
000AEAr 3  79 00 08     	adc SCADTB_hb,y
000AEDr 3  85 rr        	sta scraddr+1
000AEFr 3               
000AEFr 3  A5 rr        	lda prtmod		; Double line if bigtxt
000AF1r 3  F0 08        	beq noskip
000AF3r 3  A5 rr        	lda dispx
000AF5r 3  29 E0        	and #$e0
000AF7r 3  F0 02        	beq noskip
000AF9r 3  E6 rr        	inc scraddr+1
000AFBr 3               noskip:
000AFBr 3               
000AFBr 3  68           	pla
000AFCr 3  A8           	tay
000AFDr 3  60           	rts
000AFEr 3               ;--------------------------------------------------------------
000AFEr 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000AFEr 3               ;
000AFEr 3               ; Output:
000AFEr 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
000AFEr 3               ;--------------------------------------------------------------
000AFEr 3               
000AFEr 3               pradd:
000AFEr 3  A5 rr        	lda dispy 		; y coordinate.
000B00r 3  85 rr        	sta bufaddr
000B02r 3  A9 00        	lda #0
000B04r 3  85 rr        	sta bufaddr+1
000B06r 3  06 rr        	asl bufaddr  		; multiply char by 32
000B08r 3  26 rr        	rol bufaddr+1
000B0Ar 3  06 rr        	asl bufaddr
000B0Cr 3  26 rr        	rol bufaddr+1
000B0Er 3  06 rr        	asl bufaddr
000B10r 3  26 rr        	rol bufaddr+1
000B12r 3  06 rr        	asl bufaddr
000B14r 3  26 rr        	rol bufaddr+1
000B16r 3  06 rr        	asl bufaddr
000B18r 3  26 rr        	rol bufaddr+1
000B1Ar 3  18           	clc			; add address of MAP graphics.
000B1Br 3  A5 rr        	lda bufaddr
000B1Dr 3  65 rr        	adc dispx
000B1Fr 3  69 00        	adc #<MAP
000B21r 3  85 rr        	sta bufaddr
000B23r 3  A5 rr        	lda bufaddr+1
000B25r 3  69 04        	adc #>MAP
000B27r 3  85 rr        	sta bufaddr+1
000B29r 3  60           	rts
000B2Ar 3               
000B2Ar 3               ;--------------------------------------------------------------
000B2Ar 3               ; Get attribute address at (dispx, dispy).
000B2Ar 3               ;
000B2Ar 3               ; Output:
000B2Ar 3               ;  bufaddr = COLOR + dispy*22 + dispx
000B2Ar 3               ;--------------------------------------------------------------
000B2Ar 3               
000B2Ar 3               gaadd:
000B2Ar 3  A5 rr        	lda dispy
000B2Cr 3  4A           	lsr a
000B2Dr 3  A8           	tay
000B2Er 3  B9 55 0A     	lda COLATTTB_hb,y
000B31r 3  85 rr        	sta bufaddr+1
000B33r 3  B9 4A 0A     	lda COLATTTB_lb,y
000B36r 3  18           	clc
000B37r 3  65 rr        	adc dispx
000B39r 3  85 rr        	sta bufaddr
000B3Br 3  60           	rts
000B3Cr 3               
000B3Cr 3               ;----------------------------------------------
000B3Cr 3               ; Print attributes, properties and pixels.
000B3Cr 3               ;
000B3Cr 3               ; Input:
000B3Cr 3               ;  A	= tile number
000B3Cr 3               ;----------------------------------------------
000B3Cr 3               
000B3Cr 3               pbpattr:			; entry PUTBLOCK command
000B3Cr 3  A4 rr        	ldy charx
000B3Er 3  84 rr        	sty dispx
000B40r 3  A4 rr        	ldy chary
000B42r 3  84 rr        	sty dispy
000B44r 3               pattr:
000B44r 3               .if aflag
000B44r 3               	pha
000B44r 3               	jsr wbloc		; save blockinfo
000B44r 3               	pla
000B44r 3               .endif
000B44r 3               
000B44r 3               pattr2:
000B44r 3  85 rr        	sta z80_b		; store cell in b register for now.
000B46r 3  AA           	tax
000B47r 3  BD rr rr     	lda bprop,x 		; block properties.
000B4Ar 3  85 rr        	sta z80_c
000B4Cr 3  C9 08        	cmp #COLECT
000B4Er 3  D0 04        	bne :+
000B50r 3  A5 rr        	lda z80_b
000B52r 3  85 rr        	sta colpatt
000B54r 3               :
000B54r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000B57r 3  A5 rr        	lda z80_c
000B59r 3  A0 00        	ldy #0
000B5Br 3  91 rr        	sta (bufaddr),y 	; write property.
000B5Dr 3  A5 rr        	lda z80_b 		; restore cell.
000B5Fr 3  4C rr rr     	jmp panp
000B62r 3               ; Print attributes, no properties.
000B62r 3               
000B62r 3               ;colpatt:	.byte 0
000B62r 3               
000B62r 3               panp:
000B62r 3  85 rr        	sta z80_e		; displacement in e.
000B64r 3  A9 00        	lda #0
000B66r 3  85 rr        	sta z80_d		; no high byte.
000B68r 3  06 rr        	asl z80_e  		; multiply char by 8.
000B6Ar 3  26 rr        	rol z80_d
000B6Cr 3  06 rr        	asl z80_e
000B6Er 3  26 rr        	rol z80_d
000B70r 3  06 rr        	asl z80_e
000B72r 3  26 rr        	rol z80_d
000B74r 3  18           	clc
000B75r 3  A5 rr        	lda z80_e
000B77r 3  69 rr        	adc #<chgfx 		; address of graphics.
000B79r 3  85 rr        	sta tileaddr
000B7Br 3  A5 rr        	lda z80_d
000B7Dr 3  69 rr        	adc #>chgfx
000B7Fr 3  85 rr        	sta tileaddr+1
000B81r 3               
000B81r 3  A6 rr        	ldx z80_b		; set colour attribute
000B83r 3  BD rr rr     	lda bCol,x
000B86r 3  48           	pha
000B87r 3  20 rr rr     	jsr gaadd
000B8Ar 3  A0 00        	ldy #0
000B8Cr 3  68           	pla
000B8Dr 3  91 rr        	sta (bufaddr),y
000B8Fr 3               
000B8Fr 3  20 rr rr     	jsr gprad 		; get screen address.
000B92r 3  A2 07        	ldx #7			; number of pixel rows to write.
000B94r 3               panp0:
000B94r 3  A0 00        	ldy #0
000B96r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
000B98r 3               .if iflag
000B98r 3               	eor #$ff		; Invert
000B98r 3               .endif
000B98r 3  BC rr rr     	ldy scrtab,x
000B9Br 3  91 rr        	sta (scraddr),y 	; copy to screen.
000B9Dr 3  E6 rr        	inc tileaddr 		; next image byte.
000B9Fr 3  D0 02        	bne :+
000BA1r 3  E6 rr        	inc tileaddr+1
000BA3r 3               :
000BA3r 3  CA           	dex	 		; repeat for 8 pixel rows.
000BA4r 3  10 EE        	bpl panp0
000BA6r 3  E6 rr        	inc dispx 		; move along one.
000BA8r 3  E6 rr        	inc charx
000BAAr 3  60           	rts
000BABr 3               
000BABr 3               ;----------------------------------------------
000BABr 3               ; Write block
000BABr 3               ;----------------------------------------------
000BABr 3               
000BABr 3               .if aflag
000BABr 3               wbloc:
000BABr 3               	ldy #3
000BABr 3               	sta (pbptr),y		; store block number
000BABr 3               	dey
000BABr 3               	lda dispx
000BABr 3               	sta (pbptr),y		; write x position of block.
000BABr 3               	dey
000BABr 3               	lda dispy
000BABr 3               	sta (pbptr),y		; write y position of block.
000BABr 3               	dey
000BABr 3               	lda scno
000BABr 3               	sta (pbptr),y		; write screen.
000BABr 3               	clc			; point to next free location
000BABr 3               	lda pbptr
000BABr 3               	adc #4
000BABr 3               	sta pbptr
000BABr 3               	bcc :+
000BABr 3               	inc pbptr+1
000BABr 3               :
000BABr 3               	rts
000BABr 3               .endif
000BABr 3               
000BABr 3               ;.if kflag
000BABr 3               ;panp:
000BABr 3               ;.endif
000BABr 3               
000BABr 3               ;----------------------------------------------
000BABr 3               ; Print character pixels, no more.
000BABr 3               ;
000BABr 3               ; Input:
000BABr 3               ;  A	= character to print
000BABr 3               ;----------------------------------------------
000BABr 3               
000BABr 3               pchr:
000BABr 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000BAEr 3  E6 rr        	inc dispx		; move along one.
000BB0r 3  60           	rts
000BB1r 3               
000BB1r 3               ;----------------------------------------------------
000BB1r 3               ; Shifter sprite routine for objects.
000BB1r 3               ;----------------------------------------------------
000BB1r 3               
000BB1r 3               .if oflag
000BB1r 3               sprit7:
000BB1r 3  A5 rr        	lda z80_b
000BB3r 3  F0 0C        	beq sprit0
000BB5r 3  85 rr        	sta z80_a
000BB7r 3               sprit3:
000BB7r 3  46 rr        	lsr spr			; shift into position.
000BB9r 3  66 rr        	ror spr+1
000BBBr 3  66 rr        	ror spr+2
000BBDr 3  C6 rr        	dec z80_a		; one less iteration.
000BBFr 3  D0 F6        	bne sprit3
000BC1r 3               sprit0:
000BC1r 3  60           	rts 			; now apply to screen.
000BC2r 3               .endif
000BC2r 3               
000BC2r 3               ;-----------------------------------------------------------
000BC2r 3               ; Get room address.
000BC2r 3               ;-----------------------------------------------------------
000BC2r 3               
000BC2r 3               groom:
000BC2r 3  A6 rr        	ldx scno 		; screen number.
000BC4r 3  A0 00        	ldy #0
000BC6r 3               groomx:
000BC6r 3  A9 rr        	lda #<scdat 		; pointer to screens.
000BC8r 3  85 rr        	sta z80_l
000BCAr 3  A9 rr        	lda #>scdat
000BCCr 3  85 rr        	sta z80_h
000BCEr 3               groom1:
000BCEr 3  E0 00        	cpx #0			; is it the first one?
000BD0r 3  F0 15        	beq groom0 		; no more screens to skip.
000BD2r 3               
000BD2r 3  18           	clc
000BD3r 3  A5 rr        	lda z80_l
000BD5r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
000BD8r 3  85 rr        	sta z80_l
000BDAr 3  C8           	iny			; point to high byte.
000BDBr 3  A5 rr        	lda z80_h
000BDDr 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000BE0r 3  85 rr        	sta z80_h
000BE2r 3  C8           	iny			; next address.
000BE3r 3               
000BE3r 3  CA           	dex 			; one less iteration.
000BE4r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000BE7r 3               groom0:
000BE7r 3  AD rr rr     	lda numsc		; add displacement.
000BEAr 3  0A           	asl a
000BEBr 3  18           	clc			; add double displacement to address.
000BECr 3  65 rr        	adc z80_l
000BEEr 3  85 rr        	sta z80_l
000BF0r 3  A5 rr        	lda z80_h
000BF2r 3  69 00        	adc #0
000BF4r 3  85 rr        	sta z80_h
000BF6r 3  60           	rts
000BF7r 3               
000BF7r 3               ;-----------------------------------------------------------
000BF7r 3               ; Draw present room.
000BF7r 3               ;-----------------------------------------------------------
000BF7r 3               
000BF7r 3               droom:
000BF7r 3  AD rr rr     	lda wintop 		; window top.
000BFAr 3  85 rr        	sta dispy		; set cursor y position.
000BFCr 3               droom2:
000BFCr 3  20 rr rr     	jsr groom 		; get address of current room.
000BFFr 3  A9 00        	lda #0	 		; zero in accumulator.
000C01r 3  85 rr        	sta comcnt 		; reset compression counter.
000C03r 3  AD rr rr     	lda winhgt 		; height of window.
000C06r 3  85 rr        	sta rrow		; set row counter
000C08r 3               droom0:
000C08r 3  AD rr rr     	lda winlft 		; window left edge.
000C0Br 3  85 rr        	sta dispx 		; set cursor x position.
000C0Dr 3  AD rr rr     	lda winwid 		; width of window.
000C10r 3  85 rr        	sta rcol		; set column counter
000C12r 3               droom1:
000C12r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000C15r 3               .if xflag
000C15r 3               	jsr drwmeta
000C15r 3               .else
000C15r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000C18r 3               .endif
000C18r 3  C6 rr        	dec rcol		; one less column.
000C1Ar 3  D0 F6        	bne droom1 		; repeat for entire line.
000C1Cr 3  E6 rr        	inc dispy		; move down one line.
000C1Er 3               .if xflag
000C1Er 3               	inc dispy		; move down one line.
000C1Er 3               .endif
000C1Er 3  C6 rr        	dec rrow 		; one less row.
000C20r 3  D0 E6        	bne droom0 		; repeat for all rows.
000C22r 3  60           	rts
000C23r 3               
000C23r 3               ;----------------------------------------------
000C23r 3               ; Decompress bytes on-the-fly.
000C23r 3               ;----------------------------------------------
000C23r 3               
000C23r 3               flbyt:
000C23r 3  A5 rr        	lda comcnt 		; compression counter.
000C25r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000C27r 3               
000C27r 3  A0 00        	ldy #0
000C29r 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000C2Br 3  E6 rr        	inc z80_l 		; point to next cell.
000C2Dr 3  D0 02        	bne :+
000C2Fr 3  E6 rr        	inc z80_h
000C31r 3               :
000C31r 3  C9 FF        	cmp #255 		; is this byte a control code?
000C33r 3  F0 01        	beq :+
000C35r 3  60           	rts 			; no, this byte is uncompressed.
000C36r 3               :
000C36r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000C38r 3  85 rr        	sta combyt 		; set up the type.
000C3Ar 3  E6 rr        	inc z80_l 		; point to quantity.
000C3Cr 3  D0 02        	bne :+
000C3Er 3  E6 rr        	inc z80_h
000C40r 3               :
000C40r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000C42r 3  E6 rr        	inc z80_l 		; point to next byte.
000C44r 3  D0 02        	bne :+
000C46r 3  E6 rr        	inc z80_h
000C48r 3               :
000C48r 3               flbyt1:
000C48r 3  85 rr        	sta comcnt 		; store new quantity.
000C4Ar 3  C6 rr        	dec comcnt		; one less.
000C4Cr 3  A5 rr        	lda combyt 		; byte to expand.
000C4Er 3  60           	rts
000C4Fr 3               
000C4Fr 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000C4Fr 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000C4Fr 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000C4Fr 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000C4Fr 3               .if xflag
000C4Fr 3               drwmeta:
000C4Fr 3               	sta tmpblk
000C4Fr 3               	jsr pattr2
000C4Fr 3               
000C4Fr 3               	inc dispy
000C4Fr 3               	dec dispx
000C4Fr 3               	ldx tmpblk
000C4Fr 3               	beq :+
000C4Fr 3               	inx
000C4Fr 3               :
000C4Fr 3               	txa
000C4Fr 3               	jsr pattr2
000C4Fr 3               
000C4Fr 3               	ldx tmpblk
000C4Fr 3               	beq :+
000C4Fr 3               	inx
000C4Fr 3               	inx
000C4Fr 3               	inx
000C4Fr 3               :
000C4Fr 3               	txa
000C4Fr 3               	jsr pattr2
000C4Fr 3               
000C4Fr 3               	dec dispy
000C4Fr 3               	dec dispx
000C4Fr 3               	ldx tmpblk
000C4Fr 3               	beq :+
000C4Fr 3               	inx
000C4Fr 3               	inx
000C4Fr 3               :
000C4Fr 3               	txa
000C4Fr 3               	jsr pattr2
000C4Fr 3               	rts
000C4Fr 3               
000C4Fr 3               tmpblk:	.byte 0
000C4Fr 3               
000C4Fr 3               .endif
000C4Fr 3               
000C4Fr 3               ;------------------------------------------
000C4Fr 3               ; Ladder down check.
000C4Fr 3               ;
000C4Fr 3               ; Input:
000C4Fr 3               ;  IX = sprite pointer
000C4Fr 3               ;------------------------------------------
000C4Fr 3               
000C4Fr 3               .if lflag
000C4Fr 3               laddd:
000C4Fr 3               	ldy #9
000C4Fr 3               	lda (z80_ix),y		; x coordinate.
000C4Fr 3               	sta dispx
000C4Fr 3               
000C4Fr 3               	ldy #8
000C4Fr 3               	lda (z80_ix),y		; y coordinate.
000C4Fr 3               	and #254		; make it even.
000C4Fr 3               	sta (z80_ix),y 		; reset it.
000C4Fr 3               	clc 			; look down 16 pixels.
000C4Fr 3               numsp5:
000C4Fr 3               	adc #SPR_HGT
000C4Fr 3               	sta dispy		; coords in dispx,dispy.
000C4Fr 3               	jmp laddv
000C4Fr 3               
000C4Fr 3               ;------------------------------------------
000C4Fr 3               ; Ladder up check.
000C4Fr 3               ;
000C4Fr 3               ; Input:
000C4Fr 3               ;  IX = sprite pointer
000C4Fr 3               ;
000C4Fr 3               ; Output:
000C4Fr 3               ;  A  = 0 is ok, A <>0 is not ok
000C4Fr 3               ;------------------------------------------
000C4Fr 3               
000C4Fr 3               laddu:
000C4Fr 3               	ldy #9
000C4Fr 3               	lda (z80_ix),y		; x coordinate.
000C4Fr 3               	sta dispx
000C4Fr 3               
000C4Fr 3               	ldy #8
000C4Fr 3               	lda (z80_ix),y		; y coordinate.
000C4Fr 3               	and #254 		; make it even.
000C4Fr 3               	sta (z80_ix),y		; reset it.
000C4Fr 3               	clc 			; look 2 pixels above feet.
000C4Fr 3               numsp6:
000C4Fr 3               	adc #SPR_HGT-2
000C4Fr 3               	sta dispy		; coords in dispx,dispy.
000C4Fr 3               laddv:
000C4Fr 3               	jsr tstbl 		; get map address.
000C4Fr 3               	jsr ldchk 		; standard ladder check.
000C4Fr 3               	beq :+
000C4Fr 3               	rts 			; no way through.
000C4Fr 3               :
000C4Fr 3               	inc bufaddr 		; look right one cell.
000C4Fr 3               	bne :+
000C4Fr 3               	inc bufaddr+1
000C4Fr 3               :
000C4Fr 3               	jsr ldchk 		; do the check.
000C4Fr 3               	beq :+
000C4Fr 3               	rts 			; impassable.
000C4Fr 3               :
000C4Fr 3               	lda dispx 		; y coordinate.
000C4Fr 3               	and #7 			; position straddling block cells.
000C4Fr 3               	bne :+
000C4Fr 3               	rts 			; no more checks needed.
000C4Fr 3               :
000C4Fr 3               	inc bufaddr 		; look to third cell.
000C4Fr 3               	bne :+
000C4Fr 3               	inc bufaddr+1
000C4Fr 3               :
000C4Fr 3               	jsr ldchk 		; do the check.
000C4Fr 3               	rts  			; return with zero flag set accordingly.
000C4Fr 3               .endif
000C4Fr 3               
000C4Fr 3               ;---------------------------------------------------------
000C4Fr 3               ; Can go up check.
000C4Fr 3               ;
000C4Fr 3               ; Input:
000C4Fr 3               ;  IX = sprite pointer
000C4Fr 3               ;
000C4Fr 3               ; Output:
000C4Fr 3               ;  A  = 0 is ok, A <>0 is not ok
000C4Fr 3               ;---------------------------------------------------------
000C4Fr 3               
000C4Fr 3               cangu:
000C4Fr 3  A0 09        	ldy #9
000C51r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000C53r 3  85 rr        	sta dispx
000C55r 3  A0 08        	ldy #8
000C57r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000C59r 3  38           	sec
000C5Ar 3  E9 02        	sbc #2
000C5Cr 3  85 rr        	sta dispy		; coords in dispx,dispy.
000C5Er 3  20 rr rr     	jsr tstbl 		; get map address.
000C61r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000C64r 3  F0 01        	beq :+
000C66r 3  60           	rts			; no way through.
000C67r 3               :
000C67r 3  E6 rr        	inc bufaddr		; look right one cell.
000C69r 3  D0 02        	bne :+
000C6Br 3  E6 rr        	inc bufaddr+1
000C6Dr 3               :
000C6Dr 3  20 rr rr     	jsr lrchk 		; do the check.
000C70r 3  F0 01        	beq :+
000C72r 3  60           	rts			; impassable.
000C73r 3               :
000C73r 3  A5 rr        	lda dispx		; x coordinate.
000C75r 3  29 07        	and #7			; position straddling block cells.
000C77r 3  D0 01        	bne :+
000C79r 3  60           	rts			; no more checks needed.
000C7Ar 3               :
000C7Ar 3  E6 rr        	inc bufaddr		; look to third cell.
000C7Cr 3  D0 02        	bne :+
000C7Er 3  E6 rr        	inc bufaddr+1
000C80r 3               :
000C80r 3  20 rr rr     	jsr lrchk		; do the check.
000C83r 3  60           	rts 			; return with zero flag set accordingly.
000C84r 3               
000C84r 3               ;---------------------------------------------------------
000C84r 3               ; Can go down check.
000C84r 3               ;
000C84r 3               ; Input:
000C84r 3               ;  IX = sprite pointer
000C84r 3               ;
000C84r 3               ; Output:
000C84r 3               ;  A  = 0 is ok, A <>0 is not ok
000C84r 3               ;---------------------------------------------------------
000C84r 3               
000C84r 3               cangd:
000C84r 3  A0 09        	ldy #9
000C86r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000C88r 3  85 rr        	sta dispx
000C8Ar 3  A0 08        	ldy #8
000C8Cr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000C8Er 3  18           	clc
000C8Fr 3               numsp3:
000C8Fr 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000C91r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000C93r 3  20 rr rr     	jsr tstbl 		; get map address.
000C96r 3  20 rr rr     	jsr plchk 		; block, platform check.
000C99r 3  F0 01        	beq :+
000C9Br 3  60           	rts			; no way through.
000C9Cr 3               :
000C9Cr 3  E6 rr        	inc bufaddr		; look right one cell.
000C9Er 3  D0 02        	bne :+
000CA0r 3  E6 rr        	inc bufaddr+1
000CA2r 3               :
000CA2r 3  20 rr rr     	jsr plchk		; block, platform check.
000CA5r 3  F0 01        	beq :+
000CA7r 3  60           	rts			; impassable.
000CA8r 3               :
000CA8r 3  A5 rr        	lda dispx		; x coordinate.
000CAAr 3  29 07        	and #7			; position straddling block cells.
000CACr 3  D0 01        	bne :+
000CAEr 3  60           	rts			; no more checks needed.
000CAFr 3               :
000CAFr 3  E6 rr        	inc bufaddr		; look to third cell.
000CB1r 3  D0 02        	bne :+
000CB3r 3  E6 rr        	inc bufaddr+1
000CB5r 3               :
000CB5r 3  20 rr rr     	jsr plchk		; block, platform check.
000CB8r 3  60           	rts			; return with zero flag set accordingly.
000CB9r 3               
000CB9r 3               ;---------------------------------------------------------
000CB9r 3               ; Can go left check.
000CB9r 3               ;
000CB9r 3               ; Input:
000CB9r 3               ;  IX = sprite pointer
000CB9r 3               ;
000CB9r 3               ; Output:
000CB9r 3               ;  A  = 0 is ok, A <>0 is not ok
000CB9r 3               ;---------------------------------------------------------
000CB9r 3               
000CB9r 3               cangl:
000CB9r 3  A0 08        	ldy #8
000CBBr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000CBDr 3  85 rr        	sta dispy
000CBFr 3  A0 09        	ldy #9
000CC1r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000CC3r 3  38           	sec
000CC4r 3  E9 02        	sbc #2			; look left 2 pixels.
000CC6r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000CC8r 3  4C rr rr     	jmp cangh		; test if we can go there.
000CCBr 3               
000CCBr 3               ;---------------------------------------------------------
000CCBr 3               ; Can go right check.
000CCBr 3               ;
000CCBr 3               ; Input:
000CCBr 3               ;  IX = sprite pointer
000CCBr 3               ;
000CCBr 3               ; Output:
000CCBr 3               ;  A  = 0 is ok, A <>0 is not ok
000CCBr 3               ;---------------------------------------------------------
000CCBr 3               
000CCBr 3               cangr:
000CCBr 3  A0 08        	ldy #8
000CCDr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000CCFr 3  85 rr        	sta dispy
000CD1r 3  A0 09        	ldy #9
000CD3r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000CD5r 3  18           	clc
000CD6r 3  69 10        	adc #16			; look right 16 pixels.
000CD8r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000CDAr 3               cangh:
000CDAr 3               cangh2:
000CDAr 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000CDCr 3  85 rr        	sta z80_b
000CDEr 3  A5 rr        	lda dispy		; y position.
000CE0r 3  29 07        	and #7			; does x straddle cells?
000CE2r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000CE4r 3  C6 rr        	dec z80_b		; one less row to write.
000CE6r 3               cangh0:
000CE6r 3  20 rr rr     	jsr tstbl		; get map address.
000CE9r 3               cangh1:
000CE9r 3  20 rr rr     	jsr lrchk		; standard left/right check.
000CECr 3  F0 01        	beq :+
000CEEr 3  60           	rts			; no way through.
000CEFr 3               :
000CEFr 3  48           	pha
000CF0r 3  18           	clc
000CF1r 3  A5 rr        	lda bufaddr
000CF3r 3  69 20        	adc #32		; look down.
000CF5r 3  85 rr        	sta bufaddr
000CF7r 3  90 02        	bcc :+
000CF9r 3  E6 rr        	inc bufaddr+1
000CFBr 3               :
000CFBr 3  68           	pla
000CFCr 3               
000CFCr 3  C6 rr        	dec z80_b
000CFEr 3  D0 E9        	bne cangh1
000D00r 3  60           	rts
000D01r 3               
000D01r 3               ;-------------------------------------
000D01r 3               ; Check left/right movement is okay.
000D01r 3               ;
000D01r 3               ; Input:
000D01r 3               ;  bufaddr = MAP + x/8 + y/8*32
000D01r 3               ;
000D01r 3               ; Output:
000D01r 3               ;  A  = 0 is ok, A <>0 is not ok
000D01r 3               ;-------------------------------------
000D01r 3               
000D01r 3               lrchk:
000D01r 3  A0 00        	ldy #0
000D03r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000D05r 3  C9 02        	cmp #WALL 		; is it passable?
000D07r 3  F0 0A        	beq lrchkx		; no.
000D09r 3               
000D09r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000D0Br 3  F0 06        	beq lrchkx		; not passable.
000D0Dr 3  A9 00        	lda #0
000D0Fr 3  60           	rts
000D10r 3               
000D10r 3               ;--------------------------------------------------------------
000D10r 3               ; Called by mmenu
000D10r 3               ;--------------------------------------------------------------
000D10r 3               
000D10r 3               always:
000D10r 3  A9 FF        	lda #255		; report it as okay.
000D12r 3  60           	rts
000D13r 3               
000D13r 3               lrchkx:
000D13r 3  A9 01        	lda #1 			; reset all bits.
000D15r 3  60           	rts
000D16r 3               
000D16r 3               
000D16r 3               ;--------------------------------------------------------------
000D16r 3               ; Check platform or solid item is not in way.
000D16r 3               ;
000D16r 3               ; Input:
000D16r 3               ;  bufaddr = MAP + x/8 + y/8*32
000D16r 3               ;
000D16r 3               ; Output:
000D16r 3               ;  A  = 0 is ok, A <>0 is not ok
000D16r 3               ;--------------------------------------------------------------
000D16r 3               
000D16r 3               plchk:
000D16r 3  A0 00        	ldy #0
000D18r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000D1Ar 3  C9 02        	cmp #WALL 		; is it passable?
000D1Cr 3  F0 F5        	beq lrchkx		; no.
000D1Er 3               .if pflag .or dflag
000D1Er 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000D20r 3  F0 F1        	beq lrchkx		; not passable.
000D22r 3               .endif
000D22r 3  C9 01        	cmp #PLATFM		; platform is solid.
000D24r 3  F0 03        	beq plchkx		; not passable.
000D26r 3               .if lflag
000D26r 3               	cmp #LADDER		; is it a ladder?
000D26r 3               	beq lrchkx		; on ladder, deny movement.
000D26r 3               .endif
000D26r 3               plchk0:
000D26r 3  A9 00        	lda #0			; report as ok
000D28r 3  60           	rts
000D29r 3               plchkx:
000D29r 3  A5 rr        	lda dispy		; x coordinate.
000D2Br 3  29 07        	and #7			; position straddling blocks.
000D2Dr 3  F0 E4        	beq lrchkx		; on platform, deny movement.
000D2Fr 3  4C rr rr     	jmp plchk0
000D32r 3               
000D32r 3               ;--------------------------------------------------------------
000D32r 3               ; Check ladder is available.
000D32r 3               ;
000D32r 3               ; Input:
000D32r 3               ;  bufaddr = MAP + x/8 + y/8*32
000D32r 3               ;
000D32r 3               ; Output:
000D32r 3               ;  A  = 0 is ok, A <>0 is not ok
000D32r 3               ;--------------------------------------------------------------
000D32r 3               
000D32r 3               .if lflag
000D32r 3               ldchk:
000D32r 3               	ldy #0
000D32r 3               	lda (bufaddr),y 	; fetch cell.
000D32r 3               	cmp #LADDER 		; is it a ladder?
000D32r 3               	beq ldchk1
000D32r 3               	lda #1
000D32r 3               	rts  			; return with zero flag set accordingly.
000D32r 3               ldchk1:
000D32r 3               	lda #0
000D32r 3               	rts
000D32r 3               .endif
000D32r 3               
000D32r 3               ;--------------------------------------------------------------
000D32r 3               ; Get collectables.
000D32r 3               ;--------------------------------------------------------------
000D32r 3               
000D32r 3               .if cflag
000D32r 3               getcol:
000D32r 3                       lda #COLECT             ; collectable blocks.
000D32r 3                       sta z80_b
000D32r 3                       jsr tded                ; test for collectable blocks.
000D32r 3                       cmp z80_b               ; did we find one?
000D32r 3                       beq :+
000D32r 3                       rts                     ; none were found, job done.
000D32r 3               :
000D32r 3                       jsr gtblk               ; get block.
000D32r 3                       jsr evnt20              ; collected block event.
000D32r 3                       jmp getcol              ; repeat until none left.
000D32r 3               
000D32r 3               ; Get collectable block.
000D32r 3               
000D32r 3               gtblk:
000D32r 3               	ldy #0
000D32r 3               	lda (bufaddr),y
000D32r 3               	sta z80_a
000D32r 3                       lda #0
000D32r 3                       sta (bufaddr),y		; make it empty now.
000D32r 3               
000D32r 3               	lda bufaddr		; set dispx
000D32r 3               	and #31
000D32r 3               	sta dispx
000D32r 3               
000D32r 3               	lda bufaddr+1		; Set dispy
000D32r 3               	sec
000D32r 3               	sbc #>MAP
000D32r 3               	sta bufaddr+1
000D32r 3               	asl bufaddr
000D32r 3               	rol bufaddr+1
000D32r 3               	asl bufaddr
000D32r 3               	rol bufaddr+1
000D32r 3               	asl bufaddr
000D32r 3               	rol bufaddr+1
000D32r 3               	lda bufaddr+1
000D32r 3               	sta dispy
000D32r 3               
000D32r 3               	lda colpatt		; get blocknr
000D32r 3               	sta z80_e		; displacement in e.
000D32r 3               	lda #0
000D32r 3               	sta z80_d		; no high byte.
000D32r 3               	asl z80_e  		; multiply char by 8.
000D32r 3               	rol z80_d
000D32r 3               	asl z80_e
000D32r 3               	rol z80_d
000D32r 3               	asl z80_e
000D32r 3               	rol z80_d
000D32r 3               	clc
000D32r 3               	lda z80_e
000D32r 3               	adc #<chgfx 		; address of graphics.
000D32r 3               	sta tileaddr
000D32r 3               	lda z80_d
000D32r 3               	adc #>chgfx
000D32r 3               	sta tileaddr+1
000D32r 3               
000D32r 3               	jsr gprad 		; get screen address.
000D32r 3               	ldx #7			; number of pixel rows to write.
000D32r 3               gtblk0:
000D32r 3               	ldy #0
000D32r 3               	lda (tileaddr),y 	; get image byte.
000D32r 3               	ldy scrtab,x
000D32r 3               	eor (scraddr),y 	; XOR tile on screen
000D32r 3               	sta (scraddr),y 	; copy to screen.
000D32r 3               	inc tileaddr 		; next image byte.
000D32r 3               	bne :+
000D32r 3               	inc tileaddr+1
000D32r 3               :
000D32r 3               	dex	 		; repeat for 8 pixel rows.
000D32r 3               	bpl gtblk0
000D32r 3               	rts
000D32r 3               .endif
000D32r 3               
000D32r 3               ;--------------------------------------------------------------
000D32r 3               ; Touched deadly block check.
000D32r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000D32r 3               ;
000D32r 3               ; Input:
000D32r 3               ;  IX = sprite address
000D32r 3               ;
000D32r 3               ; Output:
000D32r 3               ;  A  = 0 is ok, A=5 is not ok
000D32r 3               ;--------------------------------------------------------------
000D32r 3               
000D32r 3               tded:
000D32r 3  A0 08        	ldy #8
000D34r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000D36r 3  85 rr        	sta dispy
000D38r 3  C8           	iny
000D39r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000D3Br 3  85 rr        	sta dispx		; coords in dispx,dispy.
000D3Dr 3  20 rr rr     	jsr tstbl		; get map address.
000D40r 3  48           	pha
000D41r 3  A9 1F        	lda #31			; default distance to next line down.
000D43r 3  85 rr        	sta z80_e
000D45r 3  68           	pla
000D46r 3  C5 rr        	cmp z80_b		; is this the required block?
000D48r 3  D0 01        	bne :+
000D4Ar 3  60           	rts			; yes.
000D4Br 3               :
000D4Br 3  E6 rr        	inc bufaddr 		; next cell.
000D4Dr 3  D0 02        	bne :+
000D4Fr 3  E6 rr        	inc bufaddr+1
000D51r 3               :
000D51r 3  A0 00        	ldy #0
000D53r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000D55r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000D57r 3  D0 01        	bne :+
000D59r 3  60           	rts			; yes.
000D5Ar 3               :
000D5Ar 3  A5 rr        	lda dispx		; horizontal position.
000D5Cr 3  85 rr        	sta z80_c 		; store column in c register.
000D5Er 3  29 07        	and #7			; is it straddling cells?
000D60r 3  D0 03        	bne :+
000D62r 3  4C rr rr     	jmp tded0		; no.
000D65r 3               :
000D65r 3  E6 rr        	inc bufaddr 		; last cell.
000D67r 3  D0 02        	bne :+
000D69r 3  E6 rr        	inc bufaddr+1
000D6Br 3               :
000D6Br 3  A0 00        	ldy #0
000D6Dr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000D6Fr 3  C5 rr        	cmp z80_b		; is this the block?
000D71r 3  D0 01        	bne :+
000D73r 3  60           	rts			; yes.
000D74r 3               :
000D74r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000D76r 3               tded0:
000D76r 3  18           	clc 			; point to next row.
000D77r 3  A5 rr        	lda bufaddr
000D79r 3  65 rr        	adc z80_e
000D7Br 3  85 rr        	sta bufaddr
000D7Dr 3  90 02        	bcc :+
000D7Fr 3  E6 rr        	inc bufaddr+1
000D81r 3               :
000D81r 3  A0 00        	ldy #0
000D83r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000D85r 3  C5 rr        	cmp z80_b		; is this fatal?
000D87r 3  D0 01        	bne :+
000D89r 3  60           	rts			; yes.
000D8Ar 3               :
000D8Ar 3  E6 rr        	inc bufaddr 		; next cell.
000D8Cr 3  D0 02        	bne :+
000D8Er 3  E6 rr        	inc bufaddr+1
000D90r 3               :
000D90r 3  A0 00        	ldy #0
000D92r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000D94r 3  C5 rr        	cmp z80_b		; is this fatal?
000D96r 3  D0 01        	bne :+
000D98r 3  60           	rts			; yes.
000D99r 3               :
000D99r 3  A5 rr        	lda z80_c		; horizontal position.
000D9Br 3  29 07        	and #7			; is it straddling cells?
000D9Dr 3  D0 03        	bne :+
000D9Fr 3  4C rr rr     	jmp tded1 		; no.
000DA2r 3               :
000DA2r 3  E6 rr        	inc bufaddr		; last cell.
000DA4r 3  D0 02        	bne :+
000DA6r 3  E6 rr        	inc bufaddr+1
000DA8r 3               :
000DA8r 3  A0 00        	ldy #0
000DAAr 3  B1 rr        	lda (bufaddr),y		; fetch type.
000DACr 3  C5 rr        	cmp z80_b		; is this fatal?
000DAEr 3  D0 01        	bne :+
000DB0r 3  60           	rts			; yes.
000DB1r 3               :
000DB1r 3               tded1:
000DB1r 3  A5 rr        	lda dispy		; vertical position.
000DB3r 3  29 07        	and #7 			; is it straddling cells?
000DB5r 3  D0 01        	bne :+
000DB7r 3  60           	rts			; no, job done.
000DB8r 3               :
000DB8r 3  18           	clc			; point to next row.
000DB9r 3  A5 rr        	lda bufaddr
000DBBr 3  65 rr        	adc z80_e
000DBDr 3  85 rr        	sta bufaddr
000DBFr 3  90 02        	bcc :+
000DC1r 3  E6 rr        	inc bufaddr+1
000DC3r 3               :
000DC3r 3  A0 00        	ldy #0
000DC5r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000DC7r 3  C5 rr        	cmp z80_b		; is this fatal?
000DC9r 3  D0 01        	bne :+
000DCBr 3  60           	rts			; yes.
000DCCr 3               :
000DCCr 3  E6 rr        	inc bufaddr		; next cell.
000DCEr 3  D0 02        	bne :+
000DD0r 3  E6 rr        	inc bufaddr+1
000DD2r 3               :
000DD2r 3  A0 00        	ldy #0
000DD4r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000DD6r 3  C5 rr        	cmp z80_b		; is this fatal?
000DD8r 3  D0 01        	bne :+
000DDAr 3  60           	rts			; yes.
000DDBr 3               :
000DDBr 3  A5 rr        	lda z80_c		; horizontal position.
000DDDr 3  29 07        	and #7			; is it straddling cells?
000DDFr 3  D0 01        	bne :+
000DE1r 3  60           	rts			; no.
000DE2r 3               :
000DE2r 3  E6 rr        	inc bufaddr		; last cell.
000DE4r 3  D0 02        	bne :+
000DE6r 3  E6 rr        	inc bufaddr+1
000DE8r 3               :
000DE8r 3  A0 00        	ldy #0
000DEAr 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000DECr 3  60           	rts 			; return with final type in accumulator.
000DEDr 3               
000DEDr 3               ;---------------------------------------------------
000DEDr 3               ; Fetch block type at (dispx, dispy).
000DEDr 3               ;
000DEDr 3               ; Output:
000DEDr 3               ;  A = block type
000DEDr 3               ;---------------------------------------------------
000DEDr 3               
000DEDr 3               tstbl:
000DEDr 3  A5 rr        	lda dispy 		; fetch y coord.
000DEFr 3  4A           	lsr a			; bufaddr = y/8
000DF0r 3  4A           	lsr a
000DF1r 3  4A           	lsr a
000DF2r 3               ;	sta chary
000DF2r 3               
000DF2r 3  85 rr        	sta bufaddr
000DF4r 3  A9 00        	lda #0
000DF6r 3  85 rr        	sta bufaddr+1
000DF8r 3               
000DF8r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000DFAr 3  26 rr        	rol bufaddr+1
000DFCr 3  06 rr        	asl bufaddr
000DFEr 3  26 rr        	rol bufaddr+1
000E00r 3  06 rr        	asl bufaddr
000E02r 3  26 rr        	rol bufaddr+1
000E04r 3  06 rr        	asl bufaddr
000E06r 3  26 rr        	rol bufaddr+1
000E08r 3  06 rr        	asl bufaddr
000E0Ar 3  26 rr        	rol bufaddr+1
000E0Cr 3               
000E0Cr 3  A5 rr        	lda dispx		; x/8
000E0Er 3  4A           	lsr a
000E0Fr 3  4A           	lsr a
000E10r 3  4A           	lsr a
000E11r 3               ;	sta charx
000E11r 3               
000E11r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000E12r 3  65 rr        	adc bufaddr
000E14r 3  69 00        	adc #<MAP
000E16r 3  85 rr        	sta bufaddr
000E18r 3  A5 rr        	lda bufaddr+1
000E1Ar 3  69 04        	adc #>MAP
000E1Cr 3  85 rr        	sta bufaddr+1
000E1Er 3               
000E1Er 3  A0 00        	ldy #0
000E20r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000E22r 3  60           	rts
000E23r 3               
000E23r 3               ;-------------------------------------------------------------------
000E23r 3               ; Jump - if we can.
000E23r 3               ; Requires initial speed to be set up in accumulator prior to call.
000E23r 3               ;
000E23r 3               ; Input:
000E23r 3               ;  IX = sprite address
000E23r 3               ;-------------------------------------------------------------------
000E23r 3               
000E23r 3               jump:
000E23r 3  A0 0D        	ldy #var_jumpLo
000E25r 3  B1 rr        	lda (z80_ix),y		; jump table low.
000E27r 3  A0 0E        	ldy #var_jumpHi
000E29r 3  11 rr        	ora (z80_ix),y		; jump table high.
000E2Br 3  F0 01        	beq :+
000E2Dr 3  60           	rts			; already in the air.
000E2Er 3               :
000E2Er 3  A9 rr        	lda #>jtab
000E30r 3  A0 0E        	ldy #var_jumpHi
000E32r 3  91 rr        	sta (z80_ix),y		; set jump high.
000E34r 3  A9 rr        	lda #<jtab		; jump table start.
000E36r 3  A0 0D        	ldy #var_jumpLo
000E38r 3  91 rr        	sta (z80_ix),y		; set jump low.
000E3Ar 3  60           	rts
000E3Br 3               
000E3Br 3               ; Jump table.
000E3Br 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000E3Br 3               ;.align 32
000E3Br 3               ;jtab:
000E3Br 3               ;	.byte 248,250,252
000E3Br 3               ;	.byte 254,254,255
000E3Br 3               ;	.byte 255,255,0,0
000E3Br 3               ;	.byte 0,1,1,1,2,2
000E3Br 3               ;	.byte 4,6,8,8,8,99
000E3Br 3               
000E3Br 3               ;------------------------------------------------
000E3Br 3               ; Random numbers code.
000E3Br 3               ; Pseudo-random number generator, 8-bit.
000E3Br 3               ;
000E3Br 3               ; Output:
000E3Br 3               ;  RND = random number
000E3Br 3               ;------------------------------------------------
000E3Br 3               
000E3Br 3               random:
000E3Br 3  A5 rr        	lda seed
000E3Dr 3  F0 05        	beq doEor
000E3Fr 3  0A           	asl a
000E40r 3  F0 04        	beq noEor
000E42r 3  90 02        	bcc noEor
000E44r 3  49 1D        doEor:	eor #$1d
000E46r 3  85 rr        noEor:	sta seed
000E48r 3  60           	rts
000E49r 3               
000E49r 3               ;	lda seed		; get last random number.
000E49r 3               ;	asl a
000E49r 3               ;	asl a
000E49r 3               ;	clc
000E49r 3               ;	adc seed
000E49r 3               ;	clc
000E49r 3               ;	adc #$45
000E49r 3               ;	sta seed		; store new seed.
000E49r 3               ;	sta varrnd		; return number in variable.
000E49r 3               ;	rts
000E49r 3               
000E49r 3               ;-------------------------------------------------------
000E49r 3               ; Joystick and keyboard reading routines.
000E49r 3               ;
000E49r 3               ; contrl = 0, Keyboard
000E49r 3               ;          1, JoyKeyb
000E49r 3               ;          2, JoyMMC
000E49r 3               ;
000E49r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000E49r 3               ;             ||||||||
000E49r 3               ;             |||||||+> Right    KEY 0  - X
000E49r 3               ;             ||||||+-> Left     KEY 1  - Z
000E49r 3               ;             |||||+--> Down     KEY 2  - .
000E49r 3               ;             ||||+---> Up       KEY 3  - ;
000E49r 3               ;             |||+----> Fire1    KEY 4  - SPC
000E49r 3               ;             ||+-----> Fire2    KEY 5  - Q
000E49r 3               ;             |+------> Fire3    KEY 6  - P
000E49r 3               ;             +-------> Not used
000E49r 3               ;
000E49r 3               ;                       Option1  KEY 7  - 1
000E49r 3               ;                       Option2  KEY 8  - 2
000E49r 3               ;                       Option3  KEY 9  - 3
000E49r 3               ;                       Option4  KEY 10 - 4
000E49r 3               ;-------------------------------------------------------
000E49r 3               
000E49r 3               joykey:
000E49r 3  A5 rr        	lda contrl 		; control flag.
000E4Br 3  C9 01        	cmp #1
000E4Dr 3  F0 1A        	beq joy1 		; scan joystick1
000E4Fr 3  C9 02        	cmp #2
000E51r 3  F0 1C        	beq joy2 		; scan joystick2
000E53r 3               
000E53r 3               ; Scan keyboard
000E53r 3               
000E53r 3  A9 00        	lda #0		 	; zero reading.
000E55r 3  85 rr        	sta z80_e
000E57r 3               
000E57r 3  A0 06        	ldy #6	 		; address of last key.
000E59r 3               joyke0:
000E59r 3  B9 rr rr     	lda keys,y 		; get key from table.
000E5Cr 3  20 rr rr     	jsr ktest		; being pressed?
000E5Fr 3  26 rr        	rol z80_e 		; rotate into reading.
000E61r 3               
000E61r 3  88           	dey		 	; next key.
000E62r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000E64r 3               joyret:
000E64r 3  A5 rr        	lda z80_e
000E66r 3  85 rr        	sta joyval
000E68r 3  60           	rts
000E69r 3               
000E69r 3               ; Scan joystick 1
000E69r 3               
000E69r 3               joy1:
000E69r 3  20 rr rr     	jsr joy1scan
000E6Cr 3  4C rr rr     	jmp joyret 		; store the value.
000E6Fr 3               
000E6Fr 3               ; Scan joystick 2
000E6Fr 3               
000E6Fr 3               joy2:
000E6Fr 3  20 rr rr     	jsr joy2scan
000E72r 3  4C rr rr     	jmp joyret 		; store the value.
000E75r 3               
000E75r 3               ;---------------------------------------------------------------
000E75r 3               ; Display message.
000E75r 3               ;
000E75r 3               ; Input:
000E75r 3               ;  A = message number
000E75r 3               ;---------------------------------------------------------------
000E75r 3               
000E75r 3               dmsg:
000E75r 3  AA           	tax
000E76r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000E78r 3  85 rr        	sta z80_l
000E7Ar 3  A9 rr        	lda #>msgdat
000E7Cr 3  85 rr        	sta z80_h
000E7Er 3  20 rr rr     	jsr getwrd		; get message number.
000E81r 3               dmsg3:
000E81r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000E84r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000E87r 3  A5 rr        	lda prtmod		; print mode.
000E89r 3  D0 47        	bne bmsg1		; no, double-height text.
000E8Br 3               dmsg0:
000E8Br 3  A5 rr        	lda z80_h		; store string pointer.
000E8Dr 3  48           	pha
000E8Er 3  A5 rr        	lda z80_l
000E90r 3  48           	pha
000E91r 3               
000E91r 3  A0 00        	ldy #0
000E93r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000E95r 3  29 7F        	and #127		; remove any end marker.
000E97r 3  C9 0D        	cmp #ASCII_NEWLINE
000E99r 3  F0 24        	beq dmsg1
000E9Br 3  20 rr rr     	jsr pchar		; display character.
000E9Er 3  20 rr rr     	jsr nexpos 		; display position.
000EA1r 3  D0 03        	bne dmsg2		; not on a new line.
000EA3r 3  20 rr rr     	jsr nexlin		; next line down.
000EA6r 3               dmsg2:
000EA6r 3  68           	pla			; retrieve string pointer
000EA7r 3  85 rr        	sta z80_l
000EA9r 3  68           	pla
000EAAr 3  85 rr        	sta z80_h
000EACr 3               
000EACr 3  A0 00        	ldy #0
000EAEr 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000EB0r 3  0A           	asl a  			; was it the end?
000EB1r 3  90 03        	bcc :+
000EB3r 3  4C rr rr     	jmp dscor2		; yes, job done.
000EB6r 3               :
000EB6r 3  E6 rr        	inc z80_l		; next character to display.
000EB8r 3  D0 02        	bne :+
000EBAr 3  E6 rr        	inc z80_h
000EBCr 3               :
000EBCr 3  4C rr rr     	jmp dmsg0
000EBFr 3               dmsg1:
000EBFr 3  E6 rr        	inc dispy
000EC1r 3  A5 rr        	lda dispy
000EC3r 3  C9 18        	cmp #24
000EC5r 3  90 04        	bcc dmsg4
000EC7r 3  A9 00        	lda #0
000EC9r 3  85 rr        	sta dispy
000ECBr 3               dmsg4:
000ECBr 3  A9 00        	lda #0
000ECDr 3  85 rr        	sta dispx
000ECFr 3  4C rr rr     	jmp dmsg2
000ED2r 3               
000ED2r 3               
000ED2r 3               ;----------------------------------------------------------
000ED2r 3               ; Display message in big text.
000ED2r 3               ;
000ED2r 3               ; Input:
000ED2r 3               ;  HL = string pointer
000ED2r 3               ;----------------------------------------------------------
000ED2r 3               
000ED2r 3               bmsg1:
000ED2r 3  A0 00        	ldy #0
000ED4r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000ED6r 3  29 7F        	and #127		; only want 7 bits.
000ED8r 3  C9 0D        	cmp #ASCII_NEWLINE
000EDAr 3  F0 13        	beq bmsg2
000EDCr 3  20 rr rr     	jsr bchar 		; display big char.
000EDFr 3               bmsg3:
000EDFr 3  A0 00        	ldy #0
000EE1r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000EE3r 3  48           	pha
000EE4r 3  E6 rr        	inc z80_l 		; next character in list.
000EE6r 3  D0 02        	bne :+
000EE8r 3  E6 rr        	inc z80_h
000EEAr 3               :
000EEAr 3  68           	pla
000EEBr 3  0A           	asl a  			; was terminator flag set?
000EECr 3  90 E4        	bcc bmsg1		; no, keep going.
000EEEr 3               
000EEEr 3  60           	rts
000EEFr 3               bmsg2:
000EEFr 3  A9 00        	lda #0
000EF1r 3  85 rr        	sta dispx
000EF3r 3  E6 rr        	inc dispy
000EF5r 3  E6 rr        	inc dispy
000EF7r 3  A5 rr        	lda dispy
000EF9r 3  C9 17        	cmp #23
000EFBr 3  90 E2        	bcc bmsg3
000EFDr 3  A9 00        	lda #0
000EFFr 3  85 rr        	sta dispy
000F01r 3  4C rr rr     	jmp bmsg3
000F04r 3               
000F04r 3               ;----------------------------------------------------------
000F04r 3               ; Big character display.
000F04r 3               ;
000F04r 3               ; Input:
000F04r 3               ;  A = character
000F04r 3               ;----------------------------------------------------------
000F04r 3               
000F04r 3               bchar:
000F04r 3  85 rr        	sta z80_e		; save char in lb
000F06r 3  A9 00        	lda #0
000F08r 3  85 rr        	sta z80_d		; reset hb
000F0Ar 3               
000F0Ar 3  06 rr        	asl z80_e 		; multiply char by 8.
000F0Cr 3  26 rr        	rol z80_d
000F0Er 3  06 rr        	asl z80_e
000F10r 3  26 rr        	rol z80_d
000F12r 3  06 rr        	asl z80_e
000F14r 3  26 rr        	rol z80_d		; de = a*8
000F16r 3               
000F16r 3  18           	clc			; de = #<(FONT-256) + a*8
000F17r 3  A5 rr        	lda z80_e
000F19r 3  69 rr        	adc #<(FONT-256) 		; address of font.
000F1Br 3  85 rr        	sta z80_e
000F1Dr 3  A5 rr        	lda z80_d
000F1Fr 3  69 rr        	adc #>(FONT-256)
000F21r 3  85 rr        	sta z80_d
000F23r 3               
000F23r 3  20 rr rr     	jsr gaadd		; set colour attribute
000F26r 3  AD rr rr     	lda fontcol
000F29r 3  A0 00        	ldy #0
000F2Br 3  91 rr        	sta (bufaddr),y
000F2Dr 3               
000F2Dr 3  20 rr rr     	jsr gprad 		; get screen address.
000F30r 3               
000F30r 3  A2 00        	ldx #0			; height of character in font.
000F32r 3               bchar0:
000F32r 3  A0 00        	ldy #0
000F34r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000F36r 3               
000F36r 3               .if iflag
000F36r 3               	eor #$ff
000F36r 3               .endif
000F36r 3               
000F36r 3  91 rr        	sta (scraddr),y
000F38r 3  48           	pha
000F39r 3  20 rr rr     	jsr nline 		; next line down.
000F3Cr 3  68           	pla
000F3Dr 3  91 rr        	sta (scraddr),y
000F3Fr 3  20 rr rr     	jsr nline 		; next line down.
000F42r 3               
000F42r 3  18           	clc
000F43r 3  E6 rr        	inc z80_e 		; next line of font.
000F45r 3  D0 02        	bne :+
000F47r 3  E6 rr        	inc z80_d
000F49r 3               :
000F49r 3  E8           	inx
000F4Ar 3  E0 08        	cpx #8
000F4Cr 3  D0 E4        	bne bchar0
000F4Er 3               
000F4Er 3  20 rr rr     	jsr nexpos		; display position.
000F51r 3  D0 05        	bne bchar2 		; not on a new line.
000F53r 3               bchar3:
000F53r 3  E6 rr        	inc dispy
000F55r 3  20 rr rr     	jsr nexlin 		; next line check.
000F58r 3               bchar2:
000F58r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000F5Br 3               
000F5Br 3               
000F5Br 3               ;-------------------------------------------------
000F5Br 3               ; Display a character.
000F5Br 3               ;
000F5Br 3               ; Input:
000F5Br 3               ;  A = character
000F5Br 3               ;-------------------------------------------------
000F5Br 3               
000F5Br 3               achar:
000F5Br 3  85 rr        	sta z80_b 		; copy to b.
000F5Dr 3  20 rr rr     	jsr preprt 		; get ready to print.
000F60r 3  A5 rr        	lda z80_b		; character in accumulator.
000F62r 3  A6 rr        	ldx prtmod 		; print mode.
000F64r 3  F0 03        	beq :+
000F66r 3  4C rr rr     	jmp bchar 		; no, double-height text.
000F69r 3               :
000F69r 3  20 rr rr     	jsr pchar 		; display character.
000F6Cr 3  20 rr rr     	jsr nexpos 		; display position.
000F6Fr 3  F0 E2        	beq bchar3		; next line down.
000F71r 3  4C rr rr     	jmp bchar2 		; tidy up.
000F74r 3               
000F74r 3               
000F74r 3               ;-------------------------------------------------
000F74r 3               ; Get next print column position.
000F74r 3               ;-------------------------------------------------
000F74r 3               
000F74r 3               nexpos:
000F74r 3  E6 rr        	inc dispx		; move along one position.
000F76r 3  A5 rr        	lda dispx 		; get coordinate.
000F78r 3  C9 16        	cmp #22
000F7Ar 3  D0 0E        	bne :+
000F7Cr 3  A9 00        	lda #0
000F7Er 3  85 rr        	sta dispx
000F80r 3  A5 rr        	lda prtmod
000F82r 3  F0 06        	beq :+
000F84r 3  20 rr rr     	jsr nexlin
000F87r 3  4C rr rr     	jmp nexlin
000F8Ar 3               :
000F8Ar 3  60           	rts
000F8Br 3               
000F8Br 3               ;-------------------------------------------------
000F8Br 3               ; Get next print line position.
000F8Br 3               ;-------------------------------------------------
000F8Br 3               
000F8Br 3               nexlin:
000F8Br 3  E6 rr        	inc dispy 		; newline.
000F8Dr 3  A5 rr        	lda dispy		; vertical position.
000F8Fr 3  C9 16        	cmp #22			; past screen edge?
000F91r 3  B0 01        	bcs :+
000F93r 3  60           	rts			; no, still okay.
000F94r 3               :
000F94r 3  A9 00        	lda #0			; restart at top.
000F96r 3  85 rr        	sta dispy
000F98r 3  60           	rts
000F99r 3               
000F99r 3               ;--------------------------------------------------------
000F99r 3               ; Pre-print preliminaries.
000F99r 3               ;--------------------------------------------------------
000F99r 3               
000F99r 3               preprt:
000F99r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000F9Br 3  8D rr rr     	sta grbase		; set up graphics base.
000F9Er 3  A9 rr        	lda #>(FONT-256)
000FA0r 3  8D rr rr     	sta grbase+1
000FA3r 3               prescr:
000FA3r 3  A5 rr        	lda charx 		; display coordinates.
000FA5r 3  85 rr        	sta dispx		; set up general coordinates.
000FA7r 3  A5 rr        	lda chary
000FA9r 3  85 rr        	sta dispy
000FABr 3  60           	rts
000FACr 3               
000FACr 3               ;--------------------------------------------------------------
000FACr 3               ; Get messagenr x in hl
000FACr 3               ;
000FACr 3               ; Input:
000FACr 3               ;  HL = pointer to message list
000FACr 3               ;  X  = message number.
000FACr 3               ;--------------------------------------------------------------
000FACr 3               
000FACr 3               getwrd:
000FACr 3  E0 00        	cpx #0
000FAEr 3  D0 01        	bne:+ 			; first word in list?
000FB0r 3  60           	rts 			; yep, don't search.
000FB1r 3               :
000FB1r 3  A0 00        	ldy #0
000FB3r 3               getwd0:
000FB3r 3  B1 rr        	lda (z80_hl),y
000FB5r 3  48           	pha
000FB6r 3  E6 rr        	inc z80_l
000FB8r 3  D0 02        	bne :+
000FBAr 3  E6 rr        	inc z80_h
000FBCr 3               :
000FBCr 3  68           	pla
000FBDr 3  C9 80        	cmp #128		; found end?
000FBFr 3  30 F2        	bmi getwd0		; no, carry on.
000FC1r 3  CA           	dex			; until we have right number.
000FC2r 3  D0 EF        	bne getwd0
000FC4r 3  60           	rts
000FC5r 3               
000FC5r 3               ;-----------------------------------------------------------
000FC5r 3               ; Bubble sort.
000FC5r 3               ;-----------------------------------------------------------
000FC5r 3               
000FC5r 3               bsort:
000FC5r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000FC7r 3  85 rr        	sta qscnt
000FC9r 3               
000FC9r 3  A9 rr        	lda #<sprtab 		; sprite table.
000FCBr 3  85 rr        	sta z80_x
000FCDr 3  A9 rr        	lda #>sprtab
000FCFr 3  85 rr        	sta z80_i
000FD1r 3               bsort0:
000FD1r 3  A0 00        	ldy #0
000FD3r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000FD5r 3  C9 FF        	cmp #255 		; is it switched off?
000FD7r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000FD9r 3               
000FD9r 3  A0 11        	ldy #TABSIZ
000FDBr 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000FDDr 3  C9 FF        	cmp #255 		; is it enabled?
000FDFr 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000FE1r 3               
000FE1r 3  A0 14        	ldy #TABSIZ+3
000FE3r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000FE5r 3  A0 03        	ldy #3
000FE7r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000FE9r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000FEBr 3               bsort2:
000FEBr 3  18           	clc
000FECr 3  A5 rr        	lda z80_x
000FEEr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000FF0r 3  85 rr        	sta z80_x
000FF2r 3  90 02        	bcc :+
000FF4r 3  E6 rr        	inc z80_i
000FF6r 3               :
000FF6r 3  C6 rr        	dec qscnt
000FF8r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000FFAr 3  60           	rts
000FFBr 3               
000FFBr 3               bsort1:
000FFBr 3  A0 11        	ldy #TABSIZ
000FFDr 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000FFFr 3  C9 FF        	cmp #255		; is it enabled?
001001r 3  F0 E8        	beq bsort2		; no, nothing to swap.
001003r 3  20 rr rr     	jsr swspr		; swap positions.
001006r 3  4C rr rr     	jmp bsort2
001009r 3               swemp:
001009r 3  A0 11        	ldy #TABSIZ
00100Br 3  B1 rr        	lda (z80_ix),y		; next table entry.
00100Dr 3  C9 FF        	cmp #255		; is that one on?
00100Fr 3  F0 DA        	beq bsort2		; no, nothing to swap.
001011r 3  20 rr rr     	jsr swspr		; swap positions.
001014r 3  4C rr rr     	jmp bsort2
001017r 3               
001017r 3               ; Swap sprites.
001017r 3               
001017r 3               swspr:
001017r 3  A5 rr        	lda z80_x		; table address
001019r 3  85 rr        	sta z80_e		; copy to de pair.
00101Br 3  85 rr        	sta z80_l		; copy to hl pair.
00101Dr 3  A5 rr        	lda z80_i
00101Fr 3  85 rr        	sta z80_h
001021r 3  85 rr        	sta z80_d
001023r 3               
001023r 3  18           	clc
001024r 3  A5 rr        	lda z80_l
001026r 3  69 11        	adc #TABSIZ		; distance to second entry.
001028r 3  85 rr        	sta z80_l
00102Ar 3  90 02        	bcc :+
00102Cr 3  E6 rr        	inc z80_h
00102Er 3               :
00102Er 3  A9 11        	lda #TABSIZ		; bytes to swap.
001030r 3  85 rr        	sta z80_b
001032r 3  A0 00        	ldy #0
001034r 3               swspr0:
001034r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
001036r 3  48           	pha
001037r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
001039r 3  91 rr        	sta (z80_hl),y 		; copy to second.
00103Br 3  68           	pla
00103Cr 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
00103Er 3               
00103Er 3  E6 rr        	inc z80_e 		; next byte.
001040r 3  D0 02        	bne :+
001042r 3  E6 rr        	inc z80_d
001044r 3               :
001044r 3  E6 rr        	inc z80_l 		; next byte.
001046r 3  D0 02        	bne :+
001048r 3  E6 rr        	inc z80_h
00104Ar 3               :
00104Ar 3  C6 rr        	dec z80_b
00104Cr 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
00104Er 3  60           	rts
00104Fr 3               
00104Fr 3               ;----------------------------------------------------
00104Fr 3               ; Process sprites.
00104Fr 3               ;----------------------------------------------------
00104Fr 3               
00104Fr 3               pspr:
00104Fr 3  A9 0C        	lda #NUMSPR		; sprites to process.
001051r 3  85 rr        	sta sprptr
001053r 3               
001053r 3  A9 rr        	lda #<sprtab 		; sprite table.
001055r 3  85 rr        	sta z80_x
001057r 3  A9 rr        	lda #>sprtab
001059r 3  85 rr        	sta z80_i
00105Br 3               pspr1:
00105Br 3  A0 00        	ldy #0
00105Dr 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
00105Fr 3  C9 09        	cmp #9 			; within range of sprite types?
001061r 3  B0 03        	bcs :+
001063r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
001066r 3               :
001066r 3  18           	clc
001067r 3  A5 rr        	lda z80_x
001069r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00106Br 3  85 rr        	sta z80_x
00106Dr 3  90 02        	bcc :+
00106Fr 3  E6 rr        	inc z80_i		; next sprite.
001071r 3               :
001071r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
001073r 3  D0 E6        	bne pspr1
001075r 3  60           	rts
001076r 3               
001076r 3               pspr2:
001076r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
001078r 3  85 rr        	sta ogptr
00107Ar 3  A5 rr        	lda z80_i
00107Cr 3  85 rr        	sta ogptr+1
00107Er 3  20 rr rr     	jsr pspr3		; do the routine.
001081r 3               rtorg:
001081r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
001083r 3  85 rr        	sta z80_x
001085r 3  A5 rr        	lda ogptr+1
001087r 3  85 rr        	sta z80_i
001089r 3               rtorg0:
001089r 3  60           	rts
00108Ar 3               
00108Ar 3               pspr3:
00108Ar 3  A9 rr        	lda #<evtyp0		; sprite type events list.
00108Cr 3  85 rr        	sta z80_l
00108Er 3  A9 rr        	lda #>evtyp0
001090r 3  85 rr        	sta z80_h
001092r 3               pspr4:
001092r 3  B1 rr        	lda (z80_ix),y
001094r 3  0A           	asl a			; double accumulator.
001095r 3  18           	clc
001096r 3  65 rr        	adc z80_l
001098r 3  85 rr        	sta z80_l
00109Ar 3  90 02        	bcc :+
00109Cr 3  E6 rr        	inc z80_h
00109Er 3               :
00109Er 3  B1 rr        	lda (z80_hl),y
0010A0r 3  85 rr        	sta z80_e 		; copy to de.
0010A2r 3  48           	pha
0010A3r 3               
0010A3r 3  E6 rr        	inc z80_l 		; next byte of address.
0010A5r 3  D0 02        	bne :+
0010A7r 3  E6 rr        	inc z80_h
0010A9r 3               :
0010A9r 3  B1 rr        	lda (z80_hl),y 		; address high.
0010ABr 3  85 rr        	sta z80_d
0010ADr 3               
0010ADr 3  48           	pha	 		; swap address into hl.
0010AEr 3  A5 rr        	lda z80_h
0010B0r 3  85 rr        	sta z80_d
0010B2r 3  68           	pla
0010B3r 3  85 rr        	sta z80_h
0010B5r 3  68           	pla
0010B6r 3  85 rr        	sta z80_l
0010B8r 3  A5 rr        	lda z80_l
0010BAr 3  85 rr        	sta z80_e
0010BCr 3               
0010BCr 3  6C rr rr     	jmp (z80_hl) 		; go there.
0010BFr 3               
0010BFr 3               ; Address of each sprite type's routine.
0010BFr 3               
0010BFr 3  rr rr        evtyp0:	.word evnt00
0010C1r 3  rr rr        evtyp1:	.word evnt01
0010C3r 3  rr rr        evtyp2:	.word evnt02
0010C5r 3  rr rr        evtyp3:	.word evnt03
0010C7r 3  rr rr        evtyp4:	.word evnt04
0010C9r 3  rr rr        evtyp5:	.word evnt05
0010CBr 3  rr rr        evtyp6:	.word evnt06
0010CDr 3  rr rr        evtyp7:	.word evnt07
0010CFr 3  rr rr        evtyp8:	.word evnt08
0010D1r 3               
0010D1r 3               ;--------------------------------------------------------------
0010D1r 3               ; Display sprites.
0010D1r 3               ;
0010D1r 3               ; Input:
0010D1r 3               ;  IX = sprite table
0010D1r 3               ;--------------------------------------------------------------
0010D1r 3               
0010D1r 3               dspr:
0010D1r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
0010D3r 3  85 rr        	sta sprcnt
0010D5r 3               
0010D5r 3               dspr0:
0010D5r 3  A0 00        	ldy #var_Type
0010D7r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
0010D9r 3  C9 FF        	cmp #255 		; is it enabled?
0010DBr 3  D0 45        	bne dspr1 		; yes, it needs deleting.
0010DDr 3               dspr5:
0010DDr 3  A0 05        	ldy #var_newType
0010DFr 3  B1 rr        	lda (z80_ix),y 		; new type.
0010E1r 3  C9 FF        	cmp #255		; is it enabled?
0010E3r 3  F0 03        	beq dspr2
0010E5r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
0010E8r 3               dspr2:
0010E8r 3  A0 05        	ldy #var_newType
0010EAr 3  B1 rr        	lda (z80_ix),y 		; copy new type.
0010ECr 3  A0 00        	ldy #var_Type
0010EEr 3  91 rr        	sta (z80_ix),y
0010F0r 3  A0 06        	ldy #var_newImage
0010F2r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
0010F4r 3  A0 01        	ldy #var_Image
0010F6r 3  91 rr        	sta (z80_ix),y
0010F8r 3  A0 07        	ldy #var_newFrame
0010FAr 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
0010FCr 3  A0 02        	ldy #var_Frame
0010FEr 3  91 rr        	sta (z80_ix),y
001100r 3  A0 08        	ldy #var_newY
001102r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
001104r 3  A0 03        	ldy #var_Y
001106r 3  91 rr        	sta (z80_ix),y
001108r 3  A0 09        	ldy #var_newX
00110Ar 3  B1 rr        	lda (z80_ix),y 		; copy new x.
00110Cr 3  A0 04        	ldy #var_X
00110Er 3  91 rr        	sta (z80_ix),y
001110r 3               
001110r 3  18           	clc
001111r 3  A5 rr        	lda z80_x
001113r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
001115r 3  85 rr        	sta z80_x
001117r 3  A5 rr        	lda z80_i
001119r 3  69 00        	adc #0
00111Br 3  85 rr        	sta z80_i 		; next sprite.
00111Dr 3  C6 rr        	dec sprcnt
00111Fr 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
001121r 3  60           	rts
001122r 3               
001122r 3               dspr1:
001122r 3               	; _BEEB clipping code copied from CPC Engine
001122r 3  A0 03        	ldy #var_Y
001124r 3  B1 rr        	lda (z80_ix), y		; old x coord
001126r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
001128r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
00112Ar 3               
00112Ar 3  A0 05        	ldy #var_newType
00112Cr 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
00112Er 3  C9 FF        	cmp #255		; is this enabled?
001130r 3  D0 06        	bne dspr4 		; yes, display both.
001132r 3               
001132r 3               dspr6:
001132r 3  20 rr rr     	jsr sspria 		; show single sprite.
001135r 3  4C rr rr     	jmp dspr2
001138r 3               
001138r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
001138r 3               
001138r 3               dspr4:
001138r 3               	; _BEEB clipping code copied from CPC Engine
001138r 3  A0 08        	ldy #var_newY
00113Ar 3  B1 rr        	lda (z80_ix), y		; old x coord
00113Cr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
00113Er 3  B0 F2        	bcs dspr6		; yes, don't display it.
001140r 3               
001140r 3  A0 04        	ldy #var_X
001142r 3  B1 rr        	lda (z80_ix),y		; old x.
001144r 3  A0 09        	ldy #var_newX
001146r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
001148r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
00114Ar 3               
00114Ar 3  A0 03        	ldy #var_Y
00114Cr 3  B1 rr        	lda (z80_ix),y		; old y.
00114Er 3  A0 08        	ldy #var_newY
001150r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001152r 3  D0 17        	bne dspr7		; they differ, need to redraw.
001154r 3               
001154r 3  A0 02        	ldy #var_Frame
001156r 3  B1 rr        	lda (z80_ix),y 		; old frame.
001158r 3  A0 07        	ldy #var_newFrame
00115Ar 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
00115Cr 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
00115Er 3               
00115Er 3  A0 01        	ldy #var_Image
001160r 3  B1 rr        	lda (z80_ix),y 		; old image.
001162r 3  A0 06        	ldy #var_newImage
001164r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001166r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
001168r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
00116Br 3               dspr7:
00116Br 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
00116Er 3  4C rr rr     	jmp dspr2
001171r 3               dspr3:
001171r 3               	; _BEEB clipping code copied from CPC Engine
001171r 3  A0 08        	ldy #var_newY
001173r 3  B1 rr        	lda (z80_ix), y		; old x coord
001175r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
001177r 3  90 03        	bcc :+			; no, continue
001179r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
00117Cr 3               :
00117Cr 3  20 rr rr     	jsr ssprib 		; show single sprite.
00117Fr 3  4C rr rr     	jmp dspr2
001182r 3               
001182r 3               ;-----------------------------------------
001182r 3               ; Get sprite address calculations.
001182r 3               ; gspran = new sprite, gsprad = old sprite.
001182r 3               ;
001182r 3               ; Input:
001182r 3               ;  IX = sprite address
001182r 3               ;-----------------------------------------
001182r 3               
001182r 3               gspran:
001182r 3  A0 08        	ldy #var_newY
001184r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
001186r 3  85 rr        	sta dispy
001188r 3  A0 09        	ldy #var_newX
00118Ar 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
00118Cr 3  85 rr        	sta dispx
00118Er 3  A0 06        	ldy #var_newImage
001190r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
001192r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
001195r 3               
001195r 3  A0 00        	ldy #0
001197r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
001199r 3  A0 07        	ldy #var_newFrame
00119Br 3  18           	clc
00119Cr 3  71 rr        	adc (z80_ix),y 		; new add frame number.
00119Er 3  4C rr rr     	jmp gspra0
0011A1r 3               
0011A1r 3               ;-----------------------------------------
0011A1r 3               ; Calculate old sprite address
0011A1r 3               ;
0011A1r 3               ; Input:
0011A1r 3               ;  IX = sprite address
0011A1r 3               ;
0011A1r 3               ; Output:
0011A1r 3               ;  B  = right byte mask
0011A1r 3               ;  C  = left byte mask
0011A1r 3               ;  DE = spriteframe address
0011A1r 3               ;  scraddr = screenaddress(dispx,dispy)
0011A1r 3               ;-----------------------------------------
0011A1r 3               
0011A1r 3               gsprad:
0011A1r 3  A0 03        	ldy #var_Y
0011A3r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
0011A5r 3  85 rr        	sta dispy
0011A7r 3  A0 04        	ldy #var_X
0011A9r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0011ABr 3  85 rr        	sta dispx
0011ADr 3  A0 01        	ldy #var_Image
0011AFr 3  B1 rr        	lda (z80_ix),y 		; sprite image.
0011B1r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
0011B4r 3               
0011B4r 3  A0 00        	ldy #0
0011B6r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
0011B8r 3  A0 02        	ldy #var_Frame
0011BAr 3  18           	clc
0011BBr 3  71 rr        	adc (z80_ix),y 		; add frame number.
0011BDr 3               
0011BDr 3               gspra0:
0011BDr 3               .if rflag
0011BDr 3               	sta z80_e		; multiply by 32.
0011BDr 3               	lda #0
0011BDr 3               	sta z80_d
0011BDr 3               
0011BDr 3               	asl z80_e
0011BDr 3               	rol z80_d
0011BDr 3               	asl z80_e
0011BDr 3               	rol z80_d
0011BDr 3               	asl z80_e
0011BDr 3               	rol z80_d
0011BDr 3               	asl z80_e
0011BDr 3               	rol z80_d
0011BDr 3               .if bflag
0011BDr 3               	lda z80_e		; multiply by 48
0011BDr 3               	sta tmp1
0011BDr 3               	lda z80_d
0011BDr 3               	sta tmp2
0011BDr 3               .endif
0011BDr 3               	asl z80_e
0011BDr 3               	rol z80_d
0011BDr 3               .if bflag
0011BDr 3               	clc
0011BDr 3               	lda z80_e
0011BDr 3               	adc tmp1
0011BDr 3               	sta z80_e
0011BDr 3               	lda z80_d
0011BDr 3               	adc tmp2
0011BDr 3               	sta z80_d
0011BDr 3               .endif
0011BDr 3               .else
0011BDr 3  4A           	lsr a	  		; multiply by 128.
0011BEr 3  85 rr        	sta z80_d 		; store in d.
0011C0r 3  85 rr        	sta tmp1
0011C2r 3  A9 00        	lda #0
0011C4r 3  6A           	ror a
0011C5r 3  85 rr        	sta z80_e 		; got low byte.
0011C7r 3  85 rr        	sta tmp2
0011C9r 3               .if bflag
0011C9r 3               	lsr tmp1		; multiply by 192
0011C9r 3               	ror tmp2
0011C9r 3               	clc
0011C9r 3               	lda tmp2
0011C9r 3               	adc z80_e
0011C9r 3               	sta z80_e
0011C9r 3               	lda tmp1
0011C9r 3               	adc z80_d
0011C9r 3               	sta z80_d
0011C9r 3               .endif
0011C9r 3               .endif
0011C9r 3  18           	clc 			; address of play sprites.
0011CAr 3  A5 rr        	lda z80_e
0011CCr 3  69 rr        	adc #<sprgfx
0011CEr 3  85 rr        	sta z80_e
0011D0r 3  A5 rr        	lda z80_d
0011D2r 3  69 rr        	adc #>sprgfx
0011D4r 3  85 rr        	sta z80_d
0011D6r 3               
0011D6r 3  A5 rr        	lda dispx 		; y coordinate.
0011D8r 3  29 06        	and #6 			; position within byte boundary.
0011DAr 3  AA           	tax	 		; low byte of table displacement.
0011DBr 3               .if rflag
0011DBr 3               	stx sprshft
0011DBr 3               .else
0011DBr 3  0A           	asl a	  		; multiply by 32.
0011DCr 3  0A           	asl a  			; already a multiple
0011DDr 3  0A           	asl a  			; of 2, so just 4
0011DEr 3               .if bflag
0011DEr 3               	sta tmp1
0011DEr 3               	asl a  			; shifts needed.
0011DEr 3               	clc
0011DEr 3               	adc tmp1
0011DEr 3               .else
0011DEr 3  0A           	asl a  			; shifts needed.
0011DFr 3               .endif
0011DFr 3  18           	clc 			; add to sprite address.
0011E0r 3  65 rr        	adc z80_e
0011E2r 3  85 rr        	sta z80_e
0011E4r 3  90 02        	bcc :+
0011E6r 3  E6 rr        	inc z80_d
0011E8r 3               :
0011E8r 3               .endif
0011E8r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
0011EBr 3  85 rr        	sta z80_c 		; left mask.
0011EDr 3  BD rr rr     	lda spmask+1,x
0011F0r 3  85 rr        	sta z80_b 		; right mask.
0011F2r 3               ; Drop into screen address routine.
0011F2r 3  4C rr rr     	jmp scadd
0011F5r 3               
0011F5r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
0011F9r 3  0F F0 03 FC  
0011FDr 3               
0011FDr 3               
0011FDr 3               ;-----------------------------------------------------------
0011FDr 3               ; Animates a sprite.
0011FDr 3               ;
0011FDr 3               ; Input:
0011FDr 3               ;  IX = sprite address
0011FDr 3               ;  HL = last sprite address
0011FDr 3               ;-----------------------------------------------------------
0011FDr 3               
0011FDr 3               animsp:
0011FDr 3  25 rr        	and frmno
0011FFr 3  F0 01        	beq :+
001201r 3  60           	rts
001202r 3               :
001202r 3  A0 06        	ldy #var_newImage
001204r 3  B1 rr        	lda (z80_ix),y		; sprite image
001206r 3  20 rr rr     	jsr gfrm		; get frame data.
001209r 3               
001209r 3  E6 rr        	inc z80_l		; point to frames.
00120Br 3  D0 02        	bne :+
00120Dr 3  E6 rr        	inc z80_h
00120Fr 3               :
00120Fr 3  A0 07        	ldy #var_newFrame
001211r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
001213r 3  18           	clc
001214r 3  69 01        	adc #1			; next one along.
001216r 3  A0 00        	ldy #0
001218r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
00121Ar 3  90 02        	bcc anims0		; no, not yet.
00121Cr 3  A9 00        	lda #0			; start at first frame.
00121Er 3               anims0:
00121Er 3  A0 07        	ldy #var_newFrame
001220r 3  91 rr        	sta (z80_ix),y		; new frame.
001222r 3  60           	rts
001223r 3               
001223r 3               ;--------------------------------------------------------------
001223r 3               ; Animate back
001223r 3               ;
001223r 3               ; Input:
001223r 3               ;  IX = sprite address
001223r 3               ;  HL = last sprite address
001223r 3               ;--------------------------------------------------------------
001223r 3               
001223r 3               animbk:
001223r 3  25 rr        	and frmno
001225r 3  F0 01        	beq :+
001227r 3  60           	rts
001228r 3               :
001228r 3  A0 06        	ldy #var_newImage
00122Ar 3  B1 rr        	lda (z80_ix),y		; sprite image.
00122Cr 3  20 rr rr     	jsr gfrm		; get frame data.
00122Fr 3               
00122Fr 3  E6 rr        	inc z80_l 		; point to frames.
001231r 3  D0 02        	bne :+
001233r 3  E6 rr        	inc z80_h
001235r 3               :
001235r 3  A0 07        	ldy #var_newFrame
001237r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
001239r 3  F0 03        	beq :+
00123Br 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
00123Er 3               :
00123Er 3  A0 00        	ldy #0
001240r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
001242r 3               rtanb0:
001242r 3  38           	sec
001243r 3  E9 01        	sbc #1			; next one along.
001245r 3  4C rr rr     	jmp anims0		; set new frame.
001248r 3               
001248r 3               ;--------------------------------------------------------------
001248r 3               ; Check for collision with other sprite, strict enforcement.
001248r 3               ;
001248r 3               ; Input:
001248r 3               ;  b		= sprite to test for
001248r 3               ;  ix		= current sprite pointer
001248r 3               ;
001248r 3               ; global:	b
001248r 3               ; local:	x,y,hl,de,skptr
001248r 3               ; calls:	-
001248r 3               ;--------------------------------------------------------------
001248r 3               
001248r 3               sktyp:
001248r 3  A9 rr        	lda #<sprtab				; sprite table.
00124Ar 3  85 rr        	sta z80_l
00124Cr 3  A9 rr        	lda #>sprtab
00124Er 3  85 rr        	sta z80_h
001250r 3               numsp2:
001250r 3  A9 0C        	lda #NUMSPR				; number of sprites.
001252r 3  85 rr        	sta sktptr
001254r 3               sktyp0:
001254r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
001256r 3  85 rr        	sta skptr
001258r 3  A5 rr        	lda z80_h
00125Ar 3  85 rr        	sta skptr+1
00125Cr 3               
00125Cr 3  A0 00        	ldy #0
00125Er 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
001260r 3  C5 rr        	cmp z80_b				; is it the type we seek?
001262r 3  F0 1D        	beq coltyp				; yes, we can use this one.
001264r 3               sktyp1:
001264r 3  18           	clc
001265r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
001267r 3  69 11        	adc #TABSIZ				; size of each entry.
001269r 3  85 rr        	sta z80_l
00126Br 3  A5 rr        	lda skptr+1
00126Dr 3  69 00        	adc #0
00126Fr 3  85 rr        	sta z80_h
001271r 3  C6 rr        	dec sktptr					; one less iteration.
001273r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
001275r 3  A9 00        	lda #0					; default to ROM address - no sprite.
001277r 3  85 rr        	sta z80_l
001279r 3  85 rr        	sta z80_h
00127Br 3  85 rr        	sta skptr				; store pointer to sprite.
00127Dr 3  85 rr        	sta skptr+1
00127Fr 3               
00127Fr 3  18           	clc					; don't return with zero flag set.
001280r 3  60           	rts 					; didn't find one.
001281r 3               
001281r 3               coltyp:
001281r 3  A0 00        	ldy #0
001283r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
001285r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
001287r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001289r 3               colty0:
001289r 3  A0 09        	ldy #9					; distance to x position in table.
00128Br 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
00128Dr 3  85 rr        	sta z80_e
00128Fr 3  88           	dey
001290r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
001292r 3  85 rr        	sta z80_d
001294r 3               
001294r 3               ; Drop into collision detection.
001294r 3               
001294r 3               colc16:
001294r 3  A0 09        	ldy #9
001296r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
001298r 3  38           	sec					; subtract x.
001299r 3  E5 rr        	sbc z80_e
00129Br 3  B0 05        	bcs  colc1a 				; result is positive.
00129Dr 3  49 FF        	eor #$ff				; make negative positive.
00129Fr 3  18           	clc
0012A0r 3  69 01        	adc #1
0012A2r 3               colc1a:
0012A2r 3  C9 10        	cmp #16 				; within x range?
0012A4r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0012A6r 3  85 rr        	sta z80_c				; store difference.
0012A8r 3               
0012A8r 3  A0 08        	ldy #8
0012AAr 3  B1 rr        	lda (z80_ix),y				; y coord.
0012ACr 3  38           	sec
0012ADr 3  E5 rr        	sbc z80_d				; subtract y.
0012AFr 3  B0 05        	bcs colc1b				; result is positive.
0012B1r 3  49 FF        	eor #$ff				; make negative positive.
0012B3r 3  18           	clc
0012B4r 3  69 01        	adc #1
0012B6r 3               colc1b:
0012B6r 3  C9 10        	cmp #16					; within y range?
0012B8r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
0012BAr 3  18           	clc					; add x difference.
0012BBr 3  65 rr        	adc z80_c
0012BDr 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0012BFr 3  B0 02        	bcs :+
0012C1r 3  38           	sec
0012C2r 3  60           	rts 					; carry set if there's a collision.
0012C3r 3               :
0012C3r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
0012C6r 3               colty1:
0012C6r 3  A5 rr        	lda z80_x  				; compare the two.
0012C8r 3  C5 rr        	cmp z80_l
0012CAr 3  D0 09        	bne end_col
0012CCr 3  A5 rr        	lda z80_i
0012CEr 3  C5 rr        	cmp z80_h
0012D0r 3  D0 03        	bne end_col
0012D2r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
0012D5r 3               end_col:
0012D5r 3  4C rr rr     	jmp colty0
0012D8r 3               
0012D8r 3               ;-----------------------------------------------------------
0012D8r 3               ; Display number, left aligned
0012D8r 3               ;
0012D8r 3               ; Input:
0012D8r 3               ;  a		= number
0012D8r 3               ;
0012D8r 3               ; global:	-
0012D8r 3               ; local:	a,y,bc,hl,displ0
0012D8r 3               ; calls:	num2ch,dmsg3
0012D8r 3               ;-----------------------------------------------------------
0012D8r 3               
0012D8r 3               disply:
0012D8r 3  85 rr        	sta z80_a
0012DAr 3  A9 rr        	lda #<displ0				; display workspace.
0012DCr 3  85 rr        	sta z80_c
0012DEr 3  A9 rr        	lda #>displ0
0012E0r 3  85 rr        	sta z80_b
0012E2r 3  A5 rr        	lda z80_a
0012E4r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
0012E7r 3               displ1:
0012E7r 3  C6 rr        	dec z80_c				; back one character.
0012E9r 3  A5 rr        	lda z80_c
0012EBr 3  C9 FF        	cmp #$ff
0012EDr 3  D0 02        	bne :+
0012EFr 3  C6 rr        	dec z80_b
0012F1r 3               :
0012F1r 3  A0 00        	ldy #0
0012F3r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
0012F5r 3  09 80        	ora #128				; insert end marker.
0012F7r 3  91 rr        	sta (z80_bc),y				; new value.
0012F9r 3               
0012F9r 3  A9 rr        	lda #<displ0				; display space.
0012FBr 3  85 rr        	sta z80_l
0012FDr 3  A9 rr        	lda #>displ0
0012FFr 3  85 rr        	sta z80_h
001301r 3  4C rr rr     	jmp dmsg3				; display the string.
001304r 3               
001304r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001308r 3               
001308r 3               ;----------------------------------------------------------------
001308r 3               ; Initialise screen.
001308r 3               ;
001308r 3               ; global:	roomtb,scno
001308r 3               ; local:	-
001308r 3               ; calls:	tstcs
001308r 3               ;----------------------------------------------------------------
001308r 3               
001308r 3               initsc:
001308r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
00130Br 3  20 rr rr     	jsr tstsc 			; find displacement.
00130Er 3  C9 FF        	cmp #255 			; is it valid?
001310r 3  F0 02        	beq init_end 			; no, it's rubbish.
001312r 3  85 rr        	sta scno			; store new room number.
001314r 3               init_end:
001314r 3  60           	rts
001315r 3               
001315r 3               ;----------------------------------------------------------------
001315r 3               ; Test screen.
001315r 3               ;
001315r 3               ; global:	-
001315r 3               ; local:	x
001315r 3               ; calls:	-
001315r 3               ;----------------------------------------------------------------
001315r 3               
001315r 3               tstsc:
001315r 3  85 rr        	sta tmproom
001317r 3  18           	clc
001318r 3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
00131Ar 3  AA           	tax 				; add displacement to map data.
00131Br 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
00131Er 3  60           	rts
00131Fr 3               
00131Fr 3               ;--------------------------
00131Fr 3               ; Screen left.
00131Fr 3               ;--------------------------
00131Fr 3               
00131Fr 3               scrl:
00131Fr 3  AD rr rr     	lda roomtb 			; present room table pointer.
001322r 3  38           	sec
001323r 3  E9 01        	sbc #1				; room left.
001325r 3               scrl0:
001325r 3  20 rr rr     	jsr tstsc			; test screen.
001328r 3  C9 FF        	cmp #255			; is there a screen this way?
00132Ar 3  D0 01        	bne :+
00132Cr 3  60           	rts				; no, return to loop.
00132Dr 3               :
00132Dr 3  A5 rr        	lda tmproom			; restore room displacement.
00132Fr 3  8D rr rr     	sta roomtb			; new room table position.
001332r 3               scrl1:
001332r 3  20 rr rr     	jsr initsc 			; set new screen.
001335r 3  A9 02        	lda #2
001337r 3  85 rr        	sta restfl 			; set it.
001339r 3  60           	rts
00133Ar 3               scrr:
00133Ar 3  AD rr rr     	lda roomtb 			; room table pointer.
00133Dr 3  18           	clc
00133Er 3  69 01        	adc #1				; room right.
001340r 3  4C rr rr     	jmp scrl0
001343r 3               scru:
001343r 3  AD rr rr     	lda roomtb 			; room table pointer.
001346r 3  38           	sec
001347r 3  E9 0D        	sbc #MAPWID 			; room up.
001349r 3  4C rr rr     	jmp scrl0
00134Cr 3               scrd:
00134Cr 3  AD rr rr     	lda roomtb 			; room table pointer.
00134Fr 3  18           	clc
001350r 3  69 0D        	adc #MAPWID 			; room down.
001352r 3  4C rr rr     	jmp scrl0
001355r 3               
001355r 3               ;-----------------------------------------
001355r 3               ; Jump to new screen.
001355r 3               ;-----------------------------------------
001355r 3               
001355r 3               nwscr:
001355r 3  A2 00        	ldx #0				; start of map data.
001357r 3               nwscr0:
001357r 3  DD rr rr     	cmp mapdat,x
00135Ar 3  F0 06        	beq nwscr1			; have we found a match for screen?
00135Cr 3  E8           	inx 				; next room.
00135Dr 3  E0 50        	cpx #80				; zero room count, 80 to search.
00135Fr 3  D0 F6        	bne nwscr0			; keep looking.
001361r 3  60           	rts
001362r 3               nwscr1:
001362r 3  8E rr rr     	stx roomtb			; set the map position.
001365r 3  4C rr rr     	jmp scrl1			; draw new room.
001368r 3               
001368r 3               
001368r 3               ;----------------------------------------------------------
001368r 3               ; Gravity processing.
001368r 3               ;----------------------------------------------------------
001368r 3               
001368r 3               grav:
001368r 3  A0 0D        	ldy #13
00136Ar 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
00136Cr 3  85 rr        	sta z80_l
00136Er 3  A0 0E        	ldy #14
001370r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
001372r 3  85 rr        	sta z80_h
001374r 3  05 rr        	ora z80_l			; merge in low byte.
001376r 3  D0 01        	bne :+
001378r 3  60           	rts				; if neither is set, we're not in the air.
001379r 3               :
001379r 3  A0 00        	ldy #0
00137Br 3  B1 rr        	lda (z80_hl),y			; pixels to move.
00137Dr 3  85 rr        	sta z80_a
00137Fr 3  C9 63        	cmp #99				; reached the end?
001381r 3  D0 0C        	bne grav0			; no, continue.
001383r 3               grav2:
001383r 3  C6 rr        	dec z80_l			; go back to previous value.
001385r 3  C9 FF        	cmp #$ff
001387r 3  D0 02        	bne :+
001389r 3  C6 rr        	dec z80_h
00138Br 3               :
00138Br 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
00138Dr 3  85 rr        	sta z80_a
00138Fr 3               grav0:
00138Fr 3  E6 rr        	inc z80_l			; point to next table entry.
001391r 3  D0 02        	bne :+
001393r 3  E6 rr        	inc z80_h
001395r 3               :
001395r 3  A5 rr        	lda z80_l
001397r 3  A0 0D        	ldy #13
001399r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
00139Br 3  A5 rr        	lda z80_h
00139Dr 3  A0 0E        	ldy #14
00139Fr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
0013A1r 3               grav1:
0013A1r 3  A5 rr        	lda z80_a
0013A3r 3  D0 01        	bne :+				; any movement required?
0013A5r 3  60           	rts				; no, not this time.
0013A6r 3               :
0013A6r 3  A5 rr        	lda z80_a
0013A8r 3  C9 80        	cmp #128			; is it up or down?
0013AAr 3  B0 15        	bcs gravu			; it's up.
0013ACr 3               gravd:
0013ACr 3  85 rr        	sta z80_b			; set pixels to move.
0013AEr 3               gravd0:
0013AEr 3  20 rr rr     	jsr cangd			; can we go down?
0013B1r 3  D0 28        	bne gravst			; can't move down, so stop.
0013B3r 3  A0 08        	ldy #8
0013B5r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
0013B7r 3  18           	clc
0013B8r 3  69 01        	adc #1
0013BAr 3  91 rr        	sta (z80_ix),y
0013BCr 3  C6 rr        	dec z80_b
0013BEr 3  D0 EE        	bne gravd0
0013C0r 3  60           	rts
0013C1r 3               gravu:
0013C1r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
0013C3r 3  18           	clc
0013C4r 3  69 01        	adc #1
0013C6r 3  85 rr        	sta z80_b			; set pixels to move.
0013C8r 3               gravu0:
0013C8r 3  20 rr rr     	jsr cangu			; can we go up?
0013CBr 3  D0 6E        	bne ifalls			; can't move up, go down next.
0013CDr 3  A0 08        	ldy #8
0013CFr 3  B1 rr        	lda (z80_ix),y
0013D1r 3  38           	sec
0013D2r 3  E9 01        	sbc #1
0013D4r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
0013D6r 3  C6 rr        	dec z80_b
0013D8r 3  D0 EE        	bne gravu0
0013DAr 3  60           	rts
0013DBr 3               gravst:
0013DBr 3  A0 0D        	ldy #var_jumpLo
0013DDr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
0013DFr 3  85 rr        	sta z80_l
0013E1r 3  A0 0E        	ldy #var_jumpHi
0013E3r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
0013E5r 3  85 rr        	sta z80_h
0013E7r 3               
0013E7r 3  A9 00        	lda #0				; null value in pointer.
0013E9r 3  A0 0D        	ldy #var_jumpLo
0013EBr 3  91 rr        	sta (z80_ix),y			; store new pointer low.
0013EDr 3  C8           	iny
0013EEr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
0013F0r 3               
0013F0r 3  A0 00        	ldy #0
0013F2r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
0013F4r 3  C9 63        	cmp #99				; is it the end marker?
0013F6r 3               evftf:
0013F6r 3  F0 01        	beq :+				; yes, fallen too far.
0013F8r 3  60           	rts
0013F9r 3               :
0013F9r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
0013FCr 3               
0013FCr 3               ;------------------------------------------------
0013FCr 3               ; Initiate fall check.
0013FCr 3               ;------------------------------------------------
0013FCr 3               
0013FCr 3               ifall:
0013FCr 3  A0 0D        	ldy #var_jumpLo
0013FEr 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
001400r 3  85 rr        	sta z80_l
001402r 3  A0 0E        	ldy #var_jumpHi
001404r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
001406r 3  85 rr        	sta z80_h			; high byte in accumulator.
001408r 3  05 rr        	ora z80_l			; merge in low byte.
00140Ar 3  F0 01        	beq :+
00140Cr 3  60           	rts				; if either is set, we're already in the air.
00140Dr 3               :
00140Dr 3  A0 09        	ldy #9
00140Fr 3  B1 rr        	lda (z80_ix),y			; y coordinate.
001411r 3  85 rr        	sta dispx
001413r 3  A0 08        	ldy #8
001415r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
001417r 3  18           	clc
001418r 3               numsp7:
001418r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
00141Ar 3  85 rr        	sta dispy			; set up test coordinates.
00141Cr 3  20 rr rr     	jsr tstbl			; get map address.
00141Fr 3  20 rr rr     	jsr plchk			; block, platform check.
001422r 3  F0 01        	beq :+
001424r 3  60           	rts				; it's solid, don't fall.
001425r 3               :
001425r 3  E6 rr        	inc bufaddr			; look right one cell.
001427r 3  20 rr rr     	jsr plchk			; block, platform check.
00142Ar 3  F0 01        	beq :+
00142Cr 3  60           	rts				; it's solid, don't fall.
00142Dr 3               :
00142Dr 3  A5 rr        	lda dispx			; y coordinate.
00142Fr 3  29 07        	and #7				; position straddling block cells.
001431r 3  F0 08        	beq ifalls			; no more checks needed.
001433r 3  E6 rr        	inc bufaddr			; look to third cell.
001435r 3  20 rr rr     	jsr plchk			; block, platform check.
001438r 3  F0 01        	beq :+
00143Ar 3  60           	rts				; it's solid, don't fall.
00143Br 3               :
00143Br 3               ifalls:
00143Br 3  A9 rr        	lda #<jtab			; jump table start.
00143Dr 3  85 rr        	sta z80_l
00143Fr 3  A9 rr        	lda #>jtab
001441r 3  85 rr        	sta z80_h
001443r 3               ifal0:
001443r 3  E6 rr        	inc z80_l			; point to next value.
001445r 3  D0 02        	bne :+
001447r 3  E6 rr        	inc z80_h
001449r 3               :
001449r 3  A0 00        	ldy #0
00144Br 3  B1 rr        	lda (z80_hl),y			; fetch value.
00144Dr 3  F0 F4        	beq ifal0			; no, get next value.
00144Fr 3  C9 63        	cmp #99				; reached end of table?
001451r 3  D0 01        	bne :+
001453r 3  60           	rts				; yes, don't fall.
001454r 3               :
001454r 3  C9 80        	cmp #128			; is it going up?
001456r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
001458r 3               
001458r 3  A0 0D        	ldy #13
00145Ar 3  A5 rr        	lda z80_l
00145Cr 3  91 rr        	sta (z80_ix),y 			; set jump low.
00145Er 3  A0 0E        	ldy #14
001460r 3  A5 rr        	lda z80_h
001462r 3  91 rr        	sta (z80_ix),y 			; set jump high.
001464r 3  60           	rts
001465r 3               
001465r 3               
001465r 3               ;----------------------------------------------------
001465r 3               ; Get frame data for a particular sprite.
001465r 3               ; Input:
001465r 3               ;  a		= framenumer
001465r 3               ; Output:
001465r 3               ;  hl		= frame address
001465r 3               ;
001465r 3               ; global:	hl,frmptr
001465r 3               ; local:	-
001465r 3               ; calls:	-
001465r 3               ;----------------------------------------------------
001465r 3               
001465r 3               gfrm:
001465r 3  0A           	asl a	 		 	; multiple of 2.
001466r 3  18           	clc
001467r 3  6D rr rr     	adc frmptr 			; frames used by game.
00146Ar 3  85 rr        	sta z80_l
00146Cr 3  AD rr rr     	lda frmptr+1
00146Fr 3  69 00        	adc #0
001471r 3  85 rr        	sta z80_h 			; point to frame start.
001473r 3  60           	rts
001474r 3               
001474r 3               ;----------------------------------------------------
001474r 3               ; Find sprite list for current room.
001474r 3               ;
001474r 3               ; global:	hl
001474r 3               ; local:	x,y
001474r 3               ; calls:	-
001474r 3               ;----------------------------------------------------
001474r 3               
001474r 3               sprlst:
001474r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
001476r 3  85 rr        	sta z80_l
001478r 3  A9 rr        	lda #>nmedat
00147Ar 3  85 rr        	sta z80_h
00147Cr 3  A6 rr        	ldx scno 			; screen number.
00147Er 3  D0 01        	bne sprls2 			; is it the first screen?
001480r 3  60           	rts 				; yes, don't need to search data.
001481r 3               sprls2:
001481r 3  A0 00        	ldy #0
001483r 3               sprls1:
001483r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
001485r 3  C9 FF        	cmp #255			; is it an end marker?
001487r 3  F0 0E        	beq sprls0 			; yes, end of this room.
001489r 3               
001489r 3  18           	clc 				; point to next sprite in list.
00148Ar 3  A5 rr        	lda z80_l
00148Cr 3  69 04        	adc #NMESIZ
00148Er 3  85 rr        	sta z80_l
001490r 3  90 02        	bcc :+
001492r 3  E6 rr        	inc z80_h
001494r 3               :
001494r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
001497r 3               sprls0:
001497r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
001499r 3  D0 02        	bne :+
00149Br 3  E6 rr        	inc z80_h
00149Dr 3               :
00149Dr 3  CA           	dex
00149Er 3  D0 E3        	bne sprls1 			; continue until room found.
0014A0r 3  60           	rts
0014A1r 3               
0014A1r 3               
0014A1r 3               ;----------------------------------------------------
0014A1r 3               ; Clear all but a single player sprite.
0014A1r 3               ;
0014A1r 3               ; global:	-
0014A1r 3               ; local:	x,y,ix
0014A1r 3               ; calls:	-
0014A1r 3               ;----------------------------------------------------
0014A1r 3               
0014A1r 3               nspr:
0014A1r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0014A3r 3  85 rr        	sta sprcnt
0014A5r 3  A9 rr        	lda #<sprtab 			; sprite table.
0014A7r 3  85 rr        	sta z80_x
0014A9r 3  A9 rr        	lda #>sprtab
0014ABr 3  85 rr        	sta z80_i
0014ADr 3               nspr0:
0014ADr 3  A0 00        	ldy #0 				; fetch sprite type.
0014AFr 3  B1 rr        	lda (z80_ix),y 			; is it a player?
0014B1r 3  F0 1A        	beq nspr1 			; yes, keep this one.
0014B3r 3               
0014B3r 3  A9 FF        	lda #255
0014B5r 3  A0 00        	ldy #0 				; fetch sprite type.
0014B7r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
0014B9r 3  A0 05        	ldy #5
0014BBr 3  91 rr        	sta (z80_ix),y 			; remove next type.
0014BDr 3               
0014BDr 3  18           	clc	 			; next sprite.
0014BEr 3  A5 rr        	lda z80_x
0014C0r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0014C2r 3  85 rr        	sta z80_x
0014C4r 3  90 02        	bcc :+
0014C6r 3  E6 rr        	inc z80_i
0014C8r 3               :
0014C8r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
0014CAr 3  D0 E1        	bne nspr0
0014CCr 3  60           	rts
0014CDr 3               nspr1:
0014CDr 3  A9 FF        	lda #255
0014CFr 3  A0 00        	ldy #0
0014D1r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
0014D3r 3               
0014D3r 3  18           	clc	 			; point to next sprite.
0014D4r 3  A5 rr        	lda z80_x
0014D6r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0014D8r 3  85 rr        	sta z80_x
0014DAr 3  90 02        	bcc :+
0014DCr 3  E6 rr        	inc z80_i
0014DEr 3               :
0014DEr 3  C6 rr        	dec sprcnt	 			; one less to do.
0014E0r 3  D0 01        	bne nspr2
0014E2r 3  60           	rts
0014E3r 3               nspr2:
0014E3r 3  A9 FF        	lda #255
0014E5r 3  A0 00        	ldy #0
0014E7r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
0014E9r 3  A0 05        	ldy #5
0014EBr 3  91 rr        	sta (z80_ix),y 			; remove next type.
0014EDr 3               
0014EDr 3  18           	clc	 			; next sprite.
0014EEr 3  A5 rr        	lda z80_x
0014F0r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0014F2r 3  85 rr        	sta z80_x
0014F4r 3  90 02        	bcc :+
0014F6r 3  E6 rr        	inc z80_i
0014F8r 3               :
0014F8r 3  C6 rr        	dec sprcnt	 			; one less space in table.
0014FAr 3  D0 E7        	bne nspr2
0014FCr 3  60           	rts
0014FDr 3               
0014FDr 3               ;----------------------------------------------------------
0014FDr 3               ; Two initialisation routines.
0014FDr 3               ; Initialise sprites - copy everything from list to table.
0014FDr 3               ;
0014FDr 3               ; global:	-
0014FDr 3               ; local:	x,y,ix
0014FDr 3               ; calls:	cpsp
0014FDr 3               ;----------------------------------------------------------
0014FDr 3               
0014FDr 3               ispr:
0014FDr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0014FFr 3  85 rr        	sta sprcnt
001501r 3  A9 rr        	lda #<sprtab			; sprite table.
001503r 3  85 rr        	sta z80_x
001505r 3  A9 rr        	lda #>sprtab
001507r 3  85 rr        	sta z80_i
001509r 3               ispr2:
001509r 3  A0 00        	ldy #0
00150Br 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
00150Dr 3  C9 FF        	cmp #255 			; is it an end marker?
00150Fr 3  D0 01        	bne :+
001511r 3  60           	rts 				; yes, no more to do.
001512r 3               :
001512r 3               ispr1:
001512r 3  A0 00        	ldy #0
001514r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
001516r 3  C9 FF        	cmp #255 			; is it enabled yet?
001518r 3  D0 08        	bne ispr4			; yes, try another slot.
00151Ar 3               
00151Ar 3  A0 05        	ldy #5
00151Cr 3  B1 rr        	lda (z80_ix),y		 	; next type.
00151Er 3  C9 FF        	cmp #255 			; is it enabled yet?
001520r 3  F0 10        	beq ispr3 			; no, process this one.
001522r 3               ispr4:
001522r 3  18           	clc 				; next sprite.
001523r 3  A5 rr        	lda z80_x
001525r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001527r 3  85 rr        	sta z80_x
001529r 3  90 02        	bcc :+
00152Br 3  E6 rr        	inc z80_i
00152Dr 3               :
00152Dr 3  C6 rr        	dec sprcnt
00152Fr 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
001531r 3  60           	rts  				; no more room in table.
001532r 3               ispr3:
001532r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
001535r 3  C6 rr        	dec sprcnt			; one less space in the table.
001537r 3  D0 D0        	bne ispr2
001539r 3  60           	rts
00153Ar 3               
00153Ar 3               
00153Ar 3               ;-----------------------------------------------------------------------
00153Ar 3               ; Initialise sprites - but not player, we're keeping the old one.
00153Ar 3               ;
00153Ar 3               ; global:	-
00153Ar 3               ; local:	x,y,ix
00153Ar 3               ; calls:	cpsp
00153Ar 3               ;-----------------------------------------------------------------------
00153Ar 3               
00153Ar 3               kspr:
00153Ar 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00153Cr 3  A9 rr        	lda #<sprtab 			; sprite table.
00153Er 3  85 rr        	sta z80_x
001540r 3  A9 rr        	lda #>sprtab
001542r 3  85 rr        	sta z80_i
001544r 3               kspr2:
001544r 3  A0 00        	ldy #0
001546r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
001548r 3  C9 FF        	cmp #255 			; is it an end marker?
00154Ar 3  D0 01        	bne :+
00154Cr 3  60           	rts 				; yes, no more to do.
00154Dr 3               :
00154Dr 3  C9 00        	cmp #0
00154Fr 3  D0 0E        	bne kspr1 			; no, add to table as normal.
001551r 3               
001551r 3  18           	clc 				; next sprite.
001552r 3  A5 rr        	lda z80_l
001554r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
001556r 3  85 rr        	sta z80_l
001558r 3  90 02        	bcc :+
00155Ar 3  E6 rr        	inc z80_h
00155Cr 3               :
00155Cr 3  4C rr rr     	jmp kspr2
00155Fr 3               kspr1:
00155Fr 3  A0 00        	ldy #0 				; fetch sprite type.
001561r 3  B1 rr        	lda (z80_ix),y
001563r 3  C9 FF        	cmp #255 			; is it enabled yet?
001565r 3  D0 08        	bne kspr4 			; yes, try another slot.
001567r 3               
001567r 3  A0 05        	ldy #5 				; next type.
001569r 3  B1 rr        	lda (z80_ix),y
00156Br 3  C9 FF        	cmp #255 			; is it enabled yet?
00156Dr 3  F0 0F        	beq kspr3 			; no, process this one.
00156Fr 3               kspr4:
00156Fr 3  18           	clc 				; next sprite.
001570r 3  A5 rr        	lda z80_x
001572r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001574r 3  85 rr        	sta z80_x
001576r 3  90 02        	bcc :+
001578r 3  E6 rr        	inc z80_i
00157Ar 3               :
00157Ar 3  CA           	dex	 			; repeat for remaining sprites.
00157Br 3  D0 E2        	bne kspr1
00157Dr 3  60           	rts  				; no more room in table.
00157Er 3               kspr3:
00157Er 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
001581r 3  CA           	dex	 			; one less space in the table.
001582r 3  D0 C0        	bne kspr2
001584r 3  60           	rts
001585r 3               
001585r 3               ;----------------------------------------------
001585r 3               ; Copy sprite from list to table.
001585r 3               ;
001585r 3               ; global:	hl,ix
001585r 3               ; local:	y
001585r 3               ; calls:	evnt09
001585r 3               ;----------------------------------------------
001585r 3               
001585r 3               cpsp:
001585r 3  A0 00        	ldy #0					; fetch byte from table.
001587r 3  B1 rr        	lda (z80_hl),y
001589r 3               	; y=var_Type
001589r 3  91 rr        	sta (z80_ix),y			; set up type.
00158Br 3  A0 05        	ldy #var_newType
00158Dr 3  91 rr        	sta (z80_ix),y 			; set up type.
00158Fr 3               
00158Fr 3  E6 rr        	inc z80_l 				; move to next byte.
001591r 3  D0 02        	bne :+
001593r 3  E6 rr        	inc z80_h
001595r 3               :
001595r 3  A0 00        	ldy #0 					; fetch byte from table.
001597r 3  B1 rr        	lda (z80_hl),y
001599r 3  A0 06        	ldy #var_newImage
00159Br 3  91 rr        	sta (z80_ix),y			; set up image.
00159Dr 3               
00159Dr 3  E6 rr        	inc z80_l 				; move to next byte.
00159Fr 3  D0 02        	bne :+
0015A1r 3  E6 rr        	inc z80_h
0015A3r 3               :
0015A3r 3  A0 00        	ldy #0
0015A5r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
0015A7r 3  A0 08        	ldy #var_newY
0015A9r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0015ABr 3               
0015ABr 3  A9 C8        	lda #200 				; set initial coordinate off screen.
0015ADr 3  A0 03        	ldy #var_Y
0015AFr 3  91 rr        	sta (z80_ix),y
0015B1r 3               
0015B1r 3  E6 rr        	inc z80_l 				; move to next byte.
0015B3r 3  D0 02        	bne :+
0015B5r 3  E6 rr        	inc z80_h
0015B7r 3               :
0015B7r 3  A0 00        	ldy #0 					; fetch byte from table.
0015B9r 3  B1 rr        	lda (z80_hl),y
0015BBr 3  A0 09        	ldy #var_newX
0015BDr 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0015BFr 3               
0015BFr 3  E6 rr        	inc z80_l 				; move to next byte.
0015C1r 3  D0 02        	bne :+
0015C3r 3  E6 rr        	inc z80_h
0015C5r 3               :
0015C5r 3  A9 00        	lda #0					; zeroes in accumulator.
0015C7r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
0015C9r 3  91 rr        	sta (z80_ix),y
0015CBr 3  A0 0A        	ldy #var_Direction 		; reset direction.
0015CDr 3  91 rr        	sta (z80_ix),y
0015CFr 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
0015D1r 3  91 rr        	sta (z80_ix),y
0015D3r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
0015D5r 3  91 rr        	sta (z80_ix),y
0015D7r 3               
0015D7r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
0015D9r 3  A0 10        	ldy #var_dataHi
0015DBr 3  91 rr        	sta (z80_ix),y
0015DDr 3               evis0:
0015DDr 3  A5 rr        	lda z80_i
0015DFr 3  48           	pha
0015E0r 3  A5 rr        	lda z80_x
0015E2r 3  48           	pha
0015E3r 3  A5 rr        	lda z80_h
0015E5r 3  48           	pha
0015E6r 3  A5 rr        	lda z80_l
0015E8r 3  48           	pha
0015E9r 3               
0015E9r 3  20 rr rr     	jsr evnt09 				; perform event.
0015ECr 3               
0015ECr 3  68           	pla
0015EDr 3  85 rr        	sta z80_l
0015EFr 3  68           	pla
0015F0r 3  85 rr        	sta z80_h
0015F2r 3  68           	pla
0015F3r 3  85 rr        	sta z80_x
0015F5r 3  68           	pla
0015F6r 3  85 rr        	sta z80_i
0015F8r 3               
0015F8r 3  18           	clc
0015F9r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
0015FBr 3  69 11        	adc #TABSIZ		 	; next sprite.
0015FDr 3  85 rr        	sta z80_x
0015FFr 3  90 02        	bcc :+
001601r 3  E6 rr        	inc z80_i
001603r 3               :
001603r 3  60           	rts
001604r 3               
001604r 3               
001604r 3               ;-------------------------------------
001604r 3               ; Clear the play area window.
001604r 3               ;-------------------------------------
001604r 3               
001604r 3               clw:
001604r 3  AD rr rr     	lda wintop			; get coordinates of window.
001607r 3  85 rr        	sta dispy			; put into dispx for calculation.
001609r 3  AD rr rr     	lda winlft
00160Cr 3  85 rr        	sta dispx
00160Er 3               
00160Er 3  AD rr rr     	lda winhgt			; height of window.
001611r 3  85 rr        	sta rrow			; copy to b register.
001613r 3               clw3:
001613r 3  AD rr rr     	lda winwid 			; width of window.
001616r 3  85 rr        	sta rcol
001618r 3               clw2:
001618r 3  20 rr rr     	jsr gprad 			; get print address.
00161Br 3  A9 20        	lda #32
00161Dr 3  20 rr rr     	jsr pchar
001620r 3  E6 rr        	inc dispx			; next column.
001622r 3  C6 rr        	dec rcol			; one less to do.
001624r 3  D0 F2        	bne clw2			; repeat for remaining columns.
001626r 3               
001626r 3  AD rr rr     	lda winlft			; get left edge.
001629r 3  85 rr        	sta dispx 			; reset x.
00162Br 3  E6 rr        	inc dispy 			; next line down.
00162Dr 3               
00162Dr 3  C6 rr        	dec rrow
00162Fr 3  D0 E2        	bne clw3			; repeat down the screen.
001631r 3               
001631r 3  AD rr rr     	lda wintop			; get coordinates of window.
001634r 3  85 rr        	sta chary			; put into display position.
001636r 3  AD rr rr     	lda winlft
001639r 3  85 rr        	sta charx
00163Br 3  60           	rts
00163Cr 3               
00163Cr 3               
00163Cr 3               ;----------------------------------------------------------
00163Cr 3               ; Effects code.
00163Cr 3               ; Ticker routine is called 25 times per second.
00163Cr 3               ;
00163Cr 3               ; txtini = text scroller address
00163Cr 3               ; txtscr = left text screen address
00163Cr 3               ; txtwid = scroller width
00163Cr 3               ; txtbit = 128
00163Cr 3               ; X      = message nr
00163Cr 3               ;----------------------------------------------------------
00163Cr 3               
00163Cr 3               .if sflag
00163Cr 3               
00163Cr 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
00163Cr 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
00163Cr 3               		.byte $00,$10,$20,$30,$40,$50
00163Cr 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
00163Cr 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
00163Cr 3               		.byte $01,$01,$01,$01,$01,$01
00163Cr 3               
00163Cr 3               scrly:
00163Cr 3               
00163Cr 3               ; Set scr_l = txtscr
00163Cr 3               
00163Cr 3               	rts
00163Cr 3               	.word txtscr         	; set scr_l = left screen address.
00163Cr 3               	sta scr_l
00163Cr 3               	sta scr_r
00163Cr 3               	lda txtscr+1
00163Cr 3               	sta scr_l+1
00163Cr 3               	sta scr_r+1
00163Cr 3               
00163Cr 3               	stx xtmp		; save x
00163Cr 3               
00163Cr 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
00163Cr 3               
00163Cr 3               	ldx txtwid
00163Cr 3               	dex
00163Cr 3               	lda scrollpos_lb,x
00163Cr 3               	clc
00163Cr 3               	adc scr_r
00163Cr 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
00163Cr 3               	bcc :+
00163Cr 3               	inc scr_r+1
00163Cr 3               :
00163Cr 3               	clc
00163Cr 3               	lda scrollpos_hb,x
00163Cr 3               	adc scr_r+1
00163Cr 3               	sta scr_r+1
00163Cr 3               
00163Cr 3               ; Scroll string
00163Cr 3               
00163Cr 3               	lda #0
00163Cr 3               	sta line_cnt		; Set line counter
00163Cr 3               scrly1:
00163Cr 3               	clc
00163Cr 3               	lda scr_r
00163Cr 3               	adc line_cnt
00163Cr 3               	sta scr_tmp
00163Cr 3               	lda scr_r+1
00163Cr 3               	sta scr_tmp+1
00163Cr 3               
00163Cr 3               	ldx txtwid		; set column counter
00163Cr 3               	dex
00163Cr 3               	ldy #0
00163Cr 3               	clc			; Reset pixel to be shifted in
00163Cr 3               scrly0:
00163Cr 3               	lda (scr_tmp),y
00163Cr 3               	rol a			; Shift screenbyte
00163Cr 3               	sta (scr_tmp),y		; store screenbyte
00163Cr 3               	php			; save carry
00163Cr 3               
00163Cr 3               	sec			; subtract 16 form screenaddress
00163Cr 3               	lda scr_tmp
00163Cr 3               	sbc #$10
00163Cr 3               	sta scr_tmp
00163Cr 3               	bcs :+
00163Cr 3               	dec scr_tmp+1
00163Cr 3               :
00163Cr 3               	plp			; restore carry
00163Cr 3               	dex			; previous column
00163Cr 3               	bpl scrly0		; repeat for all columns
00163Cr 3               
00163Cr 3               	inc line_cnt		; next line
00163Cr 3               	lda line_cnt
00163Cr 3               	cmp #8
00163Cr 3               	bne scrly1		; repeat for 8 lines
00163Cr 3               
00163Cr 3               ; Get next character in string
00163Cr 3               
00163Cr 3               	lda txtpos 		; get text pointer.
00163Cr 3               	sta scr_txt
00163Cr 3               	lda txtpos+1
00163Cr 3               	sta scr_txt+1
00163Cr 3               
00163Cr 3               	ldy #0
00163Cr 3               	lda (scr_txt),y 	; find character we're displaying.
00163Cr 3               	and #127 		; remove end marker bit if applicable.
00163Cr 3               	cmp #13			; is it newline?
00163Cr 3               	bne scrly5 		; no, it's okay.
00163Cr 3               	lda #32			; convert to a space instead.
00163Cr 3               scrly5:
00163Cr 3               	sta fntaddr		; calculate char address
00163Cr 3               	lda #0
00163Cr 3               	sta fntaddr+1
00163Cr 3               	asl fntaddr  		; multiply char by 8.
00163Cr 3               	rol fntaddr+1
00163Cr 3               	asl fntaddr
00163Cr 3               	rol fntaddr+1
00163Cr 3               	asl fntaddr
00163Cr 3               	rol fntaddr+1
00163Cr 3               	lda fntaddr
00163Cr 3               	clc
00163Cr 3               	adc #<(FONT-256)
00163Cr 3               	sta scrly3+1		; that's the low byte.
00163Cr 3               	lda fntaddr+1
00163Cr 3               	adc #>(FONT-256)
00163Cr 3               	sta scrly3+2		; add displacement.
00163Cr 3               
00163Cr 3               	ldy #0
00163Cr 3               scrly3:
00163Cr 3               	lda $3333,y		; get image of char line.
00163Cr 3               	and txtbit
00163Cr 3               	beq scrly2		; don't plot pixel
00163Cr 3               	lda (scr_r),y
00163Cr 3               	clc
00163Cr 3               	ora #1
00163Cr 3               	sta (scr_r),y		; plot pixel
00163Cr 3               scrly2:
00163Cr 3               	iny			; next line of char.
00163Cr 3               	cpy #8
00163Cr 3               	bne scrly3
00163Cr 3               
00163Cr 3               	lsr txtbit		; bit of text to display.
00163Cr 3               	bcs :+
00163Cr 3               	rts
00163Cr 3               :
00163Cr 3               	ldy #0
00163Cr 3               	lda (scr_txt),y 	; what was the character?
00163Cr 3               	asl a	  		; end of message?
00163Cr 3               	bcs scrly4
00163Cr 3               	inc txtpos
00163Cr 3               	bne :+
00163Cr 3               	inc txtpos+1
00163Cr 3               :
00163Cr 3               	jmp scrly6 		; not yet - continue.
00163Cr 3               scrly4:
00163Cr 3               	lda txtini 		; start of scrolling message.
00163Cr 3               	sta txtpos
00163Cr 3               	lda txtini+1
00163Cr 3               	sta txtpos+1
00163Cr 3               scrly6:
00163Cr 3               	lda #128
00163Cr 3               	sta txtbit
00163Cr 3               	ldx xtmp
00163Cr 3               	rts
00163Cr 3               
00163Cr 3               tmp_byte:	.byte 0
00163Cr 3               line_cnt:	.byte 0
00163Cr 3               
00163Cr 3               ;-------------------------------------------------------
00163Cr 3               ; Entry TICKER command
00163Cr 3               ;
00163Cr 3               ; Entry:
00163Cr 3               ;  z80_b = message nr
00163Cr 3               ;  z80_c = width
00163Cr 3               ;-------------------------------------------------------
00163Cr 3               
00163Cr 3               iscrly:
00163Cr 3               	jsr prescr 		; set up display position.
00163Cr 3               	lda #<msgdat 		; text messages.
00163Cr 3               	sta z80_l
00163Cr 3               	lda #>msgdat
00163Cr 3               	sta z80_h
00163Cr 3               	lda z80_c 		; width.
00163Cr 3               	sec
00163Cr 3               	sbc #1			; subtract one.
00163Cr 3               	cmp #32 		; is it between 1 and 32?
00163Cr 3               	bcc :+
00163Cr 3               	lda #$60
00163Cr 3               	jmp iscrl0		; no, disable messages.
00163Cr 3               :
00163Cr 3               	ldx z80_b		; message number.
00163Cr 3               	jsr getwrd 		; find message start.
00163Cr 3               
00163Cr 3               	lda z80_l		; set initial text position.
00163Cr 3               	sta txtini
00163Cr 3               	lda z80_h
00163Cr 3               	sta txtini+1
00163Cr 3               
00163Cr 3               	lda #$ad		; code for lda adrr
00163Cr 3               iscrl0:
00163Cr 3               	sta scrly		; enable/disable scrolling routine.
00163Cr 3               
00163Cr 3               	jsr prescr 		; set up display position.
00163Cr 3               	jsr gprad 		; get print address.
00163Cr 3               
00163Cr 3               	lda scraddr 		; set text screen address.
00163Cr 3               	sta txtscr
00163Cr 3               	lda scraddr+1
00163Cr 3               	sta txtscr+1
00163Cr 3               
00163Cr 3               	lda z80_c		; width.
00163Cr 3               	sta txtwid		; set width in working storage.
00163Cr 3               
00163Cr 3               	lda #128 		; start with leftmost bit.
00163Cr 3               	sta txtbit
00163Cr 3               
00163Cr 3               	jmp scrly4
00163Cr 3               .endif
00163Cr 3               
00163Cr 3               ;------------------------------------------------------------------
00163Cr 3               ; Dig routine, conditional assembly depending on dflag
00163Cr 3               ;------------------------------------------------------------------
00163Cr 3               .if dflag
00163Cr 3               dig:
00163Cr 3               	and #3
00163Cr 3               	beq digr		; dig right
00163Cr 3               	cmp #1
00163Cr 3               	beq digl		; dig left
00163Cr 3               	cmp #2
00163Cr 3               	beq digd		; dig down
00163Cr 3               
00163Cr 3               ; Dig up.
00163Cr 3               
00163Cr 3               digu:				; dig up
00163Cr 3               	ldy #8
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	sec
00163Cr 3               	sbc #2
00163Cr 3               	sta dispy		; set y
00163Cr 3               
00163Cr 3               	iny
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	sta dispx		; set x
00163Cr 3               	jmp digv
00163Cr 3               
00163Cr 3               ; Dig down.
00163Cr 3               
00163Cr 3               digd:
00163Cr 3               	ldy #9
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	sta dispx		; set y
00163Cr 3               
00163Cr 3               	dey
00163Cr 3               	clc
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	adc #16
00163Cr 3               	sta dispy		; set y
00163Cr 3               	jmp digv
00163Cr 3               
00163Cr 3               ; Dig left.
00163Cr 3               
00163Cr 3               digl:
00163Cr 3               	ldy #8
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	sta dispy		; set y
00163Cr 3               
00163Cr 3               	iny
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	sec
00163Cr 3               	sbc #2			; x=x-2
00163Cr 3               	sta dispx		; set x
00163Cr 3               	jmp digh
00163Cr 3               
00163Cr 3               ; Dig right.
00163Cr 3               
00163Cr 3               digr:
00163Cr 3               	ldy #8
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	sta dispy		; set y
00163Cr 3               
00163Cr 3               	iny
00163Cr 3               	lda (z80_ix),y
00163Cr 3               	clc
00163Cr 3               	adc #16
00163Cr 3               	sta dispx		; set x+16
00163Cr 3               	jmp digh
00163Cr 3               
00163Cr 3               ; Vertical digging
00163Cr 3               
00163Cr 3               digv:
00163Cr 3               	jsr tstbl		; check blocktype in MAP
00163Cr 3               	jsr fdchk		; test if FODDER
00163Cr 3               
00163Cr 3               	clc
00163Cr 3               	lda dispx		; look 1 cell down
00163Cr 3               	adc #8
00163Cr 3               	sta dispx
00163Cr 3               	jsr tstbl		; check blocktype in MAP
00163Cr 3               	jsr fdchk
00163Cr 3               	lda dispx
00163Cr 3               	and #7
00163Cr 3               	bne :+
00163Cr 3               	rts
00163Cr 3               :
00163Cr 3               	clc
00163Cr 3               	lda dispx		; look 1 cell down
00163Cr 3               	adc #8
00163Cr 3               	sta dispx
00163Cr 3               	jsr tstbl		; check blocktype in MAP
00163Cr 3               	jmp fdchk
00163Cr 3               
00163Cr 3               ; Horizontal digging
00163Cr 3               
00163Cr 3               digh:
00163Cr 3               	jsr tstbl		; check blocktype in MAP
00163Cr 3               	jsr fdchk		; test if FODDER
00163Cr 3               
00163Cr 3               	clc
00163Cr 3               	lda dispy		; look 1 cell down
00163Cr 3               	adc #8
00163Cr 3               	sta dispy
00163Cr 3               	jsr tstbl		; check blocktype in MAP
00163Cr 3               	jsr fdchk
00163Cr 3               	lda dispy
00163Cr 3               	and #7
00163Cr 3               	bne :+
00163Cr 3               	rts
00163Cr 3               :
00163Cr 3               	clc
00163Cr 3               	lda dispy		; look 1 cell down
00163Cr 3               	adc #8
00163Cr 3               	sta dispy
00163Cr 3               	jsr tstbl		; check blocktype in MAP
00163Cr 3               	jmp fdchk
00163Cr 3               
00163Cr 3               digcnt:	.byte 0
00163Cr 3               
00163Cr 3               .endif
00163Cr 3               
00163Cr 3               ;------------------------------------------------------------------
00163Cr 3               ; Sprite table
00163Cr 3               ;------------------------------------------------------------------
00163Cr 3               
00163Cr 3               
00163Cr 3               ; ix+0  = type.
00163Cr 3               ; ix+1  = sprite image number.
00163Cr 3               ; ix+2  = frame.
00163Cr 3               ; ix+3  = y coord.
00163Cr 3               ; ix+4  = x coord.
00163Cr 3               
00163Cr 3               ; ix+5  = new type.
00163Cr 3               ; ix+6  = new image number.
00163Cr 3               ; ix+7  = new frame.
00163Cr 3               ; ix+8  = new y coord.
00163Cr 3               ; ix+9  = new x coord.
00163Cr 3               
00163Cr 3               ; ix+10 = direction.
00163Cr 3               ; ix+11 = parameter 1.
00163Cr 3               ; ix+12 = parameter 2.
00163Cr 3               ; ix+13 = jump pointer low.
00163Cr 3               ; ix+14 = jump pointer high.
00163Cr 3               ; ix+15 = data pointer low.
00163Cr 3               ; ix+16 = data pointer high.
00163Cr 3               
00163Cr 3               ; block NUMSPR * TABSIZ,255
00163Cr 3               
00163Cr 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001640r 3  FF FF FF FF  
001644r 3  FF FF FF FF  
001708r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00170Cr 3  FF FF FF 00  
001710r 3  C0 78 00 00  
001719r 3  07           roomtb:	.byte 7                      ; start room map offset.
00171Ar 3               
00171Ar 3               setfgcol:
00171Ar 3               setbgcol:
00171Ar 3  60           	rts
00171Br 3               
00171Br 3               ; User routine.  Put your own code in here to be called with USER instruction.
00171Br 3               ; if USER has an argument it will be passed in the accumulator.
00171Br 3               
00171Br 3               user:
00171Br 3               	.include "user.inc"
00171Br 4  60           	rts
00171Cr 4               
00171Cr 3               
00171Cr 3               ; Everything below here will be generated by the editors.
00171Cr 3               
00171Cr 3               
00171Cr 3  60                   rts
00171Dr 3               WINDOWTOP = 1
00171Dr 3               WINDOWLFT = 0
00171Dr 3               WINDOWHGT = 20
00171Dr 3               WINDOWWID = 22 ;a
00171Dr 3               MAPWID = 13
00171Dr 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
001721r 3  FF FF FF FF  
001725r 3  FF FF FF FF  
00172Ar 3               mapdat:
00172Ar 3  FF 00 01 02          .byte 255,0,1,2,3,4,5,6,7,8,9,10,255
00172Er 3  03 04 05 06  
001732r 3  07 08 09 0A  
001737r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
00173Br 3  FF FF FF FF  
00173Fr 3  FF FF FF FF  
001744r 3  01           stmap:  .byte 1
001745r 3               
001745r 3               evnt00:
001745r 3  20 rr rr             jsr lcol	; COLLISION
001748r 3  B0 03                bcs :+
00174Ar 3  4C rr rr             jmp a00026
00174Dr 3               :
00174Dr 3  A9 01                lda #1
00174Fr 3  85 rr                sta varn
001751r 3  20 rr rr     a00026: jsr skobj	; DETECTOBJECT
001754r 3  85 rr                sta varobj
001756r 3  A9 FF                lda #255
001758r 3  C5 rr                cmp varobj
00175Ar 3  D0 03                bne *+5
00175Cr 3  4C rr rr             jmp a00103
00175Fr 3  A9 01                lda #1
001761r 3  85 rr                sta vare
001763r 3  A9 01                lda #1
001765r 3  85 rr                sta chary
001767r 3  A9 05                lda #5
001769r 3  85 rr                sta charx
00176Br 3  A9 01                lda #1  	; MESSAGE
00176Dr 3  20 rr rr             jsr dmsg
001770r 3  A5 rr                lda varobj	; GET
001772r 3  20 rr rr             jsr getob
001775r 3  A9 01        a00103: lda #1
001777r 3  C5 rr                cmp varn
001779r 3  F0 03                beq *+5
00177Br 3  4C rr rr             jmp a00248
00177Er 3  A9 FF                lda #255	; REMOVE
001780r 3  A0 05                ldy #5
001782r 3  91 rr                sta (z80_ix),y
001784r 3  A9 20                lda #32	; EXPLODE
001786r 3  20 rr rr             jsr explod
001789r 3                       ; SPRITEINK command
001789r 3  A9 64                lda #100		; BEEP
00178Br 3  8D rr rr             sta sndtyp
00178Er 3  A9 FF                lda #255	; REMOVE
001790r 3  A0 05                ldy #5
001792r 3  91 rr                sta (z80_ix),y
001794r 3  A9 0A                lda #10 	; REPEAT
001796r 3  85 rr                sta loopa
001798r 3  A9 0A        a00192: lda #10		; BEEP
00179Ar 3  8D rr rr             sta sndtyp
00179Dr 3  A9 06                lda #6 	; DELAY
00179Fr 3  20 rr rr             jsr delay
0017A2r 3  C6 rr                dec loopa	; ENDREPEAT
0017A4r 3  F0 03                beq :+
0017A6r 3  4C rr rr             jmp a00192
0017A9r 3               :
0017A9r 3  A9 00                lda #0
0017ABr 3  85 rr                sta varn
0017ADr 3  A9 01                lda #1 		; KILL
0017AFr 3  85 rr                sta deadf
0017B1r 3  A9 00        a00248: lda #0
0017B3r 3  C5 rr                cmp varn
0017B5r 3  F0 03                beq *+5
0017B7r 3  4C rr rr             jmp a01857
0017BAr 3  A9 00                lda #0
0017BCr 3  C5 rr                cmp vare
0017BEr 3  F0 03                beq *+5
0017C0r 3  4C rr rr             jmp a01752
0017C3r 3  A9 00                lda #0
0017C5r 3  85 rr                sta varf
0017C7r 3  A9 00                lda #0
0017C9r 3  C5 rr                cmp vara
0017CBr 3  F0 03                beq *+5
0017CDr 3  4C rr rr             jmp a00676
0017D0r 3  A9 00                lda #0
0017D2r 3  C5 rr                cmp vard
0017D4r 3  F0 03                beq *+5
0017D6r 3  4C rr rr             jmp a00676
0017D9r 3  A9 06                lda #CUSTOM	; CUSTOM
0017DBr 3  85 rr                sta z80_b
0017DDr 3  20 rr rr             jsr tded
0017E0r 3  C5 rr                cmp z80_b
0017E2r 3  F0 03                beq :+
0017E4r 3  4C rr rr             jmp a00415
0017E7r 3               :
0017E7r 3  A9 08                lda #8
0017E9r 3  C5 rr                cmp scno
0017EBr 3  B0 03                bcs *+5
0017EDr 3  4C rr rr             jmp a00382
0017F0r 3  A9 04                lda #4
0017F2r 3  85 rr                sta vara
0017F4r 3  4C rr rr             jmp a00390
0017F7r 3  A9 05        a00382: lda #5
0017F9r 3  85 rr                sta vara
0017FBr 3  A9 0E        a00390: lda #14
0017FDr 3  C5 rr                cmp scno
0017FFr 3  90 03                bcc *+5
001801r 3  4C rr rr             jmp a00415
001804r 3  A9 04                lda #4
001806r 3  85 rr                sta vara
001808r 3  A5 rr        a00415: lda joyval	; KEY
00180Ar 3  29 01                and #1
00180Cr 3  F0 03                beq :+
00180Er 3  4C rr rr             jmp a00545
001811r 3               :
001811r 3  20 rr rr             jsr cangr	; CANGORIGHT
001814r 3  F0 03                beq :+
001816r 3  4C rr rr             jmp a00545
001819r 3               :
001819r 3  A9 01                lda #1
00181Br 3  85 rr                sta varf
00181Dr 3  A0 09                ldy #9 		; SPRITERIGHT
00181Fr 3  B1 rr                lda (z80_ix),y
001821r 3  18                   clc
001822r 3  69 02                adc #2
001824r 3  91 rr                sta (z80_ix),y
001826r 3  A9 00                lda #0
001828r 3  C5 rr                cmp varc
00182Ar 3  F0 03                beq *+5
00182Cr 3  4C rr rr             jmp a00545
00182Fr 3  A9 00                lda #0		; ANIMATE
001831r 3  20 rr rr             jsr animsp
001834r 3  A9 00                lda #0
001836r 3  A0 07                ldy #7
001838r 3  D1 rr                cmp (z80_ix),y
00183Ar 3  F0 03                beq *+5
00183Cr 3  4C rr rr             jmp a00545
00183Fr 3  A9 05                lda #5		; BEEP
001841r 3  8D rr rr             sta sndtyp
001844r 3  A5 rr        a00545: lda joyval	; KEY
001846r 3  29 02                and #2
001848r 3  F0 03                beq :+
00184Ar 3  4C rr rr             jmp a00676
00184Dr 3               :
00184Dr 3  20 rr rr             jsr cangl	; CANGOLEFT
001850r 3  F0 03                beq :+
001852r 3  4C rr rr             jmp a00676
001855r 3               :
001855r 3  A9 01                lda #1
001857r 3  85 rr                sta varf
001859r 3  A0 09                ldy #9 		; SPRITELEFT
00185Br 3  B1 rr                lda (z80_ix),y
00185Dr 3  38                   sec
00185Er 3  E9 02                sbc #2
001860r 3  91 rr                sta (z80_ix),y
001862r 3  A9 00                lda #0
001864r 3  C5 rr                cmp varc
001866r 3  F0 03                beq *+5
001868r 3  4C rr rr             jmp a00644
00186Br 3  A9 00                lda #0		; ANIMATEBACK
00186Dr 3  20 rr rr             jsr animbk
001870r 3  A9 00        a00644: lda #0
001872r 3  A0 07                ldy #7
001874r 3  D1 rr                cmp (z80_ix),y
001876r 3  F0 03                beq *+5
001878r 3  4C rr rr             jmp a00676
00187Br 3  A9 05                lda #5		; BEEP
00187Dr 3  8D rr rr             sta sndtyp
001880r 3  A9 00        a00676: lda #0
001882r 3  C5 rr                cmp varf
001884r 3  F0 03                beq *+5
001886r 3  4C rr rr             jmp a00706
001889r 3  A9 00                lda #0
00188Br 3  A0 07                ldy #7
00188Dr 3  91 rr                sta (z80_ix),y
00188Fr 3  A5 rr        a00706: lda joyval	; KEY
001891r 3  29 08                and #8
001893r 3  F0 03                beq :+
001895r 3  4C rr rr             jmp a00874
001898r 3               :
001898r 3  A9 00                lda #0
00189Ar 3  C5 rr                cmp varg
00189Cr 3  F0 03                beq *+5
00189Er 3  4C rr rr             jmp a00874
0018A1r 3  A9 48                lda #72
0018A3r 3  A0 08                ldy #8
0018A5r 3  D1 rr                cmp (z80_ix),y
0018A7r 3  F0 03                beq *+5
0018A9r 3  4C rr rr             jmp a00783
0018ACr 3  A9 46                lda #70		; BEEP
0018AEr 3  8D rr rr             sta sndtyp
0018B1r 3  A9 01                lda #1
0018B3r 3  85 rr                sta vara
0018B5r 3  A9 70        a00783: lda #112
0018B7r 3  A0 08                ldy #8
0018B9r 3  D1 rr                cmp (z80_ix),y
0018BBr 3  F0 03                beq *+5
0018BDr 3  4C rr rr             jmp a00824
0018C0r 3  A9 46                lda #70		; BEEP
0018C2r 3  8D rr rr             sta sndtyp
0018C5r 3  A9 02                lda #2
0018C7r 3  85 rr                sta vara
0018C9r 3  A9 90        a00824: lda #144
0018CBr 3  A0 08                ldy #8
0018CDr 3  D1 rr                cmp (z80_ix),y
0018CFr 3  F0 03                beq *+5
0018D1r 3  4C rr rr             jmp a00865
0018D4r 3  A9 46                lda #70		; BEEP
0018D6r 3  8D rr rr             sta sndtyp
0018D9r 3  A9 03                lda #3
0018DBr 3  85 rr                sta vara
0018DDr 3  A9 0A        a00865: lda #10
0018DFr 3  85 rr                sta varg
0018E1r 3  A9 01        a00874: lda #1
0018E3r 3  C5 rr                cmp vara
0018E5r 3  F0 03                beq *+5
0018E7r 3  4C rr rr             jmp a01059
0018EAr 3  A0 08                ldy #8 		; SPRITEUP
0018ECr 3  B1 rr                lda (z80_ix),y
0018EEr 3  38                   sec
0018EFr 3  E9 02                sbc #2
0018F1r 3  91 rr                sta (z80_ix),y
0018F3r 3  A0 08                ldy #8 		; SPRITEUP
0018F5r 3  B1 rr                lda (z80_ix),y
0018F7r 3  38                   sec
0018F8r 3  E9 02                sbc #2
0018FAr 3  91 rr                sta (z80_ix),y
0018FCr 3  A0 08                ldy #8 		; SPRITEUP
0018FEr 3  B1 rr                lda (z80_ix),y
001900r 3  38                   sec
001901r 3  E9 02                sbc #2
001903r 3  91 rr                sta (z80_ix),y
001905r 3  A0 08                ldy #8 		; SPRITEUP
001907r 3  B1 rr                lda (z80_ix),y
001909r 3  38                   sec
00190Ar 3  E9 02                sbc #2
00190Cr 3  91 rr                sta (z80_ix),y
00190Er 3  A9 05                lda #DEADLY	; DEADLY
001910r 3  85 rr                sta z80_b
001912r 3  20 rr rr             jsr tded
001915r 3  C5 rr                cmp z80_b
001917r 3  F0 03                beq :+
001919r 3  4C rr rr             jmp a01029
00191Cr 3               :
00191Cr 3  A9 01                lda #1
00191Er 3  85 rr                sta varn
001920r 3  A9 24        a01029: lda #36
001922r 3  A0 08                ldy #8
001924r 3  D1 rr                cmp (z80_ix),y
001926r 3  B0 03                bcs *+5
001928r 3  4C rr rr             jmp a01059
00192Br 3  A9 00                lda #0
00192Dr 3  85 rr                sta vara
00192Fr 3  A9 02        a01059: lda #2
001931r 3  C5 rr                cmp vara
001933r 3  F0 03                beq *+5
001935r 3  4C rr rr             jmp a01245
001938r 3  A0 08                ldy #8 		; SPRITEUP
00193Ar 3  B1 rr                lda (z80_ix),y
00193Cr 3  38                   sec
00193Dr 3  E9 02                sbc #2
00193Fr 3  91 rr                sta (z80_ix),y
001941r 3  A0 08                ldy #8 		; SPRITEUP
001943r 3  B1 rr                lda (z80_ix),y
001945r 3  38                   sec
001946r 3  E9 02                sbc #2
001948r 3  91 rr                sta (z80_ix),y
00194Ar 3  A0 08                ldy #8 		; SPRITEUP
00194Cr 3  B1 rr                lda (z80_ix),y
00194Er 3  38                   sec
00194Fr 3  E9 02                sbc #2
001951r 3  91 rr                sta (z80_ix),y
001953r 3  A0 08                ldy #8 		; SPRITEUP
001955r 3  B1 rr                lda (z80_ix),y
001957r 3  38                   sec
001958r 3  E9 02                sbc #2
00195Ar 3  91 rr                sta (z80_ix),y
00195Cr 3  A9 05                lda #DEADLY	; DEADLY
00195Er 3  85 rr                sta z80_b
001960r 3  20 rr rr             jsr tded
001963r 3  C5 rr                cmp z80_b
001965r 3  F0 03                beq :+
001967r 3  4C rr rr             jmp a01214
00196Ar 3               :
00196Ar 3  A9 01                lda #1
00196Cr 3  85 rr                sta varn
00196Er 3  A9 4C        a01214: lda #76
001970r 3  A0 08                ldy #8
001972r 3  D1 rr                cmp (z80_ix),y
001974r 3  B0 03                bcs *+5
001976r 3  4C rr rr             jmp a01245
001979r 3  A9 00                lda #0
00197Br 3  85 rr                sta vara
00197Dr 3  A9 03        a01245: lda #3
00197Fr 3  C5 rr                cmp vara
001981r 3  F0 03                beq *+5
001983r 3  4C rr rr             jmp a01430
001986r 3  A0 08                ldy #8 		; SPRITEUP
001988r 3  B1 rr                lda (z80_ix),y
00198Ar 3  38                   sec
00198Br 3  E9 02                sbc #2
00198Dr 3  91 rr                sta (z80_ix),y
00198Fr 3  A0 08                ldy #8 		; SPRITEUP
001991r 3  B1 rr                lda (z80_ix),y
001993r 3  38                   sec
001994r 3  E9 02                sbc #2
001996r 3  91 rr                sta (z80_ix),y
001998r 3  A0 08                ldy #8 		; SPRITEUP
00199Ar 3  B1 rr                lda (z80_ix),y
00199Cr 3  38                   sec
00199Dr 3  E9 02                sbc #2
00199Fr 3  91 rr                sta (z80_ix),y
0019A1r 3  A0 08                ldy #8 		; SPRITEUP
0019A3r 3  B1 rr                lda (z80_ix),y
0019A5r 3  38                   sec
0019A6r 3  E9 02                sbc #2
0019A8r 3  91 rr                sta (z80_ix),y
0019AAr 3  A9 05                lda #DEADLY	; DEADLY
0019ACr 3  85 rr                sta z80_b
0019AEr 3  20 rr rr             jsr tded
0019B1r 3  C5 rr                cmp z80_b
0019B3r 3  F0 03                beq :+
0019B5r 3  4C rr rr             jmp a01400
0019B8r 3               :
0019B8r 3  A9 01                lda #1
0019BAr 3  85 rr                sta varn
0019BCr 3  A9 6E        a01400: lda #110
0019BEr 3  A0 08                ldy #8
0019C0r 3  D1 rr                cmp (z80_ix),y
0019C2r 3  B0 03                bcs *+5
0019C4r 3  4C rr rr             jmp a01430
0019C7r 3  A9 00                lda #0
0019C9r 3  85 rr                sta vara
0019CBr 3  A9 04        a01430: lda #4
0019CDr 3  C5 rr                cmp vara
0019CFr 3  F0 03                beq *+5
0019D1r 3  4C rr rr             jmp a01557
0019D4r 3  A9 06                lda #CUSTOM	; CUSTOM
0019D6r 3  85 rr                sta z80_b
0019D8r 3  20 rr rr             jsr tded
0019DBr 3  C5 rr                cmp z80_b
0019DDr 3  F0 03                beq :+
0019DFr 3  4C rr rr             jmp a01481
0019E2r 3               :
0019E2r 3  4C rr rr             jmp a01489
0019E5r 3  A9 00        a01481: lda #0
0019E7r 3  85 rr                sta vara
0019E9r 3  20 rr rr     a01489: jsr cangr	; CANGORIGHT
0019ECr 3  F0 03                beq :+
0019EEr 3  4C rr rr             jmp a01532
0019F1r 3               :
0019F1r 3  A0 09                ldy #9 		; SPRITERIGHT
0019F3r 3  B1 rr                lda (z80_ix),y
0019F5r 3  18                   clc
0019F6r 3  69 02                adc #2
0019F8r 3  91 rr                sta (z80_ix),y
0019FAr 3  20 rr rr     a01532: jsr cangd	; CANGODOWN
0019FDr 3  F0 03                beq :+
0019FFr 3  4C rr rr             jmp a01557
001A02r 3               :
001A02r 3  A9 00                lda #0
001A04r 3  85 rr                sta vara
001A06r 3  A9 05        a01557: lda #5
001A08r 3  C5 rr                cmp vara
001A0Ar 3  F0 03                beq *+5
001A0Cr 3  4C rr rr             jmp a01658
001A0Fr 3  A9 06                lda #CUSTOM	; CUSTOM
001A11r 3  85 rr                sta z80_b
001A13r 3  20 rr rr             jsr tded
001A16r 3  C5 rr                cmp z80_b
001A18r 3  F0 03                beq :+
001A1Ar 3  4C rr rr             jmp a01608
001A1Dr 3               :
001A1Dr 3  4C rr rr             jmp a01616
001A20r 3  A9 00        a01608: lda #0
001A22r 3  85 rr                sta vara
001A24r 3  20 rr rr     a01616: jsr cangl	; CANGOLEFT
001A27r 3  F0 03                beq :+
001A29r 3  4C rr rr             jmp a01658
001A2Cr 3               :
001A2Cr 3  A0 09                ldy #9 		; SPRITELEFT
001A2Er 3  B1 rr                lda (z80_ix),y
001A30r 3  38                   sec
001A31r 3  E9 02                sbc #2
001A33r 3  91 rr                sta (z80_ix),y
001A35r 3  20 rr rr     a01658: jsr cangd	; CANGODOWN
001A38r 3  F0 03                beq :+
001A3Ar 3  4C rr rr             jmp a01711
001A3Dr 3               :
001A3Dr 3  A9 00                lda #0
001A3Fr 3  C5 rr                cmp vara
001A41r 3  F0 03                beq *+5
001A43r 3  4C rr rr             jmp a01707
001A46r 3  20 rr rr             jsr ifall	; TABLEFALL
001A49r 3  A9 01                lda #1
001A4Br 3  85 rr                sta vard
001A4Dr 3  4C rr rr     a01707: jmp a01747
001A50r 3  A9 01        a01711: lda #1
001A52r 3  C5 rr                cmp vard
001A54r 3  F0 03                beq *+5
001A56r 3  4C rr rr             jmp a01739
001A59r 3  A9 14                lda #20		; BEEP
001A5Br 3  8D rr rr             sta sndtyp
001A5Er 3  A9 00        a01739: lda #0
001A60r 3  85 rr                sta vard
001A62r 3  4C rr rr     a01747: jmp a01857
001A65r 3  A5 rr        a01752: lda vare
001A67r 3  18                   clc
001A68r 3  69 01                adc #1
001A6Ar 3  85 rr                sta vare
001A6Cr 3  A9 64                lda #100
001A6Er 3  C5 rr                cmp vare
001A70r 3  F0 03                beq *+5
001A72r 3  4C rr rr             jmp a01836
001A75r 3  A9 00                lda #0
001A77r 3  85 rr                sta vare
001A79r 3  A5 rr                lda varl
001A7Br 3  18                   clc
001A7Cr 3  69 01                adc #1
001A7Er 3  85 rr                sta varl
001A80r 3  A9 01                lda #1	; NEXTLEVEL
001A82r 3  85 rr                sta nexlev
001A84r 3  20 rr rr             jsr dispdown		; DISPLAYDOWN
001A87r 3  A9 01                lda #1
001A89r 3  85 rr                sta varz
001A8Br 3  A5 rr        a01836: lda vare	; BEEP
001A8Dr 3  29 7F                and #127
001A8Fr 3  8D rr rr             sta sndtyp
001A92r 3                       ; SILENCE command
001A92r 3  4C rr rr     a01857: jmp grav
001A95r 3               evnt01:
001A95r 3  A9 00                lda #0
001A97r 3  C5 rr                cmp varn
001A99r 3  F0 03                beq *+5
001A9Br 3  4C rr rr             jmp b00257
001A9Er 3  20 rr rr             jsr cangd	; CANGODOWN
001AA1r 3  F0 03                beq :+
001AA3r 3  4C rr rr             jmp b00047
001AA6r 3               :
001AA6r 3  20 rr rr             jsr ifall	; TABLEFALL
001AA9r 3  4C rr rr             jmp b00196
001AACr 3  A9 00        b00047: lda #0
001AAEr 3  A0 0B                ldy #11
001AB0r 3  D1 rr                cmp (z80_ix),y
001AB2r 3  F0 03                beq *+5
001AB4r 3  4C rr rr             jmp b00135
001AB7r 3  20 rr rr             jsr cangl	; CANGOLEFT
001ABAr 3  F0 03                beq :+
001ABCr 3  4C rr rr             jmp b00116
001ABFr 3               :
001ABFr 3  A0 09                ldy #9 		; SPRITELEFT
001AC1r 3  B1 rr                lda (z80_ix),y
001AC3r 3  38                   sec
001AC4r 3  E9 02                sbc #2
001AC6r 3  91 rr                sta (z80_ix),y
001AC8r 3  4C rr rr             jmp b00130
001ACBr 3  A9 01        b00116: lda #1
001ACDr 3  A0 0B                ldy #11
001ACFr 3  91 rr                sta (z80_ix),y
001AD1r 3  4C rr rr     b00130: jmp b00196
001AD4r 3  20 rr rr     b00135: jsr cangr	; CANGORIGHT
001AD7r 3  F0 03                beq :+
001AD9r 3  4C rr rr             jmp b00182
001ADCr 3               :
001ADCr 3  A0 09                ldy #9 		; SPRITERIGHT
001ADEr 3  B1 rr                lda (z80_ix),y
001AE0r 3  18                   clc
001AE1r 3  69 02                adc #2
001AE3r 3  91 rr                sta (z80_ix),y
001AE5r 3  4C rr rr             jmp b00196
001AE8r 3  A9 00        b00182: lda #0
001AEAr 3  A0 0B                ldy #11
001AECr 3  91 rr                sta (z80_ix),y
001AEEr 3  A9 00        b00196: lda #0
001AF0r 3  C5 rr                cmp varc
001AF2r 3  F0 03                beq *+5
001AF4r 3  4C rr rr             jmp b00224
001AF7r 3  A9 00                lda #0		; ANIMATE
001AF9r 3  20 rr rr             jsr animsp
001AFCr 3  A9 00        b00224: lda #0 	; COLLISION
001AFEr 3  85 rr                sta z80_b
001B00r 3  20 rr rr             jsr sktyp
001B03r 3  B0 03                bcs :+
001B05r 3  4C rr rr             jmp b00257
001B08r 3               :
001B08r 3  A9 01                lda #1
001B0Ar 3  85 rr                sta varn
001B0Cr 3  4C rr rr     b00257: jmp grav
001B0Fr 3               evnt02:
001B0Fr 3  A9 00                lda #0
001B11r 3  C5 rr                cmp varn
001B13r 3  F0 03                beq *+5
001B15r 3  4C rr rr             jmp c00295
001B18r 3  20 rr rr             jsr lcol	; COLLISION
001B1Br 3  B0 03                bcs :+
001B1Dr 3  4C rr rr             jmp c00086
001B20r 3               :
001B20r 3  A9 04                lda #4	; EXPLODE
001B22r 3  20 rr rr             jsr explod
001B25r 3  A9 00                lda #0;		SOUND command
001B27r 3  20 rr rr             jsr playsound
001B2Ar 3  A9 64                lda #100		; BEEP
001B2Cr 3  8D rr rr             sta sndtyp
001B2Fr 3  A9 FF                lda #255	; REMOVE
001B31r 3  A0 05                ldy #5
001B33r 3  91 rr                sta (z80_ix),y
001B35r 3  A9 00        c00086: lda #0
001B37r 3  A0 0B                ldy #11
001B39r 3  D1 rr                cmp (z80_ix),y
001B3Br 3  F0 03                beq *+5
001B3Dr 3  4C rr rr             jmp c00173
001B40r 3  20 rr rr             jsr cangl	; CANGOLEFT
001B43r 3  F0 03                beq :+
001B45r 3  4C rr rr             jmp c00155
001B48r 3               :
001B48r 3  A0 09                ldy #9 		; SPRITELEFT
001B4Ar 3  B1 rr                lda (z80_ix),y
001B4Cr 3  38                   sec
001B4Dr 3  E9 02                sbc #2
001B4Fr 3  91 rr                sta (z80_ix),y
001B51r 3  4C rr rr             jmp c00169
001B54r 3  A9 01        c00155: lda #1
001B56r 3  A0 0B                ldy #11
001B58r 3  91 rr                sta (z80_ix),y
001B5Ar 3  4C rr rr     c00169: jmp c00234
001B5Dr 3  20 rr rr     c00173: jsr cangr	; CANGORIGHT
001B60r 3  F0 03                beq :+
001B62r 3  4C rr rr             jmp c00221
001B65r 3               :
001B65r 3  A0 09                ldy #9 		; SPRITERIGHT
001B67r 3  B1 rr                lda (z80_ix),y
001B69r 3  18                   clc
001B6Ar 3  69 02                adc #2
001B6Cr 3  91 rr                sta (z80_ix),y
001B6Er 3  4C rr rr             jmp c00234
001B71r 3  A9 00        c00221: lda #0
001B73r 3  A0 0B                ldy #11
001B75r 3  91 rr                sta (z80_ix),y
001B77r 3  A9 00        c00234: lda #0
001B79r 3  C5 rr                cmp varc
001B7Br 3  F0 03                beq *+5
001B7Dr 3  4C rr rr             jmp c00262
001B80r 3  A9 00                lda #0		; ANIMATE
001B82r 3  20 rr rr             jsr animsp
001B85r 3  A9 00        c00262: lda #0 	; COLLISION
001B87r 3  85 rr                sta z80_b
001B89r 3  20 rr rr             jsr sktyp
001B8Cr 3  B0 03                bcs :+
001B8Er 3  4C rr rr             jmp c00295
001B91r 3               :
001B91r 3  A9 01                lda #1
001B93r 3  85 rr                sta varn
001B95r 3  60           c00295: rts
001B96r 3               evnt03:
001B96r 3  A9 00                lda #0
001B98r 3  C5 rr                cmp varn
001B9Ar 3  F0 03                beq *+5
001B9Cr 3  4C rr rr             jmp d00226
001B9Fr 3  A9 00                lda #0
001BA1r 3  A0 0B                ldy #11
001BA3r 3  D1 rr                cmp (z80_ix),y
001BA5r 3  F0 03                beq *+5
001BA7r 3  4C rr rr             jmp d00105
001BAAr 3  20 rr rr             jsr cangu	; CANGOUP
001BADr 3  F0 03                beq :+
001BAFr 3  4C rr rr             jmp d00087
001BB2r 3               :
001BB2r 3  A0 08                ldy #8 		; SPRITEUP
001BB4r 3  B1 rr                lda (z80_ix),y
001BB6r 3  38                   sec
001BB7r 3  E9 02                sbc #2
001BB9r 3  91 rr                sta (z80_ix),y
001BBBr 3  4C rr rr             jmp d00100
001BBEr 3  A9 01        d00087: lda #1
001BC0r 3  A0 0B                ldy #11
001BC2r 3  91 rr                sta (z80_ix),y
001BC4r 3  4C rr rr     d00100: jmp d00165
001BC7r 3  20 rr rr     d00105: jsr cangd	; CANGODOWN
001BCAr 3  F0 03                beq :+
001BCCr 3  4C rr rr             jmp d00152
001BCFr 3               :
001BCFr 3  A0 08                ldy #8 		; SPRITEDOWN
001BD1r 3  B1 rr                lda (z80_ix),y
001BD3r 3  18                   clc
001BD4r 3  69 02                adc #2
001BD6r 3  91 rr                sta (z80_ix),y
001BD8r 3  4C rr rr             jmp d00165
001BDBr 3  A9 00        d00152: lda #0
001BDDr 3  A0 0B                ldy #11
001BDFr 3  91 rr                sta (z80_ix),y
001BE1r 3  A9 00        d00165: lda #0
001BE3r 3  C5 rr                cmp varc
001BE5r 3  F0 03                beq *+5
001BE7r 3  4C rr rr             jmp d00193
001BEAr 3  A9 00                lda #0		; ANIMATE
001BECr 3  20 rr rr             jsr animsp
001BEFr 3  A9 00        d00193: lda #0 	; COLLISION
001BF1r 3  85 rr                sta z80_b
001BF3r 3  20 rr rr             jsr sktyp
001BF6r 3  B0 03                bcs :+
001BF8r 3  4C rr rr             jmp d00226
001BFBr 3               :
001BFBr 3  A9 01                lda #1
001BFDr 3  85 rr                sta varn
001BFFr 3  60           d00226: rts
001C00r 3               evnt04:
001C00r 3  A9 00                lda #0
001C02r 3  C5 rr                cmp varn
001C04r 3  F0 03                beq *+5
001C06r 3  4C rr rr             jmp e00361
001C09r 3  A9 00                lda #0
001C0Br 3  A0 0B                ldy #11
001C0Dr 3  D1 rr                cmp (z80_ix),y
001C0Fr 3  F0 03                beq *+5
001C11r 3  4C rr rr             jmp e00106
001C14r 3  20 rr rr             jsr cangl	; CANGOLEFT
001C17r 3  F0 03                beq :+
001C19r 3  4C rr rr             jmp e00088
001C1Cr 3               :
001C1Cr 3  A0 09                ldy #9 		; SPRITELEFT
001C1Er 3  B1 rr                lda (z80_ix),y
001C20r 3  38                   sec
001C21r 3  E9 02                sbc #2
001C23r 3  91 rr                sta (z80_ix),y
001C25r 3  4C rr rr             jmp e00101
001C28r 3  A9 01        e00088: lda #1
001C2Ar 3  A0 0B                ldy #11
001C2Cr 3  91 rr                sta (z80_ix),y
001C2Er 3  4C rr rr     e00101: jmp e00167
001C31r 3  20 rr rr     e00106: jsr cangr	; CANGORIGHT
001C34r 3  F0 03                beq :+
001C36r 3  4C rr rr             jmp e00153
001C39r 3               :
001C39r 3  A0 09                ldy #9 		; SPRITERIGHT
001C3Br 3  B1 rr                lda (z80_ix),y
001C3Dr 3  18                   clc
001C3Er 3  69 02                adc #2
001C40r 3  91 rr                sta (z80_ix),y
001C42r 3  4C rr rr             jmp e00167
001C45r 3  A9 00        e00153: lda #0
001C47r 3  A0 0B                ldy #11
001C49r 3  91 rr                sta (z80_ix),y
001C4Br 3  A9 00        e00167: lda #0
001C4Dr 3  A0 0A                ldy #10
001C4Fr 3  D1 rr                cmp (z80_ix),y
001C51r 3  F0 03                beq *+5
001C53r 3  4C rr rr             jmp e00253
001C56r 3  20 rr rr             jsr cangu	; CANGOUP
001C59r 3  F0 03                beq :+
001C5Br 3  4C rr rr             jmp e00235
001C5Er 3               :
001C5Er 3  A0 08                ldy #8 		; SPRITEUP
001C60r 3  B1 rr                lda (z80_ix),y
001C62r 3  38                   sec
001C63r 3  E9 02                sbc #2
001C65r 3  91 rr                sta (z80_ix),y
001C67r 3  4C rr rr             jmp e00249
001C6Ar 3  A9 01        e00235: lda #1
001C6Cr 3  A0 0A                ldy #10
001C6Er 3  91 rr                sta (z80_ix),y
001C70r 3  4C rr rr     e00249: jmp e00314
001C73r 3  20 rr rr     e00253: jsr cangd	; CANGODOWN
001C76r 3  F0 03                beq :+
001C78r 3  4C rr rr             jmp e00300
001C7Br 3               :
001C7Br 3  A0 08                ldy #8 		; SPRITEDOWN
001C7Dr 3  B1 rr                lda (z80_ix),y
001C7Fr 3  18                   clc
001C80r 3  69 02                adc #2
001C82r 3  91 rr                sta (z80_ix),y
001C84r 3  4C rr rr             jmp e00314
001C87r 3  A9 00        e00300: lda #0
001C89r 3  A0 0A                ldy #10
001C8Br 3  91 rr                sta (z80_ix),y
001C8Dr 3  A9 00        e00314: lda #0		; ANIMATE
001C8Fr 3  20 rr rr             jsr animsp
001C92r 3  A9 00                lda #0 	; COLLISION
001C94r 3  85 rr                sta z80_b
001C96r 3  20 rr rr             jsr sktyp
001C99r 3  B0 03                bcs :+
001C9Br 3  4C rr rr             jmp e00361
001C9Er 3               :
001C9Er 3  A9 01                lda #1 		; KILL
001CA0r 3  85 rr                sta deadf
001CA2r 3  60           e00361: rts
001CA3r 3               evnt05:
001CA3r 3  A9 00                lda #0
001CA5r 3  C5 rr                cmp varn
001CA7r 3  F0 03                beq *+5
001CA9r 3  4C rr rr             jmp f00073
001CACr 3  A9 00                lda #0
001CAEr 3  C5 rr                cmp vare
001CB0r 3  F0 03                beq *+5
001CB2r 3  4C rr rr             jmp f00073
001CB5r 3  A9 00                lda #0
001CB7r 3  C5 rr                cmp varm
001CB9r 3  F0 03                beq *+5
001CBBr 3  4C rr rr             jmp f00073
001CBEr 3  A9 00                lda #0	; LASER
001CC0r 3  20 rr rr             jsr shoot
001CC3r 3  A9 1E                lda #30		; BEEP
001CC5r 3  8D rr rr             sta sndtyp
001CC8r 3  60           f00073: rts
001CC9r 3               evnt06:
001CC9r 3  60                   rts
001CCAr 3               evnt07:
001CCAr 3  A9 01                lda #1
001CCCr 3  C5 rr                cmp vari
001CCEr 3  F0 03                beq *+5
001CD0r 3  4C rr rr             jmp h00058
001CD3r 3  A9 3C                lda #60		; BEEP
001CD5r 3  8D rr rr             sta sndtyp
001CD8r 3  A9 01                lda #1	; LASER
001CDAr 3  20 rr rr             jsr shoot
001CDDr 3  A9 00                lda #0	; LASER
001CDFr 3  20 rr rr             jsr shoot
001CE2r 3  A9 00                lda #0
001CE4r 3  85 rr                sta vari
001CE6r 3  60           h00058: rts
001CE7r 3               evnt08:
001CE7r 3  A9 00                lda #0 	; COLLISION
001CE9r 3  85 rr                sta z80_b
001CEBr 3  20 rr rr             jsr sktyp
001CEEr 3  B0 03                bcs :+
001CF0r 3  4C rr rr             jmp i00712
001CF3r 3               :
001CF3r 3  A9 00                lda #0
001CF5r 3  C5 rr                cmp varh
001CF7r 3  F0 03                beq *+5
001CF9r 3  4C rr rr             jmp i00712
001CFCr 3  A9 00                lda #0
001CFEr 3  C5 rr                cmp varb
001D00r 3  F0 03                beq *+5
001D02r 3  4C rr rr             jmp i00073
001D05r 3  A9 01                lda #1
001D07r 3  85 rr                sta varb
001D09r 3  4C rr rr             jmp i00081
001D0Cr 3  A9 00        i00073: lda #0
001D0Er 3  85 rr                sta varb
001D10r 3  A9 32        i00081: lda #50
001D12r 3  85 rr                sta varh
001D14r 3  A5 rr                lda varb
001D16r 3  A0 07                ldy #7
001D18r 3  91 rr                sta (z80_ix),y
001D1Ar 3  A9 37                lda #55		; BEEP
001D1Cr 3  8D rr rr             sta sndtyp
001D1Fr 3  A9 05                lda #5
001D21r 3  C5 rr                cmp scno
001D23r 3  F0 03                beq *+5
001D25r 3  4C rr rr             jmp i00254
001D28r 3  A9 06                lda #6
001D2Ar 3  85 rr                sta chary
001D2Cr 3  A9 08                lda #8
001D2Er 3  85 rr                sta charx
001D30r 3  A9 01                lda #1
001D32r 3  C5 rr                cmp varb
001D34r 3  F0 03                beq *+5
001D36r 3  4C rr rr             jmp i00180
001D39r 3  A9 01                lda #1 		; PUTBLOCK
001D3Br 3  20 rr rr             jsr pbpattr
001D3Er 3  4C rr rr             jmp i00192
001D41r 3  A9 03        i00180: lda #3 		; PUTBLOCK
001D43r 3  20 rr rr             jsr pbpattr
001D46r 3  A9 06        i00192: lda #6
001D48r 3  85 rr                sta chary
001D4Ar 3  A9 09                lda #9
001D4Cr 3  85 rr                sta charx
001D4Er 3  A9 01                lda #1
001D50r 3  C5 rr                cmp varb
001D52r 3  F0 03                beq *+5
001D54r 3  4C rr rr             jmp i00242
001D57r 3  A9 01                lda #1 		; PUTBLOCK
001D59r 3  20 rr rr             jsr pbpattr
001D5Cr 3  4C rr rr             jmp i00254
001D5Fr 3  A9 03        i00242: lda #3 		; PUTBLOCK
001D61r 3  20 rr rr             jsr pbpattr
001D64r 3  A9 06        i00254: lda #6
001D66r 3  C5 rr                cmp scno
001D68r 3  F0 03                beq *+5
001D6Ar 3  4C rr rr             jmp i00329
001D6Dr 3  A9 10                lda #16
001D6Fr 3  85 rr                sta chary
001D71r 3  A9 13                lda #19
001D73r 3  85 rr                sta charx
001D75r 3  A9 00                lda #0 		; PUTBLOCK
001D77r 3  20 rr rr             jsr pbpattr
001D7Ar 3  A9 10                lda #16
001D7Cr 3  85 rr                sta chary
001D7Er 3  A9 14                lda #20
001D80r 3  85 rr                sta charx
001D82r 3  A9 00                lda #0 		; PUTBLOCK
001D84r 3  20 rr rr             jsr pbpattr
001D87r 3  A9 07        i00329: lda #7
001D89r 3  C5 rr                cmp scno
001D8Br 3  F0 03                beq *+5
001D8Dr 3  4C rr rr             jmp i00470
001D90r 3  A9 06                lda #6
001D92r 3  85 rr                sta chary
001D94r 3  A9 0D                lda #13
001D96r 3  85 rr                sta charx
001D98r 3  A9 01                lda #1
001D9Ar 3  C5 rr                cmp varb
001D9Cr 3  F0 03                beq *+5
001D9Er 3  4C rr rr             jmp i00396
001DA1r 3  A9 01                lda #1 		; PUTBLOCK
001DA3r 3  20 rr rr             jsr pbpattr
001DA6r 3  4C rr rr             jmp i00408
001DA9r 3  A9 00        i00396: lda #0 		; PUTBLOCK
001DABr 3  20 rr rr             jsr pbpattr
001DAEr 3  A9 06        i00408: lda #6
001DB0r 3  85 rr                sta chary
001DB2r 3  A9 0E                lda #14
001DB4r 3  85 rr                sta charx
001DB6r 3  A9 01                lda #1
001DB8r 3  C5 rr                cmp varb
001DBAr 3  F0 03                beq *+5
001DBCr 3  4C rr rr             jmp i00458
001DBFr 3  A9 01                lda #1 		; PUTBLOCK
001DC1r 3  20 rr rr             jsr pbpattr
001DC4r 3  4C rr rr             jmp i00470
001DC7r 3  A9 00        i00458: lda #0 		; PUTBLOCK
001DC9r 3  20 rr rr             jsr pbpattr
001DCCr 3  A9 09        i00470: lda #9
001DCEr 3  C5 rr                cmp scno
001DD0r 3  F0 03                beq *+5
001DD2r 3  4C rr rr             jmp i00612
001DD5r 3  A9 06                lda #6
001DD7r 3  85 rr                sta chary
001DD9r 3  A9 0F                lda #15
001DDBr 3  85 rr                sta charx
001DDDr 3  A9 01                lda #1
001DDFr 3  C5 rr                cmp varb
001DE1r 3  F0 03                beq *+5
001DE3r 3  4C rr rr             jmp i00537
001DE6r 3  A9 01                lda #1 		; PUTBLOCK
001DE8r 3  20 rr rr             jsr pbpattr
001DEBr 3  4C rr rr             jmp i00549
001DEEr 3  A9 00        i00537: lda #0 		; PUTBLOCK
001DF0r 3  20 rr rr             jsr pbpattr
001DF3r 3  A9 06        i00549: lda #6
001DF5r 3  85 rr                sta chary
001DF7r 3  A9 10                lda #16
001DF9r 3  85 rr                sta charx
001DFBr 3  A9 01                lda #1
001DFDr 3  C5 rr                cmp varb
001DFFr 3  F0 03                beq *+5
001E01r 3  4C rr rr             jmp i00600
001E04r 3  A9 01                lda #1 		; PUTBLOCK
001E06r 3  20 rr rr             jsr pbpattr
001E09r 3  4C rr rr             jmp i00612
001E0Cr 3  A9 00        i00600: lda #0 		; PUTBLOCK
001E0Er 3  20 rr rr             jsr pbpattr
001E11r 3  A9 0A        i00612: lda #10
001E13r 3  C5 rr                cmp scno
001E15r 3  F0 03                beq *+5
001E17r 3  4C rr rr             jmp i00687
001E1Ar 3  A9 12                lda #18
001E1Cr 3  85 rr                sta chary
001E1Er 3  A9 0C                lda #12
001E20r 3  85 rr                sta charx
001E22r 3  A9 00                lda #0 		; PUTBLOCK
001E24r 3  20 rr rr             jsr pbpattr
001E27r 3  A9 13                lda #19
001E29r 3  85 rr                sta chary
001E2Br 3  A9 0C                lda #12
001E2Dr 3  85 rr                sta charx
001E2Fr 3  A9 00                lda #0 		; PUTBLOCK
001E31r 3  20 rr rr             jsr pbpattr
001E34r 3  A9 0A        i00687: lda #10
001E36r 3  C5 rr                cmp scno
001E38r 3  90 03                bcc *+5
001E3Ar 3  4C rr rr             jmp i00712
001E3Dr 3  A9 01                lda #1
001E3Fr 3  85 rr                sta vari
001E41r 3  60           i00712: rts
001E42r 3               evnt09:
001E42r 3  A9 00                lda #0
001E44r 3  85 rr                sta chary
001E46r 3  A9 00                lda #0
001E48r 3  85 rr                sta charx
001E4Ar 3  A9 02                lda #2  	; MESSAGE
001E4Cr 3  20 rr rr             jsr dmsg
001E4Fr 3  A9 00                lda #0
001E51r 3  85 rr                sta chary
001E53r 3  A9 0A                lda #10
001E55r 3  85 rr                sta charx
001E57r 3  A9 03                lda #3  	; MESSAGE
001E59r 3  20 rr rr             jsr dmsg
001E5Cr 3  A9 00                lda #0
001E5Er 3  85 rr                sta chary
001E60r 3  A9 0E                lda #14
001E62r 3  85 rr                sta charx
001E64r 3  A5 rr                lda varl	; DISPLAY
001E66r 3  20 rr rr             jsr disply
001E69r 3  A9 00                lda #0
001E6Br 3  85 rr                sta chary
001E6Dr 3  A9 10                lda #16
001E6Fr 3  85 rr                sta charx
001E71r 3  A9 04                lda #4  	; MESSAGE
001E73r 3  20 rr rr             jsr dmsg
001E76r 3  A9 00                lda #0
001E78r 3  85 rr                sta chary
001E7Ar 3  A9 15                lda #21
001E7Cr 3  85 rr                sta charx
001E7Er 3  A5 rr                lda numlif	; DISPLAY
001E80r 3  20 rr rr             jsr disply
001E83r 3  60                   rts
001E84r 3               evnt10:
001E84r 3  A9 01                lda #1
001E86r 3  C5 rr                cmp varz
001E88r 3  F0 03                beq *+5
001E8Ar 3  4C rr rr             jmp k00034
001E8Dr 3  20 rr rr             jsr dispup		; DISPLAYUP
001E90r 3  A9 00                lda #0
001E92r 3  85 rr                sta varz
001E94r 3  A9 1F        k00034: lda #31
001E96r 3  C5 rr                cmp scno
001E98r 3  F0 03                beq *+5
001E9Ar 3  4C rr rr             jmp k00063
001E9Dr 3  A9 01                lda #1		; ENDGAME
001E9Fr 3  85 rr                sta gamwon
001EA1r 3  60           k00063: rts
001EA2r 3               evnt11:
001EA2r 3  A9 01                lda #1
001EA4r 3  C5 rr                cmp varc
001EA6r 3  F0 03                beq *+5
001EA8r 3  4C rr rr             jmp l00031
001EABr 3  A9 00                lda #0
001EADr 3  85 rr                sta varc
001EAFr 3  4C rr rr             jmp l00046
001EB2r 3  A5 rr        l00031: lda varc
001EB4r 3  18                   clc
001EB5r 3  69 01                adc #1
001EB7r 3  85 rr                sta varc
001EB9r 3  A9 32        l00046: lda #50
001EBBr 3  C5 rr                cmp varm
001EBDr 3  F0 03                beq *+5
001EBFr 3  4C rr rr             jmp l00076
001EC2r 3  A9 00                lda #0
001EC4r 3  85 rr                sta varm
001EC6r 3  4C rr rr             jmp l00155
001EC9r 3  A5 rr        l00076: lda varm
001ECBr 3  18                   clc
001ECCr 3  69 01                adc #1
001ECEr 3  85 rr                sta varm
001ED0r 3  A9 00                lda #0
001ED2r 3  C5 rr                cmp varg
001ED4r 3  90 03                bcc *+5
001ED6r 3  4C rr rr             jmp l00123
001ED9r 3  A5 rr                lda varg
001EDBr 3  38                   sec
001EDCr 3  E9 01                sbc #1
001EDEr 3  85 rr                sta varg
001EE0r 3  A9 00        l00123: lda #0
001EE2r 3  C5 rr                cmp varh
001EE4r 3  90 03                bcc *+5
001EE6r 3  4C rr rr             jmp l00155
001EE9r 3  A5 rr                lda varh
001EEBr 3  38                   sec
001EECr 3  E9 01                sbc #1
001EEEr 3  85 rr                sta varh
001EF0r 3  60           l00155: rts
001EF1r 3               evnt12:
001EF1r 3  A9 00                lda #0 	; PAPER
001EF3r 3  0A                   asl a
001EF4r 3  0A                   asl a
001EF5r 3  0A                   asl a
001EF6r 3  0A                   asl a
001EF7r 3  85 rr                sta tmp
001EF9r 3  AD 0F 90             lda RegF
001EFCr 3  29 0F                and #%00001111
001EFEr 3  05 rr                ora tmp
001F00r 3  8D 0F 90             sta RegF
001F03r 3  A9 01                lda #1 	; INK
001F05r 3  8D rr rr             sta fontcol
001F08r 3  20 rr rr             jsr cls		; CLS
001F0Br 3  A9 02                lda #2
001F0Dr 3  85 rr                sta chary
001F0Fr 3  A9 06                lda #6
001F11r 3  85 rr                sta charx
001F13r 3  A9 02                lda #2  	; MESSAGE
001F15r 3  20 rr rr             jsr dmsg
001F18r 3  A9 04                lda #4
001F1Ar 3  85 rr                sta chary
001F1Cr 3  A9 02                lda #2
001F1Er 3  85 rr                sta charx
001F20r 3  A9 05                lda #5  	; MESSAGE
001F22r 3  20 rr rr             jsr dmsg
001F25r 3  A9 08                lda #8
001F27r 3  85 rr                sta chary
001F29r 3  A9 04                lda #4
001F2Br 3  85 rr                sta charx
001F2Dr 3  A9 06                lda #6  	; MESSAGE
001F2Fr 3  20 rr rr             jsr dmsg
001F32r 3  A9 0E                lda #14		; AT
001F34r 3  85 rr                sta chary
001F36r 3  A9 01                lda #1
001F38r 3  85 rr                sta charx
001F3Ar 3  A9 0E                lda #14		; PRINT
001F3Cr 3  20 rr rr             jsr dmsg
001F3Fr 3  A9 13                lda #19
001F41r 3  85 rr                sta chary
001F43r 3  A9 00                lda #0
001F45r 3  85 rr                sta charx
001F47r 3  A9 0A                lda #10  	; MESSAGE
001F49r 3  20 rr rr             jsr dmsg
001F4Cr 3  A9 01                lda #1
001F4Er 3  85 rr                sta contrl
001F50r 3  20 rr rr             jsr prskey	; WAITKEY
001F53r 3  20 rr rr             jsr dispdown		; DISPLAYDOWN
001F56r 3  A9 01                lda #1
001F58r 3  85 rr                sta varz
001F5Ar 3  60                   rts
001F5Br 3               evnt13:
001F5Br 3  A9 03                lda #3
001F5Dr 3  85 rr                sta numlif
001F5Fr 3  A9 00                lda #0
001F61r 3                       ; BORDER command
001F61r 3  29 07                and #7
001F63r 3  85 rr                sta tmp
001F65r 3  AD 0F 90             lda RegF
001F68r 3  29 F8                and #%11111000
001F6Ar 3  05 rr                ora tmp
001F6Cr 3  8D 0F 90             sta RegF
001F6Fr 3  20 rr rr             jsr cls		; CLS
001F72r 3  A9 00                lda #0
001F74r 3  85 rr                sta vara
001F76r 3  A9 00                lda #0
001F78r 3  85 rr                sta varb
001F7Ar 3  A9 00                lda #0
001F7Cr 3  85 rr                sta varc
001F7Er 3  A9 00                lda #0
001F80r 3  85 rr                sta vard
001F82r 3  A9 00                lda #0
001F84r 3  85 rr                sta vare
001F86r 3  A9 00                lda #0
001F88r 3  85 rr                sta varf
001F8Ar 3  A9 00                lda #0
001F8Cr 3  85 rr                sta varg
001F8Er 3  A9 00                lda #0
001F90r 3  85 rr                sta varh
001F92r 3  A9 00                lda #0
001F94r 3  85 rr                sta vari
001F96r 3  A9 01                lda #1
001F98r 3  85 rr                sta varl
001F9Ar 3  A9 00                lda #0
001F9Cr 3  85 rr                sta varm
001F9Er 3  A9 00                lda #0
001FA0r 3  85 rr                sta varn
001FA2r 3  60                   rts
001FA3r 3               evnt14:
001FA3r 3  A9 00                lda #0
001FA5r 3  85 rr                sta vara
001FA7r 3  A9 00                lda #0
001FA9r 3  85 rr                sta varb
001FABr 3  A9 00                lda #0
001FADr 3  85 rr                sta vare
001FAFr 3  A9 00                lda #0
001FB1r 3  85 rr                sta varf
001FB3r 3  A9 00                lda #0
001FB5r 3  85 rr                sta varn
001FB7r 3  60                   rts
001FB8r 3               evnt15:
001FB8r 3  60                   rts
001FB9r 3               evnt16:
001FB9r 3  A9 7F                lda #127		; BEEP
001FBBr 3  8D rr rr             sta sndtyp
001FBEr 3  A9 08                lda #8	; EXPLODE
001FC0r 3  20 rr rr             jsr explod
001FC3r 3  A5 rr                lda numlif
001FC5r 3  38                   sec
001FC6r 3  E9 01                sbc #1
001FC8r 3  85 rr                sta numlif
001FCAr 3  60                   rts
001FCBr 3               evnt17:
001FCBr 3  A9 0A                lda #10
001FCDr 3  85 rr                sta chary
001FCFr 3  A9 06                lda #6
001FD1r 3  85 rr                sta charx
001FD3r 3  A9 00                lda #0  	; MESSAGE
001FD5r 3  20 rr rr             jsr dmsg
001FD8r 3  A9 32                lda #50 	; DELAY
001FDAr 3  20 rr rr             jsr delay
001FDDr 3  A9 54                lda #84		; BEEP
001FDFr 3  8D rr rr             sta sndtyp
001FE2r 3  A9 32                lda #50 	; DELAY
001FE4r 3  20 rr rr             jsr delay
001FE7r 3  A9 49                lda #73		; BEEP
001FE9r 3  8D rr rr             sta sndtyp
001FECr 3  A9 32                lda #50 	; DELAY
001FEEr 3  20 rr rr             jsr delay
001FF1r 3  A9 3E                lda #62		; BEEP
001FF3r 3  8D rr rr             sta sndtyp
001FF6r 3  A9 C8                lda #200 	; DELAY
001FF8r 3  20 rr rr             jsr delay
001FFBr 3  60                   rts
001FFCr 3               evnt18:
001FFCr 3  A9 00                lda #0 	; PAPER
001FFEr 3  0A                   asl a
001FFFr 3  0A                   asl a
002000r 3  0A                   asl a
002001r 3  0A                   asl a
002002r 3  85 rr                sta tmp
002004r 3  AD 0F 90             lda RegF
002007r 3  29 0F                and #%00001111
002009r 3  05 rr                ora tmp
00200Br 3  8D 0F 90             sta RegF
00200Er 3  A9 01                lda #1 	; INK
002010r 3  8D rr rr             sta fontcol
002013r 3  20 rr rr             jsr cls		; CLS
002016r 3  A9 07                lda #7		; AT
002018r 3  85 rr                sta chary
00201Ar 3  A9 01                lda #1
00201Cr 3  85 rr                sta charx
00201Er 3  A9 0F                lda #15		; PRINT
002020r 3  20 rr rr             jsr dmsg
002023r 3  A9 09                lda #9		; AT
002025r 3  85 rr                sta chary
002027r 3  A9 02                lda #2
002029r 3  85 rr                sta charx
00202Br 3  A9 10                lda #16		; PRINT
00202Dr 3  20 rr rr             jsr dmsg
002030r 3  A9 0B                lda #11		; AT
002032r 3  85 rr                sta chary
002034r 3  A9 06                lda #6
002036r 3  85 rr                sta charx
002038r 3  A9 11                lda #17		; PRINT
00203Ar 3  20 rr rr             jsr dmsg
00203Dr 3  20 rr rr             jsr dispup		; DISPLAYUP
002040r 3  A9 FA                lda #250 	; DELAY
002042r 3  20 rr rr             jsr delay
002045r 3  A9 FA                lda #250 	; DELAY
002047r 3  20 rr rr             jsr delay
00204Ar 3  60                   rts
00204Br 3               evnt19:
00204Br 3  60                   rts
00204Cr 3               evnt20:
00204Cr 3  60                   rts
00204Dr 3  60           ptcusr: rts
00204Er 3               data_start:
00204Er 3               msgdat:
00204Er 3  47 41 4D 45          .byte "GAME OVE",210
002052r 3  20 4F 56 45  
002056r 3  D2           
002057r 3  2D 4E 45 58          .byte "-NEXT LEVEL",173
00205Br 3  54 20 4C 45  
00205Fr 3  56 45 4C AD  
002063r 3  42 2D 53 51          .byte "B-SQUARE",196
002067r 3  55 41 52 45  
00206Br 3  C4           
00206Cr 3  4C 56 4C BA          .byte "LVL",186
002070r 3  4C 49 46 45          .byte "LIFE",186
002074r 3  BA           
002075r 3  41 20 47 41          .byte "A GAME OF FUN AND        SQUARENES",211
002079r 3  4D 45 20 4F  
00207Dr 3  46 20 46 55  
002098r 3  53 45 4C 45          .byte "SELECT CONTRO",204
00209Cr 3  43 54 20 43  
0020A0r 3  4F 4E 54 52  
0020A6r 3  31 20 4B 45          .byte "1 KEYBOARD (O,P,Q",169
0020AAr 3  59 42 4F 41  
0020AEr 3  52 44 20 28  
0020B8r 3  32 20 4A 4F          .byte "2 JOYSTIC",203
0020BCr 3  59 53 54 49  
0020C0r 3  43 CB        
0020C2r 3  A0                   .byte 160
0020C3r 3  7F 20 50 41          .byte " PAUL JENKINSON 201",183
0020C7r 3  55 4C 20 4A  
0020CBr 3  45 4E 4B 49  
0020D8r 3  43 4F 4E 47          .byte "CONGRATULATION",211
0020DCr 3  52 41 54 55  
0020E0r 3  4C 41 54 49  
0020E7r 3  59 45 53 2C          .byte "YES, THIS IS ALL YOU GE",212
0020EBr 3  20 54 48 49  
0020EFr 3  53 20 49 53  
0020FFr 3  46 4F 52 20          .byte "FOR COMPLETING  THE GAM",197
002103r 3  43 4F 4D 50  
002107r 3  4C 45 54 49  
002117r 3  50 52 45 53          .byte "PRESS FIRE TO STAR",212
00211Br 3  53 20 46 49  
00211Fr 3  52 45 20 54  
00212Ar 3  59 45 53 2C          .byte "YES, THIS IS ALL YO",213
00212Er 3  20 54 48 49  
002132r 3  53 20 49 53  
00213Er 3  47 45 54 20          .byte "GET FOR COMPLETIN",199
002142r 3  46 4F 52 20  
002146r 3  43 4F 4D 50  
002150r 3  54 48 45 20          .byte "THE GAME",174
002154r 3  47 41 4D 45  
002158r 3  AE           
002159r 3               nummsg:
002159r 3  12                   .byte 18
00215Ar 3               chgfx:
00215Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00215Er 3  00 00 00 00  
002162r 3  FF 00 58 34          .byte 255,0,88,52,106,197,255,0
002166r 3  6A C5 FF 00  
00216Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00216Er 3  00 00 00 00  
002172r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002176r 3  00 00 00 00  
00217Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00217Er 3  00 00 00 00  
002182r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002186r 3  00 00 00 00  
00218Ar 3  74 74 64 20          .byte 116,116,100,32,36,0,32,0
00218Er 3  24 00 20 00  
002192r 3  4D 4D 06 44          .byte 77,77,6,68,4,0,4,0
002196r 3  04 00 04 00  
00219Ar 3  81 C2 E4 70          .byte 129,194,228,112,56,28,78,135
00219Er 3  38 1C 4E 87  
0021A2r 3  3A 4C 72 7C          .byte 58,76,114,124,122,124,122,124
0021A6r 3  7A 7C 7A 7C  
0021AAr 3  00 40 70 7C          .byte 0,64,112,124,122,124,122,124
0021AEr 3  7A 7C 7A 7C  
0021B2r 3  81 C2 E4 70          .byte 129,194,228,112,56,28,78,135
0021B6r 3  38 1C 4E 87  
0021BAr 3  FF 00 08 7C          .byte 255,0,8,124,8,0,255,0
0021BEr 3  08 00 FF 00  
0021C2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021C6r 3  00 00 00 00  
0021CAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021CEr 3  00 00 00 00  
0021D2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021D6r 3  00 00 00 00  
0021DAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021DEr 3  00 00 00 00  
0021E2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021E6r 3  00 00 00 00  
0021EAr 3  2A 28 12 10          .byte 42,40,18,16,0,16,0,0
0021EEr 3  00 10 00 00  
0021F2r 3  3A 14 04 14          .byte 58,20,4,20,0,4,0,0
0021F6r 3  00 04 00 00  
0021FAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021FEr 3  00 00 00 00  
002202r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002206r 3  00 00 00 00  
00220Ar 3  FF 00 20 7C          .byte 255,0,32,124,32,0,255,0
00220Er 3  20 00 FF 00  
002212r 3  07 72 F8 D0          .byte 7,114,248,208,116,128,166,13
002216r 3  74 80 A6 0D  
00221Ar 3  07 72 F8 D0          .byte 7,114,248,208,116,128,166,13
00221Er 3  74 80 A6 0D  
002222r 3  67 52 20 00          .byte 103,82,32,0,0,0,0,0
002226r 3  00 00 00 00  
00222Ar 3  67 52 20 00          .byte 103,82,32,0,0,0,0,0
00222Er 3  00 00 00 00  
002232r 3  3A 4C 72 7C          .byte 58,76,114,124,122,124,122,60
002236r 3  7A 7C 7A 3C  
00223Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00223Er 3  00 00 00 00  
002242r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002246r 3  00 00 00 00  
00224Ar 3  FF 00 7A 7A          .byte 255,0,122,122,122,122,0,255
00224Er 3  7A 7A 00 FF  
002252r 3  3C 18 10 00          .byte 60,24,16,0,16,0,0,0
002256r 3  10 00 00 00  
00225Ar 3  5C 48 08 40          .byte 92,72,8,64,8,0,0,0
00225Er 3  08 00 00 00  
002262r 3  DD BB 77 AA          .byte 221,187,119,170,221,187,119,238
002266r 3  DD BB 77 EE  
00226Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00226Er 3  00 00 00 00  
002272r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002276r 3  00 00 00 00  
00227Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00227Er 3  00 00 00 00  
002282r 3  00 08 0A 4A          .byte 0,8,10,74,68,84,36,40
002286r 3  44 54 24 28  
00228Ar 3  41 A2 54 28          .byte 65,162,84,40,20,42,69,130
00228Er 3  14 2A 45 82  
002292r 3  DD BB 7E 91          .byte 221,187,126,145,155,178,127,238
002296r 3  9B B2 7F EE  
00229Ar 3               bCol:
00229Ar 3  01                   .byte 1
00229Br 3  01                   .byte 1
00229Cr 3  01                   .byte 1
00229Dr 3  01                   .byte 1
00229Er 3  01                   .byte 1
00229Fr 3  01                   .byte 1
0022A0r 3  01                   .byte 1
0022A1r 3  01                   .byte 1
0022A2r 3  01                   .byte 1
0022A3r 3  01                   .byte 1
0022A4r 3  01                   .byte 1
0022A5r 3  01                   .byte 1
0022A6r 3  01                   .byte 1
0022A7r 3  01                   .byte 1
0022A8r 3  01                   .byte 1
0022A9r 3  01                   .byte 1
0022AAr 3  01                   .byte 1
0022ABr 3  01                   .byte 1
0022ACr 3  01                   .byte 1
0022ADr 3  01                   .byte 1
0022AEr 3  01                   .byte 1
0022AFr 3  01                   .byte 1
0022B0r 3  01                   .byte 1
0022B1r 3  01                   .byte 1
0022B2r 3  01                   .byte 1
0022B3r 3  01                   .byte 1
0022B4r 3  01                   .byte 1
0022B5r 3  01                   .byte 1
0022B6r 3  01                   .byte 1
0022B7r 3  01                   .byte 1
0022B8r 3  01                   .byte 1
0022B9r 3  01                   .byte 1
0022BAr 3  01                   .byte 1
0022BBr 3  01                   .byte 1
0022BCr 3  01                   .byte 1
0022BDr 3  01                   .byte 1
0022BEr 3  01                   .byte 1
0022BFr 3  01                   .byte 1
0022C0r 3  01                   .byte 1
0022C1r 3  01                   .byte 1
0022C2r 3               bprop:
0022C2r 3  00                   .byte 0
0022C3r 3  02                   .byte 2
0022C4r 3  00                   .byte 0
0022C5r 3  00                   .byte 0
0022C6r 3  00                   .byte 0
0022C7r 3  00                   .byte 0
0022C8r 3  05                   .byte 5
0022C9r 3  05                   .byte 5
0022CAr 3  00                   .byte 0
0022CBr 3  02                   .byte 2
0022CCr 3  02                   .byte 2
0022CDr 3  00                   .byte 0
0022CEr 3  02                   .byte 2
0022CFr 3  06                   .byte 6
0022D0r 3  06                   .byte 6
0022D1r 3  02                   .byte 2
0022D2r 3  00                   .byte 0
0022D3r 3  00                   .byte 0
0022D4r 3  05                   .byte 5
0022D5r 3  05                   .byte 5
0022D6r 3  06                   .byte 6
0022D7r 3  06                   .byte 6
0022D8r 3  02                   .byte 2
0022D9r 3  02                   .byte 2
0022DAr 3  02                   .byte 2
0022DBr 3  05                   .byte 5
0022DCr 3  05                   .byte 5
0022DDr 3  02                   .byte 2
0022DEr 3  00                   .byte 0
0022DFr 3  00                   .byte 0
0022E0r 3  02                   .byte 2
0022E1r 3  05                   .byte 5
0022E2r 3  05                   .byte 5
0022E3r 3  02                   .byte 2
0022E4r 3  06                   .byte 6
0022E5r 3  00                   .byte 0
0022E6r 3  00                   .byte 0
0022E7r 3  05                   .byte 5
0022E8r 3  00                   .byte 0
0022E9r 3  00                   .byte 0
0022EAr 3               sprgfx:
0022EAr 3  00 00 00 00          .byte 0,0,0,0,63,252,127,254,126,14,127,230,127,246,127,246,127,246,127,246,127,246,111,254,111,254,115,254,127,254,63,252
0022EEr 3  3F FC 7F FE  
0022F2r 3  7E 0E 7F E6  
00230Ar 3  00 00 00 00          .byte 0,0,0,0,15,255,159,255,159,131,159,249,159,253,159,253,159,253,159,253,159,253,155,255,155,255,156,255,159,255,15,255
00230Er 3  0F FF 9F FF  
002312r 3  9F 83 9F F9  
00232Ar 3  00 00 00 00          .byte 0,0,0,0,195,255,231,255,231,224,103,254,103,255,103,255,103,255,103,255,103,255,230,255,230,255,231,63,231,255,195,255
00232Er 3  C3 FF E7 FF  
002332r 3  E7 E0 67 FE  
00234Ar 3  00 00 00 00          .byte 0,0,0,0,240,255,249,255,57,248,153,255,217,255,217,255,217,255,217,255,217,255,249,191,249,191,249,207,249,255,240,255
00234Er 3  F0 FF F9 FF  
002352r 3  39 F8 99 FF  
00236Ar 3  00 00 0C 00          .byte 0,0,12,0,31,128,63,240,62,60,63,222,127,238,127,246,127,244,127,244,255,252,223,248,239,248,115,248,15,240,1,192
00236Er 3  1F 80 3F F0  
002372r 3  3E 3C 3F DE  
00238Ar 3  00 00 03 00          .byte 0,0,3,0,7,224,15,252,15,143,143,247,159,251,159,253,31,253,31,253,63,255,55,254,59,254,28,254,3,252,0,112
00238Er 3  07 E0 0F FC  
002392r 3  0F 8F 8F F7  
0023AAr 3  00 00 00 C0          .byte 0,0,0,192,1,248,3,255,195,227,227,253,231,254,103,255,71,255,71,255,207,255,141,255,142,255,135,63,0,255,0,28
0023AEr 3  01 F8 03 FF  
0023B2r 3  C3 E3 E3 FD  
0023CAr 3  00 00 00 30          .byte 0,0,0,48,0,126,192,255,240,248,120,255,185,255,217,255,209,255,209,255,243,255,227,127,227,191,225,207,192,63,0,7
0023CEr 3  00 7E C0 FF  
0023D2r 3  F0 F8 78 FF  
0023EAr 3  00 00 01 80          .byte 0,0,1,128,3,192,7,224,12,48,31,216,63,236,127,246,255,255,127,254,55,252,27,248,13,240,6,224,3,192,1,128
0023EEr 3  03 C0 07 E0  
0023F2r 3  0C 30 1F D8  
00240Ar 3  00 00 00 60          .byte 0,0,0,96,0,240,1,248,3,12,7,246,15,251,159,253,255,255,159,255,13,255,6,254,3,124,1,184,0,240,0,96
00240Er 3  00 F0 01 F8  
002412r 3  03 0C 07 F6  
00242Ar 3  00 00 00 18          .byte 0,0,0,24,0,60,0,126,0,195,129,253,195,254,103,255,255,255,231,255,195,127,129,191,0,223,0,110,0,60,0,24
00242Er 3  00 3C 00 7E  
002432r 3  00 C3 81 FD  
00244Ar 3  00 00 00 06          .byte 0,0,0,6,0,15,128,31,192,48,96,127,176,255,217,255,255,255,249,255,240,223,224,111,192,55,128,27,0,15,0,6
00244Er 3  00 0F 80 1F  
002452r 3  C0 30 60 7F  
00246Ar 3  00 00 00 30          .byte 0,0,0,48,1,248,15,156,63,236,127,244,127,246,127,246,63,246,63,254,63,255,23,255,23,255,25,254,15,240,3,128
00246Er 3  01 F8 0F 9C  
002472r 3  3F EC 7F F4  
00248Ar 3  00 00 00 0C          .byte 0,0,0,12,0,126,3,231,15,251,31,253,159,253,159,253,143,253,143,255,207,255,197,255,197,255,134,127,3,252,0,224
00248Er 3  00 7E 03 E7  
002492r 3  0F FB 1F FD  
0024AAr 3  00 00 00 03          .byte 0,0,0,3,128,31,192,249,195,254,71,255,103,255,103,255,99,255,227,255,243,255,241,127,241,127,225,159,0,255,0,56
0024AEr 3  80 1F C0 F9  
0024B2r 3  C3 FE 47 FF  
0024CAr 3  00 00 C0 00          .byte 0,0,192,0,224,7,112,62,176,255,209,255,217,255,217,255,216,255,248,255,252,255,252,95,252,95,248,103,192,63,0,14
0024CEr 3  E0 07 70 3E  
0024D2r 3  B0 FF D1 FF  
0024EAr 3  00 00 00 00          .byte 0,0,0,0,0,0,6,96,25,152,57,156,123,222,121,158,127,254,62,124,15,240,39,228,72,18,68,34,132,33,128,1
0024EEr 3  00 00 06 60  
0024F2r 3  19 98 39 9C  
00250Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,1,152,6,102,14,103,158,247,158,103,159,255,15,159,3,252,9,249,146,4,145,8,97,8,96,0
00250Er 3  00 00 01 98  
002512r 3  06 66 0E 67  
00252Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,102,129,153,195,153,231,189,231,153,231,255,195,231,0,255,66,126,36,129,36,66,24,66,24,0
00252Er 3  00 00 00 66  
002532r 3  81 99 C3 99  
00254Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,128,25,96,102,112,230,121,239,121,230,249,255,240,249,192,63,144,159,73,32,137,16,134,16,6,0
00254Er 3  00 00 80 19  
002552r 3  60 66 70 E6  
00256Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,6,96,25,152,57,156,123,222,121,158,127,254,62,124,15,240,39,228,72,18,68,34,68,34,64,2
00256Er 3  00 00 06 60  
002572r 3  19 98 39 9C  
00258Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,1,152,6,102,14,103,158,247,158,103,159,255,15,159,3,252,9,249,146,4,145,8,145,8,144,0
00258Er 3  00 00 01 98  
002592r 3  06 66 0E 67  
0025AAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,102,129,153,195,153,231,189,231,153,231,255,195,231,0,255,66,126,36,129,36,66,36,66,36,0
0025AEr 3  00 00 00 66  
0025B2r 3  81 99 C3 99  
0025CAr 3  00 00 00 00          .byte 0,0,0,0,0,0,128,25,96,102,112,230,121,239,121,230,249,255,240,249,192,63,144,159,73,32,137,16,137,16,9,0
0025CEr 3  00 00 80 19  
0025D2r 3  60 66 70 E6  
0025EAr 3  00 00 00 00          .byte 0,0,0,0,6,96,25,152,59,220,121,158,121,158,127,254,62,124,15,240,23,232,44,52,43,212,36,36,20,40,8,16
0025EEr 3  06 60 19 98  
0025F2r 3  3B DC 79 9E  
00260Ar 3  00 00 00 00          .byte 0,0,0,0,1,152,6,102,14,247,158,103,158,103,159,255,15,159,3,252,5,250,11,13,10,245,9,9,5,10,2,4
00260Er 3  01 98 06 66  
002612r 3  0E F7 9E 67  
00262Ar 3  00 00 00 00          .byte 0,0,0,0,0,102,129,153,195,189,231,153,231,153,231,255,195,231,0,255,129,126,66,195,66,189,66,66,129,66,0,129
00262Er 3  00 66 81 99  
002632r 3  C3 BD E7 99  
00264Ar 3  00 00 00 00          .byte 0,0,0,0,128,25,96,102,112,239,121,230,121,230,249,255,240,249,192,63,160,95,208,176,80,175,144,144,160,80,64,32
00264Er 3  80 19 60 66  
002652r 3  70 EF 79 E6  
00266Ar 3  00 00 00 00          .byte 0,0,0,0,6,96,25,152,59,220,121,158,121,158,127,254,62,124,15,240,23,232,44,52,75,210,68,34,68,34,64,2
00266Er 3  06 60 19 98  
002672r 3  3B DC 79 9E  
00268Ar 3  00 00 00 00          .byte 0,0,0,0,1,152,6,102,14,247,158,103,158,103,159,255,15,159,3,252,5,250,11,13,146,244,145,8,145,8,144,0
00268Er 3  01 98 06 66  
002692r 3  0E F7 9E 67  
0026AAr 3  00 00 00 00          .byte 0,0,0,0,0,102,129,153,195,189,231,153,231,153,231,255,195,231,0,255,129,126,66,195,36,189,36,66,36,66,36,0
0026AEr 3  00 66 81 99  
0026B2r 3  C3 BD E7 99  
0026CAr 3  00 00 00 00          .byte 0,0,0,0,128,25,96,102,112,239,121,230,121,230,249,255,240,249,192,63,160,95,208,176,73,47,137,16,137,16,9,0
0026CEr 3  80 19 60 66  
0026D2r 3  70 EF 79 E6  
0026EAr 3  00 00 00 00          .byte 0,0,0,0,128,1,67,194,101,166,53,172,5,160,21,168,27,216,12,48,7,224,8,16,16,8,16,8,0,0,0,0
0026EEr 3  80 01 43 C2  
0026F2r 3  65 A6 35 AC  
00270Ar 3  00 00 00 00          .byte 0,0,0,0,96,0,144,240,153,105,13,107,1,104,5,106,6,246,3,12,1,248,2,4,4,2,4,2,0,0,0,0
00270Er 3  60 00 90 F0  
002712r 3  99 69 0D 6B  
00272Ar 3  00 00 00 00          .byte 0,0,0,0,24,0,36,60,102,90,195,90,0,90,129,90,129,189,0,195,0,126,0,129,129,0,129,0,0,0,0,0
00272Er 3  18 00 24 3C  
002732r 3  66 5A C3 5A  
00274Ar 3  00 00 00 00          .byte 0,0,0,0,6,0,9,15,153,150,176,214,128,22,160,86,96,111,192,48,128,31,64,32,32,64,32,64,0,0,0,0
00274Er 3  06 00 09 0F  
002752r 3  99 96 B0 D6  
00276Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,3,192,101,166,245,175,5,160,21,168,27,216,12,48,7,224,8,16,8,16,8,16,0,0,0,0
00276Er 3  00 00 03 C0  
002772r 3  65 A6 F5 AF  
00278Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,240,153,105,253,107,1,104,5,106,6,246,3,12,1,248,2,4,2,4,2,4,0,0,0,0
00278Er 3  00 00 00 F0  
002792r 3  99 69 FD 6B  
0027AAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,60,102,90,255,90,0,90,129,90,129,189,0,195,0,126,0,129,0,129,0,129,0,0,0,0
0027AEr 3  00 00 00 3C  
0027B2r 3  66 5A FF 5A  
0027CAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,15,153,150,191,214,128,22,160,86,96,111,192,48,128,31,64,32,64,32,64,32,0,0,0,0
0027CEr 3  00 00 00 0F  
0027D2r 3  99 96 BF D6  
0027EAr 3  00 00 00 00          .byte 0,0,0,0,0,0,3,192,5,160,21,168,101,166,213,171,155,217,12,48,7,224,8,16,4,32,4,32,0,0,0,0
0027EEr 3  00 00 03 C0  
0027F2r 3  05 A0 15 A8  
00280Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,240,1,104,5,106,153,105,245,106,102,246,3,12,1,248,2,4,1,8,1,8,0,0,0,0
00280Er 3  00 00 00 F0  
002812r 3  01 68 05 6A  
00282Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,60,0,90,129,90,102,90,189,90,153,189,0,195,0,126,0,129,0,66,0,66,0,0,0,0
00282Er 3  00 00 00 3C  
002832r 3  00 5A 81 5A  
00284Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,15,128,22,160,86,153,150,175,86,102,111,192,48,128,31,64,32,128,16,128,16,0,0,0,0
00284Er 3  00 00 00 0F  
002852r 3  80 16 A0 56  
00286Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,3,192,101,166,245,175,5,160,21,168,27,216,12,48,7,224,8,16,8,16,8,16,0,0,0,0
00286Er 3  00 00 03 C0  
002872r 3  65 A6 F5 AF  
00288Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,240,153,105,253,107,1,104,5,106,6,246,3,12,1,248,2,4,2,4,2,4,0,0,0,0
00288Er 3  00 00 00 F0  
002892r 3  99 69 FD 6B  
0028AAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,60,102,90,255,90,0,90,129,90,129,189,0,195,0,126,0,129,0,129,0,129,0,0,0,0
0028AEr 3  00 00 00 3C  
0028B2r 3  66 5A FF 5A  
0028CAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,15,153,150,191,214,128,22,160,86,96,111,192,48,128,31,64,32,64,32,64,32,0,0,0,0
0028CEr 3  00 00 00 0F  
0028D2r 3  99 96 BF D6  
0028EAr 3  00 07 00 37          .byte 0,7,0,55,0,64,0,128,0,183,2,247,6,247,28,247,52,247,24,119,0,55,0,7,0,0,0,0,0,0,0,0
0028EEr 3  00 40 00 80  
0028F2r 3  00 B7 02 F7  
00290Ar 3  C0 01 C0 0D          .byte 192,1,192,13,0,16,0,32,192,45,192,189,193,189,199,61,205,61,198,29,192,13,192,1,0,0,0,0,0,0,0,0
00290Er 3  00 10 00 20  
002912r 3  C0 2D C0 BD  
00292Ar 3  70 00 70 03          .byte 112,0,112,3,0,4,0,8,112,11,112,47,112,111,113,207,115,79,113,135,112,3,112,0,0,0,0,0,0,0,0,0
00292Er 3  00 04 00 08  
002932r 3  70 0B 70 2F  
00294Ar 3  1C 00 DC 00          .byte 28,0,220,0,0,1,0,2,220,2,220,11,220,27,220,115,220,211,220,97,220,0,28,0,0,0,0,0,0,0,0,0
00294Er 3  00 01 00 02  
002952r 3  DC 02 DC 0B  
00296Ar 3  00 07 00 37          .byte 0,7,0,55,24,64,52,128,28,183,6,247,2,247,0,247,0,247,0,119,0,55,0,7,0,0,0,0,0,0,0,0
00296Er 3  18 40 34 80  
002972r 3  1C B7 06 F7  
00298Ar 3  C0 01 C0 0D          .byte 192,1,192,13,6,16,13,32,199,45,193,189,192,189,192,61,192,61,192,29,192,13,192,1,0,0,0,0,0,0,0,0
00298Er 3  06 10 0D 20  
002992r 3  C7 2D C1 BD  
0029AAr 3  70 00 70 03          .byte 112,0,112,3,1,132,3,72,113,203,112,111,112,47,112,15,112,15,112,7,112,3,112,0,0,0,0,0,0,0,0,0
0029AEr 3  01 84 03 48  
0029B2r 3  71 CB 70 6F  
0029CAr 3  1C 00 DC 00          .byte 28,0,220,0,0,97,0,210,220,114,220,27,220,11,220,3,220,3,220,1,220,0,28,0,0,0,0,0,0,0,0,0
0029CEr 3  00 61 00 D2  
0029D2r 3  DC 72 DC 1B  
0029EAr 3  00 00 00 00          .byte 0,0,0,0,1,128,2,64,6,32,7,32,3,64,5,160,2,64,3,192,1,128,0,0,1,128,0,0,7,160,15,208
0029EEr 3  01 80 02 40  
0029F2r 3  06 20 07 20  
002A0Ar 3  00 00 00 00          .byte 0,0,0,0,0,96,0,144,1,136,1,200,0,208,1,104,0,144,0,240,0,96,0,0,0,96,0,0,1,232,3,244
002A0Er 3  00 60 00 90  
002A12r 3  01 88 01 C8  
002A2Ar 3  00 00 00 00          .byte 0,0,0,0,0,24,0,36,0,98,0,114,0,52,0,90,0,36,0,60,0,24,0,0,0,24,0,0,0,122,0,253
002A2Er 3  00 18 00 24  
002A32r 3  00 62 00 72  
002A4Ar 3  00 00 00 00          .byte 0,0,0,0,0,6,0,9,128,24,128,28,0,13,128,22,0,9,0,15,0,6,0,0,0,6,0,0,128,30,64,63
002A4Er 3  00 06 00 09  
002A52r 3  80 18 80 1C  
002A6Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,8,16,20,40,8,16,8,16,3,192,15,240,31,248,14,112,23,232,35,196,68,34,132,33
002A6Er 3  00 00 00 00  
002A72r 3  08 10 14 28  
002A8Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,2,4,5,10,2,4,2,4,0,240,3,252,7,254,3,156,5,250,8,241,145,8,97,8
002A8Er 3  00 00 00 00  
002A92r 3  02 04 05 0A  
002AAAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,129,129,66,0,129,0,129,0,60,0,255,129,255,0,231,129,126,66,60,36,66,24,66
002AAEr 3  00 00 00 00  
002AB2r 3  00 81 81 42  
002ACAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,64,32,160,80,64,32,64,32,0,15,192,63,224,127,192,57,160,95,16,143,137,16,134,16
002ACEr 3  00 00 00 00  
002AD2r 3  40 20 A0 50  
002AEAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,16,8,40,20,16,8,8,16,3,192,15,240,31,248,14,112,23,232,35,196,196,35
002AEEr 3  00 00 00 00  
002AF2r 3  00 00 10 08  
002B0Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,4,2,10,5,4,2,2,4,0,240,3,252,7,254,3,156,5,250,8,241,241,8
002B0Er 3  00 00 00 00  
002B12r 3  00 00 04 02  
002B2Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,129,0,66,129,129,0,0,129,0,60,0,255,129,255,0,231,129,126,66,60,60,66
002B2Er 3  00 00 00 00  
002B32r 3  00 00 81 00  
002B4Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,32,64,80,160,32,64,64,32,0,15,192,63,224,127,192,57,160,95,16,143,143,16
002B4Er 3  00 00 00 00  
002B52r 3  00 00 20 40  
002B6Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,16,8,40,20,16,8,8,16,3,192,15,240,31,248,14,112,23,232,35,196,32,4,34,68
002B6Er 3  00 00 00 00  
002B72r 3  10 08 28 14  
002B8Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,4,2,10,5,4,2,2,4,0,240,3,252,7,254,3,156,5,250,8,241,8,1,8,145
002B8Er 3  00 00 00 00  
002B92r 3  04 02 0A 05  
002BAAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,129,0,66,129,129,0,0,129,0,60,0,255,129,255,0,231,129,126,66,60,66,0,66,36
002BAEr 3  00 00 00 00  
002BB2r 3  81 00 42 81  
002BCAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,32,64,80,160,32,64,64,32,0,15,192,63,224,127,192,57,160,95,16,143,16,128,16,137
002BCEr 3  00 00 00 00  
002BD2r 3  20 40 50 A0  
002BEAr 3  00 00 00 00          .byte 0,0,0,0,0,0,8,16,20,40,8,16,8,16,3,192,15,240,31,248,14,112,7,224,19,200,16,8,18,72,18,72
002BEEr 3  00 00 08 10  
002BF2r 3  14 28 08 10  
002C0Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,2,4,5,10,2,4,2,4,0,240,3,252,7,254,3,156,1,248,4,242,4,2,4,146,4,146
002C0Er 3  00 00 02 04  
002C12r 3  05 0A 02 04  
002C2Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,129,129,66,0,129,0,129,0,60,0,255,129,255,0,231,0,126,129,60,129,0,129,36,129,36
002C2Er 3  00 00 00 81  
002C32r 3  81 42 00 81  
002C4Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,64,32,160,80,64,32,64,32,0,15,192,63,224,127,192,57,128,31,32,79,32,64,32,73,32,73
002C4Er 3  00 00 40 20  
002C52r 3  A0 50 40 20  
002C6Ar 3  00 00 0F F0          .byte 0,0,15,240,17,136,46,116,95,250,87,186,95,250,46,116,17,136,14,112,32,4,36,36,36,36,18,72,18,72,0,0
002C6Er 3  11 88 2E 74  
002C72r 3  5F FA 57 BA  
002C8Ar 3  00 00 03 FC          .byte 0,0,3,252,4,98,11,157,151,254,149,238,151,254,11,157,4,98,3,156,8,1,9,9,9,9,4,146,4,146,0,0
002C8Er 3  04 62 0B 9D  
002C92r 3  97 FE 95 EE  
002CAAr 3  00 00 00 FF          .byte 0,0,0,255,129,24,66,231,165,255,165,123,165,255,66,231,129,24,0,231,66,0,66,66,66,66,129,36,129,36,0,0
002CAEr 3  81 18 42 E7  
002CB2r 3  A5 FF A5 7B  
002CCAr 3  00 00 C0 3F          .byte 0,0,192,63,32,70,208,185,233,127,233,94,233,127,208,185,32,70,192,57,16,128,144,144,144,144,32,73,32,73,0,0
002CCEr 3  20 46 D0 B9  
002CD2r 3  E9 7F E9 5E  
002CEAr 3  00 00 0F F0          .byte 0,0,15,240,17,136,46,116,95,250,91,218,95,250,46,116,17,136,14,112,32,4,36,36,36,36,36,36,36,36,0,0
002CEEr 3  11 88 2E 74  
002CF2r 3  5F FA 5B DA  
002D0Ar 3  00 00 03 FC          .byte 0,0,3,252,4,98,11,157,151,254,150,246,151,254,11,157,4,98,3,156,8,1,9,9,9,9,9,9,9,9,0,0
002D0Er 3  04 62 0B 9D  
002D12r 3  97 FE 96 F6  
002D2Ar 3  00 00 00 FF          .byte 0,0,0,255,129,24,66,231,165,255,165,189,165,255,66,231,129,24,0,231,66,0,66,66,66,66,66,66,66,66,0,0
002D2Er 3  81 18 42 E7  
002D32r 3  A5 FF A5 BD  
002D4Ar 3  00 00 C0 3F          .byte 0,0,192,63,32,70,208,185,233,127,105,111,233,127,208,185,32,70,192,57,16,128,144,144,144,144,144,144,144,144,0,0
002D4Er 3  20 46 D0 B9  
002D52r 3  E9 7F 69 6F  
002D6Ar 3  00 00 0F F0          .byte 0,0,15,240,17,136,46,116,95,250,93,234,95,250,46,116,17,136,14,112,32,4,36,36,36,36,72,18,72,18,0,0
002D6Er 3  11 88 2E 74  
002D72r 3  5F FA 5D EA  
002D8Ar 3  00 00 03 FC          .byte 0,0,3,252,4,98,11,157,151,254,151,122,151,254,11,157,4,98,3,156,8,1,9,9,9,9,146,4,146,4,0,0
002D8Er 3  04 62 0B 9D  
002D92r 3  97 FE 97 7A  
002DAAr 3  00 00 00 FF          .byte 0,0,0,255,129,24,66,231,165,255,165,222,165,255,66,231,129,24,0,231,66,0,66,66,66,66,36,129,36,129,0,0
002DAEr 3  81 18 42 E7  
002DB2r 3  A5 FF A5 DE  
002DCAr 3  00 00 C0 3F          .byte 0,0,192,63,32,70,208,185,233,127,169,119,233,127,208,185,32,70,192,57,16,128,144,144,144,144,73,32,73,32,0,0
002DCEr 3  20 46 D0 B9  
002DD2r 3  E9 7F A9 77  
002DEAr 3  00 00 0F F0          .byte 0,0,15,240,17,136,46,116,95,250,91,218,95,250,46,116,17,136,14,112,32,4,36,36,36,36,36,36,36,36,0,0
002DEEr 3  11 88 2E 74  
002DF2r 3  5F FA 5B DA  
002E0Ar 3  00 00 03 FC          .byte 0,0,3,252,4,98,11,157,151,254,150,246,151,254,11,157,4,98,3,156,8,1,9,9,9,9,9,9,9,9,0,0
002E0Er 3  04 62 0B 9D  
002E12r 3  97 FE 96 F6  
002E2Ar 3  00 00 00 FF          .byte 0,0,0,255,129,24,66,231,165,255,165,189,165,255,66,231,129,24,0,231,66,0,66,66,66,66,66,66,66,66,0,0
002E2Er 3  81 18 42 E7  
002E32r 3  A5 FF A5 BD  
002E4Ar 3  00 00 C0 3F          .byte 0,0,192,63,32,70,208,185,233,127,105,111,233,127,208,185,32,70,192,57,16,128,144,144,144,144,144,144,144,144,0,0
002E4Er 3  20 46 D0 B9  
002E52r 3  E9 7F 69 6F  
002E6Ar 3               frmlst:
002E6Ar 3  00 04                .byte 0,4
002E6Cr 3  04 04                .byte 4,4
002E6Er 3  08 04                .byte 8,4
002E70r 3  0C 02                .byte 12,2
002E72r 3  0E 01                .byte 14,1
002E74r 3  0F 04                .byte 15,4
002E76r 3  13 04 17 00          .byte 19,4,23,0
002E7Ar 3               scdat:
002E7Ar 3  60 01 74 01          .word 352,372,369,385,374,378,373,364,383,388
002E7Er 3  71 01 81 01  
002E82r 3  76 01 7A 01  
002E8Er 3  FF 01 16 0A          .byte 255,1,22,10,4,4,4,5,5,5,4,10,5,5,255,4,5,5,5,5,4,4,10,9,4,2,2,3,3,3,2,9,5
002E92r 3  04 04 04 05  
002E96r 3  05 05 04 0A  
002EAFr 3  03 FF 02 05          .byte 3,255,2,5,3,3,3,2,2,9,9,4,2,2,3,3,3,2,9,5,3,255,2,5,3,3,3,2,2,9,9,5,3,3
002EB3r 3  03 03 03 02  
002EB7r 3  02 09 09 04  
002ED1r 3  02 02 02 03          .byte 2,2,2,3,9,4,2,255,3,5,2,2,2,3,3,9,9,5,3,3,255,1,11,5,3,5,1,1,1,9,9,5,3,3
002ED5r 3  09 04 02 FF  
002ED9r 3  03 05 02 02  
002EF3r 3  04 04 04 06          .byte 4,4,4,6,5,4,4,10,5,5,255,4,5,5,3,9,9,4,2,2,3,3,3,2,2,2,3,9,4,2,255,3,5
002EF7r 3  05 04 04 0A  
002EFBr 3  05 05 FF 04  
002F14r 3  02 02 09 09          .byte 2,2,9,9,4,2,2,3,3,3,2,2,2,3,9,4,2,255,3,5,2,2,9,9,4,2,2,3,3,3,2,2,2
002F18r 3  04 02 02 03  
002F1Cr 3  03 03 02 02  
002F35r 3  03 09 04 02          .byte 3,9,4,2,255,3,5,2,2,9,9,5,3,3,255,1,8,5,3,2,255,1,6,9,9,5,3,3,4,4,4,5,5
002F39r 3  FF 03 05 02  
002F3Dr 3  02 09 09 05  
002F56r 3  06 04 0A 05          .byte 6,4,10,5,3,2,255,4,4,5,5,9,9,5,3,3,2,2,2,3,3,3,2,9,5,3,255,2,5,3,3,9,9
002F5Ar 3  03 02 FF 04  
002F5Er 3  04 05 05 09  
002F77r 3  04 02 02 03          .byte 4,2,2,3,3,3,2,2,2,3,9,4,2,255,3,5,2,2,9,9,4,2,2,3,3,3,2,2,2,3,9,4,2
002F7Br 3  03 03 02 02  
002F7Fr 3  02 03 09 04  
002F98r 3  FF 03 05 02          .byte 255,3,5,2,2,9,9,4,2,2,255,1,14,4,4,4,9,9,5,3,3,4,7,4,6,6,4,4,10,0,0,5,5
002F9Cr 3  02 09 09 04  
002FA0r 3  02 02 FF 01  
002FB9r 3  04 04 04 05          .byte 4,4,4,5,5,9,9,5,3,3,2,2,2,3,3,2,2,9,0,0,5,3,2,2,2,3,3,9,9,5,3,3,2,2,2
002FBDr 3  05 09 09 05  
002FC1r 3  03 03 02 02  
002FDCr 3  03 03 02 02          .byte 3,3,2,2,9,0,0,5,3,2,2,2,3,3,9,255,1,22
002FE0r 3  09 00 00 05  
002FE4r 3  03 02 02 02  
002FEEr 3  FF 01 16 0A          .byte 255,1,22,10,4,4,4,5,5,5,4,4,4,10,5,5,4,4,4,5,5,5,4,4,10,9,4,2,2,3,3,3,2,2,2
002FF2r 3  04 04 04 05  
002FF6r 3  05 05 04 04  
003011r 3  09 05 03 02          .byte 9,5,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,9,5,3,2,2,2,3,3,3,2,2
003015r 3  02 02 03 03  
003019r 3  03 02 02 09  
003032r 3  09 09 05 03          .byte 9,9,5,3,3,2,2,2,3,3,3,9,4,2,3,3,3,2,2,2,3,3,9,9,255,1,15,4,2,2,1,1,9,9
003036r 3  03 02 02 02  
00303Ar 3  03 03 03 09  
003054r 3  05 06 05 07          .byte 5,6,5,7,7,4,5,5,5,10,255,8,4,10,4,2,2,5,5,9,9,4,2,2,3,3,3,2,2,2,9,8,11,11,11
003058r 3  07 04 05 05  
00305Cr 3  05 0A FF 08  
003077r 3  09 03 03 03          .byte 9,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,9,8,11,11,11,9,3,3,3,2,2,9,9,4,2,2
00307Br 3  02 02 09 09  
00307Fr 3  04 02 02 03  
003098r 3  03 03 03 02          .byte 3,3,3,2,2,2,9,8,11,11,11,9,3,3,3,2,2,9,9,255,1,17,2,2,2,9,9,5,5,5,4,4,4
00309Cr 3  02 02 09 08  
0030A0r 3  0B 0B 0B 09  
0030B9r 3  05 05 06 07          .byte 5,5,6,7,7,4,10,5,6,4,4,4,5,5,9,9,5,3,3,2,2,2,3,3,3,2,2,2,9,5,3,2,2,2
0030BDr 3  07 04 0A 05  
0030C1r 3  06 04 04 04  
0030DBr 3  03 03 09 09          .byte 3,3,9,9,4,2,2,3,3,3,2,2,2,3,3,3,9,4,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2
0030DFr 3  04 02 02 03  
0030E3r 3  03 03 02 02  
0030FEr 3  03 03 03 09          .byte 3,3,3,9,4,2,3,3,3,2,2,9,9,255,1,4,3,3,2,2,255,1,5,4,2,3,3,3,2,2,9,9,5,5,5
003102r 3  04 02 03 03  
003106r 3  03 02 02 09  
003121r 3  04 04 02 03          .byte 4,4,2,3,3,6,4,4,4,6,5,3,2,2,2,3,3,9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3
003125r 3  03 06 04 04  
003129r 3  04 06 05 03  
003143r 3  02 02 02 03          .byte 2,2,2,3,3,9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,9,255,1,22
003147r 3  03 09 09 05  
00314Br 3  03 03 02 02  
003162r 3  FF 01 16 0A          .byte 255,1,22,10,4,4,4,5,5,5,4,4,10,5,5,5,4,4,4,5,5,5,4,4,10,9,4,2,2,3,3,3,2,2
003166r 3  04 04 04 05  
00316Ar 3  05 05 04 04  
003184r 3  09 05 03 03          .byte 9,5,3,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,9,5,3,3,2,2,2,3,3,3,2,2
003188r 3  02 02 02 03  
00318Cr 3  03 03 02 02  
0031A6r 3  09 09 05 03          .byte 9,9,5,3,3,2,2,2,3,3,9,4,2,2,3,3,3,2,2,2,3,3,9,9,255,1,9,4,2,2,255,1,8
0031AAr 3  03 02 02 02  
0031AEr 3  03 03 09 04  
0031C7r 3  09 09 05 06          .byte 9,9,5,6,5,6,4,4,5,5,5,4,2,2,10,5,5,4,4,4,5,6,9,9,4,2,2,3,3,3,2,2,2
0031CBr 3  05 06 04 04  
0031CFr 3  05 05 05 04  
0031E8r 3  03 03 03 09          .byte 3,3,3,9,4,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,9,4,2,3,3,3,2,2
0031ECr 3  04 02 03 03  
0031F0r 3  03 02 02 09  
003209r 3  09 09 04 02          .byte 9,9,4,2,2,3,3,3,2,2,2,3,3,3,9,4,2,3,3,3,2,2,9,9,255,1,6,5,3,255,1,12,9,9
00320Dr 3  02 03 03 03  
003211r 3  02 02 02 03  
00322Br 3  05 05 05 04          .byte 5,5,5,4,7,7,5,3,10,4,7,4,6,5,6,4,7,7,5,5,9,9,5,3,3,2,2,2,3,3,9,4,2,2
00322Fr 3  07 07 05 03  
003233r 3  0A 04 07 04  
00324Dr 3  03 03 03 02          .byte 3,3,3,2,2,2,3,3,9,9,4,2,2,3,3,3,2,2,9,5,3,3,2,2,2,3,3,3,2,2,9,9,4
003251r 3  02 02 03 03  
003255r 3  09 09 04 02  
00326Er 3  02 02 03 03          .byte 2,2,3,3,3,2,2,9,5,3,3,2,2,2,3,3,3,2,2,9,9,255,1,4,5,3,2,2,255,1,12,9,9
003272r 3  03 02 02 09  
003276r 3  05 03 03 02  
00328Fr 3  05 05 05 04          .byte 5,5,5,4,4,2,3,3,6,7,4,7,10,5,5,6,4,6,6,5,9,9,5,3,3,2,2,2,3,3,3,2,2,2
003293r 3  04 02 03 03  
003297r 3  06 07 04 07  
0032B1r 3  09 05 03 02          .byte 9,5,3,2,2,2,3,3,9,9,5,3,3,2,2,2,3,3,3,2,2,2,9,5,3,2,2,2,3,3,9,255,1,22
0032B5r 3  02 02 03 03  
0032B9r 3  09 09 05 03  
0032D3r 3  FF 01 16 0A          .byte 255,1,22,10,4,4,4,5,5,5,4,4,4,5,5,5,4,4,4,5,5,5,4,4,10,9,4,2,2,3,3,3,2,2,2
0032D7r 3  04 04 04 05  
0032DBr 3  05 05 04 04  
0032F6r 3  03 03 03 02          .byte 3,3,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2
0032FAr 3  02 02 03 03  
0032FEr 3  03 02 02 09  
003317r 3  09 09 05 03          .byte 9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,9,9,255,1,6,3,3,3,2,2,2
00331Br 3  03 02 02 02  
00331Fr 3  03 03 03 02  
003338r 3  03 03 03 01          .byte 3,3,3,1,1,1,2,2,9,9,5,6,6,4,7,4,1,1,1,2,2,2,3,3,3,2,2,9,3,3,9,9,4
00333Cr 3  01 01 02 02  
003340r 3  09 09 05 06  
003359r 3  02 02 03 03          .byte 2,2,3,3,3,4,7,4,1,1,1,4,2,2,3,3,9,2,2,9,9,4,2,2,3,3,3,2,2,2,10,5,6
00335Dr 3  03 04 07 04  
003361r 3  01 01 01 04  
00337Ar 3  01 01 01 03          .byte 1,1,1,3,3,9,2,2,9,9,4,2,2,3,3,3,2,2,2,9,5,3,4,7,4,2,2,9,2,2,9,9,255,1,10
00337Er 3  03 09 02 02  
003382r 3  09 09 04 02  
00339Dr 3  04 02 03 03          .byte 4,2,3,3,3,1,1,1,2,2,9,9,5,5,5,4,7,4,6,5,6,10,4,2,3,3,3,7,4,7,5,5,9,9
0033A1r 3  03 01 01 01  
0033A5r 3  02 02 09 09  
0033BFr 3  05 03 03 02          .byte 5,3,3,2,2,2,3,3,3,9,4,2,3,3,3,2,2,2,3,3,9,9,4,2,2,3,3,3,2,2,2,9,5
0033C3r 3  02 02 03 03  
0033C7r 3  03 09 04 02  
0033E0r 3  03 02 02 02          .byte 3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,9,5,3,2,2,2,3,3,3,2,2,9,9
0033E4r 3  03 03 03 02  
0033E8r 3  02 09 09 04  
003401r 3  FF 01 0A 05          .byte 255,1,10,5,3,2,2,2,3,3,3,2,2,9,9,5,6,6,4,7,4,5,5,5,7,4,2,3,3,3,2,2,2
003405r 3  03 02 02 02  
003409r 3  03 03 03 02  
003422r 3  03 03 09 09          .byte 3,3,9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,9,9,5,3,3,2,2,2,3,3,3
003426r 3  05 03 03 02  
00342Ar 3  02 02 03 03  
003445r 3  02 02 02 03          .byte 2,2,2,3,3,3,2,2,2,3,3,9,255,1,22
003449r 3  03 03 02 02  
00344Dr 3  02 03 03 09  
003454r 3  FF 01 16 0A          .byte 255,1,22,10,4,4,4,5,5,5,4,4,4,5,5,5,4,4,4,5,5,5,4,4,10,9,4,2,2,3,3,3,2,2,2
003458r 3  04 04 04 05  
00345Cr 3  05 05 04 04  
003477r 3  03 03 03 02          .byte 3,3,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2
00347Br 3  02 02 03 03  
00347Fr 3  03 02 02 09  
003498r 3  09 09 05 03          .byte 9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,9,9,255,1,4,5,3,3,2,2,2
00349Cr 3  03 02 02 02  
0034A0r 3  03 03 03 02  
0034B9r 3  03 03 03 FF          .byte 3,3,3,255,2,5,3,3,9,9,8,8,8,10,5,3,3,2,2,2,3,3,3,255,2,5,3,3,9,9,8,11,11
0034BDr 3  02 05 03 03  
0034C1r 3  09 09 08 08  
0034DAr 3  09 04 02 02          .byte 9,4,2,2,3,3,3,2,2,2,3,3,3,255,2,4,9,9,8,11,11,9,4,2,2,3,3,3,2,2,2,3,3,3
0034DEr 3  03 03 03 02  
0034E2r 3  02 02 03 03  
0034FCr 3  FF 02 04 09          .byte 255,2,4,9,9,8,11,11,9,4,2,2,13,13,13,14,14,14,13,255,2,6,9,9,255,1,6,255,12,8,255,1,4
003500r 3  09 08 0B 0B  
003504r 3  09 04 02 02  
00351Dr 3  02 02 09 09          .byte 2,2,9,9,5,6,6,4,7,4,6,5,6,4,4,4,5,4,10,5,5,6,4,2,9,9,5,3,3,2,2,2,3,3,3
003521r 3  05 06 06 04  
003525r 3  07 04 06 05  
003540r 3  02 02 02 03          .byte 2,2,2,3,2,9,3,3,5,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,3,9,2,2,2,3,3
003544r 3  02 09 03 03  
003548r 3  05 02 02 09  
003561r 3  09 09 04 02          .byte 9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,3,9,2,2,2,3,3,9,9,4,2,2,255,1,12,2,2,2
003565r 3  02 03 03 03  
003569r 3  02 02 02 03  
003582r 3  01 01 09 09          .byte 1,1,9,9,5,3,3,10,4,7,5,6,5,4,4,7,5,6,5,2,4,2,2,5,9,9,5,3,3,9,4,2,3,3,3
003586r 3  05 03 03 0A  
00358Ar 3  04 07 05 06  
0035A5r 3  02 02 02 03          .byte 2,2,2,3,3,3,2,2,2,3,3,9,9,5,3,3,9,4,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3
0035A9r 3  03 03 02 02  
0035ADr 3  02 03 03 09  
0035C6r 3  09 FF 01 16          .byte 9,255,1,22
0035CAr 3  FF 01 16 0A          .byte 255,1,22,10,4,4,4,5,5,5,4,4,4,5,5,5,4,4,4,5,5,5,4,4,10,9,4,2,2,3,3,3,2,2,2
0035CEr 3  04 04 04 05  
0035D2r 3  05 05 04 04  
0035EDr 3  03 03 03 02          .byte 3,3,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2
0035F1r 3  02 02 03 03  
0035F5r 3  03 02 02 09  
00360Er 3  09 09 05 03          .byte 9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,9,9,255,1,7,5,3,1,1,1,5
003612r 3  03 02 02 02  
003616r 3  03 03 03 02  
00362Fr 3  03 03 02 FF          .byte 3,3,2,255,1,4,9,9,5,6,5,7,7,4,6,5,3,4,4,4,5,3,3,2,2,2,6,5,9,9,4,2,2
003633r 3  01 04 09 09  
003637r 3  05 06 05 07  
003650r 3  03 03 03 02          .byte 3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,2,2
003654r 3  02 02 03 03  
003658r 3  03 02 02 02  
003672r 3  03 03 03 02          .byte 3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,9,9,255,1,4,4
003676r 3  02 09 09 04  
00367Ar 3  02 02 03 03  
003693r 3  02 03 03 03          .byte 2,3,3,3,2,1,1,5,3,3,2,255,1,4,9,9,5,6,5,7,4,2,3,3,3,2,4,4,5,3,3,2,6
003697r 3  02 01 01 05  
00369Br 3  03 03 02 FF  
0036B4r 3  02 05 05 09          .byte 2,5,5,9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,9,9,4,2,2,3,3,3
0036B8r 3  09 05 03 03  
0036BCr 3  02 02 02 03  
0036D5r 3  02 02 02 03          .byte 2,2,2,3,3,3,2,2,2,3,3,3,2,2,9,9,4,2,2,3,3,3,2,2,2,3,3,3,2,2,2,3,3,3
0036D9r 3  03 03 02 02  
0036DDr 3  02 03 03 03  
0036F7r 3  02 02 09 09          .byte 2,2,9,9,255,1,7,4,2,3,255,1,10,9,9,5,5,5,4,4,4,5,5,3,2,4,4,5,5,10,255,11,5
0036FBr 3  FF 01 07 04  
0036FFr 3  02 03 FF 01  
003718r 3  09 09 05 03          .byte 9,9,5,3,3,2,2,2,3,3,3,2,2,2,3,3,9,255,11,5,9,9,5,3,3,2,2,2,3,3,3,2,2,2
00371Cr 3  03 02 02 02  
003720r 3  03 03 03 02  
00373Ar 3  03 03 09 FF          .byte 3,3,9,255,11,5,9,255,1,22
00373Er 3  0B 05 09 FF  
003742r 3  01 16        
003744r 3  FF 01 16 0A          .byte 255,1,22,10,17,17,17,0,0,0,17,17,10,0,0,0,17,17,17,0,0,0,17,17,10,9,17,16,16,0,0,0,16,16
003748r 3  11 11 11 00  
00374Cr 3  00 00 11 11  
003766r 3  09 00 00 00          .byte 9,0,0,0,16,16,16,0,0,0,16,16,9,9,17,16,16,0,0,0,16,16,9,0,0,0,16,16,16,0,0,0,16,16
00376Ar 3  10 10 10 00  
00376Er 3  00 00 10 10  
003788r 3  09 09 00 00          .byte 9,9,0,0,0,16,16,16,0,0,9,16,16,16,0,0,0,16,16,16,0,0,9,9,0,0,255,1,7,17,16,16,255,1,4
00378Cr 3  00 10 10 10  
003790r 3  00 00 09 10  
0037ABr 3  10 00 00 00          .byte 16,0,0,0,9,9,0,0,0,19,19,17,0,0,10,17,16,16,0,0,0,18,16,17,0,0,9,9,17,16,16,0,0,0
0037AFr 3  09 09 00 00  
0037B3r 3  00 13 13 11  
0037CDr 3  10 10 09 00          .byte 16,16,9,0,0,0,16,16,16,0,0,0,16,16,9,9,17,16,16,0,0,0,16,16,9,0,0,0,16,16,16,0,0,0
0037D1r 3  00 00 10 10  
0037D5r 3  10 00 00 00  
0037EFr 3  10 10 09 09          .byte 16,16,9,9,17,16,16,0,0,0,16,16,9,0,0,0,16,16,16,0,0,0,16,16,9,9,1,1,0,16,16,255,1,9
0037F3r 3  11 10 10 00  
0037F7r 3  00 00 10 10  
003811r 3  00 10 FF 01          .byte 0,16,255,1,4,9,9,0,18,0,16,16,17,0,0,18,17,19,19,0,0,0,16,18,18,19,19,9,9,0,0,0,16,16,16
003815r 3  04 09 09 00  
003819r 3  12 00 10 10  
003834r 3  00 00 00 10          .byte 0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,9,17,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0
003838r 3  10 10 00 00  
00383Cr 3  00 10 10 10  
003856r 3  10 10 09 09          .byte 16,16,9,9,17,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,9,9,255,1,20,9,9,0,18
00385Ar 3  11 10 10 00  
00385Er 3  00 00 10 10  
003877r 3  00 13 11 13          .byte 0,19,17,19,0,18,0,19,17,19,0,18,0,19,19,17,0,0,9,9,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0
00387Br 3  00 12 00 13  
00387Fr 3  11 13 00 12  
00389Ar 3  10 10 10 00          .byte 16,16,16,0,0,9,9,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,255,1,22
00389Er 3  00 09 09 00  
0038A2r 3  00 00 10 10  
0038B9r 3  FF 01 16 0A          .byte 255,1,22,10,17,17,17,0,0,0,17,17,10,17,0,0,0,17,17,0,0,0,17,17,10,9,17,16,16,0,0,0,16,16
0038BDr 3  11 11 11 00  
0038C1r 3  00 00 11 11  
0038DBr 3  09 10 11 10          .byte 9,16,17,16,255,0,6,16,16,9,9,17,16,16,0,0,0,16,16,9,16,17,16,255,0,6,16,16,9,9,0,0,0
0038DFr 3  FF 00 06 10  
0038E3r 3  10 09 09 11  
0038FCr 3  10 10 10 00          .byte 16,16,16,0,0,9,255,0,6,16,16,16,0,0,9,9,0,0,0,16,16,16,0,0,255,1,4,0,0,255,1,6,9,9
003900r 3  00 09 FF 00  
003904r 3  06 10 10 10  
00391Er 3  00 00 00 10          .byte 0,0,0,16,16,16,0,0,18,0,16,16,0,0,19,17,19,19,0,0,9,9,17,16,16,0,0,0,16,16,16,0,0,0
003922r 3  10 10 00 00  
003926r 3  12 00 10 10  
003940r 3  10 10 10 00          .byte 16,16,16,0,0,0,16,16,9,9,17,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,9,9,17
003944r 3  00 00 10 10  
003948r 3  09 09 11 10  
003961r 3  10 10 14 14          .byte 16,16,20,20,20,21,21,21,16,16,16,255,20,6,0,0,9,9,1,1,1,255,12,6,1,1,1,255,12,6,0,0,9,9
003965r 3  14 15 15 15  
003969r 3  10 10 10 FF  
003983r 3  00 00 00 11          .byte 0,0,0,17,17,17,0,0,10,255,8,4,10,17,17,255,0,4,9,9,0,0,0,16,16,16,0,0,9,8,11,11,11
003987r 3  11 11 00 00  
00398Br 3  0A FF 08 04  
0039A4r 3  09 00 00 10          .byte 9,0,0,16,16,0,0,9,9,17,16,16,0,0,0,16,16,9,8,11,11,11,9,255,0,4,16,16,9,9,17,16,16
0039A8r 3  10 00 00 09  
0039ACr 3  09 11 10 10  
0039C5r 3  00 00 00 10          .byte 0,0,0,16,16,9,8,11,11,11,9,255,0,4,16,16,9,9,255,1,14,0,0,255,1,4,9,9,0,0,0,19,17
0039C9r 3  10 09 08 0B  
0039CDr 3  0B 0B 09 FF  
0039E6r 3  13 12 00 12          .byte 19,18,0,18,19,17,19,18,0,0,0,17,16,18,0,9,9,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,16
0039EAr 3  13 11 13 12  
0039EEr 3  00 00 00 11  
003A09r 3  00 00 09 09          .byte 0,0,9,9,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,255,1,22
003A0Dr 3  00 00 00 10  
003A11r 3  10 10 00 00  
003A25r 3  FF 01 16 0A          .byte 255,1,22,10,17,17,17,0,0,0,17,17,17,0,0,0,17,17,17,0,0,0,17,17,10,9,17,16,16,0,0,0,16,16,16
003A29r 3  11 11 11 00  
003A2Dr 3  00 00 11 11  
003A48r 3  00 00 00 10          .byte 0,0,0,16,16,16,0,0,0,16,16,9,9,17,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16
003A4Cr 3  10 10 00 00  
003A50r 3  00 10 10 09  
003A69r 3  09 09 00 00          .byte 9,9,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,9,255,1,12,0,0,0,17,16,16
003A6Dr 3  00 10 10 10  
003A71r 3  00 00 00 10  
003A8Ar 3  01 01 09 09          .byte 1,1,9,9,0,18,18,19,17,10,8,10,17,0,19,18,0,17,0,17,1,1,0,0,9,9,17,16,16,0,0,1,1,1
003A8Er 3  00 12 12 13  
003A92r 3  11 0A 08 0A  
003AACr 3  FF 00 04 10          .byte 255,0,4,16,16,1,1,0,18,0,0,9,9,17,16,16,0,0,0,17,19,17,255,0,5,16,19,0,0,17,17,9,9
003AB0r 3  10 01 01 00  
003AB4r 3  12 00 00 09  
003ACDr 3  11 10 10 00          .byte 17,16,16,0,0,0,16,16,0,0,255,1,4,255,0,4,17,16,9,9,0,0,0,16,16,16,0,0,1,1,0,0,18
003AD1r 3  00 00 10 10  
003AD5r 3  00 00 FF 01  
003AEEr 3  00 00 11 00          .byte 0,0,17,0,17,1,1,9,9,0,0,0,16,16,16,0,0,0,19,17,17,0,0,0,16,16,16,0,0,9,9,0,0,0
003AF2r 3  11 01 01 09  
003AF6r 3  09 00 00 00  
003B10r 3  10 10 10 00          .byte 16,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,9,17,16,16,0,0,0,16,16,16,0,0,0,16,16,16
003B14r 3  00 00 10 10  
003B18r 3  10 00 00 00  
003B32r 3  00 00 00 10          .byte 0,0,0,16,16,9,9,17,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,9,9,1,1,1,0,0,0
003B36r 3  10 09 09 11  
003B3Ar 3  10 10 00 00  
003B55r 3  10 10 10 00          .byte 16,16,16,0,0,0,16,16,1,1,0,0,1,1,9,9,8,8,8,1,1,1,0,16,16,16,255,0,5,16,16,16,0,0
003B59r 3  00 00 10 10  
003B5Dr 3  01 01 00 00  
003B77r 3  09 09 08 0B          .byte 9,9,8,11,11,10,0,0,1,1,1,255,0,6,16,16,16,0,0,9,9,8,11,11,9,0,0,17,0,0,1,1,1
003B7Br 3  0B 0A 00 00  
003B7Fr 3  01 01 01 FF  
003B98r 3  00 00 00 10          .byte 0,0,0,16,16,16,0,0,9,255,1,22
003B9Cr 3  10 10 00 00  
003BA0r 3  09 FF 01 16  
003BA4r 3  FF 01 16 0A          .byte 255,1,22,10,17,17,0,0,0,17,17,10,0,0,0,17,17,17,0,0,0,17,17,0,10,9,17,16,0,0,0,16,16
003BA8r 3  11 11 00 00  
003BACr 3  00 11 11 0A  
003BC5r 3  09 00 00 00          .byte 9,0,0,0,16,16,16,0,0,0,16,16,0,9,9,17,16,0,0,0,16,16,9,0,0,0,16,16,16,0,0,0,16,16
003BC9r 3  10 10 10 00  
003BCDr 3  00 00 10 10  
003BE7r 3  00 09 09 00          .byte 0,9,9,0,0,16,16,16,0,0,9,16,16,16,0,0,0,16,16,16,0,0,0,9,9,1,0,0,255,1,5,16,16
003BEBr 3  00 10 10 10  
003BEFr 3  00 00 09 10  
003C08r 3  FF 01 04 00          .byte 255,1,4,0,0,255,1,4,9,9,0,0,0,17,17,17,0,0,0,16,18,16,0,18,0,17,18,19,0,18,9,9,17
003C0Cr 3  00 FF 01 04  
003C10r 3  09 09 00 00  
003C29r 3  10 10 00 00          .byte 16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,9,9,17,16,16,0,0,0,16,16,16,0,0,0
003C2Dr 3  00 10 10 10  
003C31r 3  00 00 00 10  
003C4Ar 3  10 10 10 00          .byte 16,16,16,0,0,0,16,16,9,9,17,16,16,0,0,21,21,21,20,20,20,255,0,7,16,16,9,9,1,0,0,1,1
003C4Er 3  00 00 10 10  
003C52r 3  09 09 11 10  
003C6Br 3  FF 16 06 01          .byte 255,22,6,1,1,1,0,0,255,1,4,9,9,0,0,0,19,17,19,0,19,17,10,18,19,0,17,17,0,0,18,0,0
003C6Fr 3  01 01 00 00  
003C73r 3  FF 01 04 09  
003C8Cr 3  09 09 00 00          .byte 9,9,0,0,0,16,16,0,0,16,16,9,0,0,0,16,16,16,255,0,4,9,9,17,16,16,0,0,0,16,0,0,9
003C90r 3  00 10 10 00  
003C94r 3  00 10 10 09  
003CADr 3  10 10 10 00          .byte 16,16,16,0,0,0,16,16,0,0,9,9,17,16,16,0,0,0,16,0,0,9,16,16,16,0,0,0,16,16,0,0,9,9
003CB1r 3  00 00 10 10  
003CB5r 3  00 00 09 09  
003CCFr 3  01 10 10 00          .byte 1,16,16,0,0,0,16,1,1,1,0,0,255,1,4,0,0,1,1,9,9,0,0,0,16,16,16,0,0,0,19,17,0
003CD3r 3  00 00 10 01  
003CD7r 3  01 01 00 00  
003CF0r 3  13 00 00 11          .byte 19,0,0,17,0,17,0,0,9,9,0,0,0,16,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,9,0,0,0
003CF4r 3  00 11 00 00  
003CF8r 3  09 09 00 00  
003D13r 3  10 10 10 00          .byte 16,16,16,0,0,0,16,16,16,0,0,0,16,16,16,0,0,9,255,1,22
003D17r 3  00 00 10 10  
003D1Br 3  10 00 00 00  
003D28r 3               numsc:
003D28r 3  0A                   .byte 10
003D29r 3               nmedat:
003D29r 3  00 00 18 30          .byte 0,0,24,48,2,2,64,152,2,2,64,40,2,2,104,72,255
003D2Dr 3  02 02 40 98  
003D31r 3  02 02 40 28  
003D3Ar 3  00 00 20 60          .byte 0,0,32,96,2,2,112,152,2,1,144,56,255
003D3Er 3  02 02 70 98  
003D42r 3  02 01 90 38  
003D47r 3  00 00 90 98          .byte 0,0,144,152,2,1,112,112,2,2,64,32,255
003D4Br 3  02 01 70 70  
003D4Fr 3  02 02 40 20  
003D54r 3  00 00 20 10          .byte 0,0,32,16,3,2,40,112,2,2,96,128,2,1,144,72,3,2,120,128,255
003D58r 3  03 02 28 70  
003D5Cr 3  02 02 60 80  
003D69r 3  00 00 20 10          .byte 0,0,32,16,3,2,32,104,3,2,48,128,2,1,144,120,2,1,112,96,255
003D6Dr 3  03 02 20 68  
003D71r 3  03 02 30 80  
003D7Er 3  00 00 90 10          .byte 0,0,144,16,8,3,32,152,2,2,104,112,2,2,64,72,3,2,104,64,255
003D82r 3  08 03 20 98  
003D86r 3  02 02 68 70  
003D93r 3  00 00 90 10          .byte 0,0,144,16,1,1,112,24,1,1,112,144,1,1,112,88,8,3,72,152,255
003D97r 3  01 01 70 18  
003D9Br 3  01 01 70 90  
003DA8r 3  00 00 48 08          .byte 0,0,72,8,3,2,32,32,3,2,48,104,2,1,144,24,8,3,104,56,255
003DACr 3  03 02 20 20  
003DB0r 3  03 02 30 68  
003DBDr 3  00 00 70 10          .byte 0,0,112,16,3,2,80,56,3,2,96,104,2,1,144,152,3,2,24,104,255
003DC1r 3  03 02 50 38  
003DC5r 3  03 02 60 68  
003DD2r 3  00 00 20 08          .byte 0,0,32,8,8,3,24,48,2,5,144,64,2,2,104,112,3,2,32,72,255
003DD6r 3  08 03 18 30  
003DDAr 3  02 05 90 40  
003DE7r 3               NUMOBJ = 31
003DE7r 3               objdta:
003DE7r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,0,144,96,0,144,96
003DEBr 3  7F FE 80 01  
003DEFr 3  B5 5D A5 49  
003E0Er 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,1,32,8,1,32,8
003E12r 3  7F FE 80 01  
003E16r 3  B5 5D A5 49  
003E35r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,2,32,8,2,32,8
003E39r 3  7F FE 80 01  
003E3Dr 3  B5 5D A5 49  
003E5Cr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,3,72,58,3,72,58
003E60r 3  7F FE 80 01  
003E64r 3  B5 5D A5 49  
003E83r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,4,144,8,4,144,8
003E87r 3  7F FE 80 01  
003E8Br 3  B5 5D A5 49  
003EAAr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,5,32,8,5,32,8
003EAEr 3  7F FE 80 01  
003EB2r 3  B5 5D A5 49  
003ED1r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,6,72,8,6,72,8
003ED5r 3  7F FE 80 01  
003ED9r 3  B5 5D A5 49  
003EF8r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,7,32,152,7,32,152
003EFCr 3  7F FE 80 01  
003F00r 3  B5 5D A5 49  
003F1Fr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,9,24,152,9,24,152
003F23r 3  7F FE 80 01  
003F27r 3  B5 5D A5 49  
003F46r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,10,144,152,10,144,152
003F4Ar 3  7F FE 80 01  
003F4Er 3  B5 5D A5 49  
003F6Dr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,11,160,152,11,160,152
003F71r 3  7F FE 80 01  
003F75r 3  B5 5D A5 49  
003F94r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,12,48,216,12,48,216
003F98r 3  7F FE 80 01  
003F9Cr 3  B5 5D A5 49  
003FBBr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,13,80,216,13,80,216
003FBFr 3  7F FE 80 01  
003FC3r 3  B5 5D A5 49  
003FE2r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,8,32,8,8,32,8
003FE6r 3  7F FE 80 01  
003FEAr 3  B5 5D A5 49  
004009r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,14,160,216,14,160,216
00400Dr 3  7F FE 80 01  
004011r 3  B5 5D A5 49  
004030r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,15,48,160,15,48,160
004034r 3  7F FE 80 01  
004038r 3  B5 5D A5 49  
004057r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,16,48,96,16,48,96
00405Br 3  7F FE 80 01  
00405Fr 3  B5 5D A5 49  
00407Er 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,17,160,208,17,160,208
004082r 3  7F FE 80 01  
004086r 3  B5 5D A5 49  
0040A5r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,18,48,168,18,48,168
0040A9r 3  7F FE 80 01  
0040ADr 3  B5 5D A5 49  
0040CCr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,19,48,80,19,48,80
0040D0r 3  7F FE 80 01  
0040D4r 3  B5 5D A5 49  
0040F3r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,20,88,216,20,88,216
0040F7r 3  7F FE 80 01  
0040FBr 3  B5 5D A5 49  
00411Ar 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,21,128,96,21,128,96
00411Er 3  7F FE 80 01  
004122r 3  B5 5D A5 49  
004141r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,22,88,24,22,88,24
004145r 3  7F FE 80 01  
004149r 3  B5 5D A5 49  
004168r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,23,160,24,23,160,24
00416Cr 3  7F FE 80 01  
004170r 3  B5 5D A5 49  
00418Fr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,24,160,216,24,160,216
004193r 3  7F FE 80 01  
004197r 3  B5 5D A5 49  
0041B6r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,25,48,24,25,48,24
0041BAr 3  7F FE 80 01  
0041BEr 3  B5 5D A5 49  
0041DDr 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,26,104,24,26,104,24
0041E1r 3  7F FE 80 01  
0041E5r 3  B5 5D A5 49  
004204r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,27,160,216,27,160,216
004208r 3  7F FE 80 01  
00420Cr 3  B5 5D A5 49  
00422Br 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,28,48,72,28,48,72
00422Fr 3  7F FE 80 01  
004233r 3  B5 5D A5 49  
004252r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,29,104,120,29,104,120
004256r 3  7F FE 80 01  
00425Ar 3  B5 5D A5 49  
004279r 3  00 00 00 00          .byte 0,0,0,0,127,254,128,1,181,93,165,73,178,73,165,73,181,73,128,1,127,254,0,0,0,0,0,0,0,0,0,0,1,30,128,24,30,128,24
00427Dr 3  7F FE 80 01  
004281r 3  B5 5D A5 49  
0042A0r 3               font:
0042A0r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0042A4r 3  00 00 00 00  
0042A8r 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0042ACr 3  30 00 30 00  
0042B0r 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0042B4r 3  00 00 00 00  
0042B8r 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0042BCr 3  6C FE 6C 00  
0042C0r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0042C4r 3  7E 1E 7E 18  
0042C8r 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0042CCr 3  30 6E CE 00  
0042D0r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0042D4r 3  7E CC 7E 00  
0042D8r 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0042DCr 3  00 00 00 00  
0042E0r 3  70 40 40 40          .byte 112,64,64,64,64,64,112,0
0042E4r 3  40 40 70 00  
0042E8r 3  38 08 08 08          .byte 56,8,8,8,8,8,56,0
0042ECr 3  08 08 38 00  
0042F0r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0042F4r 3  7E 18 3C 00  
0042F8r 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0042FCr 3  7E 18 18 00  
004300r 3  00 00 00 00          .byte 0,0,0,0,0,0,16,48
004304r 3  00 00 10 30  
004308r 3  00 00 3C 24          .byte 0,0,60,36,36,60,0,0
00430Cr 3  24 3C 00 00  
004310r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
004314r 3  00 38 38 00  
004318r 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
00431Cr 3  18 30 60 00  
004320r 3  FE 82 B2 AA          .byte 254,130,178,170,154,130,254,0
004324r 3  9A 82 FE 00  
004328r 3  FE CE EE EE          .byte 254,206,238,238,238,130,254,0
00432Cr 3  EE 82 FE 00  
004330r 3  FE 82 FA 82          .byte 254,130,250,130,190,130,254,0
004334r 3  BE 82 FE 00  
004338r 3  FE 82 FA E2          .byte 254,130,250,226,250,130,254,0
00433Cr 3  FA 82 FE 00  
004340r 3  FE BE AE AE          .byte 254,190,174,174,130,238,254,0
004344r 3  82 EE FE 00  
004348r 3  FE 82 BE 82          .byte 254,130,190,130,250,130,254,0
00434Cr 3  FA 82 FE 00  
004350r 3  FE BE BE 82          .byte 254,190,190,130,186,130,254,0
004354r 3  BA 82 FE 00  
004358r 3  FE 82 FA FA          .byte 254,130,250,250,250,250,254,0
00435Cr 3  FA FA FE 00  
004360r 3  FE 82 BA 82          .byte 254,130,186,130,186,130,254,0
004364r 3  BA 82 FE 00  
004368r 3  FE 82 BA 82          .byte 254,130,186,130,250,250,254,0
00436Cr 3  FA FA FE 00  
004370r 3  00 30 30 00          .byte 0,48,48,0,48,48,0,0
004374r 3  30 30 00 00  
004378r 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
00437Cr 3  00 30 30 60  
004380r 3  FE 9E BE BE          .byte 254,158,190,190,190,158,254,0
004384r 3  BE 9E FE 00  
004388r 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00438Cr 3  00 7E 00 00  
004390r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
004394r 3  0C 18 30 00  
004398r 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00439Cr 3  18 00 18 00  
0043A0r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0043A4r 3  FE C0 7C 00  
0043A8r 3  FE 82 BA 82          .byte 254,130,186,130,186,186,254,0
0043ACr 3  BA BA FE 00  
0043B0r 3  FE 86 B6 82          .byte 254,134,182,130,186,130,254,0
0043B4r 3  BA 82 FE 00  
0043B8r 3  FE 82 BE BE          .byte 254,130,190,190,190,130,254,0
0043BCr 3  BE 82 FE 00  
0043C0r 3  FE 86 BA BA          .byte 254,134,186,186,186,134,254,0
0043C4r 3  BA 86 FE 00  
0043C8r 3  FE 82 BE 8E          .byte 254,130,190,142,190,130,254,0
0043CCr 3  BE 82 FE 00  
0043D0r 3  FE 82 BE 8E          .byte 254,130,190,142,190,190,254,0
0043D4r 3  BE BE FE 00  
0043D8r 3  FE 82 BE B2          .byte 254,130,190,178,186,130,254,0
0043DCr 3  BA 82 FE 00  
0043E0r 3  FE BA BA 82          .byte 254,186,186,130,186,186,254,0
0043E4r 3  BA BA FE 00  
0043E8r 3  FE 82 EE EE          .byte 254,130,238,238,238,130,254,0
0043ECr 3  EE 82 FE 00  
0043F0r 3  FE 82 FA FA          .byte 254,130,250,250,186,130,254,0
0043F4r 3  BA 82 FE 00  
0043F8r 3  FE BA B6 8E          .byte 254,186,182,142,182,186,254,0
0043FCr 3  B6 BA FE 00  
004400r 3  FE BE BE BE          .byte 254,190,190,190,190,130,254,0
004404r 3  BE 82 FE 00  
004408r 3  FE 82 AA AA          .byte 254,130,170,170,170,186,254,0
00440Cr 3  AA BA FE 00  
004410r 3  FE BA 9A AA          .byte 254,186,154,170,178,186,254,0
004414r 3  B2 BA FE 00  
004418r 3  FE 82 BA BA          .byte 254,130,186,186,186,130,254,0
00441Cr 3  BA 82 FE 00  
004420r 3  FE 86 BA 86          .byte 254,134,186,134,190,190,254,0
004424r 3  BE BE FE 00  
004428r 3  FE 82 BA AA          .byte 254,130,186,170,178,130,254,0
00442Cr 3  B2 82 FE 00  
004430r 3  FE 86 B6 82          .byte 254,134,182,130,186,186,254,0
004434r 3  BA BA FE 00  
004438r 3  FE 82 BE 82          .byte 254,130,190,130,250,130,254,0
00443Cr 3  FA 82 FE 00  
004440r 3  FE 82 EE EE          .byte 254,130,238,238,238,238,254,0
004444r 3  EE EE FE 00  
004448r 3  FE BA BA BA          .byte 254,186,186,186,186,198,254,0
00444Cr 3  BA C6 FE 00  
004450r 3  FE BA BA BA          .byte 254,186,186,186,214,238,254,0
004454r 3  D6 EE FE 00  
004458r 3  FE BA BA AA          .byte 254,186,186,170,170,130,254,0
00445Cr 3  AA 82 FE 00  
004460r 3  FE BA D6 EE          .byte 254,186,214,238,214,186,254,0
004464r 3  D6 BA FE 00  
004468r 3  FE BA BA 82          .byte 254,186,186,130,250,130,254,0
00446Cr 3  FA 82 FE 00  
004470r 3  FE 82 F6 EE          .byte 254,130,246,238,222,130,254,0
004474r 3  DE 82 FE 00  
004478r 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00447Cr 3  18 18 1E 00  
004480r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
004484r 3  30 18 0C 00  
004488r 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00448Cr 3  30 30 F0 00  
004490r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
004494r 3  30 30 30 00  
004498r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00449Cr 3  00 00 00 FF  
0044A0r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0044A4r 3  60 60 FE 00  
0044A8r 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0044ACr 3  7C CC 7C 00  
0044B0r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0044B4r 3  66 66 7C 00  
0044B8r 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0044BCr 3  60 60 3C 00  
0044C0r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0044C4r 3  CC CC 7C 00  
0044C8r 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0044CCr 3  F8 C0 7C 00  
0044D0r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0044D4r 3  30 30 30 00  
0044D8r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0044DCr 3  CC 7C 0C 78  
0044E0r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0044E4r 3  CC CC CC 00  
0044E8r 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0044ECr 3  30 30 78 00  
0044F0r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0044F4r 3  0C 0C 6C 38  
0044F8r 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0044FCr 3  70 78 6C 00  
004500r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
004504r 3  30 30 1C 00  
004508r 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
00450Cr 3  FC FC FC 00  
004510r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
004514r 3  CC CC CC 00  
004518r 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
00451Cr 3  CC CC 78 00  
004520r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
004524r 3  CC F8 C0 C0  
004528r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
00452Cr 3  CC 7C 0C 0E  
004530r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
004534r 3  60 60 60 00  
004538r 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
00453Cr 3  78 0C F8 00  
004540r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
004544r 3  30 30 1C 00  
004548r 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
00454Cr 3  CC CC 78 00  
004550r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
004554r 3  78 78 30 00  
004558r 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
00455Cr 3  FC FC 78 00  
004560r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
004564r 3  30 78 CC 00  
004568r 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
00456Cr 3  CC 7C 0C 78  
004570r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
004574r 3  30 60 FC 00  
004578r 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
00457Cr 3  18 18 1E 00  
004580r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
004584r 3  18 18 18 00  
004588r 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00458Cr 3  30 30 F0 00  
004590r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
004594r 3  00 00 00 00  
004598r 3  FE CE B6 BE          .byte 254,206,182,190,182,206,254,0
00459Cr 3  B6 CE FE 00  
0045A0r 3               jtab:
0045A0r 3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
0045A4r 3  FE FF FF FF  
0045A8r 3  00 00 00 01  
0045B6r 3  65 14 51 10  keys:   .byte 101,20,81,16,48,35,103,112,0,113,1
0045BAr 3  30 23 67 70  
0045BEr 3  00 71 01     
0045C1r 3               
0045C1r 2               
0045C1r 1               	.include "lib.inc"
0045C1r 2               ;----------------------------------------------------------------------
0045C1r 2               ; VIC20 Platform Specific functions
0045C1r 2               ;----------------------------------------------------------------------
0045C1r 2               
0045C1r 2               ;============================================================
0045C1r 2               ; PLATFORM VARIABLES
0045C1r 2               ;============================================================
0045C1r 2               ;
0045C1r 2               ; Memory map:
0045C1r 2               ;
0045C1r 2               ;	$0000-$01ff	 0.5kB	CPU WS
0045C1r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
0045C1r 2               ;	$0400-$0fff	 3,0kB	RAM
0045C1r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
0045C1r 2               ;	$2000-$7fff	24,0kB	RAM
0045C1r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
0045C1r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
0045C1r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
0045C1r 2               ;	$9800-$9fff	 2,0kB	I/O
0045C1r 2               ;	$a000-$bfff	 8,0kB	RAM
0045C1r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
0045C1r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
0045C1r 2               ;
0045C1r 2               ; Keyboard matrix:
0045C1r 2               ;                          	  $9121
0045C1r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
0045C1r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
0045C1r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
0045C1r 2               ;                 VIC   07  06  05  04  03  02  01  00
0045C1r 2               ;
0045C1r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
0045C1r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
0045C1r 2               ;                 VIC   17  16  15  14  13  12  11  10
0045C1r 2               ;
0045C1r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
0045C1r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
0045C1r 2               ;                 VIC   27  26  25  24  23  22  21  20
0045C1r 2               ;
0045C1r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
0045C1r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
0045C1r 2               ;                 VIC   37  36  35  34  33  32  31  30
0045C1r 2               ;
0045C1r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
0045C1r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
0045C1r 2               ;                 VIC   47  46  45  44  43  42  41  40
0045C1r 2               ;
0045C1r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
0045C1r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
0045C1r 2               ;                 VIC   57  56  55  54  53  52  51  50
0045C1r 2               ;
0045C1r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
0045C1r 2               ;               ASCII   13  42  80  73  89  82  87
0045C1r 2               ;                 VIC   67  66  65  64  63  62  61  60
0045C1r 2               ;
0045C1r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
0045C1r 2               ;               ASCII   08  ??  43  57  55  53  51  49
0045C1r 2               ;                 VIC   77  76  75  74  73  72  71  70
0045C1r 2               ;
0045C1r 2               ;	 P =$65,O=$14,A=$51,Q=$10
0045C1r 2               ;	SPC=$30,N=$44,M=$34
0045C1r 2               ;	 1 =$70,2=$00,3=$71,4=$01
0045C1r 2               ;
0045C1r 2               ; Joysticks:
0045C1r 2               ;
0045C1r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
0045C1r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
0045C1r 2               ;	$9120	Right -     -     -     -     -     -     -
0045C1r 2               ;
0045C1r 2               ;	$9122	DDRB = Data Direction Register port $9120
0045C1r 2               ;               0 = input, 1 = output
0045C1r 2               ;		Bit7 should be 0 to read joystick $9120
0045C1r 2               ;
0045C1r 2               ; Video registers:
0045C1r 2               ;
0045C1r 2               ;	$9000	horizontal centering
0045C1r 2               ;		bits 0-6 horizontal centering
0045C1r 2               ;		bit  7 sets interlace scan
0045C1r 2               ;	$9001	vertical centering
0045C1r 2               ;	$9002	set # of columns
0045C1r 2               ;		bits 0-6 set # of columns
0045C1r 2               ;		bit 7 is part of video matrix address
0045C1r 2               ;	$9003	set # of rows
0045C1r 2               ;		bit 0 sets 8x8 or 16x8 chars
0045C1r 2               ;		bits 1-6 set # of rows
0045C1r 2               ;	$9005	start of character memory
0045C1r 2               ;		bits 0-3 start of character memory (default = 0)
0045C1r 2               ;		bits 4-7 is rest of video address (default= F)
0045C1r 2               ;		BITS 3,2,1,0 CM startinq address
0045C1r 2               ;			     HEX   DEC
0045C1r 2               ;		0000   ROM   8000  32768
0045C1r 2               ;		0001	     8400  33792
0045C1r 2               ;		0010	     8800  34816
0045C1r 2               ;		0011	     8C00  35840
0045C1r 2               ;		1000   RAM   0000  0000
0045C1r 2               ;		1001  xxxx
0045C1r 2               ;		1010  xxxx   unavail.
0045C1r 2               ;		1011  xxxx
0045C1r 2               ;		1100	     1000  4096
0045C1r 2               ;		1101	     1400  5120
0045C1r 2               ;		1110	     1800  6144
0045C1r 2               ;		1111	     1C00  7168
0045C1r 2               ;
0045C1r 2               ; Sound registers:
0045C1r 2               ;
0045C1r 2               ;	$900a	Frequency for oscillator 1 (low)
0045C1r 2               ;		(on: 128-255)
0045C1r 2               ;	$900b	Frequency for oscillator 2 (medium)
0045C1r 2               ;		(on: 128-255)
0045C1r 2               ;	$900c	Frequency for oscillator 3 (high)
0045C1r 2               ;		(on: 128-255)
0045C1r 2               ;	$900d	Frequency of noise source
0045C1r 2               ;	$900e	bit 0-3 sets volume of all sound
0045C1r 2               ;		bits 4-7 are auxiliary color information
0045C1r 2               ;	$900f	Screen and border color register
0045C1r 2               ;		bits 4-7 select background color
0045C1r 2               ;		bits 0-2 select border color
0045C1r 2               ;		bit 3 selects inverted or normal mode
0045C1r 2               ;
0045C1r 2               ; I/O:
0045C1r 2               ;	VIA1 -VIA2
0045C1r 2               ;-----------------------------------------------------------
0045C1r 2               ;	$9110,$9120 	Port B output register
0045C1r 2               ;	$9111,$9121 	Port A output register
0045C1r 2               ;			(PA0) Bit 0=Serial CLK IN
0045C1r 2               ;			(PA1) Bit 1=Serial DATA IN
0045C1r 2               ;			(PA2) Bit 2=Joy 0
0045C1r 2               ;			(PA3) Bit 3=Joy 1
0045C1r 2               ;			(PA4) Bit 4=Joy 2
0045C1r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
0045C1r 2               ;			(PA6) Bit 6=Cassette switch sense
0045C1r 2               ;			(PA7) Bit 7=Serial ATN out
0045C1r 2               ;	$9112,$9122	Data direction register B
0045C1r 2               ;	$9113,$9123	Data direction register A
0045C1r 2               ;	$9114,$9124	Timer 1 low byte
0045C1r 2               ;	$9115,$9125	Timer 1 high byte & counter
0045C1r 2               ;	$9116,$9126	Timer 1 low byte
0045C1r 2               ;	$9117,$9127	Timer 1 high byte
0045C1r 2               ;	$9118,$9128	Timer 2 low byte
0045C1r 2               ;	$9119,$9129	Timer 2 high byte
0045C1r 2               ;	$911A,$912A	Shift register
0045C1r 2               ;	$911B,$912B	Auxiliary control register
0045C1r 2               ;	$911C,$912C	Peripheral control register
0045C1r 2               ;			(CA1, CA2, CB1, CB2)
0045C1r 2               ;			CA1 = restore key (Bit 0)
0045C1r 2               ;			CA2 = cassette motor control (Bits 1-3)
0045C1r 2               ;			CB1 = interrupt signal for received
0045C1r 2               ;			RS-232 data (Bit 4)
0045C1r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
0045C1r 2               ;	$911D,$912D	Interrupt flag register
0045C1r 2               ;	$911E,$912E	Interrupt enable register
0045C1r 2               ;	$911F,$912F	Port A (Sense cassette switch)
0045C1r 2               
0045C1r 2               ; VIC constants
0045C1r 2               
0045C1r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
0045C1r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
0045C1r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
0045C1r 2               
0045C1r 2               ; VIC variables:
0045C1r 2               
0045C1r 2  00           	fontcol:	.byte 0		; Frontcolour text
0045C2r 2  00           	mode:		.byte 0		; 0=MPAGD, 1=MiniPaint
0045C3r 2               .if modelflag				; Set crtflag to identify machine, NTSC or PAL
0045C3r 2               	crtflag:	.byte 1		; PAL
0045C3r 2               .else
0045C3r 2  00           	crtflag:	.byte 0		; NTSC
0045C4r 2               .endif
0045C4r 2               
0045C4r 2               ; Addresses
0045C4r 2               
0045C4r 2               	ScreenAddr	= $0200		; VIDEO RAM
0045C4r 2               	MapAddr		= $0400		; RAM
0045C4r 2               	CharAddress	= $1000		; CHAR RAM
0045C4r 2               	Reg0		= $9000		; Horizontal centering
0045C4r 2               	Reg1		= $9001		; Vertical centering
0045C4r 2               	Reg2		= $9002		; Set # of columns
0045C4r 2               	Reg3		= $9003		; Set # of rows
0045C4r 2               	Reg4		= $9004		; Vsync signal
0045C4r 2               	Reg5		= $9005		; Start of character memory
0045C4r 2               	RegA		= $900a		; Colour and auxcolour register
0045C4r 2               	RegB		= $900b		; Colour and auxcolour register
0045C4r 2               	RegC		= $900c		; Colour and auxcolour register
0045C4r 2               	RegD		= $900d		; Colour and auxcolour register
0045C4r 2               	RegE		= $900e		; Colour and auxcolour register
0045C4r 2               	RegF		= $900f		; Screen and border color register
0045C4r 2               
0045C4r 2               	JoyAddr1	= $9111		; Joystick address 1
0045C4r 2               	Timer11_Low  	= $9114		; Timer 1 low byte
0045C4r 2               	Timer11_High 	= $9115		; Timer 1 high byte
0045C4r 2               	Timer12_Low  	= $9118		; Timer 2 low byte
0045C4r 2               	Timer12_High 	= $9119		; Timer 2 high byte
0045C4r 2               	AUX1		= $911b		; Auxiliary control register
0045C4r 2               	IFR1		= $911d		; Interrupt Flag Register
0045C4r 2               	IER1		= $911e		; Interrupt Enable Register
0045C4r 2               
0045C4r 2               	KeyColAddr	= $9120		; Keyboard column (write)
0045C4r 2               	JoyAddr2	= $9120		; Joystick address 2
0045C4r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
0045C4r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
0045C4r 2               	Timer21_Low  	= $9124		; Timer 1 low byte
0045C4r 2               	Timer21_High 	= $9125		; Timer 1 high byte
0045C4r 2               	AUX2		= $912b		; Auxiliary control register
0045C4r 2               	IFR2		= $912d		; Interrupt Flag Register
0045C4r 2               	IER2		= $912e		; Interrupt Enable Register
0045C4r 2               
0045C4r 2               	ColorAttr	= $9600		; Color attributes
0045C4r 2               	HiRAM		= $a000		; Hi RAM 8kB
0045C4r 2               
0045C4r 2               ;----------------------------------------------------------------------
0045C4r 2               ; VIC20 video hardware fns
0045C4r 2               ;----------------------------------------------------------------------
0045C4r 2               
0045C4r 2               init:
0045C4r 2               
0045C4r 2               ; Disable interrupts
0045C4r 2               
0045C4r 2  A9 7F        	lda #$7f
0045C6r 2  8D 1E 91     	sta IER1
0045C9r 2  8D 2D 91     	sta IFR2
0045CCr 2  8D 2E 91     	sta IER2
0045CFr 2               
0045CFr 2               ; Set audio volume and flag to 0 to check when disabling
0045CFr 2               ; beep and crash
0045CFr 2               
0045CFr 2  A9 00        	lda #0
0045D1r 2  8D 0A 90     	sta RegA
0045D4r 2  8D 0B 90     	sta RegB
0045D7r 2  8D 0C 90     	sta RegC
0045DAr 2  8D 0D 90     	sta RegD
0045DDr 2  8D 0E 90     	sta RegE
0045E0r 2  A9 00        	lda #$00
0045E2r 2  85 rr        	sta SOUNDS_STATUS
0045E4r 2               
0045E4r 2               ; Init screen for NTSC
0045E4r 2               ; this sets the background and border color of the screen
0045E4r 2               ; in this case border black and background black
0045E4r 2               
0045E4r 2  A9 18        	lda #%00011000
0045E6r 2  8D 0F 90     	sta RegF
0045E9r 2               
0045E9r 2               ; Reset fontcolor
0045E9r 2  A9 00        	lda #0		; Black
0045EBr 2  8D rr rr     	sta fontcol
0045EEr 2               
0045EEr 2               
0045EEr 2  A9 00        	lda #0		; Mode 0 = MPAGD
0045F0r 2  20 rr rr     	jsr SetReg
0045F3r 2               
0045F3r 2               ; Init screencharacters
0045F3r 2               ; Fill screen with characters from left to right, up to down
0045F3r 2               
0045F3r 2  A2 00        	ldx #0
0045F5r 2  A0 00        	ldy #0
0045F7r 2               scrinit:
0045F7r 2  8A           	txa
0045F8r 2  9D 00 02     	sta ScreenAddr,x
0045FBr 2  98           	tya
0045FCr 2  9D 00 96     	sta ColorAttr,x
0045FFr 2  E8           	inx
004600r 2  E0 F2        	cpx#242
004602r 2  D0 F3        	bne scrinit
004604r 2               
004604r 2               ; Reset fontcolor
004604r 2               
004604r 2  A9 00        	lda #0			; Black
004606r 2  8D rr rr     	sta fontcol
004609r 2               
004609r 2               ; Init music
004609r 2               
004609r 2               ;	jsr initmusic
004609r 2               
004609r 2               ; Init VIA1 timer11 for timeout 1/25 sec
004609r 2               
004609r 2  A9 E0        	lda #$e0		; T1 continuous
00460Br 2  8D 1B 91     	sta AUX1
00460Er 2  A9 7F        	lda #$7f		; No int
004610r 2  8D 1E 91     	sta IER1
004613r 2  A9 00        	lda #0
004615r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
004618r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
00461Ar 2  8D 14 91     	sta Timer11_Low
00461Dr 2  A9 4E        	lda #>timervalue
00461Fr 2  8D 15 91     	sta Timer11_High
004622r 2               
004622r 2               ; Pre-shifted byte tables if parameter 'r' given
004622r 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
004622r 2               ; The bits are shifted to the right and overflow bits are
004622r 2               ; inserted to the left. So 1 byte contains a left and right part
004622r 2               
004622r 2               .if rflag
004622r 2               shift0 = HiRAM
004622r 2               shift2 = HiRAM+256
004622r 2               shift4 = HiRAM+512
004622r 2               shift6 = HiRAM+768
004622r 2               
004622r 2               ; Pre-shifted table 0 pixels
004622r 2               
004622r 2               	ldx #0
004622r 2               shf0:
004622r 2               	txa
004622r 2               	sta shift0,x
004622r 2               	inx
004622r 2               	bne shf0
004622r 2               
004622r 2               ; Pre-shifted table 2 pixels
004622r 2               
004622r 2               	ldx #0
004622r 2               shf2:
004622r 2               	ldy #2
004622r 2               	txa
004622r 2               shf2loop:
004622r 2               	lsr a
004622r 2               	bcc :+
004622r 2               	ora #$80
004622r 2               :
004622r 2               	dey
004622r 2               	bne shf2loop
004622r 2               	sta shift2,x
004622r 2               	inx
004622r 2               	bne shf2
004622r 2               
004622r 2               ; Pre-shifted table 4 pixels
004622r 2               
004622r 2               	ldx #0
004622r 2               shf4:
004622r 2               	ldy #4
004622r 2               	txa
004622r 2               shf4loop:
004622r 2               	lsr a
004622r 2               	bcc :+
004622r 2               	ora #$80
004622r 2               :
004622r 2               	dey
004622r 2               	bne shf4loop
004622r 2               	sta shift4,x
004622r 2               	inx
004622r 2               	bne shf4
004622r 2               
004622r 2               ; Pre-shifted table 6 pixels
004622r 2               
004622r 2               	ldx #0
004622r 2               shf6:
004622r 2               	ldy #6
004622r 2               	txa
004622r 2               shf6loop:
004622r 2               	lsr a
004622r 2               	bcc :+
004622r 2               	ora #$80
004622r 2               :
004622r 2               	dey
004622r 2               	bne shf6loop
004622r 2               	sta shift6,x
004622r 2               	inx
004622r 2               	bne shf6
004622r 2               .endif
004622r 2               
004622r 2  60           	rts
004623r 2               
004623r 2               ;========================================================
004623r 2               ; KEY AND JOYSTICK ROUTINES
004623r 2               ;--------------------------------------------------------
004623r 2               ; Keys
004623r 2               ;
004623r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
004623r 2               ;             ||||||||
004623r 2               ;             |||||||+> Right    KEY 0  - X
004623r 2               ;             ||||||+-> Left     KEY 1  - Z
004623r 2               ;             |||||+--> Down     KEY 2  - .
004623r 2               ;             ||||+---> Up       KEY 3  - ;
004623r 2               ;             |||+----> Fire1    KEY 4  - SPC
004623r 2               ;             ||+-----> Fire2    KEY 5  - Q
004623r 2               ;             |+------> Fire3    KEY 6  - P
004623r 2               ;             +-------> Not used
004623r 2               ;
004623r 2               ;                       Option1  KEY 7  - 1
004623r 2               ;                       Option2  KEY 8  - 2
004623r 2               ;                       Option3  KEY 9  - 3
004623r 2               ;                       Option4  KEY 10 - 4
004623r 2               ;--------------------------------------------------------
004623r 2               
004623r 2               ;----------------------------------------------------
004623r 2               ; Interrupt service
004623r 2               ;----------------------------------------------------
004623r 2               
004623r 2               intserv:
004623r 2  EE 01 96     	inc $9601	; scroll colour char topleft
004626r 2  68           	pla
004627r 2  A8           	tay
004628r 2  68           	pla
004629r 2  AA           	tax
00462Ar 2  68           	pla
00462Br 2  40           	rti
00462Cr 2               
00462Cr 2               ;--------------------------------------------------------
00462Cr 2               ; PRSKEY
00462Cr 2               ;
00462Cr 2               ; Wait for keypress.
00462Cr 2               ;--------------------------------------------------------
00462Cr 2               
00462Cr 2               prskey:
00462Cr 2  98           	tya
00462Dr 2  48           	pha
00462Er 2               prsloop:
00462Er 2  20 rr rr     	jsr vsync
004631r 2  20 rr rr     	jsr joykey
004634r 2  09 80        	ora #$80
004636r 2  C9 FF        	cmp #$ff
004638r 2  D0 07        	bne :+
00463Ar 2  20 rr rr     	jsr readkey
00463Dr 2  C9 FF        	cmp #255
00463Fr 2  F0 ED        	beq prsloop		; wait until key pressed
004641r 2               :
004641r 2               prsrelease:
004641r 2  20 rr rr     	jsr vsync
004644r 2  20 rr rr     	jsr joykey
004647r 2  09 80        	ora #$80
004649r 2  C9 FF        	cmp #$ff
00464Br 2  F0 07        	beq :+
00464Dr 2  20 rr rr     	jsr readkey
004650r 2  C9 FF        	cmp #255
004652r 2  D0 ED        	bne prsrelease		; wait until key released
004654r 2               :
004654r 2  68           	pla
004655r 2  A8           	tay
004656r 2  60           	rts
004657r 2               
004657r 2               ;--------------------------------------------------------
004657r 2               ; KTEST
004657r 2               ;
004657r 2               ; Keyboard test routine with key in A.
004657r 2               ; Scan key and clear carry if key pressed
004657r 2               ;--------------------------------------------------------
004657r 2               
004657r 2               ktest:
004657r 2  85 rr        	sta z80_a		; save key
004659r 2               
004659r 2  4A           	lsr a
00465Ar 2  4A           	lsr a
00465Br 2  4A           	lsr a
00465Cr 2  4A           	lsr a
00465Dr 2  AA           	tax
00465Er 2  BD rr rr     	lda colmask,x
004661r 2  8D 20 91     	sta KeyColAddr		; set row
004664r 2               
004664r 2  A5 rr        	lda z80_a
004666r 2  29 0F        	and #$0f
004668r 2  AA           	tax			; get column
004669r 2               
004669r 2  AD 21 91     	lda KeyRowAddr		; read column
00466Cr 2  3D rr rr     	and keymask,x		; check if key pressed
00466Fr 2  F0 02        	beq pressed		; Skip if pressed
004671r 2  38           	sec			; key not pressed
004672r 2  60           	rts
004673r 2               pressed:
004673r 2  18           	clc			; key pressed
004674r 2  60           	rts
004675r 2               
004675r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
004679r 2  F7 FB FD FE  
00467Dr 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
004681r 2  10 20 40 80  
004685r 2               
004685r 2               ;---------------------------------------------------------------
004685r 2               ; KGET
004685r 2               ;
004685r 2               ; Read keyboard matrix if a key is pressed.
004685r 2               ; Return A = high nibble=row and low nibble=col
004685r 2               ;---------------------------------------------------------------
004685r 2               
004685r 2               kget:
004685r 2  86 rr        	stx xtmp		; Save x-reg
004687r 2               kget0:
004687r 2  A2 00        	ldx #0			; reset row
004689r 2               kget1:
004689r 2  BD rr rr     	lda colmask,x		; Get mask
00468Cr 2  8D 20 91     	sta KeyColAddr		; Set row
00468Fr 2  AD 21 91     	lda KeyRowAddr		; Read columns
004692r 2  85 rr        	sta tmp			; Save colums
004694r 2  C9 FF        	cmp #$ff		; Key pressed?
004696r 2  D0 08        	bne kget2		; Yes, skip
004698r 2  E8           	inx			; Next row
004699r 2  E0 08        	cpx #8			; All rows scanned?
00469Br 2  D0 EC        	bne kget1		; No, repeat
00469Dr 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
0046A0r 2               kget2:
0046A0r 2  A0 00        	ldy #0			; Reset column
0046A2r 2               kget3:
0046A2r 2  46 rr        	lsr tmp			; Test bit
0046A4r 2  90 04        	bcc kget4		; If clear, key pressed
0046A6r 2  C8           	iny			; Next column
0046A7r 2  4C rr rr     	jmp kget3		; Repeat
0046AAr 2               kget4:
0046AAr 2  86 rr        	stx tmp			; Get row
0046ACr 2  06 rr        	asl tmp			; Make high nibble
0046AEr 2  06 rr        	asl tmp
0046B0r 2  06 rr        	asl tmp
0046B2r 2  06 rr        	asl tmp
0046B4r 2  98           	tya			; Get column
0046B5r 2  18           	clc
0046B6r 2  65 rr        	adc tmp			; Add row as low nibble
0046B8r 2  85 rr        	sta tmp
0046BAr 2               kget5:
0046BAr 2  AD 21 91     	lda KeyRowAddr		; Read columns
0046BDr 2  C9 FF        	cmp #$ff
0046BFr 2  D0 F9        	bne kget5
0046C1r 2               
0046C1r 2  A5 rr        	lda tmp			; Return keycode
0046C3r 2  A6 rr        	ldx xtmp		; Restore X-reg
0046C5r 2  60           	rts			; Return
0046C6r 2               
0046C6r 2               ;-------------------------------------------------------------
0046C6r 2               ; READKEY
0046C6r 2               ;
0046C6r 2               ; Check keyboard matrix if a key is pressed
0046C6r 2               ; Return keymask in Y
0046C6r 2               ;-------------------------------------------------------------
0046C6r 2               
0046C6r 2               readkey:
0046C6r 2  A9 FF        	lda #$ff		; Keymask
0046C8r 2  85 rr        	sta tmp
0046CAr 2  A2 07        	ldx #7
0046CCr 2               scanrow:
0046CCr 2  BD rr rr     	lda colmask,x
0046CFr 2  8D 20 91     	sta KeyColAddr		; set row
0046D2r 2  AD 21 91     	lda KeyRowAddr		; read column
0046D5r 2  25 rr        	and tmp			; Reset bit is key pressed
0046D7r 2  85 rr        	sta tmp
0046D9r 2  CA           	dex
0046DAr 2  10 F0        	bpl scanrow
0046DCr 2  A5 rr        	lda tmp
0046DEr 2  A8           	tay
0046DFr 2  60           	rts
0046E0r 2               
0046E0r 2               ;-------------------------------------------------------------
0046E0r 2               ; JOY1SCAN
0046E0r 2               ;
0046E0r 2               ; Initializes joystick
0046E0r 2               ;-------------------------------------------------------------
0046E0r 2               
0046E0r 2               joyinit:
0046E0r 2  60           	rts
0046E1r 2               
0046E1r 2               ;-------------------------------------------------------------
0046E1r 2               ; JOY1SCAN
0046E1r 2               ;
0046E1r 2               ; Scan joystick1 and return key in z80_e
0046E1r 2               ; Up, down, left, right and fire are read from the joystick
0046E1r 2               ; Fire2 and fire3 are read from the keyboard
0046E1r 2               ;-------------------------------------------------------------
0046E1r 2               
0046E1r 2               joy1scan:
0046E1r 2  A9 FF        	lda #$ff
0046E3r 2  85 rr        	sta z80_e
0046E5r 2               
0046E5r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
0046E8r 2  4A           	lsr a
0046E9r 2  4A           	lsr a
0046EAr 2               
0046EAr 2  4A           	lsr a
0046EBr 2  26 rr        	rol z80_e		; Up
0046EDr 2  4A           	lsr a
0046EEr 2  26 rr        	rol z80_e		; Down
0046F0r 2  4A           	lsr a
0046F1r 2  26 rr        	rol z80_e		; Left
0046F3r 2               
0046F3r 2  A9 7F        	lda #%01111111
0046F5r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
0046F8r 2  AD 20 91     	lda JoyAddr2
0046FBr 2  0A           	asl a
0046FCr 2  26 rr        	rol z80_e		; Right
0046FEr 2  A9 FF        	lda #%11111111
004700r 2  8D 22 91     	sta DDRB		; Reset
004703r 2               
004703r 2  AD 11 91     	lda JoyAddr1
004706r 2  29 20        	and #%00100000
004708r 2  D0 06        	bne :+
00470Ar 2  A5 rr        	lda z80_e
00470Cr 2  29 EF        	and #%11101111		; Fire
00470Er 2  85 rr        	sta z80_e
004710r 2               :
004710r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
004713r 2  20 rr rr     	jsr ktest
004716r 2  B0 06        	bcs :+
004718r 2  A5 rr        	lda z80_e
00471Ar 2  29 BF        	and #%10111111
00471Cr 2  85 rr        	sta z80_e
00471Er 2               :
00471Er 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
004721r 2  20 rr rr     	jsr ktest
004724r 2  B0 06        	bcs :+
004726r 2  A5 rr        	lda z80_e
004728r 2  29 DF        	and #%11011111
00472Ar 2  85 rr        	sta z80_e
00472Cr 2               :
00472Cr 2  60           	rts
00472Dr 2               
00472Dr 2               ;-------------------------------------------------------------
00472Dr 2               ; JOY2SCAN
00472Dr 2               ;
00472Dr 2               ; TODO, Scan joystick2 and return key in z80_e
00472Dr 2               ;-------------------------------------------------------------
00472Dr 2               
00472Dr 2               joy2scan:
00472Dr 2  60           	rts
00472Er 2               
00472Er 2               
00472Er 2               
00472Er 2               ;========================================================
00472Er 2               ; HARDWARE DEPENDING ROUTINES
00472Er 2               ;========================================================
00472Er 2               
00472Er 2               ;----------------------------------------------------
00472Er 2               ; DELAY
00472Er 2               ;
00472Er 2               ; Delay routine A * 1/50 sec
00472Er 2               ;----------------------------------------------------
00472Er 2               
00472Er 2               delay:
00472Er 2  85 rr        	sta xtmp		; set delaycounter
004730r 2               del_loop:
004730r 2  AD 04 90     	lda Reg4
004733r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
004735r 2               
004735r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
004737r 2               delay1:
004737r 2  61 80        	adc ($80,x)		;	 6 usec
004739r 2  61 80        	adc ($80,x)		;	 6 usec
00473Br 2  88           	dey			;	 2 usec
00473Cr 2  D0 F9        	bne delay1		;	 2 usec
00473Er 2  EA           	nop			; 2 usec
00473Fr 2  EA           	nop			; 2 usec
004740r 2               				; tot: 20000 usec
004740r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
004742r 2  D0 EC        	bne del_loop
004744r 2  60           	rts
004745r 2               
004745r 2               ;-------------------------------------------------------------
004745r 2               ; VSYNC
004745r 2               ;
004745r 2               ; - read joystick/keyboard
004745r 2               ; - sync framerate with timer 25Hz
004745r 2               ; - handle shrapnel every even frame
004745r 2               ; - handle sound
004745r 2               ;-------------------------------------------------------------
004745r 2               
004745r 2               vsync:
004745r 2  48           	pha			; save registers
004746r 2  98           	tya
004747r 2  48           	pha
004748r 2  8A           	txa
004749r 2  48           	pha
00474Ar 2               
00474Ar 2               ;-------------------------------------------------------------
00474Ar 2               ; Read joystick/keyboard.
00474Ar 2               ;-------------------------------------------------------------
00474Ar 2               
00474Ar 2  20 rr rr     	jsr joykey
00474Dr 2               
00474Dr 2               ;-------------------------------------------------------------
00474Dr 2               ; Sync framerate with timer 25Hz
00474Dr 2               ;-------------------------------------------------------------
00474Dr 2               
00474Dr 2  A9 40        	lda #$40		; set Timer1 expired bit
00474Fr 2               vsync1:
00474Fr 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
004752r 2  F0 FB        	beq vsync1		; wait if timer not expired
004754r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
004757r 2               
004757r 2               ;-------------------------------------------------------------
004757r 2               ; Handle sound command
004757r 2               ;-------------------------------------------------------------
004757r 2               
004757r 2  20 rr rr     	jsr make_sound2
00475Ar 2               
00475Ar 2               ;-------------------------------------------------------------
00475Ar 2               ; Handle shrapnel every even frame
00475Ar 2               ;-------------------------------------------------------------
00475Ar 2               
00475Ar 2  A5 rr        	lda clock		; get clock
00475Cr 2  29 01        	and #1			; 2 frames expired
00475Er 2  D0 03        	bne:+
004760r 2  20 rr rr     	jsr proshr		; process shrapnel
004763r 2               :
004763r 2               
004763r 2               ;-------------------------------------------------------------
004763r 2               ; Handle sound BEEP and CRASH
004763r 2               ;-------------------------------------------------------------
004763r 2               
004763r 2  AD rr rr     	lda sndtyp
004766r 2  F0 4E        	beq sndskip
004768r 2               
004768r 2               sndloop:
004768r 2  AC rr rr     	ldy sndtyp
00476Br 2               sndwait:
00476Br 2  88           	dey
00476Cr 2  D0 FD        	bne sndwait
00476Er 2               
00476Er 2  AD rr rr     	lda sndtyp
004771r 2  30 1E        	bmi crashaudio
004773r 2               
004773r 2               ; BEEP command:
004773r 2               ; enable sound on channel 2
004773r 2               ; range 0-127
004773r 2               
004773r 2               beepaudio:
004773r 2  AD 0E 90     	lda RegE
004776r 2  09 0F        	ora #$0f
004778r 2  8D 0E 90     	sta RegE
00477Br 2               
00477Br 2  A5 rr        	lda SOUNDS_STATUS
00477Dr 2  09 40        	ora #%01000000
00477Fr 2  85 rr        	sta SOUNDS_STATUS
004781r 2  A9 FF        	lda #$ff
004783r 2  38           	sec
004784r 2  ED rr rr     	sbc sndtyp
004787r 2  4A           	lsr
004788r 2  4A           	lsr
004789r 2  09 C0        	ora #%11000000
00478Br 2  8D 0C 90     	sta RegC
00478Er 2  4C rr rr     	jmp endaudiotype
004791r 2               
004791r 2               ; CRASH command:
004791r 2               ; enable sound on channel 3
004791r 2               ; range 128-255
004791r 2               
004791r 2               crashaudio:
004791r 2  AD 0E 90     	lda RegE
004794r 2  09 0F        	ora #$0f
004796r 2  8D 0E 90     	sta RegE
004799r 2  A5 rr        	lda SOUNDS_STATUS
00479Br 2  09 80        	ora #%10000000
00479Dr 2  85 rr        	sta SOUNDS_STATUS
00479Fr 2  A9 FF        	lda #$ff
0047A1r 2  38           	sec
0047A2r 2  ED rr rr     	sbc sndtyp
0047A5r 2  09 80        	ora #%10000000
0047A7r 2  8D 0D 90     	sta RegD
0047AAr 2               
0047AAr 2               endaudiotype:
0047AAr 2  CE rr rr     	dec sndtyp
0047ADr 2  F0 07        	beq sndskip
0047AFr 2  C9 80        	cmp #128
0047B1r 2  F0 03        	beq sndskip
0047B3r 2  4C rr rr     	jmp sndloop
0047B6r 2               
0047B6r 2               ; disable sound
0047B6r 2               
0047B6r 2               sndskip:
0047B6r 2  24 rr        	bit SOUNDS_STATUS
0047B8r 2  50 0B        	bvc :+
0047BAr 2  A5 rr        	lda SOUNDS_STATUS
0047BCr 2  29 BF        	and #%10111111
0047BEr 2  85 rr        	sta SOUNDS_STATUS
0047C0r 2  A9 00        	lda #$00
0047C2r 2  8D 0C 90     	sta RegC
0047C5r 2               :
0047C5r 2  24 rr        	bit SOUNDS_STATUS
0047C7r 2  10 0B        	bpl :+
0047C9r 2               
0047C9r 2  A5 rr        	lda SOUNDS_STATUS
0047CBr 2  29 7F        	and #%01111111
0047CDr 2  85 rr        	sta SOUNDS_STATUS
0047CFr 2  A9 00        	lda #$00
0047D1r 2  8D 0D 90     	sta RegD
0047D4r 2               :
0047D4r 2  68           	pla
0047D5r 2  AA           	tax
0047D6r 2  68           	pla
0047D7r 2  A8           	tay
0047D8r 2  68           	pla
0047D9r 2  60           	rts
0047DAr 2               
0047DAr 2  00           sndtyp:		.byte 0		; Beep sound parameter
0047DBr 2               
0047DBr 2               ;========================================================
0047DBr 2               ; SPRITE HANDLING ROUTINES
0047DBr 2               ;========================================================
0047DBr 2               
0047DBr 2               ;----------------------------------------------------
0047DBr 2               ; SPRITE
0047DBr 2               ;
0047DBr 2               ; Draw object sprite
0047DBr 2               ;----------------------------------------------------
0047DBr 2               
0047DBr 2               .if oflag
0047DBr 2               sprite:
0047DBr 2  86 rr        	stx xtmp		; Save X-reg
0047DDr 2  20 rr rr     	jsr scadd 		; get screen address in scraddr.
0047E0r 2               
0047E0r 2  A5 rr        	lda dispx 		; x position.
0047E2r 2  29 07        	and #7 			; position straddling cells.
0047E4r 2  85 rr        	sta z80_b		; store in b register.
0047E6r 2               
0047E6r 2  A5 rr        	lda z80_l		; store sprite graphic address.
0047E8r 2  8D rr rr     	sta sprit1+1
0047EBr 2  8D rr rr     	sta sprit2+1
0047EEr 2  A5 rr        	lda z80_h
0047F0r 2  8D rr rr     	sta sprit1+2
0047F3r 2  8D rr rr     	sta sprit2+2
0047F6r 2               
0047F6r 2  A2 00        	ldx #0			; pixel height.
0047F8r 2  A0 00        	ldy #0
0047FAr 2               sprit1:
0047FAr 2  BD rr rr     	lda objdta,x		; fetch first byte.
0047FDr 2  85 rr        	sta spr
0047FFr 2  E8           	inx
004800r 2               sprit2:
004800r 2  BD rr rr     	lda objdta,x
004803r 2  85 rr        	sta spr+1
004805r 2               
004805r 2  A9 00        	lda #0
004807r 2  85 rr        	sta spr+2
004809r 2  20 rr rr     	jsr sprit7		; shift sprite
00480Cr 2               
00480Cr 2  A5 rr        	lda spr			; fetch graphic.
00480Er 2  A0 00        	ldy #0			; _BEEB
004810r 2  51 rr        	eor (scraddr),y		; merge with screen image.
004812r 2  91 rr        	sta (scraddr),y		; write to screen.
004814r 2               
004814r 2  A5 rr        	lda spr+1		; fetch graphic.
004816r 2  A0 10        	ldy #16			; _BEEB
004818r 2  51 rr        	eor (scraddr),y		; merge with screen image.
00481Ar 2  91 rr        	sta (scraddr),y		; write to screen.
00481Cr 2               
00481Cr 2  A5 rr        	lda spr+2		; fetch graphic.
00481Er 2  A0 20        	ldy #32			; _BEEB
004820r 2  51 rr        	eor (scraddr),y		; merge with screen image.
004822r 2  91 rr        	sta (scraddr),y		; write to screen.
004824r 2               
004824r 2  20 rr rr     	jsr nline
004827r 2               
004827r 2  E8           	inx			; next source byte.
004828r 2  E0 20        	cpx #32
00482Ar 2  D0 CE        	bne sprit1		; repeat
00482Cr 2               
00482Cr 2  A6 rr        	ldx xtmp		; retreive X-reg
00482Er 2  60           	rts
00482Fr 2               
00482Fr 2               .endif
00482Fr 2               
00482Fr 2               ;------------------------------------------------------------------
00482Fr 2               ; SCADD
00482Fr 2               ;
00482Fr 2               ; This routine returns a screen address for X,Y in scraddr.
00482Fr 2               ;------------------------------------------------------------------
00482Fr 2               
00482Fr 2               scadd:
00482Fr 2  A5 rr        	lda dispx		; get x
004831r 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
004833r 2  85 rr        	sta scraddr		; set lb scraddr
004835r 2  A9 00        	lda #0
004837r 2  85 rr        	sta scraddr+1		; set hb scraddr
004839r 2  06 rr        	asl scraddr		; multiply X by 2
00483Br 2  26 rr        	rol scraddr+1
00483Dr 2               
00483Dr 2               ; Add line address Y pos to X
00483Dr 2               
00483Dr 2  A6 rr        	ldx dispy		; get row address Y pos
00483Fr 2  18           	clc
004840r 2  A5 rr        	lda scraddr
004842r 2  7D 00 07     	adc SCADTB_lb,x
004845r 2  85 rr        	sta scraddr
004847r 2  A5 rr        	lda scraddr+1
004849r 2  7D 00 08     	adc SCADTB_hb,x
00484Cr 2  85 rr        	sta scraddr+1
00484Er 2               
00484Er 2  60           	rts
00484Fr 2               
00484Fr 2               ;------------------------------------------------------------------
00484Fr 2               ; SSPRIA
00484Fr 2               ;
00484Fr 2               ; Erase single sprite, old (ix+0).
00484Fr 2               ;------------------------------------------------------------------
00484Fr 2               
00484Fr 2               sspria:
00484Fr 2  20 rr rr     	jsr gsprad		; get old sprite address.
004852r 2               sspri2:
004852r 2               .if rflag
004852r 2               	lda z80_e		; 3c
004852r 2               	sta dline_spraddr1+1	; 4c
004852r 2               	sta dline_spraddr2+1	; 4c
004852r 2               	lda z80_d		; 3c
004852r 2               	sta dline_spraddr1+2	; 4c
004852r 2               	sta dline_spraddr2+2	; 4c
004852r 2               
004852r 2               	ldx sprshft
004852r 2               	lda shift_table,x
004852r 2               	sta dline_shift1+1
004852r 2               	sta dline_shift2+1
004852r 2               	lda shift_table+1,x
004852r 2               	sta dline_shift1+2
004852r 2               	sta dline_shift2+2
004852r 2               
004852r 2               	ldx #0			; byte counter.
004852r 2               sspri0:
004852r 2               	jsr dline		; draw a line.
004852r 2                 .if bflag
004852r 2               	cpx #48			; big sprites have 24 bytes
004852r 2                 .else
004852r 2               	cpx #32			; normal sprites have 32 bytes
004852r 2                 .endif
004852r 2               	bne sspri0		; repeat 16 times x 2 bytes
004852r 2               	rts
004852r 2               .else
004852r 2                 .if bflag
004852r 2               	lda #24			; big sprites have 24 lines
004852r 2                 .else
004852r 2  A9 10        	lda #16			; normal sprites have 16 lines.
004854r 2                 .endif
004854r 2  8D rr rr     	sta acnt
004857r 2               sspri0:
004857r 2  20 rr rr     	jsr dline		; draw a line.
00485Ar 2  CE rr rr     	dec acnt
00485Dr 2  D0 F8        	bne sspri0		; repeat 16 times
00485Fr 2  60           	rts
004860r 2               
004860r 2  00           acnt:	.byte 0			; line counter
004861r 2               
004861r 2               .endif
004861r 2               
004861r 2               ;------------------------------------------------------------------
004861r 2               ; SSPRIB
004861r 2               ;
004861r 2               ; Display single sprite, new (ix+5).
004861r 2               ;------------------------------------------------------------------
004861r 2               
004861r 2               ssprib:
004861r 2  20 rr rr     	jsr gspran 		; get new sprite address.
004864r 2  4C rr rr     	jmp sspri2		; Display sprite
004867r 2               
004867r 2               ;------------------------------------------------------------------
004867r 2               ; SSPRIC
004867r 2               ;
004867r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
004867r 2               ;------------------------------------------------------------------
004867r 2               
004867r 2               sspric:
004867r 2               .if rflag
004867r 2               	jsr gsprad 		; get old sprite address.
004867r 2               
004867r 2               	lda z80_e		; 3c
004867r 2               	sta ddline_spraddr3+1	; 4c
004867r 2               	sta ddline_spraddr4+1	; 4c
004867r 2               
004867r 2               	lda z80_d		; 3c
004867r 2               	sta ddline_spraddr3+2	; 4c
004867r 2               	sta ddline_spraddr4+2	; 4c
004867r 2               
004867r 2               	ldx sprshft		; set spriteshift table addresses
004867r 2               	lda shift_table,x
004867r 2               	sta ddline_shift3+1
004867r 2               	sta ddline_shift4+1
004867r 2               	lda shift_table+1,x
004867r 2               	sta ddline_shift3+2
004867r 2               	sta ddline_shift4+2
004867r 2               
004867r 2               	jsr exx  		; store addresses.
004867r 2               	jsr gspran 		; get new sprite addresses.
004867r 2               
004867r 2               	lda z80_e		; 3c
004867r 2               	sta ddline_spraddr1+1	; 4c
004867r 2               	sta ddline_spraddr2+1	; 4c
004867r 2               
004867r 2               	lda z80_d		; 3c
004867r 2               	sta ddline_spraddr1+2	; 4c
004867r 2               	sta ddline_spraddr2+2	; 4c
004867r 2               
004867r 2               	ldx sprshft
004867r 2               	lda shift_table,x
004867r 2               	sta ddline_shift1+1
004867r 2               	sta ddline_shift2+1
004867r 2               	lda shift_table+1,x
004867r 2               	sta ddline_shift1+2
004867r 2               	sta ddline_shift2+2
004867r 2               
004867r 2               	ldx #0
004867r 2               lloop:
004867r 2               	jsr ddline 		; draw a line.
004867r 2                 .if bflag
004867r 2               	cpx #48
004867r 2                 .else
004867r 2               	cpx #32
004867r 2                 .endif
004867r 2               	bne lloop
004867r 2               	rts
004867r 2               
004867r 2               shift_table:
004867r 2               	.word shift0
004867r 2               	.word shift2
004867r 2               	.word shift4
004867r 2               	.word shift6
004867r 2               
004867r 2               ;------------------------------------------------------------------
004867r 2               ; DLINE
004867r 2               ;
004867r 2               ; Draw a sprite line, now work out next target address.
004867r 2               ;
004867r 2               ; Input:
004867r 2               ;  B  = right mask
004867r 2               ;  C  = left mask
004867r 2               ;  DE = spriteaddress
004867r 2               ;  scraddr = screen address
004867r 2               ;------------------------------------------------------------------
004867r 2               
004867r 2               dline:
004867r 2               
004867r 2               dline_spraddr1:
004867r 2               	ldy $ffff,x 		; get graphic data as pointer.
004867r 2               dline_shift1:
004867r 2               	lda $ffff,y		; get pre-shifted data
004867r 2               	sta sprtmp		; save byte
004867r 2               	and z80_c 		; mask right for left byte
004867r 2               
004867r 2               	ldy #0
004867r 2               	eor (scraddr),y 	; XOR with what's there.
004867r 2               	sta (scraddr),y 	; display left byte
004867r 2               
004867r 2               ; carry to next screen byte
004867r 2               
004867r 2               	lda sprtmp		; fetch data.
004867r 2               	and z80_b 		; mask for left part
004867r 2               	sta sprtmp
004867r 2               
004867r 2               ; middle screen byte
004867r 2               
004867r 2               	inx
004867r 2               dline_spraddr2:
004867r 2               	ldy $ffff,x 		; second bit of data.
004867r 2               dline_shift2:
004867r 2               	lda $ffff,y
004867r 2               	sta sprtmp2
004867r 2               	and z80_c 		; mask away what's not needed.
004867r 2               	ora sprtmp
004867r 2               	ldy #16
004867r 2               	eor (scraddr),y 	; XOR with what's there.
004867r 2               	sta (scraddr),y 	; display middle bye.
004867r 2               
004867r 2               ; carry to last screen byte
004867r 2               
004867r 2               	lda sprtmp2
004867r 2               	and z80_b 		; mask away unwanted
004867r 2               
004867r 2               	ldy #32
004867r 2               	eor (scraddr),y 	; XOR with what's there.
004867r 2               	sta (scraddr),y 	; display right byte.
004867r 2               
004867r 2               	inx
004867r 2               .else
004867r 2               
004867r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
00486Ar 2  20 rr rr     	jsr exx  		; store addresses.
00486Dr 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
004870r 2               
004870r 2               .if bflag
004870r 2               	lda #23
004870r 2               .else
004870r 2  A9 0F        	lda #15
004872r 2               .endif
004872r 2  85 rr        	sta ccnt
004874r 2               lloop:
004874r 2  20 rr rr     	jsr dline 		; draw a line.
004877r 2  20 rr rr     	jsr exx  		; restore old addresses.
00487Ar 2  20 rr rr     	jsr dline 		; delete a line.
00487Dr 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
004880r 2  C6 rr        	dec ccnt
004882r 2  D0 F0        	bne lloop
004884r 2               
004884r 2  20 rr rr     	jsr dline		; draw a line.
004887r 2  20 rr rr     	jsr exx 		; restore old addresses.
00488Ar 2               
00488Ar 2               ;-------------------------------------------------------------
00488Ar 2               ; Drop through.
00488Ar 2               ; Line drawn, now work out next target address.
00488Ar 2               ;
00488Ar 2               ; Input:
00488Ar 2               ;  B  = right mask
00488Ar 2               ;  C  = left mask
00488Ar 2               ;  DE = spriteaddress
00488Ar 2               ;  scraddr = screen address
00488Ar 2               ;-------------------------------------------------------------
00488Ar 2               
00488Ar 2               dline:
00488Ar 2  A0 00        	ldy #0
00488Cr 2  B1 rr        	lda (z80_de),y 		; graphic data.
00488Er 2  48           	pha
00488Fr 2  25 rr        	and z80_c 		; mask away what's not needed.
004891r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
004893r 2  91 rr        	sta (scraddr),y 	; left byte on screen.
004895r 2               
004895r 2  68           	pla
004896r 2  25 rr        	and z80_b 		; mask away unwanted bits.
004898r 2  A0 20        	ldy #32
00489Ar 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00489Cr 2  91 rr        	sta (scraddr),y 	; right byte on screen
00489Er 2               
00489Er 2  E6 rr        	inc z80_e 		; next graphic.
0048A0r 2  D0 02        	bne :+
0048A2r 2  E6 rr        	inc z80_d
0048A4r 2               :
0048A4r 2               ; _BEEB screen arrangement
0048A4r 2               ;	sec
0048A4r 2               ;	lda scraddr 		; one character cell to the left.
0048A4r 2               ;	sbc #8
0048A4r 2               ;	sta scraddr
0048A4r 2               ;	lda scraddr+1
0048A4r 2               ;	sbc #0
0048A4r 2               ;	sta scraddr+1
0048A4r 2  A0 00        	ldy #0
0048A6r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
0048A8r 2  A0 10        	ldy #16
0048AAr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0048ACr 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
0048AEr 2               
0048AEr 2  E6 rr        	inc z80_e 		; point to next line of data.
0048B0r 2  D0 02        	bne :+
0048B2r 2  E6 rr        	inc z80_d
0048B4r 2               :
0048B4r 2               ; _BEEB screen arrangement
0048B4r 2               ;	sec
0048B4r 2               ;	lda scraddr 		; another char left.
0048B4r 2               ;	sbc #8
0048B4r 2               ;	sta scraddr
0048B4r 2               ;	lda scraddr+1
0048B4r 2               ;	sbc #0
0048B4r 2               ;	sta scraddr+1
0048B4r 2               .endif
0048B4r 2               
0048B4r 2               ;----------------------------------------------------------------------
0048B4r 2               ; Line drawn, now work out next target address.
0048B4r 2               ;----------------------------------------------------------------------
0048B4r 2               
0048B4r 2               ; _BEEB screen arrangement
0048B4r 2               
0048B4r 2               nline:
0048B4r 2  A5 rr        	lda scraddr 			; get low byte of address.
0048B6r 2  29 0F        	and #15
0048B8r 2  C9 0F        	cmp #15				; is this last line of row?
0048BAr 2  F0 03        	beq beeb_next_row
0048BCr 2               
0048BCr 2               	; within same row
0048BCr 2  E6 rr        	inc scraddr			; new low byte of address.
0048BEr 2  60           	rts
0048BFr 2               
0048BFr 2               beeb_next_row:
0048BFr 2  18           	clc
0048C0r 2  A5 rr        	lda scraddr
0048C2r 2  69 51        	adc #<(ScreenRowBytes-15)
0048C4r 2  85 rr        	sta scraddr			; new low byte of address.
0048C6r 2  A5 rr        	lda scraddr+1
0048C8r 2  69 01        	adc #>(ScreenRowBytes-15)
0048CAr 2  85 rr        	sta scraddr+1			; new high byte of address.
0048CCr 2  60           	rts
0048CDr 2               
0048CDr 2               .if rflag
0048CDr 2               ;-------------------------------------------------------------
0048CDr 2               ; Drop through.
0048CDr 2               ; Line drawn, now work out next target address.
0048CDr 2               ;
0048CDr 2               ; Input:
0048CDr 2               ;  B  = right mask
0048CDr 2               ;  C  = left mask
0048CDr 2               ;  DE = spriteaddress
0048CDr 2               ;  scraddr = screen address
0048CDr 2               ;-------------------------------------------------------------
0048CDr 2               
0048CDr 2               ddline:
0048CDr 2               
0048CDr 2               ; NEW SPRITE
0048CDr 2               
0048CDr 2               ; first screen byte
0048CDr 2               
0048CDr 2               ddline_spraddr1:
0048CDr 2               	ldy $ffff,x 		; graphic data.
0048CDr 2               ddline_shift1:
0048CDr 2               	lda $ffff,y
0048CDr 2               	sta sprtmp
0048CDr 2               	and z80_c 			; mask away what's not needed.
0048CDr 2               
0048CDr 2               	ldy #0
0048CDr 2               	eor (scraddr),y 	; XOR with what's there.
0048CDr 2               	sta (scraddr),y 	; bung it in.
0048CDr 2               
0048CDr 2               ; carry to next screen byte
0048CDr 2               
0048CDr 2               	lda sprtmp			; fetch data.
0048CDr 2               	and z80_b 			; mask away unwanted
0048CDr 2               	sta sprtmp
0048CDr 2               
0048CDr 2               ; middle screen byte
0048CDr 2               
0048CDr 2               	inx
0048CDr 2               ddline_spraddr2:
0048CDr 2               	ldy $ffff,x 		; second bit of data.
0048CDr 2               ddline_shift2:
0048CDr 2               	lda $ffff,y
0048CDr 2               	sta sprtmp2
0048CDr 2               	and z80_c 			; mask away what's not needed.
0048CDr 2               	ora sprtmp
0048CDr 2               
0048CDr 2               	ldy #16
0048CDr 2               	eor (scraddr),y 	; XOR with what's there.
0048CDr 2               	sta (scraddr),y 	; bung it in.
0048CDr 2               
0048CDr 2               ; carry to last screen byte
0048CDr 2               
0048CDr 2               	lda sprtmp2
0048CDr 2               	and z80_b 			; mask away unwanted
0048CDr 2               
0048CDr 2               	ldy #32
0048CDr 2               	eor (scraddr),y 	; XOR with what's there.
0048CDr 2               	sta (scraddr),y 	; bung it in.
0048CDr 2               
0048CDr 2               ; _BEEB next row
0048CDr 2               
0048CDr 2               	lda scraddr 		; get low byte of address.
0048CDr 2               	and #15
0048CDr 2               	cmp #15				; is this last line of row?
0048CDr 2               	beq :+
0048CDr 2               
0048CDr 2               	; within same row can't increment page
0048CDr 2               	inc scraddr			; new low byte of address.
0048CDr 2               	bne ddline2
0048CDr 2               
0048CDr 2               :
0048CDr 2               	clc
0048CDr 2               	lda scraddr
0048CDr 2               	adc #<(ScreenRowBytes-15)
0048CDr 2               	sta scraddr			; new low byte of address.
0048CDr 2               	lda scraddr+1
0048CDr 2               	adc #>(ScreenRowBytes-15)
0048CDr 2               	sta scraddr+1		; new high byte of address.
0048CDr 2               
0048CDr 2               ; OLD SPRITE
0048CDr 2               
0048CDr 2               ddline2:
0048CDr 2               
0048CDr 2               ; still first row but different data!
0048CDr 2               
0048CDr 2               	dex
0048CDr 2               
0048CDr 2               ; first screen byte
0048CDr 2               
0048CDr 2               ddline_spraddr3:
0048CDr 2               	ldy $ffff,x			; graphic data.
0048CDr 2               ddline_shift3:
0048CDr 2               	lda $ffff,y
0048CDr 2               	sta sprtmp
0048CDr 2               	and z80_cp 			; mask away what's not needed.
0048CDr 2               
0048CDr 2               	ldy #0
0048CDr 2               	eor (z80_hlp),y 	; XOR with what's there.
0048CDr 2               	sta (z80_hlp),y 	; bung it in.
0048CDr 2               
0048CDr 2               ; carry to next screen byte
0048CDr 2               
0048CDr 2               	lda sprtmp			; fetch data.
0048CDr 2               	and z80_bp 			; mask away unwanted
0048CDr 2               	sta sprtmp
0048CDr 2               
0048CDr 2               ; middle screen byte
0048CDr 2               
0048CDr 2               	inx
0048CDr 2               ddline_spraddr4:
0048CDr 2               	ldy $ffff,x 		; second bit of data.
0048CDr 2               ddline_shift4:
0048CDr 2               	lda $ffff,y
0048CDr 2               	sta sprtmp2
0048CDr 2               	and z80_cp 			; mask away what's not needed.
0048CDr 2               	ora sprtmp
0048CDr 2               
0048CDr 2               	ldy #16
0048CDr 2               	eor (z80_hlp),y 	; XOR with what's there.
0048CDr 2               	sta (z80_hlp),y 	; bung it in.
0048CDr 2               
0048CDr 2               ; last screen byte
0048CDr 2               
0048CDr 2               	lda sprtmp2			; fetch data.
0048CDr 2               	and z80_bp 			; mask away unwanted
0048CDr 2               
0048CDr 2               	ldy #32
0048CDr 2               	eor (z80_hlp),y 	; XOR with what's there.
0048CDr 2               	sta (z80_hlp),y 	; bung it in.
0048CDr 2               
0048CDr 2               ; next row of sprite data
0048CDr 2               
0048CDr 2               	inx
0048CDr 2               
0048CDr 2               ; _BEEB screen arrangement
0048CDr 2               
0048CDr 2               	lda z80_lp 			; get low byte of address.
0048CDr 2               	and #15
0048CDr 2               	cmp #15				; is this last line of row?
0048CDr 2               	beq :+
0048CDr 2               
0048CDr 2               	; within same row can't increment page
0048CDr 2               	inc z80_lp			; new low byte of address.
0048CDr 2               	rts
0048CDr 2               
0048CDr 2               :
0048CDr 2               	clc
0048CDr 2               	lda z80_lp
0048CDr 2               	adc #<(ScreenRowBytes-15)
0048CDr 2               	sta z80_lp			; new low byte of address.
0048CDr 2               	lda z80_lp+1
0048CDr 2               	adc #>(ScreenRowBytes-15)
0048CDr 2               	sta z80_lp+1		; new high byte of address.
0048CDr 2               	rts
0048CDr 2               .endif
0048CDr 2               
0048CDr 2               ;----------------------------------------------------
0048CDr 2               ; Display character in A at dispx,dispy.
0048CDr 2               ;
0048CDr 2               ; Input:
0048CDr 2               ;  A 	   = character to print
0048CDr 2               ;----------------------------------------------------
0048CDr 2               
0048CDr 2               pchar:
0048CDr 2  85 rr        	sta fntaddr
0048CFr 2  A9 00        	lda #0
0048D1r 2  85 rr        	sta fntaddr+1
0048D3r 2  06 rr        	asl fntaddr  		; multiply char by 8.
0048D5r 2  26 rr        	rol fntaddr+1
0048D7r 2  06 rr        	asl fntaddr
0048D9r 2  26 rr        	rol fntaddr+1
0048DBr 2  06 rr        	asl fntaddr
0048DDr 2  26 rr        	rol fntaddr+1
0048DFr 2               
0048DFr 2  A5 rr        	lda fntaddr
0048E1r 2  18           	clc
0048E2r 2  69 rr        	adc #<(FONT-256)
0048E4r 2  85 rr        	sta fntaddr		; that's the low byte.
0048E6r 2  A5 rr        	lda fntaddr+1
0048E8r 2  69 rr        	adc #>(FONT-256)
0048EAr 2  85 rr        	sta fntaddr+1		; add displacement.
0048ECr 2               
0048ECr 2               pchark:
0048ECr 2  20 rr rr     	jsr gaadd		; set colour attribute
0048EFr 2  AD rr rr     	lda fontcol
0048F2r 2  A0 00        	ldy #0
0048F4r 2  91 rr        	sta (bufaddr),y
0048F6r 2               
0048F6r 2  20 rr rr     	jsr gprad		; get screen address.
0048F9r 2  A2 07        	ldx #7			; lines to write.
0048FBr 2               pchar0:
0048FBr 2  A0 00        	ldy #0
0048FDr 2  B1 rr        	lda (fntaddr),y 	; get image byte.
0048FFr 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
004902r 2               .if iflag
004902r 2               	eor #TxtInvert		; Invert
004902r 2               .endif
004902r 2  91 rr        	sta (scraddr),y 	; copy to screen.
004904r 2  E6 rr        	inc fntaddr		; next image byte.
004906r 2  D0 02        	bne :+
004908r 2  E6 rr        	inc fntaddr+1
00490Ar 2               :
00490Ar 2  CA           	dex			; next screen row down.
00490Br 2  10 EE        	bpl pchar0		; repeat.
00490Dr 2               
00490Dr 2  60           	rts
00490Er 2               
00490Er 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
004912r 2  03 02 01 00  
004916r 2               
004916r 2               ;----------------------------------------------------
004916r 2               ; LoadFile
004916r 2               ;----------------------------------------------------
004916r 2               
004916r 2               loadfile:
004916r 2  AA           	tax
004917r 2  A9 rr        	lda #<msgdat		; pointer to messages.
004919r 2  85 rr        	sta z80_l
00491Br 2  A9 rr        	lda #>msgdat
00491Dr 2  85 rr        	sta z80_h
00491Fr 2  20 rr rr     	jsr getwrd		; get message number.
004922r 2               
004922r 2               ; Init screen for NTSC
004922r 2               ; this sets the background and border color of the screen
004922r 2               ; in this case border black and background black
004922r 2               
004922r 2  A9 08        	lda #%00001000
004924r 2  8D 0F 90     	sta RegF
004927r 2               
004927r 2               ; z80_hl should point to the textstring now.
004927r 2               ; Read filename +length into buffer
004927r 2               
004927r 2  A0 00        	ldy #0
004929r 2               nameloop:
004929r 2  B1 rr        	lda (z80_hl),y
00492Br 2  30 07        	bmi lastchar
00492Dr 2  99 rr rr     	sta filename,y
004930r 2  C8           	iny
004931r 2  4C rr rr     	jmp nameloop
004934r 2               lastchar:
004934r 2  29 7F        	and #$7f
004936r 2  99 rr rr     	sta filename,y
004939r 2  C8           	iny
00493Ar 2  8C rr rr     	sty filelen
00493Dr 2               
00493Dr 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
00493Dr 2               ;                       usually the first drive, and y set to 1 reads from the header
00493Dr 2               ;                       of the file the location where to save it)
00493Dr 2  A9 01        	lda #1
00493Fr 2  A2 08        	ldx #8		; Disk device
004941r 2  A0 01        	ldy #1
004943r 2  20 BA FF     	jsr $ffba
004946r 2               
004946r 2               ; Load the file name (in accumulator the size of the string
004946r 2               ;                      containing the name, x low address for FileName,
004946r 2               ;                      y high address for FileName)
004946r 2  AD rr rr     	lda filelen
004949r 2  A2 rr        	ldx #<filename
00494Br 2  A0 rr        	ldy #>filename
00494Dr 2  20 BD FF     	jsr $ffbd
004950r 2               
004950r 2               ; load from disk to ram
004950r 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
004952r 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
004954r 2  A0 00        	ldy #>$ff	; target location high (got from header)
004956r 2  20 D5 FF     	jsr $ffd5
004959r 2               
004959r 2  60           	rts
00495Ar 2               
00495Ar 2               filename:
00495Ar 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00495Er 2  00 00 00 00  
004962r 2  00 00 00 00  
00496Ar 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00496Er 2  00 00 00 00  
004972r 2  00 00 00 00  
00497Ar 2               filelen:
00497Ar 2  00           	.byte 0
00497Br 2               
00497Br 2               ;----------------------------------------------------
00497Br 2               ; Sound
00497Br 2               ;----------------------------------------------------
00497Br 2               
00497Br 2               ; Actual memory locations
00497Br 2               
00497Br 2               CHANNEL1_ENABLED  = $ea
00497Br 2               CHANNEL2_ENABLED  = $eb
00497Br 2               CHANNEL3_ENABLED  = $ec
00497Br 2               CHANNEL4_ENABLED  = $ed
00497Br 2               MUSIC_ON		  = $ee
00497Br 2               
00497Br 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
00497Fr 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
004983r 2  DE           SetSoundTone: 		.byte $de
004984r 2               
004984r 2               ;--------------------------------------------
004984r 2               ;                      SOUND    0   1   2   3
004984r 2               ;--------------------------------------------
004984r 2  C8 C8 DE DC  SndTone:		.byte 200,200,222,220
004988r 2  01 00 03 01  SndChannel:		.byte   1,  0,  3,  1
00498Cr 2  3C 3C 3C 28  SndDuration:		.byte  60, 60, 60, 40
004990r 2               
004990r 2               ;--------------------------------------------
004990r 2               ; Called by SOUND with parameter in A
004990r 2               ;--------------------------------------------
004990r 2               
004990r 2               playsound:
004990r 2  A8           	tay
004991r 2  B9 rr rr     	lda SndTone,y		; lda $a0
004994r 2  8D rr rr     	sta SetSoundTone	; sta SetSoundTone
004997r 2  B9 rr rr     	lda SndDuration,y	; lda $a2
00499Ar 2  BE rr rr     	ldx SndChannel,y	; ldx $a1
00499Dr 2  9D rr rr     	sta SetSoundDuration,x	; sta SetSoundDuration,x
0049A0r 2  B9 rr rr     	lda SndTone,y		; lda $a0
0049A3r 2  9D rr rr     	sta SetSoundVars,x	; sta SetSoundVars,x
0049A6r 2  60           	rts
0049A7r 2               
0049A7r 2               ;--------------------------------------------
0049A7r 2               ; Make sound
0049A7r 2               ; Called by vsync every frame
0049A7r 2               ;--------------------------------------------
0049A7r 2               
0049A7r 2               make_sound2:
0049A7r 2  A0 00        	ldy #$00
0049A9r 2  AE rr rr     	ldx SetSoundTone
0049ACr 2  AD rr rr     	lda SetSoundVars
0049AFr 2  CD rr rr     	cmp SetSoundDuration
0049B2r 2  B0 1C        	bcs l0366
0049B4r 2               
0049B4r 2  AD rr rr     	lda SetSoundVars
0049B7r 2  CD rr rr     	cmp SetSoundDuration
0049BAr 2  D0 07        	bne :+
0049BCr 2  A5 EE        	lda MUSIC_ON
0049BEr 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
0049C0r 2  4C rr rr     	jmp l0374
0049C3r 2               :
0049C3r 2               
0049C3r 2  A9 00        	lda #$0
0049C5r 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
0049C7r 2  EE rr rr     	inc SetSoundVars
0049CAr 2  EE 0A 90     	inc RegA
0049CDr 2  4C rr rr     	jmp l0374
0049D0r 2               
0049D0r 2  8C 0A 90     l0366:	sty RegA
0049D3r 2  EC rr rr     	cpx SetSoundVars
0049D6r 2  D0 06        	bne l0374
0049D8r 2  8C rr rr     	sty SetSoundVars
0049DBr 2  8E 0A 90     	stx RegA
0049DEr 2               
0049DEr 2  AD rr rr     l0374:	lda SetSoundVars+1
0049E1r 2  CD rr rr     	cmp SetSoundDuration+1
0049E4r 2  D0 07        	bne :+
0049E6r 2  A5 EE        	lda MUSIC_ON
0049E8r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 1
0049EAr 2  4C rr rr     	jmp l0392
0049EDr 2               :
0049EDr 2  A9 00        	lda #$0
0049EFr 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 2
0049F1r 2  AD rr rr     	lda SetSoundVars+1
0049F4r 2  CD rr rr     	cmp SetSoundDuration+1
0049F7r 2  B0 09        	bcs l0384
0049F9r 2  EE rr rr     	inc SetSoundVars+1
0049FCr 2  EE 0B 90     	inc RegB
0049FFr 2  4C rr rr     	jmp l0392
004A02r 2               
004A02r 2  8C 0B 90     l0384:	sty RegB
004A05r 2  EC rr rr     	cpx SetSoundVars+1
004A08r 2  D0 06        	bne l0392
004A0Ar 2  8C rr rr     	sty SetSoundVars+1
004A0Dr 2  8E 0B 90     	stx RegB
004A10r 2               
004A10r 2  AD rr rr     l0392:	lda SetSoundVars+2
004A13r 2  CD rr rr     	cmp SetSoundDuration+2
004A16r 2  D0 07        	bne :+
004A18r 2  A5 EE        	lda MUSIC_ON
004A1Ar 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 1
004A1Cr 2  4C rr rr     	jmp l03b0
004A1Fr 2               :
004A1Fr 2  A9 00        	lda #$0
004A21r 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 3
004A23r 2  AD rr rr     	lda SetSoundVars+2
004A26r 2  CD rr rr     	cmp SetSoundDuration+2
004A29r 2  B0 09        	bcs l03a2
004A2Br 2  EE rr rr     	inc SetSoundVars+2
004A2Er 2  CE 0C 90     	dec RegC
004A31r 2  4C rr rr     	jmp l03b0
004A34r 2               
004A34r 2  8C 0C 90     l03a2:	sty RegC
004A37r 2  EC rr rr     	cpx SetSoundVars+2
004A3Ar 2  D0 06        	bne l03b0
004A3Cr 2  8C rr rr     	sty SetSoundVars+2
004A3Fr 2  8E 0C 90     	stx RegC
004A42r 2               
004A42r 2  AD rr rr     l03b0:	lda SetSoundVars+3
004A45r 2  CD rr rr     	cmp SetSoundDuration+3
004A48r 2  D0 07        	bne :+
004A4Ar 2  A5 EE        	lda MUSIC_ON
004A4Cr 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 1
004A4Er 2  4C rr rr     	jmp l03d3
004A51r 2               :
004A51r 2               
004A51r 2               	; lda SetSoundVars+3
004A51r 2               	; cmp SetSoundDuration+3
004A51r 2               	; beq l03e1
004A51r 2               
004A51r 2  A9 00        	lda #$0
004A53r 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 4
004A55r 2               
004A55r 2  AD rr rr     	lda SetSoundVars+3
004A58r 2  CD rr rr         cmp SetSoundDuration+3 ; $03b3 $03b4
004A5Br 2  B0 1C            bcs l03d3
004A5Dr 2               
004A5Dr 2  EE rr rr     	inc SetSoundVars+3
004A60r 2  AD rr rr     	lda SetSoundVars+3
004A63r 2  C9 16        	cmp #$16
004A65r 2  D0 07        	bne l03c8
004A67r 2  A9 B0        	lda #$b0
004A69r 2  8D 0D 90     	sta RegD
004A6Cr 2  F0 19        	beq l03e1
004A6Er 2  C9 2B        l03c8:	cmp #$2b
004A70r 2  D0 15        	bne l03e1
004A72r 2  A9 A0        	lda #$a0
004A74r 2  8D 0D 90     	sta RegD
004A77r 2  F0 0E        	beq l03e1
004A79r 2  8C 0D 90     l03d3:	sty RegD
004A7Cr 2  EC rr rr     	cpx SetSoundVars+3
004A7Fr 2  D0 06        	bne l03e1
004A81r 2  8C rr rr     	sty SetSoundVars+3
004A84r 2  8E 0D 90     	stx RegD
004A87r 2               
004A87r 2  60           l03e1:	rts
004A88r 2               
004A88r 2               ;----------------------------------------------------
004A88r 2               ; Set video registers
004A88r 2               ;----------------------------------------------------
004A88r 2               
004A88r 2               SetReg:
004A88r 2  8D rr rr     	sta mode
004A8Br 2  0A           	asl a
004A8Cr 2  18           	clc
004A8Dr 2  6D rr rr     	adc crtflag
004A90r 2  AA           	tax
004A91r 2  BD rr rr     	lda centreX,x
004A94r 2  8D 00 90     	sta Reg0
004A97r 2  BD rr rr     	lda centreY,x
004A9Ar 2  8D 01 90     	sta Reg1
004A9Dr 2  BD rr rr     	lda scrW,x
004AA0r 2  8D 02 90     	sta Reg2
004AA3r 2  BD rr rr     	lda scrH,x
004AA6r 2  8D 03 90     	sta Reg3
004AA9r 2  BD rr rr     	lda RAMset,x
004AACr 2  8D 05 90     	sta Reg5
004AAFr 2  60           	rts
004AB0r 2               
004AB0r 2  04 0C 06 0E  centreX:	.byte $04,$0c,$06,$0e
004AB4r 2  1B 26 18 24  centreY:	.byte $1b,$26,$18,$24
004AB8r 2  96 96 14 14  scrW:		.byte $96,$96,$14,$14
004ABCr 2  17 17 19 19  scrH:		.byte $17,$17,$19,$19
004AC0r 2  8C 8C CC CC  RAMset:		.byte $8c,$8c,$cc,$cc
004AC4r 2  84 A0 84 A0  BottomScr:	.byte $84,$a0,$84,$a0
004AC8r 2               
004AC8r 2               ;----------------------------------------------------
004AC8r 2               ; Display functions
004AC8r 2               ;
004AC8r 2               ; DISPLAYON   resets CentreY
004AC8r 2               ; DISPLAYOFF  locates screen below bottom
004AC8r 2               ; DISPLAYUP   scrolls screen up until default CentreY
004AC8r 2               ; DISPLAYDOWN scrolls screen down until below bottom
004AC8r 2               ;----------------------------------------------------
004AC8r 2               
004AC8r 2               dispon:
004AC8r 2  AD rr rr     	lda mode
004ACBr 2  0A           	asl a
004ACCr 2  18           	clc
004ACDr 2  6D rr rr     	adc crtflag
004AD0r 2  AA           	tax
004AD1r 2  BD rr rr     	lda centreY,x
004AD4r 2  8D 01 90     	sta Reg1
004AD7r 2  60           	rts
004AD8r 2               
004AD8r 2               dispoff:
004AD8r 2  AD rr rr     	lda mode
004ADBr 2  0A           	asl a
004ADCr 2  18           	clc
004ADDr 2  6D rr rr     	adc crtflag
004AE0r 2  AA           	tax
004AE1r 2  BD rr rr     	lda BottomScr,x
004AE4r 2  8D 01 90     	sta Reg1
004AE7r 2  60           	rts
004AE8r 2               
004AE8r 2               dispup:
004AE8r 2  AD rr rr     	lda mode
004AEBr 2  0A           	asl a
004AECr 2  18           	clc
004AEDr 2  6D rr rr     	adc crtflag
004AF0r 2  AA           	tax
004AF1r 2  BD rr rr     	lda centreY,x
004AF4r 2  85 rr        	sta tmp
004AF6r 2               scr_down_loop:
004AF6r 2  A9 01        	lda #1
004AF8r 2  20 rr rr     	jsr delay
004AFBr 2  CE 01 90     	dec Reg1
004AFEr 2  AD 01 90     	lda Reg1
004B01r 2  C5 rr        	cmp tmp
004B03r 2  D0 F1        	bne scr_down_loop
004B05r 2  60           	rts
004B06r 2               
004B06r 2               dispdown:
004B06r 2  AD rr rr     	lda mode
004B09r 2  0A           	asl a
004B0Ar 2  18           	clc
004B0Br 2  6D rr rr     	adc crtflag
004B0Er 2  AA           	tax
004B0Fr 2  A9 01        	lda #1
004B11r 2  20 rr rr     	jsr delay
004B14r 2  EE 01 90     	inc Reg1
004B17r 2  AD 01 90     	lda Reg1
004B1Ar 2  DD rr rr     	cmp BottomScr,x
004B1Dr 2  D0 E7        	bne dispdown
004B1Fr 2  60           	rts
004B20r 2               
004B20r 1               ;	.include "music.inc"
004B20r 1               ;colscr:	.incbin "..\pictures\slasher3c"
004B20r 1               ;datscr:	.incbin "..\pictures\slasher3d"
004B20r 1               
004B20r 1               	.include "z80.asm"
004B20r 2               ;------------------------------------------------------
004B20r 2               ; z80.asm
004B20r 2               ; spectrum stuff
004B20r 2               ; adresses
004B20r 2               
004B20r 2               ;ws	 = $60
004B20r 2               
004B20r 2               ;z80_f	 = ws+$00
004B20r 2               ;z80_a	 = ws+$01
004B20r 2               ;z80_af	 = z80_f
004B20r 2               
004B20r 2               ;z80_c	 = ws+$02
004B20r 2               ;z80_b	 = ws+$03
004B20r 2               ;z80_bc	 = z80_c
004B20r 2               
004B20r 2               ;z80_e	 = ws+$04
004B20r 2               ;z80_d	 = ws+$05
004B20r 2               ;z80_de	 = z80_e
004B20r 2               
004B20r 2               ;z80_l	 = ws+$06
004B20r 2               ;z80_h	 = ws+$07
004B20r 2               ;z80_hl	 = z80_l
004B20r 2               
004B20r 2               ;z80_x    = ws+$08
004B20r 2               ;z80_i    = ws+$09
004B20r 2               ;z80_ix	 = z80_x
004B20r 2               
004B20r 2               ;z80_iy	 = ws+$0a
004B20r 2               
004B20r 2               ;z80_fp	 = ws+$0c
004B20r 2               ;z80_ap	 = ws+$0d
004B20r 2               
004B20r 2               ;z80_cp	 = ws+$0e
004B20r 2               ;z80_bp	 = ws+$0f
004B20r 2               ;z80_bcp = z80_cp
004B20r 2               
004B20r 2               ;z80_ep	 = ws+$10
004B20r 2               ;z80_dp	 = ws+$11
004B20r 2               ;z80_dep = z80_ep
004B20r 2               
004B20r 2               ;z80_lp	 = ws+$12
004B20r 2               ;z80_hp	 = ws+$13
004B20r 2               ;z80_hlp = z80_lp
004B20r 2               
004B20r 2               ;z80_sp   = ws+$14
004B20r 2               
004B20r 2               ;z80_reg0 = ws+$16
004B20r 2               ;z80_reg1 = ws+$17
004B20r 2               ;z80_reg2 = ws+$18
004B20r 2               ;z80_reg3 = ws+$19
004B20r 2               
004B20r 2               ;z80_r	 = ws+$1a
004B20r 2               
004B20r 2               ; Contains seperatly 1 bit set
004B20r 2               ; _BEEB this is not safe memory to use as required by MOS
004B20r 2               
004B20r 2               _bitmem0	= $f8
004B20r 2               _bitmem1	= $f9
004B20r 2               _bitmem2	= $fa
004B20r 2               _bitmem3	= $fb
004B20r 2               _bitmem4	= $fc
004B20r 2               _bitmem5	= $fd
004B20r 2               _bitmem6	= $fe
004B20r 2               _bitmem7	= $ff
004B20r 2               
004B20r 2               ; constants
004B20r 2               _bitvalue0	= $01
004B20r 2               _bitvalue1	= $02
004B20r 2               _bitvalue2	= $04
004B20r 2               _bitvalue3	= $08
004B20r 2               _bitvalue4	= $10
004B20r 2               _bitvalue5	= $20
004B20r 2               _bitvalue6	= $40
004B20r 2               _bitvalue7	= $80
004B20r 2               
004B20r 2               _notbitvalue0	= $fe
004B20r 2               _notbitvalue1	= $fd
004B20r 2               _notbitvalue2	= $fb
004B20r 2               _notbitvalue3	= $f7
004B20r 2               _notbitvalue4	= $ef
004B20r 2               _notbitvalue5	= $df
004B20r 2               _notbitvalue6	= $bf
004B20r 2               _notbitvalue7	= $7f
004B20r 2               
004B20r 2               
004B20r 2               ;add_hl_bc:
004B20r 2               ;		lda z80_l
004B20r 2               ;		clc
004B20r 2               ;		adc z80_c
004B20r 2               ;		sta z80_l
004B20r 2               ;		lda z80_h
004B20r 2               ;		adc z80_b
004B20r 2               ;		sta z80_h
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;add_ix_de:
004B20r 2               ;		lda z80_ix
004B20r 2               ;		clc
004B20r 2               ;		adc z80_e
004B20r 2               ;		sta z80_ix
004B20r 2               ;		lda z80_ix+1
004B20r 2               ;		adc z80_d
004B20r 2               ;		sta z80_ix+1
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;add_iy_de:
004B20r 2               ;		lda z80_iy
004B20r 2               ;		clc
004B20r 2               ;		adc z80_e
004B20r 2               ;		sta z80_iy
004B20r 2               ;		lda z80_iy+1
004B20r 2               ;		adc z80_d
004B20r 2               ;		sta z80_iy+1
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;add_hl_de:
004B20r 2               ;		lda z80_l
004B20r 2               ;		clc
004B20r 2               ;		adc z80_e
004B20r 2               ;		sta z80_l
004B20r 2               ;		lda z80_h
004B20r 2               ;		adc z80_d
004B20r 2               ;		sta z80_h
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;add_ix_bc:
004B20r 2               ;		lda z80_ix
004B20r 2               ;		clc
004B20r 2               ;		adc z80_c
004B20r 2               ;		sta z80_ix
004B20r 2               ;		lda z80_ix+1
004B20r 2               ;		adc z80_b
004B20r 2               ;		sta z80_ix+1
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;add_iy_bc:
004B20r 2               ;		lda z80_iy
004B20r 2               ;		clc
004B20r 2               ;		adc z80_c
004B20r 2               ;		sta z80_iy
004B20r 2               ;		lda z80_iy+1
004B20r 2               ;		adc z80_b
004B20r 2               ;		sta z80_iy+1
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;sbc_hl_de:
004B20r 2               ;		lda z80_l
004B20r 2               ;		sbc z80_e
004B20r 2               ;		sta z80_l
004B20r 2               ;		lda z80_h
004B20r 2               ;		sbc z80_d
004B20r 2               ;		sta z80_h
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;sbc_hl_bc:
004B20r 2               ;		lda z80_l
004B20r 2               ;		sbc z80_c
004B20r 2               ;		sta z80_l
004B20r 2               ;		lda z80_h
004B20r 2               ;		sbc z80_b
004B20r 2               ;		sta z80_h
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;cmp_hl_bc:
004B20r 2               ;		lda z80_l
004B20r 2               ;		cmp z80_c
004B20r 2               ;		bne cmp_hl_bc_end
004B20r 2               ;		lda z80_h
004B20r 2               ;		cmp z80_b
004B20r 2               ;cmp_hl_bc_end:
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;cmp_iy_ix:
004B20r 2               ;		lda z80_iy
004B20r 2               ;		cmp z80_ix
004B20r 2               ;		bne cmp_iy_ix_end
004B20r 2               ;		lda z80_iy+1
004B20r 2               ;		cmp z80_ix+1
004B20r 2               ;cmp_iy_ix_end:
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;dec_hl:
004B20r 2               ;		lda z80_l
004B20r 2               ;		bne dec_hl_no_dec_h
004B20r 2               ;		dec z80_h
004B20r 2               ;dec_hl_no_dec_h:
004B20r 2               ;		dec z80_l
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;dec_ix:
004B20r 2               ;		lda z80_ix
004B20r 2               ;		bne dec_ix_no_dec_h
004B20r 2               ;		dec z80_ix+1
004B20r 2               ;dec_ix_no_dec_h:
004B20r 2               ;		dec z80_ix
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;dec_bc:
004B20r 2               ;		lda z80_c
004B20r 2               ;		bne dec_bc_no_dec_b
004B20r 2               ;		dec z80_b
004B20r 2               ;dec_bc_no_dec_b:
004B20r 2               ;		dec z80_c
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;dec_de:
004B20r 2               ;		lda z80_e
004B20r 2               ;		bne dec_de_no_dec_d
004B20r 2               ;		dec z80_d
004B20r 2               ;dec_de_no_dec_d:
004B20r 2               ;		dec z80_e
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               ;ex_af_afs:
004B20r 2               ;	rts
004B20r 2               ;ex_de_hl:
004B20r 2               ;		lda z80_e
004B20r 2               ;		ldx z80_l
004B20r 2               ;		stx z80_e
004B20r 2               ;		sta z80_l
004B20r 2               ;		lda z80_d
004B20r 2               ;		ldx z80_h
004B20r 2               ;		stx z80_d
004B20r 2               ;		sta z80_h
004B20r 2               ;		rts
004B20r 2               ;
004B20r 2               exx:
004B20r 2  A5 rr        		lda z80_c
004B22r 2  A4 rr        		ldy z80_cp
004B24r 2  84 rr        		sty z80_c
004B26r 2  85 rr        		sta z80_cp
004B28r 2  A5 rr        		lda z80_b
004B2Ar 2  A4 rr        		ldy z80_bp
004B2Cr 2  84 rr        		sty z80_b
004B2Er 2  85 rr        		sta z80_bp
004B30r 2  A5 rr        		lda z80_e
004B32r 2  A4 rr        		ldy z80_ep
004B34r 2  84 rr        		sty z80_e
004B36r 2  85 rr        		sta z80_ep
004B38r 2  A5 rr        		lda z80_d
004B3Ar 2  A4 rr        		ldy z80_dp
004B3Cr 2  84 rr        		sty z80_d
004B3Er 2  85 rr        		sta z80_dp
004B40r 2  A5 rr        		lda scraddr
004B42r 2  A4 rr        		ldy z80_lp
004B44r 2  84 rr        		sty scraddr
004B46r 2  85 rr        		sta z80_lp
004B48r 2  A5 rr        		lda scraddr+1
004B4Ar 2  A4 rr        		ldy z80_hp
004B4Cr 2  84 rr        		sty scraddr+1
004B4Er 2  85 rr        		sta z80_hp
004B50r 2  60           		rts
004B51r 2               
004B51r 2               ;ex_sp_hl:
004B51r 2               ;		tsx
004B51r 2               ;		lda $0103,x
004B51r 2               ;		ldy z80_h
004B51r 2               ;		sta z80_h
004B51r 2               ;		tya
004B51r 2               ;		sta $0103,x
004B51r 2               ;		lda $0104,x
004B51r 2               ;		ldy z80_l
004B51r 2               ;		sta z80_l
004B51r 2               ;		tya
004B51r 2               ;		sta $104,x
004B51r 2               ;		rts
004B51r 2               ;
004B51r 2               ;ldi:
004B51r 2               ;	rts
004B51r 2               ;ldir:
004B51r 2               ;		ldy #$00
004B51r 2               ;		ldx z80_b
004B51r 2               ;		beq ldir_last_page
004B51r 2               ;ldir_loop:
004B51r 2               ;		lda (z80_hl),y
004B51r 2               ;		sta (z80_de),y
004B51r 2               ;		iny
004B51r 2               ;		bne ldir_loop
004B51r 2               ;		inc z80_h
004B51r 2               ;		inc z80_d
004B51r 2               ;		dex
004B51r 2               ;		bne ldir_loop
004B51r 2               ;ldir_last_page:
004B51r 2               ;		lda z80_c
004B51r 2               ;		beq ldir_end
004B51r 2               ;ldir_last_page_loop:
004B51r 2               ;		lda (z80_hl),y
004B51r 2               ;		sta (z80_de),y
004B51r 2               ;		iny
004B51r 2               ;		cpy z80_c
004B51r 2               ;		bne ldir_last_page_loop
004B51r 2               ;ldir_end:
004B51r 2               ;		stx z80_c
004B51r 2               ;		stx z80_b
004B51r 2               ;		tya
004B51r 2               ;		clc
004B51r 2               ;		adc z80_l
004B51r 2               ;		sta z80_l
004B51r 2               ;		bcc *+4
004B51r 2               ;		inc z80_h
004B51r 2               ;		tya
004B51r 2               ;		clc
004B51r 2               ;		adc z80_e
004B51r 2               ;		sta z80_e
004B51r 2               ;		bcc *+4
004B51r 2               ;		inc z80_d
004B51r 2               ;		rts
004B51r 2               ;
004B51r 2               ;lddr:		ldy #$00
004B51r 2               ;lddr_loop:
004B51r 2               ;		lda (z80_hl),y
004B51r 2               ;		sta (z80_de),y
004B51r 2               ;		jsr dec_hl
004B51r 2               ;		jsr dec_de
004B51r 2               ;		jsr dec_bc
004B51r 2               ;		lda z80_b
004B51r 2               ;		ora z80_c
004B51r 2               ;		bne lddr_loop
004B51r 2               ;		rts
004B51r 2               ;ei:
004B51r 2               ;		rts
004B51r 2               ;di:
004B51r 2               ;		rts
004B51r 2               
004B51r 2               ;-------------------------------------------------------------
004B51r 2               ; Set bits in bitmem
004B51r 2               ;-------------------------------------------------------------
004B51r 2               
004B51r 2               .if 0
004B51r 2               z80_init:
004B51r 2               	ldx #$00
004B51r 2               	lda #$01
004B51r 2               z80_init_loop:
004B51r 2               	sta _bitmem0,x
004B51r 2               	inx
004B51r 2               	asl a
004B51r 2               	bne z80_init_loop
004B51r 2               	rts
004B51r 2               .endif
004B51r 2               
004B51r 2               push_af:
004B51r 2               push_bc:
004B51r 2               push_de:
004B51r 2               push_hl:
004B51r 2               
004B51r 2               pop_af:
004B51r 2               pop_bc:
004B51r 2               pop_de:
004B51r 2               pop_ix:
004B51r 2               pop_hl:
004B51r 2               
004B51r 2               add_hl_hl:
004B51r 2               
004B51r 2               inc_bc:
004B51r 2               inc_de:
004B51r 2               inc_hl:
004B51r 2               inc_ix:
004B51r 2               inc_sp:
004B51r 2               
004B51r 2               cpir:
004B51r 2               
004B51r 2               ex_af_af:
004B51r 2               ;	rts
004B51r 2               
004B51r 1               
004B51r 1               eind_asm:
004B51r 1               eop:					; End Of Program
004B51r 1               
004B51r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
004B51r 1               
