ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:		.res 1
00002Br 2  xx           loopb:		.res 1
00002Cr 2  xx           loopc:		.res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      ; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      ; not a ptr
000051r 2  xx           tmproom:	.res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000057r 2  xx           vsync_count:.res 1
000058r 2  xx           colpatt:	.res 1
000059r 2  xx           sprtmp:     .res 1
00005Ar 2  xx           sprtmp2:    .res 1
00005Br 2  xx           sprshft:    .res 1
00005Cr 2               
00005Cr 2  xx           spriteink:  .res 1
00005Dr 2  xx           colour_byte:.res 1
00005Er 2  xx           colour_xor: .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:	.res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:	.res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 1               	.include "z80-zp.inc"
000061r 2               ;ws	 = $60
000061r 2               
000061r 2  xx           z80_f: .res 1;	 = ws+$00
000062r 2  xx           z80_a: .res 1;	 = ws+$01
000063r 2               z80_af	 = z80_f
000063r 2               
000063r 2  xx           z80_c: .res 1;	 = ws+$02
000064r 2  xx           z80_b: .res 1;	 = ws+$03
000065r 2               z80_bc	 = z80_c
000065r 2               
000065r 2  xx           z80_e: .res 1;	 = ws+$04
000066r 2  xx           z80_d: .res 1;	 = ws+$05
000067r 2               z80_de	 = z80_e
000067r 2               
000067r 2  xx           z80_l: .res 1;	 = ws+$06
000068r 2  xx           z80_h: .res 1;	 = ws+$07
000069r 2               z80_hl	 = z80_l
000069r 2               
000069r 2  xx           z80_x: .res 1;    = ws+$08
00006Ar 2  xx           z80_i: .res 1;    = ws+$09
00006Br 2               z80_ix	 = z80_x
00006Br 2               
00006Br 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Dr 2               
00006Dr 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Er 2  xx           z80_ap: .res 1;	 = ws+$0d
00006Fr 2               
00006Fr 2  xx           z80_cp: .res 1;	 = ws+$0e
000070r 2  xx           z80_bp: .res 1;	 = ws+$0f
000071r 2               z80_bcp	 = z80_cp
000071r 2               
000071r 2  xx           z80_ep: .res 1;	 = ws+$10
000072r 2  xx           z80_dp: .res 1;	 = ws+$11
000073r 2               z80_dep	 = z80_ep
000073r 2               
000073r 2  xx           z80_lp: .res 1;	 = ws+$12
000074r 2  xx           z80_hp: .res 1;	 = ws+$13
000075r 2               z80_hlp	 = z80_lp
000075r 2               
000075r 2  xx xx        z80_sp: .res 2;   = ws+$14
000077r 2               
000077r 2  xx           z80_reg0: .res 1; = ws+$16
000078r 2  xx           z80_reg1: .res 1; = ws+$17
000079r 2  xx           z80_reg2: .res 1; = ws+$18
00007Ar 2  xx           z80_reg3: .res 1; = ws+$19
00007Br 2               
00007Br 2               ;z80_r: .res 1;	 = ws+$1a
00007Br 2               
00007Br 1               
00007Br 1               ;----------------------------------------------
00007Br 1               ; BASIC header
00007Br 1               ;----------------------------------------------
00007Br 1               
00007Br 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "testanim.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving sprites enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metablocks 16x6"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 43450	; = 40000 * 1,108/1,02
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 40000
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; MAP + 22 x 22
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3  20 rr rr     	jsr game	 		; start the game.
000003r 3  60           	rts
000004r 3               
000004r 3               ; Don't change the order of these four.
000004r 3               ; Menu routine relies on winlft following wintop.
000004r 3               
000004r 3  01           wintop:	.byte WINDOWTOP		; top of window.
000005r 3  00           winlft:	.byte WINDOWLFT		; left edge.
000006r 3  15           winhgt:	.byte WINDOWHGT		; window height.
000007r 3  16           winwid:	.byte WINDOWWID		; window width.
000008r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000009r 3               
000009r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000009r 3               
000009r 3  08           wntopx:	.byte (8 * WINDOWTOP)
00000Ar 3  00           wnlftx:	.byte (8 * WINDOWLFT)
00000Br 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00000Cr 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00000Dr 3               
00000Dr 3               ; Make sure pointers are arranged in the same order as the data itself.
00000Dr 3               
00000Dr 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
00000Fr 3               
00000Fr 3               ; Assorted game routines which can go in contended memory.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for inventory.
00000Fr 3               ; called by the INV command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with objects seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of INV menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               .if mflag
00000Fr 3               minve:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	asl a
00000Fr 3               	sta winhgt
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	asl a
00000Fr 3               	sta winwid
00000Fr 3               .endif
00000Fr 3               	lda #<(invdis)		; routine address.
00000Fr 3               	sta mod0+1		; set up menu routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(invdis)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               	lda #<(fopt)		; find option from available objects.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fopt)
00000Fr 3               	sta mod1+1+1
00000Fr 3               	jmp dbox		; do menu routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for menu.
00000Fr 3               ; called by the MENU command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with menu items seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of MENU menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               mmenu:
00000Fr 3               	lda #<(always)		; routine address.
00000Fr 3               	sta mod0+1		; set up routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(always)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               
00000Fr 3               	lda #<(fstd)		; standard option selection.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fstd)
00000Fr 3               	sta mod1+2
00000Fr 3               
00000Fr 3               ; Drop through into box routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Work out size of box for message or menu.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox:
00000Fr 3               	lda #<msgdat		; pointer to messages.
00000Fr 3               	sta z80_l
00000Fr 3               	lda #>msgdat
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	jsr getwrd		; get message number.
00000Fr 3               
00000Fr 3               	lda z80_h		; store pointer to message.
00000Fr 3               	sta TmpAddr
00000Fr 3               	lda z80_l
00000Fr 3               	sta TmpAddr+1
00000Fr 3               
00000Fr 3               	lda #1			; height.
00000Fr 3               	sta z80_d
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               	sta z80_e		; maximum width.
00000Fr 3               dbox5:
00000Fr 3               	lda #0			; this line"s width.
00000Fr 3               	sta z80_b
00000Fr 3               mod2:
00000Fr 3               	jsr always		; item in player"s possession?
00000Fr 3               	cmp #255
00000Fr 3               	bne dbox6		; not in inventory, skip this line.
00000Fr 3               	inc z80_d		; add to tally.
00000Fr 3               dbox6:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a		; reached end of line?
00000Fr 3               	cmp #','
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	cmp #ASCII_NEWLINE
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	inc z80_b		; add to this line"s width.
00000Fr 3               	lda z80_a
00000Fr 3               	bmi dbox4		; end of message? yes, end count.
00000Fr 3               	jmp dbox6		; repeat until we find the end.
00000Fr 3               dbox3:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox5		; no, carry on looking.
00000Fr 3               	lda z80_b		; make this the widest so far.
00000Fr 3               	sta z80_e
00000Fr 3               	jmp dbox5		; keep looking.
00000Fr 3               dbox4:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox8		; no, carry on looking.
00000Fr 3               	lda z80_b		; final line is the longest so far.
00000Fr 3               	sta z80_e
00000Fr 3               dbox8:
00000Fr 3               	dec z80_d		; decrement items found.
00000Fr 3               	bne :+			; total was zero.
00000Fr 3               	lda #255
00000Fr 3               	sta varopt
00000Fr 3               	jmp dbox15
00000Fr 3               :
00000Fr 3               	lda z80_e		; longest line.
00000Fr 3               	bne :+			; was it zero?
00000Fr 3               	jmp dbox15		; total was zero.
00000Fr 3               :
00000Fr 3               	sta bwid		; set up size.
00000Fr 3               	lda z80_d
00000Fr 3               	sta blen
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; That's set up our box size.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               	lda winhgt		; window height in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_d		; subtract height of box.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc wintop		; add top edge of window.
00000Fr 3               	sta btop		; set up box top.
00000Fr 3               
00000Fr 3               	lda winwid		; window width in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_e		; subtract box width.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc winlft		; add left edge of window.
00000Fr 3               	sta blft		; box left.
00000Fr 3               
00000Fr 3               	lda #<(FONT-256)		; font.
00000Fr 3               	sta grbase		; set up for text display.
00000Fr 3               	lda #>(FONT-256)
00000Fr 3               	sta grbase+1
00000Fr 3               
00000Fr 3               	lda TmpAddr+1		; restore message pointer.
00000Fr 3               	sta z80_l
00000Fr 3               	lda TmpAddr
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set display coordinate.
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               dbox2:
00000Fr 3               	lda combyt		; get object number.
00000Fr 3               	sta z80_a
00000Fr 3               mod0:
00000Fr 3               	jsr always		; check inventory for display.
00000Fr 3               	cmp #255
00000Fr 3               	beq :+
00000Fr 3               	jmp dbox13		; not in inventory, skip this line.
00000Fr 3               :
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set left display position.
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_b		; store width.
00000Fr 3               dbox0:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	cmp #','		; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               	cmp #ASCII_NEWLINE			; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               
00000Fr 3               	cmp #141			; end of line?
00000Fr 3               	bne :+
00000Fr 3               	dec bwid
00000Fr 3               	jmp dbox7		; yes, next one.
00000Fr 3               :
00000Fr 3               	dec z80_b		; one less to display.
00000Fr 3               	and #127		; remove terminator.
00000Fr 3               
00000Fr 3               	jsr pchr		; display on screen.
00000Fr 3               
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bmi :+
00000Fr 3               	jmp dbox7		; yes, job done.
00000Fr 3               :
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	beq :+			; are any left?
00000Fr 3               	jmp dbox0		; yes, continue.
00000Fr 3               :
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Reached limit of characters per line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dbox9:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bcs :+
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox9
00000Fr 3               
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Fill box to end of line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dboxf:
00000Fr 3               	lda #32			; space character.
00000Fr 3               	jsr pchr		; display character.
00000Fr 3               	dec z80_b
00000Fr 3               	beq :+
00000Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00000Fr 3               :
00000Fr 3               	rts
00000Fr 3               dbox1:
00000Fr 3               	inc z80_l		; skip character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill box out to right side.
00000Fr 3               dbox10:
00000Fr 3               	inc dispy		; y coordinate down a line next position.
00000Fr 3               	jmp dbox2		; next line.
00000Fr 3               dbox7:
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	bne :+			; are any left?
00000Fr 3               	jmp dbox11		; no, nothing to draw.
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill message to line.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Drawn the box menu, now select option.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox11:
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set bar position.
00000Fr 3               dbox14:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	bne dbox14		; yes, debounce it.
00000Fr 3               	jsr dbar		; draw bar.
00000Fr 3               dbox12:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	beq dbox12		; no, nothing.
00000Fr 3               	and #16			; fire button pressed?
00000Fr 3               	bne :+
00000Fr 3               mod1:
00000Fr 3               	jmp fstd		; yes, job done.
00000Fr 3               :
00000Fr 3               	jsr dbar		; delete bar.
00000Fr 3               
00000Fr 3               	lda joyval		; joystick reading.
00000Fr 3               	and #8			; going up?
00000Fr 3               	beq dboxu		; yes, go up.
00000Fr 3               
00000Fr 3               	ldx dispy		; vertical position of bar.
00000Fr 3               	inx			; look down.
00000Fr 3               	txa
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find distance from top.
00000Fr 3               	cmp blen		; top of box.
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	inc dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               dboxu:
00000Fr 3               	lda dispy		; vertical position of bar.
00000Fr 3               	cmp btop		; are we at the top?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	dec dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               fstd:
00000Fr 3               	lda dispy		; bar position.
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Option not available.  Skip this line.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox13:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               
00000Fr 3               	bpl :+			; end of message?
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox13
00000Fr 3               dbox15:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	sta winwid
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	sta winhgt
00000Fr 3               .endif
00000Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00000Fr 3               	sta z80_h
00000Fr 3               	lda TmpAddr+1
00000Fr 3               	sta z80_l
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Invert bar
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbar:
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set display coordinate.
00000Fr 3               	jsr gprad		; get printing address.
00000Fr 3               
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_c		; loop counter in c.
00000Fr 3               	lda z80_h
00000Fr 3               	sta z80_d		; store screen address high byte.
00000Fr 3               dbar1:
00000Fr 3               	ldx #7			; pixel height in b.
00000Fr 3               dbar0:
00000Fr 3               	ldy scrtab,x
00000Fr 3               	lda (scraddr),y		; get screen byte.
00000Fr 3               	eor #255		; reverse all bits.
00000Fr 3               	sta (scraddr),y		; write back to screen.
00000Fr 3               	dex			; next line down.
00000Fr 3               	bpl dbar0		; draw rest of character.
00000Fr 3               
00000Fr 3               	lda scraddr
00000Fr 3               	adc #8
00000Fr 3               	sta scraddr
00000Fr 3               	bcc :+
00000Fr 3               	inc scraddr+1
00000Fr 3               :
00000Fr 3               	dec z80_c		; decrement character counter.
00000Fr 3               	bne dbar1		; repeat for whole line.
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Point to object
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  A = object number, A=255 if already in possession
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               invdis:
00000Fr 3               	lda z80_l		; store message text pointer.
00000Fr 3               	pha
00000Fr 3               	lda z80_h
00000Fr 3               	pha
00000Fr 3               	lda combyt		; object number.
00000Fr 3               	inc combyt		; ready for next one.
00000Fr 3               	jsr gotob		; check if we have object.
00000Fr 3               	tay
00000Fr 3               	pla
00000Fr 3               	sta z80_h
00000Fr 3               	pla
00000Fr 3               	sta z80_l
00000Fr 3               	tya
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Find option selected.
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected object
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               fopt:
00000Fr 3               	lda dispy
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta tmp+2		; option selected in b register.
00000Fr 3               	inc tmp+2
00000Fr 3               
00000Fr 3               	lda #0			; set to first item.
00000Fr 3               	sta combyt		; object number.
00000Fr 3               fopt0:
00000Fr 3               	jsr fobj		; find next object in inventory.
00000Fr 3               	dec tmp+2
00000Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00000Fr 3               
00000Fr 3               	lda combyt		; get option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	dec varopt		; one less, due to where we increment combyt.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               fobj:
00000Fr 3               	ldy combyt		; object number.
00000Fr 3               	inc combyt		; ready for next item.
00000Fr 3               	tya
00000Fr 3               	jsr gotob		; do we have this item?
00000Fr 3               	cmp #255
00000Fr 3               	bne :+
00000Fr 3               	rts
00000Fr 3               :
00000Fr 3               	jmp fobj		; yes, it's on the list.
00000Fr 3               .endif
00000Fr 3               
00000Fr 3               ;----------------------------------------------------
00000Fr 3               ; Clear sprite table.
00000Fr 3               ;
00000Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00000Fr 3               ;----------------------------------------------------
00000Fr 3               
00000Fr 3               xspr:
00000Fr 3  A9 FF        	lda #255		; clear byte.
000011r 3  A2 00        	ldx #0			; length of table.
000013r 3               xspr0:
000013r 3  9D rr rr     	sta sprtab,x		; sprite table.
000016r 3  E8           	inx			; move to next byte.
000017r 3  E0 CC        	cpx #SPRBUF
000019r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00001Br 3  60           	rts
00001Cr 3               
00001Cr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00001Cr 3               ; Sound, NOT IMPLEMENTED!!!
00001Cr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00001Cr 3               ;
00001Cr 3               ;silenc:
00001Cr 3               ;	jsr silen1 		; silence channel 1.
00001Cr 3               ;	jsr silen2 		; silence channel 2.
00001Cr 3               ;	jsr silen3 		; silence channel 3.
00001Cr 3               ;	jmp plsnd 		; play all channels to switch them off.
00001Cr 3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
00001Cr 3               
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               ; Initialise all objects.
00001Cr 3               ;
00001Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               
00001Cr 3               .if oflag
00001Cr 3               iniob:
00001Cr 3               	lda #<objdta		; objects table.
00001Cr 3               	sta z80_x
00001Cr 3               	lda #>objdta
00001Cr 3               	sta z80_i
00001Cr 3               
00001Cr 3               	ldx numob 		; number of objects in the game.
00001Cr 3               iniob0:
00001Cr 3               	ldy #35
00001Cr 3               	lda (z80_ix),y 		; start screen.
00001Cr 3               	ldy #32
00001Cr 3               	sta (z80_ix),y 		; set start screen.
00001Cr 3               
00001Cr 3               	ldy #36
00001Cr 3               	lda (z80_ix),y 		; find start y.
00001Cr 3               	ldy #33
00001Cr 3               	sta (z80_ix),y 		; set start y.
00001Cr 3               
00001Cr 3               	ldy #37
00001Cr 3               	lda (z80_ix),y 		; get initial x.
00001Cr 3               	ldy #34
00001Cr 3               	sta (z80_ix),y 		; set x coord.
00001Cr 3               
00001Cr 3               	clc 			; point to next object.
00001Cr 3               	lda z80_x
00001Cr 3               	adc #38			; distance between objects.
00001Cr 3               	sta z80_x
00001Cr 3               	bcc :+
00001Cr 3               	inc z80_i
00001Cr 3               :
00001Cr 3               	dex 			; repeat.
00001Cr 3               	bne iniob0
00001Cr 3               
00001Cr 3               	rts
00001Cr 3               .endif
00001Cr 3               
00001Cr 3               ;-----------------------------------------------
00001Cr 3               ; Redraw the screen.
00001Cr 3               ;
00001Cr 3               ; Remove old copy of all sprites for redraw.
00001Cr 3               ;-----------------------------------------------
00001Cr 3               
00001Cr 3               redraw:
00001Cr 3               .if xflag
00001Cr 3               	lda #WINDOWWID
00001Cr 3               	sta winwid
00001Cr 3               	lda #WINDOWHGT
00001Cr 3               	sta winhgt
00001Cr 3               .endif
00001Cr 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00001Er 3  48           	pha
00001Fr 3  A5 rr        	lda z80_x
000021r 3  48           	pha
000022r 3               
000022r 3  20 rr rr     	jsr droom		; show screen layout.
000025r 3               .if oflag
000025r 3               	jsr shwob		; draw objects.
000025r 3               .endif
000025r 3               numsp0:
000025r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000027r 3  85 rr        	sta tmp
000029r 3               
000029r 3  A9 rr        	lda #<sprtab		; sprite table.
00002Br 3  85 rr        	sta z80_x
00002Dr 3  A9 rr        	lda #>sprtab
00002Fr 3  85 rr        	sta z80_i
000031r 3               redrw0:
000031r 3  A0 00        	ldy #0
000033r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
000035r 3  C9 FF        	cmp #255		; is it enabled?
000037r 3  F0 0B        	beq redrw1 		; no, find next one.
000039r 3               
000039r 3  A0 03        	ldy #var_Y
00003Br 3  B1 rr        	lda (z80_ix),y 		; sprite y.
00003Dr 3  C9 B1        	cmp #177		; beyond maximum?
00003Fr 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000041r 3               
000041r 3  20 rr rr     	jsr sspria		; show single sprite.
000044r 3               
000044r 3               redrw1:
000044r 3  18           	clc			; next sprite.
000045r 3  A5 rr        	lda z80_x
000047r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000049r 3  85 rr        	sta z80_x
00004Br 3  90 02        	bcc :+
00004Dr 3  E6 rr        	inc z80_i
00004Fr 3               :
00004Fr 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000051r 3  D0 DE        	bne redrw0
000053r 3               
000053r 3               rpblc1:
000053r 3               ;	jsr dshrp		; redraw shrapnel.
000053r 3               
000053r 3               .if aflag
000053r 3               	jsr rbloc		; draw blocks for this screen
000053r 3               .endif
000053r 3  68           	pla			; retrieve sprite pointer.
000054r 3  85 rr        	sta z80_x
000056r 3  68           	pla
000057r 3  85 rr        	sta z80_i
000059r 3               
000059r 3  60           	rts
00005Ar 3               
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               ; Clear screen routine.
00005Ar 3               ;
00005Ar 3               ; Fill screenmem $8000-$97ff with ScrFillByte
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               
00005Ar 3               cls:
00005Ar 3  A9 10        	lda #>CharAddress	; Character RAM address.
00005Cr 3  8D rr rr     	sta clsloop+2
00005Fr 3  A9 00        	lda #ScrFillByte
000061r 3  A0 00        	ldy #0
000063r 3  A2 10        	ldx #16
000065r 3               clsloop:
000065r 3  99 00 10     	sta CharAddress,y
000068r 3  C8           	iny
000069r 3  D0 FA        	bne clsloop
00006Br 3  EE rr rr     	inc clsloop+2
00006Er 3  CA           	dex
00006Fr 3  D0 F4        	bne clsloop
000071r 3               
000071r 3  60           	rts
000072r 3               
000072r 3               ;----------------------------------------------------------------------
000072r 3               ; FODDER check
000072r 3               ;----------------------------------------------------------------------
000072r 3               
000072r 3               .if pflag .or dflag
000072r 3               fdchk:
000072r 3               	cmp #FODDER 		; is it fodder?
000072r 3               	beq :+
000072r 3               	rts 			; no.
000072r 3               :
000072r 3               	lda #0			; wipe fodder in MAP
000072r 3               	ldy #0
000072r 3               	sta (bufaddr),y 	; rewrite block type.
000072r 3               
000072r 3               	lda dispx		; x=x/8
000072r 3               	pha
000072r 3               	lsr a
000072r 3               	lsr a
000072r 3               	lsr a
000072r 3               	sta dispx
000072r 3               
000072r 3               	lda dispy		; y=y/8
000072r 3               	pha
000072r 3               	lsr a
000072r 3               	lsr a
000072r 3               	lsr a
000072r 3               	sta dispy
000072r 3               
000072r 3               	lda #0 			; block to write.
000072r 3               	jsr pattr 		; write block.
000072r 3               
000072r 3               	pla
000072r 3               	sta dispy
000072r 3               	pla
000072r 3               	sta dispx
000072r 3               	rts
000072r 3               .endif
000072r 3               
000072r 3               ;----------------------------------------------------
000072r 3               ; Scrolly text and puzzle variables.
000072r 3               ;----------------------------------------------------
000072r 3               
000072r 3               .if sflag
000072r 3               txtbit:	.byte 128		; bit to write.
000072r 3               txtwid:	.byte 16		; width of ticker message.
000072r 3               txtpos:	.word msgdat
000072r 3               txtini:	.word msgdat
000072r 3               txtscr:	.word ScreenAddr
000072r 3               .endif
000072r 3               
000072r 3               ;----------------------------------------------------
000072r 3               ; Specialist routines.
000072r 3               ; Process shrapnel.
000072r 3               ;----------------------------------------------------
000072r 3               proshr:
000072r 3               .if pflag
000072r 3               	lda #<SHRAPN		; table.
000072r 3               	sta z80_x
000072r 3               	lda #>SHRAPN
000072r 3               	sta z80_i
000072r 3               
000072r 3               	lda #NUMSHR		; shrapnel pieces to process.
000072r 3               	sta shrctr
000072r 3               prosh0:
000072r 3               	ldy #0
000072r 3               	lda (z80_ix),y		; on/off marker.
000072r 3               	asl a
000072r 3               proshx:
000072r 3               	bcs :+
000072r 3               	jsr prosh1 		; on, so process it.
000072r 3               :
000072r 3               	clc
000072r 3               	lda z80_x
000072r 3               	adc #SHRSIZ
000072r 3               	sta z80_x
000072r 3               	bcc :+
000072r 3               	inc z80_i
000072r 3               :
000072r 3               	dec shrctr		; round again.
000072r 3               	bne prosh0
000072r 3               .endif
000072r 3               .if sflag
000072r 3               	jsr scrly
000072r 3               .endif
000072r 3  60           	rts
000073r 3               
000073r 3               .if pflag
000073r 3               ;----------------------------------------------------
000073r 3               ; Proces shrapnel piece
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               prosh1:
000073r 3               	jsr plot 		; delete the pixel.
000073r 3               
000073r 3               	lda #<shrptr		; shrapnel routine pointers.
000073r 3               	sta z80_l
000073r 3               	lda #>shrptr
000073r 3               	sta z80_h
000073r 3               
000073r 3               	ldy #0
000073r 3               	lda (z80_ix),y		; restore shrapnel type.
000073r 3               	jsr prosh2 		; run the routine.
000073r 3               	jsr chkxy		; check x and y are good before we redisplay.
000073r 3               
000073r 3               	lda #<SHRSIZ 		; distance to next.
000073r 3               	sta z80_e
000073r 3               	lda #>SHRSIZ
000073r 3               	sta z80_d
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Run the routine
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               prosh2:
000073r 3               	asl a 			; 2 bytes per address.
000073r 3               	tay
000073r 3               	lda shrptr,y
000073r 3               	sta z80_l
000073r 3               	lda shrptr+1,y 		; fetch high byte from table.
000073r 3               	sta z80_h
000073r 3               	jmp (z80_hl) 		; jump to routine.
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Paricle routine table
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               shrptr:	.word laser		; laser.
000073r 3               	.word trail		; vapour trail.
000073r 3               	.word shrap		; shrapnel from explosion.
000073r 3               	.word dotl		; horizontal starfield left.
000073r 3               	.word dotr		; horizontal starfield right.
000073r 3               	.word dotu		; vertical starfield up.
000073r 3               	.word dotd		; vertical starfield down.
000073r 3               	.word ptcusr		; user particle.
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Explosion shrapnel.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               shrap:
000073r 3               	ldy #1
000073r 3               	lda (z80_ix),y 		; get the angle.
000073r 3               	clc
000073r 3               	adc #<shrsin		; shrapnel sine table.
000073r 3               	sta z80_l
000073r 3               	lda #>shrsin
000073r 3               	adc #0
000073r 3               	sta z80_h
000073r 3               
000073r 3               	ldy #0
000073r 3               	lda (z80_hl),y 		; fetch value from table.
000073r 3               	sta z80_e
000073r 3               	inc z80_l 		; next byte of table.
000073r 3               	bne :+
000073r 3               	inc z80_h
000073r 3               :
000073r 3               	ldy #0
000073r 3               	lda (z80_hl),y		; fetch value from table.
000073r 3               	sta z80_d
000073r 3               	inc z80_l		; next byte of table.
000073r 3               	bne :+
000073r 3               	inc z80_h
000073r 3               :
000073r 3               	ldy #0
000073r 3               	lda (z80_hl),y 		; fetch value from table.
000073r 3               	sta z80_c
000073r 3               	inc z80_l 		; next byte of table.
000073r 3               	bne :+
000073r 3               	inc z80_h
000073r 3               :
000073r 3               	ldy #0
000073r 3               	lda (z80_hl),y 		; fetch value from table.
000073r 3               	sta z80_b
000073r 3               
000073r 3               	ldy #2
000073r 3               	lda (z80_ix),y 		; x coordinate in hl.
000073r 3               	clc
000073r 3               	adc z80_e		; add sine lb
000073r 3               	sta (z80_ix),y		; store new coordinate lb.
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y
000073r 3               	adc z80_d		; add sine hb
000073r 3               	sta (z80_ix),y		; store new coordinate hb.
000073r 3               
000073r 3               	ldy #4
000073r 3               	lda (z80_ix),y	 	; y coordinate in hl.
000073r 3               	clc
000073r 3               	adc z80_c		; add cosine lb
000073r 3               	sta (z80_ix),y		; store new coordinate lb.
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y
000073r 3               	adc z80_b		; add cosine lb
000073r 3               	sta (z80_ix),y		; store new coordinate hb.
000073r 3               
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Move dots
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               dotl:
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y
000073r 3               	sec
000073r 3               	sbc #1		 	; move left.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               dotr:
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y
000073r 3               	clc
000073r 3               	adc #1		 	; move left.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               dotu:
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y
000073r 3               	sec
000073r 3               	sbc #1		 	; move up.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               dotd:
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y
000073r 3               	clc
000073r 3               	adc #1			; move down.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Check if coordinates are ok before redrawing at new position.
000073r 3               ;
000073r 3               ; left:   X>L		X=L	Ok
000073r 3               ; right:  R+15>X	X=R	Ok
000073r 3               ; top:    Y>T		Y=T	Ok
000073r 3               ; bottom: B+15>Y	Y=B	Ok
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               chkxy:
000073r 3               
000073r 3               ; top:    Y>T		Y=T	Ok
000073r 3               
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000073r 3               	cmp wntopx		; window top.
000073r 3               	bcs :+			; compare with top window limit.
000073r 3               	jmp kilshr		; out of window, kill shrapnel.
000073r 3               :
000073r 3               ; left:   X>L		X=L	Ok
000073r 3               
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000073r 3               	cmp wnlftx		; left edge.
000073r 3               	bcs :+			; compare with left window limit.
000073r 3               	jmp kilshr		; out of window, kill shrapnel.
000073r 3               :
000073r 3               ; bottom: B+15>Y	Y=B	Ok
000073r 3               
000073r 3               	lda wnbotx		; point to bottom.
000073r 3               	clc
000073r 3               	adc #15
000073r 3               	ldy #3
000073r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000073r 3               	bcs :+			; compare with shrapnel x coordinate.
000073r 3               	jmp kilshr		; off screen, kill shrapnel..
000073r 3               :
000073r 3               ; right:  R+15>X	X=R	Ok
000073r 3               
000073r 3               	lda wnrgtx		; point to right edge.
000073r 3               	clc
000073r 3               	adc #15
000073r 3               	ldy #5
000073r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000073r 3               	bcs :+			; compare with window limit.
000073r 3               	jmp kilshr		; off screen, kill shrapnel.
000073r 3               :
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Drop through.
000073r 3               ; Display shrapnel.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               plot:
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y		; y integer.
000073r 3               	sta dispy	 	; workspace coordinates.
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y	 	; x integer.
000073r 3               	sta dispx 		; workspace coordinates.
000073r 3               
000073r 3               	ldy #0
000073r 3               	lda (z80_ix),y 		; type.
000073r 3               	bne :+			; is it a laser?
000073r 3               	jmp plot1 		; yes, draw laser instead.
000073r 3               :
000073r 3               plot0:
000073r 3               	lda dispx		; which pixel within byte do we
000073r 3               	and #7			; want to set first?
000073r 3               	tay
000073r 3               	lda dots,y 		; table of small pixel positions.
000073r 3               	sta z80_e 		; get value.
000073r 3               
000073r 3               	jsr scadd 		; screen address.
000073r 3               	ldy #0
000073r 3               	lda (scraddr),y		; see what's already there.
000073r 3               	eor z80_e
000073r 3               	sta (scraddr),y 	; put back on screen.
000073r 3               	rts
000073r 3               
000073r 3               plot1:
000073r 3               	jsr scadd 		; screen address.
000073r 3               	ldy #0
000073r 3               	lda (scraddr),y 	; fetch byte there.
000073r 3               	eor #255 		; toggle all bits.
000073r 3               	sta (scraddr),y 	; new byte.
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Switch off shrapnel
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               kilshr:
000073r 3               	lda #128
000073r 3               	ldy #0
000073r 3               	sta (z80_ix),y	; switch off shrapnel.
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Sine/cosine table
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
000073r 3               	.word 1024,0,946,65144,724,64811,391,64589
000073r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000073r 3               	.word 64512,0,64589,391,64811,724,65144,946
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Create trail
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               trail:
000073r 3               	ldy #1
000073r 3               	lda (z80_ix),y 	; time remaining.
000073r 3               	sec
000073r 3               	sbc #1
000073r 3               	sta (z80_ix),y
000073r 3               	bne :+
000073r 3               	jmp trailk		; time to switch it off.
000073r 3               :
000073r 3               	jsr qrand		; get a random number.
000073r 3               	lsr a 			; x or y axis?
000073r 3               	bcc :+
000073r 3               	jmp trailv		; use y.
000073r 3               :
000073r 3               ; Trail horizontal
000073r 3               
000073r 3               	lsr a 			; which direction?
000073r 3               	bcc :+
000073r 3               	jmp traill		; go left.
000073r 3               :
000073r 3               ; Trail right
000073r 3               
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y
000073r 3               	clc
000073r 3               	adc #1	 		; go right.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               
000073r 3               ; Trail left
000073r 3               
000073r 3               traill:
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y
000073r 3               	sec
000073r 3               	sbc #1 			; go left.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               
000073r 3               ; Trail vertical
000073r 3               
000073r 3               trailv:
000073r 3               	lsr a		 	; which direction?
000073r 3               	bcc :+
000073r 3               	jmp trailu		; go up.
000073r 3               :
000073r 3               ; Trail down
000073r 3               
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y
000073r 3               	clc
000073r 3               	adc #1 			; go down.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               
000073r 3               ; Trail up
000073r 3               
000073r 3               trailu:
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y
000073r 3               	sec
000073r 3               	sbc #1 			; go up.
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               
000073r 3               ; Kill trail
000073r 3               
000073r 3               trailk:
000073r 3               	lda #200		; set off-screen to kill vapour trail.
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Create laser beam
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               laser:
000073r 3               	ldy #1
000073r 3               	lda (z80_ix),y 		; direction.
000073r 3               	ror a 			; left or right?
000073r 3               	bcs :+
000073r 3               	jmp laserl		; move left.
000073r 3               :
000073r 3               ; Laser right
000073r 3               
000073r 3               	lda #8			; distance to travel.
000073r 3               	sta z80_b
000073r 3               	jmp laserm		; move laser.
000073r 3               
000073r 3               ; Laser left
000073r 3               
000073r 3               laserl:
000073r 3               	lda #248		; distance to travel.
000073r 3               	sta z80_b
000073r 3               laserm:
000073r 3               	ldy #5
000073r 3               	lda (z80_ix),y		; x position.
000073r 3               	clc
000073r 3               	adc z80_b		; add distance.
000073r 3               	sta (z80_ix),y		; set new x coordinate.
000073r 3               
000073r 3               ; Test new block.
000073r 3               
000073r 3               	sta dispx 		; set x for block collision detection purposes.
000073r 3               	ldy #3
000073r 3               	lda (z80_ix),y 		; get y.
000073r 3               	sta dispy		; set coordinate for collision test.
000073r 3               	jsr tstbl 		; get block type there.
000073r 3               	cmp #WALL		; is it solid?
000073r 3               	bne :+
000073r 3               	jmp trailk		; yes, it cannot pass.
000073r 3               :
000073r 3               .if pflag .or dflag
000073r 3                       cmp #FODDER             ; is it fodder?
000073r 3                       bne :+
000073r 3                       jsr fdchk               ; remove fodder block.
000073r 3                       jmp trailk              ; destroy laser.
000073r 3               :
000073r 3               .endif
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Dots mask
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               dots:	.byte 128,64,32,16,8,4,2,1
000073r 3               
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Plot, preserving de.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               plotde:
000073r 3               	lda z80_d 		; put de on stack.
000073r 3               	pha
000073r 3               	lda z80_e
000073r 3               	pha
000073r 3               
000073r 3               	jsr plot 		; plot pixel.
000073r 3               
000073r 3               	pla			; restore de from stack.
000073r 3               	sta z80_e
000073r 3               	pla
000073r 3               	sta z80_d
000073r 3               
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Shoot a laser.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               shoot:
000073r 3               	sta z80_c		; store direction in c register.
000073r 3               	ldy #8
000073r 3               	lda (z80_ix),y 		; y coordinate.
000073r 3               	clc
000073r 3               shoot1:
000073r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000073r 3               	sta z80_l 		; puty y coordinate in l.
000073r 3               
000073r 3               	ldy #9
000073r 3               	lda (z80_ix),y 		; x coordinate in h.
000073r 3               	sta z80_h
000073r 3               
000073r 3               	lda z80_i		; store pointer to sprite.
000073r 3               	pha
000073r 3               	lda z80_x
000073r 3               	pha
000073r 3               
000073r 3               	jsr fpslot 		; find particle slot.
000073r 3               	bcs :+
000073r 3               	jmp vapou2		; failed, restore ix.
000073r 3               :
000073r 3               	lda #0
000073r 3               	ldy #0
000073r 3               	sta (z80_ix),y 		; set up a laser.
000073r 3               
000073r 3               	lda z80_c
000073r 3               	ldy #1
000073r 3               	sta (z80_ix),y 		; set the direction.
000073r 3               
000073r 3               	lda z80_l
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y		; set y coordinate.
000073r 3               
000073r 3               	ror z80_c		; check direction we want.
000073r 3               	bcc :+
000073r 3               	jmp shootr		; shoot right.
000073r 3               :
000073r 3               	lda z80_h		; X position.
000073r 3               shoot0:
000073r 3               	and #248		; align on character boundary.
000073r 3               	ldy #5
000073r 3               	sta (z80_ix),y		; set x coordinate.
000073r 3               	jmp vapou0 		; draw first image.
000073r 3               shootr:
000073r 3               	lda z80_h		; x position.
000073r 3               	clc
000073r 3               	adc #15			; look right.
000073r 3               	jmp shoot0		; align and continue.
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Create a bit of vapour trail.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               vapour:
000073r 3               	lda z80_i		; store pointer to sprite.
000073r 3               	pha
000073r 3               	lda z80_x
000073r 3               	pha
000073r 3               
000073r 3               	ldy #8
000073r 3               	lda (z80_ix),y 		; y coordinate.
000073r 3               	clc
000073r 3               vapou3:
000073r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000073r 3               	sta z80_l
000073r 3               
000073r 3               	ldy #9
000073r 3               	lda (z80_ix),y 		; x coordinate.
000073r 3               	adc #7
000073r 3               	sta z80_h
000073r 3               
000073r 3               	jsr fpslot 		; find particle slot.
000073r 3               	bcc :+
000073r 3               	jmp vapou1		; no, we can use it.
000073r 3               :
000073r 3               vapou2:
000073r 3               	pla
000073r 3               	sta z80_x
000073r 3               	pla
000073r 3               	sta z80_i
000073r 3               	rts
000073r 3               vapou1:
000073r 3               	lda z80_l
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y		; set up y.
000073r 3               
000073r 3               	lda z80_h
000073r 3               	ldy #5
000073r 3               	sta (z80_ix),y 		; set up x coordinate.
000073r 3               
000073r 3               	jsr qrand		; get quick random number.
000073r 3               	and #15			; random time.
000073r 3               	clc
000073r 3               	adc #15			; minimum time on screen.
000073r 3               	ldy #1
000073r 3               	sta (z80_ix),y		; set time on screen.
000073r 3               
000073r 3               	lda #1
000073r 3               	ldy #0
000073r 3               	sta (z80_ix),y		; define particle as vapour trail.
000073r 3               vapou0:
000073r 3               	jsr chkxy		; plot first position.
000073r 3               	jmp vapou2
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Create a user particle.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               ptusr:
000073r 3               	sta z80_f		; store timer.
000073r 3               
000073r 3               	ldy #8
000073r 3               	lda (z80_ix),y 		; y coordinate.
000073r 3               	clc
000073r 3               	adc #7			; mid-point of sprite.
000073r 3               	sta z80_l
000073r 3               
000073r 3               	ldy #9
000073r 3               	lda (z80_ix),y 		; x coordinate.
000073r 3               	clc
000073r 3               	adc #7			; mid-point of sprite.
000073r 3               	sta z80_h
000073r 3               
000073r 3               	jsr fpslot 		; find particle slot.
000073r 3               	bcs ptusr1
000073r 3               	rts 			; out of slots, can't generate anything.
000073r 3               ptusr1:
000073r 3               	lda z80_l
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y 		; set up y.
000073r 3               
000073r 3               	lda z80_h
000073r 3               	ldy #5
000073r 3               	sta (z80_ix),y		; set up x coordinate.
000073r 3               
000073r 3               	lda z80_f 		; restore timer.
000073r 3               	ldy #1
000073r 3               	sta (z80_ix),y		; set time on screen.
000073r 3               
000073r 3               	lda #7
000073r 3               	ldy #0
000073r 3               	sta (z80_ix),y		; define particle as user particle.
000073r 3               
000073r 3               	jmp chkxy		; plot first position.
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Create a vertical or horizontal star.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               star:
000073r 3               	lda z80_i		; store pointer to sprite.
000073r 3               	pha
000073r 3               	lda z80_x
000073r 3               	pha
000073r 3               
000073r 3               	jsr fpslot 		; find particle slot.
000073r 3               	bcs star7		; found one we can use.
000073r 3               star0:
000073r 3               	pla 			; restore sprite pointer.
000073r 3               	sta z80_x
000073r 3               	pla
000073r 3               	sta z80_i
000073r 3               	rts 			; out of slots, can't generate anything.
000073r 3               star7:
000073r 3               	lda z80_c		; direction.
000073r 3               	and #3 			; is it left?
000073r 3               	bne :+
000073r 3               	jmp star1 		; yes, it's left.
000073r 3               :
000073r 3               	cmp #1 			; is it right?
000073r 3               	bne :+
000073r 3               	jmp star2 		; yes, it's right.
000073r 3               :
000073r 3               	cmp #2 			; is it up?
000073r 3               	bne :+
000073r 3               	jmp star3 		; yes, it's up.
000073r 3               :
000073r 3               	ldy wntopx 		; get edge of screen.
000073r 3               	iny			; down one pixel.
000073r 3               	tya
000073r 3               star8:
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y 		; set y coord.
000073r 3               	jsr qrand 		; get quick random number.
000073r 3               star9:
000073r 3               	ldy #5
000073r 3               	sta (z80_ix),y		; set x position.
000073r 3               
000073r 3               	lda z80_c		; direction.
000073r 3               	and #3			; zero to three.
000073r 3               	clc
000073r 3               	adc #3			; 3 to 6 for starfield.
000073r 3               	ldy #0
000073r 3               	sta (z80_ix),y		; define particle as star.
000073r 3               	jsr chkxy		; plot first position.
000073r 3               	jmp star0
000073r 3               star1:
000073r 3               	jsr qrand		; get quick random number.
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y 		; set y coord.
000073r 3               
000073r 3               	lda wnrgtx 		; get edge of screen.
000073r 3               	clc
000073r 3               	adc #15			; add width of sprite minus 1.
000073r 3               	jmp star9
000073r 3               star2:
000073r 3               	jsr qrand 		; get quick random number.
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y		; set y coord.
000073r 3               
000073r 3               	lda wnlftx		; get edge of screen.
000073r 3               	jmp star9
000073r 3               star3:
000073r 3               	lda wnbotx 		; get edge of screen.
000073r 3               	clc
000073r 3               	adc #15 		; height of sprite minus one pixel.
000073r 3               	jmp star8
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Find particle slot for lasers or vapour trail.
000073r 3               ; can't use alternate accumulator.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               fpslot:
000073r 3               	lda #<SHRAPN 		; shrapnel table.
000073r 3               	sta z80_x
000073r 3               	lda #>SHRAPN
000073r 3               	sta z80_i
000073r 3               
000073r 3               	lda #NUMSHR		; number of pieces in table.
000073r 3               	sta z80_b
000073r 3               fpslt0:
000073r 3               	ldy #0
000073r 3               	lda (z80_ix),y		; get type.
000073r 3               	asl a  			; is this slot in use?
000073r 3               	bcc :+
000073r 3               	rts			; no, we can use it.
000073r 3               :
000073r 3               	clc			; point to more shrapnel.
000073r 3               	lda z80_x
000073r 3               	adc #SHRSIZ
000073r 3               	sta z80_x
000073r 3               	bcc :+
000073r 3               	inc z80_i
000073r 3               :
000073r 3               	dec z80_b		; repeat for all shrapnel.
000073r 3               	bne fpslt0
000073r 3               
000073r 3               	clc
000073r 3               	rts 			; out of slots, can't generate anything.
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Create an explosion at sprite position.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               explod:
000073r 3               	sta z80_c 		; particles to create.
000073r 3               
000073r 3               	lda z80_i 		; store pointer to sprite.
000073r 3               	pha
000073r 3               	lda z80_x
000073r 3               	pha
000073r 3               
000073r 3               	ldy #8
000073r 3               	lda (z80_ix),y 		; y coordinate.
000073r 3               	sta z80_l
000073r 3               	ldy #9
000073r 3               	lda (z80_ix),y		; x coordinate.
000073r 3               	sta z80_h
000073r 3               
000073r 3               	lda #<SHRAPN		; shrapnel table.
000073r 3               	sta z80_x
000073r 3               	lda #>SHRAPN
000073r 3               	sta z80_i
000073r 3               
000073r 3               	lda #NUMSHR		; number of pieces in table.
000073r 3               	sta explcnt
000073r 3               expld0:
000073r 3               	ldy #0
000073r 3               	lda (z80_ix),y		; get type.
000073r 3               	asl a 			; is this slot in use?
000073r 3               	bcs expld1		; no, we can use it.
000073r 3               expld2:
000073r 3               	clc
000073r 3               	lda z80_x
000073r 3               	adc #SHRSIZ
000073r 3               	sta z80_x
000073r 3               	bcc :+
000073r 3               	inc z80_i
000073r 3               :
000073r 3               	dec explcnt		; repeat for all shrapnel.
000073r 3               	bne expld0
000073r 3               expld3:
000073r 3               	pla			; restore sprite pointer.
000073r 3               	sta z80_x
000073r 3               	pla
000073r 3               	sta z80_i
000073r 3               	rts 			; out of slots, can't generate any more.
000073r 3               
000073r 3               expld1:
000073r 3               	lda z80_c		; shrapnel counter.
000073r 3               	and #15			; 0 to 15.
000073r 3               	clc			; add to x.
000073r 3               	adc z80_l
000073r 3               	ldy #3
000073r 3               	sta (z80_ix),y		; y coord.
000073r 3               
000073r 3               	lda seed3 		; crap random number.
000073r 3               	and #15			; 0 to 15.
000073r 3               	clc 			; add to y.
000073r 3               	adc z80_h
000073r 3               	ldy #5
000073r 3               	sta (z80_ix),y		; x coord.
000073r 3               
000073r 3               	lda #2
000073r 3               	ldy #0
000073r 3               	sta (z80_ix),y		; switch it on.
000073r 3               
000073r 3               	jsr chkxy		; plot first position.
000073r 3               	jsr qrand		; quick random angle.
000073r 3               	and #60 		; keep within range.
000073r 3               	ldy #1
000073r 3               	sta (z80_ix),y		; angle.
000073r 3               
000073r 3               	dec z80_c		; one less piece of shrapnel to generate.
000073r 3               	bne expld2 		; back to main explosion loop.
000073r 3               	jmp expld3 		; restore sprite pointer and exit.
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Quick random
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               qrand:
000073r 3               	jsr random		; r register.
000073r 3               	eor seed3		; combine with seed.
000073r 3               	sta seed3 		; new seed.
000073r 3               	rts
000073r 3               
000073r 3               ;----------------------------------------------------
000073r 3               ; Display all shrapnel.
000073r 3               ;----------------------------------------------------
000073r 3               
000073r 3               dshrp:
000073r 3               	lda #<plotde		; display routine.
000073r 3               	sta proshx+1
000073r 3               	lda #>plotde
000073r 3               	sta proshx+2
000073r 3               	jsr proshr		; process shrapnel.
000073r 3               
000073r 3               	lda #<prosh1		; processing routine.
000073r 3               	sta proshx+1
000073r 3               	lda #>prosh1
000073r 3               	sta proshx+2
000073r 3               	rts
000073r 3               
000073r 3               ;------------------------------------------------------
000073r 3               ; Particle engine.
000073r 3               ;
000073r 3               ; Init particle data for 55 particles in SHRAPN table.
000073r 3               ; Every particle has 6 bytes.
000073r 3               ;
000073r 3               ; global:	-
000073r 3               ; local:	x,y,hl
000073r 3               ; calls:	-
000073r 3               ;------------------------------------------------------
000073r 3               
000073r 3               inishr:
000073r 3               	lda #<SHRAPN 		; table.
000073r 3               	sta z80_l
000073r 3               	lda #>SHRAPN
000073r 3               	sta z80_h
000073r 3               
000073r 3               	ldy #0
000073r 3               	ldx #NUMSHR		; shrapnel pieces to process.
000073r 3               inish0:
000073r 3               	lda #255 		; kill the shrapnel.
000073r 3               	sta (z80_hl),y
000073r 3               
000073r 3               	clc 			; point there.
000073r 3               	lda z80_l
000073r 3               	adc #SHRSIZ		; distance to next.
000073r 3               	sta z80_l
000073r 3               	bcc :+
000073r 3               	inc z80_h
000073r 3               :
000073r 3               	dex
000073r 3               	bne inish0 		; round again.
000073r 3               	rts
000073r 3               
000073r 3               ;------------------------------------------------------
000073r 3               ; Check for collision between laser and sprite.
000073r 3               ;------------------------------------------------------
000073r 3               
000073r 3               lcol:
000073r 3               	lda #<SHRAPN		; shrapnel table.
000073r 3               	sta z80_l
000073r 3               	lda #>SHRAPN
000073r 3               	sta z80_h
000073r 3               
000073r 3               	lda #NUMSHR		; number of pieces in table.
000073r 3               	sta z80_b
000073r 3               lcol0:
000073r 3               	ldy #0
000073r 3               	lda (z80_hl),y 		; get type.
000073r 3               	beq lcol1		; yes, check collision.
000073r 3               lcol3:
000073r 3               	clc			; point to more shrapnel.
000073r 3               	lda z80_l
000073r 3               	adc #SHRSIZ
000073r 3               	sta z80_l
000073r 3               	bcc :+
000073r 3               	inc z80_h
000073r 3               :
000073r 3               	dec z80_b		; repeat for all shrapnel.
000073r 3               	bne lcol0
000073r 3               	clc
000073r 3               	rts 			; no collision, carry not set.
000073r 3               lcol1:
000073r 3               	ldy #3
000073r 3               	lda (z80_hl),y		; get y.
000073r 3               	sec
000073r 3               	ldy #8
000073r 3               	sbc (z80_ix),y		; subtract sprite y.
000073r 3               lcolh:
000073r 3               	cmp #SPR_HGT 		; within range?
000073r 3               	bcc :+
000073r 3               	jmp lcol2		; no, missed.
000073r 3               :
000073r 3               	ldy #5
000073r 3               	lda (z80_hl),y 		; get x.
000073r 3               	sec
000073r 3               	ldy #9
000073r 3               	sbc (z80_ix),y 		; subtract sprite y.
000073r 3               	cmp #16			; within range?
000073r 3               	bcs :+
000073r 3               	jmp lcol4 		; yes, collision occurred.
000073r 3               :
000073r 3               lcol2:
000073r 3               	jmp lcol3
000073r 3               lcol4:
000073r 3               	sec
000073r 3               	rts 			; return with carry set for collision.
000073r 3               .endif
000073r 3               
000073r 3               ;------------------------------------------------------
000073r 3               ; Main game engine code starts here.
000073r 3               ; After initialisation, mloop is the main loop
000073r 3               ;------------------------------------------------------
000073r 3               
000073r 3               game:
000073r 3               
000073r 3               ; Set up screen address table.
000073r 3               
000073r 3               setsat:
000073r 3  A9 00        	lda #<CharAddress		; start of screen.
000075r 3  85 rr        	sta scraddr
000077r 3  A9 10        	lda #>CharAddress
000079r 3  85 rr        	sta scraddr+1
00007Br 3               
00007Br 3  A0 00        	ldy #0			; vertical lines on screen.
00007Dr 3               setsa0:
00007Dr 3  A5 rr        	lda scraddr
00007Fr 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
000082r 3  A5 rr        	lda scraddr+1
000084r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
000087r 3  20 rr rr     	jsr nline		; next line down.
00008Ar 3  C8           	iny			; next position in table.
00008Br 3  D0 F0        	bne setsa0
00008Dr 3               
00008Dr 3               ; Init graphics mode
00008Dr 3               
00008Dr 3  20 rr rr     	jsr init
000090r 3               
000090r 3               ; Init joysticks
000090r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
000093r 3               
000093r 3               rpblc2:
000093r 3               .if pflag
000093r 3               	jsr inishr 		; initialise particle engine.
000093r 3               .endif
000093r 3               evintr:
000093r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000096r 3               
000096r 3  A9 02        	lda #WALL 		; write default property.
000098r 3  A2 00        	ldx #0
00009Ar 3               clrmap:
00009Ar 3  9D 00 04     	sta MAP,x 		; block properties.
00009Dr 3  9D 00 05     	sta MAP+256,x
0000A0r 3  E8           	inx
0000A1r 3  D0 F7        	bne clrmap
0000A3r 3               
0000A3r 3               .if oflag
0000A3r 3               	jsr iniob 		; initialise objects.
0000A3r 3               .endif
0000A3r 3  A9 00        	lda #0			; put zero in accumulator.
0000A5r 3  85 rr        	sta gamwon		; reset game won flag.
0000A7r 3               
0000A7r 3  20 rr rr     	jsr inisc 		; init the score.
0000AAr 3               mapst:
0000AAr 3  AD rr rr     	lda stmap 		; start position on map.
0000ADr 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0000B0r 3               
0000B0r 3               inipbl:
0000B0r 3               .if aflag
0000B0r 3               	lda #<eop		; reset blockpointer
0000B0r 3               	sta pbptr
0000B0r 3               	lda #>eop
0000B0r 3               	sta pbptr+1
0000B0r 3               .endif
0000B0r 3  20 rr rr     	jsr initsc 		; set up first screen.
0000B3r 3               
0000B3r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0000B5r 3  85 rr        	sta z80_x
0000B7r 3  A9 rr        	lda #>ssprit
0000B9r 3  85 rr        	sta z80_i
0000BBr 3               evini:
0000BBr 3  20 rr rr     	jsr evnt13 		; initialisation.
0000BEr 3               
0000BEr 3               ; Two restarts.
0000BEr 3               ; First restart - clear all sprites and initialise everything.
0000BEr 3               
0000BEr 3               rstrt:
0000BEr 3  20 rr rr     	jsr rsevt 		; restart events.
0000C1r 3  20 rr rr     	jsr xspr 		; clear sprite table.
0000C4r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0000C7r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
0000CAr 3  4C rr rr     	jmp rstrt0
0000CDr 3               
0000CDr 3               ; Second restart - clear all but player, and don't initialise him.
0000CDr 3               
0000CDr 3               rstrtn:
0000CDr 3  20 rr rr     	jsr rsevt		; restart events.
0000D0r 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
0000D3r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0000D6r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
0000D9r 3               
0000D9r 3               ; Set up the player and/or enemy sprites.
0000D9r 3               
0000D9r 3               rstrt0:
0000D9r 3  A9 00        	lda #0 			; zero in accumulator.
0000DBr 3  85 rr        	sta nexlev 		; reset next level flag.
0000DDr 3  85 rr        	sta restfl 		; reset restart flag.
0000DFr 3  85 rr        	sta deadf 		; reset dead flag.
0000E1r 3               
0000E1r 3  20 rr rr     	jsr droom 		; show screen layout.
0000E4r 3               rpblc0:
0000E4r 3               .if pflag
0000E4r 3               	jsr inishr 		; initialise particle engine.
0000E4r 3               .endif
0000E4r 3               .if aflag
0000E4r 3               	jsr rbloc		; draw blocks for this screen
0000E4r 3               .endif
0000E4r 3               .if oflag
0000E4r 3               	jsr shwob		; draw objects.
0000E4r 3               .endif
0000E4r 3               
0000E4r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0000E6r 3  85 rr        	sta z80_x
0000E8r 3  A9 rr        	lda #>sprtab
0000EAr 3  85 rr        	sta z80_i
0000ECr 3  20 rr rr     	jsr dspr 		; display sprites.
0000EFr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0000F1r 3  85 rr        	sta z80_x
0000F3r 3  A9 rr        	lda #>(sprtab+TABSIZ)
0000F5r 3  85 rr        	sta z80_i
0000F7r 3  20 rr rr     	jsr dspr 		; display sprites.
0000FAr 3               mloop:
0000FAr 3  20 rr rr     	jsr vsync 		; synchronise with display.
0000FDr 3               
0000FDr 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0000FFr 3  85 rr        	sta z80_x
000101r 3  A9 rr        	lda #>sprtab
000103r 3  85 rr        	sta z80_i
000105r 3  20 rr rr     	jsr dspr 		; display even sprites.
000108r 3               
000108r 3               ;	jsr plsnd 		; play sounds.
000108r 3  20 rr rr     	jsr vsync 		; synchronise with display.
00010Br 3  20 rr rr     	jsr proshr
00010Er 3               
00010Er 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000110r 3  85 rr        	sta z80_x
000112r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000114r 3  85 rr        	sta z80_i
000116r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000119r 3               
000119r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00011Br 3  85 rr        	sta z80_x
00011Dr 3  A9 rr        	lda #>(ssprit)
00011Fr 3  85 rr        	sta z80_i
000121r 3               evlp1:
000121r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000124r 3  20 rr rr     	jsr pspr 		; process sprites.
000127r 3               
000127r 3               ; Main loop events.
000127r 3               
000127r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000129r 3  85 rr        	sta z80_x
00012Br 3  A9 rr        	lda #>ssprit
00012Dr 3  85 rr        	sta z80_i
00012Fr 3               evlp2:
00012Fr 3  20 rr rr     	jsr evnt11 		; called once per main loop.
000132r 3               bsortx:
000132r 3  20 rr rr     	jsr bsort 		; sort sprites.
000135r 3               
000135r 3  A5 rr        	lda nexlev		; finished level flag.
000137r 3  D0 1F        	bne newlev		; is set, go to next level.
000139r 3  A5 rr        	lda gamwon		; finished game flag.
00013Br 3  D0 2A        	bne evwon		; is set, finish the game.
00013Dr 3  A5 rr        	lda restfl 		; finished level flag.
00013Fr 3  C9 01        	cmp #1			; has it been set?
000141r 3  D0 03        	bne :+
000143r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000146r 3               :
000146r 3  C9 02        	cmp #2			; has it been set?
000148r 3  D0 03        	bne :+
00014Ar 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
00014Dr 3               :
00014Dr 3  A5 rr        	lda deadf 		; dead flag.
00014Fr 3  D0 1C        	bne pdead		; yes, player dead.
000151r 3               
000151r 3               ; back to start of main loop.
000151r 3               
000151r 3  E6 rr        	inc frmno
000153r 3  E6 rr        	inc clock
000155r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
000158r 3               
000158r 3               ;----------------------------------------------------------
000158r 3               ; Read blocks from list and update screen accordingly.
000158r 3               ;----------------------------------------------------------
000158r 3               
000158r 3               .if aflag
000158r 3               rbloc:
000158r 3               	lda #<eop		; reset blockpointer
000158r 3               	sta pbbuf
000158r 3               	lda #>eop
000158r 3               	sta pbbuf+1
000158r 3               
000158r 3               rbloc2:
000158r 3               	lda pbbuf			; check for last block
000158r 3               	cmp pbptr
000158r 3               	bne rbloc1
000158r 3               	lda pbbuf+1
000158r 3               	cmp pbptr+1
000158r 3               	bne rbloc1
000158r 3               	rts
000158r 3               rbloc1:
000158r 3               	ldy #0
000158r 3               	lda (pbbuf),y		; check if block for this scno
000158r 3               	cmp scno
000158r 3               	bne rbloc0		; if not, skip
000158r 3               	iny
000158r 3               	lda (pbbuf),y		; get y
000158r 3               	sta dispy
000158r 3               	iny
000158r 3               	lda (pbbuf),y		; get x
000158r 3               	sta dispx
000158r 3               	iny
000158r 3               	lda (pbbuf),y		; get blocknr
000158r 3               	jsr pattr2		; draw block
000158r 3               rbloc0:
000158r 3               	clc			; point to next block
000158r 3               	lda pbbuf
000158r 3               	adc #4
000158r 3               	sta pbbuf
000158r 3               	bcc rbloc2
000158r 3               	inc pbbuf+1
000158r 3               	jmp rbloc2
000158r 3               .endif
000158r 3               
000158r 3               ;----------------------------------------------------------
000158r 3               ; New level
000158r 3               ;----------------------------------------------------------
000158r 3               
000158r 3               newlev:
000158r 3  A5 rr        	lda scno 			; current screen.
00015Ar 3  18           	clc
00015Br 3  69 01        	adc #1				; next screen.
00015Dr 3  CD rr rr     	cmp numsc 			; total number of screens.
000160r 3  B0 05        	bcs evwon			; yes, game finished.
000162r 3  85 rr        	sta scno			; set new level number.
000164r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
000167r 3               
000167r 3               evwon:
000167r 3  20 rr rr     	jsr evnt18		 	; game completed.
00016Ar 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00016Dr 3               
00016Dr 3               ;----------------------------------------------------------
00016Dr 3               ; Player dead.
00016Dr 3               ;----------------------------------------------------------
00016Dr 3               
00016Dr 3               pdead:
00016Dr 3  A9 00        	lda #0				; zeroise accumulator.
00016Fr 3  85 rr        	sta deadf			; reset dead flag.
000171r 3               evdie:
000171r 3  20 rr rr     	jsr evnt16 			; death subroutine.
000174r 3  A5 rr        	lda numlif			; number of lives.
000176r 3  F0 03        	beq :+
000178r 3  4C rr rr     	jmp rstrt 			; restart game.
00017Br 3               :
00017Br 3               evfail:
00017Br 3  20 rr rr     	jsr evnt17 			; failure event.
00017Er 3  4C rr rr     	jmp game			; restart game
000181r 3               
000181r 3               ;----------------------------------------------------------
000181r 3               ; Tidy things up
000181r 3               ;----------------------------------------------------------
000181r 3               
000181r 3               tidyup:
000181r 3  A0 00        	ldy #0				; digits to check.
000183r 3               tidyu2:
000183r 3  B9 rr rr     	lda score,y 			; get score digit.
000186r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
000189r 3  90 07        	bcc tidyu0			; high score is bigger.
00018Br 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00018Dr 3  C8           	iny				; next digit of high score.
00018Er 3  C0 06        	cpy #6
000190r 3  D0 F1        	bne tidyu2			; repeat for all digits
000192r 3               tidyu0:
000192r 3  A9 rr        	lda #<score			; return pointing to score.
000194r 3  85 rr        	sta z80_c
000196r 3  A9 rr        	lda #>score
000198r 3  85 rr        	sta z80_b
00019Ar 3  60           	rts
00019Br 3               tidyu1:
00019Br 3  A0 05        	ldy #5
00019Dr 3               tidyu3:
00019Dr 3  B9 rr rr     	lda score,y			; score.
0001A0r 3  99 rr rr     	sta hiscor,y			; high score.
0001A3r 3  88           	dey
0001A4r 3  10 F7        	bpl tidyu3 			; copy score to high score.
0001A6r 3               evnewh:
0001A6r 3  20 rr rr     	jsr evnt19			; new high score event.
0001A9r 3  4C rr rr     	jmp tidyu0			; tidy up.
0001ACr 3               
0001ACr 3               ;--------------------------------------------------
0001ACr 3               ; Restart event.
0001ACr 3               ;--------------------------------------------------
0001ACr 3               
0001ACr 3               rsevt:
0001ACr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0001AEr 3  85 rr        	sta z80_x
0001B0r 3  A9 rr        	lda #>ssprit
0001B2r 3  85 rr        	sta z80_i
0001B4r 3               
0001B4r 3               evrs:
0001B4r 3  4C rr rr     	jmp evnt14	 		; call restart event.
0001B7r 3               
0001B7r 3               ;------------------------------------------------------------------
0001B7r 3               ; Copy number passed in a to string position bc, right-justified.
0001B7r 3               ;
0001B7r 3               ; Input:
0001B7r 3               ;  A  = number
0001B7r 3               ;  BC = string address
0001B7r 3               ;
0001B7r 3               ; Output:
0001B7r 3               ;  BC = string with number
0001B7r 3               ;-----------------------------------------------------------------
0001B7r 3               
0001B7r 3               num2ch:
0001B7r 3  85 rr        	sta z80_d		; Save number
0001B9r 3               
0001B9r 3  A9 00        	lda #0
0001BBr 3  85 rr        	sta flag
0001BDr 3               numdg3:
0001BDr 3  A2 64        	ldx #100		; hundreds column.
0001BFr 3  86 rr        	stx z80_e
0001C1r 3  20 rr rr     	jsr numdg		; show digit.
0001C4r 3               numdg2:
0001C4r 3  A2 0A        	ldx #10			; tens column.
0001C6r 3  86 rr        	stx z80_e
0001C8r 3  20 rr rr     	jsr numdg		; show digit.
0001CBr 3               
0001CBr 3  E6 rr        	inc flag
0001CDr 3  A2 01        	ldx #1			; units column.
0001CFr 3  86 rr        	stx z80_e
0001D1r 3               numdg:
0001D1r 3  A9 30        	lda #48			; clear digit.
0001D3r 3  85 rr        	sta z80_a
0001D5r 3               numdg1:
0001D5r 3  A5 rr        	lda z80_d
0001D7r 3  C5 rr        	cmp z80_e
0001D9r 3  90 0E        	bcc numdg0		; nothing to show.
0001DBr 3  38           	sec
0001DCr 3  A5 rr        	lda z80_d
0001DEr 3  E5 rr        	sbc z80_e		; subtract from column.
0001E0r 3  85 rr        	sta z80_d
0001E2r 3  E6 rr        	inc z80_a		; increment digit.
0001E4r 3  E6 rr        	inc flag
0001E6r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
0001E9r 3               numdg0:
0001E9r 3  A0 00        	ldy #0
0001EBr 3  A5 rr        	lda z80_a
0001EDr 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
0001EFr 3  A5 rr        	lda flag
0001F1r 3  F0 06        	beq :+
0001F3r 3  E6 rr        	inc z80_c		; next buffer position.
0001F5r 3  D0 02        	bne :+
0001F7r 3  E6 rr        	inc z80_b
0001F9r 3               :
0001F9r 3  60           	rts
0001FAr 3               num2dd:
0001FAr 3  85 rr        	sta z80_d		; Save number
0001FCr 3               
0001FCr 3  A9 01        	lda #1
0001FEr 3  85 rr        	sta flag
000200r 3               
000200r 3  4C rr rr     	jmp numdg2
000203r 3               num2td:
000203r 3  85 rr        	sta z80_d		; Save number
000205r 3               
000205r 3  A9 01        	lda #1
000207r 3  85 rr        	sta flag
000209r 3  4C rr rr     	jmp numdg3
00020Cr 3               
00020Cr 3               ;---------------------------------------------------------
00020Cr 3               ; Reset score to "000000"
00020Cr 3               ;---------------------------------------------------------
00020Cr 3               
00020Cr 3               inisc:
00020Cr 3  A9 30        	lda #'0'
00020Er 3  A2 05        	ldx #5			; digits to initialise.
000210r 3               inisc0:
000210r 3  9D rr rr     	sta score,x 		; write zero digit.
000213r 3  CA           	dex			; next column.
000214r 3  10 FA        	bpl inisc0		; repeat for all digits.
000216r 3               
000216r 3  60           	rts
000217r 3               
000217r 3               ;-----------------------------------------------------
000217r 3               ; Multiply h by d and return in hl.
000217r 3               ;
000217r 3               ; Input:
000217r 3               ;  H = first number
000217r 3               ;  D = second number
000217r 3               ;
000217r 3               ; Output:
000217r 3               ;  HL = result H x D
000217r 3               ;-----------------------------------------------------
000217r 3               
000217r 3               imul:
000217r 3  A5 rr        	lda z80_d		; HL = H * D
000219r 3  85 rr        	sta z80_e
00021Br 3  A5 rr        	lda z80_h
00021Dr 3  85 rr        	sta z80_c		; make c first multiplier.
00021Fr 3               imul0:
00021Fr 3  A9 00        	lda #0			; zeroise total.
000221r 3  85 rr        	sta z80_l
000223r 3  85 rr        	sta z80_h
000225r 3               
000225r 3  A5 rr        	lda z80_h
000227r 3  85 rr        	sta z80_d		; zeroise high byte.
000229r 3               
000229r 3  A9 08        	lda #8			; repeat 8 times.
00022Br 3  85 rr        	sta z80_b
00022Dr 3               imul1:
00022Dr 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
00022Fr 3  90 0E        	bcc imul2		; wasn't set.
000231r 3  18           	clc			; bit was set, so add de.
000232r 3  A5 rr        	lda z80_l
000234r 3  65 rr        	adc z80_e
000236r 3  85 rr        	sta z80_l
000238r 3  A5 rr        	lda z80_h
00023Ar 3  65 rr        	adc z80_d
00023Cr 3  85 rr        	sta z80_h
00023Er 3  18           	clc 			; reset carry.
00023Fr 3               imul2:
00023Fr 3  06 rr        	asl z80_e 		; shift de 1 bit left.
000241r 3  26 rr        	rol z80_d
000243r 3  C6 rr        	dec z80_b
000245r 3  D0 E6        	bne imul1		; repeat 8 times.
000247r 3               
000247r 3  60           	rts
000248r 3               
000248r 3               ;-----------------------------------------------
000248r 3               ; Divide d by e and return in d, remainder in a.
000248r 3               ;
000248r 3               ; Input:
000248r 3               ;  D = first number
000248r 3               ;  E = second number
000248r 3               ;
000248r 3               ; Output:
000248r 3               ;  D = result D/E
000248r 3               ;  A = remainder
000248r 3               ;-----------------------------------------------
000248r 3               
000248r 3               idiv:
000248r 3  A9 00        	lda #0
00024Ar 3  A0 08        	ldy #8		 	; bits to shift.
00024Cr 3  06 rr        	asl z80_d
00024Er 3               idiv0:
00024Er 3  2A           	rol a 			; multiply d by 2.
00024Fr 3  C5 rr        	cmp z80_e 		; test if e is smaller.
000251r 3  90 02        	bcc idiv1		; e is greater, no division this time.
000253r 3  E5 rr        	sbc z80_e		; subtract it.
000255r 3               idiv1:
000255r 3  26 rr        	rol z80_d		; rotate into d.
000257r 3  88           	dey
000258r 3  D0 F4        	bne idiv0		; repeat
00025Ar 3  60           	rts
00025Br 3               
00025Br 3               ;---------------------------------------------------
00025Br 3               ; Play AY sound effect
00025Br 3               ;---------------------------------------------------
00025Br 3               
00025Br 3               plsnd:
00025Br 3  60           	rts
00025Cr 3               
00025Cr 3               ;---------------------------------------------------
00025Cr 3               ; Objects handling.
00025Cr 3               ; 32 bytes for image
00025Cr 3               ; 3 for room, y and x
00025Cr 3               ; 3 for starting room, y and x.
00025Cr 3               ; 254 = disabled.
00025Cr 3               ; 255 = object in player"s pockets.
00025Cr 3               ;---------------------------------------------------
00025Cr 3               
00025Cr 3               ;---------------------------------------------------
00025Cr 3               ; Show items present.
00025Cr 3               ;---------------------------------------------------
00025Cr 3               
00025Cr 3               .if oflag
00025Cr 3               shwob:
00025Cr 3               	lda #<objdta			; objects table.
00025Cr 3               	sta z80_l
00025Cr 3               	lda #>objdta
00025Cr 3               	sta z80_h
00025Cr 3               	lda numob 			; number of objects in the game.
00025Cr 3               	sta sprcnt
00025Cr 3               shwob0:
00025Cr 3               	ldy #32 			; distance to room number.
00025Cr 3               	lda (z80_hl),y 			; same as an item?
00025Cr 3               	cmp scno 			; current location.
00025Cr 3               	bne :+
00025Cr 3               	jsr dobj 			; yes, display object.
00025Cr 3               :
00025Cr 3               	clc
00025Cr 3               	lda z80_l
00025Cr 3               	adc #38 			; distance to next item.
00025Cr 3               	sta z80_l
00025Cr 3               	lda z80_h
00025Cr 3               	adc #0
00025Cr 3               	sta z80_h	 		; point to it.
00025Cr 3               	dec sprcnt
00025Cr 3               	bne shwob0 			; repeat for others.
00025Cr 3               	rts
00025Cr 3               
00025Cr 3               ;---------------------------------------------------
00025Cr 3               ; Display object.
00025Cr 3               ; hl must point to object's start address.
00025Cr 3               ;
00025Cr 3               ; Input:
00025Cr 3               ;  HL = object address
00025Cr 3               ;---------------------------------------------------
00025Cr 3               
00025Cr 3               dobj:
00025Cr 3               	ldy #33
00025Cr 3               	lda (z80_hl),y 			; point to y.
00025Cr 3               	sta dispy
00025Cr 3               	iny
00025Cr 3               	lda (z80_hl),y 			; point to x.
00025Cr 3               	sta dispx
00025Cr 3               dobj1:
00025Cr 3               	jmp sprite 			; draw this sprite.
00025Cr 3               
00025Cr 3               ;--------------------------------------
00025Cr 3               ; Remove an object.
00025Cr 3               ;
00025Cr 3               ; Input:
00025Cr 3               ;  A = object number
00025Cr 3               ;--------------------------------------
00025Cr 3               
00025Cr 3               remob:
00025Cr 3               	cmp numob			; number of objects in game.
00025Cr 3               	bcc :+				; are we checking past the end?
00025Cr 3               	rts				; yes, can't get non-existent item.
00025Cr 3               :
00025Cr 3               	pha				; remember object.
00025Cr 3               	jsr getob			; pick it up if we haven't already got it.
00025Cr 3               	pla				; retrieve object number.
00025Cr 3               	jsr gotob			; get its address.
00025Cr 3               	lda #254
00025Cr 3               	ldy #32
00025Cr 3               	sta (z80_hl),y			; remove it.
00025Cr 3               	rts
00025Cr 3               
00025Cr 3               ;---------------------------------------------------
00025Cr 3               ; Pick up object number held in the accumulator.
00025Cr 3               ;
00025Cr 3               ; Input:
00025Cr 3               ;  A = object number
00025Cr 3               ;---------------------------------------------------
00025Cr 3               
00025Cr 3               getob:
00025Cr 3               	cmp numob 		; number of objects in game.
00025Cr 3               	bcc :+			; are we checking past the end?
00025Cr 3               	rts			; yes, can't get non-existent item.
00025Cr 3               :
00025Cr 3               	jsr gotob 		; check if we already have it.
00025Cr 3               	cmp #255
00025Cr 3               	bne :+
00025Cr 3               	rts			; we already do.
00025Cr 3               :
00025Cr 3               	ldy #32
00025Cr 3               	lda (z80_hl),y		; is it on this screen?
00025Cr 3               	cmp scno 		; current screen.
00025Cr 3               	bne getob0		; not on screen, so nothing to delete.
00025Cr 3               
00025Cr 3               	lda #255
00025Cr 3               	sta (z80_hl),y		; pick it up.
00025Cr 3               	iny 			; point to y coord.
00025Cr 3               getob1:
00025Cr 3               	ldy #33
00025Cr 3               	lda (z80_hl),y		; y coord.
00025Cr 3               	sta dispy
00025Cr 3               	ldy #34
00025Cr 3               	lda (z80_hl),y 		; x coord.
00025Cr 3               	sta dispx
00025Cr 3               	jmp dobj1 		; delete object sprite.
00025Cr 3               getob0:
00025Cr 3               	lda #255
00025Cr 3               	sta (z80_hl),y 		; pick it up.
00025Cr 3               	rts
00025Cr 3               .endif
00025Cr 3               
00025Cr 3               ;-----------------------------------------------------------------
00025Cr 3               ; Got object check.
00025Cr 3               ; Call with object in accumulator, returns zero set if in pockets.
00025Cr 3               ;
00025Cr 3               ; Input:
00025Cr 3               ;  A = object number
00025Cr 3               ;-----------------------------------------------------------------
00025Cr 3               .if oflag .or mflag
00025Cr 3               gotob:
00025Cr 3               	cmp numob 		; number of objects in game.
00025Cr 3               	bcc :+ 			; are we checking past the end?
00025Cr 3               	jmp gotob0 		; yes, we can't have a non-existent object.
00025Cr 3               :
00025Cr 3               	jsr findob		; find the object.
00025Cr 3               gotob1:
00025Cr 3               	rts
00025Cr 3               
00025Cr 3               gotob0:
00025Cr 3               	lda #254 		; missing.
00025Cr 3               	jmp gotob1
00025Cr 3               
00025Cr 3               findob:
00025Cr 3               	pha			; save object number
00025Cr 3               	lda #<objdta 		; objects.
00025Cr 3               	sta z80_l
00025Cr 3               	lda #>objdta
00025Cr 3               	sta z80_h
00025Cr 3               	pla			; retreive object number
00025Cr 3               	beq fndob1 		; is it zero? yes, skip loop.
00025Cr 3               	tax 			; loop counter
00025Cr 3               fndob2:
00025Cr 3               	clc
00025Cr 3               	lda z80_l
00025Cr 3               	adc #38 		; size of each object.
00025Cr 3               	sta z80_l
00025Cr 3               	bcc :+
00025Cr 3               	inc z80_h
00025Cr 3               :
00025Cr 3               	dex 			; repeat until we find address.
00025Cr 3               	bne fndob2
00025Cr 3               fndob1:
00025Cr 3               	ldy #32			; distance to room it's in.
00025Cr 3               	lda (z80_hl),y		; fetch status.
00025Cr 3               	rts
00025Cr 3               .endif
00025Cr 3               
00025Cr 3               ;---------------------------------------------
00025Cr 3               ; Drop object number at (dispx, dispy).
00025Cr 3               ;
00025Cr 3               ; Input:
00025Cr 3               ;  A = object number
00025Cr 3               ;---------------------------------------------
00025Cr 3               
00025Cr 3               .if oflag
00025Cr 3               drpob:
00025Cr 3               	cmp numob 		; are we checking past the end?
00025Cr 3               	bcc :+
00025Cr 3               	rts			; yes, can't drop non-existent item.
00025Cr 3               :
00025Cr 3               	jsr gotob		; make sure object is in inventory.
00025Cr 3               	cmp scno		; already on this screen?
00025Cr 3               	bne :+
00025Cr 3               	rts			; yes, nothing to do.
00025Cr 3               :
00025Cr 3               	ldy #32
00025Cr 3               	lda scno
00025Cr 3               	sta (z80_hl),y		; bring onto screen.
00025Cr 3               	lda dispy		; sprite y coordinate.
00025Cr 3               	iny
00025Cr 3               	sta (z80_hl),y		; point to object y.
00025Cr 3               	lda dispx 		; sprite x coordinate.
00025Cr 3               	iny
00025Cr 3               	sta (z80_hl),y 		; point to object x
00025Cr 3               	jmp dobj		; draw the object sprite.
00025Cr 3               
00025Cr 3               ;-----------------------------------------------
00025Cr 3               ; Seek objects at sprite position.
00025Cr 3               ;
00025Cr 3               ; Output:
00025Cr 3               ;  A = object number, if not found A=255
00025Cr 3               ;-----------------------------------------------
00025Cr 3               
00025Cr 3               skobj:
00025Cr 3               	lda #<objdta 		; pointer to objects.
00025Cr 3               	sta z80_l
00025Cr 3               	lda #>objdta
00025Cr 3               	sta z80_h
00025Cr 3               
00025Cr 3               	lda numob 		; number of objects in game.
00025Cr 3               	sta z80_b 		; set up the loop counter.
00025Cr 3               skobj0:
00025Cr 3               	lda scno		; current room number.
00025Cr 3               	ldy #32
00025Cr 3               	cmp (z80_hl),y		; is object in here?
00025Cr 3               	bne :+
00025Cr 3               	jsr skobj1		; yes, check coordinates.
00025Cr 3               :
00025Cr 3               	clc			; point to next object in table.
00025Cr 3               	lda z80_l
00025Cr 3               	adc #38			; size of each object.
00025Cr 3               	sta z80_l
00025Cr 3               	bcc :+
00025Cr 3               	inc z80_h
00025Cr 3               :
00025Cr 3               	dec z80_b
00025Cr 3               	bne skobj0		; repeat for all objects.
00025Cr 3               
00025Cr 3               	lda #255		; end of list and nothing found, return 255.
00025Cr 3               	rts
00025Cr 3               
00025Cr 3               skobj1:
00025Cr 3               	ldy #33			; point to y coordinate.
00025Cr 3               	lda (z80_hl),y		; point to y coordinate.
00025Cr 3               	sec
00025Cr 3               	ldy #var_newY
00025Cr 3               	sbc (z80_ix),y 		; subtract sprite y.
00025Cr 3               	clc
00025Cr 3               	adc #15			; add sprite height minus one.
00025Cr 3               	cmp #31			; within range?
00025Cr 3               	bcs skobj2		; no, ignore object.
00025Cr 3               
00025Cr 3               	ldy #34			; point to x coordinate now.
00025Cr 3               	lda (z80_hl),y 		; get coordinate.
00025Cr 3               	sec
00025Cr 3               	ldy #var_newX
00025Cr 3               	sbc (z80_ix),y 		; subtract the sprite x.
00025Cr 3               	clc			; add sprite width minus one.
00025Cr 3               	adc #15
00025Cr 3               	cmp #31			; within range?
00025Cr 3               	bcs skobj2		; no, ignore object.
00025Cr 3               
00025Cr 3               	pla			; remove return address from stack.
00025Cr 3               	pla
00025Cr 3               
00025Cr 3               	lda numob 		; objects in game.
00025Cr 3               	sec
00025Cr 3               	sbc z80_b		; subtract loop counter.
00025Cr 3               skobj2:
00025Cr 3               	rts			; accumulator now points to object.
00025Cr 3               .endif
00025Cr 3               
00025Cr 3               ;---------------------------------------------------------------------
00025Cr 3               ; Spawn a new sprite.
00025Cr 3               ;---------------------------------------------------------------------
00025Cr 3               
00025Cr 3               spawn:
00025Cr 3  A9 rr        	lda #<sprtab		; sprite table.
00025Er 3  85 rr        	sta z80_l
000260r 3  A9 rr        	lda #>sprtab
000262r 3  85 rr        	sta z80_h
000264r 3               numsp1:
000264r 3  A9 0C        	lda #NUMSPR		; number of sprites.
000266r 3  85 rr        	sta spcnt
000268r 3               spaw0:
000268r 3  A0 00        	ldy #var_Type
00026Ar 3  B1 rr        	lda (z80_hl),y		; get sprite type.
00026Cr 3  C9 FF        	cmp #255		; is it an unused slot?
00026Er 3  F0 0F        	beq spaw1 		; yes, we can use this one.
000270r 3               
000270r 3  18           	clc 			; point to next sprite in table.
000271r 3  A5 rr        	lda z80_l
000273r 3  69 11        	adc #TABSIZ		; size of each entry.
000275r 3  85 rr        	sta z80_l
000277r 3  90 02        	bcc :+
000279r 3  E6 rr        	inc z80_h
00027Br 3               :
00027Br 3  C6 rr        	dec spcnt		; one less iteration.
00027Dr 3  D0 E9        	bne spaw0		; keep going until we find a slot.
00027Fr 3               
00027Fr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
00027Fr 3               
00027Fr 3               spaw1:
00027Fr 3  A5 rr        	lda z80_i		; address of original sprite.
000281r 3  48           	pha
000282r 3  A5 rr        	lda z80_x
000284r 3  48           	pha
000285r 3               
000285r 3  A5 rr        	lda z80_l		; store spawned sprite address.
000287r 3  85 rr        	sta spptr
000289r 3  A5 rr        	lda z80_h
00028Br 3  85 rr        	sta spptr+1
00028Dr 3               
00028Dr 3  A5 rr        	lda z80_c
00028Fr 3  A0 00        	ldy #var_Type
000291r 3  91 rr        	sta (z80_hl),y 		; set the type.
000293r 3  A0 05        	ldy #var_newType
000295r 3  91 rr        	sta (z80_hl),y		; copy
000297r 3               
000297r 3  A5 rr        	lda z80_b
000299r 3  A0 01        	ldy #var_Image
00029Br 3  91 rr        	sta (z80_hl),y		; set the image.
00029Dr 3  A0 06        	ldy #var_newImage
00029Fr 3  91 rr        	sta (z80_hl),y		; copy
0002A1r 3               
0002A1r 3  A9 00        	lda #0 				; frame zero.
0002A3r 3  A0 02        	ldy #var_Frame
0002A5r 3  91 rr        	sta (z80_hl),y		; set frame.
0002A7r 3  A0 07        	ldy #var_newFrame
0002A9r 3  91 rr        	sta (z80_hl),y		; copy
0002ABr 3               
0002ABr 3  A0 08        	ldy #8
0002ADr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0002AFr 3  A0 03        	ldy #3
0002B1r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002B3r 3  A0 08        	ldy #8
0002B5r 3  91 rr        	sta (z80_hl),y		; copy
0002B7r 3               
0002B7r 3  A0 09        	ldy #9
0002B9r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0002BBr 3  A0 04        	ldy #4
0002BDr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002BFr 3  A0 09        	ldy #9
0002C1r 3  91 rr        	sta (z80_hl),y		; copy
0002C3r 3               
0002C3r 3  A0 0A        	ldy #10				; direction of original.
0002C5r 3  B1 rr        	lda (z80_ix),y
0002C7r 3  91 rr        	sta (z80_hl),y		; direction
0002C9r 3               
0002C9r 3  A9 00        	lda #0
0002CBr 3  A0 0D        	ldy #var_jumpLo
0002CDr 3  91 rr        	sta (z80_hl),y		; reset parameter.
0002CFr 3  C8           	iny
0002D0r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0002D2r 3  C8           	iny
0002D3r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0002D5r 3  C8           	iny
0002D6r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0002D8r 3               rtssp:
0002D8r 3  A5 rr        	lda spptr			; address of new sprite.
0002DAr 3  85 rr        	sta z80_x
0002DCr 3  A5 rr        	lda spptr+1
0002DEr 3  85 rr        	sta z80_i
0002E0r 3               evis1:
0002E0r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
0002E3r 3               
0002E3r 3  A5 rr        	lda spptr 			; address of new sprite.
0002E5r 3  85 rr        	sta z80_x
0002E7r 3  A5 rr        	lda spptr+1
0002E9r 3  85 rr        	sta z80_i
0002EBr 3               
0002EBr 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
0002EBr 3  A0 03        	ldy #var_Y
0002EDr 3  B1 rr        	lda (z80_hl), y		; old x coord
0002EFr 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
0002F1r 3  B0 03        	bcs :+				; yes, don't draw it.
0002F3r 3               
0002F3r 3  20 rr rr     	jsr sspria 			; display the new sprite.
0002F6r 3               :
0002F6r 3  68           	pla					; address of original sprite.
0002F7r 3  85 rr        	sta z80_x
0002F9r 3  68           	pla
0002FAr 3  85 rr        	sta z80_i
0002FCr 3               
0002FCr 3  60           	rts
0002FDr 3               
0002FDr 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000301r 3  30 30        
000303r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000307r 3  30 30        
000309r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00030Dr 3  30 30        
00030Fr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000311r 3               
000311r 3               ;----------------------------------------------------
000311r 3               ; Check y-pos
000311r 3               ;----------------------------------------------------
000311r 3               
000311r 3               checkx:
000311r 3  A5 rr        	lda dispy		; y position.
000313r 3  C9 18        	cmp #24			; off screen?
000315r 3  B0 01        	bcs :+
000317r 3  60           	rts			; no, it's okay.
000318r 3               :
000318r 3  68           	pla			; remove return address from stack.
000319r 3  85 rr        	sta z80_l
00031Br 3  68           	pla
00031Cr 3  85 rr        	sta z80_h
00031Er 3  60           	rts
00031Fr 3               
00031Fr 3               ;-----------------------------------------------
00031Fr 3               ; Displays the current high score.
00031Fr 3               ;-----------------------------------------------
00031Fr 3               
00031Fr 3               dhisc:
00031Fr 3  A9 rr        	lda #<hiscor 		; high score text.
000321r 3  8D rr rr     	sta dscor3+1
000324r 3  8D rr rr     	sta bscor3+1
000327r 3  A9 rr        	lda #>hiscor
000329r 3  8D rr rr     	sta dscor3+2
00032Cr 3  8D rr rr     	sta bscor3+2
00032Fr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000332r 3               
000332r 3               ;------------------------------------------------------
000332r 3               ; Displays the current score.
000332r 3               ;------------------------------------------------------
000332r 3               
000332r 3               dscor:
000332r 3  A9 rr        	lda #<score		; score text.
000334r 3  8D rr rr     	sta dscor3+1
000337r 3  8D rr rr     	sta bscor3+1
00033Ar 3  A9 rr        	lda #>score
00033Cr 3  8D rr rr     	sta dscor3+2
00033Fr 3  8D rr rr     	sta bscor3+2
000342r 3               dscor1:
000342r 3  8C rr rr     	sty tmpscr
000345r 3  20 rr rr     	jsr preprt		; set up font and print position.
000348r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
00034Br 3               
00034Br 3               ;	lda #6			; digits to display.
00034Br 3               ;	sta z80_b
00034Br 3  A5 rr        	lda prtmod		; get print mode.
00034Dr 3  F0 03        	beq :+			; standard size text?
00034Fr 3  4C rr rr     	jmp bscor0		; no, show double-height.
000352r 3               :
000352r 3               dscor0:
000352r 3               ;	ldy #0
000352r 3               ;	lda (z80_hl),y 		; fetch character.
000352r 3  AC rr rr     	ldy tmpscr
000355r 3               dscor3:
000355r 3  B9 rr rr     	lda score,y
000358r 3  20 rr rr     	jsr pchar 		; display character.
00035Br 3  E6 rr        	inc dispx		; move along x coordinate
00035Dr 3               
00035Dr 3               ;	inc z80_l		; next score column.
00035Dr 3               ;	bne :+
00035Dr 3               ;	inc z80_h
00035Dr 3               ;:
00035Dr 3  EE rr rr     	inc tmpscr
000360r 3  C6 rr        	dec z80_b
000362r 3  D0 EE        	bne dscor0 		; repeat for all digits.
000364r 3               dscor2:
000364r 3  A5 rr        	lda dispx 		; set up display coordinates.
000366r 3  85 rr        	sta charx
000368r 3  A5 rr        	lda dispy
00036Ar 3  85 rr        	sta chary
00036Cr 3  60           	rts
00036Dr 3               
00036Dr 3  00           tmpscr:	.byte 0
00036Er 3               ;------------------------------------------------------
00036Er 3               ; Displays the current score in double-height characters.
00036Er 3               ;
00036Er 3               ; Input:
00036Er 3               ;  B  = digit number
00036Er 3               ;  HL = score string
00036Er 3               ;------------------------------------------------------
00036Er 3               
00036Er 3               bscor0:
00036Er 3               ;	ldy #0
00036Er 3               
00036Er 3               ;	lda (z80_hl),y 		; fetch character.
00036Er 3  A4 rr        	ldy tmp
000370r 3               bscor3:
000370r 3  B9 rr rr     	lda score,y
000373r 3  20 rr rr     	jsr bchar 		; display big char.
000376r 3               
000376r 3               ;	inc z80_l 		; next score column.
000376r 3               ;	bne :+
000376r 3               ;	inc z80_h
000376r 3               ;:
000376r 3  E6 rr        	inc tmp
000378r 3  C6 rr        	dec z80_b
00037Ar 3  F0 03        	beq :+
00037Cr 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
00037Fr 3               :
00037Fr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
000382r 3               
000382r 3               ;-----------------------------------------------------
000382r 3               ; Adds number in the hl pair to the score.
000382r 3               ;-----------------------------------------------------
000382r 3               
000382r 3               addsc:
000382r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000384r 3  85 rr        	sta z80_e
000386r 3  A9 rr        	lda #>(score+1)
000388r 3  85 rr        	sta z80_d
00038Ar 3  A9 10        	lda #<10000		; amount to add each time.
00038Cr 3  85 rr        	sta z80_c
00038Er 3  A9 27        	lda #>10000
000390r 3  85 rr        	sta z80_b
000392r 3  20 rr rr     	jsr incsc		; add to score.
000395r 3               
000395r 3  E6 rr        	inc z80_e		; thousands column.
000397r 3  D0 02        	bne :+
000399r 3  E6 rr        	inc z80_d
00039Br 3               :
00039Br 3  A9 E8        	lda #<1000		; amount to add each time.
00039Dr 3  85 rr        	sta z80_c
00039Fr 3  A9 03        	lda #>1000
0003A1r 3  85 rr        	sta z80_b
0003A3r 3  20 rr rr     	jsr incsc 		; add to score.
0003A6r 3               
0003A6r 3  E6 rr        	inc z80_e		; hundreds column.
0003A8r 3  D0 02        	bne :+
0003AAr 3  E6 rr        	inc z80_d
0003ACr 3               :
0003ACr 3  A9 64        	lda #<100		; amount to add each time.
0003AEr 3  85 rr        	sta z80_c
0003B0r 3  A9 00        	lda #>100
0003B2r 3  85 rr        	sta z80_b
0003B4r 3  20 rr rr     	jsr incsc		; add to score.
0003B7r 3               
0003B7r 3  E6 rr        	inc z80_e 		; tens column.
0003B9r 3  D0 02        	bne :+
0003BBr 3  E6 rr        	inc z80_d
0003BDr 3               :
0003BDr 3  A9 0A        	lda #<10		; amount to add each time.
0003BFr 3  85 rr        	sta z80_c
0003C1r 3  A9 00        	lda #>10
0003C3r 3  85 rr        	sta z80_b
0003C5r 3  20 rr rr     	jsr incsc 		; add to score.
0003C8r 3               
0003C8r 3  E6 rr        	inc z80_e		; units column.
0003CAr 3  D0 02        	bne :+
0003CCr 3  E6 rr        	inc z80_d
0003CEr 3               :
0003CEr 3  A9 01        	lda #<1			; units.
0003D0r 3  85 rr        	sta z80_c
0003D2r 3  A9 00        	lda #>1
0003D4r 3  85 rr        	sta z80_b
0003D6r 3               incsc:
0003D6r 3  A5 rr        	lda z80_h		; store amount to add.
0003D8r 3  48           	pha
0003D9r 3  A5 rr        	lda z80_l
0003DBr 3  48           	pha
0003DCr 3               
0003DCr 3  38           	sec			; subtract from amount to add.
0003DDr 3  A5 rr        	lda z80_l
0003DFr 3  E5 rr        	sbc z80_c
0003E1r 3  85 rr        	sta z80_l
0003E3r 3  A5 rr        	lda z80_h
0003E5r 3  E5 rr        	sbc z80_b
0003E7r 3  85 rr        	sta z80_h
0003E9r 3  90 14        	bcc incsc0		; too much, restore value.
0003EBr 3               
0003EBr 3  68           	pla			; delete the previous amount from the stack.
0003ECr 3  68           	pla
0003EDr 3               
0003EDr 3  A5 rr        	lda z80_d 		; store column position.
0003EFr 3  48           	pha
0003F0r 3  A5 rr        	lda z80_e
0003F2r 3  48           	pha
0003F3r 3  20 rr rr     	jsr incsc2		; do the increment.
0003F6r 3               
0003F6r 3  68           	pla			; restore column.
0003F7r 3  85 rr        	sta z80_e
0003F9r 3  68           	pla
0003FAr 3  85 rr        	sta z80_d
0003FCr 3  4C rr rr     	jmp incsc		; repeat until all added.
0003FFr 3               
0003FFr 3               incsc0:
0003FFr 3  68           	pla			; restore previous value.
000400r 3  85 rr        	sta z80_l
000402r 3  68           	pla
000403r 3  85 rr        	sta z80_h
000405r 3  60           	rts
000406r 3               incsc2:
000406r 3  A0 00        	ldy #0
000408r 3  B1 rr        	lda (z80_de),y 		; get amount.
00040Ar 3  18           	clc
00040Br 3  69 01        	adc #1			; add one to column.
00040Dr 3  91 rr        	sta (z80_de),y		; write new column total.
00040Fr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000411r 3  B0 01        	bcs :+
000413r 3  60           	rts			; no, carry on.
000414r 3               :
000414r 3  A9 30        	lda #'0'		; make it zero.
000416r 3  91 rr        	sta (z80_de),y		; write new column total.
000418r 3  C6 rr        	dec z80_e		; back one column.
00041Ar 3  D0 02        	bne :+
00041Cr 3  C6 rr        	dec z80_d
00041Er 3               :
00041Er 3  4C rr rr     	jmp incsc2
000421r 3               
000421r 3               ;------------------------------------
000421r 3               ; Add bonus to score and reset bonus
000421r 3               ;------------------------------------
000421r 3               
000421r 3               addbo:
000421r 3  A2 05        	ldx #5			; last digit.
000423r 3  18           	clc
000424r 3               addbo0:
000424r 3  BD rr rr     	lda score,x		; get score.
000427r 3  7D rr rr     	adc bonus,x		; add bonus.
00042Ar 3  38           	sec			; 0 to 18.
00042Br 3  E9 30        	sbc #48
00042Dr 3  48           	pha
00042Er 3  A9 30        	lda #'0'
000430r 3  9D rr rr     	sta bonus,x
000433r 3  68           	pla
000434r 3  C9 3A        	cmp #58
000436r 3  90 03        	bcc addbo1
000438r 3  38           	sec
000439r 3  E9 0A        	sbc #10
00043Br 3               addbo1:
00043Br 3  9D rr rr     	sta score,x		; zeroise bonus.
00043Er 3  CA           	dex			; next digit.
00043Fr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000441r 3  60           	rts
000442r 3               
000442r 3               ;------------------------------------
000442r 3               ; Swap score and bonus.
000442r 3               ;------------------------------------
000442r 3               
000442r 3               swpsb:
000442r 3  A2 05        	ldx #5			; digits to add.
000444r 3               swpsb0:
000444r 3  BD rr rr     	lda score,x 		; get score digits.
000447r 3  48           	pha			; save digit
000448r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
00044Br 3  9D rr rr     	sta score,x		; switch score-bonus
00044Er 3  68           	pla
00044Fr 3  9D rr rr     	sta bonus,x
000452r 3  CA           	dex 			; repeat for all 6 digits.
000453r 3  10 EF        	bpl swpsb0
000455r 3  60           	rts
000456r 3               
000456r 3               ;----------------------------------------------------
000456r 3               ; Get print address.
000456r 3               ;----------------------------------------------------
000456r 3               
000456r 3               gprad:
000456r 3  98           	tya
000457r 3  48           	pha
000458r 3               
000458r 3  A5 rr        	lda dispx 		; x coordinate.
00045Ar 3  85 rr        	sta scraddr
00045Cr 3  A9 00        	lda #0
00045Er 3  85 rr        	sta scraddr+1
000460r 3  06 rr        	asl scraddr  		; multiply char by 16
000462r 3  26 rr        	rol scraddr+1
000464r 3  06 rr        	asl scraddr
000466r 3  26 rr        	rol scraddr+1
000468r 3  06 rr        	asl scraddr
00046Ar 3  26 rr        	rol scraddr+1
00046Cr 3  06 rr        	asl scraddr
00046Er 3  26 rr        	rol scraddr+1
000470r 3               
000470r 3  A5 rr        	lda dispy		; y coordinate.
000472r 3  0A           	asl a
000473r 3  0A           	asl a
000474r 3  0A           	asl a			; multiply char by 8
000475r 3  A8           	tay
000476r 3               
000476r 3  18           	clc
000477r 3  A5 rr        	lda scraddr
000479r 3  79 00 07     	adc SCADTB_lb,y
00047Cr 3  85 rr        	sta scraddr
00047Er 3  A5 rr        	lda scraddr+1
000480r 3  79 00 08     	adc SCADTB_hb,y
000483r 3  85 rr        	sta scraddr+1
000485r 3               
000485r 3               
000485r 3               
000485r 3  A5 rr        	lda prtmod		; Double line if bigtxt
000487r 3  F0 08        	beq noskip
000489r 3  A5 rr        	lda dispx
00048Br 3  29 E0        	and #$e0
00048Dr 3  F0 02        	beq noskip
00048Fr 3  E6 rr        	inc scraddr+1
000491r 3               noskip:
000491r 3               
000491r 3  68           	pla
000492r 3  A8           	tay
000493r 3  60           	rts
000494r 3               ;--------------------------------------------------------------
000494r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000494r 3               ;
000494r 3               ; Output:
000494r 3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
000494r 3               ;--------------------------------------------------------------
000494r 3               
000494r 3               pradd:
000494r 3  A5 rr        	lda dispy 		; y coordinate.
000496r 3  85 rr        	sta bufaddr
000498r 3  A9 00        	lda #0
00049Ar 3  85 rr        	sta bufaddr+1
00049Cr 3  06 rr        	asl bufaddr  		; multiply char by 32
00049Er 3  26 rr        	rol bufaddr+1
0004A0r 3  06 rr        	asl bufaddr
0004A2r 3  26 rr        	rol bufaddr+1
0004A4r 3  06 rr        	asl bufaddr
0004A6r 3  26 rr        	rol bufaddr+1
0004A8r 3  06 rr        	asl bufaddr
0004AAr 3  26 rr        	rol bufaddr+1
0004ACr 3  06 rr        	asl bufaddr
0004AEr 3  26 rr        	rol bufaddr+1
0004B0r 3  18           	clc			; add address of MAP graphics.
0004B1r 3  A5 rr        	lda bufaddr
0004B3r 3  65 rr        	adc dispx
0004B5r 3  69 00        	adc #<MAP
0004B7r 3  85 rr        	sta bufaddr
0004B9r 3  A5 rr        	lda bufaddr+1
0004BBr 3  69 04        	adc #>MAP
0004BDr 3  85 rr        	sta bufaddr+1
0004BFr 3  60           	rts
0004C0r 3               
0004C0r 3               ;.if kflag
0004C0r 3               ;gaadd:
0004C0r 3               ;	lda dispy 		; y coordinate.
0004C0r 3               ;	sta bufaddr
0004C0r 3               ;	lda #0
0004C0r 3               ;	sta bufaddr+1
0004C0r 3               ;	asl bufaddr  		; multiply char by 32
0004C0r 3               ;	rol bufaddr+1
0004C0r 3               ;	asl bufaddr
0004C0r 3               ;	rol bufaddr+1
0004C0r 3               ;	asl bufaddr
0004C0r 3               ;	rol bufaddr+1
0004C0r 3               ;	asl bufaddr
0004C0r 3               ;	rol bufaddr+1
0004C0r 3               ;	asl bufaddr
0004C0r 3               ;	rol bufaddr+1
0004C0r 3               ;	clc			; add address of MAP graphics.
0004C0r 3               ;	lda bufaddr
0004C0r 3               ;	adc dispx
0004C0r 3               ;	adc #<att_table
0004C0r 3               ;	sta bufaddr
0004C0r 3               ;	lda bufaddr+1
0004C0r 3               ;	adc #>att_table
0004C0r 3               ;	sta bufaddr+1
0004C0r 3               ;	rts
0004C0r 3               ;.endif
0004C0r 3               
0004C0r 3               ;----------------------------------------------
0004C0r 3               ; Print attributes, properties and pixels.
0004C0r 3               ;
0004C0r 3               ; Input:
0004C0r 3               ;  A	= tile number
0004C0r 3               ;----------------------------------------------
0004C0r 3               
0004C0r 3               pbpattr:			; entry PUTBLOCK command
0004C0r 3  A4 rr        	ldy charx
0004C2r 3  84 rr        	sty dispx
0004C4r 3  A4 rr        	ldy chary
0004C6r 3  84 rr        	sty dispy
0004C8r 3               pattr:
0004C8r 3               .if aflag
0004C8r 3               	pha
0004C8r 3               	jsr wbloc		; save blockinfo
0004C8r 3               	pla
0004C8r 3               .endif
0004C8r 3               
0004C8r 3               pattr2:
0004C8r 3  85 rr        	sta z80_b		; store cell in b register for now.
0004CAr 3  AA           	tax
0004CBr 3  BD rr rr     	lda bprop,x 		; block properties.
0004CEr 3  85 rr        	sta z80_c
0004D0r 3  C9 08        	cmp #COLECT
0004D2r 3  D0 04        	bne :+
0004D4r 3  A5 rr        	lda z80_b
0004D6r 3  85 rr        	sta colpatt
0004D8r 3               :
0004D8r 3  20 rr rr     	jsr pradd 		; get property buffer address.
0004DBr 3  A5 rr        	lda z80_c
0004DDr 3  A0 00        	ldy #0
0004DFr 3  91 rr        	sta (bufaddr),y 	; write property.
0004E1r 3  A5 rr        	lda z80_b 		; restore cell.
0004E3r 3  4C rr rr     	jmp panp
0004E6r 3               ; Print attributes, no properties.
0004E6r 3               
0004E6r 3               ;colpatt:	.byte 0
0004E6r 3               
0004E6r 3               panp:
0004E6r 3  85 rr        	sta z80_e		; displacement in e.
0004E8r 3  A9 00        	lda #0
0004EAr 3  85 rr        	sta z80_d		; no high byte.
0004ECr 3  06 rr        	asl z80_e  		; multiply char by 8.
0004EEr 3  26 rr        	rol z80_d
0004F0r 3  06 rr        	asl z80_e
0004F2r 3  26 rr        	rol z80_d
0004F4r 3  06 rr        	asl z80_e
0004F6r 3  26 rr        	rol z80_d
0004F8r 3  18           	clc
0004F9r 3  A5 rr        	lda z80_e
0004FBr 3  69 rr        	adc #<chgfx 		; address of graphics.
0004FDr 3  85 rr        	sta tileaddr
0004FFr 3  A5 rr        	lda z80_d
000501r 3  69 rr        	adc #>chgfx
000503r 3  85 rr        	sta tileaddr+1
000505r 3  20 rr rr     	jsr gprad 		; get screen address.
000508r 3  A2 07        	ldx #7			; number of pixel rows to write.
00050Ar 3               panp0:
00050Ar 3  A0 00        	ldy #0
00050Cr 3  B1 rr        	lda (tileaddr),y 	; get image byte.
00050Er 3               .if iflag
00050Er 3               	eor #$ff		; Invert
00050Er 3               .endif
00050Er 3  BC rr rr     	ldy scrtab,x
000511r 3  91 rr        	sta (scraddr),y 	; copy to screen.
000513r 3  E6 rr        	inc tileaddr 		; next image byte.
000515r 3  D0 02        	bne :+
000517r 3  E6 rr        	inc tileaddr+1
000519r 3               :
000519r 3  CA           	dex	 		; repeat for 8 pixel rows.
00051Ar 3  10 EE        	bpl panp0
00051Cr 3  E6 rr        	inc dispx 		; move along one.
00051Er 3  E6 rr        	inc charx
000520r 3  60           	rts
000521r 3               
000521r 3               ;----------------------------------------------
000521r 3               ; Write block
000521r 3               ;----------------------------------------------
000521r 3               
000521r 3               .if aflag
000521r 3               wbloc:
000521r 3               	ldy #3
000521r 3               	sta (pbptr),y		; store block number
000521r 3               	dey
000521r 3               	lda dispx
000521r 3               	sta (pbptr),y		; write x position of block.
000521r 3               	dey
000521r 3               	lda dispy
000521r 3               	sta (pbptr),y		; write y position of block.
000521r 3               	dey
000521r 3               	lda scno
000521r 3               	sta (pbptr),y		; write screen.
000521r 3               	clc			; point to next free location
000521r 3               	lda pbptr
000521r 3               	adc #4
000521r 3               	sta pbptr
000521r 3               	bcc :+
000521r 3               	inc pbptr+1
000521r 3               :
000521r 3               	rts
000521r 3               .endif
000521r 3               
000521r 3               ;.if kflag
000521r 3               ;panp:
000521r 3               ;.endif
000521r 3               
000521r 3               ;----------------------------------------------
000521r 3               ; Print character pixels, no more.
000521r 3               ;
000521r 3               ; Input:
000521r 3               ;  A	= character to print
000521r 3               ;----------------------------------------------
000521r 3               
000521r 3               pchr:
000521r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000524r 3  E6 rr        	inc dispx		; move along one.
000526r 3  60           	rts
000527r 3               
000527r 3               ;----------------------------------------------------
000527r 3               ; Shifter sprite routine for objects.
000527r 3               ;----------------------------------------------------
000527r 3               
000527r 3               .if oflag
000527r 3               sprit7:
000527r 3               	lda z80_b
000527r 3               	beq sprit0
000527r 3               	sta z80_a
000527r 3               sprit3:
000527r 3               	lsr spr			; shift into position.
000527r 3               	ror spr+1
000527r 3               	ror spr+2
000527r 3               	dec z80_a		; one less iteration.
000527r 3               	bne sprit3
000527r 3               sprit0:
000527r 3               	rts 			; now apply to screen.
000527r 3               .endif
000527r 3               
000527r 3               ;-----------------------------------------------------------
000527r 3               ; Get room address.
000527r 3               ;-----------------------------------------------------------
000527r 3               
000527r 3               groom:
000527r 3  A6 rr        	ldx scno 		; screen number.
000529r 3  A0 00        	ldy #0
00052Br 3               groomx:
00052Br 3  A9 rr        	lda #<scdat 		; pointer to screens.
00052Dr 3  85 rr        	sta z80_l
00052Fr 3  A9 rr        	lda #>scdat
000531r 3  85 rr        	sta z80_h
000533r 3               groom1:
000533r 3  E0 00        	cpx #0			; is it the first one?
000535r 3  F0 15        	beq groom0 		; no more screens to skip.
000537r 3               
000537r 3  18           	clc
000538r 3  A5 rr        	lda z80_l
00053Ar 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
00053Dr 3  85 rr        	sta z80_l
00053Fr 3  C8           	iny			; point to high byte.
000540r 3  A5 rr        	lda z80_h
000542r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000545r 3  85 rr        	sta z80_h
000547r 3  C8           	iny			; next address.
000548r 3               
000548r 3  CA           	dex 			; one less iteration.
000549r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
00054Cr 3               groom0:
00054Cr 3  AD rr rr     	lda numsc		; add displacement.
00054Fr 3  0A           	asl a
000550r 3  18           	clc			; add double displacement to address.
000551r 3  65 rr        	adc z80_l
000553r 3  85 rr        	sta z80_l
000555r 3  A5 rr        	lda z80_h
000557r 3  69 00        	adc #0
000559r 3  85 rr        	sta z80_h
00055Br 3  60           	rts
00055Cr 3               
00055Cr 3               ;-----------------------------------------------------------
00055Cr 3               ; Draw present room.
00055Cr 3               ;-----------------------------------------------------------
00055Cr 3               
00055Cr 3               droom:
00055Cr 3  AD rr rr     	lda wintop 		; window top.
00055Fr 3  85 rr        	sta dispy		; set cursor y position.
000561r 3               droom2:
000561r 3  20 rr rr     	jsr groom 		; get address of current room.
000564r 3  A9 00        	lda #0	 		; zero in accumulator.
000566r 3  85 rr        	sta comcnt 		; reset compression counter.
000568r 3  AD rr rr     	lda winhgt 		; height of window.
00056Br 3  85 rr        	sta rrow		; set row counter
00056Dr 3               droom0:
00056Dr 3  AD rr rr     	lda winlft 		; window left edge.
000570r 3  85 rr        	sta dispx 		; set cursor x position.
000572r 3  AD rr rr     	lda winwid 		; width of window.
000575r 3  85 rr        	sta rcol		; set column counter
000577r 3               droom1:
000577r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
00057Ar 3               .if xflag
00057Ar 3               	jsr drwmeta
00057Ar 3               .else
00057Ar 3  20 rr rr     	jsr pattr2 		; show attributes and block.
00057Dr 3               .endif
00057Dr 3  C6 rr        	dec rcol		; one less column.
00057Fr 3  D0 F6        	bne droom1 		; repeat for entire line.
000581r 3  E6 rr        	inc dispy		; move down one line.
000583r 3               .if xflag
000583r 3               	inc dispy		; move down one line.
000583r 3               .endif
000583r 3  C6 rr        	dec rrow 		; one less row.
000585r 3  D0 E6        	bne droom0 		; repeat for all rows.
000587r 3  60           	rts
000588r 3               
000588r 3               ;----------------------------------------------
000588r 3               ; Decompress bytes on-the-fly.
000588r 3               ;----------------------------------------------
000588r 3               
000588r 3               flbyt:
000588r 3  A5 rr        	lda comcnt 		; compression counter.
00058Ar 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00058Cr 3               
00058Cr 3  A0 00        	ldy #0
00058Er 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000590r 3  E6 rr        	inc z80_l 		; point to next cell.
000592r 3  D0 02        	bne :+
000594r 3  E6 rr        	inc z80_h
000596r 3               :
000596r 3  C9 FF        	cmp #255 		; is this byte a control code?
000598r 3  F0 01        	beq :+
00059Ar 3  60           	rts 			; no, this byte is uncompressed.
00059Br 3               :
00059Br 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
00059Dr 3  85 rr        	sta combyt 		; set up the type.
00059Fr 3  E6 rr        	inc z80_l 		; point to quantity.
0005A1r 3  D0 02        	bne :+
0005A3r 3  E6 rr        	inc z80_h
0005A5r 3               :
0005A5r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
0005A7r 3  E6 rr        	inc z80_l 		; point to next byte.
0005A9r 3  D0 02        	bne :+
0005ABr 3  E6 rr        	inc z80_h
0005ADr 3               :
0005ADr 3               flbyt1:
0005ADr 3  85 rr        	sta comcnt 		; store new quantity.
0005AFr 3  C6 rr        	dec comcnt		; one less.
0005B1r 3  A5 rr        	lda combyt 		; byte to expand.
0005B3r 3  60           	rts
0005B4r 3               
0005B4r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
0005B4r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
0005B4r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
0005B4r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
0005B4r 3               .if xflag
0005B4r 3               drwmeta:
0005B4r 3               	sta tmpblk
0005B4r 3               	jsr pattr2
0005B4r 3               
0005B4r 3               	inc dispy
0005B4r 3               	dec dispx
0005B4r 3               	ldx tmpblk
0005B4r 3               	beq :+
0005B4r 3               	inx
0005B4r 3               :
0005B4r 3               	txa
0005B4r 3               	jsr pattr2
0005B4r 3               
0005B4r 3               	ldx tmpblk
0005B4r 3               	beq :+
0005B4r 3               	inx
0005B4r 3               	inx
0005B4r 3               	inx
0005B4r 3               :
0005B4r 3               	txa
0005B4r 3               	jsr pattr2
0005B4r 3               
0005B4r 3               	dec dispy
0005B4r 3               	dec dispx
0005B4r 3               	ldx tmpblk
0005B4r 3               	beq :+
0005B4r 3               	inx
0005B4r 3               	inx
0005B4r 3               :
0005B4r 3               	txa
0005B4r 3               	jsr pattr2
0005B4r 3               	rts
0005B4r 3               
0005B4r 3               tmpblk:	.byte 0
0005B4r 3               
0005B4r 3               .endif
0005B4r 3               
0005B4r 3               ;------------------------------------------
0005B4r 3               ; Ladder down check.
0005B4r 3               ;
0005B4r 3               ; Input:
0005B4r 3               ;  IX = sprite pointer
0005B4r 3               ;------------------------------------------
0005B4r 3               
0005B4r 3               .if lflag
0005B4r 3               laddd:
0005B4r 3               	ldy #9
0005B4r 3               	lda (z80_ix),y		; x coordinate.
0005B4r 3               	sta dispx
0005B4r 3               
0005B4r 3               	ldy #8
0005B4r 3               	lda (z80_ix),y		; y coordinate.
0005B4r 3               	and #254		; make it even.
0005B4r 3               	sta (z80_ix),y 		; reset it.
0005B4r 3               	clc 			; look down 16 pixels.
0005B4r 3               numsp5:
0005B4r 3               	adc #SPR_HGT
0005B4r 3               	sta dispy		; coords in dispx,dispy.
0005B4r 3               	jmp laddv
0005B4r 3               
0005B4r 3               ;------------------------------------------
0005B4r 3               ; Ladder up check.
0005B4r 3               ;
0005B4r 3               ; Input:
0005B4r 3               ;  IX = sprite pointer
0005B4r 3               ;
0005B4r 3               ; Output:
0005B4r 3               ;  A  = 0 is ok, A <>0 is not ok
0005B4r 3               ;------------------------------------------
0005B4r 3               
0005B4r 3               laddu:
0005B4r 3               	ldy #9
0005B4r 3               	lda (z80_ix),y		; x coordinate.
0005B4r 3               	sta dispx
0005B4r 3               
0005B4r 3               	ldy #8
0005B4r 3               	lda (z80_ix),y		; y coordinate.
0005B4r 3               	and #254 		; make it even.
0005B4r 3               	sta (z80_ix),y		; reset it.
0005B4r 3               	clc 			; look 2 pixels above feet.
0005B4r 3               numsp6:
0005B4r 3               	adc #SPR_HGT-2
0005B4r 3               	sta dispy		; coords in dispx,dispy.
0005B4r 3               laddv:
0005B4r 3               	jsr tstbl 		; get map address.
0005B4r 3               	jsr ldchk 		; standard ladder check.
0005B4r 3               	beq :+
0005B4r 3               	rts 			; no way through.
0005B4r 3               :
0005B4r 3               	inc bufaddr 		; look right one cell.
0005B4r 3               	bne :+
0005B4r 3               	inc bufaddr+1
0005B4r 3               :
0005B4r 3               	jsr ldchk 		; do the check.
0005B4r 3               	beq :+
0005B4r 3               	rts 			; impassable.
0005B4r 3               :
0005B4r 3               	lda dispx 		; y coordinate.
0005B4r 3               	and #7 			; position straddling block cells.
0005B4r 3               	bne :+
0005B4r 3               	rts 			; no more checks needed.
0005B4r 3               :
0005B4r 3               	inc bufaddr 		; look to third cell.
0005B4r 3               	bne :+
0005B4r 3               	inc bufaddr+1
0005B4r 3               :
0005B4r 3               	jsr ldchk 		; do the check.
0005B4r 3               	rts  			; return with zero flag set accordingly.
0005B4r 3               .endif
0005B4r 3               
0005B4r 3               ;---------------------------------------------------------
0005B4r 3               ; Can go up check.
0005B4r 3               ;
0005B4r 3               ; Input:
0005B4r 3               ;  IX = sprite pointer
0005B4r 3               ;
0005B4r 3               ; Output:
0005B4r 3               ;  A  = 0 is ok, A <>0 is not ok
0005B4r 3               ;---------------------------------------------------------
0005B4r 3               
0005B4r 3               cangu:
0005B4r 3  A0 09        	ldy #9
0005B6r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0005B8r 3  85 rr        	sta dispx
0005BAr 3  A0 08        	ldy #8
0005BCr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0005BEr 3  38           	sec
0005BFr 3  E9 02        	sbc #2
0005C1r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0005C3r 3  20 rr rr     	jsr tstbl 		; get map address.
0005C6r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
0005C9r 3  F0 01        	beq :+
0005CBr 3  60           	rts			; no way through.
0005CCr 3               :
0005CCr 3  E6 rr        	inc bufaddr		; look right one cell.
0005CEr 3  D0 02        	bne :+
0005D0r 3  E6 rr        	inc bufaddr+1
0005D2r 3               :
0005D2r 3  20 rr rr     	jsr lrchk 		; do the check.
0005D5r 3  F0 01        	beq :+
0005D7r 3  60           	rts			; impassable.
0005D8r 3               :
0005D8r 3  A5 rr        	lda dispx		; x coordinate.
0005DAr 3  29 07        	and #7			; position straddling block cells.
0005DCr 3  D0 01        	bne :+
0005DEr 3  60           	rts			; no more checks needed.
0005DFr 3               :
0005DFr 3  E6 rr        	inc bufaddr		; look to third cell.
0005E1r 3  D0 02        	bne :+
0005E3r 3  E6 rr        	inc bufaddr+1
0005E5r 3               :
0005E5r 3  20 rr rr     	jsr lrchk		; do the check.
0005E8r 3  60           	rts 			; return with zero flag set accordingly.
0005E9r 3               
0005E9r 3               ;---------------------------------------------------------
0005E9r 3               ; Can go down check.
0005E9r 3               ;
0005E9r 3               ; Input:
0005E9r 3               ;  IX = sprite pointer
0005E9r 3               ;
0005E9r 3               ; Output:
0005E9r 3               ;  A  = 0 is ok, A <>0 is not ok
0005E9r 3               ;---------------------------------------------------------
0005E9r 3               
0005E9r 3               cangd:
0005E9r 3  A0 09        	ldy #9
0005EBr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0005EDr 3  85 rr        	sta dispx
0005EFr 3  A0 08        	ldy #8
0005F1r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
0005F3r 3  18           	clc
0005F4r 3               numsp3:
0005F4r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0005F6r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0005F8r 3  20 rr rr     	jsr tstbl 		; get map address.
0005FBr 3  20 rr rr     	jsr plchk 		; block, platform check.
0005FEr 3  F0 01        	beq :+
000600r 3  60           	rts			; no way through.
000601r 3               :
000601r 3  E6 rr        	inc bufaddr		; look right one cell.
000603r 3  D0 02        	bne :+
000605r 3  E6 rr        	inc bufaddr+1
000607r 3               :
000607r 3  20 rr rr     	jsr plchk		; block, platform check.
00060Ar 3  F0 01        	beq :+
00060Cr 3  60           	rts			; impassable.
00060Dr 3               :
00060Dr 3  A5 rr        	lda dispx		; x coordinate.
00060Fr 3  29 07        	and #7			; position straddling block cells.
000611r 3  D0 01        	bne :+
000613r 3  60           	rts			; no more checks needed.
000614r 3               :
000614r 3  E6 rr        	inc bufaddr		; look to third cell.
000616r 3  D0 02        	bne :+
000618r 3  E6 rr        	inc bufaddr+1
00061Ar 3               :
00061Ar 3  20 rr rr     	jsr plchk		; block, platform check.
00061Dr 3  60           	rts			; return with zero flag set accordingly.
00061Er 3               
00061Er 3               ;---------------------------------------------------------
00061Er 3               ; Can go left check.
00061Er 3               ;
00061Er 3               ; Input:
00061Er 3               ;  IX = sprite pointer
00061Er 3               ;
00061Er 3               ; Output:
00061Er 3               ;  A  = 0 is ok, A <>0 is not ok
00061Er 3               ;---------------------------------------------------------
00061Er 3               
00061Er 3               cangl:
00061Er 3  A0 08        	ldy #8
000620r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000622r 3  85 rr        	sta dispy
000624r 3  A0 09        	ldy #9
000626r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000628r 3  38           	sec
000629r 3  E9 02        	sbc #2			; look left 2 pixels.
00062Br 3  85 rr        	sta dispx		; coords in dispx,dispy.
00062Dr 3  4C rr rr     	jmp cangh		; test if we can go there.
000630r 3               
000630r 3               ;---------------------------------------------------------
000630r 3               ; Can go right check.
000630r 3               ;
000630r 3               ; Input:
000630r 3               ;  IX = sprite pointer
000630r 3               ;
000630r 3               ; Output:
000630r 3               ;  A  = 0 is ok, A <>0 is not ok
000630r 3               ;---------------------------------------------------------
000630r 3               
000630r 3               cangr:
000630r 3  A0 08        	ldy #8
000632r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000634r 3  85 rr        	sta dispy
000636r 3  A0 09        	ldy #9
000638r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00063Ar 3  18           	clc
00063Br 3  69 10        	adc #16			; look right 16 pixels.
00063Dr 3  85 rr        	sta dispx		; coords in dispx,dispy.
00063Fr 3               cangh:
00063Fr 3               cangh2:
00063Fr 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000641r 3  85 rr        	sta z80_b
000643r 3  A5 rr        	lda dispy		; y position.
000645r 3  29 07        	and #7			; does x straddle cells?
000647r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000649r 3  C6 rr        	dec z80_b		; one less row to write.
00064Br 3               cangh0:
00064Br 3  20 rr rr     	jsr tstbl		; get map address.
00064Er 3               cangh1:
00064Er 3  20 rr rr     	jsr lrchk		; standard left/right check.
000651r 3  F0 01        	beq :+
000653r 3  60           	rts			; no way through.
000654r 3               :
000654r 3  48           	pha
000655r 3  18           	clc
000656r 3  A5 rr        	lda bufaddr
000658r 3  69 20        	adc #32			; look down.
00065Ar 3  85 rr        	sta bufaddr
00065Cr 3  90 02        	bcc :+
00065Er 3  E6 rr        	inc bufaddr+1
000660r 3               :
000660r 3  68           	pla
000661r 3               
000661r 3  C6 rr        	dec z80_b
000663r 3  D0 E9        	bne cangh1
000665r 3  60           	rts
000666r 3               
000666r 3               ;-------------------------------------
000666r 3               ; Check left/right movement is okay.
000666r 3               ;
000666r 3               ; Input:
000666r 3               ;  bufaddr = MAP + x/8 + y/8*32
000666r 3               ;
000666r 3               ; Output:
000666r 3               ;  A  = 0 is ok, A <>0 is not ok
000666r 3               ;-------------------------------------
000666r 3               
000666r 3               lrchk:
000666r 3  A0 00        	ldy #0
000668r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00066Ar 3  C9 02        	cmp #WALL 		; is it passable?
00066Cr 3  F0 0A        	beq lrchkx		; no.
00066Er 3               
00066Er 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000670r 3  F0 06        	beq lrchkx		; not passable.
000672r 3  A9 00        	lda #0
000674r 3  60           	rts
000675r 3               
000675r 3               ;--------------------------------------------------------------
000675r 3               ; Called by mmenu
000675r 3               ;--------------------------------------------------------------
000675r 3               
000675r 3               always:
000675r 3  A9 FF        	lda #255		; report it as okay.
000677r 3  60           	rts
000678r 3               
000678r 3               lrchkx:
000678r 3  A9 01        	lda #1 			; reset all bits.
00067Ar 3  60           	rts
00067Br 3               
00067Br 3               
00067Br 3               ;--------------------------------------------------------------
00067Br 3               ; Check platform or solid item is not in way.
00067Br 3               ;
00067Br 3               ; Input:
00067Br 3               ;  bufaddr = MAP + x/8 + y/8*32
00067Br 3               ;
00067Br 3               ; Output:
00067Br 3               ;  A  = 0 is ok, A <>0 is not ok
00067Br 3               ;--------------------------------------------------------------
00067Br 3               
00067Br 3               plchk:
00067Br 3  A0 00        	ldy #0
00067Dr 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
00067Fr 3  C9 02        	cmp #WALL 		; is it passable?
000681r 3  F0 F5        	beq lrchkx		; no.
000683r 3               .if pflag .or dflag
000683r 3               	cmp #FODDER		; fodder has to be dug.
000683r 3               	beq lrchkx		; not passable.
000683r 3               .endif
000683r 3  C9 01        	cmp #PLATFM		; platform is solid.
000685r 3  F0 03        	beq plchkx		; not passable.
000687r 3               .if lflag
000687r 3               	cmp #LADDER		; is it a ladder?
000687r 3               	beq lrchkx		; on ladder, deny movement.
000687r 3               .endif
000687r 3               plchk0:
000687r 3  A9 00        	lda #0			; report as ok
000689r 3  60           	rts
00068Ar 3               plchkx:
00068Ar 3  A5 rr        	lda dispy		; x coordinate.
00068Cr 3  29 07        	and #7			; position straddling blocks.
00068Er 3  F0 E8        	beq lrchkx		; on platform, deny movement.
000690r 3  4C rr rr     	jmp plchk0
000693r 3               
000693r 3               ;--------------------------------------------------------------
000693r 3               ; Check ladder is available.
000693r 3               ;
000693r 3               ; Input:
000693r 3               ;  bufaddr = MAP + x/8 + y/8*32
000693r 3               ;
000693r 3               ; Output:
000693r 3               ;  A  = 0 is ok, A <>0 is not ok
000693r 3               ;--------------------------------------------------------------
000693r 3               
000693r 3               .if lflag
000693r 3               ldchk:
000693r 3               	ldy #0
000693r 3               	lda (bufaddr),y 	; fetch cell.
000693r 3               	cmp #LADDER 		; is it a ladder?
000693r 3               	beq ldchk1
000693r 3               	lda #1
000693r 3               	rts  			; return with zero flag set accordingly.
000693r 3               ldchk1:
000693r 3               	lda #0
000693r 3               	rts
000693r 3               .endif
000693r 3               
000693r 3               ;--------------------------------------------------------------
000693r 3               ; Get collectables.
000693r 3               ;--------------------------------------------------------------
000693r 3               
000693r 3               .if cflag
000693r 3               getcol:
000693r 3                       lda #COLECT             ; collectable blocks.
000693r 3                       sta z80_b
000693r 3                       jsr tded                ; test for collectable blocks.
000693r 3                       cmp z80_b               ; did we find one?
000693r 3                       beq :+
000693r 3                       rts                     ; none were found, job done.
000693r 3               :
000693r 3                       jsr gtblk               ; get block.
000693r 3                       jsr evnt20              ; collected block event.
000693r 3                       jmp getcol              ; repeat until none left.
000693r 3               
000693r 3               ; Get collectable block.
000693r 3               
000693r 3               gtblk:
000693r 3               	ldy #0
000693r 3               	lda (bufaddr),y
000693r 3               	sta z80_a
000693r 3                       lda #0
000693r 3                       sta (bufaddr),y		; make it empty now.
000693r 3               
000693r 3               	lda bufaddr		; set dispx
000693r 3               	and #31
000693r 3               	sta dispx
000693r 3               
000693r 3               	lda bufaddr+1		; Set dispy
000693r 3               	sec
000693r 3               	sbc #>MAP
000693r 3               	sta bufaddr+1
000693r 3               	asl bufaddr
000693r 3               	rol bufaddr+1
000693r 3               	asl bufaddr
000693r 3               	rol bufaddr+1
000693r 3               	asl bufaddr
000693r 3               	rol bufaddr+1
000693r 3               	lda bufaddr+1
000693r 3               	sta dispy
000693r 3               
000693r 3               	lda colpatt		; get blocknr
000693r 3               	sta z80_e		; displacement in e.
000693r 3               	lda #0
000693r 3               	sta z80_d		; no high byte.
000693r 3               	asl z80_e  		; multiply char by 8.
000693r 3               	rol z80_d
000693r 3               	asl z80_e
000693r 3               	rol z80_d
000693r 3               	asl z80_e
000693r 3               	rol z80_d
000693r 3               	clc
000693r 3               	lda z80_e
000693r 3               	adc #<chgfx 		; address of graphics.
000693r 3               	sta tileaddr
000693r 3               	lda z80_d
000693r 3               	adc #>chgfx
000693r 3               	sta tileaddr+1
000693r 3               	jsr gprad 		; get screen address.
000693r 3               	ldx #7			; number of pixel rows to write.
000693r 3               gtblk0:
000693r 3               	ldy #0
000693r 3               	lda (tileaddr),y 	; get image byte.
000693r 3               	ldy scrtab,x
000693r 3               	eor (scraddr),y 	; XOR tile on screen
000693r 3               	sta (scraddr),y 	; copy to screen.
000693r 3               	inc tileaddr 		; next image byte.
000693r 3               	bne :+
000693r 3               	inc tileaddr+1
000693r 3               :
000693r 3               	dex	 		; repeat for 8 pixel rows.
000693r 3               	bpl gtblk0
000693r 3               	rts
000693r 3               .endif
000693r 3               
000693r 3               ;--------------------------------------------------------------
000693r 3               ; Touched deadly block check.
000693r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000693r 3               ;
000693r 3               ; Input:
000693r 3               ;  IX = sprite address
000693r 3               ;
000693r 3               ; Output:
000693r 3               ;  A  = 0 is ok, A=5 is not ok
000693r 3               ;--------------------------------------------------------------
000693r 3               
000693r 3               tded:
000693r 3  A0 08        	ldy #8
000695r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000697r 3  85 rr        	sta dispy
000699r 3  C8           	iny
00069Ar 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00069Cr 3  85 rr        	sta dispx		; coords in dispx,dispy.
00069Er 3  20 rr rr     	jsr tstbl		; get map address.
0006A1r 3  48           	pha
0006A2r 3  A9 1F        	lda #31			; default distance to next line down.
0006A4r 3  85 rr        	sta z80_e
0006A6r 3  68           	pla
0006A7r 3  C5 rr        	cmp z80_b		; is this the required block?
0006A9r 3  D0 01        	bne :+
0006ABr 3  60           	rts			; yes.
0006ACr 3               :
0006ACr 3  E6 rr        	inc bufaddr 		; next cell.
0006AEr 3  D0 02        	bne :+
0006B0r 3  E6 rr        	inc bufaddr+1
0006B2r 3               :
0006B2r 3  A0 00        	ldy #0
0006B4r 3  B1 rr        	lda (bufaddr),y		; fetch type.
0006B6r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
0006B8r 3  D0 01        	bne :+
0006BAr 3  60           	rts			; yes.
0006BBr 3               :
0006BBr 3  A5 rr        	lda dispx		; horizontal position.
0006BDr 3  85 rr        	sta z80_c 		; store column in c register.
0006BFr 3  29 07        	and #7			; is it straddling cells?
0006C1r 3  D0 03        	bne :+
0006C3r 3  4C rr rr     	jmp tded0		; no.
0006C6r 3               :
0006C6r 3  E6 rr        	inc bufaddr 		; last cell.
0006C8r 3  D0 02        	bne :+
0006CAr 3  E6 rr        	inc bufaddr+1
0006CCr 3               :
0006CCr 3  A0 00        	ldy #0
0006CEr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0006D0r 3  C5 rr        	cmp z80_b		; is this the block?
0006D2r 3  D0 01        	bne :+
0006D4r 3  60           	rts			; yes.
0006D5r 3               :
0006D5r 3  C6 rr        	dec z80_e		; one less cell to next row down.
0006D7r 3               tded0:
0006D7r 3  18           	clc 			; point to next row.
0006D8r 3  A5 rr        	lda bufaddr
0006DAr 3  65 rr        	adc z80_e
0006DCr 3  85 rr        	sta bufaddr
0006DEr 3  90 02        	bcc :+
0006E0r 3  E6 rr        	inc bufaddr+1
0006E2r 3               :
0006E2r 3  A0 00        	ldy #0
0006E4r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
0006E6r 3  C5 rr        	cmp z80_b		; is this fatal?
0006E8r 3  D0 01        	bne :+
0006EAr 3  60           	rts			; yes.
0006EBr 3               :
0006EBr 3  E6 rr        	inc bufaddr 		; next cell.
0006EDr 3  D0 02        	bne :+
0006EFr 3  E6 rr        	inc bufaddr+1
0006F1r 3               :
0006F1r 3  A0 00        	ldy #0
0006F3r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0006F5r 3  C5 rr        	cmp z80_b		; is this fatal?
0006F7r 3  D0 01        	bne :+
0006F9r 3  60           	rts			; yes.
0006FAr 3               :
0006FAr 3  A5 rr        	lda z80_c		; horizontal position.
0006FCr 3  29 07        	and #7			; is it straddling cells?
0006FEr 3  D0 03        	bne :+
000700r 3  4C rr rr     	jmp tded1 		; no.
000703r 3               :
000703r 3  E6 rr        	inc bufaddr		; last cell.
000705r 3  D0 02        	bne :+
000707r 3  E6 rr        	inc bufaddr+1
000709r 3               :
000709r 3  A0 00        	ldy #0
00070Br 3  B1 rr        	lda (bufaddr),y		; fetch type.
00070Dr 3  C5 rr        	cmp z80_b		; is this fatal?
00070Fr 3  D0 01        	bne :+
000711r 3  60           	rts			; yes.
000712r 3               :
000712r 3               tded1:
000712r 3  A5 rr        	lda dispy		; vertical position.
000714r 3  29 07        	and #7 			; is it straddling cells?
000716r 3  D0 01        	bne :+
000718r 3  60           	rts			; no, job done.
000719r 3               :
000719r 3  18           	clc			; point to next row.
00071Ar 3  A5 rr        	lda bufaddr
00071Cr 3  65 rr        	adc z80_e
00071Er 3  85 rr        	sta bufaddr
000720r 3  90 02        	bcc :+
000722r 3  E6 rr        	inc bufaddr+1
000724r 3               :
000724r 3  A0 00        	ldy #0
000726r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000728r 3  C5 rr        	cmp z80_b		; is this fatal?
00072Ar 3  D0 01        	bne :+
00072Cr 3  60           	rts			; yes.
00072Dr 3               :
00072Dr 3  E6 rr        	inc bufaddr		; next cell.
00072Fr 3  D0 02        	bne :+
000731r 3  E6 rr        	inc bufaddr+1
000733r 3               :
000733r 3  A0 00        	ldy #0
000735r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000737r 3  C5 rr        	cmp z80_b		; is this fatal?
000739r 3  D0 01        	bne :+
00073Br 3  60           	rts			; yes.
00073Cr 3               :
00073Cr 3  A5 rr        	lda z80_c		; horizontal position.
00073Er 3  29 07        	and #7			; is it straddling cells?
000740r 3  D0 01        	bne :+
000742r 3  60           	rts			; no.
000743r 3               :
000743r 3  E6 rr        	inc bufaddr		; last cell.
000745r 3  D0 02        	bne :+
000747r 3  E6 rr        	inc bufaddr+1
000749r 3               :
000749r 3  A0 00        	ldy #0
00074Br 3  B1 rr        	lda (bufaddr),y		; fetch final type.
00074Dr 3  60           	rts 			; return with final type in accumulator.
00074Er 3               
00074Er 3               ;---------------------------------------------------
00074Er 3               ; Fetch block type at (dispx, dispy).
00074Er 3               ;
00074Er 3               ; Output:
00074Er 3               ;  A = block type
00074Er 3               ;---------------------------------------------------
00074Er 3               
00074Er 3               tstbl:
00074Er 3  A5 rr        	lda dispy 		; fetch y coord.
000750r 3  4A           	lsr a			; bufaddr = y/8
000751r 3  4A           	lsr a
000752r 3  4A           	lsr a
000753r 3               ;	sta chary
000753r 3               
000753r 3  85 rr        	sta bufaddr
000755r 3  A9 00        	lda #0
000757r 3  85 rr        	sta bufaddr+1
000759r 3               
000759r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
00075Br 3  26 rr        	rol bufaddr+1
00075Dr 3  06 rr        	asl bufaddr
00075Fr 3  26 rr        	rol bufaddr+1
000761r 3  06 rr        	asl bufaddr
000763r 3  26 rr        	rol bufaddr+1
000765r 3  06 rr        	asl bufaddr
000767r 3  26 rr        	rol bufaddr+1
000769r 3  06 rr        	asl bufaddr
00076Br 3  26 rr        	rol bufaddr+1
00076Dr 3               
00076Dr 3  A5 rr        	lda dispx		; x/8
00076Fr 3  4A           	lsr a
000770r 3  4A           	lsr a
000771r 3  4A           	lsr a
000772r 3               ;	sta charx
000772r 3               
000772r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000773r 3  65 rr        	adc bufaddr
000775r 3  69 00        	adc #<MAP
000777r 3  85 rr        	sta bufaddr
000779r 3  A5 rr        	lda bufaddr+1
00077Br 3  69 04        	adc #>MAP
00077Dr 3  85 rr        	sta bufaddr+1
00077Fr 3               
00077Fr 3  A0 00        	ldy #0
000781r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000783r 3  60           	rts
000784r 3               
000784r 3               ;-------------------------------------------------------------------
000784r 3               ; Jump - if we can.
000784r 3               ; Requires initial speed to be set up in accumulator prior to call.
000784r 3               ;
000784r 3               ; Input:
000784r 3               ;  IX = sprite address
000784r 3               ;-------------------------------------------------------------------
000784r 3               
000784r 3               jump:
000784r 3  A0 0D        	ldy #var_jumpLo
000786r 3  B1 rr        	lda (z80_ix),y		; jump table low.
000788r 3  A0 0E        	ldy #var_jumpHi
00078Ar 3  11 rr        	ora (z80_ix),y		; jump table high.
00078Cr 3  F0 01        	beq :+
00078Er 3  60           	rts			; already in the air.
00078Fr 3               :
00078Fr 3  A9 rr        	lda #>jtab
000791r 3  A0 0E        	ldy #var_jumpHi
000793r 3  91 rr        	sta (z80_ix),y		; set jump high.
000795r 3  A9 rr        	lda #<jtab		; jump table start.
000797r 3  A0 0D        	ldy #var_jumpLo
000799r 3  91 rr        	sta (z80_ix),y		; set jump low.
00079Br 3  60           	rts
00079Cr 3               
00079Cr 3               ; Jump table.
00079Cr 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
00079Cr 3               ;.align 32
00079Cr 3               ;jtab:
00079Cr 3               ;	.byte 248,250,252
00079Cr 3               ;	.byte 254,254,255
00079Cr 3               ;	.byte 255,255,0,0
00079Cr 3               ;	.byte 0,1,1,1,2,2
00079Cr 3               ;	.byte 4,6,8,8,8,99
00079Cr 3               
00079Cr 3               ;------------------------------------------------
00079Cr 3               ; Random numbers code.
00079Cr 3               ; Pseudo-random number generator, 8-bit.
00079Cr 3               ;
00079Cr 3               ; Output:
00079Cr 3               ;  RND = random number
00079Cr 3               ;------------------------------------------------
00079Cr 3               
00079Cr 3               random:
00079Cr 3  A5 rr        	lda seed
00079Er 3  F0 05        	beq doEor
0007A0r 3  0A           	asl a
0007A1r 3  F0 04        	beq noEor
0007A3r 3  90 02        	bcc noEor
0007A5r 3  49 1D        doEor:	eor #$1d
0007A7r 3  85 rr        noEor:	sta seed
0007A9r 3  60           	rts
0007AAr 3               
0007AAr 3  A5 rr        	lda seed		; get last random number.
0007ACr 3  0A           	asl a
0007ADr 3  0A           	asl a
0007AEr 3  18           	clc
0007AFr 3  65 rr        	adc seed
0007B1r 3  18           	clc
0007B2r 3  69 45        	adc #$45
0007B4r 3  85 rr        	sta seed		; store new seed.
0007B6r 3  85 rr        	sta varrnd		; return number in variable.
0007B8r 3  60           	rts
0007B9r 3               
0007B9r 3               ;--------------------------------------------------------
0007B9r 3               ; Keys
0007B9r 3               ;
0007B9r 3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0007B9r 3               ;             ||||||||
0007B9r 3               ;             |||||||+> Right    KEY 0  - X
0007B9r 3               ;             ||||||+-> Left     KEY 1  - Z
0007B9r 3               ;             |||||+--> Down     KEY 2  - .
0007B9r 3               ;             ||||+---> Up       KEY 3  - ;
0007B9r 3               ;             |||+----> Fire1    KEY 4  - SPC
0007B9r 3               ;             ||+-----> Fire2    KEY 5  - Q
0007B9r 3               ;             |+------> Fire3    KEY 6  - P
0007B9r 3               ;             +-------> Not used
0007B9r 3               ;
0007B9r 3               ;                       Option1  KEY 7  - 1
0007B9r 3               ;                       Option2  KEY 8  - 2
0007B9r 3               ;                       Option3  KEY 9  - 3
0007B9r 3               ;                       Option4  KEY 10 - 4
0007B9r 3               ;--------------------------------------------------------
0007B9r 3               
0007B9r 3               ;              X   Z   .   ;  SPC  Q   P
0007B9r 3               ;keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
0007B9r 3               ;        .byte $30,$31,$11,$12                   ; menu options.;
0007B9r 3               ;
0007B9r 3               ;jkeys:  .byte $36,$37,$68,$48,$62,$10,$37       ; Keys defined by game designer.
0007B9r 3               ;        .byte $30,$31,$11,$12                   ; menu options.
0007B9r 3               
0007B9r 3               ;-------------------------------------------------------
0007B9r 3               ; Joystick and keyboard reading routines.
0007B9r 3               ;
0007B9r 3               ; contrl = 0, Keyboard
0007B9r 3               ;          1, JoyKeyb
0007B9r 3               ;          2, JoyMMC
0007B9r 3               ;-------------------------------------------------------
0007B9r 3               
0007B9r 3               joykey:
0007B9r 3  A5 rr        	lda contrl 		; control flag.
0007BBr 3  C9 01        	cmp #1
0007BDr 3  D0 03        	bne :+
0007BFr 3  4C rr rr     	jmp joyjoy 		; read keyboard joystick
0007C2r 3               :
0007C2r 3  C9 02        	cmp #2
0007C4r 3  D0 03        	bne :+
0007C6r 3  4C rr rr     	jmp joysin 		; read MMC joystick.
0007C9r 3               :
0007C9r 3               ; Keyboard controls.
0007C9r 3               
0007C9r 3  A9 00        	lda #0		 	; zero reading.
0007CBr 3  85 rr        	sta z80_e
0007CDr 3               
0007CDr 3  A0 06        	ldy #6	 		; address of last key.
0007CFr 3               joyke0:
0007CFr 3  B9 rr rr     	lda keys,y 		; get key from table.
0007D2r 3  20 rr rr     	jsr ktest		; being pressed?
0007D5r 3  26 rr        	rol z80_e 		; rotate into reading.
0007D7r 3               
0007D7r 3  88           	dey		 	; next key.
0007D8r 3  10 F5        	bpl joyke0 		; repeat for all keys.
0007DAr 3  4C rr rr     	jmp joyjo1 		; store the value.
0007DDr 3               
0007DDr 3               ; Keyboard joystick controls.
0007DDr 3               
0007DDr 3               joyjoy:
0007DDr 3  A9 00        	lda #0		 	; zero reading.
0007DFr 3  85 rr        	sta z80_e
0007E1r 3               
0007E1r 3  A0 06        	ldy #6	 		; address of last key.
0007E3r 3               joyjo3:
0007E3r 3  B9 rr rr     	lda jkeys,y 		; get key from table.
0007E6r 3  20 rr rr     	jsr ktest		; being pressed?
0007E9r 3  26 rr        	rol z80_e 		; rotate into reading.
0007EBr 3               
0007EBr 3  88           	dey		 	; next key.
0007ECr 3  10 F5        	bpl joyjo3 		; repeat for all keys.
0007EEr 3               joyjo1:
0007EEr 3  A5 rr        	lda z80_e 		; copy e register to accumulator.
0007F0r 3               joyjo2:
0007F0r 3  85 rr        	sta joyval		; remember value.
0007F2r 3  60           	rts
0007F3r 3               
0007F3r 3               ;---------------------------------------------------------------
0007F3r 3               ; Display message.
0007F3r 3               ;
0007F3r 3               ; Input:
0007F3r 3               ;  A = message number
0007F3r 3               ;---------------------------------------------------------------
0007F3r 3               
0007F3r 3               dmsg:
0007F3r 3  AA           	tax
0007F4r 3  A9 rr        	lda #<msgdat		; pointer to messages.
0007F6r 3  85 rr        	sta z80_l
0007F8r 3  A9 rr        	lda #>msgdat
0007FAr 3  85 rr        	sta z80_h
0007FCr 3  20 rr rr     	jsr getwrd		; get message number.
0007FFr 3               dmsg3:
0007FFr 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000802r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000805r 3  A5 rr        	lda prtmod		; print mode.
000807r 3  D0 47        	bne bmsg1		; no, double-height text.
000809r 3               dmsg0:
000809r 3  A5 rr        	lda z80_h		; store string pointer.
00080Br 3  48           	pha
00080Cr 3  A5 rr        	lda z80_l
00080Er 3  48           	pha
00080Fr 3               
00080Fr 3  A0 00        	ldy #0
000811r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000813r 3  29 7F        	and #127		; remove any end marker.
000815r 3  C9 0D        	cmp #ASCII_NEWLINE
000817r 3  F0 24        	beq dmsg1
000819r 3  20 rr rr     	jsr pchar		; display character.
00081Cr 3  20 rr rr     	jsr nexpos 		; display position.
00081Fr 3  D0 03        	bne dmsg2		; not on a new line.
000821r 3  20 rr rr     	jsr nexlin		; next line down.
000824r 3               dmsg2:
000824r 3  68           	pla			; retrieve string pointer
000825r 3  85 rr        	sta z80_l
000827r 3  68           	pla
000828r 3  85 rr        	sta z80_h
00082Ar 3               
00082Ar 3  A0 00        	ldy #0
00082Cr 3  B1 rr        	lda (z80_hl),y		; fetch last character.
00082Er 3  0A           	asl a  			; was it the end?
00082Fr 3  90 03        	bcc :+
000831r 3  4C rr rr     	jmp dscor2		; yes, job done.
000834r 3               :
000834r 3  E6 rr        	inc z80_l		; next character to display.
000836r 3  D0 02        	bne :+
000838r 3  E6 rr        	inc z80_h
00083Ar 3               :
00083Ar 3  4C rr rr     	jmp dmsg0
00083Dr 3               dmsg1:
00083Dr 3  E6 rr        	inc dispy
00083Fr 3  A5 rr        	lda dispy
000841r 3  C9 18        	cmp #24
000843r 3  90 04        	bcc dmsg4
000845r 3  A9 00        	lda #0
000847r 3  85 rr        	sta dispy
000849r 3               dmsg4:
000849r 3  A9 00        	lda #0
00084Br 3  85 rr        	sta dispx
00084Dr 3  4C rr rr     	jmp dmsg2
000850r 3               
000850r 3               
000850r 3               ;----------------------------------------------------------
000850r 3               ; Display message in big text.
000850r 3               ;
000850r 3               ; Input:
000850r 3               ;  HL = string pointer
000850r 3               ;----------------------------------------------------------
000850r 3               
000850r 3               bmsg1:
000850r 3  A0 00        	ldy #0
000852r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000854r 3  29 7F        	and #127		; only want 7 bits.
000856r 3  C9 0D        	cmp #ASCII_NEWLINE
000858r 3  F0 13        	beq bmsg2
00085Ar 3  20 rr rr     	jsr bchar 		; display big char.
00085Dr 3               bmsg3:
00085Dr 3  A0 00        	ldy #0
00085Fr 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000861r 3  48           	pha
000862r 3  E6 rr        	inc z80_l 		; next character in list.
000864r 3  D0 02        	bne :+
000866r 3  E6 rr        	inc z80_h
000868r 3               :
000868r 3  68           	pla
000869r 3  0A           	asl a  			; was terminator flag set?
00086Ar 3  90 E4        	bcc bmsg1		; no, keep going.
00086Cr 3               
00086Cr 3  60           	rts
00086Dr 3               bmsg2:
00086Dr 3  A9 00        	lda #0
00086Fr 3  85 rr        	sta dispx
000871r 3  E6 rr        	inc dispy
000873r 3  E6 rr        	inc dispy
000875r 3  A5 rr        	lda dispy
000877r 3  C9 17        	cmp #23
000879r 3  90 E2        	bcc bmsg3
00087Br 3  A9 00        	lda #0
00087Dr 3  85 rr        	sta dispy
00087Fr 3  4C rr rr     	jmp bmsg3
000882r 3               
000882r 3               ;----------------------------------------------------------
000882r 3               ; Big character display.
000882r 3               ;
000882r 3               ; Input:
000882r 3               ;  A = character
000882r 3               ;----------------------------------------------------------
000882r 3               
000882r 3               bchar:
000882r 3  85 rr        	sta z80_e		; save char in lb
000884r 3  A9 00        	lda #0
000886r 3  85 rr        	sta z80_d		; reset hb
000888r 3               
000888r 3  06 rr        	asl z80_e 		; multiply char by 8.
00088Ar 3  26 rr        	rol z80_d
00088Cr 3  06 rr        	asl z80_e
00088Er 3  26 rr        	rol z80_d
000890r 3  06 rr        	asl z80_e
000892r 3  26 rr        	rol z80_d		; de = a*8
000894r 3               
000894r 3  18           	clc			; de = #<(FONT-256) + a*8
000895r 3  A5 rr        	lda z80_e
000897r 3  69 rr        	adc #<(FONT-256) 		; address of font.
000899r 3  85 rr        	sta z80_e
00089Br 3  A5 rr        	lda z80_d
00089Dr 3  69 rr        	adc #>(FONT-256)
00089Fr 3  85 rr        	sta z80_d
0008A1r 3               
0008A1r 3  20 rr rr     	jsr gprad 		; get screen address.
0008A4r 3               
0008A4r 3  A2 00        	ldx #0			; height of character in font.
0008A6r 3               bchar0:
0008A6r 3  A0 00        	ldy #0
0008A8r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
0008AAr 3               
0008AAr 3               .if iflag
0008AAr 3               	eor #$ff
0008AAr 3               .endif
0008AAr 3               
0008AAr 3  91 rr        	sta (scraddr),y
0008ACr 3  48           	pha
0008ADr 3  20 rr rr     	jsr nline 		; next line down.
0008B0r 3  68           	pla
0008B1r 3  91 rr        	sta (scraddr),y
0008B3r 3  20 rr rr     	jsr nline 		; next line down.
0008B6r 3               
0008B6r 3  18           	clc
0008B7r 3  E6 rr        	inc z80_e 		; next line of font.
0008B9r 3  D0 02        	bne :+
0008BBr 3  E6 rr        	inc z80_d
0008BDr 3               :
0008BDr 3  E8           	inx
0008BEr 3  E0 08        	cpx #8
0008C0r 3  D0 E4        	bne bchar0
0008C2r 3               
0008C2r 3  20 rr rr     	jsr nexpos		; display position.
0008C5r 3  D0 05        	bne bchar2 		; not on a new line.
0008C7r 3               bchar3:
0008C7r 3  E6 rr        	inc dispy
0008C9r 3  20 rr rr     	jsr nexlin 		; next line check.
0008CCr 3               bchar2:
0008CCr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
0008CFr 3               
0008CFr 3               
0008CFr 3               ;-------------------------------------------------
0008CFr 3               ; Display a character.
0008CFr 3               ;
0008CFr 3               ; Input:
0008CFr 3               ;  A = character
0008CFr 3               ;-------------------------------------------------
0008CFr 3               
0008CFr 3               achar:
0008CFr 3  85 rr        	sta z80_b 		; copy to b.
0008D1r 3  20 rr rr     	jsr preprt 		; get ready to print.
0008D4r 3  A5 rr        	lda z80_b		; character in accumulator.
0008D6r 3  A6 rr        	ldx prtmod 		; print mode.
0008D8r 3  F0 03        	beq :+
0008DAr 3  4C rr rr     	jmp bchar 		; no, double-height text.
0008DDr 3               :
0008DDr 3  20 rr rr     	jsr pchar 		; display character.
0008E0r 3  20 rr rr     	jsr nexpos 		; display position.
0008E3r 3  F0 E2        	beq bchar3		; next line down.
0008E5r 3  4C rr rr     	jmp bchar2 		; tidy up.
0008E8r 3               
0008E8r 3               
0008E8r 3               ;-------------------------------------------------
0008E8r 3               ; Get next print column position.
0008E8r 3               ;-------------------------------------------------
0008E8r 3               
0008E8r 3               nexpos:
0008E8r 3  E6 rr        	inc dispx		; move along one position.
0008EAr 3  A5 rr        	lda dispx 		; get coordinate.
0008ECr 3               ;	and #31
0008ECr 3  60           	rts 			; return with status in zero flag.
0008EDr 3               
0008EDr 3               ;-------------------------------------------------
0008EDr 3               ; Get next print line position.
0008EDr 3               ;-------------------------------------------------
0008EDr 3               
0008EDr 3               nexlin:
0008EDr 3  E6 rr        	inc dispy 		; newline.
0008EFr 3  A5 rr        	lda dispy		; vertical position.
0008F1r 3  C9 18        	cmp #24			; past screen edge?
0008F3r 3  B0 01        	bcs :+
0008F5r 3  60           	rts			; no, still okay.
0008F6r 3               :
0008F6r 3  A9 00        	lda #0			; restart at top.
0008F8r 3  85 rr        	sta dispy
0008FAr 3  60           	rts
0008FBr 3               
0008FBr 3               ;--------------------------------------------------------
0008FBr 3               ; Pre-print preliminaries.
0008FBr 3               ;--------------------------------------------------------
0008FBr 3               
0008FBr 3               preprt:
0008FBr 3  A9 rr        	lda #<(FONT-256)		; font pointer.
0008FDr 3  8D rr rr     	sta grbase		; set up graphics base.
000900r 3  A9 rr        	lda #>(FONT-256)
000902r 3  8D rr rr     	sta grbase+1
000905r 3               prescr:
000905r 3  A5 rr        	lda charx 		; display coordinates.
000907r 3  85 rr        	sta dispx		; set up general coordinates.
000909r 3  A5 rr        	lda chary
00090Br 3  85 rr        	sta dispy
00090Dr 3  60           	rts
00090Er 3               
00090Er 3               ;--------------------------------------------------------------
00090Er 3               ; Get messagenr x in hl
00090Er 3               ;
00090Er 3               ; Input:
00090Er 3               ;  HL = pointer to message list
00090Er 3               ;  X  = message number.
00090Er 3               ;--------------------------------------------------------------
00090Er 3               
00090Er 3               getwrd:
00090Er 3  E0 00        	cpx #0
000910r 3  D0 01        	bne:+ 			; first word in list?
000912r 3  60           	rts 			; yep, don't search.
000913r 3               :
000913r 3  A0 00        	ldy #0
000915r 3               getwd0:
000915r 3  B1 rr        	lda (z80_hl),y
000917r 3  48           	pha
000918r 3  E6 rr        	inc z80_l
00091Ar 3  D0 02        	bne :+
00091Cr 3  E6 rr        	inc z80_h
00091Er 3               :
00091Er 3  68           	pla
00091Fr 3  C9 80        	cmp #128		; found end?
000921r 3  30 F2        	bmi getwd0		; no, carry on.
000923r 3  CA           	dex			; until we have right number.
000924r 3  D0 EF        	bne getwd0
000926r 3  60           	rts
000927r 3               
000927r 3               ;-----------------------------------------------------------
000927r 3               ; Bubble sort.
000927r 3               ;-----------------------------------------------------------
000927r 3               
000927r 3               bsort:
000927r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000929r 3  85 rr        	sta qscnt
00092Br 3               
00092Br 3  A9 rr        	lda #<sprtab 		; sprite table.
00092Dr 3  85 rr        	sta z80_x
00092Fr 3  A9 rr        	lda #>sprtab
000931r 3  85 rr        	sta z80_i
000933r 3               bsort0:
000933r 3  A0 00        	ldy #0
000935r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000937r 3  C9 FF        	cmp #255 		; is it switched off?
000939r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
00093Br 3               
00093Br 3  A0 11        	ldy #TABSIZ
00093Dr 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
00093Fr 3  C9 FF        	cmp #255 		; is it enabled?
000941r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000943r 3               
000943r 3  A0 14        	ldy #TABSIZ+3
000945r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000947r 3  A0 03        	ldy #3
000949r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
00094Br 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
00094Dr 3               bsort2:
00094Dr 3  18           	clc
00094Er 3  A5 rr        	lda z80_x
000950r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000952r 3  85 rr        	sta z80_x
000954r 3  90 02        	bcc :+
000956r 3  E6 rr        	inc z80_i
000958r 3               :
000958r 3  C6 rr        	dec qscnt
00095Ar 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
00095Cr 3  60           	rts
00095Dr 3               
00095Dr 3               bsort1:
00095Dr 3  A0 11        	ldy #TABSIZ
00095Fr 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000961r 3  C9 FF        	cmp #255		; is it enabled?
000963r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000965r 3  20 rr rr     	jsr swspr		; swap positions.
000968r 3  4C rr rr     	jmp bsort2
00096Br 3               swemp:
00096Br 3  A0 11        	ldy #TABSIZ
00096Dr 3  B1 rr        	lda (z80_ix),y		; next table entry.
00096Fr 3  C9 FF        	cmp #255		; is that one on?
000971r 3  F0 DA        	beq bsort2		; no, nothing to swap.
000973r 3  20 rr rr     	jsr swspr		; swap positions.
000976r 3  4C rr rr     	jmp bsort2
000979r 3               
000979r 3               ; Swap sprites.
000979r 3               
000979r 3               swspr:
000979r 3  A5 rr        	lda z80_x		; table address
00097Br 3  85 rr        	sta z80_e		; copy to de pair.
00097Dr 3  85 rr        	sta z80_l		; copy to hl pair.
00097Fr 3  A5 rr        	lda z80_i
000981r 3  85 rr        	sta z80_h
000983r 3  85 rr        	sta z80_d
000985r 3               
000985r 3  18           	clc
000986r 3  A5 rr        	lda z80_l
000988r 3  69 11        	adc #TABSIZ		; distance to second entry.
00098Ar 3  85 rr        	sta z80_l
00098Cr 3  90 02        	bcc :+
00098Er 3  E6 rr        	inc z80_h
000990r 3               :
000990r 3  A9 11        	lda #TABSIZ		; bytes to swap.
000992r 3  85 rr        	sta z80_b
000994r 3  A0 00        	ldy #0
000996r 3               swspr0:
000996r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000998r 3  48           	pha
000999r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
00099Br 3  91 rr        	sta (z80_hl),y 		; copy to second.
00099Dr 3  68           	pla
00099Er 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
0009A0r 3               
0009A0r 3  E6 rr        	inc z80_e 		; next byte.
0009A2r 3  D0 02        	bne :+
0009A4r 3  E6 rr        	inc z80_d
0009A6r 3               :
0009A6r 3  E6 rr        	inc z80_l 		; next byte.
0009A8r 3  D0 02        	bne :+
0009AAr 3  E6 rr        	inc z80_h
0009ACr 3               :
0009ACr 3  C6 rr        	dec z80_b
0009AEr 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
0009B0r 3  60           	rts
0009B1r 3               
0009B1r 3               ;----------------------------------------------------
0009B1r 3               ; Process sprites.
0009B1r 3               ;----------------------------------------------------
0009B1r 3               
0009B1r 3               pspr:
0009B1r 3  A9 0C        	lda #NUMSPR		; sprites to process.
0009B3r 3  85 rr        	sta sprptr
0009B5r 3               
0009B5r 3  A9 rr        	lda #<sprtab 		; sprite table.
0009B7r 3  85 rr        	sta z80_x
0009B9r 3  A9 rr        	lda #>sprtab
0009BBr 3  85 rr        	sta z80_i
0009BDr 3               pspr1:
0009BDr 3  A0 00        	ldy #0
0009BFr 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
0009C1r 3  C9 09        	cmp #9 			; within range of sprite types?
0009C3r 3  B0 03        	bcs :+
0009C5r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
0009C8r 3               :
0009C8r 3  18           	clc
0009C9r 3  A5 rr        	lda z80_x
0009CBr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0009CDr 3  85 rr        	sta z80_x
0009CFr 3  90 02        	bcc :+
0009D1r 3  E6 rr        	inc z80_i		; next sprite.
0009D3r 3               :
0009D3r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0009D5r 3  D0 E6        	bne pspr1
0009D7r 3  60           	rts
0009D8r 3               
0009D8r 3               pspr2:
0009D8r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
0009DAr 3  85 rr        	sta ogptr
0009DCr 3  A5 rr        	lda z80_i
0009DEr 3  85 rr        	sta ogptr+1
0009E0r 3  20 rr rr     	jsr pspr3		; do the routine.
0009E3r 3               rtorg:
0009E3r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0009E5r 3  85 rr        	sta z80_x
0009E7r 3  A5 rr        	lda ogptr+1
0009E9r 3  85 rr        	sta z80_i
0009EBr 3               rtorg0:
0009EBr 3  60           	rts
0009ECr 3               
0009ECr 3               pspr3:
0009ECr 3  A9 rr        	lda #<evtyp0		; sprite type events list.
0009EEr 3  85 rr        	sta z80_l
0009F0r 3  A9 rr        	lda #>evtyp0
0009F2r 3  85 rr        	sta z80_h
0009F4r 3               pspr4:
0009F4r 3  B1 rr        	lda (z80_ix),y
0009F6r 3  0A           	asl a			; double accumulator.
0009F7r 3  18           	clc
0009F8r 3  65 rr        	adc z80_l
0009FAr 3  85 rr        	sta z80_l
0009FCr 3  90 02        	bcc :+
0009FEr 3  E6 rr        	inc z80_h
000A00r 3               :
000A00r 3  B1 rr        	lda (z80_hl),y
000A02r 3  85 rr        	sta z80_e 		; copy to de.
000A04r 3  48           	pha
000A05r 3               
000A05r 3  E6 rr        	inc z80_l 		; next byte of address.
000A07r 3  D0 02        	bne :+
000A09r 3  E6 rr        	inc z80_h
000A0Br 3               :
000A0Br 3  B1 rr        	lda (z80_hl),y 		; address high.
000A0Dr 3  85 rr        	sta z80_d
000A0Fr 3               
000A0Fr 3  48           	pha	 		; swap address into hl.
000A10r 3  A5 rr        	lda z80_h
000A12r 3  85 rr        	sta z80_d
000A14r 3  68           	pla
000A15r 3  85 rr        	sta z80_h
000A17r 3  68           	pla
000A18r 3  85 rr        	sta z80_l
000A1Ar 3  A5 rr        	lda z80_l
000A1Cr 3  85 rr        	sta z80_e
000A1Er 3               
000A1Er 3  6C rr rr     	jmp (z80_hl) 		; go there.
000A21r 3               
000A21r 3               ; Address of each sprite type's routine.
000A21r 3               
000A21r 3  rr rr        evtyp0:	.word evnt00
000A23r 3  rr rr        evtyp1:	.word evnt01
000A25r 3  rr rr        evtyp2:	.word evnt02
000A27r 3  rr rr        evtyp3:	.word evnt03
000A29r 3  rr rr        evtyp4:	.word evnt04
000A2Br 3  rr rr        evtyp5:	.word evnt05
000A2Dr 3  rr rr        evtyp6:	.word evnt06
000A2Fr 3  rr rr        evtyp7:	.word evnt07
000A31r 3  rr rr        evtyp8:	.word evnt08
000A33r 3               
000A33r 3               ;--------------------------------------------------------------
000A33r 3               ; Display sprites.
000A33r 3               ;
000A33r 3               ; Input:
000A33r 3               ;  IX = sprite table
000A33r 3               ;--------------------------------------------------------------
000A33r 3               
000A33r 3               dspr:
000A33r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000A35r 3  85 rr        	sta sprcnt
000A37r 3               
000A37r 3               dspr0:
000A37r 3  A0 00        	ldy #var_Type
000A39r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000A3Br 3  C9 FF        	cmp #255 		; is it enabled?
000A3Dr 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000A3Fr 3               dspr5:
000A3Fr 3  A0 05        	ldy #var_newType
000A41r 3  B1 rr        	lda (z80_ix),y 		; new type.
000A43r 3  C9 FF        	cmp #255		; is it enabled?
000A45r 3  F0 03        	beq dspr2
000A47r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000A4Ar 3               dspr2:
000A4Ar 3  A0 05        	ldy #var_newType
000A4Cr 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000A4Er 3  A0 00        	ldy #var_Type
000A50r 3  91 rr        	sta (z80_ix),y
000A52r 3  A0 06        	ldy #var_newImage
000A54r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000A56r 3  A0 01        	ldy #var_Image
000A58r 3  91 rr        	sta (z80_ix),y
000A5Ar 3  A0 07        	ldy #var_newFrame
000A5Cr 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000A5Er 3  A0 02        	ldy #var_Frame
000A60r 3  91 rr        	sta (z80_ix),y
000A62r 3  A0 08        	ldy #var_newY
000A64r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000A66r 3  A0 03        	ldy #var_Y
000A68r 3  91 rr        	sta (z80_ix),y
000A6Ar 3  A0 09        	ldy #var_newX
000A6Cr 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000A6Er 3  A0 04        	ldy #var_X
000A70r 3  91 rr        	sta (z80_ix),y
000A72r 3               
000A72r 3  18           	clc
000A73r 3  A5 rr        	lda z80_x
000A75r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000A77r 3  85 rr        	sta z80_x
000A79r 3  A5 rr        	lda z80_i
000A7Br 3  69 00        	adc #0
000A7Dr 3  85 rr        	sta z80_i 		; next sprite.
000A7Fr 3  C6 rr        	dec sprcnt
000A81r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000A83r 3  60           	rts
000A84r 3               
000A84r 3               dspr1:
000A84r 3               	; _BEEB clipping code copied from CPC Engine
000A84r 3  A0 03        	ldy #var_Y
000A86r 3  B1 rr        	lda (z80_ix), y		; old x coord
000A88r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000A8Ar 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000A8Cr 3               
000A8Cr 3  A0 05        	ldy #var_newType
000A8Er 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000A90r 3  C9 FF        	cmp #255		; is this enabled?
000A92r 3  D0 06        	bne dspr4 		; yes, display both.
000A94r 3               
000A94r 3               dspr6:
000A94r 3  20 rr rr     	jsr sspria 		; show single sprite.
000A97r 3  4C rr rr     	jmp dspr2
000A9Ar 3               
000A9Ar 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000A9Ar 3               
000A9Ar 3               dspr4:
000A9Ar 3               	; _BEEB clipping code copied from CPC Engine
000A9Ar 3  A0 08        	ldy #var_newY
000A9Cr 3  B1 rr        	lda (z80_ix), y		; old x coord
000A9Er 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AA0r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000AA2r 3               
000AA2r 3  A0 04        	ldy #var_X
000AA4r 3  B1 rr        	lda (z80_ix),y		; old x.
000AA6r 3  A0 09        	ldy #var_newX
000AA8r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000AAAr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000AACr 3               
000AACr 3  A0 03        	ldy #var_Y
000AAEr 3  B1 rr        	lda (z80_ix),y		; old y.
000AB0r 3  A0 08        	ldy #var_newY
000AB2r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000AB4r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000AB6r 3               
000AB6r 3  A0 02        	ldy #var_Frame
000AB8r 3  B1 rr        	lda (z80_ix),y 		; old frame.
000ABAr 3  A0 07        	ldy #var_newFrame
000ABCr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000ABEr 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000AC0r 3               
000AC0r 3  A0 01        	ldy #var_Image
000AC2r 3  B1 rr        	lda (z80_ix),y 		; old image.
000AC4r 3  A0 06        	ldy #var_newImage
000AC6r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000AC8r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000ACAr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000ACDr 3               dspr7:
000ACDr 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000AD0r 3  4C rr rr     	jmp dspr2
000AD3r 3               dspr3:
000AD3r 3               	; _BEEB clipping code copied from CPC Engine
000AD3r 3  A0 08        	ldy #var_newY
000AD5r 3  B1 rr        	lda (z80_ix), y		; old x coord
000AD7r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AD9r 3  90 03        	bcc :+			; no, continue
000ADBr 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000ADEr 3               :
000ADEr 3  20 rr rr     	jsr ssprib 		; show single sprite.
000AE1r 3  4C rr rr     	jmp dspr2
000AE4r 3               
000AE4r 3               ;-----------------------------------------
000AE4r 3               ; Get sprite address calculations.
000AE4r 3               ; gspran = new sprite, gsprad = old sprite.
000AE4r 3               ;
000AE4r 3               ; Input:
000AE4r 3               ;  IX = sprite address
000AE4r 3               ;-----------------------------------------
000AE4r 3               
000AE4r 3               gspran:
000AE4r 3  A0 08        	ldy #var_newY
000AE6r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000AE8r 3  85 rr        	sta dispy
000AEAr 3  A0 09        	ldy #var_newX
000AECr 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000AEEr 3  85 rr        	sta dispx
000AF0r 3  A0 06        	ldy #var_newImage
000AF2r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000AF4r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000AF7r 3               
000AF7r 3  A0 00        	ldy #0
000AF9r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000AFBr 3  A0 07        	ldy #var_newFrame
000AFDr 3  18           	clc
000AFEr 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000B00r 3  4C rr rr     	jmp gspra0
000B03r 3               
000B03r 3               ;-----------------------------------------
000B03r 3               ; Calculate old sprite address
000B03r 3               ;
000B03r 3               ; Input:
000B03r 3               ;  IX = sprite address
000B03r 3               ;
000B03r 3               ; Output:
000B03r 3               ;  B  = right byte mask
000B03r 3               ;  C  = left byte mask
000B03r 3               ;  DE = spriteframe address
000B03r 3               ;  scraddr = screenaddress(dispx,dispy)
000B03r 3               ;-----------------------------------------
000B03r 3               
000B03r 3               gsprad:
000B03r 3  A0 03        	ldy #var_Y
000B05r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B07r 3  85 rr        	sta dispy
000B09r 3  A0 04        	ldy #var_X
000B0Br 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B0Dr 3  85 rr        	sta dispx
000B0Fr 3  A0 01        	ldy #var_Image
000B11r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000B13r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000B16r 3               
000B16r 3  A0 00        	ldy #0
000B18r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B1Ar 3  A0 02        	ldy #var_Frame
000B1Cr 3  18           	clc
000B1Dr 3  71 rr        	adc (z80_ix),y 		; add frame number.
000B1Fr 3               
000B1Fr 3               gspra0:
000B1Fr 3               .if rflag
000B1Fr 3               	sta z80_e		; multiply by 32.
000B1Fr 3               	lda #0
000B1Fr 3               	sta z80_d
000B1Fr 3               
000B1Fr 3               	asl z80_e
000B1Fr 3               	rol z80_d
000B1Fr 3               	asl z80_e
000B1Fr 3               	rol z80_d
000B1Fr 3               	asl z80_e
000B1Fr 3               	rol z80_d
000B1Fr 3               	asl z80_e
000B1Fr 3               	rol z80_d
000B1Fr 3               .if bflag
000B1Fr 3               	lda z80_e		; multiply by 48
000B1Fr 3               	sta tmp1
000B1Fr 3               	lda z80_d
000B1Fr 3               	sta tmp2
000B1Fr 3               .endif
000B1Fr 3               	asl z80_e
000B1Fr 3               	rol z80_d
000B1Fr 3               .if bflag
000B1Fr 3               	clc
000B1Fr 3               	lda z80_e
000B1Fr 3               	adc tmp1
000B1Fr 3               	sta z80_e
000B1Fr 3               	lda z80_d
000B1Fr 3               	adc tmp2
000B1Fr 3               	sta z80_d
000B1Fr 3               .endif
000B1Fr 3               .else
000B1Fr 3  4A           	lsr a	  		; multiply by 128.
000B20r 3  85 rr        	sta z80_d 		; store in d.
000B22r 3  85 rr        	sta tmp1
000B24r 3  A9 00        	lda #0
000B26r 3  6A           	ror a
000B27r 3  85 rr        	sta z80_e 		; got low byte.
000B29r 3  85 rr        	sta tmp2
000B2Br 3               .if bflag
000B2Br 3               	lsr tmp1		; multiply by 192
000B2Br 3               	ror tmp2
000B2Br 3               	clc
000B2Br 3               	lda tmp2
000B2Br 3               	adc z80_e
000B2Br 3               	sta z80_e
000B2Br 3               	lda tmp1
000B2Br 3               	adc z80_d
000B2Br 3               	sta z80_d
000B2Br 3               .endif
000B2Br 3               .endif
000B2Br 3  18           	clc 			; address of play sprites.
000B2Cr 3  A5 rr        	lda z80_e
000B2Er 3  69 rr        	adc #<sprgfx
000B30r 3  85 rr        	sta z80_e
000B32r 3  A5 rr        	lda z80_d
000B34r 3  69 rr        	adc #>sprgfx
000B36r 3  85 rr        	sta z80_d
000B38r 3               
000B38r 3  A5 rr        	lda dispx 		; y coordinate.
000B3Ar 3  29 06        	and #6 			; position within byte boundary.
000B3Cr 3  AA           	tax	 		; low byte of table displacement.
000B3Dr 3               .if rflag
000B3Dr 3               	stx sprshft
000B3Dr 3               .else
000B3Dr 3  0A           	asl a	  		; multiply by 32.
000B3Er 3  0A           	asl a  			; already a multiple
000B3Fr 3  0A           	asl a  			; of 2, so just 4
000B40r 3               .if bflag
000B40r 3               	sta tmp1
000B40r 3               	asl a  			; shifts needed.
000B40r 3               	clc
000B40r 3               	adc tmp1
000B40r 3               .else
000B40r 3  0A           	asl a  			; shifts needed.
000B41r 3               .endif
000B41r 3  18           	clc 			; add to sprite address.
000B42r 3  65 rr        	adc z80_e
000B44r 3  85 rr        	sta z80_e
000B46r 3  90 02        	bcc :+
000B48r 3  E6 rr        	inc z80_d
000B4Ar 3               :
000B4Ar 3               .endif
000B4Ar 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000B4Dr 3  85 rr        	sta z80_c 		; left mask.
000B4Fr 3  BD rr rr     	lda spmask+1,x
000B52r 3  85 rr        	sta z80_b 		; right mask.
000B54r 3               ; Drop into screen address routine.
000B54r 3  4C rr rr     	jmp scadd
000B57r 3               
000B57r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000B5Br 3  0F F0 03 FC  
000B5Fr 3               
000B5Fr 3               
000B5Fr 3               ;-----------------------------------------------------------
000B5Fr 3               ; Animates a sprite.
000B5Fr 3               ;
000B5Fr 3               ; Input:
000B5Fr 3               ;  IX = sprite address
000B5Fr 3               ;  HL = last sprite address
000B5Fr 3               ;-----------------------------------------------------------
000B5Fr 3               
000B5Fr 3               animsp:
000B5Fr 3  25 rr        	and frmno
000B61r 3  F0 01        	beq :+
000B63r 3  60           	rts
000B64r 3               :
000B64r 3  A0 06        	ldy #var_newImage
000B66r 3  B1 rr        	lda (z80_ix),y		; sprite image
000B68r 3  20 rr rr     	jsr gfrm		; get frame data.
000B6Br 3               
000B6Br 3  E6 rr        	inc z80_l		; point to frames.
000B6Dr 3  D0 02        	bne :+
000B6Fr 3  E6 rr        	inc z80_h
000B71r 3               :
000B71r 3  A0 07        	ldy #var_newFrame
000B73r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000B75r 3  18           	clc
000B76r 3  69 01        	adc #1			; next one along.
000B78r 3  A0 00        	ldy #0
000B7Ar 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000B7Cr 3  90 02        	bcc anims0		; no, not yet.
000B7Er 3  A9 00        	lda #0			; start at first frame.
000B80r 3               anims0:
000B80r 3  A0 07        	ldy #var_newFrame
000B82r 3  91 rr        	sta (z80_ix),y		; new frame.
000B84r 3  60           	rts
000B85r 3               
000B85r 3               ;--------------------------------------------------------------
000B85r 3               ; Animate back
000B85r 3               ;
000B85r 3               ; Input:
000B85r 3               ;  IX = sprite address
000B85r 3               ;  HL = last sprite address
000B85r 3               ;--------------------------------------------------------------
000B85r 3               
000B85r 3               animbk:
000B85r 3  25 rr        	and frmno
000B87r 3  F0 01        	beq :+
000B89r 3  60           	rts
000B8Ar 3               :
000B8Ar 3  A0 06        	ldy #var_newImage
000B8Cr 3  B1 rr        	lda (z80_ix),y		; sprite image.
000B8Er 3  20 rr rr     	jsr gfrm		; get frame data.
000B91r 3               
000B91r 3  E6 rr        	inc z80_l 		; point to frames.
000B93r 3  D0 02        	bne :+
000B95r 3  E6 rr        	inc z80_h
000B97r 3               :
000B97r 3  A0 07        	ldy #var_newFrame
000B99r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000B9Br 3  F0 03        	beq :+
000B9Dr 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000BA0r 3               :
000BA0r 3  A0 00        	ldy #0
000BA2r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000BA4r 3               rtanb0:
000BA4r 3  38           	sec
000BA5r 3  E9 01        	sbc #1			; next one along.
000BA7r 3  4C rr rr     	jmp anims0		; set new frame.
000BAAr 3               
000BAAr 3               ;--------------------------------------------------------------
000BAAr 3               ; Check for collision with other sprite, strict enforcement.
000BAAr 3               ;
000BAAr 3               ; Input:
000BAAr 3               ;  b		= sprite to test for
000BAAr 3               ;  ix		= current sprite pointer
000BAAr 3               ;
000BAAr 3               ; global:	b
000BAAr 3               ; local:	x,y,hl,de,skptr
000BAAr 3               ; calls:	-
000BAAr 3               ;--------------------------------------------------------------
000BAAr 3               
000BAAr 3               sktyp:
000BAAr 3  A9 rr        	lda #<sprtab				; sprite table.
000BACr 3  85 rr        	sta z80_l
000BAEr 3  A9 rr        	lda #>sprtab
000BB0r 3  85 rr        	sta z80_h
000BB2r 3               numsp2:
000BB2r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000BB4r 3  85 rr        	sta sktptr
000BB6r 3               sktyp0:
000BB6r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000BB8r 3  85 rr        	sta skptr
000BBAr 3  A5 rr        	lda z80_h
000BBCr 3  85 rr        	sta skptr+1
000BBEr 3               
000BBEr 3  A0 00        	ldy #0
000BC0r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000BC2r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000BC4r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000BC6r 3               sktyp1:
000BC6r 3  18           	clc
000BC7r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000BC9r 3  69 11        	adc #TABSIZ				; size of each entry.
000BCBr 3  85 rr        	sta z80_l
000BCDr 3  A5 rr        	lda skptr+1
000BCFr 3  69 00        	adc #0
000BD1r 3  85 rr        	sta z80_h
000BD3r 3  C6 rr        	dec sktptr					; one less iteration.
000BD5r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000BD7r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000BD9r 3  85 rr        	sta z80_l
000BDBr 3  85 rr        	sta z80_h
000BDDr 3  85 rr        	sta skptr				; store pointer to sprite.
000BDFr 3  85 rr        	sta skptr+1
000BE1r 3               
000BE1r 3  18           	clc					; don't return with zero flag set.
000BE2r 3  60           	rts 					; didn't find one.
000BE3r 3               
000BE3r 3               coltyp:
000BE3r 3  A0 00        	ldy #0
000BE5r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000BE7r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000BE9r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000BEBr 3               colty0:
000BEBr 3  A0 09        	ldy #9					; distance to x position in table.
000BEDr 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000BEFr 3  85 rr        	sta z80_e
000BF1r 3  88           	dey
000BF2r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000BF4r 3  85 rr        	sta z80_d
000BF6r 3               
000BF6r 3               ; Drop into collision detection.
000BF6r 3               
000BF6r 3               colc16:
000BF6r 3  A0 09        	ldy #9
000BF8r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000BFAr 3  38           	sec					; subtract x.
000BFBr 3  E5 rr        	sbc z80_e
000BFDr 3  B0 05        	bcs  colc1a 				; result is positive.
000BFFr 3  49 FF        	eor #$ff				; make negative positive.
000C01r 3  18           	clc
000C02r 3  69 01        	adc #1
000C04r 3               colc1a:
000C04r 3  C9 10        	cmp #16 				; within x range?
000C06r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000C08r 3  85 rr        	sta z80_c				; store difference.
000C0Ar 3               
000C0Ar 3  A0 08        	ldy #8
000C0Cr 3  B1 rr        	lda (z80_ix),y				; y coord.
000C0Er 3  38           	sec
000C0Fr 3  E5 rr        	sbc z80_d				; subtract y.
000C11r 3  B0 05        	bcs colc1b				; result is positive.
000C13r 3  49 FF        	eor #$ff				; make negative positive.
000C15r 3  18           	clc
000C16r 3  69 01        	adc #1
000C18r 3               colc1b:
000C18r 3  C9 10        	cmp #16					; within y range?
000C1Ar 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000C1Cr 3  18           	clc					; add x difference.
000C1Dr 3  65 rr        	adc z80_c
000C1Fr 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000C21r 3  B0 02        	bcs :+
000C23r 3  38           	sec
000C24r 3  60           	rts 					; carry set if there's a collision.
000C25r 3               :
000C25r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000C28r 3               colty1:
000C28r 3  A5 rr        	lda z80_x  				; compare the two.
000C2Ar 3  C5 rr        	cmp z80_l
000C2Cr 3  D0 09        	bne end_col
000C2Er 3  A5 rr        	lda z80_i
000C30r 3  C5 rr        	cmp z80_h
000C32r 3  D0 03        	bne end_col
000C34r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000C37r 3               end_col:
000C37r 3  4C rr rr     	jmp colty0
000C3Ar 3               
000C3Ar 3               ;-----------------------------------------------------------
000C3Ar 3               ; Display number, left aligned
000C3Ar 3               ;
000C3Ar 3               ; Input:
000C3Ar 3               ;  a		= number
000C3Ar 3               ;
000C3Ar 3               ; global:	-
000C3Ar 3               ; local:	a,y,bc,hl,displ0
000C3Ar 3               ; calls:	num2ch,dmsg3
000C3Ar 3               ;-----------------------------------------------------------
000C3Ar 3               
000C3Ar 3               disply:
000C3Ar 3  85 rr        	sta z80_a
000C3Cr 3  A9 rr        	lda #<displ0				; display workspace.
000C3Er 3  85 rr        	sta z80_c
000C40r 3  A9 rr        	lda #>displ0
000C42r 3  85 rr        	sta z80_b
000C44r 3  A5 rr        	lda z80_a
000C46r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000C49r 3               displ1:
000C49r 3  C6 rr        	dec z80_c				; back one character.
000C4Br 3  D0 02        	bne :+
000C4Dr 3  C6 rr        	dec z80_b
000C4Fr 3               :
000C4Fr 3  A0 00        	ldy #0
000C51r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000C53r 3  09 80        	ora #128				; insert end marker.
000C55r 3  91 rr        	sta (z80_bc),y				; new value.
000C57r 3               
000C57r 3  A9 rr        	lda #<displ0				; display space.
000C59r 3  85 rr        	sta z80_l
000C5Br 3  A9 rr        	lda #>displ0
000C5Dr 3  85 rr        	sta z80_h
000C5Fr 3  4C rr rr     	jmp dmsg3				; display the string.
000C62r 3               
000C62r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000C66r 3               
000C66r 3               ;----------------------------------------------------------------
000C66r 3               ; Initialise screen.
000C66r 3               ;
000C66r 3               ; global:	roomtb,scno
000C66r 3               ; local:	-
000C66r 3               ; calls:	tstcs
000C66r 3               ;----------------------------------------------------------------
000C66r 3               
000C66r 3               initsc:
000C66r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000C69r 3  20 rr rr     	jsr tstsc 			; find displacement.
000C6Cr 3  C9 FF        	cmp #255 			; is it valid?
000C6Er 3  F0 02        	beq init_end 			; no, it's rubbish.
000C70r 3  85 rr        	sta scno			; store new room number.
000C72r 3               init_end:
000C72r 3  60           	rts
000C73r 3               
000C73r 3               ;----------------------------------------------------------------
000C73r 3               ; Test screen.
000C73r 3               ;
000C73r 3               ; global:	-
000C73r 3               ; local:	x
000C73r 3               ; calls:	-
000C73r 3               ;----------------------------------------------------------------
000C73r 3               
000C73r 3               tstsc:
000C73r 3  85 rr        	sta tmproom
000C75r 3  18           	clc
000C76r 3  69 03        	adc #MAPWID 			; add width in case we"re negative.
000C78r 3  AA           	tax 				; add displacement to map data.
000C79r 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000C7Cr 3  60           	rts
000C7Dr 3               
000C7Dr 3               ;--------------------------
000C7Dr 3               ; Screen left.
000C7Dr 3               ;--------------------------
000C7Dr 3               
000C7Dr 3               scrl:
000C7Dr 3  AD rr rr     	lda roomtb 			; present room table pointer.
000C80r 3  38           	sec
000C81r 3  E9 01        	sbc #1				; room left.
000C83r 3               scrl0:
000C83r 3  20 rr rr     	jsr tstsc			; test screen.
000C86r 3  C9 FF        	cmp #255			; is there a screen this way?
000C88r 3  D0 01        	bne :+
000C8Ar 3  60           	rts				; no, return to loop.
000C8Br 3               :
000C8Br 3  A5 rr        	lda tmproom			; restore room displacement.
000C8Dr 3  8D rr rr     	sta roomtb			; new room table position.
000C90r 3               scrl1:
000C90r 3  20 rr rr     	jsr initsc 			; set new screen.
000C93r 3  A9 02        	lda #2
000C95r 3  85 rr        	sta restfl 			; set it.
000C97r 3  60           	rts
000C98r 3               scrr:
000C98r 3  AD rr rr     	lda roomtb 			; room table pointer.
000C9Br 3  18           	clc
000C9Cr 3  69 01        	adc #1				; room right.
000C9Er 3  4C rr rr     	jmp scrl0
000CA1r 3               scru:
000CA1r 3  AD rr rr     	lda roomtb 			; room table pointer.
000CA4r 3  38           	sec
000CA5r 3  E9 03        	sbc #MAPWID 			; room up.
000CA7r 3  4C rr rr     	jmp scrl0
000CAAr 3               scrd:
000CAAr 3  AD rr rr     	lda roomtb 			; room table pointer.
000CADr 3  18           	clc
000CAEr 3  69 03        	adc #MAPWID 			; room down.
000CB0r 3  4C rr rr     	jmp scrl0
000CB3r 3               
000CB3r 3               ;-----------------------------------------
000CB3r 3               ; Jump to new screen.
000CB3r 3               ;-----------------------------------------
000CB3r 3               
000CB3r 3               nwscr:
000CB3r 3  A2 00        	ldx #0				; start of map data.
000CB5r 3               nwscr0:
000CB5r 3  DD rr rr     	cmp mapdat,x
000CB8r 3  F0 06        	beq nwscr1			; have we found a match for screen?
000CBAr 3  E8           	inx 				; next room.
000CBBr 3  E0 50        	cpx #80				; zero room count, 80 to search.
000CBDr 3  D0 F6        	bne nwscr0			; keep looking.
000CBFr 3  60           	rts
000CC0r 3               nwscr1:
000CC0r 3  8E rr rr     	stx roomtb			; set the map position.
000CC3r 3  4C rr rr     	jmp scrl1			; draw new room.
000CC6r 3               
000CC6r 3               
000CC6r 3               ;----------------------------------------------------------
000CC6r 3               ; Gravity processing.
000CC6r 3               ;----------------------------------------------------------
000CC6r 3               
000CC6r 3               grav:
000CC6r 3  A0 0D        	ldy #13
000CC8r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000CCAr 3  85 rr        	sta z80_l
000CCCr 3  A0 0E        	ldy #14
000CCEr 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000CD0r 3  85 rr        	sta z80_h
000CD2r 3  05 rr        	ora z80_l			; merge in low byte.
000CD4r 3  D0 01        	bne :+
000CD6r 3  60           	rts				; if neither is set, we're not in the air.
000CD7r 3               :
000CD7r 3  A0 00        	ldy #0
000CD9r 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000CDBr 3  85 rr        	sta z80_a
000CDDr 3  C9 63        	cmp #99				; reached the end?
000CDFr 3  D0 0C        	bne grav0			; no, continue.
000CE1r 3               grav2:
000CE1r 3  C6 rr        	dec z80_l			; go back to previous value.
000CE3r 3  C9 FF        	cmp #$ff
000CE5r 3  D0 02        	bne :+
000CE7r 3  C6 rr        	dec z80_h
000CE9r 3               :
000CE9r 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000CEBr 3  85 rr        	sta z80_a
000CEDr 3               grav0:
000CEDr 3  E6 rr        	inc z80_l			; point to next table entry.
000CEFr 3  D0 02        	bne :+
000CF1r 3  E6 rr        	inc z80_h
000CF3r 3               :
000CF3r 3  A5 rr        	lda z80_l
000CF5r 3  A0 0D        	ldy #13
000CF7r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000CF9r 3  A5 rr        	lda z80_h
000CFBr 3  A0 0E        	ldy #14
000CFDr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000CFFr 3               grav1:
000CFFr 3  A5 rr        	lda z80_a
000D01r 3  D0 01        	bne :+				; any movement required?
000D03r 3  60           	rts				; no, not this time.
000D04r 3               :
000D04r 3  A5 rr        	lda z80_a
000D06r 3  C9 80        	cmp #128			; is it up or down?
000D08r 3  B0 15        	bcs gravu			; it's up.
000D0Ar 3               gravd:
000D0Ar 3  85 rr        	sta z80_b			; set pixels to move.
000D0Cr 3               gravd0:
000D0Cr 3  20 rr rr     	jsr cangd			; can we go down?
000D0Fr 3  D0 28        	bne gravst			; can't move down, so stop.
000D11r 3  A0 08        	ldy #8
000D13r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000D15r 3  18           	clc
000D16r 3  69 01        	adc #1
000D18r 3  91 rr        	sta (z80_ix),y
000D1Ar 3  C6 rr        	dec z80_b
000D1Cr 3  D0 EE        	bne gravd0
000D1Er 3  60           	rts
000D1Fr 3               gravu:
000D1Fr 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000D21r 3  18           	clc
000D22r 3  69 01        	adc #1
000D24r 3  85 rr        	sta z80_b			; set pixels to move.
000D26r 3               gravu0:
000D26r 3  20 rr rr     	jsr cangu			; can we go up?
000D29r 3  D0 6E        	bne ifalls			; can't move up, go down next.
000D2Br 3  A0 08        	ldy #8
000D2Dr 3  B1 rr        	lda (z80_ix),y
000D2Fr 3  38           	sec
000D30r 3  E9 01        	sbc #1
000D32r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000D34r 3  C6 rr        	dec z80_b
000D36r 3  D0 EE        	bne gravu0
000D38r 3  60           	rts
000D39r 3               gravst:
000D39r 3  A0 0D        	ldy #var_jumpLo
000D3Br 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D3Dr 3  85 rr        	sta z80_l
000D3Fr 3  A0 0E        	ldy #var_jumpHi
000D41r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D43r 3  85 rr        	sta z80_h
000D45r 3               
000D45r 3  A9 00        	lda #0				; null value in pointer.
000D47r 3  A0 0D        	ldy #var_jumpLo
000D49r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000D4Br 3  C8           	iny
000D4Cr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000D4Er 3               
000D4Er 3  A0 00        	ldy #0
000D50r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000D52r 3  C9 63        	cmp #99				; is it the end marker?
000D54r 3               evftf:
000D54r 3  F0 01        	beq :+				; yes, fallen too far.
000D56r 3  60           	rts
000D57r 3               :
000D57r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000D5Ar 3               
000D5Ar 3               ;------------------------------------------------
000D5Ar 3               ; Initiate fall check.
000D5Ar 3               ;------------------------------------------------
000D5Ar 3               
000D5Ar 3               ifall:
000D5Ar 3  A0 0D        	ldy #var_jumpLo
000D5Cr 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000D5Er 3  85 rr        	sta z80_l
000D60r 3  A0 0E        	ldy #var_jumpHi
000D62r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000D64r 3  85 rr        	sta z80_h			; high byte in accumulator.
000D66r 3  05 rr        	ora z80_l			; merge in low byte.
000D68r 3  F0 01        	beq :+
000D6Ar 3  60           	rts				; if either is set, we're already in the air.
000D6Br 3               :
000D6Br 3  A0 09        	ldy #9
000D6Dr 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000D6Fr 3  85 rr        	sta dispx
000D71r 3  A0 08        	ldy #8
000D73r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000D75r 3  18           	clc
000D76r 3               numsp7:
000D76r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000D78r 3  85 rr        	sta dispy			; set up test coordinates.
000D7Ar 3  20 rr rr     	jsr tstbl			; get map address.
000D7Dr 3  20 rr rr     	jsr plchk			; block, platform check.
000D80r 3  F0 01        	beq :+
000D82r 3  60           	rts				; it's solid, don't fall.
000D83r 3               :
000D83r 3  E6 rr        	inc bufaddr			; look right one cell.
000D85r 3  20 rr rr     	jsr plchk			; block, platform check.
000D88r 3  F0 01        	beq :+
000D8Ar 3  60           	rts				; it's solid, don't fall.
000D8Br 3               :
000D8Br 3  A5 rr        	lda dispx			; y coordinate.
000D8Dr 3  29 07        	and #7				; position straddling block cells.
000D8Fr 3  F0 08        	beq ifalls			; no more checks needed.
000D91r 3  E6 rr        	inc bufaddr			; look to third cell.
000D93r 3  20 rr rr     	jsr plchk			; block, platform check.
000D96r 3  F0 01        	beq :+
000D98r 3  60           	rts				; it's solid, don't fall.
000D99r 3               :
000D99r 3               ifalls:
000D99r 3  A9 rr        	lda #<jtab			; jump table start.
000D9Br 3  85 rr        	sta z80_l
000D9Dr 3  A9 rr        	lda #>jtab
000D9Fr 3  85 rr        	sta z80_h
000DA1r 3               ifal0:
000DA1r 3  E6 rr        	inc z80_l			; point to next value.
000DA3r 3  D0 02        	bne :+
000DA5r 3  E6 rr        	inc z80_h
000DA7r 3               :
000DA7r 3  A0 00        	ldy #0
000DA9r 3  B1 rr        	lda (z80_hl),y			; fetch value.
000DABr 3  F0 F4        	beq ifal0			; no, get next value.
000DADr 3  C9 63        	cmp #99				; reached end of table?
000DAFr 3  D0 01        	bne :+
000DB1r 3  60           	rts				; yes, don't fall.
000DB2r 3               :
000DB2r 3  C9 80        	cmp #128			; is it going up?
000DB4r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000DB6r 3               
000DB6r 3  A0 0D        	ldy #13
000DB8r 3  A5 rr        	lda z80_l
000DBAr 3  91 rr        	sta (z80_ix),y 			; set jump low.
000DBCr 3  A0 0E        	ldy #14
000DBEr 3  A5 rr        	lda z80_h
000DC0r 3  91 rr        	sta (z80_ix),y 			; set jump high.
000DC2r 3  60           	rts
000DC3r 3               
000DC3r 3               
000DC3r 3               ;----------------------------------------------------
000DC3r 3               ; Get frame data for a particular sprite.
000DC3r 3               ; Input:
000DC3r 3               ;  a		= framenumer
000DC3r 3               ; Output:
000DC3r 3               ;  hl		= frame address
000DC3r 3               ;
000DC3r 3               ; global:	hl,frmptr
000DC3r 3               ; local:	-
000DC3r 3               ; calls:	-
000DC3r 3               ;----------------------------------------------------
000DC3r 3               
000DC3r 3               gfrm:
000DC3r 3  0A           	asl a	 		 	; multiple of 2.
000DC4r 3  18           	clc
000DC5r 3  6D rr rr     	adc frmptr 			; frames used by game.
000DC8r 3  85 rr        	sta z80_l
000DCAr 3  AD rr rr     	lda frmptr+1
000DCDr 3  69 00        	adc #0
000DCFr 3  85 rr        	sta z80_h 			; point to frame start.
000DD1r 3  60           	rts
000DD2r 3               
000DD2r 3               ;----------------------------------------------------
000DD2r 3               ; Find sprite list for current room.
000DD2r 3               ;
000DD2r 3               ; global:	hl
000DD2r 3               ; local:	x,y
000DD2r 3               ; calls:	-
000DD2r 3               ;----------------------------------------------------
000DD2r 3               
000DD2r 3               sprlst:
000DD2r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000DD4r 3  85 rr        	sta z80_l
000DD6r 3  A9 rr        	lda #>nmedat
000DD8r 3  85 rr        	sta z80_h
000DDAr 3  A6 rr        	ldx scno 			; screen number.
000DDCr 3  D0 01        	bne sprls2 			; is it the first screen?
000DDEr 3  60           	rts 				; yes, don't need to search data.
000DDFr 3               sprls2:
000DDFr 3  A0 00        	ldy #0
000DE1r 3               sprls1:
000DE1r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000DE3r 3  C9 FF        	cmp #255			; is it an end marker?
000DE5r 3  F0 0E        	beq sprls0 			; yes, end of this room.
000DE7r 3               
000DE7r 3  18           	clc 				; point to next sprite in list.
000DE8r 3  A5 rr        	lda z80_l
000DEAr 3  69 04        	adc #NMESIZ
000DECr 3  85 rr        	sta z80_l
000DEEr 3  90 02        	bcc :+
000DF0r 3  E6 rr        	inc z80_h
000DF2r 3               :
000DF2r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000DF5r 3               sprls0:
000DF5r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000DF7r 3  D0 02        	bne :+
000DF9r 3  E6 rr        	inc z80_h
000DFBr 3               :
000DFBr 3  CA           	dex
000DFCr 3  D0 E3        	bne sprls1 			; continue until room found.
000DFEr 3  60           	rts
000DFFr 3               
000DFFr 3               
000DFFr 3               ;----------------------------------------------------
000DFFr 3               ; Clear all but a single player sprite.
000DFFr 3               ;
000DFFr 3               ; global:	-
000DFFr 3               ; local:	x,y,ix
000DFFr 3               ; calls:	-
000DFFr 3               ;----------------------------------------------------
000DFFr 3               
000DFFr 3               nspr:
000DFFr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E01r 3  85 rr        	sta sprcnt
000E03r 3  A9 rr        	lda #<sprtab 			; sprite table.
000E05r 3  85 rr        	sta z80_x
000E07r 3  A9 rr        	lda #>sprtab
000E09r 3  85 rr        	sta z80_i
000E0Br 3               nspr0:
000E0Br 3  A0 00        	ldy #0 				; fetch sprite type.
000E0Dr 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000E0Fr 3  F0 1A        	beq nspr1 			; yes, keep this one.
000E11r 3               
000E11r 3  A9 FF        	lda #255
000E13r 3  A0 00        	ldy #0 				; fetch sprite type.
000E15r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E17r 3  A0 05        	ldy #5
000E19r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000E1Br 3               
000E1Br 3  18           	clc	 			; next sprite.
000E1Cr 3  A5 rr        	lda z80_x
000E1Er 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E20r 3  85 rr        	sta z80_x
000E22r 3  90 02        	bcc :+
000E24r 3  E6 rr        	inc z80_i
000E26r 3               :
000E26r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000E28r 3  D0 E1        	bne nspr0
000E2Ar 3  60           	rts
000E2Br 3               nspr1:
000E2Br 3  A9 FF        	lda #255
000E2Dr 3  A0 00        	ldy #0
000E2Fr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E31r 3               
000E31r 3  18           	clc	 			; point to next sprite.
000E32r 3  A5 rr        	lda z80_x
000E34r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E36r 3  85 rr        	sta z80_x
000E38r 3  90 02        	bcc :+
000E3Ar 3  E6 rr        	inc z80_i
000E3Cr 3               :
000E3Cr 3  C6 rr        	dec sprcnt	 			; one less to do.
000E3Er 3  D0 01        	bne nspr2
000E40r 3  60           	rts
000E41r 3               nspr2:
000E41r 3  A9 FF        	lda #255
000E43r 3  A0 00        	ldy #0
000E45r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E47r 3  A0 05        	ldy #5
000E49r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000E4Br 3               
000E4Br 3  18           	clc	 			; next sprite.
000E4Cr 3  A5 rr        	lda z80_x
000E4Er 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E50r 3  85 rr        	sta z80_x
000E52r 3  90 02        	bcc :+
000E54r 3  E6 rr        	inc z80_i
000E56r 3               :
000E56r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000E58r 3  D0 E7        	bne nspr2
000E5Ar 3  60           	rts
000E5Br 3               
000E5Br 3               ;----------------------------------------------------------
000E5Br 3               ; Two initialisation routines.
000E5Br 3               ; Initialise sprites - copy everything from list to table.
000E5Br 3               ;
000E5Br 3               ; global:	-
000E5Br 3               ; local:	x,y,ix
000E5Br 3               ; calls:	cpsp
000E5Br 3               ;----------------------------------------------------------
000E5Br 3               
000E5Br 3               ispr:
000E5Br 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E5Dr 3  85 rr        	sta sprcnt
000E5Fr 3  A9 rr        	lda #<sprtab			; sprite table.
000E61r 3  85 rr        	sta z80_x
000E63r 3  A9 rr        	lda #>sprtab
000E65r 3  85 rr        	sta z80_i
000E67r 3               ispr2:
000E67r 3  A0 00        	ldy #0
000E69r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000E6Br 3  C9 FF        	cmp #255 			; is it an end marker?
000E6Dr 3  D0 01        	bne :+
000E6Fr 3  60           	rts 				; yes, no more to do.
000E70r 3               :
000E70r 3               ispr1:
000E70r 3  A0 00        	ldy #0
000E72r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000E74r 3  C9 FF        	cmp #255 			; is it enabled yet?
000E76r 3  D0 08        	bne ispr4			; yes, try another slot.
000E78r 3               
000E78r 3  A0 05        	ldy #5
000E7Ar 3  B1 rr        	lda (z80_ix),y		 	; next type.
000E7Cr 3  C9 FF        	cmp #255 			; is it enabled yet?
000E7Er 3  F0 10        	beq ispr3 			; no, process this one.
000E80r 3               ispr4:
000E80r 3  18           	clc 				; next sprite.
000E81r 3  A5 rr        	lda z80_x
000E83r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000E85r 3  85 rr        	sta z80_x
000E87r 3  90 02        	bcc :+
000E89r 3  E6 rr        	inc z80_i
000E8Br 3               :
000E8Br 3  C6 rr        	dec sprcnt
000E8Dr 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000E8Fr 3  60           	rts  				; no more room in table.
000E90r 3               ispr3:
000E90r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000E93r 3  C6 rr        	dec sprcnt			; one less space in the table.
000E95r 3  D0 D0        	bne ispr2
000E97r 3  60           	rts
000E98r 3               
000E98r 3               
000E98r 3               ;-----------------------------------------------------------------------
000E98r 3               ; Initialise sprites - but not player, we're keeping the old one.
000E98r 3               ;
000E98r 3               ; global:	-
000E98r 3               ; local:	x,y,ix
000E98r 3               ; calls:	cpsp
000E98r 3               ;-----------------------------------------------------------------------
000E98r 3               
000E98r 3               kspr:
000E98r 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000E9Ar 3  A9 rr        	lda #<sprtab 			; sprite table.
000E9Cr 3  85 rr        	sta z80_x
000E9Er 3  A9 rr        	lda #>sprtab
000EA0r 3  85 rr        	sta z80_i
000EA2r 3               kspr2:
000EA2r 3  A0 00        	ldy #0
000EA4r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000EA6r 3  C9 FF        	cmp #255 			; is it an end marker?
000EA8r 3  D0 01        	bne :+
000EAAr 3  60           	rts 				; yes, no more to do.
000EABr 3               :
000EABr 3  C9 00        	cmp #0
000EADr 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000EAFr 3               
000EAFr 3  18           	clc 				; next sprite.
000EB0r 3  A5 rr        	lda z80_l
000EB2r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000EB4r 3  85 rr        	sta z80_l
000EB6r 3  90 02        	bcc :+
000EB8r 3  E6 rr        	inc z80_h
000EBAr 3               :
000EBAr 3  4C rr rr     	jmp kspr2
000EBDr 3               kspr1:
000EBDr 3  A0 00        	ldy #0 				; fetch sprite type.
000EBFr 3  B1 rr        	lda (z80_ix),y
000EC1r 3  C9 FF        	cmp #255 			; is it enabled yet?
000EC3r 3  D0 08        	bne kspr4 			; yes, try another slot.
000EC5r 3               
000EC5r 3  A0 05        	ldy #5 				; next type.
000EC7r 3  B1 rr        	lda (z80_ix),y
000EC9r 3  C9 FF        	cmp #255 			; is it enabled yet?
000ECBr 3  F0 0F        	beq kspr3 			; no, process this one.
000ECDr 3               kspr4:
000ECDr 3  18           	clc 				; next sprite.
000ECEr 3  A5 rr        	lda z80_x
000ED0r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000ED2r 3  85 rr        	sta z80_x
000ED4r 3  90 02        	bcc :+
000ED6r 3  E6 rr        	inc z80_i
000ED8r 3               :
000ED8r 3  CA           	dex	 			; repeat for remaining sprites.
000ED9r 3  D0 E2        	bne kspr1
000EDBr 3  60           	rts  				; no more room in table.
000EDCr 3               kspr3:
000EDCr 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000EDFr 3  CA           	dex	 			; one less space in the table.
000EE0r 3  D0 C0        	bne kspr2
000EE2r 3  60           	rts
000EE3r 3               
000EE3r 3               ;----------------------------------------------
000EE3r 3               ; Copy sprite from list to table.
000EE3r 3               ;
000EE3r 3               ; global:	hl,ix
000EE3r 3               ; local:	y
000EE3r 3               ; calls:	evnt09
000EE3r 3               ;----------------------------------------------
000EE3r 3               
000EE3r 3               cpsp:
000EE3r 3  A0 00        	ldy #0					; fetch byte from table.
000EE5r 3  B1 rr        	lda (z80_hl),y
000EE7r 3               	; y=var_Type
000EE7r 3  91 rr        	sta (z80_ix),y			; set up type.
000EE9r 3  A0 05        	ldy #var_newType
000EEBr 3  91 rr        	sta (z80_ix),y 			; set up type.
000EEDr 3               
000EEDr 3  E6 rr        	inc z80_l 				; move to next byte.
000EEFr 3  D0 02        	bne :+
000EF1r 3  E6 rr        	inc z80_h
000EF3r 3               :
000EF3r 3  A0 00        	ldy #0 					; fetch byte from table.
000EF5r 3  B1 rr        	lda (z80_hl),y
000EF7r 3  A0 06        	ldy #var_newImage
000EF9r 3  91 rr        	sta (z80_ix),y			; set up image.
000EFBr 3               
000EFBr 3  E6 rr        	inc z80_l 				; move to next byte.
000EFDr 3  D0 02        	bne :+
000EFFr 3  E6 rr        	inc z80_h
000F01r 3               :
000F01r 3  A0 00        	ldy #0
000F03r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
000F05r 3  A0 08        	ldy #var_newY
000F07r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F09r 3               
000F09r 3  A9 C8        	lda #200 				; set initial coordinate off screen.
000F0Br 3  A0 03        	ldy #var_Y
000F0Dr 3  91 rr        	sta (z80_ix),y
000F0Fr 3               
000F0Fr 3  E6 rr        	inc z80_l 				; move to next byte.
000F11r 3  D0 02        	bne :+
000F13r 3  E6 rr        	inc z80_h
000F15r 3               :
000F15r 3  A0 00        	ldy #0 					; fetch byte from table.
000F17r 3  B1 rr        	lda (z80_hl),y
000F19r 3  A0 09        	ldy #var_newX
000F1Br 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F1Dr 3               
000F1Dr 3  E6 rr        	inc z80_l 				; move to next byte.
000F1Fr 3  D0 02        	bne :+
000F21r 3  E6 rr        	inc z80_h
000F23r 3               :
000F23r 3  A9 00        	lda #0					; zeroes in accumulator.
000F25r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
000F27r 3  91 rr        	sta (z80_ix),y
000F29r 3  A0 0A        	ldy #var_Direction 		; reset direction.
000F2Br 3  91 rr        	sta (z80_ix),y
000F2Dr 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
000F2Fr 3  91 rr        	sta (z80_ix),y
000F31r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
000F33r 3  91 rr        	sta (z80_ix),y
000F35r 3               
000F35r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
000F37r 3  A0 10        	ldy #var_dataHi
000F39r 3  91 rr        	sta (z80_ix),y
000F3Br 3               evis0:
000F3Br 3  A5 rr        	lda z80_i
000F3Dr 3  48           	pha
000F3Er 3  A5 rr        	lda z80_x
000F40r 3  48           	pha
000F41r 3  A5 rr        	lda z80_h
000F43r 3  48           	pha
000F44r 3  A5 rr        	lda z80_l
000F46r 3  48           	pha
000F47r 3               
000F47r 3  20 rr rr     	jsr evnt09 				; perform event.
000F4Ar 3               
000F4Ar 3  68           	pla
000F4Br 3  85 rr        	sta z80_l
000F4Dr 3  68           	pla
000F4Er 3  85 rr        	sta z80_h
000F50r 3  68           	pla
000F51r 3  85 rr        	sta z80_x
000F53r 3  68           	pla
000F54r 3  85 rr        	sta z80_i
000F56r 3               
000F56r 3  18           	clc
000F57r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
000F59r 3  69 11        	adc #TABSIZ		 	; next sprite.
000F5Br 3  85 rr        	sta z80_x
000F5Dr 3  90 02        	bcc :+
000F5Fr 3  E6 rr        	inc z80_i
000F61r 3               :
000F61r 3  60           	rts
000F62r 3               
000F62r 3               
000F62r 3               ;-------------------------------------
000F62r 3               ; Clear the play area window.
000F62r 3               ;-------------------------------------
000F62r 3               
000F62r 3               clw:
000F62r 3  AD rr rr     	lda wintop			; get coordinates of window.
000F65r 3  85 rr        	sta dispy			; put into dispx for calculation.
000F67r 3  AD rr rr     	lda winlft
000F6Ar 3  85 rr        	sta dispx
000F6Cr 3               
000F6Cr 3  AD rr rr     	lda winhgt			; height of window.
000F6Fr 3  85 rr        	sta rrow			; copy to b register.
000F71r 3               clw3:
000F71r 3  AD rr rr     	lda winwid 			; width of window.
000F74r 3  85 rr        	sta rcol
000F76r 3               clw2:
000F76r 3  20 rr rr     	jsr gprad 			; get print address.
000F79r 3  A9 00        	lda #0				; zero byte to write.
000F7Br 3  A2 07        	ldx #7				; pixel height of each cell.
000F7Dr 3               clw1:
000F7Dr 3  BC rr rr     	ldy scrtab,x
000F80r 3  91 rr        	sta (scraddr),y 			; copy to screen.
000F82r 3  CA           	dex				; next screen row down.
000F83r 3  10 F8        	bpl clw1
000F85r 3               
000F85r 3  E6 rr        	inc dispx			; next column.
000F87r 3  C6 rr        	dec rcol			; one less to do.
000F89r 3  D0 EB        	bne clw2			; repeat for remaining columns.
000F8Br 3               
000F8Br 3  AD rr rr     	lda winlft			; get left edge.
000F8Er 3  85 rr        	sta dispx 			; reset x.
000F90r 3  E6 rr        	inc dispy 			; next line down.
000F92r 3               
000F92r 3  C6 rr        	dec rrow
000F94r 3  D0 DB        	bne clw3			; repeat down the screen.
000F96r 3               
000F96r 3  AD rr rr     	lda wintop			; get coordinates of window.
000F99r 3  85 rr        	sta chary			; put into display position.
000F9Br 3  AD rr rr     	lda winlft
000F9Er 3  85 rr        	sta charx
000FA0r 3  60           	rts
000FA1r 3               
000FA1r 3               
000FA1r 3               ;----------------------------------------------------------
000FA1r 3               ; Effects code.
000FA1r 3               ; Ticker routine is called 25 times per second.
000FA1r 3               ;
000FA1r 3               ; txtini = text scroller address
000FA1r 3               ; txtscr = left text screen address
000FA1r 3               ; txtwid = scroller width
000FA1r 3               ; txtbit = 128
000FA1r 3               ; X      = message nr
000FA1r 3               ;----------------------------------------------------------
000FA1r 3               
000FA1r 3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
000FA5r 3  20 28 30 38  
000FA9r 3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
000FADr 3  60 68 70 78  
000FB1r 3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
000FB5r 3  A0 A8 B0 B8  
000FB9r 3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
000FBDr 3  E0 E8 F0 F8  
000FC1r 3               .if sflag
000FC1r 3               scrly:
000FC1r 3               	rts
000FC1r 3               	.word txtscr         	; set scr_l = left screen address.
000FC1r 3               	sta scr_l
000FC1r 3               	sta tmp_byte		; tmp_byte = lb left screen address
000FC1r 3               	lda txtscr+1
000FC1r 3               	sta scr_l+1
000FC1r 3               	sta scr_r+1		; set hb scr_r = hb left screen address
000FC1r 3               
000FC1r 3               	stx xtmp		; save x
000FC1r 3               
000FC1r 3               	ldx txtwid
000FC1r 3               	dex
000FC1r 3               	ldy scrollpos,x
000FC1r 3               	tya
000FC1r 3               	clc
000FC1r 3               	adc scr_l
000FC1r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
000FC1r 3               
000FC1r 3               	lda #8
000FC1r 3               	sta line_cnt
000FC1r 3               scrly1:
000FC1r 3               	ldx txtwid		; set txtwide
000FC1r 3               	dex
000FC1r 3               	clc
000FC1r 3               scrly0:
000FC1r 3               	ldy scrollpos,x
000FC1r 3               	lda (scr_l),y		; scroll 1 line
000FC1r 3               	rol a
000FC1r 3               	sta (scr_l),y
000FC1r 3               	dex
000FC1r 3               	bpl scrly0
000FC1r 3               
000FC1r 3               	inc scr_l
000FC1r 3               	dec line_cnt
000FC1r 3               	bne scrly1		; repeat 8 times
000FC1r 3               
000FC1r 3               	lda txtpos 		; get text pointer.
000FC1r 3               	sta scr_txt
000FC1r 3               	lda txtpos+1
000FC1r 3               	sta scr_txt+1
000FC1r 3               
000FC1r 3               	ldy #0
000FC1r 3               	lda (scr_txt),y 	; find character we're displaying.
000FC1r 3               	and #127 		; remove end marker bit if applicable.
000FC1r 3               	cmp #13			; is it newline?
000FC1r 3               	bne scrly5 		; no, it's okay.
000FC1r 3               	lda #32			; convert to a space instead.
000FC1r 3               scrly5:
000FC1r 3               	sta fntaddr		; calculate char address
000FC1r 3               	lda #0
000FC1r 3               	sta fntaddr+1
000FC1r 3               	asl fntaddr  		; multiply char by 8.
000FC1r 3               	rol fntaddr+1
000FC1r 3               	asl fntaddr
000FC1r 3               	rol fntaddr+1
000FC1r 3               	asl fntaddr
000FC1r 3               	rol fntaddr+1
000FC1r 3               	lda fntaddr
000FC1r 3               	clc
000FC1r 3               	adc #<(FONT-256)
000FC1r 3               	sta scrly3+1		; that's the low byte.
000FC1r 3               	lda fntaddr+1
000FC1r 3               	adc #>(FONT-256)
000FC1r 3               	sta scrly3+2		; add displacement.
000FC1r 3               
000FC1r 3               	ldy #0
000FC1r 3               scrly3:
000FC1r 3               	lda $3333,y		; get image of char line.
000FC1r 3               	and txtbit
000FC1r 3               	beq scrly2		; don't plot pixel
000FC1r 3               ;	ldy scrline,x
000FC1r 3               	lda (scr_r),y
000FC1r 3               	clc
000FC1r 3               	ora #1
000FC1r 3               	sta (scr_r),y		; plot pixel
000FC1r 3               scrly2:
000FC1r 3               	iny			; next line of char.
000FC1r 3               	cpy #8
000FC1r 3               	bne scrly3
000FC1r 3               
000FC1r 3               	lsr txtbit		; bit of text to display.
000FC1r 3               	bcs :+
000FC1r 3               	rts
000FC1r 3               :
000FC1r 3               	ldy #0
000FC1r 3               	lda (scr_txt),y 	; what was the character?
000FC1r 3               	asl a	  		; end of message?
000FC1r 3               	bcs scrly4
000FC1r 3               	inc txtpos
000FC1r 3               	bne :+
000FC1r 3               	inc txtpos+1
000FC1r 3               :
000FC1r 3               	jmp scrly6 		; not yet - continue.
000FC1r 3               scrly4:
000FC1r 3               	lda txtini 		; start of scrolling message.
000FC1r 3               	sta txtpos
000FC1r 3               	lda txtini+1
000FC1r 3               	sta txtpos+1
000FC1r 3               scrly6:
000FC1r 3               	lda #128
000FC1r 3               	sta txtbit
000FC1r 3               	ldx xtmp
000FC1r 3               	rts
000FC1r 3               
000FC1r 3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
000FC1r 3               tmp_byte:	.byte 0
000FC1r 3               line_cnt:	.byte 0
000FC1r 3               
000FC1r 3               ;-------------------------------------------------------
000FC1r 3               ; Entry TICKER command
000FC1r 3               ;
000FC1r 3               ; Entry:
000FC1r 3               ;  z80_b = message nr
000FC1r 3               ;  z80_c = width
000FC1r 3               ;-------------------------------------------------------
000FC1r 3               
000FC1r 3               iscrly:
000FC1r 3               	jsr prescr 		; set up display position.
000FC1r 3               	lda #<msgdat 		; text messages.
000FC1r 3               	sta z80_l
000FC1r 3               	lda #>msgdat
000FC1r 3               	sta z80_h
000FC1r 3               	lda z80_c 		; width.
000FC1r 3               	sec
000FC1r 3               	sbc #1			; subtract one.
000FC1r 3               	cmp #32 		; is it between 1 and 32?
000FC1r 3               	bcc :+
000FC1r 3               	lda #$60
000FC1r 3               	jmp iscrl0		; no, disable messages.
000FC1r 3               :
000FC1r 3               	ldx z80_b		; message number.
000FC1r 3               	jsr getwrd 		; find message start.
000FC1r 3               
000FC1r 3               	lda z80_l		; set initial text position.
000FC1r 3               	sta txtini
000FC1r 3               	lda z80_h
000FC1r 3               	sta txtini+1
000FC1r 3               
000FC1r 3               	lda #$ad		; code for lda adrr
000FC1r 3               iscrl0:
000FC1r 3               	sta scrly		; enable/disable scrolling routine.
000FC1r 3               
000FC1r 3               	jsr prescr 		; set up display position.
000FC1r 3               	jsr gprad 		; get print address.
000FC1r 3               
000FC1r 3               	lda scraddr 		; set text screen address.
000FC1r 3               	sta txtscr
000FC1r 3               	lda scraddr+1
000FC1r 3               	sta txtscr+1
000FC1r 3               
000FC1r 3               	lda z80_c		; width.
000FC1r 3               	sta txtwid		; set width in working storage.
000FC1r 3               
000FC1r 3               	lda #128 		; start with leftmost bit.
000FC1r 3               	sta txtbit
000FC1r 3               
000FC1r 3               	jmp scrly4
000FC1r 3               .endif
000FC1r 3               
000FC1r 3               ;------------------------------------------------------------------
000FC1r 3               ; Dig routine, conditional assembly depending on dflag
000FC1r 3               ;------------------------------------------------------------------
000FC1r 3               .if dflag
000FC1r 3               dig:
000FC1r 3               	and #3
000FC1r 3               	beq digr		; dig right
000FC1r 3               	cmp #1
000FC1r 3               	beq digl		; dig left
000FC1r 3               	cmp #2
000FC1r 3               	beq digd		; dig down
000FC1r 3               
000FC1r 3               ; Dig up.
000FC1r 3               
000FC1r 3               digu:				; dig up
000FC1r 3               	ldy #8
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	sec
000FC1r 3               	sbc #2
000FC1r 3               	sta dispy		; set y
000FC1r 3               
000FC1r 3               	iny
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	sta dispx		; set x
000FC1r 3               	jmp digv
000FC1r 3               
000FC1r 3               ; Dig down.
000FC1r 3               
000FC1r 3               digd:
000FC1r 3               	ldy #9
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	sta dispx		; set y
000FC1r 3               
000FC1r 3               	dey
000FC1r 3               	clc
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	adc #16
000FC1r 3               	sta dispy		; set y
000FC1r 3               	jmp digv
000FC1r 3               
000FC1r 3               ; Dig left.
000FC1r 3               
000FC1r 3               digl:
000FC1r 3               	ldy #8
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	sta dispy		; set y
000FC1r 3               
000FC1r 3               	iny
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	sec
000FC1r 3               	sbc #2			; x=x-2
000FC1r 3               	sta dispx		; set x
000FC1r 3               	jmp digh
000FC1r 3               
000FC1r 3               ; Dig right.
000FC1r 3               
000FC1r 3               digr:
000FC1r 3               	ldy #8
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	sta dispy		; set y
000FC1r 3               
000FC1r 3               	iny
000FC1r 3               	lda (z80_ix),y
000FC1r 3               	clc
000FC1r 3               	adc #16
000FC1r 3               	sta dispx		; set x+16
000FC1r 3               	jmp digh
000FC1r 3               
000FC1r 3               ; Vertical digging
000FC1r 3               
000FC1r 3               digv:
000FC1r 3               	jsr tstbl		; check blocktype in MAP
000FC1r 3               	jsr fdchk		; test if FODDER
000FC1r 3               
000FC1r 3               	clc
000FC1r 3               	lda dispx		; look 1 cell down
000FC1r 3               	adc #8
000FC1r 3               	sta dispx
000FC1r 3               	jsr tstbl		; check blocktype in MAP
000FC1r 3               	jsr fdchk
000FC1r 3               	lda dispx
000FC1r 3               	and #7
000FC1r 3               	bne :+
000FC1r 3               	rts
000FC1r 3               :
000FC1r 3               	clc
000FC1r 3               	lda dispx		; look 1 cell down
000FC1r 3               	adc #8
000FC1r 3               	sta dispx
000FC1r 3               	jsr tstbl		; check blocktype in MAP
000FC1r 3               	jmp fdchk
000FC1r 3               
000FC1r 3               ; Horizontal digging
000FC1r 3               
000FC1r 3               digh:
000FC1r 3               	jsr tstbl		; check blocktype in MAP
000FC1r 3               	jsr fdchk		; test if FODDER
000FC1r 3               
000FC1r 3               	clc
000FC1r 3               	lda dispy		; look 1 cell down
000FC1r 3               	adc #8
000FC1r 3               	sta dispy
000FC1r 3               	jsr tstbl		; check blocktype in MAP
000FC1r 3               	jsr fdchk
000FC1r 3               	lda dispy
000FC1r 3               	and #7
000FC1r 3               	bne :+
000FC1r 3               	rts
000FC1r 3               :
000FC1r 3               	clc
000FC1r 3               	lda dispy		; look 1 cell down
000FC1r 3               	adc #8
000FC1r 3               	sta dispy
000FC1r 3               	jsr tstbl		; check blocktype in MAP
000FC1r 3               	jmp fdchk
000FC1r 3               
000FC1r 3               digcnt:	.byte 0
000FC1r 3               
000FC1r 3               .endif
000FC1r 3               
000FC1r 3               ;------------------------------------------------------------------
000FC1r 3               ; Sprite table
000FC1r 3               ;------------------------------------------------------------------
000FC1r 3               
000FC1r 3               
000FC1r 3               ; ix+0  = type.
000FC1r 3               ; ix+1  = sprite image number.
000FC1r 3               ; ix+2  = frame.
000FC1r 3               ; ix+3  = y coord.
000FC1r 3               ; ix+4  = x coord.
000FC1r 3               
000FC1r 3               ; ix+5  = new type.
000FC1r 3               ; ix+6  = new image number.
000FC1r 3               ; ix+7  = new frame.
000FC1r 3               ; ix+8  = new y coord.
000FC1r 3               ; ix+9  = new x coord.
000FC1r 3               
000FC1r 3               ; ix+10 = direction.
000FC1r 3               ; ix+11 = parameter 1.
000FC1r 3               ; ix+12 = parameter 2.
000FC1r 3               ; ix+13 = jump pointer low.
000FC1r 3               ; ix+14 = jump pointer high.
000FC1r 3               ; ix+15 = data pointer low.
000FC1r 3               ; ix+16 = data pointer high.
000FC1r 3               
000FC1r 3               ; block NUMSPR * TABSIZ,255
000FC1r 3               
000FC1r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
000FC5r 3  FF FF FF FF  
000FC9r 3  FF FF FF FF  
00108Dr 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
001091r 3  FF FF FF 00  
001095r 3  C0 78 00 00  
00109Er 3  07           roomtb:	.byte 7                      ; start room map offset.
00109Fr 3               
00109Fr 3               setfgcol:
00109Fr 3               setbgcol:
00109Fr 3  60           	rts
0010A0r 3               
0010A0r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0010A0r 3               ; if USER has an argument it will be passed in the accumulator.
0010A0r 3               
0010A0r 3               user:
0010A0r 3               	.include "user.inc"
0010A0r 4  60           	rts
0010A1r 4               
0010A1r 3               
0010A1r 3               ; Everything below here will be generated by the editors.
0010A1r 3               
0010A1r 3               
0010A1r 3  60                   rts
0010A2r 3               WINDOWTOP = 1
0010A2r 3               WINDOWLFT = 0
0010A2r 3               WINDOWHGT = 21
0010A2r 3               WINDOWWID = 22 ;
0010A2r 3               MAPWID = 3
0010A2r 3  FF FF FF             .byte 255,255,255
0010A5r 3               mapdat:
0010A5r 3  FF 00 FF             .byte 255,0,255
0010A8r 3  FF FF FF             .byte 255,255,255
0010ABr 3  01           stmap:  .byte 1
0010ACr 3               
0010ACr 3               evnt00:
0010ACr 3  A9 00                lda #0
0010AEr 3  85 rr                sta varm
0010B0r 3  A5 rr                lda joyval	; KEY
0010B2r 3  29 02                and #2
0010B4r 3  F0 03                beq :+
0010B6r 3  4C rr rr             jmp a00079
0010B9r 3               :
0010B9r 3  A9 01                lda #1
0010BBr 3  85 rr                sta varm
0010BDr 3  20 rr rr             jsr cangl	; CANGOLEFT
0010C0r 3  F0 03                beq :+
0010C2r 3  4C rr rr             jmp a00079
0010C5r 3               :
0010C5r 3  A0 09                ldy #9 		; SPRITELEFT
0010C7r 3  B1 rr                lda (z80_ix),y
0010C9r 3  38                   sec
0010CAr 3  E9 02                sbc #2
0010CCr 3  91 rr                sta (z80_ix),y
0010CEr 3  A5 rr        a00079: lda joyval	; KEY
0010D0r 3  29 01                and #1
0010D2r 3  F0 03                beq :+
0010D4r 3  4C rr rr             jmp a00149
0010D7r 3               :
0010D7r 3  A9 01                lda #1
0010D9r 3  85 rr                sta varm
0010DBr 3  20 rr rr             jsr cangr	; CANGORIGHT
0010DEr 3  F0 03                beq :+
0010E0r 3  4C rr rr             jmp a00149
0010E3r 3               :
0010E3r 3  A0 09                ldy #9 		; SPRITERIGHT
0010E5r 3  B1 rr                lda (z80_ix),y
0010E7r 3  18                   clc
0010E8r 3  69 02                adc #2
0010EAr 3  91 rr                sta (z80_ix),y
0010ECr 3  A9 00        a00149: lda #0
0010EEr 3  C5 rr                cmp varm
0010F0r 3  90 03                bcc *+5
0010F2r 3  4C rr rr             jmp a00277
0010F5r 3  A9 00                lda #0
0010F7r 3  C5 rr                cmp vara
0010F9r 3  F0 03                beq *+5
0010FBr 3  4C rr rr             jmp a00193
0010FEr 3  A9 00                lda #0		; ANIMATE
001100r 3  20 rr rr             jsr animsp
001103r 3  A9 01        a00193: lda #1
001105r 3  C5 rr                cmp vara
001107r 3  F0 03                beq *+5
001109r 3  4C rr rr             jmp a00221
00110Cr 3  A9 01                lda #1		; ANIMATE
00110Er 3  20 rr rr             jsr animsp
001111r 3  A9 02        a00221: lda #2
001113r 3  C5 rr                cmp vara
001115r 3  F0 03                beq *+5
001117r 3  4C rr rr             jmp a00249
00111Ar 3  A9 03                lda #3		; ANIMATE
00111Cr 3  20 rr rr             jsr animsp
00111Fr 3  A9 03        a00249: lda #3
001121r 3  C5 rr                cmp vara
001123r 3  F0 03                beq *+5
001125r 3  4C rr rr             jmp a00277
001128r 3  A9 07                lda #7		; ANIMATE
00112Ar 3  20 rr rr             jsr animsp
00112Dr 3  60           a00277: rts
00112Er 3               evnt01:
00112Er 3  60                   rts
00112Fr 3               evnt02:
00112Fr 3  60                   rts
001130r 3               evnt03:
001130r 3  60                   rts
001131r 3               evnt04:
001131r 3  60                   rts
001132r 3               evnt05:
001132r 3  60                   rts
001133r 3               evnt06:
001133r 3  60                   rts
001134r 3               evnt07:
001134r 3  60                   rts
001135r 3               evnt08:
001135r 3  60                   rts
001136r 3               evnt09:
001136r 3  60                   rts
001137r 3               evnt10:
001137r 3  A0 07                ldy #7 	; KEY
001139r 3                       .if swrflag
001139r 3                       lda keys + data_address - data_start,y
001139r 3                       .else
001139r 3  B9 rr rr             lda keys,y
00113Cr 3                       .endif
00113Cr 3  20 rr rr             jsr ktest
00113Fr 3  90 03                bcc :+
001141r 3  4C rr rr             jmp k00086
001144r 3               :
001144r 3  A9 00                lda #0
001146r 3  85 rr                sta vara
001148r 3  A9 16                lda #22		; AT
00114Ar 3  85 rr                sta chary
00114Cr 3  A9 0C                lda #12
00114Er 3  85 rr                sta charx
001150r 3  A9 00                lda #0		; PRINT
001152r 3  20 rr rr             jsr dmsg
001155r 3  A0 08        k00086: ldy #8 	; KEY
001157r 3                       .if swrflag
001157r 3                       lda keys + data_address - data_start,y
001157r 3                       .else
001157r 3  B9 rr rr             lda keys,y
00115Ar 3                       .endif
00115Ar 3  20 rr rr             jsr ktest
00115Dr 3  90 03                bcc :+
00115Fr 3  4C rr rr             jmp k00171
001162r 3               :
001162r 3  A9 01                lda #1
001164r 3  85 rr                sta vara
001166r 3  A9 16                lda #22		; AT
001168r 3  85 rr                sta chary
00116Ar 3  A9 0C                lda #12
00116Cr 3  85 rr                sta charx
00116Er 3  A9 01                lda #1		; PRINT
001170r 3  20 rr rr             jsr dmsg
001173r 3  A0 09        k00171: ldy #9 	; KEY
001175r 3                       .if swrflag
001175r 3                       lda keys + data_address - data_start,y
001175r 3                       .else
001175r 3  B9 rr rr             lda keys,y
001178r 3                       .endif
001178r 3  20 rr rr             jsr ktest
00117Br 3  90 03                bcc :+
00117Dr 3  4C rr rr             jmp k00255
001180r 3               :
001180r 3  A9 02                lda #2
001182r 3  85 rr                sta vara
001184r 3  A9 16                lda #22		; AT
001186r 3  85 rr                sta chary
001188r 3  A9 0C                lda #12
00118Ar 3  85 rr                sta charx
00118Cr 3  A9 02                lda #2		; PRINT
00118Er 3  20 rr rr             jsr dmsg
001191r 3  A0 0A        k00255: ldy #10 	; KEY
001193r 3                       .if swrflag
001193r 3                       lda keys + data_address - data_start,y
001193r 3                       .else
001193r 3  B9 rr rr             lda keys,y
001196r 3                       .endif
001196r 3  20 rr rr             jsr ktest
001199r 3  90 03                bcc :+
00119Br 3  4C rr rr             jmp k00340
00119Er 3               :
00119Er 3  A9 03                lda #3
0011A0r 3  85 rr                sta vara
0011A2r 3  A9 16                lda #22		; AT
0011A4r 3  85 rr                sta chary
0011A6r 3  A9 0C                lda #12
0011A8r 3  85 rr                sta charx
0011AAr 3  A9 03                lda #3		; PRINT
0011ACr 3  20 rr rr             jsr dmsg
0011AFr 3  60           k00340: rts
0011B0r 3               evnt11:
0011B0r 3  60                   rts
0011B1r 3               evnt12:
0011B1r 3  60                   rts
0011B2r 3               evnt13:
0011B2r 3  A9 00                lda #0
0011B4r 3  85 rr                sta vara
0011B6r 3  60                   rts
0011B7r 3               evnt14:
0011B7r 3  20 rr rr             jsr cls		; CLS
0011BAr 3  A9 00                lda #0		; PRINTMODE
0011BCr 3  85 rr                sta prtmod
0011BEr 3  A9 00                lda #0
0011C0r 3  85 rr                sta chary
0011C2r 3  A9 05                lda #5
0011C4r 3  85 rr                sta charx
0011C6r 3  A9 04                lda #4		; PRINT
0011C8r 3  20 rr rr             jsr dmsg
0011CBr 3  A9 17                lda #23
0011CDr 3  85 rr                sta chary
0011CFr 3  A9 01                lda #1
0011D1r 3  85 rr                sta charx
0011D3r 3  A9 05                lda #5		; PRINT
0011D5r 3  20 rr rr             jsr dmsg
0011D8r 3  A9 16                lda #22		; AT
0011DAr 3  85 rr                sta chary
0011DCr 3  A9 0C                lda #12
0011DEr 3  85 rr                sta charx
0011E0r 3  A9 06                lda #6		; PRINT
0011E2r 3  20 rr rr             jsr dmsg
0011E5r 3  60                   rts
0011E6r 3               evnt15:
0011E6r 3  60                   rts
0011E7r 3               evnt16:
0011E7r 3  60                   rts
0011E8r 3               evnt17:
0011E8r 3  A9 01                lda #1		; PRINTMODE
0011EAr 3  85 rr                sta prtmod
0011ECr 3  A9 08                lda #8
0011EEr 3  85 rr                sta chary
0011F0r 3  A9 0D                lda #13
0011F2r 3  85 rr                sta charx
0011F4r 3                       ; COLOUR command
0011F4r 3  A9 07                lda #7		; PRINT
0011F6r 3  20 rr rr             jsr dmsg
0011F9r 3  A9 02                lda #2
0011FBr 3  85 rr                sta z80_c
0011FDr 3  A5 rr                lda chary
0011FFr 3  18                   clc
001200r 3  65 rr                adc z80_c
001202r 3  85 rr                sta chary
001204r 3  A9 0D                lda #13
001206r 3  85 rr                sta charx
001208r 3                       ; COLOUR command
001208r 3  A9 08                lda #8		; PRINT
00120Ar 3  20 rr rr             jsr dmsg
00120Dr 3  20 rr rr             jsr prskey	; WAITKEY
001210r 3  60                   rts
001211r 3               evnt18:
001211r 3  60                   rts
001212r 3               evnt19:
001212r 3                       ; COLOUR command
001212r 3  A9 0E                lda #14
001214r 3  85 rr                sta chary
001216r 3  A9 08                lda #8
001218r 3  85 rr                sta charx
00121Ar 3  A9 09                lda #9		; PRINT
00121Cr 3  20 rr rr             jsr dmsg
00121Fr 3  60                   rts
001220r 3               evnt20:
001220r 3  60                   rts
001221r 3  60           ptcusr: rts
001222r 3               data_start:
001222r 3               msgdat:
001222r 3  20 20 46 41          .byte "  FAST ",160
001226r 3  53 54 20 A0  
00122Ar 3  20 4D 45 44          .byte " MEDIUM",160
00122Er 3  49 55 4D A0  
001232r 3  20 20 53 4C          .byte "  SLOW ",160
001236r 3  4F 57 20 A0  
00123Ar 3  56 45 52 59          .byte "VERYSLO",215
00123Er 3  53 4C 4F D7  
001242r 3  53 50 52 49          .byte "SPRITE ANIMATION DEM",207
001246r 3  54 45 20 41  
00124Ar 3  4E 49 4D 41  
001257r 3  31 3D 46 41          .byte "1=FAST 2=MED 3=SLOW 4=VERYSLO",215
00125Br 3  53 54 20 32  
00125Fr 3  3D 4D 45 44  
001275r 3  20 20 46 41          .byte "  FAST ",160
001279r 3  53 54 20 A0  
00127Dr 3  20 47 41 4D          .byte " GAME",160
001281r 3  45 A0        
001283r 3  20 4F 56 45          .byte " OVER",160
001287r 3  52 A0        
001289r 3  20 4E 45 57          .byte " NEW HIGH SCORE",160
00128Dr 3  20 48 49 47  
001291r 3  48 20 53 43  
001299r 3               nummsg:
001299r 3  0A                   .byte 10
00129Ar 3               chgfx:
00129Ar 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
00129Er 3  FF FF FF FF  
0012A2r 3  01 01 01 FF          .byte 1,1,1,255,16,16,16,255
0012A6r 3  10 10 10 FF  
0012AAr 3               bprop:
0012AAr 3  00                   .byte 0
0012ABr 3  02                   .byte 2
0012ACr 3               sprgfx:
0012ACr 3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,42,80,125,180,107,222,236,54,206,119,143,243,135,241,13,185,28,28,24,56,12,126,126,0
0012B0r 3  37 EC 15 A8  
0012B4r 3  2A 50 7D B4  
0012CCr 3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,10,148,31,109,154,247,187,13,243,157,227,252,97,252,67,110,7,7,6,14,131,31,31,128
0012D0r 3  0D FB 05 6A  
0012D4r 3  0A 94 1F 6D  
0012ECr 3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,2,165,71,219,230,189,110,195,124,231,56,255,24,127,144,219,193,193,129,131,224,199,7,224
0012F0r 3  C3 7E 81 5A  
0012F4r 3  02 A5 47 DB  
00130Cr 3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,64,169,209,246,121,175,219,176,223,57,206,63,198,31,228,54,112,112,224,96,248,49,1,248
001310r 3  B0 DF A0 56  
001314r 3  40 A9 D1 F6  
00132Cr 3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,10,84,45,190,123,214,108,55,238,115,223,241,187,225,185,176,12,56,126,24,0,48,0,126
001330r 3  37 EC 15 A8  
001334r 3  0A 54 2D BE  
00134Cr 3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,2,149,139,111,158,245,219,13,251,156,119,252,110,248,46,108,3,14,31,134,0,12,128,31
001350r 3  0D FB 05 6A  
001354r 3  02 95 8B 6F  
00136Cr 3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,64,165,226,219,103,189,118,195,62,231,29,255,27,190,11,155,128,195,135,225,0,3,224,7
001370r 3  C3 7E 81 5A  
001374r 3  40 A5 E2 DB  
00138Cr 3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,80,41,248,182,89,239,221,176,207,185,199,127,134,239,194,230,224,48,97,248,192,0,248,1
001390r 3  B0 DF A0 56  
001394r 3  50 29 F8 B6  
0013ACr 3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,10,84,45,190,123,214,108,55,238,115,207,241,143,225,157,176,56,56,28,24,126,48,0,126
0013B0r 3  37 EC 15 A8  
0013B4r 3  0A 54 2D BE  
0013CCr 3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,2,149,139,111,158,245,219,13,251,156,115,252,99,248,39,108,14,14,7,6,31,140,128,31
0013D0r 3  0D FB 05 6A  
0013D4r 3  02 95 8B 6F  
0013ECr 3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,64,165,226,219,103,189,118,195,62,231,28,255,24,254,9,219,131,131,129,193,7,227,224,7
0013F0r 3  C3 7E 81 5A  
0013F4r 3  40 A5 E2 DB  
00140Cr 3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,80,41,248,182,89,239,221,176,207,185,199,63,134,63,194,118,224,224,96,112,193,248,248,1
001410r 3  B0 DF A0 56  
001414r 3  50 29 F8 B6  
00142Cr 3  11 88 73 CE          .byte 17,136,115,206,55,236,21,168,42,80,125,180,107,222,236,54,206,119,143,251,135,221,13,157,28,48,24,126,12,0,126,0
001430r 3  37 EC 15 A8  
001434r 3  2A 50 7D B4  
00144Cr 3  04 62 9C F3          .byte 4,98,156,243,13,251,5,106,10,148,31,109,154,247,187,13,243,157,227,254,97,247,67,103,7,12,134,31,3,0,31,128
001450r 3  0D FB 05 6A  
001454r 3  0A 94 1F 6D  
00146Cr 3  81 18 E7 3C          .byte 129,24,231,60,195,126,129,90,2,165,71,219,230,189,110,195,124,231,184,255,216,125,208,217,1,195,225,135,0,192,7,224
001470r 3  C3 7E 81 5A  
001474r 3  02 A5 47 DB  
00148Cr 3  20 46 39 CF          .byte 32,70,57,207,176,223,160,86,64,169,209,246,121,175,219,176,223,57,238,63,118,31,116,54,192,112,248,97,0,48,1,248
001490r 3  B0 DF A0 56  
001494r 3  40 A9 D1 F6  
0014ACr 3  3C 1C 7C 1E          .byte 60,28,124,30,254,63,254,63,255,127,63,255,15,252,7,240,15,224,63,240,255,252,254,255,252,127,252,127,120,62,56,60
0014B0r 3  FE 3F FE 3F  
0014B4r 3  FF 7F 3F FF  
0014CCr 3  0F 07 9F 07          .byte 15,7,159,7,255,143,255,143,255,223,207,255,3,255,1,252,3,248,15,252,63,255,255,191,255,31,255,31,158,15,14,15
0014D0r 3  FF 8F FF 8F  
0014D4r 3  FF DF CF FF  
0014ECr 3  C3 C1 E7 C1          .byte 195,193,231,193,255,227,255,227,255,247,243,255,192,255,0,127,0,254,3,255,207,255,255,239,255,199,255,199,231,131,195,131
0014F0r 3  FF E3 FF E3  
0014F4r 3  FF F7 F3 FF  
00150Cr 3  70 F0 79 F0          .byte 112,240,121,240,255,248,255,248,255,253,252,255,240,63,192,31,128,63,192,255,243,255,255,251,255,241,255,241,249,224,240,224
001510r 3  FF F8 FF F8  
001514r 3  FF FD FC FF  
00152Cr 3  00 FC 60 FE          .byte 0,252,96,254,240,254,248,252,252,248,255,240,255,224,255,224,7,255,7,255,15,255,31,63,63,31,127,15,127,6,63,0
001530r 3  F0 FE F8 FC  
001534r 3  FC F8 FF F0  
00154Cr 3  00 3F 98 3F          .byte 0,63,152,63,188,63,62,63,63,62,63,252,63,248,63,248,193,255,193,255,195,255,199,207,207,199,223,195,159,193,15,192
001550r 3  BC 3F 3E 3F  
001554r 3  3F 3E 3F FC  
00156Cr 3  C0 0F E6 0F          .byte 192,15,230,15,239,15,207,143,143,207,15,255,15,254,15,254,240,127,240,127,240,255,241,243,243,241,247,240,103,240,3,240
001570r 3  EF 0F CF 8F  
001574r 3  8F CF 0F FF  
00158Cr 3  F0 03 F9 83          .byte 240,3,249,131,251,195,243,227,227,243,195,255,131,255,131,255,252,31,252,31,252,63,252,124,124,252,61,252,25,252,0,252
001590r 3  FB C3 F3 E3  
001594r 3  E3 F3 C3 FF  
0015ACr 3  3C 1C 7C 1E          .byte 60,28,124,30,254,63,254,63,255,127,63,255,15,252,7,240,15,224,63,240,255,252,254,255,252,127,252,127,120,62,56,60
0015B0r 3  FE 3F FE 3F  
0015B4r 3  FF 7F 3F FF  
0015CCr 3  0F 07 9F 07          .byte 15,7,159,7,255,143,255,143,255,223,207,255,3,255,1,252,3,248,15,252,63,255,255,191,255,31,255,31,158,15,14,15
0015D0r 3  FF 8F FF 8F  
0015D4r 3  FF DF CF FF  
0015ECr 3  C3 C1 E7 C1          .byte 195,193,231,193,255,227,255,227,255,247,243,255,192,255,0,127,0,254,3,255,207,255,255,239,255,199,255,199,231,131,195,131
0015F0r 3  FF E3 FF E3  
0015F4r 3  FF F7 F3 FF  
00160Cr 3  70 F0 79 F0          .byte 112,240,121,240,255,248,255,248,255,253,252,255,240,63,192,31,128,63,192,255,243,255,255,251,255,241,255,241,249,224,240,224
001610r 3  FF F8 FF F8  
001614r 3  FF FD FC FF  
00162Cr 3  3F 00 7F 06          .byte 63,0,127,6,127,15,63,31,31,63,15,255,7,255,7,255,255,224,255,224,255,240,252,248,248,252,240,254,96,254,0,252
001630r 3  7F 0F 3F 1F  
001634r 3  1F 3F 0F FF  
00164Cr 3  0F C0 9F C1          .byte 15,192,159,193,223,195,207,199,199,207,195,255,193,255,193,255,63,248,63,248,63,252,63,62,62,63,188,63,152,63,0,63
001650r 3  DF C3 CF C7  
001654r 3  C7 CF C3 FF  
00166Cr 3  03 F0 67 F0          .byte 3,240,103,240,247,240,243,241,241,243,240,255,240,127,240,127,15,254,15,254,15,255,143,207,207,143,239,15,230,15,192,15
001670r 3  F7 F0 F3 F1  
001674r 3  F1 F3 F0 FF  
00168Cr 3  00 FC 19 FC          .byte 0,252,25,252,61,252,124,252,252,124,252,63,252,31,252,31,131,255,131,255,195,255,227,243,243,227,251,195,249,131,240,3
001690r 3  3D FC 7C FC  
001694r 3  FC 7C FC 3F  
0016ACr 3               frmlst:
0016ACr 3  00 04                .byte 0,4
0016AEr 3  04 04 08 00          .byte 4,4,8,0
0016B2r 3               scdat:
0016B2r 3  63 00                .word 99
0016B4r 3  FF 01 17 FF          .byte 255,1,23,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1
0016B8r 3  00 14 01 01  
0016BCr 3  FF 00 14 01  
0016D5r 3  FF 00 14 01          .byte 255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20
0016D9r 3  01 FF 00 14  
0016DDr 3  01 01 FF 00  
0016F6r 3  01 01 FF 00          .byte 1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,23
0016FAr 3  14 01 01 FF  
0016FEr 3  00 14 01 01  
001717r 3               numsc:
001717r 3  01                   .byte 1
001718r 3               nmedat:
001718r 3  00 00 58 80          .byte 0,0,88,128,255
00171Cr 3  FF           
00171Dr 3               NUMOBJ = 1
00171Dr 3               objdta:
00171Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,80,0,40,80
001721r 3  00 00 00 00  
001725r 3  00 00 00 00  
001743r 3               font:
001743r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001747r 3  00 00 00 00  
00174Br 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
00174Fr 3  30 00 30 00  
001753r 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
001757r 3  00 00 00 00  
00175Br 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
00175Fr 3  6C FE 6C 00  
001763r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
001767r 3  7E 1E 7E 18  
00176Br 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
00176Fr 3  30 6E CE 00  
001773r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
001777r 3  7E CC 7E 00  
00177Br 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
00177Fr 3  00 00 00 00  
001783r 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
001787r 3  18 18 0C 00  
00178Br 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
00178Fr 3  30 30 60 00  
001793r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
001797r 3  7E 18 3C 00  
00179Br 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
00179Fr 3  7E 18 18 00  
0017A3r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0017A7r 3  00 18 18 30  
0017ABr 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0017AFr 3  7E 00 00 00  
0017B3r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0017B7r 3  00 38 38 00  
0017BBr 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0017BFr 3  18 30 60 00  
0017C3r 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0017C7r 3  F6 E6 7C 00  
0017CBr 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0017CFr 3  18 18 7E 00  
0017D3r 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0017D7r 3  7C C0 FE 00  
0017DBr 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
0017DFr 3  06 C6 7C 00  
0017E3r 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
0017E7r 3  D8 FE 18 00  
0017EBr 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
0017EFr 3  06 C6 7C 00  
0017F3r 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
0017F7r 3  C6 C6 7C 00  
0017FBr 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
0017FFr 3  18 30 30 00  
001803r 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
001807r 3  C6 C6 7C 00  
00180Br 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
00180Fr 3  7E 06 7C 00  
001813r 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
001817r 3  00 00 30 00  
00181Br 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
00181Fr 3  00 30 30 60  
001823r 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
001827r 3  30 18 0C 00  
00182Br 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
00182Fr 3  00 7E 00 00  
001833r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
001837r 3  0C 18 30 00  
00183Br 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
00183Fr 3  18 00 18 00  
001843r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
001847r 3  FE C0 7C 00  
00184Br 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
00184Fr 3  FE C6 C6 00  
001853r 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
001857r 3  C6 C6 FC 00  
00185Br 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
00185Fr 3  C0 C6 7C 00  
001863r 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
001867r 3  C6 CC F8 00  
00186Br 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
00186Fr 3  C0 C0 FE 00  
001873r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
001877r 3  C0 C0 C0 00  
00187Br 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
00187Fr 3  DE C6 7C 00  
001883r 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
001887r 3  C6 C6 C6 00  
00188Br 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
00188Fr 3  18 18 7E 00  
001893r 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
001897r 3  C6 C6 7C 00  
00189Br 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
00189Fr 3  D8 CC C6 00  
0018A3r 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0018A7r 3  C0 C0 FE 00  
0018ABr 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0018AFr 3  C6 C6 C6 00  
0018B3r 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0018B7r 3  DE CE C6 00  
0018BBr 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0018BFr 3  C6 C6 7C 00  
0018C3r 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0018C7r 3  FC C0 C0 00  
0018CBr 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0018CFr 3  F6 DE 7C 00  
0018D3r 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0018D7r 3  FC CC C6 00  
0018DBr 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
0018DFr 3  06 C6 7C 00  
0018E3r 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
0018E7r 3  30 30 30 00  
0018EBr 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
0018EFr 3  C6 C6 7C 00  
0018F3r 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
0018F7r 3  C6 6C 38 00  
0018FBr 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
0018FFr 3  C6 FE 6C 00  
001903r 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
001907r 3  38 6C C6 00  
00190Br 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
00190Fr 3  30 30 30 00  
001913r 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
001917r 3  30 60 FE 00  
00191Br 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00191Fr 3  18 18 1E 00  
001923r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
001927r 3  30 18 0C 00  
00192Br 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00192Fr 3  30 30 F0 00  
001933r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
001937r 3  30 30 30 00  
00193Br 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00193Fr 3  00 00 00 FF  
001943r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
001947r 3  60 60 FE 00  
00194Br 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
00194Fr 3  7C CC 7C 00  
001953r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
001957r 3  66 66 7C 00  
00195Br 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
00195Fr 3  60 60 3C 00  
001963r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
001967r 3  CC CC 7C 00  
00196Br 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
00196Fr 3  F8 C0 7C 00  
001973r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
001977r 3  30 30 30 00  
00197Br 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
00197Fr 3  CC 7C 0C 78  
001983r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
001987r 3  CC CC CC 00  
00198Br 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
00198Fr 3  30 30 78 00  
001993r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
001997r 3  0C 0C 6C 38  
00199Br 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
00199Fr 3  70 78 6C 00  
0019A3r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0019A7r 3  30 30 1C 00  
0019ABr 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0019AFr 3  FC FC FC 00  
0019B3r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0019B7r 3  CC CC CC 00  
0019BBr 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0019BFr 3  CC CC 78 00  
0019C3r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0019C7r 3  CC F8 C0 C0  
0019CBr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
0019CFr 3  CC 7C 0C 0E  
0019D3r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
0019D7r 3  60 60 60 00  
0019DBr 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
0019DFr 3  78 0C F8 00  
0019E3r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
0019E7r 3  30 30 1C 00  
0019EBr 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
0019EFr 3  CC CC 78 00  
0019F3r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
0019F7r 3  78 78 30 00  
0019FBr 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
0019FFr 3  FC FC 78 00  
001A03r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
001A07r 3  30 78 CC 00  
001A0Br 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
001A0Fr 3  CC 7C 0C 78  
001A13r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
001A17r 3  30 60 FC 00  
001A1Br 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
001A1Fr 3  18 18 1E 00  
001A23r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
001A27r 3  18 18 18 00  
001A2Br 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
001A2Fr 3  30 30 F0 00  
001A33r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
001A37r 3  00 00 00 00  
001A3Br 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
001A3Fr 3  E3 BB C6 7C  
001A43r 3               jtab:
001A43r 3  63                   .byte 99
001A44r 3  37 36 41 10  keys:   .byte 55,54,65,16,98,101,85,48,49,17,18
001A48r 3  62 65 55 30  
001A4Cr 3  31 11 12     
001A4Fr 3               
001A4Fr 2               
001A4Fr 1               	.include "lib.inc"
001A4Fr 2               ;----------------------------------------------------------------------
001A4Fr 2               ; VIC20 Platform Specific functions
001A4Fr 2               ;----------------------------------------------------------------------
001A4Fr 2               
001A4Fr 2               ;============================================================
001A4Fr 2               ; PLATFORM VARIABLES
001A4Fr 2               ;============================================================
001A4Fr 2               ;
001A4Fr 2               ; Memory map:
001A4Fr 2               ;
001A4Fr 2               ;	$0000-$01ff	 0.5kB	CPU WS
001A4Fr 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
001A4Fr 2               ;	$0400-$0fff	 3,0kB	RAM
001A4Fr 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
001A4Fr 2               ;	$2000-$7fff	24,0kB	RAM
001A4Fr 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
001A4Fr 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
001A4Fr 2               ;	$9400-$97ff	 1,0kB	COLOUR RAM
001A4Fr 2               ;	$9800-$9fff	 2,0kB	I/O
001A4Fr 2               ;	$a000-$bfff	 8,0kB	RAM
001A4Fr 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
001A4Fr 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
001A4Fr 2               ;
001A4Fr 2               ; Keyboard matrix:
001A4Fr 2               ;                          	  $9121
001A4Fr 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
001A4Fr 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
001A4Fr 2               ;               ASCII   ??  ??  45  48  56  54  52  50
001A4Fr 2               ;                 VIC   07  06  05  04  03  02  01  00
001A4Fr 2               ;
001A4Fr 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
001A4Fr 2               ;               ASCII   ??  ??  64  79  85  84  69  81
001A4Fr 2               ;                 VIC   17  16  15  14  13  12  11  10
001A4Fr 2               ;
001A4Fr 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
001A4Fr 2               ;               ASCII   ??  61  58  75  72  70  83  ??
001A4Fr 2               ;                 VIC   27  26  25  24  23  22  21  20
001A4Fr 2               ;
001A4Fr 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
001A4Fr 2               ;               ASCII   ??  ??  46  77  66  67  90  32
001A4Fr 2               ;                 VIC   37  36  35  34  33  32  31  30
001A4Fr 2               ;
001A4Fr 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
001A4Fr 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
001A4Fr 2               ;                 VIC   47  46  45  44  43  42  41  40
001A4Fr 2               ;
001A4Fr 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
001A4Fr 2               ;               ASCII   ??  59  76  74  71  68  65  ??
001A4Fr 2               ;                 VIC   57  56  55  54  53  52  51  50
001A4Fr 2               ;
001A4Fr 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
001A4Fr 2               ;               ASCII   13  42  80  73  89  82  87
001A4Fr 2               ;                 VIC   67  66  65  64  63  62  61  60
001A4Fr 2               ;
001A4Fr 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
001A4Fr 2               ;               ASCII   08  ??  43  57  55  53  51  49
001A4Fr 2               ;                 VIC   77  76  75  74  73  72  71  70
001A4Fr 2               ;
001A4Fr 2               ;	 P =$65,O=$14,A=$51,Q=$10
001A4Fr 2               ;	SPC=$30,N=$44,M=$34
001A4Fr 2               ;	 1 =$70,2=$00,3=$71,4=$01
001A4Fr 2               ;
001A4Fr 2               ; Joysticks:
001A4Fr 2               ;
001A4Fr 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
001A4Fr 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
001A4Fr 2               ;	$9120	Right -     -     -     -     -     -     -
001A4Fr 2               ;
001A4Fr 2               ;	$9122	DDRB = Data Direction Register port $9120
001A4Fr 2               ;               0 = input, 1 = output
001A4Fr 2               ;		Bit7 should be 0 to read joystick $9120
001A4Fr 2               ;
001A4Fr 2               ; Video registers:
001A4Fr 2               ;
001A4Fr 2               ;	$9000	horizontal centering
001A4Fr 2               ;		bits 0-6 horizontal centering
001A4Fr 2               ;		bit  7 sets interlace scan
001A4Fr 2               ;	$9001	vertical centering
001A4Fr 2               ;	$9002	set # of columns
001A4Fr 2               ;		bits 0-6 set # of columns
001A4Fr 2               ;		bit 7 is part of video matrix address
001A4Fr 2               ;	$9003	set # of rows
001A4Fr 2               ;		bit 0 sets 8x8 or 16x8 chars
001A4Fr 2               ;		bits 1-6 set # of rows
001A4Fr 2               ;	$9005	start of character memory
001A4Fr 2               ;		bits 0-3 start of character memory (default = 0)
001A4Fr 2               ;		bits 4-7 is rest of video address (default= F)
001A4Fr 2               ;		BITS 3,2,1,0 CM startinq address
001A4Fr 2               ;			     HEX   DEC
001A4Fr 2               ;		0000   ROM   8000  32768
001A4Fr 2               ;		0001	     8400  33792
001A4Fr 2               ;		0010	     8800  34816
001A4Fr 2               ;		0011	     8C00  35840
001A4Fr 2               ;		1000   RAM   0000  0000
001A4Fr 2               ;		1001  xxxx
001A4Fr 2               ;		1010  xxxx   unavail.
001A4Fr 2               ;		1011  xxxx
001A4Fr 2               ;		1100	     1000  4096
001A4Fr 2               ;		1101	     1400  5120
001A4Fr 2               ;		1110	     1800  6144
001A4Fr 2               ;		1111	     1C00  7168
001A4Fr 2               ;	$900f	Screen and border color register
001A4Fr 2               ;		bits 4-7 select background color
001A4Fr 2               ;		bits 0-2 select border color
001A4Fr 2               ;		bit 3 selects inverted or normal mode
001A4Fr 2               ;
001A4Fr 2               
001A4Fr 2               ; VIC constants
001A4Fr 2               
001A4Fr 2               	OBJCHAR 	= 178			; first char nr for objects
001A4Fr 2               	scrchar 	= 22			; char/line
001A4Fr 2               	scrline		= 22			; lines/screen
001A4Fr 2               	ScreenSize	= scrchar*scrline * 8	; Screen size bytes
001A4Fr 2               	ScreenRowBytes	= scrchar * 16		; bytes/line
001A4Fr 2               	SpriteMaxY	= 161			; maxlines - 16 + 1
001A4Fr 2               
001A4Fr 2               ; VIC variables:
001A4Fr 2               
001A4Fr 2  00           	fontcol:	.byte 0		; Frontcolour text
001A50r 2               
001A50r 2               ; Addresses
001A50r 2               
001A50r 2               	MapAddr		= $400		; RAM
001A50r 2               	ScreenAddr	= $0200		; VIDEO RAM
001A50r 2               	CharAddress	= $1000		; CHAR RAM
001A50r 2               	Reg0		= $9000		; Horizontal centering
001A50r 2               	Reg1		= $9001		; Vertical centering
001A50r 2               	Reg2		= $9002		; Set # of columns
001A50r 2               	Reg3		= $9003		; Set # of rows
001A50r 2               	Reg5		= $9005		; Start of character memory
001A50r 2               	RegF		= $900f		; Screen and border color register
001A50r 2               	JoyAddr1	= $9111		; Joystick address 1
001A50r 2               	KeyColAddr	= $9120		; Keyboard column (write)
001A50r 2               	JoyAddr2	= $9120		; Joystick address 2
001A50r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
001A50r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
001A50r 2               	Timer1_Low  	= $9114		; Timer 1 low byte
001A50r 2               	Timer1_High 	= $9115		; Timer 1 high byte
001A50r 2               	Timer2_Low  	= $9118		; Timer 2 low byte
001A50r 2               	Timer2_High 	= $9119		; Timer 2 high byte
001A50r 2               	AUX		= $911b		; Auxiliary control register
001A50r 2               	IFR		= $911d		; Interrupt Flag Register
001A50r 2               	IER		= $911e		; Interrupt Enable Register
001A50r 2               	ColorAttr	= $9600		; Color attributes
001A50r 2               
001A50r 2               ;----------------------------------------------------------------------
001A50r 2               ; VIC20 video hardware fns
001A50r 2               ;----------------------------------------------------------------------
001A50r 2               
001A50r 2               init:
001A50r 2               
001A50r 2               ; Disable interrupts
001A50r 2               
001A50r 2  A9 7F        	lda #$7f
001A52r 2  8D 1E 91     	sta $911e
001A55r 2  8D 2D 91     	sta $912d
001A58r 2  8D 2E 91     	sta $912e
001A5Br 2               
001A5Br 2               ; Init screen for NTSC
001A5Br 2               ; this sets the background and border color of the screen
001A5Br 2               
001A5Br 2               ; in this case border black and background black
001A5Br 2  A9 18        	lda #%00011000
001A5Dr 2  8D 0F 90     	sta RegF
001A60r 2               
001A60r 2               ; max num of columns 24
001A60r 2  AD 02 90     	lda Reg2
001A63r 2  29 80        	and #%10000000
001A65r 2  09 16        	ora #ScrWidth
001A67r 2  8D 02 90     	sta Reg2
001A6Ar 2               
001A6Ar 2               ; max num of lines (mult by 2 - 24) for 8x8 chars
001A6Ar 2               ; no multiply for 8x16 chars
001A6Ar 2  AD 03 90     	lda Reg3
001A6Dr 2  29 81        	and #%10000001
001A6Fr 2  09 16        	ora #ScrWidth		; number of rows multipled by two
001A71r 2  8D 03 90     	sta Reg3
001A74r 2               
001A74r 2               ; horizontal and vertical position must be set for
001A74r 2               ; non standard screen resolution (standard 22x23)
001A74r 2               ; same games even allow the user to change them
001A74r 2               ; these values are for PAL for NTSC should be different
001A74r 2               
001A74r 2               ; move horizontal position in the screen
001A74r 2  AD 00 90     	lda Reg0
001A77r 2  29 80        	and #%10000000
001A79r 2  09 04        	ora #CentreX
001A7Br 2  8D 00 90     	sta Reg0
001A7Er 2               
001A7Er 2               ; move vertical position in the screen
001A7Er 2  A9 1B        	lda #CentreY
001A80r 2  8D 01 90     	sta Reg1
001A83r 2               
001A83r 2               ; Set screem memory to $200
001A83r 2               ; bit 7 on $9002 has to be set
001A83r 2  AD 02 90     	lda Reg2
001A86r 2  09 80        	ora #%10000000
001A88r 2  8D 02 90     	sta Reg2
001A8Br 2               
001A8Br 2               ; Set character data pointer to CHAR RAM at $1000
001A8Br 2               ; bit 7 on $9005 has always to be set
001A8Br 2               ; (based on compute - mapping the vic book)
001A8Br 2               ; color ram goes to 9600
001A8Br 2  AD 05 90     	lda Reg5
001A8Er 2  29 0C        	and #%00001100
001A90r 2  09 8C        	ora #%10001100
001A92r 2  8D 05 90     	sta Reg5
001A95r 2               
001A95r 2               ; This set the char size to 8x16
001A95r 2  AD 03 90     	lda Reg3
001A98r 2  09 01        	ora #%00000001
001A9Ar 2  8D 03 90     	sta Reg3
001A9Dr 2               
001A9Dr 2               ; Init screencharacters
001A9Dr 2               ; Fill screen with characters from left to right, up to down
001A9Dr 2  A2 00        	ldx #0
001A9Fr 2               scrinit:
001A9Fr 2  8A           	txa
001AA0r 2  9D 00 02     	sta ScreenAddr,x
001AA3r 2  E8           	inx
001AA4r 2  E0 F2        	cpx#242
001AA6r 2  D0 F7        	bne scrinit
001AA8r 2               
001AA8r 2               
001AA8r 2               ; Reset fontcolor
001AA8r 2  A9 00        	lda #0		; Black
001AAAr 2  8D rr rr     	sta fontcol
001AADr 2               
001AADr 2               ; Init VIA timer for timeout 1/25 sec
001AADr 2               
001AADr 2  A9 E0        	lda #$e0		; T1 continuous
001AAFr 2  8D 1B 91     	sta AUX
001AB2r 2  A9 7F        	lda #$7f		; No int
001AB4r 2  8D 1E 91     	sta IER
001AB7r 2  A9 00        	lda #0
001AB9r 2  8D 1D 91     	sta IFR			; Clear interrupt flags
001ABCr 2  A9 40        	lda #<timervalue	; Timer 1/25 sec
001ABEr 2  8D 14 91     	sta Timer1_Low
001AC1r 2  A9 9C        	lda #>timervalue
001AC3r 2  8D 15 91     	sta Timer1_High
001AC6r 2               
001AC6r 2  60           	rts
001AC7r 2               
001AC7r 2               
001AC7r 2               
001AC7r 2               
001AC7r 2               
001AC7r 2               ;--------------------------------------------------------
001AC7r 2               ; Keys
001AC7r 2               ;
001AC7r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
001AC7r 2               ;             ||||||||
001AC7r 2               ;             |||||||+> Right    KEY 0  - X
001AC7r 2               ;             ||||||+-> Left     KEY 1  - Z
001AC7r 2               ;             |||||+--> Down     KEY 2  - .
001AC7r 2               ;             ||||+---> Up       KEY 3  - ;
001AC7r 2               ;             |||+----> Fire1    KEY 4  - SPC
001AC7r 2               ;             ||+-----> Fire2    KEY 5  - Q
001AC7r 2               ;             |+------> Fire3    KEY 6  - P
001AC7r 2               ;             +-------> Not used
001AC7r 2               ;
001AC7r 2               ;                       Option1  KEY 7  - 1
001AC7r 2               ;                       Option2  KEY 8  - 2
001AC7r 2               ;                       Option3  KEY 9  - 3
001AC7r 2               ;                       Option4  KEY 10 - 4
001AC7r 2               ;--------------------------------------------------------
001AC7r 2               
001AC7r 2  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
001ACBr 2  62 10 37     
001ACEr 2  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
001AD2r 2               
001AD2r 2               ;----------------------------------------------------
001AD2r 2               ; Wait for keypress.
001AD2r 2               ;----------------------------------------------------
001AD2r 2               
001AD2r 2               prskey:
001AD2r 2  8A           	txa
001AD3r 2  48           	pha
001AD4r 2               prsloop:
001AD4r 2  20 rr rr     	jsr vsync
001AD7r 2               
001AD7r 2               ;	lda #$79
001AD7r 2               ;	ldx #$01
001AD7r 2               ;	jsr OSBYTE
001AD7r 2               
001AD7r 2  E0 FF        	cpx #$ff
001AD9r 2  F0 F9        	beq prsloop		; wait until key pressed
001ADBr 2  8A           	txa
001ADCr 2  20 rr rr     	jsr joykey
001ADFr 2  68           	pla
001AE0r 2  AA           	tax
001AE1r 2  60           	rts
001AE2r 2               
001AE2r 2               bbcinit:
001AE2r 2               ;	sei
001AE2r 2               ;	lda EVENTV
001AE2r 2               ;	sta old_eventv
001AE2r 2               ;	lda EVENTV+1
001AE2r 2               ;	sta old_eventv+1
001AE2r 2               
001AE2r 2               ;	lda #<event_handler
001AE2r 2               ;	sta EVENTV
001AE2r 2               ;	lda #>event_handler
001AE2r 2               ;	sta EVENTV+1
001AE2r 2               ;	cli
001AE2r 2               
001AE2r 2               	; Enable VSYNC event.
001AE2r 2               ;	lda #14
001AE2r 2               ;	ldx #4
001AE2r 2               ;	jmp OSBYTE
001AE2r 2               
001AE2r 2  60           	rts
001AE3r 2               
001AE3r 2               bbckill:
001AE3r 2               ;	sei
001AE3r 2               ;	lda old_eventv
001AE3r 2               ;	sta EVENTV
001AE3r 2               ;	lda old_eventv+1
001AE3r 2               ;	sta EVENTV+1
001AE3r 2               ;	cli
001AE3r 2               
001AE3r 2               	; Disable VSYNC event.
001AE3r 2               ;	lda #13
001AE3r 2               ;	ldx #4
001AE3r 2               ;	jmp OSBYTE
001AE3r 2               
001AE3r 2  60           	rts
001AE4r 2               
001AE4r 2               old_eventv:
001AE4r 2  xx xx        	.res 2
001AE6r 2               
001AE6r 2               event_handler:
001AE6r 2  08           	php
001AE7r 2  C9 04        	cmp #4
001AE9r 2  D0 02        	bne not_vsync
001AEBr 2               
001AEBr 2  E6 rr        	inc vsync_count
001AEDr 2               
001AEDr 2               not_vsync:
001AEDr 2  28           	plp
001AEEr 2  6C rr rr     	jmp (old_eventv)
001AF1r 2               
001AF1r 2               bbcsync:
001AF1r 2  A5 rr        	lda vsync_count
001AF3r 2  C9 02        	cmp #2
001AF5r 2  90 FA        	bcc bbcsync
001AF7r 2  A9 00        	lda #0
001AF9r 2  85 rr        	sta vsync_count
001AFBr 2  60           	rts
001AFCr 2               
001AFCr 2               ;--------------------------------------------------------
001AFCr 2               ; Keyboard test routine.
001AFCr 2               ;
001AFCr 2               ; Input:
001AFCr 2               ;  A = key to read, high nibble=row and low nibble=col
001AFCr 2               ;
001AFCr 2               ; Output:
001AFCr 2               ;  carry clr = key pressed
001AFCr 2               ;  carry set = key not pressed
001AFCr 2               ;--------------------------------------------------------
001AFCr 2               
001AFCr 2               ktest:
001AFCr 2  85 rr        	sta z80_a		; save key
001AFEr 2  98           	tya
001AFFr 2  48           	pha
001B00r 2               
001B00r 2               ; _BEEB keyboard read
001B00r 2  A5 rr        	lda z80_a
001B02r 2  49 80        	eor #$80		; _BEEB just look for this key
001B04r 2  AA           	tax
001B05r 2               
001B05r 2               ;	lda #$79
001B05r 2               ;	jsr OSBYTE
001B05r 2               
001B05r 2  8A           	txa
001B06r 2  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
001B08r 2               
001B08r 2  38           	sec			; key not pressed
001B09r 2  68           	pla
001B0Ar 2  A8           	tay
001B0Br 2  60           	rts
001B0Cr 2               
001B0Cr 2               pressed:
001B0Cr 2  18           	clc			; key pressed
001B0Dr 2  68           	pla
001B0Er 2  A8           	tay
001B0Fr 2  60           	rts
001B10r 2               
001B10r 2               ;---------------------------------------------------------------
001B10r 2               ; Getkey in column,row format
001B10r 2               ;
001B10r 2               ; Output:
001B10r 2               ;  A = high nibble=row and low nibble=column key in matrix
001B10r 2               ;---------------------------------------------------------------
001B10r 2               
001B10r 2               kget:
001B10r 2  86 rr        	stx xtmp
001B12r 2               kget1:
001B12r 2               ;	lda #$79			; _BEEB read keyboard with OSBYTE &79
001B12r 2               ;	ldx #$01
001B12r 2               ;	jsr OSBYTE
001B12r 2               
001B12r 2  E0 FF        	cpx #$ff
001B14r 2  F0 FC        	beq kget1
001B16r 2               
001B16r 2  8A           	txa
001B17r 2  48           	pha
001B18r 2               kget2:
001B18r 2               ;	lda #$79			; wait for released key
001B18r 2               ;	ldx #$01
001B18r 2               ;	jsr OSBYTE
001B18r 2               
001B18r 2  E0 FF        	cpx #$ff
001B1Ar 2  D0 FC        	bne kget2
001B1Cr 2               
001B1Cr 2  68           	pla
001B1Dr 2  A6 rr        	ldx xtmp
001B1Fr 2  60           	rts
001B20r 2               
001B20r 2               ;----------------------------------------------------
001B20r 2               ; AtoMMC joystick controls.
001B20r 2               ; _BEEB TODO
001B20r 2               ;----------------------------------------------------
001B20r 2               
001B20r 2               joyinit:
001B20r 2               joysin:
001B20r 2  60           	rts
001B21r 2               
001B21r 2               
001B21r 2               ;----------------------------------------------------
001B21r 2               ; Delay routine 1/50 sec
001B21r 2               ;
001B21r 2               ; Wait 1/60 sec = 16666 usec
001B21r 2               ; Wait 208 x 16 =  3328 usec
001B21r 2               ;                 19994 usec
001B21r 2               ; rts           =     6 usec
001B21r 2               ; Total         = 20000 usec
001B21r 2               ;----------------------------------------------------
001B21r 2               
001B21r 2               delay:
001B21r 2  85 rr        	sta xtmp
001B23r 2               del_loop:
001B23r 2               ;	lda #19
001B23r 2               ;	jsr OSBYTE		; wait for vsync _BEEB
001B23r 2               
001B23r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
001B25r 2               delay1:
001B25r 2  61 80        	adc ($80,x)		;	 6 usec
001B27r 2  61 80        	adc ($80,x)		;	 6 usec
001B29r 2  88           	dey			;	 2 usec
001B2Ar 2  D0 F9        	bne delay1		;	 2 usec
001B2Cr 2  EA           	nop			; 2 usec
001B2Dr 2  EA           	nop			; 2 usec
001B2Er 2               				; tot: 20000 usec
001B2Er 2  C6 rr        	dec xtmp
001B30r 2  D0 F1        	bne del_loop
001B32r 2  60           	rts
001B33r 2               
001B33r 2               ;-------------------------------------------------------------
001B33r 2               ; Screen synchronisation.
001B33r 2               ;
001B33r 2               ;  - read joystick/keyboard
001B33r 2               ;  - handle sound
001B33r 2               ;  - sync framerate with clock
001B33r 2               ;  - handle shrapnel every even frame
001B33r 2               ;-------------------------------------------------------------
001B33r 2               
001B33r 2               vsync:
001B33r 2  48           	pha
001B34r 2  98           	tya
001B35r 2  48           	pha
001B36r 2  8A           	txa
001B37r 2  48           	pha
001B38r 2  20 rr rr     	jsr joykey		; read joystick/keyboard.
001B3Br 2               vsync1:
001B3Br 2               ;	lda #19
001B3Br 2               ;	jsr OSBYTE		; _BEEB vsync
001B3Br 2               
001B3Br 2  A5 rr        	lda clock
001B3Dr 2  29 01        	and #1
001B3Fr 2  D0 03        	bne:+
001B41r 2  20 rr rr     	jsr proshr		; handle shrapnel every even frame
001B44r 2               :
001B44r 2  AD rr rr     	lda sndtyp
001B47r 2  F0 40        	beq sndskip
001B49r 2               
001B49r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B49r 2               ; beep effect using psg channel 0
001B49r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B49r 2               
001B49r 2  08           	php			; save irq interrupt state
001B4Ar 2               
001B4Ar 2  78           	sei			; disable interrupts
001B4Br 2               
001B4Br 2  A9 0B        	lda #$0b		; disable keyboard output that drives bit 7 of via port A
001B4Dr 2  8D 40 FE     	sta $fe40
001B50r 2               
001B50r 2  A9 FF        	lda #$ff		; via port A bits 0 - 7 output
001B52r 2  8D 43 FE     	sta $fe43
001B55r 2               
001B55r 2  A9 90        	lda #$90		; psg channel 0 full volume
001B57r 2  20 rr rr     	jsr psgWrite
001B5Ar 2               
001B5Ar 2               beepLoop:
001B5Ar 2               
001B5Ar 2  AD rr rr     	lda sndtyp	; update low 4 bits of psg channel 0 tone register with 2 bits from sndtyp
001B5Dr 2  29 03        	and #3
001B5Fr 2  0A           	asl a
001B60r 2  0A           	asl a
001B61r 2  09 80        	ora #$80
001B63r 2  20 rr rr     	jsr psgWrite
001B66r 2               
001B66r 2  AD rr rr     	lda sndtyp	; update high 6 bits of psg channel 0 tone register with 6 bits from sndtyp
001B69r 2  4A           	lsr a
001B6Ar 2  4A           	lsr a
001B6Br 2  20 rr rr     	jsr psgWrite
001B6Er 2               
001B6Er 2  AC rr rr     	ldy sndtyp		; do the half cycle delay
001B71r 2               
001B71r 2               beepWait:
001B71r 2               
001B71r 2  88           	dey
001B72r 2  D0 FD        	bne beepWait
001B74r 2               
001B74r 2  CE rr rr     	dec sndtyp			; reduce delay by 1
001B77r 2  D0 E1        	bne beepLoop		; repeat above until delay = 0
001B79r 2               
001B79r 2  A9 9F        	lda #$9f				; channel 0 volume off
001B7Br 2  20 rr rr     	jsr psgWrite
001B7Er 2               
001B7Er 2  A9 7F        	lda #$7f		; via port A bit 7 input from keyboard output
001B80r 2  8D 4F FE     	sta $fe4f
001B83r 2               
001B83r 2  A9 03        	lda #$03		; enable keyboard output
001B85r 2  8D 40 FE     	sta $fe40
001B88r 2               
001B88r 2  28           	plp			; restore irq state
001B89r 2               
001B89r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B89r 2               
001B89r 2               sndskip:
001B89r 2  68           	pla
001B8Ar 2  AA           	tax
001B8Br 2  68           	pla
001B8Cr 2  A8           	tay
001B8Dr 2  68           	pla
001B8Er 2  60           	rts
001B8Fr 2               
001B8Fr 2  00           sndtyp:		.byte 0
001B90r 2               
001B90r 2               
001B90r 2               
001B90r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B90r 2               ; psgWrite 					write data to psg
001B90r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B90r 2               ; entry			A			data to be written to 76489 psg
001B90r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B90r 2               ; exit			A			destroyed
001B90r 2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
001B90r 2               
001B90r 2               psgWrite:
001B90r 2               
001B90r 2  8D 4F FE     	sta $fe4f				; place psg data on port a
001B93r 2               
001B93r 2  A9 00        	lda #0 + 0				; psg -we low
001B95r 2  8D 40 FE     	sta $fe40
001B98r 2               
001B98r 2  48           	pha					; 5uS delay
001B99r 2  68           	pla
001B9Ar 2  EA           	nop
001B9Br 2  EA           	nop
001B9Cr 2               
001B9Cr 2  A9 08        	lda #0 + 8				; psg -we high
001B9Er 2  8D 40 FE     	sta $fe40
001BA1r 2               
001BA1r 2  60           	rts					; return
001BA2r 2               
001BA2r 2               
001BA2r 2               
001BA2r 2               ;----------------------------------------------------
001BA2r 2               ; Draw sprite
001BA2r 2               ;----------------------------------------------------
001BA2r 2               .if oflag
001BA2r 2               sprite:
001BA2r 2               	stx xtmp		; Save X-reg
001BA2r 2               	jsr scadd 		; get screen address in scraddr.
001BA2r 2               
001BA2r 2               	lda dispx 		; x position.
001BA2r 2               	and #7 			; position straddling cells.
001BA2r 2               	sta z80_b		; store in b register.
001BA2r 2               
001BA2r 2               	lda z80_l		; store sprite graphic address.
001BA2r 2               	sta sprit1+1
001BA2r 2               	sta sprit2+1
001BA2r 2               	lda z80_h
001BA2r 2               	sta sprit1+2
001BA2r 2               	sta sprit2+2
001BA2r 2               
001BA2r 2               	ldx #0			; pixel height.
001BA2r 2               	ldy #0
001BA2r 2               sprit1:
001BA2r 2               	lda objdta,x		; fetch first byte.
001BA2r 2               	sta spr
001BA2r 2               	inx
001BA2r 2               sprit2:
001BA2r 2               	lda objdta,x
001BA2r 2               	sta spr+1
001BA2r 2               
001BA2r 2               	lda #0
001BA2r 2               	sta spr+2
001BA2r 2               	jsr sprit7		; shift sprite
001BA2r 2               
001BA2r 2               	lda spr			; fetch graphic.
001BA2r 2               	ldy #0			; _BEEB
001BA2r 2               	eor (scraddr),y		; merge with screen image.
001BA2r 2               	sta (scraddr),y		; write to screen.
001BA2r 2               
001BA2r 2               	lda spr+1		; fetch graphic.
001BA2r 2               	ldy #8			; _BEEB
001BA2r 2               	eor (scraddr),y		; merge with screen image.
001BA2r 2               	sta (scraddr),y		; write to screen.
001BA2r 2               
001BA2r 2               	lda spr+2		; fetch graphic.
001BA2r 2               	ldy #16			; _BEEB
001BA2r 2               	eor (scraddr),y		; merge with screen image.
001BA2r 2               	sta (scraddr),y		; write to screen.
001BA2r 2               
001BA2r 2               	jsr nline
001BA2r 2               
001BA2r 2               	inx			; next source byte.
001BA2r 2               	cpx #32
001BA2r 2               	bne sprit1		; repeat
001BA2r 2               
001BA2r 2               	ldx xtmp		; retreive X-reg
001BA2r 2               	rts
001BA2r 2               
001BA2r 2               ;spr:	.byte 0,0,0
001BA2r 2               .endif
001BA2r 2               ;------------------------------------------------------------------
001BA2r 2               ; This routine returns a screen address for (dispx, dispy) in scraddr.
001BA2r 2               ;------------------------------------------------------------------
001BA2r 2               
001BA2r 2               scadd:
001BA2r 2  A5 rr        	lda dispx
001BA4r 2  29 F8        	and #$f8
001BA6r 2  85 rr        	sta scraddr
001BA8r 2  A9 00        	lda #0
001BAAr 2  85 rr        	sta scraddr+1
001BACr 2  06 rr        	asl scraddr
001BAEr 2  26 rr        	rol scraddr+1
001BB0r 2               
001BB0r 2  A6 rr        	ldx dispy
001BB2r 2  18           	clc
001BB3r 2  A5 rr        	lda scraddr
001BB5r 2  7D 00 07     	adc SCADTB_lb,x
001BB8r 2  85 rr        	sta scraddr
001BBAr 2  A5 rr        	lda scraddr+1
001BBCr 2  7D 00 08     	adc SCADTB_hb,x
001BBFr 2  85 rr        	sta scraddr+1
001BC1r 2               
001BC1r 2               
001BC1r 2  60           	rts
001BC2r 2               
001BC2r 2               ;-----------------------------------------------------------------
001BC2r 2               ; These are the sprite routines.
001BC2r 2               ; sspria = single sprite, old (ix).
001BC2r 2               ; ssprib = single sprite, new (ix+5).
001BC2r 2               ; sspric = both sprites, old (ix) and new (ix+5).
001BC2r 2               ;-----------------------------------------------------------------
001BC2r 2               
001BC2r 2               sspria:
001BC2r 2  20 rr rr     	jsr gsprad		; get old sprite address.
001BC5r 2               sspri2:
001BC5r 2               .if rflag
001BC5r 2               	lda z80_e				; 3c
001BC5r 2               	sta dline_spraddr1+1	; 4c
001BC5r 2               	sta dline_spraddr2+1	; 4c
001BC5r 2               	lda z80_d				; 3c
001BC5r 2               	sta dline_spraddr1+2	; 4c
001BC5r 2               	sta dline_spraddr2+2	; 4c
001BC5r 2               
001BC5r 2               	ldx sprshft
001BC5r 2               	lda shift_table,x
001BC5r 2               	sta dline_shift1+1
001BC5r 2               	sta dline_shift2+1
001BC5r 2               	lda shift_table+1,x
001BC5r 2               	sta dline_shift1+2
001BC5r 2               	sta dline_shift2+2
001BC5r 2               
001BC5r 2               	ldx #0			; vertical lines.
001BC5r 2               sspri0:
001BC5r 2               	jsr dline		; draw a line.
001BC5r 2                 .if bflag
001BC5r 2               	cpx #48
001BC5r 2                 .else
001BC5r 2               	cpx #32
001BC5r 2                 .endif
001BC5r 2               	bne sspri0		; repeat 16 times x 2 bytes
001BC5r 2               	rts
001BC5r 2               .else
001BC5r 2                 .if bflag
001BC5r 2               	lda #24
001BC5r 2                 .else
001BC5r 2  A9 10        	lda #16			; vertical lines.
001BC7r 2                 .endif
001BC7r 2  8D rr rr     	sta acnt
001BCAr 2               sspri0:
001BCAr 2  20 rr rr     	jsr dline		; draw a line.
001BCDr 2  CE rr rr     	dec acnt
001BD0r 2  D0 F8        	bne sspri0		; repeat 16 times
001BD2r 2  60           	rts
001BD3r 2               
001BD3r 2  00           acnt:	.byte 0
001BD4r 2               .endif
001BD4r 2               
001BD4r 2               ;-----------------------------------------------------------------
001BD4r 2               
001BD4r 2               ssprib:
001BD4r 2  20 rr rr     	jsr gspran 		; get new sprite address.
001BD7r 2  4C rr rr     	jmp sspri2
001BDAr 2               
001BDAr 2               ;-----------------------------------------------------------------
001BDAr 2               
001BDAr 2               sspric:
001BDAr 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001BDAr 2               .if rflag
001BDAr 2               	jsr gsprad 		; get old sprite address.
001BDAr 2               
001BDAr 2               	lda z80_e				; 3c
001BDAr 2               	sta ddline_spraddr3+1	; 4c
001BDAr 2               	sta ddline_spraddr4+1	; 4c
001BDAr 2               
001BDAr 2               	lda z80_d				; 3c
001BDAr 2               	sta ddline_spraddr3+2	; 4c
001BDAr 2               	sta ddline_spraddr4+2	; 4c
001BDAr 2               
001BDAr 2               	ldx sprshft
001BDAr 2               	lda shift_table,x
001BDAr 2               	sta ddline_shift3+1
001BDAr 2               	sta ddline_shift4+1
001BDAr 2               	lda shift_table+1,x
001BDAr 2               	sta ddline_shift3+2
001BDAr 2               	sta ddline_shift4+2
001BDAr 2               
001BDAr 2               	jsr exx  		; store addresses.
001BDAr 2               	jsr gspran 		; get new sprite addresses.
001BDAr 2               
001BDAr 2               	lda z80_e				; 3c
001BDAr 2               	sta ddline_spraddr1+1	; 4c
001BDAr 2               	sta ddline_spraddr2+1	; 4c
001BDAr 2               
001BDAr 2               	lda z80_d				; 3c
001BDAr 2               	sta ddline_spraddr1+2	; 4c
001BDAr 2               	sta ddline_spraddr2+2	; 4c
001BDAr 2               
001BDAr 2               	ldx sprshft
001BDAr 2               	lda shift_table,x
001BDAr 2               	sta ddline_shift1+1
001BDAr 2               	sta ddline_shift2+1
001BDAr 2               	lda shift_table+1,x
001BDAr 2               	sta ddline_shift1+2
001BDAr 2               	sta ddline_shift2+2
001BDAr 2               
001BDAr 2               	ldx #0
001BDAr 2               lloop:
001BDAr 2               	jsr ddline 		; draw a line.
001BDAr 2                 .if bflag
001BDAr 2               	cpx #48
001BDAr 2                 .else
001BDAr 2               	cpx #32
001BDAr 2                 .endif
001BDAr 2               	bne lloop
001BDAr 2               	rts
001BDAr 2               
001BDAr 2               shift_table:
001BDAr 2               .word shift0
001BDAr 2               .word shift2
001BDAr 2               .word shift4
001BDAr 2               .word shift6
001BDAr 2               
001BDAr 2               ;-------------------------------------------------------------
001BDAr 2               ; Drop through.
001BDAr 2               ; Line drawn, now work out next target address.
001BDAr 2               ;
001BDAr 2               ; Input:
001BDAr 2               ;  B  = right mask
001BDAr 2               ;  C  = left mask
001BDAr 2               ;  DE = spriteaddress
001BDAr 2               ;  scraddr = screen address
001BDAr 2               ;-------------------------------------------------------------
001BDAr 2               
001BDAr 2               dline:
001BDAr 2               
001BDAr 2               ; first screen byte
001BDAr 2               
001BDAr 2               dline_spraddr1:
001BDAr 2               	ldy $ffff,x 		; graphic data.
001BDAr 2               dline_shift1:
001BDAr 2               	lda $ffff,y
001BDAr 2               	sta sprtmp
001BDAr 2               	and z80_c 		; mask away what's not needed.
001BDAr 2               
001BDAr 2               	ldy #0
001BDAr 2               	eor (scraddr),y 	; XOR with what's there.
001BDAr 2               	sta (scraddr),y 	; bung it in.
001BDAr 2               
001BDAr 2               ; carry to next screen byte
001BDAr 2               
001BDAr 2               	lda sprtmp		; fetch data.
001BDAr 2               	and z80_b 		; mask away unwanted
001BDAr 2               	sta sprtmp
001BDAr 2               
001BDAr 2               ; middle screen byte
001BDAr 2               
001BDAr 2               	inx
001BDAr 2               dline_spraddr2:
001BDAr 2               	ldy $ffff,x 		; second bit of data.
001BDAr 2               dline_shift2:
001BDAr 2               	lda $ffff,y
001BDAr 2               	sta sprtmp2
001BDAr 2               	and z80_c 		; mask away what's not needed.
001BDAr 2               	ora sprtmp
001BDAr 2               	ldy #16
001BDAr 2               	eor (scraddr),y 	; XOR with what's there.
001BDAr 2               	sta (scraddr),y 	; bung it in.
001BDAr 2               
001BDAr 2               ; carry to last screen byte
001BDAr 2               
001BDAr 2               	lda sprtmp2
001BDAr 2               	and z80_b 		; mask away unwanted
001BDAr 2               
001BDAr 2               	ldy #24
001BDAr 2               	eor (scraddr),y 	; XOR with what's there.
001BDAr 2               	sta (scraddr),y 	; bung it in.
001BDAr 2               
001BDAr 2               	inx
001BDAr 2               .else
001BDAr 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
001BDAr 2  20 rr rr     	jsr gsprad 		; get old sprite address.
001BDDr 2  20 rr rr     	jsr exx  		; store addresses.
001BE0r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
001BE3r 2               
001BE3r 2               .if bflag
001BE3r 2               	lda #23
001BE3r 2               .else
001BE3r 2  A9 0F        	lda #15
001BE5r 2               .endif
001BE5r 2  85 rr        	sta ccnt
001BE7r 2               lloop:
001BE7r 2  20 rr rr     	jsr dline 		; draw a line.
001BEAr 2  20 rr rr     	jsr exx  		; restore old addresses.
001BEDr 2  20 rr rr     	jsr dline 		; delete a line.
001BF0r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
001BF3r 2  C6 rr        	dec ccnt
001BF5r 2  D0 F0        	bne lloop
001BF7r 2               
001BF7r 2  20 rr rr     	jsr dline		; draw a line.
001BFAr 2  20 rr rr     	jsr exx 		; restore old addresses.
001BFDr 2               
001BFDr 2               ;-------------------------------------------------------------
001BFDr 2               ; Drop through.
001BFDr 2               ; Line drawn, now work out next target address.
001BFDr 2               ;
001BFDr 2               ; Input:
001BFDr 2               ;  B  = right mask
001BFDr 2               ;  C  = left mask
001BFDr 2               ;  DE = spriteaddress
001BFDr 2               ;  scraddr = screen address
001BFDr 2               ;-------------------------------------------------------------
001BFDr 2               
001BFDr 2               dline:
001BFDr 2  A0 00        	ldy #0
001BFFr 2  B1 rr        	lda (z80_de),y 		; graphic data.
001C01r 2  48           	pha
001C02r 2  25 rr        	and z80_c 		; mask away what's not needed.
001C04r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
001C06r 2  91 rr        	sta (scraddr),y 	; left byte on screen.
001C08r 2               
001C08r 2               ; _BEEB screen arrangement
001C08r 2               ;	clc
001C08r 2               ;	lda scraddr
001C08r 2               ;	adc #16
001C08r 2               ;	sta scraddr
001C08r 2               ;	bcc :+
001C08r 2               ;	inc scraddr+1
001C08r 2               ;:
001C08r 2  68           	pla
001C09r 2  25 rr        	and z80_b 		; mask away unwanted bits.
001C0Br 2  A0 18        	ldy #24
001C0Dr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
001C0Fr 2  91 rr        	sta (scraddr),y 	; right byte on screen
001C11r 2               
001C11r 2  E6 rr        	inc z80_e 		; next graphic.
001C13r 2  D0 02        	bne :+
001C15r 2  E6 rr        	inc z80_d
001C17r 2               :
001C17r 2               ; _BEEB screen arrangement
001C17r 2               ;	sec
001C17r 2               ;	lda scraddr 		; one character cell to the left.
001C17r 2               ;	sbc #8
001C17r 2               ;	sta scraddr
001C17r 2               ;	lda scraddr+1
001C17r 2               ;	sbc #0
001C17r 2               ;	sta scraddr+1
001C17r 2               
001C17r 2  A0 00        	ldy #0
001C19r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
001C1Br 2  A0 10        	ldy #16
001C1Dr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
001C1Fr 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
001C21r 2               
001C21r 2  E6 rr        	inc z80_e 		; point to next line of data.
001C23r 2  D0 02        	bne :+
001C25r 2  E6 rr        	inc z80_d
001C27r 2               :
001C27r 2               ; _BEEB screen arrangement
001C27r 2               ;	sec
001C27r 2               ;	lda scraddr 		; another char left.
001C27r 2               ;	sbc #8
001C27r 2               ;	sta scraddr
001C27r 2               ;	lda scraddr+1
001C27r 2               ;	sbc #0
001C27r 2               ;	sta scraddr+1
001C27r 2               .endif
001C27r 2               
001C27r 2               ;----------------------------------------------------------------------
001C27r 2               ; Line drawn, now work out next target address.
001C27r 2               ;----------------------------------------------------------------------
001C27r 2               
001C27r 2               ; _BEEB screen arrangement
001C27r 2               
001C27r 2               nline:
001C27r 2  A5 rr        	lda scraddr 			; get low byte of address.
001C29r 2  29 0F        	and #15
001C2Br 2  C9 0F        	cmp #15				; is this last line of row?
001C2Dr 2  F0 03        	beq beeb_next_row
001C2Fr 2               
001C2Fr 2               	; within same row
001C2Fr 2  E6 rr        	inc scraddr			; new low byte of address.
001C31r 2  60           	rts
001C32r 2               
001C32r 2               beeb_next_row:
001C32r 2  18           	clc
001C33r 2  A5 rr        	lda scraddr
001C35r 2  69 51        	adc #<(ScreenRowBytes-15)
001C37r 2  85 rr        	sta scraddr			; new low byte of address.
001C39r 2  A5 rr        	lda scraddr+1
001C3Br 2  69 01        	adc #>(ScreenRowBytes-15)
001C3Dr 2  85 rr        	sta scraddr+1			; new high byte of address.
001C3Fr 2  60           	rts
001C40r 2               
001C40r 2               .if rflag
001C40r 2               ;-------------------------------------------------------------
001C40r 2               ; Drop through.
001C40r 2               ; Line drawn, now work out next target address.
001C40r 2               ;
001C40r 2               ; Input:
001C40r 2               ;  B  = right mask
001C40r 2               ;  C  = left mask
001C40r 2               ;  DE = spriteaddress
001C40r 2               ;  scraddr = screen address
001C40r 2               ;-------------------------------------------------------------
001C40r 2               
001C40r 2               ddline:
001C40r 2               
001C40r 2               ; NEW SPRITE
001C40r 2               
001C40r 2               ; first screen byte
001C40r 2               
001C40r 2               ddline_spraddr1:
001C40r 2               	ldy $ffff,x 		; graphic data.
001C40r 2               ddline_shift1:
001C40r 2               	lda $ffff,y
001C40r 2               	sta sprtmp
001C40r 2               	and z80_c 			; mask away what's not needed.
001C40r 2               
001C40r 2               	ldy #0
001C40r 2               	eor (scraddr),y 	; XOR with what's there.
001C40r 2               	sta (scraddr),y 	; bung it in.
001C40r 2               
001C40r 2               ; carry to next screen byte
001C40r 2               
001C40r 2               	lda sprtmp			; fetch data.
001C40r 2               	and z80_b 			; mask away unwanted
001C40r 2               	sta sprtmp
001C40r 2               
001C40r 2               ; middle screen byte
001C40r 2               
001C40r 2               	inx
001C40r 2               ddline_spraddr2:
001C40r 2               	ldy $ffff,x 		; second bit of data.
001C40r 2               ddline_shift2:
001C40r 2               	lda $ffff,y
001C40r 2               	sta sprtmp2
001C40r 2               	and z80_c 			; mask away what's not needed.
001C40r 2               	ora sprtmp
001C40r 2               
001C40r 2               	ldy #16
001C40r 2               	eor (scraddr),y 	; XOR with what's there.
001C40r 2               	sta (scraddr),y 	; bung it in.
001C40r 2               
001C40r 2               ; carry to last screen byte
001C40r 2               
001C40r 2               	lda sprtmp2
001C40r 2               	and z80_b 			; mask away unwanted
001C40r 2               
001C40r 2               	ldy #24
001C40r 2               	eor (scraddr),y 	; XOR with what's there.
001C40r 2               	sta (scraddr),y 	; bung it in.
001C40r 2               
001C40r 2               ; _BEEB next row
001C40r 2               
001C40r 2               	lda scraddr 		; get low byte of address.
001C40r 2               	and #15
001C40r 2               	cmp #15				; is this last line of row?
001C40r 2               	beq :+
001C40r 2               
001C40r 2               	; within same row can't increment page
001C40r 2               	inc scraddr			; new low byte of address.
001C40r 2               	bne ddline2
001C40r 2               
001C40r 2               :
001C40r 2               	clc
001C40r 2               	lda scraddr
001C40r 2               	adc #<(ScreenRowBytes-15)
001C40r 2               	sta scraddr			; new low byte of address.
001C40r 2               	lda scraddr+1
001C40r 2               	adc #>(ScreenRowBytes-15)
001C40r 2               	sta scraddr+1		; new high byte of address.
001C40r 2               
001C40r 2               ; OLD SPRITE
001C40r 2               
001C40r 2               ddline2:
001C40r 2               
001C40r 2               ; still first row but different data!
001C40r 2               
001C40r 2               	dex
001C40r 2               
001C40r 2               ; first screen byte
001C40r 2               
001C40r 2               ddline_spraddr3:
001C40r 2               	ldy $ffff,x			; graphic data.
001C40r 2               ddline_shift3:
001C40r 2               	lda $ffff,y
001C40r 2               	sta sprtmp
001C40r 2               	and z80_cp 			; mask away what's not needed.
001C40r 2               
001C40r 2               	ldy #0
001C40r 2               	eor (z80_hlp),y 	; XOR with what's there.
001C40r 2               	sta (z80_hlp),y 	; bung it in.
001C40r 2               
001C40r 2               ; carry to next screen byte
001C40r 2               
001C40r 2               	lda sprtmp			; fetch data.
001C40r 2               	and z80_bp 			; mask away unwanted
001C40r 2               	sta sprtmp
001C40r 2               
001C40r 2               ; middle screen byte
001C40r 2               
001C40r 2               	inx
001C40r 2               ddline_spraddr4:
001C40r 2               	ldy $ffff,x 		; second bit of data.
001C40r 2               ddline_shift4:
001C40r 2               	lda $ffff,y
001C40r 2               	sta sprtmp2
001C40r 2               	and z80_cp 			; mask away what's not needed.
001C40r 2               	ora sprtmp
001C40r 2               
001C40r 2               	ldy #16
001C40r 2               	eor (z80_hlp),y 	; XOR with what's there.
001C40r 2               	sta (z80_hlp),y 	; bung it in.
001C40r 2               
001C40r 2               ; last screen byte
001C40r 2               
001C40r 2               	lda sprtmp2			; fetch data.
001C40r 2               	and z80_bp 			; mask away unwanted
001C40r 2               
001C40r 2               	ldy #24
001C40r 2               	eor (z80_hlp),y 	; XOR with what's there.
001C40r 2               	sta (z80_hlp),y 	; bung it in.
001C40r 2               
001C40r 2               ; next row of sprite data
001C40r 2               
001C40r 2               	inx
001C40r 2               
001C40r 2               ; _BEEB screen arrangement
001C40r 2               
001C40r 2               	lda z80_lp 			; get low byte of address.
001C40r 2               	and #15
001C40r 2               	cmp #15				; is this last line of row?
001C40r 2               	beq :+
001C40r 2               
001C40r 2               	; within same row can't increment page
001C40r 2               	inc z80_lp			; new low byte of address.
001C40r 2               	rts
001C40r 2               
001C40r 2               :
001C40r 2               	clc
001C40r 2               	lda z80_lp
001C40r 2               	adc #<(ScreenRowBytes-15)
001C40r 2               	sta z80_lp			; new low byte of address.
001C40r 2               	lda z80_lp+1
001C40r 2               	adc #>(ScreenRowBytes-15)
001C40r 2               	sta z80_lp+1		; new high byte of address.
001C40r 2               	rts
001C40r 2               .endif
001C40r 2               
001C40r 2               ;----------------------------------------------------
001C40r 2               ; Display character in A at dispx,dispy.
001C40r 2               ;
001C40r 2               ; Input:
001C40r 2               ;  A 	   = character to print
001C40r 2               ;----------------------------------------------------
001C40r 2               
001C40r 2               pchar:
001C40r 2  85 rr        	sta fntaddr
001C42r 2  A9 00        	lda #0
001C44r 2  85 rr        	sta fntaddr+1
001C46r 2  06 rr        	asl fntaddr  		; multiply char by 8.
001C48r 2  26 rr        	rol fntaddr+1
001C4Ar 2  06 rr        	asl fntaddr
001C4Cr 2  26 rr        	rol fntaddr+1
001C4Er 2  06 rr        	asl fntaddr
001C50r 2  26 rr        	rol fntaddr+1
001C52r 2               
001C52r 2  A5 rr        	lda fntaddr
001C54r 2  18           	clc
001C55r 2  69 rr        	adc #<(FONT-256)
001C57r 2  85 rr        	sta fntaddr		; that's the low byte.
001C59r 2  A5 rr        	lda fntaddr+1
001C5Br 2  69 rr        	adc #>(FONT-256)
001C5Dr 2  85 rr        	sta fntaddr+1		; add displacement.
001C5Fr 2               pchark:
001C5Fr 2  20 rr rr     	jsr gprad		; get screen address.
001C62r 2  A2 07        	ldx #7			; lines to write.
001C64r 2               pchar0:
001C64r 2  A0 00        	ldy #0
001C66r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
001C68r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
001C6Br 2               .if iflag
001C6Br 2               	eor #TxtInvert		; Invert
001C6Br 2               .endif
001C6Br 2  91 rr        	sta (scraddr),y 	; copy to screen.
001C6Dr 2  E6 rr        	inc fntaddr		; next image byte.
001C6Fr 2  D0 02        	bne :+
001C71r 2  E6 rr        	inc fntaddr+1
001C73r 2               :
001C73r 2  CA           	dex			; next screen row down.
001C74r 2  10 EE        	bpl pchar0		; repeat.
001C76r 2  60           	rts
001C77r 2               
001C77r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
001C7Br 2  03 02 01 00  
001C7Fr 2               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
001C7Fr 2               
001C7Fr 2               .if rflag
001C7Fr 2               ;----------------------------------------------------
001C7Fr 2               ; Shift tables
001C7Fr 2               ;----------------------------------------------------
001C7Fr 2               
001C7Fr 2               .align 256
001C7Fr 2               shift0:
001C7Fr 2               .repeat 256, i
001C7Fr 2               	.byte i
001C7Fr 2               .endrep
001C7Fr 2               
001C7Fr 2               shift2:
001C7Fr 2               .repeat 256, i
001C7Fr 2               	.byte (i >> 2) | (i << 6) & $c0
001C7Fr 2               .endrep
001C7Fr 2               
001C7Fr 2               shift4:
001C7Fr 2               .repeat 256, i
001C7Fr 2               	.byte (i >> 4) | ((i << 4) & $f0)
001C7Fr 2               .endrep
001C7Fr 2               
001C7Fr 2               shift6:
001C7Fr 2               .repeat 256, i
001C7Fr 2               	.byte (i >> 6) | ((i << 2) & $fc)
001C7Fr 2               .endrep
001C7Fr 2               .endif
001C7Fr 2               
001C7Fr 1               	.include "z80.asm"
001C7Fr 2               ;------------------------------------------------------
001C7Fr 2               ; z80.asm
001C7Fr 2               ; spectrum stuff
001C7Fr 2               ; adresses
001C7Fr 2               
001C7Fr 2               ;ws	 = $60
001C7Fr 2               
001C7Fr 2               ;z80_f	 = ws+$00
001C7Fr 2               ;z80_a	 = ws+$01
001C7Fr 2               ;z80_af	 = z80_f
001C7Fr 2               
001C7Fr 2               ;z80_c	 = ws+$02
001C7Fr 2               ;z80_b	 = ws+$03
001C7Fr 2               ;z80_bc	 = z80_c
001C7Fr 2               
001C7Fr 2               ;z80_e	 = ws+$04
001C7Fr 2               ;z80_d	 = ws+$05
001C7Fr 2               ;z80_de	 = z80_e
001C7Fr 2               
001C7Fr 2               ;z80_l	 = ws+$06
001C7Fr 2               ;z80_h	 = ws+$07
001C7Fr 2               ;z80_hl	 = z80_l
001C7Fr 2               
001C7Fr 2               ;z80_x    = ws+$08
001C7Fr 2               ;z80_i    = ws+$09
001C7Fr 2               ;z80_ix	 = z80_x
001C7Fr 2               
001C7Fr 2               ;z80_iy	 = ws+$0a
001C7Fr 2               
001C7Fr 2               ;z80_fp	 = ws+$0c
001C7Fr 2               ;z80_ap	 = ws+$0d
001C7Fr 2               
001C7Fr 2               ;z80_cp	 = ws+$0e
001C7Fr 2               ;z80_bp	 = ws+$0f
001C7Fr 2               ;z80_bcp = z80_cp
001C7Fr 2               
001C7Fr 2               ;z80_ep	 = ws+$10
001C7Fr 2               ;z80_dp	 = ws+$11
001C7Fr 2               ;z80_dep = z80_ep
001C7Fr 2               
001C7Fr 2               ;z80_lp	 = ws+$12
001C7Fr 2               ;z80_hp	 = ws+$13
001C7Fr 2               ;z80_hlp = z80_lp
001C7Fr 2               
001C7Fr 2               ;z80_sp   = ws+$14
001C7Fr 2               
001C7Fr 2               ;z80_reg0 = ws+$16
001C7Fr 2               ;z80_reg1 = ws+$17
001C7Fr 2               ;z80_reg2 = ws+$18
001C7Fr 2               ;z80_reg3 = ws+$19
001C7Fr 2               
001C7Fr 2               ;z80_r	 = ws+$1a
001C7Fr 2               
001C7Fr 2               ; Contains seperatly 1 bit set
001C7Fr 2               ; _BEEB this is not safe memory to use as required by MOS
001C7Fr 2               
001C7Fr 2               _bitmem0	= $f8
001C7Fr 2               _bitmem1	= $f9
001C7Fr 2               _bitmem2	= $fa
001C7Fr 2               _bitmem3	= $fb
001C7Fr 2               _bitmem4	= $fc
001C7Fr 2               _bitmem5	= $fd
001C7Fr 2               _bitmem6	= $fe
001C7Fr 2               _bitmem7	= $ff
001C7Fr 2               
001C7Fr 2               ; constants
001C7Fr 2               _bitvalue0	= $01
001C7Fr 2               _bitvalue1	= $02
001C7Fr 2               _bitvalue2	= $04
001C7Fr 2               _bitvalue3	= $08
001C7Fr 2               _bitvalue4	= $10
001C7Fr 2               _bitvalue5	= $20
001C7Fr 2               _bitvalue6	= $40
001C7Fr 2               _bitvalue7	= $80
001C7Fr 2               
001C7Fr 2               _notbitvalue0	= $fe
001C7Fr 2               _notbitvalue1	= $fd
001C7Fr 2               _notbitvalue2	= $fb
001C7Fr 2               _notbitvalue3	= $f7
001C7Fr 2               _notbitvalue4	= $ef
001C7Fr 2               _notbitvalue5	= $df
001C7Fr 2               _notbitvalue6	= $bf
001C7Fr 2               _notbitvalue7	= $7f
001C7Fr 2               
001C7Fr 2               
001C7Fr 2               ;add_hl_bc:
001C7Fr 2               ;		lda z80_l
001C7Fr 2               ;		clc
001C7Fr 2               ;		adc z80_c
001C7Fr 2               ;		sta z80_l
001C7Fr 2               ;		lda z80_h
001C7Fr 2               ;		adc z80_b
001C7Fr 2               ;		sta z80_h
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;add_ix_de:
001C7Fr 2               ;		lda z80_ix
001C7Fr 2               ;		clc
001C7Fr 2               ;		adc z80_e
001C7Fr 2               ;		sta z80_ix
001C7Fr 2               ;		lda z80_ix+1
001C7Fr 2               ;		adc z80_d
001C7Fr 2               ;		sta z80_ix+1
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;add_iy_de:
001C7Fr 2               ;		lda z80_iy
001C7Fr 2               ;		clc
001C7Fr 2               ;		adc z80_e
001C7Fr 2               ;		sta z80_iy
001C7Fr 2               ;		lda z80_iy+1
001C7Fr 2               ;		adc z80_d
001C7Fr 2               ;		sta z80_iy+1
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;add_hl_de:
001C7Fr 2               ;		lda z80_l
001C7Fr 2               ;		clc
001C7Fr 2               ;		adc z80_e
001C7Fr 2               ;		sta z80_l
001C7Fr 2               ;		lda z80_h
001C7Fr 2               ;		adc z80_d
001C7Fr 2               ;		sta z80_h
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;add_ix_bc:
001C7Fr 2               ;		lda z80_ix
001C7Fr 2               ;		clc
001C7Fr 2               ;		adc z80_c
001C7Fr 2               ;		sta z80_ix
001C7Fr 2               ;		lda z80_ix+1
001C7Fr 2               ;		adc z80_b
001C7Fr 2               ;		sta z80_ix+1
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;add_iy_bc:
001C7Fr 2               ;		lda z80_iy
001C7Fr 2               ;		clc
001C7Fr 2               ;		adc z80_c
001C7Fr 2               ;		sta z80_iy
001C7Fr 2               ;		lda z80_iy+1
001C7Fr 2               ;		adc z80_b
001C7Fr 2               ;		sta z80_iy+1
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;sbc_hl_de:
001C7Fr 2               ;		lda z80_l
001C7Fr 2               ;		sbc z80_e
001C7Fr 2               ;		sta z80_l
001C7Fr 2               ;		lda z80_h
001C7Fr 2               ;		sbc z80_d
001C7Fr 2               ;		sta z80_h
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;sbc_hl_bc:
001C7Fr 2               ;		lda z80_l
001C7Fr 2               ;		sbc z80_c
001C7Fr 2               ;		sta z80_l
001C7Fr 2               ;		lda z80_h
001C7Fr 2               ;		sbc z80_b
001C7Fr 2               ;		sta z80_h
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;cmp_hl_bc:
001C7Fr 2               ;		lda z80_l
001C7Fr 2               ;		cmp z80_c
001C7Fr 2               ;		bne cmp_hl_bc_end
001C7Fr 2               ;		lda z80_h
001C7Fr 2               ;		cmp z80_b
001C7Fr 2               ;cmp_hl_bc_end:
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;cmp_iy_ix:
001C7Fr 2               ;		lda z80_iy
001C7Fr 2               ;		cmp z80_ix
001C7Fr 2               ;		bne cmp_iy_ix_end
001C7Fr 2               ;		lda z80_iy+1
001C7Fr 2               ;		cmp z80_ix+1
001C7Fr 2               ;cmp_iy_ix_end:
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;dec_hl:
001C7Fr 2               ;		lda z80_l
001C7Fr 2               ;		bne dec_hl_no_dec_h
001C7Fr 2               ;		dec z80_h
001C7Fr 2               ;dec_hl_no_dec_h:
001C7Fr 2               ;		dec z80_l
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;dec_ix:
001C7Fr 2               ;		lda z80_ix
001C7Fr 2               ;		bne dec_ix_no_dec_h
001C7Fr 2               ;		dec z80_ix+1
001C7Fr 2               ;dec_ix_no_dec_h:
001C7Fr 2               ;		dec z80_ix
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;dec_bc:
001C7Fr 2               ;		lda z80_c
001C7Fr 2               ;		bne dec_bc_no_dec_b
001C7Fr 2               ;		dec z80_b
001C7Fr 2               ;dec_bc_no_dec_b:
001C7Fr 2               ;		dec z80_c
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;dec_de:
001C7Fr 2               ;		lda z80_e
001C7Fr 2               ;		bne dec_de_no_dec_d
001C7Fr 2               ;		dec z80_d
001C7Fr 2               ;dec_de_no_dec_d:
001C7Fr 2               ;		dec z80_e
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               ;ex_af_afs:
001C7Fr 2               ;	rts
001C7Fr 2               ;ex_de_hl:
001C7Fr 2               ;		lda z80_e
001C7Fr 2               ;		ldx z80_l
001C7Fr 2               ;		stx z80_e
001C7Fr 2               ;		sta z80_l
001C7Fr 2               ;		lda z80_d
001C7Fr 2               ;		ldx z80_h
001C7Fr 2               ;		stx z80_d
001C7Fr 2               ;		sta z80_h
001C7Fr 2               ;		rts
001C7Fr 2               ;
001C7Fr 2               exx:
001C7Fr 2  A5 rr        		lda z80_c
001C81r 2  A4 rr        		ldy z80_cp
001C83r 2  84 rr        		sty z80_c
001C85r 2  85 rr        		sta z80_cp
001C87r 2  A5 rr        		lda z80_b
001C89r 2  A4 rr        		ldy z80_bp
001C8Br 2  84 rr        		sty z80_b
001C8Dr 2  85 rr        		sta z80_bp
001C8Fr 2  A5 rr        		lda z80_e
001C91r 2  A4 rr        		ldy z80_ep
001C93r 2  84 rr        		sty z80_e
001C95r 2  85 rr        		sta z80_ep
001C97r 2  A5 rr        		lda z80_d
001C99r 2  A4 rr        		ldy z80_dp
001C9Br 2  84 rr        		sty z80_d
001C9Dr 2  85 rr        		sta z80_dp
001C9Fr 2  A5 rr        		lda scraddr
001CA1r 2  A4 rr        		ldy z80_lp
001CA3r 2  84 rr        		sty scraddr
001CA5r 2  85 rr        		sta z80_lp
001CA7r 2  A5 rr        		lda scraddr+1
001CA9r 2  A4 rr        		ldy z80_hp
001CABr 2  84 rr        		sty scraddr+1
001CADr 2  85 rr        		sta z80_hp
001CAFr 2  60           		rts
001CB0r 2               
001CB0r 2               ;ex_sp_hl:
001CB0r 2               ;		tsx
001CB0r 2               ;		lda $0103,x
001CB0r 2               ;		ldy z80_h
001CB0r 2               ;		sta z80_h
001CB0r 2               ;		tya
001CB0r 2               ;		sta $0103,x
001CB0r 2               ;		lda $0104,x
001CB0r 2               ;		ldy z80_l
001CB0r 2               ;		sta z80_l
001CB0r 2               ;		tya
001CB0r 2               ;		sta $104,x
001CB0r 2               ;		rts
001CB0r 2               ;
001CB0r 2               ;ldi:
001CB0r 2               ;	rts
001CB0r 2               ;ldir:
001CB0r 2               ;		ldy #$00
001CB0r 2               ;		ldx z80_b
001CB0r 2               ;		beq ldir_last_page
001CB0r 2               ;ldir_loop:
001CB0r 2               ;		lda (z80_hl),y
001CB0r 2               ;		sta (z80_de),y
001CB0r 2               ;		iny
001CB0r 2               ;		bne ldir_loop
001CB0r 2               ;		inc z80_h
001CB0r 2               ;		inc z80_d
001CB0r 2               ;		dex
001CB0r 2               ;		bne ldir_loop
001CB0r 2               ;ldir_last_page:
001CB0r 2               ;		lda z80_c
001CB0r 2               ;		beq ldir_end
001CB0r 2               ;ldir_last_page_loop:
001CB0r 2               ;		lda (z80_hl),y
001CB0r 2               ;		sta (z80_de),y
001CB0r 2               ;		iny
001CB0r 2               ;		cpy z80_c
001CB0r 2               ;		bne ldir_last_page_loop
001CB0r 2               ;ldir_end:
001CB0r 2               ;		stx z80_c
001CB0r 2               ;		stx z80_b
001CB0r 2               ;		tya
001CB0r 2               ;		clc
001CB0r 2               ;		adc z80_l
001CB0r 2               ;		sta z80_l
001CB0r 2               ;		bcc *+4
001CB0r 2               ;		inc z80_h
001CB0r 2               ;		tya
001CB0r 2               ;		clc
001CB0r 2               ;		adc z80_e
001CB0r 2               ;		sta z80_e
001CB0r 2               ;		bcc *+4
001CB0r 2               ;		inc z80_d
001CB0r 2               ;		rts
001CB0r 2               ;
001CB0r 2               ;lddr:		ldy #$00
001CB0r 2               ;lddr_loop:
001CB0r 2               ;		lda (z80_hl),y
001CB0r 2               ;		sta (z80_de),y
001CB0r 2               ;		jsr dec_hl
001CB0r 2               ;		jsr dec_de
001CB0r 2               ;		jsr dec_bc
001CB0r 2               ;		lda z80_b
001CB0r 2               ;		ora z80_c
001CB0r 2               ;		bne lddr_loop
001CB0r 2               ;		rts
001CB0r 2               ;ei:
001CB0r 2               ;		rts
001CB0r 2               ;di:
001CB0r 2               ;		rts
001CB0r 2               
001CB0r 2               ;-------------------------------------------------------------
001CB0r 2               ; Set bits in bitmem
001CB0r 2               ;-------------------------------------------------------------
001CB0r 2               
001CB0r 2               .if 0
001CB0r 2               z80_init:
001CB0r 2               	ldx #$00
001CB0r 2               	lda #$01
001CB0r 2               z80_init_loop:
001CB0r 2               	sta _bitmem0,x
001CB0r 2               	inx
001CB0r 2               	asl a
001CB0r 2               	bne z80_init_loop
001CB0r 2               	rts
001CB0r 2               .endif
001CB0r 2               
001CB0r 2               push_af:
001CB0r 2               push_bc:
001CB0r 2               push_de:
001CB0r 2               push_hl:
001CB0r 2               
001CB0r 2               pop_af:
001CB0r 2               pop_bc:
001CB0r 2               pop_de:
001CB0r 2               pop_ix:
001CB0r 2               pop_hl:
001CB0r 2               
001CB0r 2               add_hl_hl:
001CB0r 2               
001CB0r 2               inc_bc:
001CB0r 2               inc_de:
001CB0r 2               inc_hl:
001CB0r 2               inc_ix:
001CB0r 2               inc_sp:
001CB0r 2               
001CB0r 2               cpir:
001CB0r 2               
001CB0r 2               ex_af_af:
001CB0r 2               ;	rts
001CB0r 2               
001CB0r 1               eind_asm:
001CB0r 1               eop:					; End Of Program
001CB0r 1               
001CB0r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(35840-eind_asm + main))
001CB0r 1               
