ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "slasher.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               ;swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  01           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  14           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  03           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  08           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  98           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 CC        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3               	lda #<objdta		; objects table.
000026r 3               	sta z80_x
000026r 3               	lda #>objdta
000026r 3               	sta z80_i
000026r 3               
000026r 3               	ldx numob 		; number of objects in the game.
000026r 3               iniob0:
000026r 3               	ldy #36
000026r 3               	lda (z80_ix),y 		; start screen.
000026r 3               	ldy #33
000026r 3               	sta (z80_ix),y 		; set start screen.
000026r 3               
000026r 3               	ldy #37
000026r 3               	lda (z80_ix),y 		; find start y.
000026r 3               	ldy #34
000026r 3               	sta (z80_ix),y 		; set start y.
000026r 3               
000026r 3               	ldy #38
000026r 3               	lda (z80_ix),y 		; get initial x.
000026r 3               	ldy #35
000026r 3               	sta (z80_ix),y 		; set x coord.
000026r 3               
000026r 3               	clc 			; point to next object.
000026r 3               	lda z80_x
000026r 3               	adc #39			; distance between objects.
000026r 3               	sta z80_x
000026r 3               	bcc :+
000026r 3               	inc z80_i
000026r 3               :
000026r 3               	dex 			; repeat.
000026r 3               	bne iniob0
000026r 3               
000026r 3               	rts
000026r 3               .endif
000026r 3               
000026r 3               ;-----------------------------------------------
000026r 3               ; Redraw the screen.
000026r 3               ;
000026r 3               ; Remove old copy of all sprites for redraw.
000026r 3               ;-----------------------------------------------
000026r 3               
000026r 3               redraw:
000026r 3               .if xflag
000026r 3               	lda #WINDOWWID
000026r 3               	sta winwid
000026r 3               	lda #WINDOWHGT
000026r 3               	sta winhgt
000026r 3               .endif
000026r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000028r 3  48           	pha
000029r 3  A5 rr        	lda z80_x
00002Br 3  48           	pha
00002Cr 3               
00002Cr 3  20 rr rr     	jsr droom		; show screen layout.
00002Fr 3               .if oflag
00002Fr 3               	jsr shwob		; draw objects.
00002Fr 3               .endif
00002Fr 3               numsp0:
00002Fr 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000031r 3  85 rr        	sta tmp
000033r 3               
000033r 3  A9 rr        	lda #<sprtab		; sprite table.
000035r 3  85 rr        	sta z80_x
000037r 3  A9 rr        	lda #>sprtab
000039r 3  85 rr        	sta z80_i
00003Br 3               redrw0:
00003Br 3  A0 00        	ldy #0
00003Dr 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00003Fr 3  C9 FF        	cmp #255		; is it enabled?
000041r 3  F0 0B        	beq redrw1 		; no, find next one.
000043r 3               
000043r 3  A0 03        	ldy #var_Y
000045r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000047r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000049r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
00004Br 3               
00004Br 3  20 rr rr     	jsr sspria		; show single sprite.
00004Er 3               
00004Er 3               redrw1:
00004Er 3  18           	clc			; next sprite.
00004Fr 3  A5 rr        	lda z80_x
000051r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000053r 3  85 rr        	sta z80_x
000055r 3  90 02        	bcc :+
000057r 3  E6 rr        	inc z80_i
000059r 3               :
000059r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
00005Br 3  D0 DE        	bne redrw0
00005Dr 3               
00005Dr 3               rpblc1:
00005Dr 3               ;	jsr dshrp		; redraw shrapnel.
00005Dr 3               
00005Dr 3               .if aflag
00005Dr 3               	jsr rbloc		; draw blocks for this screen
00005Dr 3               .endif
00005Dr 3  68           	pla			; retrieve sprite pointer.
00005Er 3  85 rr        	sta z80_x
000060r 3  68           	pla
000061r 3  85 rr        	sta z80_i
000063r 3               
000063r 3  60           	rts
000064r 3               
000064r 3               ;----------------------------------------------------------------------
000064r 3               ; Clear screen routine.
000064r 3               ;
000064r 3               ; Fill screenmem $8000-$97ff with ScrFillByte
000064r 3               ;----------------------------------------------------------------------
000064r 3               
000064r 3               cls:
000064r 3  A9 10        	lda #>CharAddress	; Character RAM address.
000066r 3  8D rr rr     	sta clsloop+2
000069r 3               
000069r 3  A9 00        	lda #ScrFillByte	; Clear screen
00006Br 3  A0 00        	ldy #0
00006Dr 3  A2 10        	ldx #16
00006Fr 3               clsloop:
00006Fr 3  99 00 10     	sta CharAddress,y
000072r 3  C8           	iny
000073r 3  D0 FA        	bne clsloop
000075r 3  EE rr rr     	inc clsloop+2
000078r 3  CA           	dex
000079r 3  D0 F4        	bne clsloop
00007Br 3  60           	rts
00007Cr 3               
00007Cr 3               ;----------------------------------------------------------------------
00007Cr 3               ; Clear colour attributes
00007Cr 3               ;
00007Cr 3               ; Reset colour attributes to fontcol
00007Cr 3               ;----------------------------------------------------------------------
00007Cr 3               
00007Cr 3               clrcol:
00007Cr 3  AD rr rr     	lda fontcol		; Clear colour attributes
00007Fr 3  A2 00        	ldx #0
000081r 3               clscol:
000081r 3  9D 00 96     	sta ColorAttr,x
000084r 3  E8           	inx
000085r 3  E0 F2        	cpx #242
000087r 3  D0 F8        	bne clscol
000089r 3               
000089r 3  60           	rts
00008Ar 3               
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               ; FODDER check
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               
00008Ar 3               .if pflag .or dflag
00008Ar 3               fdchk:
00008Ar 3               	cmp #FODDER 		; is it fodder?
00008Ar 3               	beq :+
00008Ar 3               	rts 			; no.
00008Ar 3               :
00008Ar 3               	lda #0			; wipe fodder in MAP
00008Ar 3               	ldy #0
00008Ar 3               	sta (bufaddr),y 	; rewrite block type.
00008Ar 3               
00008Ar 3               	lda dispx		; x=x/8
00008Ar 3               	pha
00008Ar 3               	lsr a
00008Ar 3               	lsr a
00008Ar 3               	lsr a
00008Ar 3               	sta dispx
00008Ar 3               
00008Ar 3               	lda dispy		; y=y/8
00008Ar 3               	pha
00008Ar 3               	lsr a
00008Ar 3               	lsr a
00008Ar 3               	lsr a
00008Ar 3               	sta dispy
00008Ar 3               
00008Ar 3               	lda #0 			; block to write.
00008Ar 3               	jsr pattr 		; write block.
00008Ar 3               
00008Ar 3               	pla
00008Ar 3               	sta dispy
00008Ar 3               	pla
00008Ar 3               	sta dispx
00008Ar 3               	rts
00008Ar 3               .endif
00008Ar 3               
00008Ar 3               ;----------------------------------------------------
00008Ar 3               ; Scrolly text and puzzle variables.
00008Ar 3               ;----------------------------------------------------
00008Ar 3               
00008Ar 3               .if sflag
00008Ar 3               txtbit:	.byte 128		; bit to write.
00008Ar 3               txtwid:	.byte 16		; width of ticker message.
00008Ar 3               txtpos:	.word msgdat
00008Ar 3               txtini:	.word msgdat
00008Ar 3               txtscr:	.word ScreenAddr
00008Ar 3               .endif
00008Ar 3               
00008Ar 3               ;----------------------------------------------------
00008Ar 3               ; Specialist routines.
00008Ar 3               ; Process shrapnel.
00008Ar 3               ;----------------------------------------------------
00008Ar 3               proshr:
00008Ar 3               .if pflag
00008Ar 3               	lda #<SHRAPN		; table.
00008Ar 3               	sta z80_x
00008Ar 3               	lda #>SHRAPN
00008Ar 3               	sta z80_i
00008Ar 3               
00008Ar 3               	lda #NUMSHR		; shrapnel pieces to process.
00008Ar 3               	sta shrctr
00008Ar 3               prosh0:
00008Ar 3               	ldy #0
00008Ar 3               	lda (z80_ix),y		; on/off marker.
00008Ar 3               	asl a
00008Ar 3               proshx:
00008Ar 3               	bcs :+
00008Ar 3               	jsr prosh1 		; on, so process it.
00008Ar 3               :
00008Ar 3               	clc
00008Ar 3               	lda z80_x
00008Ar 3               	adc #SHRSIZ
00008Ar 3               	sta z80_x
00008Ar 3               	bcc :+
00008Ar 3               	inc z80_i
00008Ar 3               :
00008Ar 3               	dec shrctr		; round again.
00008Ar 3               	bne prosh0
00008Ar 3               .endif
00008Ar 3               .if sflag
00008Ar 3               	jsr scrly
00008Ar 3               .endif
00008Ar 3  60           	rts
00008Br 3               
00008Br 3               .if pflag
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Proces shrapnel piece
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               prosh1:
00008Br 3               	jsr plot 		; delete the pixel.
00008Br 3               
00008Br 3               	lda #<shrptr		; shrapnel routine pointers.
00008Br 3               	sta z80_l
00008Br 3               	lda #>shrptr
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	ldy #0
00008Br 3               	lda (z80_ix),y		; restore shrapnel type.
00008Br 3               	jsr prosh2 		; run the routine.
00008Br 3               	jsr chkxy		; check x and y are good before we redisplay.
00008Br 3               
00008Br 3               	lda #<SHRSIZ 		; distance to next.
00008Br 3               	sta z80_e
00008Br 3               	lda #>SHRSIZ
00008Br 3               	sta z80_d
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Run the routine
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               prosh2:
00008Br 3               	asl a 			; 2 bytes per address.
00008Br 3               	tay
00008Br 3               	lda shrptr,y
00008Br 3               	sta z80_l
00008Br 3               	lda shrptr+1,y 		; fetch high byte from table.
00008Br 3               	sta z80_h
00008Br 3               	jmp (z80_hl) 		; jump to routine.
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Paricle routine table
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               shrptr:	.word laser		; laser.
00008Br 3               	.word trail		; vapour trail.
00008Br 3               	.word shrap		; shrapnel from explosion.
00008Br 3               	.word dotl		; horizontal starfield left.
00008Br 3               	.word dotr		; horizontal starfield right.
00008Br 3               	.word dotu		; vertical starfield up.
00008Br 3               	.word dotd		; vertical starfield down.
00008Br 3               	.word ptcusr		; user particle.
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Explosion shrapnel.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               shrap:
00008Br 3               	ldy #1
00008Br 3               	lda (z80_ix),y 		; get the angle.
00008Br 3               	clc
00008Br 3               	adc #<shrsin		; shrapnel sine table.
00008Br 3               	sta z80_l
00008Br 3               	lda #>shrsin
00008Br 3               	adc #0
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	ldy #0
00008Br 3               	lda (z80_hl),y 		; fetch value from table.
00008Br 3               	sta z80_e
00008Br 3               	inc z80_l 		; next byte of table.
00008Br 3               	bne :+
00008Br 3               	inc z80_h
00008Br 3               :
00008Br 3               	ldy #0
00008Br 3               	lda (z80_hl),y		; fetch value from table.
00008Br 3               	sta z80_d
00008Br 3               	inc z80_l		; next byte of table.
00008Br 3               	bne :+
00008Br 3               	inc z80_h
00008Br 3               :
00008Br 3               	ldy #0
00008Br 3               	lda (z80_hl),y 		; fetch value from table.
00008Br 3               	sta z80_c
00008Br 3               	inc z80_l 		; next byte of table.
00008Br 3               	bne :+
00008Br 3               	inc z80_h
00008Br 3               :
00008Br 3               	ldy #0
00008Br 3               	lda (z80_hl),y 		; fetch value from table.
00008Br 3               	sta z80_b
00008Br 3               
00008Br 3               	ldy #2
00008Br 3               	lda (z80_ix),y 		; x coordinate in hl.
00008Br 3               	clc
00008Br 3               	adc z80_e		; add sine lb
00008Br 3               	sta (z80_ix),y		; store new coordinate lb.
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y
00008Br 3               	adc z80_d		; add sine hb
00008Br 3               	sta (z80_ix),y		; store new coordinate hb.
00008Br 3               
00008Br 3               	ldy #4
00008Br 3               	lda (z80_ix),y	 	; y coordinate in hl.
00008Br 3               	clc
00008Br 3               	adc z80_c		; add cosine lb
00008Br 3               	sta (z80_ix),y		; store new coordinate lb.
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y
00008Br 3               	adc z80_b		; add cosine lb
00008Br 3               	sta (z80_ix),y		; store new coordinate hb.
00008Br 3               
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Move dots
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               dotl:
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y
00008Br 3               	sec
00008Br 3               	sbc #1		 	; move left.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               dotr:
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y
00008Br 3               	clc
00008Br 3               	adc #1		 	; move left.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               dotu:
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y
00008Br 3               	sec
00008Br 3               	sbc #1		 	; move up.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               dotd:
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y
00008Br 3               	clc
00008Br 3               	adc #1			; move down.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Check if coordinates are ok before redrawing at new position.
00008Br 3               ;
00008Br 3               ; left:   X>L		X=L	Ok
00008Br 3               ; right:  R+15>X	X=R	Ok
00008Br 3               ; top:    Y>T		Y=T	Ok
00008Br 3               ; bottom: B+15>Y	Y=B	Ok
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               chkxy:
00008Br 3               
00008Br 3               ; top:    Y>T		Y=T	Ok
00008Br 3               
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00008Br 3               	cmp wntopx		; window top.
00008Br 3               	bcs :+			; compare with top window limit.
00008Br 3               	jmp kilshr		; out of window, kill shrapnel.
00008Br 3               :
00008Br 3               ; left:   X>L		X=L	Ok
00008Br 3               
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00008Br 3               	cmp wnlftx		; left edge.
00008Br 3               	bcs :+			; compare with left window limit.
00008Br 3               	jmp kilshr		; out of window, kill shrapnel.
00008Br 3               :
00008Br 3               ; bottom: B+15>Y	Y=B	Ok
00008Br 3               
00008Br 3               	lda wnbotx		; point to bottom.
00008Br 3               	clc
00008Br 3               	adc #15
00008Br 3               	ldy #3
00008Br 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00008Br 3               	bcs :+			; compare with shrapnel x coordinate.
00008Br 3               	jmp kilshr		; off screen, kill shrapnel..
00008Br 3               :
00008Br 3               ; right:  R+15>X	X=R	Ok
00008Br 3               
00008Br 3               	lda wnrgtx		; point to right edge.
00008Br 3               	clc
00008Br 3               	adc #15
00008Br 3               	ldy #5
00008Br 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
00008Br 3               	bcs :+			; compare with window limit.
00008Br 3               	jmp kilshr		; off screen, kill shrapnel.
00008Br 3               :
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Drop through.
00008Br 3               ; Display shrapnel.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               plot:
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y		; y integer.
00008Br 3               	sta dispy	 	; workspace coordinates.
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y	 	; x integer.
00008Br 3               	sta dispx 		; workspace coordinates.
00008Br 3               
00008Br 3               	ldy #0
00008Br 3               	lda (z80_ix),y 		; type.
00008Br 3               	bne :+			; is it a laser?
00008Br 3               	jmp plot1 		; yes, draw laser instead.
00008Br 3               :
00008Br 3               plot0:
00008Br 3               	lda dispx		; which pixel within byte do we
00008Br 3               	and #7			; want to set first?
00008Br 3               	tay
00008Br 3               	lda dots,y 		; table of small pixel positions.
00008Br 3               	sta z80_e 		; get value.
00008Br 3               
00008Br 3               	jsr scadd 		; screen address.
00008Br 3               	ldy #0
00008Br 3               	lda (scraddr),y		; see what's already there.
00008Br 3               	eor z80_e
00008Br 3               	sta (scraddr),y 	; put back on screen.
00008Br 3               	rts
00008Br 3               
00008Br 3               plot1:
00008Br 3               	jsr scadd 		; screen address.
00008Br 3               	ldy #0
00008Br 3               	lda (scraddr),y 	; fetch byte there.
00008Br 3               	eor #255 		; toggle all bits.
00008Br 3               	sta (scraddr),y 	; new byte.
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Switch off shrapnel
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               kilshr:
00008Br 3               	lda #128
00008Br 3               	ldy #0
00008Br 3               	sta (z80_ix),y	; switch off shrapnel.
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Sine/cosine table
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               shrsin:	.word 0,1024,391,946,724,724,946,391
00008Br 3               	.word 1024,0,946,65144,724,64811,391,64589
00008Br 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
00008Br 3               	.word 64512,0,64589,391,64811,724,65144,946
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Create trail
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               trail:
00008Br 3               	ldy #1
00008Br 3               	lda (z80_ix),y 	; time remaining.
00008Br 3               	sec
00008Br 3               	sbc #1
00008Br 3               	sta (z80_ix),y
00008Br 3               	bne :+
00008Br 3               	jmp trailk		; time to switch it off.
00008Br 3               :
00008Br 3               	jsr qrand		; get a random number.
00008Br 3               	lsr a 			; x or y axis?
00008Br 3               	bcc :+
00008Br 3               	jmp trailv		; use y.
00008Br 3               :
00008Br 3               ; Trail horizontal
00008Br 3               
00008Br 3               	lsr a 			; which direction?
00008Br 3               	bcc :+
00008Br 3               	jmp traill		; go left.
00008Br 3               :
00008Br 3               ; Trail right
00008Br 3               
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y
00008Br 3               	clc
00008Br 3               	adc #1	 		; go right.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               
00008Br 3               ; Trail left
00008Br 3               
00008Br 3               traill:
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y
00008Br 3               	sec
00008Br 3               	sbc #1 			; go left.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               
00008Br 3               ; Trail vertical
00008Br 3               
00008Br 3               trailv:
00008Br 3               	lsr a		 	; which direction?
00008Br 3               	bcc :+
00008Br 3               	jmp trailu		; go up.
00008Br 3               :
00008Br 3               ; Trail down
00008Br 3               
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y
00008Br 3               	clc
00008Br 3               	adc #1 			; go down.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               
00008Br 3               ; Trail up
00008Br 3               
00008Br 3               trailu:
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y
00008Br 3               	sec
00008Br 3               	sbc #1 			; go up.
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               
00008Br 3               ; Kill trail
00008Br 3               
00008Br 3               trailk:
00008Br 3               	lda #200		; set off-screen to kill vapour trail.
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Create laser beam
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               laser:
00008Br 3               	ldy #1
00008Br 3               	lda (z80_ix),y 		; direction.
00008Br 3               	ror a 			; left or right?
00008Br 3               	bcs :+
00008Br 3               	jmp laserl		; move left.
00008Br 3               :
00008Br 3               ; Laser right
00008Br 3               
00008Br 3               	lda #8			; distance to travel.
00008Br 3               	sta z80_b
00008Br 3               	jmp laserm		; move laser.
00008Br 3               
00008Br 3               ; Laser left
00008Br 3               
00008Br 3               laserl:
00008Br 3               	lda #248		; distance to travel.
00008Br 3               	sta z80_b
00008Br 3               laserm:
00008Br 3               	ldy #5
00008Br 3               	lda (z80_ix),y		; x position.
00008Br 3               	clc
00008Br 3               	adc z80_b		; add distance.
00008Br 3               	sta (z80_ix),y		; set new x coordinate.
00008Br 3               
00008Br 3               ; Test new block.
00008Br 3               
00008Br 3               	sta dispx 		; set x for block collision detection purposes.
00008Br 3               	ldy #3
00008Br 3               	lda (z80_ix),y 		; get y.
00008Br 3               	sta dispy		; set coordinate for collision test.
00008Br 3               	jsr tstbl 		; get block type there.
00008Br 3               	cmp #WALL		; is it solid?
00008Br 3               	bne :+
00008Br 3               	jmp trailk		; yes, it cannot pass.
00008Br 3               :
00008Br 3               .if pflag .or dflag
00008Br 3                       cmp #FODDER             ; is it fodder?
00008Br 3                       bne :+
00008Br 3                       jsr fdchk               ; remove fodder block.
00008Br 3                       jmp trailk              ; destroy laser.
00008Br 3               :
00008Br 3               .endif
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Dots mask
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               dots:	.byte 128,64,32,16,8,4,2,1
00008Br 3               
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Plot, preserving de.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               plotde:
00008Br 3               	lda z80_d 		; put de on stack.
00008Br 3               	pha
00008Br 3               	lda z80_e
00008Br 3               	pha
00008Br 3               
00008Br 3               	jsr plot 		; plot pixel.
00008Br 3               
00008Br 3               	pla			; restore de from stack.
00008Br 3               	sta z80_e
00008Br 3               	pla
00008Br 3               	sta z80_d
00008Br 3               
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Shoot a laser.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               shoot:
00008Br 3               	sta z80_c		; store direction in c register.
00008Br 3               	ldy #8
00008Br 3               	lda (z80_ix),y 		; y coordinate.
00008Br 3               	clc
00008Br 3               shoot1:
00008Br 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
00008Br 3               	sta z80_l 		; puty y coordinate in l.
00008Br 3               
00008Br 3               	ldy #9
00008Br 3               	lda (z80_ix),y 		; x coordinate in h.
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	lda z80_i		; store pointer to sprite.
00008Br 3               	pha
00008Br 3               	lda z80_x
00008Br 3               	pha
00008Br 3               
00008Br 3               	jsr fpslot 		; find particle slot.
00008Br 3               	bcs :+
00008Br 3               	jmp vapou2		; failed, restore ix.
00008Br 3               :
00008Br 3               	lda #0
00008Br 3               	ldy #0
00008Br 3               	sta (z80_ix),y 		; set up a laser.
00008Br 3               
00008Br 3               	lda z80_c
00008Br 3               	ldy #1
00008Br 3               	sta (z80_ix),y 		; set the direction.
00008Br 3               
00008Br 3               	lda z80_l
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y		; set y coordinate.
00008Br 3               
00008Br 3               	ror z80_c		; check direction we want.
00008Br 3               	bcc :+
00008Br 3               	jmp shootr		; shoot right.
00008Br 3               :
00008Br 3               	lda z80_h		; X position.
00008Br 3               shoot0:
00008Br 3               	and #248		; align on character boundary.
00008Br 3               	ldy #5
00008Br 3               	sta (z80_ix),y		; set x coordinate.
00008Br 3               	jmp vapou0 		; draw first image.
00008Br 3               shootr:
00008Br 3               	lda z80_h		; x position.
00008Br 3               	clc
00008Br 3               	adc #15			; look right.
00008Br 3               	jmp shoot0		; align and continue.
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Create a bit of vapour trail.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               vapour:
00008Br 3               	lda z80_i		; store pointer to sprite.
00008Br 3               	pha
00008Br 3               	lda z80_x
00008Br 3               	pha
00008Br 3               
00008Br 3               	ldy #8
00008Br 3               	lda (z80_ix),y 		; y coordinate.
00008Br 3               	clc
00008Br 3               vapou3:
00008Br 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00008Br 3               	sta z80_l
00008Br 3               
00008Br 3               	ldy #9
00008Br 3               	lda (z80_ix),y 		; x coordinate.
00008Br 3               	adc #7
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	jsr fpslot 		; find particle slot.
00008Br 3               	bcc :+
00008Br 3               	jmp vapou1		; no, we can use it.
00008Br 3               :
00008Br 3               vapou2:
00008Br 3               	pla
00008Br 3               	sta z80_x
00008Br 3               	pla
00008Br 3               	sta z80_i
00008Br 3               	rts
00008Br 3               vapou1:
00008Br 3               	lda z80_l
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y		; set up y.
00008Br 3               
00008Br 3               	lda z80_h
00008Br 3               	ldy #5
00008Br 3               	sta (z80_ix),y 		; set up x coordinate.
00008Br 3               
00008Br 3               	jsr qrand		; get quick random number.
00008Br 3               	and #15			; random time.
00008Br 3               	clc
00008Br 3               	adc #15			; minimum time on screen.
00008Br 3               	ldy #1
00008Br 3               	sta (z80_ix),y		; set time on screen.
00008Br 3               
00008Br 3               	lda #1
00008Br 3               	ldy #0
00008Br 3               	sta (z80_ix),y		; define particle as vapour trail.
00008Br 3               vapou0:
00008Br 3               	jsr chkxy		; plot first position.
00008Br 3               	jmp vapou2
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Create a user particle.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               ptusr:
00008Br 3               	sta z80_f		; store timer.
00008Br 3               
00008Br 3               	ldy #8
00008Br 3               	lda (z80_ix),y 		; y coordinate.
00008Br 3               	clc
00008Br 3               	adc #7			; mid-point of sprite.
00008Br 3               	sta z80_l
00008Br 3               
00008Br 3               	ldy #9
00008Br 3               	lda (z80_ix),y 		; x coordinate.
00008Br 3               	clc
00008Br 3               	adc #7			; mid-point of sprite.
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	jsr fpslot 		; find particle slot.
00008Br 3               	bcs ptusr1
00008Br 3               	rts 			; out of slots, can't generate anything.
00008Br 3               ptusr1:
00008Br 3               	lda z80_l
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y 		; set up y.
00008Br 3               
00008Br 3               	lda z80_h
00008Br 3               	ldy #5
00008Br 3               	sta (z80_ix),y		; set up x coordinate.
00008Br 3               
00008Br 3               	lda z80_f 		; restore timer.
00008Br 3               	ldy #1
00008Br 3               	sta (z80_ix),y		; set time on screen.
00008Br 3               
00008Br 3               	lda #7
00008Br 3               	ldy #0
00008Br 3               	sta (z80_ix),y		; define particle as user particle.
00008Br 3               
00008Br 3               	jmp chkxy		; plot first position.
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Create a vertical or horizontal star.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               star:
00008Br 3               	lda z80_i		; store pointer to sprite.
00008Br 3               	pha
00008Br 3               	lda z80_x
00008Br 3               	pha
00008Br 3               
00008Br 3               	jsr fpslot 		; find particle slot.
00008Br 3               	bcs star7		; found one we can use.
00008Br 3               star0:
00008Br 3               	pla 			; restore sprite pointer.
00008Br 3               	sta z80_x
00008Br 3               	pla
00008Br 3               	sta z80_i
00008Br 3               	rts 			; out of slots, can't generate anything.
00008Br 3               star7:
00008Br 3               	lda z80_c		; direction.
00008Br 3               	and #3 			; is it left?
00008Br 3               	bne :+
00008Br 3               	jmp star1 		; yes, it's left.
00008Br 3               :
00008Br 3               	cmp #1 			; is it right?
00008Br 3               	bne :+
00008Br 3               	jmp star2 		; yes, it's right.
00008Br 3               :
00008Br 3               	cmp #2 			; is it up?
00008Br 3               	bne :+
00008Br 3               	jmp star3 		; yes, it's up.
00008Br 3               :
00008Br 3               	ldy wntopx 		; get edge of screen.
00008Br 3               	iny			; down one pixel.
00008Br 3               	tya
00008Br 3               star8:
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y 		; set y coord.
00008Br 3               	jsr qrand 		; get quick random number.
00008Br 3               star9:
00008Br 3               	ldy #5
00008Br 3               	sta (z80_ix),y		; set x position.
00008Br 3               
00008Br 3               	lda z80_c		; direction.
00008Br 3               	and #3			; zero to three.
00008Br 3               	clc
00008Br 3               	adc #3			; 3 to 6 for starfield.
00008Br 3               	ldy #0
00008Br 3               	sta (z80_ix),y		; define particle as star.
00008Br 3               	jsr chkxy		; plot first position.
00008Br 3               	jmp star0
00008Br 3               star1:
00008Br 3               	jsr qrand		; get quick random number.
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y 		; set y coord.
00008Br 3               
00008Br 3               	lda wnrgtx 		; get edge of screen.
00008Br 3               	clc
00008Br 3               	adc #15			; add width of sprite minus 1.
00008Br 3               	jmp star9
00008Br 3               star2:
00008Br 3               	jsr qrand 		; get quick random number.
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y		; set y coord.
00008Br 3               
00008Br 3               	lda wnlftx		; get edge of screen.
00008Br 3               	jmp star9
00008Br 3               star3:
00008Br 3               	lda wnbotx 		; get edge of screen.
00008Br 3               	clc
00008Br 3               	adc #15 		; height of sprite minus one pixel.
00008Br 3               	jmp star8
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Find particle slot for lasers or vapour trail.
00008Br 3               ; can't use alternate accumulator.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               fpslot:
00008Br 3               	lda #<SHRAPN 		; shrapnel table.
00008Br 3               	sta z80_x
00008Br 3               	lda #>SHRAPN
00008Br 3               	sta z80_i
00008Br 3               
00008Br 3               	lda #NUMSHR		; number of pieces in table.
00008Br 3               	sta z80_b
00008Br 3               fpslt0:
00008Br 3               	ldy #0
00008Br 3               	lda (z80_ix),y		; get type.
00008Br 3               	asl a  			; is this slot in use?
00008Br 3               	bcc :+
00008Br 3               	rts			; no, we can use it.
00008Br 3               :
00008Br 3               	clc			; point to more shrapnel.
00008Br 3               	lda z80_x
00008Br 3               	adc #SHRSIZ
00008Br 3               	sta z80_x
00008Br 3               	bcc :+
00008Br 3               	inc z80_i
00008Br 3               :
00008Br 3               	dec z80_b		; repeat for all shrapnel.
00008Br 3               	bne fpslt0
00008Br 3               
00008Br 3               	clc
00008Br 3               	rts 			; out of slots, can't generate anything.
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Create an explosion at sprite position.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               explod:
00008Br 3               	sta z80_c 		; particles to create.
00008Br 3               
00008Br 3               	lda z80_i 		; store pointer to sprite.
00008Br 3               	pha
00008Br 3               	lda z80_x
00008Br 3               	pha
00008Br 3               
00008Br 3               	ldy #8
00008Br 3               	lda (z80_ix),y 		; y coordinate.
00008Br 3               	sta z80_l
00008Br 3               	ldy #9
00008Br 3               	lda (z80_ix),y		; x coordinate.
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	lda #<SHRAPN		; shrapnel table.
00008Br 3               	sta z80_x
00008Br 3               	lda #>SHRAPN
00008Br 3               	sta z80_i
00008Br 3               
00008Br 3               	lda #NUMSHR		; number of pieces in table.
00008Br 3               	sta explcnt
00008Br 3               expld0:
00008Br 3               	ldy #0
00008Br 3               	lda (z80_ix),y		; get type.
00008Br 3               	asl a 			; is this slot in use?
00008Br 3               	bcs expld1		; no, we can use it.
00008Br 3               expld2:
00008Br 3               	clc
00008Br 3               	lda z80_x
00008Br 3               	adc #SHRSIZ
00008Br 3               	sta z80_x
00008Br 3               	bcc :+
00008Br 3               	inc z80_i
00008Br 3               :
00008Br 3               	dec explcnt		; repeat for all shrapnel.
00008Br 3               	bne expld0
00008Br 3               expld3:
00008Br 3               	pla			; restore sprite pointer.
00008Br 3               	sta z80_x
00008Br 3               	pla
00008Br 3               	sta z80_i
00008Br 3               	rts 			; out of slots, can't generate any more.
00008Br 3               
00008Br 3               expld1:
00008Br 3               	lda z80_c		; shrapnel counter.
00008Br 3               	and #15			; 0 to 15.
00008Br 3               	clc			; add to x.
00008Br 3               	adc z80_l
00008Br 3               	ldy #3
00008Br 3               	sta (z80_ix),y		; y coord.
00008Br 3               
00008Br 3               	lda seed3 		; crap random number.
00008Br 3               	and #15			; 0 to 15.
00008Br 3               	clc 			; add to y.
00008Br 3               	adc z80_h
00008Br 3               	ldy #5
00008Br 3               	sta (z80_ix),y		; x coord.
00008Br 3               
00008Br 3               	lda #2
00008Br 3               	ldy #0
00008Br 3               	sta (z80_ix),y		; switch it on.
00008Br 3               
00008Br 3               	jsr chkxy		; plot first position.
00008Br 3               	jsr qrand		; quick random angle.
00008Br 3               	and #60 		; keep within range.
00008Br 3               	ldy #1
00008Br 3               	sta (z80_ix),y		; angle.
00008Br 3               
00008Br 3               	dec z80_c		; one less piece of shrapnel to generate.
00008Br 3               	bne expld2 		; back to main explosion loop.
00008Br 3               	jmp expld3 		; restore sprite pointer and exit.
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Quick random
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               qrand:
00008Br 3               	jsr random		; r register.
00008Br 3               	eor seed3		; combine with seed.
00008Br 3               	sta seed3 		; new seed.
00008Br 3               	rts
00008Br 3               
00008Br 3               ;----------------------------------------------------
00008Br 3               ; Display all shrapnel.
00008Br 3               ;----------------------------------------------------
00008Br 3               
00008Br 3               dshrp:
00008Br 3               	lda #<plotde		; display routine.
00008Br 3               	sta proshx+1
00008Br 3               	lda #>plotde
00008Br 3               	sta proshx+2
00008Br 3               	jsr proshr		; process shrapnel.
00008Br 3               
00008Br 3               	lda #<prosh1		; processing routine.
00008Br 3               	sta proshx+1
00008Br 3               	lda #>prosh1
00008Br 3               	sta proshx+2
00008Br 3               	rts
00008Br 3               
00008Br 3               ;------------------------------------------------------
00008Br 3               ; Particle engine.
00008Br 3               ;
00008Br 3               ; Init particle data for 55 particles in SHRAPN table.
00008Br 3               ; Every particle has 6 bytes.
00008Br 3               ;
00008Br 3               ; global:	-
00008Br 3               ; local:	x,y,hl
00008Br 3               ; calls:	-
00008Br 3               ;------------------------------------------------------
00008Br 3               
00008Br 3               inishr:
00008Br 3               	lda #<SHRAPN 		; table.
00008Br 3               	sta z80_l
00008Br 3               	lda #>SHRAPN
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	ldy #0
00008Br 3               	ldx #NUMSHR		; shrapnel pieces to process.
00008Br 3               inish0:
00008Br 3               	lda #255 		; kill the shrapnel.
00008Br 3               	sta (z80_hl),y
00008Br 3               
00008Br 3               	clc 			; point there.
00008Br 3               	lda z80_l
00008Br 3               	adc #SHRSIZ		; distance to next.
00008Br 3               	sta z80_l
00008Br 3               	bcc :+
00008Br 3               	inc z80_h
00008Br 3               :
00008Br 3               	dex
00008Br 3               	bne inish0 		; round again.
00008Br 3               	rts
00008Br 3               
00008Br 3               ;------------------------------------------------------
00008Br 3               ; Check for collision between laser and sprite.
00008Br 3               ;------------------------------------------------------
00008Br 3               
00008Br 3               lcol:
00008Br 3               	lda #<SHRAPN		; shrapnel table.
00008Br 3               	sta z80_l
00008Br 3               	lda #>SHRAPN
00008Br 3               	sta z80_h
00008Br 3               
00008Br 3               	lda #NUMSHR		; number of pieces in table.
00008Br 3               	sta z80_b
00008Br 3               lcol0:
00008Br 3               	ldy #0
00008Br 3               	lda (z80_hl),y 		; get type.
00008Br 3               	beq lcol1		; yes, check collision.
00008Br 3               lcol3:
00008Br 3               	clc			; point to more shrapnel.
00008Br 3               	lda z80_l
00008Br 3               	adc #SHRSIZ
00008Br 3               	sta z80_l
00008Br 3               	bcc :+
00008Br 3               	inc z80_h
00008Br 3               :
00008Br 3               	dec z80_b		; repeat for all shrapnel.
00008Br 3               	bne lcol0
00008Br 3               	clc
00008Br 3               	rts 			; no collision, carry not set.
00008Br 3               lcol1:
00008Br 3               	ldy #3
00008Br 3               	lda (z80_hl),y		; get y.
00008Br 3               	sec
00008Br 3               	ldy #8
00008Br 3               	sbc (z80_ix),y		; subtract sprite y.
00008Br 3               lcolh:
00008Br 3               	cmp #SPR_HGT 		; within range?
00008Br 3               	bcc :+
00008Br 3               	jmp lcol2		; no, missed.
00008Br 3               :
00008Br 3               	ldy #5
00008Br 3               	lda (z80_hl),y 		; get x.
00008Br 3               	sec
00008Br 3               	ldy #9
00008Br 3               	sbc (z80_ix),y 		; subtract sprite y.
00008Br 3               	cmp #16			; within range?
00008Br 3               	bcs :+
00008Br 3               	jmp lcol4 		; yes, collision occurred.
00008Br 3               :
00008Br 3               lcol2:
00008Br 3               	jmp lcol3
00008Br 3               lcol4:
00008Br 3               	sec
00008Br 3               	rts 			; return with carry set for collision.
00008Br 3               .endif
00008Br 3               
00008Br 3               ;------------------------------------------------------
00008Br 3               ; Main game engine code starts here.
00008Br 3               ; After initialisation, mloop is the main loop
00008Br 3               ;------------------------------------------------------
00008Br 3               
00008Br 3               game:
00008Br 3               
00008Br 3               ; Set up screen address table.
00008Br 3               
00008Br 3               setsat:
00008Br 3  A9 00        	lda #<CharAddress	; start of screen.
00008Dr 3  85 rr        	sta scraddr
00008Fr 3  A9 10        	lda #>CharAddress
000091r 3  85 rr        	sta scraddr+1
000093r 3               
000093r 3  A0 00        	ldy #0			; vertical lines on screen.
000095r 3               setsa0:
000095r 3  A5 rr        	lda scraddr
000097r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
00009Ar 3  A5 rr        	lda scraddr+1
00009Cr 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
00009Fr 3  20 rr rr     	jsr nline		; next line down.
0000A2r 3  C8           	iny			; next position in table.
0000A3r 3  D0 F0        	bne setsa0
0000A5r 3               
0000A5r 3               ; Set up colour address table
0000A5r 3               
0000A5r 3               setsof:
0000A5r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000A7r 3  85 rr        	sta bufaddr
0000A9r 3  A9 96        	lda #>ColorAttr
0000ABr 3  85 rr        	sta bufaddr+1
0000ADr 3               
0000ADr 3  A0 00        	ldy #0			; vertical lines on screen.
0000AFr 3               setof0:
0000AFr 3  A5 rr        	lda bufaddr
0000B1r 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000B4r 3  A5 rr        	lda bufaddr+1
0000B6r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000B9r 3  18           	clc			; next line down.
0000BAr 3  A5 rr        	lda bufaddr
0000BCr 3  69 16        	adc #ScrWidth
0000BEr 3  85 rr        	sta bufaddr
0000C0r 3  90 02        	bcc :+
0000C2r 3  E6 rr        	inc bufaddr+1
0000C4r 3               :
0000C4r 3  C8           	iny			; next position in table.
0000C5r 3  C0 0B        	cpy #ScrHeight/2
0000C7r 3  D0 E6        	bne setof0
0000C9r 3               
0000C9r 3               ; Init graphics mode
0000C9r 3               
0000C9r 3  20 rr rr     	jsr init
0000CCr 3               
0000CCr 3               ; Init joysticks
0000CCr 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0000CFr 3               
0000CFr 3               rpblc2:
0000CFr 3               .if pflag
0000CFr 3               	jsr inishr 		; initialise particle engine.
0000CFr 3               .endif
0000CFr 3               evintr:
0000CFr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0000D2r 3               
0000D2r 3  A9 02        	lda #WALL 		; write default property.
0000D4r 3  A2 00        	ldx #0
0000D6r 3               clrmap:
0000D6r 3  9D 00 04     	sta MAP,x 		; block properties.
0000D9r 3  9D 00 05     	sta MAP+256,x
0000DCr 3  E8           	inx
0000DDr 3  D0 F7        	bne clrmap
0000DFr 3               
0000DFr 3               .if oflag
0000DFr 3               	jsr iniob 		; initialise objects.
0000DFr 3               .endif
0000DFr 3  A9 00        	lda #0			; put zero in accumulator.
0000E1r 3  85 rr        	sta gamwon		; reset game won flag.
0000E3r 3               
0000E3r 3  20 rr rr     	jsr inisc 		; init the score.
0000E6r 3               mapst:
0000E6r 3  AD rr rr     	lda stmap 		; start position on map.
0000E9r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0000ECr 3               
0000ECr 3               inipbl:
0000ECr 3               .if aflag
0000ECr 3               	lda #<eop		; reset blockpointer
0000ECr 3               	sta pbptr
0000ECr 3               	lda #>eop
0000ECr 3               	sta pbptr+1
0000ECr 3               .endif
0000ECr 3  20 rr rr     	jsr initsc 		; set up first screen.
0000EFr 3               
0000EFr 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0000F1r 3  85 rr        	sta z80_x
0000F3r 3  A9 rr        	lda #>ssprit
0000F5r 3  85 rr        	sta z80_i
0000F7r 3               evini:
0000F7r 3  20 rr rr     	jsr evnt13 		; initialisation.
0000FAr 3               
0000FAr 3               ; Two restarts.
0000FAr 3               ; First restart - clear all sprites and initialise everything.
0000FAr 3               
0000FAr 3               rstrt:
0000FAr 3  20 rr rr     	jsr rsevt 		; restart events.
0000FDr 3  20 rr rr     	jsr xspr 		; clear sprite table.
000100r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000103r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000106r 3  4C rr rr     	jmp rstrt0
000109r 3               
000109r 3               ; Second restart - clear all but player, and don't initialise him.
000109r 3               
000109r 3               rstrtn:
000109r 3  20 rr rr     	jsr rsevt		; restart events.
00010Cr 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
00010Fr 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000112r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000115r 3               
000115r 3               ; Set up the player and/or enemy sprites.
000115r 3               
000115r 3               rstrt0:
000115r 3  A9 00        	lda #0 			; zero in accumulator.
000117r 3  85 rr        	sta nexlev 		; reset next level flag.
000119r 3  85 rr        	sta restfl 		; reset restart flag.
00011Br 3  85 rr        	sta deadf 		; reset dead flag.
00011Dr 3               
00011Dr 3  20 rr rr     	jsr droom 		; show screen layout.
000120r 3               rpblc0:
000120r 3               .if pflag
000120r 3               	jsr inishr 		; initialise particle engine.
000120r 3               .endif
000120r 3               .if aflag
000120r 3               	jsr rbloc		; draw blocks for this screen
000120r 3               .endif
000120r 3               .if oflag
000120r 3               	jsr shwob		; draw objects.
000120r 3               .endif
000120r 3               
000120r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000122r 3  85 rr        	sta z80_x
000124r 3  A9 rr        	lda #>sprtab
000126r 3  85 rr        	sta z80_i
000128r 3  20 rr rr     	jsr dspr 		; display sprites.
00012Br 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00012Dr 3  85 rr        	sta z80_x
00012Fr 3  A9 rr        	lda #>(sprtab+TABSIZ)
000131r 3  85 rr        	sta z80_i
000133r 3  20 rr rr     	jsr dspr 		; display sprites.
000136r 3               mloop:
000136r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000139r 3               
000139r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00013Br 3  85 rr        	sta z80_x
00013Dr 3  A9 rr        	lda #>sprtab
00013Fr 3  85 rr        	sta z80_i
000141r 3  20 rr rr     	jsr dspr 		; display even sprites.
000144r 3               
000144r 3               ;	jsr plsnd 		; play sounds.
000144r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000147r 3  20 rr rr     	jsr proshr
00014Ar 3               
00014Ar 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00014Cr 3  85 rr        	sta z80_x
00014Er 3  A9 rr        	lda #>(sprtab+TABSIZ)
000150r 3  85 rr        	sta z80_i
000152r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000155r 3               
000155r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000157r 3  85 rr        	sta z80_x
000159r 3  A9 rr        	lda #>(ssprit)
00015Br 3  85 rr        	sta z80_i
00015Dr 3               evlp1:
00015Dr 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000160r 3  20 rr rr     	jsr pspr 		; process sprites.
000163r 3               
000163r 3               ; Main loop events.
000163r 3               
000163r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000165r 3  85 rr        	sta z80_x
000167r 3  A9 rr        	lda #>ssprit
000169r 3  85 rr        	sta z80_i
00016Br 3               evlp2:
00016Br 3  20 rr rr     	jsr evnt11 		; called once per main loop.
00016Er 3               bsortx:
00016Er 3  20 rr rr     	jsr bsort 		; sort sprites.
000171r 3               
000171r 3  A5 rr        	lda nexlev		; finished level flag.
000173r 3  D0 1F        	bne newlev		; is set, go to next level.
000175r 3  A5 rr        	lda gamwon		; finished game flag.
000177r 3  D0 2A        	bne evwon		; is set, finish the game.
000179r 3  A5 rr        	lda restfl 		; finished level flag.
00017Br 3  C9 01        	cmp #1			; has it been set?
00017Dr 3  D0 03        	bne :+
00017Fr 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000182r 3               :
000182r 3  C9 02        	cmp #2			; has it been set?
000184r 3  D0 03        	bne :+
000186r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
000189r 3               :
000189r 3  A5 rr        	lda deadf 		; dead flag.
00018Br 3  D0 1C        	bne pdead		; yes, player dead.
00018Dr 3               
00018Dr 3               ; back to start of main loop.
00018Dr 3               
00018Dr 3  E6 rr        	inc frmno
00018Fr 3  E6 rr        	inc clock
000191r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
000194r 3               
000194r 3               ;----------------------------------------------------------
000194r 3               ; Read blocks from list and update screen accordingly.
000194r 3               ;----------------------------------------------------------
000194r 3               
000194r 3               .if aflag
000194r 3               rbloc:
000194r 3               	lda #<eop		; reset blockpointer
000194r 3               	sta pbbuf
000194r 3               	lda #>eop
000194r 3               	sta pbbuf+1
000194r 3               
000194r 3               rbloc2:
000194r 3               	lda pbbuf			; check for last block
000194r 3               	cmp pbptr
000194r 3               	bne rbloc1
000194r 3               	lda pbbuf+1
000194r 3               	cmp pbptr+1
000194r 3               	bne rbloc1
000194r 3               	rts
000194r 3               rbloc1:
000194r 3               	ldy #0
000194r 3               	lda (pbbuf),y		; check if block for this scno
000194r 3               	cmp scno
000194r 3               	bne rbloc0		; if not, skip
000194r 3               	iny
000194r 3               	lda (pbbuf),y		; get y
000194r 3               	sta dispy
000194r 3               	iny
000194r 3               	lda (pbbuf),y		; get x
000194r 3               	sta dispx
000194r 3               	iny
000194r 3               	lda (pbbuf),y		; get blocknr
000194r 3               	jsr pattr2		; draw block
000194r 3               rbloc0:
000194r 3               	clc			; point to next block
000194r 3               	lda pbbuf
000194r 3               	adc #4
000194r 3               	sta pbbuf
000194r 3               	bcc rbloc2
000194r 3               	inc pbbuf+1
000194r 3               	jmp rbloc2
000194r 3               .endif
000194r 3               
000194r 3               ;----------------------------------------------------------
000194r 3               ; New level
000194r 3               ;----------------------------------------------------------
000194r 3               
000194r 3               newlev:
000194r 3  A5 rr        	lda scno 			; current screen.
000196r 3  18           	clc
000197r 3  69 01        	adc #1				; next screen.
000199r 3  CD rr rr     	cmp numsc 			; total number of screens.
00019Cr 3  B0 05        	bcs evwon			; yes, game finished.
00019Er 3  85 rr        	sta scno			; set new level number.
0001A0r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001A3r 3               
0001A3r 3               evwon:
0001A3r 3  20 rr rr     	jsr evnt18		 	; game completed.
0001A6r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001A9r 3               
0001A9r 3               ;----------------------------------------------------------
0001A9r 3               ; Player dead.
0001A9r 3               ;----------------------------------------------------------
0001A9r 3               
0001A9r 3               pdead:
0001A9r 3  A9 00        	lda #0				; zeroise accumulator.
0001ABr 3  85 rr        	sta deadf			; reset dead flag.
0001ADr 3               evdie:
0001ADr 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001B0r 3  A5 rr        	lda numlif			; number of lives.
0001B2r 3  F0 03        	beq :+
0001B4r 3  4C rr rr     	jmp rstrt 			; restart game.
0001B7r 3               :
0001B7r 3               evfail:
0001B7r 3  20 rr rr     	jsr evnt17 			; failure event.
0001BAr 3  4C rr rr     	jmp game			; restart game
0001BDr 3               
0001BDr 3               ;----------------------------------------------------------
0001BDr 3               ; Tidy things up
0001BDr 3               ;----------------------------------------------------------
0001BDr 3               
0001BDr 3               tidyup:
0001BDr 3  A0 00        	ldy #0				; digits to check.
0001BFr 3               tidyu2:
0001BFr 3  B9 rr rr     	lda score,y 			; get score digit.
0001C2r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001C5r 3  90 07        	bcc tidyu0			; high score is bigger.
0001C7r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001C9r 3  C8           	iny				; next digit of high score.
0001CAr 3  C0 06        	cpy #6
0001CCr 3  D0 F1        	bne tidyu2			; repeat for all digits
0001CEr 3               tidyu0:
0001CEr 3  A9 rr        	lda #<score			; return pointing to score.
0001D0r 3  85 rr        	sta z80_c
0001D2r 3  A9 rr        	lda #>score
0001D4r 3  85 rr        	sta z80_b
0001D6r 3  60           	rts
0001D7r 3               tidyu1:
0001D7r 3  A0 05        	ldy #5
0001D9r 3               tidyu3:
0001D9r 3  B9 rr rr     	lda score,y			; score.
0001DCr 3  99 rr rr     	sta hiscor,y			; high score.
0001DFr 3  88           	dey
0001E0r 3  10 F7        	bpl tidyu3 			; copy score to high score.
0001E2r 3               evnewh:
0001E2r 3  20 rr rr     	jsr evnt19			; new high score event.
0001E5r 3  4C rr rr     	jmp tidyu0			; tidy up.
0001E8r 3               
0001E8r 3               ;--------------------------------------------------
0001E8r 3               ; Restart event.
0001E8r 3               ;--------------------------------------------------
0001E8r 3               
0001E8r 3               rsevt:
0001E8r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0001EAr 3  85 rr        	sta z80_x
0001ECr 3  A9 rr        	lda #>ssprit
0001EEr 3  85 rr        	sta z80_i
0001F0r 3               
0001F0r 3               evrs:
0001F0r 3  4C rr rr     	jmp evnt14	 		; call restart event.
0001F3r 3               
0001F3r 3               ;------------------------------------------------------------------
0001F3r 3               ; Copy number passed in a to string position bc, right-justified.
0001F3r 3               ;
0001F3r 3               ; Input:
0001F3r 3               ;  A  = number
0001F3r 3               ;  BC = string address
0001F3r 3               ;
0001F3r 3               ; Output:
0001F3r 3               ;  BC = string with number
0001F3r 3               ;-----------------------------------------------------------------
0001F3r 3               
0001F3r 3               num2ch:
0001F3r 3  85 rr        	sta z80_d		; Save number
0001F5r 3               
0001F5r 3  A9 00        	lda #0
0001F7r 3  85 rr        	sta flag
0001F9r 3               numdg3:
0001F9r 3  A2 64        	ldx #100		; hundreds column.
0001FBr 3  86 rr        	stx z80_e
0001FDr 3  20 rr rr     	jsr numdg		; show digit.
000200r 3               numdg2:
000200r 3  A2 0A        	ldx #10			; tens column.
000202r 3  86 rr        	stx z80_e
000204r 3  20 rr rr     	jsr numdg		; show digit.
000207r 3               
000207r 3  E6 rr        	inc flag
000209r 3  A2 01        	ldx #1			; units column.
00020Br 3  86 rr        	stx z80_e
00020Dr 3               numdg:
00020Dr 3  A9 30        	lda #48			; clear digit.
00020Fr 3  85 rr        	sta z80_a
000211r 3               numdg1:
000211r 3  A5 rr        	lda z80_d
000213r 3  C5 rr        	cmp z80_e
000215r 3  90 0E        	bcc numdg0		; nothing to show.
000217r 3  38           	sec
000218r 3  A5 rr        	lda z80_d
00021Ar 3  E5 rr        	sbc z80_e		; subtract from column.
00021Cr 3  85 rr        	sta z80_d
00021Er 3  E6 rr        	inc z80_a		; increment digit.
000220r 3  E6 rr        	inc flag
000222r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
000225r 3               numdg0:
000225r 3  A0 00        	ldy #0
000227r 3  A5 rr        	lda z80_a
000229r 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
00022Br 3  A5 rr        	lda flag
00022Dr 3  F0 06        	beq :+
00022Fr 3  E6 rr        	inc z80_c		; next buffer position.
000231r 3  D0 02        	bne :+
000233r 3  E6 rr        	inc z80_b
000235r 3               :
000235r 3  60           	rts
000236r 3               num2dd:
000236r 3  85 rr        	sta z80_d		; Save number
000238r 3               
000238r 3  A9 01        	lda #1
00023Ar 3  85 rr        	sta flag
00023Cr 3               
00023Cr 3  4C rr rr     	jmp numdg2
00023Fr 3               num2td:
00023Fr 3  85 rr        	sta z80_d		; Save number
000241r 3               
000241r 3  A9 01        	lda #1
000243r 3  85 rr        	sta flag
000245r 3  4C rr rr     	jmp numdg3
000248r 3               
000248r 3               ;---------------------------------------------------------
000248r 3               ; Reset score to "000000"
000248r 3               ;---------------------------------------------------------
000248r 3               
000248r 3               inisc:
000248r 3  A9 30        	lda #'0'
00024Ar 3  A2 05        	ldx #5			; digits to initialise.
00024Cr 3               inisc0:
00024Cr 3  9D rr rr     	sta score,x 		; write zero digit.
00024Fr 3  CA           	dex			; next column.
000250r 3  10 FA        	bpl inisc0		; repeat for all digits.
000252r 3               
000252r 3  60           	rts
000253r 3               
000253r 3               ;-----------------------------------------------------
000253r 3               ; Multiply h by d and return in hl.
000253r 3               ;
000253r 3               ; Input:
000253r 3               ;  H = first number
000253r 3               ;  D = second number
000253r 3               ;
000253r 3               ; Output:
000253r 3               ;  HL = result H x D
000253r 3               ;-----------------------------------------------------
000253r 3               
000253r 3               imul:
000253r 3  A5 rr        	lda z80_d		; HL = H * D
000255r 3  85 rr        	sta z80_e
000257r 3  A5 rr        	lda z80_h
000259r 3  85 rr        	sta z80_c		; make c first multiplier.
00025Br 3               imul0:
00025Br 3  A9 00        	lda #0			; zeroise total.
00025Dr 3  85 rr        	sta z80_l
00025Fr 3  85 rr        	sta z80_h
000261r 3               
000261r 3  A5 rr        	lda z80_h
000263r 3  85 rr        	sta z80_d		; zeroise high byte.
000265r 3               
000265r 3  A9 08        	lda #8			; repeat 8 times.
000267r 3  85 rr        	sta z80_b
000269r 3               imul1:
000269r 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
00026Br 3  90 0E        	bcc imul2		; wasn't set.
00026Dr 3  18           	clc			; bit was set, so add de.
00026Er 3  A5 rr        	lda z80_l
000270r 3  65 rr        	adc z80_e
000272r 3  85 rr        	sta z80_l
000274r 3  A5 rr        	lda z80_h
000276r 3  65 rr        	adc z80_d
000278r 3  85 rr        	sta z80_h
00027Ar 3  18           	clc 			; reset carry.
00027Br 3               imul2:
00027Br 3  26 rr        	rol z80_e 		; shift de 1 bit left.
00027Dr 3  26 rr        	rol z80_d
00027Fr 3  C6 rr        	dec z80_b
000281r 3  D0 E6        	bne imul1		; repeat 8 times.
000283r 3               
000283r 3  60           	rts
000284r 3               
000284r 3               ;-----------------------------------------------
000284r 3               ; Divide d by e and return in d, remainder in a.
000284r 3               ;
000284r 3               ; Input:
000284r 3               ;  D = first number
000284r 3               ;  E = second number
000284r 3               ;
000284r 3               ; Output:
000284r 3               ;  D = result D/E
000284r 3               ;  A = remainder
000284r 3               ;-----------------------------------------------
000284r 3               
000284r 3               idiv:
000284r 3  A9 00        	lda #0
000286r 3  A0 08        	ldy #8		 	; bits to shift.
000288r 3  06 rr        	asl z80_d
00028Ar 3               idiv0:
00028Ar 3  2A           	rol a 			; multiply d by 2.
00028Br 3  C5 rr        	cmp z80_e 		; test if e is smaller.
00028Dr 3  90 02        	bcc idiv1		; e is greater, no division this time.
00028Fr 3  E5 rr        	sbc z80_e		; subtract it.
000291r 3               idiv1:
000291r 3  26 rr        	rol z80_d		; rotate into d.
000293r 3  88           	dey
000294r 3  D0 F4        	bne idiv0		; repeat
000296r 3  60           	rts
000297r 3               
000297r 3               ;---------------------------------------------------
000297r 3               ; Play AY sound effect
000297r 3               ;---------------------------------------------------
000297r 3               
000297r 3               plsnd:
000297r 3  60           	rts
000298r 3               
000298r 3               ;---------------------------------------------------
000298r 3               ; Objects handling.
000298r 3               ; 32 bytes for image
000298r 3               ; 1 for colour
000298r 3               ; 3 for room, y and x
000298r 3               ; 3 for starting room, y and x.
000298r 3               ; 254 = disabled.
000298r 3               ; 255 = object in player"s pockets.
000298r 3               ;---------------------------------------------------
000298r 3               
000298r 3               ;---------------------------------------------------
000298r 3               ; Show items present.
000298r 3               ;---------------------------------------------------
000298r 3               
000298r 3               .if oflag
000298r 3               shwob:
000298r 3               	lda #<objdta			; objects table.
000298r 3               	sta z80_l
000298r 3               	lda #>objdta
000298r 3               	sta z80_h
000298r 3               	lda numob 			; number of objects in the game.
000298r 3               	sta sprcnt
000298r 3               shwob0:
000298r 3               	ldy #33 			; distance to room number.
000298r 3               	lda (z80_hl),y 			; same as an item?
000298r 3               	cmp scno 			; current location.
000298r 3               	bne :+
000298r 3               	jsr dobj 			; yes, display object.
000298r 3               :
000298r 3               	clc
000298r 3               	lda z80_l
000298r 3               	adc #39 			; distance to next item.
000298r 3               	sta z80_l
000298r 3               	lda z80_h
000298r 3               	adc #0
000298r 3               	sta z80_h	 		; point to it.
000298r 3               	dec sprcnt
000298r 3               	bne shwob0 			; repeat for others.
000298r 3               	rts
000298r 3               
000298r 3               ;---------------------------------------------------
000298r 3               ; Display object.
000298r 3               ; hl must point to object's start address.
000298r 3               ;
000298r 3               ; Input:
000298r 3               ;  HL = object address
000298r 3               ;---------------------------------------------------
000298r 3               
000298r 3               dobj:
000298r 3               	ldy #32
000298r 3               	lda (z80_hl),y 			; point to y.
000298r 3               	sta objcol
000298r 3               	ldy #34
000298r 3               	lda (z80_hl),y 			; point to y.
000298r 3               	sta dispy
000298r 3               	iny
000298r 3               	lda (z80_hl),y 			; point to x.
000298r 3               	sta dispx
000298r 3               dobj1:
000298r 3               	jmp sprite 			; draw this sprite.
000298r 3               
000298r 3               ;--------------------------------------
000298r 3               ; Remove an object.
000298r 3               ;
000298r 3               ; Input:
000298r 3               ;  A = object number
000298r 3               ;--------------------------------------
000298r 3               
000298r 3               remob:
000298r 3               	cmp numob			; number of objects in game.
000298r 3               	bcc :+				; are we checking past the end?
000298r 3               	rts				; yes, can't get non-existent item.
000298r 3               :
000298r 3               	pha				; remember object.
000298r 3               	jsr getob			; pick it up if we haven't already got it.
000298r 3               	pla				; retrieve object number.
000298r 3               	jsr gotob			; get its address.
000298r 3               	lda #254
000298r 3               	ldy #33
000298r 3               	sta (z80_hl),y			; remove it.
000298r 3               	rts
000298r 3               
000298r 3               ;---------------------------------------------------
000298r 3               ; Pick up object number held in the accumulator.
000298r 3               ;
000298r 3               ; Input:
000298r 3               ;  A = object number
000298r 3               ;---------------------------------------------------
000298r 3               
000298r 3               getob:
000298r 3               	cmp numob 		; number of objects in game.
000298r 3               	bcc :+			; are we checking past the end?
000298r 3               	rts			; yes, can't get non-existent item.
000298r 3               :
000298r 3               	jsr gotob 		; check if we already have it.
000298r 3               	cmp #255
000298r 3               	bne :+
000298r 3               	rts			; we already do.
000298r 3               :
000298r 3               	ldy #33
000298r 3               	lda (z80_hl),y		; is it on this screen?
000298r 3               	cmp scno 		; current screen.
000298r 3               	bne getob0		; not on screen, so nothing to delete.
000298r 3               
000298r 3               	lda #255
000298r 3               	sta (z80_hl),y		; pick it up.
000298r 3               	iny 			; point to y coord.
000298r 3               getob1:
000298r 3               	ldy #34
000298r 3               	lda (z80_hl),y		; y coord.
000298r 3               	sta dispy
000298r 3               	ldy #35
000298r 3               	lda (z80_hl),y 		; x coord.
000298r 3               	sta dispx
000298r 3               	jmp dobj1 		; delete object sprite.
000298r 3               getob0:
000298r 3               	lda #255
000298r 3               	sta (z80_hl),y 		; pick it up.
000298r 3               	rts
000298r 3               .endif
000298r 3               
000298r 3               ;-----------------------------------------------------------------
000298r 3               ; Got object check.
000298r 3               ; Call with object in accumulator, returns zero set if in pockets.
000298r 3               ;
000298r 3               ; Input:
000298r 3               ;  A = object number
000298r 3               ;-----------------------------------------------------------------
000298r 3               .if oflag .or mflag
000298r 3               gotob:
000298r 3               	cmp numob 		; number of objects in game.
000298r 3               	bcc :+ 			; are we checking past the end?
000298r 3               	jmp gotob0 		; yes, we can't have a non-existent object.
000298r 3               :
000298r 3               	jsr findob		; find the object.
000298r 3               gotob1:
000298r 3               	rts
000298r 3               
000298r 3               gotob0:
000298r 3               	lda #254 		; missing.
000298r 3               	jmp gotob1
000298r 3               
000298r 3               findob:
000298r 3               	pha			; save object number
000298r 3               	lda #<objdta 		; objects.
000298r 3               	sta z80_l
000298r 3               	lda #>objdta
000298r 3               	sta z80_h
000298r 3               	pla			; retreive object number
000298r 3               	beq fndob1 		; is it zero? yes, skip loop.
000298r 3               	tax 			; loop counter
000298r 3               fndob2:
000298r 3               	clc
000298r 3               	lda z80_l
000298r 3               	adc #39 		; size of each object.
000298r 3               	sta z80_l
000298r 3               	bcc :+
000298r 3               	inc z80_h
000298r 3               :
000298r 3               	dex 			; repeat until we find address.
000298r 3               	bne fndob2
000298r 3               fndob1:
000298r 3               	ldy #33			; distance to room it's in.
000298r 3               	lda (z80_hl),y		; fetch status.
000298r 3               	rts
000298r 3               .endif
000298r 3               
000298r 3               ;---------------------------------------------
000298r 3               ; Drop object number at (dispx, dispy).
000298r 3               ;
000298r 3               ; Input:
000298r 3               ;  A = object number
000298r 3               ;---------------------------------------------
000298r 3               
000298r 3               .if oflag
000298r 3               drpob:
000298r 3               	cmp numob 		; are we checking past the end?
000298r 3               	bcc :+
000298r 3               	rts			; yes, can't drop non-existent item.
000298r 3               :
000298r 3               	jsr gotob		; make sure object is in inventory.
000298r 3               	cmp scno		; already on this screen?
000298r 3               	bne :+
000298r 3               	rts			; yes, nothing to do.
000298r 3               :
000298r 3               	ldy #33
000298r 3               	lda scno
000298r 3               	sta (z80_hl),y		; bring onto screen.
000298r 3               	lda dispy		; sprite y coordinate.
000298r 3               	iny
000298r 3               	sta (z80_hl),y		; point to object y.
000298r 3               	lda dispx 		; sprite x coordinate.
000298r 3               	iny
000298r 3               	sta (z80_hl),y 		; point to object x
000298r 3               	jmp dobj		; draw the object sprite.
000298r 3               
000298r 3               ;-----------------------------------------------
000298r 3               ; Seek objects at sprite position.
000298r 3               ;
000298r 3               ; Output:
000298r 3               ;  A = object number, if not found A=255
000298r 3               ;-----------------------------------------------
000298r 3               
000298r 3               skobj:
000298r 3               	lda #<objdta 		; pointer to objects.
000298r 3               	sta z80_l
000298r 3               	lda #>objdta
000298r 3               	sta z80_h
000298r 3               
000298r 3               	lda numob 		; number of objects in game.
000298r 3               	sta z80_b 		; set up the loop counter.
000298r 3               skobj0:
000298r 3               	lda scno		; current room number.
000298r 3               	ldy #33
000298r 3               	cmp (z80_hl),y		; is object in here?
000298r 3               	bne :+
000298r 3               	jsr skobj1		; yes, check coordinates.
000298r 3               :
000298r 3               	clc			; point to next object in table.
000298r 3               	lda z80_l
000298r 3               	adc #39			; size of each object.
000298r 3               	sta z80_l
000298r 3               	bcc :+
000298r 3               	inc z80_h
000298r 3               :
000298r 3               	dec z80_b
000298r 3               	bne skobj0		; repeat for all objects.
000298r 3               
000298r 3               	lda #255		; end of list and nothing found, return 255.
000298r 3               	rts
000298r 3               
000298r 3               skobj1:
000298r 3               	ldy #34			; point to y coordinate.
000298r 3               	lda (z80_hl),y		; point to y coordinate.
000298r 3               	sec
000298r 3               	ldy #var_newY
000298r 3               	sbc (z80_ix),y 		; subtract sprite y.
000298r 3               	clc
000298r 3               	adc #15			; add sprite height minus one.
000298r 3               	cmp #31			; within range?
000298r 3               	bcs skobj2		; no, ignore object.
000298r 3               
000298r 3               	ldy #35			; point to x coordinate now.
000298r 3               	lda (z80_hl),y 		; get coordinate.
000298r 3               	sec
000298r 3               	ldy #var_newX
000298r 3               	sbc (z80_ix),y 		; subtract the sprite x.
000298r 3               	clc			; add sprite width minus one.
000298r 3               	adc #15
000298r 3               	cmp #31			; within range?
000298r 3               	bcs skobj2		; no, ignore object.
000298r 3               
000298r 3               	pla			; remove return address from stack.
000298r 3               	pla
000298r 3               
000298r 3               	lda numob 		; objects in game.
000298r 3               	sec
000298r 3               	sbc z80_b		; subtract loop counter.
000298r 3               skobj2:
000298r 3               	rts			; accumulator now points to object.
000298r 3               .endif
000298r 3               
000298r 3               ;---------------------------------------------------------------------
000298r 3               ; Spawn a new sprite.
000298r 3               ;---------------------------------------------------------------------
000298r 3               
000298r 3               spawn:
000298r 3  A9 rr        	lda #<sprtab		; sprite table.
00029Ar 3  85 rr        	sta z80_l
00029Cr 3  A9 rr        	lda #>sprtab
00029Er 3  85 rr        	sta z80_h
0002A0r 3               numsp1:
0002A0r 3  A9 0C        	lda #NUMSPR		; number of sprites.
0002A2r 3  85 rr        	sta spcnt
0002A4r 3               spaw0:
0002A4r 3  A0 00        	ldy #var_Type
0002A6r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0002A8r 3  C9 FF        	cmp #255		; is it an unused slot?
0002AAr 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0002ACr 3               
0002ACr 3  18           	clc 			; point to next sprite in table.
0002ADr 3  A5 rr        	lda z80_l
0002AFr 3  69 11        	adc #TABSIZ		; size of each entry.
0002B1r 3  85 rr        	sta z80_l
0002B3r 3  90 02        	bcc :+
0002B5r 3  E6 rr        	inc z80_h
0002B7r 3               :
0002B7r 3  C6 rr        	dec spcnt		; one less iteration.
0002B9r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0002BBr 3               
0002BBr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0002BBr 3               
0002BBr 3               spaw1:
0002BBr 3  A5 rr        	lda z80_i		; address of original sprite.
0002BDr 3  48           	pha
0002BEr 3  A5 rr        	lda z80_x
0002C0r 3  48           	pha
0002C1r 3               
0002C1r 3  A5 rr        	lda z80_l		; store spawned sprite address.
0002C3r 3  85 rr        	sta spptr
0002C5r 3  A5 rr        	lda z80_h
0002C7r 3  85 rr        	sta spptr+1
0002C9r 3               
0002C9r 3  A5 rr        	lda z80_c
0002CBr 3  A0 00        	ldy #var_Type
0002CDr 3  91 rr        	sta (z80_hl),y 		; set the type.
0002CFr 3  A0 05        	ldy #var_newType
0002D1r 3  91 rr        	sta (z80_hl),y		; copy
0002D3r 3               
0002D3r 3  A5 rr        	lda z80_b
0002D5r 3  A0 01        	ldy #var_Image
0002D7r 3  91 rr        	sta (z80_hl),y		; set the image.
0002D9r 3  A0 06        	ldy #var_newImage
0002DBr 3  91 rr        	sta (z80_hl),y		; copy
0002DDr 3               
0002DDr 3  A9 00        	lda #0 				; frame zero.
0002DFr 3  A0 02        	ldy #var_Frame
0002E1r 3  91 rr        	sta (z80_hl),y		; set frame.
0002E3r 3  A0 07        	ldy #var_newFrame
0002E5r 3  91 rr        	sta (z80_hl),y		; copy
0002E7r 3               
0002E7r 3  A0 08        	ldy #8
0002E9r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0002EBr 3  A0 03        	ldy #3
0002EDr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002EFr 3  A0 08        	ldy #8
0002F1r 3  91 rr        	sta (z80_hl),y		; copy
0002F3r 3               
0002F3r 3  A0 09        	ldy #9
0002F5r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0002F7r 3  A0 04        	ldy #4
0002F9r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002FBr 3  A0 09        	ldy #9
0002FDr 3  91 rr        	sta (z80_hl),y		; copy
0002FFr 3               
0002FFr 3  A0 0A        	ldy #10				; direction of original.
000301r 3  B1 rr        	lda (z80_ix),y
000303r 3  91 rr        	sta (z80_hl),y		; direction
000305r 3               
000305r 3  A9 00        	lda #0
000307r 3  A0 0D        	ldy #var_jumpLo
000309r 3  91 rr        	sta (z80_hl),y		; reset parameter.
00030Br 3  C8           	iny
00030Cr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00030Er 3  C8           	iny
00030Fr 3  91 rr        	sta (z80_hl),y		; reset parameter.
000311r 3  C8           	iny
000312r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000314r 3               rtssp:
000314r 3  A5 rr        	lda spptr			; address of new sprite.
000316r 3  85 rr        	sta z80_x
000318r 3  A5 rr        	lda spptr+1
00031Ar 3  85 rr        	sta z80_i
00031Cr 3               evis1:
00031Cr 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
00031Fr 3               
00031Fr 3  A5 rr        	lda spptr 			; address of new sprite.
000321r 3  85 rr        	sta z80_x
000323r 3  A5 rr        	lda spptr+1
000325r 3  85 rr        	sta z80_i
000327r 3               
000327r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000327r 3  A0 03        	ldy #var_Y
000329r 3  B1 rr        	lda (z80_hl), y		; old x coord
00032Br 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
00032Dr 3  B0 03        	bcs :+				; yes, don't draw it.
00032Fr 3               
00032Fr 3  20 rr rr     	jsr sspria 			; display the new sprite.
000332r 3               :
000332r 3  68           	pla					; address of original sprite.
000333r 3  85 rr        	sta z80_x
000335r 3  68           	pla
000336r 3  85 rr        	sta z80_i
000338r 3               
000338r 3  60           	rts
000339r 3               
000339r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
00033Dr 3  30 30        
00033Fr 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000343r 3  30 30        
000345r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000349r 3  30 30        
00034Br 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
00034Dr 3               
00034Dr 3               ;----------------------------------------------------
00034Dr 3               ; Check y-pos
00034Dr 3               ;----------------------------------------------------
00034Dr 3               
00034Dr 3               checkx:
00034Dr 3  A5 rr        	lda dispy		; y position.
00034Fr 3  C9 16        	cmp #22			; off screen?
000351r 3  B0 01        	bcs :+
000353r 3  60           	rts			; no, it's okay.
000354r 3               :
000354r 3  68           	pla			; remove return address from stack.
000355r 3  85 rr        	sta z80_l
000357r 3  68           	pla
000358r 3  85 rr        	sta z80_h
00035Ar 3  60           	rts
00035Br 3               
00035Br 3               ;-----------------------------------------------
00035Br 3               ; Displays the current high score.
00035Br 3               ;-----------------------------------------------
00035Br 3               
00035Br 3               dhisc:
00035Br 3  A9 rr        	lda #<hiscor 		; high score text.
00035Dr 3  8D rr rr     	sta dscor3+1
000360r 3  8D rr rr     	sta bscor3+1
000363r 3  A9 rr        	lda #>hiscor
000365r 3  8D rr rr     	sta dscor3+2
000368r 3  8D rr rr     	sta bscor3+2
00036Br 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
00036Er 3               
00036Er 3               ;------------------------------------------------------
00036Er 3               ; Displays the current score.
00036Er 3               ;------------------------------------------------------
00036Er 3               
00036Er 3               dscor:
00036Er 3  A9 rr        	lda #<score		; score text.
000370r 3  8D rr rr     	sta dscor3+1
000373r 3  8D rr rr     	sta bscor3+1
000376r 3  A9 rr        	lda #>score
000378r 3  8D rr rr     	sta dscor3+2
00037Br 3  8D rr rr     	sta bscor3+2
00037Er 3               dscor1:
00037Er 3  8C rr rr     	sty tmpscr
000381r 3  20 rr rr     	jsr preprt		; set up font and print position.
000384r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
000387r 3               
000387r 3               ;	lda #6			; digits to display.
000387r 3               ;	sta z80_b
000387r 3  A5 rr        	lda prtmod		; get print mode.
000389r 3  F0 03        	beq :+			; standard size text?
00038Br 3  4C rr rr     	jmp bscor0		; no, show double-height.
00038Er 3               :
00038Er 3               dscor0:
00038Er 3               ;	ldy #0
00038Er 3               ;	lda (z80_hl),y 		; fetch character.
00038Er 3  AC rr rr     	ldy tmpscr
000391r 3               dscor3:
000391r 3  B9 rr rr     	lda score,y
000394r 3  20 rr rr     	jsr pchar 		; display character.
000397r 3  E6 rr        	inc dispx		; move along x coordinate
000399r 3               
000399r 3               ;	inc z80_l		; next score column.
000399r 3               ;	bne :+
000399r 3               ;	inc z80_h
000399r 3               ;:
000399r 3  EE rr rr     	inc tmpscr
00039Cr 3  C6 rr        	dec z80_b
00039Er 3  D0 EE        	bne dscor0 		; repeat for all digits.
0003A0r 3               dscor2:
0003A0r 3  A5 rr        	lda dispx 		; set up display coordinates.
0003A2r 3  85 rr        	sta charx
0003A4r 3  A5 rr        	lda dispy
0003A6r 3  85 rr        	sta chary
0003A8r 3  60           	rts
0003A9r 3               
0003A9r 3  00           tmpscr:	.byte 0
0003AAr 3               ;------------------------------------------------------
0003AAr 3               ; Displays the current score in double-height characters.
0003AAr 3               ;
0003AAr 3               ; Input:
0003AAr 3               ;  B  = digit number
0003AAr 3               ;  HL = score string
0003AAr 3               ;------------------------------------------------------
0003AAr 3               
0003AAr 3               bscor0:
0003AAr 3               ;	ldy #0
0003AAr 3               
0003AAr 3               ;	lda (z80_hl),y 		; fetch character.
0003AAr 3  A4 rr        	ldy tmp
0003ACr 3               bscor3:
0003ACr 3  B9 rr rr     	lda score,y
0003AFr 3  20 rr rr     	jsr bchar 		; display big char.
0003B2r 3               
0003B2r 3               ;	inc z80_l 		; next score column.
0003B2r 3               ;	bne :+
0003B2r 3               ;	inc z80_h
0003B2r 3               ;:
0003B2r 3  E6 rr        	inc tmp
0003B4r 3  C6 rr        	dec z80_b
0003B6r 3  F0 03        	beq :+
0003B8r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0003BBr 3               :
0003BBr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0003BEr 3               
0003BEr 3               ;-----------------------------------------------------
0003BEr 3               ; Adds number in the hl pair to the score.
0003BEr 3               ;-----------------------------------------------------
0003BEr 3               
0003BEr 3               addsc:
0003BEr 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0003C0r 3  85 rr        	sta z80_e
0003C2r 3  A9 rr        	lda #>(score+1)
0003C4r 3  85 rr        	sta z80_d
0003C6r 3  A9 10        	lda #<10000		; amount to add each time.
0003C8r 3  85 rr        	sta z80_c
0003CAr 3  A9 27        	lda #>10000
0003CCr 3  85 rr        	sta z80_b
0003CEr 3  20 rr rr     	jsr incsc		; add to score.
0003D1r 3               
0003D1r 3  E6 rr        	inc z80_e		; thousands column.
0003D3r 3  D0 02        	bne :+
0003D5r 3  E6 rr        	inc z80_d
0003D7r 3               :
0003D7r 3  A9 E8        	lda #<1000		; amount to add each time.
0003D9r 3  85 rr        	sta z80_c
0003DBr 3  A9 03        	lda #>1000
0003DDr 3  85 rr        	sta z80_b
0003DFr 3  20 rr rr     	jsr incsc 		; add to score.
0003E2r 3               
0003E2r 3  E6 rr        	inc z80_e		; hundreds column.
0003E4r 3  D0 02        	bne :+
0003E6r 3  E6 rr        	inc z80_d
0003E8r 3               :
0003E8r 3  A9 64        	lda #<100		; amount to add each time.
0003EAr 3  85 rr        	sta z80_c
0003ECr 3  A9 00        	lda #>100
0003EEr 3  85 rr        	sta z80_b
0003F0r 3  20 rr rr     	jsr incsc		; add to score.
0003F3r 3               
0003F3r 3  E6 rr        	inc z80_e 		; tens column.
0003F5r 3  D0 02        	bne :+
0003F7r 3  E6 rr        	inc z80_d
0003F9r 3               :
0003F9r 3  A9 0A        	lda #<10		; amount to add each time.
0003FBr 3  85 rr        	sta z80_c
0003FDr 3  A9 00        	lda #>10
0003FFr 3  85 rr        	sta z80_b
000401r 3  20 rr rr     	jsr incsc 		; add to score.
000404r 3               
000404r 3  E6 rr        	inc z80_e		; units column.
000406r 3  D0 02        	bne :+
000408r 3  E6 rr        	inc z80_d
00040Ar 3               :
00040Ar 3  A9 01        	lda #<1			; units.
00040Cr 3  85 rr        	sta z80_c
00040Er 3  A9 00        	lda #>1
000410r 3  85 rr        	sta z80_b
000412r 3               incsc:
000412r 3  A5 rr        	lda z80_h		; store amount to add.
000414r 3  48           	pha
000415r 3  A5 rr        	lda z80_l
000417r 3  48           	pha
000418r 3               
000418r 3  38           	sec			; subtract from amount to add.
000419r 3  A5 rr        	lda z80_l
00041Br 3  E5 rr        	sbc z80_c
00041Dr 3  85 rr        	sta z80_l
00041Fr 3  A5 rr        	lda z80_h
000421r 3  E5 rr        	sbc z80_b
000423r 3  85 rr        	sta z80_h
000425r 3  90 14        	bcc incsc0		; too much, restore value.
000427r 3               
000427r 3  68           	pla			; delete the previous amount from the stack.
000428r 3  68           	pla
000429r 3               
000429r 3  A5 rr        	lda z80_d 		; store column position.
00042Br 3  48           	pha
00042Cr 3  A5 rr        	lda z80_e
00042Er 3  48           	pha
00042Fr 3  20 rr rr     	jsr incsc2		; do the increment.
000432r 3               
000432r 3  68           	pla			; restore column.
000433r 3  85 rr        	sta z80_e
000435r 3  68           	pla
000436r 3  85 rr        	sta z80_d
000438r 3  4C rr rr     	jmp incsc		; repeat until all added.
00043Br 3               
00043Br 3               incsc0:
00043Br 3  68           	pla			; restore previous value.
00043Cr 3  85 rr        	sta z80_l
00043Er 3  68           	pla
00043Fr 3  85 rr        	sta z80_h
000441r 3  60           	rts
000442r 3               incsc2:
000442r 3  A0 00        	ldy #0
000444r 3  B1 rr        	lda (z80_de),y 		; get amount.
000446r 3  18           	clc
000447r 3  69 01        	adc #1			; add one to column.
000449r 3  91 rr        	sta (z80_de),y		; write new column total.
00044Br 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00044Dr 3  B0 01        	bcs :+
00044Fr 3  60           	rts			; no, carry on.
000450r 3               :
000450r 3  A9 30        	lda #'0'		; make it zero.
000452r 3  91 rr        	sta (z80_de),y		; write new column total.
000454r 3  C6 rr        	dec z80_e		; back one column.
000456r 3  D0 02        	bne :+
000458r 3  C6 rr        	dec z80_d
00045Ar 3               :
00045Ar 3  4C rr rr     	jmp incsc2
00045Dr 3               
00045Dr 3               ;------------------------------------
00045Dr 3               ; Add bonus to score and reset bonus
00045Dr 3               ;------------------------------------
00045Dr 3               
00045Dr 3               addbo:
00045Dr 3  A2 05        	ldx #5			; last digit.
00045Fr 3  18           	clc
000460r 3               addbo0:
000460r 3  BD rr rr     	lda score,x		; get score.
000463r 3  7D rr rr     	adc bonus,x		; add bonus.
000466r 3  38           	sec			; 0 to 18.
000467r 3  E9 30        	sbc #48
000469r 3  48           	pha
00046Ar 3  A9 30        	lda #'0'
00046Cr 3  9D rr rr     	sta bonus,x
00046Fr 3  68           	pla
000470r 3  C9 3A        	cmp #58
000472r 3  90 03        	bcc addbo1
000474r 3  38           	sec
000475r 3  E9 0A        	sbc #10
000477r 3               addbo1:
000477r 3  9D rr rr     	sta score,x		; zeroise bonus.
00047Ar 3  CA           	dex			; next digit.
00047Br 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
00047Dr 3  60           	rts
00047Er 3               
00047Er 3               ;------------------------------------
00047Er 3               ; Swap score and bonus.
00047Er 3               ;------------------------------------
00047Er 3               
00047Er 3               swpsb:
00047Er 3  A2 05        	ldx #5			; digits to add.
000480r 3               swpsb0:
000480r 3  BD rr rr     	lda score,x 		; get score digits.
000483r 3  48           	pha			; save digit
000484r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
000487r 3  9D rr rr     	sta score,x		; switch score-bonus
00048Ar 3  68           	pla
00048Br 3  9D rr rr     	sta bonus,x
00048Er 3  CA           	dex 			; repeat for all 6 digits.
00048Fr 3  10 EF        	bpl swpsb0
000491r 3  60           	rts
000492r 3               
000492r 3               ;----------------------------------------------------
000492r 3               ; Get print address.
000492r 3               ;----------------------------------------------------
000492r 3               
000492r 3               gprad:
000492r 3  98           	tya
000493r 3  48           	pha
000494r 3               
000494r 3  A5 rr        	lda dispx 		; x coordinate.
000496r 3  85 rr        	sta scraddr
000498r 3  A9 00        	lda #0
00049Ar 3  85 rr        	sta scraddr+1
00049Cr 3  06 rr        	asl scraddr  		; multiply char by 16
00049Er 3  26 rr        	rol scraddr+1
0004A0r 3  06 rr        	asl scraddr
0004A2r 3  26 rr        	rol scraddr+1
0004A4r 3  06 rr        	asl scraddr
0004A6r 3  26 rr        	rol scraddr+1
0004A8r 3  06 rr        	asl scraddr
0004AAr 3  26 rr        	rol scraddr+1
0004ACr 3               
0004ACr 3  A5 rr        	lda dispy		; y coordinate.
0004AEr 3  0A           	asl a
0004AFr 3  0A           	asl a
0004B0r 3  0A           	asl a			; multiply char by 8
0004B1r 3  A8           	tay
0004B2r 3               
0004B2r 3  18           	clc
0004B3r 3  A5 rr        	lda scraddr
0004B5r 3  79 00 07     	adc SCADTB_lb,y
0004B8r 3  85 rr        	sta scraddr
0004BAr 3  A5 rr        	lda scraddr+1
0004BCr 3  79 00 08     	adc SCADTB_hb,y
0004BFr 3  85 rr        	sta scraddr+1
0004C1r 3               
0004C1r 3  A5 rr        	lda prtmod		; Double line if bigtxt
0004C3r 3  F0 08        	beq noskip
0004C5r 3  A5 rr        	lda dispx
0004C7r 3  29 E0        	and #$e0
0004C9r 3  F0 02        	beq noskip
0004CBr 3  E6 rr        	inc scraddr+1
0004CDr 3               noskip:
0004CDr 3               
0004CDr 3  68           	pla
0004CEr 3  A8           	tay
0004CFr 3  60           	rts
0004D0r 3               ;--------------------------------------------------------------
0004D0r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
0004D0r 3               ;
0004D0r 3               ; Output:
0004D0r 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
0004D0r 3               ;--------------------------------------------------------------
0004D0r 3               
0004D0r 3               pradd:
0004D0r 3  A5 rr        	lda dispy 		; y coordinate.
0004D2r 3  85 rr        	sta bufaddr
0004D4r 3  A9 00        	lda #0
0004D6r 3  85 rr        	sta bufaddr+1
0004D8r 3  06 rr        	asl bufaddr  		; multiply char by 32
0004DAr 3  26 rr        	rol bufaddr+1
0004DCr 3  06 rr        	asl bufaddr
0004DEr 3  26 rr        	rol bufaddr+1
0004E0r 3  06 rr        	asl bufaddr
0004E2r 3  26 rr        	rol bufaddr+1
0004E4r 3  06 rr        	asl bufaddr
0004E6r 3  26 rr        	rol bufaddr+1
0004E8r 3  06 rr        	asl bufaddr
0004EAr 3  26 rr        	rol bufaddr+1
0004ECr 3  18           	clc			; add address of MAP graphics.
0004EDr 3  A5 rr        	lda bufaddr
0004EFr 3  65 rr        	adc dispx
0004F1r 3  69 00        	adc #<MAP
0004F3r 3  85 rr        	sta bufaddr
0004F5r 3  A5 rr        	lda bufaddr+1
0004F7r 3  69 04        	adc #>MAP
0004F9r 3  85 rr        	sta bufaddr+1
0004FBr 3  60           	rts
0004FCr 3               
0004FCr 3               ;--------------------------------------------------------------
0004FCr 3               ; Get attribute address at (dispx, dispy).
0004FCr 3               ;
0004FCr 3               ; Output:
0004FCr 3               ;  bufaddr = COLOR + dispy*22 + dispx
0004FCr 3               ;--------------------------------------------------------------
0004FCr 3               
0004FCr 3               gaadd:
0004FCr 3  A5 rr        	lda dispy
0004FEr 3  4A           	lsr a
0004FFr 3  A8           	tay
000500r 3  B9 55 0A     	lda COLATTTB_hb,y
000503r 3  85 rr        	sta bufaddr+1
000505r 3  B9 4A 0A     	lda COLATTTB_lb,y
000508r 3  18           	clc
000509r 3  65 rr        	adc dispx
00050Br 3  85 rr        	sta bufaddr
00050Dr 3  60           	rts
00050Er 3               
00050Er 3               ;----------------------------------------------
00050Er 3               ; Print attributes, properties and pixels.
00050Er 3               ;
00050Er 3               ; Input:
00050Er 3               ;  A	= tile number
00050Er 3               ;----------------------------------------------
00050Er 3               
00050Er 3               pbpattr:			; entry PUTBLOCK command
00050Er 3  A4 rr        	ldy charx
000510r 3  84 rr        	sty dispx
000512r 3  A4 rr        	ldy chary
000514r 3  84 rr        	sty dispy
000516r 3               pattr:
000516r 3               .if aflag
000516r 3               	pha
000516r 3               	jsr wbloc		; save blockinfo
000516r 3               	pla
000516r 3               .endif
000516r 3               
000516r 3               pattr2:
000516r 3  85 rr        	sta z80_b		; store cell in b register for now.
000518r 3  AA           	tax
000519r 3  BD rr rr     	lda bprop,x 		; block properties.
00051Cr 3  85 rr        	sta z80_c
00051Er 3  C9 08        	cmp #COLECT
000520r 3  D0 04        	bne :+
000522r 3  A5 rr        	lda z80_b
000524r 3  85 rr        	sta colpatt
000526r 3               :
000526r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000529r 3  A5 rr        	lda z80_c
00052Br 3  A0 00        	ldy #0
00052Dr 3  91 rr        	sta (bufaddr),y 	; write property.
00052Fr 3  A5 rr        	lda z80_b 		; restore cell.
000531r 3  4C rr rr     	jmp panp
000534r 3               ; Print attributes, no properties.
000534r 3               
000534r 3               ;colpatt:	.byte 0
000534r 3               
000534r 3               panp:
000534r 3  85 rr        	sta z80_e		; displacement in e.
000536r 3  A9 00        	lda #0
000538r 3  85 rr        	sta z80_d		; no high byte.
00053Ar 3  06 rr        	asl z80_e  		; multiply char by 8.
00053Cr 3  26 rr        	rol z80_d
00053Er 3  06 rr        	asl z80_e
000540r 3  26 rr        	rol z80_d
000542r 3  06 rr        	asl z80_e
000544r 3  26 rr        	rol z80_d
000546r 3  18           	clc
000547r 3  A5 rr        	lda z80_e
000549r 3  69 rr        	adc #<chgfx 		; address of graphics.
00054Br 3  85 rr        	sta tileaddr
00054Dr 3  A5 rr        	lda z80_d
00054Fr 3  69 rr        	adc #>chgfx
000551r 3  85 rr        	sta tileaddr+1
000553r 3               
000553r 3  A6 rr        	ldx z80_b		; set colour attribute
000555r 3  BD rr rr     	lda bCol,x
000558r 3  48           	pha
000559r 3  20 rr rr     	jsr gaadd
00055Cr 3  A0 00        	ldy #0
00055Er 3  68           	pla
00055Fr 3  91 rr        	sta (bufaddr),y
000561r 3               
000561r 3  20 rr rr     	jsr gprad 		; get screen address.
000564r 3  A2 07        	ldx #7			; number of pixel rows to write.
000566r 3               panp0:
000566r 3  A0 00        	ldy #0
000568r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
00056Ar 3               .if iflag
00056Ar 3               	eor #$ff		; Invert
00056Ar 3               .endif
00056Ar 3  BC rr rr     	ldy scrtab,x
00056Dr 3  91 rr        	sta (scraddr),y 	; copy to screen.
00056Fr 3  E6 rr        	inc tileaddr 		; next image byte.
000571r 3  D0 02        	bne :+
000573r 3  E6 rr        	inc tileaddr+1
000575r 3               :
000575r 3  CA           	dex	 		; repeat for 8 pixel rows.
000576r 3  10 EE        	bpl panp0
000578r 3  E6 rr        	inc dispx 		; move along one.
00057Ar 3  E6 rr        	inc charx
00057Cr 3  60           	rts
00057Dr 3               
00057Dr 3               ;----------------------------------------------
00057Dr 3               ; Write block
00057Dr 3               ;----------------------------------------------
00057Dr 3               
00057Dr 3               .if aflag
00057Dr 3               wbloc:
00057Dr 3               	ldy #3
00057Dr 3               	sta (pbptr),y		; store block number
00057Dr 3               	dey
00057Dr 3               	lda dispx
00057Dr 3               	sta (pbptr),y		; write x position of block.
00057Dr 3               	dey
00057Dr 3               	lda dispy
00057Dr 3               	sta (pbptr),y		; write y position of block.
00057Dr 3               	dey
00057Dr 3               	lda scno
00057Dr 3               	sta (pbptr),y		; write screen.
00057Dr 3               	clc			; point to next free location
00057Dr 3               	lda pbptr
00057Dr 3               	adc #4
00057Dr 3               	sta pbptr
00057Dr 3               	bcc :+
00057Dr 3               	inc pbptr+1
00057Dr 3               :
00057Dr 3               	rts
00057Dr 3               .endif
00057Dr 3               
00057Dr 3               ;.if kflag
00057Dr 3               ;panp:
00057Dr 3               ;.endif
00057Dr 3               
00057Dr 3               ;----------------------------------------------
00057Dr 3               ; Print character pixels, no more.
00057Dr 3               ;
00057Dr 3               ; Input:
00057Dr 3               ;  A	= character to print
00057Dr 3               ;----------------------------------------------
00057Dr 3               
00057Dr 3               pchr:
00057Dr 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000580r 3  E6 rr        	inc dispx		; move along one.
000582r 3  60           	rts
000583r 3               
000583r 3               ;----------------------------------------------------
000583r 3               ; Shifter sprite routine for objects.
000583r 3               ;----------------------------------------------------
000583r 3               
000583r 3               .if oflag
000583r 3               sprit7:
000583r 3               	lda z80_b
000583r 3               	beq sprit0
000583r 3               	sta z80_a
000583r 3               sprit3:
000583r 3               	lsr spr			; shift into position.
000583r 3               	ror spr+1
000583r 3               	ror spr+2
000583r 3               	dec z80_a		; one less iteration.
000583r 3               	bne sprit3
000583r 3               sprit0:
000583r 3               	rts 			; now apply to screen.
000583r 3               .endif
000583r 3               
000583r 3               ;-----------------------------------------------------------
000583r 3               ; Get room address.
000583r 3               ;-----------------------------------------------------------
000583r 3               
000583r 3               groom:
000583r 3  A6 rr        	ldx scno 		; screen number.
000585r 3  A0 00        	ldy #0
000587r 3               groomx:
000587r 3  A9 rr        	lda #<scdat 		; pointer to screens.
000589r 3  85 rr        	sta z80_l
00058Br 3  A9 rr        	lda #>scdat
00058Dr 3  85 rr        	sta z80_h
00058Fr 3               groom1:
00058Fr 3  E0 00        	cpx #0			; is it the first one?
000591r 3  F0 15        	beq groom0 		; no more screens to skip.
000593r 3               
000593r 3  18           	clc
000594r 3  A5 rr        	lda z80_l
000596r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
000599r 3  85 rr        	sta z80_l
00059Br 3  C8           	iny			; point to high byte.
00059Cr 3  A5 rr        	lda z80_h
00059Er 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
0005A1r 3  85 rr        	sta z80_h
0005A3r 3  C8           	iny			; next address.
0005A4r 3               
0005A4r 3  CA           	dex 			; one less iteration.
0005A5r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
0005A8r 3               groom0:
0005A8r 3  AD rr rr     	lda numsc		; add displacement.
0005ABr 3  0A           	asl a
0005ACr 3  18           	clc			; add double displacement to address.
0005ADr 3  65 rr        	adc z80_l
0005AFr 3  85 rr        	sta z80_l
0005B1r 3  A5 rr        	lda z80_h
0005B3r 3  69 00        	adc #0
0005B5r 3  85 rr        	sta z80_h
0005B7r 3  60           	rts
0005B8r 3               
0005B8r 3               ;-----------------------------------------------------------
0005B8r 3               ; Draw present room.
0005B8r 3               ;-----------------------------------------------------------
0005B8r 3               
0005B8r 3               droom:
0005B8r 3  AD rr rr     	lda wintop 		; window top.
0005BBr 3  85 rr        	sta dispy		; set cursor y position.
0005BDr 3               droom2:
0005BDr 3  20 rr rr     	jsr groom 		; get address of current room.
0005C0r 3  A9 00        	lda #0	 		; zero in accumulator.
0005C2r 3  85 rr        	sta comcnt 		; reset compression counter.
0005C4r 3  AD rr rr     	lda winhgt 		; height of window.
0005C7r 3  85 rr        	sta rrow		; set row counter
0005C9r 3               droom0:
0005C9r 3  AD rr rr     	lda winlft 		; window left edge.
0005CCr 3  85 rr        	sta dispx 		; set cursor x position.
0005CEr 3  AD rr rr     	lda winwid 		; width of window.
0005D1r 3  85 rr        	sta rcol		; set column counter
0005D3r 3               droom1:
0005D3r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
0005D6r 3               .if xflag
0005D6r 3               	jsr drwmeta
0005D6r 3               .else
0005D6r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
0005D9r 3               .endif
0005D9r 3  C6 rr        	dec rcol		; one less column.
0005DBr 3  D0 F6        	bne droom1 		; repeat for entire line.
0005DDr 3  E6 rr        	inc dispy		; move down one line.
0005DFr 3               .if xflag
0005DFr 3               	inc dispy		; move down one line.
0005DFr 3               .endif
0005DFr 3  C6 rr        	dec rrow 		; one less row.
0005E1r 3  D0 E6        	bne droom0 		; repeat for all rows.
0005E3r 3  60           	rts
0005E4r 3               
0005E4r 3               ;----------------------------------------------
0005E4r 3               ; Decompress bytes on-the-fly.
0005E4r 3               ;----------------------------------------------
0005E4r 3               
0005E4r 3               flbyt:
0005E4r 3  A5 rr        	lda comcnt 		; compression counter.
0005E6r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
0005E8r 3               
0005E8r 3  A0 00        	ldy #0
0005EAr 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
0005ECr 3  E6 rr        	inc z80_l 		; point to next cell.
0005EEr 3  D0 02        	bne :+
0005F0r 3  E6 rr        	inc z80_h
0005F2r 3               :
0005F2r 3  C9 FF        	cmp #255 		; is this byte a control code?
0005F4r 3  F0 01        	beq :+
0005F6r 3  60           	rts 			; no, this byte is uncompressed.
0005F7r 3               :
0005F7r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
0005F9r 3  85 rr        	sta combyt 		; set up the type.
0005FBr 3  E6 rr        	inc z80_l 		; point to quantity.
0005FDr 3  D0 02        	bne :+
0005FFr 3  E6 rr        	inc z80_h
000601r 3               :
000601r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000603r 3  E6 rr        	inc z80_l 		; point to next byte.
000605r 3  D0 02        	bne :+
000607r 3  E6 rr        	inc z80_h
000609r 3               :
000609r 3               flbyt1:
000609r 3  85 rr        	sta comcnt 		; store new quantity.
00060Br 3  C6 rr        	dec comcnt		; one less.
00060Dr 3  A5 rr        	lda combyt 		; byte to expand.
00060Fr 3  60           	rts
000610r 3               
000610r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000610r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000610r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000610r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000610r 3               .if xflag
000610r 3               drwmeta:
000610r 3               	sta tmpblk
000610r 3               	jsr pattr2
000610r 3               
000610r 3               	inc dispy
000610r 3               	dec dispx
000610r 3               	ldx tmpblk
000610r 3               	beq :+
000610r 3               	inx
000610r 3               :
000610r 3               	txa
000610r 3               	jsr pattr2
000610r 3               
000610r 3               	ldx tmpblk
000610r 3               	beq :+
000610r 3               	inx
000610r 3               	inx
000610r 3               	inx
000610r 3               :
000610r 3               	txa
000610r 3               	jsr pattr2
000610r 3               
000610r 3               	dec dispy
000610r 3               	dec dispx
000610r 3               	ldx tmpblk
000610r 3               	beq :+
000610r 3               	inx
000610r 3               	inx
000610r 3               :
000610r 3               	txa
000610r 3               	jsr pattr2
000610r 3               	rts
000610r 3               
000610r 3               tmpblk:	.byte 0
000610r 3               
000610r 3               .endif
000610r 3               
000610r 3               ;------------------------------------------
000610r 3               ; Ladder down check.
000610r 3               ;
000610r 3               ; Input:
000610r 3               ;  IX = sprite pointer
000610r 3               ;------------------------------------------
000610r 3               
000610r 3               .if lflag
000610r 3               laddd:
000610r 3               	ldy #9
000610r 3               	lda (z80_ix),y		; x coordinate.
000610r 3               	sta dispx
000610r 3               
000610r 3               	ldy #8
000610r 3               	lda (z80_ix),y		; y coordinate.
000610r 3               	and #254		; make it even.
000610r 3               	sta (z80_ix),y 		; reset it.
000610r 3               	clc 			; look down 16 pixels.
000610r 3               numsp5:
000610r 3               	adc #SPR_HGT
000610r 3               	sta dispy		; coords in dispx,dispy.
000610r 3               	jmp laddv
000610r 3               
000610r 3               ;------------------------------------------
000610r 3               ; Ladder up check.
000610r 3               ;
000610r 3               ; Input:
000610r 3               ;  IX = sprite pointer
000610r 3               ;
000610r 3               ; Output:
000610r 3               ;  A  = 0 is ok, A <>0 is not ok
000610r 3               ;------------------------------------------
000610r 3               
000610r 3               laddu:
000610r 3               	ldy #9
000610r 3               	lda (z80_ix),y		; x coordinate.
000610r 3               	sta dispx
000610r 3               
000610r 3               	ldy #8
000610r 3               	lda (z80_ix),y		; y coordinate.
000610r 3               	and #254 		; make it even.
000610r 3               	sta (z80_ix),y		; reset it.
000610r 3               	clc 			; look 2 pixels above feet.
000610r 3               numsp6:
000610r 3               	adc #SPR_HGT-2
000610r 3               	sta dispy		; coords in dispx,dispy.
000610r 3               laddv:
000610r 3               	jsr tstbl 		; get map address.
000610r 3               	jsr ldchk 		; standard ladder check.
000610r 3               	beq :+
000610r 3               	rts 			; no way through.
000610r 3               :
000610r 3               	inc bufaddr 		; look right one cell.
000610r 3               	bne :+
000610r 3               	inc bufaddr+1
000610r 3               :
000610r 3               	jsr ldchk 		; do the check.
000610r 3               	beq :+
000610r 3               	rts 			; impassable.
000610r 3               :
000610r 3               	lda dispx 		; y coordinate.
000610r 3               	and #7 			; position straddling block cells.
000610r 3               	bne :+
000610r 3               	rts 			; no more checks needed.
000610r 3               :
000610r 3               	inc bufaddr 		; look to third cell.
000610r 3               	bne :+
000610r 3               	inc bufaddr+1
000610r 3               :
000610r 3               	jsr ldchk 		; do the check.
000610r 3               	rts  			; return with zero flag set accordingly.
000610r 3               .endif
000610r 3               
000610r 3               ;---------------------------------------------------------
000610r 3               ; Can go up check.
000610r 3               ;
000610r 3               ; Input:
000610r 3               ;  IX = sprite pointer
000610r 3               ;
000610r 3               ; Output:
000610r 3               ;  A  = 0 is ok, A <>0 is not ok
000610r 3               ;---------------------------------------------------------
000610r 3               
000610r 3               cangu:
000610r 3  A0 09        	ldy #9
000612r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000614r 3  85 rr        	sta dispx
000616r 3  A0 08        	ldy #8
000618r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00061Ar 3  38           	sec
00061Br 3  E9 02        	sbc #2
00061Dr 3  85 rr        	sta dispy		; coords in dispx,dispy.
00061Fr 3  20 rr rr     	jsr tstbl 		; get map address.
000622r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000625r 3  F0 01        	beq :+
000627r 3  60           	rts			; no way through.
000628r 3               :
000628r 3  E6 rr        	inc bufaddr		; look right one cell.
00062Ar 3  D0 02        	bne :+
00062Cr 3  E6 rr        	inc bufaddr+1
00062Er 3               :
00062Er 3  20 rr rr     	jsr lrchk 		; do the check.
000631r 3  F0 01        	beq :+
000633r 3  60           	rts			; impassable.
000634r 3               :
000634r 3  A5 rr        	lda dispx		; x coordinate.
000636r 3  29 07        	and #7			; position straddling block cells.
000638r 3  D0 01        	bne :+
00063Ar 3  60           	rts			; no more checks needed.
00063Br 3               :
00063Br 3  E6 rr        	inc bufaddr		; look to third cell.
00063Dr 3  D0 02        	bne :+
00063Fr 3  E6 rr        	inc bufaddr+1
000641r 3               :
000641r 3  20 rr rr     	jsr lrchk		; do the check.
000644r 3  60           	rts 			; return with zero flag set accordingly.
000645r 3               
000645r 3               ;---------------------------------------------------------
000645r 3               ; Can go down check.
000645r 3               ;
000645r 3               ; Input:
000645r 3               ;  IX = sprite pointer
000645r 3               ;
000645r 3               ; Output:
000645r 3               ;  A  = 0 is ok, A <>0 is not ok
000645r 3               ;---------------------------------------------------------
000645r 3               
000645r 3               cangd:
000645r 3  A0 09        	ldy #9
000647r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000649r 3  85 rr        	sta dispx
00064Br 3  A0 08        	ldy #8
00064Dr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00064Fr 3  18           	clc
000650r 3               numsp3:
000650r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000652r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000654r 3  20 rr rr     	jsr tstbl 		; get map address.
000657r 3  20 rr rr     	jsr plchk 		; block, platform check.
00065Ar 3  F0 01        	beq :+
00065Cr 3  60           	rts			; no way through.
00065Dr 3               :
00065Dr 3  E6 rr        	inc bufaddr		; look right one cell.
00065Fr 3  D0 02        	bne :+
000661r 3  E6 rr        	inc bufaddr+1
000663r 3               :
000663r 3  20 rr rr     	jsr plchk		; block, platform check.
000666r 3  F0 01        	beq :+
000668r 3  60           	rts			; impassable.
000669r 3               :
000669r 3  A5 rr        	lda dispx		; x coordinate.
00066Br 3  29 07        	and #7			; position straddling block cells.
00066Dr 3  D0 01        	bne :+
00066Fr 3  60           	rts			; no more checks needed.
000670r 3               :
000670r 3  E6 rr        	inc bufaddr		; look to third cell.
000672r 3  D0 02        	bne :+
000674r 3  E6 rr        	inc bufaddr+1
000676r 3               :
000676r 3  20 rr rr     	jsr plchk		; block, platform check.
000679r 3  60           	rts			; return with zero flag set accordingly.
00067Ar 3               
00067Ar 3               ;---------------------------------------------------------
00067Ar 3               ; Can go left check.
00067Ar 3               ;
00067Ar 3               ; Input:
00067Ar 3               ;  IX = sprite pointer
00067Ar 3               ;
00067Ar 3               ; Output:
00067Ar 3               ;  A  = 0 is ok, A <>0 is not ok
00067Ar 3               ;---------------------------------------------------------
00067Ar 3               
00067Ar 3               cangl:
00067Ar 3  A0 08        	ldy #8
00067Cr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00067Er 3  85 rr        	sta dispy
000680r 3  A0 09        	ldy #9
000682r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000684r 3  38           	sec
000685r 3  E9 02        	sbc #2			; look left 2 pixels.
000687r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000689r 3  4C rr rr     	jmp cangh		; test if we can go there.
00068Cr 3               
00068Cr 3               ;---------------------------------------------------------
00068Cr 3               ; Can go right check.
00068Cr 3               ;
00068Cr 3               ; Input:
00068Cr 3               ;  IX = sprite pointer
00068Cr 3               ;
00068Cr 3               ; Output:
00068Cr 3               ;  A  = 0 is ok, A <>0 is not ok
00068Cr 3               ;---------------------------------------------------------
00068Cr 3               
00068Cr 3               cangr:
00068Cr 3  A0 08        	ldy #8
00068Er 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000690r 3  85 rr        	sta dispy
000692r 3  A0 09        	ldy #9
000694r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000696r 3  18           	clc
000697r 3  69 10        	adc #16			; look right 16 pixels.
000699r 3  85 rr        	sta dispx		; coords in dispx,dispy.
00069Br 3               cangh:
00069Br 3               cangh2:
00069Br 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
00069Dr 3  85 rr        	sta z80_b
00069Fr 3  A5 rr        	lda dispy		; y position.
0006A1r 3  29 07        	and #7			; does x straddle cells?
0006A3r 3  D0 02        	bne cangh0		; yes, loop counter is good.
0006A5r 3  C6 rr        	dec z80_b		; one less row to write.
0006A7r 3               cangh0:
0006A7r 3  20 rr rr     	jsr tstbl		; get map address.
0006AAr 3               cangh1:
0006AAr 3  20 rr rr     	jsr lrchk		; standard left/right check.
0006ADr 3  F0 01        	beq :+
0006AFr 3  60           	rts			; no way through.
0006B0r 3               :
0006B0r 3  48           	pha
0006B1r 3  18           	clc
0006B2r 3  A5 rr        	lda bufaddr
0006B4r 3  69 20        	adc #32		; look down.
0006B6r 3  85 rr        	sta bufaddr
0006B8r 3  90 02        	bcc :+
0006BAr 3  E6 rr        	inc bufaddr+1
0006BCr 3               :
0006BCr 3  68           	pla
0006BDr 3               
0006BDr 3  C6 rr        	dec z80_b
0006BFr 3  D0 E9        	bne cangh1
0006C1r 3  60           	rts
0006C2r 3               
0006C2r 3               ;-------------------------------------
0006C2r 3               ; Check left/right movement is okay.
0006C2r 3               ;
0006C2r 3               ; Input:
0006C2r 3               ;  bufaddr = MAP + x/8 + y/8*32
0006C2r 3               ;
0006C2r 3               ; Output:
0006C2r 3               ;  A  = 0 is ok, A <>0 is not ok
0006C2r 3               ;-------------------------------------
0006C2r 3               
0006C2r 3               lrchk:
0006C2r 3  A0 00        	ldy #0
0006C4r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0006C6r 3  C9 02        	cmp #WALL 		; is it passable?
0006C8r 3  F0 0A        	beq lrchkx		; no.
0006CAr 3               
0006CAr 3  C9 04        	cmp #FODDER		; fodder has to be dug.
0006CCr 3  F0 06        	beq lrchkx		; not passable.
0006CEr 3  A9 00        	lda #0
0006D0r 3  60           	rts
0006D1r 3               
0006D1r 3               ;--------------------------------------------------------------
0006D1r 3               ; Called by mmenu
0006D1r 3               ;--------------------------------------------------------------
0006D1r 3               
0006D1r 3               always:
0006D1r 3  A9 FF        	lda #255		; report it as okay.
0006D3r 3  60           	rts
0006D4r 3               
0006D4r 3               lrchkx:
0006D4r 3  A9 01        	lda #1 			; reset all bits.
0006D6r 3  60           	rts
0006D7r 3               
0006D7r 3               
0006D7r 3               ;--------------------------------------------------------------
0006D7r 3               ; Check platform or solid item is not in way.
0006D7r 3               ;
0006D7r 3               ; Input:
0006D7r 3               ;  bufaddr = MAP + x/8 + y/8*32
0006D7r 3               ;
0006D7r 3               ; Output:
0006D7r 3               ;  A  = 0 is ok, A <>0 is not ok
0006D7r 3               ;--------------------------------------------------------------
0006D7r 3               
0006D7r 3               plchk:
0006D7r 3  A0 00        	ldy #0
0006D9r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0006DBr 3  C9 02        	cmp #WALL 		; is it passable?
0006DDr 3  F0 F5        	beq lrchkx		; no.
0006DFr 3               .if pflag .or dflag
0006DFr 3               	cmp #FODDER		; fodder has to be dug.
0006DFr 3               	beq lrchkx		; not passable.
0006DFr 3               .endif
0006DFr 3  C9 01        	cmp #PLATFM		; platform is solid.
0006E1r 3  F0 03        	beq plchkx		; not passable.
0006E3r 3               .if lflag
0006E3r 3               	cmp #LADDER		; is it a ladder?
0006E3r 3               	beq lrchkx		; on ladder, deny movement.
0006E3r 3               .endif
0006E3r 3               plchk0:
0006E3r 3  A9 00        	lda #0			; report as ok
0006E5r 3  60           	rts
0006E6r 3               plchkx:
0006E6r 3  A5 rr        	lda dispy		; x coordinate.
0006E8r 3  29 07        	and #7			; position straddling blocks.
0006EAr 3  F0 E8        	beq lrchkx		; on platform, deny movement.
0006ECr 3  4C rr rr     	jmp plchk0
0006EFr 3               
0006EFr 3               ;--------------------------------------------------------------
0006EFr 3               ; Check ladder is available.
0006EFr 3               ;
0006EFr 3               ; Input:
0006EFr 3               ;  bufaddr = MAP + x/8 + y/8*32
0006EFr 3               ;
0006EFr 3               ; Output:
0006EFr 3               ;  A  = 0 is ok, A <>0 is not ok
0006EFr 3               ;--------------------------------------------------------------
0006EFr 3               
0006EFr 3               .if lflag
0006EFr 3               ldchk:
0006EFr 3               	ldy #0
0006EFr 3               	lda (bufaddr),y 	; fetch cell.
0006EFr 3               	cmp #LADDER 		; is it a ladder?
0006EFr 3               	beq ldchk1
0006EFr 3               	lda #1
0006EFr 3               	rts  			; return with zero flag set accordingly.
0006EFr 3               ldchk1:
0006EFr 3               	lda #0
0006EFr 3               	rts
0006EFr 3               .endif
0006EFr 3               
0006EFr 3               ;--------------------------------------------------------------
0006EFr 3               ; Get collectables.
0006EFr 3               ;--------------------------------------------------------------
0006EFr 3               
0006EFr 3               .if cflag
0006EFr 3               getcol:
0006EFr 3                       lda #COLECT             ; collectable blocks.
0006EFr 3                       sta z80_b
0006EFr 3                       jsr tded                ; test for collectable blocks.
0006EFr 3                       cmp z80_b               ; did we find one?
0006EFr 3                       beq :+
0006EFr 3                       rts                     ; none were found, job done.
0006EFr 3               :
0006EFr 3                       jsr gtblk               ; get block.
0006EFr 3                       jsr evnt20              ; collected block event.
0006EFr 3                       jmp getcol              ; repeat until none left.
0006EFr 3               
0006EFr 3               ; Get collectable block.
0006EFr 3               
0006EFr 3               gtblk:
0006EFr 3               	ldy #0
0006EFr 3               	lda (bufaddr),y
0006EFr 3               	sta z80_a
0006EFr 3                       lda #0
0006EFr 3                       sta (bufaddr),y		; make it empty now.
0006EFr 3               
0006EFr 3               	lda bufaddr		; set dispx
0006EFr 3               	and #31
0006EFr 3               	sta dispx
0006EFr 3               
0006EFr 3               	lda bufaddr+1		; Set dispy
0006EFr 3               	sec
0006EFr 3               	sbc #>MAP
0006EFr 3               	sta bufaddr+1
0006EFr 3               	asl bufaddr
0006EFr 3               	rol bufaddr+1
0006EFr 3               	asl bufaddr
0006EFr 3               	rol bufaddr+1
0006EFr 3               	asl bufaddr
0006EFr 3               	rol bufaddr+1
0006EFr 3               	lda bufaddr+1
0006EFr 3               	sta dispy
0006EFr 3               
0006EFr 3               	lda colpatt		; get blocknr
0006EFr 3               	sta z80_e		; displacement in e.
0006EFr 3               	lda #0
0006EFr 3               	sta z80_d		; no high byte.
0006EFr 3               	asl z80_e  		; multiply char by 8.
0006EFr 3               	rol z80_d
0006EFr 3               	asl z80_e
0006EFr 3               	rol z80_d
0006EFr 3               	asl z80_e
0006EFr 3               	rol z80_d
0006EFr 3               	clc
0006EFr 3               	lda z80_e
0006EFr 3               	adc #<chgfx 		; address of graphics.
0006EFr 3               	sta tileaddr
0006EFr 3               	lda z80_d
0006EFr 3               	adc #>chgfx
0006EFr 3               	sta tileaddr+1
0006EFr 3               
0006EFr 3               	jsr gprad 		; get screen address.
0006EFr 3               	ldx #7			; number of pixel rows to write.
0006EFr 3               gtblk0:
0006EFr 3               	ldy #0
0006EFr 3               	lda (tileaddr),y 	; get image byte.
0006EFr 3               	ldy scrtab,x
0006EFr 3               	eor (scraddr),y 	; XOR tile on screen
0006EFr 3               	sta (scraddr),y 	; copy to screen.
0006EFr 3               	inc tileaddr 		; next image byte.
0006EFr 3               	bne :+
0006EFr 3               	inc tileaddr+1
0006EFr 3               :
0006EFr 3               	dex	 		; repeat for 8 pixel rows.
0006EFr 3               	bpl gtblk0
0006EFr 3               	rts
0006EFr 3               .endif
0006EFr 3               
0006EFr 3               ;--------------------------------------------------------------
0006EFr 3               ; Touched deadly block check.
0006EFr 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0006EFr 3               ;
0006EFr 3               ; Input:
0006EFr 3               ;  IX = sprite address
0006EFr 3               ;
0006EFr 3               ; Output:
0006EFr 3               ;  A  = 0 is ok, A=5 is not ok
0006EFr 3               ;--------------------------------------------------------------
0006EFr 3               
0006EFr 3               tded:
0006EFr 3  A0 08        	ldy #8
0006F1r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0006F3r 3  85 rr        	sta dispy
0006F5r 3  C8           	iny
0006F6r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0006F8r 3  85 rr        	sta dispx		; coords in dispx,dispy.
0006FAr 3  20 rr rr     	jsr tstbl		; get map address.
0006FDr 3  48           	pha
0006FEr 3  A9 1F        	lda #31			; default distance to next line down.
000700r 3  85 rr        	sta z80_e
000702r 3  68           	pla
000703r 3  C5 rr        	cmp z80_b		; is this the required block?
000705r 3  D0 01        	bne :+
000707r 3  60           	rts			; yes.
000708r 3               :
000708r 3  E6 rr        	inc bufaddr 		; next cell.
00070Ar 3  D0 02        	bne :+
00070Cr 3  E6 rr        	inc bufaddr+1
00070Er 3               :
00070Er 3  A0 00        	ldy #0
000710r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000712r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000714r 3  D0 01        	bne :+
000716r 3  60           	rts			; yes.
000717r 3               :
000717r 3  A5 rr        	lda dispx		; horizontal position.
000719r 3  85 rr        	sta z80_c 		; store column in c register.
00071Br 3  29 07        	and #7			; is it straddling cells?
00071Dr 3  D0 03        	bne :+
00071Fr 3  4C rr rr     	jmp tded0		; no.
000722r 3               :
000722r 3  E6 rr        	inc bufaddr 		; last cell.
000724r 3  D0 02        	bne :+
000726r 3  E6 rr        	inc bufaddr+1
000728r 3               :
000728r 3  A0 00        	ldy #0
00072Ar 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00072Cr 3  C5 rr        	cmp z80_b		; is this the block?
00072Er 3  D0 01        	bne :+
000730r 3  60           	rts			; yes.
000731r 3               :
000731r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000733r 3               tded0:
000733r 3  18           	clc 			; point to next row.
000734r 3  A5 rr        	lda bufaddr
000736r 3  65 rr        	adc z80_e
000738r 3  85 rr        	sta bufaddr
00073Ar 3  90 02        	bcc :+
00073Cr 3  E6 rr        	inc bufaddr+1
00073Er 3               :
00073Er 3  A0 00        	ldy #0
000740r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000742r 3  C5 rr        	cmp z80_b		; is this fatal?
000744r 3  D0 01        	bne :+
000746r 3  60           	rts			; yes.
000747r 3               :
000747r 3  E6 rr        	inc bufaddr 		; next cell.
000749r 3  D0 02        	bne :+
00074Br 3  E6 rr        	inc bufaddr+1
00074Dr 3               :
00074Dr 3  A0 00        	ldy #0
00074Fr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000751r 3  C5 rr        	cmp z80_b		; is this fatal?
000753r 3  D0 01        	bne :+
000755r 3  60           	rts			; yes.
000756r 3               :
000756r 3  A5 rr        	lda z80_c		; horizontal position.
000758r 3  29 07        	and #7			; is it straddling cells?
00075Ar 3  D0 03        	bne :+
00075Cr 3  4C rr rr     	jmp tded1 		; no.
00075Fr 3               :
00075Fr 3  E6 rr        	inc bufaddr		; last cell.
000761r 3  D0 02        	bne :+
000763r 3  E6 rr        	inc bufaddr+1
000765r 3               :
000765r 3  A0 00        	ldy #0
000767r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000769r 3  C5 rr        	cmp z80_b		; is this fatal?
00076Br 3  D0 01        	bne :+
00076Dr 3  60           	rts			; yes.
00076Er 3               :
00076Er 3               tded1:
00076Er 3  A5 rr        	lda dispy		; vertical position.
000770r 3  29 07        	and #7 			; is it straddling cells?
000772r 3  D0 01        	bne :+
000774r 3  60           	rts			; no, job done.
000775r 3               :
000775r 3  18           	clc			; point to next row.
000776r 3  A5 rr        	lda bufaddr
000778r 3  65 rr        	adc z80_e
00077Ar 3  85 rr        	sta bufaddr
00077Cr 3  90 02        	bcc :+
00077Er 3  E6 rr        	inc bufaddr+1
000780r 3               :
000780r 3  A0 00        	ldy #0
000782r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000784r 3  C5 rr        	cmp z80_b		; is this fatal?
000786r 3  D0 01        	bne :+
000788r 3  60           	rts			; yes.
000789r 3               :
000789r 3  E6 rr        	inc bufaddr		; next cell.
00078Br 3  D0 02        	bne :+
00078Dr 3  E6 rr        	inc bufaddr+1
00078Fr 3               :
00078Fr 3  A0 00        	ldy #0
000791r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000793r 3  C5 rr        	cmp z80_b		; is this fatal?
000795r 3  D0 01        	bne :+
000797r 3  60           	rts			; yes.
000798r 3               :
000798r 3  A5 rr        	lda z80_c		; horizontal position.
00079Ar 3  29 07        	and #7			; is it straddling cells?
00079Cr 3  D0 01        	bne :+
00079Er 3  60           	rts			; no.
00079Fr 3               :
00079Fr 3  E6 rr        	inc bufaddr		; last cell.
0007A1r 3  D0 02        	bne :+
0007A3r 3  E6 rr        	inc bufaddr+1
0007A5r 3               :
0007A5r 3  A0 00        	ldy #0
0007A7r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
0007A9r 3  60           	rts 			; return with final type in accumulator.
0007AAr 3               
0007AAr 3               ;---------------------------------------------------
0007AAr 3               ; Fetch block type at (dispx, dispy).
0007AAr 3               ;
0007AAr 3               ; Output:
0007AAr 3               ;  A = block type
0007AAr 3               ;---------------------------------------------------
0007AAr 3               
0007AAr 3               tstbl:
0007AAr 3  A5 rr        	lda dispy 		; fetch y coord.
0007ACr 3  4A           	lsr a			; bufaddr = y/8
0007ADr 3  4A           	lsr a
0007AEr 3  4A           	lsr a
0007AFr 3               ;	sta chary
0007AFr 3               
0007AFr 3  85 rr        	sta bufaddr
0007B1r 3  A9 00        	lda #0
0007B3r 3  85 rr        	sta bufaddr+1
0007B5r 3               
0007B5r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0007B7r 3  26 rr        	rol bufaddr+1
0007B9r 3  06 rr        	asl bufaddr
0007BBr 3  26 rr        	rol bufaddr+1
0007BDr 3  06 rr        	asl bufaddr
0007BFr 3  26 rr        	rol bufaddr+1
0007C1r 3  06 rr        	asl bufaddr
0007C3r 3  26 rr        	rol bufaddr+1
0007C5r 3  06 rr        	asl bufaddr
0007C7r 3  26 rr        	rol bufaddr+1
0007C9r 3               
0007C9r 3  A5 rr        	lda dispx		; x/8
0007CBr 3  4A           	lsr a
0007CCr 3  4A           	lsr a
0007CDr 3  4A           	lsr a
0007CEr 3               ;	sta charx
0007CEr 3               
0007CEr 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0007CFr 3  65 rr        	adc bufaddr
0007D1r 3  69 00        	adc #<MAP
0007D3r 3  85 rr        	sta bufaddr
0007D5r 3  A5 rr        	lda bufaddr+1
0007D7r 3  69 04        	adc #>MAP
0007D9r 3  85 rr        	sta bufaddr+1
0007DBr 3               
0007DBr 3  A0 00        	ldy #0
0007DDr 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0007DFr 3  60           	rts
0007E0r 3               
0007E0r 3               ;-------------------------------------------------------------------
0007E0r 3               ; Jump - if we can.
0007E0r 3               ; Requires initial speed to be set up in accumulator prior to call.
0007E0r 3               ;
0007E0r 3               ; Input:
0007E0r 3               ;  IX = sprite address
0007E0r 3               ;-------------------------------------------------------------------
0007E0r 3               
0007E0r 3               jump:
0007E0r 3  A0 0D        	ldy #var_jumpLo
0007E2r 3  B1 rr        	lda (z80_ix),y		; jump table low.
0007E4r 3  A0 0E        	ldy #var_jumpHi
0007E6r 3  11 rr        	ora (z80_ix),y		; jump table high.
0007E8r 3  F0 01        	beq :+
0007EAr 3  60           	rts			; already in the air.
0007EBr 3               :
0007EBr 3  A9 rr        	lda #>jtab
0007EDr 3  A0 0E        	ldy #var_jumpHi
0007EFr 3  91 rr        	sta (z80_ix),y		; set jump high.
0007F1r 3  A9 rr        	lda #<jtab		; jump table start.
0007F3r 3  A0 0D        	ldy #var_jumpLo
0007F5r 3  91 rr        	sta (z80_ix),y		; set jump low.
0007F7r 3  60           	rts
0007F8r 3               
0007F8r 3               ; Jump table.
0007F8r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
0007F8r 3               ;.align 32
0007F8r 3               ;jtab:
0007F8r 3               ;	.byte 248,250,252
0007F8r 3               ;	.byte 254,254,255
0007F8r 3               ;	.byte 255,255,0,0
0007F8r 3               ;	.byte 0,1,1,1,2,2
0007F8r 3               ;	.byte 4,6,8,8,8,99
0007F8r 3               
0007F8r 3               ;------------------------------------------------
0007F8r 3               ; Random numbers code.
0007F8r 3               ; Pseudo-random number generator, 8-bit.
0007F8r 3               ;
0007F8r 3               ; Output:
0007F8r 3               ;  RND = random number
0007F8r 3               ;------------------------------------------------
0007F8r 3               
0007F8r 3               random:
0007F8r 3  A5 rr        	lda seed
0007FAr 3  F0 05        	beq doEor
0007FCr 3  0A           	asl a
0007FDr 3  F0 04        	beq noEor
0007FFr 3  90 02        	bcc noEor
000801r 3  49 1D        doEor:	eor #$1d
000803r 3  85 rr        noEor:	sta seed
000805r 3  60           	rts
000806r 3               
000806r 3               ;	lda seed		; get last random number.
000806r 3               ;	asl a
000806r 3               ;	asl a
000806r 3               ;	clc
000806r 3               ;	adc seed
000806r 3               ;	clc
000806r 3               ;	adc #$45
000806r 3               ;	sta seed		; store new seed.
000806r 3               ;	sta varrnd		; return number in variable.
000806r 3               ;	rts
000806r 3               
000806r 3               ;-------------------------------------------------------
000806r 3               ; Joystick and keyboard reading routines.
000806r 3               ;
000806r 3               ; contrl = 0, Keyboard
000806r 3               ;          1, JoyKeyb
000806r 3               ;          2, JoyMMC
000806r 3               ;
000806r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000806r 3               ;             ||||||||
000806r 3               ;             |||||||+> Right    KEY 0  - X
000806r 3               ;             ||||||+-> Left     KEY 1  - Z
000806r 3               ;             |||||+--> Down     KEY 2  - .
000806r 3               ;             ||||+---> Up       KEY 3  - ;
000806r 3               ;             |||+----> Fire1    KEY 4  - SPC
000806r 3               ;             ||+-----> Fire2    KEY 5  - Q
000806r 3               ;             |+------> Fire3    KEY 6  - P
000806r 3               ;             +-------> Not used
000806r 3               ;
000806r 3               ;                       Option1  KEY 7  - 1
000806r 3               ;                       Option2  KEY 8  - 2
000806r 3               ;                       Option3  KEY 9  - 3
000806r 3               ;                       Option4  KEY 10 - 4
000806r 3               ;-------------------------------------------------------
000806r 3               
000806r 3               joykey:
000806r 3  A5 rr        	lda contrl 		; control flag.
000808r 3  C9 01        	cmp #1
00080Ar 3  F0 1A        	beq joy1 		; scan joystick1
00080Cr 3  C9 02        	cmp #2
00080Er 3  F0 1C        	beq joy2 		; scan joystick2
000810r 3               
000810r 3               ; Scan keyboard
000810r 3               
000810r 3  A9 00        	lda #0		 	; zero reading.
000812r 3  85 rr        	sta z80_e
000814r 3               
000814r 3  A0 06        	ldy #6	 		; address of last key.
000816r 3               joyke0:
000816r 3  B9 rr rr     	lda keys,y 		; get key from table.
000819r 3  20 rr rr     	jsr ktest		; being pressed?
00081Cr 3  26 rr        	rol z80_e 		; rotate into reading.
00081Er 3               
00081Er 3  88           	dey		 	; next key.
00081Fr 3  10 F5        	bpl joyke0 		; repeat for all keys.
000821r 3               joyret:
000821r 3  A5 rr        	lda z80_e
000823r 3  85 rr        	sta joyval
000825r 3  60           	rts
000826r 3               
000826r 3               ; Scan joystick 1
000826r 3               
000826r 3               joy1:
000826r 3  20 rr rr     	jsr joy1scan
000829r 3  4C rr rr     	jmp joyret 		; store the value.
00082Cr 3               
00082Cr 3               ; Scan joystick 2
00082Cr 3               
00082Cr 3               joy2:
00082Cr 3  20 rr rr     	jsr joy2scan
00082Fr 3  4C rr rr     	jmp joyret 		; store the value.
000832r 3               
000832r 3               ;---------------------------------------------------------------
000832r 3               ; Display message.
000832r 3               ;
000832r 3               ; Input:
000832r 3               ;  A = message number
000832r 3               ;---------------------------------------------------------------
000832r 3               
000832r 3               dmsg:
000832r 3  AA           	tax
000833r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000835r 3  85 rr        	sta z80_l
000837r 3  A9 rr        	lda #>msgdat
000839r 3  85 rr        	sta z80_h
00083Br 3  20 rr rr     	jsr getwrd		; get message number.
00083Er 3               dmsg3:
00083Er 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000841r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000844r 3  A5 rr        	lda prtmod		; print mode.
000846r 3  D0 47        	bne bmsg1		; no, double-height text.
000848r 3               dmsg0:
000848r 3  A5 rr        	lda z80_h		; store string pointer.
00084Ar 3  48           	pha
00084Br 3  A5 rr        	lda z80_l
00084Dr 3  48           	pha
00084Er 3               
00084Er 3  A0 00        	ldy #0
000850r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000852r 3  29 7F        	and #127		; remove any end marker.
000854r 3  C9 0D        	cmp #ASCII_NEWLINE
000856r 3  F0 24        	beq dmsg1
000858r 3  20 rr rr     	jsr pchar		; display character.
00085Br 3  20 rr rr     	jsr nexpos 		; display position.
00085Er 3  D0 03        	bne dmsg2		; not on a new line.
000860r 3  20 rr rr     	jsr nexlin		; next line down.
000863r 3               dmsg2:
000863r 3  68           	pla			; retrieve string pointer
000864r 3  85 rr        	sta z80_l
000866r 3  68           	pla
000867r 3  85 rr        	sta z80_h
000869r 3               
000869r 3  A0 00        	ldy #0
00086Br 3  B1 rr        	lda (z80_hl),y		; fetch last character.
00086Dr 3  0A           	asl a  			; was it the end?
00086Er 3  90 03        	bcc :+
000870r 3  4C rr rr     	jmp dscor2		; yes, job done.
000873r 3               :
000873r 3  E6 rr        	inc z80_l		; next character to display.
000875r 3  D0 02        	bne :+
000877r 3  E6 rr        	inc z80_h
000879r 3               :
000879r 3  4C rr rr     	jmp dmsg0
00087Cr 3               dmsg1:
00087Cr 3  E6 rr        	inc dispy
00087Er 3  A5 rr        	lda dispy
000880r 3  C9 18        	cmp #24
000882r 3  90 04        	bcc dmsg4
000884r 3  A9 00        	lda #0
000886r 3  85 rr        	sta dispy
000888r 3               dmsg4:
000888r 3  A9 00        	lda #0
00088Ar 3  85 rr        	sta dispx
00088Cr 3  4C rr rr     	jmp dmsg2
00088Fr 3               
00088Fr 3               
00088Fr 3               ;----------------------------------------------------------
00088Fr 3               ; Display message in big text.
00088Fr 3               ;
00088Fr 3               ; Input:
00088Fr 3               ;  HL = string pointer
00088Fr 3               ;----------------------------------------------------------
00088Fr 3               
00088Fr 3               bmsg1:
00088Fr 3  A0 00        	ldy #0
000891r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000893r 3  29 7F        	and #127		; only want 7 bits.
000895r 3  C9 0D        	cmp #ASCII_NEWLINE
000897r 3  F0 13        	beq bmsg2
000899r 3  20 rr rr     	jsr bchar 		; display big char.
00089Cr 3               bmsg3:
00089Cr 3  A0 00        	ldy #0
00089Er 3  B1 rr        	lda (z80_hl),y 		; look at last character.
0008A0r 3  48           	pha
0008A1r 3  E6 rr        	inc z80_l 		; next character in list.
0008A3r 3  D0 02        	bne :+
0008A5r 3  E6 rr        	inc z80_h
0008A7r 3               :
0008A7r 3  68           	pla
0008A8r 3  0A           	asl a  			; was terminator flag set?
0008A9r 3  90 E4        	bcc bmsg1		; no, keep going.
0008ABr 3               
0008ABr 3  60           	rts
0008ACr 3               bmsg2:
0008ACr 3  A9 00        	lda #0
0008AEr 3  85 rr        	sta dispx
0008B0r 3  E6 rr        	inc dispy
0008B2r 3  E6 rr        	inc dispy
0008B4r 3  A5 rr        	lda dispy
0008B6r 3  C9 17        	cmp #23
0008B8r 3  90 E2        	bcc bmsg3
0008BAr 3  A9 00        	lda #0
0008BCr 3  85 rr        	sta dispy
0008BEr 3  4C rr rr     	jmp bmsg3
0008C1r 3               
0008C1r 3               ;----------------------------------------------------------
0008C1r 3               ; Big character display.
0008C1r 3               ;
0008C1r 3               ; Input:
0008C1r 3               ;  A = character
0008C1r 3               ;----------------------------------------------------------
0008C1r 3               
0008C1r 3               bchar:
0008C1r 3  85 rr        	sta z80_e		; save char in lb
0008C3r 3  A9 00        	lda #0
0008C5r 3  85 rr        	sta z80_d		; reset hb
0008C7r 3               
0008C7r 3  06 rr        	asl z80_e 		; multiply char by 8.
0008C9r 3  26 rr        	rol z80_d
0008CBr 3  06 rr        	asl z80_e
0008CDr 3  26 rr        	rol z80_d
0008CFr 3  06 rr        	asl z80_e
0008D1r 3  26 rr        	rol z80_d		; de = a*8
0008D3r 3               
0008D3r 3  18           	clc			; de = #<(FONT-256) + a*8
0008D4r 3  A5 rr        	lda z80_e
0008D6r 3  69 rr        	adc #<(FONT-256) 		; address of font.
0008D8r 3  85 rr        	sta z80_e
0008DAr 3  A5 rr        	lda z80_d
0008DCr 3  69 rr        	adc #>(FONT-256)
0008DEr 3  85 rr        	sta z80_d
0008E0r 3               
0008E0r 3  20 rr rr     	jsr gaadd		; set colour attribute
0008E3r 3  AD rr rr     	lda fontcol
0008E6r 3  A0 00        	ldy #0
0008E8r 3  91 rr        	sta (bufaddr),y
0008EAr 3               
0008EAr 3  20 rr rr     	jsr gprad 		; get screen address.
0008EDr 3               
0008EDr 3  A2 00        	ldx #0			; height of character in font.
0008EFr 3               bchar0:
0008EFr 3  A0 00        	ldy #0
0008F1r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
0008F3r 3               
0008F3r 3               .if iflag
0008F3r 3               	eor #$ff
0008F3r 3               .endif
0008F3r 3               
0008F3r 3  91 rr        	sta (scraddr),y
0008F5r 3  48           	pha
0008F6r 3  20 rr rr     	jsr nline 		; next line down.
0008F9r 3  68           	pla
0008FAr 3  91 rr        	sta (scraddr),y
0008FCr 3  20 rr rr     	jsr nline 		; next line down.
0008FFr 3               
0008FFr 3  18           	clc
000900r 3  E6 rr        	inc z80_e 		; next line of font.
000902r 3  D0 02        	bne :+
000904r 3  E6 rr        	inc z80_d
000906r 3               :
000906r 3  E8           	inx
000907r 3  E0 08        	cpx #8
000909r 3  D0 E4        	bne bchar0
00090Br 3               
00090Br 3  20 rr rr     	jsr nexpos		; display position.
00090Er 3  D0 05        	bne bchar2 		; not on a new line.
000910r 3               bchar3:
000910r 3  E6 rr        	inc dispy
000912r 3  20 rr rr     	jsr nexlin 		; next line check.
000915r 3               bchar2:
000915r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000918r 3               
000918r 3               
000918r 3               ;-------------------------------------------------
000918r 3               ; Display a character.
000918r 3               ;
000918r 3               ; Input:
000918r 3               ;  A = character
000918r 3               ;-------------------------------------------------
000918r 3               
000918r 3               achar:
000918r 3  85 rr        	sta z80_b 		; copy to b.
00091Ar 3  20 rr rr     	jsr preprt 		; get ready to print.
00091Dr 3  A5 rr        	lda z80_b		; character in accumulator.
00091Fr 3  A6 rr        	ldx prtmod 		; print mode.
000921r 3  F0 03        	beq :+
000923r 3  4C rr rr     	jmp bchar 		; no, double-height text.
000926r 3               :
000926r 3  20 rr rr     	jsr pchar 		; display character.
000929r 3  20 rr rr     	jsr nexpos 		; display position.
00092Cr 3  F0 E2        	beq bchar3		; next line down.
00092Er 3  4C rr rr     	jmp bchar2 		; tidy up.
000931r 3               
000931r 3               
000931r 3               ;-------------------------------------------------
000931r 3               ; Get next print column position.
000931r 3               ;-------------------------------------------------
000931r 3               
000931r 3               nexpos:
000931r 3  E6 rr        	inc dispx		; move along one position.
000933r 3  A5 rr        	lda dispx 		; get coordinate.
000935r 3  C9 16        	cmp #22
000937r 3  D0 0E        	bne :+
000939r 3  A9 00        	lda #0
00093Br 3  85 rr        	sta dispx
00093Dr 3  A5 rr        	lda prtmod
00093Fr 3  F0 06        	beq :+
000941r 3  20 rr rr     	jsr nexlin
000944r 3  4C rr rr     	jmp nexlin
000947r 3               :
000947r 3  60           	rts
000948r 3               
000948r 3               ;-------------------------------------------------
000948r 3               ; Get next print line position.
000948r 3               ;-------------------------------------------------
000948r 3               
000948r 3               nexlin:
000948r 3  E6 rr        	inc dispy 		; newline.
00094Ar 3  A5 rr        	lda dispy		; vertical position.
00094Cr 3  C9 16        	cmp #22			; past screen edge?
00094Er 3  B0 01        	bcs :+
000950r 3  60           	rts			; no, still okay.
000951r 3               :
000951r 3  A9 00        	lda #0			; restart at top.
000953r 3  85 rr        	sta dispy
000955r 3  60           	rts
000956r 3               
000956r 3               ;--------------------------------------------------------
000956r 3               ; Pre-print preliminaries.
000956r 3               ;--------------------------------------------------------
000956r 3               
000956r 3               preprt:
000956r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000958r 3  8D rr rr     	sta grbase		; set up graphics base.
00095Br 3  A9 rr        	lda #>(FONT-256)
00095Dr 3  8D rr rr     	sta grbase+1
000960r 3               prescr:
000960r 3  A5 rr        	lda charx 		; display coordinates.
000962r 3  85 rr        	sta dispx		; set up general coordinates.
000964r 3  A5 rr        	lda chary
000966r 3  85 rr        	sta dispy
000968r 3  60           	rts
000969r 3               
000969r 3               ;--------------------------------------------------------------
000969r 3               ; Get messagenr x in hl
000969r 3               ;
000969r 3               ; Input:
000969r 3               ;  HL = pointer to message list
000969r 3               ;  X  = message number.
000969r 3               ;--------------------------------------------------------------
000969r 3               
000969r 3               getwrd:
000969r 3  E0 00        	cpx #0
00096Br 3  D0 01        	bne:+ 			; first word in list?
00096Dr 3  60           	rts 			; yep, don't search.
00096Er 3               :
00096Er 3  A0 00        	ldy #0
000970r 3               getwd0:
000970r 3  B1 rr        	lda (z80_hl),y
000972r 3  48           	pha
000973r 3  E6 rr        	inc z80_l
000975r 3  D0 02        	bne :+
000977r 3  E6 rr        	inc z80_h
000979r 3               :
000979r 3  68           	pla
00097Ar 3  C9 80        	cmp #128		; found end?
00097Cr 3  30 F2        	bmi getwd0		; no, carry on.
00097Er 3  CA           	dex			; until we have right number.
00097Fr 3  D0 EF        	bne getwd0
000981r 3  60           	rts
000982r 3               
000982r 3               ;-----------------------------------------------------------
000982r 3               ; Bubble sort.
000982r 3               ;-----------------------------------------------------------
000982r 3               
000982r 3               bsort:
000982r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000984r 3  85 rr        	sta qscnt
000986r 3               
000986r 3  A9 rr        	lda #<sprtab 		; sprite table.
000988r 3  85 rr        	sta z80_x
00098Ar 3  A9 rr        	lda #>sprtab
00098Cr 3  85 rr        	sta z80_i
00098Er 3               bsort0:
00098Er 3  A0 00        	ldy #0
000990r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000992r 3  C9 FF        	cmp #255 		; is it switched off?
000994r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000996r 3               
000996r 3  A0 11        	ldy #TABSIZ
000998r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
00099Ar 3  C9 FF        	cmp #255 		; is it enabled?
00099Cr 3  F0 0A        	beq bsort2 		; no, nothing to swap.
00099Er 3               
00099Er 3  A0 14        	ldy #TABSIZ+3
0009A0r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0009A2r 3  A0 03        	ldy #3
0009A4r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
0009A6r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0009A8r 3               bsort2:
0009A8r 3  18           	clc
0009A9r 3  A5 rr        	lda z80_x
0009ABr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0009ADr 3  85 rr        	sta z80_x
0009AFr 3  90 02        	bcc :+
0009B1r 3  E6 rr        	inc z80_i
0009B3r 3               :
0009B3r 3  C6 rr        	dec qscnt
0009B5r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0009B7r 3  60           	rts
0009B8r 3               
0009B8r 3               bsort1:
0009B8r 3  A0 11        	ldy #TABSIZ
0009BAr 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
0009BCr 3  C9 FF        	cmp #255		; is it enabled?
0009BEr 3  F0 E8        	beq bsort2		; no, nothing to swap.
0009C0r 3  20 rr rr     	jsr swspr		; swap positions.
0009C3r 3  4C rr rr     	jmp bsort2
0009C6r 3               swemp:
0009C6r 3  A0 11        	ldy #TABSIZ
0009C8r 3  B1 rr        	lda (z80_ix),y		; next table entry.
0009CAr 3  C9 FF        	cmp #255		; is that one on?
0009CCr 3  F0 DA        	beq bsort2		; no, nothing to swap.
0009CEr 3  20 rr rr     	jsr swspr		; swap positions.
0009D1r 3  4C rr rr     	jmp bsort2
0009D4r 3               
0009D4r 3               ; Swap sprites.
0009D4r 3               
0009D4r 3               swspr:
0009D4r 3  A5 rr        	lda z80_x		; table address
0009D6r 3  85 rr        	sta z80_e		; copy to de pair.
0009D8r 3  85 rr        	sta z80_l		; copy to hl pair.
0009DAr 3  A5 rr        	lda z80_i
0009DCr 3  85 rr        	sta z80_h
0009DEr 3  85 rr        	sta z80_d
0009E0r 3               
0009E0r 3  18           	clc
0009E1r 3  A5 rr        	lda z80_l
0009E3r 3  69 11        	adc #TABSIZ		; distance to second entry.
0009E5r 3  85 rr        	sta z80_l
0009E7r 3  90 02        	bcc :+
0009E9r 3  E6 rr        	inc z80_h
0009EBr 3               :
0009EBr 3  A9 11        	lda #TABSIZ		; bytes to swap.
0009EDr 3  85 rr        	sta z80_b
0009EFr 3  A0 00        	ldy #0
0009F1r 3               swspr0:
0009F1r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
0009F3r 3  48           	pha
0009F4r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
0009F6r 3  91 rr        	sta (z80_hl),y 		; copy to second.
0009F8r 3  68           	pla
0009F9r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
0009FBr 3               
0009FBr 3  E6 rr        	inc z80_e 		; next byte.
0009FDr 3  D0 02        	bne :+
0009FFr 3  E6 rr        	inc z80_d
000A01r 3               :
000A01r 3  E6 rr        	inc z80_l 		; next byte.
000A03r 3  D0 02        	bne :+
000A05r 3  E6 rr        	inc z80_h
000A07r 3               :
000A07r 3  C6 rr        	dec z80_b
000A09r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000A0Br 3  60           	rts
000A0Cr 3               
000A0Cr 3               ;----------------------------------------------------
000A0Cr 3               ; Process sprites.
000A0Cr 3               ;----------------------------------------------------
000A0Cr 3               
000A0Cr 3               pspr:
000A0Cr 3  A9 0C        	lda #NUMSPR		; sprites to process.
000A0Er 3  85 rr        	sta sprptr
000A10r 3               
000A10r 3  A9 rr        	lda #<sprtab 		; sprite table.
000A12r 3  85 rr        	sta z80_x
000A14r 3  A9 rr        	lda #>sprtab
000A16r 3  85 rr        	sta z80_i
000A18r 3               pspr1:
000A18r 3  A0 00        	ldy #0
000A1Ar 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000A1Cr 3  C9 09        	cmp #9 			; within range of sprite types?
000A1Er 3  B0 03        	bcs :+
000A20r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000A23r 3               :
000A23r 3  18           	clc
000A24r 3  A5 rr        	lda z80_x
000A26r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000A28r 3  85 rr        	sta z80_x
000A2Ar 3  90 02        	bcc :+
000A2Cr 3  E6 rr        	inc z80_i		; next sprite.
000A2Er 3               :
000A2Er 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000A30r 3  D0 E6        	bne pspr1
000A32r 3  60           	rts
000A33r 3               
000A33r 3               pspr2:
000A33r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000A35r 3  85 rr        	sta ogptr
000A37r 3  A5 rr        	lda z80_i
000A39r 3  85 rr        	sta ogptr+1
000A3Br 3  20 rr rr     	jsr pspr3		; do the routine.
000A3Er 3               rtorg:
000A3Er 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000A40r 3  85 rr        	sta z80_x
000A42r 3  A5 rr        	lda ogptr+1
000A44r 3  85 rr        	sta z80_i
000A46r 3               rtorg0:
000A46r 3  60           	rts
000A47r 3               
000A47r 3               pspr3:
000A47r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000A49r 3  85 rr        	sta z80_l
000A4Br 3  A9 rr        	lda #>evtyp0
000A4Dr 3  85 rr        	sta z80_h
000A4Fr 3               pspr4:
000A4Fr 3  B1 rr        	lda (z80_ix),y
000A51r 3  0A           	asl a			; double accumulator.
000A52r 3  18           	clc
000A53r 3  65 rr        	adc z80_l
000A55r 3  85 rr        	sta z80_l
000A57r 3  90 02        	bcc :+
000A59r 3  E6 rr        	inc z80_h
000A5Br 3               :
000A5Br 3  B1 rr        	lda (z80_hl),y
000A5Dr 3  85 rr        	sta z80_e 		; copy to de.
000A5Fr 3  48           	pha
000A60r 3               
000A60r 3  E6 rr        	inc z80_l 		; next byte of address.
000A62r 3  D0 02        	bne :+
000A64r 3  E6 rr        	inc z80_h
000A66r 3               :
000A66r 3  B1 rr        	lda (z80_hl),y 		; address high.
000A68r 3  85 rr        	sta z80_d
000A6Ar 3               
000A6Ar 3  48           	pha	 		; swap address into hl.
000A6Br 3  A5 rr        	lda z80_h
000A6Dr 3  85 rr        	sta z80_d
000A6Fr 3  68           	pla
000A70r 3  85 rr        	sta z80_h
000A72r 3  68           	pla
000A73r 3  85 rr        	sta z80_l
000A75r 3  A5 rr        	lda z80_l
000A77r 3  85 rr        	sta z80_e
000A79r 3               
000A79r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000A7Cr 3               
000A7Cr 3               ; Address of each sprite type's routine.
000A7Cr 3               
000A7Cr 3  rr rr        evtyp0:	.word evnt00
000A7Er 3  rr rr        evtyp1:	.word evnt01
000A80r 3  rr rr        evtyp2:	.word evnt02
000A82r 3  rr rr        evtyp3:	.word evnt03
000A84r 3  rr rr        evtyp4:	.word evnt04
000A86r 3  rr rr        evtyp5:	.word evnt05
000A88r 3  rr rr        evtyp6:	.word evnt06
000A8Ar 3  rr rr        evtyp7:	.word evnt07
000A8Cr 3  rr rr        evtyp8:	.word evnt08
000A8Er 3               
000A8Er 3               ;--------------------------------------------------------------
000A8Er 3               ; Display sprites.
000A8Er 3               ;
000A8Er 3               ; Input:
000A8Er 3               ;  IX = sprite table
000A8Er 3               ;--------------------------------------------------------------
000A8Er 3               
000A8Er 3               dspr:
000A8Er 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000A90r 3  85 rr        	sta sprcnt
000A92r 3               
000A92r 3               dspr0:
000A92r 3  A0 00        	ldy #var_Type
000A94r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000A96r 3  C9 FF        	cmp #255 		; is it enabled?
000A98r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000A9Ar 3               dspr5:
000A9Ar 3  A0 05        	ldy #var_newType
000A9Cr 3  B1 rr        	lda (z80_ix),y 		; new type.
000A9Er 3  C9 FF        	cmp #255		; is it enabled?
000AA0r 3  F0 03        	beq dspr2
000AA2r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000AA5r 3               dspr2:
000AA5r 3  A0 05        	ldy #var_newType
000AA7r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000AA9r 3  A0 00        	ldy #var_Type
000AABr 3  91 rr        	sta (z80_ix),y
000AADr 3  A0 06        	ldy #var_newImage
000AAFr 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000AB1r 3  A0 01        	ldy #var_Image
000AB3r 3  91 rr        	sta (z80_ix),y
000AB5r 3  A0 07        	ldy #var_newFrame
000AB7r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000AB9r 3  A0 02        	ldy #var_Frame
000ABBr 3  91 rr        	sta (z80_ix),y
000ABDr 3  A0 08        	ldy #var_newY
000ABFr 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000AC1r 3  A0 03        	ldy #var_Y
000AC3r 3  91 rr        	sta (z80_ix),y
000AC5r 3  A0 09        	ldy #var_newX
000AC7r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000AC9r 3  A0 04        	ldy #var_X
000ACBr 3  91 rr        	sta (z80_ix),y
000ACDr 3               
000ACDr 3  18           	clc
000ACEr 3  A5 rr        	lda z80_x
000AD0r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000AD2r 3  85 rr        	sta z80_x
000AD4r 3  A5 rr        	lda z80_i
000AD6r 3  69 00        	adc #0
000AD8r 3  85 rr        	sta z80_i 		; next sprite.
000ADAr 3  C6 rr        	dec sprcnt
000ADCr 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000ADEr 3  60           	rts
000ADFr 3               
000ADFr 3               dspr1:
000ADFr 3               	; _BEEB clipping code copied from CPC Engine
000ADFr 3  A0 03        	ldy #var_Y
000AE1r 3  B1 rr        	lda (z80_ix), y		; old x coord
000AE3r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AE5r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000AE7r 3               
000AE7r 3  A0 05        	ldy #var_newType
000AE9r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000AEBr 3  C9 FF        	cmp #255		; is this enabled?
000AEDr 3  D0 06        	bne dspr4 		; yes, display both.
000AEFr 3               
000AEFr 3               dspr6:
000AEFr 3  20 rr rr     	jsr sspria 		; show single sprite.
000AF2r 3  4C rr rr     	jmp dspr2
000AF5r 3               
000AF5r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000AF5r 3               
000AF5r 3               dspr4:
000AF5r 3               	; _BEEB clipping code copied from CPC Engine
000AF5r 3  A0 08        	ldy #var_newY
000AF7r 3  B1 rr        	lda (z80_ix), y		; old x coord
000AF9r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AFBr 3  B0 F2        	bcs dspr6		; yes, don't display it.
000AFDr 3               
000AFDr 3  A0 04        	ldy #var_X
000AFFr 3  B1 rr        	lda (z80_ix),y		; old x.
000B01r 3  A0 09        	ldy #var_newX
000B03r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000B05r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000B07r 3               
000B07r 3  A0 03        	ldy #var_Y
000B09r 3  B1 rr        	lda (z80_ix),y		; old y.
000B0Br 3  A0 08        	ldy #var_newY
000B0Dr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B0Fr 3  D0 17        	bne dspr7		; they differ, need to redraw.
000B11r 3               
000B11r 3  A0 02        	ldy #var_Frame
000B13r 3  B1 rr        	lda (z80_ix),y 		; old frame.
000B15r 3  A0 07        	ldy #var_newFrame
000B17r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B19r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000B1Br 3               
000B1Br 3  A0 01        	ldy #var_Image
000B1Dr 3  B1 rr        	lda (z80_ix),y 		; old image.
000B1Fr 3  A0 06        	ldy #var_newImage
000B21r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B23r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000B25r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000B28r 3               dspr7:
000B28r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000B2Br 3  4C rr rr     	jmp dspr2
000B2Er 3               dspr3:
000B2Er 3               	; _BEEB clipping code copied from CPC Engine
000B2Er 3  A0 08        	ldy #var_newY
000B30r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B32r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B34r 3  90 03        	bcc :+			; no, continue
000B36r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000B39r 3               :
000B39r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000B3Cr 3  4C rr rr     	jmp dspr2
000B3Fr 3               
000B3Fr 3               ;-----------------------------------------
000B3Fr 3               ; Get sprite address calculations.
000B3Fr 3               ; gspran = new sprite, gsprad = old sprite.
000B3Fr 3               ;
000B3Fr 3               ; Input:
000B3Fr 3               ;  IX = sprite address
000B3Fr 3               ;-----------------------------------------
000B3Fr 3               
000B3Fr 3               gspran:
000B3Fr 3  A0 08        	ldy #var_newY
000B41r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000B43r 3  85 rr        	sta dispy
000B45r 3  A0 09        	ldy #var_newX
000B47r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000B49r 3  85 rr        	sta dispx
000B4Br 3  A0 06        	ldy #var_newImage
000B4Dr 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000B4Fr 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000B52r 3               
000B52r 3  A0 00        	ldy #0
000B54r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B56r 3  A0 07        	ldy #var_newFrame
000B58r 3  18           	clc
000B59r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000B5Br 3  4C rr rr     	jmp gspra0
000B5Er 3               
000B5Er 3               ;-----------------------------------------
000B5Er 3               ; Calculate old sprite address
000B5Er 3               ;
000B5Er 3               ; Input:
000B5Er 3               ;  IX = sprite address
000B5Er 3               ;
000B5Er 3               ; Output:
000B5Er 3               ;  B  = right byte mask
000B5Er 3               ;  C  = left byte mask
000B5Er 3               ;  DE = spriteframe address
000B5Er 3               ;  scraddr = screenaddress(dispx,dispy)
000B5Er 3               ;-----------------------------------------
000B5Er 3               
000B5Er 3               gsprad:
000B5Er 3  A0 03        	ldy #var_Y
000B60r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B62r 3  85 rr        	sta dispy
000B64r 3  A0 04        	ldy #var_X
000B66r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B68r 3  85 rr        	sta dispx
000B6Ar 3  A0 01        	ldy #var_Image
000B6Cr 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000B6Er 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000B71r 3               
000B71r 3  A0 00        	ldy #0
000B73r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B75r 3  A0 02        	ldy #var_Frame
000B77r 3  18           	clc
000B78r 3  71 rr        	adc (z80_ix),y 		; add frame number.
000B7Ar 3               
000B7Ar 3               gspra0:
000B7Ar 3               .if rflag
000B7Ar 3               	sta z80_e		; multiply by 32.
000B7Ar 3               	lda #0
000B7Ar 3               	sta z80_d
000B7Ar 3               
000B7Ar 3               	asl z80_e
000B7Ar 3               	rol z80_d
000B7Ar 3               	asl z80_e
000B7Ar 3               	rol z80_d
000B7Ar 3               	asl z80_e
000B7Ar 3               	rol z80_d
000B7Ar 3               	asl z80_e
000B7Ar 3               	rol z80_d
000B7Ar 3               .if bflag
000B7Ar 3               	lda z80_e		; multiply by 48
000B7Ar 3               	sta tmp1
000B7Ar 3               	lda z80_d
000B7Ar 3               	sta tmp2
000B7Ar 3               .endif
000B7Ar 3               	asl z80_e
000B7Ar 3               	rol z80_d
000B7Ar 3               .if bflag
000B7Ar 3               	clc
000B7Ar 3               	lda z80_e
000B7Ar 3               	adc tmp1
000B7Ar 3               	sta z80_e
000B7Ar 3               	lda z80_d
000B7Ar 3               	adc tmp2
000B7Ar 3               	sta z80_d
000B7Ar 3               .endif
000B7Ar 3               .else
000B7Ar 3  4A           	lsr a	  		; multiply by 128.
000B7Br 3  85 rr        	sta z80_d 		; store in d.
000B7Dr 3  85 rr        	sta tmp1
000B7Fr 3  A9 00        	lda #0
000B81r 3  6A           	ror a
000B82r 3  85 rr        	sta z80_e 		; got low byte.
000B84r 3  85 rr        	sta tmp2
000B86r 3               .if bflag
000B86r 3               	lsr tmp1		; multiply by 192
000B86r 3               	ror tmp2
000B86r 3               	clc
000B86r 3               	lda tmp2
000B86r 3               	adc z80_e
000B86r 3               	sta z80_e
000B86r 3               	lda tmp1
000B86r 3               	adc z80_d
000B86r 3               	sta z80_d
000B86r 3               .endif
000B86r 3               .endif
000B86r 3  18           	clc 			; address of play sprites.
000B87r 3  A5 rr        	lda z80_e
000B89r 3  69 rr        	adc #<sprgfx
000B8Br 3  85 rr        	sta z80_e
000B8Dr 3  A5 rr        	lda z80_d
000B8Fr 3  69 rr        	adc #>sprgfx
000B91r 3  85 rr        	sta z80_d
000B93r 3               
000B93r 3  A5 rr        	lda dispx 		; y coordinate.
000B95r 3  29 06        	and #6 			; position within byte boundary.
000B97r 3  AA           	tax	 		; low byte of table displacement.
000B98r 3               .if rflag
000B98r 3               	stx sprshft
000B98r 3               .else
000B98r 3  0A           	asl a	  		; multiply by 32.
000B99r 3  0A           	asl a  			; already a multiple
000B9Ar 3  0A           	asl a  			; of 2, so just 4
000B9Br 3               .if bflag
000B9Br 3               	sta tmp1
000B9Br 3               	asl a  			; shifts needed.
000B9Br 3               	clc
000B9Br 3               	adc tmp1
000B9Br 3               .else
000B9Br 3  0A           	asl a  			; shifts needed.
000B9Cr 3               .endif
000B9Cr 3  18           	clc 			; add to sprite address.
000B9Dr 3  65 rr        	adc z80_e
000B9Fr 3  85 rr        	sta z80_e
000BA1r 3  90 02        	bcc :+
000BA3r 3  E6 rr        	inc z80_d
000BA5r 3               :
000BA5r 3               .endif
000BA5r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000BA8r 3  85 rr        	sta z80_c 		; left mask.
000BAAr 3  BD rr rr     	lda spmask+1,x
000BADr 3  85 rr        	sta z80_b 		; right mask.
000BAFr 3               ; Drop into screen address routine.
000BAFr 3  4C rr rr     	jmp scadd
000BB2r 3               
000BB2r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000BB6r 3  0F F0 03 FC  
000BBAr 3               
000BBAr 3               
000BBAr 3               ;-----------------------------------------------------------
000BBAr 3               ; Animates a sprite.
000BBAr 3               ;
000BBAr 3               ; Input:
000BBAr 3               ;  IX = sprite address
000BBAr 3               ;  HL = last sprite address
000BBAr 3               ;-----------------------------------------------------------
000BBAr 3               
000BBAr 3               animsp:
000BBAr 3  25 rr        	and frmno
000BBCr 3  F0 01        	beq :+
000BBEr 3  60           	rts
000BBFr 3               :
000BBFr 3  A0 06        	ldy #var_newImage
000BC1r 3  B1 rr        	lda (z80_ix),y		; sprite image
000BC3r 3  20 rr rr     	jsr gfrm		; get frame data.
000BC6r 3               
000BC6r 3  E6 rr        	inc z80_l		; point to frames.
000BC8r 3  D0 02        	bne :+
000BCAr 3  E6 rr        	inc z80_h
000BCCr 3               :
000BCCr 3  A0 07        	ldy #var_newFrame
000BCEr 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000BD0r 3  18           	clc
000BD1r 3  69 01        	adc #1			; next one along.
000BD3r 3  A0 00        	ldy #0
000BD5r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000BD7r 3  90 02        	bcc anims0		; no, not yet.
000BD9r 3  A9 00        	lda #0			; start at first frame.
000BDBr 3               anims0:
000BDBr 3  A0 07        	ldy #var_newFrame
000BDDr 3  91 rr        	sta (z80_ix),y		; new frame.
000BDFr 3  60           	rts
000BE0r 3               
000BE0r 3               ;--------------------------------------------------------------
000BE0r 3               ; Animate back
000BE0r 3               ;
000BE0r 3               ; Input:
000BE0r 3               ;  IX = sprite address
000BE0r 3               ;  HL = last sprite address
000BE0r 3               ;--------------------------------------------------------------
000BE0r 3               
000BE0r 3               animbk:
000BE0r 3  25 rr        	and frmno
000BE2r 3  F0 01        	beq :+
000BE4r 3  60           	rts
000BE5r 3               :
000BE5r 3  A0 06        	ldy #var_newImage
000BE7r 3  B1 rr        	lda (z80_ix),y		; sprite image.
000BE9r 3  20 rr rr     	jsr gfrm		; get frame data.
000BECr 3               
000BECr 3  E6 rr        	inc z80_l 		; point to frames.
000BEEr 3  D0 02        	bne :+
000BF0r 3  E6 rr        	inc z80_h
000BF2r 3               :
000BF2r 3  A0 07        	ldy #var_newFrame
000BF4r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000BF6r 3  F0 03        	beq :+
000BF8r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000BFBr 3               :
000BFBr 3  A0 00        	ldy #0
000BFDr 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000BFFr 3               rtanb0:
000BFFr 3  38           	sec
000C00r 3  E9 01        	sbc #1			; next one along.
000C02r 3  4C rr rr     	jmp anims0		; set new frame.
000C05r 3               
000C05r 3               ;--------------------------------------------------------------
000C05r 3               ; Check for collision with other sprite, strict enforcement.
000C05r 3               ;
000C05r 3               ; Input:
000C05r 3               ;  b		= sprite to test for
000C05r 3               ;  ix		= current sprite pointer
000C05r 3               ;
000C05r 3               ; global:	b
000C05r 3               ; local:	x,y,hl,de,skptr
000C05r 3               ; calls:	-
000C05r 3               ;--------------------------------------------------------------
000C05r 3               
000C05r 3               sktyp:
000C05r 3  A9 rr        	lda #<sprtab				; sprite table.
000C07r 3  85 rr        	sta z80_l
000C09r 3  A9 rr        	lda #>sprtab
000C0Br 3  85 rr        	sta z80_h
000C0Dr 3               numsp2:
000C0Dr 3  A9 0C        	lda #NUMSPR				; number of sprites.
000C0Fr 3  85 rr        	sta sktptr
000C11r 3               sktyp0:
000C11r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000C13r 3  85 rr        	sta skptr
000C15r 3  A5 rr        	lda z80_h
000C17r 3  85 rr        	sta skptr+1
000C19r 3               
000C19r 3  A0 00        	ldy #0
000C1Br 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000C1Dr 3  C5 rr        	cmp z80_b				; is it the type we seek?
000C1Fr 3  F0 1D        	beq coltyp				; yes, we can use this one.
000C21r 3               sktyp1:
000C21r 3  18           	clc
000C22r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000C24r 3  69 11        	adc #TABSIZ				; size of each entry.
000C26r 3  85 rr        	sta z80_l
000C28r 3  A5 rr        	lda skptr+1
000C2Ar 3  69 00        	adc #0
000C2Cr 3  85 rr        	sta z80_h
000C2Er 3  C6 rr        	dec sktptr					; one less iteration.
000C30r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000C32r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000C34r 3  85 rr        	sta z80_l
000C36r 3  85 rr        	sta z80_h
000C38r 3  85 rr        	sta skptr				; store pointer to sprite.
000C3Ar 3  85 rr        	sta skptr+1
000C3Cr 3               
000C3Cr 3  18           	clc					; don't return with zero flag set.
000C3Dr 3  60           	rts 					; didn't find one.
000C3Er 3               
000C3Er 3               coltyp:
000C3Er 3  A0 00        	ldy #0
000C40r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000C42r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000C44r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000C46r 3               colty0:
000C46r 3  A0 09        	ldy #9					; distance to x position in table.
000C48r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000C4Ar 3  85 rr        	sta z80_e
000C4Cr 3  88           	dey
000C4Dr 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000C4Fr 3  85 rr        	sta z80_d
000C51r 3               
000C51r 3               ; Drop into collision detection.
000C51r 3               
000C51r 3               colc16:
000C51r 3  A0 09        	ldy #9
000C53r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000C55r 3  38           	sec					; subtract x.
000C56r 3  E5 rr        	sbc z80_e
000C58r 3  B0 05        	bcs  colc1a 				; result is positive.
000C5Ar 3  49 FF        	eor #$ff				; make negative positive.
000C5Cr 3  18           	clc
000C5Dr 3  69 01        	adc #1
000C5Fr 3               colc1a:
000C5Fr 3  C9 10        	cmp #16 				; within x range?
000C61r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000C63r 3  85 rr        	sta z80_c				; store difference.
000C65r 3               
000C65r 3  A0 08        	ldy #8
000C67r 3  B1 rr        	lda (z80_ix),y				; y coord.
000C69r 3  38           	sec
000C6Ar 3  E5 rr        	sbc z80_d				; subtract y.
000C6Cr 3  B0 05        	bcs colc1b				; result is positive.
000C6Er 3  49 FF        	eor #$ff				; make negative positive.
000C70r 3  18           	clc
000C71r 3  69 01        	adc #1
000C73r 3               colc1b:
000C73r 3  C9 10        	cmp #16					; within y range?
000C75r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000C77r 3  18           	clc					; add x difference.
000C78r 3  65 rr        	adc z80_c
000C7Ar 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000C7Cr 3  B0 02        	bcs :+
000C7Er 3  38           	sec
000C7Fr 3  60           	rts 					; carry set if there's a collision.
000C80r 3               :
000C80r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000C83r 3               colty1:
000C83r 3  A5 rr        	lda z80_x  				; compare the two.
000C85r 3  C5 rr        	cmp z80_l
000C87r 3  D0 09        	bne end_col
000C89r 3  A5 rr        	lda z80_i
000C8Br 3  C5 rr        	cmp z80_h
000C8Dr 3  D0 03        	bne end_col
000C8Fr 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000C92r 3               end_col:
000C92r 3  4C rr rr     	jmp colty0
000C95r 3               
000C95r 3               ;-----------------------------------------------------------
000C95r 3               ; Display number, left aligned
000C95r 3               ;
000C95r 3               ; Input:
000C95r 3               ;  a		= number
000C95r 3               ;
000C95r 3               ; global:	-
000C95r 3               ; local:	a,y,bc,hl,displ0
000C95r 3               ; calls:	num2ch,dmsg3
000C95r 3               ;-----------------------------------------------------------
000C95r 3               
000C95r 3               disply:
000C95r 3  85 rr        	sta z80_a
000C97r 3  A9 rr        	lda #<displ0				; display workspace.
000C99r 3  85 rr        	sta z80_c
000C9Br 3  A9 rr        	lda #>displ0
000C9Dr 3  85 rr        	sta z80_b
000C9Fr 3  A5 rr        	lda z80_a
000CA1r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000CA4r 3               displ1:
000CA4r 3  C6 rr        	dec z80_c				; back one character.
000CA6r 3  D0 02        	bne :+
000CA8r 3  C6 rr        	dec z80_b
000CAAr 3               :
000CAAr 3  A0 00        	ldy #0
000CACr 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000CAEr 3  09 80        	ora #128				; insert end marker.
000CB0r 3  91 rr        	sta (z80_bc),y				; new value.
000CB2r 3               
000CB2r 3  A9 rr        	lda #<displ0				; display space.
000CB4r 3  85 rr        	sta z80_l
000CB6r 3  A9 rr        	lda #>displ0
000CB8r 3  85 rr        	sta z80_h
000CBAr 3  4C rr rr     	jmp dmsg3				; display the string.
000CBDr 3               
000CBDr 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000CC1r 3               
000CC1r 3               ;----------------------------------------------------------------
000CC1r 3               ; Initialise screen.
000CC1r 3               ;
000CC1r 3               ; global:	roomtb,scno
000CC1r 3               ; local:	-
000CC1r 3               ; calls:	tstcs
000CC1r 3               ;----------------------------------------------------------------
000CC1r 3               
000CC1r 3               initsc:
000CC1r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000CC4r 3  20 rr rr     	jsr tstsc 			; find displacement.
000CC7r 3  C9 FF        	cmp #255 			; is it valid?
000CC9r 3  F0 02        	beq init_end 			; no, it's rubbish.
000CCBr 3  85 rr        	sta scno			; store new room number.
000CCDr 3               init_end:
000CCDr 3  60           	rts
000CCEr 3               
000CCEr 3               ;----------------------------------------------------------------
000CCEr 3               ; Test screen.
000CCEr 3               ;
000CCEr 3               ; global:	-
000CCEr 3               ; local:	x
000CCEr 3               ; calls:	-
000CCEr 3               ;----------------------------------------------------------------
000CCEr 3               
000CCEr 3               tstsc:
000CCEr 3  85 rr        	sta tmproom
000CD0r 3  18           	clc
000CD1r 3  69 04        	adc #MAPWID 			; add width in case we"re negative.
000CD3r 3  AA           	tax 				; add displacement to map data.
000CD4r 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000CD7r 3  60           	rts
000CD8r 3               
000CD8r 3               ;--------------------------
000CD8r 3               ; Screen left.
000CD8r 3               ;--------------------------
000CD8r 3               
000CD8r 3               scrl:
000CD8r 3  AD rr rr     	lda roomtb 			; present room table pointer.
000CDBr 3  38           	sec
000CDCr 3  E9 01        	sbc #1				; room left.
000CDEr 3               scrl0:
000CDEr 3  20 rr rr     	jsr tstsc			; test screen.
000CE1r 3  C9 FF        	cmp #255			; is there a screen this way?
000CE3r 3  D0 01        	bne :+
000CE5r 3  60           	rts				; no, return to loop.
000CE6r 3               :
000CE6r 3  A5 rr        	lda tmproom			; restore room displacement.
000CE8r 3  8D rr rr     	sta roomtb			; new room table position.
000CEBr 3               scrl1:
000CEBr 3  20 rr rr     	jsr initsc 			; set new screen.
000CEEr 3  A9 02        	lda #2
000CF0r 3  85 rr        	sta restfl 			; set it.
000CF2r 3  60           	rts
000CF3r 3               scrr:
000CF3r 3  AD rr rr     	lda roomtb 			; room table pointer.
000CF6r 3  18           	clc
000CF7r 3  69 01        	adc #1				; room right.
000CF9r 3  4C rr rr     	jmp scrl0
000CFCr 3               scru:
000CFCr 3  AD rr rr     	lda roomtb 			; room table pointer.
000CFFr 3  38           	sec
000D00r 3  E9 04        	sbc #MAPWID 			; room up.
000D02r 3  4C rr rr     	jmp scrl0
000D05r 3               scrd:
000D05r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D08r 3  18           	clc
000D09r 3  69 04        	adc #MAPWID 			; room down.
000D0Br 3  4C rr rr     	jmp scrl0
000D0Er 3               
000D0Er 3               ;-----------------------------------------
000D0Er 3               ; Jump to new screen.
000D0Er 3               ;-----------------------------------------
000D0Er 3               
000D0Er 3               nwscr:
000D0Er 3  A2 00        	ldx #0				; start of map data.
000D10r 3               nwscr0:
000D10r 3  DD rr rr     	cmp mapdat,x
000D13r 3  F0 06        	beq nwscr1			; have we found a match for screen?
000D15r 3  E8           	inx 				; next room.
000D16r 3  E0 50        	cpx #80				; zero room count, 80 to search.
000D18r 3  D0 F6        	bne nwscr0			; keep looking.
000D1Ar 3  60           	rts
000D1Br 3               nwscr1:
000D1Br 3  8E rr rr     	stx roomtb			; set the map position.
000D1Er 3  4C rr rr     	jmp scrl1			; draw new room.
000D21r 3               
000D21r 3               
000D21r 3               ;----------------------------------------------------------
000D21r 3               ; Gravity processing.
000D21r 3               ;----------------------------------------------------------
000D21r 3               
000D21r 3               grav:
000D21r 3  A0 0D        	ldy #13
000D23r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D25r 3  85 rr        	sta z80_l
000D27r 3  A0 0E        	ldy #14
000D29r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D2Br 3  85 rr        	sta z80_h
000D2Dr 3  05 rr        	ora z80_l			; merge in low byte.
000D2Fr 3  D0 01        	bne :+
000D31r 3  60           	rts				; if neither is set, we're not in the air.
000D32r 3               :
000D32r 3  A0 00        	ldy #0
000D34r 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000D36r 3  85 rr        	sta z80_a
000D38r 3  C9 63        	cmp #99				; reached the end?
000D3Ar 3  D0 0C        	bne grav0			; no, continue.
000D3Cr 3               grav2:
000D3Cr 3  C6 rr        	dec z80_l			; go back to previous value.
000D3Er 3  C9 FF        	cmp #$ff
000D40r 3  D0 02        	bne :+
000D42r 3  C6 rr        	dec z80_h
000D44r 3               :
000D44r 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000D46r 3  85 rr        	sta z80_a
000D48r 3               grav0:
000D48r 3  E6 rr        	inc z80_l			; point to next table entry.
000D4Ar 3  D0 02        	bne :+
000D4Cr 3  E6 rr        	inc z80_h
000D4Er 3               :
000D4Er 3  A5 rr        	lda z80_l
000D50r 3  A0 0D        	ldy #13
000D52r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000D54r 3  A5 rr        	lda z80_h
000D56r 3  A0 0E        	ldy #14
000D58r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000D5Ar 3               grav1:
000D5Ar 3  A5 rr        	lda z80_a
000D5Cr 3  D0 01        	bne :+				; any movement required?
000D5Er 3  60           	rts				; no, not this time.
000D5Fr 3               :
000D5Fr 3  A5 rr        	lda z80_a
000D61r 3  C9 80        	cmp #128			; is it up or down?
000D63r 3  B0 15        	bcs gravu			; it's up.
000D65r 3               gravd:
000D65r 3  85 rr        	sta z80_b			; set pixels to move.
000D67r 3               gravd0:
000D67r 3  20 rr rr     	jsr cangd			; can we go down?
000D6Ar 3  D0 28        	bne gravst			; can't move down, so stop.
000D6Cr 3  A0 08        	ldy #8
000D6Er 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000D70r 3  18           	clc
000D71r 3  69 01        	adc #1
000D73r 3  91 rr        	sta (z80_ix),y
000D75r 3  C6 rr        	dec z80_b
000D77r 3  D0 EE        	bne gravd0
000D79r 3  60           	rts
000D7Ar 3               gravu:
000D7Ar 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000D7Cr 3  18           	clc
000D7Dr 3  69 01        	adc #1
000D7Fr 3  85 rr        	sta z80_b			; set pixels to move.
000D81r 3               gravu0:
000D81r 3  20 rr rr     	jsr cangu			; can we go up?
000D84r 3  D0 6E        	bne ifalls			; can't move up, go down next.
000D86r 3  A0 08        	ldy #8
000D88r 3  B1 rr        	lda (z80_ix),y
000D8Ar 3  38           	sec
000D8Br 3  E9 01        	sbc #1
000D8Dr 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000D8Fr 3  C6 rr        	dec z80_b
000D91r 3  D0 EE        	bne gravu0
000D93r 3  60           	rts
000D94r 3               gravst:
000D94r 3  A0 0D        	ldy #var_jumpLo
000D96r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D98r 3  85 rr        	sta z80_l
000D9Ar 3  A0 0E        	ldy #var_jumpHi
000D9Cr 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D9Er 3  85 rr        	sta z80_h
000DA0r 3               
000DA0r 3  A9 00        	lda #0				; null value in pointer.
000DA2r 3  A0 0D        	ldy #var_jumpLo
000DA4r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000DA6r 3  C8           	iny
000DA7r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000DA9r 3               
000DA9r 3  A0 00        	ldy #0
000DABr 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000DADr 3  C9 63        	cmp #99				; is it the end marker?
000DAFr 3               evftf:
000DAFr 3  F0 01        	beq :+				; yes, fallen too far.
000DB1r 3  60           	rts
000DB2r 3               :
000DB2r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000DB5r 3               
000DB5r 3               ;------------------------------------------------
000DB5r 3               ; Initiate fall check.
000DB5r 3               ;------------------------------------------------
000DB5r 3               
000DB5r 3               ifall:
000DB5r 3  A0 0D        	ldy #var_jumpLo
000DB7r 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000DB9r 3  85 rr        	sta z80_l
000DBBr 3  A0 0E        	ldy #var_jumpHi
000DBDr 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000DBFr 3  85 rr        	sta z80_h			; high byte in accumulator.
000DC1r 3  05 rr        	ora z80_l			; merge in low byte.
000DC3r 3  F0 01        	beq :+
000DC5r 3  60           	rts				; if either is set, we're already in the air.
000DC6r 3               :
000DC6r 3  A0 09        	ldy #9
000DC8r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000DCAr 3  85 rr        	sta dispx
000DCCr 3  A0 08        	ldy #8
000DCEr 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000DD0r 3  18           	clc
000DD1r 3               numsp7:
000DD1r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000DD3r 3  85 rr        	sta dispy			; set up test coordinates.
000DD5r 3  20 rr rr     	jsr tstbl			; get map address.
000DD8r 3  20 rr rr     	jsr plchk			; block, platform check.
000DDBr 3  F0 01        	beq :+
000DDDr 3  60           	rts				; it's solid, don't fall.
000DDEr 3               :
000DDEr 3  E6 rr        	inc bufaddr			; look right one cell.
000DE0r 3  20 rr rr     	jsr plchk			; block, platform check.
000DE3r 3  F0 01        	beq :+
000DE5r 3  60           	rts				; it's solid, don't fall.
000DE6r 3               :
000DE6r 3  A5 rr        	lda dispx			; y coordinate.
000DE8r 3  29 07        	and #7				; position straddling block cells.
000DEAr 3  F0 08        	beq ifalls			; no more checks needed.
000DECr 3  E6 rr        	inc bufaddr			; look to third cell.
000DEEr 3  20 rr rr     	jsr plchk			; block, platform check.
000DF1r 3  F0 01        	beq :+
000DF3r 3  60           	rts				; it's solid, don't fall.
000DF4r 3               :
000DF4r 3               ifalls:
000DF4r 3  A9 rr        	lda #<jtab			; jump table start.
000DF6r 3  85 rr        	sta z80_l
000DF8r 3  A9 rr        	lda #>jtab
000DFAr 3  85 rr        	sta z80_h
000DFCr 3               ifal0:
000DFCr 3  E6 rr        	inc z80_l			; point to next value.
000DFEr 3  D0 02        	bne :+
000E00r 3  E6 rr        	inc z80_h
000E02r 3               :
000E02r 3  A0 00        	ldy #0
000E04r 3  B1 rr        	lda (z80_hl),y			; fetch value.
000E06r 3  F0 F4        	beq ifal0			; no, get next value.
000E08r 3  C9 63        	cmp #99				; reached end of table?
000E0Ar 3  D0 01        	bne :+
000E0Cr 3  60           	rts				; yes, don't fall.
000E0Dr 3               :
000E0Dr 3  C9 80        	cmp #128			; is it going up?
000E0Fr 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000E11r 3               
000E11r 3  A0 0D        	ldy #13
000E13r 3  A5 rr        	lda z80_l
000E15r 3  91 rr        	sta (z80_ix),y 			; set jump low.
000E17r 3  A0 0E        	ldy #14
000E19r 3  A5 rr        	lda z80_h
000E1Br 3  91 rr        	sta (z80_ix),y 			; set jump high.
000E1Dr 3  60           	rts
000E1Er 3               
000E1Er 3               
000E1Er 3               ;----------------------------------------------------
000E1Er 3               ; Get frame data for a particular sprite.
000E1Er 3               ; Input:
000E1Er 3               ;  a		= framenumer
000E1Er 3               ; Output:
000E1Er 3               ;  hl		= frame address
000E1Er 3               ;
000E1Er 3               ; global:	hl,frmptr
000E1Er 3               ; local:	-
000E1Er 3               ; calls:	-
000E1Er 3               ;----------------------------------------------------
000E1Er 3               
000E1Er 3               gfrm:
000E1Er 3  0A           	asl a	 		 	; multiple of 2.
000E1Fr 3  18           	clc
000E20r 3  6D rr rr     	adc frmptr 			; frames used by game.
000E23r 3  85 rr        	sta z80_l
000E25r 3  AD rr rr     	lda frmptr+1
000E28r 3  69 00        	adc #0
000E2Ar 3  85 rr        	sta z80_h 			; point to frame start.
000E2Cr 3  60           	rts
000E2Dr 3               
000E2Dr 3               ;----------------------------------------------------
000E2Dr 3               ; Find sprite list for current room.
000E2Dr 3               ;
000E2Dr 3               ; global:	hl
000E2Dr 3               ; local:	x,y
000E2Dr 3               ; calls:	-
000E2Dr 3               ;----------------------------------------------------
000E2Dr 3               
000E2Dr 3               sprlst:
000E2Dr 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000E2Fr 3  85 rr        	sta z80_l
000E31r 3  A9 rr        	lda #>nmedat
000E33r 3  85 rr        	sta z80_h
000E35r 3  A6 rr        	ldx scno 			; screen number.
000E37r 3  D0 01        	bne sprls2 			; is it the first screen?
000E39r 3  60           	rts 				; yes, don't need to search data.
000E3Ar 3               sprls2:
000E3Ar 3  A0 00        	ldy #0
000E3Cr 3               sprls1:
000E3Cr 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000E3Er 3  C9 FF        	cmp #255			; is it an end marker?
000E40r 3  F0 0E        	beq sprls0 			; yes, end of this room.
000E42r 3               
000E42r 3  18           	clc 				; point to next sprite in list.
000E43r 3  A5 rr        	lda z80_l
000E45r 3  69 04        	adc #NMESIZ
000E47r 3  85 rr        	sta z80_l
000E49r 3  90 02        	bcc :+
000E4Br 3  E6 rr        	inc z80_h
000E4Dr 3               :
000E4Dr 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000E50r 3               sprls0:
000E50r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000E52r 3  D0 02        	bne :+
000E54r 3  E6 rr        	inc z80_h
000E56r 3               :
000E56r 3  CA           	dex
000E57r 3  D0 E3        	bne sprls1 			; continue until room found.
000E59r 3  60           	rts
000E5Ar 3               
000E5Ar 3               
000E5Ar 3               ;----------------------------------------------------
000E5Ar 3               ; Clear all but a single player sprite.
000E5Ar 3               ;
000E5Ar 3               ; global:	-
000E5Ar 3               ; local:	x,y,ix
000E5Ar 3               ; calls:	-
000E5Ar 3               ;----------------------------------------------------
000E5Ar 3               
000E5Ar 3               nspr:
000E5Ar 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E5Cr 3  85 rr        	sta sprcnt
000E5Er 3  A9 rr        	lda #<sprtab 			; sprite table.
000E60r 3  85 rr        	sta z80_x
000E62r 3  A9 rr        	lda #>sprtab
000E64r 3  85 rr        	sta z80_i
000E66r 3               nspr0:
000E66r 3  A0 00        	ldy #0 				; fetch sprite type.
000E68r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000E6Ar 3  F0 1A        	beq nspr1 			; yes, keep this one.
000E6Cr 3               
000E6Cr 3  A9 FF        	lda #255
000E6Er 3  A0 00        	ldy #0 				; fetch sprite type.
000E70r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E72r 3  A0 05        	ldy #5
000E74r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000E76r 3               
000E76r 3  18           	clc	 			; next sprite.
000E77r 3  A5 rr        	lda z80_x
000E79r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E7Br 3  85 rr        	sta z80_x
000E7Dr 3  90 02        	bcc :+
000E7Fr 3  E6 rr        	inc z80_i
000E81r 3               :
000E81r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000E83r 3  D0 E1        	bne nspr0
000E85r 3  60           	rts
000E86r 3               nspr1:
000E86r 3  A9 FF        	lda #255
000E88r 3  A0 00        	ldy #0
000E8Ar 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E8Cr 3               
000E8Cr 3  18           	clc	 			; point to next sprite.
000E8Dr 3  A5 rr        	lda z80_x
000E8Fr 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E91r 3  85 rr        	sta z80_x
000E93r 3  90 02        	bcc :+
000E95r 3  E6 rr        	inc z80_i
000E97r 3               :
000E97r 3  C6 rr        	dec sprcnt	 			; one less to do.
000E99r 3  D0 01        	bne nspr2
000E9Br 3  60           	rts
000E9Cr 3               nspr2:
000E9Cr 3  A9 FF        	lda #255
000E9Er 3  A0 00        	ldy #0
000EA0r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EA2r 3  A0 05        	ldy #5
000EA4r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000EA6r 3               
000EA6r 3  18           	clc	 			; next sprite.
000EA7r 3  A5 rr        	lda z80_x
000EA9r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000EABr 3  85 rr        	sta z80_x
000EADr 3  90 02        	bcc :+
000EAFr 3  E6 rr        	inc z80_i
000EB1r 3               :
000EB1r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000EB3r 3  D0 E7        	bne nspr2
000EB5r 3  60           	rts
000EB6r 3               
000EB6r 3               ;----------------------------------------------------------
000EB6r 3               ; Two initialisation routines.
000EB6r 3               ; Initialise sprites - copy everything from list to table.
000EB6r 3               ;
000EB6r 3               ; global:	-
000EB6r 3               ; local:	x,y,ix
000EB6r 3               ; calls:	cpsp
000EB6r 3               ;----------------------------------------------------------
000EB6r 3               
000EB6r 3               ispr:
000EB6r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000EB8r 3  85 rr        	sta sprcnt
000EBAr 3  A9 rr        	lda #<sprtab			; sprite table.
000EBCr 3  85 rr        	sta z80_x
000EBEr 3  A9 rr        	lda #>sprtab
000EC0r 3  85 rr        	sta z80_i
000EC2r 3               ispr2:
000EC2r 3  A0 00        	ldy #0
000EC4r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000EC6r 3  C9 FF        	cmp #255 			; is it an end marker?
000EC8r 3  D0 01        	bne :+
000ECAr 3  60           	rts 				; yes, no more to do.
000ECBr 3               :
000ECBr 3               ispr1:
000ECBr 3  A0 00        	ldy #0
000ECDr 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000ECFr 3  C9 FF        	cmp #255 			; is it enabled yet?
000ED1r 3  D0 08        	bne ispr4			; yes, try another slot.
000ED3r 3               
000ED3r 3  A0 05        	ldy #5
000ED5r 3  B1 rr        	lda (z80_ix),y		 	; next type.
000ED7r 3  C9 FF        	cmp #255 			; is it enabled yet?
000ED9r 3  F0 10        	beq ispr3 			; no, process this one.
000EDBr 3               ispr4:
000EDBr 3  18           	clc 				; next sprite.
000EDCr 3  A5 rr        	lda z80_x
000EDEr 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000EE0r 3  85 rr        	sta z80_x
000EE2r 3  90 02        	bcc :+
000EE4r 3  E6 rr        	inc z80_i
000EE6r 3               :
000EE6r 3  C6 rr        	dec sprcnt
000EE8r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000EEAr 3  60           	rts  				; no more room in table.
000EEBr 3               ispr3:
000EEBr 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000EEEr 3  C6 rr        	dec sprcnt			; one less space in the table.
000EF0r 3  D0 D0        	bne ispr2
000EF2r 3  60           	rts
000EF3r 3               
000EF3r 3               
000EF3r 3               ;-----------------------------------------------------------------------
000EF3r 3               ; Initialise sprites - but not player, we're keeping the old one.
000EF3r 3               ;
000EF3r 3               ; global:	-
000EF3r 3               ; local:	x,y,ix
000EF3r 3               ; calls:	cpsp
000EF3r 3               ;-----------------------------------------------------------------------
000EF3r 3               
000EF3r 3               kspr:
000EF3r 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000EF5r 3  A9 rr        	lda #<sprtab 			; sprite table.
000EF7r 3  85 rr        	sta z80_x
000EF9r 3  A9 rr        	lda #>sprtab
000EFBr 3  85 rr        	sta z80_i
000EFDr 3               kspr2:
000EFDr 3  A0 00        	ldy #0
000EFFr 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F01r 3  C9 FF        	cmp #255 			; is it an end marker?
000F03r 3  D0 01        	bne :+
000F05r 3  60           	rts 				; yes, no more to do.
000F06r 3               :
000F06r 3  C9 00        	cmp #0
000F08r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000F0Ar 3               
000F0Ar 3  18           	clc 				; next sprite.
000F0Br 3  A5 rr        	lda z80_l
000F0Dr 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000F0Fr 3  85 rr        	sta z80_l
000F11r 3  90 02        	bcc :+
000F13r 3  E6 rr        	inc z80_h
000F15r 3               :
000F15r 3  4C rr rr     	jmp kspr2
000F18r 3               kspr1:
000F18r 3  A0 00        	ldy #0 				; fetch sprite type.
000F1Ar 3  B1 rr        	lda (z80_ix),y
000F1Cr 3  C9 FF        	cmp #255 			; is it enabled yet?
000F1Er 3  D0 08        	bne kspr4 			; yes, try another slot.
000F20r 3               
000F20r 3  A0 05        	ldy #5 				; next type.
000F22r 3  B1 rr        	lda (z80_ix),y
000F24r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F26r 3  F0 0F        	beq kspr3 			; no, process this one.
000F28r 3               kspr4:
000F28r 3  18           	clc 				; next sprite.
000F29r 3  A5 rr        	lda z80_x
000F2Br 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000F2Dr 3  85 rr        	sta z80_x
000F2Fr 3  90 02        	bcc :+
000F31r 3  E6 rr        	inc z80_i
000F33r 3               :
000F33r 3  CA           	dex	 			; repeat for remaining sprites.
000F34r 3  D0 E2        	bne kspr1
000F36r 3  60           	rts  				; no more room in table.
000F37r 3               kspr3:
000F37r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000F3Ar 3  CA           	dex	 			; one less space in the table.
000F3Br 3  D0 C0        	bne kspr2
000F3Dr 3  60           	rts
000F3Er 3               
000F3Er 3               ;----------------------------------------------
000F3Er 3               ; Copy sprite from list to table.
000F3Er 3               ;
000F3Er 3               ; global:	hl,ix
000F3Er 3               ; local:	y
000F3Er 3               ; calls:	evnt09
000F3Er 3               ;----------------------------------------------
000F3Er 3               
000F3Er 3               cpsp:
000F3Er 3  A0 00        	ldy #0					; fetch byte from table.
000F40r 3  B1 rr        	lda (z80_hl),y
000F42r 3               	; y=var_Type
000F42r 3  91 rr        	sta (z80_ix),y			; set up type.
000F44r 3  A0 05        	ldy #var_newType
000F46r 3  91 rr        	sta (z80_ix),y 			; set up type.
000F48r 3               
000F48r 3  E6 rr        	inc z80_l 				; move to next byte.
000F4Ar 3  D0 02        	bne :+
000F4Cr 3  E6 rr        	inc z80_h
000F4Er 3               :
000F4Er 3  A0 00        	ldy #0 					; fetch byte from table.
000F50r 3  B1 rr        	lda (z80_hl),y
000F52r 3  A0 06        	ldy #var_newImage
000F54r 3  91 rr        	sta (z80_ix),y			; set up image.
000F56r 3               
000F56r 3  E6 rr        	inc z80_l 				; move to next byte.
000F58r 3  D0 02        	bne :+
000F5Ar 3  E6 rr        	inc z80_h
000F5Cr 3               :
000F5Cr 3  A0 00        	ldy #0
000F5Er 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
000F60r 3  A0 08        	ldy #var_newY
000F62r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F64r 3               
000F64r 3  A9 C8        	lda #200 				; set initial coordinate off screen.
000F66r 3  A0 03        	ldy #var_Y
000F68r 3  91 rr        	sta (z80_ix),y
000F6Ar 3               
000F6Ar 3  E6 rr        	inc z80_l 				; move to next byte.
000F6Cr 3  D0 02        	bne :+
000F6Er 3  E6 rr        	inc z80_h
000F70r 3               :
000F70r 3  A0 00        	ldy #0 					; fetch byte from table.
000F72r 3  B1 rr        	lda (z80_hl),y
000F74r 3  A0 09        	ldy #var_newX
000F76r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F78r 3               
000F78r 3  E6 rr        	inc z80_l 				; move to next byte.
000F7Ar 3  D0 02        	bne :+
000F7Cr 3  E6 rr        	inc z80_h
000F7Er 3               :
000F7Er 3  A9 00        	lda #0					; zeroes in accumulator.
000F80r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
000F82r 3  91 rr        	sta (z80_ix),y
000F84r 3  A0 0A        	ldy #var_Direction 		; reset direction.
000F86r 3  91 rr        	sta (z80_ix),y
000F88r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
000F8Ar 3  91 rr        	sta (z80_ix),y
000F8Cr 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
000F8Er 3  91 rr        	sta (z80_ix),y
000F90r 3               
000F90r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
000F92r 3  A0 10        	ldy #var_dataHi
000F94r 3  91 rr        	sta (z80_ix),y
000F96r 3               evis0:
000F96r 3  A5 rr        	lda z80_i
000F98r 3  48           	pha
000F99r 3  A5 rr        	lda z80_x
000F9Br 3  48           	pha
000F9Cr 3  A5 rr        	lda z80_h
000F9Er 3  48           	pha
000F9Fr 3  A5 rr        	lda z80_l
000FA1r 3  48           	pha
000FA2r 3               
000FA2r 3  20 rr rr     	jsr evnt09 				; perform event.
000FA5r 3               
000FA5r 3  68           	pla
000FA6r 3  85 rr        	sta z80_l
000FA8r 3  68           	pla
000FA9r 3  85 rr        	sta z80_h
000FABr 3  68           	pla
000FACr 3  85 rr        	sta z80_x
000FAEr 3  68           	pla
000FAFr 3  85 rr        	sta z80_i
000FB1r 3               
000FB1r 3  18           	clc
000FB2r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
000FB4r 3  69 11        	adc #TABSIZ		 	; next sprite.
000FB6r 3  85 rr        	sta z80_x
000FB8r 3  90 02        	bcc :+
000FBAr 3  E6 rr        	inc z80_i
000FBCr 3               :
000FBCr 3  60           	rts
000FBDr 3               
000FBDr 3               
000FBDr 3               ;-------------------------------------
000FBDr 3               ; Clear the play area window.
000FBDr 3               ;-------------------------------------
000FBDr 3               
000FBDr 3               clw:
000FBDr 3  AD rr rr     	lda wintop			; get coordinates of window.
000FC0r 3  85 rr        	sta dispy			; put into dispx for calculation.
000FC2r 3  AD rr rr     	lda winlft
000FC5r 3  85 rr        	sta dispx
000FC7r 3               
000FC7r 3  AD rr rr     	lda winhgt			; height of window.
000FCAr 3  85 rr        	sta rrow			; copy to b register.
000FCCr 3               clw3:
000FCCr 3  AD rr rr     	lda winwid 			; width of window.
000FCFr 3  85 rr        	sta rcol
000FD1r 3               clw2:
000FD1r 3  20 rr rr     	jsr gprad 			; get print address.
000FD4r 3  A9 20        	lda #32
000FD6r 3  20 rr rr     	jsr pchar
000FD9r 3  E6 rr        	inc dispx			; next column.
000FDBr 3  C6 rr        	dec rcol			; one less to do.
000FDDr 3  D0 F2        	bne clw2			; repeat for remaining columns.
000FDFr 3               
000FDFr 3  AD rr rr     	lda winlft			; get left edge.
000FE2r 3  85 rr        	sta dispx 			; reset x.
000FE4r 3  E6 rr        	inc dispy 			; next line down.
000FE6r 3               
000FE6r 3  C6 rr        	dec rrow
000FE8r 3  D0 E2        	bne clw3			; repeat down the screen.
000FEAr 3               
000FEAr 3  AD rr rr     	lda wintop			; get coordinates of window.
000FEDr 3  85 rr        	sta chary			; put into display position.
000FEFr 3  AD rr rr     	lda winlft
000FF2r 3  85 rr        	sta charx
000FF4r 3  60           	rts
000FF5r 3               
000FF5r 3               
000FF5r 3               ;----------------------------------------------------------
000FF5r 3               ; Effects code.
000FF5r 3               ; Ticker routine is called 25 times per second.
000FF5r 3               ;
000FF5r 3               ; txtini = text scroller address
000FF5r 3               ; txtscr = left text screen address
000FF5r 3               ; txtwid = scroller width
000FF5r 3               ; txtbit = 128
000FF5r 3               ; X      = message nr
000FF5r 3               ;----------------------------------------------------------
000FF5r 3               
000FF5r 3               .if sflag
000FF5r 3               
000FF5r 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
000FF5r 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
000FF5r 3               		.byte $00,$10,$20,$30,$40,$50
000FF5r 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
000FF5r 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
000FF5r 3               		.byte $01,$01,$01,$01,$01,$01
000FF5r 3               
000FF5r 3               scrly:
000FF5r 3               
000FF5r 3               ; Set scr_l = txtscr
000FF5r 3               
000FF5r 3               	rts
000FF5r 3               	.word txtscr         	; set scr_l = left screen address.
000FF5r 3               	sta scr_l
000FF5r 3               	sta scr_r
000FF5r 3               	lda txtscr+1
000FF5r 3               	sta scr_l+1
000FF5r 3               	sta scr_r+1
000FF5r 3               
000FF5r 3               	stx xtmp		; save x
000FF5r 3               
000FF5r 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
000FF5r 3               
000FF5r 3               	ldx txtwid
000FF5r 3               	dex
000FF5r 3               	lda scrollpos_lb,x
000FF5r 3               	clc
000FF5r 3               	adc scr_r
000FF5r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
000FF5r 3               	bcc :+
000FF5r 3               	inc scr_r+1
000FF5r 3               :
000FF5r 3               	clc
000FF5r 3               	lda scrollpos_hb,x
000FF5r 3               	adc scr_r+1
000FF5r 3               	sta scr_r+1
000FF5r 3               
000FF5r 3               ; Scroll string
000FF5r 3               
000FF5r 3               	lda #0
000FF5r 3               	sta line_cnt		; Set line counter
000FF5r 3               scrly1:
000FF5r 3               	clc
000FF5r 3               	lda scr_r
000FF5r 3               	adc line_cnt
000FF5r 3               	sta scr_tmp
000FF5r 3               	lda scr_r+1
000FF5r 3               	sta scr_tmp+1
000FF5r 3               
000FF5r 3               	ldx txtwid		; set column counter
000FF5r 3               	dex
000FF5r 3               	ldy #0
000FF5r 3               	clc			; Reset pixel to be shifted in
000FF5r 3               scrly0:
000FF5r 3               	lda (scr_tmp),y
000FF5r 3               	rol a			; Shift screenbyte
000FF5r 3               	sta (scr_tmp),y		; store screenbyte
000FF5r 3               	php			; save carry
000FF5r 3               
000FF5r 3               	sec			; subtract 16 form screenaddress
000FF5r 3               	lda scr_tmp
000FF5r 3               	sbc #$10
000FF5r 3               	sta scr_tmp
000FF5r 3               	bcs :+
000FF5r 3               	dec scr_tmp+1
000FF5r 3               :
000FF5r 3               	plp			; restore carry
000FF5r 3               	dex			; previous column
000FF5r 3               	bpl scrly0		; repeat for all columns
000FF5r 3               
000FF5r 3               	inc line_cnt		; next line
000FF5r 3               	lda line_cnt
000FF5r 3               	cmp #8
000FF5r 3               	bne scrly1		; repeat for 8 lines
000FF5r 3               
000FF5r 3               ; Get next character in string
000FF5r 3               
000FF5r 3               	lda txtpos 		; get text pointer.
000FF5r 3               	sta scr_txt
000FF5r 3               	lda txtpos+1
000FF5r 3               	sta scr_txt+1
000FF5r 3               
000FF5r 3               	ldy #0
000FF5r 3               	lda (scr_txt),y 	; find character we're displaying.
000FF5r 3               	and #127 		; remove end marker bit if applicable.
000FF5r 3               	cmp #13			; is it newline?
000FF5r 3               	bne scrly5 		; no, it's okay.
000FF5r 3               	lda #32			; convert to a space instead.
000FF5r 3               scrly5:
000FF5r 3               	sta fntaddr		; calculate char address
000FF5r 3               	lda #0
000FF5r 3               	sta fntaddr+1
000FF5r 3               	asl fntaddr  		; multiply char by 8.
000FF5r 3               	rol fntaddr+1
000FF5r 3               	asl fntaddr
000FF5r 3               	rol fntaddr+1
000FF5r 3               	asl fntaddr
000FF5r 3               	rol fntaddr+1
000FF5r 3               	lda fntaddr
000FF5r 3               	clc
000FF5r 3               	adc #<(FONT-256)
000FF5r 3               	sta scrly3+1		; that's the low byte.
000FF5r 3               	lda fntaddr+1
000FF5r 3               	adc #>(FONT-256)
000FF5r 3               	sta scrly3+2		; add displacement.
000FF5r 3               
000FF5r 3               	ldy #0
000FF5r 3               scrly3:
000FF5r 3               	lda $3333,y		; get image of char line.
000FF5r 3               	and txtbit
000FF5r 3               	beq scrly2		; don't plot pixel
000FF5r 3               	lda (scr_r),y
000FF5r 3               	clc
000FF5r 3               	ora #1
000FF5r 3               	sta (scr_r),y		; plot pixel
000FF5r 3               scrly2:
000FF5r 3               	iny			; next line of char.
000FF5r 3               	cpy #8
000FF5r 3               	bne scrly3
000FF5r 3               
000FF5r 3               	lsr txtbit		; bit of text to display.
000FF5r 3               	bcs :+
000FF5r 3               	rts
000FF5r 3               :
000FF5r 3               	ldy #0
000FF5r 3               	lda (scr_txt),y 	; what was the character?
000FF5r 3               	asl a	  		; end of message?
000FF5r 3               	bcs scrly4
000FF5r 3               	inc txtpos
000FF5r 3               	bne :+
000FF5r 3               	inc txtpos+1
000FF5r 3               :
000FF5r 3               	jmp scrly6 		; not yet - continue.
000FF5r 3               scrly4:
000FF5r 3               	lda txtini 		; start of scrolling message.
000FF5r 3               	sta txtpos
000FF5r 3               	lda txtini+1
000FF5r 3               	sta txtpos+1
000FF5r 3               scrly6:
000FF5r 3               	lda #128
000FF5r 3               	sta txtbit
000FF5r 3               	ldx xtmp
000FF5r 3               	rts
000FF5r 3               
000FF5r 3               tmp_byte:	.byte 0
000FF5r 3               line_cnt:	.byte 0
000FF5r 3               
000FF5r 3               ;-------------------------------------------------------
000FF5r 3               ; Entry TICKER command
000FF5r 3               ;
000FF5r 3               ; Entry:
000FF5r 3               ;  z80_b = message nr
000FF5r 3               ;  z80_c = width
000FF5r 3               ;-------------------------------------------------------
000FF5r 3               
000FF5r 3               iscrly:
000FF5r 3               	jsr prescr 		; set up display position.
000FF5r 3               	lda #<msgdat 		; text messages.
000FF5r 3               	sta z80_l
000FF5r 3               	lda #>msgdat
000FF5r 3               	sta z80_h
000FF5r 3               	lda z80_c 		; width.
000FF5r 3               	sec
000FF5r 3               	sbc #1			; subtract one.
000FF5r 3               	cmp #32 		; is it between 1 and 32?
000FF5r 3               	bcc :+
000FF5r 3               	lda #$60
000FF5r 3               	jmp iscrl0		; no, disable messages.
000FF5r 3               :
000FF5r 3               	ldx z80_b		; message number.
000FF5r 3               	jsr getwrd 		; find message start.
000FF5r 3               
000FF5r 3               	lda z80_l		; set initial text position.
000FF5r 3               	sta txtini
000FF5r 3               	lda z80_h
000FF5r 3               	sta txtini+1
000FF5r 3               
000FF5r 3               	lda #$ad		; code for lda adrr
000FF5r 3               iscrl0:
000FF5r 3               	sta scrly		; enable/disable scrolling routine.
000FF5r 3               
000FF5r 3               	jsr prescr 		; set up display position.
000FF5r 3               	jsr gprad 		; get print address.
000FF5r 3               
000FF5r 3               	lda scraddr 		; set text screen address.
000FF5r 3               	sta txtscr
000FF5r 3               	lda scraddr+1
000FF5r 3               	sta txtscr+1
000FF5r 3               
000FF5r 3               	lda z80_c		; width.
000FF5r 3               	sta txtwid		; set width in working storage.
000FF5r 3               
000FF5r 3               	lda #128 		; start with leftmost bit.
000FF5r 3               	sta txtbit
000FF5r 3               
000FF5r 3               	jmp scrly4
000FF5r 3               .endif
000FF5r 3               
000FF5r 3               ;------------------------------------------------------------------
000FF5r 3               ; Dig routine, conditional assembly depending on dflag
000FF5r 3               ;------------------------------------------------------------------
000FF5r 3               .if dflag
000FF5r 3               dig:
000FF5r 3               	and #3
000FF5r 3               	beq digr		; dig right
000FF5r 3               	cmp #1
000FF5r 3               	beq digl		; dig left
000FF5r 3               	cmp #2
000FF5r 3               	beq digd		; dig down
000FF5r 3               
000FF5r 3               ; Dig up.
000FF5r 3               
000FF5r 3               digu:				; dig up
000FF5r 3               	ldy #8
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	sec
000FF5r 3               	sbc #2
000FF5r 3               	sta dispy		; set y
000FF5r 3               
000FF5r 3               	iny
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	sta dispx		; set x
000FF5r 3               	jmp digv
000FF5r 3               
000FF5r 3               ; Dig down.
000FF5r 3               
000FF5r 3               digd:
000FF5r 3               	ldy #9
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	sta dispx		; set y
000FF5r 3               
000FF5r 3               	dey
000FF5r 3               	clc
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	adc #16
000FF5r 3               	sta dispy		; set y
000FF5r 3               	jmp digv
000FF5r 3               
000FF5r 3               ; Dig left.
000FF5r 3               
000FF5r 3               digl:
000FF5r 3               	ldy #8
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	sta dispy		; set y
000FF5r 3               
000FF5r 3               	iny
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	sec
000FF5r 3               	sbc #2			; x=x-2
000FF5r 3               	sta dispx		; set x
000FF5r 3               	jmp digh
000FF5r 3               
000FF5r 3               ; Dig right.
000FF5r 3               
000FF5r 3               digr:
000FF5r 3               	ldy #8
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	sta dispy		; set y
000FF5r 3               
000FF5r 3               	iny
000FF5r 3               	lda (z80_ix),y
000FF5r 3               	clc
000FF5r 3               	adc #16
000FF5r 3               	sta dispx		; set x+16
000FF5r 3               	jmp digh
000FF5r 3               
000FF5r 3               ; Vertical digging
000FF5r 3               
000FF5r 3               digv:
000FF5r 3               	jsr tstbl		; check blocktype in MAP
000FF5r 3               	jsr fdchk		; test if FODDER
000FF5r 3               
000FF5r 3               	clc
000FF5r 3               	lda dispx		; look 1 cell down
000FF5r 3               	adc #8
000FF5r 3               	sta dispx
000FF5r 3               	jsr tstbl		; check blocktype in MAP
000FF5r 3               	jsr fdchk
000FF5r 3               	lda dispx
000FF5r 3               	and #7
000FF5r 3               	bne :+
000FF5r 3               	rts
000FF5r 3               :
000FF5r 3               	clc
000FF5r 3               	lda dispx		; look 1 cell down
000FF5r 3               	adc #8
000FF5r 3               	sta dispx
000FF5r 3               	jsr tstbl		; check blocktype in MAP
000FF5r 3               	jmp fdchk
000FF5r 3               
000FF5r 3               ; Horizontal digging
000FF5r 3               
000FF5r 3               digh:
000FF5r 3               	jsr tstbl		; check blocktype in MAP
000FF5r 3               	jsr fdchk		; test if FODDER
000FF5r 3               
000FF5r 3               	clc
000FF5r 3               	lda dispy		; look 1 cell down
000FF5r 3               	adc #8
000FF5r 3               	sta dispy
000FF5r 3               	jsr tstbl		; check blocktype in MAP
000FF5r 3               	jsr fdchk
000FF5r 3               	lda dispy
000FF5r 3               	and #7
000FF5r 3               	bne :+
000FF5r 3               	rts
000FF5r 3               :
000FF5r 3               	clc
000FF5r 3               	lda dispy		; look 1 cell down
000FF5r 3               	adc #8
000FF5r 3               	sta dispy
000FF5r 3               	jsr tstbl		; check blocktype in MAP
000FF5r 3               	jmp fdchk
000FF5r 3               
000FF5r 3               digcnt:	.byte 0
000FF5r 3               
000FF5r 3               .endif
000FF5r 3               
000FF5r 3               ;------------------------------------------------------------------
000FF5r 3               ; Sprite table
000FF5r 3               ;------------------------------------------------------------------
000FF5r 3               
000FF5r 3               
000FF5r 3               ; ix+0  = type.
000FF5r 3               ; ix+1  = sprite image number.
000FF5r 3               ; ix+2  = frame.
000FF5r 3               ; ix+3  = y coord.
000FF5r 3               ; ix+4  = x coord.
000FF5r 3               
000FF5r 3               ; ix+5  = new type.
000FF5r 3               ; ix+6  = new image number.
000FF5r 3               ; ix+7  = new frame.
000FF5r 3               ; ix+8  = new y coord.
000FF5r 3               ; ix+9  = new x coord.
000FF5r 3               
000FF5r 3               ; ix+10 = direction.
000FF5r 3               ; ix+11 = parameter 1.
000FF5r 3               ; ix+12 = parameter 2.
000FF5r 3               ; ix+13 = jump pointer low.
000FF5r 3               ; ix+14 = jump pointer high.
000FF5r 3               ; ix+15 = data pointer low.
000FF5r 3               ; ix+16 = data pointer high.
000FF5r 3               
000FF5r 3               ; block NUMSPR * TABSIZ,255
000FF5r 3               
000FF5r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
000FF9r 3  FF FF FF FF  
000FFDr 3  FF FF FF FF  
0010C1r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0010C5r 3  FF FF FF 00  
0010C9r 3  C0 78 00 00  
0010D2r 3  07           roomtb:	.byte 7                      ; start room map offset.
0010D3r 3               
0010D3r 3               setfgcol:
0010D3r 3               setbgcol:
0010D3r 3  60           	rts
0010D4r 3               
0010D4r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0010D4r 3               ; if USER has an argument it will be passed in the accumulator.
0010D4r 3               
0010D4r 3               user:
0010D4r 3               	.include "user.inc"
0010D4r 4               music_init	= $a900
0010D4r 4               music_on	= $a903
0010D4r 4               music_off	= $a906
0010D4r 4               music_play	= $a909
0010D4r 4               
0010D4r 4               api:
0010D4r 4  C9 00        	cmp #0
0010D6r 4  D0 03        	bne api1
0010D8r 4  4C 00 A9     	jmp music_init
0010DBr 4               api1:
0010DBr 4  C9 01        	cmp #1
0010DDr 4  D0 03        	bne api2
0010DFr 4  4C 03 A9     	jmp music_on
0010E2r 4               api2:
0010E2r 4  C9 02        	cmp #2
0010E4r 4  D0 03        	bne api3
0010E6r 4  4C 06 A9     	jmp music_off
0010E9r 4               api3:
0010E9r 4  C9 03        	cmp #3
0010EBr 4  D0 03        	bne api_end
0010EDr 4  4C 09 A9     	jmp music_play
0010F0r 4               api_end:
0010F0r 4  60           	rts
0010F1r 4               
0010F1r 3               
0010F1r 3               ; Everything below here will be generated by the editors.
0010F1r 3               
0010F1r 3               
0010F1r 3  60                   rts
0010F2r 3               WINDOWTOP = 1
0010F2r 3               WINDOWLFT = 0
0010F2r 3               WINDOWHGT = 20
0010F2r 3               WINDOWWID = 22 ;a
0010F2r 3               MAPWID = 4
0010F2r 3  FF FF FF FF          .byte 255,255,255,255
0010F6r 3               mapdat:
0010F6r 3  FF 01 00 FF          .byte 255,1,0,255
0010FAr 3  FF FF FF FF          .byte 255,255,255,255
0010FEr 3  01           stmap:  .byte 1
0010FFr 3               
0010FFr 3               evnt00:
0010FFr 3  A9 01                lda #1
001101r 3  C5 rr                cmp scno
001103r 3  F0 03                beq *+5
001105r 3  4C rr rr             jmp a00230
001108r 3  A9 02                lda #2 	; INK
00110Ar 3  8D rr rr             sta fontcol
00110Dr 3  A9 00                lda #0		; AT
00110Fr 3  85 rr                sta chary
001111r 3  A9 08                lda #8
001113r 3  85 rr                sta charx
001115r 3  A9 13                lda #19  	; MESSAGE
001117r 3  20 rr rr             jsr dmsg
00111Ar 3  A9 07                lda #7 	; INK
00111Cr 3  8D rr rr             sta fontcol
00111Fr 3  A9 03                lda #3
001121r 3  85 rr                sta chary
001123r 3  A9 0A                lda #10
001125r 3  85 rr                sta charx
001127r 3  A9 0F                lda #15  	; MESSAGE
001129r 3  20 rr rr             jsr dmsg
00112Cr 3  A9 07                lda #7
00112Er 3  85 rr                sta chary
001130r 3  A9 0A                lda #10
001132r 3  85 rr                sta charx
001134r 3  A9 10                lda #16  	; MESSAGE
001136r 3  20 rr rr             jsr dmsg
001139r 3  A9 0B                lda #11
00113Br 3  85 rr                sta chary
00113Dr 3  A9 0A                lda #10
00113Fr 3  85 rr                sta charx
001141r 3  A9 11                lda #17  	; MESSAGE
001143r 3  20 rr rr             jsr dmsg
001146r 3  A9 0F                lda #15
001148r 3  85 rr                sta chary
00114Ar 3  A9 0A                lda #10
00114Cr 3  85 rr                sta charx
00114Er 3  A9 12                lda #18  	; MESSAGE
001150r 3  20 rr rr             jsr dmsg
001153r 3  A5 rr                lda joyval	; KEY
001155r 3  29 10                and #16
001157r 3  F0 03                beq :+
001159r 3  4C rr rr             jmp a00225
00115Cr 3               :
00115Cr 3  20 rr rr             jsr cls		; CLS
00115Fr 3  20 rr rr             jsr scrr	; SCREENRIGHT
001162r 3  A9 01                lda #1	; RESTART
001164r 3  85 rr                sta restfl
001166r 3  4C rr rr     a00225: jmp a00954
001169r 3  A9 00        a00230: lda #0
00116Br 3  C5 rr                cmp varb
00116Dr 3  F0 03                beq *+5
00116Fr 3  4C rr rr             jmp a00310
001172r 3  A9 00                lda #0
001174r 3  C5 rr                cmp vard
001176r 3  F0 03                beq *+5
001178r 3  4C rr rr             jmp a00310
00117Br 3  A9 00                lda #0		; ANIMATE
00117Dr 3  20 rr rr             jsr animsp
001180r 3  A9 01                lda #1
001182r 3  A0 07                ldy #7
001184r 3  D1 rr                cmp (z80_ix),y
001186r 3  90 03                bcc *+5
001188r 3  4C rr rr             jmp a00310
00118Br 3  A9 00                lda #0
00118Dr 3  A0 07                ldy #7
00118Fr 3  91 rr                sta (z80_ix),y
001191r 3  A5 rr        a00310: lda joyval	; KEY
001193r 3  29 08                and #8
001195r 3  F0 03                beq :+
001197r 3  4C rr rr             jmp a00468
00119Ar 3               :
00119Ar 3  A9 05                lda #DEADLY	; DEADLY
00119Cr 3  85 rr                sta z80_b
00119Er 3  20 rr rr             jsr tded
0011A1r 3  C5 rr                cmp z80_b
0011A3r 3  F0 03                beq :+
0011A5r 3  4C rr rr             jmp a00468
0011A8r 3               :
0011A8r 3  A9 30                lda #48
0011AAr 3  A0 08                ldy #8
0011ACr 3  D1 rr                cmp (z80_ix),y
0011AEr 3  90 03                bcc *+5
0011B0r 3  4C rr rr             jmp a00468
0011B3r 3  A9 01                lda #1
0011B5r 3  C5 rr                cmp vare
0011B7r 3  F0 03                beq *+5
0011B9r 3  4C rr rr             jmp a00468
0011BCr 3  A9 00                lda #0
0011BEr 3  C5 rr                cmp varl
0011C0r 3  F0 03                beq *+5
0011C2r 3  4C rr rr             jmp a00468
0011C5r 3  A9 14                lda #20		; BEEP
0011C7r 3  8D rr rr             sta sndtyp
0011CAr 3  A9 20                lda #32
0011CCr 3  85 rr                sta z80_c
0011CEr 3  A0 08                ldy #8
0011D0r 3  B1 rr                lda (z80_ix),y
0011D2r 3  38                   sec
0011D3r 3  E5 rr                sbc z80_c
0011D5r 3  A0 08                ldy #8
0011D7r 3  91 rr                sta (z80_ix),y
0011D9r 3  A9 0A                lda #10
0011DBr 3  85 rr                sta varl
0011DDr 3  A5 rr        a00468: lda joyval	; KEY
0011DFr 3  29 04                and #4
0011E1r 3  F0 03                beq :+
0011E3r 3  4C rr rr             jmp a00631
0011E6r 3               :
0011E6r 3  A9 05                lda #DEADLY	; DEADLY
0011E8r 3  85 rr                sta z80_b
0011EAr 3  20 rr rr             jsr tded
0011EDr 3  C5 rr                cmp z80_b
0011EFr 3  F0 03                beq :+
0011F1r 3  4C rr rr             jmp a00631
0011F4r 3               :
0011F4r 3  A9 78                lda #120
0011F6r 3  A0 08                ldy #8
0011F8r 3  D1 rr                cmp (z80_ix),y
0011FAr 3  90 03                bcc *+5
0011FCr 3  4C rr rr             jmp a00544
0011FFr 3  4C rr rr             jmp a00631
001202r 3  A9 01        a00544: lda #1
001204r 3  C5 rr                cmp vare
001206r 3  F0 03                beq *+5
001208r 3  4C rr rr             jmp a00631
00120Br 3  A9 00                lda #0
00120Dr 3  C5 rr                cmp varl
00120Fr 3  F0 03                beq *+5
001211r 3  4C rr rr             jmp a00631
001214r 3  A9 14                lda #20		; BEEP
001216r 3  8D rr rr             sta sndtyp
001219r 3  A9 20                lda #32
00121Br 3  85 rr                sta z80_c
00121Dr 3  A0 08                ldy #8
00121Fr 3  B1 rr                lda (z80_ix),y
001221r 3  18                   clc
001222r 3  65 rr                adc z80_c
001224r 3  A0 08                ldy #8
001226r 3  91 rr                sta (z80_ix),y
001228r 3  A9 0A                lda #10
00122Ar 3  85 rr                sta varl
00122Cr 3  A5 rr        a00631: lda joyval	; KEY
00122Er 3  29 01                and #1
001230r 3  F0 03                beq :+
001232r 3  4C rr rr             jmp a00727
001235r 3               :
001235r 3  A9 90                lda #144
001237r 3  A0 09                ldy #9
001239r 3  D1 rr                cmp (z80_ix),y
00123Br 3  90 02                bcc *+4
00123Dr 3  D0 03                bne *+5
00123Fr 3  4C rr rr             jmp a00727
001242r 3  20 rr rr             jsr cangr	; CANGORIGHT
001245r 3  F0 03                beq :+
001247r 3  4C rr rr             jmp a00727
00124Ar 3               :
00124Ar 3  A9 01                lda #1
00124Cr 3  85 rr                sta varh
00124Er 3  A0 09                ldy #9 		; SPRITERIGHT
001250r 3  B1 rr                lda (z80_ix),y
001252r 3  18                   clc
001253r 3  69 02                adc #2
001255r 3  91 rr                sta (z80_ix),y
001257r 3  A5 rr        a00727: lda joyval	; KEY
001259r 3  29 02                and #2
00125Br 3  F0 03                beq :+
00125Dr 3  4C rr rr             jmp a00819
001260r 3               :
001260r 3  A9 10                lda #16
001262r 3  A0 09                ldy #9
001264r 3  D1 rr                cmp (z80_ix),y
001266r 3  90 03                bcc *+5
001268r 3  4C rr rr             jmp a00819
00126Br 3  20 rr rr             jsr cangl	; CANGOLEFT
00126Er 3  F0 03                beq :+
001270r 3  4C rr rr             jmp a00819
001273r 3               :
001273r 3  A9 00                lda #0
001275r 3  85 rr                sta varh
001277r 3  A0 09                ldy #9 		; SPRITELEFT
001279r 3  B1 rr                lda (z80_ix),y
00127Br 3  38                   sec
00127Cr 3  E9 02                sbc #2
00127Er 3  91 rr                sta (z80_ix),y
001280r 3  A5 rr        a00819: lda joyval	; KEY
001282r 3  29 10                and #16
001284r 3  F0 03                beq :+
001286r 3  4C rr rr             jmp a00894
001289r 3               :
001289r 3  A9 00                lda #0
00128Br 3  C5 rr                cmp varh
00128Dr 3  F0 03                beq *+5
00128Fr 3  4C rr rr             jmp a00873
001292r 3  A9 02                lda #2
001294r 3  A0 07                ldy #7
001296r 3  91 rr                sta (z80_ix),y
001298r 3  4C rr rr             jmp a00886
00129Br 3  A9 03        a00873: lda #3
00129Dr 3  A0 07                ldy #7
00129Fr 3  91 rr                sta (z80_ix),y
0012A1r 3  A9 01        a00886: lda #1
0012A3r 3  85 rr                sta varb
0012A5r 3  A0 08        a00894: ldy #8
0012A7r 3  B1 rr                lda (z80_ix),y
0012A9r 3  85 rr                sta varp
0012ABr 3  A0 09                ldy #9
0012ADr 3  B1 rr                lda (z80_ix),y
0012AFr 3  85 rr                sta varq
0012B1r 3  A9 00                lda #0
0012B3r 3  C5 rr                cmp numlif
0012B5r 3  F0 03                beq *+5
0012B7r 3  4C rr rr             jmp a00954
0012BAr 3  A9 01                lda #1 		; KILL
0012BCr 3  85 rr                sta deadf
0012BEr 3  60                   rts		; EXIT
0012BFr 3  60           a00954: rts
0012C0r 3               evnt01:
0012C0r 3  A9 00                lda #0
0012C2r 3  C5 rr                cmp vard
0012C4r 3  F0 03                beq *+5
0012C6r 3  4C rr rr             jmp b00030
0012C9r 3  A9 00                lda #0		; ANIMATE
0012CBr 3  20 rr rr             jsr animsp
0012CEr 3  20 rr rr     b00030: jsr cangr	; CANGORIGHT
0012D1r 3  F0 03                beq :+
0012D3r 3  4C rr rr             jmp b00077
0012D6r 3               :
0012D6r 3  A0 09                ldy #9 		; SPRITERIGHT
0012D8r 3  B1 rr                lda (z80_ix),y
0012DAr 3  18                   clc
0012DBr 3  69 02                adc #2
0012DDr 3  91 rr                sta (z80_ix),y
0012DFr 3  4C rr rr             jmp b00149
0012E2r 3  A0 0C        b00077: ldy #12
0012E4r 3  B1 rr                lda (z80_ix),y
0012E6r 3  85 rr                sta z80_c
0012E8r 3  A5 rr                lda varr
0012EAr 3  38                   sec
0012EBr 3  E5 rr                sbc z80_c
0012EDr 3  85 rr                sta varr
0012EFr 3  A5 rr                lda varo
0012F1r 3  38                   sec
0012F2r 3  E9 01                sbc #1
0012F4r 3  85 rr                sta varo
0012F6r 3  A9 FF                lda #255	; REMOVE
0012F8r 3  A0 05                ldy #5
0012FAr 3  91 rr                sta (z80_ix),y
0012FCr 3  A9 0A                lda #10		; BEEP
0012FEr 3  8D rr rr             sta sndtyp
001301r 3  A9 02        b00149: lda #2 	; COLLISION
001303r 3  85 rr                sta z80_b
001305r 3  20 rr rr             jsr sktyp
001308r 3  B0 03                bcs :+
00130Ar 3  4C rr rr             jmp b00554
00130Dr 3               :
00130Dr 3  A0 0C                ldy #12
00130Fr 3  B1 rr                lda (z80_ix),y
001311r 3  85 rr                sta z80_c
001313r 3  A5 rr                lda varr
001315r 3  38                   sec
001316r 3  E5 rr                sbc z80_c
001318r 3  85 rr                sta varr
00131Ar 3  A5 rr                lda varo
00131Cr 3  38                   sec
00131Dr 3  E9 01                sbc #1
00131Fr 3  85 rr                sta varo
001321r 3  A9 3C                lda #60		; BEEP
001323r 3  8D rr rr             sta sndtyp
001326r 3  A9 03                lda #3
001328r 3  A0 06                ldy #6
00132Ar 3  D1 rr                cmp (z80_ix),y
00132Cr 3  F0 03                beq *+5
00132Er 3  4C rr rr             jmp b00276
001331r 3  A9 03                lda #<3		; SCORE
001333r 3  85 rr                sta z80_l
001335r 3  A9 00                lda #>3
001337r 3  85 rr                sta z80_h
001339r 3  20 rr rr             jsr addsc
00133Cr 3  A9 05        b00276: lda #5
00133Er 3  A0 06                ldy #6
001340r 3  D1 rr                cmp (z80_ix),y
001342r 3  F0 03                beq *+5
001344r 3  4C rr rr             jmp b00322
001347r 3  A9 04                lda #<4		; SCORE
001349r 3  85 rr                sta z80_l
00134Br 3  A9 00                lda #>4
00134Dr 3  85 rr                sta z80_h
00134Fr 3  20 rr rr             jsr addsc
001352r 3  A9 07        b00322: lda #7
001354r 3  A0 06                ldy #6
001356r 3  D1 rr                cmp (z80_ix),y
001358r 3  F0 03                beq *+5
00135Ar 3  4C rr rr             jmp b00368
00135Dr 3  A9 05                lda #<5		; SCORE
00135Fr 3  85 rr                sta z80_l
001361r 3  A9 00                lda #>5
001363r 3  85 rr                sta z80_h
001365r 3  20 rr rr             jsr addsc
001368r 3  A9 09        b00368: lda #9
00136Ar 3  A0 06                ldy #6
00136Cr 3  D1 rr                cmp (z80_ix),y
00136Er 3  F0 03                beq *+5
001370r 3  4C rr rr             jmp b00414
001373r 3  A9 02                lda #<2		; SCORE
001375r 3  85 rr                sta z80_l
001377r 3  A9 00                lda #>2
001379r 3  85 rr                sta z80_h
00137Br 3  20 rr rr             jsr addsc
00137Er 3  A9 0B        b00414: lda #11
001380r 3  A0 06                ldy #6
001382r 3  D1 rr                cmp (z80_ix),y
001384r 3  F0 03                beq *+5
001386r 3  4C rr rr             jmp b00460
001389r 3  A9 01                lda #<1		; SCORE
00138Br 3  85 rr                sta z80_l
00138Dr 3  A9 00                lda #>1
00138Fr 3  85 rr                sta z80_h
001391r 3  20 rr rr             jsr addsc
001394r 3  A9 07        b00460: lda #7 	; INK
001396r 3  8D rr rr             sta fontcol
001399r 3  A9 15                lda #21
00139Br 3  85 rr                sta chary
00139Dr 3  A9 07                lda #7
00139Fr 3  85 rr                sta charx
0013A1r 3  A0 00                ldy #0		; SHOWSCORE
0013A3r 3  A9 06                lda #6
0013A5r 3  85 rr                sta z80_b
0013A7r 3  20 rr rr             jsr dscor
0013AAr 3  A9 FF                lda #255	; REMOVE
0013ACr 3  A0 05                ldy #5
0013AEr 3  91 rr                sta (z80_ix),y
0013B0r 3  A9 00                lda #0
0013B2r 3  85 rr                sta varn
0013B4r 3  A9 04                lda #4	; SPAWN
0013B6r 3  85 rr                sta z80_c
0013B8r 3  A9 0D                lda #13
0013BAr 3  85 rr                sta z80_b
0013BCr 3  20 rr rr             jsr spawn
0013BFr 3  A9 00        b00554: lda #0 	; COLLISION
0013C1r 3  85 rr                sta z80_b
0013C3r 3  20 rr rr             jsr sktyp
0013C6r 3  B0 03                bcs :+
0013C8r 3  4C rr rr             jmp b00646
0013CBr 3               :
0013CBr 3  A9 80                lda #128
0013CDr 3  85 rr                sta z80_c
0013CFr 3  A5 rr                lda varr
0013D1r 3  38                   sec
0013D2r 3  E5 rr                sbc z80_c
0013D4r 3  85 rr                sta varr
0013D6r 3  A5 rr                lda varo
0013D8r 3  38                   sec
0013D9r 3  E9 01                sbc #1
0013DBr 3  85 rr                sta varo
0013DDr 3  A5 rr                lda numlif
0013DFr 3  38                   sec
0013E0r 3  E9 01                sbc #1
0013E2r 3  85 rr                sta numlif
0013E4r 3  A9 01                lda #1 		; KILL
0013E6r 3  85 rr                sta deadf
0013E8r 3  60           b00646: rts
0013E9r 3               evnt02:
0013E9r 3  A9 00                lda #0		; ANIMATE
0013EBr 3  20 rr rr             jsr animsp
0013EEr 3  A9 04                lda #4
0013F0r 3  A0 07                ldy #7
0013F2r 3  D1 rr                cmp (z80_ix),y
0013F4r 3  F0 03                beq *+5
0013F6r 3  4C rr rr             jmp c00059
0013F9r 3  A9 FF                lda #255	; REMOVE
0013FBr 3  A0 05                ldy #5
0013FDr 3  91 rr                sta (z80_ix),y
0013FFr 3  A9 00                lda #0
001401r 3  85 rr                sta varb
001403r 3  A9 08        c00059: lda #8
001405r 3  A0 07                ldy #7
001407r 3  D1 rr                cmp (z80_ix),y
001409r 3  F0 03                beq *+5
00140Br 3  4C rr rr             jmp c00105
00140Er 3  A9 FF                lda #255	; REMOVE
001410r 3  A0 05                ldy #5
001412r 3  91 rr                sta (z80_ix),y
001414r 3  A9 00                lda #0
001416r 3  85 rr                sta varb
001418r 3  A5 rr        c00105: lda ogptr	; ENDSPRITE
00141Ar 3  85 rr                sta z80_x
00141Cr 3  A5 rr                lda ogptr+1
00141Er 3  85 rr                sta z80_i
001420r 3  60                   rts
001421r 3               evnt03:
001421r 3  A9 00                lda #0
001423r 3  C5 rr                cmp vard
001425r 3  F0 03                beq *+5
001427r 3  4C rr rr             jmp d00030
00142Ar 3  A9 00                lda #0		; ANIMATE
00142Cr 3  20 rr rr             jsr animsp
00142Fr 3  20 rr rr     d00030: jsr cangl	; CANGOLEFT
001432r 3  F0 03                beq :+
001434r 3  4C rr rr             jmp d00176
001437r 3               :
001437r 3  A9 00                lda #0
001439r 3  A0 09                ldy #9
00143Br 3  D1 rr                cmp (z80_ix),y
00143Dr 3  90 03                bcc *+5
00143Fr 3  4C rr rr             jmp d00099
001442r 3  A0 09                ldy #9 		; SPRITELEFT
001444r 3  B1 rr                lda (z80_ix),y
001446r 3  38                   sec
001447r 3  E9 02                sbc #2
001449r 3  91 rr                sta (z80_ix),y
00144Br 3  4C rr rr             jmp d00171
00144Er 3  A0 0C        d00099: ldy #12
001450r 3  B1 rr                lda (z80_ix),y
001452r 3  85 rr                sta z80_c
001454r 3  A5 rr                lda varr
001456r 3  38                   sec
001457r 3  E5 rr                sbc z80_c
001459r 3  85 rr                sta varr
00145Br 3  A5 rr                lda varo
00145Dr 3  38                   sec
00145Er 3  E9 01                sbc #1
001460r 3  85 rr                sta varo
001462r 3  A9 FF                lda #255	; REMOVE
001464r 3  A0 05                ldy #5
001466r 3  91 rr                sta (z80_ix),y
001468r 3  A9 0A                lda #10		; BEEP
00146Ar 3  8D rr rr             sta sndtyp
00146Dr 3  4C rr rr     d00171: jmp d00248
001470r 3  A0 0C        d00176: ldy #12
001472r 3  B1 rr                lda (z80_ix),y
001474r 3  85 rr                sta z80_c
001476r 3  A5 rr                lda varr
001478r 3  38                   sec
001479r 3  E5 rr                sbc z80_c
00147Br 3  85 rr                sta varr
00147Dr 3  A5 rr                lda varo
00147Fr 3  38                   sec
001480r 3  E9 01                sbc #1
001482r 3  85 rr                sta varo
001484r 3  A9 FF                lda #255	; REMOVE
001486r 3  A0 05                ldy #5
001488r 3  91 rr                sta (z80_ix),y
00148Ar 3  A9 0A                lda #10		; BEEP
00148Cr 3  8D rr rr             sta sndtyp
00148Fr 3  A9 02        d00248: lda #2 	; COLLISION
001491r 3  85 rr                sta z80_b
001493r 3  20 rr rr             jsr sktyp
001496r 3  B0 03                bcs :+
001498r 3  4C rr rr             jmp d00652
00149Br 3               :
00149Br 3  A0 0C                ldy #12
00149Dr 3  B1 rr                lda (z80_ix),y
00149Fr 3  85 rr                sta z80_c
0014A1r 3  A5 rr                lda varr
0014A3r 3  38                   sec
0014A4r 3  E5 rr                sbc z80_c
0014A6r 3  85 rr                sta varr
0014A8r 3  A5 rr                lda varo
0014AAr 3  38                   sec
0014ABr 3  E9 01                sbc #1
0014ADr 3  85 rr                sta varo
0014AFr 3  A9 3C                lda #60		; BEEP
0014B1r 3  8D rr rr             sta sndtyp
0014B4r 3  A9 02                lda #2
0014B6r 3  A0 06                ldy #6
0014B8r 3  D1 rr                cmp (z80_ix),y
0014BAr 3  F0 03                beq *+5
0014BCr 3  4C rr rr             jmp d00375
0014BFr 3  A9 03                lda #<3		; SCORE
0014C1r 3  85 rr                sta z80_l
0014C3r 3  A9 00                lda #>3
0014C5r 3  85 rr                sta z80_h
0014C7r 3  20 rr rr             jsr addsc
0014CAr 3  A9 04        d00375: lda #4
0014CCr 3  A0 06                ldy #6
0014CEr 3  D1 rr                cmp (z80_ix),y
0014D0r 3  F0 03                beq *+5
0014D2r 3  4C rr rr             jmp d00421
0014D5r 3  A9 04                lda #<4		; SCORE
0014D7r 3  85 rr                sta z80_l
0014D9r 3  A9 00                lda #>4
0014DBr 3  85 rr                sta z80_h
0014DDr 3  20 rr rr             jsr addsc
0014E0r 3  A9 06        d00421: lda #6
0014E2r 3  A0 06                ldy #6
0014E4r 3  D1 rr                cmp (z80_ix),y
0014E6r 3  F0 03                beq *+5
0014E8r 3  4C rr rr             jmp d00466
0014EBr 3  A9 05                lda #<5		; SCORE
0014EDr 3  85 rr                sta z80_l
0014EFr 3  A9 00                lda #>5
0014F1r 3  85 rr                sta z80_h
0014F3r 3  20 rr rr             jsr addsc
0014F6r 3  A9 08        d00466: lda #8
0014F8r 3  A0 06                ldy #6
0014FAr 3  D1 rr                cmp (z80_ix),y
0014FCr 3  F0 03                beq *+5
0014FEr 3  4C rr rr             jmp d00512
001501r 3  A9 02                lda #<2		; SCORE
001503r 3  85 rr                sta z80_l
001505r 3  A9 00                lda #>2
001507r 3  85 rr                sta z80_h
001509r 3  20 rr rr             jsr addsc
00150Cr 3  A9 0A        d00512: lda #10
00150Er 3  A0 06                ldy #6
001510r 3  D1 rr                cmp (z80_ix),y
001512r 3  F0 03                beq *+5
001514r 3  4C rr rr             jmp d00558
001517r 3  A9 01                lda #<1		; SCORE
001519r 3  85 rr                sta z80_l
00151Br 3  A9 00                lda #>1
00151Dr 3  85 rr                sta z80_h
00151Fr 3  20 rr rr             jsr addsc
001522r 3  A9 07        d00558: lda #7 	; INK
001524r 3  8D rr rr             sta fontcol
001527r 3  A9 15                lda #21
001529r 3  85 rr                sta chary
00152Br 3  A9 07                lda #7
00152Dr 3  85 rr                sta charx
00152Fr 3  A0 00                ldy #0		; SHOWSCORE
001531r 3  A9 06                lda #6
001533r 3  85 rr                sta z80_b
001535r 3  20 rr rr             jsr dscor
001538r 3  A9 FF                lda #255	; REMOVE
00153Ar 3  A0 05                ldy #5
00153Cr 3  91 rr                sta (z80_ix),y
00153Er 3  A9 00                lda #0
001540r 3  85 rr                sta varn
001542r 3  A9 04                lda #4	; SPAWN
001544r 3  85 rr                sta z80_c
001546r 3  A9 0D                lda #13
001548r 3  85 rr                sta z80_b
00154Ar 3  20 rr rr             jsr spawn
00154Dr 3  A9 00        d00652: lda #0 	; COLLISION
00154Fr 3  85 rr                sta z80_b
001551r 3  20 rr rr             jsr sktyp
001554r 3  B0 03                bcs :+
001556r 3  4C rr rr             jmp d00744
001559r 3               :
001559r 3  A9 40                lda #64
00155Br 3  85 rr                sta z80_c
00155Dr 3  A5 rr                lda varr
00155Fr 3  38                   sec
001560r 3  E5 rr                sbc z80_c
001562r 3  85 rr                sta varr
001564r 3  A5 rr                lda varo
001566r 3  38                   sec
001567r 3  E9 01                sbc #1
001569r 3  85 rr                sta varo
00156Br 3  A5 rr                lda numlif
00156Dr 3  38                   sec
00156Er 3  E9 01                sbc #1
001570r 3  85 rr                sta numlif
001572r 3  A9 01                lda #1 		; KILL
001574r 3  85 rr                sta deadf
001576r 3  60           d00744: rts
001577r 3               evnt04:
001577r 3  A9 00                lda #0		; ANIMATE
001579r 3  20 rr rr             jsr animsp
00157Cr 3  A9 0B                lda #11
00157Er 3  C5 rr                cmp varn
001580r 3  F0 03                beq *+5
001582r 3  4C rr rr             jmp e00046
001585r 3  A9 FF                lda #255	; REMOVE
001587r 3  A0 05                ldy #5
001589r 3  91 rr                sta (z80_ix),y
00158Br 3  60           e00046: rts
00158Cr 3               evnt05:
00158Cr 3  A9 01                lda #1
00158Er 3  C5 rr                cmp vara
001590r 3  F0 03                beq *+5
001592r 3  4C rr rr             jmp f00053
001595r 3  A9 32                lda #50
001597r 3  85 rr                sta z80_d	; GETRANDOM
001599r 3  20 rr rr             jsr random
00159Cr 3  85 rr                sta z80_h
00159Er 3  20 rr rr             jsr imul
0015A1r 3  A5 rr                lda z80_h
0015A3r 3  85 rr                sta varrnd
0015A5r 3  A9 02        f00053: lda #2
0015A7r 3  C5 rr                cmp vara
0015A9r 3  F0 03                beq *+5
0015ABr 3  4C rr rr             jmp f00104
0015AEr 3  A9 1E                lda #30
0015B0r 3  85 rr                sta z80_d	; GETRANDOM
0015B2r 3  20 rr rr             jsr random
0015B5r 3  85 rr                sta z80_h
0015B7r 3  20 rr rr             jsr imul
0015BAr 3  A5 rr                lda z80_h
0015BCr 3  85 rr                sta varrnd
0015BEr 3  A9 03        f00104: lda #3
0015C0r 3  C5 rr                cmp vara
0015C2r 3  F0 03                beq *+5
0015C4r 3  4C rr rr             jmp f00155
0015C7r 3  A9 0A                lda #10
0015C9r 3  85 rr                sta z80_d	; GETRANDOM
0015CBr 3  20 rr rr             jsr random
0015CEr 3  85 rr                sta z80_h
0015D0r 3  20 rr rr             jsr imul
0015D3r 3  A5 rr                lda z80_h
0015D5r 3  85 rr                sta varrnd
0015D7r 3  A9 05        f00155: lda #5
0015D9r 3  C5 rr                cmp varrnd
0015DBr 3  F0 03                beq *+5
0015DDr 3  4C rr rr             jmp f00804
0015E0r 3  A5 rr                lda varo
0015E2r 3  C5 rr                cmp varm
0015E4r 3  90 03                bcc *+5
0015E6r 3  4C rr rr             jmp f00804
0015E9r 3  A5 rr                lda clock	; RANDOMIZE
0015EBr 3  85 rr                sta seed
0015EDr 3  A9 04                lda #4
0015EFr 3  85 rr                sta z80_d	; GETRANDOM
0015F1r 3  20 rr rr             jsr random
0015F4r 3  85 rr                sta z80_h
0015F6r 3  20 rr rr             jsr imul
0015F9r 3  A5 rr                lda z80_h
0015FBr 3  85 rr                sta varrnd
0015FDr 3  A5 rr                lda varr
0015FFr 3  85 rr                sta vari
001601r 3  A9 03                lda #3
001603r 3  C5 rr                cmp varrnd
001605r 3  F0 03                beq *+5
001607r 3  4C rr rr             jmp f00283
00160Ar 3  A9 3F                lda #63
00160Cr 3  C5 rr                cmp vari
00160Er 3  90 03                bcc *+5
001610r 3  4C rr rr             jmp f00283
001613r 3  60                   rts		; EXIT
001614r 3  A5 rr        f00283: lda vari
001616r 3  0A                   asl a
001617r 3  0A                   asl a
001618r 3  85 rr                sta vari
00161Ar 3  A9 02                lda #2
00161Cr 3  C5 rr                cmp varrnd
00161Er 3  F0 03                beq *+5
001620r 3  4C rr rr             jmp f00337
001623r 3  A9 3F                lda #63
001625r 3  C5 rr                cmp vari
001627r 3  90 03                bcc *+5
001629r 3  4C rr rr             jmp f00337
00162Cr 3  60                   rts		; EXIT
00162Dr 3  A5 rr        f00337: lda vari
00162Fr 3  0A                   asl a
001630r 3  0A                   asl a
001631r 3  85 rr                sta vari
001633r 3  A9 01                lda #1
001635r 3  C5 rr                cmp varrnd
001637r 3  F0 03                beq *+5
001639r 3  4C rr rr             jmp f00392
00163Cr 3  A9 3F                lda #63
00163Er 3  C5 rr                cmp vari
001640r 3  90 03                bcc *+5
001642r 3  4C rr rr             jmp f00392
001645r 3  60                   rts		; EXIT
001646r 3  A5 rr        f00392: lda vari
001648r 3  0A                   asl a
001649r 3  0A                   asl a
00164Ar 3  85 rr                sta vari
00164Cr 3  A9 00                lda #0
00164Er 3  C5 rr                cmp varrnd
001650r 3  F0 03                beq *+5
001652r 3  4C rr rr             jmp f00447
001655r 3  A9 3F                lda #63
001657r 3  C5 rr                cmp vari
001659r 3  90 03                bcc *+5
00165Br 3  4C rr rr             jmp f00447
00165Er 3  60                   rts		; EXIT
00165Fr 3  A5 rr        f00447: lda varo
001661r 3  18                   clc
001662r 3  69 01                adc #1
001664r 3  85 rr                sta varo
001666r 3  A5 rr                lda varrnd
001668r 3  0A                   asl a
001669r 3  0A                   asl a
00166Ar 3  0A                   asl a
00166Br 3  0A                   asl a
00166Cr 3  0A                   asl a
00166Dr 3  85 rr                sta varrnd
00166Fr 3  A9 30                lda #48
001671r 3  85 rr                sta z80_c
001673r 3  A5 rr                lda varrnd
001675r 3  18                   clc
001676r 3  65 rr                adc z80_c
001678r 3  85 rr                sta varrnd
00167Ar 3  A5 rr                lda varrnd
00167Cr 3  A0 08                ldy #8
00167Er 3  91 rr                sta (z80_ix),y
001680r 3  A9 02                lda #2
001682r 3  85 rr                sta z80_d	; GETRANDOM
001684r 3  20 rr rr             jsr random
001687r 3  85 rr                sta z80_h
001689r 3  20 rr rr             jsr imul
00168Cr 3  A5 rr                lda z80_h
00168Er 3  85 rr                sta varrnd
001690r 3  A9 00                lda #0
001692r 3  C5 rr                cmp varrnd
001694r 3  F0 03                beq *+5
001696r 3  4C rr rr             jmp f00621
001699r 3  A9 00                lda #0
00169Br 3  A0 09                ldy #9
00169Dr 3  91 rr                sta (z80_ix),y
00169Fr 3  A9 01                lda #1	; SPAWN
0016A1r 3  85 rr                sta z80_c
0016A3r 3  A9 05                lda #5
0016A5r 3  85 rr                sta z80_b
0016A7r 3  20 rr rr             jsr spawn
0016AAr 3  4C rr rr             jmp f00658
0016ADr 3  A9 A0        f00621: lda #160
0016AFr 3  A0 09                ldy #9
0016B1r 3  91 rr                sta (z80_ix),y
0016B3r 3  A9 03                lda #3	; SPAWN
0016B5r 3  85 rr                sta z80_c
0016B7r 3  A9 05                lda #5
0016B9r 3  85 rr                sta z80_b
0016BBr 3  20 rr rr             jsr spawn
0016BEr 3  A5 rr        f00658: lda spptr	; SPAWNED
0016C0r 3  85 rr                sta z80_x
0016C2r 3  A5 rr                lda spptr+1
0016C4r 3  85 rr                sta z80_i
0016C6r 3  A9 04                lda #4
0016C8r 3  85 rr                sta z80_d	; GETRANDOM
0016CAr 3  20 rr rr             jsr random
0016CDr 3  85 rr                sta z80_h
0016CFr 3  20 rr rr             jsr imul
0016D2r 3  A5 rr                lda z80_h
0016D4r 3  85 rr                sta varrnd
0016D6r 3  A5 rr                lda varrnd
0016D8r 3  0A                   asl a
0016D9r 3  85 rr                sta varrnd
0016DBr 3  A9 02                lda #2
0016DDr 3  85 rr                sta z80_c
0016DFr 3  A5 rr                lda varrnd
0016E1r 3  18                   clc
0016E2r 3  65 rr                adc z80_c
0016E4r 3  85 rr                sta varrnd
0016E6r 3  A9 00                lda #0
0016E8r 3  A0 09                ldy #9
0016EAr 3  D1 rr                cmp (z80_ix),y
0016ECr 3  F0 03                beq *+5
0016EEr 3  4C rr rr             jmp f00789
0016F1r 3  A5 rr                lda varrnd
0016F3r 3  18                   clc
0016F4r 3  69 01                adc #1
0016F6r 3  85 rr                sta varrnd
0016F8r 3  A5 rr        f00789: lda varrnd
0016FAr 3  A0 06                ldy #6
0016FCr 3  91 rr                sta (z80_ix),y
0016FEr 3  60           f00804: rts
0016FFr 3               evnt06:
0016FFr 3  A9 00                lda #0
001701r 3  C5 rr                cmp vard
001703r 3  F0 03                beq *+5
001705r 3  4C rr rr             jmp g00030
001708r 3  A9 00                lda #0		; ANIMATE
00170Ar 3  20 rr rr             jsr animsp
00170Dr 3  60           g00030: rts
00170Er 3               evnt07:
00170Er 3  60                   rts
00170Fr 3               evnt08:
00170Fr 3  60                   rts
001710r 3               evnt09:
001710r 3  A9 00                lda #0
001712r 3  A0 05                ldy #5
001714r 3  D1 rr                cmp (z80_ix),y
001716r 3  F0 03                beq *+5
001718r 3  4C rr rr             jmp j00040
00171Br 3  A9 01                lda #1
00171Dr 3  85 rr                sta varh
00171Fr 3  A9 00                lda #0
001721r 3  85 rr                sta varb
001723r 3  A9 01        j00040: lda #1
001725r 3  A0 05                ldy #5
001727r 3  D1 rr                cmp (z80_ix),y
001729r 3  F0 03                beq *+5
00172Br 3  4C rr rr             jmp j00304
00172Er 3  A9 30                lda #48
001730r 3  A0 08                ldy #8
001732r 3  D1 rr                cmp (z80_ix),y
001734r 3  F0 03                beq *+5
001736r 3  4C rr rr             jmp j00122
001739r 3  A9 02                lda #2
00173Br 3  A0 0C                ldy #12
00173Dr 3  91 rr                sta (z80_ix),y
00173Fr 3  A9 02                lda #2
001741r 3  85 rr                sta z80_c
001743r 3  A5 rr                lda varr
001745r 3  18                   clc
001746r 3  65 rr                adc z80_c
001748r 3  85 rr                sta varr
00174Ar 3  A9 50        j00122: lda #80
00174Cr 3  A0 08                ldy #8
00174Er 3  D1 rr                cmp (z80_ix),y
001750r 3  F0 03                beq *+5
001752r 3  4C rr rr             jmp j00182
001755r 3  A9 08                lda #8
001757r 3  A0 0C                ldy #12
001759r 3  91 rr                sta (z80_ix),y
00175Br 3  A9 08                lda #8
00175Dr 3  85 rr                sta z80_c
00175Fr 3  A5 rr                lda varr
001761r 3  18                   clc
001762r 3  65 rr                adc z80_c
001764r 3  85 rr                sta varr
001766r 3  A9 70        j00182: lda #112
001768r 3  A0 08                ldy #8
00176Ar 3  D1 rr                cmp (z80_ix),y
00176Cr 3  F0 03                beq *+5
00176Er 3  4C rr rr             jmp j00242
001771r 3  A9 20                lda #32
001773r 3  A0 0C                ldy #12
001775r 3  91 rr                sta (z80_ix),y
001777r 3  A9 20                lda #32
001779r 3  85 rr                sta z80_c
00177Br 3  A5 rr                lda varr
00177Dr 3  18                   clc
00177Er 3  65 rr                adc z80_c
001780r 3  85 rr                sta varr
001782r 3  A9 90        j00242: lda #144
001784r 3  A0 08                ldy #8
001786r 3  D1 rr                cmp (z80_ix),y
001788r 3  F0 03                beq *+5
00178Ar 3  4C rr rr             jmp j00304
00178Dr 3  A9 80                lda #128
00178Fr 3  A0 0C                ldy #12
001791r 3  91 rr                sta (z80_ix),y
001793r 3  A9 80                lda #128
001795r 3  85 rr                sta z80_c
001797r 3  A5 rr                lda varr
001799r 3  18                   clc
00179Ar 3  65 rr                adc z80_c
00179Cr 3  85 rr                sta varr
00179Er 3  A9 03        j00304: lda #3
0017A0r 3  A0 05                ldy #5
0017A2r 3  D1 rr                cmp (z80_ix),y
0017A4r 3  F0 03                beq *+5
0017A6r 3  4C rr rr             jmp j00558
0017A9r 3  A9 30                lda #48
0017ABr 3  A0 08                ldy #8
0017ADr 3  D1 rr                cmp (z80_ix),y
0017AFr 3  F0 03                beq *+5
0017B1r 3  4C rr rr             jmp j00377
0017B4r 3  A9 01                lda #1
0017B6r 3  A0 0C                ldy #12
0017B8r 3  91 rr                sta (z80_ix),y
0017BAr 3  A5 rr                lda varr
0017BCr 3  18                   clc
0017BDr 3  69 01                adc #1
0017BFr 3  85 rr                sta varr
0017C1r 3  A9 50        j00377: lda #80
0017C3r 3  A0 08                ldy #8
0017C5r 3  D1 rr                cmp (z80_ix),y
0017C7r 3  F0 03                beq *+5
0017C9r 3  4C rr rr             jmp j00437
0017CCr 3  A9 04                lda #4
0017CEr 3  A0 0C                ldy #12
0017D0r 3  91 rr                sta (z80_ix),y
0017D2r 3  A9 04                lda #4
0017D4r 3  85 rr                sta z80_c
0017D6r 3  A5 rr                lda varr
0017D8r 3  18                   clc
0017D9r 3  65 rr                adc z80_c
0017DBr 3  85 rr                sta varr
0017DDr 3  A9 70        j00437: lda #112
0017DFr 3  A0 08                ldy #8
0017E1r 3  D1 rr                cmp (z80_ix),y
0017E3r 3  F0 03                beq *+5
0017E5r 3  4C rr rr             jmp j00497
0017E8r 3  A9 10                lda #16
0017EAr 3  A0 0C                ldy #12
0017ECr 3  91 rr                sta (z80_ix),y
0017EEr 3  A9 10                lda #16
0017F0r 3  85 rr                sta z80_c
0017F2r 3  A5 rr                lda varr
0017F4r 3  18                   clc
0017F5r 3  65 rr                adc z80_c
0017F7r 3  85 rr                sta varr
0017F9r 3  A9 90        j00497: lda #144
0017FBr 3  A0 08                ldy #8
0017FDr 3  D1 rr                cmp (z80_ix),y
0017FFr 3  F0 03                beq *+5
001801r 3  4C rr rr             jmp j00558
001804r 3  A9 40                lda #64
001806r 3  A0 0C                ldy #12
001808r 3  91 rr                sta (z80_ix),y
00180Ar 3  A9 40                lda #64
00180Cr 3  85 rr                sta z80_c
00180Er 3  A5 rr                lda varr
001810r 3  18                   clc
001811r 3  65 rr                adc z80_c
001813r 3  85 rr                sta varr
001815r 3  60           j00558: rts
001816r 3               evnt10:
001816r 3  A9 00                lda #0
001818r 3  C5 rr                cmp scno
00181Ar 3  F0 03                beq *+5
00181Cr 3  4C rr rr             jmp k00757
00181Fr 3  A9 19                lda #25
001821r 3  C5 rr                cmp vart
001823r 3  F0 03                beq *+5
001825r 3  4C rr rr             jmp k00325
001828r 3  A5 rr                lda vars
00182Ar 3  38                   sec
00182Br 3  E9 01                sbc #1
00182Dr 3  85 rr                sta vars
00182Fr 3  A9 FF                lda #255
001831r 3  C5 rr                cmp vars
001833r 3  F0 03                beq *+5
001835r 3  4C rr rr             jmp k00084
001838r 3  A9 01                lda #1		; ENDGAME
00183Ar 3  85 rr                sta gamwon
00183Cr 3  60                   rts		; EXIT
00183Dr 3  A9 00        k00084: lda #0
00183Fr 3  85 rr                sta vart
001841r 3  A5 rr                lda vars
001843r 3  85 rr                sta vari
001845r 3  A5 rr                lda vari
001847r 3  4A                   lsr a
001848r 3  4A                   lsr a
001849r 3  4A                   lsr a
00184Ar 3  85 rr                sta vari
00184Cr 3  A9 15                lda #21		; AT
00184Er 3  85 rr                sta chary
001850r 3  A9 0E                lda #14
001852r 3  85 rr                sta charx
001854r 3  A9 00                lda #0
001856r 3  C5 rr                cmp vari
001858r 3  90 03                bcc *+5
00185Ar 3  4C rr rr             jmp k00195
00185Dr 3  A5 rr                lda vari 	; REPEAT
00185Fr 3  85 rr                sta loopa
001861r 3  A9 03        k00166: lda #3 		; PUTBLOCK
001863r 3  20 rr rr             jsr pbpattr
001866r 3  C6 rr                dec loopa	; ENDREPEAT
001868r 3  F0 03                beq :+
00186Ar 3  4C rr rr             jmp k00166
00186Dr 3               :
00186Dr 3  A5 rr        k00195: lda vars
00186Fr 3  85 rr                sta varj
001871r 3  A5 rr                lda vari
001873r 3  0A                   asl a
001874r 3  0A                   asl a
001875r 3  0A                   asl a
001876r 3  85 rr                sta vari
001878r 3  A5 rr                lda vari
00187Ar 3  85 rr                sta z80_c
00187Cr 3  A5 rr                lda varj
00187Er 3  38                   sec
00187Fr 3  E5 rr                sbc z80_c
001881r 3  85 rr                sta varj
001883r 3  A5 rr                lda varj
001885r 3  4A                   lsr a
001886r 3  85 rr                sta varj
001888r 3  A9 00                lda #0
00188Ar 3  C5 rr                cmp varj
00188Cr 3  90 03                bcc *+5
00188Er 3  4C rr rr             jmp k00312
001891r 3  A9 03                lda #3
001893r 3  85 rr                sta z80_c
001895r 3  A5 rr                lda varj
001897r 3  18                   clc
001898r 3  65 rr                adc z80_c
00189Ar 3  85 rr                sta varj
00189Cr 3  A5 rr                lda varj 		; PUTBLOCK
00189Er 3  20 rr rr             jsr pbpattr
0018A1r 3  A9 30        k00312: lda #48 		; PUTBLOCK
0018A3r 3  20 rr rr             jsr pbpattr
0018A6r 3  A5 rr        k00325: lda vart
0018A8r 3  18                   clc
0018A9r 3  69 01                adc #1
0018ABr 3  85 rr                sta vart
0018ADr 3  A9 00                lda #0
0018AFr 3  C5 rr                cmp varl
0018B1r 3  90 03                bcc *+5
0018B3r 3  4C rr rr             jmp k00372
0018B6r 3  A5 rr                lda varl
0018B8r 3  38                   sec
0018B9r 3  E9 01                sbc #1
0018BBr 3  85 rr                sta varl
0018BDr 3  A9 01        k00372: lda #1
0018BFr 3  C5 rr                cmp varb
0018C1r 3  F0 03                beq *+5
0018C3r 3  4C rr rr             jmp k00608
0018C6r 3  A9 02                lda #2	; SPAWN
0018C8r 3  85 rr                sta z80_c
0018CAr 3  A9 0C                lda #12
0018CCr 3  85 rr                sta z80_b
0018CEr 3  20 rr rr             jsr spawn
0018D1r 3  A5 rr                lda spptr	; SPAWNED
0018D3r 3  85 rr                sta z80_x
0018D5r 3  A5 rr                lda spptr+1
0018D7r 3  85 rr                sta z80_i
0018D9r 3  A5 rr                lda varq
0018DBr 3  A0 09                ldy #9
0018DDr 3  91 rr                sta (z80_ix),y
0018DFr 3  A9 01                lda #1
0018E1r 3  C5 rr                cmp varh
0018E3r 3  F0 03                beq *+5
0018E5r 3  4C rr rr             jmp k00516
0018E8r 3  A9 10                lda #16
0018EAr 3  85 rr                sta z80_c
0018ECr 3  A0 09                ldy #9
0018EEr 3  B1 rr                lda (z80_ix),y
0018F0r 3  18                   clc
0018F1r 3  65 rr                adc z80_c
0018F3r 3  A0 09                ldy #9
0018F5r 3  91 rr                sta (z80_ix),y
0018F7r 3  A9 00                lda #0
0018F9r 3  A0 07                ldy #7
0018FBr 3  91 rr                sta (z80_ix),y
0018FDr 3  4C rr rr             jmp k00565
001900r 3  A9 10        k00516: lda #16
001902r 3  85 rr                sta z80_c
001904r 3  A0 09                ldy #9
001906r 3  B1 rr                lda (z80_ix),y
001908r 3  38                   sec
001909r 3  E5 rr                sbc z80_c
00190Br 3  A0 09                ldy #9
00190Dr 3  91 rr                sta (z80_ix),y
00190Fr 3  A9 04                lda #4
001911r 3  A0 07                ldy #7
001913r 3  91 rr                sta (z80_ix),y
001915r 3  A5 rr        k00565: lda varp
001917r 3  A0 08                ldy #8
001919r 3  91 rr                sta (z80_ix),y
00191Br 3  A5 rr                lda ogptr	; ENDSPRITE
00191Dr 3  85 rr                sta z80_x
00191Fr 3  A5 rr                lda ogptr+1
001921r 3  85 rr                sta z80_i
001923r 3  A9 00                lda #0
001925r 3  85 rr                sta varb
001927r 3  A9 00        k00608: lda #0
001929r 3  C5 rr                cmp varz
00192Br 3  F0 03                beq *+5
00192Dr 3  4C rr rr             jmp k00757
001930r 3  A9 14                lda #20		; AT
001932r 3  85 rr                sta chary
001934r 3  A9 0E                lda #14
001936r 3  85 rr                sta charx
001938r 3  A9 00                lda #0
00193Ar 3  85 rr                sta varc
00193Cr 3  A9 05                lda #5 	; REPEAT
00193Er 3  85 rr                sta loopa
001940r 3  A5 rr        k00662: lda varc
001942r 3  C5 rr                cmp numlif
001944r 3  90 03                bcc *+5
001946r 3  4C rr rr             jmp k00697
001949r 3  A9 0C                lda #12 		; PUTBLOCK
00194Br 3  20 rr rr             jsr pbpattr
00194Er 3  4C rr rr             jmp k00709
001951r 3  A9 30        k00697: lda #48 		; PUTBLOCK
001953r 3  20 rr rr             jsr pbpattr
001956r 3  A5 rr        k00709: lda varc
001958r 3  18                   clc
001959r 3  69 01                adc #1
00195Br 3  85 rr                sta varc
00195Dr 3  C6 rr                dec loopa	; ENDREPEAT
00195Fr 3  F0 03                beq :+
001961r 3  4C rr rr             jmp k00662
001964r 3               :
001964r 3  A9 00                lda #0
001966r 3  85 rr                sta varo
001968r 3  A9 01                lda #1
00196Ar 3  85 rr                sta varz
00196Cr 3  60           k00757: rts
00196Dr 3               evnt11:
00196Dr 3  A9 00                lda #0
00196Fr 3  C5 rr                cmp scno
001971r 3  F0 03                beq *+5
001973r 3  4C rr rr             jmp l00249
001976r 3  A9 0C                lda #12
001978r 3  C5 rr                cmp varn
00197Ar 3  F0 03                beq *+5
00197Cr 3  4C rr rr             jmp l00048
00197Fr 3  A9 00                lda #0
001981r 3  85 rr                sta varn
001983r 3  4C rr rr             jmp l00063
001986r 3  A5 rr        l00048: lda varn
001988r 3  18                   clc
001989r 3  69 01                adc #1
00198Br 3  85 rr                sta varn
00198Dr 3  A9 04        l00063: lda #4
00198Fr 3  C5 rr                cmp vard
001991r 3  F0 03                beq *+5
001993r 3  4C rr rr             jmp l00093
001996r 3  A9 00                lda #0
001998r 3  85 rr                sta vard
00199Ar 3  4C rr rr             jmp l00108
00199Dr 3  A5 rr        l00093: lda vard
00199Fr 3  18                   clc
0019A0r 3  69 01                adc #1
0019A2r 3  85 rr                sta vard
0019A4r 3  A9 0A        l00108: lda #10
0019A6r 3  C5 rr                cmp varf
0019A8r 3  F0 03                beq *+5
0019AAr 3  4C rr rr             jmp l00153
0019ADr 3  A5 rr                lda varg
0019AFr 3  18                   clc
0019B0r 3  69 01                adc #1
0019B2r 3  85 rr                sta varg
0019B4r 3  A9 01                lda #1
0019B6r 3  85 rr                sta varf
0019B8r 3  4C rr rr             jmp l00168
0019BBr 3  A5 rr        l00153: lda varf
0019BDr 3  18                   clc
0019BEr 3  69 01                adc #1
0019C0r 3  85 rr                sta varf
0019C2r 3  A9 32        l00168: lda #50
0019C4r 3  C5 rr                cmp varg
0019C6r 3  F0 03                beq *+5
0019C8r 3  4C rr rr             jmp l00245
0019CBr 3  A5 rr                lda varm
0019CDr 3  18                   clc
0019CEr 3  69 01                adc #1
0019D0r 3  85 rr                sta varm
0019D2r 3  A9 03                lda #3
0019D4r 3  C5 rr                cmp vara
0019D6r 3  90 02                bcc *+4
0019D8r 3  D0 03                bne *+5
0019DAr 3  4C rr rr             jmp l00237
0019DDr 3  A5 rr                lda vara
0019DFr 3  18                   clc
0019E0r 3  69 01                adc #1
0019E2r 3  85 rr                sta vara
0019E4r 3  A9 01        l00237: lda #1
0019E6r 3  85 rr                sta varg
0019E8r 3  4C rr rr     l00245: jmp l00294
0019EBr 3  A9 04        l00249: lda #4
0019EDr 3  C5 rr                cmp vard
0019EFr 3  F0 03                beq *+5
0019F1r 3  4C rr rr             jmp l00279
0019F4r 3  A9 00                lda #0
0019F6r 3  85 rr                sta vard
0019F8r 3  4C rr rr             jmp l00294
0019FBr 3  A5 rr        l00279: lda vard
0019FDr 3  18                   clc
0019FEr 3  69 01                adc #1
001A00r 3  85 rr                sta vard
001A02r 3  60           l00294: rts
001A03r 3               evnt12:
001A03r 3  A9 00                lda #0 	; PAPER
001A05r 3  0A                   asl a
001A06r 3  0A                   asl a
001A07r 3  0A                   asl a
001A08r 3  0A                   asl a
001A09r 3  85 rr                sta tmp
001A0Br 3  AD 0F 90             lda RegF
001A0Er 3  29 8F                and #%10001111
001A10r 3  05 rr                ora tmp
001A12r 3  8D 0F 90             sta RegF
001A15r 3  20 rr rr             jsr cls		; CLS
001A18r 3  A9 01                lda #1 	; INK
001A1Ar 3  8D rr rr             sta fontcol
001A1Dr 3  A9 15                lda #21		; AT
001A1Fr 3  85 rr                sta chary
001A21r 3  A9 0F                lda #15
001A23r 3  85 rr                sta charx
001A25r 3  A9 15                lda #21		; PRINT
001A27r 3  20 rr rr             jsr dmsg
001A2Ar 3  A9 16                lda #22		; LOAD
001A2Cr 3  20 rr rr             jsr loadfile
001A2Fr 3  A9 17                lda #23		; LOAD
001A31r 3  20 rr rr             jsr loadfile
001A34r 3  A9 00                lda #0
001A36r 3  C5 rr                cmp varq
001A38r 3  F0 03                beq *+5
001A3Ar 3  4C rr rr             jmp m00148
001A3Dr 3  A9 18                lda #24		; LOAD
001A3Fr 3  20 rr rr             jsr loadfile
001A42r 3  A9 01                lda #1
001A44r 3  85 rr                sta varq
001A46r 3  20 rr rr     m00148: jsr prskey	; WAITKEY
001A49r 3  A9 00                lda #0
001A4Br 3  20 rr rr             jsr user
001A4Er 3  20 rr rr             jsr cls		; CLS
001A51r 3  A9 02                lda #2 	; INK
001A53r 3  8D rr rr             sta fontcol
001A56r 3  A9 02                lda #2		; AT
001A58r 3  85 rr                sta chary
001A5Ar 3  A9 09                lda #9
001A5Cr 3  85 rr                sta charx
001A5Er 3  A9 03                lda #3  	; MESSAGE
001A60r 3  20 rr rr             jsr dmsg
001A63r 3  A9 07                lda #7 	; INK
001A65r 3  8D rr rr             sta fontcol
001A68r 3  A9 02                lda #2		; AT
001A6Ar 3  85 rr                sta chary
001A6Cr 3  A9 0A                lda #10
001A6Er 3  85 rr                sta charx
001A70r 3  A9 04                lda #4  	; MESSAGE
001A72r 3  20 rr rr             jsr dmsg
001A75r 3  A9 07                lda #7 	; INK
001A77r 3  8D rr rr             sta fontcol
001A7Ar 3  A9 02                lda #2		; AT
001A7Cr 3  85 rr                sta chary
001A7Er 3  A9 0B                lda #11
001A80r 3  85 rr                sta charx
001A82r 3  A9 05                lda #5  	; MESSAGE
001A84r 3  20 rr rr             jsr dmsg
001A87r 3  A9 02                lda #2 	; INK
001A89r 3  8D rr rr             sta fontcol
001A8Cr 3  A9 03                lda #3		; AT
001A8Er 3  85 rr                sta chary
001A90r 3  A9 09                lda #9
001A92r 3  85 rr                sta charx
001A94r 3  A9 06                lda #6  	; MESSAGE
001A96r 3  20 rr rr             jsr dmsg
001A99r 3  A9 07                lda #7 	; INK
001A9Br 3  8D rr rr             sta fontcol
001A9Er 3  A9 03                lda #3		; AT
001AA0r 3  85 rr                sta chary
001AA2r 3  A9 0A                lda #10
001AA4r 3  85 rr                sta charx
001AA6r 3  A9 07                lda #7  	; MESSAGE
001AA8r 3  20 rr rr             jsr dmsg
001AABr 3  A9 07                lda #7 	; INK
001AADr 3  8D rr rr             sta fontcol
001AB0r 3  A9 03                lda #3		; AT
001AB2r 3  85 rr                sta chary
001AB4r 3  A9 0B                lda #11
001AB6r 3  85 rr                sta charx
001AB8r 3  A9 08                lda #8  	; MESSAGE
001ABAr 3  20 rr rr             jsr dmsg
001ABDr 3  A9 04                lda #4 	; INK
001ABFr 3  8D rr rr             sta fontcol
001AC2r 3  A9 04                lda #4		; AT
001AC4r 3  85 rr                sta chary
001AC6r 3  A9 09                lda #9
001AC8r 3  85 rr                sta charx
001ACAr 3  A9 09                lda #9  	; MESSAGE
001ACCr 3  20 rr rr             jsr dmsg
001ACFr 3  A9 06                lda #6 	; INK
001AD1r 3  8D rr rr             sta fontcol
001AD4r 3  A9 04                lda #4		; AT
001AD6r 3  85 rr                sta chary
001AD8r 3  A9 0A                lda #10
001ADAr 3  85 rr                sta charx
001ADCr 3  A9 0A                lda #10  	; MESSAGE
001ADEr 3  20 rr rr             jsr dmsg
001AE1r 3  A9 04                lda #4 	; INK
001AE3r 3  8D rr rr             sta fontcol
001AE6r 3  A9 04                lda #4		; AT
001AE8r 3  85 rr                sta chary
001AEAr 3  A9 0B                lda #11
001AECr 3  85 rr                sta charx
001AEEr 3  A9 0B                lda #11  	; MESSAGE
001AF0r 3  20 rr rr             jsr dmsg
001AF3r 3  A9 06                lda #6 	; INK
001AF5r 3  8D rr rr             sta fontcol
001AF8r 3  A9 05                lda #5		; AT
001AFAr 3  85 rr                sta chary
001AFCr 3  A9 09                lda #9
001AFEr 3  85 rr                sta charx
001B00r 3  A9 0C                lda #12  	; MESSAGE
001B02r 3  20 rr rr             jsr dmsg
001B05r 3  A9 06                lda #6 	; INK
001B07r 3  8D rr rr             sta fontcol
001B0Ar 3  A9 05                lda #5		; AT
001B0Cr 3  85 rr                sta chary
001B0Er 3  A9 0A                lda #10
001B10r 3  85 rr                sta charx
001B12r 3  A9 0D                lda #13  	; MESSAGE
001B14r 3  20 rr rr             jsr dmsg
001B17r 3  A9 02                lda #2 	; INK
001B19r 3  8D rr rr             sta fontcol
001B1Cr 3  A9 00                lda #0		; AT
001B1Er 3  85 rr                sta chary
001B20r 3  A9 05                lda #5
001B22r 3  85 rr                sta charx
001B24r 3  A9 14                lda #20  	; MESSAGE
001B26r 3  20 rr rr             jsr dmsg
001B29r 3  A9 04                lda #4		; AT
001B2Br 3  85 rr                sta chary
001B2Dr 3  A9 08                lda #8
001B2Fr 3  85 rr                sta charx
001B31r 3  A9 0E                lda #14  	; MESSAGE
001B33r 3  20 rr rr             jsr dmsg
001B36r 3  A9 06                lda #6		; AT
001B38r 3  85 rr                sta chary
001B3Ar 3  A9 07                lda #7
001B3Cr 3  85 rr                sta charx
001B3Er 3  A9 0E                lda #14  	; MESSAGE
001B40r 3  20 rr rr             jsr dmsg
001B43r 3  A9 08                lda #8		; AT
001B45r 3  85 rr                sta chary
001B47r 3  A9 08                lda #8
001B49r 3  85 rr                sta charx
001B4Br 3  A9 0E                lda #14  	; MESSAGE
001B4Dr 3  20 rr rr             jsr dmsg
001B50r 3  A9 01                lda #1 	; INK
001B52r 3  8D rr rr             sta fontcol
001B55r 3  A9 0A                lda #10		; AT
001B57r 3  85 rr                sta chary
001B59r 3  A9 03                lda #3
001B5Br 3  85 rr                sta charx
001B5Dr 3  A9 19                lda #25		; PRINT
001B5Fr 3  20 rr rr             jsr dmsg
001B62r 3  A0 00                ldy #0		; SHOWHIGH
001B64r 3  A9 06                lda #6
001B66r 3  85 rr                sta z80_b
001B68r 3  20 rr rr             jsr dhisc
001B6Br 3  A9 07                lda #7 	; INK
001B6Dr 3  8D rr rr             sta fontcol
001B70r 3  A9 0E                lda #14		; AT
001B72r 3  85 rr                sta chary
001B74r 3  A9 03                lda #3
001B76r 3  85 rr                sta charx
001B78r 3  A9 1A                lda #26		; PRINT
001B7Ar 3  20 rr rr             jsr dmsg
001B7Dr 3  A9 05                lda #5 	; INK
001B7Fr 3  8D rr rr             sta fontcol
001B82r 3  A9 10                lda #16		; AT
001B84r 3  85 rr                sta chary
001B86r 3  A9 03                lda #3
001B88r 3  85 rr                sta charx
001B8Ar 3  A9 1B                lda #27		; PRINT
001B8Cr 3  20 rr rr             jsr dmsg
001B8Fr 3  A9 04                lda #4 	; INK
001B91r 3  8D rr rr             sta fontcol
001B94r 3  A9 15                lda #21		; AT
001B96r 3  85 rr                sta chary
001B98r 3  A9 03                lda #3
001B9Ar 3  85 rr                sta charx
001B9Cr 3  A9 1C                lda #28		; PRINT
001B9Er 3  20 rr rr             jsr dmsg
001BA1r 3               
001BA1r 3               rtcon:			; CONTROLMENU
001BA1r 3  20 rr rr             jsr vsync
001BA4r 3  A9 00                lda #0
001BA6r 3  85 rr                sta contrl
001BA8r 3  AD rr rr             lda keys+7
001BABr 3  20 rr rr             jsr ktest
001BAEr 3  90 0C                bcc rtcon1
001BB0r 3  A9 01                lda #1
001BB2r 3  85 rr                sta contrl
001BB4r 3  AD rr rr             lda keys+8
001BB7r 3  20 rr rr             jsr ktest
001BBAr 3  B0 E5                bcs rtcon
001BBCr 3                       rtcon1:
001BBCr 3  20 rr rr             jsr prskey	; WAITKEY
001BBFr 3  60                   rts
001BC0r 3               evnt13:
001BC0r 3  20 rr rr             jsr cls		; CLS
001BC3r 3  A9 0A                lda #10
001BC5r 3  85 rr                sta chary
001BC7r 3  A9 02                lda #2 	; INK
001BC9r 3  8D rr rr             sta fontcol
001BCCr 3  A9 02                lda #2
001BCEr 3  85 rr                sta charx
001BD0r 3  A9 02                lda #2  	; MESSAGE
001BD2r 3  20 rr rr             jsr dmsg
001BD5r 3  A9 64                lda #100 	; DELAY
001BD7r 3  20 rr rr             jsr delay
001BDAr 3  A9 19                lda #25
001BDCr 3  85 rr                sta vart
001BDEr 3  A9 3C                lda #60
001BE0r 3  85 rr                sta vars
001BE2r 3  A5 rr                lda vars
001BE4r 3  85 rr                sta vari
001BE6r 3  A5 rr                lda vari
001BE8r 3  4A                   lsr a
001BE9r 3  4A                   lsr a
001BEAr 3  4A                   lsr a
001BEBr 3  85 rr                sta vari
001BEDr 3  A5 rr                lda vari 	; REPEAT
001BEFr 3  85 rr                sta loopa
001BF1r 3  C6 rr        n00112: dec loopa	; ENDREPEAT
001BF3r 3  F0 03                beq :+
001BF5r 3  4C rr rr             jmp n00112
001BF8r 3               :
001BF8r 3  A5 rr                lda vars
001BFAr 3  85 rr                sta varj
001BFCr 3  A5 rr                lda vari
001BFEr 3  85 rr                sta z80_c
001C00r 3  A5 rr                lda varj
001C02r 3  38                   sec
001C03r 3  E5 rr                sbc z80_c
001C05r 3  85 rr                sta varj
001C07r 3  A9 00                lda #0
001C09r 3  C5 rr                cmp varj
001C0Br 3  90 03                bcc *+5
001C0Dr 3  4C rr rr             jmp n00215
001C10r 3  A9 03                lda #3
001C12r 3  85 rr                sta z80_c
001C14r 3  A5 rr                lda varj
001C16r 3  18                   clc
001C17r 3  65 rr                adc z80_c
001C19r 3  85 rr                sta varj
001C1Br 3  A5 rr                lda varj 		; PUTBLOCK
001C1Dr 3  20 rr rr             jsr pbpattr
001C20r 3  A9 00        n00215: lda #0
001C22r 3                       ; BORDER command
001C22r 3  29 07                and #7
001C24r 3  85 rr                sta tmp
001C26r 3  AD 0F 90             lda RegF
001C29r 3  29 F8                and #%11111000
001C2Br 3  05 rr                ora tmp
001C2Dr 3  8D 0F 90             sta RegF
001C30r 3  A9 07                lda #7 	; INK
001C32r 3  8D rr rr             sta fontcol
001C35r 3  20 rr rr             jsr cls		; CLS
001C38r 3  A9 00                lda #0
001C3Ar 3  85 rr                sta varb
001C3Cr 3  A9 00                lda #0
001C3Er 3  85 rr                sta varl
001C40r 3  A9 01                lda #1
001C42r 3  85 rr                sta vare
001C44r 3  A9 05                lda #5
001C46r 3  85 rr                sta numlif
001C48r 3  A9 01                lda #1
001C4Ar 3  85 rr                sta varm
001C4Cr 3  A9 00                lda #0
001C4Er 3  85 rr                sta varr
001C50r 3  A9 01                lda #1
001C52r 3  85 rr                sta vara
001C54r 3  A9 01                lda #1
001C56r 3  85 rr                sta varf
001C58r 3  A9 01                lda #1
001C5Ar 3  85 rr                sta varg
001C5Cr 3  A9 00                lda #0
001C5Er 3  85 rr                sta varq
001C60r 3  60                   rts
001C61r 3               evnt14:
001C61r 3  A9 00                lda #0
001C63r 3  C5 rr                cmp scno
001C65r 3  F0 03                beq *+5
001C67r 3  4C rr rr             jmp o00107
001C6Ar 3  A9 06                lda #6 	; INK
001C6Cr 3  8D rr rr             sta fontcol
001C6Fr 3  A9 15                lda #21		; AT
001C71r 3  85 rr                sta chary
001C73r 3  A9 01                lda #1
001C75r 3  85 rr                sta charx
001C77r 3  A9 00                lda #0  	; MESSAGE
001C79r 3  20 rr rr             jsr dmsg
001C7Cr 3  A9 01                lda #1 	; INK
001C7Er 3  8D rr rr             sta fontcol
001C81r 3  A9 15                lda #21		; AT
001C83r 3  85 rr                sta chary
001C85r 3  A9 07                lda #7
001C87r 3  85 rr                sta charx
001C89r 3  A0 00                ldy #0		; SHOWSCORE
001C8Br 3  A9 06                lda #6
001C8Dr 3  85 rr                sta z80_b
001C8Fr 3  20 rr rr             jsr dscor
001C92r 3  A9 00        o00107: lda #0
001C94r 3  85 rr                sta varz
001C96r 3  A9 01                lda #1
001C98r 3  20 rr rr             jsr user
001C9Br 3  60                   rts
001C9Cr 3               evnt15:
001C9Cr 3  60                   rts
001C9Dr 3               evnt16:
001C9Dr 3  A9 02                lda #2
001C9Fr 3  A0 06                ldy #6
001CA1r 3  91 rr                sta (z80_ix),y
001CA3r 3  A9 64                lda #100		; BEEP
001CA5r 3  8D rr rr             sta sndtyp
001CA8r 3  A9 00                lda #0
001CAAr 3  85 rr                sta varr
001CACr 3  60                   rts
001CADr 3               evnt17:
001CADr 3  A9 02                lda #2
001CAFr 3  20 rr rr             jsr user
001CB2r 3  A9 09                lda #9		; AT
001CB4r 3  85 rr                sta chary
001CB6r 3  A9 06                lda #6
001CB8r 3  85 rr                sta charx
001CBAr 3  A9 1D                lda #29		; PRINT
001CBCr 3  20 rr rr             jsr dmsg
001CBFr 3  A9 0B                lda #11		; AT
001CC1r 3  85 rr                sta chary
001CC3r 3  A9 06                lda #6
001CC5r 3  85 rr                sta charx
001CC7r 3  A9 1E                lda #30		; PRINT
001CC9r 3  20 rr rr             jsr dmsg
001CCCr 3  A9 0C                lda #12		; AT
001CCEr 3  85 rr                sta chary
001CD0r 3  A9 06                lda #6
001CD2r 3  85 rr                sta charx
001CD4r 3  A9 1F                lda #31		; PRINT
001CD6r 3  20 rr rr             jsr dmsg
001CD9r 3  A9 01                lda #1
001CDBr 3  85 rr                sta vari
001CDDr 3  A9 07                lda #7 	; REPEAT
001CDFr 3  85 rr                sta loopa
001CE1r 3  A5 rr        r00114: lda vari 	; INK
001CE3r 3  8D rr rr             sta fontcol
001CE6r 3  A9 0A                lda #10		; AT
001CE8r 3  85 rr                sta chary
001CEAr 3  A9 06                lda #6
001CECr 3  85 rr                sta charx
001CEEr 3  A9 20                lda #32		; PRINT
001CF0r 3  20 rr rr             jsr dmsg
001CF3r 3  A9 0B                lda #11		; AT
001CF5r 3  85 rr                sta chary
001CF7r 3  A9 08                lda #8
001CF9r 3  85 rr                sta charx
001CFBr 3  A0 00                ldy #0		; SHOWSCORE
001CFDr 3  A9 06                lda #6
001CFFr 3  85 rr                sta z80_b
001D01r 3  20 rr rr             jsr dscor
001D04r 3  A9 19                lda #25 	; DELAY
001D06r 3  20 rr rr             jsr delay
001D09r 3  A5 rr                lda vari
001D0Br 3  18                   clc
001D0Cr 3  69 01                adc #1
001D0Er 3  85 rr                sta vari
001D10r 3  C6 rr                dec loopa	; ENDREPEAT
001D12r 3  F0 03                beq :+
001D14r 3  4C rr rr             jmp r00114
001D17r 3               :
001D17r 3  A9 96                lda #150 	; DELAY
001D19r 3  20 rr rr             jsr delay
001D1Cr 3  A9 00                lda #0 	; PAPER
001D1Er 3  0A                   asl a
001D1Fr 3  0A                   asl a
001D20r 3  0A                   asl a
001D21r 3  0A                   asl a
001D22r 3  85 rr                sta tmp
001D24r 3  AD 0F 90             lda RegF
001D27r 3  29 8F                and #%10001111
001D29r 3  05 rr                ora tmp
001D2Br 3  8D 0F 90             sta RegF
001D2Er 3  20 rr rr             jsr cls		; CLS
001D31r 3  A9 01                lda #1 	; INK
001D33r 3  8D rr rr             sta fontcol
001D36r 3  A9 15                lda #21		; AT
001D38r 3  85 rr                sta chary
001D3Ar 3  A9 0F                lda #15
001D3Cr 3  85 rr                sta charx
001D3Er 3  A9 21                lda #33		; PRINT
001D40r 3  20 rr rr             jsr dmsg
001D43r 3  A9 22                lda #34		; LOAD
001D45r 3  20 rr rr             jsr loadfile
001D48r 3  A9 23                lda #35		; LOAD
001D4Ar 3  20 rr rr             jsr loadfile
001D4Dr 3  20 rr rr             jsr prskey	; WAITKEY
001D50r 3  A9 01                lda #1		; ENDGAME
001D52r 3  85 rr                sta gamwon
001D54r 3  60                   rts
001D55r 3               evnt18:
001D55r 3  A9 02                lda #2
001D57r 3  20 rr rr             jsr user
001D5Ar 3  20 rr rr             jsr cls		; CLS
001D5Dr 3  A9 00                lda #0
001D5Fr 3  C5 rr                cmp numlif
001D61r 3  90 03                bcc *+5
001D63r 3  4C rr rr             jmp s00335
001D66r 3  A9 02                lda #2 	; INK
001D68r 3  8D rr rr             sta fontcol
001D6Br 3  A9 0C                lda #12		; AT
001D6Dr 3  85 rr                sta chary
001D6Fr 3  A9 05                lda #5
001D71r 3  85 rr                sta charx
001D73r 3  A9 24                lda #36		; PRINT
001D75r 3  20 rr rr             jsr dmsg
001D78r 3  A9 04                lda #4 	; INK
001D7Ar 3  8D rr rr             sta fontcol
001D7Dr 3  A9 0F                lda #15		; AT
001D7Fr 3  85 rr                sta chary
001D81r 3  A9 02                lda #2
001D83r 3  85 rr                sta charx
001D85r 3  A9 25                lda #37		; PRINT
001D87r 3  20 rr rr             jsr dmsg
001D8Ar 3  A9 11                lda #17		; AT
001D8Cr 3  85 rr                sta chary
001D8Er 3  A9 02                lda #2
001D90r 3  85 rr                sta charx
001D92r 3  A9 26                lda #38		; PRINT
001D94r 3  20 rr rr             jsr dmsg
001D97r 3  A9 01                lda #1		; PRINTMODE
001D99r 3  85 rr                sta prtmod
001D9Br 3  A9 03                lda #3 	; REPEAT
001D9Dr 3  85 rr                sta loopa
001D9Fr 3  A9 01        s00162: lda #1
001DA1r 3  85 rr                sta vari
001DA3r 3  A9 07                lda #7 	; REPEAT
001DA5r 3  85 rr                sta loopb
001DA7r 3  A5 rr        s00181: lda vari 	; INK
001DA9r 3  8D rr rr             sta fontcol
001DACr 3  A9 06                lda #6		; AT
001DAEr 3  85 rr                sta chary
001DB0r 3  A9 02                lda #2
001DB2r 3  85 rr                sta charx
001DB4r 3  A9 27                lda #39		; PRINT
001DB6r 3  20 rr rr             jsr dmsg
001DB9r 3  A9 19                lda #25 	; DELAY
001DBBr 3  20 rr rr             jsr delay
001DBEr 3  A5 rr                lda vari
001DC0r 3  18                   clc
001DC1r 3  69 01                adc #1
001DC3r 3  85 rr                sta vari
001DC5r 3  C6 rr                dec loopb	; ENDREPEAT
001DC7r 3  F0 03                beq :+
001DC9r 3  4C rr rr             jmp s00181
001DCCr 3               :
001DCCr 3  C6 rr                dec loopa	; ENDREPEAT
001DCEr 3  F0 03                beq :+
001DD0r 3  4C rr rr             jmp s00162
001DD3r 3               :
001DD3r 3  A9 00                lda #0		; PRINTMODE
001DD5r 3  85 rr                sta prtmod
001DD7r 3  A9 01                lda #1 	; INK
001DD9r 3  8D rr rr             sta fontcol
001DDCr 3  A9 15                lda #21		; AT
001DDEr 3  85 rr                sta chary
001DE0r 3  A9 05                lda #5
001DE2r 3  85 rr                sta charx
001DE4r 3  A9 28                lda #40		; PRINT
001DE6r 3  20 rr rr             jsr dmsg
001DE9r 3  4C rr rr             jmp s00555
001DECr 3  A9 19        s00335: lda #25 	; DELAY
001DEEr 3  20 rr rr             jsr delay
001DF1r 3  A9 01                lda #1		; PRINTMODE
001DF3r 3  85 rr                sta prtmod
001DF5r 3  A9 02                lda #2 	; INK
001DF7r 3  8D rr rr             sta fontcol
001DFAr 3  A9 06                lda #6		; AT
001DFCr 3  85 rr                sta chary
001DFEr 3  A9 05                lda #5
001E00r 3  85 rr                sta charx
001E02r 3  A9 29                lda #41		; PRINT
001E04r 3  20 rr rr             jsr dmsg
001E07r 3  A9 00                lda #0		; PRINTMODE
001E09r 3  85 rr                sta prtmod
001E0Br 3  A9 02                lda #2 	; INK
001E0Dr 3  8D rr rr             sta fontcol
001E10r 3  A9 0C                lda #12		; AT
001E12r 3  85 rr                sta chary
001E14r 3  A9 06                lda #6
001E16r 3  85 rr                sta charx
001E18r 3  A9 2A                lda #42		; PRINT
001E1Ar 3  20 rr rr             jsr dmsg
001E1Dr 3  A9 04                lda #4 	; INK
001E1Fr 3  8D rr rr             sta fontcol
001E22r 3  A9 0F                lda #15		; AT
001E24r 3  85 rr                sta chary
001E26r 3  A9 02                lda #2
001E28r 3  85 rr                sta charx
001E2Ar 3  A9 2B                lda #43		; PRINT
001E2Cr 3  20 rr rr             jsr dmsg
001E2Fr 3  A9 11                lda #17		; AT
001E31r 3  85 rr                sta chary
001E33r 3  A9 02                lda #2
001E35r 3  85 rr                sta charx
001E37r 3  A9 2C                lda #44		; PRINT
001E39r 3  20 rr rr             jsr dmsg
001E3Cr 3  A9 01                lda #1 	; INK
001E3Er 3  8D rr rr             sta fontcol
001E41r 3  A9 15                lda #21		; AT
001E43r 3  85 rr                sta chary
001E45r 3  A9 05                lda #5
001E47r 3  85 rr                sta charx
001E49r 3  A9 2D                lda #45		; PRINT
001E4Br 3  20 rr rr             jsr dmsg
001E4Er 3  20 rr rr     s00555: jsr prskey	; WAITKEY
001E51r 3  A9 02                lda #2
001E53r 3  20 rr rr             jsr user
001E56r 3  60                   rts
001E57r 3               evnt19:
001E57r 3  60                   rts
001E58r 3               evnt20:
001E58r 3  60                   rts
001E59r 3  60           ptcusr: rts
001E5Ar 3               data_start:
001E5Ar 3               msgdat:
001E5Ar 3  53 43 4F 52          .byte "SCOR",197
001E5Er 3  C5           
001E5Fr 3  47 41 4D 45          .byte "GAME OVE",210
001E63r 3  20 4F 56 45  
001E67r 3  D2           
001E68r 3  57 48 4F 20          .byte "WHO WANTS SOME!!",161
001E6Cr 3  57 41 4E 54  
001E70r 3  53 20 53 4F  
001E79r 3  ED                   .byte 237
001E7Ar 3  EE                   .byte 238
001E7Br 3  EF                   .byte 239
001E7Cr 3  F0                   .byte 240
001E7Dr 3  F1                   .byte 241
001E7Er 3  F2                   .byte 242
001E7Fr 3  F3                   .byte 243
001E80r 3  F4                   .byte 244
001E81r 3  F5                   .byte 245
001E82r 3  F6                   .byte 246
001E83r 3  F7                   .byte 247
001E84r 3  F8                   .byte 248
001E85r 3  35 20 50 4F          .byte "5 POINT",211
001E89r 3  49 4E 54 D3  
001E8Dr 3  34 20 50 4F          .byte "4 POINT",211
001E91r 3  49 4E 54 D3  
001E95r 3  33 20 50 4F          .byte "3 POINT",211
001E99r 3  49 4E 54 D3  
001E9Dr 3  32 20 50 4F          .byte "2 POINT",211
001EA1r 3  49 4E 54 D3  
001EA5r 3  47 52 4F 4F          .byte "GROOVY ..",174
001EA9r 3  56 59 20 2E  
001EADr 3  2E AE        
001EAFr 3  54 45 41 4D          .byte "TEAM MORIT",218
001EB3r 3  20 4D 4F 52  
001EB7r 3  49 54 DA     
001EBAr 3  4C 4F 41 44          .byte "LOADIN",199
001EBEr 3  49 4E C7     
001EC1r 3  53 4C 41 53          .byte "SLASHER1",196
001EC5r 3  48 45 52 31  
001EC9r 3  C4           
001ECAr 3  53 4C 41 53          .byte "SLASHER1",195
001ECEr 3  48 45 52 31  
001ED2r 3  C3           
001ED3r 3  50 4C 41 59          .byte "PLAYER",177
001ED7r 3  45 52 B1     
001EDAr 3  48 49 47 48          .byte "HIGHSCORE",186
001EDEr 3  53 43 4F 52  
001EE2r 3  45 BA        
001EE4r 3  31 2E 20 51          .byte "1. Q A O P SPAC",197
001EE8r 3  20 41 20 4F  
001EECr 3  20 50 20 53  
001EF4r 3  32 2E 20 4A          .byte "2. JOYSTIC",203
001EF8r 3  4F 59 53 54  
001EFCr 3  49 43 CB     
001EFFr 3  53 45 4C 45          .byte "SELECT CONTROL",211
001F03r 3  43 54 20 43  
001F07r 3  4F 4E 54 52  
001F0Er 3  20 20 20 20          .byte "          ",160
001F12r 3  20 20 20 20  
001F16r 3  20 20 A0     
001F19r 3  20 20 20 20          .byte "          ",160
001F1Dr 3  20 20 20 20  
001F21r 3  20 20 A0     
001F24r 3  20 20 20 20          .byte "          ",160
001F28r 3  20 20 20 20  
001F2Cr 3  20 20 A0     
001F2Fr 3  20 47 41 4D          .byte " GAME OVER",160
001F33r 3  45 20 4F 56  
001F37r 3  45 52 A0     
001F3Ar 3  4C 4F 41 44          .byte "LOADIN",199
001F3Er 3  49 4E C7     
001F41r 3  53 4C 41 53          .byte "SLASHER2",195
001F45r 3  48 45 52 32  
001F49r 3  C3           
001F4Ar 3  53 4C 41 53          .byte "SLASHER2",196
001F4Er 3  48 45 52 32  
001F52r 3  C4           
001F53r 3  59 4F 55 20          .byte "YOU SURVIVE",196
001F57r 3  53 55 52 56  
001F5Br 3  49 56 45 C4  
001F5Fr 3  54 52 59 20          .byte "TRY AGAIN TO BEA",212
001F63r 3  41 47 41 49  
001F67r 3  4E 20 54 4F  
001F70r 3  54 48 45 20          .byte "THE HIGHSCORE...",174
001F74r 3  48 49 47 48  
001F78r 3  53 43 4F 52  
001F81r 3  43 4F 4E 47          .byte "CONGRATULATIONS!!",161
001F85r 3  52 41 54 55  
001F89r 3  4C 41 54 49  
001F93r 3  50 52 45 53          .byte "PRESS A KE",217
001F97r 3  53 20 41 20  
001F9Br 3  4B 45 D9     
001F9Er 3  59 4F 55 20          .byte "YOU DIED...",174
001FA2r 3  44 49 45 44  
001FA6r 3  2E 2E 2E AE  
001FAAr 3  4E 4F 20 53          .byte "NO SCORE.",174
001FAEr 3  43 4F 52 45  
001FB2r 3  2E AE        
001FB4r 3  54 52 59 20          .byte "TRY AGAIN TO BEA",212
001FB8r 3  41 47 41 49  
001FBCr 3  4E 20 54 4F  
001FC5r 3  54 48 45 20          .byte "THE HIGHSCORE...",174
001FC9r 3  48 49 47 48  
001FCDr 3  53 43 4F 52  
001FD6r 3  50 52 45 53          .byte "PRESS A KE",217
001FDAr 3  53 20 41 20  
001FDEr 3  4B 45 D9     
001FE1r 3               nummsg:
001FE1r 3  2E                   .byte 46
001FE2r 3               chgfx:
001FE2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001FE6r 3  00 00 00 00  
001FEAr 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
001FEEr 3  FF FF FF FF  
001FF2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001FF6r 3  00 00 00 00  
001FFAr 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
001FFEr 3  FF FF FF FF  
002002r 3  C0 C0 C0 C0          .byte 192,192,192,192,192,192,192,192
002006r 3  C0 C0 C0 C0  
00200Ar 3  F0 F0 F0 F0          .byte 240,240,240,240,240,240,240,240
00200Er 3  F0 F0 F0 F0  
002012r 3  FC FC FC FC          .byte 252,252,252,252,252,252,252,252
002016r 3  FC FC FC FC  
00201Ar 3  F0 F0 F0 F0          .byte 240,240,240,240,240,240,240,240
00201Er 3  F0 F0 F0 F0  
002022r 3  F8 F8 F8 F8          .byte 248,248,248,248,248,248,248,248
002026r 3  F8 F8 F8 F8  
00202Ar 3  FC FC FC FC          .byte 252,252,252,252,252,252,252,252
00202Er 3  FC FC FC FC  
002032r 3  FE FE FE FE          .byte 254,254,254,254,254,254,254,254
002036r 3  FE FE FE FE  
00203Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00203Er 3  00 00 00 00  
002042r 3  3C 7E 92 92          .byte 60,126,146,146,108,56,40,16
002046r 3  6C 38 28 10  
00204Ar 3  1F 20 40 99          .byte 31,32,64,153,149,153,149,128
00204Er 3  95 99 95 80  
002052r 3  F8 1C 0E 66          .byte 248,28,14,102,87,103,74,5
002056r 3  57 67 4A 05  
00205Ar 3  80 8E 80 87          .byte 128,142,128,135,128,128,128,173
00205Er 3  80 80 80 AD  
002062r 3  06 C5 06 85          .byte 6,197,6,133,6,5,10,149
002066r 3  06 05 0A 95  
00206Ar 3  00 27 6F 6F          .byte 0,39,111,111,24,16,16,25
00206Er 3  18 10 10 19  
002072r 3  00 F2 FB FB          .byte 0,242,251,251,140,132,132,76
002076r 3  8C 84 84 4C  
00207Ar 3  1F 0E 0E 0B          .byte 31,14,14,11,98,120,51,0
00207Er 3  62 78 33 00  
002082r 3  F8 70 70 D0          .byte 248,112,112,208,70,30,204,0
002086r 3  46 1E CC 00  
00208Ar 3  CC B9 95 FF          .byte 204,185,149,255,44,60,30,3
00208Er 3  2C 3C 1E 03  
002092r 3  0C 7E BB 93          .byte 12,126,187,147,255,199,186,124
002096r 3  FF C7 BA 7C  
00209Ar 3  07 0D 1E 3F          .byte 7,13,30,63,47,29,35,36
00209Er 3  2F 1D 23 24  
0020A2r 3  E0 50 A8 D4          .byte 224,80,168,212,204,188,196,164
0020A6r 3  CC BC C4 A4  
0020AAr 3  31 13 0E 17          .byte 49,19,14,23,28,12,7,163
0020AEr 3  1C 0C 07 A3  
0020B2r 3  8C D8 70 E8          .byte 140,216,112,232,56,176,224,195
0020B6r 3  38 B0 E0 C3  
0020BAr 3  10 08 38 38          .byte 16,8,56,56,52,56,52,56
0020BEr 3  34 38 34 38  
0020C2r 3  3C FF 3C 7A          .byte 60,255,60,122,52,24,60,102
0020C6r 3  34 18 3C 66  
0020CAr 3  3C 7E FF 7E          .byte 60,126,255,126,186,84,42,0
0020CEr 3  BA 54 2A 00  
0020D2r 3  3C 7E FE 7F          .byte 60,126,254,127,42,85,42,0
0020D6r 3  2A 55 2A 00  
0020DAr 3  30 7E FF FD          .byte 48,126,255,253,186,85,162,0
0020DEr 3  BA 55 A2 00  
0020E2r 3  3E 7F 7E 5F          .byte 62,127,126,95,42,85,42,0
0020E6r 3  2A 55 2A 00  
0020EAr 3  55 AA AA FF          .byte 85,170,170,255,170,170,170,255
0020EEr 3  AA AA AA FF  
0020F2r 3  3C 7E 92 92          .byte 60,126,146,146,108,56,40,16
0020F6r 3  6C 38 28 10  
0020FAr 3  7C FE 92 AA          .byte 124,254,146,170,238,254,68,56
0020FEr 3  EE FE 44 38  
002102r 3  3C 6E 7D DF          .byte 60,110,125,223,115,12,28,28
002106r 3  73 0C 1C 1C  
00210Ar 3  A0 E6 E9 41          .byte 160,230,233,65,226,244,248,168
00210Er 3  E2 F4 F8 A8  
002112r 3  00 00 01 03          .byte 0,0,1,3,7,7,1,0
002116r 3  07 07 01 00  
00211Ar 3  78 FE FF FF          .byte 120,254,255,255,255,255,255,30
00211Er 3  FF FF FF 1E  
002122r 3  00 00 70 F8          .byte 0,0,112,248,252,252,240,0
002126r 3  FC FC F0 00  
00212Ar 3  00 00 03 0D          .byte 0,0,3,13,19,21,34,37
00212Er 3  13 15 22 25  
002132r 3  22 21 12 19          .byte 34,33,18,25,12,3,0,0
002136r 3  0C 03 00 00  
00213Ar 3  00 00 C0 F0          .byte 0,0,192,240,248,184,252,180
00213Er 3  F8 B8 FC B4  
002142r 3  FC 6C F8 78          .byte 252,108,248,120,176,192,0,0
002146r 3  B0 C0 00 00  
00214Ar 3  00 E7 18 18          .byte 0,231,24,24,0,0,0,0
00214Er 3  00 00 00 00  
002152r 3  02 03 1E 3E          .byte 2,3,30,62,62,60,192,64
002156r 3  3E 3C C0 40  
00215Ar 3  0C 7E BA 93          .byte 12,126,186,147,255,129,70,60
00215Er 3  FF 81 46 3C  
002162r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002166r 3  00 00 00 00  
00216Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00216Er 3  00 00 00 00  
002172r 3  02 03 1E 3E          .byte 2,3,30,62,62,60,192,64
002176r 3  3E 3C C0 40  
00217Ar 3  0C 7E BA 93          .byte 12,126,186,147,255,129,70,60
00217Er 3  FF 81 46 3C  
002182r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002186r 3  00 00 00 00  
00218Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00218Er 3  00 00 00 00  
002192r 3               bCol:
002192r 3  01                   .byte 1
002193r 3  07                   .byte 7
002194r 3  01                   .byte 1
002195r 3  07                   .byte 7
002196r 3  07                   .byte 7
002197r 3  07                   .byte 7
002198r 3  07                   .byte 7
002199r 3  07                   .byte 7
00219Ar 3  07                   .byte 7
00219Br 3  07                   .byte 7
00219Cr 3  07                   .byte 7
00219Dr 3  03                   .byte 3
00219Er 3  07                   .byte 7
00219Fr 3  04                   .byte 4
0021A0r 3  04                   .byte 4
0021A1r 3  04                   .byte 4
0021A2r 3  04                   .byte 4
0021A3r 3  07                   .byte 7
0021A4r 3  07                   .byte 7
0021A5r 3  07                   .byte 7
0021A6r 3  07                   .byte 7
0021A7r 3  03                   .byte 3
0021A8r 3  01                   .byte 1
0021A9r 3  02                   .byte 2
0021AAr 3  02                   .byte 2
0021ABr 3  02                   .byte 2
0021ACr 3  02                   .byte 2
0021ADr 3  01                   .byte 1
0021AEr 3  01                   .byte 1
0021AFr 3  05                   .byte 5
0021B0r 3  05                   .byte 5
0021B1r 3  05                   .byte 5
0021B2r 3  05                   .byte 5
0021B3r 3  05                   .byte 5
0021B4r 3  01                   .byte 1
0021B5r 3  01                   .byte 1
0021B6r 3  01                   .byte 1
0021B7r 3  03                   .byte 3
0021B8r 3  03                   .byte 3
0021B9r 3  03                   .byte 3
0021BAr 3  03                   .byte 3
0021BBr 3  03                   .byte 3
0021BCr 3  03                   .byte 3
0021BDr 3  03                   .byte 3
0021BEr 3  03                   .byte 3
0021BFr 3  07                   .byte 7
0021C0r 3  02                   .byte 2
0021C1r 3  02                   .byte 2
0021C2r 3  07                   .byte 7
0021C3r 3  06                   .byte 6
0021C4r 3  06                   .byte 6
0021C5r 3  06                   .byte 6
0021C6r 3  02                   .byte 2
0021C7r 3  05                   .byte 5
0021C8r 3               bprop:
0021C8r 3  00                   .byte 0
0021C9r 3  00                   .byte 0
0021CAr 3  05                   .byte 5
0021CBr 3  00                   .byte 0
0021CCr 3  00                   .byte 0
0021CDr 3  00                   .byte 0
0021CEr 3  00                   .byte 0
0021CFr 3  00                   .byte 0
0021D0r 3  00                   .byte 0
0021D1r 3  00                   .byte 0
0021D2r 3  00                   .byte 0
0021D3r 3  00                   .byte 0
0021D4r 3  00                   .byte 0
0021D5r 3  02                   .byte 2
0021D6r 3  02                   .byte 2
0021D7r 3  02                   .byte 2
0021D8r 3  02                   .byte 2
0021D9r 3  02                   .byte 2
0021DAr 3  02                   .byte 2
0021DBr 3  02                   .byte 2
0021DCr 3  02                   .byte 2
0021DDr 3  02                   .byte 2
0021DEr 3  02                   .byte 2
0021DFr 3  02                   .byte 2
0021E0r 3  02                   .byte 2
0021E1r 3  02                   .byte 2
0021E2r 3  02                   .byte 2
0021E3r 3  00                   .byte 0
0021E4r 3  00                   .byte 0
0021E5r 3  02                   .byte 2
0021E6r 3  02                   .byte 2
0021E7r 3  02                   .byte 2
0021E8r 3  02                   .byte 2
0021E9r 3  02                   .byte 2
0021EAr 3  00                   .byte 0
0021EBr 3  00                   .byte 0
0021ECr 3  00                   .byte 0
0021EDr 3  00                   .byte 0
0021EEr 3  05                   .byte 5
0021EFr 3  00                   .byte 0
0021F0r 3  00                   .byte 0
0021F1r 3  00                   .byte 0
0021F2r 3  00                   .byte 0
0021F3r 3  00                   .byte 0
0021F4r 3  00                   .byte 0
0021F5r 3  00                   .byte 0
0021F6r 3  00                   .byte 0
0021F7r 3  00                   .byte 0
0021F8r 3  00                   .byte 0
0021F9r 3  00                   .byte 0
0021FAr 3  00                   .byte 0
0021FBr 3  00                   .byte 0
0021FCr 3  00                   .byte 0
0021FDr 3  00                   .byte 0
0021FEr 3               sprgfx:
0021FEr 3  43 BC E4 02          .byte 67,188,228,2,171,177,234,77,171,93,231,254,162,246,225,12,161,248,239,159,91,111,49,249,1,240,1,152,3,24,12,6
002202r 3  AB B1 EA 4D  
002206r 3  AB 5D E7 FE  
00221Er 3  10 EF B9 00          .byte 16,239,185,0,106,236,122,147,106,215,185,255,168,189,56,67,40,126,251,231,214,219,76,126,0,124,0,102,0,198,131,1
002222r 3  6A EC 7A 93  
002226r 3  6A D7 B9 FF  
00223Er 3  C4 3B 2E 40          .byte 196,59,46,64,26,187,222,164,218,181,238,127,106,47,206,16,138,31,254,249,245,182,147,31,0,31,128,25,128,49,96,192
002242r 3  1A BB DE A4  
002246r 3  DA B5 EE 7F  
00225Er 3  F1 0E 0B 90          .byte 241,14,11,144,198,174,55,169,118,173,251,159,218,139,51,132,226,135,127,190,189,109,228,199,192,7,96,6,96,12,24,48
002262r 3  C6 AE 37 A9  
002266r 3  76 AD FB 9F  
00227Er 3  03 BC 44 02          .byte 3,188,68,2,235,177,170,77,235,93,167,254,226,166,161,156,225,251,175,159,235,110,89,248,49,240,1,152,3,24,3,12
002282r 3  EB B1 AA 4D  
002286r 3  EB 5D A7 FE  
00229Er 3  00 EF 91 00          .byte 0,239,145,0,122,236,106,147,122,215,169,255,184,169,40,103,248,126,235,231,186,219,22,126,12,124,0,102,0,198,0,195
0022A2r 3  7A EC 6A 93  
0022A6r 3  7A D7 A9 FF  
0022BEr 3  C0 3B 24 40          .byte 192,59,36,64,30,187,218,164,222,181,234,127,110,42,202,25,190,31,250,249,238,182,133,159,3,31,128,25,128,49,192,48
0022C2r 3  1E BB DA A4  
0022C6r 3  DE B5 EA 7F  
0022DEr 3  F0 0E 09 10          .byte 240,14,9,16,199,174,54,169,119,173,250,159,155,138,114,134,239,135,126,190,187,173,225,103,192,199,96,6,96,12,48,12
0022E2r 3  C7 AE 36 A9  
0022E6r 3  77 AD FA 9F  
0022FEr 3  00 BC 02 01          .byte 0,188,2,1,3,128,2,76,3,125,3,254,2,166,3,156,3,248,108,31,58,191,1,249,1,243,1,152,3,24,12,6
002302r 3  03 80 02 4C  
002306r 3  03 7D 03 FE  
00231Er 3  00 2F 40 80          .byte 0,47,64,128,0,224,0,147,64,223,128,255,128,169,0,231,0,254,219,7,206,175,64,126,192,124,0,102,0,198,131,1
002322r 3  00 E0 00 93  
002326r 3  40 DF 80 FF  
00233Er 3  C0 0B 10 20          .byte 192,11,16,32,0,56,192,36,208,55,224,63,96,42,192,57,128,63,246,193,243,171,144,31,48,31,128,25,128,49,96,192
002342r 3  00 38 C0 24  
002346r 3  D0 37 E0 3F  
00235Er 3  F0 02 04 08          .byte 240,2,4,8,0,14,48,9,244,13,248,15,152,10,112,14,224,15,125,176,252,234,228,7,204,7,96,6,96,12,24,48
002362r 3  00 0E 30 09  
002366r 3  F4 0D F8 0F  
00237Er 3  3D 00 80 40          .byte 61,0,128,64,1,192,50,64,190,192,127,192,101,64,57,192,31,192,248,54,253,92,159,128,207,128,25,128,24,192,96,48
002382r 3  01 C0 32 40  
002386r 3  BE C0 7F C0  
00239Er 3  0F 40 20 10          .byte 15,64,32,16,0,112,12,144,47,176,31,240,25,80,14,112,7,240,190,13,63,87,39,224,51,224,6,96,6,48,24,12
0023A2r 3  00 70 0C 90  
0023A6r 3  2F B0 1F F0  
0023BEr 3  03 D0 08 04          .byte 3,208,8,4,0,28,3,36,11,236,7,252,6,84,3,156,1,252,111,131,207,213,9,248,12,248,1,152,1,140,6,3
0023C2r 3  00 1C 03 24  
0023C6r 3  0B EC 07 FC  
0023DEr 3  00 F4 02 01          .byte 0,244,2,1,0,7,0,201,2,251,1,255,1,149,0,231,0,127,219,224,115,245,2,126,3,62,0,102,0,99,193,128
0023E2r 3  00 07 00 C9  
0023E6r 3  02 FB 01 FF  
0023FEr 3  02 F8 08 04          .byte 2,248,8,4,14,196,9,48,13,116,15,248,14,184,14,112,15,224,126,124,237,188,7,231,7,192,6,96,12,96,48,24
002402r 3  0E C4 09 30  
002406r 3  0D 74 0F F8  
00241Er 3  00 BE 02 01          .byte 0,190,2,1,3,177,2,76,3,93,3,254,3,174,3,156,3,248,31,159,59,111,193,249,1,240,1,152,3,24,12,6
002422r 3  03 B1 02 4C  
002426r 3  03 5D 03 FE  
00243Er 3  80 2F 40 80          .byte 128,47,64,128,64,236,0,147,64,215,128,255,128,235,0,231,0,254,199,231,206,219,112,126,0,124,0,102,0,198,131,1
002442r 3  40 EC 00 93  
002446r 3  40 D7 80 FF  
00245Er 3  E0 0B 10 20          .byte 224,11,16,32,16,59,192,36,208,53,224,63,224,58,192,57,128,63,241,249,243,182,156,31,0,31,128,25,128,49,96,192
002462r 3  10 3B C0 24  
002466r 3  D0 35 E0 3F  
00247Er 3  04 10 42 F0          .byte 4,16,66,240,4,8,142,0,15,228,45,116,14,120,14,184,8,26,15,224,24,24,237,188,14,124,7,192,3,192,12,96
002482r 3  04 08 8E 00  
002486r 3  0F E4 2D 74  
00249Er 3  01 04 10 BC          .byte 1,4,16,188,1,2,35,128,3,249,11,93,3,158,3,174,130,6,3,248,6,6,59,111,3,159,1,240,0,240,3,24
0024A2r 3  01 02 23 80  
0024A6r 3  03 F9 0B 5D  
0024BEr 3  00 41 04 2F          .byte 0,65,4,47,128,64,8,224,64,254,66,215,128,231,128,235,160,129,0,254,129,129,206,219,192,231,0,124,0,60,0,198
0024C2r 3  80 40 08 E0  
0024C6r 3  40 FE 42 D7  
0024DEr 3  40 10 C1 0B          .byte 64,16,193,11,32,16,2,56,144,63,208,181,224,57,224,58,104,32,128,63,96,96,243,182,240,57,0,31,0,15,128,49
0024E2r 3  20 10 02 38  
0024E6r 3  90 3F D0 B5  
0024FEr 3  04 20 10 00          .byte 4,32,16,0,0,2,4,8,8,4,47,228,9,48,14,120,47,249,12,58,14,112,24,24,126,124,14,124,7,231,3,192
002502r 3  00 02 04 08  
002506r 3  08 04 2F E4  
00251Er 3  01 08 04 00          .byte 1,8,4,0,128,0,1,2,2,1,11,249,2,76,3,158,75,254,131,14,3,156,6,6,31,159,3,159,193,249,0,240
002522r 3  80 00 01 02  
002526r 3  02 01 0B F9  
00253Er 3  00 42 01 00          .byte 0,66,1,0,32,0,128,64,64,128,66,254,0,147,128,231,146,255,160,195,0,231,129,129,199,231,192,231,112,126,0,60
002542r 3  20 00 80 40  
002546r 3  40 80 42 FE  
00255Er 3  80 10 00 40          .byte 128,16,0,64,8,0,32,16,16,32,144,191,192,36,224,57,228,191,232,48,192,57,96,96,241,249,240,57,156,31,0,15
002562r 3  08 00 20 10  
002566r 3  10 20 90 BF  
00257Er 3  00 08 00 00          .byte 0,8,0,0,33,8,0,66,64,0,4,8,40,4,15,228,9,48,78,120,15,248,12,56,10,80,24,24,126,124,14,124
002582r 3  21 08 00 42  
002586r 3  40 00 04 08  
00259Er 3  00 02 00 00          .byte 0,2,0,0,8,66,128,16,16,0,1,2,10,1,3,249,2,76,19,158,3,254,3,14,2,148,6,6,31,159,3,159
0025A2r 3  08 42 80 10  
0025A6r 3  10 00 01 02  
0025BEr 3  80 00 00 00          .byte 128,0,0,0,130,16,32,4,4,0,128,64,66,128,64,254,0,147,132,231,128,255,128,195,0,165,129,129,199,231,192,231
0025C2r 3  82 10 20 04  
0025C6r 3  04 00 80 40  
0025DEr 3  20 00 00 00          .byte 32,0,0,0,32,132,8,1,1,0,32,16,16,160,144,63,192,36,225,57,224,63,224,48,64,41,96,96,241,249,240,57
0025E2r 3  20 84 08 01  
0025E6r 3  01 00 20 10  
0025FEr 3  00 00 10 50          .byte 0,0,16,80,0,0,0,32,33,2,8,0,64,0,18,240,132,8,46,0,15,228,13,116,14,120,15,248,12,56,15,224
002602r 3  00 00 00 20  
002606r 3  21 02 08 00  
00261Er 3  00 00 04 14          .byte 0,0,4,20,0,0,0,8,136,64,2,0,16,0,4,188,33,2,11,128,3,249,3,93,3,158,3,254,3,14,3,248
002622r 3  00 00 00 08  
002626r 3  88 40 02 00  
00263Er 3  00 00 01 05          .byte 0,0,1,5,0,0,0,2,34,16,0,128,4,0,1,47,136,64,2,224,64,254,64,215,128,231,128,255,128,195,0,254
002642r 3  00 00 00 02  
002646r 3  22 10 00 80  
00265Er 3  00 00 40 41          .byte 0,0,64,65,0,0,128,0,8,132,0,32,1,0,192,75,34,16,0,184,144,63,208,53,224,57,224,63,224,48,128,63
002662r 3  00 00 80 00  
002666r 3  08 84 00 20  
00267Er 3  3F F0 F5 FC          .byte 63,240,245,252,223,124,207,60,182,220,203,56,249,248,255,248,117,112,21,66,47,197,110,173,12,253,96,202,97,204,3,130
002682r 3  DF 7C CF 3C  
002686r 3  B6 DC CB 38  
00269Er 3  0F FC 3D 7F          .byte 15,252,61,127,55,223,51,207,45,183,50,206,62,126,63,254,29,92,133,80,75,241,91,171,67,63,152,50,24,115,128,224
0026A2r 3  37 DF 33 CF  
0026A6r 3  2D B7 32 CE  
0026BEr 3  03 FF CF 5F          .byte 3,255,207,95,205,247,204,243,203,109,140,179,143,159,143,255,7,87,33,84,82,252,214,234,208,207,166,12,198,28,32,56
0026C2r 3  CD F7 CC F3  
0026C6r 3  CB 6D 8C B3  
0026DEr 3  C0 FF F3 D7          .byte 192,255,243,215,243,125,243,60,114,219,227,44,227,231,227,255,193,213,8,85,20,191,181,186,244,51,41,131,49,135,8,14
0026E2r 3  F3 7D F3 3C  
0026E6r 3  72 DB E3 2C  
0026FEr 3  3F F0 F5 FC          .byte 63,240,245,252,223,124,207,60,134,28,203,56,249,248,255,248,117,112,21,66,15,197,114,173,110,253,97,200,96,12,64,12
002702r 3  DF 7C CF 3C  
002706r 3  86 1C CB 38  
00271Er 3  0F FC 3D 7F          .byte 15,252,61,127,55,223,51,207,33,135,50,206,62,126,63,254,29,92,133,80,67,241,92,171,91,191,24,114,24,3,16,3
002722r 3  37 DF 33 CF  
002726r 3  21 87 32 CE  
00273Er 3  03 FF CF 5F          .byte 3,255,207,95,205,247,204,243,200,97,140,179,143,159,143,255,7,87,33,84,80,252,215,42,214,239,134,28,198,0,196,0
002742r 3  CD F7 CC F3  
002746r 3  C8 61 8C B3  
00275Er 3  C0 FF F3 D7          .byte 192,255,243,215,243,125,243,60,114,24,227,44,227,231,227,255,193,213,8,85,20,63,181,202,245,187,33,135,49,128,49,0
002762r 3  F3 7D F3 3C  
002766r 3  72 18 E3 2C  
00277Er 3  0F FC 3F AF          .byte 15,252,63,175,62,251,60,243,59,109,28,211,31,159,31,255,14,174,66,168,163,244,181,118,191,48,83,6,51,134,65,192
002782r 3  3E FB 3C F3  
002786r 3  3B 6D 1C D3  
00279Er 3  03 FF CF EB          .byte 3,255,207,235,207,190,207,60,78,219,199,52,199,231,199,255,131,171,16,170,40,253,173,93,47,204,148,193,140,225,16,112
0027A2r 3  CF BE CF 3C  
0027A6r 3  4E DB C7 34  
0027BEr 3  C0 FF F3 FA          .byte 192,255,243,250,179,239,51,207,211,182,49,205,241,249,241,255,224,234,132,42,74,63,107,87,11,243,101,48,99,56,4,28
0027C2r 3  B3 EF 33 CF  
0027C6r 3  D3 B6 31 CD  
0027DEr 3  F0 3F BC FE          .byte 240,63,188,254,236,251,204,243,180,237,76,115,124,126,252,127,184,58,161,10,210,143,218,213,194,252,25,76,24,206,1,7
0027E2r 3  EC FB CC F3  
0027E6r 3  B4 ED 4C 73  
0027FEr 3  0F FC 3F AF          .byte 15,252,63,175,62,251,60,243,56,97,28,211,31,159,31,255,14,174,66,168,163,240,181,78,191,118,19,134,48,6,48,2
002802r 3  3E FB 3C F3  
002806r 3  38 61 1C D3  
00281Er 3  03 FF CF EB          .byte 3,255,207,235,207,190,207,60,78,24,199,52,199,231,199,255,131,171,16,170,40,252,173,83,175,221,132,225,140,1,140,0
002822r 3  CF BE CF 3C  
002826r 3  4E 18 C7 34  
00283Er 3  C0 FF F3 FA          .byte 192,255,243,250,179,239,51,207,19,134,49,205,241,249,241,255,224,234,132,42,10,63,235,84,107,247,97,56,99,0,35,0
002842r 3  B3 EF 33 CF  
002846r 3  13 86 31 CD  
00285Er 3  F0 3F BC FE          .byte 240,63,188,254,236,251,204,243,132,225,76,115,124,126,252,127,184,58,161,10,194,143,58,213,218,253,24,78,24,192,8,192
002862r 3  EC FB CC F3  
002866r 3  84 E1 4C 73  
00287Er 3  0A 94 00 B4          .byte 10,148,0,180,127,90,204,86,191,170,140,44,253,232,243,232,255,224,127,128,30,80,101,88,12,236,96,236,96,8,67,48
002882r 3  7F 5A CC 56  
002886r 3  BF AA 8C 2C  
00289Er 3  02 A5 00 2D          .byte 2,165,0,45,159,214,179,21,175,234,35,11,63,122,60,250,63,248,31,224,7,148,25,86,3,59,24,59,24,2,16,204
0028A2r 3  9F D6 B3 15  
0028A6r 3  AF EA 23 0B  
0028BEr 3  40 A9 40 0B          .byte 64,169,64,11,167,245,108,197,171,250,200,194,143,222,143,62,15,254,7,248,1,229,134,85,192,206,198,14,134,0,4,51
0028C2r 3  A7 F5 6C C5  
0028C6r 3  AB FA C8 C2  
0028DEr 3  50 2A D0 02          .byte 80,42,208,2,105,253,91,49,170,254,178,48,163,247,163,207,131,255,1,254,64,121,97,149,176,51,177,131,33,128,193,12
0028E2r 3  69 FD 5B 31  
0028E6r 3  AA FE B2 30  
0028FEr 3  0A 94 00 B4          .byte 10,148,0,180,127,90,204,86,191,170,173,44,253,232,243,232,255,224,127,128,30,80,53,88,4,236,48,232,48,160,32,72
002902r 3  7F 5A CC 56  
002906r 3  BF AA AD 2C  
00291Er 3  02 A5 00 2D          .byte 2,165,0,45,159,214,179,21,175,234,43,75,63,122,60,250,63,248,31,224,7,148,13,86,1,59,12,58,12,40,8,18
002922r 3  9F D6 B3 15  
002926r 3  AF EA 2B 4B  
00293Er 3  40 A9 40 0B          .byte 64,169,64,11,167,245,108,197,171,250,202,210,143,222,143,62,15,254,7,248,1,229,131,85,192,78,131,14,3,10,130,4
002942r 3  A7 F5 6C C5  
002946r 3  AB FA CA D2  
00295Er 3  50 2A D0 02          .byte 80,42,208,2,105,253,91,49,170,254,178,180,163,247,163,207,131,255,1,254,64,121,96,213,176,19,160,195,128,194,32,129
002962r 3  69 FD 5B 31  
002966r 3  AA FE B2 B4  
00297Er 3  29 50 2D 00          .byte 41,80,45,0,90,254,106,51,85,253,52,49,23,191,23,207,7,255,1,254,10,120,26,166,55,48,55,6,16,6,12,194
002982r 3  5A FE 6A 33  
002986r 3  55 FD 34 31  
00299Er 3  0A 54 0B 40          .byte 10,84,11,64,150,191,218,140,85,127,77,12,197,239,197,243,193,255,128,127,2,158,134,169,13,204,141,193,132,1,131,48
0029A2r 3  96 BF DA 8C  
0029A6r 3  55 7F 4D 0C  
0029BEr 3  02 95 02 D0          .byte 2,149,2,208,229,175,54,163,213,95,19,67,241,123,241,124,240,127,224,31,128,167,97,170,3,115,99,112,97,0,32,204
0029C2r 3  E5 AF 36 A3  
0029C6r 3  D5 5F 13 43  
0029DEr 3  40 A5 00 B4          .byte 64,165,0,180,249,107,205,168,245,87,196,208,252,94,60,95,252,31,248,7,224,41,152,106,192,220,24,220,24,64,8,51
0029E2r 3  F9 6B CD A8  
0029E6r 3  F5 57 C4 D0  
0029FEr 3  29 50 2D 00          .byte 41,80,45,0,90,254,106,51,85,253,52,181,23,191,23,207,7,255,1,254,10,120,26,172,55,32,23,12,5,12,18,4
002A02r 3  5A FE 6A 33  
002A06r 3  55 FD 34 B5  
002A1Er 3  0A 54 0B 40          .byte 10,84,11,64,150,191,218,140,85,127,77,45,197,239,197,243,193,255,128,127,2,158,6,171,13,200,5,195,1,67,4,129
002A22r 3  96 BF DA 8C  
002A26r 3  55 7F 4D 2D  
002A3Er 3  02 95 02 D0          .byte 2,149,2,208,229,175,54,163,213,95,83,75,241,123,241,124,240,127,224,31,128,167,193,170,3,114,193,112,192,80,65,32
002A42r 3  E5 AF 36 A3  
002A46r 3  D5 5F 53 4B  
002A5Er 3  40 A5 00 B4          .byte 64,165,0,180,249,107,205,168,245,87,212,210,252,94,60,95,252,31,248,7,224,41,176,106,128,220,48,92,48,20,16,72
002A62r 3  F9 6B CD A8  
002A66r 3  F5 57 D4 D2  
002A7Er 3  07 60 0F F8          .byte 7,96,15,248,0,0,127,255,0,0,1,10,43,92,60,244,31,208,4,248,3,240,124,0,169,248,164,248,145,204,0,28
002A82r 3  00 00 7F FF  
002A86r 3  00 00 01 0A  
002A9Er 3  01 D8 03 FE          .byte 1,216,3,254,0,0,223,255,0,0,128,66,10,215,15,61,7,244,1,62,0,252,31,0,42,126,41,62,36,115,0,7
002AA2r 3  00 00 DF FF  
002AA6r 3  00 00 80 42  
002ABEr 3  00 76 80 FF          .byte 0,118,128,255,0,0,247,255,0,0,160,16,194,181,67,207,1,253,128,79,0,63,7,192,138,159,138,79,201,28,192,1
002AC2r 3  00 00 F7 FF  
002AC6r 3  00 00 A0 10  
002ADEr 3  80 1D E0 3F          .byte 128,29,224,63,0,0,253,255,0,0,40,4,112,173,208,243,64,127,224,19,192,15,1,240,226,167,226,147,50,71,112,0
002AE2r 3  00 00 FD FF  
002AE6r 3  00 00 28 04  
002AFEr 3  07 60 0F F8          .byte 7,96,15,248,0,0,127,255,0,0,1,10,43,92,60,244,31,208,4,120,3,240,124,0,169,248,145,204,64,220,1,192
002B02r 3  00 00 7F FF  
002B06r 3  00 00 01 0A  
002B1Er 3  01 D8 03 FE          .byte 1,216,3,254,0,0,223,255,0,0,128,66,10,215,15,61,7,244,1,30,0,252,31,0,42,126,36,115,16,55,0,112
002B22r 3  00 00 DF FF  
002B26r 3  00 00 80 42  
002B3Er 3  00 76 80 FF          .byte 0,118,128,255,0,0,247,255,0,0,160,16,194,181,67,207,1,253,128,71,0,63,7,192,138,159,201,28,196,13,0,28
002B42r 3  00 00 F7 FF  
002B46r 3  00 00 A0 10  
002B5Er 3  80 1D E0 3F          .byte 128,29,224,63,0,0,253,255,0,0,40,4,112,173,208,243,64,127,224,17,192,15,1,240,226,167,50,71,113,3,0,7
002B62r 3  00 00 FD FF  
002B66r 3  00 00 28 04  
002B7Er 3  06 E0 1F F0          .byte 6,224,31,240,0,0,255,254,0,0,80,128,58,212,47,60,11,248,31,32,15,192,0,62,31,149,31,37,51,137,56,0
002B82r 3  00 00 FF FE  
002B86r 3  00 00 50 80  
002B9Er 3  01 B8 07 FC          .byte 1,184,7,252,0,0,191,255,0,0,20,32,14,181,11,207,2,254,7,200,3,240,128,15,71,229,71,201,76,226,14,0
002BA2r 3  00 00 BF FF  
002BA6r 3  00 00 14 20  
002BBEr 3  00 6E 01 FF          .byte 0,110,1,255,0,0,239,255,0,0,5,8,67,173,194,243,128,191,1,242,0,252,224,3,81,249,81,242,147,56,3,128
002BC2r 3  00 00 EF FF  
002BC6r 3  00 00 05 08  
002BDEr 3  80 1B C0 7F          .byte 128,27,192,127,0,0,251,255,0,0,1,66,80,235,240,188,224,47,128,124,0,63,248,0,84,126,148,124,36,206,0,224
002BE2r 3  00 00 FB FF  
002BE6r 3  00 00 01 42  
002BFEr 3  06 E0 1F F0          .byte 6,224,31,240,0,0,255,254,0,0,80,128,58,212,47,60,11,248,30,32,15,192,0,62,31,149,51,137,59,2,3,128
002C02r 3  00 00 FF FE  
002C06r 3  00 00 50 80  
002C1Er 3  01 B8 07 FC          .byte 1,184,7,252,0,0,191,255,0,0,20,32,14,181,11,207,2,254,7,136,3,240,128,15,71,229,76,226,142,192,0,224
002C22r 3  00 00 BF FF  
002C26r 3  00 00 14 20  
002C3Er 3  00 6E 01 FF          .byte 0,110,1,255,0,0,239,255,0,0,5,8,67,173,194,243,128,191,1,226,0,252,224,3,81,249,147,56,35,176,0,56
002C42r 3  00 00 EF FF  
002C46r 3  00 00 05 08  
002C5Er 3  80 1B C0 7F          .byte 128,27,192,127,0,0,251,255,0,0,1,66,80,235,240,188,224,47,128,120,0,63,248,0,84,126,36,206,8,236,0,14
002C62r 3  00 00 FB FF  
002C66r 3  00 00 01 42  
002C7Er 3  04 88 BE E2          .byte 4,136,190,226,127,172,195,111,210,60,70,60,43,114,63,232,49,220,31,182,0,54,8,111,12,99,0,52,4,146,0,9
002C82r 3  7F AC C3 6F  
002C86r 3  D2 3C 46 3C  
002C9Er 3  01 22 AF B8          .byte 1,34,175,184,31,235,240,219,52,143,17,143,138,220,15,250,12,119,135,237,128,13,194,27,195,24,0,13,129,36,64,2
002CA2r 3  1F EB F0 DB  
002CA6r 3  34 8F 11 8F  
002CBEr 3  80 48 2B EE          .byte 128,72,43,238,199,250,252,54,205,35,196,99,34,183,131,254,195,29,97,251,96,3,240,134,48,198,64,3,32,73,144,0
002CC2r 3  C7 FA FC 36  
002CC6r 3  CD 23 C4 63  
002CDEr 3  20 12 8A FB          .byte 32,18,138,251,177,254,191,13,243,72,241,24,200,173,160,255,112,199,216,126,216,0,188,33,140,49,208,0,72,18,36,0
002CE2r 3  B1 FE BF 0D  
002CE6r 3  F3 48 F1 18  
002CFEr 3  04 88 BE E2          .byte 4,136,190,226,127,172,254,47,211,252,70,60,43,114,63,232,49,220,31,182,0,54,8,111,12,99,0,52,4,146,0,96
002D02r 3  7F AC FE 2F  
002D06r 3  D3 FC 46 3C  
002D1Er 3  01 22 AF B8          .byte 1,34,175,184,31,235,255,139,52,255,17,143,138,220,15,250,12,119,135,237,128,13,194,27,195,24,0,13,129,36,0,24
002D22r 3  1F EB FF 8B  
002D26r 3  34 FF 11 8F  
002D3Er 3  80 48 2B EE          .byte 128,72,43,238,199,250,255,226,205,63,196,99,34,183,131,254,195,29,97,251,96,3,240,134,48,198,64,3,32,73,0,6
002D42r 3  C7 FA FF E2  
002D46r 3  CD 3F C4 63  
002D5Er 3  20 12 8A FB          .byte 32,18,138,251,177,254,191,248,243,79,241,24,200,173,160,255,112,199,216,126,216,0,188,33,140,49,208,0,72,18,128,1
002D62r 3  B1 FE BF F8  
002D66r 3  F3 4F F1 18  
002D7Er 3  11 20 47 7D          .byte 17,32,71,125,53,254,246,195,60,75,60,98,78,212,23,252,59,140,109,248,108,0,246,16,198,48,44,0,73,32,144,0
002D82r 3  35 FE F6 C3  
002D86r 3  3C 4B 3C 62  
002D9Er 3  04 48 51 DF          .byte 4,72,81,223,141,127,253,176,207,18,143,24,19,181,5,255,14,227,27,126,27,0,61,132,49,140,11,0,18,72,36,0
002DA2r 3  8D 7F FD B0  
002DA6r 3  CF 12 8F 18  
002DBEr 3  01 12 D4 77          .byte 1,18,212,119,227,95,63,108,179,196,35,198,68,237,193,127,195,184,134,223,6,192,15,97,12,99,2,192,4,146,9,0
002DC2r 3  E3 5F 3F 6C  
002DC6r 3  B3 C4 23 C6  
002DDEr 3  80 44 F5 1D          .byte 128,68,245,29,248,215,15,219,44,241,136,241,81,59,240,95,48,238,225,183,1,176,67,216,195,24,0,176,129,36,2,64
002DE2r 3  F8 D7 0F DB  
002DE6r 3  2C F1 88 F1  
002DFEr 3  11 20 47 7D          .byte 17,32,71,125,53,254,244,127,63,203,60,98,78,212,23,252,59,140,109,248,108,0,246,16,198,48,44,0,73,32,6,0
002E02r 3  35 FE F4 7F  
002E06r 3  3F CB 3C 62  
002E1Er 3  04 48 51 DF          .byte 4,72,81,223,141,127,253,31,207,242,143,24,19,181,5,255,14,227,27,126,27,0,61,132,49,140,11,0,18,72,1,128
002E22r 3  8D 7F FD 1F  
002E26r 3  CF F2 8F 18  
002E3Er 3  01 12 D4 77          .byte 1,18,212,119,227,95,255,71,179,252,35,198,68,237,193,127,195,184,134,223,6,192,15,97,12,99,2,192,4,146,0,96
002E42r 3  E3 5F FF 47  
002E46r 3  B3 FC 23 C6  
002E5Er 3  80 44 F5 1D          .byte 128,68,245,29,248,215,255,209,44,255,136,241,81,59,240,95,48,238,225,183,1,176,67,216,195,24,0,176,129,36,0,24
002E62r 3  F8 D7 FF D1  
002E66r 3  2C FF 88 F1  
002E7Er 3  03 C0 3F F8          .byte 3,192,63,248,9,0,127,252,99,30,0,16,63,254,63,254,0,32,12,120,19,180,0,8,57,26,38,98,6,98,1,32
002E82r 3  09 00 7F FC  
002E86r 3  63 1E 00 10  
002E9Er 3  00 F0 0F FE          .byte 0,240,15,254,2,64,31,255,152,199,0,4,143,255,143,255,0,8,3,30,4,237,0,2,142,70,137,152,129,152,0,72
002EA2r 3  02 40 1F FF  
002EA6r 3  98 C7 00 04  
002EBEr 3  00 3C 83 FF          .byte 0,60,131,255,0,144,199,255,230,49,0,1,227,255,227,255,0,2,128,199,65,59,128,0,163,145,34,102,32,102,0,18
002EC2r 3  00 90 C7 FF  
002EC6r 3  E6 31 00 01  
002EDEr 3  00 0F E0 FF          .byte 0,15,224,255,0,36,241,255,121,140,64,0,248,255,248,255,128,0,224,49,208,78,32,0,104,228,136,153,136,25,128,4
002EE2r 3  00 24 F1 FF  
002EE6r 3  79 8C 40 00  
002EFEr 3  03 C0 3F F8          .byte 3,192,63,248,9,0,127,252,99,30,0,16,63,254,63,254,0,32,14,120,19,180,0,8,25,26,14,96,2,96,12,48
002F02r 3  09 00 7F FC  
002F06r 3  63 1E 00 10  
002F1Er 3  00 F0 0F FE          .byte 0,240,15,254,2,64,31,255,152,199,0,4,143,255,143,255,0,8,3,158,4,237,0,2,134,70,3,152,0,152,3,12
002F22r 3  02 40 1F FF  
002F26r 3  98 C7 00 04  
002F3Er 3  00 3C 83 FF          .byte 0,60,131,255,0,144,199,255,230,49,0,1,227,255,227,255,0,2,128,231,65,59,128,0,161,145,0,230,0,38,0,195
002F42r 3  00 90 C7 FF  
002F46r 3  E6 31 00 01  
002F5Er 3  00 0F E0 FF          .byte 0,15,224,255,0,36,241,255,121,140,64,0,248,255,248,255,128,0,224,57,208,78,32,0,104,100,128,57,128,9,192,48
002F62r 3  00 24 F1 FF  
002F66r 3  79 8C 40 00  
002F7Er 3  03 C0 1F FC          .byte 3,192,31,252,0,144,63,254,120,198,8,0,127,252,127,252,4,0,30,48,45,200,16,0,88,156,70,100,70,96,4,128
002F82r 3  00 90 3F FE  
002F86r 3  78 C6 08 00  
002F9Er 3  00 F0 07 FF          .byte 0,240,7,255,0,36,143,255,158,49,2,0,31,255,31,255,1,0,7,140,11,114,4,0,22,39,17,153,17,152,1,32
002FA2r 3  00 24 8F FF  
002FA6r 3  9E 31 02 00  
002FBEr 3  00 3C C1 FF          .byte 0,60,193,255,0,9,227,255,103,140,0,128,199,255,199,255,0,64,1,227,130,220,1,0,197,137,68,102,4,102,0,72
002FC2r 3  00 09 E3 FF  
002FC6r 3  67 8C 00 80  
002FDEr 3  00 0F F0 7F          .byte 0,15,240,127,64,2,248,255,25,227,0,32,241,255,241,255,0,16,192,120,32,183,0,64,113,98,145,25,129,25,0,18
002FE2r 3  40 02 F8 FF  
002FE6r 3  19 E3 00 20  
002FFEr 3  03 C0 1F FC          .byte 3,192,31,252,0,144,63,254,120,198,8,0,127,252,127,252,4,0,30,112,45,200,16,0,88,152,6,112,6,64,12,48
003002r 3  00 90 3F FE  
003006r 3  78 C6 08 00  
00301Er 3  00 F0 07 FF          .byte 0,240,7,255,0,36,143,255,158,49,2,0,31,255,31,255,1,0,7,156,11,114,4,0,22,38,1,156,1,144,3,12
003022r 3  00 24 8F FF  
003026r 3  9E 31 02 00  
00303Er 3  00 3C C1 FF          .byte 0,60,193,255,0,9,227,255,103,140,0,128,199,255,199,255,0,64,1,231,130,220,1,0,133,137,0,103,0,100,0,195
003042r 3  00 09 E3 FF  
003046r 3  67 8C 00 80  
00305Er 3  00 0F F0 7F          .byte 0,15,240,127,64,2,248,255,25,227,0,32,241,255,241,255,0,16,192,121,32,183,0,64,97,98,192,25,0,25,192,48
003062r 3  40 02 F8 FF  
003066r 3  19 E3 00 20  
00307Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003082r 3  00 00 00 00  
003086r 3  00 00 00 00  
00309Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0030A2r 3  00 00 00 00  
0030A6r 3  00 00 00 00  
0030BEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0030C2r 3  00 00 00 00  
0030C6r 3  00 00 00 00  
0030DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0030E2r 3  00 00 00 00  
0030E6r 3  00 00 00 00  
0030FEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,192,0,192,0,85,85,0,0,0,0,0,0
003102r 3  00 00 00 00  
003106r 3  00 00 00 00  
00311Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,48,0,48,0,85,85,0,0,0,0,0,0
003122r 3  00 00 00 00  
003126r 3  00 00 00 00  
00313Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,12,0,12,0,85,85,0,0,0,0,0,0
003142r 3  00 00 00 00  
003146r 3  00 00 00 00  
00315Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,3,0,3,0,85,85,0,0,0,0,0,0
003162r 3  00 00 00 00  
003166r 3  00 00 00 00  
00317Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,170,192,0,192,0,106,170,0,0,0,0,0,0
003182r 3  00 00 00 00  
003186r 3  00 00 00 00  
00319Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,170,48,0,48,0,154,170,0,0,0,0,0,0
0031A2r 3  00 00 00 00  
0031A6r 3  00 00 00 00  
0031BEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,170,12,0,12,0,166,170,0,0,0,0,0,0
0031C2r 3  00 00 00 00  
0031C6r 3  00 00 00 00  
0031DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,170,3,0,3,0,169,170,0,0,0,0,0,0
0031E2r 3  00 00 00 00  
0031E6r 3  00 00 00 00  
0031FEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,85,192,0,192,0,117,85,0,0,0,0,0,0
003202r 3  00 00 00 00  
003206r 3  00 00 00 00  
00321Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,85,48,0,48,0,93,85,0,0,0,0,0,0
003222r 3  00 00 00 00  
003226r 3  00 00 00 00  
00323Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,85,12,0,12,0,87,85,0,0,0,0,0,0
003242r 3  00 00 00 00  
003246r 3  00 00 00 00  
00325Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,213,3,0,3,0,85,213,0,0,0,0,0,0
003262r 3  00 00 00 00  
003266r 3  00 00 00 00  
00327Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,192,0,192,0,85,85,0,0,0,0,0,0
003282r 3  00 00 00 00  
003286r 3  00 00 00 00  
00329Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,48,0,48,0,85,85,0,0,0,0,0,0
0032A2r 3  00 00 00 00  
0032A6r 3  00 00 00 00  
0032BEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,12,0,12,0,85,85,0,0,0,0,0,0
0032C2r 3  00 00 00 00  
0032C6r 3  00 00 00 00  
0032DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,3,0,3,0,85,85,0,0,0,0,0,0
0032E2r 3  00 00 00 00  
0032E6r 3  00 00 00 00  
0032FEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,3,0,3,170,170,0,0,0,0,0,0
003302r 3  00 00 00 00  
003306r 3  00 00 00 00  
00331Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,192,0,192,0,170,170,0,0,0,0,0,0
003322r 3  00 00 00 00  
003326r 3  00 00 00 00  
00333Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,48,0,48,0,170,170,0,0,0,0,0,0
003342r 3  00 00 00 00  
003346r 3  00 00 00 00  
00335Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,12,0,12,0,170,170,0,0,0,0,0,0
003362r 3  00 00 00 00  
003366r 3  00 00 00 00  
00337Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,0,3,0,3,85,86,0,0,0,0,0,0
003382r 3  00 00 00 00  
003386r 3  00 00 00 00  
00339Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,85,192,0,192,0,149,85,0,0,0,0,0,0
0033A2r 3  00 00 00 00  
0033A6r 3  00 00 00 00  
0033BEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,85,48,0,48,0,101,85,0,0,0,0,0,0
0033C2r 3  00 00 00 00  
0033C6r 3  00 00 00 00  
0033DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,85,12,0,12,0,89,85,0,0,0,0,0,0
0033E2r 3  00 00 00 00  
0033E6r 3  00 00 00 00  
0033FEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,174,0,3,0,3,170,174,0,0,0,0,0,0
003402r 3  00 00 00 00  
003406r 3  00 00 00 00  
00341Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,171,192,0,192,0,170,171,0,0,0,0,0,0
003422r 3  00 00 00 00  
003426r 3  00 00 00 00  
00343Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,170,48,0,48,0,234,170,0,0,0,0,0,0
003442r 3  00 00 00 00  
003446r 3  00 00 00 00  
00345Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,170,12,0,12,0,186,170,0,0,0,0,0,0
003462r 3  00 00 00 00  
003466r 3  00 00 00 00  
00347Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,3,0,3,170,170,0,0,0,0,0,0
003482r 3  00 00 00 00  
003486r 3  00 00 00 00  
00349Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,192,0,192,0,170,170,0,0,0,0,0,0
0034A2r 3  00 00 00 00  
0034A6r 3  00 00 00 00  
0034BEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,48,0,48,0,170,170,0,0,0,0,0,0
0034C2r 3  00 00 00 00  
0034C6r 3  00 00 00 00  
0034DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,12,0,12,0,170,170,0,0,0,0,0,0
0034E2r 3  00 00 00 00  
0034E6r 3  00 00 00 00  
0034FEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,20,8,2,32,8,196,1,232,29,228,9,208,8,72,0,128,0,128,0,0,0,0
003502r 3  00 00 00 00  
003506r 3  00 00 14 08  
00351Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,2,0,136,2,49,0,122,7,121,2,116,2,18,0,32,0,32,0,0,0,0
003522r 3  00 00 00 00  
003526r 3  00 00 05 02  
00353Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,129,64,0,34,64,140,128,30,65,222,0,157,128,132,0,8,0,8,0,0,0,0
003542r 3  00 00 00 00  
003546r 3  00 00 81 40  
00355Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,32,80,128,8,16,35,160,7,144,119,64,39,32,33,0,2,0,2,0,0,0,0
003562r 3  00 00 00 00  
003566r 3  00 00 20 50  
00357Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,4,48,8,8,16,4,0,32,0,0,0,0,0,0,0,0,8,12,36,24,0,0,0,0,0
003582r 3  00 00 00 04  
003586r 3  30 08 08 10  
00359Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,1,12,2,2,4,1,0,8,0,0,0,0,0,0,0,0,2,3,9,6,0,0,0,0,0
0035A2r 3  00 00 00 01  
0035A6r 3  0C 02 02 04  
0035BEr 3  00 00 00 00          .byte 0,0,0,0,0,0,64,0,131,0,0,129,0,64,2,0,0,0,0,0,0,0,128,0,64,194,1,128,0,0,0,0
0035C2r 3  00 00 40 00  
0035C6r 3  83 00 00 81  
0035DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,16,0,32,192,64,32,0,16,0,128,0,0,0,0,0,0,32,0,144,48,0,96,0,0,0,0
0035E2r 3  00 00 10 00  
0035E6r 3  20 C0 40 20  
0035FEr 3               frmlst:
0035FEr 3  00 04                .byte 0,4
003600r 3  04 05                .byte 4,5
003602r 3  09 02                .byte 9,2
003604r 3  0B 02                .byte 11,2
003606r 3  0D 02                .byte 13,2
003608r 3  0F 02                .byte 15,2
00360Ar 3  11 02                .byte 17,2
00360Cr 3  13 02                .byte 19,2
00360Er 3  15 02                .byte 21,2
003610r 3  17 02                .byte 23,2
003612r 3  19 02                .byte 25,2
003614r 3  1B 02                .byte 27,2
003616r 3  1D 09                .byte 29,9
003618r 3  26 02 28 00          .byte 38,2,40,0
00361Cr 3               scdat:
00361Cr 3  FB 00 DC 00          .word 251,220
003620r 3  0B 2D 0B 0B          .byte 11,45,11,11,11,41,43,38,39,40,0,0,11,11,11,45,11,21,38,39,40,11,11,11,38,39,40,42,44,45,11,11,0,0
003624r 3  0B 29 2B 26  
003628r 3  27 28 00 00  
003642r 3  0B 0B 26 27          .byte 11,11,38,39,40,255,11,15,0,0,11,11,37,255,11,7,0,0,33,33,13,14,33,33,17,18,0,0,13,14,33,33,22
003646r 3  28 FF 0B 0F  
00364Ar 3  00 00 0B 0B  
003663r 3  21 21 21 FF          .byte 33,33,33,255,0,4,32,32,15,16,30,32,19,20,0,0,15,16,32,31,32,29,31,32,255,0,34,2,2,255,0,12,33,33
003667r 3  00 04 20 20  
00366Br 3  0F 10 1E 20  
003685r 3  0D 0E 21 21          .byte 13,14,33,33,13,14,0,0,255,33,4,13,14,33,33,255,0,4,30,31,15,16,32,30,15,16,0,0,31,29,32,32,15
003689r 3  0D 0E 00 00  
00368Dr 3  FF 21 04 0D  
0036A6r 3  10 20 20 FF          .byte 16,32,32,255,0,34,2,2,255,0,12,33,33,23,24,33,22,33,33,0,0,33,33,17,18,13,14,33,22,255,0,4,31
0036AAr 3  00 22 02 02  
0036AEr 3  FF 00 0C 21  
0036C7r 3  20 19 1A 1F          .byte 32,25,26,31,30,32,32,0,0,32,30,19,20,15,16,31,32,255,0,34,2,2,255,0,12,33,33,13,14,33,33,13,14
0036CBr 3  1E 20 20 00  
0036CFr 3  00 20 1E 13  
0036E8r 3  00 00 21 22          .byte 0,0,33,34,33,33,13,14,33,33,255,0,4,32,31,15,16,32,32,15,16,0,0,31,30,32,32,15,16,31,32,255,0,34
0036ECr 3  21 21 0D 0E  
0036F0r 3  21 21 FF 00  
00370Ar 3  02 02 FF 00          .byte 2,2,255,0,11,255,49,5,255,0,4,2,2,0,255,48,9
00370Er 3  0B FF 31 05  
003712r 3  FF 00 04 02  
00371Br 3  2F FF 00 14          .byte 47,255,0,20,47,50,255,0,4,48,48,255,0,14,50,51,255,0,4,48,48,255,0,14,51,46,255,0,4,11,11,255,0,14
00371Fr 3  2F 32 FF 00  
003723r 3  04 30 30 FF  
00373Dr 3  2E 2F FF 00          .byte 46,47,255,0,4,11,11,255,0,14,47,50,255,0,4,48,48,255,0,14,50,51,255,0,4,48,48,255,0,14,51,46,255,0,4
003741r 3  04 0B 0B FF  
003745r 3  00 0E 2F 32  
003760r 3  0B 0B FF 00          .byte 11,11,255,0,14,46,47,255,0,4,11,11,255,0,14,47,50,255,0,4,52,52,255,0,14,50,51,255,0,4,52,52,255,0,14
003764r 3  0E 2E 2F FF  
003768r 3  00 04 0B 0B  
003783r 3  33 2E FF 00          .byte 51,46,255,0,4,11,11,52,52,255,0,12,46,47,255,0,4,11,11,52,52,255,0,12,47,50,255,0,4,53,53,52,52
003787r 3  04 0B 0B 34  
00378Br 3  34 FF 00 0C  
0037A4r 3  FF 00 0C 32          .byte 255,0,12,50,51,255,0,4,53,53,52,52,255,0,12,51,46,255,0,4,11,11,255,0,14,46,47,255,0,4,11,11,255,0,14
0037A8r 3  33 FF 00 04  
0037ACr 3  35 35 34 34  
0037C7r 3  2F 2E 00 00          .byte 47,46,0,0,13,14,0,0,0,13,14,0,0,0,13,14,0,0,0,13,14,0,46,33,33,33,15,16,33,33,33,15,16
0037CBr 3  0D 0E 00 00  
0037CFr 3  00 0D 0E 00  
0037E8r 3  21 21 21 0F          .byte 33,33,33,15,16,33,33,33,15,16,33,33,255,31,22
0037ECr 3  10 21 21 21  
0037F0r 3  0F 10 21 21  
0037F7r 3               numsc:
0037F7r 3  02                   .byte 2
0037F8r 3               nmedat:
0037F8r 3  00 00 90 70          .byte 0,0,144,112,5,12,32,160,255
0037FCr 3  05 0C 20 A0  
003800r 3  FF           
003801r 3  06 07 18 28          .byte 6,7,24,40,6,5,56,40,6,3,88,40,6,9,120,40,0,12,8,144,6,13,104,56,255
003805r 3  06 05 38 28  
003809r 3  06 03 58 28  
00381Ar 3               NUMOBJ = 3
00381Ar 3               objdta:
00381Ar 3  0D 71 07 C0          .byte 13,113,7,192,27,224,61,216,62,220,14,188,54,124,58,120,60,112,0,108,0,92,0,60,0,120,0,112,0,108,0,92,1,254,160,76,254,160,76
00381Er 3  1B E0 3D D8  
003822r 3  3E DC 0E BC  
003841r 3  00 00 00 00          .byte 0,0,0,0,7,224,12,144,25,56,23,232,18,72,26,88,30,104,0,72,0,88,0,104,0,72,0,88,0,120,0,120,1,254,160,76,254,160,76
003845r 3  07 E0 0C 90  
003849r 3  19 38 17 E8  
003868r 3  00 00 00 00          .byte 0,0,0,0,1,0,1,0,3,128,3,128,3,128,127,252,31,240,7,192,6,192,12,96,9,32,17,16,1,0,0,0,1,254,8,93,254,8,93
00386Cr 3  01 00 01 00  
003870r 3  03 80 03 80  
00388Fr 3               font:
00388Fr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003893r 3  00 00 00 00  
003897r 3  38 38 38 38          .byte 56,56,56,56,56,0,56,0
00389Br 3  38 00 38 00  
00389Fr 3  2E 2E 2E 00          .byte 46,46,46,0,0,0,0,0
0038A3r 3  00 00 00 00  
0038A7r 3  00 5C FE 5C          .byte 0,92,254,92,254,92,0,0
0038ABr 3  FE 5C 00 00  
0038AFr 3  04 7E 70 7E          .byte 4,126,112,126,14,126,32,0
0038B3r 3  0E 7E 20 00  
0038B7r 3  F2 B4 E8 10          .byte 242,180,232,16,46,86,158,0
0038BBr 3  2E 56 9E 00  
0038BFr 3  F8 E8 E8 72          .byte 248,232,232,114,238,228,255,0
0038C3r 3  EE E4 FF 00  
0038C7r 3  1C 1C 3C 00          .byte 28,28,60,0,0,0,0,0
0038CBr 3  00 00 00 00  
0038CFr 3  18 38 70 70          .byte 24,56,112,112,112,56,24,0
0038D3r 3  70 38 18 00  
0038D7r 3  30 38 1C 1C          .byte 48,56,28,28,28,56,48,0
0038DBr 3  1C 38 30 00  
0038DFr 3  00 10 38 FE          .byte 0,16,56,254,124,108,0,0
0038E3r 3  7C 6C 00 00  
0038E7r 3  00 38 38 FE          .byte 0,56,56,254,56,56,0,0
0038EBr 3  38 38 00 00  
0038EFr 3  00 00 00 00          .byte 0,0,0,0,0,28,28,60
0038F3r 3  00 1C 1C 3C  
0038F7r 3  00 00 00 7C          .byte 0,0,0,124,0,0,0,0
0038FBr 3  00 00 00 00  
0038FFr 3  00 00 00 00          .byte 0,0,0,0,0,24,24,0
003903r 3  00 18 18 00  
003907r 3  03 07 0E 1C          .byte 3,7,14,28,56,112,224,0
00390Br 3  38 70 E0 00  
00390Fr 3  7E 72 72 72          .byte 126,114,114,114,114,114,126,0
003913r 3  72 72 7E 00  
003917r 3  3C 1C 1C 1C          .byte 60,28,28,28,28,28,28,0
00391Br 3  1C 1C 1C 00  
00391Fr 3  3E 2E 0E 7E          .byte 62,46,14,126,64,66,126,0
003923r 3  40 42 7E 00  
003927r 3  3E 2E 0E 3C          .byte 62,46,14,60,14,78,126,0
00392Br 3  0E 4E 7E 00  
00392Fr 3  9C 9C 9C FE          .byte 156,156,156,254,28,28,62,0
003933r 3  1C 1C 3E 00  
003937r 3  7C 44 40 7E          .byte 124,68,64,126,14,78,126,0
00393Br 3  0E 4E 7E 00  
00393Fr 3  7C 74 70 7E          .byte 124,116,112,126,114,114,126,0
003943r 3  72 72 7E 00  
003947r 3  7E 4E 0E 3E          .byte 126,78,14,62,14,14,14,0
00394Br 3  0E 0E 0E 00  
00394Fr 3  7E 4E 4E 3C          .byte 126,78,78,60,78,78,126,0
003953r 3  4E 4E 7E 00  
003957r 3  7E 4E 4E 7E          .byte 126,78,78,126,14,46,62,0
00395Br 3  0E 2E 3E 00  
00395Fr 3  00 38 38 00          .byte 0,56,56,0,0,56,56,0
003963r 3  00 38 38 00  
003967r 3  00 1C 1C 00          .byte 0,28,28,0,0,28,28,60
00396Br 3  00 1C 1C 3C  
00396Fr 3  0E 1C 38 70          .byte 14,28,56,112,56,28,14,0
003973r 3  38 1C 0E 00  
003977r 3  00 00 7C 00          .byte 0,0,124,0,124,0,0,0
00397Br 3  7C 00 00 00  
00397Fr 3  70 38 1C 0E          .byte 112,56,28,14,28,56,112,0
003983r 3  1C 38 70 00  
003987r 3  7E 4E 0E 3E          .byte 126,78,14,62,32,0,48,0
00398Br 3  20 00 30 00  
00398Fr 3  FE E2 EE EA          .byte 254,226,238,234,238,224,252,0
003993r 3  EE E0 FC 00  
003997r 3  7E 4E 4E 7E          .byte 126,78,78,126,78,78,239,0
00399Br 3  4E 4E EF 00  
00399Fr 3  FE 4E 4E 5C          .byte 254,78,78,92,78,78,254,0
0039A3r 3  4E 4E FE 00  
0039A7r 3  FA E6 E0 E0          .byte 250,230,224,224,224,226,254,0
0039ABr 3  E0 E2 FE 00  
0039AFr 3  FE 4E 4E 4E          .byte 254,78,78,78,78,78,254,0
0039B3r 3  4E 4E FE 00  
0039B7r 3  FE 72 70 7C          .byte 254,114,112,124,112,114,254,0
0039BBr 3  70 72 FE 00  
0039BFr 3  FE 72 70 7C          .byte 254,114,112,124,112,112,248,0
0039C3r 3  70 70 F8 00  
0039C7r 3  F4 EC E0 E0          .byte 244,236,224,224,238,228,252,0
0039CBr 3  EE E4 FC 00  
0039CFr 3  F7 72 72 7E          .byte 247,114,114,126,114,114,247,0
0039D3r 3  72 72 F7 00  
0039D7r 3  FE 38 38 38          .byte 254,56,56,56,56,56,254,0
0039DBr 3  38 38 FE 00  
0039DFr 3  3E 1C 1C 1C          .byte 62,28,28,28,28,28,28,124
0039E3r 3  1C 1C 1C 7C  
0039E7r 3  FB 72 74 78          .byte 251,114,116,120,116,114,251,0
0039EBr 3  74 72 FB 00  
0039EFr 3  F8 70 70 70          .byte 248,112,112,112,112,114,254,0
0039F3r 3  70 72 FE 00  
0039F7r 3  FE AE AE AE          .byte 254,174,174,174,174,142,222,0
0039FBr 3  AE 8E DE 00  
0039FFr 3  FE 4E 4E 4E          .byte 254,78,78,78,78,78,223,0
003A03r 3  4E 4E DF 00  
003A07r 3  7E 4E 4E 4E          .byte 126,78,78,78,78,78,126,0
003A0Br 3  4E 4E 7E 00  
003A0Fr 3  FE 72 72 76          .byte 254,114,114,118,112,112,248,0
003A13r 3  70 70 F8 00  
003A17r 3  FE E2 E2 E2          .byte 254,226,226,226,234,234,254,4
003A1Br 3  EA EA FE 04  
003A1Fr 3  FE 72 72 7E          .byte 254,114,114,126,116,114,243,0
003A23r 3  74 72 F3 00  
003A27r 3  7A 46 40 7E          .byte 122,70,64,126,14,142,254,0
003A2Br 3  0E 8E FE 00  
003A2Fr 3  FE BA 38 38          .byte 254,186,56,56,56,56,124,0
003A33r 3  38 38 7C 00  
003A37r 3  EF 4E 4E 4E          .byte 239,78,78,78,78,78,126,0
003A3Br 3  4E 4E 7E 00  
003A3Fr 3  EF 4E 4E 3C          .byte 239,78,78,60,60,24,24,0
003A43r 3  3C 18 18 00  
003A47r 3  E7 42 5A 7E          .byte 231,66,90,126,126,126,102,0
003A4Br 3  7E 7E 66 00  
003A4Fr 3  F6 74 74 38          .byte 246,116,116,56,116,116,246,0
003A53r 3  74 74 F6 00  
003A57r 3  CF 4E 4E 7E          .byte 207,78,78,126,14,14,126,0
003A5Br 3  0E 0E 7E 00  
003A5Fr 3  FE 8E 1C 38          .byte 254,142,28,56,112,242,254,0
003A63r 3  70 F2 FE 00  
003A67r 3  7C 70 70 70          .byte 124,112,112,112,112,112,124,0
003A6Br 3  70 70 7C 00  
003A6Fr 3  C0 E0 70 38          .byte 192,224,112,56,28,14,7,0
003A73r 3  1C 0E 07 00  
003A77r 3  7C 1C 1C 1C          .byte 124,28,28,28,28,28,124,0
003A7Br 3  1C 1C 7C 00  
003A7Fr 3  10 38 7C 9E          .byte 16,56,124,158,0,0,0,0
003A83r 3  00 00 00 00  
003A87r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003A8Br 3  00 00 00 FF  
003A8Fr 3  7C 74 70 F8          .byte 124,116,112,248,112,114,254,0
003A93r 3  70 72 FE 00  
003A97r 3  00 00 7C 1C          .byte 0,0,124,28,252,156,254,0
003A9Br 3  FC 9C FE 00  
003A9Fr 3  F0 70 76 7A          .byte 240,112,118,122,114,114,126,0
003AA3r 3  72 72 7E 00  
003AA7r 3  00 00 FC E4          .byte 0,0,252,228,224,226,254,0
003AABr 3  E0 E2 FE 00  
003AAFr 3  1E 0E FE 8E          .byte 30,14,254,142,142,158,239,0
003AB3r 3  8E 9E EF 00  
003AB7r 3  00 00 FE E2          .byte 0,0,254,226,254,224,254,0
003ABBr 3  FE E0 FE 00  
003ABFr 3  3E 3A 38 7E          .byte 62,58,56,126,56,56,124,0
003AC3r 3  38 38 7C 00  
003AC7r 3  00 00 F7 8E          .byte 0,0,247,142,158,238,14,254
003ACBr 3  9E EE 0E FE  
003ACFr 3  F0 70 7E 72          .byte 240,112,126,114,114,114,251,0
003AD3r 3  72 72 FB 00  
003AD7r 3  38 00 78 38          .byte 56,0,120,56,56,56,60,0
003ADBr 3  38 38 3C 00  
003ADFr 3  1C 00 3C 1C          .byte 28,0,60,28,28,28,28,124
003AE3r 3  1C 1C 1C 7C  
003AE7r 3  F0 70 73 74          .byte 240,112,115,116,120,116,243,0
003AEBr 3  78 74 F3 00  
003AEFr 3  78 38 38 38          .byte 120,56,56,56,56,56,60,0
003AF3r 3  38 38 3C 00  
003AF7r 3  00 28 54 10          .byte 0,40,84,16,84,16,84,16
003AFBr 3  54 10 54 10  
003AFFr 3  00 00 00 2F          .byte 0,0,0,47,64,128,224,254
003B03r 3  40 80 E0 FE  
003B07r 3  00 00 00 00          .byte 0,0,0,0,128,64,0,64
003B0Br 3  80 40 00 40  
003B0Fr 3  54 10 54 10          .byte 84,16,84,16,84,16,124,56
003B13r 3  54 10 7C 38  
003B17r 3  93 DF E7 FF          .byte 147,223,231,255,169,195,231,254
003B1Br 3  A9 C3 E7 FE  
003B1Fr 3  00 40 80 80          .byte 0,64,128,128,128,128,0,0
003B23r 3  80 80 00 00  
003B27r 3  00 3D 1B 0E          .byte 0,61,27,14,0,0,0,0
003B2Br 3  00 00 00 00  
003B2Fr 3  81 03 AF D7          .byte 129,3,175,215,126,126,28,28
003B33r 3  7E 7E 1C 1C  
003B37r 3  80 C0 60 20          .byte 128,192,96,32,16,48,48,0
003B3Br 3  10 30 30 00  
003B3Fr 3  00 00 01 03          .byte 0,0,1,3,0,0,0,0
003B43r 3  00 00 00 00  
003B47r 3  6C CC 86 03          .byte 108,204,134,3,0,0,0,0
003B4Br 3  00 00 00 00  
003B4Fr 3  08 08 0C 1C          .byte 8,8,12,28,30,26,12,0
003B53r 3  1E 1A 0C 00  
003B57r 3  00 00 EF 4E          .byte 0,0,239,78,78,126,14,254
003B5Br 3  4E 7E 0E FE  
003B5Fr 3  00 00 FE 9C          .byte 0,0,254,156,56,114,254,0
003B63r 3  38 72 FE 00  
003B67r 3  3E 38 38 F0          .byte 62,56,56,240,56,56,62,0
003B6Br 3  38 38 3E 00  
003B6Fr 3  38 38 38 38          .byte 56,56,56,56,56,56,56,0
003B73r 3  38 38 38 00  
003B77r 3  F8 38 38 1E          .byte 248,56,56,30,56,56,248,0
003B7Br 3  38 38 F8 00  
003B7Fr 3  F6 DE 00 00          .byte 246,222,0,0,0,0,0,0
003B83r 3  00 00 00 00  
003B87r 3  3C 42 BD B9          .byte 60,66,189,185,185,189,66,60
003B8Br 3  B9 BD 42 3C  
003B8Fr 3               jtab:
003B8Fr 3  63                   .byte 99
003B90r 3  65 14 51 10  keys:   .byte 101,20,81,16,48,35,83,112,0,113,1
003B94r 3  30 23 53 70  
003B98r 3  00 71 01     
003B9Br 3               
003B9Br 2               
003B9Br 1               	.include "lib.inc"
003B9Br 2               ;----------------------------------------------------------------------
003B9Br 2               ; VIC20 Platform Specific functions
003B9Br 2               ;----------------------------------------------------------------------
003B9Br 2               
003B9Br 2               ;============================================================
003B9Br 2               ; PLATFORM VARIABLES
003B9Br 2               ;============================================================
003B9Br 2               ;
003B9Br 2               ; Memory map:
003B9Br 2               ;
003B9Br 2               ;	$0000-$01ff	 0.5kB	CPU WS
003B9Br 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
003B9Br 2               ;	$0400-$0fff	 3,0kB	RAM
003B9Br 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
003B9Br 2               ;	$2000-$7fff	24,0kB	RAM
003B9Br 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
003B9Br 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
003B9Br 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
003B9Br 2               ;	$9800-$9fff	 2,0kB	I/O
003B9Br 2               ;	$a000-$bfff	 8,0kB	RAM
003B9Br 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
003B9Br 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
003B9Br 2               ;
003B9Br 2               ; Keyboard matrix:
003B9Br 2               ;                          	  $9121
003B9Br 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
003B9Br 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
003B9Br 2               ;               ASCII   ??  ??  45  48  56  54  52  50
003B9Br 2               ;                 VIC   07  06  05  04  03  02  01  00
003B9Br 2               ;
003B9Br 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
003B9Br 2               ;               ASCII   ??  ??  64  79  85  84  69  81
003B9Br 2               ;                 VIC   17  16  15  14  13  12  11  10
003B9Br 2               ;
003B9Br 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
003B9Br 2               ;               ASCII   ??  61  58  75  72  70  83  ??
003B9Br 2               ;                 VIC   27  26  25  24  23  22  21  20
003B9Br 2               ;
003B9Br 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
003B9Br 2               ;               ASCII   ??  ??  46  77  66  67  90  32
003B9Br 2               ;                 VIC   37  36  35  34  33  32  31  30
003B9Br 2               ;
003B9Br 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
003B9Br 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
003B9Br 2               ;                 VIC   47  46  45  44  43  42  41  40
003B9Br 2               ;
003B9Br 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
003B9Br 2               ;               ASCII   ??  59  76  74  71  68  65  ??
003B9Br 2               ;                 VIC   57  56  55  54  53  52  51  50
003B9Br 2               ;
003B9Br 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
003B9Br 2               ;               ASCII   13  42  80  73  89  82  87
003B9Br 2               ;                 VIC   67  66  65  64  63  62  61  60
003B9Br 2               ;
003B9Br 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
003B9Br 2               ;               ASCII   08  ??  43  57  55  53  51  49
003B9Br 2               ;                 VIC   77  76  75  74  73  72  71  70
003B9Br 2               ;
003B9Br 2               ;	 P =$65,O=$14,A=$51,Q=$10
003B9Br 2               ;	SPC=$30,N=$44,M=$34
003B9Br 2               ;	 1 =$70,2=$00,3=$71,4=$01
003B9Br 2               ;
003B9Br 2               ; Joysticks:
003B9Br 2               ;
003B9Br 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
003B9Br 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
003B9Br 2               ;	$9120	Right -     -     -     -     -     -     -
003B9Br 2               ;
003B9Br 2               ;	$9122	DDRB = Data Direction Register port $9120
003B9Br 2               ;               0 = input, 1 = output
003B9Br 2               ;		Bit7 should be 0 to read joystick $9120
003B9Br 2               ;
003B9Br 2               ; Video registers:
003B9Br 2               ;
003B9Br 2               ;	$9000	horizontal centering
003B9Br 2               ;		bits 0-6 horizontal centering
003B9Br 2               ;		bit  7 sets interlace scan
003B9Br 2               ;	$9001	vertical centering
003B9Br 2               ;	$9002	set # of columns
003B9Br 2               ;		bits 0-6 set # of columns
003B9Br 2               ;		bit 7 is part of video matrix address
003B9Br 2               ;	$9003	set # of rows
003B9Br 2               ;		bit 0 sets 8x8 or 16x8 chars
003B9Br 2               ;		bits 1-6 set # of rows
003B9Br 2               ;	$9005	start of character memory
003B9Br 2               ;		bits 0-3 start of character memory (default = 0)
003B9Br 2               ;		bits 4-7 is rest of video address (default= F)
003B9Br 2               ;		BITS 3,2,1,0 CM startinq address
003B9Br 2               ;			     HEX   DEC
003B9Br 2               ;		0000   ROM   8000  32768
003B9Br 2               ;		0001	     8400  33792
003B9Br 2               ;		0010	     8800  34816
003B9Br 2               ;		0011	     8C00  35840
003B9Br 2               ;		1000   RAM   0000  0000
003B9Br 2               ;		1001  xxxx
003B9Br 2               ;		1010  xxxx   unavail.
003B9Br 2               ;		1011  xxxx
003B9Br 2               ;		1100	     1000  4096
003B9Br 2               ;		1101	     1400  5120
003B9Br 2               ;		1110	     1800  6144
003B9Br 2               ;		1111	     1C00  7168
003B9Br 2               ;	$900f	Screen and border color register
003B9Br 2               ;		bits 4-7 select background color
003B9Br 2               ;		bits 0-2 select border color
003B9Br 2               ;		bit 3 selects inverted or normal mode
003B9Br 2               ;
003B9Br 2               ; $9110-$911F 6522 VIA#1
003B9Br 2               ; $9120-$912F 6522 VIA#2
003B9Br 2               ;
003B9Br 2               ;	$9110,$9120 	Port B output register
003B9Br 2               ;	$9111,$9121 	Port A output register
003B9Br 2               ;			(PA0) Bit 0=Serial CLK IN
003B9Br 2               ;			(PA1) Bit 1=Serial DATA IN
003B9Br 2               ;			(PA2) Bit 2=Joy 0
003B9Br 2               ;			(PA3) Bit 3=Joy 1
003B9Br 2               ;			(PA4) Bit 4=Joy 2
003B9Br 2               ;			(PA5) Bit 5 = Lightpen/Fire button
003B9Br 2               ;			(PA6) Bit 6=Cassette switch sense
003B9Br 2               ;			(PA7) Bit 7=Serial ATN out
003B9Br 2               ;	$9112,$9122	Data direction register B
003B9Br 2               ;	$9113,$9123	Data direction register A
003B9Br 2               ;	$9114,$9124	Timer 1 low byte
003B9Br 2               ;	$9115,$9125	Timer 1 high byte & counter
003B9Br 2               ;	$9116,$9126	Timer 1 low byte
003B9Br 2               ;	$9117,$9127	Timer 1 high byte
003B9Br 2               ;	$9118,$9128	Timer 2 low byte
003B9Br 2               ;	$9119,$9129	Timer 2 high byte
003B9Br 2               ;	$911A,$912A	Shift register
003B9Br 2               ;	$911B,$912B	Auxiliary control register
003B9Br 2               ;	$911C,$912C	Peripheral control register
003B9Br 2               ;			(CA1, CA2, CB1, CB2)
003B9Br 2               ;			CA1 = restore key (Bit 0)
003B9Br 2               ;			CA2 = cassette motor control (Bits 1-3)
003B9Br 2               ;			CB1 = interrupt signal for received
003B9Br 2               ;			RS-232 data (Bit 4)
003B9Br 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
003B9Br 2               ;	$911D,$912D	Interrupt flag register
003B9Br 2               ;	$911E,$912E	Interrupt enable register
003B9Br 2               ;	$911F,$912F	Port A (Sense cassette switch)
003B9Br 2               
003B9Br 2               ; VIC constants
003B9Br 2               
003B9Br 2               ;	scrchar 	= 22				; char/line
003B9Br 2               ;	scrline		= 22				; lines/screen
003B9Br 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
003B9Br 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
003B9Br 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
003B9Br 2               
003B9Br 2               ; VIC variables:
003B9Br 2               
003B9Br 2  00           	fontcol:	.byte 0		; Frontcolour text
003B9Cr 2               
003B9Cr 2               ; Addresses
003B9Cr 2               
003B9Cr 2               	MapAddr		= $400		; RAM
003B9Cr 2               	ScreenAddr	= $0200		; VIDEO RAM
003B9Cr 2               	CharAddress	= $1000		; CHAR RAM
003B9Cr 2               	Reg0		= $9000		; Horizontal centering
003B9Cr 2               	Reg1		= $9001		; Vertical centering
003B9Cr 2               	Reg2		= $9002		; Set # of columns
003B9Cr 2               	Reg3		= $9003		; Set # of rows
003B9Cr 2               	Reg4		= $9004		; Vsync signal
003B9Cr 2               	Reg5		= $9005		; Start of character memory
003B9Cr 2               	RegE		= $900e		; Colour and auxcolour register
003B9Cr 2               	RegF		= $900f		; Screen and border color register
003B9Cr 2               
003B9Cr 2               	JoyAddr1	= $9111		; Joystick address 1
003B9Cr 2               	Timer11_Low  	= $9114		; Timer 1 low byte
003B9Cr 2               	Timer11_High 	= $9115		; Timer 1 high byte
003B9Cr 2               	Timer12_Low  	= $9118		; Timer 2 low byte
003B9Cr 2               	Timer12_High 	= $9119		; Timer 2 high byte
003B9Cr 2               	AUX1		= $911b		; Auxiliary control register
003B9Cr 2               	IFR1		= $911d		; Interrupt Flag Register
003B9Cr 2               	IER1		= $911e		; Interrupt Enable Register
003B9Cr 2               
003B9Cr 2               	KeyColAddr	= $9120		; Keyboard column (write)
003B9Cr 2               	JoyAddr2	= $9120		; Joystick address 2
003B9Cr 2               	KeyRowAddr	= $9121		; Keyboard row (read)
003B9Cr 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
003B9Cr 2               	Timer21_Low  	= $9124		; Timer 1 low byte
003B9Cr 2               	Timer21_High 	= $9125		; Timer 1 high byte
003B9Cr 2               	AUX2		= $912b		; Auxiliary control register
003B9Cr 2               	IFR2		= $912d		; Interrupt Flag Register
003B9Cr 2               	IER2		= $912e		; Interrupt Enable Register
003B9Cr 2               
003B9Cr 2               	ColorAttr	= $9600		; Color attributes
003B9Cr 2               	HiRAM		= $a000		; Hi RAM 8kB
003B9Cr 2               
003B9Cr 2               ;----------------------------------------------------------------------
003B9Cr 2               ; VIC20 video hardware fns
003B9Cr 2               ;----------------------------------------------------------------------
003B9Cr 2               
003B9Cr 2               init:
003B9Cr 2               
003B9Cr 2               ; Disable interrupts
003B9Cr 2               
003B9Cr 2  A9 7F        	lda #$7f
003B9Er 2  8D 1E 91     	sta $911e
003BA1r 2  8D 2D 91     	sta $912d
003BA4r 2  8D 2E 91     	sta $912e
003BA7r 2               
003BA7r 2               ; Set audio volume to max and flag to check when disabling
003BA7r 2               ; beep and crash
003BA7r 2               
003BA7r 2  A9 00        	lda #0
003BA9r 2  8D 0A 90     	sta $900a
003BACr 2  8D 0B 90     	sta $900b
003BAFr 2  8D 0C 90     	sta $900c
003BB2r 2  8D 0D 90     	sta $900d
003BB5r 2               
003BB5r 2  A9 0F        	lda #$0f
003BB7r 2  8D 0E 90     	sta $900e
003BBAr 2  A9 00        	lda #$00
003BBCr 2  85 rr        	sta SOUNDS_STATUS
003BBEr 2               
003BBEr 2               ; Init screen for NTSC
003BBEr 2               ; this sets the background and border color of the screen
003BBEr 2               ; in this case border black and background black
003BBEr 2               
003BBEr 2  A9 18        	lda #%00011000
003BC0r 2  8D 0F 90     	sta RegF
003BC3r 2               
003BC3r 2               ; Reset fontcolor
003BC3r 2  A9 00        	lda #0		; Black
003BC5r 2  8D rr rr     	sta fontcol
003BC8r 2               
003BC8r 2               
003BC8r 2               ; max num of columns 22
003BC8r 2               
003BC8r 2  AD 02 90     	lda Reg2
003BCBr 2  29 80        	and #%10000000
003BCDr 2  09 16        	ora #ScrWidth
003BCFr 2  8D 02 90     	sta Reg2
003BD2r 2               
003BD2r 2               ; max num of lines (mult by 2 - 22) for 8x8 chars
003BD2r 2               ; no multiply for 8x16 chars
003BD2r 2               
003BD2r 2  AD 03 90     	lda Reg3
003BD5r 2  29 81        	and #%10000001
003BD7r 2  09 16        	ora #ScrWidth		; number of rows multipled by two
003BD9r 2  8D 03 90     	sta Reg3
003BDCr 2               
003BDCr 2               ; horizontal and vertical position must be set for
003BDCr 2               ; non standard screen resolution (standard 22x23)
003BDCr 2               ; same games even allow the user to change them
003BDCr 2               ; these values are for PAL for NTSC should be different
003BDCr 2               ; move horizontal position in the screen
003BDCr 2               
003BDCr 2  AD 00 90     	lda Reg0
003BDFr 2  29 80        	and #%10000000
003BE1r 2  09 04        	ora #CentreX
003BE3r 2  8D 00 90     	sta Reg0
003BE6r 2               
003BE6r 2               ; move vertical position in the screen
003BE6r 2               
003BE6r 2  A9 1B        	lda #CentreY
003BE8r 2  8D 01 90     	sta Reg1
003BEBr 2               
003BEBr 2               ; Set screem memory to $200
003BEBr 2               ; bit 7 on $9002 has to be set
003BEBr 2               
003BEBr 2  AD 02 90     	lda Reg2
003BEEr 2  09 80        	ora #%10000000
003BF0r 2  8D 02 90     	sta Reg2
003BF3r 2               
003BF3r 2               ; Set character data pointer to CHAR RAM at $1000
003BF3r 2               ; bit 7 on $9005 has always to be set
003BF3r 2               ; (based on compute - mapping the vic book)
003BF3r 2               ; color ram goes to 9600
003BF3r 2               
003BF3r 2  AD 05 90     	lda Reg5
003BF6r 2  29 0C        	and #%00001100
003BF8r 2  09 8C        	ora #%10001100
003BFAr 2  8D 05 90     	sta Reg5
003BFDr 2               
003BFDr 2               ; This set the char size to 8x16
003BFDr 2               
003BFDr 2  AD 03 90     	lda Reg3
003C00r 2  09 01        	ora #%00000001
003C02r 2  8D 03 90     	sta Reg3
003C05r 2               
003C05r 2               ; Init screencharacters
003C05r 2               ; Fill screen with characters from left to right, up to down
003C05r 2               
003C05r 2  A2 00        	ldx #0
003C07r 2  A0 00        	ldy #0
003C09r 2               scrinit:
003C09r 2  8A           	txa
003C0Ar 2  9D 00 02     	sta ScreenAddr,x
003C0Dr 2  98           	tya
003C0Er 2  9D 00 96     	sta ColorAttr,x
003C11r 2  E8           	inx
003C12r 2  E0 F2        	cpx#242
003C14r 2  D0 F3        	bne scrinit
003C16r 2               
003C16r 2               ; Reset fontcolor
003C16r 2               
003C16r 2  A9 00        	lda #0			; Black
003C18r 2  8D rr rr     	sta fontcol
003C1Br 2               
003C1Br 2               ; Init music
003C1Br 2               
003C1Br 2               ;	jsr initmusic
003C1Br 2               
003C1Br 2               ; Init VIA1 timer11 for timeout 1/25 sec
003C1Br 2               
003C1Br 2  A9 E0        	lda #$e0		; T1 continuous
003C1Dr 2  8D 1B 91     	sta AUX1
003C20r 2  A9 7F        	lda #$7f		; No int
003C22r 2  8D 1E 91     	sta IER1
003C25r 2  A9 00        	lda #0
003C27r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
003C2Ar 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
003C2Cr 2  8D 14 91     	sta Timer11_Low
003C2Fr 2  A9 4E        	lda #>timervalue
003C31r 2  8D 15 91     	sta Timer11_High
003C34r 2               
003C34r 2               ; Pre-shifted byte tables if parameter 'r' given
003C34r 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
003C34r 2               ; The bits are shifted to the right and overflow bits are
003C34r 2               ; inserted to the left. So 1 byte contains a left and right part
003C34r 2               
003C34r 2               .if rflag
003C34r 2               shift0 = HiRAM
003C34r 2               shift2 = HiRAM+256
003C34r 2               shift4 = HiRAM+512
003C34r 2               shift6 = HiRAM+768
003C34r 2               
003C34r 2               ; Pre-shifted table 0 pixels
003C34r 2               
003C34r 2               	ldx #0
003C34r 2               shf0:
003C34r 2               	txa
003C34r 2               	sta shift0,x
003C34r 2               	inx
003C34r 2               	bne shf0
003C34r 2               
003C34r 2               ; Pre-shifted table 2 pixels
003C34r 2               
003C34r 2               	ldx #0
003C34r 2               shf2:
003C34r 2               	ldy #2
003C34r 2               	txa
003C34r 2               shf2loop:
003C34r 2               	lsr a
003C34r 2               	bcc :+
003C34r 2               	ora #$80
003C34r 2               :
003C34r 2               	dey
003C34r 2               	bne shf2loop
003C34r 2               	sta shift2,x
003C34r 2               	inx
003C34r 2               	bne shf2
003C34r 2               
003C34r 2               ; Pre-shifted table 4 pixels
003C34r 2               
003C34r 2               	ldx #0
003C34r 2               shf4:
003C34r 2               	ldy #4
003C34r 2               	txa
003C34r 2               shf4loop:
003C34r 2               	lsr a
003C34r 2               	bcc :+
003C34r 2               	ora #$80
003C34r 2               :
003C34r 2               	dey
003C34r 2               	bne shf4loop
003C34r 2               	sta shift4,x
003C34r 2               	inx
003C34r 2               	bne shf4
003C34r 2               
003C34r 2               ; Pre-shifted table 6 pixels
003C34r 2               
003C34r 2               	ldx #0
003C34r 2               shf6:
003C34r 2               	ldy #6
003C34r 2               	txa
003C34r 2               shf6loop:
003C34r 2               	lsr a
003C34r 2               	bcc :+
003C34r 2               	ora #$80
003C34r 2               :
003C34r 2               	dey
003C34r 2               	bne shf6loop
003C34r 2               	sta shift6,x
003C34r 2               	inx
003C34r 2               	bne shf6
003C34r 2               .endif
003C34r 2               
003C34r 2  60           	rts
003C35r 2               
003C35r 2               ;========================================================
003C35r 2               ; KEY AND JOYSTICK ROUTINES
003C35r 2               ;--------------------------------------------------------
003C35r 2               ; Keys
003C35r 2               ;
003C35r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003C35r 2               ;             ||||||||
003C35r 2               ;             |||||||+> Right    KEY 0  - X
003C35r 2               ;             ||||||+-> Left     KEY 1  - Z
003C35r 2               ;             |||||+--> Down     KEY 2  - .
003C35r 2               ;             ||||+---> Up       KEY 3  - ;
003C35r 2               ;             |||+----> Fire1    KEY 4  - SPC
003C35r 2               ;             ||+-----> Fire2    KEY 5  - Q
003C35r 2               ;             |+------> Fire3    KEY 6  - P
003C35r 2               ;             +-------> Not used
003C35r 2               ;
003C35r 2               ;                       Option1  KEY 7  - 1
003C35r 2               ;                       Option2  KEY 8  - 2
003C35r 2               ;                       Option3  KEY 9  - 3
003C35r 2               ;                       Option4  KEY 10 - 4
003C35r 2               ;--------------------------------------------------------
003C35r 2               
003C35r 2               ;----------------------------------------------------
003C35r 2               ; Interrupt service
003C35r 2               ;----------------------------------------------------
003C35r 2               
003C35r 2               intserv:
003C35r 2  EE 01 96     	inc $9601	; scroll colour char topleft
003C38r 2  68           	pla
003C39r 2  A8           	tay
003C3Ar 2  68           	pla
003C3Br 2  AA           	tax
003C3Cr 2  68           	pla
003C3Dr 2  40           	rti
003C3Er 2               
003C3Er 2               ;--------------------------------------------------------
003C3Er 2               ; PRSKEY
003C3Er 2               ;
003C3Er 2               ; Wait for keypress.
003C3Er 2               ;--------------------------------------------------------
003C3Er 2               
003C3Er 2               prskey:
003C3Er 2  98           	tya
003C3Fr 2  48           	pha
003C40r 2               prsloop:
003C40r 2  20 rr rr     	jsr vsync
003C43r 2  20 rr rr     	jsr readkey
003C46r 2  C0 FF        	cpy #255
003C48r 2  F0 F6        	beq prsloop		; wait until key pressed
003C4Ar 2               
003C4Ar 2               prsrelease:
003C4Ar 2  20 rr rr     	jsr vsync
003C4Dr 2  20 rr rr     	jsr readkey
003C50r 2  C0 FF        	cpy #255
003C52r 2  D0 F6        	bne prsrelease		; wait until key released
003C54r 2               
003C54r 2  20 rr rr     	jsr joykey
003C57r 2               
003C57r 2  68           	pla
003C58r 2  A8           	tay
003C59r 2  60           	rts
003C5Ar 2               
003C5Ar 2               ;--------------------------------------------------------
003C5Ar 2               ; KTEST
003C5Ar 2               ;
003C5Ar 2               ; Keyboard test routine with key in A.
003C5Ar 2               ; Scan key and clear carry if key pressed
003C5Ar 2               ;--------------------------------------------------------
003C5Ar 2               
003C5Ar 2               ktest:
003C5Ar 2  85 rr        	sta z80_a		; save key
003C5Cr 2               
003C5Cr 2  4A           	lsr a
003C5Dr 2  4A           	lsr a
003C5Er 2  4A           	lsr a
003C5Fr 2  4A           	lsr a
003C60r 2  AA           	tax
003C61r 2  BD rr rr     	lda colmask,x
003C64r 2  8D 20 91     	sta KeyColAddr		; set row
003C67r 2               
003C67r 2  A5 rr        	lda z80_a
003C69r 2  29 0F        	and #$0f
003C6Br 2  AA           	tax			; get column
003C6Cr 2               
003C6Cr 2  AD 21 91     	lda KeyRowAddr		; read column
003C6Fr 2  3D rr rr     	and keymask,x		; check if key pressed
003C72r 2  F0 02        	beq pressed		; Skip if pressed
003C74r 2  38           	sec			; key not pressed
003C75r 2  60           	rts
003C76r 2               pressed:
003C76r 2  18           	clc			; key pressed
003C77r 2  60           	rts
003C78r 2               
003C78r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
003C7Cr 2  F7 FB FD FE  
003C80r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
003C84r 2  10 20 40 80  
003C88r 2               
003C88r 2               ;---------------------------------------------------------------
003C88r 2               ; KGET
003C88r 2               ;
003C88r 2               ; Read keyboard matrix if a key is pressed.
003C88r 2               ; Return A = high nibble=row and low nibble=col
003C88r 2               ;---------------------------------------------------------------
003C88r 2               
003C88r 2               kget:
003C88r 2  86 rr        	stx xtmp		; Save x-reg
003C8Ar 2               kget0:
003C8Ar 2  A2 00        	ldx #0			; reset row
003C8Cr 2               kget1:
003C8Cr 2  BD rr rr     	lda colmask,x		; Get mask
003C8Fr 2  8D 20 91     	sta KeyColAddr		; Set row
003C92r 2  AD 21 91     	lda KeyRowAddr		; Read columns
003C95r 2  85 rr        	sta tmp			; Save colums
003C97r 2  C9 FF        	cmp #$ff		; Key pressed?
003C99r 2  D0 08        	bne kget2		; Yes, skip
003C9Br 2  E8           	inx			; Next row
003C9Cr 2  E0 08        	cpx #8			; All rows scanned?
003C9Er 2  D0 EC        	bne kget1		; No, repeat
003CA0r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
003CA3r 2               kget2:
003CA3r 2  A0 00        	ldy #0			; Reset column
003CA5r 2               kget3:
003CA5r 2  46 rr        	lsr tmp			; Test bit
003CA7r 2  90 04        	bcc kget4		; If clear, key pressed
003CA9r 2  C8           	iny			; Next column
003CAAr 2  4C rr rr     	jmp kget3		; Repeat
003CADr 2               kget4:
003CADr 2  86 rr        	stx tmp			; Get row
003CAFr 2  06 rr        	asl tmp			; Make high nibble
003CB1r 2  06 rr        	asl tmp
003CB3r 2  06 rr        	asl tmp
003CB5r 2  06 rr        	asl tmp
003CB7r 2  98           	tya			; Get column
003CB8r 2  18           	clc
003CB9r 2  65 rr        	adc tmp			; Add row as low nibble
003CBBr 2  85 rr        	sta tmp
003CBDr 2               kget5:
003CBDr 2  AD 21 91     	lda KeyRowAddr		; Read columns
003CC0r 2  C9 FF        	cmp #$ff
003CC2r 2  D0 F9        	bne kget5
003CC4r 2               
003CC4r 2  A5 rr        	lda tmp			; Return keycode
003CC6r 2  A6 rr        	ldx xtmp		; Restore X-reg
003CC8r 2  60           	rts			; Return
003CC9r 2               
003CC9r 2               ;-------------------------------------------------------------
003CC9r 2               ; READKEY
003CC9r 2               ;
003CC9r 2               ; Check keyboard matrix if a key is pressed
003CC9r 2               ; Return keymask in Y
003CC9r 2               ;-------------------------------------------------------------
003CC9r 2               
003CC9r 2               readkey:
003CC9r 2  A9 FF        	lda #$ff		; Keymask
003CCBr 2  85 rr        	sta tmp
003CCDr 2  A2 07        	ldx #7
003CCFr 2               scanrow:
003CCFr 2  BD rr rr     	lda colmask,x
003CD2r 2  8D 20 91     	sta KeyColAddr		; set row
003CD5r 2  AD 21 91     	lda KeyRowAddr		; read column
003CD8r 2  25 rr        	and tmp			; Reset bit is key pressed
003CDAr 2  85 rr        	sta tmp
003CDCr 2  CA           	dex
003CDDr 2  10 F0        	bpl scanrow
003CDFr 2  A5 rr        	lda tmp
003CE1r 2  A8           	tay
003CE2r 2  60           	rts
003CE3r 2               
003CE3r 2               ;-------------------------------------------------------------
003CE3r 2               ; JOY1SCAN
003CE3r 2               ;
003CE3r 2               ; Initializes joystick
003CE3r 2               ;-------------------------------------------------------------
003CE3r 2               
003CE3r 2               joyinit:
003CE3r 2  60           	rts
003CE4r 2               
003CE4r 2               ;-------------------------------------------------------------
003CE4r 2               ; JOY1SCAN
003CE4r 2               ;
003CE4r 2               ; Scan joystick1 and return key in z80_e
003CE4r 2               ; Up, down, left, right and fire are read from the joystick
003CE4r 2               ; Fire2 and fire3 are read from the keyboard
003CE4r 2               ;-------------------------------------------------------------
003CE4r 2               
003CE4r 2               joy1scan:
003CE4r 2  A9 FF        	lda #$ff
003CE6r 2  85 rr        	sta z80_e
003CE8r 2               
003CE8r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
003CEBr 2  4A           	lsr a
003CECr 2  4A           	lsr a
003CEDr 2               
003CEDr 2  4A           	lsr a
003CEEr 2  26 rr        	rol z80_e		; Up
003CF0r 2  4A           	lsr a
003CF1r 2  26 rr        	rol z80_e		; Down
003CF3r 2  4A           	lsr a
003CF4r 2  26 rr        	rol z80_e		; Left
003CF6r 2               
003CF6r 2  A9 7F        	lda #%01111111
003CF8r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
003CFBr 2  AD 20 91     	lda JoyAddr2
003CFEr 2  0A           	asl a
003CFFr 2  26 rr        	rol z80_e		; Right
003D01r 2  A9 FF        	lda #%11111111
003D03r 2  8D 22 91     	sta DDRB		; Reset
003D06r 2               
003D06r 2  AD 11 91     	lda JoyAddr1
003D09r 2  29 20        	and #%00100000
003D0Br 2  D0 06        	bne :+
003D0Dr 2  A5 rr        	lda z80_e
003D0Fr 2  29 EF        	and #%11101111		; Fire
003D11r 2  85 rr        	sta z80_e
003D13r 2               :
003D13r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
003D16r 2  20 rr rr     	jsr ktest
003D19r 2  B0 06        	bcs :+
003D1Br 2  A5 rr        	lda z80_e
003D1Dr 2  29 BF        	and #%10111111
003D1Fr 2  85 rr        	sta z80_e
003D21r 2               :
003D21r 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
003D24r 2  20 rr rr     	jsr ktest
003D27r 2  B0 06        	bcs :+
003D29r 2  A5 rr        	lda z80_e
003D2Br 2  29 DF        	and #%11011111
003D2Dr 2  85 rr        	sta z80_e
003D2Fr 2               :
003D2Fr 2  60           	rts
003D30r 2               
003D30r 2               ;-------------------------------------------------------------
003D30r 2               ; JOY2SCAN
003D30r 2               ;
003D30r 2               ; TODO, Scan joystick2 and return key in z80_e
003D30r 2               ;-------------------------------------------------------------
003D30r 2               
003D30r 2               joy2scan:
003D30r 2  60           	rts
003D31r 2               
003D31r 2               
003D31r 2               
003D31r 2               ;========================================================
003D31r 2               ; HARDWARE DEPENDING ROUTINES
003D31r 2               ;========================================================
003D31r 2               
003D31r 2               ;----------------------------------------------------
003D31r 2               ; DELAY
003D31r 2               ;
003D31r 2               ; Delay routine A * 1/50 sec
003D31r 2               ;----------------------------------------------------
003D31r 2               
003D31r 2               delay:
003D31r 2  85 rr        	sta xtmp		; set delaycounter
003D33r 2               del_loop:
003D33r 2  AD 04 90     	lda Reg4
003D36r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
003D38r 2               
003D38r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
003D3Ar 2               delay1:
003D3Ar 2  61 80        	adc ($80,x)		;	 6 usec
003D3Cr 2  61 80        	adc ($80,x)		;	 6 usec
003D3Er 2  88           	dey			;	 2 usec
003D3Fr 2  D0 F9        	bne delay1		;	 2 usec
003D41r 2  EA           	nop			; 2 usec
003D42r 2  EA           	nop			; 2 usec
003D43r 2               				; tot: 20000 usec
003D43r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
003D45r 2  D0 EC        	bne del_loop
003D47r 2  60           	rts
003D48r 2               
003D48r 2               ;-------------------------------------------------------------
003D48r 2               ; VSYNC
003D48r 2               ;
003D48r 2               ; - read joystick/keyboard
003D48r 2               ; - sync framerate with timer 25Hz
003D48r 2               ; - handle shrapnel every even frame
003D48r 2               ; - handle sound
003D48r 2               ;-------------------------------------------------------------
003D48r 2               
003D48r 2               vsync:
003D48r 2  48           	pha			; save registers
003D49r 2  98           	tya
003D4Ar 2  48           	pha
003D4Br 2  8A           	txa
003D4Cr 2  48           	pha
003D4Dr 2               
003D4Dr 2               ; Read joystick/keyboard.
003D4Dr 2               
003D4Dr 2  20 rr rr     	jsr joykey
003D50r 2               
003D50r 2               ; Sync framerate with timer 25Hz
003D50r 2               
003D50r 2  A9 40        	lda #$40		; set Timer1 expired bit
003D52r 2               vsync1:
003D52r 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
003D55r 2  F0 FB        	beq vsync1		; wait if timer not expired
003D57r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
003D5Ar 2               
003D5Ar 2               ; Handle shrapnel every even frame
003D5Ar 2               
003D5Ar 2  A5 rr        	lda clock		; get clock
003D5Cr 2  29 01        	and #1			; 2 frames expired
003D5Er 2  D0 03        	bne:+
003D60r 2  20 rr rr     	jsr proshr		; process shrapnel
003D63r 2               :
003D63r 2               
003D63r 2               ; Handle sound
003D63r 2               
003D63r 2  AD rr rr         lda sndtyp
003D66r 2  F0 3E            beq sndskip
003D68r 2               
003D68r 2               sndloop:
003D68r 2  AC rr rr         ldy sndtyp
003D6Br 2               sndwait:
003D6Br 2  88               dey
003D6Cr 2  D0 FD            bne sndwait
003D6Er 2               
003D6Er 2  AD rr rr         lda sndtyp
003D71r 2  30 16            bmi crashaudio
003D73r 2               
003D73r 2               
003D73r 2               beepaudio:
003D73r 2                   ; enable sound on channel 2
003D73r 2                   ; add 128 because sound is in range 128-255
003D73r 2               ;    lsr
003D73r 2  A5 rr        	lda SOUNDS_STATUS
003D75r 2  09 40        	ora #%01000000
003D77r 2  85 rr        	sta SOUNDS_STATUS
003D79r 2  A9 FF            lda #$ff
003D7Br 2  38               sec
003D7Cr 2  ED rr rr         sbc sndtyp
003D7Fr 2  4A               lsr
003D80r 2  4A               lsr
003D81r 2  09 C0            ora #%11000000
003D83r 2  8D 0C 90         sta $900c
003D86r 2  4C rr rr         jmp endaudiotype
003D89r 2               crashaudio:
003D89r 2  A5 rr        	lda SOUNDS_STATUS
003D8Br 2  09 80        	ora #%10000000
003D8Dr 2  85 rr        	sta SOUNDS_STATUS
003D8Fr 2  A9 FF            lda #$ff
003D91r 2  38               sec
003D92r 2  ED rr rr         sbc sndtyp
003D95r 2  09 80            ora #%10000000
003D97r 2  8D 0D 90         sta $900d
003D9Ar 2               
003D9Ar 2               endaudiotype:
003D9Ar 2               
003D9Ar 2  CE rr rr         dec sndtyp
003D9Dr 2  F0 07            beq sndskip
003D9Fr 2  C9 80            cmp #128
003DA1r 2  F0 03            beq sndskip
003DA3r 2  4C rr rr         jmp sndloop
003DA6r 2               sndskip:
003DA6r 2                   ; disable sound
003DA6r 2  24 rr        	bit SOUNDS_STATUS
003DA8r 2  50 0B        	bvc :+
003DAAr 2  A5 rr        	lda SOUNDS_STATUS
003DACr 2  29 BF        	and #%10111111
003DAEr 2  85 rr        	sta SOUNDS_STATUS
003DB0r 2  A9 00        	lda #$00
003DB2r 2  8D 0C 90         sta $900c
003DB5r 2               :
003DB5r 2  24 rr        	bit SOUNDS_STATUS
003DB7r 2  10 0B        	bpl :+
003DB9r 2               
003DB9r 2  A5 rr        	lda SOUNDS_STATUS
003DBBr 2  29 7F        	and #%01111111
003DBDr 2  85 rr        	sta SOUNDS_STATUS
003DBFr 2  A9 00        	lda #$00
003DC1r 2  8D 0D 90         sta $900d
003DC4r 2               :
003DC4r 2  68               pla
003DC5r 2  AA               tax
003DC6r 2  68               pla
003DC7r 2  A8               tay
003DC8r 2  68               pla
003DC9r 2  60               rts
003DCAr 2  00           sndtyp:		.byte 0		; Beep sound parameter
003DCBr 2               
003DCBr 2               
003DCBr 2               
003DCBr 2               
003DCBr 2               
003DCBr 2               
003DCBr 2               ;========================================================
003DCBr 2               ; SPRITE HANDLING ROUTINES
003DCBr 2               ;========================================================
003DCBr 2               
003DCBr 2               ;----------------------------------------------------
003DCBr 2               ; SPRITE
003DCBr 2               ;
003DCBr 2               ; Draw object sprite
003DCBr 2               ;----------------------------------------------------
003DCBr 2               
003DCBr 2               .if oflag
003DCBr 2               sprite:
003DCBr 2               	stx xtmp		; Save X-reg
003DCBr 2               	jsr scadd 		; get screen address in scraddr.
003DCBr 2               
003DCBr 2               	lda dispx 		; x position.
003DCBr 2               	and #7 			; position straddling cells.
003DCBr 2               	sta z80_b		; store in b register.
003DCBr 2               
003DCBr 2               	lda z80_l		; store sprite graphic address.
003DCBr 2               	sta sprit1+1
003DCBr 2               	sta sprit2+1
003DCBr 2               	lda z80_h
003DCBr 2               	sta sprit1+2
003DCBr 2               	sta sprit2+2
003DCBr 2               
003DCBr 2               	ldx #0			; pixel height.
003DCBr 2               	ldy #0
003DCBr 2               sprit1:
003DCBr 2               	lda objdta,x		; fetch first byte.
003DCBr 2               	sta spr
003DCBr 2               	inx
003DCBr 2               sprit2:
003DCBr 2               	lda objdta,x
003DCBr 2               	sta spr+1
003DCBr 2               
003DCBr 2               	lda #0
003DCBr 2               	sta spr+2
003DCBr 2               	jsr sprit7		; shift sprite
003DCBr 2               
003DCBr 2               	lda spr			; fetch graphic.
003DCBr 2               	ldy #0			; _BEEB
003DCBr 2               	eor (scraddr),y		; merge with screen image.
003DCBr 2               	sta (scraddr),y		; write to screen.
003DCBr 2               
003DCBr 2               	lda spr+1		; fetch graphic.
003DCBr 2               	ldy #16			; _BEEB
003DCBr 2               	eor (scraddr),y		; merge with screen image.
003DCBr 2               	sta (scraddr),y		; write to screen.
003DCBr 2               
003DCBr 2               	lda spr+2		; fetch graphic.
003DCBr 2               	ldy #32			; _BEEB
003DCBr 2               	eor (scraddr),y		; merge with screen image.
003DCBr 2               	sta (scraddr),y		; write to screen.
003DCBr 2               
003DCBr 2               	jsr nline
003DCBr 2               
003DCBr 2               	inx			; next source byte.
003DCBr 2               	cpx #32
003DCBr 2               	bne sprit1		; repeat
003DCBr 2               
003DCBr 2               	ldx xtmp		; retreive X-reg
003DCBr 2               	rts
003DCBr 2               
003DCBr 2               .endif
003DCBr 2               
003DCBr 2               ;------------------------------------------------------------------
003DCBr 2               ; SCADD
003DCBr 2               ;
003DCBr 2               ; This routine returns a screen address for X,Y in scraddr.
003DCBr 2               ;------------------------------------------------------------------
003DCBr 2               
003DCBr 2               scadd:
003DCBr 2  A5 rr        	lda dispx		; get x
003DCDr 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
003DCFr 2  85 rr        	sta scraddr		; set lb scraddr
003DD1r 2  A9 00        	lda #0
003DD3r 2  85 rr        	sta scraddr+1		; set hb scraddr
003DD5r 2  06 rr        	asl scraddr		; multiply X by 2
003DD7r 2  26 rr        	rol scraddr+1
003DD9r 2               
003DD9r 2               ; Add line address Y pos to X
003DD9r 2               
003DD9r 2  A6 rr        	ldx dispy		; get row address Y pos
003DDBr 2  18           	clc
003DDCr 2  A5 rr        	lda scraddr
003DDEr 2  7D 00 07     	adc SCADTB_lb,x
003DE1r 2  85 rr        	sta scraddr
003DE3r 2  A5 rr        	lda scraddr+1
003DE5r 2  7D 00 08     	adc SCADTB_hb,x
003DE8r 2  85 rr        	sta scraddr+1
003DEAr 2               
003DEAr 2  60           	rts
003DEBr 2               
003DEBr 2               ;------------------------------------------------------------------
003DEBr 2               ; SSPRIA
003DEBr 2               ;
003DEBr 2               ; Erase single sprite, old (ix+0).
003DEBr 2               ;------------------------------------------------------------------
003DEBr 2               
003DEBr 2               sspria:
003DEBr 2  20 rr rr     	jsr gsprad		; get old sprite address.
003DEEr 2               sspri2:
003DEEr 2               .if rflag
003DEEr 2               	lda z80_e		; 3c
003DEEr 2               	sta dline_spraddr1+1	; 4c
003DEEr 2               	sta dline_spraddr2+1	; 4c
003DEEr 2               	lda z80_d		; 3c
003DEEr 2               	sta dline_spraddr1+2	; 4c
003DEEr 2               	sta dline_spraddr2+2	; 4c
003DEEr 2               
003DEEr 2               	ldx sprshft
003DEEr 2               	lda shift_table,x
003DEEr 2               	sta dline_shift1+1
003DEEr 2               	sta dline_shift2+1
003DEEr 2               	lda shift_table+1,x
003DEEr 2               	sta dline_shift1+2
003DEEr 2               	sta dline_shift2+2
003DEEr 2               
003DEEr 2               	ldx #0			; byte counter.
003DEEr 2               sspri0:
003DEEr 2               	jsr dline		; draw a line.
003DEEr 2                 .if bflag
003DEEr 2               	cpx #48			; big sprites have 24 bytes
003DEEr 2                 .else
003DEEr 2               	cpx #32			; normal sprites have 32 bytes
003DEEr 2                 .endif
003DEEr 2               	bne sspri0		; repeat 16 times x 2 bytes
003DEEr 2               	rts
003DEEr 2               .else
003DEEr 2                 .if bflag
003DEEr 2               	lda #24			; big sprites have 24 lines
003DEEr 2                 .else
003DEEr 2  A9 10        	lda #16			; normal sprites have 16 lines.
003DF0r 2                 .endif
003DF0r 2  8D rr rr     	sta acnt
003DF3r 2               sspri0:
003DF3r 2  20 rr rr     	jsr dline		; draw a line.
003DF6r 2  CE rr rr     	dec acnt
003DF9r 2  D0 F8        	bne sspri0		; repeat 16 times
003DFBr 2  60           	rts
003DFCr 2               
003DFCr 2  00           acnt:	.byte 0			; line counter
003DFDr 2               
003DFDr 2               .endif
003DFDr 2               
003DFDr 2               ;------------------------------------------------------------------
003DFDr 2               ; SSPRIB
003DFDr 2               ;
003DFDr 2               ; Display single sprite, new (ix+5).
003DFDr 2               ;------------------------------------------------------------------
003DFDr 2               
003DFDr 2               ssprib:
003DFDr 2  20 rr rr     	jsr gspran 		; get new sprite address.
003E00r 2  4C rr rr     	jmp sspri2		; Display sprite
003E03r 2               
003E03r 2               ;------------------------------------------------------------------
003E03r 2               ; SSPRIC
003E03r 2               ;
003E03r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
003E03r 2               ;------------------------------------------------------------------
003E03r 2               
003E03r 2               sspric:
003E03r 2               .if rflag
003E03r 2               	jsr gsprad 		; get old sprite address.
003E03r 2               
003E03r 2               	lda z80_e		; 3c
003E03r 2               	sta ddline_spraddr3+1	; 4c
003E03r 2               	sta ddline_spraddr4+1	; 4c
003E03r 2               
003E03r 2               	lda z80_d		; 3c
003E03r 2               	sta ddline_spraddr3+2	; 4c
003E03r 2               	sta ddline_spraddr4+2	; 4c
003E03r 2               
003E03r 2               	ldx sprshft		; set spriteshift table addresses
003E03r 2               	lda shift_table,x
003E03r 2               	sta ddline_shift3+1
003E03r 2               	sta ddline_shift4+1
003E03r 2               	lda shift_table+1,x
003E03r 2               	sta ddline_shift3+2
003E03r 2               	sta ddline_shift4+2
003E03r 2               
003E03r 2               	jsr exx  		; store addresses.
003E03r 2               	jsr gspran 		; get new sprite addresses.
003E03r 2               
003E03r 2               	lda z80_e		; 3c
003E03r 2               	sta ddline_spraddr1+1	; 4c
003E03r 2               	sta ddline_spraddr2+1	; 4c
003E03r 2               
003E03r 2               	lda z80_d		; 3c
003E03r 2               	sta ddline_spraddr1+2	; 4c
003E03r 2               	sta ddline_spraddr2+2	; 4c
003E03r 2               
003E03r 2               	ldx sprshft
003E03r 2               	lda shift_table,x
003E03r 2               	sta ddline_shift1+1
003E03r 2               	sta ddline_shift2+1
003E03r 2               	lda shift_table+1,x
003E03r 2               	sta ddline_shift1+2
003E03r 2               	sta ddline_shift2+2
003E03r 2               
003E03r 2               	ldx #0
003E03r 2               lloop:
003E03r 2               	jsr ddline 		; draw a line.
003E03r 2                 .if bflag
003E03r 2               	cpx #48
003E03r 2                 .else
003E03r 2               	cpx #32
003E03r 2                 .endif
003E03r 2               	bne lloop
003E03r 2               	rts
003E03r 2               
003E03r 2               shift_table:
003E03r 2               	.word shift0
003E03r 2               	.word shift2
003E03r 2               	.word shift4
003E03r 2               	.word shift6
003E03r 2               
003E03r 2               ;------------------------------------------------------------------
003E03r 2               ; DLINE
003E03r 2               ;
003E03r 2               ; Draw a sprite line, now work out next target address.
003E03r 2               ;
003E03r 2               ; Input:
003E03r 2               ;  B  = right mask
003E03r 2               ;  C  = left mask
003E03r 2               ;  DE = spriteaddress
003E03r 2               ;  scraddr = screen address
003E03r 2               ;------------------------------------------------------------------
003E03r 2               
003E03r 2               dline:
003E03r 2               
003E03r 2               dline_spraddr1:
003E03r 2               	ldy $ffff,x 		; get graphic data as pointer.
003E03r 2               dline_shift1:
003E03r 2               	lda $ffff,y		; get pre-shifted data
003E03r 2               	sta sprtmp		; save byte
003E03r 2               	and z80_c 		; mask right for left byte
003E03r 2               
003E03r 2               	ldy #0
003E03r 2               	eor (scraddr),y 	; XOR with what's there.
003E03r 2               	sta (scraddr),y 	; display left byte
003E03r 2               
003E03r 2               ; carry to next screen byte
003E03r 2               
003E03r 2               	lda sprtmp		; fetch data.
003E03r 2               	and z80_b 		; mask for left part
003E03r 2               	sta sprtmp
003E03r 2               
003E03r 2               ; middle screen byte
003E03r 2               
003E03r 2               	inx
003E03r 2               dline_spraddr2:
003E03r 2               	ldy $ffff,x 		; second bit of data.
003E03r 2               dline_shift2:
003E03r 2               	lda $ffff,y
003E03r 2               	sta sprtmp2
003E03r 2               	and z80_c 		; mask away what's not needed.
003E03r 2               	ora sprtmp
003E03r 2               	ldy #16
003E03r 2               	eor (scraddr),y 	; XOR with what's there.
003E03r 2               	sta (scraddr),y 	; display middle bye.
003E03r 2               
003E03r 2               ; carry to last screen byte
003E03r 2               
003E03r 2               	lda sprtmp2
003E03r 2               	and z80_b 		; mask away unwanted
003E03r 2               
003E03r 2               	ldy #32
003E03r 2               	eor (scraddr),y 	; XOR with what's there.
003E03r 2               	sta (scraddr),y 	; display right byte.
003E03r 2               
003E03r 2               	inx
003E03r 2               .else
003E03r 2               
003E03r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
003E06r 2  20 rr rr     	jsr exx  		; store addresses.
003E09r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
003E0Cr 2               
003E0Cr 2               .if bflag
003E0Cr 2               	lda #23
003E0Cr 2               .else
003E0Cr 2  A9 0F        	lda #15
003E0Er 2               .endif
003E0Er 2  85 rr        	sta ccnt
003E10r 2               lloop:
003E10r 2  20 rr rr     	jsr dline 		; draw a line.
003E13r 2  20 rr rr     	jsr exx  		; restore old addresses.
003E16r 2  20 rr rr     	jsr dline 		; delete a line.
003E19r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
003E1Cr 2  C6 rr        	dec ccnt
003E1Er 2  D0 F0        	bne lloop
003E20r 2               
003E20r 2  20 rr rr     	jsr dline		; draw a line.
003E23r 2  20 rr rr     	jsr exx 		; restore old addresses.
003E26r 2               
003E26r 2               ;-------------------------------------------------------------
003E26r 2               ; Drop through.
003E26r 2               ; Line drawn, now work out next target address.
003E26r 2               ;
003E26r 2               ; Input:
003E26r 2               ;  B  = right mask
003E26r 2               ;  C  = left mask
003E26r 2               ;  DE = spriteaddress
003E26r 2               ;  scraddr = screen address
003E26r 2               ;-------------------------------------------------------------
003E26r 2               
003E26r 2               dline:
003E26r 2  A0 00        	ldy #0
003E28r 2  B1 rr        	lda (z80_de),y 		; graphic data.
003E2Ar 2  48           	pha
003E2Br 2  25 rr        	and z80_c 		; mask away what's not needed.
003E2Dr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
003E2Fr 2  91 rr        	sta (scraddr),y 	; left byte on screen.
003E31r 2               
003E31r 2  68           	pla
003E32r 2  25 rr        	and z80_b 		; mask away unwanted bits.
003E34r 2  A0 20        	ldy #32
003E36r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
003E38r 2  91 rr        	sta (scraddr),y 	; right byte on screen
003E3Ar 2               
003E3Ar 2  E6 rr        	inc z80_e 		; next graphic.
003E3Cr 2  D0 02        	bne :+
003E3Er 2  E6 rr        	inc z80_d
003E40r 2               :
003E40r 2               ; _BEEB screen arrangement
003E40r 2               ;	sec
003E40r 2               ;	lda scraddr 		; one character cell to the left.
003E40r 2               ;	sbc #8
003E40r 2               ;	sta scraddr
003E40r 2               ;	lda scraddr+1
003E40r 2               ;	sbc #0
003E40r 2               ;	sta scraddr+1
003E40r 2  A0 00        	ldy #0
003E42r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
003E44r 2  A0 10        	ldy #16
003E46r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
003E48r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
003E4Ar 2               
003E4Ar 2  E6 rr        	inc z80_e 		; point to next line of data.
003E4Cr 2  D0 02        	bne :+
003E4Er 2  E6 rr        	inc z80_d
003E50r 2               :
003E50r 2               ; _BEEB screen arrangement
003E50r 2               ;	sec
003E50r 2               ;	lda scraddr 		; another char left.
003E50r 2               ;	sbc #8
003E50r 2               ;	sta scraddr
003E50r 2               ;	lda scraddr+1
003E50r 2               ;	sbc #0
003E50r 2               ;	sta scraddr+1
003E50r 2               .endif
003E50r 2               
003E50r 2               ;----------------------------------------------------------------------
003E50r 2               ; Line drawn, now work out next target address.
003E50r 2               ;----------------------------------------------------------------------
003E50r 2               
003E50r 2               ; _BEEB screen arrangement
003E50r 2               
003E50r 2               nline:
003E50r 2  A5 rr        	lda scraddr 			; get low byte of address.
003E52r 2  29 0F        	and #15
003E54r 2  C9 0F        	cmp #15				; is this last line of row?
003E56r 2  F0 03        	beq beeb_next_row
003E58r 2               
003E58r 2               	; within same row
003E58r 2  E6 rr        	inc scraddr			; new low byte of address.
003E5Ar 2  60           	rts
003E5Br 2               
003E5Br 2               beeb_next_row:
003E5Br 2  18           	clc
003E5Cr 2  A5 rr        	lda scraddr
003E5Er 2  69 51        	adc #<(ScreenRowBytes-15)
003E60r 2  85 rr        	sta scraddr			; new low byte of address.
003E62r 2  A5 rr        	lda scraddr+1
003E64r 2  69 01        	adc #>(ScreenRowBytes-15)
003E66r 2  85 rr        	sta scraddr+1			; new high byte of address.
003E68r 2  60           	rts
003E69r 2               
003E69r 2               .if rflag
003E69r 2               ;-------------------------------------------------------------
003E69r 2               ; Drop through.
003E69r 2               ; Line drawn, now work out next target address.
003E69r 2               ;
003E69r 2               ; Input:
003E69r 2               ;  B  = right mask
003E69r 2               ;  C  = left mask
003E69r 2               ;  DE = spriteaddress
003E69r 2               ;  scraddr = screen address
003E69r 2               ;-------------------------------------------------------------
003E69r 2               
003E69r 2               ddline:
003E69r 2               
003E69r 2               ; NEW SPRITE
003E69r 2               
003E69r 2               ; first screen byte
003E69r 2               
003E69r 2               ddline_spraddr1:
003E69r 2               	ldy $ffff,x 		; graphic data.
003E69r 2               ddline_shift1:
003E69r 2               	lda $ffff,y
003E69r 2               	sta sprtmp
003E69r 2               	and z80_c 			; mask away what's not needed.
003E69r 2               
003E69r 2               	ldy #0
003E69r 2               	eor (scraddr),y 	; XOR with what's there.
003E69r 2               	sta (scraddr),y 	; bung it in.
003E69r 2               
003E69r 2               ; carry to next screen byte
003E69r 2               
003E69r 2               	lda sprtmp			; fetch data.
003E69r 2               	and z80_b 			; mask away unwanted
003E69r 2               	sta sprtmp
003E69r 2               
003E69r 2               ; middle screen byte
003E69r 2               
003E69r 2               	inx
003E69r 2               ddline_spraddr2:
003E69r 2               	ldy $ffff,x 		; second bit of data.
003E69r 2               ddline_shift2:
003E69r 2               	lda $ffff,y
003E69r 2               	sta sprtmp2
003E69r 2               	and z80_c 			; mask away what's not needed.
003E69r 2               	ora sprtmp
003E69r 2               
003E69r 2               	ldy #16
003E69r 2               	eor (scraddr),y 	; XOR with what's there.
003E69r 2               	sta (scraddr),y 	; bung it in.
003E69r 2               
003E69r 2               ; carry to last screen byte
003E69r 2               
003E69r 2               	lda sprtmp2
003E69r 2               	and z80_b 			; mask away unwanted
003E69r 2               
003E69r 2               	ldy #32
003E69r 2               	eor (scraddr),y 	; XOR with what's there.
003E69r 2               	sta (scraddr),y 	; bung it in.
003E69r 2               
003E69r 2               ; _BEEB next row
003E69r 2               
003E69r 2               	lda scraddr 		; get low byte of address.
003E69r 2               	and #15
003E69r 2               	cmp #15				; is this last line of row?
003E69r 2               	beq :+
003E69r 2               
003E69r 2               	; within same row can't increment page
003E69r 2               	inc scraddr			; new low byte of address.
003E69r 2               	bne ddline2
003E69r 2               
003E69r 2               :
003E69r 2               	clc
003E69r 2               	lda scraddr
003E69r 2               	adc #<(ScreenRowBytes-15)
003E69r 2               	sta scraddr			; new low byte of address.
003E69r 2               	lda scraddr+1
003E69r 2               	adc #>(ScreenRowBytes-15)
003E69r 2               	sta scraddr+1		; new high byte of address.
003E69r 2               
003E69r 2               ; OLD SPRITE
003E69r 2               
003E69r 2               ddline2:
003E69r 2               
003E69r 2               ; still first row but different data!
003E69r 2               
003E69r 2               	dex
003E69r 2               
003E69r 2               ; first screen byte
003E69r 2               
003E69r 2               ddline_spraddr3:
003E69r 2               	ldy $ffff,x			; graphic data.
003E69r 2               ddline_shift3:
003E69r 2               	lda $ffff,y
003E69r 2               	sta sprtmp
003E69r 2               	and z80_cp 			; mask away what's not needed.
003E69r 2               
003E69r 2               	ldy #0
003E69r 2               	eor (z80_hlp),y 	; XOR with what's there.
003E69r 2               	sta (z80_hlp),y 	; bung it in.
003E69r 2               
003E69r 2               ; carry to next screen byte
003E69r 2               
003E69r 2               	lda sprtmp			; fetch data.
003E69r 2               	and z80_bp 			; mask away unwanted
003E69r 2               	sta sprtmp
003E69r 2               
003E69r 2               ; middle screen byte
003E69r 2               
003E69r 2               	inx
003E69r 2               ddline_spraddr4:
003E69r 2               	ldy $ffff,x 		; second bit of data.
003E69r 2               ddline_shift4:
003E69r 2               	lda $ffff,y
003E69r 2               	sta sprtmp2
003E69r 2               	and z80_cp 			; mask away what's not needed.
003E69r 2               	ora sprtmp
003E69r 2               
003E69r 2               	ldy #16
003E69r 2               	eor (z80_hlp),y 	; XOR with what's there.
003E69r 2               	sta (z80_hlp),y 	; bung it in.
003E69r 2               
003E69r 2               ; last screen byte
003E69r 2               
003E69r 2               	lda sprtmp2			; fetch data.
003E69r 2               	and z80_bp 			; mask away unwanted
003E69r 2               
003E69r 2               	ldy #32
003E69r 2               	eor (z80_hlp),y 	; XOR with what's there.
003E69r 2               	sta (z80_hlp),y 	; bung it in.
003E69r 2               
003E69r 2               ; next row of sprite data
003E69r 2               
003E69r 2               	inx
003E69r 2               
003E69r 2               ; _BEEB screen arrangement
003E69r 2               
003E69r 2               	lda z80_lp 			; get low byte of address.
003E69r 2               	and #15
003E69r 2               	cmp #15				; is this last line of row?
003E69r 2               	beq :+
003E69r 2               
003E69r 2               	; within same row can't increment page
003E69r 2               	inc z80_lp			; new low byte of address.
003E69r 2               	rts
003E69r 2               
003E69r 2               :
003E69r 2               	clc
003E69r 2               	lda z80_lp
003E69r 2               	adc #<(ScreenRowBytes-15)
003E69r 2               	sta z80_lp			; new low byte of address.
003E69r 2               	lda z80_lp+1
003E69r 2               	adc #>(ScreenRowBytes-15)
003E69r 2               	sta z80_lp+1		; new high byte of address.
003E69r 2               	rts
003E69r 2               .endif
003E69r 2               
003E69r 2               ;----------------------------------------------------
003E69r 2               ; Display character in A at dispx,dispy.
003E69r 2               ;
003E69r 2               ; Input:
003E69r 2               ;  A 	   = character to print
003E69r 2               ;----------------------------------------------------
003E69r 2               
003E69r 2               pchar:
003E69r 2  85 rr        	sta fntaddr
003E6Br 2  A9 00        	lda #0
003E6Dr 2  85 rr        	sta fntaddr+1
003E6Fr 2  06 rr        	asl fntaddr  		; multiply char by 8.
003E71r 2  26 rr        	rol fntaddr+1
003E73r 2  06 rr        	asl fntaddr
003E75r 2  26 rr        	rol fntaddr+1
003E77r 2  06 rr        	asl fntaddr
003E79r 2  26 rr        	rol fntaddr+1
003E7Br 2               
003E7Br 2  A5 rr        	lda fntaddr
003E7Dr 2  18           	clc
003E7Er 2  69 rr        	adc #<(FONT-256)
003E80r 2  85 rr        	sta fntaddr		; that's the low byte.
003E82r 2  A5 rr        	lda fntaddr+1
003E84r 2  69 rr        	adc #>(FONT-256)
003E86r 2  85 rr        	sta fntaddr+1		; add displacement.
003E88r 2               
003E88r 2               pchark:
003E88r 2  20 rr rr     	jsr gaadd		; set colour attribute
003E8Br 2  AD rr rr     	lda fontcol
003E8Er 2  A0 00        	ldy #0
003E90r 2  91 rr        	sta (bufaddr),y
003E92r 2               
003E92r 2  20 rr rr     	jsr gprad		; get screen address.
003E95r 2  A2 07        	ldx #7			; lines to write.
003E97r 2               pchar0:
003E97r 2  A0 00        	ldy #0
003E99r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
003E9Br 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
003E9Er 2               .if iflag
003E9Er 2               	eor #TxtInvert		; Invert
003E9Er 2               .endif
003E9Er 2  91 rr        	sta (scraddr),y 	; copy to screen.
003EA0r 2  E6 rr        	inc fntaddr		; next image byte.
003EA2r 2  D0 02        	bne :+
003EA4r 2  E6 rr        	inc fntaddr+1
003EA6r 2               :
003EA6r 2  CA           	dex			; next screen row down.
003EA7r 2  10 EE        	bpl pchar0		; repeat.
003EA9r 2               
003EA9r 2  60           	rts
003EAAr 2               
003EAAr 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
003EAEr 2  03 02 01 00  
003EB2r 2               
003EB2r 2               ;----------------------------------------------------
003EB2r 2               ; LoadFile
003EB2r 2               ;----------------------------------------------------
003EB2r 2               
003EB2r 2               loadfile:
003EB2r 2  AA           	tax
003EB3r 2  A9 rr        	lda #<msgdat		; pointer to messages.
003EB5r 2  85 rr        	sta z80_l
003EB7r 2  A9 rr        	lda #>msgdat
003EB9r 2  85 rr        	sta z80_h
003EBBr 2  20 rr rr     	jsr getwrd		; get message number.
003EBEr 2               
003EBEr 2               ; Init screen for NTSC
003EBEr 2               ; this sets the background and border color of the screen
003EBEr 2               ; in this case border black and background black
003EBEr 2               
003EBEr 2  A9 08        	lda #%00001000
003EC0r 2  8D 0F 90     	sta RegF
003EC3r 2               
003EC3r 2               ; z80_hl should point to the textstring now.
003EC3r 2               ; Read filename +length into buffer
003EC3r 2               
003EC3r 2  A0 00        	ldy #0
003EC5r 2               nameloop:
003EC5r 2  B1 rr        	lda (z80_hl),y
003EC7r 2  30 07        	bmi lastchar
003EC9r 2  99 rr rr     	sta filename,y
003ECCr 2  C8           	iny
003ECDr 2  4C rr rr     	jmp nameloop
003ED0r 2               lastchar:
003ED0r 2  29 7F        	and #$7f
003ED2r 2  99 rr rr     	sta filename,y
003ED5r 2  C8           	iny
003ED6r 2  8C rr rr     	sty filelen
003ED9r 2               
003ED9r 2               ; Load the file name (in accumulator the size of the string
003ED9r 2               ;                      containing the name, x low address for FileName,
003ED9r 2               ;                      y high address for FileName)
003ED9r 2  AD rr rr     	lda filelen
003EDCr 2  A2 rr        	ldx #<filename
003EDEr 2  A0 rr        	ldy #>filename
003EE0r 2  20 BD FF     	jsr $ffbd
003EE3r 2               
003EE3r 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
003EE3r 2               ;                       usually the first drive, and y set to 1 reads from the header
003EE3r 2               ;                       of the file the location where to save it)
003EE3r 2  A9 01        	lda #1
003EE5r 2  A2 08        	ldx #8		; Disk device
003EE7r 2  A0 01        	ldy #1
003EE9r 2  20 BA FF     	jsr $ffba
003EECr 2               
003EECr 2               ; load from disk to ram
003EECr 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
003EEEr 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
003EF0r 2  A0 00        	ldy #>$ff	; target location high (got from header)
003EF2r 2  20 D5 FF     	jsr $ffd5
003EF5r 2               
003EF5r 2               
003EF5r 2  60           	rts
003EF6r 2               
003EF6r 2               filename:
003EF6r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003EFAr 2  00 00 00 00  
003EFEr 2  00 00 00 00  
003F06r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
003F0Ar 2  00 00 00 00  
003F0Er 2  00 00 00 00  
003F16r 2               filelen:
003F16r 2  00           	.byte 0
003F17r 2               
003F17r 1               ;	.include "music.inc"
003F17r 1               	.include "z80.asm"
003F17r 2               ;------------------------------------------------------
003F17r 2               ; z80.asm
003F17r 2               ; spectrum stuff
003F17r 2               ; adresses
003F17r 2               
003F17r 2               ;ws	 = $60
003F17r 2               
003F17r 2               ;z80_f	 = ws+$00
003F17r 2               ;z80_a	 = ws+$01
003F17r 2               ;z80_af	 = z80_f
003F17r 2               
003F17r 2               ;z80_c	 = ws+$02
003F17r 2               ;z80_b	 = ws+$03
003F17r 2               ;z80_bc	 = z80_c
003F17r 2               
003F17r 2               ;z80_e	 = ws+$04
003F17r 2               ;z80_d	 = ws+$05
003F17r 2               ;z80_de	 = z80_e
003F17r 2               
003F17r 2               ;z80_l	 = ws+$06
003F17r 2               ;z80_h	 = ws+$07
003F17r 2               ;z80_hl	 = z80_l
003F17r 2               
003F17r 2               ;z80_x    = ws+$08
003F17r 2               ;z80_i    = ws+$09
003F17r 2               ;z80_ix	 = z80_x
003F17r 2               
003F17r 2               ;z80_iy	 = ws+$0a
003F17r 2               
003F17r 2               ;z80_fp	 = ws+$0c
003F17r 2               ;z80_ap	 = ws+$0d
003F17r 2               
003F17r 2               ;z80_cp	 = ws+$0e
003F17r 2               ;z80_bp	 = ws+$0f
003F17r 2               ;z80_bcp = z80_cp
003F17r 2               
003F17r 2               ;z80_ep	 = ws+$10
003F17r 2               ;z80_dp	 = ws+$11
003F17r 2               ;z80_dep = z80_ep
003F17r 2               
003F17r 2               ;z80_lp	 = ws+$12
003F17r 2               ;z80_hp	 = ws+$13
003F17r 2               ;z80_hlp = z80_lp
003F17r 2               
003F17r 2               ;z80_sp   = ws+$14
003F17r 2               
003F17r 2               ;z80_reg0 = ws+$16
003F17r 2               ;z80_reg1 = ws+$17
003F17r 2               ;z80_reg2 = ws+$18
003F17r 2               ;z80_reg3 = ws+$19
003F17r 2               
003F17r 2               ;z80_r	 = ws+$1a
003F17r 2               
003F17r 2               ; Contains seperatly 1 bit set
003F17r 2               ; _BEEB this is not safe memory to use as required by MOS
003F17r 2               
003F17r 2               _bitmem0	= $f8
003F17r 2               _bitmem1	= $f9
003F17r 2               _bitmem2	= $fa
003F17r 2               _bitmem3	= $fb
003F17r 2               _bitmem4	= $fc
003F17r 2               _bitmem5	= $fd
003F17r 2               _bitmem6	= $fe
003F17r 2               _bitmem7	= $ff
003F17r 2               
003F17r 2               ; constants
003F17r 2               _bitvalue0	= $01
003F17r 2               _bitvalue1	= $02
003F17r 2               _bitvalue2	= $04
003F17r 2               _bitvalue3	= $08
003F17r 2               _bitvalue4	= $10
003F17r 2               _bitvalue5	= $20
003F17r 2               _bitvalue6	= $40
003F17r 2               _bitvalue7	= $80
003F17r 2               
003F17r 2               _notbitvalue0	= $fe
003F17r 2               _notbitvalue1	= $fd
003F17r 2               _notbitvalue2	= $fb
003F17r 2               _notbitvalue3	= $f7
003F17r 2               _notbitvalue4	= $ef
003F17r 2               _notbitvalue5	= $df
003F17r 2               _notbitvalue6	= $bf
003F17r 2               _notbitvalue7	= $7f
003F17r 2               
003F17r 2               
003F17r 2               ;add_hl_bc:
003F17r 2               ;		lda z80_l
003F17r 2               ;		clc
003F17r 2               ;		adc z80_c
003F17r 2               ;		sta z80_l
003F17r 2               ;		lda z80_h
003F17r 2               ;		adc z80_b
003F17r 2               ;		sta z80_h
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;add_ix_de:
003F17r 2               ;		lda z80_ix
003F17r 2               ;		clc
003F17r 2               ;		adc z80_e
003F17r 2               ;		sta z80_ix
003F17r 2               ;		lda z80_ix+1
003F17r 2               ;		adc z80_d
003F17r 2               ;		sta z80_ix+1
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;add_iy_de:
003F17r 2               ;		lda z80_iy
003F17r 2               ;		clc
003F17r 2               ;		adc z80_e
003F17r 2               ;		sta z80_iy
003F17r 2               ;		lda z80_iy+1
003F17r 2               ;		adc z80_d
003F17r 2               ;		sta z80_iy+1
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;add_hl_de:
003F17r 2               ;		lda z80_l
003F17r 2               ;		clc
003F17r 2               ;		adc z80_e
003F17r 2               ;		sta z80_l
003F17r 2               ;		lda z80_h
003F17r 2               ;		adc z80_d
003F17r 2               ;		sta z80_h
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;add_ix_bc:
003F17r 2               ;		lda z80_ix
003F17r 2               ;		clc
003F17r 2               ;		adc z80_c
003F17r 2               ;		sta z80_ix
003F17r 2               ;		lda z80_ix+1
003F17r 2               ;		adc z80_b
003F17r 2               ;		sta z80_ix+1
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;add_iy_bc:
003F17r 2               ;		lda z80_iy
003F17r 2               ;		clc
003F17r 2               ;		adc z80_c
003F17r 2               ;		sta z80_iy
003F17r 2               ;		lda z80_iy+1
003F17r 2               ;		adc z80_b
003F17r 2               ;		sta z80_iy+1
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;sbc_hl_de:
003F17r 2               ;		lda z80_l
003F17r 2               ;		sbc z80_e
003F17r 2               ;		sta z80_l
003F17r 2               ;		lda z80_h
003F17r 2               ;		sbc z80_d
003F17r 2               ;		sta z80_h
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;sbc_hl_bc:
003F17r 2               ;		lda z80_l
003F17r 2               ;		sbc z80_c
003F17r 2               ;		sta z80_l
003F17r 2               ;		lda z80_h
003F17r 2               ;		sbc z80_b
003F17r 2               ;		sta z80_h
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;cmp_hl_bc:
003F17r 2               ;		lda z80_l
003F17r 2               ;		cmp z80_c
003F17r 2               ;		bne cmp_hl_bc_end
003F17r 2               ;		lda z80_h
003F17r 2               ;		cmp z80_b
003F17r 2               ;cmp_hl_bc_end:
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;cmp_iy_ix:
003F17r 2               ;		lda z80_iy
003F17r 2               ;		cmp z80_ix
003F17r 2               ;		bne cmp_iy_ix_end
003F17r 2               ;		lda z80_iy+1
003F17r 2               ;		cmp z80_ix+1
003F17r 2               ;cmp_iy_ix_end:
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;dec_hl:
003F17r 2               ;		lda z80_l
003F17r 2               ;		bne dec_hl_no_dec_h
003F17r 2               ;		dec z80_h
003F17r 2               ;dec_hl_no_dec_h:
003F17r 2               ;		dec z80_l
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;dec_ix:
003F17r 2               ;		lda z80_ix
003F17r 2               ;		bne dec_ix_no_dec_h
003F17r 2               ;		dec z80_ix+1
003F17r 2               ;dec_ix_no_dec_h:
003F17r 2               ;		dec z80_ix
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;dec_bc:
003F17r 2               ;		lda z80_c
003F17r 2               ;		bne dec_bc_no_dec_b
003F17r 2               ;		dec z80_b
003F17r 2               ;dec_bc_no_dec_b:
003F17r 2               ;		dec z80_c
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;dec_de:
003F17r 2               ;		lda z80_e
003F17r 2               ;		bne dec_de_no_dec_d
003F17r 2               ;		dec z80_d
003F17r 2               ;dec_de_no_dec_d:
003F17r 2               ;		dec z80_e
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               ;ex_af_afs:
003F17r 2               ;	rts
003F17r 2               ;ex_de_hl:
003F17r 2               ;		lda z80_e
003F17r 2               ;		ldx z80_l
003F17r 2               ;		stx z80_e
003F17r 2               ;		sta z80_l
003F17r 2               ;		lda z80_d
003F17r 2               ;		ldx z80_h
003F17r 2               ;		stx z80_d
003F17r 2               ;		sta z80_h
003F17r 2               ;		rts
003F17r 2               ;
003F17r 2               exx:
003F17r 2  A5 rr        		lda z80_c
003F19r 2  A4 rr        		ldy z80_cp
003F1Br 2  84 rr        		sty z80_c
003F1Dr 2  85 rr        		sta z80_cp
003F1Fr 2  A5 rr        		lda z80_b
003F21r 2  A4 rr        		ldy z80_bp
003F23r 2  84 rr        		sty z80_b
003F25r 2  85 rr        		sta z80_bp
003F27r 2  A5 rr        		lda z80_e
003F29r 2  A4 rr        		ldy z80_ep
003F2Br 2  84 rr        		sty z80_e
003F2Dr 2  85 rr        		sta z80_ep
003F2Fr 2  A5 rr        		lda z80_d
003F31r 2  A4 rr        		ldy z80_dp
003F33r 2  84 rr        		sty z80_d
003F35r 2  85 rr        		sta z80_dp
003F37r 2  A5 rr        		lda scraddr
003F39r 2  A4 rr        		ldy z80_lp
003F3Br 2  84 rr        		sty scraddr
003F3Dr 2  85 rr        		sta z80_lp
003F3Fr 2  A5 rr        		lda scraddr+1
003F41r 2  A4 rr        		ldy z80_hp
003F43r 2  84 rr        		sty scraddr+1
003F45r 2  85 rr        		sta z80_hp
003F47r 2  60           		rts
003F48r 2               
003F48r 2               ;ex_sp_hl:
003F48r 2               ;		tsx
003F48r 2               ;		lda $0103,x
003F48r 2               ;		ldy z80_h
003F48r 2               ;		sta z80_h
003F48r 2               ;		tya
003F48r 2               ;		sta $0103,x
003F48r 2               ;		lda $0104,x
003F48r 2               ;		ldy z80_l
003F48r 2               ;		sta z80_l
003F48r 2               ;		tya
003F48r 2               ;		sta $104,x
003F48r 2               ;		rts
003F48r 2               ;
003F48r 2               ;ldi:
003F48r 2               ;	rts
003F48r 2               ;ldir:
003F48r 2               ;		ldy #$00
003F48r 2               ;		ldx z80_b
003F48r 2               ;		beq ldir_last_page
003F48r 2               ;ldir_loop:
003F48r 2               ;		lda (z80_hl),y
003F48r 2               ;		sta (z80_de),y
003F48r 2               ;		iny
003F48r 2               ;		bne ldir_loop
003F48r 2               ;		inc z80_h
003F48r 2               ;		inc z80_d
003F48r 2               ;		dex
003F48r 2               ;		bne ldir_loop
003F48r 2               ;ldir_last_page:
003F48r 2               ;		lda z80_c
003F48r 2               ;		beq ldir_end
003F48r 2               ;ldir_last_page_loop:
003F48r 2               ;		lda (z80_hl),y
003F48r 2               ;		sta (z80_de),y
003F48r 2               ;		iny
003F48r 2               ;		cpy z80_c
003F48r 2               ;		bne ldir_last_page_loop
003F48r 2               ;ldir_end:
003F48r 2               ;		stx z80_c
003F48r 2               ;		stx z80_b
003F48r 2               ;		tya
003F48r 2               ;		clc
003F48r 2               ;		adc z80_l
003F48r 2               ;		sta z80_l
003F48r 2               ;		bcc *+4
003F48r 2               ;		inc z80_h
003F48r 2               ;		tya
003F48r 2               ;		clc
003F48r 2               ;		adc z80_e
003F48r 2               ;		sta z80_e
003F48r 2               ;		bcc *+4
003F48r 2               ;		inc z80_d
003F48r 2               ;		rts
003F48r 2               ;
003F48r 2               ;lddr:		ldy #$00
003F48r 2               ;lddr_loop:
003F48r 2               ;		lda (z80_hl),y
003F48r 2               ;		sta (z80_de),y
003F48r 2               ;		jsr dec_hl
003F48r 2               ;		jsr dec_de
003F48r 2               ;		jsr dec_bc
003F48r 2               ;		lda z80_b
003F48r 2               ;		ora z80_c
003F48r 2               ;		bne lddr_loop
003F48r 2               ;		rts
003F48r 2               ;ei:
003F48r 2               ;		rts
003F48r 2               ;di:
003F48r 2               ;		rts
003F48r 2               
003F48r 2               ;-------------------------------------------------------------
003F48r 2               ; Set bits in bitmem
003F48r 2               ;-------------------------------------------------------------
003F48r 2               
003F48r 2               .if 0
003F48r 2               z80_init:
003F48r 2               	ldx #$00
003F48r 2               	lda #$01
003F48r 2               z80_init_loop:
003F48r 2               	sta _bitmem0,x
003F48r 2               	inx
003F48r 2               	asl a
003F48r 2               	bne z80_init_loop
003F48r 2               	rts
003F48r 2               .endif
003F48r 2               
003F48r 2               push_af:
003F48r 2               push_bc:
003F48r 2               push_de:
003F48r 2               push_hl:
003F48r 2               
003F48r 2               pop_af:
003F48r 2               pop_bc:
003F48r 2               pop_de:
003F48r 2               pop_ix:
003F48r 2               pop_hl:
003F48r 2               
003F48r 2               add_hl_hl:
003F48r 2               
003F48r 2               inc_bc:
003F48r 2               inc_de:
003F48r 2               inc_hl:
003F48r 2               inc_ix:
003F48r 2               inc_sp:
003F48r 2               
003F48r 2               cpir:
003F48r 2               
003F48r 2               ex_af_af:
003F48r 2               ;	rts
003F48r 2               
003F48r 1               
003F48r 1               eind_asm:
003F48r 1               eop:					; End Of Program
003F48r 1               
003F48r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
003F48r 1               
