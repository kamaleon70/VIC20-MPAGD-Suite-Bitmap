ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "slasher.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               ;swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  01           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  14           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  03           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  08           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  98           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 CC        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3               	lda #<objdta		; objects table.
000026r 3               	sta z80_x
000026r 3               	lda #>objdta
000026r 3               	sta z80_i
000026r 3               
000026r 3               	ldx numob 		; number of objects in the game.
000026r 3               iniob0:
000026r 3               	ldy #36
000026r 3               	lda (z80_ix),y 		; start screen.
000026r 3               	ldy #33
000026r 3               	sta (z80_ix),y 		; set start screen.
000026r 3               
000026r 3               	ldy #37
000026r 3               	lda (z80_ix),y 		; find start y.
000026r 3               	ldy #34
000026r 3               	sta (z80_ix),y 		; set start y.
000026r 3               
000026r 3               	ldy #38
000026r 3               	lda (z80_ix),y 		; get initial x.
000026r 3               	ldy #35
000026r 3               	sta (z80_ix),y 		; set x coord.
000026r 3               
000026r 3               	clc 			; point to next object.
000026r 3               	lda z80_x
000026r 3               	adc #39			; distance between objects.
000026r 3               	sta z80_x
000026r 3               	bcc :+
000026r 3               	inc z80_i
000026r 3               :
000026r 3               	dex 			; repeat.
000026r 3               	bne iniob0
000026r 3               
000026r 3               	rts
000026r 3               .endif
000026r 3               
000026r 3               ;-----------------------------------------------
000026r 3               ; Redraw the screen.
000026r 3               ;
000026r 3               ; Remove old copy of all sprites for redraw.
000026r 3               ;-----------------------------------------------
000026r 3               
000026r 3               redraw:
000026r 3               .if xflag
000026r 3               	lda #WINDOWWID
000026r 3               	sta winwid
000026r 3               	lda #WINDOWHGT
000026r 3               	sta winhgt
000026r 3               .endif
000026r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000028r 3  48           	pha
000029r 3  A5 rr        	lda z80_x
00002Br 3  48           	pha
00002Cr 3               
00002Cr 3  20 rr rr     	jsr droom		; show screen layout.
00002Fr 3               .if oflag
00002Fr 3               	jsr shwob		; draw objects.
00002Fr 3               .endif
00002Fr 3               numsp0:
00002Fr 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000031r 3  85 rr        	sta tmp
000033r 3               
000033r 3  A9 rr        	lda #<sprtab		; sprite table.
000035r 3  85 rr        	sta z80_x
000037r 3  A9 rr        	lda #>sprtab
000039r 3  85 rr        	sta z80_i
00003Br 3               redrw0:
00003Br 3  A0 00        	ldy #0
00003Dr 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00003Fr 3  C9 FF        	cmp #255		; is it enabled?
000041r 3  F0 0B        	beq redrw1 		; no, find next one.
000043r 3               
000043r 3  A0 03        	ldy #var_Y
000045r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000047r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000049r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
00004Br 3               
00004Br 3  20 rr rr     	jsr sspria		; show single sprite.
00004Er 3               
00004Er 3               redrw1:
00004Er 3  18           	clc			; next sprite.
00004Fr 3  A5 rr        	lda z80_x
000051r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000053r 3  85 rr        	sta z80_x
000055r 3  90 02        	bcc :+
000057r 3  E6 rr        	inc z80_i
000059r 3               :
000059r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
00005Br 3  D0 DE        	bne redrw0
00005Dr 3               
00005Dr 3               rpblc1:
00005Dr 3               ;	jsr dshrp		; redraw shrapnel.
00005Dr 3               
00005Dr 3               .if aflag
00005Dr 3               	jsr rbloc		; draw blocks for this screen
00005Dr 3               .endif
00005Dr 3  68           	pla			; retrieve sprite pointer.
00005Er 3  85 rr        	sta z80_x
000060r 3  68           	pla
000061r 3  85 rr        	sta z80_i
000063r 3               
000063r 3  60           	rts
000064r 3               
000064r 3               ;----------------------------------------------------------------------
000064r 3               ; Clear screen routine.
000064r 3               ;
000064r 3               ; Fill screenmem $8000-$97ff with ScrFillByte
000064r 3               ;----------------------------------------------------------------------
000064r 3               
000064r 3               cls:
000064r 3  A9 10        	lda #>CharAddress	; Character RAM address.
000066r 3  8D rr rr     	sta clrdata+2
000069r 3               
000069r 3               ; Clear bitmap data
000069r 3               
000069r 3  A9 00        	lda #ScrFillByte	; Clear screen
00006Br 3  A0 00        	ldy #0
00006Dr 3  A2 10        	ldx #16
00006Fr 3               clrdata:
00006Fr 3  99 00 10     	sta CharAddress,y
000072r 3  C8           	iny
000073r 3  D0 FA        	bne clrdata
000075r 3  EE rr rr     	inc clrdata+2
000078r 3  CA           	dex
000079r 3  D0 F4        	bne clrdata
00007Br 3               
00007Br 3               ; Clear colour attributes
00007Br 3               
00007Br 3  A9 00        	lda #0
00007Dr 3  A2 00        	ldx #0
00007Fr 3               clrcolour:
00007Fr 3  9D 00 96     	sta ColorAttr,x
000082r 3  E8           	inx
000083r 3  D0 FA        	bne clrcolour
000085r 3  60           	rts
000086r 3               
000086r 3               ;----------------------------------------------------------------------
000086r 3               ; Clear colour attributes
000086r 3               ;
000086r 3               ; Reset colour attributes to fontcol
000086r 3               ;----------------------------------------------------------------------
000086r 3               
000086r 3               clrcol:
000086r 3  AD rr rr     	lda fontcol		; Clear colour attributes
000089r 3  A2 00        	ldx #0
00008Br 3               clscol:
00008Br 3  9D 00 96     	sta ColorAttr,x
00008Er 3  E8           	inx
00008Fr 3  E0 F2        	cpx #242
000091r 3  D0 F8        	bne clscol
000093r 3               
000093r 3  60           	rts
000094r 3               
000094r 3               ;----------------------------------------------------------------------
000094r 3               ; FODDER check
000094r 3               ;----------------------------------------------------------------------
000094r 3               
000094r 3               .if pflag .or dflag
000094r 3               fdchk:
000094r 3               	cmp #FODDER 		; is it fodder?
000094r 3               	beq :+
000094r 3               	rts 			; no.
000094r 3               :
000094r 3               	lda #0			; wipe fodder in MAP
000094r 3               	ldy #0
000094r 3               	sta (bufaddr),y 	; rewrite block type.
000094r 3               
000094r 3               	lda dispx		; x=x/8
000094r 3               	pha
000094r 3               	lsr a
000094r 3               	lsr a
000094r 3               	lsr a
000094r 3               	sta dispx
000094r 3               
000094r 3               	lda dispy		; y=y/8
000094r 3               	pha
000094r 3               	lsr a
000094r 3               	lsr a
000094r 3               	lsr a
000094r 3               	sta dispy
000094r 3               
000094r 3               	lda #0 			; block to write.
000094r 3               	jsr pattr 		; write block.
000094r 3               
000094r 3               	pla
000094r 3               	sta dispy
000094r 3               	pla
000094r 3               	sta dispx
000094r 3               	rts
000094r 3               .endif
000094r 3               
000094r 3               ;----------------------------------------------------
000094r 3               ; Scrolly text and puzzle variables.
000094r 3               ;----------------------------------------------------
000094r 3               
000094r 3               .if sflag
000094r 3               txtbit:	.byte 128		; bit to write.
000094r 3               txtwid:	.byte 16		; width of ticker message.
000094r 3               txtpos:	.word msgdat
000094r 3               txtini:	.word msgdat
000094r 3               txtscr:	.word ScreenAddr
000094r 3               .endif
000094r 3               
000094r 3               ;----------------------------------------------------
000094r 3               ; Specialist routines.
000094r 3               ; Process shrapnel.
000094r 3               ;----------------------------------------------------
000094r 3               proshr:
000094r 3               .if pflag
000094r 3               	lda #<SHRAPN		; table.
000094r 3               	sta z80_x
000094r 3               	lda #>SHRAPN
000094r 3               	sta z80_i
000094r 3               
000094r 3               	lda #NUMSHR		; shrapnel pieces to process.
000094r 3               	sta shrctr
000094r 3               prosh0:
000094r 3               	ldy #0
000094r 3               	lda (z80_ix),y		; on/off marker.
000094r 3               	asl a
000094r 3               proshx:
000094r 3               	bcs :+
000094r 3               	jsr prosh1 		; on, so process it.
000094r 3               :
000094r 3               	clc
000094r 3               	lda z80_x
000094r 3               	adc #SHRSIZ
000094r 3               	sta z80_x
000094r 3               	bcc :+
000094r 3               	inc z80_i
000094r 3               :
000094r 3               	dec shrctr		; round again.
000094r 3               	bne prosh0
000094r 3               .endif
000094r 3               .if sflag
000094r 3               	jsr scrly
000094r 3               .endif
000094r 3  60           	rts
000095r 3               
000095r 3               .if pflag
000095r 3               ;----------------------------------------------------
000095r 3               ; Proces shrapnel piece
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               prosh1:
000095r 3               	jsr plot 		; delete the pixel.
000095r 3               
000095r 3               	lda #<shrptr		; shrapnel routine pointers.
000095r 3               	sta z80_l
000095r 3               	lda #>shrptr
000095r 3               	sta z80_h
000095r 3               
000095r 3               	ldy #0
000095r 3               	lda (z80_ix),y		; restore shrapnel type.
000095r 3               	jsr prosh2 		; run the routine.
000095r 3               	jsr chkxy		; check x and y are good before we redisplay.
000095r 3               
000095r 3               	lda #<SHRSIZ 		; distance to next.
000095r 3               	sta z80_e
000095r 3               	lda #>SHRSIZ
000095r 3               	sta z80_d
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Run the routine
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               prosh2:
000095r 3               	asl a 			; 2 bytes per address.
000095r 3               	tay
000095r 3               	lda shrptr,y
000095r 3               	sta z80_l
000095r 3               	lda shrptr+1,y 		; fetch high byte from table.
000095r 3               	sta z80_h
000095r 3               	jmp (z80_hl) 		; jump to routine.
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Paricle routine table
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               shrptr:	.word laser		; laser.
000095r 3               	.word trail		; vapour trail.
000095r 3               	.word shrap		; shrapnel from explosion.
000095r 3               	.word dotl		; horizontal starfield left.
000095r 3               	.word dotr		; horizontal starfield right.
000095r 3               	.word dotu		; vertical starfield up.
000095r 3               	.word dotd		; vertical starfield down.
000095r 3               	.word ptcusr		; user particle.
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Explosion shrapnel.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               shrap:
000095r 3               	ldy #1
000095r 3               	lda (z80_ix),y 		; get the angle.
000095r 3               	clc
000095r 3               	adc #<shrsin		; shrapnel sine table.
000095r 3               	sta z80_l
000095r 3               	lda #>shrsin
000095r 3               	adc #0
000095r 3               	sta z80_h
000095r 3               
000095r 3               	ldy #0
000095r 3               	lda (z80_hl),y 		; fetch value from table.
000095r 3               	sta z80_e
000095r 3               	inc z80_l 		; next byte of table.
000095r 3               	bne :+
000095r 3               	inc z80_h
000095r 3               :
000095r 3               	ldy #0
000095r 3               	lda (z80_hl),y		; fetch value from table.
000095r 3               	sta z80_d
000095r 3               	inc z80_l		; next byte of table.
000095r 3               	bne :+
000095r 3               	inc z80_h
000095r 3               :
000095r 3               	ldy #0
000095r 3               	lda (z80_hl),y 		; fetch value from table.
000095r 3               	sta z80_c
000095r 3               	inc z80_l 		; next byte of table.
000095r 3               	bne :+
000095r 3               	inc z80_h
000095r 3               :
000095r 3               	ldy #0
000095r 3               	lda (z80_hl),y 		; fetch value from table.
000095r 3               	sta z80_b
000095r 3               
000095r 3               	ldy #2
000095r 3               	lda (z80_ix),y 		; x coordinate in hl.
000095r 3               	clc
000095r 3               	adc z80_e		; add sine lb
000095r 3               	sta (z80_ix),y		; store new coordinate lb.
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y
000095r 3               	adc z80_d		; add sine hb
000095r 3               	sta (z80_ix),y		; store new coordinate hb.
000095r 3               
000095r 3               	ldy #4
000095r 3               	lda (z80_ix),y	 	; y coordinate in hl.
000095r 3               	clc
000095r 3               	adc z80_c		; add cosine lb
000095r 3               	sta (z80_ix),y		; store new coordinate lb.
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y
000095r 3               	adc z80_b		; add cosine lb
000095r 3               	sta (z80_ix),y		; store new coordinate hb.
000095r 3               
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Move dots
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               dotl:
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y
000095r 3               	sec
000095r 3               	sbc #1		 	; move left.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               dotr:
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y
000095r 3               	clc
000095r 3               	adc #1		 	; move left.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               dotu:
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y
000095r 3               	sec
000095r 3               	sbc #1		 	; move up.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               dotd:
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y
000095r 3               	clc
000095r 3               	adc #1			; move down.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Check if coordinates are ok before redrawing at new position.
000095r 3               ;
000095r 3               ; left:   X>L		X=L	Ok
000095r 3               ; right:  R+15>X	X=R	Ok
000095r 3               ; top:    Y>T		Y=T	Ok
000095r 3               ; bottom: B+15>Y	Y=B	Ok
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               chkxy:
000095r 3               
000095r 3               ; top:    Y>T		Y=T	Ok
000095r 3               
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000095r 3               	cmp wntopx		; window top.
000095r 3               	bcs :+			; compare with top window limit.
000095r 3               	jmp kilshr		; out of window, kill shrapnel.
000095r 3               :
000095r 3               ; left:   X>L		X=L	Ok
000095r 3               
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000095r 3               	cmp wnlftx		; left edge.
000095r 3               	bcs :+			; compare with left window limit.
000095r 3               	jmp kilshr		; out of window, kill shrapnel.
000095r 3               :
000095r 3               ; bottom: B+15>Y	Y=B	Ok
000095r 3               
000095r 3               	lda wnbotx		; point to bottom.
000095r 3               	clc
000095r 3               	adc #15
000095r 3               	ldy #3
000095r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000095r 3               	bcs :+			; compare with shrapnel x coordinate.
000095r 3               	jmp kilshr		; off screen, kill shrapnel..
000095r 3               :
000095r 3               ; right:  R+15>X	X=R	Ok
000095r 3               
000095r 3               	lda wnrgtx		; point to right edge.
000095r 3               	clc
000095r 3               	adc #15
000095r 3               	ldy #5
000095r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000095r 3               	bcs :+			; compare with window limit.
000095r 3               	jmp kilshr		; off screen, kill shrapnel.
000095r 3               :
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Drop through.
000095r 3               ; Display shrapnel.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               plot:
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y		; y integer.
000095r 3               	sta dispy	 	; workspace coordinates.
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y	 	; x integer.
000095r 3               	sta dispx 		; workspace coordinates.
000095r 3               
000095r 3               	ldy #0
000095r 3               	lda (z80_ix),y 		; type.
000095r 3               	bne :+			; is it a laser?
000095r 3               	jmp plot1 		; yes, draw laser instead.
000095r 3               :
000095r 3               plot0:
000095r 3               	lda dispx		; which pixel within byte do we
000095r 3               	and #7			; want to set first?
000095r 3               	tay
000095r 3               	lda dots,y 		; table of small pixel positions.
000095r 3               	sta z80_e 		; get value.
000095r 3               
000095r 3               	jsr scadd 		; screen address.
000095r 3               	ldy #0
000095r 3               	lda (scraddr),y		; see what's already there.
000095r 3               	eor z80_e
000095r 3               	sta (scraddr),y 	; put back on screen.
000095r 3               	rts
000095r 3               
000095r 3               plot1:
000095r 3               	jsr scadd 		; screen address.
000095r 3               	ldy #0
000095r 3               	lda (scraddr),y 	; fetch byte there.
000095r 3               	eor #255 		; toggle all bits.
000095r 3               	sta (scraddr),y 	; new byte.
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Switch off shrapnel
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               kilshr:
000095r 3               	lda #128
000095r 3               	ldy #0
000095r 3               	sta (z80_ix),y	; switch off shrapnel.
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Sine/cosine table
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
000095r 3               	.word 1024,0,946,65144,724,64811,391,64589
000095r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000095r 3               	.word 64512,0,64589,391,64811,724,65144,946
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Create trail
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               trail:
000095r 3               	ldy #1
000095r 3               	lda (z80_ix),y 	; time remaining.
000095r 3               	sec
000095r 3               	sbc #1
000095r 3               	sta (z80_ix),y
000095r 3               	bne :+
000095r 3               	jmp trailk		; time to switch it off.
000095r 3               :
000095r 3               	jsr qrand		; get a random number.
000095r 3               	lsr a 			; x or y axis?
000095r 3               	bcc :+
000095r 3               	jmp trailv		; use y.
000095r 3               :
000095r 3               ; Trail horizontal
000095r 3               
000095r 3               	lsr a 			; which direction?
000095r 3               	bcc :+
000095r 3               	jmp traill		; go left.
000095r 3               :
000095r 3               ; Trail right
000095r 3               
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y
000095r 3               	clc
000095r 3               	adc #1	 		; go right.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               
000095r 3               ; Trail left
000095r 3               
000095r 3               traill:
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y
000095r 3               	sec
000095r 3               	sbc #1 			; go left.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               
000095r 3               ; Trail vertical
000095r 3               
000095r 3               trailv:
000095r 3               	lsr a		 	; which direction?
000095r 3               	bcc :+
000095r 3               	jmp trailu		; go up.
000095r 3               :
000095r 3               ; Trail down
000095r 3               
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y
000095r 3               	clc
000095r 3               	adc #1 			; go down.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               
000095r 3               ; Trail up
000095r 3               
000095r 3               trailu:
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y
000095r 3               	sec
000095r 3               	sbc #1 			; go up.
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               
000095r 3               ; Kill trail
000095r 3               
000095r 3               trailk:
000095r 3               	lda #200		; set off-screen to kill vapour trail.
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Create laser beam
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               laser:
000095r 3               	ldy #1
000095r 3               	lda (z80_ix),y 		; direction.
000095r 3               	ror a 			; left or right?
000095r 3               	bcs :+
000095r 3               	jmp laserl		; move left.
000095r 3               :
000095r 3               ; Laser right
000095r 3               
000095r 3               	lda #8			; distance to travel.
000095r 3               	sta z80_b
000095r 3               	jmp laserm		; move laser.
000095r 3               
000095r 3               ; Laser left
000095r 3               
000095r 3               laserl:
000095r 3               	lda #248		; distance to travel.
000095r 3               	sta z80_b
000095r 3               laserm:
000095r 3               	ldy #5
000095r 3               	lda (z80_ix),y		; x position.
000095r 3               	clc
000095r 3               	adc z80_b		; add distance.
000095r 3               	sta (z80_ix),y		; set new x coordinate.
000095r 3               
000095r 3               ; Test new block.
000095r 3               
000095r 3               	sta dispx 		; set x for block collision detection purposes.
000095r 3               	ldy #3
000095r 3               	lda (z80_ix),y 		; get y.
000095r 3               	sta dispy		; set coordinate for collision test.
000095r 3               	jsr tstbl 		; get block type there.
000095r 3               	cmp #WALL		; is it solid?
000095r 3               	bne :+
000095r 3               	jmp trailk		; yes, it cannot pass.
000095r 3               :
000095r 3               .if pflag .or dflag
000095r 3                       cmp #FODDER             ; is it fodder?
000095r 3                       bne :+
000095r 3                       jsr fdchk               ; remove fodder block.
000095r 3                       jmp trailk              ; destroy laser.
000095r 3               :
000095r 3               .endif
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Dots mask
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               dots:	.byte 128,64,32,16,8,4,2,1
000095r 3               
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Plot, preserving de.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               plotde:
000095r 3               	lda z80_d 		; put de on stack.
000095r 3               	pha
000095r 3               	lda z80_e
000095r 3               	pha
000095r 3               
000095r 3               	jsr plot 		; plot pixel.
000095r 3               
000095r 3               	pla			; restore de from stack.
000095r 3               	sta z80_e
000095r 3               	pla
000095r 3               	sta z80_d
000095r 3               
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Shoot a laser.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               shoot:
000095r 3               	sta z80_c		; store direction in c register.
000095r 3               	ldy #8
000095r 3               	lda (z80_ix),y 		; y coordinate.
000095r 3               	clc
000095r 3               shoot1:
000095r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000095r 3               	sta z80_l 		; puty y coordinate in l.
000095r 3               
000095r 3               	ldy #9
000095r 3               	lda (z80_ix),y 		; x coordinate in h.
000095r 3               	sta z80_h
000095r 3               
000095r 3               	lda z80_i		; store pointer to sprite.
000095r 3               	pha
000095r 3               	lda z80_x
000095r 3               	pha
000095r 3               
000095r 3               	jsr fpslot 		; find particle slot.
000095r 3               	bcs :+
000095r 3               	jmp vapou2		; failed, restore ix.
000095r 3               :
000095r 3               	lda #0
000095r 3               	ldy #0
000095r 3               	sta (z80_ix),y 		; set up a laser.
000095r 3               
000095r 3               	lda z80_c
000095r 3               	ldy #1
000095r 3               	sta (z80_ix),y 		; set the direction.
000095r 3               
000095r 3               	lda z80_l
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y		; set y coordinate.
000095r 3               
000095r 3               	ror z80_c		; check direction we want.
000095r 3               	bcc :+
000095r 3               	jmp shootr		; shoot right.
000095r 3               :
000095r 3               	lda z80_h		; X position.
000095r 3               shoot0:
000095r 3               	and #248		; align on character boundary.
000095r 3               	ldy #5
000095r 3               	sta (z80_ix),y		; set x coordinate.
000095r 3               	jmp vapou0 		; draw first image.
000095r 3               shootr:
000095r 3               	lda z80_h		; x position.
000095r 3               	clc
000095r 3               	adc #15			; look right.
000095r 3               	jmp shoot0		; align and continue.
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Create a bit of vapour trail.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               vapour:
000095r 3               	lda z80_i		; store pointer to sprite.
000095r 3               	pha
000095r 3               	lda z80_x
000095r 3               	pha
000095r 3               
000095r 3               	ldy #8
000095r 3               	lda (z80_ix),y 		; y coordinate.
000095r 3               	clc
000095r 3               vapou3:
000095r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000095r 3               	sta z80_l
000095r 3               
000095r 3               	ldy #9
000095r 3               	lda (z80_ix),y 		; x coordinate.
000095r 3               	adc #7
000095r 3               	sta z80_h
000095r 3               
000095r 3               	jsr fpslot 		; find particle slot.
000095r 3               	bcc :+
000095r 3               	jmp vapou1		; no, we can use it.
000095r 3               :
000095r 3               vapou2:
000095r 3               	pla
000095r 3               	sta z80_x
000095r 3               	pla
000095r 3               	sta z80_i
000095r 3               	rts
000095r 3               vapou1:
000095r 3               	lda z80_l
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y		; set up y.
000095r 3               
000095r 3               	lda z80_h
000095r 3               	ldy #5
000095r 3               	sta (z80_ix),y 		; set up x coordinate.
000095r 3               
000095r 3               	jsr qrand		; get quick random number.
000095r 3               	and #15			; random time.
000095r 3               	clc
000095r 3               	adc #15			; minimum time on screen.
000095r 3               	ldy #1
000095r 3               	sta (z80_ix),y		; set time on screen.
000095r 3               
000095r 3               	lda #1
000095r 3               	ldy #0
000095r 3               	sta (z80_ix),y		; define particle as vapour trail.
000095r 3               vapou0:
000095r 3               	jsr chkxy		; plot first position.
000095r 3               	jmp vapou2
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Create a user particle.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               ptusr:
000095r 3               	sta z80_f		; store timer.
000095r 3               
000095r 3               	ldy #8
000095r 3               	lda (z80_ix),y 		; y coordinate.
000095r 3               	clc
000095r 3               	adc #7			; mid-point of sprite.
000095r 3               	sta z80_l
000095r 3               
000095r 3               	ldy #9
000095r 3               	lda (z80_ix),y 		; x coordinate.
000095r 3               	clc
000095r 3               	adc #7			; mid-point of sprite.
000095r 3               	sta z80_h
000095r 3               
000095r 3               	jsr fpslot 		; find particle slot.
000095r 3               	bcs ptusr1
000095r 3               	rts 			; out of slots, can't generate anything.
000095r 3               ptusr1:
000095r 3               	lda z80_l
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y 		; set up y.
000095r 3               
000095r 3               	lda z80_h
000095r 3               	ldy #5
000095r 3               	sta (z80_ix),y		; set up x coordinate.
000095r 3               
000095r 3               	lda z80_f 		; restore timer.
000095r 3               	ldy #1
000095r 3               	sta (z80_ix),y		; set time on screen.
000095r 3               
000095r 3               	lda #7
000095r 3               	ldy #0
000095r 3               	sta (z80_ix),y		; define particle as user particle.
000095r 3               
000095r 3               	jmp chkxy		; plot first position.
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Create a vertical or horizontal star.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               star:
000095r 3               	lda z80_i		; store pointer to sprite.
000095r 3               	pha
000095r 3               	lda z80_x
000095r 3               	pha
000095r 3               
000095r 3               	jsr fpslot 		; find particle slot.
000095r 3               	bcs star7		; found one we can use.
000095r 3               star0:
000095r 3               	pla 			; restore sprite pointer.
000095r 3               	sta z80_x
000095r 3               	pla
000095r 3               	sta z80_i
000095r 3               	rts 			; out of slots, can't generate anything.
000095r 3               star7:
000095r 3               	lda z80_c		; direction.
000095r 3               	and #3 			; is it left?
000095r 3               	bne :+
000095r 3               	jmp star1 		; yes, it's left.
000095r 3               :
000095r 3               	cmp #1 			; is it right?
000095r 3               	bne :+
000095r 3               	jmp star2 		; yes, it's right.
000095r 3               :
000095r 3               	cmp #2 			; is it up?
000095r 3               	bne :+
000095r 3               	jmp star3 		; yes, it's up.
000095r 3               :
000095r 3               	ldy wntopx 		; get edge of screen.
000095r 3               	iny			; down one pixel.
000095r 3               	tya
000095r 3               star8:
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y 		; set y coord.
000095r 3               	jsr qrand 		; get quick random number.
000095r 3               star9:
000095r 3               	ldy #5
000095r 3               	sta (z80_ix),y		; set x position.
000095r 3               
000095r 3               	lda z80_c		; direction.
000095r 3               	and #3			; zero to three.
000095r 3               	clc
000095r 3               	adc #3			; 3 to 6 for starfield.
000095r 3               	ldy #0
000095r 3               	sta (z80_ix),y		; define particle as star.
000095r 3               	jsr chkxy		; plot first position.
000095r 3               	jmp star0
000095r 3               star1:
000095r 3               	jsr qrand		; get quick random number.
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y 		; set y coord.
000095r 3               
000095r 3               	lda wnrgtx 		; get edge of screen.
000095r 3               	clc
000095r 3               	adc #15			; add width of sprite minus 1.
000095r 3               	jmp star9
000095r 3               star2:
000095r 3               	jsr qrand 		; get quick random number.
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y		; set y coord.
000095r 3               
000095r 3               	lda wnlftx		; get edge of screen.
000095r 3               	jmp star9
000095r 3               star3:
000095r 3               	lda wnbotx 		; get edge of screen.
000095r 3               	clc
000095r 3               	adc #15 		; height of sprite minus one pixel.
000095r 3               	jmp star8
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Find particle slot for lasers or vapour trail.
000095r 3               ; can't use alternate accumulator.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               fpslot:
000095r 3               	lda #<SHRAPN 		; shrapnel table.
000095r 3               	sta z80_x
000095r 3               	lda #>SHRAPN
000095r 3               	sta z80_i
000095r 3               
000095r 3               	lda #NUMSHR		; number of pieces in table.
000095r 3               	sta z80_b
000095r 3               fpslt0:
000095r 3               	ldy #0
000095r 3               	lda (z80_ix),y		; get type.
000095r 3               	asl a  			; is this slot in use?
000095r 3               	bcc :+
000095r 3               	rts			; no, we can use it.
000095r 3               :
000095r 3               	clc			; point to more shrapnel.
000095r 3               	lda z80_x
000095r 3               	adc #SHRSIZ
000095r 3               	sta z80_x
000095r 3               	bcc :+
000095r 3               	inc z80_i
000095r 3               :
000095r 3               	dec z80_b		; repeat for all shrapnel.
000095r 3               	bne fpslt0
000095r 3               
000095r 3               	clc
000095r 3               	rts 			; out of slots, can't generate anything.
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Create an explosion at sprite position.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               explod:
000095r 3               	sta z80_c 		; particles to create.
000095r 3               
000095r 3               	lda z80_i 		; store pointer to sprite.
000095r 3               	pha
000095r 3               	lda z80_x
000095r 3               	pha
000095r 3               
000095r 3               	ldy #8
000095r 3               	lda (z80_ix),y 		; y coordinate.
000095r 3               	sta z80_l
000095r 3               	ldy #9
000095r 3               	lda (z80_ix),y		; x coordinate.
000095r 3               	sta z80_h
000095r 3               
000095r 3               	lda #<SHRAPN		; shrapnel table.
000095r 3               	sta z80_x
000095r 3               	lda #>SHRAPN
000095r 3               	sta z80_i
000095r 3               
000095r 3               	lda #NUMSHR		; number of pieces in table.
000095r 3               	sta explcnt
000095r 3               expld0:
000095r 3               	ldy #0
000095r 3               	lda (z80_ix),y		; get type.
000095r 3               	asl a 			; is this slot in use?
000095r 3               	bcs expld1		; no, we can use it.
000095r 3               expld2:
000095r 3               	clc
000095r 3               	lda z80_x
000095r 3               	adc #SHRSIZ
000095r 3               	sta z80_x
000095r 3               	bcc :+
000095r 3               	inc z80_i
000095r 3               :
000095r 3               	dec explcnt		; repeat for all shrapnel.
000095r 3               	bne expld0
000095r 3               expld3:
000095r 3               	pla			; restore sprite pointer.
000095r 3               	sta z80_x
000095r 3               	pla
000095r 3               	sta z80_i
000095r 3               	rts 			; out of slots, can't generate any more.
000095r 3               
000095r 3               expld1:
000095r 3               	lda z80_c		; shrapnel counter.
000095r 3               	and #15			; 0 to 15.
000095r 3               	clc			; add to x.
000095r 3               	adc z80_l
000095r 3               	ldy #3
000095r 3               	sta (z80_ix),y		; y coord.
000095r 3               
000095r 3               	lda seed3 		; crap random number.
000095r 3               	and #15			; 0 to 15.
000095r 3               	clc 			; add to y.
000095r 3               	adc z80_h
000095r 3               	ldy #5
000095r 3               	sta (z80_ix),y		; x coord.
000095r 3               
000095r 3               	lda #2
000095r 3               	ldy #0
000095r 3               	sta (z80_ix),y		; switch it on.
000095r 3               
000095r 3               	jsr chkxy		; plot first position.
000095r 3               	jsr qrand		; quick random angle.
000095r 3               	and #60 		; keep within range.
000095r 3               	ldy #1
000095r 3               	sta (z80_ix),y		; angle.
000095r 3               
000095r 3               	dec z80_c		; one less piece of shrapnel to generate.
000095r 3               	bne expld2 		; back to main explosion loop.
000095r 3               	jmp expld3 		; restore sprite pointer and exit.
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Quick random
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               qrand:
000095r 3               	jsr random		; r register.
000095r 3               	eor seed3		; combine with seed.
000095r 3               	sta seed3 		; new seed.
000095r 3               	rts
000095r 3               
000095r 3               ;----------------------------------------------------
000095r 3               ; Display all shrapnel.
000095r 3               ;----------------------------------------------------
000095r 3               
000095r 3               dshrp:
000095r 3               	lda #<plotde		; display routine.
000095r 3               	sta proshx+1
000095r 3               	lda #>plotde
000095r 3               	sta proshx+2
000095r 3               	jsr proshr		; process shrapnel.
000095r 3               
000095r 3               	lda #<prosh1		; processing routine.
000095r 3               	sta proshx+1
000095r 3               	lda #>prosh1
000095r 3               	sta proshx+2
000095r 3               	rts
000095r 3               
000095r 3               ;------------------------------------------------------
000095r 3               ; Particle engine.
000095r 3               ;
000095r 3               ; Init particle data for 55 particles in SHRAPN table.
000095r 3               ; Every particle has 6 bytes.
000095r 3               ;
000095r 3               ; global:	-
000095r 3               ; local:	x,y,hl
000095r 3               ; calls:	-
000095r 3               ;------------------------------------------------------
000095r 3               
000095r 3               inishr:
000095r 3               	lda #<SHRAPN 		; table.
000095r 3               	sta z80_l
000095r 3               	lda #>SHRAPN
000095r 3               	sta z80_h
000095r 3               
000095r 3               	ldy #0
000095r 3               	ldx #NUMSHR		; shrapnel pieces to process.
000095r 3               inish0:
000095r 3               	lda #255 		; kill the shrapnel.
000095r 3               	sta (z80_hl),y
000095r 3               
000095r 3               	clc 			; point there.
000095r 3               	lda z80_l
000095r 3               	adc #SHRSIZ		; distance to next.
000095r 3               	sta z80_l
000095r 3               	bcc :+
000095r 3               	inc z80_h
000095r 3               :
000095r 3               	dex
000095r 3               	bne inish0 		; round again.
000095r 3               	rts
000095r 3               
000095r 3               ;------------------------------------------------------
000095r 3               ; Check for collision between laser and sprite.
000095r 3               ;------------------------------------------------------
000095r 3               
000095r 3               lcol:
000095r 3               	lda #<SHRAPN		; shrapnel table.
000095r 3               	sta z80_l
000095r 3               	lda #>SHRAPN
000095r 3               	sta z80_h
000095r 3               
000095r 3               	lda #NUMSHR		; number of pieces in table.
000095r 3               	sta z80_b
000095r 3               lcol0:
000095r 3               	ldy #0
000095r 3               	lda (z80_hl),y 		; get type.
000095r 3               	beq lcol1		; yes, check collision.
000095r 3               lcol3:
000095r 3               	clc			; point to more shrapnel.
000095r 3               	lda z80_l
000095r 3               	adc #SHRSIZ
000095r 3               	sta z80_l
000095r 3               	bcc :+
000095r 3               	inc z80_h
000095r 3               :
000095r 3               	dec z80_b		; repeat for all shrapnel.
000095r 3               	bne lcol0
000095r 3               	clc
000095r 3               	rts 			; no collision, carry not set.
000095r 3               lcol1:
000095r 3               	ldy #3
000095r 3               	lda (z80_hl),y		; get y.
000095r 3               	sec
000095r 3               	ldy #8
000095r 3               	sbc (z80_ix),y		; subtract sprite y.
000095r 3               lcolh:
000095r 3               	cmp #SPR_HGT 		; within range?
000095r 3               	bcc :+
000095r 3               	jmp lcol2		; no, missed.
000095r 3               :
000095r 3               	ldy #5
000095r 3               	lda (z80_hl),y 		; get x.
000095r 3               	sec
000095r 3               	ldy #9
000095r 3               	sbc (z80_ix),y 		; subtract sprite y.
000095r 3               	cmp #16			; within range?
000095r 3               	bcs :+
000095r 3               	jmp lcol4 		; yes, collision occurred.
000095r 3               :
000095r 3               lcol2:
000095r 3               	jmp lcol3
000095r 3               lcol4:
000095r 3               	sec
000095r 3               	rts 			; return with carry set for collision.
000095r 3               .endif
000095r 3               
000095r 3               ;------------------------------------------------------
000095r 3               ; Main game engine code starts here.
000095r 3               ; After initialisation, mloop is the main loop
000095r 3               ;------------------------------------------------------
000095r 3               
000095r 3               game:
000095r 3               
000095r 3               ; Set up screen address table.
000095r 3               
000095r 3               setsat:
000095r 3  A9 00        	lda #<CharAddress	; start of screen.
000097r 3  85 rr        	sta scraddr
000099r 3  A9 10        	lda #>CharAddress
00009Br 3  85 rr        	sta scraddr+1
00009Dr 3               
00009Dr 3  A0 00        	ldy #0			; vertical lines on screen.
00009Fr 3               setsa0:
00009Fr 3  A5 rr        	lda scraddr
0000A1r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000A4r 3  A5 rr        	lda scraddr+1
0000A6r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000A9r 3  20 rr rr     	jsr nline		; next line down.
0000ACr 3  C8           	iny			; next position in table.
0000ADr 3  D0 F0        	bne setsa0
0000AFr 3               
0000AFr 3               ; Set up colour address table
0000AFr 3               
0000AFr 3               setsof:
0000AFr 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000B1r 3  85 rr        	sta bufaddr
0000B3r 3  A9 96        	lda #>ColorAttr
0000B5r 3  85 rr        	sta bufaddr+1
0000B7r 3               
0000B7r 3  A0 00        	ldy #0			; vertical lines on screen.
0000B9r 3               setof0:
0000B9r 3  A5 rr        	lda bufaddr
0000BBr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000BEr 3  A5 rr        	lda bufaddr+1
0000C0r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000C3r 3  18           	clc			; next line down.
0000C4r 3  A5 rr        	lda bufaddr
0000C6r 3  69 16        	adc #ScrWidth
0000C8r 3  85 rr        	sta bufaddr
0000CAr 3  90 02        	bcc :+
0000CCr 3  E6 rr        	inc bufaddr+1
0000CEr 3               :
0000CEr 3  C8           	iny			; next position in table.
0000CFr 3  C0 0B        	cpy #ScrHeight/2
0000D1r 3  D0 E6        	bne setof0
0000D3r 3               
0000D3r 3               ; Init graphics mode
0000D3r 3               
0000D3r 3  20 rr rr     	jsr init
0000D6r 3               
0000D6r 3               ; Init joysticks
0000D6r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0000D9r 3               
0000D9r 3               rpblc2:
0000D9r 3               .if pflag
0000D9r 3               	jsr inishr 		; initialise particle engine.
0000D9r 3               .endif
0000D9r 3               evintr:
0000D9r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0000DCr 3               
0000DCr 3  A9 02        	lda #WALL 		; write default property.
0000DEr 3  A2 00        	ldx #0
0000E0r 3               clrmap:
0000E0r 3  9D 00 04     	sta MAP,x 		; block properties.
0000E3r 3  9D 00 05     	sta MAP+256,x
0000E6r 3  E8           	inx
0000E7r 3  D0 F7        	bne clrmap
0000E9r 3               
0000E9r 3               .if oflag
0000E9r 3               	jsr iniob 		; initialise objects.
0000E9r 3               .endif
0000E9r 3  A9 00        	lda #0			; put zero in accumulator.
0000EBr 3  85 rr        	sta gamwon		; reset game won flag.
0000EDr 3               
0000EDr 3  20 rr rr     	jsr inisc 		; init the score.
0000F0r 3               mapst:
0000F0r 3  AD rr rr     	lda stmap 		; start position on map.
0000F3r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0000F6r 3               
0000F6r 3               inipbl:
0000F6r 3               .if aflag
0000F6r 3               	lda #<eop		; reset blockpointer
0000F6r 3               	sta pbptr
0000F6r 3               	lda #>eop
0000F6r 3               	sta pbptr+1
0000F6r 3               .endif
0000F6r 3  20 rr rr     	jsr initsc 		; set up first screen.
0000F9r 3               
0000F9r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0000FBr 3  85 rr        	sta z80_x
0000FDr 3  A9 rr        	lda #>ssprit
0000FFr 3  85 rr        	sta z80_i
000101r 3               evini:
000101r 3  20 rr rr     	jsr evnt13 		; initialisation.
000104r 3               
000104r 3               ; Two restarts.
000104r 3               ; First restart - clear all sprites and initialise everything.
000104r 3               
000104r 3               rstrt:
000104r 3  20 rr rr     	jsr rsevt 		; restart events.
000107r 3  20 rr rr     	jsr xspr 		; clear sprite table.
00010Ar 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
00010Dr 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000110r 3  4C rr rr     	jmp rstrt0
000113r 3               
000113r 3               ; Second restart - clear all but player, and don't initialise him.
000113r 3               
000113r 3               rstrtn:
000113r 3  20 rr rr     	jsr rsevt		; restart events.
000116r 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
000119r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
00011Cr 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
00011Fr 3               
00011Fr 3               ; Set up the player and/or enemy sprites.
00011Fr 3               
00011Fr 3               rstrt0:
00011Fr 3  A9 00        	lda #0 			; zero in accumulator.
000121r 3  85 rr        	sta nexlev 		; reset next level flag.
000123r 3  85 rr        	sta restfl 		; reset restart flag.
000125r 3  85 rr        	sta deadf 		; reset dead flag.
000127r 3               
000127r 3  20 rr rr     	jsr droom 		; show screen layout.
00012Ar 3               rpblc0:
00012Ar 3               .if pflag
00012Ar 3               	jsr inishr 		; initialise particle engine.
00012Ar 3               .endif
00012Ar 3               .if aflag
00012Ar 3               	jsr rbloc		; draw blocks for this screen
00012Ar 3               .endif
00012Ar 3               .if oflag
00012Ar 3               	jsr shwob		; draw objects.
00012Ar 3               .endif
00012Ar 3               
00012Ar 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00012Cr 3  85 rr        	sta z80_x
00012Er 3  A9 rr        	lda #>sprtab
000130r 3  85 rr        	sta z80_i
000132r 3  20 rr rr     	jsr dspr 		; display sprites.
000135r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000137r 3  85 rr        	sta z80_x
000139r 3  A9 rr        	lda #>(sprtab+TABSIZ)
00013Br 3  85 rr        	sta z80_i
00013Dr 3  20 rr rr     	jsr dspr 		; display sprites.
000140r 3               mloop:
000140r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000143r 3               
000143r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000145r 3  85 rr        	sta z80_x
000147r 3  A9 rr        	lda #>sprtab
000149r 3  85 rr        	sta z80_i
00014Br 3  20 rr rr     	jsr dspr 		; display even sprites.
00014Er 3               
00014Er 3               ;	jsr plsnd 		; play sounds.
00014Er 3  20 rr rr     	jsr vsync 		; synchronise with display.
000151r 3  20 rr rr     	jsr proshr
000154r 3               
000154r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000156r 3  85 rr        	sta z80_x
000158r 3  A9 rr        	lda #>(sprtab+TABSIZ)
00015Ar 3  85 rr        	sta z80_i
00015Cr 3  20 rr rr     	jsr dspr 		; display odd sprites.
00015Fr 3               
00015Fr 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000161r 3  85 rr        	sta z80_x
000163r 3  A9 rr        	lda #>(ssprit)
000165r 3  85 rr        	sta z80_i
000167r 3               evlp1:
000167r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
00016Ar 3  20 rr rr     	jsr pspr 		; process sprites.
00016Dr 3               
00016Dr 3               ; Main loop events.
00016Dr 3               
00016Dr 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00016Fr 3  85 rr        	sta z80_x
000171r 3  A9 rr        	lda #>ssprit
000173r 3  85 rr        	sta z80_i
000175r 3               evlp2:
000175r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
000178r 3               bsortx:
000178r 3  20 rr rr     	jsr bsort 		; sort sprites.
00017Br 3               
00017Br 3  A5 rr        	lda nexlev		; finished level flag.
00017Dr 3  D0 1F        	bne newlev		; is set, go to next level.
00017Fr 3  A5 rr        	lda gamwon		; finished game flag.
000181r 3  D0 2A        	bne evwon		; is set, finish the game.
000183r 3  A5 rr        	lda restfl 		; finished level flag.
000185r 3  C9 01        	cmp #1			; has it been set?
000187r 3  D0 03        	bne :+
000189r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
00018Cr 3               :
00018Cr 3  C9 02        	cmp #2			; has it been set?
00018Er 3  D0 03        	bne :+
000190r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
000193r 3               :
000193r 3  A5 rr        	lda deadf 		; dead flag.
000195r 3  D0 1C        	bne pdead		; yes, player dead.
000197r 3               
000197r 3               ; back to start of main loop.
000197r 3               
000197r 3  E6 rr        	inc frmno
000199r 3  E6 rr        	inc clock
00019Br 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
00019Er 3               
00019Er 3               ;----------------------------------------------------------
00019Er 3               ; Read blocks from list and update screen accordingly.
00019Er 3               ;----------------------------------------------------------
00019Er 3               
00019Er 3               .if aflag
00019Er 3               rbloc:
00019Er 3               	lda #<eop		; reset blockpointer
00019Er 3               	sta pbbuf
00019Er 3               	lda #>eop
00019Er 3               	sta pbbuf+1
00019Er 3               
00019Er 3               rbloc2:
00019Er 3               	lda pbbuf			; check for last block
00019Er 3               	cmp pbptr
00019Er 3               	bne rbloc1
00019Er 3               	lda pbbuf+1
00019Er 3               	cmp pbptr+1
00019Er 3               	bne rbloc1
00019Er 3               	rts
00019Er 3               rbloc1:
00019Er 3               	ldy #0
00019Er 3               	lda (pbbuf),y		; check if block for this scno
00019Er 3               	cmp scno
00019Er 3               	bne rbloc0		; if not, skip
00019Er 3               	iny
00019Er 3               	lda (pbbuf),y		; get y
00019Er 3               	sta dispy
00019Er 3               	iny
00019Er 3               	lda (pbbuf),y		; get x
00019Er 3               	sta dispx
00019Er 3               	iny
00019Er 3               	lda (pbbuf),y		; get blocknr
00019Er 3               	jsr pattr2		; draw block
00019Er 3               rbloc0:
00019Er 3               	clc			; point to next block
00019Er 3               	lda pbbuf
00019Er 3               	adc #4
00019Er 3               	sta pbbuf
00019Er 3               	bcc rbloc2
00019Er 3               	inc pbbuf+1
00019Er 3               	jmp rbloc2
00019Er 3               .endif
00019Er 3               
00019Er 3               ;----------------------------------------------------------
00019Er 3               ; New level
00019Er 3               ;----------------------------------------------------------
00019Er 3               
00019Er 3               newlev:
00019Er 3  A5 rr        	lda scno 			; current screen.
0001A0r 3  18           	clc
0001A1r 3  69 01        	adc #1				; next screen.
0001A3r 3  CD rr rr     	cmp numsc 			; total number of screens.
0001A6r 3  B0 05        	bcs evwon			; yes, game finished.
0001A8r 3  85 rr        	sta scno			; set new level number.
0001AAr 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001ADr 3               
0001ADr 3               evwon:
0001ADr 3  20 rr rr     	jsr evnt18		 	; game completed.
0001B0r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001B3r 3               
0001B3r 3               ;----------------------------------------------------------
0001B3r 3               ; Player dead.
0001B3r 3               ;----------------------------------------------------------
0001B3r 3               
0001B3r 3               pdead:
0001B3r 3  A9 00        	lda #0				; zeroise accumulator.
0001B5r 3  85 rr        	sta deadf			; reset dead flag.
0001B7r 3               evdie:
0001B7r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001BAr 3  A5 rr        	lda numlif			; number of lives.
0001BCr 3  F0 03        	beq :+
0001BEr 3  4C rr rr     	jmp rstrt 			; restart game.
0001C1r 3               :
0001C1r 3               evfail:
0001C1r 3  20 rr rr     	jsr evnt17 			; failure event.
0001C4r 3  4C rr rr     	jmp game			; restart game
0001C7r 3               
0001C7r 3               ;----------------------------------------------------------
0001C7r 3               ; Tidy things up
0001C7r 3               ;----------------------------------------------------------
0001C7r 3               
0001C7r 3               tidyup:
0001C7r 3  A0 00        	ldy #0				; digits to check.
0001C9r 3               tidyu2:
0001C9r 3  B9 rr rr     	lda score,y 			; get score digit.
0001CCr 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001CFr 3  90 07        	bcc tidyu0			; high score is bigger.
0001D1r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001D3r 3  C8           	iny				; next digit of high score.
0001D4r 3  C0 06        	cpy #6
0001D6r 3  D0 F1        	bne tidyu2			; repeat for all digits
0001D8r 3               tidyu0:
0001D8r 3  A9 rr        	lda #<score			; return pointing to score.
0001DAr 3  85 rr        	sta z80_c
0001DCr 3  A9 rr        	lda #>score
0001DEr 3  85 rr        	sta z80_b
0001E0r 3  60           	rts
0001E1r 3               tidyu1:
0001E1r 3  A0 05        	ldy #5
0001E3r 3               tidyu3:
0001E3r 3  B9 rr rr     	lda score,y			; score.
0001E6r 3  99 rr rr     	sta hiscor,y			; high score.
0001E9r 3  88           	dey
0001EAr 3  10 F7        	bpl tidyu3 			; copy score to high score.
0001ECr 3               evnewh:
0001ECr 3  20 rr rr     	jsr evnt19			; new high score event.
0001EFr 3  4C rr rr     	jmp tidyu0			; tidy up.
0001F2r 3               
0001F2r 3               ;--------------------------------------------------
0001F2r 3               ; Restart event.
0001F2r 3               ;--------------------------------------------------
0001F2r 3               
0001F2r 3               rsevt:
0001F2r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0001F4r 3  85 rr        	sta z80_x
0001F6r 3  A9 rr        	lda #>ssprit
0001F8r 3  85 rr        	sta z80_i
0001FAr 3               
0001FAr 3               evrs:
0001FAr 3  4C rr rr     	jmp evnt14	 		; call restart event.
0001FDr 3               
0001FDr 3               ;------------------------------------------------------------------
0001FDr 3               ; Copy number passed in a to string position bc, right-justified.
0001FDr 3               ;
0001FDr 3               ; Input:
0001FDr 3               ;  A  = number
0001FDr 3               ;  BC = string address
0001FDr 3               ;
0001FDr 3               ; Output:
0001FDr 3               ;  BC = string with number
0001FDr 3               ;-----------------------------------------------------------------
0001FDr 3               
0001FDr 3               num2ch:
0001FDr 3  85 rr        	sta z80_d		; Save number
0001FFr 3               
0001FFr 3  A9 00        	lda #0
000201r 3  85 rr        	sta flag
000203r 3               numdg3:
000203r 3  A2 64        	ldx #100		; hundreds column.
000205r 3  86 rr        	stx z80_e
000207r 3  20 rr rr     	jsr numdg		; show digit.
00020Ar 3               numdg2:
00020Ar 3  A2 0A        	ldx #10			; tens column.
00020Cr 3  86 rr        	stx z80_e
00020Er 3  20 rr rr     	jsr numdg		; show digit.
000211r 3               
000211r 3  E6 rr        	inc flag
000213r 3  A2 01        	ldx #1			; units column.
000215r 3  86 rr        	stx z80_e
000217r 3               numdg:
000217r 3  A9 30        	lda #48			; clear digit.
000219r 3  85 rr        	sta z80_a
00021Br 3               numdg1:
00021Br 3  A5 rr        	lda z80_d
00021Dr 3  C5 rr        	cmp z80_e
00021Fr 3  90 0E        	bcc numdg0		; nothing to show.
000221r 3  38           	sec
000222r 3  A5 rr        	lda z80_d
000224r 3  E5 rr        	sbc z80_e		; subtract from column.
000226r 3  85 rr        	sta z80_d
000228r 3  E6 rr        	inc z80_a		; increment digit.
00022Ar 3  E6 rr        	inc flag
00022Cr 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
00022Fr 3               numdg0:
00022Fr 3  A0 00        	ldy #0
000231r 3  A5 rr        	lda z80_a
000233r 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000235r 3  A5 rr        	lda flag
000237r 3  F0 06        	beq :+
000239r 3  E6 rr        	inc z80_c		; next buffer position.
00023Br 3  D0 02        	bne :+
00023Dr 3  E6 rr        	inc z80_b
00023Fr 3               :
00023Fr 3  60           	rts
000240r 3               num2dd:
000240r 3  85 rr        	sta z80_d		; Save number
000242r 3               
000242r 3  A9 01        	lda #1
000244r 3  85 rr        	sta flag
000246r 3               
000246r 3  4C rr rr     	jmp numdg2
000249r 3               num2td:
000249r 3  85 rr        	sta z80_d		; Save number
00024Br 3               
00024Br 3  A9 01        	lda #1
00024Dr 3  85 rr        	sta flag
00024Fr 3  4C rr rr     	jmp numdg3
000252r 3               
000252r 3               ;---------------------------------------------------------
000252r 3               ; Reset score to "000000"
000252r 3               ;---------------------------------------------------------
000252r 3               
000252r 3               inisc:
000252r 3  A9 30        	lda #'0'
000254r 3  A2 05        	ldx #5			; digits to initialise.
000256r 3               inisc0:
000256r 3  9D rr rr     	sta score,x 		; write zero digit.
000259r 3  CA           	dex			; next column.
00025Ar 3  10 FA        	bpl inisc0		; repeat for all digits.
00025Cr 3               
00025Cr 3  60           	rts
00025Dr 3               
00025Dr 3               ;-----------------------------------------------------
00025Dr 3               ; Multiply h by d and return in hl.
00025Dr 3               ;
00025Dr 3               ; Input:
00025Dr 3               ;  H = first number
00025Dr 3               ;  D = second number
00025Dr 3               ;
00025Dr 3               ; Output:
00025Dr 3               ;  HL = result H x D
00025Dr 3               ;-----------------------------------------------------
00025Dr 3               
00025Dr 3               imul:
00025Dr 3  A5 rr        	lda z80_d		; HL = H * D
00025Fr 3  85 rr        	sta z80_e
000261r 3  A5 rr        	lda z80_h
000263r 3  85 rr        	sta z80_c		; make c first multiplier.
000265r 3               imul0:
000265r 3  A9 00        	lda #0			; zeroise total.
000267r 3  85 rr        	sta z80_l
000269r 3  85 rr        	sta z80_h
00026Br 3               
00026Br 3  A5 rr        	lda z80_h
00026Dr 3  85 rr        	sta z80_d		; zeroise high byte.
00026Fr 3               
00026Fr 3  A9 08        	lda #8			; repeat 8 times.
000271r 3  85 rr        	sta z80_b
000273r 3               imul1:
000273r 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
000275r 3  90 0E        	bcc imul2		; wasn't set.
000277r 3  18           	clc			; bit was set, so add de.
000278r 3  A5 rr        	lda z80_l
00027Ar 3  65 rr        	adc z80_e
00027Cr 3  85 rr        	sta z80_l
00027Er 3  A5 rr        	lda z80_h
000280r 3  65 rr        	adc z80_d
000282r 3  85 rr        	sta z80_h
000284r 3  18           	clc 			; reset carry.
000285r 3               imul2:
000285r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
000287r 3  26 rr        	rol z80_d
000289r 3  C6 rr        	dec z80_b
00028Br 3  D0 E6        	bne imul1		; repeat 8 times.
00028Dr 3               
00028Dr 3  60           	rts
00028Er 3               
00028Er 3               ;-----------------------------------------------
00028Er 3               ; Divide d by e and return in d, remainder in a.
00028Er 3               ;
00028Er 3               ; Input:
00028Er 3               ;  D = first number
00028Er 3               ;  E = second number
00028Er 3               ;
00028Er 3               ; Output:
00028Er 3               ;  D = result D/E
00028Er 3               ;  A = remainder
00028Er 3               ;-----------------------------------------------
00028Er 3               
00028Er 3               idiv:
00028Er 3  A9 00        	lda #0
000290r 3  A0 08        	ldy #8		 	; bits to shift.
000292r 3  06 rr        	asl z80_d
000294r 3               idiv0:
000294r 3  2A           	rol a 			; multiply d by 2.
000295r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
000297r 3  90 02        	bcc idiv1		; e is greater, no division this time.
000299r 3  E5 rr        	sbc z80_e		; subtract it.
00029Br 3               idiv1:
00029Br 3  26 rr        	rol z80_d		; rotate into d.
00029Dr 3  88           	dey
00029Er 3  D0 F4        	bne idiv0		; repeat
0002A0r 3  60           	rts
0002A1r 3               
0002A1r 3               ;---------------------------------------------------
0002A1r 3               ; Play AY sound effect
0002A1r 3               ;---------------------------------------------------
0002A1r 3               
0002A1r 3               plsnd:
0002A1r 3  60           	rts
0002A2r 3               
0002A2r 3               ;---------------------------------------------------
0002A2r 3               ; Objects handling.
0002A2r 3               ; 32 bytes for image
0002A2r 3               ; 1 for colour
0002A2r 3               ; 3 for room, y and x
0002A2r 3               ; 3 for starting room, y and x.
0002A2r 3               ; 254 = disabled.
0002A2r 3               ; 255 = object in player"s pockets.
0002A2r 3               ;---------------------------------------------------
0002A2r 3               
0002A2r 3               ;---------------------------------------------------
0002A2r 3               ; Show items present.
0002A2r 3               ;---------------------------------------------------
0002A2r 3               
0002A2r 3               .if oflag
0002A2r 3               shwob:
0002A2r 3               	lda #<objdta			; objects table.
0002A2r 3               	sta z80_l
0002A2r 3               	lda #>objdta
0002A2r 3               	sta z80_h
0002A2r 3               	lda numob 			; number of objects in the game.
0002A2r 3               	sta sprcnt
0002A2r 3               shwob0:
0002A2r 3               	ldy #33 			; distance to room number.
0002A2r 3               	lda (z80_hl),y 			; same as an item?
0002A2r 3               	cmp scno 			; current location.
0002A2r 3               	bne :+
0002A2r 3               	jsr dobj 			; yes, display object.
0002A2r 3               :
0002A2r 3               	clc
0002A2r 3               	lda z80_l
0002A2r 3               	adc #39 			; distance to next item.
0002A2r 3               	sta z80_l
0002A2r 3               	lda z80_h
0002A2r 3               	adc #0
0002A2r 3               	sta z80_h	 		; point to it.
0002A2r 3               	dec sprcnt
0002A2r 3               	bne shwob0 			; repeat for others.
0002A2r 3               	rts
0002A2r 3               
0002A2r 3               ;---------------------------------------------------
0002A2r 3               ; Display object.
0002A2r 3               ; hl must point to object's start address.
0002A2r 3               ;
0002A2r 3               ; Input:
0002A2r 3               ;  HL = object address
0002A2r 3               ;---------------------------------------------------
0002A2r 3               
0002A2r 3               dobj:
0002A2r 3               	ldy #32
0002A2r 3               	lda (z80_hl),y 			; point to y.
0002A2r 3               	sta objcol
0002A2r 3               	ldy #34
0002A2r 3               	lda (z80_hl),y 			; point to y.
0002A2r 3               	sta dispy
0002A2r 3               	iny
0002A2r 3               	lda (z80_hl),y 			; point to x.
0002A2r 3               	sta dispx
0002A2r 3               dobj1:
0002A2r 3               	jmp sprite 			; draw this sprite.
0002A2r 3               
0002A2r 3               ;--------------------------------------
0002A2r 3               ; Remove an object.
0002A2r 3               ;
0002A2r 3               ; Input:
0002A2r 3               ;  A = object number
0002A2r 3               ;--------------------------------------
0002A2r 3               
0002A2r 3               remob:
0002A2r 3               	cmp numob			; number of objects in game.
0002A2r 3               	bcc :+				; are we checking past the end?
0002A2r 3               	rts				; yes, can't get non-existent item.
0002A2r 3               :
0002A2r 3               	pha				; remember object.
0002A2r 3               	jsr getob			; pick it up if we haven't already got it.
0002A2r 3               	pla				; retrieve object number.
0002A2r 3               	jsr gotob			; get its address.
0002A2r 3               	lda #254
0002A2r 3               	ldy #33
0002A2r 3               	sta (z80_hl),y			; remove it.
0002A2r 3               	rts
0002A2r 3               
0002A2r 3               ;---------------------------------------------------
0002A2r 3               ; Pick up object number held in the accumulator.
0002A2r 3               ;
0002A2r 3               ; Input:
0002A2r 3               ;  A = object number
0002A2r 3               ;---------------------------------------------------
0002A2r 3               
0002A2r 3               getob:
0002A2r 3               	cmp numob 		; number of objects in game.
0002A2r 3               	bcc :+			; are we checking past the end?
0002A2r 3               	rts			; yes, can't get non-existent item.
0002A2r 3               :
0002A2r 3               	jsr gotob 		; check if we already have it.
0002A2r 3               	cmp #255
0002A2r 3               	bne :+
0002A2r 3               	rts			; we already do.
0002A2r 3               :
0002A2r 3               	ldy #33
0002A2r 3               	lda (z80_hl),y		; is it on this screen?
0002A2r 3               	cmp scno 		; current screen.
0002A2r 3               	bne getob0		; not on screen, so nothing to delete.
0002A2r 3               
0002A2r 3               	lda #255
0002A2r 3               	sta (z80_hl),y		; pick it up.
0002A2r 3               	iny 			; point to y coord.
0002A2r 3               getob1:
0002A2r 3               	ldy #34
0002A2r 3               	lda (z80_hl),y		; y coord.
0002A2r 3               	sta dispy
0002A2r 3               	ldy #35
0002A2r 3               	lda (z80_hl),y 		; x coord.
0002A2r 3               	sta dispx
0002A2r 3               	jmp dobj1 		; delete object sprite.
0002A2r 3               getob0:
0002A2r 3               	lda #255
0002A2r 3               	sta (z80_hl),y 		; pick it up.
0002A2r 3               	rts
0002A2r 3               .endif
0002A2r 3               
0002A2r 3               ;-----------------------------------------------------------------
0002A2r 3               ; Got object check.
0002A2r 3               ; Call with object in accumulator, returns zero set if in pockets.
0002A2r 3               ;
0002A2r 3               ; Input:
0002A2r 3               ;  A = object number
0002A2r 3               ;-----------------------------------------------------------------
0002A2r 3               .if oflag .or mflag
0002A2r 3               gotob:
0002A2r 3               	cmp numob 		; number of objects in game.
0002A2r 3               	bcc :+ 			; are we checking past the end?
0002A2r 3               	jmp gotob0 		; yes, we can't have a non-existent object.
0002A2r 3               :
0002A2r 3               	jsr findob		; find the object.
0002A2r 3               gotob1:
0002A2r 3               	rts
0002A2r 3               
0002A2r 3               gotob0:
0002A2r 3               	lda #254 		; missing.
0002A2r 3               	jmp gotob1
0002A2r 3               
0002A2r 3               findob:
0002A2r 3               	pha			; save object number
0002A2r 3               	lda #<objdta 		; objects.
0002A2r 3               	sta z80_l
0002A2r 3               	lda #>objdta
0002A2r 3               	sta z80_h
0002A2r 3               	pla			; retreive object number
0002A2r 3               	beq fndob1 		; is it zero? yes, skip loop.
0002A2r 3               	tax 			; loop counter
0002A2r 3               fndob2:
0002A2r 3               	clc
0002A2r 3               	lda z80_l
0002A2r 3               	adc #39 		; size of each object.
0002A2r 3               	sta z80_l
0002A2r 3               	bcc :+
0002A2r 3               	inc z80_h
0002A2r 3               :
0002A2r 3               	dex 			; repeat until we find address.
0002A2r 3               	bne fndob2
0002A2r 3               fndob1:
0002A2r 3               	ldy #33			; distance to room it's in.
0002A2r 3               	lda (z80_hl),y		; fetch status.
0002A2r 3               	rts
0002A2r 3               .endif
0002A2r 3               
0002A2r 3               ;---------------------------------------------
0002A2r 3               ; Drop object number at (dispx, dispy).
0002A2r 3               ;
0002A2r 3               ; Input:
0002A2r 3               ;  A = object number
0002A2r 3               ;---------------------------------------------
0002A2r 3               
0002A2r 3               .if oflag
0002A2r 3               drpob:
0002A2r 3               	cmp numob 		; are we checking past the end?
0002A2r 3               	bcc :+
0002A2r 3               	rts			; yes, can't drop non-existent item.
0002A2r 3               :
0002A2r 3               	jsr gotob		; make sure object is in inventory.
0002A2r 3               	cmp scno		; already on this screen?
0002A2r 3               	bne :+
0002A2r 3               	rts			; yes, nothing to do.
0002A2r 3               :
0002A2r 3               	ldy #33
0002A2r 3               	lda scno
0002A2r 3               	sta (z80_hl),y		; bring onto screen.
0002A2r 3               	lda dispy		; sprite y coordinate.
0002A2r 3               	iny
0002A2r 3               	sta (z80_hl),y		; point to object y.
0002A2r 3               	lda dispx 		; sprite x coordinate.
0002A2r 3               	iny
0002A2r 3               	sta (z80_hl),y 		; point to object x
0002A2r 3               	jmp dobj		; draw the object sprite.
0002A2r 3               
0002A2r 3               ;-----------------------------------------------
0002A2r 3               ; Seek objects at sprite position.
0002A2r 3               ;
0002A2r 3               ; Output:
0002A2r 3               ;  A = object number, if not found A=255
0002A2r 3               ;-----------------------------------------------
0002A2r 3               
0002A2r 3               skobj:
0002A2r 3               	lda #<objdta 		; pointer to objects.
0002A2r 3               	sta z80_l
0002A2r 3               	lda #>objdta
0002A2r 3               	sta z80_h
0002A2r 3               
0002A2r 3               	lda numob 		; number of objects in game.
0002A2r 3               	sta z80_b 		; set up the loop counter.
0002A2r 3               skobj0:
0002A2r 3               	lda scno		; current room number.
0002A2r 3               	ldy #33
0002A2r 3               	cmp (z80_hl),y		; is object in here?
0002A2r 3               	bne :+
0002A2r 3               	jsr skobj1		; yes, check coordinates.
0002A2r 3               :
0002A2r 3               	clc			; point to next object in table.
0002A2r 3               	lda z80_l
0002A2r 3               	adc #39			; size of each object.
0002A2r 3               	sta z80_l
0002A2r 3               	bcc :+
0002A2r 3               	inc z80_h
0002A2r 3               :
0002A2r 3               	dec z80_b
0002A2r 3               	bne skobj0		; repeat for all objects.
0002A2r 3               
0002A2r 3               	lda #255		; end of list and nothing found, return 255.
0002A2r 3               	rts
0002A2r 3               
0002A2r 3               skobj1:
0002A2r 3               	ldy #34			; point to y coordinate.
0002A2r 3               	lda (z80_hl),y		; point to y coordinate.
0002A2r 3               	sec
0002A2r 3               	ldy #var_newY
0002A2r 3               	sbc (z80_ix),y 		; subtract sprite y.
0002A2r 3               	clc
0002A2r 3               	adc #15			; add sprite height minus one.
0002A2r 3               	cmp #31			; within range?
0002A2r 3               	bcs skobj2		; no, ignore object.
0002A2r 3               
0002A2r 3               	ldy #35			; point to x coordinate now.
0002A2r 3               	lda (z80_hl),y 		; get coordinate.
0002A2r 3               	sec
0002A2r 3               	ldy #var_newX
0002A2r 3               	sbc (z80_ix),y 		; subtract the sprite x.
0002A2r 3               	clc			; add sprite width minus one.
0002A2r 3               	adc #15
0002A2r 3               	cmp #31			; within range?
0002A2r 3               	bcs skobj2		; no, ignore object.
0002A2r 3               
0002A2r 3               	pla			; remove return address from stack.
0002A2r 3               	pla
0002A2r 3               
0002A2r 3               	lda numob 		; objects in game.
0002A2r 3               	sec
0002A2r 3               	sbc z80_b		; subtract loop counter.
0002A2r 3               skobj2:
0002A2r 3               	rts			; accumulator now points to object.
0002A2r 3               .endif
0002A2r 3               
0002A2r 3               ;---------------------------------------------------------------------
0002A2r 3               ; Spawn a new sprite.
0002A2r 3               ;---------------------------------------------------------------------
0002A2r 3               
0002A2r 3               spawn:
0002A2r 3  A9 rr        	lda #<sprtab		; sprite table.
0002A4r 3  85 rr        	sta z80_l
0002A6r 3  A9 rr        	lda #>sprtab
0002A8r 3  85 rr        	sta z80_h
0002AAr 3               numsp1:
0002AAr 3  A9 0C        	lda #NUMSPR		; number of sprites.
0002ACr 3  85 rr        	sta spcnt
0002AEr 3               spaw0:
0002AEr 3  A0 00        	ldy #var_Type
0002B0r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0002B2r 3  C9 FF        	cmp #255		; is it an unused slot?
0002B4r 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0002B6r 3               
0002B6r 3  18           	clc 			; point to next sprite in table.
0002B7r 3  A5 rr        	lda z80_l
0002B9r 3  69 11        	adc #TABSIZ		; size of each entry.
0002BBr 3  85 rr        	sta z80_l
0002BDr 3  90 02        	bcc :+
0002BFr 3  E6 rr        	inc z80_h
0002C1r 3               :
0002C1r 3  C6 rr        	dec spcnt		; one less iteration.
0002C3r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0002C5r 3               
0002C5r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0002C5r 3               
0002C5r 3               spaw1:
0002C5r 3  A5 rr        	lda z80_i		; address of original sprite.
0002C7r 3  48           	pha
0002C8r 3  A5 rr        	lda z80_x
0002CAr 3  48           	pha
0002CBr 3               
0002CBr 3  A5 rr        	lda z80_l		; store spawned sprite address.
0002CDr 3  85 rr        	sta spptr
0002CFr 3  A5 rr        	lda z80_h
0002D1r 3  85 rr        	sta spptr+1
0002D3r 3               
0002D3r 3  A5 rr        	lda z80_c
0002D5r 3  A0 00        	ldy #var_Type
0002D7r 3  91 rr        	sta (z80_hl),y 		; set the type.
0002D9r 3  A0 05        	ldy #var_newType
0002DBr 3  91 rr        	sta (z80_hl),y		; copy
0002DDr 3               
0002DDr 3  A5 rr        	lda z80_b
0002DFr 3  A0 01        	ldy #var_Image
0002E1r 3  91 rr        	sta (z80_hl),y		; set the image.
0002E3r 3  A0 06        	ldy #var_newImage
0002E5r 3  91 rr        	sta (z80_hl),y		; copy
0002E7r 3               
0002E7r 3  A9 00        	lda #0 				; frame zero.
0002E9r 3  A0 02        	ldy #var_Frame
0002EBr 3  91 rr        	sta (z80_hl),y		; set frame.
0002EDr 3  A0 07        	ldy #var_newFrame
0002EFr 3  91 rr        	sta (z80_hl),y		; copy
0002F1r 3               
0002F1r 3  A0 08        	ldy #8
0002F3r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0002F5r 3  A0 03        	ldy #3
0002F7r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002F9r 3  A0 08        	ldy #8
0002FBr 3  91 rr        	sta (z80_hl),y		; copy
0002FDr 3               
0002FDr 3  A0 09        	ldy #9
0002FFr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000301r 3  A0 04        	ldy #4
000303r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000305r 3  A0 09        	ldy #9
000307r 3  91 rr        	sta (z80_hl),y		; copy
000309r 3               
000309r 3  A0 0A        	ldy #10				; direction of original.
00030Br 3  B1 rr        	lda (z80_ix),y
00030Dr 3  91 rr        	sta (z80_hl),y		; direction
00030Fr 3               
00030Fr 3  A9 00        	lda #0
000311r 3  A0 0D        	ldy #var_jumpLo
000313r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000315r 3  C8           	iny
000316r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000318r 3  C8           	iny
000319r 3  91 rr        	sta (z80_hl),y		; reset parameter.
00031Br 3  C8           	iny
00031Cr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00031Er 3               rtssp:
00031Er 3  A5 rr        	lda spptr			; address of new sprite.
000320r 3  85 rr        	sta z80_x
000322r 3  A5 rr        	lda spptr+1
000324r 3  85 rr        	sta z80_i
000326r 3               evis1:
000326r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
000329r 3               
000329r 3  A5 rr        	lda spptr 			; address of new sprite.
00032Br 3  85 rr        	sta z80_x
00032Dr 3  A5 rr        	lda spptr+1
00032Fr 3  85 rr        	sta z80_i
000331r 3               
000331r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000331r 3  A0 03        	ldy #var_Y
000333r 3  B1 rr        	lda (z80_hl), y		; old x coord
000335r 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
000337r 3  B0 03        	bcs :+				; yes, don't draw it.
000339r 3               
000339r 3  20 rr rr     	jsr sspria 			; display the new sprite.
00033Cr 3               :
00033Cr 3  68           	pla					; address of original sprite.
00033Dr 3  85 rr        	sta z80_x
00033Fr 3  68           	pla
000340r 3  85 rr        	sta z80_i
000342r 3               
000342r 3  60           	rts
000343r 3               
000343r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000347r 3  30 30        
000349r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00034Dr 3  30 30        
00034Fr 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000353r 3  30 30        
000355r 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000357r 3               
000357r 3               ;----------------------------------------------------
000357r 3               ; Check y-pos
000357r 3               ;----------------------------------------------------
000357r 3               
000357r 3               checkx:
000357r 3  A5 rr        	lda dispy		; y position.
000359r 3  C9 16        	cmp #22			; off screen?
00035Br 3  B0 01        	bcs :+
00035Dr 3  60           	rts			; no, it's okay.
00035Er 3               :
00035Er 3  68           	pla			; remove return address from stack.
00035Fr 3  85 rr        	sta z80_l
000361r 3  68           	pla
000362r 3  85 rr        	sta z80_h
000364r 3  60           	rts
000365r 3               
000365r 3               ;-----------------------------------------------
000365r 3               ; Displays the current high score.
000365r 3               ;-----------------------------------------------
000365r 3               
000365r 3               dhisc:
000365r 3  A9 rr        	lda #<hiscor 		; high score text.
000367r 3  8D rr rr     	sta dscor3+1
00036Ar 3  8D rr rr     	sta bscor3+1
00036Dr 3  A9 rr        	lda #>hiscor
00036Fr 3  8D rr rr     	sta dscor3+2
000372r 3  8D rr rr     	sta bscor3+2
000375r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000378r 3               
000378r 3               ;------------------------------------------------------
000378r 3               ; Displays the current score.
000378r 3               ;------------------------------------------------------
000378r 3               
000378r 3               dscor:
000378r 3  A9 rr        	lda #<score		; score text.
00037Ar 3  8D rr rr     	sta dscor3+1
00037Dr 3  8D rr rr     	sta bscor3+1
000380r 3  A9 rr        	lda #>score
000382r 3  8D rr rr     	sta dscor3+2
000385r 3  8D rr rr     	sta bscor3+2
000388r 3               dscor1:
000388r 3  8C rr rr     	sty tmpscr
00038Br 3  20 rr rr     	jsr preprt		; set up font and print position.
00038Er 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
000391r 3               
000391r 3               ;	lda #6			; digits to display.
000391r 3               ;	sta z80_b
000391r 3  A5 rr        	lda prtmod		; get print mode.
000393r 3  F0 03        	beq :+			; standard size text?
000395r 3  4C rr rr     	jmp bscor0		; no, show double-height.
000398r 3               :
000398r 3               dscor0:
000398r 3               ;	ldy #0
000398r 3               ;	lda (z80_hl),y 		; fetch character.
000398r 3  AC rr rr     	ldy tmpscr
00039Br 3               dscor3:
00039Br 3  B9 rr rr     	lda score,y
00039Er 3  20 rr rr     	jsr pchar 		; display character.
0003A1r 3  E6 rr        	inc dispx		; move along x coordinate
0003A3r 3               
0003A3r 3               ;	inc z80_l		; next score column.
0003A3r 3               ;	bne :+
0003A3r 3               ;	inc z80_h
0003A3r 3               ;:
0003A3r 3  EE rr rr     	inc tmpscr
0003A6r 3  C6 rr        	dec z80_b
0003A8r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0003AAr 3               dscor2:
0003AAr 3  A5 rr        	lda dispx 		; set up display coordinates.
0003ACr 3  85 rr        	sta charx
0003AEr 3  A5 rr        	lda dispy
0003B0r 3  85 rr        	sta chary
0003B2r 3  60           	rts
0003B3r 3               
0003B3r 3  00           tmpscr:	.byte 0
0003B4r 3               ;------------------------------------------------------
0003B4r 3               ; Displays the current score in double-height characters.
0003B4r 3               ;
0003B4r 3               ; Input:
0003B4r 3               ;  B  = digit number
0003B4r 3               ;  HL = score string
0003B4r 3               ;------------------------------------------------------
0003B4r 3               
0003B4r 3               bscor0:
0003B4r 3               ;	ldy #0
0003B4r 3               
0003B4r 3               ;	lda (z80_hl),y 		; fetch character.
0003B4r 3  A4 rr        	ldy tmp
0003B6r 3               bscor3:
0003B6r 3  B9 rr rr     	lda score,y
0003B9r 3  20 rr rr     	jsr bchar 		; display big char.
0003BCr 3               
0003BCr 3               ;	inc z80_l 		; next score column.
0003BCr 3               ;	bne :+
0003BCr 3               ;	inc z80_h
0003BCr 3               ;:
0003BCr 3  E6 rr        	inc tmp
0003BEr 3  C6 rr        	dec z80_b
0003C0r 3  F0 03        	beq :+
0003C2r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0003C5r 3               :
0003C5r 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0003C8r 3               
0003C8r 3               ;-----------------------------------------------------
0003C8r 3               ; Adds number in the hl pair to the score.
0003C8r 3               ;-----------------------------------------------------
0003C8r 3               
0003C8r 3               addsc:
0003C8r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0003CAr 3  85 rr        	sta z80_e
0003CCr 3  A9 rr        	lda #>(score+1)
0003CEr 3  85 rr        	sta z80_d
0003D0r 3  A9 10        	lda #<10000		; amount to add each time.
0003D2r 3  85 rr        	sta z80_c
0003D4r 3  A9 27        	lda #>10000
0003D6r 3  85 rr        	sta z80_b
0003D8r 3  20 rr rr     	jsr incsc		; add to score.
0003DBr 3               
0003DBr 3  E6 rr        	inc z80_e		; thousands column.
0003DDr 3  D0 02        	bne :+
0003DFr 3  E6 rr        	inc z80_d
0003E1r 3               :
0003E1r 3  A9 E8        	lda #<1000		; amount to add each time.
0003E3r 3  85 rr        	sta z80_c
0003E5r 3  A9 03        	lda #>1000
0003E7r 3  85 rr        	sta z80_b
0003E9r 3  20 rr rr     	jsr incsc 		; add to score.
0003ECr 3               
0003ECr 3  E6 rr        	inc z80_e		; hundreds column.
0003EEr 3  D0 02        	bne :+
0003F0r 3  E6 rr        	inc z80_d
0003F2r 3               :
0003F2r 3  A9 64        	lda #<100		; amount to add each time.
0003F4r 3  85 rr        	sta z80_c
0003F6r 3  A9 00        	lda #>100
0003F8r 3  85 rr        	sta z80_b
0003FAr 3  20 rr rr     	jsr incsc		; add to score.
0003FDr 3               
0003FDr 3  E6 rr        	inc z80_e 		; tens column.
0003FFr 3  D0 02        	bne :+
000401r 3  E6 rr        	inc z80_d
000403r 3               :
000403r 3  A9 0A        	lda #<10		; amount to add each time.
000405r 3  85 rr        	sta z80_c
000407r 3  A9 00        	lda #>10
000409r 3  85 rr        	sta z80_b
00040Br 3  20 rr rr     	jsr incsc 		; add to score.
00040Er 3               
00040Er 3  E6 rr        	inc z80_e		; units column.
000410r 3  D0 02        	bne :+
000412r 3  E6 rr        	inc z80_d
000414r 3               :
000414r 3  A9 01        	lda #<1			; units.
000416r 3  85 rr        	sta z80_c
000418r 3  A9 00        	lda #>1
00041Ar 3  85 rr        	sta z80_b
00041Cr 3               incsc:
00041Cr 3  A5 rr        	lda z80_h		; store amount to add.
00041Er 3  48           	pha
00041Fr 3  A5 rr        	lda z80_l
000421r 3  48           	pha
000422r 3               
000422r 3  38           	sec			; subtract from amount to add.
000423r 3  A5 rr        	lda z80_l
000425r 3  E5 rr        	sbc z80_c
000427r 3  85 rr        	sta z80_l
000429r 3  A5 rr        	lda z80_h
00042Br 3  E5 rr        	sbc z80_b
00042Dr 3  85 rr        	sta z80_h
00042Fr 3  90 14        	bcc incsc0		; too much, restore value.
000431r 3               
000431r 3  68           	pla			; delete the previous amount from the stack.
000432r 3  68           	pla
000433r 3               
000433r 3  A5 rr        	lda z80_d 		; store column position.
000435r 3  48           	pha
000436r 3  A5 rr        	lda z80_e
000438r 3  48           	pha
000439r 3  20 rr rr     	jsr incsc2		; do the increment.
00043Cr 3               
00043Cr 3  68           	pla			; restore column.
00043Dr 3  85 rr        	sta z80_e
00043Fr 3  68           	pla
000440r 3  85 rr        	sta z80_d
000442r 3  4C rr rr     	jmp incsc		; repeat until all added.
000445r 3               
000445r 3               incsc0:
000445r 3  68           	pla			; restore previous value.
000446r 3  85 rr        	sta z80_l
000448r 3  68           	pla
000449r 3  85 rr        	sta z80_h
00044Br 3  60           	rts
00044Cr 3               incsc2:
00044Cr 3  A0 00        	ldy #0
00044Er 3  B1 rr        	lda (z80_de),y 		; get amount.
000450r 3  18           	clc
000451r 3  69 01        	adc #1			; add one to column.
000453r 3  91 rr        	sta (z80_de),y		; write new column total.
000455r 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000457r 3  B0 01        	bcs :+
000459r 3  60           	rts			; no, carry on.
00045Ar 3               :
00045Ar 3  A9 30        	lda #'0'		; make it zero.
00045Cr 3  91 rr        	sta (z80_de),y		; write new column total.
00045Er 3  C6 rr        	dec z80_e		; back one column.
000460r 3  D0 02        	bne :+
000462r 3  C6 rr        	dec z80_d
000464r 3               :
000464r 3  4C rr rr     	jmp incsc2
000467r 3               
000467r 3               ;------------------------------------
000467r 3               ; Add bonus to score and reset bonus
000467r 3               ;------------------------------------
000467r 3               
000467r 3               addbo:
000467r 3  A2 05        	ldx #5			; last digit.
000469r 3  18           	clc
00046Ar 3               addbo0:
00046Ar 3  BD rr rr     	lda score,x		; get score.
00046Dr 3  7D rr rr     	adc bonus,x		; add bonus.
000470r 3  38           	sec			; 0 to 18.
000471r 3  E9 30        	sbc #48
000473r 3  48           	pha
000474r 3  A9 30        	lda #'0'
000476r 3  9D rr rr     	sta bonus,x
000479r 3  68           	pla
00047Ar 3  C9 3A        	cmp #58
00047Cr 3  90 03        	bcc addbo1
00047Er 3  38           	sec
00047Fr 3  E9 0A        	sbc #10
000481r 3               addbo1:
000481r 3  9D rr rr     	sta score,x		; zeroise bonus.
000484r 3  CA           	dex			; next digit.
000485r 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000487r 3  60           	rts
000488r 3               
000488r 3               ;------------------------------------
000488r 3               ; Swap score and bonus.
000488r 3               ;------------------------------------
000488r 3               
000488r 3               swpsb:
000488r 3  A2 05        	ldx #5			; digits to add.
00048Ar 3               swpsb0:
00048Ar 3  BD rr rr     	lda score,x 		; get score digits.
00048Dr 3  48           	pha			; save digit
00048Er 3  BD rr rr     	lda bonus,x 		; get bonus digits.
000491r 3  9D rr rr     	sta score,x		; switch score-bonus
000494r 3  68           	pla
000495r 3  9D rr rr     	sta bonus,x
000498r 3  CA           	dex 			; repeat for all 6 digits.
000499r 3  10 EF        	bpl swpsb0
00049Br 3  60           	rts
00049Cr 3               
00049Cr 3               ;----------------------------------------------------
00049Cr 3               ; Get print address.
00049Cr 3               ;----------------------------------------------------
00049Cr 3               
00049Cr 3               gprad:
00049Cr 3  98           	tya
00049Dr 3  48           	pha
00049Er 3               
00049Er 3  A5 rr        	lda dispx 		; x coordinate.
0004A0r 3  85 rr        	sta scraddr
0004A2r 3  A9 00        	lda #0
0004A4r 3  85 rr        	sta scraddr+1
0004A6r 3  06 rr        	asl scraddr  		; multiply char by 16
0004A8r 3  26 rr        	rol scraddr+1
0004AAr 3  06 rr        	asl scraddr
0004ACr 3  26 rr        	rol scraddr+1
0004AEr 3  06 rr        	asl scraddr
0004B0r 3  26 rr        	rol scraddr+1
0004B2r 3  06 rr        	asl scraddr
0004B4r 3  26 rr        	rol scraddr+1
0004B6r 3               
0004B6r 3  A5 rr        	lda dispy		; y coordinate.
0004B8r 3  0A           	asl a
0004B9r 3  0A           	asl a
0004BAr 3  0A           	asl a			; multiply char by 8
0004BBr 3  A8           	tay
0004BCr 3               
0004BCr 3  18           	clc
0004BDr 3  A5 rr        	lda scraddr
0004BFr 3  79 00 07     	adc SCADTB_lb,y
0004C2r 3  85 rr        	sta scraddr
0004C4r 3  A5 rr        	lda scraddr+1
0004C6r 3  79 00 08     	adc SCADTB_hb,y
0004C9r 3  85 rr        	sta scraddr+1
0004CBr 3               
0004CBr 3  A5 rr        	lda prtmod		; Double line if bigtxt
0004CDr 3  F0 08        	beq noskip
0004CFr 3  A5 rr        	lda dispx
0004D1r 3  29 E0        	and #$e0
0004D3r 3  F0 02        	beq noskip
0004D5r 3  E6 rr        	inc scraddr+1
0004D7r 3               noskip:
0004D7r 3               
0004D7r 3  68           	pla
0004D8r 3  A8           	tay
0004D9r 3  60           	rts
0004DAr 3               ;--------------------------------------------------------------
0004DAr 3               ; Get property buffer address of char at (dispx, dispy) in hl.
0004DAr 3               ;
0004DAr 3               ; Output:
0004DAr 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
0004DAr 3               ;--------------------------------------------------------------
0004DAr 3               
0004DAr 3               pradd:
0004DAr 3  A5 rr        	lda dispy 		; y coordinate.
0004DCr 3  85 rr        	sta bufaddr
0004DEr 3  A9 00        	lda #0
0004E0r 3  85 rr        	sta bufaddr+1
0004E2r 3  06 rr        	asl bufaddr  		; multiply char by 32
0004E4r 3  26 rr        	rol bufaddr+1
0004E6r 3  06 rr        	asl bufaddr
0004E8r 3  26 rr        	rol bufaddr+1
0004EAr 3  06 rr        	asl bufaddr
0004ECr 3  26 rr        	rol bufaddr+1
0004EEr 3  06 rr        	asl bufaddr
0004F0r 3  26 rr        	rol bufaddr+1
0004F2r 3  06 rr        	asl bufaddr
0004F4r 3  26 rr        	rol bufaddr+1
0004F6r 3  18           	clc			; add address of MAP graphics.
0004F7r 3  A5 rr        	lda bufaddr
0004F9r 3  65 rr        	adc dispx
0004FBr 3  69 00        	adc #<MAP
0004FDr 3  85 rr        	sta bufaddr
0004FFr 3  A5 rr        	lda bufaddr+1
000501r 3  69 04        	adc #>MAP
000503r 3  85 rr        	sta bufaddr+1
000505r 3  60           	rts
000506r 3               
000506r 3               ;--------------------------------------------------------------
000506r 3               ; Get attribute address at (dispx, dispy).
000506r 3               ;
000506r 3               ; Output:
000506r 3               ;  bufaddr = COLOR + dispy*22 + dispx
000506r 3               ;--------------------------------------------------------------
000506r 3               
000506r 3               gaadd:
000506r 3  A5 rr        	lda dispy
000508r 3  4A           	lsr a
000509r 3  A8           	tay
00050Ar 3  B9 55 0A     	lda COLATTTB_hb,y
00050Dr 3  85 rr        	sta bufaddr+1
00050Fr 3  B9 4A 0A     	lda COLATTTB_lb,y
000512r 3  18           	clc
000513r 3  65 rr        	adc dispx
000515r 3  85 rr        	sta bufaddr
000517r 3  60           	rts
000518r 3               
000518r 3               ;----------------------------------------------
000518r 3               ; Print attributes, properties and pixels.
000518r 3               ;
000518r 3               ; Input:
000518r 3               ;  A	= tile number
000518r 3               ;----------------------------------------------
000518r 3               
000518r 3               pbpattr:			; entry PUTBLOCK command
000518r 3  A4 rr        	ldy charx
00051Ar 3  84 rr        	sty dispx
00051Cr 3  A4 rr        	ldy chary
00051Er 3  84 rr        	sty dispy
000520r 3               pattr:
000520r 3               .if aflag
000520r 3               	pha
000520r 3               	jsr wbloc		; save blockinfo
000520r 3               	pla
000520r 3               .endif
000520r 3               
000520r 3               pattr2:
000520r 3  85 rr        	sta z80_b		; store cell in b register for now.
000522r 3  AA           	tax
000523r 3  BD rr rr     	lda bprop,x 		; block properties.
000526r 3  85 rr        	sta z80_c
000528r 3  C9 08        	cmp #COLECT
00052Ar 3  D0 04        	bne :+
00052Cr 3  A5 rr        	lda z80_b
00052Er 3  85 rr        	sta colpatt
000530r 3               :
000530r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000533r 3  A5 rr        	lda z80_c
000535r 3  A0 00        	ldy #0
000537r 3  91 rr        	sta (bufaddr),y 	; write property.
000539r 3  A5 rr        	lda z80_b 		; restore cell.
00053Br 3  4C rr rr     	jmp panp
00053Er 3               ; Print attributes, no properties.
00053Er 3               
00053Er 3               ;colpatt:	.byte 0
00053Er 3               
00053Er 3               panp:
00053Er 3  85 rr        	sta z80_e		; displacement in e.
000540r 3  A9 00        	lda #0
000542r 3  85 rr        	sta z80_d		; no high byte.
000544r 3  06 rr        	asl z80_e  		; multiply char by 8.
000546r 3  26 rr        	rol z80_d
000548r 3  06 rr        	asl z80_e
00054Ar 3  26 rr        	rol z80_d
00054Cr 3  06 rr        	asl z80_e
00054Er 3  26 rr        	rol z80_d
000550r 3  18           	clc
000551r 3  A5 rr        	lda z80_e
000553r 3  69 rr        	adc #<chgfx 		; address of graphics.
000555r 3  85 rr        	sta tileaddr
000557r 3  A5 rr        	lda z80_d
000559r 3  69 rr        	adc #>chgfx
00055Br 3  85 rr        	sta tileaddr+1
00055Dr 3               
00055Dr 3  A6 rr        	ldx z80_b		; set colour attribute
00055Fr 3  BD rr rr     	lda bCol,x
000562r 3  48           	pha
000563r 3  20 rr rr     	jsr gaadd
000566r 3  A0 00        	ldy #0
000568r 3  68           	pla
000569r 3  91 rr        	sta (bufaddr),y
00056Br 3               
00056Br 3  20 rr rr     	jsr gprad 		; get screen address.
00056Er 3  A2 07        	ldx #7			; number of pixel rows to write.
000570r 3               panp0:
000570r 3  A0 00        	ldy #0
000572r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
000574r 3               .if iflag
000574r 3               	eor #$ff		; Invert
000574r 3               .endif
000574r 3  BC rr rr     	ldy scrtab,x
000577r 3  91 rr        	sta (scraddr),y 	; copy to screen.
000579r 3  E6 rr        	inc tileaddr 		; next image byte.
00057Br 3  D0 02        	bne :+
00057Dr 3  E6 rr        	inc tileaddr+1
00057Fr 3               :
00057Fr 3  CA           	dex	 		; repeat for 8 pixel rows.
000580r 3  10 EE        	bpl panp0
000582r 3  E6 rr        	inc dispx 		; move along one.
000584r 3  E6 rr        	inc charx
000586r 3  60           	rts
000587r 3               
000587r 3               ;----------------------------------------------
000587r 3               ; Write block
000587r 3               ;----------------------------------------------
000587r 3               
000587r 3               .if aflag
000587r 3               wbloc:
000587r 3               	ldy #3
000587r 3               	sta (pbptr),y		; store block number
000587r 3               	dey
000587r 3               	lda dispx
000587r 3               	sta (pbptr),y		; write x position of block.
000587r 3               	dey
000587r 3               	lda dispy
000587r 3               	sta (pbptr),y		; write y position of block.
000587r 3               	dey
000587r 3               	lda scno
000587r 3               	sta (pbptr),y		; write screen.
000587r 3               	clc			; point to next free location
000587r 3               	lda pbptr
000587r 3               	adc #4
000587r 3               	sta pbptr
000587r 3               	bcc :+
000587r 3               	inc pbptr+1
000587r 3               :
000587r 3               	rts
000587r 3               .endif
000587r 3               
000587r 3               ;.if kflag
000587r 3               ;panp:
000587r 3               ;.endif
000587r 3               
000587r 3               ;----------------------------------------------
000587r 3               ; Print character pixels, no more.
000587r 3               ;
000587r 3               ; Input:
000587r 3               ;  A	= character to print
000587r 3               ;----------------------------------------------
000587r 3               
000587r 3               pchr:
000587r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
00058Ar 3  E6 rr        	inc dispx		; move along one.
00058Cr 3  60           	rts
00058Dr 3               
00058Dr 3               ;----------------------------------------------------
00058Dr 3               ; Shifter sprite routine for objects.
00058Dr 3               ;----------------------------------------------------
00058Dr 3               
00058Dr 3               .if oflag
00058Dr 3               sprit7:
00058Dr 3               	lda z80_b
00058Dr 3               	beq sprit0
00058Dr 3               	sta z80_a
00058Dr 3               sprit3:
00058Dr 3               	lsr spr			; shift into position.
00058Dr 3               	ror spr+1
00058Dr 3               	ror spr+2
00058Dr 3               	dec z80_a		; one less iteration.
00058Dr 3               	bne sprit3
00058Dr 3               sprit0:
00058Dr 3               	rts 			; now apply to screen.
00058Dr 3               .endif
00058Dr 3               
00058Dr 3               ;-----------------------------------------------------------
00058Dr 3               ; Get room address.
00058Dr 3               ;-----------------------------------------------------------
00058Dr 3               
00058Dr 3               groom:
00058Dr 3  A6 rr        	ldx scno 		; screen number.
00058Fr 3  A0 00        	ldy #0
000591r 3               groomx:
000591r 3  A9 rr        	lda #<scdat 		; pointer to screens.
000593r 3  85 rr        	sta z80_l
000595r 3  A9 rr        	lda #>scdat
000597r 3  85 rr        	sta z80_h
000599r 3               groom1:
000599r 3  E0 00        	cpx #0			; is it the first one?
00059Br 3  F0 15        	beq groom0 		; no more screens to skip.
00059Dr 3               
00059Dr 3  18           	clc
00059Er 3  A5 rr        	lda z80_l
0005A0r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0005A3r 3  85 rr        	sta z80_l
0005A5r 3  C8           	iny			; point to high byte.
0005A6r 3  A5 rr        	lda z80_h
0005A8r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
0005ABr 3  85 rr        	sta z80_h
0005ADr 3  C8           	iny			; next address.
0005AEr 3               
0005AEr 3  CA           	dex 			; one less iteration.
0005AFr 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
0005B2r 3               groom0:
0005B2r 3  AD rr rr     	lda numsc		; add displacement.
0005B5r 3  0A           	asl a
0005B6r 3  18           	clc			; add double displacement to address.
0005B7r 3  65 rr        	adc z80_l
0005B9r 3  85 rr        	sta z80_l
0005BBr 3  A5 rr        	lda z80_h
0005BDr 3  69 00        	adc #0
0005BFr 3  85 rr        	sta z80_h
0005C1r 3  60           	rts
0005C2r 3               
0005C2r 3               ;-----------------------------------------------------------
0005C2r 3               ; Draw present room.
0005C2r 3               ;-----------------------------------------------------------
0005C2r 3               
0005C2r 3               droom:
0005C2r 3  AD rr rr     	lda wintop 		; window top.
0005C5r 3  85 rr        	sta dispy		; set cursor y position.
0005C7r 3               droom2:
0005C7r 3  20 rr rr     	jsr groom 		; get address of current room.
0005CAr 3  A9 00        	lda #0	 		; zero in accumulator.
0005CCr 3  85 rr        	sta comcnt 		; reset compression counter.
0005CEr 3  AD rr rr     	lda winhgt 		; height of window.
0005D1r 3  85 rr        	sta rrow		; set row counter
0005D3r 3               droom0:
0005D3r 3  AD rr rr     	lda winlft 		; window left edge.
0005D6r 3  85 rr        	sta dispx 		; set cursor x position.
0005D8r 3  AD rr rr     	lda winwid 		; width of window.
0005DBr 3  85 rr        	sta rcol		; set column counter
0005DDr 3               droom1:
0005DDr 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
0005E0r 3               .if xflag
0005E0r 3               	jsr drwmeta
0005E0r 3               .else
0005E0r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
0005E3r 3               .endif
0005E3r 3  C6 rr        	dec rcol		; one less column.
0005E5r 3  D0 F6        	bne droom1 		; repeat for entire line.
0005E7r 3  E6 rr        	inc dispy		; move down one line.
0005E9r 3               .if xflag
0005E9r 3               	inc dispy		; move down one line.
0005E9r 3               .endif
0005E9r 3  C6 rr        	dec rrow 		; one less row.
0005EBr 3  D0 E6        	bne droom0 		; repeat for all rows.
0005EDr 3  60           	rts
0005EEr 3               
0005EEr 3               ;----------------------------------------------
0005EEr 3               ; Decompress bytes on-the-fly.
0005EEr 3               ;----------------------------------------------
0005EEr 3               
0005EEr 3               flbyt:
0005EEr 3  A5 rr        	lda comcnt 		; compression counter.
0005F0r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
0005F2r 3               
0005F2r 3  A0 00        	ldy #0
0005F4r 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
0005F6r 3  E6 rr        	inc z80_l 		; point to next cell.
0005F8r 3  D0 02        	bne :+
0005FAr 3  E6 rr        	inc z80_h
0005FCr 3               :
0005FCr 3  C9 FF        	cmp #255 		; is this byte a control code?
0005FEr 3  F0 01        	beq :+
000600r 3  60           	rts 			; no, this byte is uncompressed.
000601r 3               :
000601r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000603r 3  85 rr        	sta combyt 		; set up the type.
000605r 3  E6 rr        	inc z80_l 		; point to quantity.
000607r 3  D0 02        	bne :+
000609r 3  E6 rr        	inc z80_h
00060Br 3               :
00060Br 3  B1 rr        	lda (z80_hl),y 		; get quantity.
00060Dr 3  E6 rr        	inc z80_l 		; point to next byte.
00060Fr 3  D0 02        	bne :+
000611r 3  E6 rr        	inc z80_h
000613r 3               :
000613r 3               flbyt1:
000613r 3  85 rr        	sta comcnt 		; store new quantity.
000615r 3  C6 rr        	dec comcnt		; one less.
000617r 3  A5 rr        	lda combyt 		; byte to expand.
000619r 3  60           	rts
00061Ar 3               
00061Ar 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00061Ar 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
00061Ar 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
00061Ar 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00061Ar 3               .if xflag
00061Ar 3               drwmeta:
00061Ar 3               	sta tmpblk
00061Ar 3               	jsr pattr2
00061Ar 3               
00061Ar 3               	inc dispy
00061Ar 3               	dec dispx
00061Ar 3               	ldx tmpblk
00061Ar 3               	beq :+
00061Ar 3               	inx
00061Ar 3               :
00061Ar 3               	txa
00061Ar 3               	jsr pattr2
00061Ar 3               
00061Ar 3               	ldx tmpblk
00061Ar 3               	beq :+
00061Ar 3               	inx
00061Ar 3               	inx
00061Ar 3               	inx
00061Ar 3               :
00061Ar 3               	txa
00061Ar 3               	jsr pattr2
00061Ar 3               
00061Ar 3               	dec dispy
00061Ar 3               	dec dispx
00061Ar 3               	ldx tmpblk
00061Ar 3               	beq :+
00061Ar 3               	inx
00061Ar 3               	inx
00061Ar 3               :
00061Ar 3               	txa
00061Ar 3               	jsr pattr2
00061Ar 3               	rts
00061Ar 3               
00061Ar 3               tmpblk:	.byte 0
00061Ar 3               
00061Ar 3               .endif
00061Ar 3               
00061Ar 3               ;------------------------------------------
00061Ar 3               ; Ladder down check.
00061Ar 3               ;
00061Ar 3               ; Input:
00061Ar 3               ;  IX = sprite pointer
00061Ar 3               ;------------------------------------------
00061Ar 3               
00061Ar 3               .if lflag
00061Ar 3               laddd:
00061Ar 3               	ldy #9
00061Ar 3               	lda (z80_ix),y		; x coordinate.
00061Ar 3               	sta dispx
00061Ar 3               
00061Ar 3               	ldy #8
00061Ar 3               	lda (z80_ix),y		; y coordinate.
00061Ar 3               	and #254		; make it even.
00061Ar 3               	sta (z80_ix),y 		; reset it.
00061Ar 3               	clc 			; look down 16 pixels.
00061Ar 3               numsp5:
00061Ar 3               	adc #SPR_HGT
00061Ar 3               	sta dispy		; coords in dispx,dispy.
00061Ar 3               	jmp laddv
00061Ar 3               
00061Ar 3               ;------------------------------------------
00061Ar 3               ; Ladder up check.
00061Ar 3               ;
00061Ar 3               ; Input:
00061Ar 3               ;  IX = sprite pointer
00061Ar 3               ;
00061Ar 3               ; Output:
00061Ar 3               ;  A  = 0 is ok, A <>0 is not ok
00061Ar 3               ;------------------------------------------
00061Ar 3               
00061Ar 3               laddu:
00061Ar 3               	ldy #9
00061Ar 3               	lda (z80_ix),y		; x coordinate.
00061Ar 3               	sta dispx
00061Ar 3               
00061Ar 3               	ldy #8
00061Ar 3               	lda (z80_ix),y		; y coordinate.
00061Ar 3               	and #254 		; make it even.
00061Ar 3               	sta (z80_ix),y		; reset it.
00061Ar 3               	clc 			; look 2 pixels above feet.
00061Ar 3               numsp6:
00061Ar 3               	adc #SPR_HGT-2
00061Ar 3               	sta dispy		; coords in dispx,dispy.
00061Ar 3               laddv:
00061Ar 3               	jsr tstbl 		; get map address.
00061Ar 3               	jsr ldchk 		; standard ladder check.
00061Ar 3               	beq :+
00061Ar 3               	rts 			; no way through.
00061Ar 3               :
00061Ar 3               	inc bufaddr 		; look right one cell.
00061Ar 3               	bne :+
00061Ar 3               	inc bufaddr+1
00061Ar 3               :
00061Ar 3               	jsr ldchk 		; do the check.
00061Ar 3               	beq :+
00061Ar 3               	rts 			; impassable.
00061Ar 3               :
00061Ar 3               	lda dispx 		; y coordinate.
00061Ar 3               	and #7 			; position straddling block cells.
00061Ar 3               	bne :+
00061Ar 3               	rts 			; no more checks needed.
00061Ar 3               :
00061Ar 3               	inc bufaddr 		; look to third cell.
00061Ar 3               	bne :+
00061Ar 3               	inc bufaddr+1
00061Ar 3               :
00061Ar 3               	jsr ldchk 		; do the check.
00061Ar 3               	rts  			; return with zero flag set accordingly.
00061Ar 3               .endif
00061Ar 3               
00061Ar 3               ;---------------------------------------------------------
00061Ar 3               ; Can go up check.
00061Ar 3               ;
00061Ar 3               ; Input:
00061Ar 3               ;  IX = sprite pointer
00061Ar 3               ;
00061Ar 3               ; Output:
00061Ar 3               ;  A  = 0 is ok, A <>0 is not ok
00061Ar 3               ;---------------------------------------------------------
00061Ar 3               
00061Ar 3               cangu:
00061Ar 3  A0 09        	ldy #9
00061Cr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00061Er 3  85 rr        	sta dispx
000620r 3  A0 08        	ldy #8
000622r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000624r 3  38           	sec
000625r 3  E9 02        	sbc #2
000627r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000629r 3  20 rr rr     	jsr tstbl 		; get map address.
00062Cr 3  20 rr rr     	jsr lrchk 		; standard left/right check.
00062Fr 3  F0 01        	beq :+
000631r 3  60           	rts			; no way through.
000632r 3               :
000632r 3  E6 rr        	inc bufaddr		; look right one cell.
000634r 3  D0 02        	bne :+
000636r 3  E6 rr        	inc bufaddr+1
000638r 3               :
000638r 3  20 rr rr     	jsr lrchk 		; do the check.
00063Br 3  F0 01        	beq :+
00063Dr 3  60           	rts			; impassable.
00063Er 3               :
00063Er 3  A5 rr        	lda dispx		; x coordinate.
000640r 3  29 07        	and #7			; position straddling block cells.
000642r 3  D0 01        	bne :+
000644r 3  60           	rts			; no more checks needed.
000645r 3               :
000645r 3  E6 rr        	inc bufaddr		; look to third cell.
000647r 3  D0 02        	bne :+
000649r 3  E6 rr        	inc bufaddr+1
00064Br 3               :
00064Br 3  20 rr rr     	jsr lrchk		; do the check.
00064Er 3  60           	rts 			; return with zero flag set accordingly.
00064Fr 3               
00064Fr 3               ;---------------------------------------------------------
00064Fr 3               ; Can go down check.
00064Fr 3               ;
00064Fr 3               ; Input:
00064Fr 3               ;  IX = sprite pointer
00064Fr 3               ;
00064Fr 3               ; Output:
00064Fr 3               ;  A  = 0 is ok, A <>0 is not ok
00064Fr 3               ;---------------------------------------------------------
00064Fr 3               
00064Fr 3               cangd:
00064Fr 3  A0 09        	ldy #9
000651r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000653r 3  85 rr        	sta dispx
000655r 3  A0 08        	ldy #8
000657r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000659r 3  18           	clc
00065Ar 3               numsp3:
00065Ar 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
00065Cr 3  85 rr        	sta dispy		; coords in dispx,dispy.
00065Er 3  20 rr rr     	jsr tstbl 		; get map address.
000661r 3  20 rr rr     	jsr plchk 		; block, platform check.
000664r 3  F0 01        	beq :+
000666r 3  60           	rts			; no way through.
000667r 3               :
000667r 3  E6 rr        	inc bufaddr		; look right one cell.
000669r 3  D0 02        	bne :+
00066Br 3  E6 rr        	inc bufaddr+1
00066Dr 3               :
00066Dr 3  20 rr rr     	jsr plchk		; block, platform check.
000670r 3  F0 01        	beq :+
000672r 3  60           	rts			; impassable.
000673r 3               :
000673r 3  A5 rr        	lda dispx		; x coordinate.
000675r 3  29 07        	and #7			; position straddling block cells.
000677r 3  D0 01        	bne :+
000679r 3  60           	rts			; no more checks needed.
00067Ar 3               :
00067Ar 3  E6 rr        	inc bufaddr		; look to third cell.
00067Cr 3  D0 02        	bne :+
00067Er 3  E6 rr        	inc bufaddr+1
000680r 3               :
000680r 3  20 rr rr     	jsr plchk		; block, platform check.
000683r 3  60           	rts			; return with zero flag set accordingly.
000684r 3               
000684r 3               ;---------------------------------------------------------
000684r 3               ; Can go left check.
000684r 3               ;
000684r 3               ; Input:
000684r 3               ;  IX = sprite pointer
000684r 3               ;
000684r 3               ; Output:
000684r 3               ;  A  = 0 is ok, A <>0 is not ok
000684r 3               ;---------------------------------------------------------
000684r 3               
000684r 3               cangl:
000684r 3  A0 08        	ldy #8
000686r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000688r 3  85 rr        	sta dispy
00068Ar 3  A0 09        	ldy #9
00068Cr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00068Er 3  38           	sec
00068Fr 3  E9 02        	sbc #2			; look left 2 pixels.
000691r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000693r 3  4C rr rr     	jmp cangh		; test if we can go there.
000696r 3               
000696r 3               ;---------------------------------------------------------
000696r 3               ; Can go right check.
000696r 3               ;
000696r 3               ; Input:
000696r 3               ;  IX = sprite pointer
000696r 3               ;
000696r 3               ; Output:
000696r 3               ;  A  = 0 is ok, A <>0 is not ok
000696r 3               ;---------------------------------------------------------
000696r 3               
000696r 3               cangr:
000696r 3  A0 08        	ldy #8
000698r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00069Ar 3  85 rr        	sta dispy
00069Cr 3  A0 09        	ldy #9
00069Er 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0006A0r 3  18           	clc
0006A1r 3  69 10        	adc #16			; look right 16 pixels.
0006A3r 3  85 rr        	sta dispx		; coords in dispx,dispy.
0006A5r 3               cangh:
0006A5r 3               cangh2:
0006A5r 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0006A7r 3  85 rr        	sta z80_b
0006A9r 3  A5 rr        	lda dispy		; y position.
0006ABr 3  29 07        	and #7			; does x straddle cells?
0006ADr 3  D0 02        	bne cangh0		; yes, loop counter is good.
0006AFr 3  C6 rr        	dec z80_b		; one less row to write.
0006B1r 3               cangh0:
0006B1r 3  20 rr rr     	jsr tstbl		; get map address.
0006B4r 3               cangh1:
0006B4r 3  20 rr rr     	jsr lrchk		; standard left/right check.
0006B7r 3  F0 01        	beq :+
0006B9r 3  60           	rts			; no way through.
0006BAr 3               :
0006BAr 3  48           	pha
0006BBr 3  18           	clc
0006BCr 3  A5 rr        	lda bufaddr
0006BEr 3  69 20        	adc #32		; look down.
0006C0r 3  85 rr        	sta bufaddr
0006C2r 3  90 02        	bcc :+
0006C4r 3  E6 rr        	inc bufaddr+1
0006C6r 3               :
0006C6r 3  68           	pla
0006C7r 3               
0006C7r 3  C6 rr        	dec z80_b
0006C9r 3  D0 E9        	bne cangh1
0006CBr 3  60           	rts
0006CCr 3               
0006CCr 3               ;-------------------------------------
0006CCr 3               ; Check left/right movement is okay.
0006CCr 3               ;
0006CCr 3               ; Input:
0006CCr 3               ;  bufaddr = MAP + x/8 + y/8*32
0006CCr 3               ;
0006CCr 3               ; Output:
0006CCr 3               ;  A  = 0 is ok, A <>0 is not ok
0006CCr 3               ;-------------------------------------
0006CCr 3               
0006CCr 3               lrchk:
0006CCr 3  A0 00        	ldy #0
0006CEr 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0006D0r 3  C9 02        	cmp #WALL 		; is it passable?
0006D2r 3  F0 0A        	beq lrchkx		; no.
0006D4r 3               
0006D4r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
0006D6r 3  F0 06        	beq lrchkx		; not passable.
0006D8r 3  A9 00        	lda #0
0006DAr 3  60           	rts
0006DBr 3               
0006DBr 3               ;--------------------------------------------------------------
0006DBr 3               ; Called by mmenu
0006DBr 3               ;--------------------------------------------------------------
0006DBr 3               
0006DBr 3               always:
0006DBr 3  A9 FF        	lda #255		; report it as okay.
0006DDr 3  60           	rts
0006DEr 3               
0006DEr 3               lrchkx:
0006DEr 3  A9 01        	lda #1 			; reset all bits.
0006E0r 3  60           	rts
0006E1r 3               
0006E1r 3               
0006E1r 3               ;--------------------------------------------------------------
0006E1r 3               ; Check platform or solid item is not in way.
0006E1r 3               ;
0006E1r 3               ; Input:
0006E1r 3               ;  bufaddr = MAP + x/8 + y/8*32
0006E1r 3               ;
0006E1r 3               ; Output:
0006E1r 3               ;  A  = 0 is ok, A <>0 is not ok
0006E1r 3               ;--------------------------------------------------------------
0006E1r 3               
0006E1r 3               plchk:
0006E1r 3  A0 00        	ldy #0
0006E3r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0006E5r 3  C9 02        	cmp #WALL 		; is it passable?
0006E7r 3  F0 F5        	beq lrchkx		; no.
0006E9r 3               .if pflag .or dflag
0006E9r 3               	cmp #FODDER		; fodder has to be dug.
0006E9r 3               	beq lrchkx		; not passable.
0006E9r 3               .endif
0006E9r 3  C9 01        	cmp #PLATFM		; platform is solid.
0006EBr 3  F0 03        	beq plchkx		; not passable.
0006EDr 3               .if lflag
0006EDr 3               	cmp #LADDER		; is it a ladder?
0006EDr 3               	beq lrchkx		; on ladder, deny movement.
0006EDr 3               .endif
0006EDr 3               plchk0:
0006EDr 3  A9 00        	lda #0			; report as ok
0006EFr 3  60           	rts
0006F0r 3               plchkx:
0006F0r 3  A5 rr        	lda dispy		; x coordinate.
0006F2r 3  29 07        	and #7			; position straddling blocks.
0006F4r 3  F0 E8        	beq lrchkx		; on platform, deny movement.
0006F6r 3  4C rr rr     	jmp plchk0
0006F9r 3               
0006F9r 3               ;--------------------------------------------------------------
0006F9r 3               ; Check ladder is available.
0006F9r 3               ;
0006F9r 3               ; Input:
0006F9r 3               ;  bufaddr = MAP + x/8 + y/8*32
0006F9r 3               ;
0006F9r 3               ; Output:
0006F9r 3               ;  A  = 0 is ok, A <>0 is not ok
0006F9r 3               ;--------------------------------------------------------------
0006F9r 3               
0006F9r 3               .if lflag
0006F9r 3               ldchk:
0006F9r 3               	ldy #0
0006F9r 3               	lda (bufaddr),y 	; fetch cell.
0006F9r 3               	cmp #LADDER 		; is it a ladder?
0006F9r 3               	beq ldchk1
0006F9r 3               	lda #1
0006F9r 3               	rts  			; return with zero flag set accordingly.
0006F9r 3               ldchk1:
0006F9r 3               	lda #0
0006F9r 3               	rts
0006F9r 3               .endif
0006F9r 3               
0006F9r 3               ;--------------------------------------------------------------
0006F9r 3               ; Get collectables.
0006F9r 3               ;--------------------------------------------------------------
0006F9r 3               
0006F9r 3               .if cflag
0006F9r 3               getcol:
0006F9r 3                       lda #COLECT             ; collectable blocks.
0006F9r 3                       sta z80_b
0006F9r 3                       jsr tded                ; test for collectable blocks.
0006F9r 3                       cmp z80_b               ; did we find one?
0006F9r 3                       beq :+
0006F9r 3                       rts                     ; none were found, job done.
0006F9r 3               :
0006F9r 3                       jsr gtblk               ; get block.
0006F9r 3                       jsr evnt20              ; collected block event.
0006F9r 3                       jmp getcol              ; repeat until none left.
0006F9r 3               
0006F9r 3               ; Get collectable block.
0006F9r 3               
0006F9r 3               gtblk:
0006F9r 3               	ldy #0
0006F9r 3               	lda (bufaddr),y
0006F9r 3               	sta z80_a
0006F9r 3                       lda #0
0006F9r 3                       sta (bufaddr),y		; make it empty now.
0006F9r 3               
0006F9r 3               	lda bufaddr		; set dispx
0006F9r 3               	and #31
0006F9r 3               	sta dispx
0006F9r 3               
0006F9r 3               	lda bufaddr+1		; Set dispy
0006F9r 3               	sec
0006F9r 3               	sbc #>MAP
0006F9r 3               	sta bufaddr+1
0006F9r 3               	asl bufaddr
0006F9r 3               	rol bufaddr+1
0006F9r 3               	asl bufaddr
0006F9r 3               	rol bufaddr+1
0006F9r 3               	asl bufaddr
0006F9r 3               	rol bufaddr+1
0006F9r 3               	lda bufaddr+1
0006F9r 3               	sta dispy
0006F9r 3               
0006F9r 3               	lda colpatt		; get blocknr
0006F9r 3               	sta z80_e		; displacement in e.
0006F9r 3               	lda #0
0006F9r 3               	sta z80_d		; no high byte.
0006F9r 3               	asl z80_e  		; multiply char by 8.
0006F9r 3               	rol z80_d
0006F9r 3               	asl z80_e
0006F9r 3               	rol z80_d
0006F9r 3               	asl z80_e
0006F9r 3               	rol z80_d
0006F9r 3               	clc
0006F9r 3               	lda z80_e
0006F9r 3               	adc #<chgfx 		; address of graphics.
0006F9r 3               	sta tileaddr
0006F9r 3               	lda z80_d
0006F9r 3               	adc #>chgfx
0006F9r 3               	sta tileaddr+1
0006F9r 3               
0006F9r 3               	jsr gprad 		; get screen address.
0006F9r 3               	ldx #7			; number of pixel rows to write.
0006F9r 3               gtblk0:
0006F9r 3               	ldy #0
0006F9r 3               	lda (tileaddr),y 	; get image byte.
0006F9r 3               	ldy scrtab,x
0006F9r 3               	eor (scraddr),y 	; XOR tile on screen
0006F9r 3               	sta (scraddr),y 	; copy to screen.
0006F9r 3               	inc tileaddr 		; next image byte.
0006F9r 3               	bne :+
0006F9r 3               	inc tileaddr+1
0006F9r 3               :
0006F9r 3               	dex	 		; repeat for 8 pixel rows.
0006F9r 3               	bpl gtblk0
0006F9r 3               	rts
0006F9r 3               .endif
0006F9r 3               
0006F9r 3               ;--------------------------------------------------------------
0006F9r 3               ; Touched deadly block check.
0006F9r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0006F9r 3               ;
0006F9r 3               ; Input:
0006F9r 3               ;  IX = sprite address
0006F9r 3               ;
0006F9r 3               ; Output:
0006F9r 3               ;  A  = 0 is ok, A=5 is not ok
0006F9r 3               ;--------------------------------------------------------------
0006F9r 3               
0006F9r 3               tded:
0006F9r 3  A0 08        	ldy #8
0006FBr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0006FDr 3  85 rr        	sta dispy
0006FFr 3  C8           	iny
000700r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000702r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000704r 3  20 rr rr     	jsr tstbl		; get map address.
000707r 3  48           	pha
000708r 3  A9 1F        	lda #31			; default distance to next line down.
00070Ar 3  85 rr        	sta z80_e
00070Cr 3  68           	pla
00070Dr 3  C5 rr        	cmp z80_b		; is this the required block?
00070Fr 3  D0 01        	bne :+
000711r 3  60           	rts			; yes.
000712r 3               :
000712r 3  E6 rr        	inc bufaddr 		; next cell.
000714r 3  D0 02        	bne :+
000716r 3  E6 rr        	inc bufaddr+1
000718r 3               :
000718r 3  A0 00        	ldy #0
00071Ar 3  B1 rr        	lda (bufaddr),y		; fetch type.
00071Cr 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
00071Er 3  D0 01        	bne :+
000720r 3  60           	rts			; yes.
000721r 3               :
000721r 3  A5 rr        	lda dispx		; horizontal position.
000723r 3  85 rr        	sta z80_c 		; store column in c register.
000725r 3  29 07        	and #7			; is it straddling cells?
000727r 3  D0 03        	bne :+
000729r 3  4C rr rr     	jmp tded0		; no.
00072Cr 3               :
00072Cr 3  E6 rr        	inc bufaddr 		; last cell.
00072Er 3  D0 02        	bne :+
000730r 3  E6 rr        	inc bufaddr+1
000732r 3               :
000732r 3  A0 00        	ldy #0
000734r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000736r 3  C5 rr        	cmp z80_b		; is this the block?
000738r 3  D0 01        	bne :+
00073Ar 3  60           	rts			; yes.
00073Br 3               :
00073Br 3  C6 rr        	dec z80_e		; one less cell to next row down.
00073Dr 3               tded0:
00073Dr 3  18           	clc 			; point to next row.
00073Er 3  A5 rr        	lda bufaddr
000740r 3  65 rr        	adc z80_e
000742r 3  85 rr        	sta bufaddr
000744r 3  90 02        	bcc :+
000746r 3  E6 rr        	inc bufaddr+1
000748r 3               :
000748r 3  A0 00        	ldy #0
00074Ar 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00074Cr 3  C5 rr        	cmp z80_b		; is this fatal?
00074Er 3  D0 01        	bne :+
000750r 3  60           	rts			; yes.
000751r 3               :
000751r 3  E6 rr        	inc bufaddr 		; next cell.
000753r 3  D0 02        	bne :+
000755r 3  E6 rr        	inc bufaddr+1
000757r 3               :
000757r 3  A0 00        	ldy #0
000759r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00075Br 3  C5 rr        	cmp z80_b		; is this fatal?
00075Dr 3  D0 01        	bne :+
00075Fr 3  60           	rts			; yes.
000760r 3               :
000760r 3  A5 rr        	lda z80_c		; horizontal position.
000762r 3  29 07        	and #7			; is it straddling cells?
000764r 3  D0 03        	bne :+
000766r 3  4C rr rr     	jmp tded1 		; no.
000769r 3               :
000769r 3  E6 rr        	inc bufaddr		; last cell.
00076Br 3  D0 02        	bne :+
00076Dr 3  E6 rr        	inc bufaddr+1
00076Fr 3               :
00076Fr 3  A0 00        	ldy #0
000771r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000773r 3  C5 rr        	cmp z80_b		; is this fatal?
000775r 3  D0 01        	bne :+
000777r 3  60           	rts			; yes.
000778r 3               :
000778r 3               tded1:
000778r 3  A5 rr        	lda dispy		; vertical position.
00077Ar 3  29 07        	and #7 			; is it straddling cells?
00077Cr 3  D0 01        	bne :+
00077Er 3  60           	rts			; no, job done.
00077Fr 3               :
00077Fr 3  18           	clc			; point to next row.
000780r 3  A5 rr        	lda bufaddr
000782r 3  65 rr        	adc z80_e
000784r 3  85 rr        	sta bufaddr
000786r 3  90 02        	bcc :+
000788r 3  E6 rr        	inc bufaddr+1
00078Ar 3               :
00078Ar 3  A0 00        	ldy #0
00078Cr 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00078Er 3  C5 rr        	cmp z80_b		; is this fatal?
000790r 3  D0 01        	bne :+
000792r 3  60           	rts			; yes.
000793r 3               :
000793r 3  E6 rr        	inc bufaddr		; next cell.
000795r 3  D0 02        	bne :+
000797r 3  E6 rr        	inc bufaddr+1
000799r 3               :
000799r 3  A0 00        	ldy #0
00079Br 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00079Dr 3  C5 rr        	cmp z80_b		; is this fatal?
00079Fr 3  D0 01        	bne :+
0007A1r 3  60           	rts			; yes.
0007A2r 3               :
0007A2r 3  A5 rr        	lda z80_c		; horizontal position.
0007A4r 3  29 07        	and #7			; is it straddling cells?
0007A6r 3  D0 01        	bne :+
0007A8r 3  60           	rts			; no.
0007A9r 3               :
0007A9r 3  E6 rr        	inc bufaddr		; last cell.
0007ABr 3  D0 02        	bne :+
0007ADr 3  E6 rr        	inc bufaddr+1
0007AFr 3               :
0007AFr 3  A0 00        	ldy #0
0007B1r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
0007B3r 3  60           	rts 			; return with final type in accumulator.
0007B4r 3               
0007B4r 3               ;---------------------------------------------------
0007B4r 3               ; Fetch block type at (dispx, dispy).
0007B4r 3               ;
0007B4r 3               ; Output:
0007B4r 3               ;  A = block type
0007B4r 3               ;---------------------------------------------------
0007B4r 3               
0007B4r 3               tstbl:
0007B4r 3  A5 rr        	lda dispy 		; fetch y coord.
0007B6r 3  4A           	lsr a			; bufaddr = y/8
0007B7r 3  4A           	lsr a
0007B8r 3  4A           	lsr a
0007B9r 3               ;	sta chary
0007B9r 3               
0007B9r 3  85 rr        	sta bufaddr
0007BBr 3  A9 00        	lda #0
0007BDr 3  85 rr        	sta bufaddr+1
0007BFr 3               
0007BFr 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0007C1r 3  26 rr        	rol bufaddr+1
0007C3r 3  06 rr        	asl bufaddr
0007C5r 3  26 rr        	rol bufaddr+1
0007C7r 3  06 rr        	asl bufaddr
0007C9r 3  26 rr        	rol bufaddr+1
0007CBr 3  06 rr        	asl bufaddr
0007CDr 3  26 rr        	rol bufaddr+1
0007CFr 3  06 rr        	asl bufaddr
0007D1r 3  26 rr        	rol bufaddr+1
0007D3r 3               
0007D3r 3  A5 rr        	lda dispx		; x/8
0007D5r 3  4A           	lsr a
0007D6r 3  4A           	lsr a
0007D7r 3  4A           	lsr a
0007D8r 3               ;	sta charx
0007D8r 3               
0007D8r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0007D9r 3  65 rr        	adc bufaddr
0007DBr 3  69 00        	adc #<MAP
0007DDr 3  85 rr        	sta bufaddr
0007DFr 3  A5 rr        	lda bufaddr+1
0007E1r 3  69 04        	adc #>MAP
0007E3r 3  85 rr        	sta bufaddr+1
0007E5r 3               
0007E5r 3  A0 00        	ldy #0
0007E7r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0007E9r 3  60           	rts
0007EAr 3               
0007EAr 3               ;-------------------------------------------------------------------
0007EAr 3               ; Jump - if we can.
0007EAr 3               ; Requires initial speed to be set up in accumulator prior to call.
0007EAr 3               ;
0007EAr 3               ; Input:
0007EAr 3               ;  IX = sprite address
0007EAr 3               ;-------------------------------------------------------------------
0007EAr 3               
0007EAr 3               jump:
0007EAr 3  A0 0D        	ldy #var_jumpLo
0007ECr 3  B1 rr        	lda (z80_ix),y		; jump table low.
0007EEr 3  A0 0E        	ldy #var_jumpHi
0007F0r 3  11 rr        	ora (z80_ix),y		; jump table high.
0007F2r 3  F0 01        	beq :+
0007F4r 3  60           	rts			; already in the air.
0007F5r 3               :
0007F5r 3  A9 rr        	lda #>jtab
0007F7r 3  A0 0E        	ldy #var_jumpHi
0007F9r 3  91 rr        	sta (z80_ix),y		; set jump high.
0007FBr 3  A9 rr        	lda #<jtab		; jump table start.
0007FDr 3  A0 0D        	ldy #var_jumpLo
0007FFr 3  91 rr        	sta (z80_ix),y		; set jump low.
000801r 3  60           	rts
000802r 3               
000802r 3               ; Jump table.
000802r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000802r 3               ;.align 32
000802r 3               ;jtab:
000802r 3               ;	.byte 248,250,252
000802r 3               ;	.byte 254,254,255
000802r 3               ;	.byte 255,255,0,0
000802r 3               ;	.byte 0,1,1,1,2,2
000802r 3               ;	.byte 4,6,8,8,8,99
000802r 3               
000802r 3               ;------------------------------------------------
000802r 3               ; Random numbers code.
000802r 3               ; Pseudo-random number generator, 8-bit.
000802r 3               ;
000802r 3               ; Output:
000802r 3               ;  RND = random number
000802r 3               ;------------------------------------------------
000802r 3               
000802r 3               random:
000802r 3  A5 rr        	lda seed
000804r 3  F0 05        	beq doEor
000806r 3  0A           	asl a
000807r 3  F0 04        	beq noEor
000809r 3  90 02        	bcc noEor
00080Br 3  49 1D        doEor:	eor #$1d
00080Dr 3  85 rr        noEor:	sta seed
00080Fr 3  60           	rts
000810r 3               
000810r 3               ;	lda seed		; get last random number.
000810r 3               ;	asl a
000810r 3               ;	asl a
000810r 3               ;	clc
000810r 3               ;	adc seed
000810r 3               ;	clc
000810r 3               ;	adc #$45
000810r 3               ;	sta seed		; store new seed.
000810r 3               ;	sta varrnd		; return number in variable.
000810r 3               ;	rts
000810r 3               
000810r 3               ;-------------------------------------------------------
000810r 3               ; Joystick and keyboard reading routines.
000810r 3               ;
000810r 3               ; contrl = 0, Keyboard
000810r 3               ;          1, JoyKeyb
000810r 3               ;          2, JoyMMC
000810r 3               ;
000810r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000810r 3               ;             ||||||||
000810r 3               ;             |||||||+> Right    KEY 0  - X
000810r 3               ;             ||||||+-> Left     KEY 1  - Z
000810r 3               ;             |||||+--> Down     KEY 2  - .
000810r 3               ;             ||||+---> Up       KEY 3  - ;
000810r 3               ;             |||+----> Fire1    KEY 4  - SPC
000810r 3               ;             ||+-----> Fire2    KEY 5  - Q
000810r 3               ;             |+------> Fire3    KEY 6  - P
000810r 3               ;             +-------> Not used
000810r 3               ;
000810r 3               ;                       Option1  KEY 7  - 1
000810r 3               ;                       Option2  KEY 8  - 2
000810r 3               ;                       Option3  KEY 9  - 3
000810r 3               ;                       Option4  KEY 10 - 4
000810r 3               ;-------------------------------------------------------
000810r 3               
000810r 3               joykey:
000810r 3  A5 rr        	lda contrl 		; control flag.
000812r 3  C9 01        	cmp #1
000814r 3  F0 1A        	beq joy1 		; scan joystick1
000816r 3  C9 02        	cmp #2
000818r 3  F0 1C        	beq joy2 		; scan joystick2
00081Ar 3               
00081Ar 3               ; Scan keyboard
00081Ar 3               
00081Ar 3  A9 00        	lda #0		 	; zero reading.
00081Cr 3  85 rr        	sta z80_e
00081Er 3               
00081Er 3  A0 06        	ldy #6	 		; address of last key.
000820r 3               joyke0:
000820r 3  B9 rr rr     	lda keys,y 		; get key from table.
000823r 3  20 rr rr     	jsr ktest		; being pressed?
000826r 3  26 rr        	rol z80_e 		; rotate into reading.
000828r 3               
000828r 3  88           	dey		 	; next key.
000829r 3  10 F5        	bpl joyke0 		; repeat for all keys.
00082Br 3               joyret:
00082Br 3  A5 rr        	lda z80_e
00082Dr 3  85 rr        	sta joyval
00082Fr 3  60           	rts
000830r 3               
000830r 3               ; Scan joystick 1
000830r 3               
000830r 3               joy1:
000830r 3  20 rr rr     	jsr joy1scan
000833r 3  4C rr rr     	jmp joyret 		; store the value.
000836r 3               
000836r 3               ; Scan joystick 2
000836r 3               
000836r 3               joy2:
000836r 3  20 rr rr     	jsr joy2scan
000839r 3  4C rr rr     	jmp joyret 		; store the value.
00083Cr 3               
00083Cr 3               ;---------------------------------------------------------------
00083Cr 3               ; Display message.
00083Cr 3               ;
00083Cr 3               ; Input:
00083Cr 3               ;  A = message number
00083Cr 3               ;---------------------------------------------------------------
00083Cr 3               
00083Cr 3               dmsg:
00083Cr 3  AA           	tax
00083Dr 3  A9 rr        	lda #<msgdat		; pointer to messages.
00083Fr 3  85 rr        	sta z80_l
000841r 3  A9 rr        	lda #>msgdat
000843r 3  85 rr        	sta z80_h
000845r 3  20 rr rr     	jsr getwrd		; get message number.
000848r 3               dmsg3:
000848r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
00084Br 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
00084Er 3  A5 rr        	lda prtmod		; print mode.
000850r 3  D0 47        	bne bmsg1		; no, double-height text.
000852r 3               dmsg0:
000852r 3  A5 rr        	lda z80_h		; store string pointer.
000854r 3  48           	pha
000855r 3  A5 rr        	lda z80_l
000857r 3  48           	pha
000858r 3               
000858r 3  A0 00        	ldy #0
00085Ar 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
00085Cr 3  29 7F        	and #127		; remove any end marker.
00085Er 3  C9 0D        	cmp #ASCII_NEWLINE
000860r 3  F0 24        	beq dmsg1
000862r 3  20 rr rr     	jsr pchar		; display character.
000865r 3  20 rr rr     	jsr nexpos 		; display position.
000868r 3  D0 03        	bne dmsg2		; not on a new line.
00086Ar 3  20 rr rr     	jsr nexlin		; next line down.
00086Dr 3               dmsg2:
00086Dr 3  68           	pla			; retrieve string pointer
00086Er 3  85 rr        	sta z80_l
000870r 3  68           	pla
000871r 3  85 rr        	sta z80_h
000873r 3               
000873r 3  A0 00        	ldy #0
000875r 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000877r 3  0A           	asl a  			; was it the end?
000878r 3  90 03        	bcc :+
00087Ar 3  4C rr rr     	jmp dscor2		; yes, job done.
00087Dr 3               :
00087Dr 3  E6 rr        	inc z80_l		; next character to display.
00087Fr 3  D0 02        	bne :+
000881r 3  E6 rr        	inc z80_h
000883r 3               :
000883r 3  4C rr rr     	jmp dmsg0
000886r 3               dmsg1:
000886r 3  E6 rr        	inc dispy
000888r 3  A5 rr        	lda dispy
00088Ar 3  C9 18        	cmp #24
00088Cr 3  90 04        	bcc dmsg4
00088Er 3  A9 00        	lda #0
000890r 3  85 rr        	sta dispy
000892r 3               dmsg4:
000892r 3  A9 00        	lda #0
000894r 3  85 rr        	sta dispx
000896r 3  4C rr rr     	jmp dmsg2
000899r 3               
000899r 3               
000899r 3               ;----------------------------------------------------------
000899r 3               ; Display message in big text.
000899r 3               ;
000899r 3               ; Input:
000899r 3               ;  HL = string pointer
000899r 3               ;----------------------------------------------------------
000899r 3               
000899r 3               bmsg1:
000899r 3  A0 00        	ldy #0
00089Br 3  B1 rr        	lda (z80_hl),y 		; get character to display.
00089Dr 3  29 7F        	and #127		; only want 7 bits.
00089Fr 3  C9 0D        	cmp #ASCII_NEWLINE
0008A1r 3  F0 13        	beq bmsg2
0008A3r 3  20 rr rr     	jsr bchar 		; display big char.
0008A6r 3               bmsg3:
0008A6r 3  A0 00        	ldy #0
0008A8r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
0008AAr 3  48           	pha
0008ABr 3  E6 rr        	inc z80_l 		; next character in list.
0008ADr 3  D0 02        	bne :+
0008AFr 3  E6 rr        	inc z80_h
0008B1r 3               :
0008B1r 3  68           	pla
0008B2r 3  0A           	asl a  			; was terminator flag set?
0008B3r 3  90 E4        	bcc bmsg1		; no, keep going.
0008B5r 3               
0008B5r 3  60           	rts
0008B6r 3               bmsg2:
0008B6r 3  A9 00        	lda #0
0008B8r 3  85 rr        	sta dispx
0008BAr 3  E6 rr        	inc dispy
0008BCr 3  E6 rr        	inc dispy
0008BEr 3  A5 rr        	lda dispy
0008C0r 3  C9 17        	cmp #23
0008C2r 3  90 E2        	bcc bmsg3
0008C4r 3  A9 00        	lda #0
0008C6r 3  85 rr        	sta dispy
0008C8r 3  4C rr rr     	jmp bmsg3
0008CBr 3               
0008CBr 3               ;----------------------------------------------------------
0008CBr 3               ; Big character display.
0008CBr 3               ;
0008CBr 3               ; Input:
0008CBr 3               ;  A = character
0008CBr 3               ;----------------------------------------------------------
0008CBr 3               
0008CBr 3               bchar:
0008CBr 3  85 rr        	sta z80_e		; save char in lb
0008CDr 3  A9 00        	lda #0
0008CFr 3  85 rr        	sta z80_d		; reset hb
0008D1r 3               
0008D1r 3  06 rr        	asl z80_e 		; multiply char by 8.
0008D3r 3  26 rr        	rol z80_d
0008D5r 3  06 rr        	asl z80_e
0008D7r 3  26 rr        	rol z80_d
0008D9r 3  06 rr        	asl z80_e
0008DBr 3  26 rr        	rol z80_d		; de = a*8
0008DDr 3               
0008DDr 3  18           	clc			; de = #<(FONT-256) + a*8
0008DEr 3  A5 rr        	lda z80_e
0008E0r 3  69 rr        	adc #<(FONT-256) 		; address of font.
0008E2r 3  85 rr        	sta z80_e
0008E4r 3  A5 rr        	lda z80_d
0008E6r 3  69 rr        	adc #>(FONT-256)
0008E8r 3  85 rr        	sta z80_d
0008EAr 3               
0008EAr 3  20 rr rr     	jsr gaadd		; set colour attribute
0008EDr 3  AD rr rr     	lda fontcol
0008F0r 3  A0 00        	ldy #0
0008F2r 3  91 rr        	sta (bufaddr),y
0008F4r 3               
0008F4r 3  20 rr rr     	jsr gprad 		; get screen address.
0008F7r 3               
0008F7r 3  A2 00        	ldx #0			; height of character in font.
0008F9r 3               bchar0:
0008F9r 3  A0 00        	ldy #0
0008FBr 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
0008FDr 3               
0008FDr 3               .if iflag
0008FDr 3               	eor #$ff
0008FDr 3               .endif
0008FDr 3               
0008FDr 3  91 rr        	sta (scraddr),y
0008FFr 3  48           	pha
000900r 3  20 rr rr     	jsr nline 		; next line down.
000903r 3  68           	pla
000904r 3  91 rr        	sta (scraddr),y
000906r 3  20 rr rr     	jsr nline 		; next line down.
000909r 3               
000909r 3  18           	clc
00090Ar 3  E6 rr        	inc z80_e 		; next line of font.
00090Cr 3  D0 02        	bne :+
00090Er 3  E6 rr        	inc z80_d
000910r 3               :
000910r 3  E8           	inx
000911r 3  E0 08        	cpx #8
000913r 3  D0 E4        	bne bchar0
000915r 3               
000915r 3  20 rr rr     	jsr nexpos		; display position.
000918r 3  D0 05        	bne bchar2 		; not on a new line.
00091Ar 3               bchar3:
00091Ar 3  E6 rr        	inc dispy
00091Cr 3  20 rr rr     	jsr nexlin 		; next line check.
00091Fr 3               bchar2:
00091Fr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000922r 3               
000922r 3               
000922r 3               ;-------------------------------------------------
000922r 3               ; Display a character.
000922r 3               ;
000922r 3               ; Input:
000922r 3               ;  A = character
000922r 3               ;-------------------------------------------------
000922r 3               
000922r 3               achar:
000922r 3  85 rr        	sta z80_b 		; copy to b.
000924r 3  20 rr rr     	jsr preprt 		; get ready to print.
000927r 3  A5 rr        	lda z80_b		; character in accumulator.
000929r 3  A6 rr        	ldx prtmod 		; print mode.
00092Br 3  F0 03        	beq :+
00092Dr 3  4C rr rr     	jmp bchar 		; no, double-height text.
000930r 3               :
000930r 3  20 rr rr     	jsr pchar 		; display character.
000933r 3  20 rr rr     	jsr nexpos 		; display position.
000936r 3  F0 E2        	beq bchar3		; next line down.
000938r 3  4C rr rr     	jmp bchar2 		; tidy up.
00093Br 3               
00093Br 3               
00093Br 3               ;-------------------------------------------------
00093Br 3               ; Get next print column position.
00093Br 3               ;-------------------------------------------------
00093Br 3               
00093Br 3               nexpos:
00093Br 3  E6 rr        	inc dispx		; move along one position.
00093Dr 3  A5 rr        	lda dispx 		; get coordinate.
00093Fr 3  C9 16        	cmp #22
000941r 3  D0 0E        	bne :+
000943r 3  A9 00        	lda #0
000945r 3  85 rr        	sta dispx
000947r 3  A5 rr        	lda prtmod
000949r 3  F0 06        	beq :+
00094Br 3  20 rr rr     	jsr nexlin
00094Er 3  4C rr rr     	jmp nexlin
000951r 3               :
000951r 3  60           	rts
000952r 3               
000952r 3               ;-------------------------------------------------
000952r 3               ; Get next print line position.
000952r 3               ;-------------------------------------------------
000952r 3               
000952r 3               nexlin:
000952r 3  E6 rr        	inc dispy 		; newline.
000954r 3  A5 rr        	lda dispy		; vertical position.
000956r 3  C9 16        	cmp #22			; past screen edge?
000958r 3  B0 01        	bcs :+
00095Ar 3  60           	rts			; no, still okay.
00095Br 3               :
00095Br 3  A9 00        	lda #0			; restart at top.
00095Dr 3  85 rr        	sta dispy
00095Fr 3  60           	rts
000960r 3               
000960r 3               ;--------------------------------------------------------
000960r 3               ; Pre-print preliminaries.
000960r 3               ;--------------------------------------------------------
000960r 3               
000960r 3               preprt:
000960r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000962r 3  8D rr rr     	sta grbase		; set up graphics base.
000965r 3  A9 rr        	lda #>(FONT-256)
000967r 3  8D rr rr     	sta grbase+1
00096Ar 3               prescr:
00096Ar 3  A5 rr        	lda charx 		; display coordinates.
00096Cr 3  85 rr        	sta dispx		; set up general coordinates.
00096Er 3  A5 rr        	lda chary
000970r 3  85 rr        	sta dispy
000972r 3  60           	rts
000973r 3               
000973r 3               ;--------------------------------------------------------------
000973r 3               ; Get messagenr x in hl
000973r 3               ;
000973r 3               ; Input:
000973r 3               ;  HL = pointer to message list
000973r 3               ;  X  = message number.
000973r 3               ;--------------------------------------------------------------
000973r 3               
000973r 3               getwrd:
000973r 3  E0 00        	cpx #0
000975r 3  D0 01        	bne:+ 			; first word in list?
000977r 3  60           	rts 			; yep, don't search.
000978r 3               :
000978r 3  A0 00        	ldy #0
00097Ar 3               getwd0:
00097Ar 3  B1 rr        	lda (z80_hl),y
00097Cr 3  48           	pha
00097Dr 3  E6 rr        	inc z80_l
00097Fr 3  D0 02        	bne :+
000981r 3  E6 rr        	inc z80_h
000983r 3               :
000983r 3  68           	pla
000984r 3  C9 80        	cmp #128		; found end?
000986r 3  30 F2        	bmi getwd0		; no, carry on.
000988r 3  CA           	dex			; until we have right number.
000989r 3  D0 EF        	bne getwd0
00098Br 3  60           	rts
00098Cr 3               
00098Cr 3               ;-----------------------------------------------------------
00098Cr 3               ; Bubble sort.
00098Cr 3               ;-----------------------------------------------------------
00098Cr 3               
00098Cr 3               bsort:
00098Cr 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
00098Er 3  85 rr        	sta qscnt
000990r 3               
000990r 3  A9 rr        	lda #<sprtab 		; sprite table.
000992r 3  85 rr        	sta z80_x
000994r 3  A9 rr        	lda #>sprtab
000996r 3  85 rr        	sta z80_i
000998r 3               bsort0:
000998r 3  A0 00        	ldy #0
00099Ar 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
00099Cr 3  C9 FF        	cmp #255 		; is it switched off?
00099Er 3  F0 30        	beq swemp		; yes, may need to switch another in here.
0009A0r 3               
0009A0r 3  A0 11        	ldy #TABSIZ
0009A2r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
0009A4r 3  C9 FF        	cmp #255 		; is it enabled?
0009A6r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
0009A8r 3               
0009A8r 3  A0 14        	ldy #TABSIZ+3
0009AAr 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0009ACr 3  A0 03        	ldy #3
0009AEr 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
0009B0r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0009B2r 3               bsort2:
0009B2r 3  18           	clc
0009B3r 3  A5 rr        	lda z80_x
0009B5r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
0009B7r 3  85 rr        	sta z80_x
0009B9r 3  90 02        	bcc :+
0009BBr 3  E6 rr        	inc z80_i
0009BDr 3               :
0009BDr 3  C6 rr        	dec qscnt
0009BFr 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0009C1r 3  60           	rts
0009C2r 3               
0009C2r 3               bsort1:
0009C2r 3  A0 11        	ldy #TABSIZ
0009C4r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
0009C6r 3  C9 FF        	cmp #255		; is it enabled?
0009C8r 3  F0 E8        	beq bsort2		; no, nothing to swap.
0009CAr 3  20 rr rr     	jsr swspr		; swap positions.
0009CDr 3  4C rr rr     	jmp bsort2
0009D0r 3               swemp:
0009D0r 3  A0 11        	ldy #TABSIZ
0009D2r 3  B1 rr        	lda (z80_ix),y		; next table entry.
0009D4r 3  C9 FF        	cmp #255		; is that one on?
0009D6r 3  F0 DA        	beq bsort2		; no, nothing to swap.
0009D8r 3  20 rr rr     	jsr swspr		; swap positions.
0009DBr 3  4C rr rr     	jmp bsort2
0009DEr 3               
0009DEr 3               ; Swap sprites.
0009DEr 3               
0009DEr 3               swspr:
0009DEr 3  A5 rr        	lda z80_x		; table address
0009E0r 3  85 rr        	sta z80_e		; copy to de pair.
0009E2r 3  85 rr        	sta z80_l		; copy to hl pair.
0009E4r 3  A5 rr        	lda z80_i
0009E6r 3  85 rr        	sta z80_h
0009E8r 3  85 rr        	sta z80_d
0009EAr 3               
0009EAr 3  18           	clc
0009EBr 3  A5 rr        	lda z80_l
0009EDr 3  69 11        	adc #TABSIZ		; distance to second entry.
0009EFr 3  85 rr        	sta z80_l
0009F1r 3  90 02        	bcc :+
0009F3r 3  E6 rr        	inc z80_h
0009F5r 3               :
0009F5r 3  A9 11        	lda #TABSIZ		; bytes to swap.
0009F7r 3  85 rr        	sta z80_b
0009F9r 3  A0 00        	ldy #0
0009FBr 3               swspr0:
0009FBr 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
0009FDr 3  48           	pha
0009FEr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000A00r 3  91 rr        	sta (z80_hl),y 		; copy to second.
000A02r 3  68           	pla
000A03r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000A05r 3               
000A05r 3  E6 rr        	inc z80_e 		; next byte.
000A07r 3  D0 02        	bne :+
000A09r 3  E6 rr        	inc z80_d
000A0Br 3               :
000A0Br 3  E6 rr        	inc z80_l 		; next byte.
000A0Dr 3  D0 02        	bne :+
000A0Fr 3  E6 rr        	inc z80_h
000A11r 3               :
000A11r 3  C6 rr        	dec z80_b
000A13r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000A15r 3  60           	rts
000A16r 3               
000A16r 3               ;----------------------------------------------------
000A16r 3               ; Process sprites.
000A16r 3               ;----------------------------------------------------
000A16r 3               
000A16r 3               pspr:
000A16r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000A18r 3  85 rr        	sta sprptr
000A1Ar 3               
000A1Ar 3  A9 rr        	lda #<sprtab 		; sprite table.
000A1Cr 3  85 rr        	sta z80_x
000A1Er 3  A9 rr        	lda #>sprtab
000A20r 3  85 rr        	sta z80_i
000A22r 3               pspr1:
000A22r 3  A0 00        	ldy #0
000A24r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000A26r 3  C9 09        	cmp #9 			; within range of sprite types?
000A28r 3  B0 03        	bcs :+
000A2Ar 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000A2Dr 3               :
000A2Dr 3  18           	clc
000A2Er 3  A5 rr        	lda z80_x
000A30r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000A32r 3  85 rr        	sta z80_x
000A34r 3  90 02        	bcc :+
000A36r 3  E6 rr        	inc z80_i		; next sprite.
000A38r 3               :
000A38r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000A3Ar 3  D0 E6        	bne pspr1
000A3Cr 3  60           	rts
000A3Dr 3               
000A3Dr 3               pspr2:
000A3Dr 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000A3Fr 3  85 rr        	sta ogptr
000A41r 3  A5 rr        	lda z80_i
000A43r 3  85 rr        	sta ogptr+1
000A45r 3  20 rr rr     	jsr pspr3		; do the routine.
000A48r 3               rtorg:
000A48r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000A4Ar 3  85 rr        	sta z80_x
000A4Cr 3  A5 rr        	lda ogptr+1
000A4Er 3  85 rr        	sta z80_i
000A50r 3               rtorg0:
000A50r 3  60           	rts
000A51r 3               
000A51r 3               pspr3:
000A51r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000A53r 3  85 rr        	sta z80_l
000A55r 3  A9 rr        	lda #>evtyp0
000A57r 3  85 rr        	sta z80_h
000A59r 3               pspr4:
000A59r 3  B1 rr        	lda (z80_ix),y
000A5Br 3  0A           	asl a			; double accumulator.
000A5Cr 3  18           	clc
000A5Dr 3  65 rr        	adc z80_l
000A5Fr 3  85 rr        	sta z80_l
000A61r 3  90 02        	bcc :+
000A63r 3  E6 rr        	inc z80_h
000A65r 3               :
000A65r 3  B1 rr        	lda (z80_hl),y
000A67r 3  85 rr        	sta z80_e 		; copy to de.
000A69r 3  48           	pha
000A6Ar 3               
000A6Ar 3  E6 rr        	inc z80_l 		; next byte of address.
000A6Cr 3  D0 02        	bne :+
000A6Er 3  E6 rr        	inc z80_h
000A70r 3               :
000A70r 3  B1 rr        	lda (z80_hl),y 		; address high.
000A72r 3  85 rr        	sta z80_d
000A74r 3               
000A74r 3  48           	pha	 		; swap address into hl.
000A75r 3  A5 rr        	lda z80_h
000A77r 3  85 rr        	sta z80_d
000A79r 3  68           	pla
000A7Ar 3  85 rr        	sta z80_h
000A7Cr 3  68           	pla
000A7Dr 3  85 rr        	sta z80_l
000A7Fr 3  A5 rr        	lda z80_l
000A81r 3  85 rr        	sta z80_e
000A83r 3               
000A83r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000A86r 3               
000A86r 3               ; Address of each sprite type's routine.
000A86r 3               
000A86r 3  rr rr        evtyp0:	.word evnt00
000A88r 3  rr rr        evtyp1:	.word evnt01
000A8Ar 3  rr rr        evtyp2:	.word evnt02
000A8Cr 3  rr rr        evtyp3:	.word evnt03
000A8Er 3  rr rr        evtyp4:	.word evnt04
000A90r 3  rr rr        evtyp5:	.word evnt05
000A92r 3  rr rr        evtyp6:	.word evnt06
000A94r 3  rr rr        evtyp7:	.word evnt07
000A96r 3  rr rr        evtyp8:	.word evnt08
000A98r 3               
000A98r 3               ;--------------------------------------------------------------
000A98r 3               ; Display sprites.
000A98r 3               ;
000A98r 3               ; Input:
000A98r 3               ;  IX = sprite table
000A98r 3               ;--------------------------------------------------------------
000A98r 3               
000A98r 3               dspr:
000A98r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000A9Ar 3  85 rr        	sta sprcnt
000A9Cr 3               
000A9Cr 3               dspr0:
000A9Cr 3  A0 00        	ldy #var_Type
000A9Er 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000AA0r 3  C9 FF        	cmp #255 		; is it enabled?
000AA2r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000AA4r 3               dspr5:
000AA4r 3  A0 05        	ldy #var_newType
000AA6r 3  B1 rr        	lda (z80_ix),y 		; new type.
000AA8r 3  C9 FF        	cmp #255		; is it enabled?
000AAAr 3  F0 03        	beq dspr2
000AACr 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000AAFr 3               dspr2:
000AAFr 3  A0 05        	ldy #var_newType
000AB1r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000AB3r 3  A0 00        	ldy #var_Type
000AB5r 3  91 rr        	sta (z80_ix),y
000AB7r 3  A0 06        	ldy #var_newImage
000AB9r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000ABBr 3  A0 01        	ldy #var_Image
000ABDr 3  91 rr        	sta (z80_ix),y
000ABFr 3  A0 07        	ldy #var_newFrame
000AC1r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000AC3r 3  A0 02        	ldy #var_Frame
000AC5r 3  91 rr        	sta (z80_ix),y
000AC7r 3  A0 08        	ldy #var_newY
000AC9r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000ACBr 3  A0 03        	ldy #var_Y
000ACDr 3  91 rr        	sta (z80_ix),y
000ACFr 3  A0 09        	ldy #var_newX
000AD1r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000AD3r 3  A0 04        	ldy #var_X
000AD5r 3  91 rr        	sta (z80_ix),y
000AD7r 3               
000AD7r 3  18           	clc
000AD8r 3  A5 rr        	lda z80_x
000ADAr 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000ADCr 3  85 rr        	sta z80_x
000ADEr 3  A5 rr        	lda z80_i
000AE0r 3  69 00        	adc #0
000AE2r 3  85 rr        	sta z80_i 		; next sprite.
000AE4r 3  C6 rr        	dec sprcnt
000AE6r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000AE8r 3  60           	rts
000AE9r 3               
000AE9r 3               dspr1:
000AE9r 3               	; _BEEB clipping code copied from CPC Engine
000AE9r 3  A0 03        	ldy #var_Y
000AEBr 3  B1 rr        	lda (z80_ix), y		; old x coord
000AEDr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AEFr 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000AF1r 3               
000AF1r 3  A0 05        	ldy #var_newType
000AF3r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000AF5r 3  C9 FF        	cmp #255		; is this enabled?
000AF7r 3  D0 06        	bne dspr4 		; yes, display both.
000AF9r 3               
000AF9r 3               dspr6:
000AF9r 3  20 rr rr     	jsr sspria 		; show single sprite.
000AFCr 3  4C rr rr     	jmp dspr2
000AFFr 3               
000AFFr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000AFFr 3               
000AFFr 3               dspr4:
000AFFr 3               	; _BEEB clipping code copied from CPC Engine
000AFFr 3  A0 08        	ldy #var_newY
000B01r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B03r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B05r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000B07r 3               
000B07r 3  A0 04        	ldy #var_X
000B09r 3  B1 rr        	lda (z80_ix),y		; old x.
000B0Br 3  A0 09        	ldy #var_newX
000B0Dr 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000B0Fr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000B11r 3               
000B11r 3  A0 03        	ldy #var_Y
000B13r 3  B1 rr        	lda (z80_ix),y		; old y.
000B15r 3  A0 08        	ldy #var_newY
000B17r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B19r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000B1Br 3               
000B1Br 3  A0 02        	ldy #var_Frame
000B1Dr 3  B1 rr        	lda (z80_ix),y 		; old frame.
000B1Fr 3  A0 07        	ldy #var_newFrame
000B21r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B23r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000B25r 3               
000B25r 3  A0 01        	ldy #var_Image
000B27r 3  B1 rr        	lda (z80_ix),y 		; old image.
000B29r 3  A0 06        	ldy #var_newImage
000B2Br 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B2Dr 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000B2Fr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000B32r 3               dspr7:
000B32r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000B35r 3  4C rr rr     	jmp dspr2
000B38r 3               dspr3:
000B38r 3               	; _BEEB clipping code copied from CPC Engine
000B38r 3  A0 08        	ldy #var_newY
000B3Ar 3  B1 rr        	lda (z80_ix), y		; old x coord
000B3Cr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B3Er 3  90 03        	bcc :+			; no, continue
000B40r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000B43r 3               :
000B43r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000B46r 3  4C rr rr     	jmp dspr2
000B49r 3               
000B49r 3               ;-----------------------------------------
000B49r 3               ; Get sprite address calculations.
000B49r 3               ; gspran = new sprite, gsprad = old sprite.
000B49r 3               ;
000B49r 3               ; Input:
000B49r 3               ;  IX = sprite address
000B49r 3               ;-----------------------------------------
000B49r 3               
000B49r 3               gspran:
000B49r 3  A0 08        	ldy #var_newY
000B4Br 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000B4Dr 3  85 rr        	sta dispy
000B4Fr 3  A0 09        	ldy #var_newX
000B51r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000B53r 3  85 rr        	sta dispx
000B55r 3  A0 06        	ldy #var_newImage
000B57r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000B59r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000B5Cr 3               
000B5Cr 3  A0 00        	ldy #0
000B5Er 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B60r 3  A0 07        	ldy #var_newFrame
000B62r 3  18           	clc
000B63r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000B65r 3  4C rr rr     	jmp gspra0
000B68r 3               
000B68r 3               ;-----------------------------------------
000B68r 3               ; Calculate old sprite address
000B68r 3               ;
000B68r 3               ; Input:
000B68r 3               ;  IX = sprite address
000B68r 3               ;
000B68r 3               ; Output:
000B68r 3               ;  B  = right byte mask
000B68r 3               ;  C  = left byte mask
000B68r 3               ;  DE = spriteframe address
000B68r 3               ;  scraddr = screenaddress(dispx,dispy)
000B68r 3               ;-----------------------------------------
000B68r 3               
000B68r 3               gsprad:
000B68r 3  A0 03        	ldy #var_Y
000B6Ar 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B6Cr 3  85 rr        	sta dispy
000B6Er 3  A0 04        	ldy #var_X
000B70r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B72r 3  85 rr        	sta dispx
000B74r 3  A0 01        	ldy #var_Image
000B76r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000B78r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000B7Br 3               
000B7Br 3  A0 00        	ldy #0
000B7Dr 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B7Fr 3  A0 02        	ldy #var_Frame
000B81r 3  18           	clc
000B82r 3  71 rr        	adc (z80_ix),y 		; add frame number.
000B84r 3               
000B84r 3               gspra0:
000B84r 3               .if rflag
000B84r 3               	sta z80_e		; multiply by 32.
000B84r 3               	lda #0
000B84r 3               	sta z80_d
000B84r 3               
000B84r 3               	asl z80_e
000B84r 3               	rol z80_d
000B84r 3               	asl z80_e
000B84r 3               	rol z80_d
000B84r 3               	asl z80_e
000B84r 3               	rol z80_d
000B84r 3               	asl z80_e
000B84r 3               	rol z80_d
000B84r 3               .if bflag
000B84r 3               	lda z80_e		; multiply by 48
000B84r 3               	sta tmp1
000B84r 3               	lda z80_d
000B84r 3               	sta tmp2
000B84r 3               .endif
000B84r 3               	asl z80_e
000B84r 3               	rol z80_d
000B84r 3               .if bflag
000B84r 3               	clc
000B84r 3               	lda z80_e
000B84r 3               	adc tmp1
000B84r 3               	sta z80_e
000B84r 3               	lda z80_d
000B84r 3               	adc tmp2
000B84r 3               	sta z80_d
000B84r 3               .endif
000B84r 3               .else
000B84r 3  4A           	lsr a	  		; multiply by 128.
000B85r 3  85 rr        	sta z80_d 		; store in d.
000B87r 3  85 rr        	sta tmp1
000B89r 3  A9 00        	lda #0
000B8Br 3  6A           	ror a
000B8Cr 3  85 rr        	sta z80_e 		; got low byte.
000B8Er 3  85 rr        	sta tmp2
000B90r 3               .if bflag
000B90r 3               	lsr tmp1		; multiply by 192
000B90r 3               	ror tmp2
000B90r 3               	clc
000B90r 3               	lda tmp2
000B90r 3               	adc z80_e
000B90r 3               	sta z80_e
000B90r 3               	lda tmp1
000B90r 3               	adc z80_d
000B90r 3               	sta z80_d
000B90r 3               .endif
000B90r 3               .endif
000B90r 3  18           	clc 			; address of play sprites.
000B91r 3  A5 rr        	lda z80_e
000B93r 3  69 rr        	adc #<sprgfx
000B95r 3  85 rr        	sta z80_e
000B97r 3  A5 rr        	lda z80_d
000B99r 3  69 rr        	adc #>sprgfx
000B9Br 3  85 rr        	sta z80_d
000B9Dr 3               
000B9Dr 3  A5 rr        	lda dispx 		; y coordinate.
000B9Fr 3  29 06        	and #6 			; position within byte boundary.
000BA1r 3  AA           	tax	 		; low byte of table displacement.
000BA2r 3               .if rflag
000BA2r 3               	stx sprshft
000BA2r 3               .else
000BA2r 3  0A           	asl a	  		; multiply by 32.
000BA3r 3  0A           	asl a  			; already a multiple
000BA4r 3  0A           	asl a  			; of 2, so just 4
000BA5r 3               .if bflag
000BA5r 3               	sta tmp1
000BA5r 3               	asl a  			; shifts needed.
000BA5r 3               	clc
000BA5r 3               	adc tmp1
000BA5r 3               .else
000BA5r 3  0A           	asl a  			; shifts needed.
000BA6r 3               .endif
000BA6r 3  18           	clc 			; add to sprite address.
000BA7r 3  65 rr        	adc z80_e
000BA9r 3  85 rr        	sta z80_e
000BABr 3  90 02        	bcc :+
000BADr 3  E6 rr        	inc z80_d
000BAFr 3               :
000BAFr 3               .endif
000BAFr 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000BB2r 3  85 rr        	sta z80_c 		; left mask.
000BB4r 3  BD rr rr     	lda spmask+1,x
000BB7r 3  85 rr        	sta z80_b 		; right mask.
000BB9r 3               ; Drop into screen address routine.
000BB9r 3  4C rr rr     	jmp scadd
000BBCr 3               
000BBCr 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000BC0r 3  0F F0 03 FC  
000BC4r 3               
000BC4r 3               
000BC4r 3               ;-----------------------------------------------------------
000BC4r 3               ; Animates a sprite.
000BC4r 3               ;
000BC4r 3               ; Input:
000BC4r 3               ;  IX = sprite address
000BC4r 3               ;  HL = last sprite address
000BC4r 3               ;-----------------------------------------------------------
000BC4r 3               
000BC4r 3               animsp:
000BC4r 3  25 rr        	and frmno
000BC6r 3  F0 01        	beq :+
000BC8r 3  60           	rts
000BC9r 3               :
000BC9r 3  A0 06        	ldy #var_newImage
000BCBr 3  B1 rr        	lda (z80_ix),y		; sprite image
000BCDr 3  20 rr rr     	jsr gfrm		; get frame data.
000BD0r 3               
000BD0r 3  E6 rr        	inc z80_l		; point to frames.
000BD2r 3  D0 02        	bne :+
000BD4r 3  E6 rr        	inc z80_h
000BD6r 3               :
000BD6r 3  A0 07        	ldy #var_newFrame
000BD8r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000BDAr 3  18           	clc
000BDBr 3  69 01        	adc #1			; next one along.
000BDDr 3  A0 00        	ldy #0
000BDFr 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000BE1r 3  90 02        	bcc anims0		; no, not yet.
000BE3r 3  A9 00        	lda #0			; start at first frame.
000BE5r 3               anims0:
000BE5r 3  A0 07        	ldy #var_newFrame
000BE7r 3  91 rr        	sta (z80_ix),y		; new frame.
000BE9r 3  60           	rts
000BEAr 3               
000BEAr 3               ;--------------------------------------------------------------
000BEAr 3               ; Animate back
000BEAr 3               ;
000BEAr 3               ; Input:
000BEAr 3               ;  IX = sprite address
000BEAr 3               ;  HL = last sprite address
000BEAr 3               ;--------------------------------------------------------------
000BEAr 3               
000BEAr 3               animbk:
000BEAr 3  25 rr        	and frmno
000BECr 3  F0 01        	beq :+
000BEEr 3  60           	rts
000BEFr 3               :
000BEFr 3  A0 06        	ldy #var_newImage
000BF1r 3  B1 rr        	lda (z80_ix),y		; sprite image.
000BF3r 3  20 rr rr     	jsr gfrm		; get frame data.
000BF6r 3               
000BF6r 3  E6 rr        	inc z80_l 		; point to frames.
000BF8r 3  D0 02        	bne :+
000BFAr 3  E6 rr        	inc z80_h
000BFCr 3               :
000BFCr 3  A0 07        	ldy #var_newFrame
000BFEr 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000C00r 3  F0 03        	beq :+
000C02r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000C05r 3               :
000C05r 3  A0 00        	ldy #0
000C07r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000C09r 3               rtanb0:
000C09r 3  38           	sec
000C0Ar 3  E9 01        	sbc #1			; next one along.
000C0Cr 3  4C rr rr     	jmp anims0		; set new frame.
000C0Fr 3               
000C0Fr 3               ;--------------------------------------------------------------
000C0Fr 3               ; Check for collision with other sprite, strict enforcement.
000C0Fr 3               ;
000C0Fr 3               ; Input:
000C0Fr 3               ;  b		= sprite to test for
000C0Fr 3               ;  ix		= current sprite pointer
000C0Fr 3               ;
000C0Fr 3               ; global:	b
000C0Fr 3               ; local:	x,y,hl,de,skptr
000C0Fr 3               ; calls:	-
000C0Fr 3               ;--------------------------------------------------------------
000C0Fr 3               
000C0Fr 3               sktyp:
000C0Fr 3  A9 rr        	lda #<sprtab				; sprite table.
000C11r 3  85 rr        	sta z80_l
000C13r 3  A9 rr        	lda #>sprtab
000C15r 3  85 rr        	sta z80_h
000C17r 3               numsp2:
000C17r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000C19r 3  85 rr        	sta sktptr
000C1Br 3               sktyp0:
000C1Br 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000C1Dr 3  85 rr        	sta skptr
000C1Fr 3  A5 rr        	lda z80_h
000C21r 3  85 rr        	sta skptr+1
000C23r 3               
000C23r 3  A0 00        	ldy #0
000C25r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000C27r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000C29r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000C2Br 3               sktyp1:
000C2Br 3  18           	clc
000C2Cr 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000C2Er 3  69 11        	adc #TABSIZ				; size of each entry.
000C30r 3  85 rr        	sta z80_l
000C32r 3  A5 rr        	lda skptr+1
000C34r 3  69 00        	adc #0
000C36r 3  85 rr        	sta z80_h
000C38r 3  C6 rr        	dec sktptr					; one less iteration.
000C3Ar 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000C3Cr 3  A9 00        	lda #0					; default to ROM address - no sprite.
000C3Er 3  85 rr        	sta z80_l
000C40r 3  85 rr        	sta z80_h
000C42r 3  85 rr        	sta skptr				; store pointer to sprite.
000C44r 3  85 rr        	sta skptr+1
000C46r 3               
000C46r 3  18           	clc					; don't return with zero flag set.
000C47r 3  60           	rts 					; didn't find one.
000C48r 3               
000C48r 3               coltyp:
000C48r 3  A0 00        	ldy #0
000C4Ar 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000C4Cr 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000C4Er 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000C50r 3               colty0:
000C50r 3  A0 09        	ldy #9					; distance to x position in table.
000C52r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000C54r 3  85 rr        	sta z80_e
000C56r 3  88           	dey
000C57r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000C59r 3  85 rr        	sta z80_d
000C5Br 3               
000C5Br 3               ; Drop into collision detection.
000C5Br 3               
000C5Br 3               colc16:
000C5Br 3  A0 09        	ldy #9
000C5Dr 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000C5Fr 3  38           	sec					; subtract x.
000C60r 3  E5 rr        	sbc z80_e
000C62r 3  B0 05        	bcs  colc1a 				; result is positive.
000C64r 3  49 FF        	eor #$ff				; make negative positive.
000C66r 3  18           	clc
000C67r 3  69 01        	adc #1
000C69r 3               colc1a:
000C69r 3  C9 10        	cmp #16 				; within x range?
000C6Br 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000C6Dr 3  85 rr        	sta z80_c				; store difference.
000C6Fr 3               
000C6Fr 3  A0 08        	ldy #8
000C71r 3  B1 rr        	lda (z80_ix),y				; y coord.
000C73r 3  38           	sec
000C74r 3  E5 rr        	sbc z80_d				; subtract y.
000C76r 3  B0 05        	bcs colc1b				; result is positive.
000C78r 3  49 FF        	eor #$ff				; make negative positive.
000C7Ar 3  18           	clc
000C7Br 3  69 01        	adc #1
000C7Dr 3               colc1b:
000C7Dr 3  C9 10        	cmp #16					; within y range?
000C7Fr 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000C81r 3  18           	clc					; add x difference.
000C82r 3  65 rr        	adc z80_c
000C84r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000C86r 3  B0 02        	bcs :+
000C88r 3  38           	sec
000C89r 3  60           	rts 					; carry set if there's a collision.
000C8Ar 3               :
000C8Ar 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000C8Dr 3               colty1:
000C8Dr 3  A5 rr        	lda z80_x  				; compare the two.
000C8Fr 3  C5 rr        	cmp z80_l
000C91r 3  D0 09        	bne end_col
000C93r 3  A5 rr        	lda z80_i
000C95r 3  C5 rr        	cmp z80_h
000C97r 3  D0 03        	bne end_col
000C99r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000C9Cr 3               end_col:
000C9Cr 3  4C rr rr     	jmp colty0
000C9Fr 3               
000C9Fr 3               ;-----------------------------------------------------------
000C9Fr 3               ; Display number, left aligned
000C9Fr 3               ;
000C9Fr 3               ; Input:
000C9Fr 3               ;  a		= number
000C9Fr 3               ;
000C9Fr 3               ; global:	-
000C9Fr 3               ; local:	a,y,bc,hl,displ0
000C9Fr 3               ; calls:	num2ch,dmsg3
000C9Fr 3               ;-----------------------------------------------------------
000C9Fr 3               
000C9Fr 3               disply:
000C9Fr 3  85 rr        	sta z80_a
000CA1r 3  A9 rr        	lda #<displ0				; display workspace.
000CA3r 3  85 rr        	sta z80_c
000CA5r 3  A9 rr        	lda #>displ0
000CA7r 3  85 rr        	sta z80_b
000CA9r 3  A5 rr        	lda z80_a
000CABr 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000CAEr 3               displ1:
000CAEr 3  C6 rr        	dec z80_c				; back one character.
000CB0r 3  A5 rr        	lda z80_c
000CB2r 3  C9 FF        	cmp #$ff
000CB4r 3  D0 02        	bne :+
000CB6r 3  C6 rr        	dec z80_b
000CB8r 3               :
000CB8r 3  A0 00        	ldy #0
000CBAr 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000CBCr 3  09 80        	ora #128				; insert end marker.
000CBEr 3  91 rr        	sta (z80_bc),y				; new value.
000CC0r 3               
000CC0r 3  A9 rr        	lda #<displ0				; display space.
000CC2r 3  85 rr        	sta z80_l
000CC4r 3  A9 rr        	lda #>displ0
000CC6r 3  85 rr        	sta z80_h
000CC8r 3  4C rr rr     	jmp dmsg3				; display the string.
000CCBr 3               
000CCBr 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000CCFr 3               
000CCFr 3               ;----------------------------------------------------------------
000CCFr 3               ; Initialise screen.
000CCFr 3               ;
000CCFr 3               ; global:	roomtb,scno
000CCFr 3               ; local:	-
000CCFr 3               ; calls:	tstcs
000CCFr 3               ;----------------------------------------------------------------
000CCFr 3               
000CCFr 3               initsc:
000CCFr 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000CD2r 3  20 rr rr     	jsr tstsc 			; find displacement.
000CD5r 3  C9 FF        	cmp #255 			; is it valid?
000CD7r 3  F0 02        	beq init_end 			; no, it's rubbish.
000CD9r 3  85 rr        	sta scno			; store new room number.
000CDBr 3               init_end:
000CDBr 3  60           	rts
000CDCr 3               
000CDCr 3               ;----------------------------------------------------------------
000CDCr 3               ; Test screen.
000CDCr 3               ;
000CDCr 3               ; global:	-
000CDCr 3               ; local:	x
000CDCr 3               ; calls:	-
000CDCr 3               ;----------------------------------------------------------------
000CDCr 3               
000CDCr 3               tstsc:
000CDCr 3  85 rr        	sta tmproom
000CDEr 3  18           	clc
000CDFr 3  69 04        	adc #MAPWID 			; add width in case we"re negative.
000CE1r 3  AA           	tax 				; add displacement to map data.
000CE2r 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000CE5r 3  60           	rts
000CE6r 3               
000CE6r 3               ;--------------------------
000CE6r 3               ; Screen left.
000CE6r 3               ;--------------------------
000CE6r 3               
000CE6r 3               scrl:
000CE6r 3  AD rr rr     	lda roomtb 			; present room table pointer.
000CE9r 3  38           	sec
000CEAr 3  E9 01        	sbc #1				; room left.
000CECr 3               scrl0:
000CECr 3  20 rr rr     	jsr tstsc			; test screen.
000CEFr 3  C9 FF        	cmp #255			; is there a screen this way?
000CF1r 3  D0 01        	bne :+
000CF3r 3  60           	rts				; no, return to loop.
000CF4r 3               :
000CF4r 3  A5 rr        	lda tmproom			; restore room displacement.
000CF6r 3  8D rr rr     	sta roomtb			; new room table position.
000CF9r 3               scrl1:
000CF9r 3  20 rr rr     	jsr initsc 			; set new screen.
000CFCr 3  A9 02        	lda #2
000CFEr 3  85 rr        	sta restfl 			; set it.
000D00r 3  60           	rts
000D01r 3               scrr:
000D01r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D04r 3  18           	clc
000D05r 3  69 01        	adc #1				; room right.
000D07r 3  4C rr rr     	jmp scrl0
000D0Ar 3               scru:
000D0Ar 3  AD rr rr     	lda roomtb 			; room table pointer.
000D0Dr 3  38           	sec
000D0Er 3  E9 04        	sbc #MAPWID 			; room up.
000D10r 3  4C rr rr     	jmp scrl0
000D13r 3               scrd:
000D13r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D16r 3  18           	clc
000D17r 3  69 04        	adc #MAPWID 			; room down.
000D19r 3  4C rr rr     	jmp scrl0
000D1Cr 3               
000D1Cr 3               ;-----------------------------------------
000D1Cr 3               ; Jump to new screen.
000D1Cr 3               ;-----------------------------------------
000D1Cr 3               
000D1Cr 3               nwscr:
000D1Cr 3  A2 00        	ldx #0				; start of map data.
000D1Er 3               nwscr0:
000D1Er 3  DD rr rr     	cmp mapdat,x
000D21r 3  F0 06        	beq nwscr1			; have we found a match for screen?
000D23r 3  E8           	inx 				; next room.
000D24r 3  E0 50        	cpx #80				; zero room count, 80 to search.
000D26r 3  D0 F6        	bne nwscr0			; keep looking.
000D28r 3  60           	rts
000D29r 3               nwscr1:
000D29r 3  8E rr rr     	stx roomtb			; set the map position.
000D2Cr 3  4C rr rr     	jmp scrl1			; draw new room.
000D2Fr 3               
000D2Fr 3               
000D2Fr 3               ;----------------------------------------------------------
000D2Fr 3               ; Gravity processing.
000D2Fr 3               ;----------------------------------------------------------
000D2Fr 3               
000D2Fr 3               grav:
000D2Fr 3  A0 0D        	ldy #13
000D31r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D33r 3  85 rr        	sta z80_l
000D35r 3  A0 0E        	ldy #14
000D37r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D39r 3  85 rr        	sta z80_h
000D3Br 3  05 rr        	ora z80_l			; merge in low byte.
000D3Dr 3  D0 01        	bne :+
000D3Fr 3  60           	rts				; if neither is set, we're not in the air.
000D40r 3               :
000D40r 3  A0 00        	ldy #0
000D42r 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000D44r 3  85 rr        	sta z80_a
000D46r 3  C9 63        	cmp #99				; reached the end?
000D48r 3  D0 0C        	bne grav0			; no, continue.
000D4Ar 3               grav2:
000D4Ar 3  C6 rr        	dec z80_l			; go back to previous value.
000D4Cr 3  C9 FF        	cmp #$ff
000D4Er 3  D0 02        	bne :+
000D50r 3  C6 rr        	dec z80_h
000D52r 3               :
000D52r 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000D54r 3  85 rr        	sta z80_a
000D56r 3               grav0:
000D56r 3  E6 rr        	inc z80_l			; point to next table entry.
000D58r 3  D0 02        	bne :+
000D5Ar 3  E6 rr        	inc z80_h
000D5Cr 3               :
000D5Cr 3  A5 rr        	lda z80_l
000D5Er 3  A0 0D        	ldy #13
000D60r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000D62r 3  A5 rr        	lda z80_h
000D64r 3  A0 0E        	ldy #14
000D66r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000D68r 3               grav1:
000D68r 3  A5 rr        	lda z80_a
000D6Ar 3  D0 01        	bne :+				; any movement required?
000D6Cr 3  60           	rts				; no, not this time.
000D6Dr 3               :
000D6Dr 3  A5 rr        	lda z80_a
000D6Fr 3  C9 80        	cmp #128			; is it up or down?
000D71r 3  B0 15        	bcs gravu			; it's up.
000D73r 3               gravd:
000D73r 3  85 rr        	sta z80_b			; set pixels to move.
000D75r 3               gravd0:
000D75r 3  20 rr rr     	jsr cangd			; can we go down?
000D78r 3  D0 28        	bne gravst			; can't move down, so stop.
000D7Ar 3  A0 08        	ldy #8
000D7Cr 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000D7Er 3  18           	clc
000D7Fr 3  69 01        	adc #1
000D81r 3  91 rr        	sta (z80_ix),y
000D83r 3  C6 rr        	dec z80_b
000D85r 3  D0 EE        	bne gravd0
000D87r 3  60           	rts
000D88r 3               gravu:
000D88r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000D8Ar 3  18           	clc
000D8Br 3  69 01        	adc #1
000D8Dr 3  85 rr        	sta z80_b			; set pixels to move.
000D8Fr 3               gravu0:
000D8Fr 3  20 rr rr     	jsr cangu			; can we go up?
000D92r 3  D0 6E        	bne ifalls			; can't move up, go down next.
000D94r 3  A0 08        	ldy #8
000D96r 3  B1 rr        	lda (z80_ix),y
000D98r 3  38           	sec
000D99r 3  E9 01        	sbc #1
000D9Br 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000D9Dr 3  C6 rr        	dec z80_b
000D9Fr 3  D0 EE        	bne gravu0
000DA1r 3  60           	rts
000DA2r 3               gravst:
000DA2r 3  A0 0D        	ldy #var_jumpLo
000DA4r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000DA6r 3  85 rr        	sta z80_l
000DA8r 3  A0 0E        	ldy #var_jumpHi
000DAAr 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000DACr 3  85 rr        	sta z80_h
000DAEr 3               
000DAEr 3  A9 00        	lda #0				; null value in pointer.
000DB0r 3  A0 0D        	ldy #var_jumpLo
000DB2r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000DB4r 3  C8           	iny
000DB5r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000DB7r 3               
000DB7r 3  A0 00        	ldy #0
000DB9r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000DBBr 3  C9 63        	cmp #99				; is it the end marker?
000DBDr 3               evftf:
000DBDr 3  F0 01        	beq :+				; yes, fallen too far.
000DBFr 3  60           	rts
000DC0r 3               :
000DC0r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000DC3r 3               
000DC3r 3               ;------------------------------------------------
000DC3r 3               ; Initiate fall check.
000DC3r 3               ;------------------------------------------------
000DC3r 3               
000DC3r 3               ifall:
000DC3r 3  A0 0D        	ldy #var_jumpLo
000DC5r 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000DC7r 3  85 rr        	sta z80_l
000DC9r 3  A0 0E        	ldy #var_jumpHi
000DCBr 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000DCDr 3  85 rr        	sta z80_h			; high byte in accumulator.
000DCFr 3  05 rr        	ora z80_l			; merge in low byte.
000DD1r 3  F0 01        	beq :+
000DD3r 3  60           	rts				; if either is set, we're already in the air.
000DD4r 3               :
000DD4r 3  A0 09        	ldy #9
000DD6r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000DD8r 3  85 rr        	sta dispx
000DDAr 3  A0 08        	ldy #8
000DDCr 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000DDEr 3  18           	clc
000DDFr 3               numsp7:
000DDFr 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000DE1r 3  85 rr        	sta dispy			; set up test coordinates.
000DE3r 3  20 rr rr     	jsr tstbl			; get map address.
000DE6r 3  20 rr rr     	jsr plchk			; block, platform check.
000DE9r 3  F0 01        	beq :+
000DEBr 3  60           	rts				; it's solid, don't fall.
000DECr 3               :
000DECr 3  E6 rr        	inc bufaddr			; look right one cell.
000DEEr 3  20 rr rr     	jsr plchk			; block, platform check.
000DF1r 3  F0 01        	beq :+
000DF3r 3  60           	rts				; it's solid, don't fall.
000DF4r 3               :
000DF4r 3  A5 rr        	lda dispx			; y coordinate.
000DF6r 3  29 07        	and #7				; position straddling block cells.
000DF8r 3  F0 08        	beq ifalls			; no more checks needed.
000DFAr 3  E6 rr        	inc bufaddr			; look to third cell.
000DFCr 3  20 rr rr     	jsr plchk			; block, platform check.
000DFFr 3  F0 01        	beq :+
000E01r 3  60           	rts				; it's solid, don't fall.
000E02r 3               :
000E02r 3               ifalls:
000E02r 3  A9 rr        	lda #<jtab			; jump table start.
000E04r 3  85 rr        	sta z80_l
000E06r 3  A9 rr        	lda #>jtab
000E08r 3  85 rr        	sta z80_h
000E0Ar 3               ifal0:
000E0Ar 3  E6 rr        	inc z80_l			; point to next value.
000E0Cr 3  D0 02        	bne :+
000E0Er 3  E6 rr        	inc z80_h
000E10r 3               :
000E10r 3  A0 00        	ldy #0
000E12r 3  B1 rr        	lda (z80_hl),y			; fetch value.
000E14r 3  F0 F4        	beq ifal0			; no, get next value.
000E16r 3  C9 63        	cmp #99				; reached end of table?
000E18r 3  D0 01        	bne :+
000E1Ar 3  60           	rts				; yes, don't fall.
000E1Br 3               :
000E1Br 3  C9 80        	cmp #128			; is it going up?
000E1Dr 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000E1Fr 3               
000E1Fr 3  A0 0D        	ldy #13
000E21r 3  A5 rr        	lda z80_l
000E23r 3  91 rr        	sta (z80_ix),y 			; set jump low.
000E25r 3  A0 0E        	ldy #14
000E27r 3  A5 rr        	lda z80_h
000E29r 3  91 rr        	sta (z80_ix),y 			; set jump high.
000E2Br 3  60           	rts
000E2Cr 3               
000E2Cr 3               
000E2Cr 3               ;----------------------------------------------------
000E2Cr 3               ; Get frame data for a particular sprite.
000E2Cr 3               ; Input:
000E2Cr 3               ;  a		= framenumer
000E2Cr 3               ; Output:
000E2Cr 3               ;  hl		= frame address
000E2Cr 3               ;
000E2Cr 3               ; global:	hl,frmptr
000E2Cr 3               ; local:	-
000E2Cr 3               ; calls:	-
000E2Cr 3               ;----------------------------------------------------
000E2Cr 3               
000E2Cr 3               gfrm:
000E2Cr 3  0A           	asl a	 		 	; multiple of 2.
000E2Dr 3  18           	clc
000E2Er 3  6D rr rr     	adc frmptr 			; frames used by game.
000E31r 3  85 rr        	sta z80_l
000E33r 3  AD rr rr     	lda frmptr+1
000E36r 3  69 00        	adc #0
000E38r 3  85 rr        	sta z80_h 			; point to frame start.
000E3Ar 3  60           	rts
000E3Br 3               
000E3Br 3               ;----------------------------------------------------
000E3Br 3               ; Find sprite list for current room.
000E3Br 3               ;
000E3Br 3               ; global:	hl
000E3Br 3               ; local:	x,y
000E3Br 3               ; calls:	-
000E3Br 3               ;----------------------------------------------------
000E3Br 3               
000E3Br 3               sprlst:
000E3Br 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000E3Dr 3  85 rr        	sta z80_l
000E3Fr 3  A9 rr        	lda #>nmedat
000E41r 3  85 rr        	sta z80_h
000E43r 3  A6 rr        	ldx scno 			; screen number.
000E45r 3  D0 01        	bne sprls2 			; is it the first screen?
000E47r 3  60           	rts 				; yes, don't need to search data.
000E48r 3               sprls2:
000E48r 3  A0 00        	ldy #0
000E4Ar 3               sprls1:
000E4Ar 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000E4Cr 3  C9 FF        	cmp #255			; is it an end marker?
000E4Er 3  F0 0E        	beq sprls0 			; yes, end of this room.
000E50r 3               
000E50r 3  18           	clc 				; point to next sprite in list.
000E51r 3  A5 rr        	lda z80_l
000E53r 3  69 04        	adc #NMESIZ
000E55r 3  85 rr        	sta z80_l
000E57r 3  90 02        	bcc :+
000E59r 3  E6 rr        	inc z80_h
000E5Br 3               :
000E5Br 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000E5Er 3               sprls0:
000E5Er 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000E60r 3  D0 02        	bne :+
000E62r 3  E6 rr        	inc z80_h
000E64r 3               :
000E64r 3  CA           	dex
000E65r 3  D0 E3        	bne sprls1 			; continue until room found.
000E67r 3  60           	rts
000E68r 3               
000E68r 3               
000E68r 3               ;----------------------------------------------------
000E68r 3               ; Clear all but a single player sprite.
000E68r 3               ;
000E68r 3               ; global:	-
000E68r 3               ; local:	x,y,ix
000E68r 3               ; calls:	-
000E68r 3               ;----------------------------------------------------
000E68r 3               
000E68r 3               nspr:
000E68r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E6Ar 3  85 rr        	sta sprcnt
000E6Cr 3  A9 rr        	lda #<sprtab 			; sprite table.
000E6Er 3  85 rr        	sta z80_x
000E70r 3  A9 rr        	lda #>sprtab
000E72r 3  85 rr        	sta z80_i
000E74r 3               nspr0:
000E74r 3  A0 00        	ldy #0 				; fetch sprite type.
000E76r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000E78r 3  F0 1A        	beq nspr1 			; yes, keep this one.
000E7Ar 3               
000E7Ar 3  A9 FF        	lda #255
000E7Cr 3  A0 00        	ldy #0 				; fetch sprite type.
000E7Er 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E80r 3  A0 05        	ldy #5
000E82r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000E84r 3               
000E84r 3  18           	clc	 			; next sprite.
000E85r 3  A5 rr        	lda z80_x
000E87r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E89r 3  85 rr        	sta z80_x
000E8Br 3  90 02        	bcc :+
000E8Dr 3  E6 rr        	inc z80_i
000E8Fr 3               :
000E8Fr 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000E91r 3  D0 E1        	bne nspr0
000E93r 3  60           	rts
000E94r 3               nspr1:
000E94r 3  A9 FF        	lda #255
000E96r 3  A0 00        	ldy #0
000E98r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E9Ar 3               
000E9Ar 3  18           	clc	 			; point to next sprite.
000E9Br 3  A5 rr        	lda z80_x
000E9Dr 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000E9Fr 3  85 rr        	sta z80_x
000EA1r 3  90 02        	bcc :+
000EA3r 3  E6 rr        	inc z80_i
000EA5r 3               :
000EA5r 3  C6 rr        	dec sprcnt	 			; one less to do.
000EA7r 3  D0 01        	bne nspr2
000EA9r 3  60           	rts
000EAAr 3               nspr2:
000EAAr 3  A9 FF        	lda #255
000EACr 3  A0 00        	ldy #0
000EAEr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EB0r 3  A0 05        	ldy #5
000EB2r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000EB4r 3               
000EB4r 3  18           	clc	 			; next sprite.
000EB5r 3  A5 rr        	lda z80_x
000EB7r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
000EB9r 3  85 rr        	sta z80_x
000EBBr 3  90 02        	bcc :+
000EBDr 3  E6 rr        	inc z80_i
000EBFr 3               :
000EBFr 3  C6 rr        	dec sprcnt	 			; one less space in table.
000EC1r 3  D0 E7        	bne nspr2
000EC3r 3  60           	rts
000EC4r 3               
000EC4r 3               ;----------------------------------------------------------
000EC4r 3               ; Two initialisation routines.
000EC4r 3               ; Initialise sprites - copy everything from list to table.
000EC4r 3               ;
000EC4r 3               ; global:	-
000EC4r 3               ; local:	x,y,ix
000EC4r 3               ; calls:	cpsp
000EC4r 3               ;----------------------------------------------------------
000EC4r 3               
000EC4r 3               ispr:
000EC4r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000EC6r 3  85 rr        	sta sprcnt
000EC8r 3  A9 rr        	lda #<sprtab			; sprite table.
000ECAr 3  85 rr        	sta z80_x
000ECCr 3  A9 rr        	lda #>sprtab
000ECEr 3  85 rr        	sta z80_i
000ED0r 3               ispr2:
000ED0r 3  A0 00        	ldy #0
000ED2r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000ED4r 3  C9 FF        	cmp #255 			; is it an end marker?
000ED6r 3  D0 01        	bne :+
000ED8r 3  60           	rts 				; yes, no more to do.
000ED9r 3               :
000ED9r 3               ispr1:
000ED9r 3  A0 00        	ldy #0
000EDBr 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000EDDr 3  C9 FF        	cmp #255 			; is it enabled yet?
000EDFr 3  D0 08        	bne ispr4			; yes, try another slot.
000EE1r 3               
000EE1r 3  A0 05        	ldy #5
000EE3r 3  B1 rr        	lda (z80_ix),y		 	; next type.
000EE5r 3  C9 FF        	cmp #255 			; is it enabled yet?
000EE7r 3  F0 10        	beq ispr3 			; no, process this one.
000EE9r 3               ispr4:
000EE9r 3  18           	clc 				; next sprite.
000EEAr 3  A5 rr        	lda z80_x
000EECr 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000EEEr 3  85 rr        	sta z80_x
000EF0r 3  90 02        	bcc :+
000EF2r 3  E6 rr        	inc z80_i
000EF4r 3               :
000EF4r 3  C6 rr        	dec sprcnt
000EF6r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000EF8r 3  60           	rts  				; no more room in table.
000EF9r 3               ispr3:
000EF9r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000EFCr 3  C6 rr        	dec sprcnt			; one less space in the table.
000EFEr 3  D0 D0        	bne ispr2
000F00r 3  60           	rts
000F01r 3               
000F01r 3               
000F01r 3               ;-----------------------------------------------------------------------
000F01r 3               ; Initialise sprites - but not player, we're keeping the old one.
000F01r 3               ;
000F01r 3               ; global:	-
000F01r 3               ; local:	x,y,ix
000F01r 3               ; calls:	cpsp
000F01r 3               ;-----------------------------------------------------------------------
000F01r 3               
000F01r 3               kspr:
000F01r 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000F03r 3  A9 rr        	lda #<sprtab 			; sprite table.
000F05r 3  85 rr        	sta z80_x
000F07r 3  A9 rr        	lda #>sprtab
000F09r 3  85 rr        	sta z80_i
000F0Br 3               kspr2:
000F0Br 3  A0 00        	ldy #0
000F0Dr 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F0Fr 3  C9 FF        	cmp #255 			; is it an end marker?
000F11r 3  D0 01        	bne :+
000F13r 3  60           	rts 				; yes, no more to do.
000F14r 3               :
000F14r 3  C9 00        	cmp #0
000F16r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000F18r 3               
000F18r 3  18           	clc 				; next sprite.
000F19r 3  A5 rr        	lda z80_l
000F1Br 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000F1Dr 3  85 rr        	sta z80_l
000F1Fr 3  90 02        	bcc :+
000F21r 3  E6 rr        	inc z80_h
000F23r 3               :
000F23r 3  4C rr rr     	jmp kspr2
000F26r 3               kspr1:
000F26r 3  A0 00        	ldy #0 				; fetch sprite type.
000F28r 3  B1 rr        	lda (z80_ix),y
000F2Ar 3  C9 FF        	cmp #255 			; is it enabled yet?
000F2Cr 3  D0 08        	bne kspr4 			; yes, try another slot.
000F2Er 3               
000F2Er 3  A0 05        	ldy #5 				; next type.
000F30r 3  B1 rr        	lda (z80_ix),y
000F32r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F34r 3  F0 0F        	beq kspr3 			; no, process this one.
000F36r 3               kspr4:
000F36r 3  18           	clc 				; next sprite.
000F37r 3  A5 rr        	lda z80_x
000F39r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
000F3Br 3  85 rr        	sta z80_x
000F3Dr 3  90 02        	bcc :+
000F3Fr 3  E6 rr        	inc z80_i
000F41r 3               :
000F41r 3  CA           	dex	 			; repeat for remaining sprites.
000F42r 3  D0 E2        	bne kspr1
000F44r 3  60           	rts  				; no more room in table.
000F45r 3               kspr3:
000F45r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000F48r 3  CA           	dex	 			; one less space in the table.
000F49r 3  D0 C0        	bne kspr2
000F4Br 3  60           	rts
000F4Cr 3               
000F4Cr 3               ;----------------------------------------------
000F4Cr 3               ; Copy sprite from list to table.
000F4Cr 3               ;
000F4Cr 3               ; global:	hl,ix
000F4Cr 3               ; local:	y
000F4Cr 3               ; calls:	evnt09
000F4Cr 3               ;----------------------------------------------
000F4Cr 3               
000F4Cr 3               cpsp:
000F4Cr 3  A0 00        	ldy #0					; fetch byte from table.
000F4Er 3  B1 rr        	lda (z80_hl),y
000F50r 3               	; y=var_Type
000F50r 3  91 rr        	sta (z80_ix),y			; set up type.
000F52r 3  A0 05        	ldy #var_newType
000F54r 3  91 rr        	sta (z80_ix),y 			; set up type.
000F56r 3               
000F56r 3  E6 rr        	inc z80_l 				; move to next byte.
000F58r 3  D0 02        	bne :+
000F5Ar 3  E6 rr        	inc z80_h
000F5Cr 3               :
000F5Cr 3  A0 00        	ldy #0 					; fetch byte from table.
000F5Er 3  B1 rr        	lda (z80_hl),y
000F60r 3  A0 06        	ldy #var_newImage
000F62r 3  91 rr        	sta (z80_ix),y			; set up image.
000F64r 3               
000F64r 3  E6 rr        	inc z80_l 				; move to next byte.
000F66r 3  D0 02        	bne :+
000F68r 3  E6 rr        	inc z80_h
000F6Ar 3               :
000F6Ar 3  A0 00        	ldy #0
000F6Cr 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
000F6Er 3  A0 08        	ldy #var_newY
000F70r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F72r 3               
000F72r 3  A9 C8        	lda #200 				; set initial coordinate off screen.
000F74r 3  A0 03        	ldy #var_Y
000F76r 3  91 rr        	sta (z80_ix),y
000F78r 3               
000F78r 3  E6 rr        	inc z80_l 				; move to next byte.
000F7Ar 3  D0 02        	bne :+
000F7Cr 3  E6 rr        	inc z80_h
000F7Er 3               :
000F7Er 3  A0 00        	ldy #0 					; fetch byte from table.
000F80r 3  B1 rr        	lda (z80_hl),y
000F82r 3  A0 09        	ldy #var_newX
000F84r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F86r 3               
000F86r 3  E6 rr        	inc z80_l 				; move to next byte.
000F88r 3  D0 02        	bne :+
000F8Ar 3  E6 rr        	inc z80_h
000F8Cr 3               :
000F8Cr 3  A9 00        	lda #0					; zeroes in accumulator.
000F8Er 3  A0 07        	ldy #var_newFrame 		; reset frame number.
000F90r 3  91 rr        	sta (z80_ix),y
000F92r 3  A0 0A        	ldy #var_Direction 		; reset direction.
000F94r 3  91 rr        	sta (z80_ix),y
000F96r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
000F98r 3  91 rr        	sta (z80_ix),y
000F9Ar 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
000F9Cr 3  91 rr        	sta (z80_ix),y
000F9Er 3               
000F9Er 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
000FA0r 3  A0 10        	ldy #var_dataHi
000FA2r 3  91 rr        	sta (z80_ix),y
000FA4r 3               evis0:
000FA4r 3  A5 rr        	lda z80_i
000FA6r 3  48           	pha
000FA7r 3  A5 rr        	lda z80_x
000FA9r 3  48           	pha
000FAAr 3  A5 rr        	lda z80_h
000FACr 3  48           	pha
000FADr 3  A5 rr        	lda z80_l
000FAFr 3  48           	pha
000FB0r 3               
000FB0r 3  20 rr rr     	jsr evnt09 				; perform event.
000FB3r 3               
000FB3r 3  68           	pla
000FB4r 3  85 rr        	sta z80_l
000FB6r 3  68           	pla
000FB7r 3  85 rr        	sta z80_h
000FB9r 3  68           	pla
000FBAr 3  85 rr        	sta z80_x
000FBCr 3  68           	pla
000FBDr 3  85 rr        	sta z80_i
000FBFr 3               
000FBFr 3  18           	clc
000FC0r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
000FC2r 3  69 11        	adc #TABSIZ		 	; next sprite.
000FC4r 3  85 rr        	sta z80_x
000FC6r 3  90 02        	bcc :+
000FC8r 3  E6 rr        	inc z80_i
000FCAr 3               :
000FCAr 3  60           	rts
000FCBr 3               
000FCBr 3               
000FCBr 3               ;-------------------------------------
000FCBr 3               ; Clear the play area window.
000FCBr 3               ;-------------------------------------
000FCBr 3               
000FCBr 3               clw:
000FCBr 3  AD rr rr     	lda wintop			; get coordinates of window.
000FCEr 3  85 rr        	sta dispy			; put into dispx for calculation.
000FD0r 3  AD rr rr     	lda winlft
000FD3r 3  85 rr        	sta dispx
000FD5r 3               
000FD5r 3  AD rr rr     	lda winhgt			; height of window.
000FD8r 3  85 rr        	sta rrow			; copy to b register.
000FDAr 3               clw3:
000FDAr 3  AD rr rr     	lda winwid 			; width of window.
000FDDr 3  85 rr        	sta rcol
000FDFr 3               clw2:
000FDFr 3  20 rr rr     	jsr gprad 			; get print address.
000FE2r 3  A9 20        	lda #32
000FE4r 3  20 rr rr     	jsr pchar
000FE7r 3  E6 rr        	inc dispx			; next column.
000FE9r 3  C6 rr        	dec rcol			; one less to do.
000FEBr 3  D0 F2        	bne clw2			; repeat for remaining columns.
000FEDr 3               
000FEDr 3  AD rr rr     	lda winlft			; get left edge.
000FF0r 3  85 rr        	sta dispx 			; reset x.
000FF2r 3  E6 rr        	inc dispy 			; next line down.
000FF4r 3               
000FF4r 3  C6 rr        	dec rrow
000FF6r 3  D0 E2        	bne clw3			; repeat down the screen.
000FF8r 3               
000FF8r 3  AD rr rr     	lda wintop			; get coordinates of window.
000FFBr 3  85 rr        	sta chary			; put into display position.
000FFDr 3  AD rr rr     	lda winlft
001000r 3  85 rr        	sta charx
001002r 3  60           	rts
001003r 3               
001003r 3               
001003r 3               ;----------------------------------------------------------
001003r 3               ; Effects code.
001003r 3               ; Ticker routine is called 25 times per second.
001003r 3               ;
001003r 3               ; txtini = text scroller address
001003r 3               ; txtscr = left text screen address
001003r 3               ; txtwid = scroller width
001003r 3               ; txtbit = 128
001003r 3               ; X      = message nr
001003r 3               ;----------------------------------------------------------
001003r 3               
001003r 3               .if sflag
001003r 3               
001003r 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
001003r 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
001003r 3               		.byte $00,$10,$20,$30,$40,$50
001003r 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
001003r 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
001003r 3               		.byte $01,$01,$01,$01,$01,$01
001003r 3               
001003r 3               scrly:
001003r 3               
001003r 3               ; Set scr_l = txtscr
001003r 3               
001003r 3               	rts
001003r 3               	.word txtscr         	; set scr_l = left screen address.
001003r 3               	sta scr_l
001003r 3               	sta scr_r
001003r 3               	lda txtscr+1
001003r 3               	sta scr_l+1
001003r 3               	sta scr_r+1
001003r 3               
001003r 3               	stx xtmp		; save x
001003r 3               
001003r 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
001003r 3               
001003r 3               	ldx txtwid
001003r 3               	dex
001003r 3               	lda scrollpos_lb,x
001003r 3               	clc
001003r 3               	adc scr_r
001003r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
001003r 3               	bcc :+
001003r 3               	inc scr_r+1
001003r 3               :
001003r 3               	clc
001003r 3               	lda scrollpos_hb,x
001003r 3               	adc scr_r+1
001003r 3               	sta scr_r+1
001003r 3               
001003r 3               ; Scroll string
001003r 3               
001003r 3               	lda #0
001003r 3               	sta line_cnt		; Set line counter
001003r 3               scrly1:
001003r 3               	clc
001003r 3               	lda scr_r
001003r 3               	adc line_cnt
001003r 3               	sta scr_tmp
001003r 3               	lda scr_r+1
001003r 3               	sta scr_tmp+1
001003r 3               
001003r 3               	ldx txtwid		; set column counter
001003r 3               	dex
001003r 3               	ldy #0
001003r 3               	clc			; Reset pixel to be shifted in
001003r 3               scrly0:
001003r 3               	lda (scr_tmp),y
001003r 3               	rol a			; Shift screenbyte
001003r 3               	sta (scr_tmp),y		; store screenbyte
001003r 3               	php			; save carry
001003r 3               
001003r 3               	sec			; subtract 16 form screenaddress
001003r 3               	lda scr_tmp
001003r 3               	sbc #$10
001003r 3               	sta scr_tmp
001003r 3               	bcs :+
001003r 3               	dec scr_tmp+1
001003r 3               :
001003r 3               	plp			; restore carry
001003r 3               	dex			; previous column
001003r 3               	bpl scrly0		; repeat for all columns
001003r 3               
001003r 3               	inc line_cnt		; next line
001003r 3               	lda line_cnt
001003r 3               	cmp #8
001003r 3               	bne scrly1		; repeat for 8 lines
001003r 3               
001003r 3               ; Get next character in string
001003r 3               
001003r 3               	lda txtpos 		; get text pointer.
001003r 3               	sta scr_txt
001003r 3               	lda txtpos+1
001003r 3               	sta scr_txt+1
001003r 3               
001003r 3               	ldy #0
001003r 3               	lda (scr_txt),y 	; find character we're displaying.
001003r 3               	and #127 		; remove end marker bit if applicable.
001003r 3               	cmp #13			; is it newline?
001003r 3               	bne scrly5 		; no, it's okay.
001003r 3               	lda #32			; convert to a space instead.
001003r 3               scrly5:
001003r 3               	sta fntaddr		; calculate char address
001003r 3               	lda #0
001003r 3               	sta fntaddr+1
001003r 3               	asl fntaddr  		; multiply char by 8.
001003r 3               	rol fntaddr+1
001003r 3               	asl fntaddr
001003r 3               	rol fntaddr+1
001003r 3               	asl fntaddr
001003r 3               	rol fntaddr+1
001003r 3               	lda fntaddr
001003r 3               	clc
001003r 3               	adc #<(FONT-256)
001003r 3               	sta scrly3+1		; that's the low byte.
001003r 3               	lda fntaddr+1
001003r 3               	adc #>(FONT-256)
001003r 3               	sta scrly3+2		; add displacement.
001003r 3               
001003r 3               	ldy #0
001003r 3               scrly3:
001003r 3               	lda $3333,y		; get image of char line.
001003r 3               	and txtbit
001003r 3               	beq scrly2		; don't plot pixel
001003r 3               	lda (scr_r),y
001003r 3               	clc
001003r 3               	ora #1
001003r 3               	sta (scr_r),y		; plot pixel
001003r 3               scrly2:
001003r 3               	iny			; next line of char.
001003r 3               	cpy #8
001003r 3               	bne scrly3
001003r 3               
001003r 3               	lsr txtbit		; bit of text to display.
001003r 3               	bcs :+
001003r 3               	rts
001003r 3               :
001003r 3               	ldy #0
001003r 3               	lda (scr_txt),y 	; what was the character?
001003r 3               	asl a	  		; end of message?
001003r 3               	bcs scrly4
001003r 3               	inc txtpos
001003r 3               	bne :+
001003r 3               	inc txtpos+1
001003r 3               :
001003r 3               	jmp scrly6 		; not yet - continue.
001003r 3               scrly4:
001003r 3               	lda txtini 		; start of scrolling message.
001003r 3               	sta txtpos
001003r 3               	lda txtini+1
001003r 3               	sta txtpos+1
001003r 3               scrly6:
001003r 3               	lda #128
001003r 3               	sta txtbit
001003r 3               	ldx xtmp
001003r 3               	rts
001003r 3               
001003r 3               tmp_byte:	.byte 0
001003r 3               line_cnt:	.byte 0
001003r 3               
001003r 3               ;-------------------------------------------------------
001003r 3               ; Entry TICKER command
001003r 3               ;
001003r 3               ; Entry:
001003r 3               ;  z80_b = message nr
001003r 3               ;  z80_c = width
001003r 3               ;-------------------------------------------------------
001003r 3               
001003r 3               iscrly:
001003r 3               	jsr prescr 		; set up display position.
001003r 3               	lda #<msgdat 		; text messages.
001003r 3               	sta z80_l
001003r 3               	lda #>msgdat
001003r 3               	sta z80_h
001003r 3               	lda z80_c 		; width.
001003r 3               	sec
001003r 3               	sbc #1			; subtract one.
001003r 3               	cmp #32 		; is it between 1 and 32?
001003r 3               	bcc :+
001003r 3               	lda #$60
001003r 3               	jmp iscrl0		; no, disable messages.
001003r 3               :
001003r 3               	ldx z80_b		; message number.
001003r 3               	jsr getwrd 		; find message start.
001003r 3               
001003r 3               	lda z80_l		; set initial text position.
001003r 3               	sta txtini
001003r 3               	lda z80_h
001003r 3               	sta txtini+1
001003r 3               
001003r 3               	lda #$ad		; code for lda adrr
001003r 3               iscrl0:
001003r 3               	sta scrly		; enable/disable scrolling routine.
001003r 3               
001003r 3               	jsr prescr 		; set up display position.
001003r 3               	jsr gprad 		; get print address.
001003r 3               
001003r 3               	lda scraddr 		; set text screen address.
001003r 3               	sta txtscr
001003r 3               	lda scraddr+1
001003r 3               	sta txtscr+1
001003r 3               
001003r 3               	lda z80_c		; width.
001003r 3               	sta txtwid		; set width in working storage.
001003r 3               
001003r 3               	lda #128 		; start with leftmost bit.
001003r 3               	sta txtbit
001003r 3               
001003r 3               	jmp scrly4
001003r 3               .endif
001003r 3               
001003r 3               ;------------------------------------------------------------------
001003r 3               ; Dig routine, conditional assembly depending on dflag
001003r 3               ;------------------------------------------------------------------
001003r 3               .if dflag
001003r 3               dig:
001003r 3               	and #3
001003r 3               	beq digr		; dig right
001003r 3               	cmp #1
001003r 3               	beq digl		; dig left
001003r 3               	cmp #2
001003r 3               	beq digd		; dig down
001003r 3               
001003r 3               ; Dig up.
001003r 3               
001003r 3               digu:				; dig up
001003r 3               	ldy #8
001003r 3               	lda (z80_ix),y
001003r 3               	sec
001003r 3               	sbc #2
001003r 3               	sta dispy		; set y
001003r 3               
001003r 3               	iny
001003r 3               	lda (z80_ix),y
001003r 3               	sta dispx		; set x
001003r 3               	jmp digv
001003r 3               
001003r 3               ; Dig down.
001003r 3               
001003r 3               digd:
001003r 3               	ldy #9
001003r 3               	lda (z80_ix),y
001003r 3               	sta dispx		; set y
001003r 3               
001003r 3               	dey
001003r 3               	clc
001003r 3               	lda (z80_ix),y
001003r 3               	adc #16
001003r 3               	sta dispy		; set y
001003r 3               	jmp digv
001003r 3               
001003r 3               ; Dig left.
001003r 3               
001003r 3               digl:
001003r 3               	ldy #8
001003r 3               	lda (z80_ix),y
001003r 3               	sta dispy		; set y
001003r 3               
001003r 3               	iny
001003r 3               	lda (z80_ix),y
001003r 3               	sec
001003r 3               	sbc #2			; x=x-2
001003r 3               	sta dispx		; set x
001003r 3               	jmp digh
001003r 3               
001003r 3               ; Dig right.
001003r 3               
001003r 3               digr:
001003r 3               	ldy #8
001003r 3               	lda (z80_ix),y
001003r 3               	sta dispy		; set y
001003r 3               
001003r 3               	iny
001003r 3               	lda (z80_ix),y
001003r 3               	clc
001003r 3               	adc #16
001003r 3               	sta dispx		; set x+16
001003r 3               	jmp digh
001003r 3               
001003r 3               ; Vertical digging
001003r 3               
001003r 3               digv:
001003r 3               	jsr tstbl		; check blocktype in MAP
001003r 3               	jsr fdchk		; test if FODDER
001003r 3               
001003r 3               	clc
001003r 3               	lda dispx		; look 1 cell down
001003r 3               	adc #8
001003r 3               	sta dispx
001003r 3               	jsr tstbl		; check blocktype in MAP
001003r 3               	jsr fdchk
001003r 3               	lda dispx
001003r 3               	and #7
001003r 3               	bne :+
001003r 3               	rts
001003r 3               :
001003r 3               	clc
001003r 3               	lda dispx		; look 1 cell down
001003r 3               	adc #8
001003r 3               	sta dispx
001003r 3               	jsr tstbl		; check blocktype in MAP
001003r 3               	jmp fdchk
001003r 3               
001003r 3               ; Horizontal digging
001003r 3               
001003r 3               digh:
001003r 3               	jsr tstbl		; check blocktype in MAP
001003r 3               	jsr fdchk		; test if FODDER
001003r 3               
001003r 3               	clc
001003r 3               	lda dispy		; look 1 cell down
001003r 3               	adc #8
001003r 3               	sta dispy
001003r 3               	jsr tstbl		; check blocktype in MAP
001003r 3               	jsr fdchk
001003r 3               	lda dispy
001003r 3               	and #7
001003r 3               	bne :+
001003r 3               	rts
001003r 3               :
001003r 3               	clc
001003r 3               	lda dispy		; look 1 cell down
001003r 3               	adc #8
001003r 3               	sta dispy
001003r 3               	jsr tstbl		; check blocktype in MAP
001003r 3               	jmp fdchk
001003r 3               
001003r 3               digcnt:	.byte 0
001003r 3               
001003r 3               .endif
001003r 3               
001003r 3               ;------------------------------------------------------------------
001003r 3               ; Sprite table
001003r 3               ;------------------------------------------------------------------
001003r 3               
001003r 3               
001003r 3               ; ix+0  = type.
001003r 3               ; ix+1  = sprite image number.
001003r 3               ; ix+2  = frame.
001003r 3               ; ix+3  = y coord.
001003r 3               ; ix+4  = x coord.
001003r 3               
001003r 3               ; ix+5  = new type.
001003r 3               ; ix+6  = new image number.
001003r 3               ; ix+7  = new frame.
001003r 3               ; ix+8  = new y coord.
001003r 3               ; ix+9  = new x coord.
001003r 3               
001003r 3               ; ix+10 = direction.
001003r 3               ; ix+11 = parameter 1.
001003r 3               ; ix+12 = parameter 2.
001003r 3               ; ix+13 = jump pointer low.
001003r 3               ; ix+14 = jump pointer high.
001003r 3               ; ix+15 = data pointer low.
001003r 3               ; ix+16 = data pointer high.
001003r 3               
001003r 3               ; block NUMSPR * TABSIZ,255
001003r 3               
001003r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001007r 3  FF FF FF FF  
00100Br 3  FF FF FF FF  
0010CFr 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0010D3r 3  FF FF FF 00  
0010D7r 3  C0 78 00 00  
0010E0r 3  07           roomtb:	.byte 7                      ; start room map offset.
0010E1r 3               
0010E1r 3               setfgcol:
0010E1r 3               setbgcol:
0010E1r 3  60           	rts
0010E2r 3               
0010E2r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0010E2r 3               ; if USER has an argument it will be passed in the accumulator.
0010E2r 3               
0010E2r 3               user:
0010E2r 3               	.include "user.inc"
0010E2r 4               music_init	= $a900
0010E2r 4               music_on	= $a903
0010E2r 4               music_off	= $a906
0010E2r 4               music_play	= $a909
0010E2r 4               
0010E2r 4               api:
0010E2r 4  C9 00        	cmp #0
0010E4r 4  D0 03        	bne api1
0010E6r 4  4C 00 A9     	jmp music_init
0010E9r 4               api1:
0010E9r 4  C9 01        	cmp #1
0010EBr 4  D0 03        	bne api2
0010EDr 4  4C 03 A9     	jmp music_on
0010F0r 4               api2:
0010F0r 4  C9 02        	cmp #2
0010F2r 4  D0 03        	bne api3
0010F4r 4  4C 06 A9     	jmp music_off
0010F7r 4               api3:
0010F7r 4  C9 03        	cmp #3
0010F9r 4  D0 03        	bne snd_1
0010FBr 4  4C 09 A9     	jmp music_play
0010FEr 4               snd_1:
0010FEr 4  C9 05        	cmp #5
001100r 4  D0 06        	bne snd_2
001102r 4  A9 DE        	lda #222
001104r 4  8D rr rr     	sta SetSoundVars
001107r 4  60           	rts
001108r 4               snd_2:
001108r 4  C9 06        	cmp #6
00110Ar 4  D0 06        	bne api_end
00110Cr 4  A9 DE        	lda #222
00110Er 4  8D rr rr     	sta SetSoundVars+3
001111r 4  60           	rts
001112r 4               api_end:
001112r 4  60           	rts
001113r 4               
001113r 3               
001113r 3               ; Everything below here will be generated by the editors.
001113r 3               
001113r 3               
001113r 3  60                   rts
001114r 3               WINDOWTOP = 1
001114r 3               WINDOWLFT = 0
001114r 3               WINDOWHGT = 20
001114r 3               WINDOWWID = 22 ;a
001114r 3               MAPWID = 4
001114r 3  FF FF FF FF          .byte 255,255,255,255
001118r 3               mapdat:
001118r 3  FF 01 00 FF          .byte 255,1,0,255
00111Cr 3  FF FF FF FF          .byte 255,255,255,255
001120r 3  01           stmap:  .byte 1
001121r 3               
001121r 3               evnt00:
001121r 3  A9 01                lda #1
001123r 3  C5 rr                cmp scno
001125r 3  F0 03                beq *+5
001127r 3  4C rr rr             jmp a00230
00112Ar 3  A9 02                lda #2 	; INK
00112Cr 3  8D rr rr             sta fontcol
00112Fr 3  A9 00                lda #0		; AT
001131r 3  85 rr                sta chary
001133r 3  A9 08                lda #8
001135r 3  85 rr                sta charx
001137r 3  A9 13                lda #19  	; MESSAGE
001139r 3  20 rr rr             jsr dmsg
00113Cr 3  A9 07                lda #7 	; INK
00113Er 3  8D rr rr             sta fontcol
001141r 3  A9 03                lda #3
001143r 3  85 rr                sta chary
001145r 3  A9 0A                lda #10
001147r 3  85 rr                sta charx
001149r 3  A9 0F                lda #15  	; MESSAGE
00114Br 3  20 rr rr             jsr dmsg
00114Er 3  A9 07                lda #7
001150r 3  85 rr                sta chary
001152r 3  A9 0A                lda #10
001154r 3  85 rr                sta charx
001156r 3  A9 10                lda #16  	; MESSAGE
001158r 3  20 rr rr             jsr dmsg
00115Br 3  A9 0B                lda #11
00115Dr 3  85 rr                sta chary
00115Fr 3  A9 0A                lda #10
001161r 3  85 rr                sta charx
001163r 3  A9 11                lda #17  	; MESSAGE
001165r 3  20 rr rr             jsr dmsg
001168r 3  A9 0F                lda #15
00116Ar 3  85 rr                sta chary
00116Cr 3  A9 0A                lda #10
00116Er 3  85 rr                sta charx
001170r 3  A9 12                lda #18  	; MESSAGE
001172r 3  20 rr rr             jsr dmsg
001175r 3  A5 rr                lda joyval	; KEY
001177r 3  29 10                and #16
001179r 3  F0 03                beq :+
00117Br 3  4C rr rr             jmp a00225
00117Er 3               :
00117Er 3  20 rr rr             jsr cls		; CLS
001181r 3  20 rr rr             jsr scrr	; SCREENRIGHT
001184r 3  A9 01                lda #1	; RESTART
001186r 3  85 rr                sta restfl
001188r 3  4C rr rr     a00225: jmp a00954
00118Br 3  A9 00        a00230: lda #0
00118Dr 3  C5 rr                cmp varb
00118Fr 3  F0 03                beq *+5
001191r 3  4C rr rr             jmp a00310
001194r 3  A9 00                lda #0
001196r 3  C5 rr                cmp vard
001198r 3  F0 03                beq *+5
00119Ar 3  4C rr rr             jmp a00310
00119Dr 3  A9 00                lda #0		; ANIMATE
00119Fr 3  20 rr rr             jsr animsp
0011A2r 3  A9 01                lda #1
0011A4r 3  A0 07                ldy #7
0011A6r 3  D1 rr                cmp (z80_ix),y
0011A8r 3  90 03                bcc *+5
0011AAr 3  4C rr rr             jmp a00310
0011ADr 3  A9 00                lda #0
0011AFr 3  A0 07                ldy #7
0011B1r 3  91 rr                sta (z80_ix),y
0011B3r 3  A5 rr        a00310: lda joyval	; KEY
0011B5r 3  29 08                and #8
0011B7r 3  F0 03                beq :+
0011B9r 3  4C rr rr             jmp a00468
0011BCr 3               :
0011BCr 3  A9 05                lda #DEADLY	; DEADLY
0011BEr 3  85 rr                sta z80_b
0011C0r 3  20 rr rr             jsr tded
0011C3r 3  C5 rr                cmp z80_b
0011C5r 3  F0 03                beq :+
0011C7r 3  4C rr rr             jmp a00468
0011CAr 3               :
0011CAr 3  A9 30                lda #48
0011CCr 3  A0 08                ldy #8
0011CEr 3  D1 rr                cmp (z80_ix),y
0011D0r 3  90 03                bcc *+5
0011D2r 3  4C rr rr             jmp a00468
0011D5r 3  A9 01                lda #1
0011D7r 3  C5 rr                cmp vare
0011D9r 3  F0 03                beq *+5
0011DBr 3  4C rr rr             jmp a00468
0011DEr 3  A9 00                lda #0
0011E0r 3  C5 rr                cmp varl
0011E2r 3  F0 03                beq *+5
0011E4r 3  4C rr rr             jmp a00468
0011E7r 3  A9 14                lda #20		; BEEP
0011E9r 3  8D rr rr             sta sndtyp
0011ECr 3  A9 20                lda #32
0011EEr 3  85 rr                sta z80_c
0011F0r 3  A0 08                ldy #8
0011F2r 3  B1 rr                lda (z80_ix),y
0011F4r 3  38                   sec
0011F5r 3  E5 rr                sbc z80_c
0011F7r 3  A0 08                ldy #8
0011F9r 3  91 rr                sta (z80_ix),y
0011FBr 3  A9 0A                lda #10
0011FDr 3  85 rr                sta varl
0011FFr 3  A5 rr        a00468: lda joyval	; KEY
001201r 3  29 04                and #4
001203r 3  F0 03                beq :+
001205r 3  4C rr rr             jmp a00631
001208r 3               :
001208r 3  A9 05                lda #DEADLY	; DEADLY
00120Ar 3  85 rr                sta z80_b
00120Cr 3  20 rr rr             jsr tded
00120Fr 3  C5 rr                cmp z80_b
001211r 3  F0 03                beq :+
001213r 3  4C rr rr             jmp a00631
001216r 3               :
001216r 3  A9 78                lda #120
001218r 3  A0 08                ldy #8
00121Ar 3  D1 rr                cmp (z80_ix),y
00121Cr 3  90 03                bcc *+5
00121Er 3  4C rr rr             jmp a00544
001221r 3  4C rr rr             jmp a00631
001224r 3  A9 01        a00544: lda #1
001226r 3  C5 rr                cmp vare
001228r 3  F0 03                beq *+5
00122Ar 3  4C rr rr             jmp a00631
00122Dr 3  A9 00                lda #0
00122Fr 3  C5 rr                cmp varl
001231r 3  F0 03                beq *+5
001233r 3  4C rr rr             jmp a00631
001236r 3  A9 14                lda #20		; BEEP
001238r 3  8D rr rr             sta sndtyp
00123Br 3  A9 20                lda #32
00123Dr 3  85 rr                sta z80_c
00123Fr 3  A0 08                ldy #8
001241r 3  B1 rr                lda (z80_ix),y
001243r 3  18                   clc
001244r 3  65 rr                adc z80_c
001246r 3  A0 08                ldy #8
001248r 3  91 rr                sta (z80_ix),y
00124Ar 3  A9 0A                lda #10
00124Cr 3  85 rr                sta varl
00124Er 3  A5 rr        a00631: lda joyval	; KEY
001250r 3  29 01                and #1
001252r 3  F0 03                beq :+
001254r 3  4C rr rr             jmp a00727
001257r 3               :
001257r 3  A9 90                lda #144
001259r 3  A0 09                ldy #9
00125Br 3  D1 rr                cmp (z80_ix),y
00125Dr 3  90 02                bcc *+4
00125Fr 3  D0 03                bne *+5
001261r 3  4C rr rr             jmp a00727
001264r 3  20 rr rr             jsr cangr	; CANGORIGHT
001267r 3  F0 03                beq :+
001269r 3  4C rr rr             jmp a00727
00126Cr 3               :
00126Cr 3  A9 01                lda #1
00126Er 3  85 rr                sta varh
001270r 3  A0 09                ldy #9 		; SPRITERIGHT
001272r 3  B1 rr                lda (z80_ix),y
001274r 3  18                   clc
001275r 3  69 02                adc #2
001277r 3  91 rr                sta (z80_ix),y
001279r 3  A5 rr        a00727: lda joyval	; KEY
00127Br 3  29 02                and #2
00127Dr 3  F0 03                beq :+
00127Fr 3  4C rr rr             jmp a00819
001282r 3               :
001282r 3  A9 10                lda #16
001284r 3  A0 09                ldy #9
001286r 3  D1 rr                cmp (z80_ix),y
001288r 3  90 03                bcc *+5
00128Ar 3  4C rr rr             jmp a00819
00128Dr 3  20 rr rr             jsr cangl	; CANGOLEFT
001290r 3  F0 03                beq :+
001292r 3  4C rr rr             jmp a00819
001295r 3               :
001295r 3  A9 00                lda #0
001297r 3  85 rr                sta varh
001299r 3  A0 09                ldy #9 		; SPRITELEFT
00129Br 3  B1 rr                lda (z80_ix),y
00129Dr 3  38                   sec
00129Er 3  E9 02                sbc #2
0012A0r 3  91 rr                sta (z80_ix),y
0012A2r 3  A5 rr        a00819: lda joyval	; KEY
0012A4r 3  29 10                and #16
0012A6r 3  F0 03                beq :+
0012A8r 3  4C rr rr             jmp a00894
0012ABr 3               :
0012ABr 3  A9 00                lda #0
0012ADr 3  C5 rr                cmp varh
0012AFr 3  F0 03                beq *+5
0012B1r 3  4C rr rr             jmp a00873
0012B4r 3  A9 02                lda #2
0012B6r 3  A0 07                ldy #7
0012B8r 3  91 rr                sta (z80_ix),y
0012BAr 3  4C rr rr             jmp a00886
0012BDr 3  A9 03        a00873: lda #3
0012BFr 3  A0 07                ldy #7
0012C1r 3  91 rr                sta (z80_ix),y
0012C3r 3  A9 01        a00886: lda #1
0012C5r 3  85 rr                sta varb
0012C7r 3  A0 08        a00894: ldy #8
0012C9r 3  B1 rr                lda (z80_ix),y
0012CBr 3  85 rr                sta varp
0012CDr 3  A0 09                ldy #9
0012CFr 3  B1 rr                lda (z80_ix),y
0012D1r 3  85 rr                sta varq
0012D3r 3  A9 00                lda #0
0012D5r 3  C5 rr                cmp numlif
0012D7r 3  F0 03                beq *+5
0012D9r 3  4C rr rr             jmp a00954
0012DCr 3  A9 01                lda #1 		; KILL
0012DEr 3  85 rr                sta deadf
0012E0r 3  60                   rts		; EXIT
0012E1r 3  60           a00954: rts
0012E2r 3               evnt01:
0012E2r 3  A9 00                lda #0
0012E4r 3  C5 rr                cmp vard
0012E6r 3  F0 03                beq *+5
0012E8r 3  4C rr rr             jmp b00030
0012EBr 3  A9 00                lda #0		; ANIMATE
0012EDr 3  20 rr rr             jsr animsp
0012F0r 3  20 rr rr     b00030: jsr cangr	; CANGORIGHT
0012F3r 3  F0 03                beq :+
0012F5r 3  4C rr rr             jmp b00077
0012F8r 3               :
0012F8r 3  A0 09                ldy #9 		; SPRITERIGHT
0012FAr 3  B1 rr                lda (z80_ix),y
0012FCr 3  18                   clc
0012FDr 3  69 02                adc #2
0012FFr 3  91 rr                sta (z80_ix),y
001301r 3  4C rr rr             jmp b00154
001304r 3  A0 0C        b00077: ldy #12
001306r 3  B1 rr                lda (z80_ix),y
001308r 3  85 rr                sta z80_c
00130Ar 3  A5 rr                lda varr
00130Cr 3  38                   sec
00130Dr 3  E5 rr                sbc z80_c
00130Fr 3  85 rr                sta varr
001311r 3  A5 rr                lda varo
001313r 3  38                   sec
001314r 3  E9 01                sbc #1
001316r 3  85 rr                sta varo
001318r 3  A9 FF                lda #255	; REMOVE
00131Ar 3  A0 05                ldy #5
00131Cr 3  91 rr                sta (z80_ix),y
00131Er 3  A9 0A                lda #10		; BEEP
001320r 3  8D rr rr             sta sndtyp
001323r 3  60                   rts		; EXIT
001324r 3  A9 02        b00154: lda #2 	; COLLISION
001326r 3  85 rr                sta z80_b
001328r 3  20 rr rr             jsr sktyp
00132Br 3  B0 03                bcs :+
00132Dr 3  4C rr rr             jmp b00564
001330r 3               :
001330r 3  A0 0C                ldy #12
001332r 3  B1 rr                lda (z80_ix),y
001334r 3  85 rr                sta z80_c
001336r 3  A5 rr                lda varr
001338r 3  38                   sec
001339r 3  E5 rr                sbc z80_c
00133Br 3  85 rr                sta varr
00133Dr 3  A5 rr                lda varo
00133Fr 3  38                   sec
001340r 3  E9 01                sbc #1
001342r 3  85 rr                sta varo
001344r 3  A9 3C                lda #60		; BEEP
001346r 3  8D rr rr             sta sndtyp
001349r 3  A9 03                lda #3
00134Br 3  A0 06                ldy #6
00134Dr 3  D1 rr                cmp (z80_ix),y
00134Fr 3  F0 03                beq *+5
001351r 3  4C rr rr             jmp b00281
001354r 3  A9 03                lda #<3		; SCORE
001356r 3  85 rr                sta z80_l
001358r 3  A9 00                lda #>3
00135Ar 3  85 rr                sta z80_h
00135Cr 3  20 rr rr             jsr addsc
00135Fr 3  A9 05        b00281: lda #5
001361r 3  A0 06                ldy #6
001363r 3  D1 rr                cmp (z80_ix),y
001365r 3  F0 03                beq *+5
001367r 3  4C rr rr             jmp b00327
00136Ar 3  A9 04                lda #<4		; SCORE
00136Cr 3  85 rr                sta z80_l
00136Er 3  A9 00                lda #>4
001370r 3  85 rr                sta z80_h
001372r 3  20 rr rr             jsr addsc
001375r 3  A9 07        b00327: lda #7
001377r 3  A0 06                ldy #6
001379r 3  D1 rr                cmp (z80_ix),y
00137Br 3  F0 03                beq *+5
00137Dr 3  4C rr rr             jmp b00373
001380r 3  A9 05                lda #<5		; SCORE
001382r 3  85 rr                sta z80_l
001384r 3  A9 00                lda #>5
001386r 3  85 rr                sta z80_h
001388r 3  20 rr rr             jsr addsc
00138Br 3  A9 09        b00373: lda #9
00138Dr 3  A0 06                ldy #6
00138Fr 3  D1 rr                cmp (z80_ix),y
001391r 3  F0 03                beq *+5
001393r 3  4C rr rr             jmp b00419
001396r 3  A9 02                lda #<2		; SCORE
001398r 3  85 rr                sta z80_l
00139Ar 3  A9 00                lda #>2
00139Cr 3  85 rr                sta z80_h
00139Er 3  20 rr rr             jsr addsc
0013A1r 3  A9 0B        b00419: lda #11
0013A3r 3  A0 06                ldy #6
0013A5r 3  D1 rr                cmp (z80_ix),y
0013A7r 3  F0 03                beq *+5
0013A9r 3  4C rr rr             jmp b00465
0013ACr 3  A9 01                lda #<1		; SCORE
0013AEr 3  85 rr                sta z80_l
0013B0r 3  A9 00                lda #>1
0013B2r 3  85 rr                sta z80_h
0013B4r 3  20 rr rr             jsr addsc
0013B7r 3  A9 07        b00465: lda #7 	; INK
0013B9r 3  8D rr rr             sta fontcol
0013BCr 3  A9 15                lda #21
0013BEr 3  85 rr                sta chary
0013C0r 3  A9 07                lda #7
0013C2r 3  85 rr                sta charx
0013C4r 3  A0 00                ldy #0		; SHOWSCORE
0013C6r 3  A9 06                lda #6
0013C8r 3  85 rr                sta z80_b
0013CAr 3  20 rr rr             jsr dscor
0013CDr 3  A9 FF                lda #255	; REMOVE
0013CFr 3  A0 05                ldy #5
0013D1r 3  91 rr                sta (z80_ix),y
0013D3r 3  A9 00                lda #0
0013D5r 3  85 rr                sta varn
0013D7r 3  A9 04                lda #4	; SPAWN
0013D9r 3  85 rr                sta z80_c
0013DBr 3  A9 0D                lda #13
0013DDr 3  85 rr                sta z80_b
0013DFr 3  20 rr rr             jsr spawn
0013E2r 3  60                   rts		; EXIT
0013E3r 3  A9 00        b00564: lda #0 	; COLLISION
0013E5r 3  85 rr                sta z80_b
0013E7r 3  20 rr rr             jsr sktyp
0013EAr 3  B0 03                bcs :+
0013ECr 3  4C rr rr             jmp b00656
0013EFr 3               :
0013EFr 3  A9 80                lda #128
0013F1r 3  85 rr                sta z80_c
0013F3r 3  A5 rr                lda varr
0013F5r 3  38                   sec
0013F6r 3  E5 rr                sbc z80_c
0013F8r 3  85 rr                sta varr
0013FAr 3  A5 rr                lda varo
0013FCr 3  38                   sec
0013FDr 3  E9 01                sbc #1
0013FFr 3  85 rr                sta varo
001401r 3  A5 rr                lda numlif
001403r 3  38                   sec
001404r 3  E9 01                sbc #1
001406r 3  85 rr                sta numlif
001408r 3  A9 01                lda #1 		; KILL
00140Ar 3  85 rr                sta deadf
00140Cr 3  60           b00656: rts
00140Dr 3               evnt02:
00140Dr 3  A9 00                lda #0		; ANIMATE
00140Fr 3  20 rr rr             jsr animsp
001412r 3  A9 04                lda #4
001414r 3  A0 07                ldy #7
001416r 3  D1 rr                cmp (z80_ix),y
001418r 3  F0 03                beq *+5
00141Ar 3  4C rr rr             jmp c00059
00141Dr 3  A9 FF                lda #255	; REMOVE
00141Fr 3  A0 05                ldy #5
001421r 3  91 rr                sta (z80_ix),y
001423r 3  A9 00                lda #0
001425r 3  85 rr                sta varb
001427r 3  A9 08        c00059: lda #8
001429r 3  A0 07                ldy #7
00142Br 3  D1 rr                cmp (z80_ix),y
00142Dr 3  F0 03                beq *+5
00142Fr 3  4C rr rr             jmp c00105
001432r 3  A9 FF                lda #255	; REMOVE
001434r 3  A0 05                ldy #5
001436r 3  91 rr                sta (z80_ix),y
001438r 3  A9 00                lda #0
00143Ar 3  85 rr                sta varb
00143Cr 3  A5 rr        c00105: lda ogptr	; ENDSPRITE
00143Er 3  85 rr                sta z80_x
001440r 3  A5 rr                lda ogptr+1
001442r 3  85 rr                sta z80_i
001444r 3  60                   rts
001445r 3               evnt03:
001445r 3  A9 00                lda #0
001447r 3  C5 rr                cmp vard
001449r 3  F0 03                beq *+5
00144Br 3  4C rr rr             jmp d00030
00144Er 3  A9 00                lda #0		; ANIMATE
001450r 3  20 rr rr             jsr animsp
001453r 3  20 rr rr     d00030: jsr cangl	; CANGOLEFT
001456r 3  F0 03                beq :+
001458r 3  4C rr rr             jmp d00181
00145Br 3               :
00145Br 3  A9 00                lda #0
00145Dr 3  A0 09                ldy #9
00145Fr 3  D1 rr                cmp (z80_ix),y
001461r 3  90 03                bcc *+5
001463r 3  4C rr rr             jmp d00099
001466r 3  A0 09                ldy #9 		; SPRITELEFT
001468r 3  B1 rr                lda (z80_ix),y
00146Ar 3  38                   sec
00146Br 3  E9 02                sbc #2
00146Dr 3  91 rr                sta (z80_ix),y
00146Fr 3  4C rr rr             jmp d00176
001472r 3  A0 0C        d00099: ldy #12
001474r 3  B1 rr                lda (z80_ix),y
001476r 3  85 rr                sta z80_c
001478r 3  A5 rr                lda varr
00147Ar 3  38                   sec
00147Br 3  E5 rr                sbc z80_c
00147Dr 3  85 rr                sta varr
00147Fr 3  A5 rr                lda varo
001481r 3  38                   sec
001482r 3  E9 01                sbc #1
001484r 3  85 rr                sta varo
001486r 3  A9 FF                lda #255	; REMOVE
001488r 3  A0 05                ldy #5
00148Ar 3  91 rr                sta (z80_ix),y
00148Cr 3  A9 0A                lda #10		; BEEP
00148Er 3  8D rr rr             sta sndtyp
001491r 3  60                   rts		; EXIT
001492r 3  4C rr rr     d00176: jmp d00258
001495r 3  A0 0C        d00181: ldy #12
001497r 3  B1 rr                lda (z80_ix),y
001499r 3  85 rr                sta z80_c
00149Br 3  A5 rr                lda varr
00149Dr 3  38                   sec
00149Er 3  E5 rr                sbc z80_c
0014A0r 3  85 rr                sta varr
0014A2r 3  A5 rr                lda varo
0014A4r 3  38                   sec
0014A5r 3  E9 01                sbc #1
0014A7r 3  85 rr                sta varo
0014A9r 3  A9 FF                lda #255	; REMOVE
0014ABr 3  A0 05                ldy #5
0014ADr 3  91 rr                sta (z80_ix),y
0014AFr 3  A9 0A                lda #10		; BEEP
0014B1r 3  8D rr rr             sta sndtyp
0014B4r 3  60                   rts		; EXIT
0014B5r 3  A9 02        d00258: lda #2 	; COLLISION
0014B7r 3  85 rr                sta z80_b
0014B9r 3  20 rr rr             jsr sktyp
0014BCr 3  B0 03                bcs :+
0014BEr 3  4C rr rr             jmp d00667
0014C1r 3               :
0014C1r 3  A0 0C                ldy #12
0014C3r 3  B1 rr                lda (z80_ix),y
0014C5r 3  85 rr                sta z80_c
0014C7r 3  A5 rr                lda varr
0014C9r 3  38                   sec
0014CAr 3  E5 rr                sbc z80_c
0014CCr 3  85 rr                sta varr
0014CEr 3  A5 rr                lda varo
0014D0r 3  38                   sec
0014D1r 3  E9 01                sbc #1
0014D3r 3  85 rr                sta varo
0014D5r 3  A9 3C                lda #60		; BEEP
0014D7r 3  8D rr rr             sta sndtyp
0014DAr 3  A9 02                lda #2
0014DCr 3  A0 06                ldy #6
0014DEr 3  D1 rr                cmp (z80_ix),y
0014E0r 3  F0 03                beq *+5
0014E2r 3  4C rr rr             jmp d00385
0014E5r 3  A9 03                lda #<3		; SCORE
0014E7r 3  85 rr                sta z80_l
0014E9r 3  A9 00                lda #>3
0014EBr 3  85 rr                sta z80_h
0014EDr 3  20 rr rr             jsr addsc
0014F0r 3  A9 04        d00385: lda #4
0014F2r 3  A0 06                ldy #6
0014F4r 3  D1 rr                cmp (z80_ix),y
0014F6r 3  F0 03                beq *+5
0014F8r 3  4C rr rr             jmp d00431
0014FBr 3  A9 04                lda #<4		; SCORE
0014FDr 3  85 rr                sta z80_l
0014FFr 3  A9 00                lda #>4
001501r 3  85 rr                sta z80_h
001503r 3  20 rr rr             jsr addsc
001506r 3  A9 06        d00431: lda #6
001508r 3  A0 06                ldy #6
00150Ar 3  D1 rr                cmp (z80_ix),y
00150Cr 3  F0 03                beq *+5
00150Er 3  4C rr rr             jmp d00476
001511r 3  A9 05                lda #<5		; SCORE
001513r 3  85 rr                sta z80_l
001515r 3  A9 00                lda #>5
001517r 3  85 rr                sta z80_h
001519r 3  20 rr rr             jsr addsc
00151Cr 3  A9 08        d00476: lda #8
00151Er 3  A0 06                ldy #6
001520r 3  D1 rr                cmp (z80_ix),y
001522r 3  F0 03                beq *+5
001524r 3  4C rr rr             jmp d00522
001527r 3  A9 02                lda #<2		; SCORE
001529r 3  85 rr                sta z80_l
00152Br 3  A9 00                lda #>2
00152Dr 3  85 rr                sta z80_h
00152Fr 3  20 rr rr             jsr addsc
001532r 3  A9 0A        d00522: lda #10
001534r 3  A0 06                ldy #6
001536r 3  D1 rr                cmp (z80_ix),y
001538r 3  F0 03                beq *+5
00153Ar 3  4C rr rr             jmp d00568
00153Dr 3  A9 01                lda #<1		; SCORE
00153Fr 3  85 rr                sta z80_l
001541r 3  A9 00                lda #>1
001543r 3  85 rr                sta z80_h
001545r 3  20 rr rr             jsr addsc
001548r 3  A9 07        d00568: lda #7 	; INK
00154Ar 3  8D rr rr             sta fontcol
00154Dr 3  A9 15                lda #21
00154Fr 3  85 rr                sta chary
001551r 3  A9 07                lda #7
001553r 3  85 rr                sta charx
001555r 3  A0 00                ldy #0		; SHOWSCORE
001557r 3  A9 06                lda #6
001559r 3  85 rr                sta z80_b
00155Br 3  20 rr rr             jsr dscor
00155Er 3  A9 FF                lda #255	; REMOVE
001560r 3  A0 05                ldy #5
001562r 3  91 rr                sta (z80_ix),y
001564r 3  A9 00                lda #0
001566r 3  85 rr                sta varn
001568r 3  A9 04                lda #4	; SPAWN
00156Ar 3  85 rr                sta z80_c
00156Cr 3  A9 0D                lda #13
00156Er 3  85 rr                sta z80_b
001570r 3  20 rr rr             jsr spawn
001573r 3  60                   rts		; EXIT
001574r 3  A9 00        d00667: lda #0 	; COLLISION
001576r 3  85 rr                sta z80_b
001578r 3  20 rr rr             jsr sktyp
00157Br 3  B0 03                bcs :+
00157Dr 3  4C rr rr             jmp d00764
001580r 3               :
001580r 3  A9 40                lda #64
001582r 3  85 rr                sta z80_c
001584r 3  A5 rr                lda varr
001586r 3  38                   sec
001587r 3  E5 rr                sbc z80_c
001589r 3  85 rr                sta varr
00158Br 3  A5 rr                lda varo
00158Dr 3  38                   sec
00158Er 3  E9 01                sbc #1
001590r 3  85 rr                sta varo
001592r 3  A5 rr                lda numlif
001594r 3  38                   sec
001595r 3  E9 01                sbc #1
001597r 3  85 rr                sta numlif
001599r 3  A9 01                lda #1 		; KILL
00159Br 3  85 rr                sta deadf
00159Dr 3  60                   rts		; EXIT
00159Er 3  60           d00764: rts
00159Fr 3               evnt04:
00159Fr 3  A9 00                lda #0		; ANIMATE
0015A1r 3  20 rr rr             jsr animsp
0015A4r 3  A9 0B                lda #11
0015A6r 3  C5 rr                cmp varn
0015A8r 3  F0 03                beq *+5
0015AAr 3  4C rr rr             jmp e00046
0015ADr 3  A9 FF                lda #255	; REMOVE
0015AFr 3  A0 05                ldy #5
0015B1r 3  91 rr                sta (z80_ix),y
0015B3r 3  60           e00046: rts
0015B4r 3               evnt05:
0015B4r 3  A9 01                lda #1
0015B6r 3  C5 rr                cmp vara
0015B8r 3  F0 03                beq *+5
0015BAr 3  4C rr rr             jmp f00053
0015BDr 3  A9 32                lda #50
0015BFr 3  85 rr                sta z80_d	; GETRANDOM
0015C1r 3  20 rr rr             jsr random
0015C4r 3  85 rr                sta z80_h
0015C6r 3  20 rr rr             jsr imul
0015C9r 3  A5 rr                lda z80_h
0015CBr 3  85 rr                sta varrnd
0015CDr 3  A9 02        f00053: lda #2
0015CFr 3  C5 rr                cmp vara
0015D1r 3  F0 03                beq *+5
0015D3r 3  4C rr rr             jmp f00104
0015D6r 3  A9 1E                lda #30
0015D8r 3  85 rr                sta z80_d	; GETRANDOM
0015DAr 3  20 rr rr             jsr random
0015DDr 3  85 rr                sta z80_h
0015DFr 3  20 rr rr             jsr imul
0015E2r 3  A5 rr                lda z80_h
0015E4r 3  85 rr                sta varrnd
0015E6r 3  A9 03        f00104: lda #3
0015E8r 3  C5 rr                cmp vara
0015EAr 3  F0 03                beq *+5
0015ECr 3  4C rr rr             jmp f00155
0015EFr 3  A9 0A                lda #10
0015F1r 3  85 rr                sta z80_d	; GETRANDOM
0015F3r 3  20 rr rr             jsr random
0015F6r 3  85 rr                sta z80_h
0015F8r 3  20 rr rr             jsr imul
0015FBr 3  A5 rr                lda z80_h
0015FDr 3  85 rr                sta varrnd
0015FFr 3  A9 05        f00155: lda #5
001601r 3  C5 rr                cmp varrnd
001603r 3  F0 03                beq *+5
001605r 3  4C rr rr             jmp f00804
001608r 3  A5 rr                lda varo
00160Ar 3  C5 rr                cmp varm
00160Cr 3  90 03                bcc *+5
00160Er 3  4C rr rr             jmp f00804
001611r 3  A5 rr                lda clock	; RANDOMIZE
001613r 3  85 rr                sta seed
001615r 3  A9 04                lda #4
001617r 3  85 rr                sta z80_d	; GETRANDOM
001619r 3  20 rr rr             jsr random
00161Cr 3  85 rr                sta z80_h
00161Er 3  20 rr rr             jsr imul
001621r 3  A5 rr                lda z80_h
001623r 3  85 rr                sta varrnd
001625r 3  A5 rr                lda varr
001627r 3  85 rr                sta vari
001629r 3  A9 03                lda #3
00162Br 3  C5 rr                cmp varrnd
00162Dr 3  F0 03                beq *+5
00162Fr 3  4C rr rr             jmp f00283
001632r 3  A9 3F                lda #63
001634r 3  C5 rr                cmp vari
001636r 3  90 03                bcc *+5
001638r 3  4C rr rr             jmp f00283
00163Br 3  60                   rts		; EXIT
00163Cr 3  A5 rr        f00283: lda vari
00163Er 3  0A                   asl a
00163Fr 3  0A                   asl a
001640r 3  85 rr                sta vari
001642r 3  A9 02                lda #2
001644r 3  C5 rr                cmp varrnd
001646r 3  F0 03                beq *+5
001648r 3  4C rr rr             jmp f00337
00164Br 3  A9 3F                lda #63
00164Dr 3  C5 rr                cmp vari
00164Fr 3  90 03                bcc *+5
001651r 3  4C rr rr             jmp f00337
001654r 3  60                   rts		; EXIT
001655r 3  A5 rr        f00337: lda vari
001657r 3  0A                   asl a
001658r 3  0A                   asl a
001659r 3  85 rr                sta vari
00165Br 3  A9 01                lda #1
00165Dr 3  C5 rr                cmp varrnd
00165Fr 3  F0 03                beq *+5
001661r 3  4C rr rr             jmp f00392
001664r 3  A9 3F                lda #63
001666r 3  C5 rr                cmp vari
001668r 3  90 03                bcc *+5
00166Ar 3  4C rr rr             jmp f00392
00166Dr 3  60                   rts		; EXIT
00166Er 3  A5 rr        f00392: lda vari
001670r 3  0A                   asl a
001671r 3  0A                   asl a
001672r 3  85 rr                sta vari
001674r 3  A9 00                lda #0
001676r 3  C5 rr                cmp varrnd
001678r 3  F0 03                beq *+5
00167Ar 3  4C rr rr             jmp f00447
00167Dr 3  A9 3F                lda #63
00167Fr 3  C5 rr                cmp vari
001681r 3  90 03                bcc *+5
001683r 3  4C rr rr             jmp f00447
001686r 3  60                   rts		; EXIT
001687r 3  A5 rr        f00447: lda varo
001689r 3  18                   clc
00168Ar 3  69 01                adc #1
00168Cr 3  85 rr                sta varo
00168Er 3  A5 rr                lda varrnd
001690r 3  0A                   asl a
001691r 3  0A                   asl a
001692r 3  0A                   asl a
001693r 3  0A                   asl a
001694r 3  0A                   asl a
001695r 3  85 rr                sta varrnd
001697r 3  A9 30                lda #48
001699r 3  85 rr                sta z80_c
00169Br 3  A5 rr                lda varrnd
00169Dr 3  18                   clc
00169Er 3  65 rr                adc z80_c
0016A0r 3  85 rr                sta varrnd
0016A2r 3  A5 rr                lda varrnd
0016A4r 3  A0 08                ldy #8
0016A6r 3  91 rr                sta (z80_ix),y
0016A8r 3  A9 02                lda #2
0016AAr 3  85 rr                sta z80_d	; GETRANDOM
0016ACr 3  20 rr rr             jsr random
0016AFr 3  85 rr                sta z80_h
0016B1r 3  20 rr rr             jsr imul
0016B4r 3  A5 rr                lda z80_h
0016B6r 3  85 rr                sta varrnd
0016B8r 3  A9 00                lda #0
0016BAr 3  C5 rr                cmp varrnd
0016BCr 3  F0 03                beq *+5
0016BEr 3  4C rr rr             jmp f00621
0016C1r 3  A9 00                lda #0
0016C3r 3  A0 09                ldy #9
0016C5r 3  91 rr                sta (z80_ix),y
0016C7r 3  A9 01                lda #1	; SPAWN
0016C9r 3  85 rr                sta z80_c
0016CBr 3  A9 05                lda #5
0016CDr 3  85 rr                sta z80_b
0016CFr 3  20 rr rr             jsr spawn
0016D2r 3  4C rr rr             jmp f00658
0016D5r 3  A9 A0        f00621: lda #160
0016D7r 3  A0 09                ldy #9
0016D9r 3  91 rr                sta (z80_ix),y
0016DBr 3  A9 03                lda #3	; SPAWN
0016DDr 3  85 rr                sta z80_c
0016DFr 3  A9 05                lda #5
0016E1r 3  85 rr                sta z80_b
0016E3r 3  20 rr rr             jsr spawn
0016E6r 3  A5 rr        f00658: lda spptr	; SPAWNED
0016E8r 3  85 rr                sta z80_x
0016EAr 3  A5 rr                lda spptr+1
0016ECr 3  85 rr                sta z80_i
0016EEr 3  A9 04                lda #4
0016F0r 3  85 rr                sta z80_d	; GETRANDOM
0016F2r 3  20 rr rr             jsr random
0016F5r 3  85 rr                sta z80_h
0016F7r 3  20 rr rr             jsr imul
0016FAr 3  A5 rr                lda z80_h
0016FCr 3  85 rr                sta varrnd
0016FEr 3  A5 rr                lda varrnd
001700r 3  0A                   asl a
001701r 3  85 rr                sta varrnd
001703r 3  A9 02                lda #2
001705r 3  85 rr                sta z80_c
001707r 3  A5 rr                lda varrnd
001709r 3  18                   clc
00170Ar 3  65 rr                adc z80_c
00170Cr 3  85 rr                sta varrnd
00170Er 3  A9 00                lda #0
001710r 3  A0 09                ldy #9
001712r 3  D1 rr                cmp (z80_ix),y
001714r 3  F0 03                beq *+5
001716r 3  4C rr rr             jmp f00789
001719r 3  A5 rr                lda varrnd
00171Br 3  18                   clc
00171Cr 3  69 01                adc #1
00171Er 3  85 rr                sta varrnd
001720r 3  A5 rr        f00789: lda varrnd
001722r 3  A0 06                ldy #6
001724r 3  91 rr                sta (z80_ix),y
001726r 3  60           f00804: rts
001727r 3               evnt06:
001727r 3  A9 00                lda #0
001729r 3  C5 rr                cmp vard
00172Br 3  F0 03                beq *+5
00172Dr 3  4C rr rr             jmp g00030
001730r 3  A9 00                lda #0		; ANIMATE
001732r 3  20 rr rr             jsr animsp
001735r 3  60           g00030: rts
001736r 3               evnt07:
001736r 3  60                   rts
001737r 3               evnt08:
001737r 3  60                   rts
001738r 3               evnt09:
001738r 3  A9 00                lda #0
00173Ar 3  A0 05                ldy #5
00173Cr 3  D1 rr                cmp (z80_ix),y
00173Er 3  F0 03                beq *+5
001740r 3  4C rr rr             jmp j00040
001743r 3  A9 01                lda #1
001745r 3  85 rr                sta varh
001747r 3  A9 00                lda #0
001749r 3  85 rr                sta varb
00174Br 3  A9 01        j00040: lda #1
00174Dr 3  A0 05                ldy #5
00174Fr 3  D1 rr                cmp (z80_ix),y
001751r 3  F0 03                beq *+5
001753r 3  4C rr rr             jmp j00304
001756r 3  A9 30                lda #48
001758r 3  A0 08                ldy #8
00175Ar 3  D1 rr                cmp (z80_ix),y
00175Cr 3  F0 03                beq *+5
00175Er 3  4C rr rr             jmp j00122
001761r 3  A9 02                lda #2
001763r 3  A0 0C                ldy #12
001765r 3  91 rr                sta (z80_ix),y
001767r 3  A9 02                lda #2
001769r 3  85 rr                sta z80_c
00176Br 3  A5 rr                lda varr
00176Dr 3  18                   clc
00176Er 3  65 rr                adc z80_c
001770r 3  85 rr                sta varr
001772r 3  A9 50        j00122: lda #80
001774r 3  A0 08                ldy #8
001776r 3  D1 rr                cmp (z80_ix),y
001778r 3  F0 03                beq *+5
00177Ar 3  4C rr rr             jmp j00182
00177Dr 3  A9 08                lda #8
00177Fr 3  A0 0C                ldy #12
001781r 3  91 rr                sta (z80_ix),y
001783r 3  A9 08                lda #8
001785r 3  85 rr                sta z80_c
001787r 3  A5 rr                lda varr
001789r 3  18                   clc
00178Ar 3  65 rr                adc z80_c
00178Cr 3  85 rr                sta varr
00178Er 3  A9 70        j00182: lda #112
001790r 3  A0 08                ldy #8
001792r 3  D1 rr                cmp (z80_ix),y
001794r 3  F0 03                beq *+5
001796r 3  4C rr rr             jmp j00242
001799r 3  A9 20                lda #32
00179Br 3  A0 0C                ldy #12
00179Dr 3  91 rr                sta (z80_ix),y
00179Fr 3  A9 20                lda #32
0017A1r 3  85 rr                sta z80_c
0017A3r 3  A5 rr                lda varr
0017A5r 3  18                   clc
0017A6r 3  65 rr                adc z80_c
0017A8r 3  85 rr                sta varr
0017AAr 3  A9 90        j00242: lda #144
0017ACr 3  A0 08                ldy #8
0017AEr 3  D1 rr                cmp (z80_ix),y
0017B0r 3  F0 03                beq *+5
0017B2r 3  4C rr rr             jmp j00304
0017B5r 3  A9 80                lda #128
0017B7r 3  A0 0C                ldy #12
0017B9r 3  91 rr                sta (z80_ix),y
0017BBr 3  A9 80                lda #128
0017BDr 3  85 rr                sta z80_c
0017BFr 3  A5 rr                lda varr
0017C1r 3  18                   clc
0017C2r 3  65 rr                adc z80_c
0017C4r 3  85 rr                sta varr
0017C6r 3  A9 03        j00304: lda #3
0017C8r 3  A0 05                ldy #5
0017CAr 3  D1 rr                cmp (z80_ix),y
0017CCr 3  F0 03                beq *+5
0017CEr 3  4C rr rr             jmp j00558
0017D1r 3  A9 30                lda #48
0017D3r 3  A0 08                ldy #8
0017D5r 3  D1 rr                cmp (z80_ix),y
0017D7r 3  F0 03                beq *+5
0017D9r 3  4C rr rr             jmp j00377
0017DCr 3  A9 01                lda #1
0017DEr 3  A0 0C                ldy #12
0017E0r 3  91 rr                sta (z80_ix),y
0017E2r 3  A5 rr                lda varr
0017E4r 3  18                   clc
0017E5r 3  69 01                adc #1
0017E7r 3  85 rr                sta varr
0017E9r 3  A9 50        j00377: lda #80
0017EBr 3  A0 08                ldy #8
0017EDr 3  D1 rr                cmp (z80_ix),y
0017EFr 3  F0 03                beq *+5
0017F1r 3  4C rr rr             jmp j00437
0017F4r 3  A9 04                lda #4
0017F6r 3  A0 0C                ldy #12
0017F8r 3  91 rr                sta (z80_ix),y
0017FAr 3  A9 04                lda #4
0017FCr 3  85 rr                sta z80_c
0017FEr 3  A5 rr                lda varr
001800r 3  18                   clc
001801r 3  65 rr                adc z80_c
001803r 3  85 rr                sta varr
001805r 3  A9 70        j00437: lda #112
001807r 3  A0 08                ldy #8
001809r 3  D1 rr                cmp (z80_ix),y
00180Br 3  F0 03                beq *+5
00180Dr 3  4C rr rr             jmp j00497
001810r 3  A9 10                lda #16
001812r 3  A0 0C                ldy #12
001814r 3  91 rr                sta (z80_ix),y
001816r 3  A9 10                lda #16
001818r 3  85 rr                sta z80_c
00181Ar 3  A5 rr                lda varr
00181Cr 3  18                   clc
00181Dr 3  65 rr                adc z80_c
00181Fr 3  85 rr                sta varr
001821r 3  A9 90        j00497: lda #144
001823r 3  A0 08                ldy #8
001825r 3  D1 rr                cmp (z80_ix),y
001827r 3  F0 03                beq *+5
001829r 3  4C rr rr             jmp j00558
00182Cr 3  A9 40                lda #64
00182Er 3  A0 0C                ldy #12
001830r 3  91 rr                sta (z80_ix),y
001832r 3  A9 40                lda #64
001834r 3  85 rr                sta z80_c
001836r 3  A5 rr                lda varr
001838r 3  18                   clc
001839r 3  65 rr                adc z80_c
00183Br 3  85 rr                sta varr
00183Dr 3  60           j00558: rts
00183Er 3               evnt10:
00183Er 3  A9 00                lda #0
001840r 3  C5 rr                cmp scno
001842r 3  F0 03                beq *+5
001844r 3  4C rr rr             jmp k00757
001847r 3  A9 19                lda #25
001849r 3  C5 rr                cmp vart
00184Br 3  F0 03                beq *+5
00184Dr 3  4C rr rr             jmp k00325
001850r 3  A5 rr                lda vars
001852r 3  38                   sec
001853r 3  E9 01                sbc #1
001855r 3  85 rr                sta vars
001857r 3  A9 FF                lda #255
001859r 3  C5 rr                cmp vars
00185Br 3  F0 03                beq *+5
00185Dr 3  4C rr rr             jmp k00084
001860r 3  A9 01                lda #1		; ENDGAME
001862r 3  85 rr                sta gamwon
001864r 3  60                   rts		; EXIT
001865r 3  A9 00        k00084: lda #0
001867r 3  85 rr                sta vart
001869r 3  A5 rr                lda vars
00186Br 3  85 rr                sta vari
00186Dr 3  A5 rr                lda vari
00186Fr 3  4A                   lsr a
001870r 3  4A                   lsr a
001871r 3  4A                   lsr a
001872r 3  85 rr                sta vari
001874r 3  A9 15                lda #21		; AT
001876r 3  85 rr                sta chary
001878r 3  A9 0E                lda #14
00187Ar 3  85 rr                sta charx
00187Cr 3  A9 00                lda #0
00187Er 3  C5 rr                cmp vari
001880r 3  90 03                bcc *+5
001882r 3  4C rr rr             jmp k00195
001885r 3  A5 rr                lda vari 	; REPEAT
001887r 3  85 rr                sta loopa
001889r 3  A9 03        k00166: lda #3 		; PUTBLOCK
00188Br 3  20 rr rr             jsr pbpattr
00188Er 3  C6 rr                dec loopa	; ENDREPEAT
001890r 3  F0 03                beq :+
001892r 3  4C rr rr             jmp k00166
001895r 3               :
001895r 3  A5 rr        k00195: lda vars
001897r 3  85 rr                sta varj
001899r 3  A5 rr                lda vari
00189Br 3  0A                   asl a
00189Cr 3  0A                   asl a
00189Dr 3  0A                   asl a
00189Er 3  85 rr                sta vari
0018A0r 3  A5 rr                lda vari
0018A2r 3  85 rr                sta z80_c
0018A4r 3  A5 rr                lda varj
0018A6r 3  38                   sec
0018A7r 3  E5 rr                sbc z80_c
0018A9r 3  85 rr                sta varj
0018ABr 3  A5 rr                lda varj
0018ADr 3  4A                   lsr a
0018AEr 3  85 rr                sta varj
0018B0r 3  A9 00                lda #0
0018B2r 3  C5 rr                cmp varj
0018B4r 3  90 03                bcc *+5
0018B6r 3  4C rr rr             jmp k00312
0018B9r 3  A9 03                lda #3
0018BBr 3  85 rr                sta z80_c
0018BDr 3  A5 rr                lda varj
0018BFr 3  18                   clc
0018C0r 3  65 rr                adc z80_c
0018C2r 3  85 rr                sta varj
0018C4r 3  A5 rr                lda varj 		; PUTBLOCK
0018C6r 3  20 rr rr             jsr pbpattr
0018C9r 3  A9 30        k00312: lda #48 		; PUTBLOCK
0018CBr 3  20 rr rr             jsr pbpattr
0018CEr 3  A5 rr        k00325: lda vart
0018D0r 3  18                   clc
0018D1r 3  69 01                adc #1
0018D3r 3  85 rr                sta vart
0018D5r 3  A9 00                lda #0
0018D7r 3  C5 rr                cmp varl
0018D9r 3  90 03                bcc *+5
0018DBr 3  4C rr rr             jmp k00372
0018DEr 3  A5 rr                lda varl
0018E0r 3  38                   sec
0018E1r 3  E9 01                sbc #1
0018E3r 3  85 rr                sta varl
0018E5r 3  A9 01        k00372: lda #1
0018E7r 3  C5 rr                cmp varb
0018E9r 3  F0 03                beq *+5
0018EBr 3  4C rr rr             jmp k00608
0018EEr 3  A9 02                lda #2	; SPAWN
0018F0r 3  85 rr                sta z80_c
0018F2r 3  A9 0C                lda #12
0018F4r 3  85 rr                sta z80_b
0018F6r 3  20 rr rr             jsr spawn
0018F9r 3  A5 rr                lda spptr	; SPAWNED
0018FBr 3  85 rr                sta z80_x
0018FDr 3  A5 rr                lda spptr+1
0018FFr 3  85 rr                sta z80_i
001901r 3  A5 rr                lda varq
001903r 3  A0 09                ldy #9
001905r 3  91 rr                sta (z80_ix),y
001907r 3  A9 01                lda #1
001909r 3  C5 rr                cmp varh
00190Br 3  F0 03                beq *+5
00190Dr 3  4C rr rr             jmp k00516
001910r 3  A9 10                lda #16
001912r 3  85 rr                sta z80_c
001914r 3  A0 09                ldy #9
001916r 3  B1 rr                lda (z80_ix),y
001918r 3  18                   clc
001919r 3  65 rr                adc z80_c
00191Br 3  A0 09                ldy #9
00191Dr 3  91 rr                sta (z80_ix),y
00191Fr 3  A9 00                lda #0
001921r 3  A0 07                ldy #7
001923r 3  91 rr                sta (z80_ix),y
001925r 3  4C rr rr             jmp k00565
001928r 3  A9 10        k00516: lda #16
00192Ar 3  85 rr                sta z80_c
00192Cr 3  A0 09                ldy #9
00192Er 3  B1 rr                lda (z80_ix),y
001930r 3  38                   sec
001931r 3  E5 rr                sbc z80_c
001933r 3  A0 09                ldy #9
001935r 3  91 rr                sta (z80_ix),y
001937r 3  A9 04                lda #4
001939r 3  A0 07                ldy #7
00193Br 3  91 rr                sta (z80_ix),y
00193Dr 3  A5 rr        k00565: lda varp
00193Fr 3  A0 08                ldy #8
001941r 3  91 rr                sta (z80_ix),y
001943r 3  A5 rr                lda ogptr	; ENDSPRITE
001945r 3  85 rr                sta z80_x
001947r 3  A5 rr                lda ogptr+1
001949r 3  85 rr                sta z80_i
00194Br 3  A9 00                lda #0
00194Dr 3  85 rr                sta varb
00194Fr 3  A9 00        k00608: lda #0
001951r 3  C5 rr                cmp varz
001953r 3  F0 03                beq *+5
001955r 3  4C rr rr             jmp k00757
001958r 3  A9 14                lda #20		; AT
00195Ar 3  85 rr                sta chary
00195Cr 3  A9 0E                lda #14
00195Er 3  85 rr                sta charx
001960r 3  A9 00                lda #0
001962r 3  85 rr                sta varc
001964r 3  A9 05                lda #5 	; REPEAT
001966r 3  85 rr                sta loopa
001968r 3  A5 rr        k00662: lda varc
00196Ar 3  C5 rr                cmp numlif
00196Cr 3  90 03                bcc *+5
00196Er 3  4C rr rr             jmp k00697
001971r 3  A9 0C                lda #12 		; PUTBLOCK
001973r 3  20 rr rr             jsr pbpattr
001976r 3  4C rr rr             jmp k00709
001979r 3  A9 30        k00697: lda #48 		; PUTBLOCK
00197Br 3  20 rr rr             jsr pbpattr
00197Er 3  A5 rr        k00709: lda varc
001980r 3  18                   clc
001981r 3  69 01                adc #1
001983r 3  85 rr                sta varc
001985r 3  C6 rr                dec loopa	; ENDREPEAT
001987r 3  F0 03                beq :+
001989r 3  4C rr rr             jmp k00662
00198Cr 3               :
00198Cr 3  A9 00                lda #0
00198Er 3  85 rr                sta varo
001990r 3  A9 01                lda #1
001992r 3  85 rr                sta varz
001994r 3  60           k00757: rts
001995r 3               evnt11:
001995r 3  A9 80                lda #128
001997r 3  C5 rr                cmp varo
001999r 3  90 03                bcc *+5
00199Br 3  4C rr rr             jmp l00027
00199Er 3  A9 00                lda #0
0019A0r 3  85 rr                sta varo
0019A2r 3  A9 00        l00027: lda #0
0019A4r 3  C5 rr                cmp scno
0019A6r 3  F0 03                beq *+5
0019A8r 3  4C rr rr             jmp l00275
0019ABr 3  A9 0C                lda #12
0019ADr 3  C5 rr                cmp varn
0019AFr 3  F0 03                beq *+5
0019B1r 3  4C rr rr             jmp l00073
0019B4r 3  A9 00                lda #0
0019B6r 3  85 rr                sta varn
0019B8r 3  4C rr rr             jmp l00089
0019BBr 3  A5 rr        l00073: lda varn
0019BDr 3  18                   clc
0019BEr 3  69 01                adc #1
0019C0r 3  85 rr                sta varn
0019C2r 3  A9 04        l00089: lda #4
0019C4r 3  C5 rr                cmp vard
0019C6r 3  F0 03                beq *+5
0019C8r 3  4C rr rr             jmp l00118
0019CBr 3  A9 00                lda #0
0019CDr 3  85 rr                sta vard
0019CFr 3  4C rr rr             jmp l00133
0019D2r 3  A5 rr        l00118: lda vard
0019D4r 3  18                   clc
0019D5r 3  69 01                adc #1
0019D7r 3  85 rr                sta vard
0019D9r 3  A9 0A        l00133: lda #10
0019DBr 3  C5 rr                cmp varf
0019DDr 3  F0 03                beq *+5
0019DFr 3  4C rr rr             jmp l00178
0019E2r 3  A5 rr                lda varg
0019E4r 3  18                   clc
0019E5r 3  69 01                adc #1
0019E7r 3  85 rr                sta varg
0019E9r 3  A9 01                lda #1
0019EBr 3  85 rr                sta varf
0019EDr 3  4C rr rr             jmp l00194
0019F0r 3  A5 rr        l00178: lda varf
0019F2r 3  18                   clc
0019F3r 3  69 01                adc #1
0019F5r 3  85 rr                sta varf
0019F7r 3  A9 32        l00194: lda #50
0019F9r 3  C5 rr                cmp varg
0019FBr 3  F0 03                beq *+5
0019FDr 3  4C rr rr             jmp l00270
001A00r 3  A5 rr                lda varm
001A02r 3  18                   clc
001A03r 3  69 01                adc #1
001A05r 3  85 rr                sta varm
001A07r 3  A9 03                lda #3
001A09r 3  C5 rr                cmp vara
001A0Br 3  90 02                bcc *+4
001A0Dr 3  D0 03                bne *+5
001A0Fr 3  4C rr rr             jmp l00262
001A12r 3  A5 rr                lda vara
001A14r 3  18                   clc
001A15r 3  69 01                adc #1
001A17r 3  85 rr                sta vara
001A19r 3  A9 01        l00262: lda #1
001A1Br 3  85 rr                sta varg
001A1Dr 3  4C rr rr     l00270: jmp l00319
001A20r 3  A9 04        l00275: lda #4
001A22r 3  C5 rr                cmp vard
001A24r 3  F0 03                beq *+5
001A26r 3  4C rr rr             jmp l00304
001A29r 3  A9 00                lda #0
001A2Br 3  85 rr                sta vard
001A2Dr 3  4C rr rr             jmp l00319
001A30r 3  A5 rr        l00304: lda vard
001A32r 3  18                   clc
001A33r 3  69 01                adc #1
001A35r 3  85 rr                sta vard
001A37r 3  60           l00319: rts
001A38r 3               evnt12:
001A38r 3  A9 00                lda #0 	; PAPER
001A3Ar 3  0A                   asl a
001A3Br 3  0A                   asl a
001A3Cr 3  0A                   asl a
001A3Dr 3  0A                   asl a
001A3Er 3  85 rr                sta tmp
001A40r 3  AD 0F 90             lda RegF
001A43r 3  29 8F                and #%10001111
001A45r 3  05 rr                ora tmp
001A47r 3  8D 0F 90             sta RegF
001A4Ar 3  20 rr rr             jsr cls		; CLS
001A4Dr 3  A9 01                lda #1 	; INK
001A4Fr 3  8D rr rr             sta fontcol
001A52r 3  A9 15                lda #21		; AT
001A54r 3  85 rr                sta chary
001A56r 3  A9 0F                lda #15
001A58r 3  85 rr                sta charx
001A5Ar 3  A9 15                lda #21		; PRINT
001A5Cr 3  20 rr rr             jsr dmsg
001A5Fr 3  A9 16                lda #22		; LOAD
001A61r 3  20 rr rr             jsr loadfile
001A64r 3  A9 17                lda #23		; LOAD
001A66r 3  20 rr rr             jsr loadfile
001A69r 3  A9 00                lda #0
001A6Br 3  C5 rr                cmp varq
001A6Dr 3  F0 03                beq *+5
001A6Fr 3  4C rr rr             jmp m00148
001A72r 3  A9 18                lda #24		; LOAD
001A74r 3  20 rr rr             jsr loadfile
001A77r 3  A9 01                lda #1
001A79r 3  85 rr                sta varq
001A7Br 3  20 rr rr     m00148: jsr prskey	; WAITKEY
001A7Er 3  A9 00                lda #0
001A80r 3  20 rr rr             jsr user
001A83r 3  20 rr rr             jsr cls		; CLS
001A86r 3  A9 02                lda #2 	; INK
001A88r 3  8D rr rr             sta fontcol
001A8Br 3  A9 02                lda #2		; AT
001A8Dr 3  85 rr                sta chary
001A8Fr 3  A9 09                lda #9
001A91r 3  85 rr                sta charx
001A93r 3  A9 03                lda #3  	; MESSAGE
001A95r 3  20 rr rr             jsr dmsg
001A98r 3  A9 07                lda #7 	; INK
001A9Ar 3  8D rr rr             sta fontcol
001A9Dr 3  A9 02                lda #2		; AT
001A9Fr 3  85 rr                sta chary
001AA1r 3  A9 0A                lda #10
001AA3r 3  85 rr                sta charx
001AA5r 3  A9 04                lda #4  	; MESSAGE
001AA7r 3  20 rr rr             jsr dmsg
001AAAr 3  A9 07                lda #7 	; INK
001AACr 3  8D rr rr             sta fontcol
001AAFr 3  A9 02                lda #2		; AT
001AB1r 3  85 rr                sta chary
001AB3r 3  A9 0B                lda #11
001AB5r 3  85 rr                sta charx
001AB7r 3  A9 05                lda #5  	; MESSAGE
001AB9r 3  20 rr rr             jsr dmsg
001ABCr 3  A9 02                lda #2 	; INK
001ABEr 3  8D rr rr             sta fontcol
001AC1r 3  A9 03                lda #3		; AT
001AC3r 3  85 rr                sta chary
001AC5r 3  A9 09                lda #9
001AC7r 3  85 rr                sta charx
001AC9r 3  A9 06                lda #6  	; MESSAGE
001ACBr 3  20 rr rr             jsr dmsg
001ACEr 3  A9 07                lda #7 	; INK
001AD0r 3  8D rr rr             sta fontcol
001AD3r 3  A9 03                lda #3		; AT
001AD5r 3  85 rr                sta chary
001AD7r 3  A9 0A                lda #10
001AD9r 3  85 rr                sta charx
001ADBr 3  A9 07                lda #7  	; MESSAGE
001ADDr 3  20 rr rr             jsr dmsg
001AE0r 3  A9 07                lda #7 	; INK
001AE2r 3  8D rr rr             sta fontcol
001AE5r 3  A9 03                lda #3		; AT
001AE7r 3  85 rr                sta chary
001AE9r 3  A9 0B                lda #11
001AEBr 3  85 rr                sta charx
001AEDr 3  A9 08                lda #8  	; MESSAGE
001AEFr 3  20 rr rr             jsr dmsg
001AF2r 3  A9 04                lda #4 	; INK
001AF4r 3  8D rr rr             sta fontcol
001AF7r 3  A9 04                lda #4		; AT
001AF9r 3  85 rr                sta chary
001AFBr 3  A9 09                lda #9
001AFDr 3  85 rr                sta charx
001AFFr 3  A9 09                lda #9  	; MESSAGE
001B01r 3  20 rr rr             jsr dmsg
001B04r 3  A9 06                lda #6 	; INK
001B06r 3  8D rr rr             sta fontcol
001B09r 3  A9 04                lda #4		; AT
001B0Br 3  85 rr                sta chary
001B0Dr 3  A9 0A                lda #10
001B0Fr 3  85 rr                sta charx
001B11r 3  A9 0A                lda #10  	; MESSAGE
001B13r 3  20 rr rr             jsr dmsg
001B16r 3  A9 04                lda #4 	; INK
001B18r 3  8D rr rr             sta fontcol
001B1Br 3  A9 04                lda #4		; AT
001B1Dr 3  85 rr                sta chary
001B1Fr 3  A9 0B                lda #11
001B21r 3  85 rr                sta charx
001B23r 3  A9 0B                lda #11  	; MESSAGE
001B25r 3  20 rr rr             jsr dmsg
001B28r 3  A9 06                lda #6 	; INK
001B2Ar 3  8D rr rr             sta fontcol
001B2Dr 3  A9 05                lda #5		; AT
001B2Fr 3  85 rr                sta chary
001B31r 3  A9 09                lda #9
001B33r 3  85 rr                sta charx
001B35r 3  A9 0C                lda #12  	; MESSAGE
001B37r 3  20 rr rr             jsr dmsg
001B3Ar 3  A9 06                lda #6 	; INK
001B3Cr 3  8D rr rr             sta fontcol
001B3Fr 3  A9 05                lda #5		; AT
001B41r 3  85 rr                sta chary
001B43r 3  A9 0A                lda #10
001B45r 3  85 rr                sta charx
001B47r 3  A9 0D                lda #13  	; MESSAGE
001B49r 3  20 rr rr             jsr dmsg
001B4Cr 3  A9 02                lda #2 	; INK
001B4Er 3  8D rr rr             sta fontcol
001B51r 3  A9 00                lda #0		; AT
001B53r 3  85 rr                sta chary
001B55r 3  A9 05                lda #5
001B57r 3  85 rr                sta charx
001B59r 3  A9 14                lda #20  	; MESSAGE
001B5Br 3  20 rr rr             jsr dmsg
001B5Er 3  A9 04                lda #4		; AT
001B60r 3  85 rr                sta chary
001B62r 3  A9 08                lda #8
001B64r 3  85 rr                sta charx
001B66r 3  A9 0E                lda #14  	; MESSAGE
001B68r 3  20 rr rr             jsr dmsg
001B6Br 3  A9 06                lda #6		; AT
001B6Dr 3  85 rr                sta chary
001B6Fr 3  A9 07                lda #7
001B71r 3  85 rr                sta charx
001B73r 3  A9 0E                lda #14  	; MESSAGE
001B75r 3  20 rr rr             jsr dmsg
001B78r 3  A9 08                lda #8		; AT
001B7Ar 3  85 rr                sta chary
001B7Cr 3  A9 08                lda #8
001B7Er 3  85 rr                sta charx
001B80r 3  A9 0E                lda #14  	; MESSAGE
001B82r 3  20 rr rr             jsr dmsg
001B85r 3  A9 01                lda #1 	; INK
001B87r 3  8D rr rr             sta fontcol
001B8Ar 3  A9 0A                lda #10		; AT
001B8Cr 3  85 rr                sta chary
001B8Er 3  A9 03                lda #3
001B90r 3  85 rr                sta charx
001B92r 3  A9 19                lda #25		; PRINT
001B94r 3  20 rr rr             jsr dmsg
001B97r 3  A0 00                ldy #0		; SHOWHIGH
001B99r 3  A9 06                lda #6
001B9Br 3  85 rr                sta z80_b
001B9Dr 3  20 rr rr             jsr dhisc
001BA0r 3  A9 07                lda #7 	; INK
001BA2r 3  8D rr rr             sta fontcol
001BA5r 3  A9 0E                lda #14		; AT
001BA7r 3  85 rr                sta chary
001BA9r 3  A9 03                lda #3
001BABr 3  85 rr                sta charx
001BADr 3  A9 1A                lda #26		; PRINT
001BAFr 3  20 rr rr             jsr dmsg
001BB2r 3  A9 05                lda #5 	; INK
001BB4r 3  8D rr rr             sta fontcol
001BB7r 3  A9 10                lda #16		; AT
001BB9r 3  85 rr                sta chary
001BBBr 3  A9 03                lda #3
001BBDr 3  85 rr                sta charx
001BBFr 3  A9 1B                lda #27		; PRINT
001BC1r 3  20 rr rr             jsr dmsg
001BC4r 3  A9 04                lda #4 	; INK
001BC6r 3  8D rr rr             sta fontcol
001BC9r 3  A9 15                lda #21		; AT
001BCBr 3  85 rr                sta chary
001BCDr 3  A9 03                lda #3
001BCFr 3  85 rr                sta charx
001BD1r 3  A9 1C                lda #28		; PRINT
001BD3r 3  20 rr rr             jsr dmsg
001BD6r 3               
001BD6r 3               rtcon:			; CONTROLMENU
001BD6r 3  20 rr rr             jsr vsync
001BD9r 3  A9 00                lda #0
001BDBr 3  85 rr                sta contrl
001BDDr 3  AD rr rr             lda keys+7
001BE0r 3  20 rr rr             jsr ktest
001BE3r 3  90 0C                bcc rtcon1
001BE5r 3  A9 01                lda #1
001BE7r 3  85 rr                sta contrl
001BE9r 3  AD rr rr             lda keys+8
001BECr 3  20 rr rr             jsr ktest
001BEFr 3  B0 E5                bcs rtcon
001BF1r 3                       rtcon1:
001BF1r 3  20 rr rr             jsr prskey	; WAITKEY
001BF4r 3  60                   rts
001BF5r 3               evnt13:
001BF5r 3  20 rr rr             jsr cls		; CLS
001BF8r 3  A9 0A                lda #10
001BFAr 3  85 rr                sta chary
001BFCr 3  A9 02                lda #2 	; INK
001BFEr 3  8D rr rr             sta fontcol
001C01r 3  A9 02                lda #2
001C03r 3  85 rr                sta charx
001C05r 3  A9 02                lda #2  	; MESSAGE
001C07r 3  20 rr rr             jsr dmsg
001C0Ar 3  A9 64                lda #100 	; DELAY
001C0Cr 3  20 rr rr             jsr delay
001C0Fr 3  A9 19                lda #25
001C11r 3  85 rr                sta vart
001C13r 3  A9 3C                lda #60
001C15r 3  85 rr                sta vars
001C17r 3  A5 rr                lda vars
001C19r 3  85 rr                sta vari
001C1Br 3  A5 rr                lda vari
001C1Dr 3  4A                   lsr a
001C1Er 3  4A                   lsr a
001C1Fr 3  4A                   lsr a
001C20r 3  85 rr                sta vari
001C22r 3  A5 rr                lda vari 	; REPEAT
001C24r 3  85 rr                sta loopa
001C26r 3  C6 rr        n00112: dec loopa	; ENDREPEAT
001C28r 3  F0 03                beq :+
001C2Ar 3  4C rr rr             jmp n00112
001C2Dr 3               :
001C2Dr 3  A5 rr                lda vars
001C2Fr 3  85 rr                sta varj
001C31r 3  A5 rr                lda vari
001C33r 3  85 rr                sta z80_c
001C35r 3  A5 rr                lda varj
001C37r 3  38                   sec
001C38r 3  E5 rr                sbc z80_c
001C3Ar 3  85 rr                sta varj
001C3Cr 3  A9 00                lda #0
001C3Er 3  C5 rr                cmp varj
001C40r 3  90 03                bcc *+5
001C42r 3  4C rr rr             jmp n00215
001C45r 3  A9 03                lda #3
001C47r 3  85 rr                sta z80_c
001C49r 3  A5 rr                lda varj
001C4Br 3  18                   clc
001C4Cr 3  65 rr                adc z80_c
001C4Er 3  85 rr                sta varj
001C50r 3  A5 rr                lda varj 		; PUTBLOCK
001C52r 3  20 rr rr             jsr pbpattr
001C55r 3  A9 00        n00215: lda #0
001C57r 3                       ; BORDER command
001C57r 3  29 07                and #7
001C59r 3  85 rr                sta tmp
001C5Br 3  AD 0F 90             lda RegF
001C5Er 3  29 F8                and #%11111000
001C60r 3  05 rr                ora tmp
001C62r 3  8D 0F 90             sta RegF
001C65r 3  A9 07                lda #7 	; INK
001C67r 3  8D rr rr             sta fontcol
001C6Ar 3  20 rr rr             jsr cls		; CLS
001C6Dr 3  A9 00                lda #0
001C6Fr 3  85 rr                sta varb
001C71r 3  A9 00                lda #0
001C73r 3  85 rr                sta varl
001C75r 3  A9 01                lda #1
001C77r 3  85 rr                sta vare
001C79r 3  A9 03                lda #3
001C7Br 3  85 rr                sta numlif
001C7Dr 3  A9 01                lda #1
001C7Fr 3  85 rr                sta varm
001C81r 3  A9 00                lda #0
001C83r 3  85 rr                sta varr
001C85r 3  A9 01                lda #1
001C87r 3  85 rr                sta vara
001C89r 3  A9 01                lda #1
001C8Br 3  85 rr                sta varf
001C8Dr 3  A9 01                lda #1
001C8Fr 3  85 rr                sta varg
001C91r 3  A9 00                lda #0
001C93r 3  85 rr                sta varq
001C95r 3  60                   rts
001C96r 3               evnt14:
001C96r 3  A9 00                lda #0
001C98r 3  C5 rr                cmp scno
001C9Ar 3  F0 03                beq *+5
001C9Cr 3  4C rr rr             jmp o00107
001C9Fr 3  A9 06                lda #6 	; INK
001CA1r 3  8D rr rr             sta fontcol
001CA4r 3  A9 15                lda #21		; AT
001CA6r 3  85 rr                sta chary
001CA8r 3  A9 01                lda #1
001CAAr 3  85 rr                sta charx
001CACr 3  A9 00                lda #0  	; MESSAGE
001CAEr 3  20 rr rr             jsr dmsg
001CB1r 3  A9 01                lda #1 	; INK
001CB3r 3  8D rr rr             sta fontcol
001CB6r 3  A9 15                lda #21		; AT
001CB8r 3  85 rr                sta chary
001CBAr 3  A9 07                lda #7
001CBCr 3  85 rr                sta charx
001CBEr 3  A0 00                ldy #0		; SHOWSCORE
001CC0r 3  A9 06                lda #6
001CC2r 3  85 rr                sta z80_b
001CC4r 3  20 rr rr             jsr dscor
001CC7r 3  A9 00        o00107: lda #0
001CC9r 3  85 rr                sta varz
001CCBr 3  A9 01                lda #1
001CCDr 3  20 rr rr             jsr user
001CD0r 3  60                   rts
001CD1r 3               evnt15:
001CD1r 3  60                   rts
001CD2r 3               evnt16:
001CD2r 3  A9 02                lda #2
001CD4r 3  A0 06                ldy #6
001CD6r 3  91 rr                sta (z80_ix),y
001CD8r 3  A9 64                lda #100		; BEEP
001CDAr 3  8D rr rr             sta sndtyp
001CDDr 3  A9 00                lda #0
001CDFr 3  85 rr                sta varr
001CE1r 3  60                   rts
001CE2r 3               evnt17:
001CE2r 3  A9 02                lda #2
001CE4r 3  20 rr rr             jsr user
001CE7r 3  A9 09                lda #9		; AT
001CE9r 3  85 rr                sta chary
001CEBr 3  A9 06                lda #6
001CEDr 3  85 rr                sta charx
001CEFr 3  A9 1D                lda #29		; PRINT
001CF1r 3  20 rr rr             jsr dmsg
001CF4r 3  A9 0B                lda #11		; AT
001CF6r 3  85 rr                sta chary
001CF8r 3  A9 06                lda #6
001CFAr 3  85 rr                sta charx
001CFCr 3  A9 1E                lda #30		; PRINT
001CFEr 3  20 rr rr             jsr dmsg
001D01r 3  A9 0C                lda #12		; AT
001D03r 3  85 rr                sta chary
001D05r 3  A9 06                lda #6
001D07r 3  85 rr                sta charx
001D09r 3  A9 1F                lda #31		; PRINT
001D0Br 3  20 rr rr             jsr dmsg
001D0Er 3  A9 01                lda #1
001D10r 3  85 rr                sta vari
001D12r 3  A9 07                lda #7 	; REPEAT
001D14r 3  85 rr                sta loopa
001D16r 3  A5 rr        r00114: lda vari 	; INK
001D18r 3  8D rr rr             sta fontcol
001D1Br 3  A9 0A                lda #10		; AT
001D1Dr 3  85 rr                sta chary
001D1Fr 3  A9 06                lda #6
001D21r 3  85 rr                sta charx
001D23r 3  A9 20                lda #32		; PRINT
001D25r 3  20 rr rr             jsr dmsg
001D28r 3  A9 0B                lda #11		; AT
001D2Ar 3  85 rr                sta chary
001D2Cr 3  A9 08                lda #8
001D2Er 3  85 rr                sta charx
001D30r 3  A0 00                ldy #0		; SHOWSCORE
001D32r 3  A9 06                lda #6
001D34r 3  85 rr                sta z80_b
001D36r 3  20 rr rr             jsr dscor
001D39r 3  A9 19                lda #25 	; DELAY
001D3Br 3  20 rr rr             jsr delay
001D3Er 3  A5 rr                lda vari
001D40r 3  18                   clc
001D41r 3  69 01                adc #1
001D43r 3  85 rr                sta vari
001D45r 3  C6 rr                dec loopa	; ENDREPEAT
001D47r 3  F0 03                beq :+
001D49r 3  4C rr rr             jmp r00114
001D4Cr 3               :
001D4Cr 3  A9 96                lda #150 	; DELAY
001D4Er 3  20 rr rr             jsr delay
001D51r 3  A9 00                lda #0 	; PAPER
001D53r 3  0A                   asl a
001D54r 3  0A                   asl a
001D55r 3  0A                   asl a
001D56r 3  0A                   asl a
001D57r 3  85 rr                sta tmp
001D59r 3  AD 0F 90             lda RegF
001D5Cr 3  29 8F                and #%10001111
001D5Er 3  05 rr                ora tmp
001D60r 3  8D 0F 90             sta RegF
001D63r 3  20 rr rr             jsr cls		; CLS
001D66r 3  A9 01                lda #1 	; INK
001D68r 3  8D rr rr             sta fontcol
001D6Br 3  A9 15                lda #21		; AT
001D6Dr 3  85 rr                sta chary
001D6Fr 3  A9 0F                lda #15
001D71r 3  85 rr                sta charx
001D73r 3  A9 21                lda #33		; PRINT
001D75r 3  20 rr rr             jsr dmsg
001D78r 3  A9 22                lda #34		; LOAD
001D7Ar 3  20 rr rr             jsr loadfile
001D7Dr 3  A9 23                lda #35		; LOAD
001D7Fr 3  20 rr rr             jsr loadfile
001D82r 3  20 rr rr             jsr prskey	; WAITKEY
001D85r 3  A9 01                lda #1		; ENDGAME
001D87r 3  85 rr                sta gamwon
001D89r 3  60                   rts
001D8Ar 3               evnt18:
001D8Ar 3  A9 02                lda #2
001D8Cr 3  20 rr rr             jsr user
001D8Fr 3  20 rr rr             jsr cls		; CLS
001D92r 3  A9 00                lda #0
001D94r 3  C5 rr                cmp numlif
001D96r 3  90 03                bcc *+5
001D98r 3  4C rr rr             jmp s00335
001D9Br 3  A9 02                lda #2 	; INK
001D9Dr 3  8D rr rr             sta fontcol
001DA0r 3  A9 0C                lda #12		; AT
001DA2r 3  85 rr                sta chary
001DA4r 3  A9 05                lda #5
001DA6r 3  85 rr                sta charx
001DA8r 3  A9 24                lda #36		; PRINT
001DAAr 3  20 rr rr             jsr dmsg
001DADr 3  A9 04                lda #4 	; INK
001DAFr 3  8D rr rr             sta fontcol
001DB2r 3  A9 0F                lda #15		; AT
001DB4r 3  85 rr                sta chary
001DB6r 3  A9 02                lda #2
001DB8r 3  85 rr                sta charx
001DBAr 3  A9 25                lda #37		; PRINT
001DBCr 3  20 rr rr             jsr dmsg
001DBFr 3  A9 11                lda #17		; AT
001DC1r 3  85 rr                sta chary
001DC3r 3  A9 02                lda #2
001DC5r 3  85 rr                sta charx
001DC7r 3  A9 26                lda #38		; PRINT
001DC9r 3  20 rr rr             jsr dmsg
001DCCr 3  A9 01                lda #1		; PRINTMODE
001DCEr 3  85 rr                sta prtmod
001DD0r 3  A9 03                lda #3 	; REPEAT
001DD2r 3  85 rr                sta loopa
001DD4r 3  A9 01        s00162: lda #1
001DD6r 3  85 rr                sta vari
001DD8r 3  A9 07                lda #7 	; REPEAT
001DDAr 3  85 rr                sta loopb
001DDCr 3  A5 rr        s00181: lda vari 	; INK
001DDEr 3  8D rr rr             sta fontcol
001DE1r 3  A9 06                lda #6		; AT
001DE3r 3  85 rr                sta chary
001DE5r 3  A9 02                lda #2
001DE7r 3  85 rr                sta charx
001DE9r 3  A9 27                lda #39		; PRINT
001DEBr 3  20 rr rr             jsr dmsg
001DEEr 3  A9 19                lda #25 	; DELAY
001DF0r 3  20 rr rr             jsr delay
001DF3r 3  A5 rr                lda vari
001DF5r 3  18                   clc
001DF6r 3  69 01                adc #1
001DF8r 3  85 rr                sta vari
001DFAr 3  C6 rr                dec loopb	; ENDREPEAT
001DFCr 3  F0 03                beq :+
001DFEr 3  4C rr rr             jmp s00181
001E01r 3               :
001E01r 3  C6 rr                dec loopa	; ENDREPEAT
001E03r 3  F0 03                beq :+
001E05r 3  4C rr rr             jmp s00162
001E08r 3               :
001E08r 3  A9 00                lda #0		; PRINTMODE
001E0Ar 3  85 rr                sta prtmod
001E0Cr 3  A9 01                lda #1 	; INK
001E0Er 3  8D rr rr             sta fontcol
001E11r 3  A9 15                lda #21		; AT
001E13r 3  85 rr                sta chary
001E15r 3  A9 05                lda #5
001E17r 3  85 rr                sta charx
001E19r 3  A9 28                lda #40		; PRINT
001E1Br 3  20 rr rr             jsr dmsg
001E1Er 3  4C rr rr             jmp s00516
001E21r 3  A9 19        s00335: lda #25 	; DELAY
001E23r 3  20 rr rr             jsr delay
001E26r 3  A9 01                lda #1		; PRINTMODE
001E28r 3  85 rr                sta prtmod
001E2Ar 3  A9 02                lda #2 	; INK
001E2Cr 3  8D rr rr             sta fontcol
001E2Fr 3  A9 06                lda #6		; AT
001E31r 3  85 rr                sta chary
001E33r 3  A9 05                lda #5
001E35r 3  85 rr                sta charx
001E37r 3  A9 29                lda #41		; PRINT
001E39r 3  20 rr rr             jsr dmsg
001E3Cr 3  A9 00                lda #0		; PRINTMODE
001E3Er 3  85 rr                sta prtmod
001E40r 3  A9 02                lda #2 	; INK
001E42r 3  8D rr rr             sta fontcol
001E45r 3  A9 0C                lda #12		; AT
001E47r 3  85 rr                sta chary
001E49r 3  A9 06                lda #6
001E4Br 3  85 rr                sta charx
001E4Dr 3  A9 2A                lda #42		; PRINT
001E4Fr 3  20 rr rr             jsr dmsg
001E52r 3  A9 04                lda #4 	; INK
001E54r 3  8D rr rr             sta fontcol
001E57r 3  A9 0F                lda #15		; AT
001E59r 3  85 rr                sta chary
001E5Br 3  A9 02                lda #2
001E5Dr 3  85 rr                sta charx
001E5Fr 3  A9 2B                lda #43		; PRINT
001E61r 3  20 rr rr             jsr dmsg
001E64r 3  A9 11                lda #17		; AT
001E66r 3  85 rr                sta chary
001E68r 3  A9 02                lda #2
001E6Ar 3  85 rr                sta charx
001E6Cr 3  A9 2C                lda #44		; PRINT
001E6Er 3  20 rr rr             jsr dmsg
001E71r 3  20 rr rr     s00516: jsr cls		; CLS
001E74r 3  A9 02                lda #2		; AT
001E76r 3  85 rr                sta chary
001E78r 3  A9 01                lda #1
001E7Ar 3  85 rr                sta charx
001E7Cr 3  A9 2D                lda #45		; PRINT
001E7Er 3  20 rr rr             jsr dmsg
001E81r 3  A9 04                lda #4		; AT
001E83r 3  85 rr                sta chary
001E85r 3  A9 03                lda #3
001E87r 3  85 rr                sta charx
001E89r 3  A9 2E                lda #46		; PRINT
001E8Br 3  20 rr rr             jsr dmsg
001E8Er 3  A9 08                lda #8		; AT
001E90r 3  85 rr                sta chary
001E92r 3  A9 01                lda #1
001E94r 3  85 rr                sta charx
001E96r 3  A9 2F                lda #47		; PRINT
001E98r 3  20 rr rr             jsr dmsg
001E9Br 3  A9 0A                lda #10		; AT
001E9Dr 3  85 rr                sta chary
001E9Fr 3  A9 02                lda #2
001EA1r 3  85 rr                sta charx
001EA3r 3  A9 30                lda #48		; PRINT
001EA5r 3  20 rr rr             jsr dmsg
001EA8r 3  A9 0B                lda #11		; AT
001EAAr 3  85 rr                sta chary
001EACr 3  A9 03                lda #3
001EAEr 3  85 rr                sta charx
001EB0r 3  A9 31                lda #49		; PRINT
001EB2r 3  20 rr rr             jsr dmsg
001EB5r 3  A9 0D                lda #13		; AT
001EB7r 3  85 rr                sta chary
001EB9r 3  A9 02                lda #2
001EBBr 3  85 rr                sta charx
001EBDr 3  A9 32                lda #50		; PRINT
001EBFr 3  20 rr rr             jsr dmsg
001EC2r 3  A9 0E                lda #14		; AT
001EC4r 3  85 rr                sta chary
001EC6r 3  A9 03                lda #3
001EC8r 3  85 rr                sta charx
001ECAr 3  A9 33                lda #51		; PRINT
001ECCr 3  20 rr rr             jsr dmsg
001ECFr 3  A9 0F                lda #15		; AT
001ED1r 3  85 rr                sta chary
001ED3r 3  A9 03                lda #3
001ED5r 3  85 rr                sta charx
001ED7r 3  A9 34                lda #52		; PRINT
001ED9r 3  20 rr rr             jsr dmsg
001EDCr 3  A9 11                lda #17		; AT
001EDEr 3  85 rr                sta chary
001EE0r 3  A9 02                lda #2
001EE2r 3  85 rr                sta charx
001EE4r 3  A9 35                lda #53		; PRINT
001EE6r 3  20 rr rr             jsr dmsg
001EE9r 3  A9 12                lda #18		; AT
001EEBr 3  85 rr                sta chary
001EEDr 3  A9 03                lda #3
001EEFr 3  85 rr                sta charx
001EF1r 3  A9 36                lda #54		; PRINT
001EF3r 3  20 rr rr             jsr dmsg
001EF6r 3  A9 14                lda #20		; AT
001EF8r 3  85 rr                sta chary
001EFAr 3  A9 02                lda #2
001EFCr 3  85 rr                sta charx
001EFEr 3  A9 37                lda #55		; PRINT
001F00r 3  20 rr rr             jsr dmsg
001F03r 3  A9 15                lda #21		; AT
001F05r 3  85 rr                sta chary
001F07r 3  A9 03                lda #3
001F09r 3  85 rr                sta charx
001F0Br 3  A9 38                lda #56		; PRINT
001F0Dr 3  20 rr rr             jsr dmsg
001F10r 3  20 rr rr             jsr prskey	; WAITKEY
001F13r 3  60                   rts
001F14r 3               evnt19:
001F14r 3  60                   rts
001F15r 3               evnt20:
001F15r 3  60                   rts
001F16r 3  60           ptcusr: rts
001F17r 3               data_start:
001F17r 3               msgdat:
001F17r 3  53 43 4F 52          .byte "SCOR",197
001F1Br 3  C5           
001F1Cr 3  47 41 4D 45          .byte "GAME OVE",210
001F20r 3  20 4F 56 45  
001F24r 3  D2           
001F25r 3  57 48 4F 20          .byte "WHO WANTS SOME!!",161
001F29r 3  57 41 4E 54  
001F2Dr 3  53 20 53 4F  
001F36r 3  ED                   .byte 237
001F37r 3  EE                   .byte 238
001F38r 3  EF                   .byte 239
001F39r 3  F0                   .byte 240
001F3Ar 3  F1                   .byte 241
001F3Br 3  F2                   .byte 242
001F3Cr 3  F3                   .byte 243
001F3Dr 3  F4                   .byte 244
001F3Er 3  F5                   .byte 245
001F3Fr 3  F6                   .byte 246
001F40r 3  F7                   .byte 247
001F41r 3  F8                   .byte 248
001F42r 3  35 20 50 4F          .byte "5 POINT",211
001F46r 3  49 4E 54 D3  
001F4Ar 3  34 20 50 4F          .byte "4 POINT",211
001F4Er 3  49 4E 54 D3  
001F52r 3  33 20 50 4F          .byte "3 POINT",211
001F56r 3  49 4E 54 D3  
001F5Ar 3  32 20 50 4F          .byte "2 POINT",211
001F5Er 3  49 4E 54 D3  
001F62r 3  47 52 4F 4F          .byte "GROOVY ..",174
001F66r 3  56 59 20 2E  
001F6Ar 3  2E AE        
001F6Cr 3  54 45 41 4D          .byte "TEAM MORIT",218
001F70r 3  20 4D 4F 52  
001F74r 3  49 54 DA     
001F77r 3  4C 4F 41 44          .byte "LOADIN",199
001F7Br 3  49 4E C7     
001F7Er 3  53 4C 41 53          .byte "SLASHER1",196
001F82r 3  48 45 52 31  
001F86r 3  C4           
001F87r 3  53 4C 41 53          .byte "SLASHER1",195
001F8Br 3  48 45 52 31  
001F8Fr 3  C3           
001F90r 3  50 4C 41 59          .byte "PLAYER",177
001F94r 3  45 52 B1     
001F97r 3  48 49 47 48          .byte "HIGHSCORE",186
001F9Br 3  53 43 4F 52  
001F9Fr 3  45 BA        
001FA1r 3  31 2E 20 51          .byte "1. Q A O P SPAC",197
001FA5r 3  20 41 20 4F  
001FA9r 3  20 50 20 53  
001FB1r 3  32 2E 20 4A          .byte "2. JOYSTIC",203
001FB5r 3  4F 59 53 54  
001FB9r 3  49 43 CB     
001FBCr 3  53 45 4C 45          .byte "SELECT CONTROL",211
001FC0r 3  43 54 20 43  
001FC4r 3  4F 4E 54 52  
001FCBr 3  20 20 20 20          .byte "          ",160
001FCFr 3  20 20 20 20  
001FD3r 3  20 20 A0     
001FD6r 3  20 20 20 20          .byte "          ",160
001FDAr 3  20 20 20 20  
001FDEr 3  20 20 A0     
001FE1r 3  20 20 20 20          .byte "          ",160
001FE5r 3  20 20 20 20  
001FE9r 3  20 20 A0     
001FECr 3  20 47 41 4D          .byte " GAME OVER",160
001FF0r 3  45 20 4F 56  
001FF4r 3  45 52 A0     
001FF7r 3  4C 4F 41 44          .byte "LOADIN",199
001FFBr 3  49 4E C7     
001FFEr 3  53 4C 41 53          .byte "SLASHER2",196
002002r 3  48 45 52 32  
002006r 3  C4           
002007r 3  53 4C 41 53          .byte "SLASHER2",195
00200Br 3  48 45 52 32  
00200Fr 3  C3           
002010r 3  59 4F 55 20          .byte "YOU SURVIVE",196
002014r 3  53 55 52 56  
002018r 3  49 56 45 C4  
00201Cr 3  54 52 59 20          .byte "TRY AGAIN TO BEA",212
002020r 3  41 47 41 49  
002024r 3  4E 20 54 4F  
00202Dr 3  54 48 45 20          .byte "THE HIGHSCORE...",174
002031r 3  48 49 47 48  
002035r 3  53 43 4F 52  
00203Er 3  43 4F 4E 47          .byte "CONGRATULATIONS!!",161
002042r 3  52 41 54 55  
002046r 3  4C 41 54 49  
002050r 3  50 52 45 53          .byte "PRESS A KE",217
002054r 3  53 20 41 20  
002058r 3  4B 45 D9     
00205Br 3  59 4F 55 20          .byte "YOU DIED...",174
00205Fr 3  44 49 45 44  
002063r 3  2E 2E 2E AE  
002067r 3  4E 4F 20 53          .byte "NO SCORE.",174
00206Br 3  43 4F 52 45  
00206Fr 3  2E AE        
002071r 3  54 52 59 20          .byte "TRY AGAIN TO BEA",212
002075r 3  41 47 41 49  
002079r 3  4E 20 54 4F  
002082r 3  54 48 45 20          .byte "THE HIGHSCORE...",174
002086r 3  48 49 47 48  
00208Ar 3  53 43 4F 52  
002093r 3  44 45 53 49          .byte "DESIGN + VIC20 PORT",186
002097r 3  47 4E 20 2B  
00209Br 3  20 56 49 43  
0020A7r 3  54 45 41 4D          .byte "TEAM MORIT",218
0020ABr 3  20 4D 4F 52  
0020AFr 3  49 54 DA     
0020B2r 3  54 48 41 4E          .byte "THANKS TO",186
0020B6r 3  4B 53 20 54  
0020BAr 3  4F BA        
0020BCr 3  4D 50 41 47          .byte "MPAGD",186
0020C0r 3  44 BA        
0020C2r 3  4A 4F 4E 41          .byte "JONANTHAN CAULDWEL",204
0020C6r 3  4E 54 48 41  
0020CAr 3  4E 20 43 41  
0020D5r 3  4D 55 53 49          .byte "MUSIC",186
0020D9r 3  43 BA        
0020DBr 3  42 2D 4B 4E          .byte "B-KNO",216
0020DFr 3  4F D8        
0020E1r 3  53 55 54 45          .byte "SUTEKH/EGYTEO",206
0020E5r 3  4B 48 2F 45  
0020E9r 3  47 59 54 45  
0020EFr 3  53 43 52 45          .byte "SCREENS",186
0020F3r 3  45 4E 53 BA  
0020F7r 3  4C 4F 42 CF          .byte "LOB",207
0020FBr 3  54 4F 4F 4C          .byte "TOOLS",186
0020FFr 3  53 BA        
002101r 3  4D 55 4C 54          .byte "MULTIPAIN",212
002105r 3  49 50 41 49  
002109r 3  4E D4        
00210Br 3               nummsg:
00210Br 3  39                   .byte 57
00210Cr 3               chgfx:
00210Cr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002110r 3  00 00 00 00  
002114r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002118r 3  FF FF FF FF  
00211Cr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002120r 3  00 00 00 00  
002124r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255
002128r 3  FF FF FF FF  
00212Cr 3  C0 C0 C0 C0          .byte 192,192,192,192,192,192,192,192
002130r 3  C0 C0 C0 C0  
002134r 3  F0 F0 F0 F0          .byte 240,240,240,240,240,240,240,240
002138r 3  F0 F0 F0 F0  
00213Cr 3  FC FC FC FC          .byte 252,252,252,252,252,252,252,252
002140r 3  FC FC FC FC  
002144r 3  F0 F0 F0 F0          .byte 240,240,240,240,240,240,240,240
002148r 3  F0 F0 F0 F0  
00214Cr 3  F8 F8 F8 F8          .byte 248,248,248,248,248,248,248,248
002150r 3  F8 F8 F8 F8  
002154r 3  FC FC FC FC          .byte 252,252,252,252,252,252,252,252
002158r 3  FC FC FC FC  
00215Cr 3  FE FE FE FE          .byte 254,254,254,254,254,254,254,254
002160r 3  FE FE FE FE  
002164r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002168r 3  00 00 00 00  
00216Cr 3  3C 7E 92 92          .byte 60,126,146,146,108,56,40,16
002170r 3  6C 38 28 10  
002174r 3  1F 20 40 99          .byte 31,32,64,153,149,153,149,128
002178r 3  95 99 95 80  
00217Cr 3  F8 1C 0E 66          .byte 248,28,14,102,87,103,74,5
002180r 3  57 67 4A 05  
002184r 3  80 8E 80 87          .byte 128,142,128,135,128,128,128,173
002188r 3  80 80 80 AD  
00218Cr 3  06 C5 06 85          .byte 6,197,6,133,6,5,10,149
002190r 3  06 05 0A 95  
002194r 3  00 27 6F 6F          .byte 0,39,111,111,24,16,16,25
002198r 3  18 10 10 19  
00219Cr 3  00 F2 FB FB          .byte 0,242,251,251,140,132,132,76
0021A0r 3  8C 84 84 4C  
0021A4r 3  1F 0E 0E 0B          .byte 31,14,14,11,98,120,51,0
0021A8r 3  62 78 33 00  
0021ACr 3  F8 70 70 D0          .byte 248,112,112,208,70,30,204,0
0021B0r 3  46 1E CC 00  
0021B4r 3  CC B9 95 FF          .byte 204,185,149,255,44,60,30,3
0021B8r 3  2C 3C 1E 03  
0021BCr 3  0C 7E BB 93          .byte 12,126,187,147,255,199,186,124
0021C0r 3  FF C7 BA 7C  
0021C4r 3  07 0D 1E 3F          .byte 7,13,30,63,47,29,35,36
0021C8r 3  2F 1D 23 24  
0021CCr 3  E0 50 A8 D4          .byte 224,80,168,212,204,188,196,164
0021D0r 3  CC BC C4 A4  
0021D4r 3  31 13 0E 17          .byte 49,19,14,23,28,12,7,163
0021D8r 3  1C 0C 07 A3  
0021DCr 3  8C D8 70 E8          .byte 140,216,112,232,56,176,224,195
0021E0r 3  38 B0 E0 C3  
0021E4r 3  10 08 38 38          .byte 16,8,56,56,52,56,52,56
0021E8r 3  34 38 34 38  
0021ECr 3  3C FF 3C 7A          .byte 60,255,60,122,52,24,60,102
0021F0r 3  34 18 3C 66  
0021F4r 3  3C 7E FF 7E          .byte 60,126,255,126,186,84,42,0
0021F8r 3  BA 54 2A 00  
0021FCr 3  3C 7E FE 7F          .byte 60,126,254,127,42,85,42,0
002200r 3  2A 55 2A 00  
002204r 3  30 7E FF FD          .byte 48,126,255,253,186,85,162,0
002208r 3  BA 55 A2 00  
00220Cr 3  3E 7F 7E 5F          .byte 62,127,126,95,42,85,42,0
002210r 3  2A 55 2A 00  
002214r 3  55 AA AA FF          .byte 85,170,170,255,170,170,170,255
002218r 3  AA AA AA FF  
00221Cr 3  3C 7E 92 92          .byte 60,126,146,146,108,56,40,16
002220r 3  6C 38 28 10  
002224r 3  7C FE 92 AA          .byte 124,254,146,170,238,254,68,56
002228r 3  EE FE 44 38  
00222Cr 3  3C 6E 7D DF          .byte 60,110,125,223,115,12,28,28
002230r 3  73 0C 1C 1C  
002234r 3  A0 E6 E9 41          .byte 160,230,233,65,226,244,248,168
002238r 3  E2 F4 F8 A8  
00223Cr 3  00 00 01 03          .byte 0,0,1,3,7,7,1,0
002240r 3  07 07 01 00  
002244r 3  78 FE FF FF          .byte 120,254,255,255,255,255,255,30
002248r 3  FF FF FF 1E  
00224Cr 3  00 00 70 F8          .byte 0,0,112,248,252,252,240,0
002250r 3  FC FC F0 00  
002254r 3  00 00 03 0D          .byte 0,0,3,13,19,21,34,37
002258r 3  13 15 22 25  
00225Cr 3  22 21 12 19          .byte 34,33,18,25,12,3,0,0
002260r 3  0C 03 00 00  
002264r 3  00 00 C0 F0          .byte 0,0,192,240,248,184,252,180
002268r 3  F8 B8 FC B4  
00226Cr 3  FC 6C F8 78          .byte 252,108,248,120,176,192,0,0
002270r 3  B0 C0 00 00  
002274r 3  00 E7 18 18          .byte 0,231,24,24,0,0,0,0
002278r 3  00 00 00 00  
00227Cr 3  02 03 1E 3E          .byte 2,3,30,62,62,60,192,64
002280r 3  3E 3C C0 40  
002284r 3  0C 7E BA 93          .byte 12,126,186,147,255,129,70,60
002288r 3  FF 81 46 3C  
00228Cr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002290r 3  00 00 00 00  
002294r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002298r 3  00 00 00 00  
00229Cr 3  02 03 1E 3E          .byte 2,3,30,62,62,60,192,64
0022A0r 3  3E 3C C0 40  
0022A4r 3  0C 7E BA 93          .byte 12,126,186,147,255,129,70,60
0022A8r 3  FF 81 46 3C  
0022ACr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0022B0r 3  00 00 00 00  
0022B4r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0022B8r 3  00 00 00 00  
0022BCr 3               bCol:
0022BCr 3  01                   .byte 1
0022BDr 3  07                   .byte 7
0022BEr 3  01                   .byte 1
0022BFr 3  07                   .byte 7
0022C0r 3  07                   .byte 7
0022C1r 3  07                   .byte 7
0022C2r 3  07                   .byte 7
0022C3r 3  07                   .byte 7
0022C4r 3  07                   .byte 7
0022C5r 3  07                   .byte 7
0022C6r 3  07                   .byte 7
0022C7r 3  03                   .byte 3
0022C8r 3  07                   .byte 7
0022C9r 3  04                   .byte 4
0022CAr 3  04                   .byte 4
0022CBr 3  04                   .byte 4
0022CCr 3  04                   .byte 4
0022CDr 3  07                   .byte 7
0022CEr 3  07                   .byte 7
0022CFr 3  07                   .byte 7
0022D0r 3  07                   .byte 7
0022D1r 3  03                   .byte 3
0022D2r 3  01                   .byte 1
0022D3r 3  02                   .byte 2
0022D4r 3  02                   .byte 2
0022D5r 3  02                   .byte 2
0022D6r 3  02                   .byte 2
0022D7r 3  01                   .byte 1
0022D8r 3  01                   .byte 1
0022D9r 3  05                   .byte 5
0022DAr 3  05                   .byte 5
0022DBr 3  05                   .byte 5
0022DCr 3  05                   .byte 5
0022DDr 3  05                   .byte 5
0022DEr 3  01                   .byte 1
0022DFr 3  01                   .byte 1
0022E0r 3  01                   .byte 1
0022E1r 3  03                   .byte 3
0022E2r 3  03                   .byte 3
0022E3r 3  03                   .byte 3
0022E4r 3  03                   .byte 3
0022E5r 3  03                   .byte 3
0022E6r 3  03                   .byte 3
0022E7r 3  03                   .byte 3
0022E8r 3  03                   .byte 3
0022E9r 3  07                   .byte 7
0022EAr 3  02                   .byte 2
0022EBr 3  02                   .byte 2
0022ECr 3  07                   .byte 7
0022EDr 3  06                   .byte 6
0022EEr 3  06                   .byte 6
0022EFr 3  06                   .byte 6
0022F0r 3  02                   .byte 2
0022F1r 3  05                   .byte 5
0022F2r 3               bprop:
0022F2r 3  00                   .byte 0
0022F3r 3  00                   .byte 0
0022F4r 3  05                   .byte 5
0022F5r 3  00                   .byte 0
0022F6r 3  00                   .byte 0
0022F7r 3  00                   .byte 0
0022F8r 3  00                   .byte 0
0022F9r 3  00                   .byte 0
0022FAr 3  00                   .byte 0
0022FBr 3  00                   .byte 0
0022FCr 3  00                   .byte 0
0022FDr 3  00                   .byte 0
0022FEr 3  00                   .byte 0
0022FFr 3  02                   .byte 2
002300r 3  02                   .byte 2
002301r 3  02                   .byte 2
002302r 3  02                   .byte 2
002303r 3  02                   .byte 2
002304r 3  02                   .byte 2
002305r 3  02                   .byte 2
002306r 3  02                   .byte 2
002307r 3  02                   .byte 2
002308r 3  02                   .byte 2
002309r 3  02                   .byte 2
00230Ar 3  02                   .byte 2
00230Br 3  02                   .byte 2
00230Cr 3  02                   .byte 2
00230Dr 3  00                   .byte 0
00230Er 3  00                   .byte 0
00230Fr 3  02                   .byte 2
002310r 3  02                   .byte 2
002311r 3  02                   .byte 2
002312r 3  02                   .byte 2
002313r 3  02                   .byte 2
002314r 3  00                   .byte 0
002315r 3  00                   .byte 0
002316r 3  00                   .byte 0
002317r 3  00                   .byte 0
002318r 3  05                   .byte 5
002319r 3  00                   .byte 0
00231Ar 3  00                   .byte 0
00231Br 3  00                   .byte 0
00231Cr 3  00                   .byte 0
00231Dr 3  00                   .byte 0
00231Er 3  00                   .byte 0
00231Fr 3  00                   .byte 0
002320r 3  00                   .byte 0
002321r 3  00                   .byte 0
002322r 3  00                   .byte 0
002323r 3  00                   .byte 0
002324r 3  00                   .byte 0
002325r 3  00                   .byte 0
002326r 3  00                   .byte 0
002327r 3  00                   .byte 0
002328r 3               sprgfx:
002328r 3  43 BC E4 02          .byte 67,188,228,2,171,177,234,77,171,93,231,254,162,246,225,12,161,248,239,159,91,111,49,249,1,240,1,152,3,24,12,6
00232Cr 3  AB B1 EA 4D  
002330r 3  AB 5D E7 FE  
002348r 3  10 EF B9 00          .byte 16,239,185,0,106,236,122,147,106,215,185,255,168,189,56,67,40,126,251,231,214,219,76,126,0,124,0,102,0,198,131,1
00234Cr 3  6A EC 7A 93  
002350r 3  6A D7 B9 FF  
002368r 3  C4 3B 2E 40          .byte 196,59,46,64,26,187,222,164,218,181,238,127,106,47,206,16,138,31,254,249,245,182,147,31,0,31,128,25,128,49,96,192
00236Cr 3  1A BB DE A4  
002370r 3  DA B5 EE 7F  
002388r 3  F1 0E 0B 90          .byte 241,14,11,144,198,174,55,169,118,173,251,159,218,139,51,132,226,135,127,190,189,109,228,199,192,7,96,6,96,12,24,48
00238Cr 3  C6 AE 37 A9  
002390r 3  76 AD FB 9F  
0023A8r 3  03 BC 44 02          .byte 3,188,68,2,235,177,170,77,235,93,167,254,226,166,161,156,225,251,175,159,235,110,89,248,49,240,1,152,3,24,3,12
0023ACr 3  EB B1 AA 4D  
0023B0r 3  EB 5D A7 FE  
0023C8r 3  00 EF 91 00          .byte 0,239,145,0,122,236,106,147,122,215,169,255,184,169,40,103,248,126,235,231,186,219,22,126,12,124,0,102,0,198,0,195
0023CCr 3  7A EC 6A 93  
0023D0r 3  7A D7 A9 FF  
0023E8r 3  C0 3B 24 40          .byte 192,59,36,64,30,187,218,164,222,181,234,127,110,42,202,25,190,31,250,249,238,182,133,159,3,31,128,25,128,49,192,48
0023ECr 3  1E BB DA A4  
0023F0r 3  DE B5 EA 7F  
002408r 3  F0 0E 09 10          .byte 240,14,9,16,199,174,54,169,119,173,250,159,155,138,114,134,239,135,126,190,187,173,225,103,192,199,96,6,96,12,48,12
00240Cr 3  C7 AE 36 A9  
002410r 3  77 AD FA 9F  
002428r 3  00 BC 02 01          .byte 0,188,2,1,3,128,2,76,3,125,3,254,2,166,3,156,3,248,108,31,58,191,1,249,1,243,1,152,3,24,12,6
00242Cr 3  03 80 02 4C  
002430r 3  03 7D 03 FE  
002448r 3  00 2F 40 80          .byte 0,47,64,128,0,224,0,147,64,223,128,255,128,169,0,231,0,254,219,7,206,175,64,126,192,124,0,102,0,198,131,1
00244Cr 3  00 E0 00 93  
002450r 3  40 DF 80 FF  
002468r 3  C0 0B 10 20          .byte 192,11,16,32,0,56,192,36,208,55,224,63,96,42,192,57,128,63,246,193,243,171,144,31,48,31,128,25,128,49,96,192
00246Cr 3  00 38 C0 24  
002470r 3  D0 37 E0 3F  
002488r 3  F0 02 04 08          .byte 240,2,4,8,0,14,48,9,244,13,248,15,152,10,112,14,224,15,125,176,252,234,228,7,204,7,96,6,96,12,24,48
00248Cr 3  00 0E 30 09  
002490r 3  F4 0D F8 0F  
0024A8r 3  3D 00 80 40          .byte 61,0,128,64,1,192,50,64,190,192,127,192,101,64,57,192,31,192,248,54,253,92,159,128,207,128,25,128,24,192,96,48
0024ACr 3  01 C0 32 40  
0024B0r 3  BE C0 7F C0  
0024C8r 3  0F 40 20 10          .byte 15,64,32,16,0,112,12,144,47,176,31,240,25,80,14,112,7,240,190,13,63,87,39,224,51,224,6,96,6,48,24,12
0024CCr 3  00 70 0C 90  
0024D0r 3  2F B0 1F F0  
0024E8r 3  03 D0 08 04          .byte 3,208,8,4,0,28,3,36,11,236,7,252,6,84,3,156,1,252,111,131,207,213,9,248,12,248,1,152,1,140,6,3
0024ECr 3  00 1C 03 24  
0024F0r 3  0B EC 07 FC  
002508r 3  00 F4 02 01          .byte 0,244,2,1,0,7,0,201,2,251,1,255,1,149,0,231,0,127,219,224,115,245,2,126,3,62,0,102,0,99,193,128
00250Cr 3  00 07 00 C9  
002510r 3  02 FB 01 FF  
002528r 3  02 F8 08 04          .byte 2,248,8,4,14,196,9,48,13,116,15,248,14,184,14,112,15,224,126,124,237,188,7,231,7,192,6,96,12,96,48,24
00252Cr 3  0E C4 09 30  
002530r 3  0D 74 0F F8  
002548r 3  00 BE 02 01          .byte 0,190,2,1,3,177,2,76,3,93,3,254,3,174,3,156,3,248,31,159,59,111,193,249,1,240,1,152,3,24,12,6
00254Cr 3  03 B1 02 4C  
002550r 3  03 5D 03 FE  
002568r 3  80 2F 40 80          .byte 128,47,64,128,64,236,0,147,64,215,128,255,128,235,0,231,0,254,199,231,206,219,112,126,0,124,0,102,0,198,131,1
00256Cr 3  40 EC 00 93  
002570r 3  40 D7 80 FF  
002588r 3  E0 0B 10 20          .byte 224,11,16,32,16,59,192,36,208,53,224,63,224,58,192,57,128,63,241,249,243,182,156,31,0,31,128,25,128,49,96,192
00258Cr 3  10 3B C0 24  
002590r 3  D0 35 E0 3F  
0025A8r 3  04 10 42 F0          .byte 4,16,66,240,4,8,142,0,15,228,45,116,14,120,14,184,8,26,15,224,24,24,237,188,14,124,7,192,3,192,12,96
0025ACr 3  04 08 8E 00  
0025B0r 3  0F E4 2D 74  
0025C8r 3  01 04 10 BC          .byte 1,4,16,188,1,2,35,128,3,249,11,93,3,158,3,174,130,6,3,248,6,6,59,111,3,159,1,240,0,240,3,24
0025CCr 3  01 02 23 80  
0025D0r 3  03 F9 0B 5D  
0025E8r 3  00 41 04 2F          .byte 0,65,4,47,128,64,8,224,64,254,66,215,128,231,128,235,160,129,0,254,129,129,206,219,192,231,0,124,0,60,0,198
0025ECr 3  80 40 08 E0  
0025F0r 3  40 FE 42 D7  
002608r 3  40 10 C1 0B          .byte 64,16,193,11,32,16,2,56,144,63,208,181,224,57,224,58,104,32,128,63,96,96,243,182,240,57,0,31,0,15,128,49
00260Cr 3  20 10 02 38  
002610r 3  90 3F D0 B5  
002628r 3  04 20 10 00          .byte 4,32,16,0,0,2,4,8,8,4,47,228,9,48,14,120,47,249,12,58,14,112,24,24,126,124,14,124,7,231,3,192
00262Cr 3  00 02 04 08  
002630r 3  08 04 2F E4  
002648r 3  01 08 04 00          .byte 1,8,4,0,128,0,1,2,2,1,11,249,2,76,3,158,75,254,131,14,3,156,6,6,31,159,3,159,193,249,0,240
00264Cr 3  80 00 01 02  
002650r 3  02 01 0B F9  
002668r 3  00 42 01 00          .byte 0,66,1,0,32,0,128,64,64,128,66,254,0,147,128,231,146,255,160,195,0,231,129,129,199,231,192,231,112,126,0,60
00266Cr 3  20 00 80 40  
002670r 3  40 80 42 FE  
002688r 3  80 10 00 40          .byte 128,16,0,64,8,0,32,16,16,32,144,191,192,36,224,57,228,191,232,48,192,57,96,96,241,249,240,57,156,31,0,15
00268Cr 3  08 00 20 10  
002690r 3  10 20 90 BF  
0026A8r 3  00 08 00 00          .byte 0,8,0,0,33,8,0,66,64,0,4,8,40,4,15,228,9,48,78,120,15,248,12,56,10,80,24,24,126,124,14,124
0026ACr 3  21 08 00 42  
0026B0r 3  40 00 04 08  
0026C8r 3  00 02 00 00          .byte 0,2,0,0,8,66,128,16,16,0,1,2,10,1,3,249,2,76,19,158,3,254,3,14,2,148,6,6,31,159,3,159
0026CCr 3  08 42 80 10  
0026D0r 3  10 00 01 02  
0026E8r 3  80 00 00 00          .byte 128,0,0,0,130,16,32,4,4,0,128,64,66,128,64,254,0,147,132,231,128,255,128,195,0,165,129,129,199,231,192,231
0026ECr 3  82 10 20 04  
0026F0r 3  04 00 80 40  
002708r 3  20 00 00 00          .byte 32,0,0,0,32,132,8,1,1,0,32,16,16,160,144,63,192,36,225,57,224,63,224,48,64,41,96,96,241,249,240,57
00270Cr 3  20 84 08 01  
002710r 3  01 00 20 10  
002728r 3  00 00 10 50          .byte 0,0,16,80,0,0,0,32,33,2,8,0,64,0,18,240,132,8,46,0,15,228,13,116,14,120,15,248,12,56,15,224
00272Cr 3  00 00 00 20  
002730r 3  21 02 08 00  
002748r 3  00 00 04 14          .byte 0,0,4,20,0,0,0,8,136,64,2,0,16,0,4,188,33,2,11,128,3,249,3,93,3,158,3,254,3,14,3,248
00274Cr 3  00 00 00 08  
002750r 3  88 40 02 00  
002768r 3  00 00 01 05          .byte 0,0,1,5,0,0,0,2,34,16,0,128,4,0,1,47,136,64,2,224,64,254,64,215,128,231,128,255,128,195,0,254
00276Cr 3  00 00 00 02  
002770r 3  22 10 00 80  
002788r 3  00 00 40 41          .byte 0,0,64,65,0,0,128,0,8,132,0,32,1,0,192,75,34,16,0,184,144,63,208,53,224,57,224,63,224,48,128,63
00278Cr 3  00 00 80 00  
002790r 3  08 84 00 20  
0027A8r 3  3F F0 F5 FC          .byte 63,240,245,252,223,124,207,60,182,220,203,56,249,248,255,248,117,112,21,66,47,197,110,173,12,253,96,202,97,204,3,130
0027ACr 3  DF 7C CF 3C  
0027B0r 3  B6 DC CB 38  
0027C8r 3  0F FC 3D 7F          .byte 15,252,61,127,55,223,51,207,45,183,50,206,62,126,63,254,29,92,133,80,75,241,91,171,67,63,152,50,24,115,128,224
0027CCr 3  37 DF 33 CF  
0027D0r 3  2D B7 32 CE  
0027E8r 3  03 FF CF 5F          .byte 3,255,207,95,205,247,204,243,203,109,140,179,143,159,143,255,7,87,33,84,82,252,214,234,208,207,166,12,198,28,32,56
0027ECr 3  CD F7 CC F3  
0027F0r 3  CB 6D 8C B3  
002808r 3  C0 FF F3 D7          .byte 192,255,243,215,243,125,243,60,114,219,227,44,227,231,227,255,193,213,8,85,20,191,181,186,244,51,41,131,49,135,8,14
00280Cr 3  F3 7D F3 3C  
002810r 3  72 DB E3 2C  
002828r 3  3F F0 F5 FC          .byte 63,240,245,252,223,124,207,60,134,28,203,56,249,248,255,248,117,112,21,66,15,197,114,173,110,253,97,200,96,12,64,12
00282Cr 3  DF 7C CF 3C  
002830r 3  86 1C CB 38  
002848r 3  0F FC 3D 7F          .byte 15,252,61,127,55,223,51,207,33,135,50,206,62,126,63,254,29,92,133,80,67,241,92,171,91,191,24,114,24,3,16,3
00284Cr 3  37 DF 33 CF  
002850r 3  21 87 32 CE  
002868r 3  03 FF CF 5F          .byte 3,255,207,95,205,247,204,243,200,97,140,179,143,159,143,255,7,87,33,84,80,252,215,42,214,239,134,28,198,0,196,0
00286Cr 3  CD F7 CC F3  
002870r 3  C8 61 8C B3  
002888r 3  C0 FF F3 D7          .byte 192,255,243,215,243,125,243,60,114,24,227,44,227,231,227,255,193,213,8,85,20,63,181,202,245,187,33,135,49,128,49,0
00288Cr 3  F3 7D F3 3C  
002890r 3  72 18 E3 2C  
0028A8r 3  0F FC 3F AF          .byte 15,252,63,175,62,251,60,243,59,109,28,211,31,159,31,255,14,174,66,168,163,244,181,118,191,48,83,6,51,134,65,192
0028ACr 3  3E FB 3C F3  
0028B0r 3  3B 6D 1C D3  
0028C8r 3  03 FF CF EB          .byte 3,255,207,235,207,190,207,60,78,219,199,52,199,231,199,255,131,171,16,170,40,253,173,93,47,204,148,193,140,225,16,112
0028CCr 3  CF BE CF 3C  
0028D0r 3  4E DB C7 34  
0028E8r 3  C0 FF F3 FA          .byte 192,255,243,250,179,239,51,207,211,182,49,205,241,249,241,255,224,234,132,42,74,63,107,87,11,243,101,48,99,56,4,28
0028ECr 3  B3 EF 33 CF  
0028F0r 3  D3 B6 31 CD  
002908r 3  F0 3F BC FE          .byte 240,63,188,254,236,251,204,243,180,237,76,115,124,126,252,127,184,58,161,10,210,143,218,213,194,252,25,76,24,206,1,7
00290Cr 3  EC FB CC F3  
002910r 3  B4 ED 4C 73  
002928r 3  0F FC 3F AF          .byte 15,252,63,175,62,251,60,243,56,97,28,211,31,159,31,255,14,174,66,168,163,240,181,78,191,118,19,134,48,6,48,2
00292Cr 3  3E FB 3C F3  
002930r 3  38 61 1C D3  
002948r 3  03 FF CF EB          .byte 3,255,207,235,207,190,207,60,78,24,199,52,199,231,199,255,131,171,16,170,40,252,173,83,175,221,132,225,140,1,140,0
00294Cr 3  CF BE CF 3C  
002950r 3  4E 18 C7 34  
002968r 3  C0 FF F3 FA          .byte 192,255,243,250,179,239,51,207,19,134,49,205,241,249,241,255,224,234,132,42,10,63,235,84,107,247,97,56,99,0,35,0
00296Cr 3  B3 EF 33 CF  
002970r 3  13 86 31 CD  
002988r 3  F0 3F BC FE          .byte 240,63,188,254,236,251,204,243,132,225,76,115,124,126,252,127,184,58,161,10,194,143,58,213,218,253,24,78,24,192,8,192
00298Cr 3  EC FB CC F3  
002990r 3  84 E1 4C 73  
0029A8r 3  0A 94 00 B4          .byte 10,148,0,180,127,90,204,86,191,170,140,44,253,232,243,232,255,224,127,128,30,80,101,88,12,236,96,236,96,8,67,48
0029ACr 3  7F 5A CC 56  
0029B0r 3  BF AA 8C 2C  
0029C8r 3  02 A5 00 2D          .byte 2,165,0,45,159,214,179,21,175,234,35,11,63,122,60,250,63,248,31,224,7,148,25,86,3,59,24,59,24,2,16,204
0029CCr 3  9F D6 B3 15  
0029D0r 3  AF EA 23 0B  
0029E8r 3  40 A9 40 0B          .byte 64,169,64,11,167,245,108,197,171,250,200,194,143,222,143,62,15,254,7,248,1,229,134,85,192,206,198,14,134,0,4,51
0029ECr 3  A7 F5 6C C5  
0029F0r 3  AB FA C8 C2  
002A08r 3  50 2A D0 02          .byte 80,42,208,2,105,253,91,49,170,254,178,48,163,247,163,207,131,255,1,254,64,121,97,149,176,51,177,131,33,128,193,12
002A0Cr 3  69 FD 5B 31  
002A10r 3  AA FE B2 30  
002A28r 3  0A 94 00 B4          .byte 10,148,0,180,127,90,204,86,191,170,173,44,253,232,243,232,255,224,127,128,30,80,53,88,4,236,48,232,48,160,32,72
002A2Cr 3  7F 5A CC 56  
002A30r 3  BF AA AD 2C  
002A48r 3  02 A5 00 2D          .byte 2,165,0,45,159,214,179,21,175,234,43,75,63,122,60,250,63,248,31,224,7,148,13,86,1,59,12,58,12,40,8,18
002A4Cr 3  9F D6 B3 15  
002A50r 3  AF EA 2B 4B  
002A68r 3  40 A9 40 0B          .byte 64,169,64,11,167,245,108,197,171,250,202,210,143,222,143,62,15,254,7,248,1,229,131,85,192,78,131,14,3,10,130,4
002A6Cr 3  A7 F5 6C C5  
002A70r 3  AB FA CA D2  
002A88r 3  50 2A D0 02          .byte 80,42,208,2,105,253,91,49,170,254,178,180,163,247,163,207,131,255,1,254,64,121,96,213,176,19,160,195,128,194,32,129
002A8Cr 3  69 FD 5B 31  
002A90r 3  AA FE B2 B4  
002AA8r 3  29 50 2D 00          .byte 41,80,45,0,90,254,106,51,85,253,52,49,23,191,23,207,7,255,1,254,10,120,26,166,55,48,55,6,16,6,12,194
002AACr 3  5A FE 6A 33  
002AB0r 3  55 FD 34 31  
002AC8r 3  0A 54 0B 40          .byte 10,84,11,64,150,191,218,140,85,127,77,12,197,239,197,243,193,255,128,127,2,158,134,169,13,204,141,193,132,1,131,48
002ACCr 3  96 BF DA 8C  
002AD0r 3  55 7F 4D 0C  
002AE8r 3  02 95 02 D0          .byte 2,149,2,208,229,175,54,163,213,95,19,67,241,123,241,124,240,127,224,31,128,167,97,170,3,115,99,112,97,0,32,204
002AECr 3  E5 AF 36 A3  
002AF0r 3  D5 5F 13 43  
002B08r 3  40 A5 00 B4          .byte 64,165,0,180,249,107,205,168,245,87,196,208,252,94,60,95,252,31,248,7,224,41,152,106,192,220,24,220,24,64,8,51
002B0Cr 3  F9 6B CD A8  
002B10r 3  F5 57 C4 D0  
002B28r 3  29 50 2D 00          .byte 41,80,45,0,90,254,106,51,85,253,52,181,23,191,23,207,7,255,1,254,10,120,26,172,55,32,23,12,5,12,18,4
002B2Cr 3  5A FE 6A 33  
002B30r 3  55 FD 34 B5  
002B48r 3  0A 54 0B 40          .byte 10,84,11,64,150,191,218,140,85,127,77,45,197,239,197,243,193,255,128,127,2,158,6,171,13,200,5,195,1,67,4,129
002B4Cr 3  96 BF DA 8C  
002B50r 3  55 7F 4D 2D  
002B68r 3  02 95 02 D0          .byte 2,149,2,208,229,175,54,163,213,95,83,75,241,123,241,124,240,127,224,31,128,167,193,170,3,114,193,112,192,80,65,32
002B6Cr 3  E5 AF 36 A3  
002B70r 3  D5 5F 53 4B  
002B88r 3  40 A5 00 B4          .byte 64,165,0,180,249,107,205,168,245,87,212,210,252,94,60,95,252,31,248,7,224,41,176,106,128,220,48,92,48,20,16,72
002B8Cr 3  F9 6B CD A8  
002B90r 3  F5 57 D4 D2  
002BA8r 3  07 60 0F F8          .byte 7,96,15,248,0,0,127,255,0,0,1,10,43,92,60,244,31,208,4,248,3,240,124,0,169,248,164,248,145,204,0,28
002BACr 3  00 00 7F FF  
002BB0r 3  00 00 01 0A  
002BC8r 3  01 D8 03 FE          .byte 1,216,3,254,0,0,223,255,0,0,128,66,10,215,15,61,7,244,1,62,0,252,31,0,42,126,41,62,36,115,0,7
002BCCr 3  00 00 DF FF  
002BD0r 3  00 00 80 42  
002BE8r 3  00 76 80 FF          .byte 0,118,128,255,0,0,247,255,0,0,160,16,194,181,67,207,1,253,128,79,0,63,7,192,138,159,138,79,201,28,192,1
002BECr 3  00 00 F7 FF  
002BF0r 3  00 00 A0 10  
002C08r 3  80 1D E0 3F          .byte 128,29,224,63,0,0,253,255,0,0,40,4,112,173,208,243,64,127,224,19,192,15,1,240,226,167,226,147,50,71,112,0
002C0Cr 3  00 00 FD FF  
002C10r 3  00 00 28 04  
002C28r 3  07 60 0F F8          .byte 7,96,15,248,0,0,127,255,0,0,1,10,43,92,60,244,31,208,4,120,3,240,124,0,169,248,145,204,64,220,1,192
002C2Cr 3  00 00 7F FF  
002C30r 3  00 00 01 0A  
002C48r 3  01 D8 03 FE          .byte 1,216,3,254,0,0,223,255,0,0,128,66,10,215,15,61,7,244,1,30,0,252,31,0,42,126,36,115,16,55,0,112
002C4Cr 3  00 00 DF FF  
002C50r 3  00 00 80 42  
002C68r 3  00 76 80 FF          .byte 0,118,128,255,0,0,247,255,0,0,160,16,194,181,67,207,1,253,128,71,0,63,7,192,138,159,201,28,196,13,0,28
002C6Cr 3  00 00 F7 FF  
002C70r 3  00 00 A0 10  
002C88r 3  80 1D E0 3F          .byte 128,29,224,63,0,0,253,255,0,0,40,4,112,173,208,243,64,127,224,17,192,15,1,240,226,167,50,71,113,3,0,7
002C8Cr 3  00 00 FD FF  
002C90r 3  00 00 28 04  
002CA8r 3  06 E0 1F F0          .byte 6,224,31,240,0,0,255,254,0,0,80,128,58,212,47,60,11,248,31,32,15,192,0,62,31,149,31,37,51,137,56,0
002CACr 3  00 00 FF FE  
002CB0r 3  00 00 50 80  
002CC8r 3  01 B8 07 FC          .byte 1,184,7,252,0,0,191,255,0,0,20,32,14,181,11,207,2,254,7,200,3,240,128,15,71,229,71,201,76,226,14,0
002CCCr 3  00 00 BF FF  
002CD0r 3  00 00 14 20  
002CE8r 3  00 6E 01 FF          .byte 0,110,1,255,0,0,239,255,0,0,5,8,67,173,194,243,128,191,1,242,0,252,224,3,81,249,81,242,147,56,3,128
002CECr 3  00 00 EF FF  
002CF0r 3  00 00 05 08  
002D08r 3  80 1B C0 7F          .byte 128,27,192,127,0,0,251,255,0,0,1,66,80,235,240,188,224,47,128,124,0,63,248,0,84,126,148,124,36,206,0,224
002D0Cr 3  00 00 FB FF  
002D10r 3  00 00 01 42  
002D28r 3  06 E0 1F F0          .byte 6,224,31,240,0,0,255,254,0,0,80,128,58,212,47,60,11,248,30,32,15,192,0,62,31,149,51,137,59,2,3,128
002D2Cr 3  00 00 FF FE  
002D30r 3  00 00 50 80  
002D48r 3  01 B8 07 FC          .byte 1,184,7,252,0,0,191,255,0,0,20,32,14,181,11,207,2,254,7,136,3,240,128,15,71,229,76,226,142,192,0,224
002D4Cr 3  00 00 BF FF  
002D50r 3  00 00 14 20  
002D68r 3  00 6E 01 FF          .byte 0,110,1,255,0,0,239,255,0,0,5,8,67,173,194,243,128,191,1,226,0,252,224,3,81,249,147,56,35,176,0,56
002D6Cr 3  00 00 EF FF  
002D70r 3  00 00 05 08  
002D88r 3  80 1B C0 7F          .byte 128,27,192,127,0,0,251,255,0,0,1,66,80,235,240,188,224,47,128,120,0,63,248,0,84,126,36,206,8,236,0,14
002D8Cr 3  00 00 FB FF  
002D90r 3  00 00 01 42  
002DA8r 3  04 88 BE E2          .byte 4,136,190,226,127,172,195,111,210,60,70,60,43,114,63,232,49,220,31,182,0,54,8,111,12,99,0,52,4,146,0,9
002DACr 3  7F AC C3 6F  
002DB0r 3  D2 3C 46 3C  
002DC8r 3  01 22 AF B8          .byte 1,34,175,184,31,235,240,219,52,143,17,143,138,220,15,250,12,119,135,237,128,13,194,27,195,24,0,13,129,36,64,2
002DCCr 3  1F EB F0 DB  
002DD0r 3  34 8F 11 8F  
002DE8r 3  80 48 2B EE          .byte 128,72,43,238,199,250,252,54,205,35,196,99,34,183,131,254,195,29,97,251,96,3,240,134,48,198,64,3,32,73,144,0
002DECr 3  C7 FA FC 36  
002DF0r 3  CD 23 C4 63  
002E08r 3  20 12 8A FB          .byte 32,18,138,251,177,254,191,13,243,72,241,24,200,173,160,255,112,199,216,126,216,0,188,33,140,49,208,0,72,18,36,0
002E0Cr 3  B1 FE BF 0D  
002E10r 3  F3 48 F1 18  
002E28r 3  04 88 BE E2          .byte 4,136,190,226,127,172,254,47,211,252,70,60,43,114,63,232,49,220,31,182,0,54,8,111,12,99,0,52,4,146,0,96
002E2Cr 3  7F AC FE 2F  
002E30r 3  D3 FC 46 3C  
002E48r 3  01 22 AF B8          .byte 1,34,175,184,31,235,255,139,52,255,17,143,138,220,15,250,12,119,135,237,128,13,194,27,195,24,0,13,129,36,0,24
002E4Cr 3  1F EB FF 8B  
002E50r 3  34 FF 11 8F  
002E68r 3  80 48 2B EE          .byte 128,72,43,238,199,250,255,226,205,63,196,99,34,183,131,254,195,29,97,251,96,3,240,134,48,198,64,3,32,73,0,6
002E6Cr 3  C7 FA FF E2  
002E70r 3  CD 3F C4 63  
002E88r 3  20 12 8A FB          .byte 32,18,138,251,177,254,191,248,243,79,241,24,200,173,160,255,112,199,216,126,216,0,188,33,140,49,208,0,72,18,128,1
002E8Cr 3  B1 FE BF F8  
002E90r 3  F3 4F F1 18  
002EA8r 3  11 20 47 7D          .byte 17,32,71,125,53,254,246,195,60,75,60,98,78,212,23,252,59,140,109,248,108,0,246,16,198,48,44,0,73,32,144,0
002EACr 3  35 FE F6 C3  
002EB0r 3  3C 4B 3C 62  
002EC8r 3  04 48 51 DF          .byte 4,72,81,223,141,127,253,176,207,18,143,24,19,181,5,255,14,227,27,126,27,0,61,132,49,140,11,0,18,72,36,0
002ECCr 3  8D 7F FD B0  
002ED0r 3  CF 12 8F 18  
002EE8r 3  01 12 D4 77          .byte 1,18,212,119,227,95,63,108,179,196,35,198,68,237,193,127,195,184,134,223,6,192,15,97,12,99,2,192,4,146,9,0
002EECr 3  E3 5F 3F 6C  
002EF0r 3  B3 C4 23 C6  
002F08r 3  80 44 F5 1D          .byte 128,68,245,29,248,215,15,219,44,241,136,241,81,59,240,95,48,238,225,183,1,176,67,216,195,24,0,176,129,36,2,64
002F0Cr 3  F8 D7 0F DB  
002F10r 3  2C F1 88 F1  
002F28r 3  11 20 47 7D          .byte 17,32,71,125,53,254,244,127,63,203,60,98,78,212,23,252,59,140,109,248,108,0,246,16,198,48,44,0,73,32,6,0
002F2Cr 3  35 FE F4 7F  
002F30r 3  3F CB 3C 62  
002F48r 3  04 48 51 DF          .byte 4,72,81,223,141,127,253,31,207,242,143,24,19,181,5,255,14,227,27,126,27,0,61,132,49,140,11,0,18,72,1,128
002F4Cr 3  8D 7F FD 1F  
002F50r 3  CF F2 8F 18  
002F68r 3  01 12 D4 77          .byte 1,18,212,119,227,95,255,71,179,252,35,198,68,237,193,127,195,184,134,223,6,192,15,97,12,99,2,192,4,146,0,96
002F6Cr 3  E3 5F FF 47  
002F70r 3  B3 FC 23 C6  
002F88r 3  80 44 F5 1D          .byte 128,68,245,29,248,215,255,209,44,255,136,241,81,59,240,95,48,238,225,183,1,176,67,216,195,24,0,176,129,36,0,24
002F8Cr 3  F8 D7 FF D1  
002F90r 3  2C FF 88 F1  
002FA8r 3  03 C0 3F F8          .byte 3,192,63,248,9,0,127,252,99,30,0,16,63,254,63,254,0,32,12,120,19,180,0,8,57,26,38,98,6,98,1,32
002FACr 3  09 00 7F FC  
002FB0r 3  63 1E 00 10  
002FC8r 3  00 F0 0F FE          .byte 0,240,15,254,2,64,31,255,152,199,0,4,143,255,143,255,0,8,3,30,4,237,0,2,142,70,137,152,129,152,0,72
002FCCr 3  02 40 1F FF  
002FD0r 3  98 C7 00 04  
002FE8r 3  00 3C 83 FF          .byte 0,60,131,255,0,144,199,255,230,49,0,1,227,255,227,255,0,2,128,199,65,59,128,0,163,145,34,102,32,102,0,18
002FECr 3  00 90 C7 FF  
002FF0r 3  E6 31 00 01  
003008r 3  00 0F E0 FF          .byte 0,15,224,255,0,36,241,255,121,140,64,0,248,255,248,255,128,0,224,49,208,78,32,0,104,228,136,153,136,25,128,4
00300Cr 3  00 24 F1 FF  
003010r 3  79 8C 40 00  
003028r 3  03 C0 3F F8          .byte 3,192,63,248,9,0,127,252,99,30,0,16,63,254,63,254,0,32,14,120,19,180,0,8,25,26,14,96,2,96,12,48
00302Cr 3  09 00 7F FC  
003030r 3  63 1E 00 10  
003048r 3  00 F0 0F FE          .byte 0,240,15,254,2,64,31,255,152,199,0,4,143,255,143,255,0,8,3,158,4,237,0,2,134,70,3,152,0,152,3,12
00304Cr 3  02 40 1F FF  
003050r 3  98 C7 00 04  
003068r 3  00 3C 83 FF          .byte 0,60,131,255,0,144,199,255,230,49,0,1,227,255,227,255,0,2,128,231,65,59,128,0,161,145,0,230,0,38,0,195
00306Cr 3  00 90 C7 FF  
003070r 3  E6 31 00 01  
003088r 3  00 0F E0 FF          .byte 0,15,224,255,0,36,241,255,121,140,64,0,248,255,248,255,128,0,224,57,208,78,32,0,104,100,128,57,128,9,192,48
00308Cr 3  00 24 F1 FF  
003090r 3  79 8C 40 00  
0030A8r 3  03 C0 1F FC          .byte 3,192,31,252,0,144,63,254,120,198,8,0,127,252,127,252,4,0,30,48,45,200,16,0,88,156,70,100,70,96,4,128
0030ACr 3  00 90 3F FE  
0030B0r 3  78 C6 08 00  
0030C8r 3  00 F0 07 FF          .byte 0,240,7,255,0,36,143,255,158,49,2,0,31,255,31,255,1,0,7,140,11,114,4,0,22,39,17,153,17,152,1,32
0030CCr 3  00 24 8F FF  
0030D0r 3  9E 31 02 00  
0030E8r 3  00 3C C1 FF          .byte 0,60,193,255,0,9,227,255,103,140,0,128,199,255,199,255,0,64,1,227,130,220,1,0,197,137,68,102,4,102,0,72
0030ECr 3  00 09 E3 FF  
0030F0r 3  67 8C 00 80  
003108r 3  00 0F F0 7F          .byte 0,15,240,127,64,2,248,255,25,227,0,32,241,255,241,255,0,16,192,120,32,183,0,64,113,98,145,25,129,25,0,18
00310Cr 3  40 02 F8 FF  
003110r 3  19 E3 00 20  
003128r 3  03 C0 1F FC          .byte 3,192,31,252,0,144,63,254,120,198,8,0,127,252,127,252,4,0,30,112,45,200,16,0,88,152,6,112,6,64,12,48
00312Cr 3  00 90 3F FE  
003130r 3  78 C6 08 00  
003148r 3  00 F0 07 FF          .byte 0,240,7,255,0,36,143,255,158,49,2,0,31,255,31,255,1,0,7,156,11,114,4,0,22,38,1,156,1,144,3,12
00314Cr 3  00 24 8F FF  
003150r 3  9E 31 02 00  
003168r 3  00 3C C1 FF          .byte 0,60,193,255,0,9,227,255,103,140,0,128,199,255,199,255,0,64,1,231,130,220,1,0,133,137,0,103,0,100,0,195
00316Cr 3  00 09 E3 FF  
003170r 3  67 8C 00 80  
003188r 3  00 0F F0 7F          .byte 0,15,240,127,64,2,248,255,25,227,0,32,241,255,241,255,0,16,192,121,32,183,0,64,97,98,192,25,0,25,192,48
00318Cr 3  40 02 F8 FF  
003190r 3  19 E3 00 20  
0031A8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0031ACr 3  00 00 00 00  
0031B0r 3  00 00 00 00  
0031C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0031CCr 3  00 00 00 00  
0031D0r 3  00 00 00 00  
0031E8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0031ECr 3  00 00 00 00  
0031F0r 3  00 00 00 00  
003208r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00320Cr 3  00 00 00 00  
003210r 3  00 00 00 00  
003228r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,192,0,192,0,85,85,0,0,0,0,0,0
00322Cr 3  00 00 00 00  
003230r 3  00 00 00 00  
003248r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,48,0,48,0,85,85,0,0,0,0,0,0
00324Cr 3  00 00 00 00  
003250r 3  00 00 00 00  
003268r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,12,0,12,0,85,85,0,0,0,0,0,0
00326Cr 3  00 00 00 00  
003270r 3  00 00 00 00  
003288r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,3,0,3,0,85,85,0,0,0,0,0,0
00328Cr 3  00 00 00 00  
003290r 3  00 00 00 00  
0032A8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,170,192,0,192,0,106,170,0,0,0,0,0,0
0032ACr 3  00 00 00 00  
0032B0r 3  00 00 00 00  
0032C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,170,48,0,48,0,154,170,0,0,0,0,0,0
0032CCr 3  00 00 00 00  
0032D0r 3  00 00 00 00  
0032E8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,170,12,0,12,0,166,170,0,0,0,0,0,0
0032ECr 3  00 00 00 00  
0032F0r 3  00 00 00 00  
003308r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,170,3,0,3,0,169,170,0,0,0,0,0,0
00330Cr 3  00 00 00 00  
003310r 3  00 00 00 00  
003328r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,85,192,0,192,0,117,85,0,0,0,0,0,0
00332Cr 3  00 00 00 00  
003330r 3  00 00 00 00  
003348r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,85,48,0,48,0,93,85,0,0,0,0,0,0
00334Cr 3  00 00 00 00  
003350r 3  00 00 00 00  
003368r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,85,12,0,12,0,87,85,0,0,0,0,0,0
00336Cr 3  00 00 00 00  
003370r 3  00 00 00 00  
003388r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,213,3,0,3,0,85,213,0,0,0,0,0,0
00338Cr 3  00 00 00 00  
003390r 3  00 00 00 00  
0033A8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,192,0,192,0,85,85,0,0,0,0,0,0
0033ACr 3  00 00 00 00  
0033B0r 3  00 00 00 00  
0033C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,48,0,48,0,85,85,0,0,0,0,0,0
0033CCr 3  00 00 00 00  
0033D0r 3  00 00 00 00  
0033E8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,12,0,12,0,85,85,0,0,0,0,0,0
0033ECr 3  00 00 00 00  
0033F0r 3  00 00 00 00  
003408r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,3,0,3,0,85,85,0,0,0,0,0,0
00340Cr 3  00 00 00 00  
003410r 3  00 00 00 00  
003428r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,3,0,3,170,170,0,0,0,0,0,0
00342Cr 3  00 00 00 00  
003430r 3  00 00 00 00  
003448r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,192,0,192,0,170,170,0,0,0,0,0,0
00344Cr 3  00 00 00 00  
003450r 3  00 00 00 00  
003468r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,48,0,48,0,170,170,0,0,0,0,0,0
00346Cr 3  00 00 00 00  
003470r 3  00 00 00 00  
003488r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,12,0,12,0,170,170,0,0,0,0,0,0
00348Cr 3  00 00 00 00  
003490r 3  00 00 00 00  
0034A8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,86,0,3,0,3,85,86,0,0,0,0,0,0
0034ACr 3  00 00 00 00  
0034B0r 3  00 00 00 00  
0034C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,85,192,0,192,0,149,85,0,0,0,0,0,0
0034CCr 3  00 00 00 00  
0034D0r 3  00 00 00 00  
0034E8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,85,48,0,48,0,101,85,0,0,0,0,0,0
0034ECr 3  00 00 00 00  
0034F0r 3  00 00 00 00  
003508r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,85,12,0,12,0,89,85,0,0,0,0,0,0
00350Cr 3  00 00 00 00  
003510r 3  00 00 00 00  
003528r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,174,0,3,0,3,170,174,0,0,0,0,0,0
00352Cr 3  00 00 00 00  
003530r 3  00 00 00 00  
003548r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,171,192,0,192,0,170,171,0,0,0,0,0,0
00354Cr 3  00 00 00 00  
003550r 3  00 00 00 00  
003568r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,170,48,0,48,0,234,170,0,0,0,0,0,0
00356Cr 3  00 00 00 00  
003570r 3  00 00 00 00  
003588r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,186,170,12,0,12,0,186,170,0,0,0,0,0,0
00358Cr 3  00 00 00 00  
003590r 3  00 00 00 00  
0035A8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,0,3,0,3,170,170,0,0,0,0,0,0
0035ACr 3  00 00 00 00  
0035B0r 3  00 00 00 00  
0035C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,192,0,192,0,170,170,0,0,0,0,0,0
0035CCr 3  00 00 00 00  
0035D0r 3  00 00 00 00  
0035E8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,48,0,48,0,170,170,0,0,0,0,0,0
0035ECr 3  00 00 00 00  
0035F0r 3  00 00 00 00  
003608r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,170,12,0,12,0,170,170,0,0,0,0,0,0
00360Cr 3  00 00 00 00  
003610r 3  00 00 00 00  
003628r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,20,8,2,32,8,196,1,232,29,228,9,208,8,72,0,128,0,128,0,0,0,0
00362Cr 3  00 00 00 00  
003630r 3  00 00 14 08  
003648r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,5,2,0,136,2,49,0,122,7,121,2,116,2,18,0,32,0,32,0,0,0,0
00364Cr 3  00 00 00 00  
003650r 3  00 00 05 02  
003668r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,129,64,0,34,64,140,128,30,65,222,0,157,128,132,0,8,0,8,0,0,0,0
00366Cr 3  00 00 00 00  
003670r 3  00 00 81 40  
003688r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,32,80,128,8,16,35,160,7,144,119,64,39,32,33,0,2,0,2,0,0,0,0
00368Cr 3  00 00 00 00  
003690r 3  00 00 20 50  
0036A8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,4,48,8,8,16,4,0,32,0,0,0,0,0,0,0,0,8,12,36,24,0,0,0,0,0
0036ACr 3  00 00 00 04  
0036B0r 3  30 08 08 10  
0036C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,1,12,2,2,4,1,0,8,0,0,0,0,0,0,0,0,2,3,9,6,0,0,0,0,0
0036CCr 3  00 00 00 01  
0036D0r 3  0C 02 02 04  
0036E8r 3  00 00 00 00          .byte 0,0,0,0,0,0,64,0,131,0,0,129,0,64,2,0,0,0,0,0,0,0,128,0,64,194,1,128,0,0,0,0
0036ECr 3  00 00 40 00  
0036F0r 3  83 00 00 81  
003708r 3  00 00 00 00          .byte 0,0,0,0,0,0,16,0,32,192,64,32,0,16,0,128,0,0,0,0,0,0,32,0,144,48,0,96,0,0,0,0
00370Cr 3  00 00 10 00  
003710r 3  20 C0 40 20  
003728r 3               frmlst:
003728r 3  00 04                .byte 0,4
00372Ar 3  04 05                .byte 4,5
00372Cr 3  09 02                .byte 9,2
00372Er 3  0B 02                .byte 11,2
003730r 3  0D 02                .byte 13,2
003732r 3  0F 02                .byte 15,2
003734r 3  11 02                .byte 17,2
003736r 3  13 02                .byte 19,2
003738r 3  15 02                .byte 21,2
00373Ar 3  17 02                .byte 23,2
00373Cr 3  19 02                .byte 25,2
00373Er 3  1B 02                .byte 27,2
003740r 3  1D 09                .byte 29,9
003742r 3  26 02 28 00          .byte 38,2,40,0
003746r 3               scdat:
003746r 3  FB 00 DC 00          .word 251,220
00374Ar 3  0B 2D 0B 0B          .byte 11,45,11,11,11,41,43,38,39,40,0,0,11,11,11,45,11,21,38,39,40,11,11,11,38,39,40,42,44,45,11,11,0,0
00374Er 3  0B 29 2B 26  
003752r 3  27 28 00 00  
00376Cr 3  0B 0B 26 27          .byte 11,11,38,39,40,255,11,15,0,0,11,11,37,255,11,7,0,0,33,33,13,14,33,33,17,18,0,0,13,14,33,33,22
003770r 3  28 FF 0B 0F  
003774r 3  00 00 0B 0B  
00378Dr 3  21 21 21 FF          .byte 33,33,33,255,0,4,32,32,15,16,30,32,19,20,0,0,15,16,32,31,32,29,31,32,255,0,34,2,2,255,0,12,33,33
003791r 3  00 04 20 20  
003795r 3  0F 10 1E 20  
0037AFr 3  0D 0E 21 21          .byte 13,14,33,33,13,14,0,0,255,33,4,13,14,33,33,255,0,4,30,31,15,16,32,30,15,16,0,0,31,29,32,32,15
0037B3r 3  0D 0E 00 00  
0037B7r 3  FF 21 04 0D  
0037D0r 3  10 20 20 FF          .byte 16,32,32,255,0,34,2,2,255,0,12,33,33,23,24,33,22,33,33,0,0,33,33,17,18,13,14,33,22,255,0,4,31
0037D4r 3  00 22 02 02  
0037D8r 3  FF 00 0C 21  
0037F1r 3  20 19 1A 1F          .byte 32,25,26,31,30,32,32,0,0,32,30,19,20,15,16,31,32,255,0,34,2,2,255,0,12,33,33,13,14,33,33,13,14
0037F5r 3  1E 20 20 00  
0037F9r 3  00 20 1E 13  
003812r 3  00 00 21 22          .byte 0,0,33,34,33,33,13,14,33,33,255,0,4,32,31,15,16,32,32,15,16,0,0,31,30,32,32,15,16,31,32,255,0,34
003816r 3  21 21 0D 0E  
00381Ar 3  21 21 FF 00  
003834r 3  02 02 FF 00          .byte 2,2,255,0,11,255,49,5,255,0,4,2,2,0,255,48,9
003838r 3  0B FF 31 05  
00383Cr 3  FF 00 04 02  
003845r 3  2F FF 00 14          .byte 47,255,0,20,47,50,255,0,4,48,48,255,0,14,50,51,255,0,4,48,48,255,0,14,51,46,255,0,4,11,11,255,0,14
003849r 3  2F 32 FF 00  
00384Dr 3  04 30 30 FF  
003867r 3  2E 2F FF 00          .byte 46,47,255,0,4,11,11,255,0,14,47,50,255,0,4,48,48,255,0,14,50,51,255,0,4,48,48,255,0,14,51,46,255,0,4
00386Br 3  04 0B 0B FF  
00386Fr 3  00 0E 2F 32  
00388Ar 3  0B 0B FF 00          .byte 11,11,255,0,14,46,47,255,0,4,11,11,255,0,14,47,50,255,0,4,52,52,255,0,14,50,51,255,0,4,52,52,255,0,14
00388Er 3  0E 2E 2F FF  
003892r 3  00 04 0B 0B  
0038ADr 3  33 2E FF 00          .byte 51,46,255,0,4,11,11,52,52,255,0,12,46,47,255,0,4,11,11,52,52,255,0,12,47,50,255,0,4,53,53,52,52
0038B1r 3  04 0B 0B 34  
0038B5r 3  34 FF 00 0C  
0038CEr 3  FF 00 0C 32          .byte 255,0,12,50,51,255,0,4,53,53,52,52,255,0,12,51,46,255,0,4,11,11,255,0,14,46,47,255,0,4,11,11,255,0,14
0038D2r 3  33 FF 00 04  
0038D6r 3  35 35 34 34  
0038F1r 3  2F 2E 00 00          .byte 47,46,0,0,13,14,0,0,0,13,14,0,0,0,13,14,0,0,0,13,14,0,46,33,33,33,15,16,33,33,33,15,16
0038F5r 3  0D 0E 00 00  
0038F9r 3  00 0D 0E 00  
003912r 3  21 21 21 0F          .byte 33,33,33,15,16,33,33,33,15,16,33,33,255,31,22
003916r 3  10 21 21 21  
00391Ar 3  0F 10 21 21  
003921r 3               numsc:
003921r 3  02                   .byte 2
003922r 3               nmedat:
003922r 3  00 00 90 70          .byte 0,0,144,112,5,12,32,160,255
003926r 3  05 0C 20 A0  
00392Ar 3  FF           
00392Br 3  06 07 18 28          .byte 6,7,24,40,6,5,56,40,6,3,88,40,6,9,120,40,0,12,8,144,6,13,104,56,255
00392Fr 3  06 05 38 28  
003933r 3  06 03 58 28  
003944r 3               NUMOBJ = 3
003944r 3               objdta:
003944r 3  0D 71 07 C0          .byte 13,113,7,192,27,224,61,216,62,220,14,188,54,124,58,120,60,112,0,108,0,92,0,60,0,120,0,112,0,108,0,92,1,254,160,76,254,160,76
003948r 3  1B E0 3D D8  
00394Cr 3  3E DC 0E BC  
00396Br 3  00 00 00 00          .byte 0,0,0,0,7,224,12,144,25,56,23,232,18,72,26,88,30,104,0,72,0,88,0,104,0,72,0,88,0,120,0,120,1,254,160,76,254,160,76
00396Fr 3  07 E0 0C 90  
003973r 3  19 38 17 E8  
003992r 3  00 00 00 00          .byte 0,0,0,0,1,0,1,0,3,128,3,128,3,128,127,252,31,240,7,192,6,192,12,96,9,32,17,16,1,0,0,0,1,254,8,93,254,8,93
003996r 3  01 00 01 00  
00399Ar 3  03 80 03 80  
0039B9r 3               font:
0039B9r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0039BDr 3  00 00 00 00  
0039C1r 3  38 38 38 38          .byte 56,56,56,56,56,0,56,0
0039C5r 3  38 00 38 00  
0039C9r 3  2E 2E 2E 00          .byte 46,46,46,0,0,0,0,0
0039CDr 3  00 00 00 00  
0039D1r 3  00 5C FE 5C          .byte 0,92,254,92,254,92,0,0
0039D5r 3  FE 5C 00 00  
0039D9r 3  04 7E 70 7E          .byte 4,126,112,126,14,126,32,0
0039DDr 3  0E 7E 20 00  
0039E1r 3  F2 B4 E8 10          .byte 242,180,232,16,46,86,158,0
0039E5r 3  2E 56 9E 00  
0039E9r 3  F8 E8 E8 72          .byte 248,232,232,114,238,228,255,0
0039EDr 3  EE E4 FF 00  
0039F1r 3  1C 1C 3C 00          .byte 28,28,60,0,0,0,0,0
0039F5r 3  00 00 00 00  
0039F9r 3  18 38 70 70          .byte 24,56,112,112,112,56,24,0
0039FDr 3  70 38 18 00  
003A01r 3  30 38 1C 1C          .byte 48,56,28,28,28,56,48,0
003A05r 3  1C 38 30 00  
003A09r 3  00 10 38 FE          .byte 0,16,56,254,124,108,0,0
003A0Dr 3  7C 6C 00 00  
003A11r 3  00 38 38 FE          .byte 0,56,56,254,56,56,0,0
003A15r 3  38 38 00 00  
003A19r 3  00 00 00 00          .byte 0,0,0,0,0,28,28,60
003A1Dr 3  00 1C 1C 3C  
003A21r 3  00 00 00 7C          .byte 0,0,0,124,0,0,0,0
003A25r 3  00 00 00 00  
003A29r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,0
003A2Dr 3  00 18 18 00  
003A31r 3  03 07 0E 1C          .byte 3,7,14,28,56,112,224,0
003A35r 3  38 70 E0 00  
003A39r 3  7E 72 72 72          .byte 126,114,114,114,114,114,126,0
003A3Dr 3  72 72 7E 00  
003A41r 3  3C 1C 1C 1C          .byte 60,28,28,28,28,28,28,0
003A45r 3  1C 1C 1C 00  
003A49r 3  3E 2E 0E 7E          .byte 62,46,14,126,64,66,126,0
003A4Dr 3  40 42 7E 00  
003A51r 3  3E 2E 0E 3C          .byte 62,46,14,60,14,78,126,0
003A55r 3  0E 4E 7E 00  
003A59r 3  9C 9C 9C FE          .byte 156,156,156,254,28,28,62,0
003A5Dr 3  1C 1C 3E 00  
003A61r 3  7C 44 40 7E          .byte 124,68,64,126,14,78,126,0
003A65r 3  0E 4E 7E 00  
003A69r 3  7C 74 70 7E          .byte 124,116,112,126,114,114,126,0
003A6Dr 3  72 72 7E 00  
003A71r 3  7E 4E 0E 3E          .byte 126,78,14,62,14,14,14,0
003A75r 3  0E 0E 0E 00  
003A79r 3  7E 4E 4E 3C          .byte 126,78,78,60,78,78,126,0
003A7Dr 3  4E 4E 7E 00  
003A81r 3  7E 4E 4E 7E          .byte 126,78,78,126,14,46,62,0
003A85r 3  0E 2E 3E 00  
003A89r 3  00 38 38 00          .byte 0,56,56,0,0,56,56,0
003A8Dr 3  00 38 38 00  
003A91r 3  00 1C 1C 00          .byte 0,28,28,0,0,28,28,60
003A95r 3  00 1C 1C 3C  
003A99r 3  0E 1C 38 70          .byte 14,28,56,112,56,28,14,0
003A9Dr 3  38 1C 0E 00  
003AA1r 3  00 00 7C 00          .byte 0,0,124,0,124,0,0,0
003AA5r 3  7C 00 00 00  
003AA9r 3  70 38 1C 0E          .byte 112,56,28,14,28,56,112,0
003AADr 3  1C 38 70 00  
003AB1r 3  7E 4E 0E 3E          .byte 126,78,14,62,32,0,48,0
003AB5r 3  20 00 30 00  
003AB9r 3  FE E2 EE EA          .byte 254,226,238,234,238,224,252,0
003ABDr 3  EE E0 FC 00  
003AC1r 3  7E 4E 4E 7E          .byte 126,78,78,126,78,78,239,0
003AC5r 3  4E 4E EF 00  
003AC9r 3  FE 4E 4E 5C          .byte 254,78,78,92,78,78,254,0
003ACDr 3  4E 4E FE 00  
003AD1r 3  FA E6 E0 E0          .byte 250,230,224,224,224,226,254,0
003AD5r 3  E0 E2 FE 00  
003AD9r 3  FE 4E 4E 4E          .byte 254,78,78,78,78,78,254,0
003ADDr 3  4E 4E FE 00  
003AE1r 3  FE 72 70 7C          .byte 254,114,112,124,112,114,254,0
003AE5r 3  70 72 FE 00  
003AE9r 3  FE 72 70 7C          .byte 254,114,112,124,112,112,248,0
003AEDr 3  70 70 F8 00  
003AF1r 3  F4 EC E0 E0          .byte 244,236,224,224,238,228,252,0
003AF5r 3  EE E4 FC 00  
003AF9r 3  F7 72 72 7E          .byte 247,114,114,126,114,114,247,0
003AFDr 3  72 72 F7 00  
003B01r 3  FE 38 38 38          .byte 254,56,56,56,56,56,254,0
003B05r 3  38 38 FE 00  
003B09r 3  3E 1C 1C 1C          .byte 62,28,28,28,28,28,28,124
003B0Dr 3  1C 1C 1C 7C  
003B11r 3  FB 72 74 78          .byte 251,114,116,120,116,114,251,0
003B15r 3  74 72 FB 00  
003B19r 3  F8 70 70 70          .byte 248,112,112,112,112,114,254,0
003B1Dr 3  70 72 FE 00  
003B21r 3  FE AE AE AE          .byte 254,174,174,174,174,142,222,0
003B25r 3  AE 8E DE 00  
003B29r 3  FE 4E 4E 4E          .byte 254,78,78,78,78,78,223,0
003B2Dr 3  4E 4E DF 00  
003B31r 3  7E 4E 4E 4E          .byte 126,78,78,78,78,78,126,0
003B35r 3  4E 4E 7E 00  
003B39r 3  FE 72 72 76          .byte 254,114,114,118,112,112,248,0
003B3Dr 3  70 70 F8 00  
003B41r 3  FE E2 E2 E2          .byte 254,226,226,226,234,234,254,4
003B45r 3  EA EA FE 04  
003B49r 3  FE 72 72 7E          .byte 254,114,114,126,116,114,243,0
003B4Dr 3  74 72 F3 00  
003B51r 3  7A 46 40 7E          .byte 122,70,64,126,14,142,254,0
003B55r 3  0E 8E FE 00  
003B59r 3  FE BA 38 38          .byte 254,186,56,56,56,56,124,0
003B5Dr 3  38 38 7C 00  
003B61r 3  EF 4E 4E 4E          .byte 239,78,78,78,78,78,126,0
003B65r 3  4E 4E 7E 00  
003B69r 3  EF 4E 4E 3C          .byte 239,78,78,60,60,24,24,0
003B6Dr 3  3C 18 18 00  
003B71r 3  E7 42 5A 7E          .byte 231,66,90,126,126,126,102,0
003B75r 3  7E 7E 66 00  
003B79r 3  F6 74 74 38          .byte 246,116,116,56,116,116,246,0
003B7Dr 3  74 74 F6 00  
003B81r 3  CF 4E 4E 7E          .byte 207,78,78,126,14,14,126,0
003B85r 3  0E 0E 7E 00  
003B89r 3  FE 8E 1C 38          .byte 254,142,28,56,112,242,254,0
003B8Dr 3  70 F2 FE 00  
003B91r 3  7C 70 70 70          .byte 124,112,112,112,112,112,124,0
003B95r 3  70 70 7C 00  
003B99r 3  C0 E0 70 38          .byte 192,224,112,56,28,14,7,0
003B9Dr 3  1C 0E 07 00  
003BA1r 3  7C 1C 1C 1C          .byte 124,28,28,28,28,28,124,0
003BA5r 3  1C 1C 7C 00  
003BA9r 3  10 38 7C 9E          .byte 16,56,124,158,0,0,0,0
003BADr 3  00 00 00 00  
003BB1r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003BB5r 3  00 00 00 FF  
003BB9r 3  7C 74 70 F8          .byte 124,116,112,248,112,114,254,0
003BBDr 3  70 72 FE 00  
003BC1r 3  00 00 7C 1C          .byte 0,0,124,28,252,156,254,0
003BC5r 3  FC 9C FE 00  
003BC9r 3  F0 70 76 7A          .byte 240,112,118,122,114,114,126,0
003BCDr 3  72 72 7E 00  
003BD1r 3  00 00 FC E4          .byte 0,0,252,228,224,226,254,0
003BD5r 3  E0 E2 FE 00  
003BD9r 3  1E 0E FE 8E          .byte 30,14,254,142,142,158,239,0
003BDDr 3  8E 9E EF 00  
003BE1r 3  00 00 FE E2          .byte 0,0,254,226,254,224,254,0
003BE5r 3  FE E0 FE 00  
003BE9r 3  3E 3A 38 7E          .byte 62,58,56,126,56,56,124,0
003BEDr 3  38 38 7C 00  
003BF1r 3  00 00 F7 8E          .byte 0,0,247,142,158,238,14,254
003BF5r 3  9E EE 0E FE  
003BF9r 3  F0 70 7E 72          .byte 240,112,126,114,114,114,251,0
003BFDr 3  72 72 FB 00  
003C01r 3  38 00 78 38          .byte 56,0,120,56,56,56,60,0
003C05r 3  38 38 3C 00  
003C09r 3  1C 00 3C 1C          .byte 28,0,60,28,28,28,28,124
003C0Dr 3  1C 1C 1C 7C  
003C11r 3  F0 70 73 74          .byte 240,112,115,116,120,116,243,0
003C15r 3  78 74 F3 00  
003C19r 3  78 38 38 38          .byte 120,56,56,56,56,56,60,0
003C1Dr 3  38 38 3C 00  
003C21r 3  00 28 54 10          .byte 0,40,84,16,84,16,84,16
003C25r 3  54 10 54 10  
003C29r 3  00 00 00 2F          .byte 0,0,0,47,64,128,224,254
003C2Dr 3  40 80 E0 FE  
003C31r 3  00 00 00 00          .byte 0,0,0,0,128,64,0,64
003C35r 3  80 40 00 40  
003C39r 3  54 10 54 10          .byte 84,16,84,16,84,16,124,56
003C3Dr 3  54 10 7C 38  
003C41r 3  93 DF E7 FF          .byte 147,223,231,255,169,195,231,254
003C45r 3  A9 C3 E7 FE  
003C49r 3  00 40 80 80          .byte 0,64,128,128,128,128,0,0
003C4Dr 3  80 80 00 00  
003C51r 3  00 3D 1B 0E          .byte 0,61,27,14,0,0,0,0
003C55r 3  00 00 00 00  
003C59r 3  81 03 AF D7          .byte 129,3,175,215,126,126,28,28
003C5Dr 3  7E 7E 1C 1C  
003C61r 3  80 C0 60 20          .byte 128,192,96,32,16,48,48,0
003C65r 3  10 30 30 00  
003C69r 3  00 00 01 03          .byte 0,0,1,3,0,0,0,0
003C6Dr 3  00 00 00 00  
003C71r 3  6C CC 86 03          .byte 108,204,134,3,0,0,0,0
003C75r 3  00 00 00 00  
003C79r 3  08 08 0C 1C          .byte 8,8,12,28,30,26,12,0
003C7Dr 3  1E 1A 0C 00  
003C81r 3  00 00 EF 4E          .byte 0,0,239,78,78,126,14,254
003C85r 3  4E 7E 0E FE  
003C89r 3  00 00 FE 9C          .byte 0,0,254,156,56,114,254,0
003C8Dr 3  38 72 FE 00  
003C91r 3  3E 38 38 F0          .byte 62,56,56,240,56,56,62,0
003C95r 3  38 38 3E 00  
003C99r 3  38 38 38 38          .byte 56,56,56,56,56,56,56,0
003C9Dr 3  38 38 38 00  
003CA1r 3  F8 38 38 1E          .byte 248,56,56,30,56,56,248,0
003CA5r 3  38 38 F8 00  
003CA9r 3  F6 DE 00 00          .byte 246,222,0,0,0,0,0,0
003CADr 3  00 00 00 00  
003CB1r 3  3C 42 BD B9          .byte 60,66,189,185,185,189,66,60
003CB5r 3  B9 BD 42 3C  
003CB9r 3               jtab:
003CB9r 3  63                   .byte 99
003CBAr 3  65 14 51 10  keys:   .byte 101,20,81,16,48,35,83,112,0,113,1
003CBEr 3  30 23 53 70  
003CC2r 3  00 71 01     
003CC5r 3               
003CC5r 2               
003CC5r 1               	.include "lib.inc"
003CC5r 2               ;----------------------------------------------------------------------
003CC5r 2               ; VIC20 Platform Specific functions
003CC5r 2               ;----------------------------------------------------------------------
003CC5r 2               
003CC5r 2               ;============================================================
003CC5r 2               ; PLATFORM VARIABLES
003CC5r 2               ;============================================================
003CC5r 2               ;
003CC5r 2               ; Memory map:
003CC5r 2               ;
003CC5r 2               ;	$0000-$01ff	 0.5kB	CPU WS
003CC5r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
003CC5r 2               ;	$0400-$0fff	 3,0kB	RAM
003CC5r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
003CC5r 2               ;	$2000-$7fff	24,0kB	RAM
003CC5r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
003CC5r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
003CC5r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
003CC5r 2               ;	$9800-$9fff	 2,0kB	I/O
003CC5r 2               ;	$a000-$bfff	 8,0kB	RAM
003CC5r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
003CC5r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
003CC5r 2               ;
003CC5r 2               ; Keyboard matrix:
003CC5r 2               ;                          	  $9121
003CC5r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
003CC5r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
003CC5r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
003CC5r 2               ;                 VIC   07  06  05  04  03  02  01  00
003CC5r 2               ;
003CC5r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
003CC5r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
003CC5r 2               ;                 VIC   17  16  15  14  13  12  11  10
003CC5r 2               ;
003CC5r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
003CC5r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
003CC5r 2               ;                 VIC   27  26  25  24  23  22  21  20
003CC5r 2               ;
003CC5r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
003CC5r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
003CC5r 2               ;                 VIC   37  36  35  34  33  32  31  30
003CC5r 2               ;
003CC5r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
003CC5r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
003CC5r 2               ;                 VIC   47  46  45  44  43  42  41  40
003CC5r 2               ;
003CC5r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
003CC5r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
003CC5r 2               ;                 VIC   57  56  55  54  53  52  51  50
003CC5r 2               ;
003CC5r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
003CC5r 2               ;               ASCII   13  42  80  73  89  82  87
003CC5r 2               ;                 VIC   67  66  65  64  63  62  61  60
003CC5r 2               ;
003CC5r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
003CC5r 2               ;               ASCII   08  ??  43  57  55  53  51  49
003CC5r 2               ;                 VIC   77  76  75  74  73  72  71  70
003CC5r 2               ;
003CC5r 2               ;	 P =$65,O=$14,A=$51,Q=$10
003CC5r 2               ;	SPC=$30,N=$44,M=$34
003CC5r 2               ;	 1 =$70,2=$00,3=$71,4=$01
003CC5r 2               ;
003CC5r 2               ; Joysticks:
003CC5r 2               ;
003CC5r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
003CC5r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
003CC5r 2               ;	$9120	Right -     -     -     -     -     -     -
003CC5r 2               ;
003CC5r 2               ;	$9122	DDRB = Data Direction Register port $9120
003CC5r 2               ;               0 = input, 1 = output
003CC5r 2               ;		Bit7 should be 0 to read joystick $9120
003CC5r 2               ;
003CC5r 2               ; Video registers:
003CC5r 2               ;
003CC5r 2               ;	$9000	horizontal centering
003CC5r 2               ;		bits 0-6 horizontal centering
003CC5r 2               ;		bit  7 sets interlace scan
003CC5r 2               ;	$9001	vertical centering
003CC5r 2               ;	$9002	set # of columns
003CC5r 2               ;		bits 0-6 set # of columns
003CC5r 2               ;		bit 7 is part of video matrix address
003CC5r 2               ;	$9003	set # of rows
003CC5r 2               ;		bit 0 sets 8x8 or 16x8 chars
003CC5r 2               ;		bits 1-6 set # of rows
003CC5r 2               ;	$9005	start of character memory
003CC5r 2               ;		bits 0-3 start of character memory (default = 0)
003CC5r 2               ;		bits 4-7 is rest of video address (default= F)
003CC5r 2               ;		BITS 3,2,1,0 CM startinq address
003CC5r 2               ;			     HEX   DEC
003CC5r 2               ;		0000   ROM   8000  32768
003CC5r 2               ;		0001	     8400  33792
003CC5r 2               ;		0010	     8800  34816
003CC5r 2               ;		0011	     8C00  35840
003CC5r 2               ;		1000   RAM   0000  0000
003CC5r 2               ;		1001  xxxx
003CC5r 2               ;		1010  xxxx   unavail.
003CC5r 2               ;		1011  xxxx
003CC5r 2               ;		1100	     1000  4096
003CC5r 2               ;		1101	     1400  5120
003CC5r 2               ;		1110	     1800  6144
003CC5r 2               ;		1111	     1C00  7168
003CC5r 2               ;	$900f	Screen and border color register
003CC5r 2               ;		bits 4-7 select background color
003CC5r 2               ;		bits 0-2 select border color
003CC5r 2               ;		bit 3 selects inverted or normal mode
003CC5r 2               ;
003CC5r 2               ; $9110-$911F 6522 VIA#1
003CC5r 2               ; $9120-$912F 6522 VIA#2
003CC5r 2               ;
003CC5r 2               ;	$9110,$9120 	Port B output register
003CC5r 2               ;	$9111,$9121 	Port A output register
003CC5r 2               ;			(PA0) Bit 0=Serial CLK IN
003CC5r 2               ;			(PA1) Bit 1=Serial DATA IN
003CC5r 2               ;			(PA2) Bit 2=Joy 0
003CC5r 2               ;			(PA3) Bit 3=Joy 1
003CC5r 2               ;			(PA4) Bit 4=Joy 2
003CC5r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
003CC5r 2               ;			(PA6) Bit 6=Cassette switch sense
003CC5r 2               ;			(PA7) Bit 7=Serial ATN out
003CC5r 2               ;	$9112,$9122	Data direction register B
003CC5r 2               ;	$9113,$9123	Data direction register A
003CC5r 2               ;	$9114,$9124	Timer 1 low byte
003CC5r 2               ;	$9115,$9125	Timer 1 high byte & counter
003CC5r 2               ;	$9116,$9126	Timer 1 low byte
003CC5r 2               ;	$9117,$9127	Timer 1 high byte
003CC5r 2               ;	$9118,$9128	Timer 2 low byte
003CC5r 2               ;	$9119,$9129	Timer 2 high byte
003CC5r 2               ;	$911A,$912A	Shift register
003CC5r 2               ;	$911B,$912B	Auxiliary control register
003CC5r 2               ;	$911C,$912C	Peripheral control register
003CC5r 2               ;			(CA1, CA2, CB1, CB2)
003CC5r 2               ;			CA1 = restore key (Bit 0)
003CC5r 2               ;			CA2 = cassette motor control (Bits 1-3)
003CC5r 2               ;			CB1 = interrupt signal for received
003CC5r 2               ;			RS-232 data (Bit 4)
003CC5r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
003CC5r 2               ;	$911D,$912D	Interrupt flag register
003CC5r 2               ;	$911E,$912E	Interrupt enable register
003CC5r 2               ;	$911F,$912F	Port A (Sense cassette switch)
003CC5r 2               
003CC5r 2               ; VIC constants
003CC5r 2               
003CC5r 2               ;	scrchar 	= 22				; char/line
003CC5r 2               ;	scrline		= 22				; lines/screen
003CC5r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
003CC5r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
003CC5r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
003CC5r 2               
003CC5r 2               ; VIC variables:
003CC5r 2               
003CC5r 2  00           	fontcol:	.byte 0		; Frontcolour text
003CC6r 2               
003CC6r 2               ; Addresses
003CC6r 2               
003CC6r 2               	MapAddr		= $400		; RAM
003CC6r 2               	ScreenAddr	= $0200		; VIDEO RAM
003CC6r 2               	CharAddress	= $1000		; CHAR RAM
003CC6r 2               	Reg0		= $9000		; Horizontal centering
003CC6r 2               	Reg1		= $9001		; Vertical centering
003CC6r 2               	Reg2		= $9002		; Set # of columns
003CC6r 2               	Reg3		= $9003		; Set # of rows
003CC6r 2               	Reg4		= $9004		; Vsync signal
003CC6r 2               	Reg5		= $9005		; Start of character memory
003CC6r 2               	RegE		= $900e		; Colour and auxcolour register
003CC6r 2               	RegF		= $900f		; Screen and border color register
003CC6r 2               
003CC6r 2               	JoyAddr1	= $9111		; Joystick address 1
003CC6r 2               	Timer11_Low  	= $9114		; Timer 1 low byte
003CC6r 2               	Timer11_High 	= $9115		; Timer 1 high byte
003CC6r 2               	Timer12_Low  	= $9118		; Timer 2 low byte
003CC6r 2               	Timer12_High 	= $9119		; Timer 2 high byte
003CC6r 2               	AUX1		= $911b		; Auxiliary control register
003CC6r 2               	IFR1		= $911d		; Interrupt Flag Register
003CC6r 2               	IER1		= $911e		; Interrupt Enable Register
003CC6r 2               
003CC6r 2               	KeyColAddr	= $9120		; Keyboard column (write)
003CC6r 2               	JoyAddr2	= $9120		; Joystick address 2
003CC6r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
003CC6r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
003CC6r 2               	Timer21_Low  	= $9124		; Timer 1 low byte
003CC6r 2               	Timer21_High 	= $9125		; Timer 1 high byte
003CC6r 2               	AUX2		= $912b		; Auxiliary control register
003CC6r 2               	IFR2		= $912d		; Interrupt Flag Register
003CC6r 2               	IER2		= $912e		; Interrupt Enable Register
003CC6r 2               
003CC6r 2               	ColorAttr	= $9600		; Color attributes
003CC6r 2               	HiRAM		= $a000		; Hi RAM 8kB
003CC6r 2               
003CC6r 2               ;----------------------------------------------------------------------
003CC6r 2               ; VIC20 video hardware fns
003CC6r 2               ;----------------------------------------------------------------------
003CC6r 2               
003CC6r 2               init:
003CC6r 2               
003CC6r 2               ; Disable interrupts
003CC6r 2               
003CC6r 2  A9 7F        	lda #$7f
003CC8r 2  8D 1E 91     	sta $911e
003CCBr 2  8D 2D 91     	sta $912d
003CCEr 2  8D 2E 91     	sta $912e
003CD1r 2               
003CD1r 2               ; Set audio volume to max and flag to check when disabling
003CD1r 2               ; beep and crash
003CD1r 2               
003CD1r 2  A9 00        	lda #0
003CD3r 2  8D 0A 90     	sta $900a
003CD6r 2  8D 0B 90     	sta $900b
003CD9r 2  8D 0C 90     	sta $900c
003CDCr 2  8D 0D 90     	sta $900d
003CDFr 2               
003CDFr 2  A9 0F        	lda #$0f
003CE1r 2  8D 0E 90     	sta $900e
003CE4r 2  A9 00        	lda #$00
003CE6r 2  85 rr        	sta SOUNDS_STATUS
003CE8r 2               
003CE8r 2               ; Init screen for NTSC
003CE8r 2               ; this sets the background and border color of the screen
003CE8r 2               ; in this case border black and background black
003CE8r 2               
003CE8r 2  A9 18        	lda #%00011000
003CEAr 2  8D 0F 90     	sta RegF
003CEDr 2               
003CEDr 2               ; Reset fontcolor
003CEDr 2  A9 00        	lda #0		; Black
003CEFr 2  8D rr rr     	sta fontcol
003CF2r 2               
003CF2r 2               
003CF2r 2               ; max num of columns 22
003CF2r 2               
003CF2r 2  AD 02 90     	lda Reg2
003CF5r 2  29 80        	and #%10000000
003CF7r 2  09 16        	ora #ScrWidth
003CF9r 2  8D 02 90     	sta Reg2
003CFCr 2               
003CFCr 2               ; max num of lines (mult by 2 - 22) for 8x8 chars
003CFCr 2               ; no multiply for 8x16 chars
003CFCr 2               
003CFCr 2  AD 03 90     	lda Reg3
003CFFr 2  29 81        	and #%10000001
003D01r 2  09 16        	ora #ScrWidth		; number of rows multipled by two
003D03r 2  8D 03 90     	sta Reg3
003D06r 2               
003D06r 2               ; horizontal and vertical position must be set for
003D06r 2               ; non standard screen resolution (standard 22x23)
003D06r 2               ; same games even allow the user to change them
003D06r 2               ; these values are for PAL for NTSC should be different
003D06r 2               ; move horizontal position in the screen
003D06r 2               
003D06r 2  AD 00 90     	lda Reg0
003D09r 2  29 80        	and #%10000000
003D0Br 2  09 04        	ora #CentreX
003D0Dr 2  8D 00 90     	sta Reg0
003D10r 2               
003D10r 2               ; move vertical position in the screen
003D10r 2               
003D10r 2  A9 1B        	lda #CentreY
003D12r 2  8D 01 90     	sta Reg1
003D15r 2               
003D15r 2               ; Set screem memory to $200
003D15r 2               ; bit 7 on $9002 has to be set
003D15r 2               
003D15r 2  AD 02 90     	lda Reg2
003D18r 2  09 80        	ora #%10000000
003D1Ar 2  8D 02 90     	sta Reg2
003D1Dr 2               
003D1Dr 2               ; Set character data pointer to CHAR RAM at $1000
003D1Dr 2               ; bit 7 on $9005 has always to be set
003D1Dr 2               ; (based on compute - mapping the vic book)
003D1Dr 2               ; color ram goes to 9600
003D1Dr 2               
003D1Dr 2  AD 05 90     	lda Reg5
003D20r 2  29 0C        	and #%00001100
003D22r 2  09 8C        	ora #%10001100
003D24r 2  8D 05 90     	sta Reg5
003D27r 2               
003D27r 2               ; This set the char size to 8x16
003D27r 2               
003D27r 2  AD 03 90     	lda Reg3
003D2Ar 2  09 01        	ora #%00000001
003D2Cr 2  8D 03 90     	sta Reg3
003D2Fr 2               
003D2Fr 2               ; Init screencharacters
003D2Fr 2               ; Fill screen with characters from left to right, up to down
003D2Fr 2               
003D2Fr 2  A2 00        	ldx #0
003D31r 2  A0 00        	ldy #0
003D33r 2               scrinit:
003D33r 2  8A           	txa
003D34r 2  9D 00 02     	sta ScreenAddr,x
003D37r 2  98           	tya
003D38r 2  9D 00 96     	sta ColorAttr,x
003D3Br 2  E8           	inx
003D3Cr 2  E0 F2        	cpx#242
003D3Er 2  D0 F3        	bne scrinit
003D40r 2               
003D40r 2               ; Reset fontcolor
003D40r 2               
003D40r 2  A9 00        	lda #0			; Black
003D42r 2  8D rr rr     	sta fontcol
003D45r 2               
003D45r 2               ; Init music
003D45r 2               
003D45r 2               ;	jsr initmusic
003D45r 2               
003D45r 2               ; Init VIA1 timer11 for timeout 1/25 sec
003D45r 2               
003D45r 2  A9 E0        	lda #$e0		; T1 continuous
003D47r 2  8D 1B 91     	sta AUX1
003D4Ar 2  A9 7F        	lda #$7f		; No int
003D4Cr 2  8D 1E 91     	sta IER1
003D4Fr 2  A9 00        	lda #0
003D51r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
003D54r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
003D56r 2  8D 14 91     	sta Timer11_Low
003D59r 2  A9 4E        	lda #>timervalue
003D5Br 2  8D 15 91     	sta Timer11_High
003D5Er 2               
003D5Er 2               ; Pre-shifted byte tables if parameter 'r' given
003D5Er 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
003D5Er 2               ; The bits are shifted to the right and overflow bits are
003D5Er 2               ; inserted to the left. So 1 byte contains a left and right part
003D5Er 2               
003D5Er 2               .if rflag
003D5Er 2               shift0 = HiRAM
003D5Er 2               shift2 = HiRAM+256
003D5Er 2               shift4 = HiRAM+512
003D5Er 2               shift6 = HiRAM+768
003D5Er 2               
003D5Er 2               ; Pre-shifted table 0 pixels
003D5Er 2               
003D5Er 2               	ldx #0
003D5Er 2               shf0:
003D5Er 2               	txa
003D5Er 2               	sta shift0,x
003D5Er 2               	inx
003D5Er 2               	bne shf0
003D5Er 2               
003D5Er 2               ; Pre-shifted table 2 pixels
003D5Er 2               
003D5Er 2               	ldx #0
003D5Er 2               shf2:
003D5Er 2               	ldy #2
003D5Er 2               	txa
003D5Er 2               shf2loop:
003D5Er 2               	lsr a
003D5Er 2               	bcc :+
003D5Er 2               	ora #$80
003D5Er 2               :
003D5Er 2               	dey
003D5Er 2               	bne shf2loop
003D5Er 2               	sta shift2,x
003D5Er 2               	inx
003D5Er 2               	bne shf2
003D5Er 2               
003D5Er 2               ; Pre-shifted table 4 pixels
003D5Er 2               
003D5Er 2               	ldx #0
003D5Er 2               shf4:
003D5Er 2               	ldy #4
003D5Er 2               	txa
003D5Er 2               shf4loop:
003D5Er 2               	lsr a
003D5Er 2               	bcc :+
003D5Er 2               	ora #$80
003D5Er 2               :
003D5Er 2               	dey
003D5Er 2               	bne shf4loop
003D5Er 2               	sta shift4,x
003D5Er 2               	inx
003D5Er 2               	bne shf4
003D5Er 2               
003D5Er 2               ; Pre-shifted table 6 pixels
003D5Er 2               
003D5Er 2               	ldx #0
003D5Er 2               shf6:
003D5Er 2               	ldy #6
003D5Er 2               	txa
003D5Er 2               shf6loop:
003D5Er 2               	lsr a
003D5Er 2               	bcc :+
003D5Er 2               	ora #$80
003D5Er 2               :
003D5Er 2               	dey
003D5Er 2               	bne shf6loop
003D5Er 2               	sta shift6,x
003D5Er 2               	inx
003D5Er 2               	bne shf6
003D5Er 2               .endif
003D5Er 2               
003D5Er 2  60           	rts
003D5Fr 2               
003D5Fr 2               ;========================================================
003D5Fr 2               ; KEY AND JOYSTICK ROUTINES
003D5Fr 2               ;--------------------------------------------------------
003D5Fr 2               ; Keys
003D5Fr 2               ;
003D5Fr 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003D5Fr 2               ;             ||||||||
003D5Fr 2               ;             |||||||+> Right    KEY 0  - X
003D5Fr 2               ;             ||||||+-> Left     KEY 1  - Z
003D5Fr 2               ;             |||||+--> Down     KEY 2  - .
003D5Fr 2               ;             ||||+---> Up       KEY 3  - ;
003D5Fr 2               ;             |||+----> Fire1    KEY 4  - SPC
003D5Fr 2               ;             ||+-----> Fire2    KEY 5  - Q
003D5Fr 2               ;             |+------> Fire3    KEY 6  - P
003D5Fr 2               ;             +-------> Not used
003D5Fr 2               ;
003D5Fr 2               ;                       Option1  KEY 7  - 1
003D5Fr 2               ;                       Option2  KEY 8  - 2
003D5Fr 2               ;                       Option3  KEY 9  - 3
003D5Fr 2               ;                       Option4  KEY 10 - 4
003D5Fr 2               ;--------------------------------------------------------
003D5Fr 2               
003D5Fr 2               ;----------------------------------------------------
003D5Fr 2               ; Interrupt service
003D5Fr 2               ;----------------------------------------------------
003D5Fr 2               
003D5Fr 2               intserv:
003D5Fr 2  EE 01 96     	inc $9601	; scroll colour char topleft
003D62r 2  68           	pla
003D63r 2  A8           	tay
003D64r 2  68           	pla
003D65r 2  AA           	tax
003D66r 2  68           	pla
003D67r 2  40           	rti
003D68r 2               
003D68r 2               ;--------------------------------------------------------
003D68r 2               ; PRSKEY
003D68r 2               ;
003D68r 2               ; Wait for keypress.
003D68r 2               ;--------------------------------------------------------
003D68r 2               
003D68r 2               prskey:
003D68r 2  98           	tya
003D69r 2  48           	pha
003D6Ar 2               prsloop:
003D6Ar 2  20 rr rr     	jsr vsync
003D6Dr 2  20 rr rr     	jsr joykey
003D70r 2  09 80        	ora #$80
003D72r 2  C9 FF        	cmp #$ff
003D74r 2  D0 07        	bne :+
003D76r 2  20 rr rr     	jsr readkey
003D79r 2  C9 FF        	cmp #255
003D7Br 2  F0 ED        	beq prsloop		; wait until key pressed
003D7Dr 2               :
003D7Dr 2               prsrelease:
003D7Dr 2  20 rr rr     	jsr vsync
003D80r 2  20 rr rr     	jsr joykey
003D83r 2  09 80        	ora #$80
003D85r 2  C9 FF        	cmp #$ff
003D87r 2  F0 07        	beq :+
003D89r 2  20 rr rr     	jsr readkey
003D8Cr 2  C9 FF        	cmp #255
003D8Er 2  D0 ED        	bne prsrelease		; wait until key released
003D90r 2               :
003D90r 2  68           	pla
003D91r 2  A8           	tay
003D92r 2  60           	rts
003D93r 2               
003D93r 2               ;--------------------------------------------------------
003D93r 2               ; KTEST
003D93r 2               ;
003D93r 2               ; Keyboard test routine with key in A.
003D93r 2               ; Scan key and clear carry if key pressed
003D93r 2               ;--------------------------------------------------------
003D93r 2               
003D93r 2               ktest:
003D93r 2  85 rr        	sta z80_a		; save key
003D95r 2               
003D95r 2  4A           	lsr a
003D96r 2  4A           	lsr a
003D97r 2  4A           	lsr a
003D98r 2  4A           	lsr a
003D99r 2  AA           	tax
003D9Ar 2  BD rr rr     	lda colmask,x
003D9Dr 2  8D 20 91     	sta KeyColAddr		; set row
003DA0r 2               
003DA0r 2  A5 rr        	lda z80_a
003DA2r 2  29 0F        	and #$0f
003DA4r 2  AA           	tax			; get column
003DA5r 2               
003DA5r 2  AD 21 91     	lda KeyRowAddr		; read column
003DA8r 2  3D rr rr     	and keymask,x		; check if key pressed
003DABr 2  F0 02        	beq pressed		; Skip if pressed
003DADr 2  38           	sec			; key not pressed
003DAEr 2  60           	rts
003DAFr 2               pressed:
003DAFr 2  18           	clc			; key pressed
003DB0r 2  60           	rts
003DB1r 2               
003DB1r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
003DB5r 2  F7 FB FD FE  
003DB9r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
003DBDr 2  10 20 40 80  
003DC1r 2               
003DC1r 2               ;---------------------------------------------------------------
003DC1r 2               ; KGET
003DC1r 2               ;
003DC1r 2               ; Read keyboard matrix if a key is pressed.
003DC1r 2               ; Return A = high nibble=row and low nibble=col
003DC1r 2               ;---------------------------------------------------------------
003DC1r 2               
003DC1r 2               kget:
003DC1r 2  86 rr        	stx xtmp		; Save x-reg
003DC3r 2               kget0:
003DC3r 2  A2 00        	ldx #0			; reset row
003DC5r 2               kget1:
003DC5r 2  BD rr rr     	lda colmask,x		; Get mask
003DC8r 2  8D 20 91     	sta KeyColAddr		; Set row
003DCBr 2  AD 21 91     	lda KeyRowAddr		; Read columns
003DCEr 2  85 rr        	sta tmp			; Save colums
003DD0r 2  C9 FF        	cmp #$ff		; Key pressed?
003DD2r 2  D0 08        	bne kget2		; Yes, skip
003DD4r 2  E8           	inx			; Next row
003DD5r 2  E0 08        	cpx #8			; All rows scanned?
003DD7r 2  D0 EC        	bne kget1		; No, repeat
003DD9r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
003DDCr 2               kget2:
003DDCr 2  A0 00        	ldy #0			; Reset column
003DDEr 2               kget3:
003DDEr 2  46 rr        	lsr tmp			; Test bit
003DE0r 2  90 04        	bcc kget4		; If clear, key pressed
003DE2r 2  C8           	iny			; Next column
003DE3r 2  4C rr rr     	jmp kget3		; Repeat
003DE6r 2               kget4:
003DE6r 2  86 rr        	stx tmp			; Get row
003DE8r 2  06 rr        	asl tmp			; Make high nibble
003DEAr 2  06 rr        	asl tmp
003DECr 2  06 rr        	asl tmp
003DEEr 2  06 rr        	asl tmp
003DF0r 2  98           	tya			; Get column
003DF1r 2  18           	clc
003DF2r 2  65 rr        	adc tmp			; Add row as low nibble
003DF4r 2  85 rr        	sta tmp
003DF6r 2               kget5:
003DF6r 2  AD 21 91     	lda KeyRowAddr		; Read columns
003DF9r 2  C9 FF        	cmp #$ff
003DFBr 2  D0 F9        	bne kget5
003DFDr 2               
003DFDr 2  A5 rr        	lda tmp			; Return keycode
003DFFr 2  A6 rr        	ldx xtmp		; Restore X-reg
003E01r 2  60           	rts			; Return
003E02r 2               
003E02r 2               ;-------------------------------------------------------------
003E02r 2               ; READKEY
003E02r 2               ;
003E02r 2               ; Check keyboard matrix if a key is pressed
003E02r 2               ; Return keymask in Y
003E02r 2               ;-------------------------------------------------------------
003E02r 2               
003E02r 2               readkey:
003E02r 2  A9 FF        	lda #$ff		; Keymask
003E04r 2  85 rr        	sta tmp
003E06r 2  A2 07        	ldx #7
003E08r 2               scanrow:
003E08r 2  BD rr rr     	lda colmask,x
003E0Br 2  8D 20 91     	sta KeyColAddr		; set row
003E0Er 2  AD 21 91     	lda KeyRowAddr		; read column
003E11r 2  25 rr        	and tmp			; Reset bit is key pressed
003E13r 2  85 rr        	sta tmp
003E15r 2  CA           	dex
003E16r 2  10 F0        	bpl scanrow
003E18r 2  A5 rr        	lda tmp
003E1Ar 2  A8           	tay
003E1Br 2  60           	rts
003E1Cr 2               
003E1Cr 2               ;-------------------------------------------------------------
003E1Cr 2               ; JOY1SCAN
003E1Cr 2               ;
003E1Cr 2               ; Initializes joystick
003E1Cr 2               ;-------------------------------------------------------------
003E1Cr 2               
003E1Cr 2               joyinit:
003E1Cr 2  60           	rts
003E1Dr 2               
003E1Dr 2               ;-------------------------------------------------------------
003E1Dr 2               ; JOY1SCAN
003E1Dr 2               ;
003E1Dr 2               ; Scan joystick1 and return key in z80_e
003E1Dr 2               ; Up, down, left, right and fire are read from the joystick
003E1Dr 2               ; Fire2 and fire3 are read from the keyboard
003E1Dr 2               ;-------------------------------------------------------------
003E1Dr 2               
003E1Dr 2               joy1scan:
003E1Dr 2  A9 FF        	lda #$ff
003E1Fr 2  85 rr        	sta z80_e
003E21r 2               
003E21r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
003E24r 2  4A           	lsr a
003E25r 2  4A           	lsr a
003E26r 2               
003E26r 2  4A           	lsr a
003E27r 2  26 rr        	rol z80_e		; Up
003E29r 2  4A           	lsr a
003E2Ar 2  26 rr        	rol z80_e		; Down
003E2Cr 2  4A           	lsr a
003E2Dr 2  26 rr        	rol z80_e		; Left
003E2Fr 2               
003E2Fr 2  A9 7F        	lda #%01111111
003E31r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
003E34r 2  AD 20 91     	lda JoyAddr2
003E37r 2  0A           	asl a
003E38r 2  26 rr        	rol z80_e		; Right
003E3Ar 2  A9 FF        	lda #%11111111
003E3Cr 2  8D 22 91     	sta DDRB		; Reset
003E3Fr 2               
003E3Fr 2  AD 11 91     	lda JoyAddr1
003E42r 2  29 20        	and #%00100000
003E44r 2  D0 06        	bne :+
003E46r 2  A5 rr        	lda z80_e
003E48r 2  29 EF        	and #%11101111		; Fire
003E4Ar 2  85 rr        	sta z80_e
003E4Cr 2               :
003E4Cr 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
003E4Fr 2  20 rr rr     	jsr ktest
003E52r 2  B0 06        	bcs :+
003E54r 2  A5 rr        	lda z80_e
003E56r 2  29 BF        	and #%10111111
003E58r 2  85 rr        	sta z80_e
003E5Ar 2               :
003E5Ar 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
003E5Dr 2  20 rr rr     	jsr ktest
003E60r 2  B0 06        	bcs :+
003E62r 2  A5 rr        	lda z80_e
003E64r 2  29 DF        	and #%11011111
003E66r 2  85 rr        	sta z80_e
003E68r 2               :
003E68r 2  60           	rts
003E69r 2               
003E69r 2               ;-------------------------------------------------------------
003E69r 2               ; JOY2SCAN
003E69r 2               ;
003E69r 2               ; TODO, Scan joystick2 and return key in z80_e
003E69r 2               ;-------------------------------------------------------------
003E69r 2               
003E69r 2               joy2scan:
003E69r 2  60           	rts
003E6Ar 2               
003E6Ar 2               
003E6Ar 2               
003E6Ar 2               ;========================================================
003E6Ar 2               ; HARDWARE DEPENDING ROUTINES
003E6Ar 2               ;========================================================
003E6Ar 2               
003E6Ar 2               ;----------------------------------------------------
003E6Ar 2               ; DELAY
003E6Ar 2               ;
003E6Ar 2               ; Delay routine A * 1/50 sec
003E6Ar 2               ;----------------------------------------------------
003E6Ar 2               
003E6Ar 2               delay:
003E6Ar 2  85 rr        	sta xtmp		; set delaycounter
003E6Cr 2               del_loop:
003E6Cr 2  AD 04 90     	lda Reg4
003E6Fr 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
003E71r 2               
003E71r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
003E73r 2               delay1:
003E73r 2  61 80        	adc ($80,x)		;	 6 usec
003E75r 2  61 80        	adc ($80,x)		;	 6 usec
003E77r 2  88           	dey			;	 2 usec
003E78r 2  D0 F9        	bne delay1		;	 2 usec
003E7Ar 2  EA           	nop			; 2 usec
003E7Br 2  EA           	nop			; 2 usec
003E7Cr 2               				; tot: 20000 usec
003E7Cr 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
003E7Er 2  D0 EC        	bne del_loop
003E80r 2  60           	rts
003E81r 2               
003E81r 2               ;-------------------------------------------------------------
003E81r 2               ; VSYNC
003E81r 2               ;
003E81r 2               ; - read joystick/keyboard
003E81r 2               ; - sync framerate with timer 25Hz
003E81r 2               ; - handle shrapnel every even frame
003E81r 2               ; - handle sound
003E81r 2               ;-------------------------------------------------------------
003E81r 2               
003E81r 2               vsync:
003E81r 2  48           	pha			; save registers
003E82r 2  98           	tya
003E83r 2  48           	pha
003E84r 2  8A           	txa
003E85r 2  48           	pha
003E86r 2               
003E86r 2               ; Read joystick/keyboard.
003E86r 2               
003E86r 2  20 rr rr     	jsr joykey
003E89r 2               
003E89r 2               ; Sync framerate with timer 25Hz
003E89r 2               
003E89r 2  A9 40        	lda #$40		; set Timer1 expired bit
003E8Br 2               vsync1:
003E8Br 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
003E8Er 2  F0 FB        	beq vsync1		; wait if timer not expired
003E90r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
003E93r 2               
003E93r 2               ; Handle sound command
003E93r 2               
003E93r 2               ;	jsr make_sound2
003E93r 2               
003E93r 2               ; Handle shrapnel every even frame
003E93r 2               
003E93r 2  A5 rr        	lda clock		; get clock
003E95r 2  29 01        	and #1			; 2 frames expired
003E97r 2  D0 03        	bne:+
003E99r 2  20 rr rr     	jsr proshr		; process shrapnel
003E9Cr 2               :
003E9Cr 2               
003E9Cr 2               ; Handle sound
003E9Cr 2               
003E9Cr 2  AD rr rr         lda sndtyp
003E9Fr 2  F0 3E            beq sndskip
003EA1r 2               
003EA1r 2               sndloop:
003EA1r 2  AC rr rr         ldy sndtyp
003EA4r 2               sndwait:
003EA4r 2  88               dey
003EA5r 2  D0 FD            bne sndwait
003EA7r 2               
003EA7r 2  AD rr rr         lda sndtyp
003EAAr 2  30 16            bmi crashaudio
003EACr 2               
003EACr 2               
003EACr 2               beepaudio:
003EACr 2                   ; enable sound on channel 2
003EACr 2                   ; add 128 because sound is in range 128-255
003EACr 2               ;    lsr
003EACr 2  A5 rr        	lda SOUNDS_STATUS
003EAEr 2  09 40        	ora #%01000000
003EB0r 2  85 rr        	sta SOUNDS_STATUS
003EB2r 2  A9 FF            lda #$ff
003EB4r 2  38               sec
003EB5r 2  ED rr rr         sbc sndtyp
003EB8r 2  4A               lsr
003EB9r 2  4A               lsr
003EBAr 2  09 C0            ora #%11000000
003EBCr 2  8D 0C 90         sta $900c
003EBFr 2  4C rr rr         jmp endaudiotype
003EC2r 2               crashaudio:
003EC2r 2  A5 rr        	lda SOUNDS_STATUS
003EC4r 2  09 80        	ora #%10000000
003EC6r 2  85 rr        	sta SOUNDS_STATUS
003EC8r 2  A9 FF            lda #$ff
003ECAr 2  38               sec
003ECBr 2  ED rr rr         sbc sndtyp
003ECEr 2  09 80            ora #%10000000
003ED0r 2  8D 0D 90         sta $900d
003ED3r 2               
003ED3r 2               endaudiotype:
003ED3r 2               
003ED3r 2  CE rr rr         dec sndtyp
003ED6r 2  F0 07            beq sndskip
003ED8r 2  C9 80            cmp #128
003EDAr 2  F0 03            beq sndskip
003EDCr 2  4C rr rr         jmp sndloop
003EDFr 2               sndskip:
003EDFr 2                   ; disable sound
003EDFr 2  24 rr        	bit SOUNDS_STATUS
003EE1r 2  50 0B        	bvc :+
003EE3r 2  A5 rr        	lda SOUNDS_STATUS
003EE5r 2  29 BF        	and #%10111111
003EE7r 2  85 rr        	sta SOUNDS_STATUS
003EE9r 2  A9 00        	lda #$00
003EEBr 2  8D 0C 90         sta $900c
003EEEr 2               :
003EEEr 2  24 rr        	bit SOUNDS_STATUS
003EF0r 2  10 0B        	bpl :+
003EF2r 2               
003EF2r 2  A5 rr        	lda SOUNDS_STATUS
003EF4r 2  29 7F        	and #%01111111
003EF6r 2  85 rr        	sta SOUNDS_STATUS
003EF8r 2  A9 00        	lda #$00
003EFAr 2  8D 0D 90         sta $900d
003EFDr 2               :
003EFDr 2  68               pla
003EFEr 2  AA               tax
003EFFr 2  68               pla
003F00r 2  A8               tay
003F01r 2  68               pla
003F02r 2  60               rts
003F03r 2  00           sndtyp:		.byte 0		; Beep sound parameter
003F04r 2               
003F04r 2               
003F04r 2               
003F04r 2               
003F04r 2               
003F04r 2               
003F04r 2               ;========================================================
003F04r 2               ; SPRITE HANDLING ROUTINES
003F04r 2               ;========================================================
003F04r 2               
003F04r 2               ;----------------------------------------------------
003F04r 2               ; SPRITE
003F04r 2               ;
003F04r 2               ; Draw object sprite
003F04r 2               ;----------------------------------------------------
003F04r 2               
003F04r 2               .if oflag
003F04r 2               sprite:
003F04r 2               	stx xtmp		; Save X-reg
003F04r 2               	jsr scadd 		; get screen address in scraddr.
003F04r 2               
003F04r 2               	lda dispx 		; x position.
003F04r 2               	and #7 			; position straddling cells.
003F04r 2               	sta z80_b		; store in b register.
003F04r 2               
003F04r 2               	lda z80_l		; store sprite graphic address.
003F04r 2               	sta sprit1+1
003F04r 2               	sta sprit2+1
003F04r 2               	lda z80_h
003F04r 2               	sta sprit1+2
003F04r 2               	sta sprit2+2
003F04r 2               
003F04r 2               	ldx #0			; pixel height.
003F04r 2               	ldy #0
003F04r 2               sprit1:
003F04r 2               	lda objdta,x		; fetch first byte.
003F04r 2               	sta spr
003F04r 2               	inx
003F04r 2               sprit2:
003F04r 2               	lda objdta,x
003F04r 2               	sta spr+1
003F04r 2               
003F04r 2               	lda #0
003F04r 2               	sta spr+2
003F04r 2               	jsr sprit7		; shift sprite
003F04r 2               
003F04r 2               	lda spr			; fetch graphic.
003F04r 2               	ldy #0			; _BEEB
003F04r 2               	eor (scraddr),y		; merge with screen image.
003F04r 2               	sta (scraddr),y		; write to screen.
003F04r 2               
003F04r 2               	lda spr+1		; fetch graphic.
003F04r 2               	ldy #16			; _BEEB
003F04r 2               	eor (scraddr),y		; merge with screen image.
003F04r 2               	sta (scraddr),y		; write to screen.
003F04r 2               
003F04r 2               	lda spr+2		; fetch graphic.
003F04r 2               	ldy #32			; _BEEB
003F04r 2               	eor (scraddr),y		; merge with screen image.
003F04r 2               	sta (scraddr),y		; write to screen.
003F04r 2               
003F04r 2               	jsr nline
003F04r 2               
003F04r 2               	inx			; next source byte.
003F04r 2               	cpx #32
003F04r 2               	bne sprit1		; repeat
003F04r 2               
003F04r 2               	ldx xtmp		; retreive X-reg
003F04r 2               	rts
003F04r 2               
003F04r 2               .endif
003F04r 2               
003F04r 2               ;------------------------------------------------------------------
003F04r 2               ; SCADD
003F04r 2               ;
003F04r 2               ; This routine returns a screen address for X,Y in scraddr.
003F04r 2               ;------------------------------------------------------------------
003F04r 2               
003F04r 2               scadd:
003F04r 2  A5 rr        	lda dispx		; get x
003F06r 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
003F08r 2  85 rr        	sta scraddr		; set lb scraddr
003F0Ar 2  A9 00        	lda #0
003F0Cr 2  85 rr        	sta scraddr+1		; set hb scraddr
003F0Er 2  06 rr        	asl scraddr		; multiply X by 2
003F10r 2  26 rr        	rol scraddr+1
003F12r 2               
003F12r 2               ; Add line address Y pos to X
003F12r 2               
003F12r 2  A6 rr        	ldx dispy		; get row address Y pos
003F14r 2  18           	clc
003F15r 2  A5 rr        	lda scraddr
003F17r 2  7D 00 07     	adc SCADTB_lb,x
003F1Ar 2  85 rr        	sta scraddr
003F1Cr 2  A5 rr        	lda scraddr+1
003F1Er 2  7D 00 08     	adc SCADTB_hb,x
003F21r 2  85 rr        	sta scraddr+1
003F23r 2               
003F23r 2  60           	rts
003F24r 2               
003F24r 2               ;------------------------------------------------------------------
003F24r 2               ; SSPRIA
003F24r 2               ;
003F24r 2               ; Erase single sprite, old (ix+0).
003F24r 2               ;------------------------------------------------------------------
003F24r 2               
003F24r 2               sspria:
003F24r 2  20 rr rr     	jsr gsprad		; get old sprite address.
003F27r 2               sspri2:
003F27r 2               .if rflag
003F27r 2               	lda z80_e		; 3c
003F27r 2               	sta dline_spraddr1+1	; 4c
003F27r 2               	sta dline_spraddr2+1	; 4c
003F27r 2               	lda z80_d		; 3c
003F27r 2               	sta dline_spraddr1+2	; 4c
003F27r 2               	sta dline_spraddr2+2	; 4c
003F27r 2               
003F27r 2               	ldx sprshft
003F27r 2               	lda shift_table,x
003F27r 2               	sta dline_shift1+1
003F27r 2               	sta dline_shift2+1
003F27r 2               	lda shift_table+1,x
003F27r 2               	sta dline_shift1+2
003F27r 2               	sta dline_shift2+2
003F27r 2               
003F27r 2               	ldx #0			; byte counter.
003F27r 2               sspri0:
003F27r 2               	jsr dline		; draw a line.
003F27r 2                 .if bflag
003F27r 2               	cpx #48			; big sprites have 24 bytes
003F27r 2                 .else
003F27r 2               	cpx #32			; normal sprites have 32 bytes
003F27r 2                 .endif
003F27r 2               	bne sspri0		; repeat 16 times x 2 bytes
003F27r 2               	rts
003F27r 2               .else
003F27r 2                 .if bflag
003F27r 2               	lda #24			; big sprites have 24 lines
003F27r 2                 .else
003F27r 2  A9 10        	lda #16			; normal sprites have 16 lines.
003F29r 2                 .endif
003F29r 2  8D rr rr     	sta acnt
003F2Cr 2               sspri0:
003F2Cr 2  20 rr rr     	jsr dline		; draw a line.
003F2Fr 2  CE rr rr     	dec acnt
003F32r 2  D0 F8        	bne sspri0		; repeat 16 times
003F34r 2  60           	rts
003F35r 2               
003F35r 2  00           acnt:	.byte 0			; line counter
003F36r 2               
003F36r 2               .endif
003F36r 2               
003F36r 2               ;------------------------------------------------------------------
003F36r 2               ; SSPRIB
003F36r 2               ;
003F36r 2               ; Display single sprite, new (ix+5).
003F36r 2               ;------------------------------------------------------------------
003F36r 2               
003F36r 2               ssprib:
003F36r 2  20 rr rr     	jsr gspran 		; get new sprite address.
003F39r 2  4C rr rr     	jmp sspri2		; Display sprite
003F3Cr 2               
003F3Cr 2               ;------------------------------------------------------------------
003F3Cr 2               ; SSPRIC
003F3Cr 2               ;
003F3Cr 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
003F3Cr 2               ;------------------------------------------------------------------
003F3Cr 2               
003F3Cr 2               sspric:
003F3Cr 2               .if rflag
003F3Cr 2               	jsr gsprad 		; get old sprite address.
003F3Cr 2               
003F3Cr 2               	lda z80_e		; 3c
003F3Cr 2               	sta ddline_spraddr3+1	; 4c
003F3Cr 2               	sta ddline_spraddr4+1	; 4c
003F3Cr 2               
003F3Cr 2               	lda z80_d		; 3c
003F3Cr 2               	sta ddline_spraddr3+2	; 4c
003F3Cr 2               	sta ddline_spraddr4+2	; 4c
003F3Cr 2               
003F3Cr 2               	ldx sprshft		; set spriteshift table addresses
003F3Cr 2               	lda shift_table,x
003F3Cr 2               	sta ddline_shift3+1
003F3Cr 2               	sta ddline_shift4+1
003F3Cr 2               	lda shift_table+1,x
003F3Cr 2               	sta ddline_shift3+2
003F3Cr 2               	sta ddline_shift4+2
003F3Cr 2               
003F3Cr 2               	jsr exx  		; store addresses.
003F3Cr 2               	jsr gspran 		; get new sprite addresses.
003F3Cr 2               
003F3Cr 2               	lda z80_e		; 3c
003F3Cr 2               	sta ddline_spraddr1+1	; 4c
003F3Cr 2               	sta ddline_spraddr2+1	; 4c
003F3Cr 2               
003F3Cr 2               	lda z80_d		; 3c
003F3Cr 2               	sta ddline_spraddr1+2	; 4c
003F3Cr 2               	sta ddline_spraddr2+2	; 4c
003F3Cr 2               
003F3Cr 2               	ldx sprshft
003F3Cr 2               	lda shift_table,x
003F3Cr 2               	sta ddline_shift1+1
003F3Cr 2               	sta ddline_shift2+1
003F3Cr 2               	lda shift_table+1,x
003F3Cr 2               	sta ddline_shift1+2
003F3Cr 2               	sta ddline_shift2+2
003F3Cr 2               
003F3Cr 2               	ldx #0
003F3Cr 2               lloop:
003F3Cr 2               	jsr ddline 		; draw a line.
003F3Cr 2                 .if bflag
003F3Cr 2               	cpx #48
003F3Cr 2                 .else
003F3Cr 2               	cpx #32
003F3Cr 2                 .endif
003F3Cr 2               	bne lloop
003F3Cr 2               	rts
003F3Cr 2               
003F3Cr 2               shift_table:
003F3Cr 2               	.word shift0
003F3Cr 2               	.word shift2
003F3Cr 2               	.word shift4
003F3Cr 2               	.word shift6
003F3Cr 2               
003F3Cr 2               ;------------------------------------------------------------------
003F3Cr 2               ; DLINE
003F3Cr 2               ;
003F3Cr 2               ; Draw a sprite line, now work out next target address.
003F3Cr 2               ;
003F3Cr 2               ; Input:
003F3Cr 2               ;  B  = right mask
003F3Cr 2               ;  C  = left mask
003F3Cr 2               ;  DE = spriteaddress
003F3Cr 2               ;  scraddr = screen address
003F3Cr 2               ;------------------------------------------------------------------
003F3Cr 2               
003F3Cr 2               dline:
003F3Cr 2               
003F3Cr 2               dline_spraddr1:
003F3Cr 2               	ldy $ffff,x 		; get graphic data as pointer.
003F3Cr 2               dline_shift1:
003F3Cr 2               	lda $ffff,y		; get pre-shifted data
003F3Cr 2               	sta sprtmp		; save byte
003F3Cr 2               	and z80_c 		; mask right for left byte
003F3Cr 2               
003F3Cr 2               	ldy #0
003F3Cr 2               	eor (scraddr),y 	; XOR with what's there.
003F3Cr 2               	sta (scraddr),y 	; display left byte
003F3Cr 2               
003F3Cr 2               ; carry to next screen byte
003F3Cr 2               
003F3Cr 2               	lda sprtmp		; fetch data.
003F3Cr 2               	and z80_b 		; mask for left part
003F3Cr 2               	sta sprtmp
003F3Cr 2               
003F3Cr 2               ; middle screen byte
003F3Cr 2               
003F3Cr 2               	inx
003F3Cr 2               dline_spraddr2:
003F3Cr 2               	ldy $ffff,x 		; second bit of data.
003F3Cr 2               dline_shift2:
003F3Cr 2               	lda $ffff,y
003F3Cr 2               	sta sprtmp2
003F3Cr 2               	and z80_c 		; mask away what's not needed.
003F3Cr 2               	ora sprtmp
003F3Cr 2               	ldy #16
003F3Cr 2               	eor (scraddr),y 	; XOR with what's there.
003F3Cr 2               	sta (scraddr),y 	; display middle bye.
003F3Cr 2               
003F3Cr 2               ; carry to last screen byte
003F3Cr 2               
003F3Cr 2               	lda sprtmp2
003F3Cr 2               	and z80_b 		; mask away unwanted
003F3Cr 2               
003F3Cr 2               	ldy #32
003F3Cr 2               	eor (scraddr),y 	; XOR with what's there.
003F3Cr 2               	sta (scraddr),y 	; display right byte.
003F3Cr 2               
003F3Cr 2               	inx
003F3Cr 2               .else
003F3Cr 2               
003F3Cr 2  20 rr rr     	jsr gsprad 		; get old sprite address.
003F3Fr 2  20 rr rr     	jsr exx  		; store addresses.
003F42r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
003F45r 2               
003F45r 2               .if bflag
003F45r 2               	lda #23
003F45r 2               .else
003F45r 2  A9 0F        	lda #15
003F47r 2               .endif
003F47r 2  85 rr        	sta ccnt
003F49r 2               lloop:
003F49r 2  20 rr rr     	jsr dline 		; draw a line.
003F4Cr 2  20 rr rr     	jsr exx  		; restore old addresses.
003F4Fr 2  20 rr rr     	jsr dline 		; delete a line.
003F52r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
003F55r 2  C6 rr        	dec ccnt
003F57r 2  D0 F0        	bne lloop
003F59r 2               
003F59r 2  20 rr rr     	jsr dline		; draw a line.
003F5Cr 2  20 rr rr     	jsr exx 		; restore old addresses.
003F5Fr 2               
003F5Fr 2               ;-------------------------------------------------------------
003F5Fr 2               ; Drop through.
003F5Fr 2               ; Line drawn, now work out next target address.
003F5Fr 2               ;
003F5Fr 2               ; Input:
003F5Fr 2               ;  B  = right mask
003F5Fr 2               ;  C  = left mask
003F5Fr 2               ;  DE = spriteaddress
003F5Fr 2               ;  scraddr = screen address
003F5Fr 2               ;-------------------------------------------------------------
003F5Fr 2               
003F5Fr 2               dline:
003F5Fr 2  A0 00        	ldy #0
003F61r 2  B1 rr        	lda (z80_de),y 		; graphic data.
003F63r 2  48           	pha
003F64r 2  25 rr        	and z80_c 		; mask away what's not needed.
003F66r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
003F68r 2  91 rr        	sta (scraddr),y 	; left byte on screen.
003F6Ar 2               
003F6Ar 2  68           	pla
003F6Br 2  25 rr        	and z80_b 		; mask away unwanted bits.
003F6Dr 2  A0 20        	ldy #32
003F6Fr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
003F71r 2  91 rr        	sta (scraddr),y 	; right byte on screen
003F73r 2               
003F73r 2  E6 rr        	inc z80_e 		; next graphic.
003F75r 2  D0 02        	bne :+
003F77r 2  E6 rr        	inc z80_d
003F79r 2               :
003F79r 2               ; _BEEB screen arrangement
003F79r 2               ;	sec
003F79r 2               ;	lda scraddr 		; one character cell to the left.
003F79r 2               ;	sbc #8
003F79r 2               ;	sta scraddr
003F79r 2               ;	lda scraddr+1
003F79r 2               ;	sbc #0
003F79r 2               ;	sta scraddr+1
003F79r 2  A0 00        	ldy #0
003F7Br 2  B1 rr        	lda (z80_de),y 		; second bit of data.
003F7Dr 2  A0 10        	ldy #16
003F7Fr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
003F81r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
003F83r 2               
003F83r 2  E6 rr        	inc z80_e 		; point to next line of data.
003F85r 2  D0 02        	bne :+
003F87r 2  E6 rr        	inc z80_d
003F89r 2               :
003F89r 2               ; _BEEB screen arrangement
003F89r 2               ;	sec
003F89r 2               ;	lda scraddr 		; another char left.
003F89r 2               ;	sbc #8
003F89r 2               ;	sta scraddr
003F89r 2               ;	lda scraddr+1
003F89r 2               ;	sbc #0
003F89r 2               ;	sta scraddr+1
003F89r 2               .endif
003F89r 2               
003F89r 2               ;----------------------------------------------------------------------
003F89r 2               ; Line drawn, now work out next target address.
003F89r 2               ;----------------------------------------------------------------------
003F89r 2               
003F89r 2               ; _BEEB screen arrangement
003F89r 2               
003F89r 2               nline:
003F89r 2  A5 rr        	lda scraddr 			; get low byte of address.
003F8Br 2  29 0F        	and #15
003F8Dr 2  C9 0F        	cmp #15				; is this last line of row?
003F8Fr 2  F0 03        	beq beeb_next_row
003F91r 2               
003F91r 2               	; within same row
003F91r 2  E6 rr        	inc scraddr			; new low byte of address.
003F93r 2  60           	rts
003F94r 2               
003F94r 2               beeb_next_row:
003F94r 2  18           	clc
003F95r 2  A5 rr        	lda scraddr
003F97r 2  69 51        	adc #<(ScreenRowBytes-15)
003F99r 2  85 rr        	sta scraddr			; new low byte of address.
003F9Br 2  A5 rr        	lda scraddr+1
003F9Dr 2  69 01        	adc #>(ScreenRowBytes-15)
003F9Fr 2  85 rr        	sta scraddr+1			; new high byte of address.
003FA1r 2  60           	rts
003FA2r 2               
003FA2r 2               .if rflag
003FA2r 2               ;-------------------------------------------------------------
003FA2r 2               ; Drop through.
003FA2r 2               ; Line drawn, now work out next target address.
003FA2r 2               ;
003FA2r 2               ; Input:
003FA2r 2               ;  B  = right mask
003FA2r 2               ;  C  = left mask
003FA2r 2               ;  DE = spriteaddress
003FA2r 2               ;  scraddr = screen address
003FA2r 2               ;-------------------------------------------------------------
003FA2r 2               
003FA2r 2               ddline:
003FA2r 2               
003FA2r 2               ; NEW SPRITE
003FA2r 2               
003FA2r 2               ; first screen byte
003FA2r 2               
003FA2r 2               ddline_spraddr1:
003FA2r 2               	ldy $ffff,x 		; graphic data.
003FA2r 2               ddline_shift1:
003FA2r 2               	lda $ffff,y
003FA2r 2               	sta sprtmp
003FA2r 2               	and z80_c 			; mask away what's not needed.
003FA2r 2               
003FA2r 2               	ldy #0
003FA2r 2               	eor (scraddr),y 	; XOR with what's there.
003FA2r 2               	sta (scraddr),y 	; bung it in.
003FA2r 2               
003FA2r 2               ; carry to next screen byte
003FA2r 2               
003FA2r 2               	lda sprtmp			; fetch data.
003FA2r 2               	and z80_b 			; mask away unwanted
003FA2r 2               	sta sprtmp
003FA2r 2               
003FA2r 2               ; middle screen byte
003FA2r 2               
003FA2r 2               	inx
003FA2r 2               ddline_spraddr2:
003FA2r 2               	ldy $ffff,x 		; second bit of data.
003FA2r 2               ddline_shift2:
003FA2r 2               	lda $ffff,y
003FA2r 2               	sta sprtmp2
003FA2r 2               	and z80_c 			; mask away what's not needed.
003FA2r 2               	ora sprtmp
003FA2r 2               
003FA2r 2               	ldy #16
003FA2r 2               	eor (scraddr),y 	; XOR with what's there.
003FA2r 2               	sta (scraddr),y 	; bung it in.
003FA2r 2               
003FA2r 2               ; carry to last screen byte
003FA2r 2               
003FA2r 2               	lda sprtmp2
003FA2r 2               	and z80_b 			; mask away unwanted
003FA2r 2               
003FA2r 2               	ldy #32
003FA2r 2               	eor (scraddr),y 	; XOR with what's there.
003FA2r 2               	sta (scraddr),y 	; bung it in.
003FA2r 2               
003FA2r 2               ; _BEEB next row
003FA2r 2               
003FA2r 2               	lda scraddr 		; get low byte of address.
003FA2r 2               	and #15
003FA2r 2               	cmp #15				; is this last line of row?
003FA2r 2               	beq :+
003FA2r 2               
003FA2r 2               	; within same row can't increment page
003FA2r 2               	inc scraddr			; new low byte of address.
003FA2r 2               	bne ddline2
003FA2r 2               
003FA2r 2               :
003FA2r 2               	clc
003FA2r 2               	lda scraddr
003FA2r 2               	adc #<(ScreenRowBytes-15)
003FA2r 2               	sta scraddr			; new low byte of address.
003FA2r 2               	lda scraddr+1
003FA2r 2               	adc #>(ScreenRowBytes-15)
003FA2r 2               	sta scraddr+1		; new high byte of address.
003FA2r 2               
003FA2r 2               ; OLD SPRITE
003FA2r 2               
003FA2r 2               ddline2:
003FA2r 2               
003FA2r 2               ; still first row but different data!
003FA2r 2               
003FA2r 2               	dex
003FA2r 2               
003FA2r 2               ; first screen byte
003FA2r 2               
003FA2r 2               ddline_spraddr3:
003FA2r 2               	ldy $ffff,x			; graphic data.
003FA2r 2               ddline_shift3:
003FA2r 2               	lda $ffff,y
003FA2r 2               	sta sprtmp
003FA2r 2               	and z80_cp 			; mask away what's not needed.
003FA2r 2               
003FA2r 2               	ldy #0
003FA2r 2               	eor (z80_hlp),y 	; XOR with what's there.
003FA2r 2               	sta (z80_hlp),y 	; bung it in.
003FA2r 2               
003FA2r 2               ; carry to next screen byte
003FA2r 2               
003FA2r 2               	lda sprtmp			; fetch data.
003FA2r 2               	and z80_bp 			; mask away unwanted
003FA2r 2               	sta sprtmp
003FA2r 2               
003FA2r 2               ; middle screen byte
003FA2r 2               
003FA2r 2               	inx
003FA2r 2               ddline_spraddr4:
003FA2r 2               	ldy $ffff,x 		; second bit of data.
003FA2r 2               ddline_shift4:
003FA2r 2               	lda $ffff,y
003FA2r 2               	sta sprtmp2
003FA2r 2               	and z80_cp 			; mask away what's not needed.
003FA2r 2               	ora sprtmp
003FA2r 2               
003FA2r 2               	ldy #16
003FA2r 2               	eor (z80_hlp),y 	; XOR with what's there.
003FA2r 2               	sta (z80_hlp),y 	; bung it in.
003FA2r 2               
003FA2r 2               ; last screen byte
003FA2r 2               
003FA2r 2               	lda sprtmp2			; fetch data.
003FA2r 2               	and z80_bp 			; mask away unwanted
003FA2r 2               
003FA2r 2               	ldy #32
003FA2r 2               	eor (z80_hlp),y 	; XOR with what's there.
003FA2r 2               	sta (z80_hlp),y 	; bung it in.
003FA2r 2               
003FA2r 2               ; next row of sprite data
003FA2r 2               
003FA2r 2               	inx
003FA2r 2               
003FA2r 2               ; _BEEB screen arrangement
003FA2r 2               
003FA2r 2               	lda z80_lp 			; get low byte of address.
003FA2r 2               	and #15
003FA2r 2               	cmp #15				; is this last line of row?
003FA2r 2               	beq :+
003FA2r 2               
003FA2r 2               	; within same row can't increment page
003FA2r 2               	inc z80_lp			; new low byte of address.
003FA2r 2               	rts
003FA2r 2               
003FA2r 2               :
003FA2r 2               	clc
003FA2r 2               	lda z80_lp
003FA2r 2               	adc #<(ScreenRowBytes-15)
003FA2r 2               	sta z80_lp			; new low byte of address.
003FA2r 2               	lda z80_lp+1
003FA2r 2               	adc #>(ScreenRowBytes-15)
003FA2r 2               	sta z80_lp+1		; new high byte of address.
003FA2r 2               	rts
003FA2r 2               .endif
003FA2r 2               
003FA2r 2               ;----------------------------------------------------
003FA2r 2               ; Display character in A at dispx,dispy.
003FA2r 2               ;
003FA2r 2               ; Input:
003FA2r 2               ;  A 	   = character to print
003FA2r 2               ;----------------------------------------------------
003FA2r 2               
003FA2r 2               pchar:
003FA2r 2  85 rr        	sta fntaddr
003FA4r 2  A9 00        	lda #0
003FA6r 2  85 rr        	sta fntaddr+1
003FA8r 2  06 rr        	asl fntaddr  		; multiply char by 8.
003FAAr 2  26 rr        	rol fntaddr+1
003FACr 2  06 rr        	asl fntaddr
003FAEr 2  26 rr        	rol fntaddr+1
003FB0r 2  06 rr        	asl fntaddr
003FB2r 2  26 rr        	rol fntaddr+1
003FB4r 2               
003FB4r 2  A5 rr        	lda fntaddr
003FB6r 2  18           	clc
003FB7r 2  69 rr        	adc #<(FONT-256)
003FB9r 2  85 rr        	sta fntaddr		; that's the low byte.
003FBBr 2  A5 rr        	lda fntaddr+1
003FBDr 2  69 rr        	adc #>(FONT-256)
003FBFr 2  85 rr        	sta fntaddr+1		; add displacement.
003FC1r 2               
003FC1r 2               pchark:
003FC1r 2  20 rr rr     	jsr gaadd		; set colour attribute
003FC4r 2  AD rr rr     	lda fontcol
003FC7r 2  A0 00        	ldy #0
003FC9r 2  91 rr        	sta (bufaddr),y
003FCBr 2               
003FCBr 2  20 rr rr     	jsr gprad		; get screen address.
003FCEr 2  A2 07        	ldx #7			; lines to write.
003FD0r 2               pchar0:
003FD0r 2  A0 00        	ldy #0
003FD2r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
003FD4r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
003FD7r 2               .if iflag
003FD7r 2               	eor #TxtInvert		; Invert
003FD7r 2               .endif
003FD7r 2  91 rr        	sta (scraddr),y 	; copy to screen.
003FD9r 2  E6 rr        	inc fntaddr		; next image byte.
003FDBr 2  D0 02        	bne :+
003FDDr 2  E6 rr        	inc fntaddr+1
003FDFr 2               :
003FDFr 2  CA           	dex			; next screen row down.
003FE0r 2  10 EE        	bpl pchar0		; repeat.
003FE2r 2               
003FE2r 2  60           	rts
003FE3r 2               
003FE3r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
003FE7r 2  03 02 01 00  
003FEBr 2               
003FEBr 2               ;----------------------------------------------------
003FEBr 2               ; LoadFile
003FEBr 2               ;----------------------------------------------------
003FEBr 2               
003FEBr 2               loadfile:
003FEBr 2  AA           	tax
003FECr 2  A9 rr        	lda #<msgdat		; pointer to messages.
003FEEr 2  85 rr        	sta z80_l
003FF0r 2  A9 rr        	lda #>msgdat
003FF2r 2  85 rr        	sta z80_h
003FF4r 2  20 rr rr     	jsr getwrd		; get message number.
003FF7r 2               
003FF7r 2               ; Init screen for NTSC
003FF7r 2               ; this sets the background and border color of the screen
003FF7r 2               ; in this case border black and background black
003FF7r 2               
003FF7r 2  A9 08        	lda #%00001000
003FF9r 2  8D 0F 90     	sta RegF
003FFCr 2               
003FFCr 2               ; z80_hl should point to the textstring now.
003FFCr 2               ; Read filename +length into buffer
003FFCr 2               
003FFCr 2  A0 00        	ldy #0
003FFEr 2               nameloop:
003FFEr 2  B1 rr        	lda (z80_hl),y
004000r 2  30 07        	bmi lastchar
004002r 2  99 rr rr     	sta filename,y
004005r 2  C8           	iny
004006r 2  4C rr rr     	jmp nameloop
004009r 2               lastchar:
004009r 2  29 7F        	and #$7f
00400Br 2  99 rr rr     	sta filename,y
00400Er 2  C8           	iny
00400Fr 2  8C rr rr     	sty filelen
004012r 2               
004012r 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
004012r 2               ;                       usually the first drive, and y set to 1 reads from the header
004012r 2               ;                       of the file the location where to save it)
004012r 2  A9 01        	lda #1
004014r 2  A2 08        	ldx #8		; Disk device
004016r 2  A0 01        	ldy #1
004018r 2  20 BA FF     	jsr $ffba
00401Br 2               
00401Br 2               ; Load the file name (in accumulator the size of the string
00401Br 2               ;                      containing the name, x low address for FileName,
00401Br 2               ;                      y high address for FileName)
00401Br 2  AD rr rr     	lda filelen
00401Er 2  A2 rr        	ldx #<filename
004020r 2  A0 rr        	ldy #>filename
004022r 2  20 BD FF     	jsr $ffbd
004025r 2               
004025r 2               ; load from disk to ram
004025r 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
004027r 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
004029r 2  A0 00        	ldy #>$ff	; target location high (got from header)
00402Br 2  20 D5 FF     	jsr $ffd5
00402Er 2               
00402Er 2  60           	rts
00402Fr 2               
00402Fr 2               filename:
00402Fr 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004033r 2  00 00 00 00  
004037r 2  00 00 00 00  
00403Fr 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
004043r 2  00 00 00 00  
004047r 2  00 00 00 00  
00404Fr 2               filelen:
00404Fr 2  00           	.byte 0
004050r 2               
004050r 2               ;----------------------------------------------------
004050r 2               ; Sound
004050r 2               ;----------------------------------------------------
004050r 2               
004050r 2               ; Actual memory locations
004050r 2               
004050r 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
004054r 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
004058r 2               
004058r 2               ;   asl a ; $034e
004058r 2               ;   ora $4010,y ; $034f $0350 $0351
004058r 2               
004058r 2               ; Start of code
004058r 2               
004058r 2               make_sound2:
004058r 2  A0 00        	ldy #$00
00405Ar 2  A2 DE        	ldx #$de
00405Cr 2  AD rr rr     	lda SetSoundVars
00405Fr 2  CD rr rr     	cmp SetSoundDuration		; $0359 $035a
004062r 2  B0 09        	bcs l0366
004064r 2  EE rr rr     	inc SetSoundVars
004067r 2  EE 0A 90     	inc $900a
00406Ar 2  4C rr rr     	jmp l0374
00406Dr 2               
00406Dr 2  8C 0A 90     l0366:	sty $900a
004070r 2  EC rr rr     	cpx SetSoundVars
004073r 2  D0 06        	bne l0374
004075r 2  8C rr rr     	sty SetSoundVars
004078r 2  8E 0A 90     	stx $900a
00407Br 2  AD rr rr     l0374:	lda SetSoundVars+1
00407Er 2  CD rr rr     	cmp SetSoundDuration+1		; $0377 $0378
004081r 2  B0 09        	bcs l0384
004083r 2  EE rr rr     	inc SetSoundVars+1
004086r 2  EE 0B 90     	inc $900b
004089r 2  4C rr rr     	jmp l0392
00408Cr 2  8C 0B 90     l0384:	sty $900b
00408Fr 2  EC rr rr     	cpx SetSoundVars+1
004092r 2  D0 06        	bne l0392
004094r 2  8C rr rr     	sty SetSoundVars+1
004097r 2  8E 0B 90     	stx $900b
00409Ar 2  AD rr rr     l0392:	lda SetSoundVars+2
00409Dr 2  CD rr rr     	cmp SetSoundDuration+2		; $0395 $0396
0040A0r 2  B0 09        	bcs l03a2
0040A2r 2  EE rr rr     	inc SetSoundVars+2
0040A5r 2  CE 0C 90     	dec $900c
0040A8r 2  4C rr rr     	jmp l03b0
0040ABr 2  8C 0C 90     l03a2:	sty $900c
0040AEr 2  EC rr rr     	cpx SetSoundVars+2
0040B1r 2  D0 06        	bne l03b0
0040B3r 2  8C rr rr     	sty SetSoundVars+2
0040B6r 2  8E 0C 90     	stx $900c
0040B9r 2  AD rr rr     l03b0:	lda SetSoundVars+3
0040BCr 2  CD rr rr     	cmp SetSoundDuration+3		; $03b3 $03b4
0040BFr 2  B0 1C        	bcs l03d3
0040C1r 2  EE rr rr     	inc SetSoundVars+3
0040C4r 2  AD rr rr     	lda SetSoundVars+3
0040C7r 2  C9 16        	cmp #$16
0040C9r 2  D0 07        	bne l03c8
0040CBr 2  A9 B0        	lda #$b0
0040CDr 2  8D 0D 90     	sta $900d
0040D0r 2  F0 19        	beq l03e1
0040D2r 2  C9 2B        l03c8:	cmp #$2b
0040D4r 2  D0 15        	bne l03e1
0040D6r 2  A9 A0        	lda #$a0
0040D8r 2  8D 0D 90     	sta $900d
0040DBr 2  F0 0E        	beq l03e1
0040DDr 2  8C 0D 90     l03d3:	sty $900d
0040E0r 2  EC rr rr     	cpx SetSoundVars+3
0040E3r 2  D0 06        	bne l03e1
0040E5r 2  8C rr rr     	sty SetSoundVars+3
0040E8r 2  8E 0D 90     	stx $900d
0040EBr 2  60           l03e1:	rts
0040ECr 2               
0040ECr 1               ;	.include "music.inc"
0040ECr 1               	.include "z80.asm"
0040ECr 2               ;------------------------------------------------------
0040ECr 2               ; z80.asm
0040ECr 2               ; spectrum stuff
0040ECr 2               ; adresses
0040ECr 2               
0040ECr 2               ;ws	 = $60
0040ECr 2               
0040ECr 2               ;z80_f	 = ws+$00
0040ECr 2               ;z80_a	 = ws+$01
0040ECr 2               ;z80_af	 = z80_f
0040ECr 2               
0040ECr 2               ;z80_c	 = ws+$02
0040ECr 2               ;z80_b	 = ws+$03
0040ECr 2               ;z80_bc	 = z80_c
0040ECr 2               
0040ECr 2               ;z80_e	 = ws+$04
0040ECr 2               ;z80_d	 = ws+$05
0040ECr 2               ;z80_de	 = z80_e
0040ECr 2               
0040ECr 2               ;z80_l	 = ws+$06
0040ECr 2               ;z80_h	 = ws+$07
0040ECr 2               ;z80_hl	 = z80_l
0040ECr 2               
0040ECr 2               ;z80_x    = ws+$08
0040ECr 2               ;z80_i    = ws+$09
0040ECr 2               ;z80_ix	 = z80_x
0040ECr 2               
0040ECr 2               ;z80_iy	 = ws+$0a
0040ECr 2               
0040ECr 2               ;z80_fp	 = ws+$0c
0040ECr 2               ;z80_ap	 = ws+$0d
0040ECr 2               
0040ECr 2               ;z80_cp	 = ws+$0e
0040ECr 2               ;z80_bp	 = ws+$0f
0040ECr 2               ;z80_bcp = z80_cp
0040ECr 2               
0040ECr 2               ;z80_ep	 = ws+$10
0040ECr 2               ;z80_dp	 = ws+$11
0040ECr 2               ;z80_dep = z80_ep
0040ECr 2               
0040ECr 2               ;z80_lp	 = ws+$12
0040ECr 2               ;z80_hp	 = ws+$13
0040ECr 2               ;z80_hlp = z80_lp
0040ECr 2               
0040ECr 2               ;z80_sp   = ws+$14
0040ECr 2               
0040ECr 2               ;z80_reg0 = ws+$16
0040ECr 2               ;z80_reg1 = ws+$17
0040ECr 2               ;z80_reg2 = ws+$18
0040ECr 2               ;z80_reg3 = ws+$19
0040ECr 2               
0040ECr 2               ;z80_r	 = ws+$1a
0040ECr 2               
0040ECr 2               ; Contains seperatly 1 bit set
0040ECr 2               ; _BEEB this is not safe memory to use as required by MOS
0040ECr 2               
0040ECr 2               _bitmem0	= $f8
0040ECr 2               _bitmem1	= $f9
0040ECr 2               _bitmem2	= $fa
0040ECr 2               _bitmem3	= $fb
0040ECr 2               _bitmem4	= $fc
0040ECr 2               _bitmem5	= $fd
0040ECr 2               _bitmem6	= $fe
0040ECr 2               _bitmem7	= $ff
0040ECr 2               
0040ECr 2               ; constants
0040ECr 2               _bitvalue0	= $01
0040ECr 2               _bitvalue1	= $02
0040ECr 2               _bitvalue2	= $04
0040ECr 2               _bitvalue3	= $08
0040ECr 2               _bitvalue4	= $10
0040ECr 2               _bitvalue5	= $20
0040ECr 2               _bitvalue6	= $40
0040ECr 2               _bitvalue7	= $80
0040ECr 2               
0040ECr 2               _notbitvalue0	= $fe
0040ECr 2               _notbitvalue1	= $fd
0040ECr 2               _notbitvalue2	= $fb
0040ECr 2               _notbitvalue3	= $f7
0040ECr 2               _notbitvalue4	= $ef
0040ECr 2               _notbitvalue5	= $df
0040ECr 2               _notbitvalue6	= $bf
0040ECr 2               _notbitvalue7	= $7f
0040ECr 2               
0040ECr 2               
0040ECr 2               ;add_hl_bc:
0040ECr 2               ;		lda z80_l
0040ECr 2               ;		clc
0040ECr 2               ;		adc z80_c
0040ECr 2               ;		sta z80_l
0040ECr 2               ;		lda z80_h
0040ECr 2               ;		adc z80_b
0040ECr 2               ;		sta z80_h
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;add_ix_de:
0040ECr 2               ;		lda z80_ix
0040ECr 2               ;		clc
0040ECr 2               ;		adc z80_e
0040ECr 2               ;		sta z80_ix
0040ECr 2               ;		lda z80_ix+1
0040ECr 2               ;		adc z80_d
0040ECr 2               ;		sta z80_ix+1
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;add_iy_de:
0040ECr 2               ;		lda z80_iy
0040ECr 2               ;		clc
0040ECr 2               ;		adc z80_e
0040ECr 2               ;		sta z80_iy
0040ECr 2               ;		lda z80_iy+1
0040ECr 2               ;		adc z80_d
0040ECr 2               ;		sta z80_iy+1
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;add_hl_de:
0040ECr 2               ;		lda z80_l
0040ECr 2               ;		clc
0040ECr 2               ;		adc z80_e
0040ECr 2               ;		sta z80_l
0040ECr 2               ;		lda z80_h
0040ECr 2               ;		adc z80_d
0040ECr 2               ;		sta z80_h
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;add_ix_bc:
0040ECr 2               ;		lda z80_ix
0040ECr 2               ;		clc
0040ECr 2               ;		adc z80_c
0040ECr 2               ;		sta z80_ix
0040ECr 2               ;		lda z80_ix+1
0040ECr 2               ;		adc z80_b
0040ECr 2               ;		sta z80_ix+1
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;add_iy_bc:
0040ECr 2               ;		lda z80_iy
0040ECr 2               ;		clc
0040ECr 2               ;		adc z80_c
0040ECr 2               ;		sta z80_iy
0040ECr 2               ;		lda z80_iy+1
0040ECr 2               ;		adc z80_b
0040ECr 2               ;		sta z80_iy+1
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;sbc_hl_de:
0040ECr 2               ;		lda z80_l
0040ECr 2               ;		sbc z80_e
0040ECr 2               ;		sta z80_l
0040ECr 2               ;		lda z80_h
0040ECr 2               ;		sbc z80_d
0040ECr 2               ;		sta z80_h
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;sbc_hl_bc:
0040ECr 2               ;		lda z80_l
0040ECr 2               ;		sbc z80_c
0040ECr 2               ;		sta z80_l
0040ECr 2               ;		lda z80_h
0040ECr 2               ;		sbc z80_b
0040ECr 2               ;		sta z80_h
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;cmp_hl_bc:
0040ECr 2               ;		lda z80_l
0040ECr 2               ;		cmp z80_c
0040ECr 2               ;		bne cmp_hl_bc_end
0040ECr 2               ;		lda z80_h
0040ECr 2               ;		cmp z80_b
0040ECr 2               ;cmp_hl_bc_end:
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;cmp_iy_ix:
0040ECr 2               ;		lda z80_iy
0040ECr 2               ;		cmp z80_ix
0040ECr 2               ;		bne cmp_iy_ix_end
0040ECr 2               ;		lda z80_iy+1
0040ECr 2               ;		cmp z80_ix+1
0040ECr 2               ;cmp_iy_ix_end:
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;dec_hl:
0040ECr 2               ;		lda z80_l
0040ECr 2               ;		bne dec_hl_no_dec_h
0040ECr 2               ;		dec z80_h
0040ECr 2               ;dec_hl_no_dec_h:
0040ECr 2               ;		dec z80_l
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;dec_ix:
0040ECr 2               ;		lda z80_ix
0040ECr 2               ;		bne dec_ix_no_dec_h
0040ECr 2               ;		dec z80_ix+1
0040ECr 2               ;dec_ix_no_dec_h:
0040ECr 2               ;		dec z80_ix
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;dec_bc:
0040ECr 2               ;		lda z80_c
0040ECr 2               ;		bne dec_bc_no_dec_b
0040ECr 2               ;		dec z80_b
0040ECr 2               ;dec_bc_no_dec_b:
0040ECr 2               ;		dec z80_c
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;dec_de:
0040ECr 2               ;		lda z80_e
0040ECr 2               ;		bne dec_de_no_dec_d
0040ECr 2               ;		dec z80_d
0040ECr 2               ;dec_de_no_dec_d:
0040ECr 2               ;		dec z80_e
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               ;ex_af_afs:
0040ECr 2               ;	rts
0040ECr 2               ;ex_de_hl:
0040ECr 2               ;		lda z80_e
0040ECr 2               ;		ldx z80_l
0040ECr 2               ;		stx z80_e
0040ECr 2               ;		sta z80_l
0040ECr 2               ;		lda z80_d
0040ECr 2               ;		ldx z80_h
0040ECr 2               ;		stx z80_d
0040ECr 2               ;		sta z80_h
0040ECr 2               ;		rts
0040ECr 2               ;
0040ECr 2               exx:
0040ECr 2  A5 rr        		lda z80_c
0040EEr 2  A4 rr        		ldy z80_cp
0040F0r 2  84 rr        		sty z80_c
0040F2r 2  85 rr        		sta z80_cp
0040F4r 2  A5 rr        		lda z80_b
0040F6r 2  A4 rr        		ldy z80_bp
0040F8r 2  84 rr        		sty z80_b
0040FAr 2  85 rr        		sta z80_bp
0040FCr 2  A5 rr        		lda z80_e
0040FEr 2  A4 rr        		ldy z80_ep
004100r 2  84 rr        		sty z80_e
004102r 2  85 rr        		sta z80_ep
004104r 2  A5 rr        		lda z80_d
004106r 2  A4 rr        		ldy z80_dp
004108r 2  84 rr        		sty z80_d
00410Ar 2  85 rr        		sta z80_dp
00410Cr 2  A5 rr        		lda scraddr
00410Er 2  A4 rr        		ldy z80_lp
004110r 2  84 rr        		sty scraddr
004112r 2  85 rr        		sta z80_lp
004114r 2  A5 rr        		lda scraddr+1
004116r 2  A4 rr        		ldy z80_hp
004118r 2  84 rr        		sty scraddr+1
00411Ar 2  85 rr        		sta z80_hp
00411Cr 2  60           		rts
00411Dr 2               
00411Dr 2               ;ex_sp_hl:
00411Dr 2               ;		tsx
00411Dr 2               ;		lda $0103,x
00411Dr 2               ;		ldy z80_h
00411Dr 2               ;		sta z80_h
00411Dr 2               ;		tya
00411Dr 2               ;		sta $0103,x
00411Dr 2               ;		lda $0104,x
00411Dr 2               ;		ldy z80_l
00411Dr 2               ;		sta z80_l
00411Dr 2               ;		tya
00411Dr 2               ;		sta $104,x
00411Dr 2               ;		rts
00411Dr 2               ;
00411Dr 2               ;ldi:
00411Dr 2               ;	rts
00411Dr 2               ;ldir:
00411Dr 2               ;		ldy #$00
00411Dr 2               ;		ldx z80_b
00411Dr 2               ;		beq ldir_last_page
00411Dr 2               ;ldir_loop:
00411Dr 2               ;		lda (z80_hl),y
00411Dr 2               ;		sta (z80_de),y
00411Dr 2               ;		iny
00411Dr 2               ;		bne ldir_loop
00411Dr 2               ;		inc z80_h
00411Dr 2               ;		inc z80_d
00411Dr 2               ;		dex
00411Dr 2               ;		bne ldir_loop
00411Dr 2               ;ldir_last_page:
00411Dr 2               ;		lda z80_c
00411Dr 2               ;		beq ldir_end
00411Dr 2               ;ldir_last_page_loop:
00411Dr 2               ;		lda (z80_hl),y
00411Dr 2               ;		sta (z80_de),y
00411Dr 2               ;		iny
00411Dr 2               ;		cpy z80_c
00411Dr 2               ;		bne ldir_last_page_loop
00411Dr 2               ;ldir_end:
00411Dr 2               ;		stx z80_c
00411Dr 2               ;		stx z80_b
00411Dr 2               ;		tya
00411Dr 2               ;		clc
00411Dr 2               ;		adc z80_l
00411Dr 2               ;		sta z80_l
00411Dr 2               ;		bcc *+4
00411Dr 2               ;		inc z80_h
00411Dr 2               ;		tya
00411Dr 2               ;		clc
00411Dr 2               ;		adc z80_e
00411Dr 2               ;		sta z80_e
00411Dr 2               ;		bcc *+4
00411Dr 2               ;		inc z80_d
00411Dr 2               ;		rts
00411Dr 2               ;
00411Dr 2               ;lddr:		ldy #$00
00411Dr 2               ;lddr_loop:
00411Dr 2               ;		lda (z80_hl),y
00411Dr 2               ;		sta (z80_de),y
00411Dr 2               ;		jsr dec_hl
00411Dr 2               ;		jsr dec_de
00411Dr 2               ;		jsr dec_bc
00411Dr 2               ;		lda z80_b
00411Dr 2               ;		ora z80_c
00411Dr 2               ;		bne lddr_loop
00411Dr 2               ;		rts
00411Dr 2               ;ei:
00411Dr 2               ;		rts
00411Dr 2               ;di:
00411Dr 2               ;		rts
00411Dr 2               
00411Dr 2               ;-------------------------------------------------------------
00411Dr 2               ; Set bits in bitmem
00411Dr 2               ;-------------------------------------------------------------
00411Dr 2               
00411Dr 2               .if 0
00411Dr 2               z80_init:
00411Dr 2               	ldx #$00
00411Dr 2               	lda #$01
00411Dr 2               z80_init_loop:
00411Dr 2               	sta _bitmem0,x
00411Dr 2               	inx
00411Dr 2               	asl a
00411Dr 2               	bne z80_init_loop
00411Dr 2               	rts
00411Dr 2               .endif
00411Dr 2               
00411Dr 2               push_af:
00411Dr 2               push_bc:
00411Dr 2               push_de:
00411Dr 2               push_hl:
00411Dr 2               
00411Dr 2               pop_af:
00411Dr 2               pop_bc:
00411Dr 2               pop_de:
00411Dr 2               pop_ix:
00411Dr 2               pop_hl:
00411Dr 2               
00411Dr 2               add_hl_hl:
00411Dr 2               
00411Dr 2               inc_bc:
00411Dr 2               inc_de:
00411Dr 2               inc_hl:
00411Dr 2               inc_ix:
00411Dr 2               inc_sp:
00411Dr 2               
00411Dr 2               cpir:
00411Dr 2               
00411Dr 2               ex_af_af:
00411Dr 2               ;	rts
00411Dr 2               
00411Dr 1               
00411Dr 1               eind_asm:
00411Dr 1               eop:					; End Of Program
00411Dr 1               
00411Dr 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
00411Dr 1               
