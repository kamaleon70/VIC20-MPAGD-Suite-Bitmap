ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 1 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:		.res 1
00002Br 2  xx           loopb:		.res 1
00002Cr 2  xx           loopc:		.res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      ; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      ; not a ptr
000051r 2  xx           tmproom:	.res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000057r 2  xx           vsync_count:.res 1
000058r 2  xx           colpatt:	.res 1
000059r 2  xx           sprtmp:     .res 1
00005Ar 2  xx           sprtmp2:    .res 1
00005Br 2  xx           sprshft:    .res 1
00005Cr 2               
00005Cr 2  xx           spriteink:  .res 1
00005Dr 2  xx           colour_byte:.res 1
00005Er 2  xx           colour_xor: .res 1
00005Fr 2  xx           objcol:	    .res 1
000060r 2               
000060r 2               .if mflag
000060r 2               TmpAddr:	.res 2
000060r 2               bwid:	    .res 1     ; box/menu width.
000060r 2               blen:	    .res 1     ; box/menu height.
000060r 2               btop:	    .res 1     ; box coordinates.
000060r 2               blft:	    .res 1
000060r 2               .endif
000060r 2               
000060r 2               .if pflag
000060r 2  xx           shrctr:	    .res 1
000061r 2  xx           explcnt:	.res 1
000062r 2  xx           seed3:	    .res 1
000063r 2               .endif
000063r 2               
000063r 2               .if aflag
000063r 2               pbptr:      .res 2
000063r 2               .endif
000063r 2               
000063r 2  xx           tmp1:       .res 1
000064r 2  xx           tmp2:       .res 1
000065r 2               
000065r 1               	.include "z80-zp.inc"
000065r 2               ;ws	 = $60
000065r 2               
000065r 2  xx           z80_f: .res 1;	 = ws+$00
000066r 2  xx           z80_a: .res 1;	 = ws+$01
000067r 2               z80_af	 = z80_f
000067r 2               
000067r 2  xx           z80_c: .res 1;	 = ws+$02
000068r 2  xx           z80_b: .res 1;	 = ws+$03
000069r 2               z80_bc	 = z80_c
000069r 2               
000069r 2  xx           z80_e: .res 1;	 = ws+$04
00006Ar 2  xx           z80_d: .res 1;	 = ws+$05
00006Br 2               z80_de	 = z80_e
00006Br 2               
00006Br 2  xx           z80_l: .res 1;	 = ws+$06
00006Cr 2  xx           z80_h: .res 1;	 = ws+$07
00006Dr 2               z80_hl	 = z80_l
00006Dr 2               
00006Dr 2  xx           z80_x: .res 1;    = ws+$08
00006Er 2  xx           z80_i: .res 1;    = ws+$09
00006Fr 2               z80_ix	 = z80_x
00006Fr 2               
00006Fr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
000071r 2               
000071r 2  xx           z80_fp: .res 1;	 = ws+$0c
000072r 2  xx           z80_ap: .res 1;	 = ws+$0d
000073r 2               
000073r 2  xx           z80_cp: .res 1;	 = ws+$0e
000074r 2  xx           z80_bp: .res 1;	 = ws+$0f
000075r 2               z80_bcp	 = z80_cp
000075r 2               
000075r 2  xx           z80_ep: .res 1;	 = ws+$10
000076r 2  xx           z80_dp: .res 1;	 = ws+$11
000077r 2               z80_dep	 = z80_ep
000077r 2               
000077r 2  xx           z80_lp: .res 1;	 = ws+$12
000078r 2  xx           z80_hp: .res 1;	 = ws+$13
000079r 2               z80_hlp	 = z80_lp
000079r 2               
000079r 2  xx xx        z80_sp: .res 2;   = ws+$14
00007Br 2               
00007Br 2  xx           z80_reg0: .res 1; = ws+$16
00007Cr 2  xx           z80_reg1: .res 1; = ws+$17
00007Dr 2  xx           z80_reg2: .res 1; = ws+$18
00007Er 2  xx           z80_reg3: .res 1; = ws+$19
00007Fr 2               
00007Fr 2               ;z80_r: .res 1;	 = ws+$1a
00007Fr 2               
00007Fr 1               
00007Fr 1               ;----------------------------------------------
00007Fr 1               ; BASIC header
00007Fr 1               ;----------------------------------------------
00007Fr 1               
00007Fr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "meteormania.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving sprites enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metablocks 16x6"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 43450	; = 40000 * 1,108/1,02
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 25000
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3  20 rr rr     	jsr game	 		; start the game.
000003r 3  60           	rts
000004r 3               
000004r 3               ; Don't change the order of these four.
000004r 3               ; Menu routine relies on winlft following wintop.
000004r 3               
000004r 3  01           wintop:	.byte WINDOWTOP		; top of window.
000005r 3  00           winlft:	.byte WINDOWLFT		; left edge.
000006r 3  12           winhgt:	.byte WINDOWHGT		; window height.
000007r 3  16           winwid:	.byte WINDOWWID		; window width.
000008r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000009r 3               
000009r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000009r 3               
000009r 3  08           wntopx:	.byte (8 * WINDOWTOP)
00000Ar 3  00           wnlftx:	.byte (8 * WINDOWLFT)
00000Br 3  88           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00000Cr 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00000Dr 3               
00000Dr 3               ; Make sure pointers are arranged in the same order as the data itself.
00000Dr 3               
00000Dr 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
00000Fr 3               
00000Fr 3               ; Assorted game routines which can go in contended memory.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for inventory.
00000Fr 3               ; called by the INV command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with objects seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of INV menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               .if mflag
00000Fr 3               minve:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	asl a
00000Fr 3               	sta winhgt
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	asl a
00000Fr 3               	sta winwid
00000Fr 3               .endif
00000Fr 3               	lda #<(invdis)		; routine address.
00000Fr 3               	sta mod0+1		; set up menu routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(invdis)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               	lda #<(fopt)		; find option from available objects.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fopt)
00000Fr 3               	sta mod1+1+1
00000Fr 3               	jmp dbox		; do menu routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for menu.
00000Fr 3               ; called by the MENU command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with menu items seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of MENU menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               mmenu:
00000Fr 3               	lda #<(always)		; routine address.
00000Fr 3               	sta mod0+1		; set up routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(always)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               
00000Fr 3               	lda #<(fstd)		; standard option selection.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fstd)
00000Fr 3               	sta mod1+2
00000Fr 3               
00000Fr 3               ; Drop through into box routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Work out size of box for message or menu.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox:
00000Fr 3               	lda #<msgdat		; pointer to messages.
00000Fr 3               	sta z80_l
00000Fr 3               	lda #>msgdat
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	jsr getwrd		; get message number.
00000Fr 3               
00000Fr 3               	lda z80_h		; store pointer to message.
00000Fr 3               	sta TmpAddr
00000Fr 3               	lda z80_l
00000Fr 3               	sta TmpAddr+1
00000Fr 3               
00000Fr 3               	lda #1			; height.
00000Fr 3               	sta z80_d
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               	sta z80_e		; maximum width.
00000Fr 3               dbox5:
00000Fr 3               	lda #0			; this line"s width.
00000Fr 3               	sta z80_b
00000Fr 3               mod2:
00000Fr 3               	jsr always		; item in player"s possession?
00000Fr 3               	cmp #255
00000Fr 3               	bne dbox6		; not in inventory, skip this line.
00000Fr 3               	inc z80_d		; add to tally.
00000Fr 3               dbox6:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a		; reached end of line?
00000Fr 3               	cmp #','
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	cmp #ASCII_NEWLINE
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	inc z80_b		; add to this line"s width.
00000Fr 3               	lda z80_a
00000Fr 3               	bmi dbox4		; end of message? yes, end count.
00000Fr 3               	jmp dbox6		; repeat until we find the end.
00000Fr 3               dbox3:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox5		; no, carry on looking.
00000Fr 3               	lda z80_b		; make this the widest so far.
00000Fr 3               	sta z80_e
00000Fr 3               	jmp dbox5		; keep looking.
00000Fr 3               dbox4:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox8		; no, carry on looking.
00000Fr 3               	lda z80_b		; final line is the longest so far.
00000Fr 3               	sta z80_e
00000Fr 3               dbox8:
00000Fr 3               	dec z80_d		; decrement items found.
00000Fr 3               	bne :+			; total was zero.
00000Fr 3               	lda #255
00000Fr 3               	sta varopt
00000Fr 3               	jmp dbox15
00000Fr 3               :
00000Fr 3               	lda z80_e		; longest line.
00000Fr 3               	bne :+			; was it zero?
00000Fr 3               	jmp dbox15		; total was zero.
00000Fr 3               :
00000Fr 3               	sta bwid		; set up size.
00000Fr 3               	lda z80_d
00000Fr 3               	sta blen
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; That's set up our box size.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               	lda winhgt		; window height in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_d		; subtract height of box.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc wintop		; add top edge of window.
00000Fr 3               	sta btop		; set up box top.
00000Fr 3               
00000Fr 3               	lda winwid		; window width in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_e		; subtract box width.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc winlft		; add left edge of window.
00000Fr 3               	sta blft		; box left.
00000Fr 3               
00000Fr 3               	lda #<(FONT-256)		; font.
00000Fr 3               	sta grbase		; set up for text display.
00000Fr 3               	lda #>(FONT-256)
00000Fr 3               	sta grbase+1
00000Fr 3               
00000Fr 3               	lda TmpAddr+1		; restore message pointer.
00000Fr 3               	sta z80_l
00000Fr 3               	lda TmpAddr
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set display coordinate.
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               dbox2:
00000Fr 3               	lda combyt		; get object number.
00000Fr 3               	sta z80_a
00000Fr 3               mod0:
00000Fr 3               	jsr always		; check inventory for display.
00000Fr 3               	cmp #255
00000Fr 3               	beq :+
00000Fr 3               	jmp dbox13		; not in inventory, skip this line.
00000Fr 3               :
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set left display position.
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_b		; store width.
00000Fr 3               dbox0:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	cmp #','		; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               	cmp #ASCII_NEWLINE			; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               
00000Fr 3               	cmp #141			; end of line?
00000Fr 3               	bne :+
00000Fr 3               	dec bwid
00000Fr 3               	jmp dbox7		; yes, next one.
00000Fr 3               :
00000Fr 3               	dec z80_b		; one less to display.
00000Fr 3               	and #127		; remove terminator.
00000Fr 3               
00000Fr 3               	jsr pchr		; display on screen.
00000Fr 3               
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bmi :+
00000Fr 3               	jmp dbox7		; yes, job done.
00000Fr 3               :
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	beq :+			; are any left?
00000Fr 3               	jmp dbox0		; yes, continue.
00000Fr 3               :
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Reached limit of characters per line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dbox9:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #ASCII_NEWLINE	; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bcs :+
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox9
00000Fr 3               
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Fill box to end of line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dboxf:
00000Fr 3               	lda #32			; space character.
00000Fr 3               	jsr pchr		; display character.
00000Fr 3               	dec z80_b
00000Fr 3               	beq :+
00000Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00000Fr 3               :
00000Fr 3               	rts
00000Fr 3               dbox1:
00000Fr 3               	inc z80_l		; skip character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill box out to right side.
00000Fr 3               dbox10:
00000Fr 3               	inc dispy		; y coordinate down a line next position.
00000Fr 3               	jmp dbox2		; next line.
00000Fr 3               dbox7:
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	bne :+			; are any left?
00000Fr 3               	jmp dbox11		; no, nothing to draw.
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill message to line.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Drawn the box menu, now select option.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox11:
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set bar position.
00000Fr 3               dbox14:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	bne dbox14		; yes, debounce it.
00000Fr 3               	jsr dbar		; draw bar.
00000Fr 3               dbox12:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	beq dbox12		; no, nothing.
00000Fr 3               	and #16			; fire button pressed?
00000Fr 3               	bne :+
00000Fr 3               mod1:
00000Fr 3               	jmp fstd		; yes, job done.
00000Fr 3               :
00000Fr 3               	jsr dbar		; delete bar.
00000Fr 3               
00000Fr 3               	lda joyval		; joystick reading.
00000Fr 3               	and #8			; going up?
00000Fr 3               	beq dboxu		; yes, go up.
00000Fr 3               
00000Fr 3               	ldx dispy		; vertical position of bar.
00000Fr 3               	inx			; look down.
00000Fr 3               	txa
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find distance from top.
00000Fr 3               	cmp blen		; top of box.
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	inc dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               dboxu:
00000Fr 3               	lda dispy		; vertical position of bar.
00000Fr 3               	cmp btop		; are we at the top?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	dec dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               fstd:
00000Fr 3               	lda dispy		; bar position.
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Option not available.  Skip this line.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox13:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               
00000Fr 3               	bpl :+			; end of message?
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox13
00000Fr 3               dbox15:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	sta winwid
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	sta winhgt
00000Fr 3               .endif
00000Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00000Fr 3               	sta z80_h
00000Fr 3               	lda TmpAddr+1
00000Fr 3               	sta z80_l
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Invert bar
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbar:
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set display coordinate.
00000Fr 3               	jsr gprad		; get printing address.
00000Fr 3               
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_c		; loop counter in c.
00000Fr 3               	lda z80_h
00000Fr 3               	sta z80_d		; store screen address high byte.
00000Fr 3               dbar1:
00000Fr 3               	ldx #7			; pixel height in b.
00000Fr 3               dbar0:
00000Fr 3               	ldy scrtab,x
00000Fr 3               	lda (scraddr),y		; get screen byte.
00000Fr 3               	eor #255		; reverse all bits.
00000Fr 3               	sta (scraddr),y		; write back to screen.
00000Fr 3               	dex			; next line down.
00000Fr 3               	bpl dbar0		; draw rest of character.
00000Fr 3               
00000Fr 3               	lda scraddr
00000Fr 3               	adc #16
00000Fr 3               	sta scraddr
00000Fr 3               	bcc :+
00000Fr 3               	inc scraddr+1
00000Fr 3               :
00000Fr 3               	dec z80_c		; decrement character counter.
00000Fr 3               	bne dbar1		; repeat for whole line.
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Point to object
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  A = object number, A=255 if already in possession
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               invdis:
00000Fr 3               	lda z80_l		; store message text pointer.
00000Fr 3               	pha
00000Fr 3               	lda z80_h
00000Fr 3               	pha
00000Fr 3               	lda combyt		; object number.
00000Fr 3               	inc combyt		; ready for next one.
00000Fr 3               	jsr gotob		; check if we have object.
00000Fr 3               	tay
00000Fr 3               	pla
00000Fr 3               	sta z80_h
00000Fr 3               	pla
00000Fr 3               	sta z80_l
00000Fr 3               	tya
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Find option selected.
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected object
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               fopt:
00000Fr 3               	lda dispy
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta tmp+2		; option selected in b register.
00000Fr 3               	inc tmp+2
00000Fr 3               
00000Fr 3               	lda #0			; set to first item.
00000Fr 3               	sta combyt		; object number.
00000Fr 3               fopt0:
00000Fr 3               	jsr fobj		; find next object in inventory.
00000Fr 3               	dec tmp+2
00000Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00000Fr 3               
00000Fr 3               	lda combyt		; get option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	dec varopt		; one less, due to where we increment combyt.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               fobj:
00000Fr 3               	ldy combyt		; object number.
00000Fr 3               	inc combyt		; ready for next item.
00000Fr 3               	tya
00000Fr 3               	jsr gotob		; do we have this item?
00000Fr 3               	cmp #255
00000Fr 3               	bne :+
00000Fr 3               	rts
00000Fr 3               :
00000Fr 3               	jmp fobj		; yes, it's on the list.
00000Fr 3               .endif
00000Fr 3               
00000Fr 3               ;----------------------------------------------------
00000Fr 3               ; Clear sprite table.
00000Fr 3               ;
00000Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00000Fr 3               ;----------------------------------------------------
00000Fr 3               
00000Fr 3               xspr:
00000Fr 3  A9 FF        	lda #255		; clear byte.
000011r 3  A2 00        	ldx #0			; length of table.
000013r 3               xspr0:
000013r 3  9D rr rr     	sta sprtab,x		; sprite table.
000016r 3  E8           	inx			; move to next byte.
000017r 3  E0 CC        	cpx #SPRBUF
000019r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00001Br 3  60           	rts
00001Cr 3               
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               ; Initialise all objects.
00001Cr 3               ;
00001Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               
00001Cr 3               .if oflag
00001Cr 3               iniob:
00001Cr 3               	lda #<objdta		; objects table.
00001Cr 3               	sta z80_x
00001Cr 3               	lda #>objdta
00001Cr 3               	sta z80_i
00001Cr 3               
00001Cr 3               	ldx numob 		; number of objects in the game.
00001Cr 3               iniob0:
00001Cr 3               	ldy #36
00001Cr 3               	lda (z80_ix),y 		; start screen.
00001Cr 3               	ldy #33
00001Cr 3               	sta (z80_ix),y 		; set start screen.
00001Cr 3               
00001Cr 3               	ldy #37
00001Cr 3               	lda (z80_ix),y 		; find start y.
00001Cr 3               	ldy #34
00001Cr 3               	sta (z80_ix),y 		; set start y.
00001Cr 3               
00001Cr 3               	ldy #38
00001Cr 3               	lda (z80_ix),y 		; get initial x.
00001Cr 3               	ldy #35
00001Cr 3               	sta (z80_ix),y 		; set x coord.
00001Cr 3               
00001Cr 3               	clc 			; point to next object.
00001Cr 3               	lda z80_x
00001Cr 3               	adc #39			; distance between objects.
00001Cr 3               	sta z80_x
00001Cr 3               	bcc :+
00001Cr 3               	inc z80_i
00001Cr 3               :
00001Cr 3               	dex 			; repeat.
00001Cr 3               	bne iniob0
00001Cr 3               
00001Cr 3               	rts
00001Cr 3               .endif
00001Cr 3               
00001Cr 3               ;-----------------------------------------------
00001Cr 3               ; Redraw the screen.
00001Cr 3               ;
00001Cr 3               ; Remove old copy of all sprites for redraw.
00001Cr 3               ;-----------------------------------------------
00001Cr 3               
00001Cr 3               redraw:
00001Cr 3               .if xflag
00001Cr 3               	lda #WINDOWWID
00001Cr 3               	sta winwid
00001Cr 3               	lda #WINDOWHGT
00001Cr 3               	sta winhgt
00001Cr 3               .endif
00001Cr 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00001Er 3  48           	pha
00001Fr 3  A5 rr        	lda z80_x
000021r 3  48           	pha
000022r 3               
000022r 3  20 rr rr     	jsr droom		; show screen layout.
000025r 3               .if oflag
000025r 3               	jsr shwob		; draw objects.
000025r 3               .endif
000025r 3               numsp0:
000025r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000027r 3  85 rr        	sta tmp
000029r 3               
000029r 3  A9 rr        	lda #<sprtab		; sprite table.
00002Br 3  85 rr        	sta z80_x
00002Dr 3  A9 rr        	lda #>sprtab
00002Fr 3  85 rr        	sta z80_i
000031r 3               redrw0:
000031r 3  A0 00        	ldy #0
000033r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
000035r 3  C9 FF        	cmp #255		; is it enabled?
000037r 3  F0 0B        	beq redrw1 		; no, find next one.
000039r 3               
000039r 3  A0 03        	ldy #var_Y
00003Br 3  B1 rr        	lda (z80_ix),y 		; sprite y.
00003Dr 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
00003Fr 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000041r 3               
000041r 3  20 rr rr     	jsr sspria		; show single sprite.
000044r 3               
000044r 3               redrw1:
000044r 3  18           	clc			; next sprite.
000045r 3  A5 rr        	lda z80_x
000047r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000049r 3  85 rr        	sta z80_x
00004Br 3  90 02        	bcc :+
00004Dr 3  E6 rr        	inc z80_i
00004Fr 3               :
00004Fr 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000051r 3  D0 DE        	bne redrw0
000053r 3               
000053r 3               rpblc1:
000053r 3               ;	jsr dshrp		; redraw shrapnel.
000053r 3               
000053r 3               .if aflag
000053r 3               	jsr rbloc		; draw blocks for this screen
000053r 3               .endif
000053r 3  68           	pla			; retrieve sprite pointer.
000054r 3  85 rr        	sta z80_x
000056r 3  68           	pla
000057r 3  85 rr        	sta z80_i
000059r 3               
000059r 3  60           	rts
00005Ar 3               
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               ; Clear screen routine.
00005Ar 3               ;
00005Ar 3               ; Fill screenmem $8000-$97ff with ScrFillByte
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               
00005Ar 3               cls:
00005Ar 3  A9 10        	lda #>CharAddress	; Character RAM address.
00005Cr 3  8D rr rr     	sta clsloop+2
00005Fr 3               
00005Fr 3  A9 00        	lda #ScrFillByte	; Clear screen
000061r 3  A0 00        	ldy #0
000063r 3  A2 10        	ldx #16
000065r 3               clsloop:
000065r 3  99 00 10     	sta CharAddress,y
000068r 3  C8           	iny
000069r 3  D0 FA        	bne clsloop
00006Br 3  EE rr rr     	inc clsloop+2
00006Er 3  CA           	dex
00006Fr 3  D0 F4        	bne clsloop
000071r 3  60           	rts
000072r 3               
000072r 3               ;----------------------------------------------------------------------
000072r 3               ; Clear colour attributes
000072r 3               ;
000072r 3               ; Reset colour attributes to fontcol
000072r 3               ;----------------------------------------------------------------------
000072r 3               
000072r 3               clrcol:
000072r 3  AD rr rr     	lda fontcol		; Clear colour attributes
000075r 3  A2 00        	ldx #0
000077r 3               clscol:
000077r 3  9D 00 96     	sta ColorAttr,x
00007Ar 3  E8           	inx
00007Br 3  E0 F2        	cpx #242
00007Dr 3  D0 F8        	bne clscol
00007Fr 3               
00007Fr 3  60           	rts
000080r 3               
000080r 3               ;----------------------------------------------------------------------
000080r 3               ; FODDER check
000080r 3               ;----------------------------------------------------------------------
000080r 3               
000080r 3               .if pflag .or dflag
000080r 3               fdchk:
000080r 3  C9 04        	cmp #FODDER 		; is it fodder?
000082r 3  F0 01        	beq :+
000084r 3  60           	rts 			; no.
000085r 3               :
000085r 3  A9 00        	lda #0			; wipe fodder in MAP
000087r 3  A0 00        	ldy #0
000089r 3  91 rr        	sta (bufaddr),y 	; rewrite block type.
00008Br 3               
00008Br 3  A5 rr        	lda dispx		; x=x/8
00008Dr 3  48           	pha
00008Er 3  4A           	lsr a
00008Fr 3  4A           	lsr a
000090r 3  4A           	lsr a
000091r 3  85 rr        	sta dispx
000093r 3               
000093r 3  A5 rr        	lda dispy		; y=y/8
000095r 3  48           	pha
000096r 3  4A           	lsr a
000097r 3  4A           	lsr a
000098r 3  4A           	lsr a
000099r 3  85 rr        	sta dispy
00009Br 3               
00009Br 3  A9 00        	lda #0 			; block to write.
00009Dr 3  20 rr rr     	jsr pattr 		; write block.
0000A0r 3               
0000A0r 3  68           	pla
0000A1r 3  85 rr        	sta dispy
0000A3r 3  68           	pla
0000A4r 3  85 rr        	sta dispx
0000A6r 3  60           	rts
0000A7r 3               .endif
0000A7r 3               
0000A7r 3               ;----------------------------------------------------
0000A7r 3               ; Scrolly text and puzzle variables.
0000A7r 3               ;----------------------------------------------------
0000A7r 3               
0000A7r 3               .if sflag
0000A7r 3               txtbit:	.byte 128		; bit to write.
0000A7r 3               txtwid:	.byte 16		; width of ticker message.
0000A7r 3               txtpos:	.word msgdat
0000A7r 3               txtini:	.word msgdat
0000A7r 3               txtscr:	.word ScreenAddr
0000A7r 3               .endif
0000A7r 3               
0000A7r 3               ;----------------------------------------------------
0000A7r 3               ; Specialist routines.
0000A7r 3               ; Process shrapnel.
0000A7r 3               ;----------------------------------------------------
0000A7r 3               proshr:
0000A7r 3               .if pflag
0000A7r 3  A9 00        	lda #<SHRAPN		; table.
0000A9r 3  85 rr        	sta z80_x
0000ABr 3  A9 09        	lda #>SHRAPN
0000ADr 3  85 rr        	sta z80_i
0000AFr 3               
0000AFr 3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
0000B1r 3  85 rr        	sta shrctr
0000B3r 3               prosh0:
0000B3r 3  A0 00        	ldy #0
0000B5r 3  B1 rr        	lda (z80_ix),y		; on/off marker.
0000B7r 3  0A           	asl a
0000B8r 3               proshx:
0000B8r 3  B0 03        	bcs :+
0000BAr 3  20 rr rr     	jsr prosh1 		; on, so process it.
0000BDr 3               :
0000BDr 3  18           	clc
0000BEr 3  A5 rr        	lda z80_x
0000C0r 3  69 06        	adc #SHRSIZ
0000C2r 3  85 rr        	sta z80_x
0000C4r 3  90 02        	bcc :+
0000C6r 3  E6 rr        	inc z80_i
0000C8r 3               :
0000C8r 3  C6 rr        	dec shrctr		; round again.
0000CAr 3  D0 E7        	bne prosh0
0000CCr 3               .endif
0000CCr 3               .if sflag
0000CCr 3               	jsr scrly
0000CCr 3               .endif
0000CCr 3  60           	rts
0000CDr 3               
0000CDr 3               .if pflag
0000CDr 3               ;----------------------------------------------------
0000CDr 3               ; Proces shrapnel piece
0000CDr 3               ;----------------------------------------------------
0000CDr 3               
0000CDr 3               prosh1:
0000CDr 3  20 rr rr     	jsr plot 		; delete the pixel.
0000D0r 3               
0000D0r 3  A9 rr        	lda #<shrptr		; shrapnel routine pointers.
0000D2r 3  85 rr        	sta z80_l
0000D4r 3  A9 rr        	lda #>shrptr
0000D6r 3  85 rr        	sta z80_h
0000D8r 3               
0000D8r 3  A0 00        	ldy #0
0000DAr 3  B1 rr        	lda (z80_ix),y		; restore shrapnel type.
0000DCr 3  20 rr rr     	jsr prosh2 		; run the routine.
0000DFr 3  20 rr rr     	jsr chkxy		; check x and y are good before we redisplay.
0000E2r 3               
0000E2r 3  A9 06        	lda #<SHRSIZ 		; distance to next.
0000E4r 3  85 rr        	sta z80_e
0000E6r 3  A9 00        	lda #>SHRSIZ
0000E8r 3  85 rr        	sta z80_d
0000EAr 3  60           	rts
0000EBr 3               
0000EBr 3               ;----------------------------------------------------
0000EBr 3               ; Run the routine
0000EBr 3               ;----------------------------------------------------
0000EBr 3               
0000EBr 3               prosh2:
0000EBr 3  0A           	asl a 			; 2 bytes per address.
0000ECr 3  A8           	tay
0000EDr 3  B9 rr rr     	lda shrptr,y
0000F0r 3  85 rr        	sta z80_l
0000F2r 3  B9 rr rr     	lda shrptr+1,y 		; fetch high byte from table.
0000F5r 3  85 rr        	sta z80_h
0000F7r 3  6C rr rr     	jmp (z80_hl) 		; jump to routine.
0000FAr 3               
0000FAr 3               ;----------------------------------------------------
0000FAr 3               ; Paricle routine table
0000FAr 3               ;----------------------------------------------------
0000FAr 3               
0000FAr 3  rr rr        shrptr:	.word laser		; laser.
0000FCr 3  rr rr        	.word trail		; vapour trail.
0000FEr 3  rr rr        	.word shrap		; shrapnel from explosion.
000100r 3  rr rr        	.word dotl		; horizontal starfield left.
000102r 3  rr rr        	.word dotr		; horizontal starfield right.
000104r 3  rr rr        	.word dotu		; vertical starfield up.
000106r 3  rr rr        	.word dotd		; vertical starfield down.
000108r 3  rr rr        	.word ptcusr		; user particle.
00010Ar 3               
00010Ar 3               ;----------------------------------------------------
00010Ar 3               ; Explosion shrapnel.
00010Ar 3               ;----------------------------------------------------
00010Ar 3               
00010Ar 3               shrap:
00010Ar 3  A0 01        	ldy #1
00010Cr 3  B1 rr        	lda (z80_ix),y 		; get the angle.
00010Er 3  18           	clc
00010Fr 3  69 rr        	adc #<shrsin		; shrapnel sine table.
000111r 3  85 rr        	sta z80_l
000113r 3  A9 rr        	lda #>shrsin
000115r 3  69 00        	adc #0
000117r 3  85 rr        	sta z80_h
000119r 3               
000119r 3  A0 00        	ldy #0
00011Br 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
00011Dr 3  85 rr        	sta z80_e
00011Fr 3  E6 rr        	inc z80_l 		; next byte of table.
000121r 3  D0 02        	bne :+
000123r 3  E6 rr        	inc z80_h
000125r 3               :
000125r 3  A0 00        	ldy #0
000127r 3  B1 rr        	lda (z80_hl),y		; fetch value from table.
000129r 3  85 rr        	sta z80_d
00012Br 3  E6 rr        	inc z80_l		; next byte of table.
00012Dr 3  D0 02        	bne :+
00012Fr 3  E6 rr        	inc z80_h
000131r 3               :
000131r 3  A0 00        	ldy #0
000133r 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000135r 3  85 rr        	sta z80_c
000137r 3  E6 rr        	inc z80_l 		; next byte of table.
000139r 3  D0 02        	bne :+
00013Br 3  E6 rr        	inc z80_h
00013Dr 3               :
00013Dr 3  A0 00        	ldy #0
00013Fr 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000141r 3  85 rr        	sta z80_b
000143r 3               
000143r 3  A0 02        	ldy #2
000145r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in hl.
000147r 3  18           	clc
000148r 3  65 rr        	adc z80_e		; add sine lb
00014Ar 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
00014Cr 3  A0 03        	ldy #3
00014Er 3  B1 rr        	lda (z80_ix),y
000150r 3  65 rr        	adc z80_d		; add sine hb
000152r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
000154r 3               
000154r 3  A0 04        	ldy #4
000156r 3  B1 rr        	lda (z80_ix),y	 	; y coordinate in hl.
000158r 3  18           	clc
000159r 3  65 rr        	adc z80_c		; add cosine lb
00015Br 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
00015Dr 3  A0 05        	ldy #5
00015Fr 3  B1 rr        	lda (z80_ix),y
000161r 3  65 rr        	adc z80_b		; add cosine lb
000163r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
000165r 3               
000165r 3  60           	rts
000166r 3               
000166r 3               ;----------------------------------------------------
000166r 3               ; Move dots
000166r 3               ;----------------------------------------------------
000166r 3               
000166r 3               dotl:
000166r 3  A0 05        	ldy #5
000168r 3  B1 rr        	lda (z80_ix),y
00016Ar 3  38           	sec
00016Br 3  E9 01        	sbc #1		 	; move left.
00016Dr 3  91 rr        	sta (z80_ix),y
00016Fr 3  60           	rts
000170r 3               dotr:
000170r 3  A0 05        	ldy #5
000172r 3  B1 rr        	lda (z80_ix),y
000174r 3  18           	clc
000175r 3  69 01        	adc #1		 	; move left.
000177r 3  91 rr        	sta (z80_ix),y
000179r 3  60           	rts
00017Ar 3               dotu:
00017Ar 3  A0 03        	ldy #3
00017Cr 3  B1 rr        	lda (z80_ix),y
00017Er 3  38           	sec
00017Fr 3  E9 01        	sbc #1		 	; move up.
000181r 3  91 rr        	sta (z80_ix),y
000183r 3  60           	rts
000184r 3               dotd:
000184r 3  A0 03        	ldy #3
000186r 3  B1 rr        	lda (z80_ix),y
000188r 3  18           	clc
000189r 3  69 01        	adc #1			; move down.
00018Br 3  91 rr        	sta (z80_ix),y
00018Dr 3  60           	rts
00018Er 3               
00018Er 3               ;----------------------------------------------------
00018Er 3               ; Check if coordinates are ok before redrawing at new position.
00018Er 3               ;
00018Er 3               ; left:   X>L		X=L	Ok
00018Er 3               ; right:  R+15>X	X=R	Ok
00018Er 3               ; top:    Y>T		Y=T	Ok
00018Er 3               ; bottom: B+15>Y	Y=B	Ok
00018Er 3               ;----------------------------------------------------
00018Er 3               
00018Er 3               chkxy:
00018Er 3               
00018Er 3               ; top:    Y>T		Y=T	Ok
00018Er 3               
00018Er 3  A0 03        	ldy #3
000190r 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000192r 3  CD rr rr     	cmp wntopx		; window top.
000195r 3  B0 03        	bcs :+			; compare with top window limit.
000197r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
00019Ar 3               :
00019Ar 3               ; left:   X>L		X=L	Ok
00019Ar 3               
00019Ar 3  A0 05        	ldy #5
00019Cr 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00019Er 3  CD rr rr     	cmp wnlftx		; left edge.
0001A1r 3  B0 03        	bcs :+			; compare with left window limit.
0001A3r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
0001A6r 3               :
0001A6r 3               ; bottom: B+15>Y	Y=B	Ok
0001A6r 3               
0001A6r 3  AD rr rr     	lda wnbotx		; point to bottom.
0001A9r 3  18           	clc
0001AAr 3  69 0F        	adc #15
0001ACr 3  A0 03        	ldy #3
0001AEr 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001B0r 3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
0001B2r 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel..
0001B5r 3               :
0001B5r 3               ; right:  R+15>X	X=R	Ok
0001B5r 3               
0001B5r 3  AD rr rr     	lda wnrgtx		; point to right edge.
0001B8r 3  18           	clc
0001B9r 3  69 0F        	adc #15
0001BBr 3  A0 05        	ldy #5
0001BDr 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001BFr 3  B0 03        	bcs :+			; compare with window limit.
0001C1r 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel.
0001C4r 3               :
0001C4r 3               
0001C4r 3               ;----------------------------------------------------
0001C4r 3               ; Drop through.
0001C4r 3               ; Display shrapnel.
0001C4r 3               ;----------------------------------------------------
0001C4r 3               
0001C4r 3               plot:
0001C4r 3  A0 03        	ldy #3
0001C6r 3  B1 rr        	lda (z80_ix),y		; y integer.
0001C8r 3  85 rr        	sta dispy	 	; workspace coordinates.
0001CAr 3  A0 05        	ldy #5
0001CCr 3  B1 rr        	lda (z80_ix),y	 	; x integer.
0001CEr 3  85 rr        	sta dispx 		; workspace coordinates.
0001D0r 3               
0001D0r 3  A0 00        	ldy #0
0001D2r 3  B1 rr        	lda (z80_ix),y 		; type.
0001D4r 3  D0 03        	bne :+			; is it a laser?
0001D6r 3  4C rr rr     	jmp plot1 		; yes, draw laser instead.
0001D9r 3               :
0001D9r 3               plot0:
0001D9r 3  A5 rr        	lda dispx		; which pixel within byte do we
0001DBr 3  29 07        	and #7			; want to set first?
0001DDr 3  A8           	tay
0001DEr 3  B9 rr rr     	lda dots,y 		; table of small pixel positions.
0001E1r 3  85 rr        	sta z80_e 		; get value.
0001E3r 3               
0001E3r 3  20 rr rr     	jsr scadd 		; screen address.
0001E6r 3  A0 00        	ldy #0
0001E8r 3  B1 rr        	lda (scraddr),y		; see what's already there.
0001EAr 3  45 rr        	eor z80_e
0001ECr 3  91 rr        	sta (scraddr),y 	; put back on screen.
0001EEr 3  60           	rts
0001EFr 3               
0001EFr 3               plot1:
0001EFr 3  20 rr rr     	jsr scadd 		; screen address.
0001F2r 3  A0 00        	ldy #0
0001F4r 3  B1 rr        	lda (scraddr),y 	; fetch byte there.
0001F6r 3  49 FF        	eor #255 		; toggle all bits.
0001F8r 3  91 rr        	sta (scraddr),y 	; new byte.
0001FAr 3  60           	rts
0001FBr 3               
0001FBr 3               ;----------------------------------------------------
0001FBr 3               ; Switch off shrapnel
0001FBr 3               ;----------------------------------------------------
0001FBr 3               
0001FBr 3               kilshr:
0001FBr 3  A9 80        	lda #128
0001FDr 3  A0 00        	ldy #0
0001FFr 3  91 rr        	sta (z80_ix),y	; switch off shrapnel.
000201r 3  60           	rts
000202r 3               
000202r 3               ;----------------------------------------------------
000202r 3               ; Sine/cosine table
000202r 3               ;----------------------------------------------------
000202r 3               
000202r 3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
000206r 3  87 01 B2 03  
00020Ar 3  D4 02 D4 02  
000212r 3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
000216r 3  B2 03 78 FE  
00021Ar 3  D4 02 2B FD  
000222r 3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
000226r 3  78 FE 4D FC  
00022Ar 3  2B FD 2B FD  
000232r 3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
000236r 3  4D FC 87 01  
00023Ar 3  2B FD D4 02  
000242r 3               
000242r 3               ;----------------------------------------------------
000242r 3               ; Create trail
000242r 3               ;----------------------------------------------------
000242r 3               
000242r 3               trail:
000242r 3  A0 01        	ldy #1
000244r 3  B1 rr        	lda (z80_ix),y 	; time remaining.
000246r 3  38           	sec
000247r 3  E9 01        	sbc #1
000249r 3  91 rr        	sta (z80_ix),y
00024Br 3  D0 03        	bne :+
00024Dr 3  4C rr rr     	jmp trailk		; time to switch it off.
000250r 3               :
000250r 3  20 rr rr     	jsr qrand		; get a random number.
000253r 3  4A           	lsr a 			; x or y axis?
000254r 3  90 03        	bcc :+
000256r 3  4C rr rr     	jmp trailv		; use y.
000259r 3               :
000259r 3               ; Trail horizontal
000259r 3               
000259r 3  4A           	lsr a 			; which direction?
00025Ar 3  90 03        	bcc :+
00025Cr 3  4C rr rr     	jmp traill		; go left.
00025Fr 3               :
00025Fr 3               ; Trail right
00025Fr 3               
00025Fr 3  A0 05        	ldy #5
000261r 3  B1 rr        	lda (z80_ix),y
000263r 3  18           	clc
000264r 3  69 01        	adc #1	 		; go right.
000266r 3  91 rr        	sta (z80_ix),y
000268r 3  60           	rts
000269r 3               
000269r 3               ; Trail left
000269r 3               
000269r 3               traill:
000269r 3  A0 05        	ldy #5
00026Br 3  B1 rr        	lda (z80_ix),y
00026Dr 3  38           	sec
00026Er 3  E9 01        	sbc #1 			; go left.
000270r 3  91 rr        	sta (z80_ix),y
000272r 3  60           	rts
000273r 3               
000273r 3               ; Trail vertical
000273r 3               
000273r 3               trailv:
000273r 3  4A           	lsr a		 	; which direction?
000274r 3  90 03        	bcc :+
000276r 3  4C rr rr     	jmp trailu		; go up.
000279r 3               :
000279r 3               ; Trail down
000279r 3               
000279r 3  A0 03        	ldy #3
00027Br 3  B1 rr        	lda (z80_ix),y
00027Dr 3  18           	clc
00027Er 3  69 01        	adc #1 			; go down.
000280r 3  91 rr        	sta (z80_ix),y
000282r 3  60           	rts
000283r 3               
000283r 3               ; Trail up
000283r 3               
000283r 3               trailu:
000283r 3  A0 03        	ldy #3
000285r 3  B1 rr        	lda (z80_ix),y
000287r 3  38           	sec
000288r 3  E9 01        	sbc #1 			; go up.
00028Ar 3  91 rr        	sta (z80_ix),y
00028Cr 3  60           	rts
00028Dr 3               
00028Dr 3               ; Kill trail
00028Dr 3               
00028Dr 3               trailk:
00028Dr 3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
00028Fr 3  A0 03        	ldy #3
000291r 3  91 rr        	sta (z80_ix),y
000293r 3  60           	rts
000294r 3               
000294r 3               ;----------------------------------------------------
000294r 3               ; Create laser beam
000294r 3               ;----------------------------------------------------
000294r 3               
000294r 3               laser:
000294r 3  A0 01        	ldy #1
000296r 3  B1 rr        	lda (z80_ix),y 		; direction.
000298r 3  6A           	ror a 			; left or right?
000299r 3  B0 03        	bcs :+
00029Br 3  4C rr rr     	jmp laserl		; move left.
00029Er 3               :
00029Er 3               ; Laser right
00029Er 3               
00029Er 3  A9 08        	lda #8			; distance to travel.
0002A0r 3  85 rr        	sta z80_b
0002A2r 3  4C rr rr     	jmp laserm		; move laser.
0002A5r 3               
0002A5r 3               ; Laser left
0002A5r 3               
0002A5r 3               laserl:
0002A5r 3  A9 F8        	lda #248		; distance to travel.
0002A7r 3  85 rr        	sta z80_b
0002A9r 3               laserm:
0002A9r 3  A0 05        	ldy #5
0002ABr 3  B1 rr        	lda (z80_ix),y		; x position.
0002ADr 3  18           	clc
0002AEr 3  65 rr        	adc z80_b		; add distance.
0002B0r 3  91 rr        	sta (z80_ix),y		; set new x coordinate.
0002B2r 3               
0002B2r 3               ; Test new block.
0002B2r 3               
0002B2r 3  85 rr        	sta dispx 		; set x for block collision detection purposes.
0002B4r 3  A0 03        	ldy #3
0002B6r 3  B1 rr        	lda (z80_ix),y 		; get y.
0002B8r 3  85 rr        	sta dispy		; set coordinate for collision test.
0002BAr 3  20 rr rr     	jsr tstbl 		; get block type there.
0002BDr 3  C9 02        	cmp #WALL		; is it solid?
0002BFr 3  D0 03        	bne :+
0002C1r 3  4C rr rr     	jmp trailk		; yes, it cannot pass.
0002C4r 3               :
0002C4r 3               .if pflag .or dflag
0002C4r 3  C9 04                cmp #FODDER             ; is it fodder?
0002C6r 3  D0 06                bne :+
0002C8r 3  20 rr rr             jsr fdchk               ; remove fodder block.
0002CBr 3  4C rr rr             jmp trailk              ; destroy laser.
0002CEr 3               :
0002CEr 3               .endif
0002CEr 3  60           	rts
0002CFr 3               
0002CFr 3               ;----------------------------------------------------
0002CFr 3               ; Dots mask
0002CFr 3               ;----------------------------------------------------
0002CFr 3               
0002CFr 3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
0002D3r 3  08 04 02 01  
0002D7r 3               
0002D7r 3               
0002D7r 3               ;----------------------------------------------------
0002D7r 3               ; Plot, preserving de.
0002D7r 3               ;----------------------------------------------------
0002D7r 3               
0002D7r 3               plotde:
0002D7r 3  A5 rr        	lda z80_d 		; put de on stack.
0002D9r 3  48           	pha
0002DAr 3  A5 rr        	lda z80_e
0002DCr 3  48           	pha
0002DDr 3               
0002DDr 3  20 rr rr     	jsr plot 		; plot pixel.
0002E0r 3               
0002E0r 3  68           	pla			; restore de from stack.
0002E1r 3  85 rr        	sta z80_e
0002E3r 3  68           	pla
0002E4r 3  85 rr        	sta z80_d
0002E6r 3               
0002E6r 3  60           	rts
0002E7r 3               
0002E7r 3               ;----------------------------------------------------
0002E7r 3               ; Shoot a laser.
0002E7r 3               ;----------------------------------------------------
0002E7r 3               
0002E7r 3               shoot:
0002E7r 3  85 rr        	sta z80_c		; store direction in c register.
0002E9r 3  A0 08        	ldy #8
0002EBr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0002EDr 3  18           	clc
0002EEr 3               shoot1:
0002EEr 3  69 07        	adc #(SPR_HGT/2-1)	; down 7 pixels.
0002F0r 3  85 rr        	sta z80_l 		; puty y coordinate in l.
0002F2r 3               
0002F2r 3  A0 09        	ldy #9
0002F4r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in h.
0002F6r 3  85 rr        	sta z80_h
0002F8r 3               
0002F8r 3  A5 rr        	lda z80_i		; store pointer to sprite.
0002FAr 3  48           	pha
0002FBr 3  A5 rr        	lda z80_x
0002FDr 3  48           	pha
0002FEr 3               
0002FEr 3  20 rr rr     	jsr fpslot 		; find particle slot.
000301r 3  B0 03        	bcs :+
000303r 3  4C rr rr     	jmp vapou2		; failed, restore ix.
000306r 3               :
000306r 3  A9 00        	lda #0
000308r 3  A0 00        	ldy #0
00030Ar 3  91 rr        	sta (z80_ix),y 		; set up a laser.
00030Cr 3               
00030Cr 3  A5 rr        	lda z80_c
00030Er 3  A0 01        	ldy #1
000310r 3  91 rr        	sta (z80_ix),y 		; set the direction.
000312r 3               
000312r 3  A5 rr        	lda z80_l
000314r 3  A0 03        	ldy #3
000316r 3  91 rr        	sta (z80_ix),y		; set y coordinate.
000318r 3               
000318r 3  66 rr        	ror z80_c		; check direction we want.
00031Ar 3  90 03        	bcc :+
00031Cr 3  4C rr rr     	jmp shootr		; shoot right.
00031Fr 3               :
00031Fr 3  A5 rr        	lda z80_h		; X position.
000321r 3               shoot0:
000321r 3  29 F8        	and #248		; align on character boundary.
000323r 3  A0 05        	ldy #5
000325r 3  91 rr        	sta (z80_ix),y		; set x coordinate.
000327r 3  4C rr rr     	jmp vapou0 		; draw first image.
00032Ar 3               shootr:
00032Ar 3  A5 rr        	lda z80_h		; x position.
00032Cr 3  18           	clc
00032Dr 3  69 0F        	adc #15			; look right.
00032Fr 3  4C rr rr     	jmp shoot0		; align and continue.
000332r 3               
000332r 3               ;----------------------------------------------------
000332r 3               ; Create a bit of vapour trail.
000332r 3               ;----------------------------------------------------
000332r 3               
000332r 3               vapour:
000332r 3  A5 rr        	lda z80_i		; store pointer to sprite.
000334r 3  48           	pha
000335r 3  A5 rr        	lda z80_x
000337r 3  48           	pha
000338r 3               
000338r 3  A0 08        	ldy #8
00033Ar 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00033Cr 3  18           	clc
00033Dr 3               vapou3:
00033Dr 3  69 07        	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00033Fr 3  85 rr        	sta z80_l
000341r 3               
000341r 3  A0 09        	ldy #9
000343r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000345r 3  69 07        	adc #7
000347r 3  85 rr        	sta z80_h
000349r 3               
000349r 3  20 rr rr     	jsr fpslot 		; find particle slot.
00034Cr 3  90 03        	bcc :+
00034Er 3  4C rr rr     	jmp vapou1		; no, we can use it.
000351r 3               :
000351r 3               vapou2:
000351r 3  68           	pla
000352r 3  85 rr        	sta z80_x
000354r 3  68           	pla
000355r 3  85 rr        	sta z80_i
000357r 3  60           	rts
000358r 3               vapou1:
000358r 3  A5 rr        	lda z80_l
00035Ar 3  A0 03        	ldy #3
00035Cr 3  91 rr        	sta (z80_ix),y		; set up y.
00035Er 3               
00035Er 3  A5 rr        	lda z80_h
000360r 3  A0 05        	ldy #5
000362r 3  91 rr        	sta (z80_ix),y 		; set up x coordinate.
000364r 3               
000364r 3  20 rr rr     	jsr qrand		; get quick random number.
000367r 3  29 0F        	and #15			; random time.
000369r 3  18           	clc
00036Ar 3  69 0F        	adc #15			; minimum time on screen.
00036Cr 3  A0 01        	ldy #1
00036Er 3  91 rr        	sta (z80_ix),y		; set time on screen.
000370r 3               
000370r 3  A9 01        	lda #1
000372r 3  A0 00        	ldy #0
000374r 3  91 rr        	sta (z80_ix),y		; define particle as vapour trail.
000376r 3               vapou0:
000376r 3  20 rr rr     	jsr chkxy		; plot first position.
000379r 3  4C rr rr     	jmp vapou2
00037Cr 3               
00037Cr 3               ;----------------------------------------------------
00037Cr 3               ; Create a user particle.
00037Cr 3               ;----------------------------------------------------
00037Cr 3               
00037Cr 3               ptusr:
00037Cr 3  85 rr        	sta z80_f		; store timer.
00037Er 3               
00037Er 3  A0 08        	ldy #8
000380r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000382r 3  18           	clc
000383r 3  69 07        	adc #7			; mid-point of sprite.
000385r 3  85 rr        	sta z80_l
000387r 3               
000387r 3  A0 09        	ldy #9
000389r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00038Br 3  18           	clc
00038Cr 3  69 07        	adc #7			; mid-point of sprite.
00038Er 3  85 rr        	sta z80_h
000390r 3               
000390r 3  20 rr rr     	jsr fpslot 		; find particle slot.
000393r 3  B0 01        	bcs ptusr1
000395r 3  60           	rts 			; out of slots, can't generate anything.
000396r 3               ptusr1:
000396r 3  A5 rr        	lda z80_l
000398r 3  A0 03        	ldy #3
00039Ar 3  91 rr        	sta (z80_ix),y 		; set up y.
00039Cr 3               
00039Cr 3  A5 rr        	lda z80_h
00039Er 3  A0 05        	ldy #5
0003A0r 3  91 rr        	sta (z80_ix),y		; set up x coordinate.
0003A2r 3               
0003A2r 3  A5 rr        	lda z80_f 		; restore timer.
0003A4r 3  A0 01        	ldy #1
0003A6r 3  91 rr        	sta (z80_ix),y		; set time on screen.
0003A8r 3               
0003A8r 3  A9 07        	lda #7
0003AAr 3  A0 00        	ldy #0
0003ACr 3  91 rr        	sta (z80_ix),y		; define particle as user particle.
0003AEr 3               
0003AEr 3  4C rr rr     	jmp chkxy		; plot first position.
0003B1r 3               
0003B1r 3               ;----------------------------------------------------
0003B1r 3               ; Create a vertical or horizontal star.
0003B1r 3               ;----------------------------------------------------
0003B1r 3               
0003B1r 3               star:
0003B1r 3  A5 rr        	lda z80_i		; store pointer to sprite.
0003B3r 3  48           	pha
0003B4r 3  A5 rr        	lda z80_x
0003B6r 3  48           	pha
0003B7r 3               
0003B7r 3  20 rr rr     	jsr fpslot 		; find particle slot.
0003BAr 3  B0 07        	bcs star7		; found one we can use.
0003BCr 3               star0:
0003BCr 3  68           	pla 			; restore sprite pointer.
0003BDr 3  85 rr        	sta z80_x
0003BFr 3  68           	pla
0003C0r 3  85 rr        	sta z80_i
0003C2r 3  60           	rts 			; out of slots, can't generate anything.
0003C3r 3               star7:
0003C3r 3  A5 rr        	lda z80_c		; direction.
0003C5r 3  29 03        	and #3 			; is it left?
0003C7r 3  D0 03        	bne :+
0003C9r 3  4C rr rr     	jmp star1 		; yes, it's left.
0003CCr 3               :
0003CCr 3  C9 01        	cmp #1 			; is it right?
0003CEr 3  D0 03        	bne :+
0003D0r 3  4C rr rr     	jmp star2 		; yes, it's right.
0003D3r 3               :
0003D3r 3  C9 02        	cmp #2 			; is it up?
0003D5r 3  D0 03        	bne :+
0003D7r 3  4C rr rr     	jmp star3 		; yes, it's up.
0003DAr 3               :
0003DAr 3  AC rr rr     	ldy wntopx 		; get edge of screen.
0003DDr 3  C8           	iny			; down one pixel.
0003DEr 3  98           	tya
0003DFr 3               star8:
0003DFr 3  A0 03        	ldy #3
0003E1r 3  91 rr        	sta (z80_ix),y 		; set y coord.
0003E3r 3  20 rr rr     	jsr qrand 		; get quick random number.
0003E6r 3               star9:
0003E6r 3  A0 05        	ldy #5
0003E8r 3  91 rr        	sta (z80_ix),y		; set x position.
0003EAr 3               
0003EAr 3  A5 rr        	lda z80_c		; direction.
0003ECr 3  29 03        	and #3			; zero to three.
0003EEr 3  18           	clc
0003EFr 3  69 03        	adc #3			; 3 to 6 for starfield.
0003F1r 3  A0 00        	ldy #0
0003F3r 3  91 rr        	sta (z80_ix),y		; define particle as star.
0003F5r 3  20 rr rr     	jsr chkxy		; plot first position.
0003F8r 3  4C rr rr     	jmp star0
0003FBr 3               star1:
0003FBr 3  20 rr rr     	jsr qrand		; get quick random number.
0003FEr 3  A0 03        	ldy #3
000400r 3  91 rr        	sta (z80_ix),y 		; set y coord.
000402r 3               
000402r 3  AD rr rr     	lda wnrgtx 		; get edge of screen.
000405r 3  18           	clc
000406r 3  69 0F        	adc #15			; add width of sprite minus 1.
000408r 3  4C rr rr     	jmp star9
00040Br 3               star2:
00040Br 3  20 rr rr     	jsr qrand 		; get quick random number.
00040Er 3  A0 03        	ldy #3
000410r 3  91 rr        	sta (z80_ix),y		; set y coord.
000412r 3               
000412r 3  AD rr rr     	lda wnlftx		; get edge of screen.
000415r 3  4C rr rr     	jmp star9
000418r 3               star3:
000418r 3  AD rr rr     	lda wnbotx 		; get edge of screen.
00041Br 3  18           	clc
00041Cr 3  69 0F        	adc #15 		; height of sprite minus one pixel.
00041Er 3  4C rr rr     	jmp star8
000421r 3               
000421r 3               ;----------------------------------------------------
000421r 3               ; Find particle slot for lasers or vapour trail.
000421r 3               ; can't use alternate accumulator.
000421r 3               ;----------------------------------------------------
000421r 3               
000421r 3               fpslot:
000421r 3  A9 00        	lda #<SHRAPN 		; shrapnel table.
000423r 3  85 rr        	sta z80_x
000425r 3  A9 09        	lda #>SHRAPN
000427r 3  85 rr        	sta z80_i
000429r 3               
000429r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
00042Br 3  85 rr        	sta z80_b
00042Dr 3               fpslt0:
00042Dr 3  A0 00        	ldy #0
00042Fr 3  B1 rr        	lda (z80_ix),y		; get type.
000431r 3  0A           	asl a  			; is this slot in use?
000432r 3  90 01        	bcc :+
000434r 3  60           	rts			; no, we can use it.
000435r 3               :
000435r 3  18           	clc			; point to more shrapnel.
000436r 3  A5 rr        	lda z80_x
000438r 3  69 06        	adc #SHRSIZ
00043Ar 3  85 rr        	sta z80_x
00043Cr 3  90 02        	bcc :+
00043Er 3  E6 rr        	inc z80_i
000440r 3               :
000440r 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
000442r 3  D0 E9        	bne fpslt0
000444r 3               
000444r 3  18           	clc
000445r 3  60           	rts 			; out of slots, can't generate anything.
000446r 3               
000446r 3               ;----------------------------------------------------
000446r 3               ; Create an explosion at sprite position.
000446r 3               ;----------------------------------------------------
000446r 3               
000446r 3               explod:
000446r 3  85 rr        	sta z80_c 		; particles to create.
000448r 3               
000448r 3  A5 rr        	lda z80_i 		; store pointer to sprite.
00044Ar 3  48           	pha
00044Br 3  A5 rr        	lda z80_x
00044Dr 3  48           	pha
00044Er 3               
00044Er 3  A0 08        	ldy #8
000450r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000452r 3  85 rr        	sta z80_l
000454r 3  A0 09        	ldy #9
000456r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000458r 3  85 rr        	sta z80_h
00045Ar 3               
00045Ar 3  A9 00        	lda #<SHRAPN		; shrapnel table.
00045Cr 3  85 rr        	sta z80_x
00045Er 3  A9 09        	lda #>SHRAPN
000460r 3  85 rr        	sta z80_i
000462r 3               
000462r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
000464r 3  85 rr        	sta explcnt
000466r 3               expld0:
000466r 3  A0 00        	ldy #0
000468r 3  B1 rr        	lda (z80_ix),y		; get type.
00046Ar 3  0A           	asl a 			; is this slot in use?
00046Br 3  B0 16        	bcs expld1		; no, we can use it.
00046Dr 3               expld2:
00046Dr 3  18           	clc
00046Er 3  A5 rr        	lda z80_x
000470r 3  69 06        	adc #SHRSIZ
000472r 3  85 rr        	sta z80_x
000474r 3  90 02        	bcc :+
000476r 3  E6 rr        	inc z80_i
000478r 3               :
000478r 3  C6 rr        	dec explcnt		; repeat for all shrapnel.
00047Ar 3  D0 EA        	bne expld0
00047Cr 3               expld3:
00047Cr 3  68           	pla			; restore sprite pointer.
00047Dr 3  85 rr        	sta z80_x
00047Fr 3  68           	pla
000480r 3  85 rr        	sta z80_i
000482r 3  60           	rts 			; out of slots, can't generate any more.
000483r 3               
000483r 3               expld1:
000483r 3  A5 rr        	lda z80_c		; shrapnel counter.
000485r 3  29 0F        	and #15			; 0 to 15.
000487r 3  18           	clc			; add to x.
000488r 3  65 rr        	adc z80_l
00048Ar 3  A0 03        	ldy #3
00048Cr 3  91 rr        	sta (z80_ix),y		; y coord.
00048Er 3               
00048Er 3  A5 rr        	lda seed3 		; crap random number.
000490r 3  29 0F        	and #15			; 0 to 15.
000492r 3  18           	clc 			; add to y.
000493r 3  65 rr        	adc z80_h
000495r 3  A0 05        	ldy #5
000497r 3  91 rr        	sta (z80_ix),y		; x coord.
000499r 3               
000499r 3  A9 02        	lda #2
00049Br 3  A0 00        	ldy #0
00049Dr 3  91 rr        	sta (z80_ix),y		; switch it on.
00049Fr 3               
00049Fr 3  20 rr rr     	jsr chkxy		; plot first position.
0004A2r 3  20 rr rr     	jsr qrand		; quick random angle.
0004A5r 3  29 3C        	and #60 		; keep within range.
0004A7r 3  A0 01        	ldy #1
0004A9r 3  91 rr        	sta (z80_ix),y		; angle.
0004ABr 3               
0004ABr 3  C6 rr        	dec z80_c		; one less piece of shrapnel to generate.
0004ADr 3  D0 BE        	bne expld2 		; back to main explosion loop.
0004AFr 3  4C rr rr     	jmp expld3 		; restore sprite pointer and exit.
0004B2r 3               
0004B2r 3               ;----------------------------------------------------
0004B2r 3               ; Quick random
0004B2r 3               ;----------------------------------------------------
0004B2r 3               
0004B2r 3               qrand:
0004B2r 3  20 rr rr     	jsr random		; r register.
0004B5r 3  45 rr        	eor seed3		; combine with seed.
0004B7r 3  85 rr        	sta seed3 		; new seed.
0004B9r 3  60           	rts
0004BAr 3               
0004BAr 3               ;----------------------------------------------------
0004BAr 3               ; Display all shrapnel.
0004BAr 3               ;----------------------------------------------------
0004BAr 3               
0004BAr 3               dshrp:
0004BAr 3  A9 rr        	lda #<plotde		; display routine.
0004BCr 3  8D rr rr     	sta proshx+1
0004BFr 3  A9 rr        	lda #>plotde
0004C1r 3  8D rr rr     	sta proshx+2
0004C4r 3  20 rr rr     	jsr proshr		; process shrapnel.
0004C7r 3               
0004C7r 3  A9 rr        	lda #<prosh1		; processing routine.
0004C9r 3  8D rr rr     	sta proshx+1
0004CCr 3  A9 rr        	lda #>prosh1
0004CEr 3  8D rr rr     	sta proshx+2
0004D1r 3  60           	rts
0004D2r 3               
0004D2r 3               ;------------------------------------------------------
0004D2r 3               ; Particle engine.
0004D2r 3               ;
0004D2r 3               ; Init particle data for 55 particles in SHRAPN table.
0004D2r 3               ; Every particle has 6 bytes.
0004D2r 3               ;
0004D2r 3               ; global:	-
0004D2r 3               ; local:	x,y,hl
0004D2r 3               ; calls:	-
0004D2r 3               ;------------------------------------------------------
0004D2r 3               
0004D2r 3               inishr:
0004D2r 3  A9 00        	lda #<SHRAPN 		; table.
0004D4r 3  85 rr        	sta z80_l
0004D6r 3  A9 09        	lda #>SHRAPN
0004D8r 3  85 rr        	sta z80_h
0004DAr 3               
0004DAr 3  A0 00        	ldy #0
0004DCr 3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
0004DEr 3               inish0:
0004DEr 3  A9 FF        	lda #255 		; kill the shrapnel.
0004E0r 3  91 rr        	sta (z80_hl),y
0004E2r 3               
0004E2r 3  18           	clc 			; point there.
0004E3r 3  A5 rr        	lda z80_l
0004E5r 3  69 06        	adc #SHRSIZ		; distance to next.
0004E7r 3  85 rr        	sta z80_l
0004E9r 3  90 02        	bcc :+
0004EBr 3  E6 rr        	inc z80_h
0004EDr 3               :
0004EDr 3  CA           	dex
0004EEr 3  D0 EE        	bne inish0 		; round again.
0004F0r 3  60           	rts
0004F1r 3               
0004F1r 3               ;------------------------------------------------------
0004F1r 3               ; Check for collision between laser and sprite.
0004F1r 3               ;------------------------------------------------------
0004F1r 3               
0004F1r 3               lcol:
0004F1r 3  A9 00        	lda #<SHRAPN		; shrapnel table.
0004F3r 3  85 rr        	sta z80_l
0004F5r 3  A9 09        	lda #>SHRAPN
0004F7r 3  85 rr        	sta z80_h
0004F9r 3               
0004F9r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
0004FBr 3  85 rr        	sta z80_b
0004FDr 3               lcol0:
0004FDr 3  A0 00        	ldy #0
0004FFr 3  B1 rr        	lda (z80_hl),y 		; get type.
000501r 3  F0 11        	beq lcol1		; yes, check collision.
000503r 3               lcol3:
000503r 3  18           	clc			; point to more shrapnel.
000504r 3  A5 rr        	lda z80_l
000506r 3  69 06        	adc #SHRSIZ
000508r 3  85 rr        	sta z80_l
00050Ar 3  90 02        	bcc :+
00050Cr 3  E6 rr        	inc z80_h
00050Er 3               :
00050Er 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
000510r 3  D0 EB        	bne lcol0
000512r 3  18           	clc
000513r 3  60           	rts 			; no collision, carry not set.
000514r 3               lcol1:
000514r 3  A0 03        	ldy #3
000516r 3  B1 rr        	lda (z80_hl),y		; get y.
000518r 3  38           	sec
000519r 3  A0 08        	ldy #8
00051Br 3  F1 rr        	sbc (z80_ix),y		; subtract sprite y.
00051Dr 3               lcolh:
00051Dr 3  C9 10        	cmp #SPR_HGT 		; within range?
00051Fr 3  90 03        	bcc :+
000521r 3  4C rr rr     	jmp lcol2		; no, missed.
000524r 3               :
000524r 3  A0 05        	ldy #5
000526r 3  B1 rr        	lda (z80_hl),y 		; get x.
000528r 3  38           	sec
000529r 3  A0 09        	ldy #9
00052Br 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
00052Dr 3  C9 10        	cmp #16			; within range?
00052Fr 3  B0 03        	bcs :+
000531r 3  4C rr rr     	jmp lcol4 		; yes, collision occurred.
000534r 3               :
000534r 3               lcol2:
000534r 3  4C rr rr     	jmp lcol3
000537r 3               lcol4:
000537r 3  38           	sec
000538r 3  60           	rts 			; return with carry set for collision.
000539r 3               .endif
000539r 3               
000539r 3               ;------------------------------------------------------
000539r 3               ; Main game engine code starts here.
000539r 3               ; After initialisation, mloop is the main loop
000539r 3               ;------------------------------------------------------
000539r 3               
000539r 3               game:
000539r 3               
000539r 3               ; Set up screen address table.
000539r 3               
000539r 3               setsat:
000539r 3  A9 00        	lda #<CharAddress	; start of screen.
00053Br 3  85 rr        	sta scraddr
00053Dr 3  A9 10        	lda #>CharAddress
00053Fr 3  85 rr        	sta scraddr+1
000541r 3               
000541r 3  A0 00        	ldy #0			; vertical lines on screen.
000543r 3               setsa0:
000543r 3  A5 rr        	lda scraddr
000545r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
000548r 3  A5 rr        	lda scraddr+1
00054Ar 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
00054Dr 3  20 rr rr     	jsr nline		; next line down.
000550r 3  C8           	iny			; next position in table.
000551r 3  D0 F0        	bne setsa0
000553r 3               
000553r 3               ; Set up colour address table
000553r 3               
000553r 3               setsof:
000553r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
000555r 3  85 rr        	sta bufaddr
000557r 3  A9 96        	lda #>ColorAttr
000559r 3  85 rr        	sta bufaddr+1
00055Br 3               
00055Br 3  A0 00        	ldy #0			; vertical lines on screen.
00055Dr 3               setof0:
00055Dr 3  A5 rr        	lda bufaddr
00055Fr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
000562r 3  A5 rr        	lda bufaddr+1
000564r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
000567r 3  18           	clc			; next line down.
000568r 3  A5 rr        	lda bufaddr
00056Ar 3  69 16        	adc #ScrWidth
00056Cr 3  85 rr        	sta bufaddr
00056Er 3  90 02        	bcc :+
000570r 3  E6 rr        	inc bufaddr+1
000572r 3               :
000572r 3  C8           	iny			; next position in table.
000573r 3  C0 0B        	cpy #ScrHeight/2
000575r 3  D0 E6        	bne setof0
000577r 3               
000577r 3               ; Init graphics mode
000577r 3               
000577r 3  20 rr rr     	jsr init
00057Ar 3               
00057Ar 3               ; Init joysticks
00057Ar 3  20 rr rr     	jsr joyinit		; VIC20 joystick
00057Dr 3               
00057Dr 3               rpblc2:
00057Dr 3               .if pflag
00057Dr 3  20 rr rr     	jsr inishr 		; initialise particle engine.
000580r 3               .endif
000580r 3               evintr:
000580r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000583r 3               
000583r 3  A9 02        	lda #WALL 		; write default property.
000585r 3  A2 00        	ldx #0
000587r 3               clrmap:
000587r 3  9D 00 04     	sta MAP,x 		; block properties.
00058Ar 3  9D 00 05     	sta MAP+256,x
00058Dr 3  E8           	inx
00058Er 3  D0 F7        	bne clrmap
000590r 3               
000590r 3               .if oflag
000590r 3               	jsr iniob 		; initialise objects.
000590r 3               .endif
000590r 3  A9 00        	lda #0			; put zero in accumulator.
000592r 3  85 rr        	sta gamwon		; reset game won flag.
000594r 3               
000594r 3  20 rr rr     	jsr inisc 		; init the score.
000597r 3               mapst:
000597r 3  AD rr rr     	lda stmap 		; start position on map.
00059Ar 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
00059Dr 3               
00059Dr 3               inipbl:
00059Dr 3               .if aflag
00059Dr 3               	lda #<eop		; reset blockpointer
00059Dr 3               	sta pbptr
00059Dr 3               	lda #>eop
00059Dr 3               	sta pbptr+1
00059Dr 3               .endif
00059Dr 3  20 rr rr     	jsr initsc 		; set up first screen.
0005A0r 3               
0005A0r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0005A2r 3  85 rr        	sta z80_x
0005A4r 3  A9 rr        	lda #>ssprit
0005A6r 3  85 rr        	sta z80_i
0005A8r 3               evini:
0005A8r 3  20 rr rr     	jsr evnt13 		; initialisation.
0005ABr 3               
0005ABr 3               ; Two restarts.
0005ABr 3               ; First restart - clear all sprites and initialise everything.
0005ABr 3               
0005ABr 3               rstrt:
0005ABr 3  20 rr rr     	jsr rsevt 		; restart events.
0005AEr 3  20 rr rr     	jsr xspr 		; clear sprite table.
0005B1r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0005B4r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
0005B7r 3  4C rr rr     	jmp rstrt0
0005BAr 3               
0005BAr 3               ; Second restart - clear all but player, and don't initialise him.
0005BAr 3               
0005BAr 3               rstrtn:
0005BAr 3  20 rr rr     	jsr rsevt		; restart events.
0005BDr 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
0005C0r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0005C3r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
0005C6r 3               
0005C6r 3               ; Set up the player and/or enemy sprites.
0005C6r 3               
0005C6r 3               rstrt0:
0005C6r 3  A9 00        	lda #0 			; zero in accumulator.
0005C8r 3  85 rr        	sta nexlev 		; reset next level flag.
0005CAr 3  85 rr        	sta restfl 		; reset restart flag.
0005CCr 3  85 rr        	sta deadf 		; reset dead flag.
0005CEr 3               
0005CEr 3  20 rr rr     	jsr droom 		; show screen layout.
0005D1r 3               rpblc0:
0005D1r 3               .if pflag
0005D1r 3  20 rr rr     	jsr inishr 		; initialise particle engine.
0005D4r 3               .endif
0005D4r 3               .if aflag
0005D4r 3               	jsr rbloc		; draw blocks for this screen
0005D4r 3               .endif
0005D4r 3               .if oflag
0005D4r 3               	jsr shwob		; draw objects.
0005D4r 3               .endif
0005D4r 3               
0005D4r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0005D6r 3  85 rr        	sta z80_x
0005D8r 3  A9 rr        	lda #>sprtab
0005DAr 3  85 rr        	sta z80_i
0005DCr 3  20 rr rr     	jsr dspr 		; display sprites.
0005DFr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0005E1r 3  85 rr        	sta z80_x
0005E3r 3  A9 rr        	lda #>(sprtab+TABSIZ)
0005E5r 3  85 rr        	sta z80_i
0005E7r 3  20 rr rr     	jsr dspr 		; display sprites.
0005EAr 3               mloop:
0005EAr 3  20 rr rr     	jsr vsync 		; synchronise with display.
0005EDr 3               
0005EDr 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0005EFr 3  85 rr        	sta z80_x
0005F1r 3  A9 rr        	lda #>sprtab
0005F3r 3  85 rr        	sta z80_i
0005F5r 3  20 rr rr     	jsr dspr 		; display even sprites.
0005F8r 3               
0005F8r 3               ;	jsr plsnd 		; play sounds.
0005F8r 3  20 rr rr     	jsr vsync 		; synchronise with display.
0005FBr 3  20 rr rr     	jsr proshr
0005FEr 3               
0005FEr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000600r 3  85 rr        	sta z80_x
000602r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000604r 3  85 rr        	sta z80_i
000606r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000609r 3               
000609r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00060Br 3  85 rr        	sta z80_x
00060Dr 3  A9 rr        	lda #>(ssprit)
00060Fr 3  85 rr        	sta z80_i
000611r 3               evlp1:
000611r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000614r 3  20 rr rr     	jsr pspr 		; process sprites.
000617r 3               
000617r 3               ; Main loop events.
000617r 3               
000617r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000619r 3  85 rr        	sta z80_x
00061Br 3  A9 rr        	lda #>ssprit
00061Dr 3  85 rr        	sta z80_i
00061Fr 3               evlp2:
00061Fr 3  20 rr rr     	jsr evnt11 		; called once per main loop.
000622r 3               bsortx:
000622r 3  20 rr rr     	jsr bsort 		; sort sprites.
000625r 3               
000625r 3  A5 rr        	lda nexlev		; finished level flag.
000627r 3  D0 1F        	bne newlev		; is set, go to next level.
000629r 3  A5 rr        	lda gamwon		; finished game flag.
00062Br 3  D0 2A        	bne evwon		; is set, finish the game.
00062Dr 3  A5 rr        	lda restfl 		; finished level flag.
00062Fr 3  C9 01        	cmp #1			; has it been set?
000631r 3  D0 03        	bne :+
000633r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000636r 3               :
000636r 3  C9 02        	cmp #2			; has it been set?
000638r 3  D0 03        	bne :+
00063Ar 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
00063Dr 3               :
00063Dr 3  A5 rr        	lda deadf 		; dead flag.
00063Fr 3  D0 1C        	bne pdead		; yes, player dead.
000641r 3               
000641r 3               ; back to start of main loop.
000641r 3               
000641r 3  E6 rr        	inc frmno
000643r 3  E6 rr        	inc clock
000645r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
000648r 3               
000648r 3               ;----------------------------------------------------------
000648r 3               ; Read blocks from list and update screen accordingly.
000648r 3               ;----------------------------------------------------------
000648r 3               
000648r 3               .if aflag
000648r 3               rbloc:
000648r 3               	lda #<eop		; reset blockpointer
000648r 3               	sta pbbuf
000648r 3               	lda #>eop
000648r 3               	sta pbbuf+1
000648r 3               
000648r 3               rbloc2:
000648r 3               	lda pbbuf			; check for last block
000648r 3               	cmp pbptr
000648r 3               	bne rbloc1
000648r 3               	lda pbbuf+1
000648r 3               	cmp pbptr+1
000648r 3               	bne rbloc1
000648r 3               	rts
000648r 3               rbloc1:
000648r 3               	ldy #0
000648r 3               	lda (pbbuf),y		; check if block for this scno
000648r 3               	cmp scno
000648r 3               	bne rbloc0		; if not, skip
000648r 3               	iny
000648r 3               	lda (pbbuf),y		; get y
000648r 3               	sta dispy
000648r 3               	iny
000648r 3               	lda (pbbuf),y		; get x
000648r 3               	sta dispx
000648r 3               	iny
000648r 3               	lda (pbbuf),y		; get blocknr
000648r 3               	jsr pattr2		; draw block
000648r 3               rbloc0:
000648r 3               	clc			; point to next block
000648r 3               	lda pbbuf
000648r 3               	adc #4
000648r 3               	sta pbbuf
000648r 3               	bcc rbloc2
000648r 3               	inc pbbuf+1
000648r 3               	jmp rbloc2
000648r 3               .endif
000648r 3               
000648r 3               ;----------------------------------------------------------
000648r 3               ; New level
000648r 3               ;----------------------------------------------------------
000648r 3               
000648r 3               newlev:
000648r 3  A5 rr        	lda scno 			; current screen.
00064Ar 3  18           	clc
00064Br 3  69 01        	adc #1				; next screen.
00064Dr 3  CD rr rr     	cmp numsc 			; total number of screens.
000650r 3  B0 05        	bcs evwon			; yes, game finished.
000652r 3  85 rr        	sta scno			; set new level number.
000654r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
000657r 3               
000657r 3               evwon:
000657r 3  20 rr rr     	jsr evnt18		 	; game completed.
00065Ar 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00065Dr 3               
00065Dr 3               ;----------------------------------------------------------
00065Dr 3               ; Player dead.
00065Dr 3               ;----------------------------------------------------------
00065Dr 3               
00065Dr 3               pdead:
00065Dr 3  A9 00        	lda #0				; zeroise accumulator.
00065Fr 3  85 rr        	sta deadf			; reset dead flag.
000661r 3               evdie:
000661r 3  20 rr rr     	jsr evnt16 			; death subroutine.
000664r 3  A5 rr        	lda numlif			; number of lives.
000666r 3  F0 03        	beq :+
000668r 3  4C rr rr     	jmp rstrt 			; restart game.
00066Br 3               :
00066Br 3               evfail:
00066Br 3  20 rr rr     	jsr evnt17 			; failure event.
00066Er 3  4C rr rr     	jmp game			; restart game
000671r 3               
000671r 3               ;----------------------------------------------------------
000671r 3               ; Tidy things up
000671r 3               ;----------------------------------------------------------
000671r 3               
000671r 3               tidyup:
000671r 3  A0 00        	ldy #0				; digits to check.
000673r 3               tidyu2:
000673r 3  B9 rr rr     	lda score,y 			; get score digit.
000676r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
000679r 3  90 07        	bcc tidyu0			; high score is bigger.
00067Br 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00067Dr 3  C8           	iny				; next digit of high score.
00067Er 3  C0 06        	cpy #6
000680r 3  D0 F1        	bne tidyu2			; repeat for all digits
000682r 3               tidyu0:
000682r 3  A9 rr        	lda #<score			; return pointing to score.
000684r 3  85 rr        	sta z80_c
000686r 3  A9 rr        	lda #>score
000688r 3  85 rr        	sta z80_b
00068Ar 3  60           	rts
00068Br 3               tidyu1:
00068Br 3  A0 05        	ldy #5
00068Dr 3               tidyu3:
00068Dr 3  B9 rr rr     	lda score,y			; score.
000690r 3  99 rr rr     	sta hiscor,y			; high score.
000693r 3  88           	dey
000694r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000696r 3               evnewh:
000696r 3  20 rr rr     	jsr evnt19			; new high score event.
000699r 3  4C rr rr     	jmp tidyu0			; tidy up.
00069Cr 3               
00069Cr 3               ;--------------------------------------------------
00069Cr 3               ; Restart event.
00069Cr 3               ;--------------------------------------------------
00069Cr 3               
00069Cr 3               rsevt:
00069Cr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00069Er 3  85 rr        	sta z80_x
0006A0r 3  A9 rr        	lda #>ssprit
0006A2r 3  85 rr        	sta z80_i
0006A4r 3               
0006A4r 3               evrs:
0006A4r 3  4C rr rr     	jmp evnt14	 		; call restart event.
0006A7r 3               
0006A7r 3               ;------------------------------------------------------------------
0006A7r 3               ; Copy number passed in a to string position bc, right-justified.
0006A7r 3               ;
0006A7r 3               ; Input:
0006A7r 3               ;  A  = number
0006A7r 3               ;  BC = string address
0006A7r 3               ;
0006A7r 3               ; Output:
0006A7r 3               ;  BC = string with number
0006A7r 3               ;-----------------------------------------------------------------
0006A7r 3               
0006A7r 3               num2ch:
0006A7r 3  85 rr        	sta z80_d		; Save number
0006A9r 3               
0006A9r 3  A9 00        	lda #0
0006ABr 3  85 rr        	sta flag
0006ADr 3               numdg3:
0006ADr 3  A2 64        	ldx #100		; hundreds column.
0006AFr 3  86 rr        	stx z80_e
0006B1r 3  20 rr rr     	jsr numdg		; show digit.
0006B4r 3               numdg2:
0006B4r 3  A2 0A        	ldx #10			; tens column.
0006B6r 3  86 rr        	stx z80_e
0006B8r 3  20 rr rr     	jsr numdg		; show digit.
0006BBr 3               
0006BBr 3  E6 rr        	inc flag
0006BDr 3  A2 01        	ldx #1			; units column.
0006BFr 3  86 rr        	stx z80_e
0006C1r 3               numdg:
0006C1r 3  A9 30        	lda #48			; clear digit.
0006C3r 3  85 rr        	sta z80_a
0006C5r 3               numdg1:
0006C5r 3  A5 rr        	lda z80_d
0006C7r 3  C5 rr        	cmp z80_e
0006C9r 3  90 0E        	bcc numdg0		; nothing to show.
0006CBr 3  38           	sec
0006CCr 3  A5 rr        	lda z80_d
0006CEr 3  E5 rr        	sbc z80_e		; subtract from column.
0006D0r 3  85 rr        	sta z80_d
0006D2r 3  E6 rr        	inc z80_a		; increment digit.
0006D4r 3  E6 rr        	inc flag
0006D6r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
0006D9r 3               numdg0:
0006D9r 3  A0 00        	ldy #0
0006DBr 3  A5 rr        	lda z80_a
0006DDr 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
0006DFr 3  A5 rr        	lda flag
0006E1r 3  F0 06        	beq :+
0006E3r 3  E6 rr        	inc z80_c		; next buffer position.
0006E5r 3  D0 02        	bne :+
0006E7r 3  E6 rr        	inc z80_b
0006E9r 3               :
0006E9r 3  60           	rts
0006EAr 3               num2dd:
0006EAr 3  85 rr        	sta z80_d		; Save number
0006ECr 3               
0006ECr 3  A9 01        	lda #1
0006EEr 3  85 rr        	sta flag
0006F0r 3               
0006F0r 3  4C rr rr     	jmp numdg2
0006F3r 3               num2td:
0006F3r 3  85 rr        	sta z80_d		; Save number
0006F5r 3               
0006F5r 3  A9 01        	lda #1
0006F7r 3  85 rr        	sta flag
0006F9r 3  4C rr rr     	jmp numdg3
0006FCr 3               
0006FCr 3               ;---------------------------------------------------------
0006FCr 3               ; Reset score to "000000"
0006FCr 3               ;---------------------------------------------------------
0006FCr 3               
0006FCr 3               inisc:
0006FCr 3  A9 30        	lda #'0'
0006FEr 3  A2 05        	ldx #5			; digits to initialise.
000700r 3               inisc0:
000700r 3  9D rr rr     	sta score,x 		; write zero digit.
000703r 3  CA           	dex			; next column.
000704r 3  10 FA        	bpl inisc0		; repeat for all digits.
000706r 3               
000706r 3  60           	rts
000707r 3               
000707r 3               ;-----------------------------------------------------
000707r 3               ; Multiply h by d and return in hl.
000707r 3               ;
000707r 3               ; Input:
000707r 3               ;  H = first number
000707r 3               ;  D = second number
000707r 3               ;
000707r 3               ; Output:
000707r 3               ;  HL = result H x D
000707r 3               ;-----------------------------------------------------
000707r 3               
000707r 3               imul:
000707r 3  A5 rr        	lda z80_d		; HL = H * D
000709r 3  85 rr        	sta z80_e
00070Br 3  A5 rr        	lda z80_h
00070Dr 3  85 rr        	sta z80_c		; make c first multiplier.
00070Fr 3               imul0:
00070Fr 3  A9 00        	lda #0			; zeroise total.
000711r 3  85 rr        	sta z80_l
000713r 3  85 rr        	sta z80_h
000715r 3               
000715r 3  A5 rr        	lda z80_h
000717r 3  85 rr        	sta z80_d		; zeroise high byte.
000719r 3               
000719r 3  A9 08        	lda #8			; repeat 8 times.
00071Br 3  85 rr        	sta z80_b
00071Dr 3               imul1:
00071Dr 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
00071Fr 3  90 0E        	bcc imul2		; wasn't set.
000721r 3  18           	clc			; bit was set, so add de.
000722r 3  A5 rr        	lda z80_l
000724r 3  65 rr        	adc z80_e
000726r 3  85 rr        	sta z80_l
000728r 3  A5 rr        	lda z80_h
00072Ar 3  65 rr        	adc z80_d
00072Cr 3  85 rr        	sta z80_h
00072Er 3  18           	clc 			; reset carry.
00072Fr 3               imul2:
00072Fr 3  06 rr        	asl z80_e 		; shift de 1 bit left.
000731r 3  26 rr        	rol z80_d
000733r 3  C6 rr        	dec z80_b
000735r 3  D0 E6        	bne imul1		; repeat 8 times.
000737r 3               
000737r 3  60           	rts
000738r 3               
000738r 3               ;-----------------------------------------------
000738r 3               ; Divide d by e and return in d, remainder in a.
000738r 3               ;
000738r 3               ; Input:
000738r 3               ;  D = first number
000738r 3               ;  E = second number
000738r 3               ;
000738r 3               ; Output:
000738r 3               ;  D = result D/E
000738r 3               ;  A = remainder
000738r 3               ;-----------------------------------------------
000738r 3               
000738r 3               idiv:
000738r 3  A9 00        	lda #0
00073Ar 3  A0 08        	ldy #8		 	; bits to shift.
00073Cr 3  06 rr        	asl z80_d
00073Er 3               idiv0:
00073Er 3  2A           	rol a 			; multiply d by 2.
00073Fr 3  C5 rr        	cmp z80_e 		; test if e is smaller.
000741r 3  90 02        	bcc idiv1		; e is greater, no division this time.
000743r 3  E5 rr        	sbc z80_e		; subtract it.
000745r 3               idiv1:
000745r 3  26 rr        	rol z80_d		; rotate into d.
000747r 3  88           	dey
000748r 3  D0 F4        	bne idiv0		; repeat
00074Ar 3  60           	rts
00074Br 3               
00074Br 3               ;---------------------------------------------------
00074Br 3               ; Play AY sound effect
00074Br 3               ;---------------------------------------------------
00074Br 3               
00074Br 3               plsnd:
00074Br 3  60           	rts
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Objects handling.
00074Cr 3               ; 32 bytes for image
00074Cr 3               ; 1 for colour
00074Cr 3               ; 3 for room, y and x
00074Cr 3               ; 3 for starting room, y and x.
00074Cr 3               ; 254 = disabled.
00074Cr 3               ; 255 = object in player"s pockets.
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Show items present.
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               .if oflag
00074Cr 3               shwob:
00074Cr 3               	lda #<objdta			; objects table.
00074Cr 3               	sta z80_l
00074Cr 3               	lda #>objdta
00074Cr 3               	sta z80_h
00074Cr 3               	lda numob 			; number of objects in the game.
00074Cr 3               	sta sprcnt
00074Cr 3               shwob0:
00074Cr 3               	ldy #33 			; distance to room number.
00074Cr 3               	lda (z80_hl),y 			; same as an item?
00074Cr 3               	cmp scno 			; current location.
00074Cr 3               	bne :+
00074Cr 3               	jsr dobj 			; yes, display object.
00074Cr 3               :
00074Cr 3               	clc
00074Cr 3               	lda z80_l
00074Cr 3               	adc #39 			; distance to next item.
00074Cr 3               	sta z80_l
00074Cr 3               	lda z80_h
00074Cr 3               	adc #0
00074Cr 3               	sta z80_h	 		; point to it.
00074Cr 3               	dec sprcnt
00074Cr 3               	bne shwob0 			; repeat for others.
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Display object.
00074Cr 3               ; hl must point to object's start address.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  HL = object address
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               dobj:
00074Cr 3               	ldy #32
00074Cr 3               	lda (z80_hl),y 			; point to y.
00074Cr 3               	sta objcol
00074Cr 3               	ldy #34
00074Cr 3               	lda (z80_hl),y 			; point to y.
00074Cr 3               	sta dispy
00074Cr 3               	iny
00074Cr 3               	lda (z80_hl),y 			; point to x.
00074Cr 3               	sta dispx
00074Cr 3               dobj1:
00074Cr 3               	jmp sprite 			; draw this sprite.
00074Cr 3               
00074Cr 3               ;--------------------------------------
00074Cr 3               ; Remove an object.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;--------------------------------------
00074Cr 3               
00074Cr 3               remob:
00074Cr 3               	cmp numob			; number of objects in game.
00074Cr 3               	bcc :+				; are we checking past the end?
00074Cr 3               	rts				; yes, can't get non-existent item.
00074Cr 3               :
00074Cr 3               	pha				; remember object.
00074Cr 3               	jsr getob			; pick it up if we haven't already got it.
00074Cr 3               	pla				; retrieve object number.
00074Cr 3               	jsr gotob			; get its address.
00074Cr 3               	lda #254
00074Cr 3               	ldy #33
00074Cr 3               	sta (z80_hl),y			; remove it.
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Pick up object number held in the accumulator.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               getob:
00074Cr 3               	cmp numob 		; number of objects in game.
00074Cr 3               	bcc :+			; are we checking past the end?
00074Cr 3               	rts			; yes, can't get non-existent item.
00074Cr 3               :
00074Cr 3               	jsr gotob 		; check if we already have it.
00074Cr 3               	cmp #255
00074Cr 3               	bne :+
00074Cr 3               	rts			; we already do.
00074Cr 3               :
00074Cr 3               	ldy #33
00074Cr 3               	lda (z80_hl),y		; is it on this screen?
00074Cr 3               	cmp scno 		; current screen.
00074Cr 3               	bne getob0		; not on screen, so nothing to delete.
00074Cr 3               
00074Cr 3               	lda #255
00074Cr 3               	sta (z80_hl),y		; pick it up.
00074Cr 3               	iny 			; point to y coord.
00074Cr 3               getob1:
00074Cr 3               	ldy #34
00074Cr 3               	lda (z80_hl),y		; y coord.
00074Cr 3               	sta dispy
00074Cr 3               	ldy #35
00074Cr 3               	lda (z80_hl),y 		; x coord.
00074Cr 3               	sta dispx
00074Cr 3               	jmp dobj1 		; delete object sprite.
00074Cr 3               getob0:
00074Cr 3               	lda #255
00074Cr 3               	sta (z80_hl),y 		; pick it up.
00074Cr 3               	rts
00074Cr 3               .endif
00074Cr 3               
00074Cr 3               ;-----------------------------------------------------------------
00074Cr 3               ; Got object check.
00074Cr 3               ; Call with object in accumulator, returns zero set if in pockets.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;-----------------------------------------------------------------
00074Cr 3               .if oflag .or mflag
00074Cr 3               gotob:
00074Cr 3               	cmp numob 		; number of objects in game.
00074Cr 3               	bcc :+ 			; are we checking past the end?
00074Cr 3               	jmp gotob0 		; yes, we can't have a non-existent object.
00074Cr 3               :
00074Cr 3               	jsr findob		; find the object.
00074Cr 3               gotob1:
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               gotob0:
00074Cr 3               	lda #254 		; missing.
00074Cr 3               	jmp gotob1
00074Cr 3               
00074Cr 3               findob:
00074Cr 3               	pha			; save object number
00074Cr 3               	lda #<objdta 		; objects.
00074Cr 3               	sta z80_l
00074Cr 3               	lda #>objdta
00074Cr 3               	sta z80_h
00074Cr 3               	pla			; retreive object number
00074Cr 3               	beq fndob1 		; is it zero? yes, skip loop.
00074Cr 3               	tax 			; loop counter
00074Cr 3               fndob2:
00074Cr 3               	clc
00074Cr 3               	lda z80_l
00074Cr 3               	adc #39 		; size of each object.
00074Cr 3               	sta z80_l
00074Cr 3               	bcc :+
00074Cr 3               	inc z80_h
00074Cr 3               :
00074Cr 3               	dex 			; repeat until we find address.
00074Cr 3               	bne fndob2
00074Cr 3               fndob1:
00074Cr 3               	ldy #33			; distance to room it's in.
00074Cr 3               	lda (z80_hl),y		; fetch status.
00074Cr 3               	rts
00074Cr 3               .endif
00074Cr 3               
00074Cr 3               ;---------------------------------------------
00074Cr 3               ; Drop object number at (dispx, dispy).
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;---------------------------------------------
00074Cr 3               
00074Cr 3               .if oflag
00074Cr 3               drpob:
00074Cr 3               	cmp numob 		; are we checking past the end?
00074Cr 3               	bcc :+
00074Cr 3               	rts			; yes, can't drop non-existent item.
00074Cr 3               :
00074Cr 3               	jsr gotob		; make sure object is in inventory.
00074Cr 3               	cmp scno		; already on this screen?
00074Cr 3               	bne :+
00074Cr 3               	rts			; yes, nothing to do.
00074Cr 3               :
00074Cr 3               	ldy #33
00074Cr 3               	lda scno
00074Cr 3               	sta (z80_hl),y		; bring onto screen.
00074Cr 3               	lda dispy		; sprite y coordinate.
00074Cr 3               	iny
00074Cr 3               	sta (z80_hl),y		; point to object y.
00074Cr 3               	lda dispx 		; sprite x coordinate.
00074Cr 3               	iny
00074Cr 3               	sta (z80_hl),y 		; point to object x
00074Cr 3               	jmp dobj		; draw the object sprite.
00074Cr 3               
00074Cr 3               ;-----------------------------------------------
00074Cr 3               ; Seek objects at sprite position.
00074Cr 3               ;
00074Cr 3               ; Output:
00074Cr 3               ;  A = object number, if not found A=255
00074Cr 3               ;-----------------------------------------------
00074Cr 3               
00074Cr 3               skobj:
00074Cr 3               	lda #<objdta 		; pointer to objects.
00074Cr 3               	sta z80_l
00074Cr 3               	lda #>objdta
00074Cr 3               	sta z80_h
00074Cr 3               
00074Cr 3               	lda numob 		; number of objects in game.
00074Cr 3               	sta z80_b 		; set up the loop counter.
00074Cr 3               skobj0:
00074Cr 3               	lda scno		; current room number.
00074Cr 3               	ldy #33
00074Cr 3               	cmp (z80_hl),y		; is object in here?
00074Cr 3               	bne :+
00074Cr 3               	jsr skobj1		; yes, check coordinates.
00074Cr 3               :
00074Cr 3               	clc			; point to next object in table.
00074Cr 3               	lda z80_l
00074Cr 3               	adc #39			; size of each object.
00074Cr 3               	sta z80_l
00074Cr 3               	bcc :+
00074Cr 3               	inc z80_h
00074Cr 3               :
00074Cr 3               	dec z80_b
00074Cr 3               	bne skobj0		; repeat for all objects.
00074Cr 3               
00074Cr 3               	lda #255		; end of list and nothing found, return 255.
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               skobj1:
00074Cr 3               	ldy #34			; point to y coordinate.
00074Cr 3               	lda (z80_hl),y		; point to y coordinate.
00074Cr 3               	sec
00074Cr 3               	ldy #var_newY
00074Cr 3               	sbc (z80_ix),y 		; subtract sprite y.
00074Cr 3               	clc
00074Cr 3               	adc #15			; add sprite height minus one.
00074Cr 3               	cmp #31			; within range?
00074Cr 3               	bcs skobj2		; no, ignore object.
00074Cr 3               
00074Cr 3               	ldy #35			; point to x coordinate now.
00074Cr 3               	lda (z80_hl),y 		; get coordinate.
00074Cr 3               	sec
00074Cr 3               	ldy #var_newX
00074Cr 3               	sbc (z80_ix),y 		; subtract the sprite x.
00074Cr 3               	clc			; add sprite width minus one.
00074Cr 3               	adc #15
00074Cr 3               	cmp #31			; within range?
00074Cr 3               	bcs skobj2		; no, ignore object.
00074Cr 3               
00074Cr 3               	pla			; remove return address from stack.
00074Cr 3               	pla
00074Cr 3               
00074Cr 3               	lda numob 		; objects in game.
00074Cr 3               	sec
00074Cr 3               	sbc z80_b		; subtract loop counter.
00074Cr 3               skobj2:
00074Cr 3               	rts			; accumulator now points to object.
00074Cr 3               .endif
00074Cr 3               
00074Cr 3               ;---------------------------------------------------------------------
00074Cr 3               ; Spawn a new sprite.
00074Cr 3               ;---------------------------------------------------------------------
00074Cr 3               
00074Cr 3               spawn:
00074Cr 3  A9 rr        	lda #<sprtab		; sprite table.
00074Er 3  85 rr        	sta z80_l
000750r 3  A9 rr        	lda #>sprtab
000752r 3  85 rr        	sta z80_h
000754r 3               numsp1:
000754r 3  A9 0C        	lda #NUMSPR		; number of sprites.
000756r 3  85 rr        	sta spcnt
000758r 3               spaw0:
000758r 3  A0 00        	ldy #var_Type
00075Ar 3  B1 rr        	lda (z80_hl),y		; get sprite type.
00075Cr 3  C9 FF        	cmp #255		; is it an unused slot?
00075Er 3  F0 0F        	beq spaw1 		; yes, we can use this one.
000760r 3               
000760r 3  18           	clc 			; point to next sprite in table.
000761r 3  A5 rr        	lda z80_l
000763r 3  69 11        	adc #TABSIZ		; size of each entry.
000765r 3  85 rr        	sta z80_l
000767r 3  90 02        	bcc :+
000769r 3  E6 rr        	inc z80_h
00076Br 3               :
00076Br 3  C6 rr        	dec spcnt		; one less iteration.
00076Dr 3  D0 E9        	bne spaw0		; keep going until we find a slot.
00076Fr 3               
00076Fr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
00076Fr 3               
00076Fr 3               spaw1:
00076Fr 3  A5 rr        	lda z80_i		; address of original sprite.
000771r 3  48           	pha
000772r 3  A5 rr        	lda z80_x
000774r 3  48           	pha
000775r 3               
000775r 3  A5 rr        	lda z80_l		; store spawned sprite address.
000777r 3  85 rr        	sta spptr
000779r 3  A5 rr        	lda z80_h
00077Br 3  85 rr        	sta spptr+1
00077Dr 3               
00077Dr 3  A5 rr        	lda z80_c
00077Fr 3  A0 00        	ldy #var_Type
000781r 3  91 rr        	sta (z80_hl),y 		; set the type.
000783r 3  A0 05        	ldy #var_newType
000785r 3  91 rr        	sta (z80_hl),y		; copy
000787r 3               
000787r 3  A5 rr        	lda z80_b
000789r 3  A0 01        	ldy #var_Image
00078Br 3  91 rr        	sta (z80_hl),y		; set the image.
00078Dr 3  A0 06        	ldy #var_newImage
00078Fr 3  91 rr        	sta (z80_hl),y		; copy
000791r 3               
000791r 3  A9 00        	lda #0 				; frame zero.
000793r 3  A0 02        	ldy #var_Frame
000795r 3  91 rr        	sta (z80_hl),y		; set frame.
000797r 3  A0 07        	ldy #var_newFrame
000799r 3  91 rr        	sta (z80_hl),y		; copy
00079Br 3               
00079Br 3  A0 08        	ldy #8
00079Dr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00079Fr 3  A0 03        	ldy #3
0007A1r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0007A3r 3  A0 08        	ldy #8
0007A5r 3  91 rr        	sta (z80_hl),y		; copy
0007A7r 3               
0007A7r 3  A0 09        	ldy #9
0007A9r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0007ABr 3  A0 04        	ldy #4
0007ADr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0007AFr 3  A0 09        	ldy #9
0007B1r 3  91 rr        	sta (z80_hl),y		; copy
0007B3r 3               
0007B3r 3  A0 0A        	ldy #10				; direction of original.
0007B5r 3  B1 rr        	lda (z80_ix),y
0007B7r 3  91 rr        	sta (z80_hl),y		; direction
0007B9r 3               
0007B9r 3  A9 00        	lda #0
0007BBr 3  A0 0D        	ldy #var_jumpLo
0007BDr 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007BFr 3  C8           	iny
0007C0r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007C2r 3  C8           	iny
0007C3r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007C5r 3  C8           	iny
0007C6r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007C8r 3               rtssp:
0007C8r 3  A5 rr        	lda spptr			; address of new sprite.
0007CAr 3  85 rr        	sta z80_x
0007CCr 3  A5 rr        	lda spptr+1
0007CEr 3  85 rr        	sta z80_i
0007D0r 3               evis1:
0007D0r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
0007D3r 3               
0007D3r 3  A5 rr        	lda spptr 			; address of new sprite.
0007D5r 3  85 rr        	sta z80_x
0007D7r 3  A5 rr        	lda spptr+1
0007D9r 3  85 rr        	sta z80_i
0007DBr 3               
0007DBr 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
0007DBr 3  A0 03        	ldy #var_Y
0007DDr 3  B1 rr        	lda (z80_hl), y		; old x coord
0007DFr 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
0007E1r 3  B0 03        	bcs :+				; yes, don't draw it.
0007E3r 3               
0007E3r 3  20 rr rr     	jsr sspria 			; display the new sprite.
0007E6r 3               :
0007E6r 3  68           	pla					; address of original sprite.
0007E7r 3  85 rr        	sta z80_x
0007E9r 3  68           	pla
0007EAr 3  85 rr        	sta z80_i
0007ECr 3               
0007ECr 3  60           	rts
0007EDr 3               
0007EDr 3  30 30 30 30  score:	.byte "000000"		; player"s score.
0007F1r 3  30 30        
0007F3r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0007F7r 3  30 30        
0007F9r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0007FDr 3  30 30        
0007FFr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000801r 3               
000801r 3               ;----------------------------------------------------
000801r 3               ; Check y-pos
000801r 3               ;----------------------------------------------------
000801r 3               
000801r 3               checkx:
000801r 3  A5 rr        	lda dispy		; y position.
000803r 3  C9 16        	cmp #22			; off screen?
000805r 3  B0 01        	bcs :+
000807r 3  60           	rts			; no, it's okay.
000808r 3               :
000808r 3  68           	pla			; remove return address from stack.
000809r 3  85 rr        	sta z80_l
00080Br 3  68           	pla
00080Cr 3  85 rr        	sta z80_h
00080Er 3  60           	rts
00080Fr 3               
00080Fr 3               ;-----------------------------------------------
00080Fr 3               ; Displays the current high score.
00080Fr 3               ;-----------------------------------------------
00080Fr 3               
00080Fr 3               dhisc:
00080Fr 3  A9 rr        	lda #<hiscor 		; high score text.
000811r 3  8D rr rr     	sta dscor3+1
000814r 3  8D rr rr     	sta bscor3+1
000817r 3  A9 rr        	lda #>hiscor
000819r 3  8D rr rr     	sta dscor3+2
00081Cr 3  8D rr rr     	sta bscor3+2
00081Fr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000822r 3               
000822r 3               ;------------------------------------------------------
000822r 3               ; Displays the current score.
000822r 3               ;------------------------------------------------------
000822r 3               
000822r 3               dscor:
000822r 3  A9 rr        	lda #<score		; score text.
000824r 3  8D rr rr     	sta dscor3+1
000827r 3  8D rr rr     	sta bscor3+1
00082Ar 3  A9 rr        	lda #>score
00082Cr 3  8D rr rr     	sta dscor3+2
00082Fr 3  8D rr rr     	sta bscor3+2
000832r 3               dscor1:
000832r 3  8C rr rr     	sty tmpscr
000835r 3  20 rr rr     	jsr preprt		; set up font and print position.
000838r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
00083Br 3               
00083Br 3               ;	lda #6			; digits to display.
00083Br 3               ;	sta z80_b
00083Br 3  A5 rr        	lda prtmod		; get print mode.
00083Dr 3  F0 03        	beq :+			; standard size text?
00083Fr 3  4C rr rr     	jmp bscor0		; no, show double-height.
000842r 3               :
000842r 3               dscor0:
000842r 3               ;	ldy #0
000842r 3               ;	lda (z80_hl),y 		; fetch character.
000842r 3  AC rr rr     	ldy tmpscr
000845r 3               dscor3:
000845r 3  B9 rr rr     	lda score,y
000848r 3  20 rr rr     	jsr pchar 		; display character.
00084Br 3  E6 rr        	inc dispx		; move along x coordinate
00084Dr 3               
00084Dr 3               ;	inc z80_l		; next score column.
00084Dr 3               ;	bne :+
00084Dr 3               ;	inc z80_h
00084Dr 3               ;:
00084Dr 3  EE rr rr     	inc tmpscr
000850r 3  C6 rr        	dec z80_b
000852r 3  D0 EE        	bne dscor0 		; repeat for all digits.
000854r 3               dscor2:
000854r 3  A5 rr        	lda dispx 		; set up display coordinates.
000856r 3  85 rr        	sta charx
000858r 3  A5 rr        	lda dispy
00085Ar 3  85 rr        	sta chary
00085Cr 3  60           	rts
00085Dr 3               
00085Dr 3  00           tmpscr:	.byte 0
00085Er 3               ;------------------------------------------------------
00085Er 3               ; Displays the current score in double-height characters.
00085Er 3               ;
00085Er 3               ; Input:
00085Er 3               ;  B  = digit number
00085Er 3               ;  HL = score string
00085Er 3               ;------------------------------------------------------
00085Er 3               
00085Er 3               bscor0:
00085Er 3               ;	ldy #0
00085Er 3               
00085Er 3               ;	lda (z80_hl),y 		; fetch character.
00085Er 3  A4 rr        	ldy tmp
000860r 3               bscor3:
000860r 3  B9 rr rr     	lda score,y
000863r 3  20 rr rr     	jsr bchar 		; display big char.
000866r 3               
000866r 3               ;	inc z80_l 		; next score column.
000866r 3               ;	bne :+
000866r 3               ;	inc z80_h
000866r 3               ;:
000866r 3  E6 rr        	inc tmp
000868r 3  C6 rr        	dec z80_b
00086Ar 3  F0 03        	beq :+
00086Cr 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
00086Fr 3               :
00086Fr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
000872r 3               
000872r 3               ;-----------------------------------------------------
000872r 3               ; Adds number in the hl pair to the score.
000872r 3               ;-----------------------------------------------------
000872r 3               
000872r 3               addsc:
000872r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000874r 3  85 rr        	sta z80_e
000876r 3  A9 rr        	lda #>(score+1)
000878r 3  85 rr        	sta z80_d
00087Ar 3  A9 10        	lda #<10000		; amount to add each time.
00087Cr 3  85 rr        	sta z80_c
00087Er 3  A9 27        	lda #>10000
000880r 3  85 rr        	sta z80_b
000882r 3  20 rr rr     	jsr incsc		; add to score.
000885r 3               
000885r 3  E6 rr        	inc z80_e		; thousands column.
000887r 3  D0 02        	bne :+
000889r 3  E6 rr        	inc z80_d
00088Br 3               :
00088Br 3  A9 E8        	lda #<1000		; amount to add each time.
00088Dr 3  85 rr        	sta z80_c
00088Fr 3  A9 03        	lda #>1000
000891r 3  85 rr        	sta z80_b
000893r 3  20 rr rr     	jsr incsc 		; add to score.
000896r 3               
000896r 3  E6 rr        	inc z80_e		; hundreds column.
000898r 3  D0 02        	bne :+
00089Ar 3  E6 rr        	inc z80_d
00089Cr 3               :
00089Cr 3  A9 64        	lda #<100		; amount to add each time.
00089Er 3  85 rr        	sta z80_c
0008A0r 3  A9 00        	lda #>100
0008A2r 3  85 rr        	sta z80_b
0008A4r 3  20 rr rr     	jsr incsc		; add to score.
0008A7r 3               
0008A7r 3  E6 rr        	inc z80_e 		; tens column.
0008A9r 3  D0 02        	bne :+
0008ABr 3  E6 rr        	inc z80_d
0008ADr 3               :
0008ADr 3  A9 0A        	lda #<10		; amount to add each time.
0008AFr 3  85 rr        	sta z80_c
0008B1r 3  A9 00        	lda #>10
0008B3r 3  85 rr        	sta z80_b
0008B5r 3  20 rr rr     	jsr incsc 		; add to score.
0008B8r 3               
0008B8r 3  E6 rr        	inc z80_e		; units column.
0008BAr 3  D0 02        	bne :+
0008BCr 3  E6 rr        	inc z80_d
0008BEr 3               :
0008BEr 3  A9 01        	lda #<1			; units.
0008C0r 3  85 rr        	sta z80_c
0008C2r 3  A9 00        	lda #>1
0008C4r 3  85 rr        	sta z80_b
0008C6r 3               incsc:
0008C6r 3  A5 rr        	lda z80_h		; store amount to add.
0008C8r 3  48           	pha
0008C9r 3  A5 rr        	lda z80_l
0008CBr 3  48           	pha
0008CCr 3               
0008CCr 3  38           	sec			; subtract from amount to add.
0008CDr 3  A5 rr        	lda z80_l
0008CFr 3  E5 rr        	sbc z80_c
0008D1r 3  85 rr        	sta z80_l
0008D3r 3  A5 rr        	lda z80_h
0008D5r 3  E5 rr        	sbc z80_b
0008D7r 3  85 rr        	sta z80_h
0008D9r 3  90 14        	bcc incsc0		; too much, restore value.
0008DBr 3               
0008DBr 3  68           	pla			; delete the previous amount from the stack.
0008DCr 3  68           	pla
0008DDr 3               
0008DDr 3  A5 rr        	lda z80_d 		; store column position.
0008DFr 3  48           	pha
0008E0r 3  A5 rr        	lda z80_e
0008E2r 3  48           	pha
0008E3r 3  20 rr rr     	jsr incsc2		; do the increment.
0008E6r 3               
0008E6r 3  68           	pla			; restore column.
0008E7r 3  85 rr        	sta z80_e
0008E9r 3  68           	pla
0008EAr 3  85 rr        	sta z80_d
0008ECr 3  4C rr rr     	jmp incsc		; repeat until all added.
0008EFr 3               
0008EFr 3               incsc0:
0008EFr 3  68           	pla			; restore previous value.
0008F0r 3  85 rr        	sta z80_l
0008F2r 3  68           	pla
0008F3r 3  85 rr        	sta z80_h
0008F5r 3  60           	rts
0008F6r 3               incsc2:
0008F6r 3  A0 00        	ldy #0
0008F8r 3  B1 rr        	lda (z80_de),y 		; get amount.
0008FAr 3  18           	clc
0008FBr 3  69 01        	adc #1			; add one to column.
0008FDr 3  91 rr        	sta (z80_de),y		; write new column total.
0008FFr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000901r 3  B0 01        	bcs :+
000903r 3  60           	rts			; no, carry on.
000904r 3               :
000904r 3  A9 30        	lda #'0'		; make it zero.
000906r 3  91 rr        	sta (z80_de),y		; write new column total.
000908r 3  C6 rr        	dec z80_e		; back one column.
00090Ar 3  D0 02        	bne :+
00090Cr 3  C6 rr        	dec z80_d
00090Er 3               :
00090Er 3  4C rr rr     	jmp incsc2
000911r 3               
000911r 3               ;------------------------------------
000911r 3               ; Add bonus to score and reset bonus
000911r 3               ;------------------------------------
000911r 3               
000911r 3               addbo:
000911r 3  A2 05        	ldx #5			; last digit.
000913r 3  18           	clc
000914r 3               addbo0:
000914r 3  BD rr rr     	lda score,x		; get score.
000917r 3  7D rr rr     	adc bonus,x		; add bonus.
00091Ar 3  38           	sec			; 0 to 18.
00091Br 3  E9 30        	sbc #48
00091Dr 3  48           	pha
00091Er 3  A9 30        	lda #'0'
000920r 3  9D rr rr     	sta bonus,x
000923r 3  68           	pla
000924r 3  C9 3A        	cmp #58
000926r 3  90 03        	bcc addbo1
000928r 3  38           	sec
000929r 3  E9 0A        	sbc #10
00092Br 3               addbo1:
00092Br 3  9D rr rr     	sta score,x		; zeroise bonus.
00092Er 3  CA           	dex			; next digit.
00092Fr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000931r 3  60           	rts
000932r 3               
000932r 3               ;------------------------------------
000932r 3               ; Swap score and bonus.
000932r 3               ;------------------------------------
000932r 3               
000932r 3               swpsb:
000932r 3  A2 05        	ldx #5			; digits to add.
000934r 3               swpsb0:
000934r 3  BD rr rr     	lda score,x 		; get score digits.
000937r 3  48           	pha			; save digit
000938r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
00093Br 3  9D rr rr     	sta score,x		; switch score-bonus
00093Er 3  68           	pla
00093Fr 3  9D rr rr     	sta bonus,x
000942r 3  CA           	dex 			; repeat for all 6 digits.
000943r 3  10 EF        	bpl swpsb0
000945r 3  60           	rts
000946r 3               
000946r 3               ;----------------------------------------------------
000946r 3               ; Get print address.
000946r 3               ;----------------------------------------------------
000946r 3               
000946r 3               gprad:
000946r 3  98           	tya
000947r 3  48           	pha
000948r 3               
000948r 3  A5 rr        	lda dispx 		; x coordinate.
00094Ar 3  85 rr        	sta scraddr
00094Cr 3  A9 00        	lda #0
00094Er 3  85 rr        	sta scraddr+1
000950r 3  06 rr        	asl scraddr  		; multiply char by 16
000952r 3  26 rr        	rol scraddr+1
000954r 3  06 rr        	asl scraddr
000956r 3  26 rr        	rol scraddr+1
000958r 3  06 rr        	asl scraddr
00095Ar 3  26 rr        	rol scraddr+1
00095Cr 3  06 rr        	asl scraddr
00095Er 3  26 rr        	rol scraddr+1
000960r 3               
000960r 3  A5 rr        	lda dispy		; y coordinate.
000962r 3  0A           	asl a
000963r 3  0A           	asl a
000964r 3  0A           	asl a			; multiply char by 8
000965r 3               ;	asl a
000965r 3  A8           	tay
000966r 3               
000966r 3  18           	clc
000967r 3  A5 rr        	lda scraddr
000969r 3  79 00 07     	adc SCADTB_lb,y
00096Cr 3  85 rr        	sta scraddr
00096Er 3  A5 rr        	lda scraddr+1
000970r 3  79 00 08     	adc SCADTB_hb,y
000973r 3  85 rr        	sta scraddr+1
000975r 3               
000975r 3               
000975r 3               
000975r 3  A5 rr        	lda prtmod		; Double line if bigtxt
000977r 3  F0 08        	beq noskip
000979r 3  A5 rr        	lda dispx
00097Br 3  29 E0        	and #$e0
00097Dr 3  F0 02        	beq noskip
00097Fr 3  E6 rr        	inc scraddr+1
000981r 3               noskip:
000981r 3               
000981r 3  68           	pla
000982r 3  A8           	tay
000983r 3  60           	rts
000984r 3               ;--------------------------------------------------------------
000984r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000984r 3               ;
000984r 3               ; Output:
000984r 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
000984r 3               ;--------------------------------------------------------------
000984r 3               
000984r 3               pradd:
000984r 3  A5 rr        	lda dispy 		; y coordinate.
000986r 3  85 rr        	sta bufaddr
000988r 3  A9 00        	lda #0
00098Ar 3  85 rr        	sta bufaddr+1
00098Cr 3  06 rr        	asl bufaddr  		; multiply char by 32
00098Er 3  26 rr        	rol bufaddr+1
000990r 3  06 rr        	asl bufaddr
000992r 3  26 rr        	rol bufaddr+1
000994r 3  06 rr        	asl bufaddr
000996r 3  26 rr        	rol bufaddr+1
000998r 3  06 rr        	asl bufaddr
00099Ar 3  26 rr        	rol bufaddr+1
00099Cr 3  06 rr        	asl bufaddr
00099Er 3  26 rr        	rol bufaddr+1
0009A0r 3  18           	clc			; add address of MAP graphics.
0009A1r 3  A5 rr        	lda bufaddr
0009A3r 3  65 rr        	adc dispx
0009A5r 3  69 00        	adc #<MAP
0009A7r 3  85 rr        	sta bufaddr
0009A9r 3  A5 rr        	lda bufaddr+1
0009ABr 3  69 04        	adc #>MAP
0009ADr 3  85 rr        	sta bufaddr+1
0009AFr 3  60           	rts
0009B0r 3               
0009B0r 3               ;--------------------------------------------------------------
0009B0r 3               ; Get attribute address at (dispx, dispy).
0009B0r 3               ;
0009B0r 3               ; Output:
0009B0r 3               ;  bufaddr = COLOR + dispy*22 + dispx
0009B0r 3               ;--------------------------------------------------------------
0009B0r 3               
0009B0r 3               gaadd:
0009B0r 3  A5 rr        	lda dispy
0009B2r 3  4A           	lsr a
0009B3r 3  A8           	tay
0009B4r 3  B9 55 0A     	lda COLATTTB_hb,y
0009B7r 3  85 rr        	sta bufaddr+1
0009B9r 3  B9 4A 0A     	lda COLATTTB_lb,y
0009BCr 3  18           	clc
0009BDr 3  65 rr        	adc dispx
0009BFr 3  85 rr        	sta bufaddr
0009C1r 3  60           	rts
0009C2r 3               
0009C2r 3               ;----------------------------------------------
0009C2r 3               ; Print attributes, properties and pixels.
0009C2r 3               ;
0009C2r 3               ; Input:
0009C2r 3               ;  A	= tile number
0009C2r 3               ;----------------------------------------------
0009C2r 3               
0009C2r 3               pbpattr:			; entry PUTBLOCK command
0009C2r 3  A4 rr        	ldy charx
0009C4r 3  84 rr        	sty dispx
0009C6r 3  A4 rr        	ldy chary
0009C8r 3  84 rr        	sty dispy
0009CAr 3               pattr:
0009CAr 3               .if aflag
0009CAr 3               	pha
0009CAr 3               	jsr wbloc		; save blockinfo
0009CAr 3               	pla
0009CAr 3               .endif
0009CAr 3               
0009CAr 3               pattr2:
0009CAr 3  85 rr        	sta z80_b		; store cell in b register for now.
0009CCr 3  AA           	tax
0009CDr 3  BD rr rr     	lda bprop,x 		; block properties.
0009D0r 3  85 rr        	sta z80_c
0009D2r 3  C9 08        	cmp #COLECT
0009D4r 3  D0 04        	bne :+
0009D6r 3  A5 rr        	lda z80_b
0009D8r 3  85 rr        	sta colpatt
0009DAr 3               :
0009DAr 3  20 rr rr     	jsr pradd 		; get property buffer address.
0009DDr 3  A5 rr        	lda z80_c
0009DFr 3  A0 00        	ldy #0
0009E1r 3  91 rr        	sta (bufaddr),y 	; write property.
0009E3r 3  A5 rr        	lda z80_b 		; restore cell.
0009E5r 3  4C rr rr     	jmp panp
0009E8r 3               ; Print attributes, no properties.
0009E8r 3               
0009E8r 3               ;colpatt:	.byte 0
0009E8r 3               
0009E8r 3               panp:
0009E8r 3  85 rr        	sta z80_e		; displacement in e.
0009EAr 3  A9 00        	lda #0
0009ECr 3  85 rr        	sta z80_d		; no high byte.
0009EEr 3  06 rr        	asl z80_e  		; multiply char by 8.
0009F0r 3  26 rr        	rol z80_d
0009F2r 3  06 rr        	asl z80_e
0009F4r 3  26 rr        	rol z80_d
0009F6r 3  06 rr        	asl z80_e
0009F8r 3  26 rr        	rol z80_d
0009FAr 3  18           	clc
0009FBr 3  A5 rr        	lda z80_e
0009FDr 3  69 rr        	adc #<chgfx 		; address of graphics.
0009FFr 3  85 rr        	sta tileaddr
000A01r 3  A5 rr        	lda z80_d
000A03r 3  69 rr        	adc #>chgfx
000A05r 3  85 rr        	sta tileaddr+1
000A07r 3               
000A07r 3  A6 rr        	ldx z80_b		; set colour attribute
000A09r 3  BD rr rr     	lda bCol,x
000A0Cr 3  48           	pha
000A0Dr 3  20 rr rr     	jsr gaadd
000A10r 3  A0 00        	ldy #0
000A12r 3  68           	pla
000A13r 3  91 rr        	sta (bufaddr),y
000A15r 3               
000A15r 3  20 rr rr     	jsr gprad 		; get screen address.
000A18r 3  A2 07        	ldx #7			; number of pixel rows to write.
000A1Ar 3               panp0:
000A1Ar 3  A0 00        	ldy #0
000A1Cr 3  B1 rr        	lda (tileaddr),y 	; get image byte.
000A1Er 3               .if iflag
000A1Er 3               	eor #$ff		; Invert
000A1Er 3               .endif
000A1Er 3  BC rr rr     	ldy scrtab,x
000A21r 3  91 rr        	sta (scraddr),y 	; copy to screen.
000A23r 3  E6 rr        	inc tileaddr 		; next image byte.
000A25r 3  D0 02        	bne :+
000A27r 3  E6 rr        	inc tileaddr+1
000A29r 3               :
000A29r 3  CA           	dex	 		; repeat for 8 pixel rows.
000A2Ar 3  10 EE        	bpl panp0
000A2Cr 3  E6 rr        	inc dispx 		; move along one.
000A2Er 3  E6 rr        	inc charx
000A30r 3  60           	rts
000A31r 3               
000A31r 3               ;----------------------------------------------
000A31r 3               ; Write block
000A31r 3               ;----------------------------------------------
000A31r 3               
000A31r 3               .if aflag
000A31r 3               wbloc:
000A31r 3               	ldy #3
000A31r 3               	sta (pbptr),y		; store block number
000A31r 3               	dey
000A31r 3               	lda dispx
000A31r 3               	sta (pbptr),y		; write x position of block.
000A31r 3               	dey
000A31r 3               	lda dispy
000A31r 3               	sta (pbptr),y		; write y position of block.
000A31r 3               	dey
000A31r 3               	lda scno
000A31r 3               	sta (pbptr),y		; write screen.
000A31r 3               	clc			; point to next free location
000A31r 3               	lda pbptr
000A31r 3               	adc #4
000A31r 3               	sta pbptr
000A31r 3               	bcc :+
000A31r 3               	inc pbptr+1
000A31r 3               :
000A31r 3               	rts
000A31r 3               .endif
000A31r 3               
000A31r 3               ;.if kflag
000A31r 3               ;panp:
000A31r 3               ;.endif
000A31r 3               
000A31r 3               ;----------------------------------------------
000A31r 3               ; Print character pixels, no more.
000A31r 3               ;
000A31r 3               ; Input:
000A31r 3               ;  A	= character to print
000A31r 3               ;----------------------------------------------
000A31r 3               
000A31r 3               pchr:
000A31r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000A34r 3  E6 rr        	inc dispx		; move along one.
000A36r 3  60           	rts
000A37r 3               
000A37r 3               ;----------------------------------------------------
000A37r 3               ; Shifter sprite routine for objects.
000A37r 3               ;----------------------------------------------------
000A37r 3               
000A37r 3               .if oflag
000A37r 3               sprit7:
000A37r 3               	lda z80_b
000A37r 3               	beq sprit0
000A37r 3               	sta z80_a
000A37r 3               sprit3:
000A37r 3               	lsr spr			; shift into position.
000A37r 3               	ror spr+1
000A37r 3               	ror spr+2
000A37r 3               	dec z80_a		; one less iteration.
000A37r 3               	bne sprit3
000A37r 3               sprit0:
000A37r 3               	rts 			; now apply to screen.
000A37r 3               .endif
000A37r 3               
000A37r 3               ;-----------------------------------------------------------
000A37r 3               ; Get room address.
000A37r 3               ;-----------------------------------------------------------
000A37r 3               
000A37r 3               groom:
000A37r 3  A6 rr        	ldx scno 		; screen number.
000A39r 3  A0 00        	ldy #0
000A3Br 3               groomx:
000A3Br 3  A9 rr        	lda #<scdat 		; pointer to screens.
000A3Dr 3  85 rr        	sta z80_l
000A3Fr 3  A9 rr        	lda #>scdat
000A41r 3  85 rr        	sta z80_h
000A43r 3               groom1:
000A43r 3  E0 00        	cpx #0			; is it the first one?
000A45r 3  F0 15        	beq groom0 		; no more screens to skip.
000A47r 3               
000A47r 3  18           	clc
000A48r 3  A5 rr        	lda z80_l
000A4Ar 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
000A4Dr 3  85 rr        	sta z80_l
000A4Fr 3  C8           	iny			; point to high byte.
000A50r 3  A5 rr        	lda z80_h
000A52r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000A55r 3  85 rr        	sta z80_h
000A57r 3  C8           	iny			; next address.
000A58r 3               
000A58r 3  CA           	dex 			; one less iteration.
000A59r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000A5Cr 3               groom0:
000A5Cr 3  AD rr rr     	lda numsc		; add displacement.
000A5Fr 3  0A           	asl a
000A60r 3  18           	clc			; add double displacement to address.
000A61r 3  65 rr        	adc z80_l
000A63r 3  85 rr        	sta z80_l
000A65r 3  A5 rr        	lda z80_h
000A67r 3  69 00        	adc #0
000A69r 3  85 rr        	sta z80_h
000A6Br 3  60           	rts
000A6Cr 3               
000A6Cr 3               ;-----------------------------------------------------------
000A6Cr 3               ; Draw present room.
000A6Cr 3               ;-----------------------------------------------------------
000A6Cr 3               
000A6Cr 3               droom:
000A6Cr 3  AD rr rr     	lda wintop 		; window top.
000A6Fr 3  85 rr        	sta dispy		; set cursor y position.
000A71r 3               droom2:
000A71r 3  20 rr rr     	jsr groom 		; get address of current room.
000A74r 3  A9 00        	lda #0	 		; zero in accumulator.
000A76r 3  85 rr        	sta comcnt 		; reset compression counter.
000A78r 3  AD rr rr     	lda winhgt 		; height of window.
000A7Br 3  85 rr        	sta rrow		; set row counter
000A7Dr 3               droom0:
000A7Dr 3  AD rr rr     	lda winlft 		; window left edge.
000A80r 3  85 rr        	sta dispx 		; set cursor x position.
000A82r 3  AD rr rr     	lda winwid 		; width of window.
000A85r 3  85 rr        	sta rcol		; set column counter
000A87r 3               droom1:
000A87r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000A8Ar 3               .if xflag
000A8Ar 3               	jsr drwmeta
000A8Ar 3               .else
000A8Ar 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000A8Dr 3               .endif
000A8Dr 3  C6 rr        	dec rcol		; one less column.
000A8Fr 3  D0 F6        	bne droom1 		; repeat for entire line.
000A91r 3  E6 rr        	inc dispy		; move down one line.
000A93r 3               .if xflag
000A93r 3               	inc dispy		; move down one line.
000A93r 3               .endif
000A93r 3  C6 rr        	dec rrow 		; one less row.
000A95r 3  D0 E6        	bne droom0 		; repeat for all rows.
000A97r 3  60           	rts
000A98r 3               
000A98r 3               ;----------------------------------------------
000A98r 3               ; Decompress bytes on-the-fly.
000A98r 3               ;----------------------------------------------
000A98r 3               
000A98r 3               flbyt:
000A98r 3  A5 rr        	lda comcnt 		; compression counter.
000A9Ar 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000A9Cr 3               
000A9Cr 3  A0 00        	ldy #0
000A9Er 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000AA0r 3  E6 rr        	inc z80_l 		; point to next cell.
000AA2r 3  D0 02        	bne :+
000AA4r 3  E6 rr        	inc z80_h
000AA6r 3               :
000AA6r 3  C9 FF        	cmp #255 		; is this byte a control code?
000AA8r 3  F0 01        	beq :+
000AAAr 3  60           	rts 			; no, this byte is uncompressed.
000AABr 3               :
000AABr 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000AADr 3  85 rr        	sta combyt 		; set up the type.
000AAFr 3  E6 rr        	inc z80_l 		; point to quantity.
000AB1r 3  D0 02        	bne :+
000AB3r 3  E6 rr        	inc z80_h
000AB5r 3               :
000AB5r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000AB7r 3  E6 rr        	inc z80_l 		; point to next byte.
000AB9r 3  D0 02        	bne :+
000ABBr 3  E6 rr        	inc z80_h
000ABDr 3               :
000ABDr 3               flbyt1:
000ABDr 3  85 rr        	sta comcnt 		; store new quantity.
000ABFr 3  C6 rr        	dec comcnt		; one less.
000AC1r 3  A5 rr        	lda combyt 		; byte to expand.
000AC3r 3  60           	rts
000AC4r 3               
000AC4r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000AC4r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000AC4r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000AC4r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000AC4r 3               .if xflag
000AC4r 3               drwmeta:
000AC4r 3               	sta tmpblk
000AC4r 3               	jsr pattr2
000AC4r 3               
000AC4r 3               	inc dispy
000AC4r 3               	dec dispx
000AC4r 3               	ldx tmpblk
000AC4r 3               	beq :+
000AC4r 3               	inx
000AC4r 3               :
000AC4r 3               	txa
000AC4r 3               	jsr pattr2
000AC4r 3               
000AC4r 3               	ldx tmpblk
000AC4r 3               	beq :+
000AC4r 3               	inx
000AC4r 3               	inx
000AC4r 3               	inx
000AC4r 3               :
000AC4r 3               	txa
000AC4r 3               	jsr pattr2
000AC4r 3               
000AC4r 3               	dec dispy
000AC4r 3               	dec dispx
000AC4r 3               	ldx tmpblk
000AC4r 3               	beq :+
000AC4r 3               	inx
000AC4r 3               	inx
000AC4r 3               :
000AC4r 3               	txa
000AC4r 3               	jsr pattr2
000AC4r 3               	rts
000AC4r 3               
000AC4r 3               tmpblk:	.byte 0
000AC4r 3               
000AC4r 3               .endif
000AC4r 3               
000AC4r 3               ;------------------------------------------
000AC4r 3               ; Ladder down check.
000AC4r 3               ;
000AC4r 3               ; Input:
000AC4r 3               ;  IX = sprite pointer
000AC4r 3               ;------------------------------------------
000AC4r 3               
000AC4r 3               .if lflag
000AC4r 3               laddd:
000AC4r 3               	ldy #9
000AC4r 3               	lda (z80_ix),y		; x coordinate.
000AC4r 3               	sta dispx
000AC4r 3               
000AC4r 3               	ldy #8
000AC4r 3               	lda (z80_ix),y		; y coordinate.
000AC4r 3               	and #254		; make it even.
000AC4r 3               	sta (z80_ix),y 		; reset it.
000AC4r 3               	clc 			; look down 16 pixels.
000AC4r 3               numsp5:
000AC4r 3               	adc #SPR_HGT
000AC4r 3               	sta dispy		; coords in dispx,dispy.
000AC4r 3               	jmp laddv
000AC4r 3               
000AC4r 3               ;------------------------------------------
000AC4r 3               ; Ladder up check.
000AC4r 3               ;
000AC4r 3               ; Input:
000AC4r 3               ;  IX = sprite pointer
000AC4r 3               ;
000AC4r 3               ; Output:
000AC4r 3               ;  A  = 0 is ok, A <>0 is not ok
000AC4r 3               ;------------------------------------------
000AC4r 3               
000AC4r 3               laddu:
000AC4r 3               	ldy #9
000AC4r 3               	lda (z80_ix),y		; x coordinate.
000AC4r 3               	sta dispx
000AC4r 3               
000AC4r 3               	ldy #8
000AC4r 3               	lda (z80_ix),y		; y coordinate.
000AC4r 3               	and #254 		; make it even.
000AC4r 3               	sta (z80_ix),y		; reset it.
000AC4r 3               	clc 			; look 2 pixels above feet.
000AC4r 3               numsp6:
000AC4r 3               	adc #SPR_HGT-2
000AC4r 3               	sta dispy		; coords in dispx,dispy.
000AC4r 3               laddv:
000AC4r 3               	jsr tstbl 		; get map address.
000AC4r 3               	jsr ldchk 		; standard ladder check.
000AC4r 3               	beq :+
000AC4r 3               	rts 			; no way through.
000AC4r 3               :
000AC4r 3               	inc bufaddr 		; look right one cell.
000AC4r 3               	bne :+
000AC4r 3               	inc bufaddr+1
000AC4r 3               :
000AC4r 3               	jsr ldchk 		; do the check.
000AC4r 3               	beq :+
000AC4r 3               	rts 			; impassable.
000AC4r 3               :
000AC4r 3               	lda dispx 		; y coordinate.
000AC4r 3               	and #7 			; position straddling block cells.
000AC4r 3               	bne :+
000AC4r 3               	rts 			; no more checks needed.
000AC4r 3               :
000AC4r 3               	inc bufaddr 		; look to third cell.
000AC4r 3               	bne :+
000AC4r 3               	inc bufaddr+1
000AC4r 3               :
000AC4r 3               	jsr ldchk 		; do the check.
000AC4r 3               	rts  			; return with zero flag set accordingly.
000AC4r 3               .endif
000AC4r 3               
000AC4r 3               ;---------------------------------------------------------
000AC4r 3               ; Can go up check.
000AC4r 3               ;
000AC4r 3               ; Input:
000AC4r 3               ;  IX = sprite pointer
000AC4r 3               ;
000AC4r 3               ; Output:
000AC4r 3               ;  A  = 0 is ok, A <>0 is not ok
000AC4r 3               ;---------------------------------------------------------
000AC4r 3               
000AC4r 3               cangu:
000AC4r 3  A0 09        	ldy #9
000AC6r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000AC8r 3  85 rr        	sta dispx
000ACAr 3  A0 08        	ldy #8
000ACCr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000ACEr 3  38           	sec
000ACFr 3  E9 02        	sbc #2
000AD1r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000AD3r 3  20 rr rr     	jsr tstbl 		; get map address.
000AD6r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000AD9r 3  F0 01        	beq :+
000ADBr 3  60           	rts			; no way through.
000ADCr 3               :
000ADCr 3  E6 rr        	inc bufaddr		; look right one cell.
000ADEr 3  D0 02        	bne :+
000AE0r 3  E6 rr        	inc bufaddr+1
000AE2r 3               :
000AE2r 3  20 rr rr     	jsr lrchk 		; do the check.
000AE5r 3  F0 01        	beq :+
000AE7r 3  60           	rts			; impassable.
000AE8r 3               :
000AE8r 3  A5 rr        	lda dispx		; x coordinate.
000AEAr 3  29 07        	and #7			; position straddling block cells.
000AECr 3  D0 01        	bne :+
000AEEr 3  60           	rts			; no more checks needed.
000AEFr 3               :
000AEFr 3  E6 rr        	inc bufaddr		; look to third cell.
000AF1r 3  D0 02        	bne :+
000AF3r 3  E6 rr        	inc bufaddr+1
000AF5r 3               :
000AF5r 3  20 rr rr     	jsr lrchk		; do the check.
000AF8r 3  60           	rts 			; return with zero flag set accordingly.
000AF9r 3               
000AF9r 3               ;---------------------------------------------------------
000AF9r 3               ; Can go down check.
000AF9r 3               ;
000AF9r 3               ; Input:
000AF9r 3               ;  IX = sprite pointer
000AF9r 3               ;
000AF9r 3               ; Output:
000AF9r 3               ;  A  = 0 is ok, A <>0 is not ok
000AF9r 3               ;---------------------------------------------------------
000AF9r 3               
000AF9r 3               cangd:
000AF9r 3  A0 09        	ldy #9
000AFBr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000AFDr 3  85 rr        	sta dispx
000AFFr 3  A0 08        	ldy #8
000B01r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B03r 3  18           	clc
000B04r 3               numsp3:
000B04r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000B06r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000B08r 3  20 rr rr     	jsr tstbl 		; get map address.
000B0Br 3  20 rr rr     	jsr plchk 		; block, platform check.
000B0Er 3  F0 01        	beq :+
000B10r 3  60           	rts			; no way through.
000B11r 3               :
000B11r 3  E6 rr        	inc bufaddr		; look right one cell.
000B13r 3  D0 02        	bne :+
000B15r 3  E6 rr        	inc bufaddr+1
000B17r 3               :
000B17r 3  20 rr rr     	jsr plchk		; block, platform check.
000B1Ar 3  F0 01        	beq :+
000B1Cr 3  60           	rts			; impassable.
000B1Dr 3               :
000B1Dr 3  A5 rr        	lda dispx		; x coordinate.
000B1Fr 3  29 07        	and #7			; position straddling block cells.
000B21r 3  D0 01        	bne :+
000B23r 3  60           	rts			; no more checks needed.
000B24r 3               :
000B24r 3  E6 rr        	inc bufaddr		; look to third cell.
000B26r 3  D0 02        	bne :+
000B28r 3  E6 rr        	inc bufaddr+1
000B2Ar 3               :
000B2Ar 3  20 rr rr     	jsr plchk		; block, platform check.
000B2Dr 3  60           	rts			; return with zero flag set accordingly.
000B2Er 3               
000B2Er 3               ;---------------------------------------------------------
000B2Er 3               ; Can go left check.
000B2Er 3               ;
000B2Er 3               ; Input:
000B2Er 3               ;  IX = sprite pointer
000B2Er 3               ;
000B2Er 3               ; Output:
000B2Er 3               ;  A  = 0 is ok, A <>0 is not ok
000B2Er 3               ;---------------------------------------------------------
000B2Er 3               
000B2Er 3               cangl:
000B2Er 3  A0 08        	ldy #8
000B30r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000B32r 3  85 rr        	sta dispy
000B34r 3  A0 09        	ldy #9
000B36r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000B38r 3  38           	sec
000B39r 3  E9 02        	sbc #2			; look left 2 pixels.
000B3Br 3  85 rr        	sta dispx		; coords in dispx,dispy.
000B3Dr 3  4C rr rr     	jmp cangh		; test if we can go there.
000B40r 3               
000B40r 3               ;---------------------------------------------------------
000B40r 3               ; Can go right check.
000B40r 3               ;
000B40r 3               ; Input:
000B40r 3               ;  IX = sprite pointer
000B40r 3               ;
000B40r 3               ; Output:
000B40r 3               ;  A  = 0 is ok, A <>0 is not ok
000B40r 3               ;---------------------------------------------------------
000B40r 3               
000B40r 3               cangr:
000B40r 3  A0 08        	ldy #8
000B42r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B44r 3  85 rr        	sta dispy
000B46r 3  A0 09        	ldy #9
000B48r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B4Ar 3  18           	clc
000B4Br 3  69 10        	adc #16			; look right 16 pixels.
000B4Dr 3  85 rr        	sta dispx		; coords in dispx,dispy.
000B4Fr 3               cangh:
000B4Fr 3               cangh2:
000B4Fr 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000B51r 3  85 rr        	sta z80_b
000B53r 3  A5 rr        	lda dispy		; y position.
000B55r 3  29 07        	and #7			; does x straddle cells?
000B57r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000B59r 3  C6 rr        	dec z80_b		; one less row to write.
000B5Br 3               cangh0:
000B5Br 3  20 rr rr     	jsr tstbl		; get map address.
000B5Er 3               cangh1:
000B5Er 3  20 rr rr     	jsr lrchk		; standard left/right check.
000B61r 3  F0 01        	beq :+
000B63r 3  60           	rts			; no way through.
000B64r 3               :
000B64r 3  48           	pha
000B65r 3  18           	clc
000B66r 3  A5 rr        	lda bufaddr
000B68r 3  69 20        	adc #32		; look down.
000B6Ar 3  85 rr        	sta bufaddr
000B6Cr 3  90 02        	bcc :+
000B6Er 3  E6 rr        	inc bufaddr+1
000B70r 3               :
000B70r 3  68           	pla
000B71r 3               
000B71r 3  C6 rr        	dec z80_b
000B73r 3  D0 E9        	bne cangh1
000B75r 3  60           	rts
000B76r 3               
000B76r 3               ;-------------------------------------
000B76r 3               ; Check left/right movement is okay.
000B76r 3               ;
000B76r 3               ; Input:
000B76r 3               ;  bufaddr = MAP + x/8 + y/8*32
000B76r 3               ;
000B76r 3               ; Output:
000B76r 3               ;  A  = 0 is ok, A <>0 is not ok
000B76r 3               ;-------------------------------------
000B76r 3               
000B76r 3               lrchk:
000B76r 3  A0 00        	ldy #0
000B78r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000B7Ar 3  C9 02        	cmp #WALL 		; is it passable?
000B7Cr 3  F0 0A        	beq lrchkx		; no.
000B7Er 3               
000B7Er 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000B80r 3  F0 06        	beq lrchkx		; not passable.
000B82r 3  A9 00        	lda #0
000B84r 3  60           	rts
000B85r 3               
000B85r 3               ;--------------------------------------------------------------
000B85r 3               ; Called by mmenu
000B85r 3               ;--------------------------------------------------------------
000B85r 3               
000B85r 3               always:
000B85r 3  A9 FF        	lda #255		; report it as okay.
000B87r 3  60           	rts
000B88r 3               
000B88r 3               lrchkx:
000B88r 3  A9 01        	lda #1 			; reset all bits.
000B8Ar 3  60           	rts
000B8Br 3               
000B8Br 3               
000B8Br 3               ;--------------------------------------------------------------
000B8Br 3               ; Check platform or solid item is not in way.
000B8Br 3               ;
000B8Br 3               ; Input:
000B8Br 3               ;  bufaddr = MAP + x/8 + y/8*32
000B8Br 3               ;
000B8Br 3               ; Output:
000B8Br 3               ;  A  = 0 is ok, A <>0 is not ok
000B8Br 3               ;--------------------------------------------------------------
000B8Br 3               
000B8Br 3               plchk:
000B8Br 3  A0 00        	ldy #0
000B8Dr 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000B8Fr 3  C9 02        	cmp #WALL 		; is it passable?
000B91r 3  F0 F5        	beq lrchkx		; no.
000B93r 3               .if pflag .or dflag
000B93r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000B95r 3  F0 F1        	beq lrchkx		; not passable.
000B97r 3               .endif
000B97r 3  C9 01        	cmp #PLATFM		; platform is solid.
000B99r 3  F0 03        	beq plchkx		; not passable.
000B9Br 3               .if lflag
000B9Br 3               	cmp #LADDER		; is it a ladder?
000B9Br 3               	beq lrchkx		; on ladder, deny movement.
000B9Br 3               .endif
000B9Br 3               plchk0:
000B9Br 3  A9 00        	lda #0			; report as ok
000B9Dr 3  60           	rts
000B9Er 3               plchkx:
000B9Er 3  A5 rr        	lda dispy		; x coordinate.
000BA0r 3  29 07        	and #7			; position straddling blocks.
000BA2r 3  F0 E4        	beq lrchkx		; on platform, deny movement.
000BA4r 3  4C rr rr     	jmp plchk0
000BA7r 3               
000BA7r 3               ;--------------------------------------------------------------
000BA7r 3               ; Check ladder is available.
000BA7r 3               ;
000BA7r 3               ; Input:
000BA7r 3               ;  bufaddr = MAP + x/8 + y/8*32
000BA7r 3               ;
000BA7r 3               ; Output:
000BA7r 3               ;  A  = 0 is ok, A <>0 is not ok
000BA7r 3               ;--------------------------------------------------------------
000BA7r 3               
000BA7r 3               .if lflag
000BA7r 3               ldchk:
000BA7r 3               	ldy #0
000BA7r 3               	lda (bufaddr),y 	; fetch cell.
000BA7r 3               	cmp #LADDER 		; is it a ladder?
000BA7r 3               	beq ldchk1
000BA7r 3               	lda #1
000BA7r 3               	rts  			; return with zero flag set accordingly.
000BA7r 3               ldchk1:
000BA7r 3               	lda #0
000BA7r 3               	rts
000BA7r 3               .endif
000BA7r 3               
000BA7r 3               ;--------------------------------------------------------------
000BA7r 3               ; Get collectables.
000BA7r 3               ;--------------------------------------------------------------
000BA7r 3               
000BA7r 3               .if cflag
000BA7r 3               getcol:
000BA7r 3                       lda #COLECT             ; collectable blocks.
000BA7r 3                       sta z80_b
000BA7r 3                       jsr tded                ; test for collectable blocks.
000BA7r 3                       cmp z80_b               ; did we find one?
000BA7r 3                       beq :+
000BA7r 3                       rts                     ; none were found, job done.
000BA7r 3               :
000BA7r 3                       jsr gtblk               ; get block.
000BA7r 3                       jsr evnt20              ; collected block event.
000BA7r 3                       jmp getcol              ; repeat until none left.
000BA7r 3               
000BA7r 3               ; Get collectable block.
000BA7r 3               
000BA7r 3               gtblk:
000BA7r 3               	ldy #0
000BA7r 3               	lda (bufaddr),y
000BA7r 3               	sta z80_a
000BA7r 3                       lda #0
000BA7r 3                       sta (bufaddr),y		; make it empty now.
000BA7r 3               
000BA7r 3               	lda bufaddr		; set dispx
000BA7r 3               	and #31
000BA7r 3               	sta dispx
000BA7r 3               
000BA7r 3               	lda bufaddr+1		; Set dispy
000BA7r 3               	sec
000BA7r 3               	sbc #>MAP
000BA7r 3               	sta bufaddr+1
000BA7r 3               	asl bufaddr
000BA7r 3               	rol bufaddr+1
000BA7r 3               	asl bufaddr
000BA7r 3               	rol bufaddr+1
000BA7r 3               	asl bufaddr
000BA7r 3               	rol bufaddr+1
000BA7r 3               	lda bufaddr+1
000BA7r 3               	sta dispy
000BA7r 3               
000BA7r 3               	lda colpatt		; get blocknr
000BA7r 3               	sta z80_e		; displacement in e.
000BA7r 3               	lda #0
000BA7r 3               	sta z80_d		; no high byte.
000BA7r 3               	asl z80_e  		; multiply char by 8.
000BA7r 3               	rol z80_d
000BA7r 3               	asl z80_e
000BA7r 3               	rol z80_d
000BA7r 3               	asl z80_e
000BA7r 3               	rol z80_d
000BA7r 3               	clc
000BA7r 3               	lda z80_e
000BA7r 3               	adc #<chgfx 		; address of graphics.
000BA7r 3               	sta tileaddr
000BA7r 3               	lda z80_d
000BA7r 3               	adc #>chgfx
000BA7r 3               	sta tileaddr+1
000BA7r 3               	jsr gprad 		; get screen address.
000BA7r 3               	ldx #7			; number of pixel rows to write.
000BA7r 3               gtblk0:
000BA7r 3               	ldy #0
000BA7r 3               	lda (tileaddr),y 	; get image byte.
000BA7r 3               	ldy scrtab,x
000BA7r 3               	eor (scraddr),y 	; XOR tile on screen
000BA7r 3               	sta (scraddr),y 	; copy to screen.
000BA7r 3               	inc tileaddr 		; next image byte.
000BA7r 3               	bne :+
000BA7r 3               	inc tileaddr+1
000BA7r 3               :
000BA7r 3               	dex	 		; repeat for 8 pixel rows.
000BA7r 3               	bpl gtblk0
000BA7r 3               	rts
000BA7r 3               .endif
000BA7r 3               
000BA7r 3               ;--------------------------------------------------------------
000BA7r 3               ; Touched deadly block check.
000BA7r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000BA7r 3               ;
000BA7r 3               ; Input:
000BA7r 3               ;  IX = sprite address
000BA7r 3               ;
000BA7r 3               ; Output:
000BA7r 3               ;  A  = 0 is ok, A=5 is not ok
000BA7r 3               ;--------------------------------------------------------------
000BA7r 3               
000BA7r 3               tded:
000BA7r 3  A0 08        	ldy #8
000BA9r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000BABr 3  85 rr        	sta dispy
000BADr 3  C8           	iny
000BAEr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000BB0r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000BB2r 3  20 rr rr     	jsr tstbl		; get map address.
000BB5r 3  48           	pha
000BB6r 3  A9 1F        	lda #31			; default distance to next line down.
000BB8r 3  85 rr        	sta z80_e
000BBAr 3  68           	pla
000BBBr 3  C5 rr        	cmp z80_b		; is this the required block?
000BBDr 3  D0 01        	bne :+
000BBFr 3  60           	rts			; yes.
000BC0r 3               :
000BC0r 3  E6 rr        	inc bufaddr 		; next cell.
000BC2r 3  D0 02        	bne :+
000BC4r 3  E6 rr        	inc bufaddr+1
000BC6r 3               :
000BC6r 3  A0 00        	ldy #0
000BC8r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000BCAr 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000BCCr 3  D0 01        	bne :+
000BCEr 3  60           	rts			; yes.
000BCFr 3               :
000BCFr 3  A5 rr        	lda dispx		; horizontal position.
000BD1r 3  85 rr        	sta z80_c 		; store column in c register.
000BD3r 3  29 07        	and #7			; is it straddling cells?
000BD5r 3  D0 03        	bne :+
000BD7r 3  4C rr rr     	jmp tded0		; no.
000BDAr 3               :
000BDAr 3  E6 rr        	inc bufaddr 		; last cell.
000BDCr 3  D0 02        	bne :+
000BDEr 3  E6 rr        	inc bufaddr+1
000BE0r 3               :
000BE0r 3  A0 00        	ldy #0
000BE2r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000BE4r 3  C5 rr        	cmp z80_b		; is this the block?
000BE6r 3  D0 01        	bne :+
000BE8r 3  60           	rts			; yes.
000BE9r 3               :
000BE9r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000BEBr 3               tded0:
000BEBr 3  18           	clc 			; point to next row.
000BECr 3  A5 rr        	lda bufaddr
000BEEr 3  65 rr        	adc z80_e
000BF0r 3  85 rr        	sta bufaddr
000BF2r 3  90 02        	bcc :+
000BF4r 3  E6 rr        	inc bufaddr+1
000BF6r 3               :
000BF6r 3  A0 00        	ldy #0
000BF8r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000BFAr 3  C5 rr        	cmp z80_b		; is this fatal?
000BFCr 3  D0 01        	bne :+
000BFEr 3  60           	rts			; yes.
000BFFr 3               :
000BFFr 3  E6 rr        	inc bufaddr 		; next cell.
000C01r 3  D0 02        	bne :+
000C03r 3  E6 rr        	inc bufaddr+1
000C05r 3               :
000C05r 3  A0 00        	ldy #0
000C07r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C09r 3  C5 rr        	cmp z80_b		; is this fatal?
000C0Br 3  D0 01        	bne :+
000C0Dr 3  60           	rts			; yes.
000C0Er 3               :
000C0Er 3  A5 rr        	lda z80_c		; horizontal position.
000C10r 3  29 07        	and #7			; is it straddling cells?
000C12r 3  D0 03        	bne :+
000C14r 3  4C rr rr     	jmp tded1 		; no.
000C17r 3               :
000C17r 3  E6 rr        	inc bufaddr		; last cell.
000C19r 3  D0 02        	bne :+
000C1Br 3  E6 rr        	inc bufaddr+1
000C1Dr 3               :
000C1Dr 3  A0 00        	ldy #0
000C1Fr 3  B1 rr        	lda (bufaddr),y		; fetch type.
000C21r 3  C5 rr        	cmp z80_b		; is this fatal?
000C23r 3  D0 01        	bne :+
000C25r 3  60           	rts			; yes.
000C26r 3               :
000C26r 3               tded1:
000C26r 3  A5 rr        	lda dispy		; vertical position.
000C28r 3  29 07        	and #7 			; is it straddling cells?
000C2Ar 3  D0 01        	bne :+
000C2Cr 3  60           	rts			; no, job done.
000C2Dr 3               :
000C2Dr 3  18           	clc			; point to next row.
000C2Er 3  A5 rr        	lda bufaddr
000C30r 3  65 rr        	adc z80_e
000C32r 3  85 rr        	sta bufaddr
000C34r 3  90 02        	bcc :+
000C36r 3  E6 rr        	inc bufaddr+1
000C38r 3               :
000C38r 3  A0 00        	ldy #0
000C3Ar 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000C3Cr 3  C5 rr        	cmp z80_b		; is this fatal?
000C3Er 3  D0 01        	bne :+
000C40r 3  60           	rts			; yes.
000C41r 3               :
000C41r 3  E6 rr        	inc bufaddr		; next cell.
000C43r 3  D0 02        	bne :+
000C45r 3  E6 rr        	inc bufaddr+1
000C47r 3               :
000C47r 3  A0 00        	ldy #0
000C49r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C4Br 3  C5 rr        	cmp z80_b		; is this fatal?
000C4Dr 3  D0 01        	bne :+
000C4Fr 3  60           	rts			; yes.
000C50r 3               :
000C50r 3  A5 rr        	lda z80_c		; horizontal position.
000C52r 3  29 07        	and #7			; is it straddling cells?
000C54r 3  D0 01        	bne :+
000C56r 3  60           	rts			; no.
000C57r 3               :
000C57r 3  E6 rr        	inc bufaddr		; last cell.
000C59r 3  D0 02        	bne :+
000C5Br 3  E6 rr        	inc bufaddr+1
000C5Dr 3               :
000C5Dr 3  A0 00        	ldy #0
000C5Fr 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000C61r 3  60           	rts 			; return with final type in accumulator.
000C62r 3               
000C62r 3               ;---------------------------------------------------
000C62r 3               ; Fetch block type at (dispx, dispy).
000C62r 3               ;
000C62r 3               ; Output:
000C62r 3               ;  A = block type
000C62r 3               ;---------------------------------------------------
000C62r 3               
000C62r 3               tstbl:
000C62r 3  A5 rr        	lda dispy 		; fetch y coord.
000C64r 3  4A           	lsr a			; bufaddr = y/8
000C65r 3  4A           	lsr a
000C66r 3  4A           	lsr a
000C67r 3               ;	sta chary
000C67r 3               
000C67r 3  85 rr        	sta bufaddr
000C69r 3  A9 00        	lda #0
000C6Br 3  85 rr        	sta bufaddr+1
000C6Dr 3               
000C6Dr 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000C6Fr 3  26 rr        	rol bufaddr+1
000C71r 3  06 rr        	asl bufaddr
000C73r 3  26 rr        	rol bufaddr+1
000C75r 3  06 rr        	asl bufaddr
000C77r 3  26 rr        	rol bufaddr+1
000C79r 3  06 rr        	asl bufaddr
000C7Br 3  26 rr        	rol bufaddr+1
000C7Dr 3  06 rr        	asl bufaddr
000C7Fr 3  26 rr        	rol bufaddr+1
000C81r 3               
000C81r 3  A5 rr        	lda dispx		; x/8
000C83r 3  4A           	lsr a
000C84r 3  4A           	lsr a
000C85r 3  4A           	lsr a
000C86r 3               ;	sta charx
000C86r 3               
000C86r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000C87r 3  65 rr        	adc bufaddr
000C89r 3  69 00        	adc #<MAP
000C8Br 3  85 rr        	sta bufaddr
000C8Dr 3  A5 rr        	lda bufaddr+1
000C8Fr 3  69 04        	adc #>MAP
000C91r 3  85 rr        	sta bufaddr+1
000C93r 3               
000C93r 3  A0 00        	ldy #0
000C95r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000C97r 3  60           	rts
000C98r 3               
000C98r 3               ;-------------------------------------------------------------------
000C98r 3               ; Jump - if we can.
000C98r 3               ; Requires initial speed to be set up in accumulator prior to call.
000C98r 3               ;
000C98r 3               ; Input:
000C98r 3               ;  IX = sprite address
000C98r 3               ;-------------------------------------------------------------------
000C98r 3               
000C98r 3               jump:
000C98r 3  A0 0D        	ldy #var_jumpLo
000C9Ar 3  B1 rr        	lda (z80_ix),y		; jump table low.
000C9Cr 3  A0 0E        	ldy #var_jumpHi
000C9Er 3  11 rr        	ora (z80_ix),y		; jump table high.
000CA0r 3  F0 01        	beq :+
000CA2r 3  60           	rts			; already in the air.
000CA3r 3               :
000CA3r 3  A9 rr        	lda #>jtab
000CA5r 3  A0 0E        	ldy #var_jumpHi
000CA7r 3  91 rr        	sta (z80_ix),y		; set jump high.
000CA9r 3  A9 rr        	lda #<jtab		; jump table start.
000CABr 3  A0 0D        	ldy #var_jumpLo
000CADr 3  91 rr        	sta (z80_ix),y		; set jump low.
000CAFr 3  60           	rts
000CB0r 3               
000CB0r 3               ; Jump table.
000CB0r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000CB0r 3               ;.align 32
000CB0r 3               ;jtab:
000CB0r 3               ;	.byte 248,250,252
000CB0r 3               ;	.byte 254,254,255
000CB0r 3               ;	.byte 255,255,0,0
000CB0r 3               ;	.byte 0,1,1,1,2,2
000CB0r 3               ;	.byte 4,6,8,8,8,99
000CB0r 3               
000CB0r 3               ;------------------------------------------------
000CB0r 3               ; Random numbers code.
000CB0r 3               ; Pseudo-random number generator, 8-bit.
000CB0r 3               ;
000CB0r 3               ; Output:
000CB0r 3               ;  RND = random number
000CB0r 3               ;------------------------------------------------
000CB0r 3               
000CB0r 3               random:
000CB0r 3  A5 rr        	lda seed
000CB2r 3  F0 05        	beq doEor
000CB4r 3  0A           	asl a
000CB5r 3  F0 04        	beq noEor
000CB7r 3  90 02        	bcc noEor
000CB9r 3  49 1D        doEor:	eor #$1d
000CBBr 3  85 rr        noEor:	sta seed
000CBDr 3  60           	rts
000CBEr 3               
000CBEr 3  A5 rr        	lda seed		; get last random number.
000CC0r 3  0A           	asl a
000CC1r 3  0A           	asl a
000CC2r 3  18           	clc
000CC3r 3  65 rr        	adc seed
000CC5r 3  18           	clc
000CC6r 3  69 45        	adc #$45
000CC8r 3  85 rr        	sta seed		; store new seed.
000CCAr 3  85 rr        	sta varrnd		; return number in variable.
000CCCr 3  60           	rts
000CCDr 3               
000CCDr 3               ;-------------------------------------------------------
000CCDr 3               ; Joystick and keyboard reading routines.
000CCDr 3               ;
000CCDr 3               ; contrl = 0, Keyboard
000CCDr 3               ;          1, JoyKeyb
000CCDr 3               ;          2, JoyMMC
000CCDr 3               ;
000CCDr 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000CCDr 3               ;             ||||||||
000CCDr 3               ;             |||||||+> Right    KEY 0  - X
000CCDr 3               ;             ||||||+-> Left     KEY 1  - Z
000CCDr 3               ;             |||||+--> Down     KEY 2  - .
000CCDr 3               ;             ||||+---> Up       KEY 3  - ;
000CCDr 3               ;             |||+----> Fire1    KEY 4  - SPC
000CCDr 3               ;             ||+-----> Fire2    KEY 5  - Q
000CCDr 3               ;             |+------> Fire3    KEY 6  - P
000CCDr 3               ;             +-------> Not used
000CCDr 3               ;
000CCDr 3               ;                       Option1  KEY 7  - 1
000CCDr 3               ;                       Option2  KEY 8  - 2
000CCDr 3               ;                       Option3  KEY 9  - 3
000CCDr 3               ;                       Option4  KEY 10 - 4
000CCDr 3               ;-------------------------------------------------------
000CCDr 3               
000CCDr 3               joykey:
000CCDr 3  A5 rr        	lda contrl 		; control flag.
000CCFr 3  C9 01        	cmp #1
000CD1r 3  F0 1A        	beq joy1 		; scan joystick1
000CD3r 3  C9 02        	cmp #2
000CD5r 3  F0 1C        	beq joy2 		; scan joystick2
000CD7r 3               
000CD7r 3               ; Scan keyboard
000CD7r 3               
000CD7r 3  A9 00        	lda #0		 	; zero reading.
000CD9r 3  85 rr        	sta z80_e
000CDBr 3               
000CDBr 3  A0 06        	ldy #6	 		; address of last key.
000CDDr 3               joyke0:
000CDDr 3  B9 rr rr     	lda keys,y 		; get key from table.
000CE0r 3  20 rr rr     	jsr ktest		; being pressed?
000CE3r 3  26 rr        	rol z80_e 		; rotate into reading.
000CE5r 3               
000CE5r 3  88           	dey		 	; next key.
000CE6r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000CE8r 3               joyret:
000CE8r 3  A5 rr        	lda z80_e
000CEAr 3  85 rr        	sta joyval
000CECr 3  60           	rts
000CEDr 3               
000CEDr 3               ; Scan joystick 1
000CEDr 3               
000CEDr 3               joy1:
000CEDr 3  20 rr rr     	jsr joy1scan
000CF0r 3  4C rr rr     	jmp joyret 		; store the value.
000CF3r 3               
000CF3r 3               ; Scan joystick 2
000CF3r 3               
000CF3r 3               joy2:
000CF3r 3  20 rr rr     	jsr joy2scan
000CF6r 3  4C rr rr     	jmp joyret 		; store the value.
000CF9r 3               
000CF9r 3               ;---------------------------------------------------------------
000CF9r 3               ; Display message.
000CF9r 3               ;
000CF9r 3               ; Input:
000CF9r 3               ;  A = message number
000CF9r 3               ;---------------------------------------------------------------
000CF9r 3               
000CF9r 3               dmsg:
000CF9r 3  AA           	tax
000CFAr 3  A9 rr        	lda #<msgdat		; pointer to messages.
000CFCr 3  85 rr        	sta z80_l
000CFEr 3  A9 rr        	lda #>msgdat
000D00r 3  85 rr        	sta z80_h
000D02r 3  20 rr rr     	jsr getwrd		; get message number.
000D05r 3               dmsg3:
000D05r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000D08r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000D0Br 3  A5 rr        	lda prtmod		; print mode.
000D0Dr 3  D0 47        	bne bmsg1		; no, double-height text.
000D0Fr 3               dmsg0:
000D0Fr 3  A5 rr        	lda z80_h		; store string pointer.
000D11r 3  48           	pha
000D12r 3  A5 rr        	lda z80_l
000D14r 3  48           	pha
000D15r 3               
000D15r 3  A0 00        	ldy #0
000D17r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000D19r 3  29 7F        	and #127		; remove any end marker.
000D1Br 3  C9 0D        	cmp #ASCII_NEWLINE
000D1Dr 3  F0 24        	beq dmsg1
000D1Fr 3  20 rr rr     	jsr pchar		; display character.
000D22r 3  20 rr rr     	jsr nexpos 		; display position.
000D25r 3  D0 03        	bne dmsg2		; not on a new line.
000D27r 3  20 rr rr     	jsr nexlin		; next line down.
000D2Ar 3               dmsg2:
000D2Ar 3  68           	pla			; retrieve string pointer
000D2Br 3  85 rr        	sta z80_l
000D2Dr 3  68           	pla
000D2Er 3  85 rr        	sta z80_h
000D30r 3               
000D30r 3  A0 00        	ldy #0
000D32r 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000D34r 3  0A           	asl a  			; was it the end?
000D35r 3  90 03        	bcc :+
000D37r 3  4C rr rr     	jmp dscor2		; yes, job done.
000D3Ar 3               :
000D3Ar 3  E6 rr        	inc z80_l		; next character to display.
000D3Cr 3  D0 02        	bne :+
000D3Er 3  E6 rr        	inc z80_h
000D40r 3               :
000D40r 3  4C rr rr     	jmp dmsg0
000D43r 3               dmsg1:
000D43r 3  E6 rr        	inc dispy
000D45r 3  A5 rr        	lda dispy
000D47r 3  C9 18        	cmp #24
000D49r 3  90 04        	bcc dmsg4
000D4Br 3  A9 00        	lda #0
000D4Dr 3  85 rr        	sta dispy
000D4Fr 3               dmsg4:
000D4Fr 3  A9 00        	lda #0
000D51r 3  85 rr        	sta dispx
000D53r 3  4C rr rr     	jmp dmsg2
000D56r 3               
000D56r 3               
000D56r 3               ;----------------------------------------------------------
000D56r 3               ; Display message in big text.
000D56r 3               ;
000D56r 3               ; Input:
000D56r 3               ;  HL = string pointer
000D56r 3               ;----------------------------------------------------------
000D56r 3               
000D56r 3               bmsg1:
000D56r 3  A0 00        	ldy #0
000D58r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000D5Ar 3  29 7F        	and #127		; only want 7 bits.
000D5Cr 3  C9 0D        	cmp #ASCII_NEWLINE
000D5Er 3  F0 13        	beq bmsg2
000D60r 3  20 rr rr     	jsr bchar 		; display big char.
000D63r 3               bmsg3:
000D63r 3  A0 00        	ldy #0
000D65r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000D67r 3  48           	pha
000D68r 3  E6 rr        	inc z80_l 		; next character in list.
000D6Ar 3  D0 02        	bne :+
000D6Cr 3  E6 rr        	inc z80_h
000D6Er 3               :
000D6Er 3  68           	pla
000D6Fr 3  0A           	asl a  			; was terminator flag set?
000D70r 3  90 E4        	bcc bmsg1		; no, keep going.
000D72r 3               
000D72r 3  60           	rts
000D73r 3               bmsg2:
000D73r 3  A9 00        	lda #0
000D75r 3  85 rr        	sta dispx
000D77r 3  E6 rr        	inc dispy
000D79r 3  E6 rr        	inc dispy
000D7Br 3  A5 rr        	lda dispy
000D7Dr 3  C9 17        	cmp #23
000D7Fr 3  90 E2        	bcc bmsg3
000D81r 3  A9 00        	lda #0
000D83r 3  85 rr        	sta dispy
000D85r 3  4C rr rr     	jmp bmsg3
000D88r 3               
000D88r 3               ;----------------------------------------------------------
000D88r 3               ; Big character display.
000D88r 3               ;
000D88r 3               ; Input:
000D88r 3               ;  A = character
000D88r 3               ;----------------------------------------------------------
000D88r 3               
000D88r 3               bchar:
000D88r 3  85 rr        	sta z80_e		; save char in lb
000D8Ar 3  A9 00        	lda #0
000D8Cr 3  85 rr        	sta z80_d		; reset hb
000D8Er 3               
000D8Er 3  06 rr        	asl z80_e 		; multiply char by 8.
000D90r 3  26 rr        	rol z80_d
000D92r 3  06 rr        	asl z80_e
000D94r 3  26 rr        	rol z80_d
000D96r 3  06 rr        	asl z80_e
000D98r 3  26 rr        	rol z80_d		; de = a*8
000D9Ar 3               
000D9Ar 3  18           	clc			; de = #<(FONT-256) + a*8
000D9Br 3  A5 rr        	lda z80_e
000D9Dr 3  69 rr        	adc #<(FONT-256) 		; address of font.
000D9Fr 3  85 rr        	sta z80_e
000DA1r 3  A5 rr        	lda z80_d
000DA3r 3  69 rr        	adc #>(FONT-256)
000DA5r 3  85 rr        	sta z80_d
000DA7r 3               
000DA7r 3  20 rr rr     	jsr gaadd		; set colour attribute
000DAAr 3  AD rr rr     	lda fontcol
000DADr 3  A0 00        	ldy #0
000DAFr 3  91 rr        	sta (bufaddr),y
000DB1r 3               
000DB1r 3  20 rr rr     	jsr gprad 		; get screen address.
000DB4r 3               
000DB4r 3  A2 00        	ldx #0			; height of character in font.
000DB6r 3               bchar0:
000DB6r 3  A0 00        	ldy #0
000DB8r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000DBAr 3               
000DBAr 3               .if iflag
000DBAr 3               	eor #$ff
000DBAr 3               .endif
000DBAr 3               
000DBAr 3  91 rr        	sta (scraddr),y
000DBCr 3  48           	pha
000DBDr 3  20 rr rr     	jsr nline 		; next line down.
000DC0r 3  68           	pla
000DC1r 3  91 rr        	sta (scraddr),y
000DC3r 3  20 rr rr     	jsr nline 		; next line down.
000DC6r 3               
000DC6r 3  18           	clc
000DC7r 3  E6 rr        	inc z80_e 		; next line of font.
000DC9r 3  D0 02        	bne :+
000DCBr 3  E6 rr        	inc z80_d
000DCDr 3               :
000DCDr 3  E8           	inx
000DCEr 3  E0 08        	cpx #8
000DD0r 3  D0 E4        	bne bchar0
000DD2r 3               
000DD2r 3  20 rr rr     	jsr nexpos		; display position.
000DD5r 3  D0 05        	bne bchar2 		; not on a new line.
000DD7r 3               bchar3:
000DD7r 3  E6 rr        	inc dispy
000DD9r 3  20 rr rr     	jsr nexlin 		; next line check.
000DDCr 3               bchar2:
000DDCr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000DDFr 3               
000DDFr 3               
000DDFr 3               ;-------------------------------------------------
000DDFr 3               ; Display a character.
000DDFr 3               ;
000DDFr 3               ; Input:
000DDFr 3               ;  A = character
000DDFr 3               ;-------------------------------------------------
000DDFr 3               
000DDFr 3               achar:
000DDFr 3  85 rr        	sta z80_b 		; copy to b.
000DE1r 3  20 rr rr     	jsr preprt 		; get ready to print.
000DE4r 3  A5 rr        	lda z80_b		; character in accumulator.
000DE6r 3  A6 rr        	ldx prtmod 		; print mode.
000DE8r 3  F0 03        	beq :+
000DEAr 3  4C rr rr     	jmp bchar 		; no, double-height text.
000DEDr 3               :
000DEDr 3  20 rr rr     	jsr pchar 		; display character.
000DF0r 3  20 rr rr     	jsr nexpos 		; display position.
000DF3r 3  F0 E2        	beq bchar3		; next line down.
000DF5r 3  4C rr rr     	jmp bchar2 		; tidy up.
000DF8r 3               
000DF8r 3               
000DF8r 3               ;-------------------------------------------------
000DF8r 3               ; Get next print column position.
000DF8r 3               ;-------------------------------------------------
000DF8r 3               
000DF8r 3               nexpos:
000DF8r 3  E6 rr        	inc dispx		; move along one position.
000DFAr 3  A5 rr        	lda dispx 		; get coordinate.
000DFCr 3  C9 16        	cmp #22
000DFEr 3  D0 0E        	bne :+
000E00r 3  A9 00        	lda #0
000E02r 3  85 rr        	sta dispx
000E04r 3  A5 rr        	lda prtmod
000E06r 3  F0 06        	beq :+
000E08r 3  20 rr rr     	jsr nexlin
000E0Br 3  4C rr rr     	jmp nexlin
000E0Er 3               :
000E0Er 3  60           	rts
000E0Fr 3               
000E0Fr 3               ;-------------------------------------------------
000E0Fr 3               ; Get next print line position.
000E0Fr 3               ;-------------------------------------------------
000E0Fr 3               
000E0Fr 3               nexlin:
000E0Fr 3  E6 rr        	inc dispy 		; newline.
000E11r 3  A5 rr        	lda dispy		; vertical position.
000E13r 3  C9 16        	cmp #22			; past screen edge?
000E15r 3  B0 01        	bcs :+
000E17r 3  60           	rts			; no, still okay.
000E18r 3               :
000E18r 3  A9 00        	lda #0			; restart at top.
000E1Ar 3  85 rr        	sta dispy
000E1Cr 3  60           	rts
000E1Dr 3               
000E1Dr 3               ;--------------------------------------------------------
000E1Dr 3               ; Pre-print preliminaries.
000E1Dr 3               ;--------------------------------------------------------
000E1Dr 3               
000E1Dr 3               preprt:
000E1Dr 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000E1Fr 3  8D rr rr     	sta grbase		; set up graphics base.
000E22r 3  A9 rr        	lda #>(FONT-256)
000E24r 3  8D rr rr     	sta grbase+1
000E27r 3               prescr:
000E27r 3  A5 rr        	lda charx 		; display coordinates.
000E29r 3  85 rr        	sta dispx		; set up general coordinates.
000E2Br 3  A5 rr        	lda chary
000E2Dr 3  85 rr        	sta dispy
000E2Fr 3  60           	rts
000E30r 3               
000E30r 3               ;--------------------------------------------------------------
000E30r 3               ; Get messagenr x in hl
000E30r 3               ;
000E30r 3               ; Input:
000E30r 3               ;  HL = pointer to message list
000E30r 3               ;  X  = message number.
000E30r 3               ;--------------------------------------------------------------
000E30r 3               
000E30r 3               getwrd:
000E30r 3  E0 00        	cpx #0
000E32r 3  D0 01        	bne:+ 			; first word in list?
000E34r 3  60           	rts 			; yep, don't search.
000E35r 3               :
000E35r 3  A0 00        	ldy #0
000E37r 3               getwd0:
000E37r 3  B1 rr        	lda (z80_hl),y
000E39r 3  48           	pha
000E3Ar 3  E6 rr        	inc z80_l
000E3Cr 3  D0 02        	bne :+
000E3Er 3  E6 rr        	inc z80_h
000E40r 3               :
000E40r 3  68           	pla
000E41r 3  C9 80        	cmp #128		; found end?
000E43r 3  30 F2        	bmi getwd0		; no, carry on.
000E45r 3  CA           	dex			; until we have right number.
000E46r 3  D0 EF        	bne getwd0
000E48r 3  60           	rts
000E49r 3               
000E49r 3               ;-----------------------------------------------------------
000E49r 3               ; Bubble sort.
000E49r 3               ;-----------------------------------------------------------
000E49r 3               
000E49r 3               bsort:
000E49r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000E4Br 3  85 rr        	sta qscnt
000E4Dr 3               
000E4Dr 3  A9 rr        	lda #<sprtab 		; sprite table.
000E4Fr 3  85 rr        	sta z80_x
000E51r 3  A9 rr        	lda #>sprtab
000E53r 3  85 rr        	sta z80_i
000E55r 3               bsort0:
000E55r 3  A0 00        	ldy #0
000E57r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000E59r 3  C9 FF        	cmp #255 		; is it switched off?
000E5Br 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000E5Dr 3               
000E5Dr 3  A0 11        	ldy #TABSIZ
000E5Fr 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000E61r 3  C9 FF        	cmp #255 		; is it enabled?
000E63r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000E65r 3               
000E65r 3  A0 14        	ldy #TABSIZ+3
000E67r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000E69r 3  A0 03        	ldy #3
000E6Br 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000E6Dr 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000E6Fr 3               bsort2:
000E6Fr 3  18           	clc
000E70r 3  A5 rr        	lda z80_x
000E72r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000E74r 3  85 rr        	sta z80_x
000E76r 3  90 02        	bcc :+
000E78r 3  E6 rr        	inc z80_i
000E7Ar 3               :
000E7Ar 3  C6 rr        	dec qscnt
000E7Cr 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000E7Er 3  60           	rts
000E7Fr 3               
000E7Fr 3               bsort1:
000E7Fr 3  A0 11        	ldy #TABSIZ
000E81r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000E83r 3  C9 FF        	cmp #255		; is it enabled?
000E85r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000E87r 3  20 rr rr     	jsr swspr		; swap positions.
000E8Ar 3  4C rr rr     	jmp bsort2
000E8Dr 3               swemp:
000E8Dr 3  A0 11        	ldy #TABSIZ
000E8Fr 3  B1 rr        	lda (z80_ix),y		; next table entry.
000E91r 3  C9 FF        	cmp #255		; is that one on?
000E93r 3  F0 DA        	beq bsort2		; no, nothing to swap.
000E95r 3  20 rr rr     	jsr swspr		; swap positions.
000E98r 3  4C rr rr     	jmp bsort2
000E9Br 3               
000E9Br 3               ; Swap sprites.
000E9Br 3               
000E9Br 3               swspr:
000E9Br 3  A5 rr        	lda z80_x		; table address
000E9Dr 3  85 rr        	sta z80_e		; copy to de pair.
000E9Fr 3  85 rr        	sta z80_l		; copy to hl pair.
000EA1r 3  A5 rr        	lda z80_i
000EA3r 3  85 rr        	sta z80_h
000EA5r 3  85 rr        	sta z80_d
000EA7r 3               
000EA7r 3  18           	clc
000EA8r 3  A5 rr        	lda z80_l
000EAAr 3  69 11        	adc #TABSIZ		; distance to second entry.
000EACr 3  85 rr        	sta z80_l
000EAEr 3  90 02        	bcc :+
000EB0r 3  E6 rr        	inc z80_h
000EB2r 3               :
000EB2r 3  A9 11        	lda #TABSIZ		; bytes to swap.
000EB4r 3  85 rr        	sta z80_b
000EB6r 3  A0 00        	ldy #0
000EB8r 3               swspr0:
000EB8r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000EBAr 3  48           	pha
000EBBr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000EBDr 3  91 rr        	sta (z80_hl),y 		; copy to second.
000EBFr 3  68           	pla
000EC0r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000EC2r 3               
000EC2r 3  E6 rr        	inc z80_e 		; next byte.
000EC4r 3  D0 02        	bne :+
000EC6r 3  E6 rr        	inc z80_d
000EC8r 3               :
000EC8r 3  E6 rr        	inc z80_l 		; next byte.
000ECAr 3  D0 02        	bne :+
000ECCr 3  E6 rr        	inc z80_h
000ECEr 3               :
000ECEr 3  C6 rr        	dec z80_b
000ED0r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000ED2r 3  60           	rts
000ED3r 3               
000ED3r 3               ;----------------------------------------------------
000ED3r 3               ; Process sprites.
000ED3r 3               ;----------------------------------------------------
000ED3r 3               
000ED3r 3               pspr:
000ED3r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000ED5r 3  85 rr        	sta sprptr
000ED7r 3               
000ED7r 3  A9 rr        	lda #<sprtab 		; sprite table.
000ED9r 3  85 rr        	sta z80_x
000EDBr 3  A9 rr        	lda #>sprtab
000EDDr 3  85 rr        	sta z80_i
000EDFr 3               pspr1:
000EDFr 3  A0 00        	ldy #0
000EE1r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000EE3r 3  C9 09        	cmp #9 			; within range of sprite types?
000EE5r 3  B0 03        	bcs :+
000EE7r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000EEAr 3               :
000EEAr 3  18           	clc
000EEBr 3  A5 rr        	lda z80_x
000EEDr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000EEFr 3  85 rr        	sta z80_x
000EF1r 3  90 02        	bcc :+
000EF3r 3  E6 rr        	inc z80_i		; next sprite.
000EF5r 3               :
000EF5r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000EF7r 3  D0 E6        	bne pspr1
000EF9r 3  60           	rts
000EFAr 3               
000EFAr 3               pspr2:
000EFAr 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000EFCr 3  85 rr        	sta ogptr
000EFEr 3  A5 rr        	lda z80_i
000F00r 3  85 rr        	sta ogptr+1
000F02r 3  20 rr rr     	jsr pspr3		; do the routine.
000F05r 3               rtorg:
000F05r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000F07r 3  85 rr        	sta z80_x
000F09r 3  A5 rr        	lda ogptr+1
000F0Br 3  85 rr        	sta z80_i
000F0Dr 3               rtorg0:
000F0Dr 3  60           	rts
000F0Er 3               
000F0Er 3               pspr3:
000F0Er 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000F10r 3  85 rr        	sta z80_l
000F12r 3  A9 rr        	lda #>evtyp0
000F14r 3  85 rr        	sta z80_h
000F16r 3               pspr4:
000F16r 3  B1 rr        	lda (z80_ix),y
000F18r 3  0A           	asl a			; double accumulator.
000F19r 3  18           	clc
000F1Ar 3  65 rr        	adc z80_l
000F1Cr 3  85 rr        	sta z80_l
000F1Er 3  90 02        	bcc :+
000F20r 3  E6 rr        	inc z80_h
000F22r 3               :
000F22r 3  B1 rr        	lda (z80_hl),y
000F24r 3  85 rr        	sta z80_e 		; copy to de.
000F26r 3  48           	pha
000F27r 3               
000F27r 3  E6 rr        	inc z80_l 		; next byte of address.
000F29r 3  D0 02        	bne :+
000F2Br 3  E6 rr        	inc z80_h
000F2Dr 3               :
000F2Dr 3  B1 rr        	lda (z80_hl),y 		; address high.
000F2Fr 3  85 rr        	sta z80_d
000F31r 3               
000F31r 3  48           	pha	 		; swap address into hl.
000F32r 3  A5 rr        	lda z80_h
000F34r 3  85 rr        	sta z80_d
000F36r 3  68           	pla
000F37r 3  85 rr        	sta z80_h
000F39r 3  68           	pla
000F3Ar 3  85 rr        	sta z80_l
000F3Cr 3  A5 rr        	lda z80_l
000F3Er 3  85 rr        	sta z80_e
000F40r 3               
000F40r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000F43r 3               
000F43r 3               ; Address of each sprite type's routine.
000F43r 3               
000F43r 3  rr rr        evtyp0:	.word evnt00
000F45r 3  rr rr        evtyp1:	.word evnt01
000F47r 3  rr rr        evtyp2:	.word evnt02
000F49r 3  rr rr        evtyp3:	.word evnt03
000F4Br 3  rr rr        evtyp4:	.word evnt04
000F4Dr 3  rr rr        evtyp5:	.word evnt05
000F4Fr 3  rr rr        evtyp6:	.word evnt06
000F51r 3  rr rr        evtyp7:	.word evnt07
000F53r 3  rr rr        evtyp8:	.word evnt08
000F55r 3               
000F55r 3               ;--------------------------------------------------------------
000F55r 3               ; Display sprites.
000F55r 3               ;
000F55r 3               ; Input:
000F55r 3               ;  IX = sprite table
000F55r 3               ;--------------------------------------------------------------
000F55r 3               
000F55r 3               dspr:
000F55r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000F57r 3  85 rr        	sta sprcnt
000F59r 3               
000F59r 3               dspr0:
000F59r 3  A0 00        	ldy #var_Type
000F5Br 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000F5Dr 3  C9 FF        	cmp #255 		; is it enabled?
000F5Fr 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000F61r 3               dspr5:
000F61r 3  A0 05        	ldy #var_newType
000F63r 3  B1 rr        	lda (z80_ix),y 		; new type.
000F65r 3  C9 FF        	cmp #255		; is it enabled?
000F67r 3  F0 03        	beq dspr2
000F69r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000F6Cr 3               dspr2:
000F6Cr 3  A0 05        	ldy #var_newType
000F6Er 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000F70r 3  A0 00        	ldy #var_Type
000F72r 3  91 rr        	sta (z80_ix),y
000F74r 3  A0 06        	ldy #var_newImage
000F76r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000F78r 3  A0 01        	ldy #var_Image
000F7Ar 3  91 rr        	sta (z80_ix),y
000F7Cr 3  A0 07        	ldy #var_newFrame
000F7Er 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000F80r 3  A0 02        	ldy #var_Frame
000F82r 3  91 rr        	sta (z80_ix),y
000F84r 3  A0 08        	ldy #var_newY
000F86r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000F88r 3  A0 03        	ldy #var_Y
000F8Ar 3  91 rr        	sta (z80_ix),y
000F8Cr 3  A0 09        	ldy #var_newX
000F8Er 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000F90r 3  A0 04        	ldy #var_X
000F92r 3  91 rr        	sta (z80_ix),y
000F94r 3               
000F94r 3  18           	clc
000F95r 3  A5 rr        	lda z80_x
000F97r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000F99r 3  85 rr        	sta z80_x
000F9Br 3  A5 rr        	lda z80_i
000F9Dr 3  69 00        	adc #0
000F9Fr 3  85 rr        	sta z80_i 		; next sprite.
000FA1r 3  C6 rr        	dec sprcnt
000FA3r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000FA5r 3  60           	rts
000FA6r 3               
000FA6r 3               dspr1:
000FA6r 3               	; _BEEB clipping code copied from CPC Engine
000FA6r 3  A0 03        	ldy #var_Y
000FA8r 3  B1 rr        	lda (z80_ix), y		; old x coord
000FAAr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000FACr 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000FAEr 3               
000FAEr 3  A0 05        	ldy #var_newType
000FB0r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000FB2r 3  C9 FF        	cmp #255		; is this enabled?
000FB4r 3  D0 06        	bne dspr4 		; yes, display both.
000FB6r 3               
000FB6r 3               dspr6:
000FB6r 3  20 rr rr     	jsr sspria 		; show single sprite.
000FB9r 3  4C rr rr     	jmp dspr2
000FBCr 3               
000FBCr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000FBCr 3               
000FBCr 3               dspr4:
000FBCr 3               	; _BEEB clipping code copied from CPC Engine
000FBCr 3  A0 08        	ldy #var_newY
000FBEr 3  B1 rr        	lda (z80_ix), y		; old x coord
000FC0r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000FC2r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000FC4r 3               
000FC4r 3  A0 04        	ldy #var_X
000FC6r 3  B1 rr        	lda (z80_ix),y		; old x.
000FC8r 3  A0 09        	ldy #var_newX
000FCAr 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000FCCr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000FCEr 3               
000FCEr 3  A0 03        	ldy #var_Y
000FD0r 3  B1 rr        	lda (z80_ix),y		; old y.
000FD2r 3  A0 08        	ldy #var_newY
000FD4r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000FD6r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000FD8r 3               
000FD8r 3  A0 02        	ldy #var_Frame
000FDAr 3  B1 rr        	lda (z80_ix),y 		; old frame.
000FDCr 3  A0 07        	ldy #var_newFrame
000FDEr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000FE0r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000FE2r 3               
000FE2r 3  A0 01        	ldy #var_Image
000FE4r 3  B1 rr        	lda (z80_ix),y 		; old image.
000FE6r 3  A0 06        	ldy #var_newImage
000FE8r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000FEAr 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000FECr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000FEFr 3               dspr7:
000FEFr 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000FF2r 3  4C rr rr     	jmp dspr2
000FF5r 3               dspr3:
000FF5r 3               	; _BEEB clipping code copied from CPC Engine
000FF5r 3  A0 08        	ldy #var_newY
000FF7r 3  B1 rr        	lda (z80_ix), y		; old x coord
000FF9r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000FFBr 3  90 03        	bcc :+			; no, continue
000FFDr 3  4C rr rr     	jmp dspr2		; yes, don't display it.
001000r 3               :
001000r 3  20 rr rr     	jsr ssprib 		; show single sprite.
001003r 3  4C rr rr     	jmp dspr2
001006r 3               
001006r 3               ;-----------------------------------------
001006r 3               ; Get sprite address calculations.
001006r 3               ; gspran = new sprite, gsprad = old sprite.
001006r 3               ;
001006r 3               ; Input:
001006r 3               ;  IX = sprite address
001006r 3               ;-----------------------------------------
001006r 3               
001006r 3               gspran:
001006r 3  A0 08        	ldy #var_newY
001008r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
00100Ar 3  85 rr        	sta dispy
00100Cr 3  A0 09        	ldy #var_newX
00100Er 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
001010r 3  85 rr        	sta dispx
001012r 3  A0 06        	ldy #var_newImage
001014r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
001016r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
001019r 3               
001019r 3  A0 00        	ldy #0
00101Br 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
00101Dr 3  A0 07        	ldy #var_newFrame
00101Fr 3  18           	clc
001020r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
001022r 3  4C rr rr     	jmp gspra0
001025r 3               
001025r 3               ;-----------------------------------------
001025r 3               ; Calculate old sprite address
001025r 3               ;
001025r 3               ; Input:
001025r 3               ;  IX = sprite address
001025r 3               ;
001025r 3               ; Output:
001025r 3               ;  B  = right byte mask
001025r 3               ;  C  = left byte mask
001025r 3               ;  DE = spriteframe address
001025r 3               ;  scraddr = screenaddress(dispx,dispy)
001025r 3               ;-----------------------------------------
001025r 3               
001025r 3               gsprad:
001025r 3  A0 03        	ldy #var_Y
001027r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
001029r 3  85 rr        	sta dispy
00102Br 3  A0 04        	ldy #var_X
00102Dr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00102Fr 3  85 rr        	sta dispx
001031r 3  A0 01        	ldy #var_Image
001033r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
001035r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
001038r 3               
001038r 3  A0 00        	ldy #0
00103Ar 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
00103Cr 3  A0 02        	ldy #var_Frame
00103Er 3  18           	clc
00103Fr 3  71 rr        	adc (z80_ix),y 		; add frame number.
001041r 3               
001041r 3               gspra0:
001041r 3               .if rflag
001041r 3               	sta z80_e		; multiply by 32.
001041r 3               	lda #0
001041r 3               	sta z80_d
001041r 3               
001041r 3               	asl z80_e
001041r 3               	rol z80_d
001041r 3               	asl z80_e
001041r 3               	rol z80_d
001041r 3               	asl z80_e
001041r 3               	rol z80_d
001041r 3               	asl z80_e
001041r 3               	rol z80_d
001041r 3               .if bflag
001041r 3               	lda z80_e		; multiply by 48
001041r 3               	sta tmp1
001041r 3               	lda z80_d
001041r 3               	sta tmp2
001041r 3               .endif
001041r 3               	asl z80_e
001041r 3               	rol z80_d
001041r 3               .if bflag
001041r 3               	clc
001041r 3               	lda z80_e
001041r 3               	adc tmp1
001041r 3               	sta z80_e
001041r 3               	lda z80_d
001041r 3               	adc tmp2
001041r 3               	sta z80_d
001041r 3               .endif
001041r 3               .else
001041r 3  4A           	lsr a	  		; multiply by 128.
001042r 3  85 rr        	sta z80_d 		; store in d.
001044r 3  85 rr        	sta tmp1
001046r 3  A9 00        	lda #0
001048r 3  6A           	ror a
001049r 3  85 rr        	sta z80_e 		; got low byte.
00104Br 3  85 rr        	sta tmp2
00104Dr 3               .if bflag
00104Dr 3               	lsr tmp1		; multiply by 192
00104Dr 3               	ror tmp2
00104Dr 3               	clc
00104Dr 3               	lda tmp2
00104Dr 3               	adc z80_e
00104Dr 3               	sta z80_e
00104Dr 3               	lda tmp1
00104Dr 3               	adc z80_d
00104Dr 3               	sta z80_d
00104Dr 3               .endif
00104Dr 3               .endif
00104Dr 3  18           	clc 			; address of play sprites.
00104Er 3  A5 rr        	lda z80_e
001050r 3  69 rr        	adc #<sprgfx
001052r 3  85 rr        	sta z80_e
001054r 3  A5 rr        	lda z80_d
001056r 3  69 rr        	adc #>sprgfx
001058r 3  85 rr        	sta z80_d
00105Ar 3               
00105Ar 3  A5 rr        	lda dispx 		; y coordinate.
00105Cr 3  29 06        	and #6 			; position within byte boundary.
00105Er 3  AA           	tax	 		; low byte of table displacement.
00105Fr 3               .if rflag
00105Fr 3               	stx sprshft
00105Fr 3               .else
00105Fr 3  0A           	asl a	  		; multiply by 32.
001060r 3  0A           	asl a  			; already a multiple
001061r 3  0A           	asl a  			; of 2, so just 4
001062r 3               .if bflag
001062r 3               	sta tmp1
001062r 3               	asl a  			; shifts needed.
001062r 3               	clc
001062r 3               	adc tmp1
001062r 3               .else
001062r 3  0A           	asl a  			; shifts needed.
001063r 3               .endif
001063r 3  18           	clc 			; add to sprite address.
001064r 3  65 rr        	adc z80_e
001066r 3  85 rr        	sta z80_e
001068r 3  90 02        	bcc :+
00106Ar 3  E6 rr        	inc z80_d
00106Cr 3               :
00106Cr 3               .endif
00106Cr 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
00106Fr 3  85 rr        	sta z80_c 		; left mask.
001071r 3  BD rr rr     	lda spmask+1,x
001074r 3  85 rr        	sta z80_b 		; right mask.
001076r 3               ; Drop into screen address routine.
001076r 3  4C rr rr     	jmp scadd
001079r 3               
001079r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
00107Dr 3  0F F0 03 FC  
001081r 3               
001081r 3               
001081r 3               ;-----------------------------------------------------------
001081r 3               ; Animates a sprite.
001081r 3               ;
001081r 3               ; Input:
001081r 3               ;  IX = sprite address
001081r 3               ;  HL = last sprite address
001081r 3               ;-----------------------------------------------------------
001081r 3               
001081r 3               animsp:
001081r 3  25 rr        	and frmno
001083r 3  F0 01        	beq :+
001085r 3  60           	rts
001086r 3               :
001086r 3  A0 06        	ldy #var_newImage
001088r 3  B1 rr        	lda (z80_ix),y		; sprite image
00108Ar 3  20 rr rr     	jsr gfrm		; get frame data.
00108Dr 3               
00108Dr 3  E6 rr        	inc z80_l		; point to frames.
00108Fr 3  D0 02        	bne :+
001091r 3  E6 rr        	inc z80_h
001093r 3               :
001093r 3  A0 07        	ldy #var_newFrame
001095r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
001097r 3  18           	clc
001098r 3  69 01        	adc #1			; next one along.
00109Ar 3  A0 00        	ldy #0
00109Cr 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
00109Er 3  90 02        	bcc anims0		; no, not yet.
0010A0r 3  A9 00        	lda #0			; start at first frame.
0010A2r 3               anims0:
0010A2r 3  A0 07        	ldy #var_newFrame
0010A4r 3  91 rr        	sta (z80_ix),y		; new frame.
0010A6r 3  60           	rts
0010A7r 3               
0010A7r 3               ;--------------------------------------------------------------
0010A7r 3               ; Animate back
0010A7r 3               ;
0010A7r 3               ; Input:
0010A7r 3               ;  IX = sprite address
0010A7r 3               ;  HL = last sprite address
0010A7r 3               ;--------------------------------------------------------------
0010A7r 3               
0010A7r 3               animbk:
0010A7r 3  25 rr        	and frmno
0010A9r 3  F0 01        	beq :+
0010ABr 3  60           	rts
0010ACr 3               :
0010ACr 3  A0 06        	ldy #var_newImage
0010AEr 3  B1 rr        	lda (z80_ix),y		; sprite image.
0010B0r 3  20 rr rr     	jsr gfrm		; get frame data.
0010B3r 3               
0010B3r 3  E6 rr        	inc z80_l 		; point to frames.
0010B5r 3  D0 02        	bne :+
0010B7r 3  E6 rr        	inc z80_h
0010B9r 3               :
0010B9r 3  A0 07        	ldy #var_newFrame
0010BBr 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
0010BDr 3  F0 03        	beq :+
0010BFr 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
0010C2r 3               :
0010C2r 3  A0 00        	ldy #0
0010C4r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
0010C6r 3               rtanb0:
0010C6r 3  38           	sec
0010C7r 3  E9 01        	sbc #1			; next one along.
0010C9r 3  4C rr rr     	jmp anims0		; set new frame.
0010CCr 3               
0010CCr 3               ;--------------------------------------------------------------
0010CCr 3               ; Check for collision with other sprite, strict enforcement.
0010CCr 3               ;
0010CCr 3               ; Input:
0010CCr 3               ;  b		= sprite to test for
0010CCr 3               ;  ix		= current sprite pointer
0010CCr 3               ;
0010CCr 3               ; global:	b
0010CCr 3               ; local:	x,y,hl,de,skptr
0010CCr 3               ; calls:	-
0010CCr 3               ;--------------------------------------------------------------
0010CCr 3               
0010CCr 3               sktyp:
0010CCr 3  A9 rr        	lda #<sprtab				; sprite table.
0010CEr 3  85 rr        	sta z80_l
0010D0r 3  A9 rr        	lda #>sprtab
0010D2r 3  85 rr        	sta z80_h
0010D4r 3               numsp2:
0010D4r 3  A9 0C        	lda #NUMSPR				; number of sprites.
0010D6r 3  85 rr        	sta sktptr
0010D8r 3               sktyp0:
0010D8r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
0010DAr 3  85 rr        	sta skptr
0010DCr 3  A5 rr        	lda z80_h
0010DEr 3  85 rr        	sta skptr+1
0010E0r 3               
0010E0r 3  A0 00        	ldy #0
0010E2r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
0010E4r 3  C5 rr        	cmp z80_b				; is it the type we seek?
0010E6r 3  F0 1D        	beq coltyp				; yes, we can use this one.
0010E8r 3               sktyp1:
0010E8r 3  18           	clc
0010E9r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
0010EBr 3  69 11        	adc #TABSIZ				; size of each entry.
0010EDr 3  85 rr        	sta z80_l
0010EFr 3  A5 rr        	lda skptr+1
0010F1r 3  69 00        	adc #0
0010F3r 3  85 rr        	sta z80_h
0010F5r 3  C6 rr        	dec sktptr					; one less iteration.
0010F7r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0010F9r 3  A9 00        	lda #0					; default to ROM address - no sprite.
0010FBr 3  85 rr        	sta z80_l
0010FDr 3  85 rr        	sta z80_h
0010FFr 3  85 rr        	sta skptr				; store pointer to sprite.
001101r 3  85 rr        	sta skptr+1
001103r 3               
001103r 3  18           	clc					; don't return with zero flag set.
001104r 3  60           	rts 					; didn't find one.
001105r 3               
001105r 3               coltyp:
001105r 3  A0 00        	ldy #0
001107r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
001109r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
00110Br 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00110Dr 3               colty0:
00110Dr 3  A0 09        	ldy #9					; distance to x position in table.
00110Fr 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
001111r 3  85 rr        	sta z80_e
001113r 3  88           	dey
001114r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
001116r 3  85 rr        	sta z80_d
001118r 3               
001118r 3               ; Drop into collision detection.
001118r 3               
001118r 3               colc16:
001118r 3  A0 09        	ldy #9
00111Ar 3  B1 rr        	lda (z80_ix),y			 	; x coord.
00111Cr 3  38           	sec					; subtract x.
00111Dr 3  E5 rr        	sbc z80_e
00111Fr 3  B0 05        	bcs  colc1a 				; result is positive.
001121r 3  49 FF        	eor #$ff				; make negative positive.
001123r 3  18           	clc
001124r 3  69 01        	adc #1
001126r 3               colc1a:
001126r 3  C9 10        	cmp #16 				; within x range?
001128r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
00112Ar 3  85 rr        	sta z80_c				; store difference.
00112Cr 3               
00112Cr 3  A0 08        	ldy #8
00112Er 3  B1 rr        	lda (z80_ix),y				; y coord.
001130r 3  38           	sec
001131r 3  E5 rr        	sbc z80_d				; subtract y.
001133r 3  B0 05        	bcs colc1b				; result is positive.
001135r 3  49 FF        	eor #$ff				; make negative positive.
001137r 3  18           	clc
001138r 3  69 01        	adc #1
00113Ar 3               colc1b:
00113Ar 3  C9 10        	cmp #16					; within y range?
00113Cr 3  B0 AA        	bcs sktyp1 				; no - they've missed.
00113Er 3  18           	clc					; add x difference.
00113Fr 3  65 rr        	adc z80_c
001141r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001143r 3  B0 02        	bcs :+
001145r 3  38           	sec
001146r 3  60           	rts 					; carry set if there's a collision.
001147r 3               :
001147r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
00114Ar 3               colty1:
00114Ar 3  A5 rr        	lda z80_x  				; compare the two.
00114Cr 3  C5 rr        	cmp z80_l
00114Er 3  D0 09        	bne end_col
001150r 3  A5 rr        	lda z80_i
001152r 3  C5 rr        	cmp z80_h
001154r 3  D0 03        	bne end_col
001156r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
001159r 3               end_col:
001159r 3  4C rr rr     	jmp colty0
00115Cr 3               
00115Cr 3               ;-----------------------------------------------------------
00115Cr 3               ; Display number, left aligned
00115Cr 3               ;
00115Cr 3               ; Input:
00115Cr 3               ;  a		= number
00115Cr 3               ;
00115Cr 3               ; global:	-
00115Cr 3               ; local:	a,y,bc,hl,displ0
00115Cr 3               ; calls:	num2ch,dmsg3
00115Cr 3               ;-----------------------------------------------------------
00115Cr 3               
00115Cr 3               disply:
00115Cr 3  85 rr        	sta z80_a
00115Er 3  A9 rr        	lda #<displ0				; display workspace.
001160r 3  85 rr        	sta z80_c
001162r 3  A9 rr        	lda #>displ0
001164r 3  85 rr        	sta z80_b
001166r 3  A5 rr        	lda z80_a
001168r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
00116Br 3               displ1:
00116Br 3  C6 rr        	dec z80_c				; back one character.
00116Dr 3  D0 02        	bne :+
00116Fr 3  C6 rr        	dec z80_b
001171r 3               :
001171r 3  A0 00        	ldy #0
001173r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
001175r 3  09 80        	ora #128				; insert end marker.
001177r 3  91 rr        	sta (z80_bc),y				; new value.
001179r 3               
001179r 3  A9 rr        	lda #<displ0				; display space.
00117Br 3  85 rr        	sta z80_l
00117Dr 3  A9 rr        	lda #>displ0
00117Fr 3  85 rr        	sta z80_h
001181r 3  4C rr rr     	jmp dmsg3				; display the string.
001184r 3               
001184r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
001188r 3               
001188r 3               ;----------------------------------------------------------------
001188r 3               ; Initialise screen.
001188r 3               ;
001188r 3               ; global:	roomtb,scno
001188r 3               ; local:	-
001188r 3               ; calls:	tstcs
001188r 3               ;----------------------------------------------------------------
001188r 3               
001188r 3               initsc:
001188r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
00118Br 3  20 rr rr     	jsr tstsc 			; find displacement.
00118Er 3  C9 FF        	cmp #255 			; is it valid?
001190r 3  F0 02        	beq init_end 			; no, it's rubbish.
001192r 3  85 rr        	sta scno			; store new room number.
001194r 3               init_end:
001194r 3  60           	rts
001195r 3               
001195r 3               ;----------------------------------------------------------------
001195r 3               ; Test screen.
001195r 3               ;
001195r 3               ; global:	-
001195r 3               ; local:	x
001195r 3               ; calls:	-
001195r 3               ;----------------------------------------------------------------
001195r 3               
001195r 3               tstsc:
001195r 3  85 rr        	sta tmproom
001197r 3  18           	clc
001198r 3  69 03        	adc #MAPWID 			; add width in case we"re negative.
00119Ar 3  AA           	tax 				; add displacement to map data.
00119Br 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
00119Er 3  60           	rts
00119Fr 3               
00119Fr 3               ;--------------------------
00119Fr 3               ; Screen left.
00119Fr 3               ;--------------------------
00119Fr 3               
00119Fr 3               scrl:
00119Fr 3  AD rr rr     	lda roomtb 			; present room table pointer.
0011A2r 3  38           	sec
0011A3r 3  E9 01        	sbc #1				; room left.
0011A5r 3               scrl0:
0011A5r 3  20 rr rr     	jsr tstsc			; test screen.
0011A8r 3  C9 FF        	cmp #255			; is there a screen this way?
0011AAr 3  D0 01        	bne :+
0011ACr 3  60           	rts				; no, return to loop.
0011ADr 3               :
0011ADr 3  A5 rr        	lda tmproom			; restore room displacement.
0011AFr 3  8D rr rr     	sta roomtb			; new room table position.
0011B2r 3               scrl1:
0011B2r 3  20 rr rr     	jsr initsc 			; set new screen.
0011B5r 3  A9 02        	lda #2
0011B7r 3  85 rr        	sta restfl 			; set it.
0011B9r 3  60           	rts
0011BAr 3               scrr:
0011BAr 3  AD rr rr     	lda roomtb 			; room table pointer.
0011BDr 3  18           	clc
0011BEr 3  69 01        	adc #1				; room right.
0011C0r 3  4C rr rr     	jmp scrl0
0011C3r 3               scru:
0011C3r 3  AD rr rr     	lda roomtb 			; room table pointer.
0011C6r 3  38           	sec
0011C7r 3  E9 03        	sbc #MAPWID 			; room up.
0011C9r 3  4C rr rr     	jmp scrl0
0011CCr 3               scrd:
0011CCr 3  AD rr rr     	lda roomtb 			; room table pointer.
0011CFr 3  18           	clc
0011D0r 3  69 03        	adc #MAPWID 			; room down.
0011D2r 3  4C rr rr     	jmp scrl0
0011D5r 3               
0011D5r 3               ;-----------------------------------------
0011D5r 3               ; Jump to new screen.
0011D5r 3               ;-----------------------------------------
0011D5r 3               
0011D5r 3               nwscr:
0011D5r 3  A2 00        	ldx #0				; start of map data.
0011D7r 3               nwscr0:
0011D7r 3  DD rr rr     	cmp mapdat,x
0011DAr 3  F0 06        	beq nwscr1			; have we found a match for screen?
0011DCr 3  E8           	inx 				; next room.
0011DDr 3  E0 50        	cpx #80				; zero room count, 80 to search.
0011DFr 3  D0 F6        	bne nwscr0			; keep looking.
0011E1r 3  60           	rts
0011E2r 3               nwscr1:
0011E2r 3  8E rr rr     	stx roomtb			; set the map position.
0011E5r 3  4C rr rr     	jmp scrl1			; draw new room.
0011E8r 3               
0011E8r 3               
0011E8r 3               ;----------------------------------------------------------
0011E8r 3               ; Gravity processing.
0011E8r 3               ;----------------------------------------------------------
0011E8r 3               
0011E8r 3               grav:
0011E8r 3  A0 0D        	ldy #13
0011EAr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
0011ECr 3  85 rr        	sta z80_l
0011EEr 3  A0 0E        	ldy #14
0011F0r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
0011F2r 3  85 rr        	sta z80_h
0011F4r 3  05 rr        	ora z80_l			; merge in low byte.
0011F6r 3  D0 01        	bne :+
0011F8r 3  60           	rts				; if neither is set, we're not in the air.
0011F9r 3               :
0011F9r 3  A0 00        	ldy #0
0011FBr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
0011FDr 3  85 rr        	sta z80_a
0011FFr 3  C9 63        	cmp #99				; reached the end?
001201r 3  D0 0C        	bne grav0			; no, continue.
001203r 3               grav2:
001203r 3  C6 rr        	dec z80_l			; go back to previous value.
001205r 3  C9 FF        	cmp #$ff
001207r 3  D0 02        	bne :+
001209r 3  C6 rr        	dec z80_h
00120Br 3               :
00120Br 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
00120Dr 3  85 rr        	sta z80_a
00120Fr 3               grav0:
00120Fr 3  E6 rr        	inc z80_l			; point to next table entry.
001211r 3  D0 02        	bne :+
001213r 3  E6 rr        	inc z80_h
001215r 3               :
001215r 3  A5 rr        	lda z80_l
001217r 3  A0 0D        	ldy #13
001219r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
00121Br 3  A5 rr        	lda z80_h
00121Dr 3  A0 0E        	ldy #14
00121Fr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
001221r 3               grav1:
001221r 3  A5 rr        	lda z80_a
001223r 3  D0 01        	bne :+				; any movement required?
001225r 3  60           	rts				; no, not this time.
001226r 3               :
001226r 3  A5 rr        	lda z80_a
001228r 3  C9 80        	cmp #128			; is it up or down?
00122Ar 3  B0 15        	bcs gravu			; it's up.
00122Cr 3               gravd:
00122Cr 3  85 rr        	sta z80_b			; set pixels to move.
00122Er 3               gravd0:
00122Er 3  20 rr rr     	jsr cangd			; can we go down?
001231r 3  D0 28        	bne gravst			; can't move down, so stop.
001233r 3  A0 08        	ldy #8
001235r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
001237r 3  18           	clc
001238r 3  69 01        	adc #1
00123Ar 3  91 rr        	sta (z80_ix),y
00123Cr 3  C6 rr        	dec z80_b
00123Er 3  D0 EE        	bne gravd0
001240r 3  60           	rts
001241r 3               gravu:
001241r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
001243r 3  18           	clc
001244r 3  69 01        	adc #1
001246r 3  85 rr        	sta z80_b			; set pixels to move.
001248r 3               gravu0:
001248r 3  20 rr rr     	jsr cangu			; can we go up?
00124Br 3  D0 6E        	bne ifalls			; can't move up, go down next.
00124Dr 3  A0 08        	ldy #8
00124Fr 3  B1 rr        	lda (z80_ix),y
001251r 3  38           	sec
001252r 3  E9 01        	sbc #1
001254r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
001256r 3  C6 rr        	dec z80_b
001258r 3  D0 EE        	bne gravu0
00125Ar 3  60           	rts
00125Br 3               gravst:
00125Br 3  A0 0D        	ldy #var_jumpLo
00125Dr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
00125Fr 3  85 rr        	sta z80_l
001261r 3  A0 0E        	ldy #var_jumpHi
001263r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
001265r 3  85 rr        	sta z80_h
001267r 3               
001267r 3  A9 00        	lda #0				; null value in pointer.
001269r 3  A0 0D        	ldy #var_jumpLo
00126Br 3  91 rr        	sta (z80_ix),y			; store new pointer low.
00126Dr 3  C8           	iny
00126Er 3  91 rr        	sta (z80_ix),y			; store new pointer high.
001270r 3               
001270r 3  A0 00        	ldy #0
001272r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
001274r 3  C9 63        	cmp #99				; is it the end marker?
001276r 3               evftf:
001276r 3  F0 01        	beq :+				; yes, fallen too far.
001278r 3  60           	rts
001279r 3               :
001279r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
00127Cr 3               
00127Cr 3               ;------------------------------------------------
00127Cr 3               ; Initiate fall check.
00127Cr 3               ;------------------------------------------------
00127Cr 3               
00127Cr 3               ifall:
00127Cr 3  A0 0D        	ldy #var_jumpLo
00127Er 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
001280r 3  85 rr        	sta z80_l
001282r 3  A0 0E        	ldy #var_jumpHi
001284r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
001286r 3  85 rr        	sta z80_h			; high byte in accumulator.
001288r 3  05 rr        	ora z80_l			; merge in low byte.
00128Ar 3  F0 01        	beq :+
00128Cr 3  60           	rts				; if either is set, we're already in the air.
00128Dr 3               :
00128Dr 3  A0 09        	ldy #9
00128Fr 3  B1 rr        	lda (z80_ix),y			; y coordinate.
001291r 3  85 rr        	sta dispx
001293r 3  A0 08        	ldy #8
001295r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
001297r 3  18           	clc
001298r 3               numsp7:
001298r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
00129Ar 3  85 rr        	sta dispy			; set up test coordinates.
00129Cr 3  20 rr rr     	jsr tstbl			; get map address.
00129Fr 3  20 rr rr     	jsr plchk			; block, platform check.
0012A2r 3  F0 01        	beq :+
0012A4r 3  60           	rts				; it's solid, don't fall.
0012A5r 3               :
0012A5r 3  E6 rr        	inc bufaddr			; look right one cell.
0012A7r 3  20 rr rr     	jsr plchk			; block, platform check.
0012AAr 3  F0 01        	beq :+
0012ACr 3  60           	rts				; it's solid, don't fall.
0012ADr 3               :
0012ADr 3  A5 rr        	lda dispx			; y coordinate.
0012AFr 3  29 07        	and #7				; position straddling block cells.
0012B1r 3  F0 08        	beq ifalls			; no more checks needed.
0012B3r 3  E6 rr        	inc bufaddr			; look to third cell.
0012B5r 3  20 rr rr     	jsr plchk			; block, platform check.
0012B8r 3  F0 01        	beq :+
0012BAr 3  60           	rts				; it's solid, don't fall.
0012BBr 3               :
0012BBr 3               ifalls:
0012BBr 3  A9 rr        	lda #<jtab			; jump table start.
0012BDr 3  85 rr        	sta z80_l
0012BFr 3  A9 rr        	lda #>jtab
0012C1r 3  85 rr        	sta z80_h
0012C3r 3               ifal0:
0012C3r 3  E6 rr        	inc z80_l			; point to next value.
0012C5r 3  D0 02        	bne :+
0012C7r 3  E6 rr        	inc z80_h
0012C9r 3               :
0012C9r 3  A0 00        	ldy #0
0012CBr 3  B1 rr        	lda (z80_hl),y			; fetch value.
0012CDr 3  F0 F4        	beq ifal0			; no, get next value.
0012CFr 3  C9 63        	cmp #99				; reached end of table?
0012D1r 3  D0 01        	bne :+
0012D3r 3  60           	rts				; yes, don't fall.
0012D4r 3               :
0012D4r 3  C9 80        	cmp #128			; is it going up?
0012D6r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0012D8r 3               
0012D8r 3  A0 0D        	ldy #13
0012DAr 3  A5 rr        	lda z80_l
0012DCr 3  91 rr        	sta (z80_ix),y 			; set jump low.
0012DEr 3  A0 0E        	ldy #14
0012E0r 3  A5 rr        	lda z80_h
0012E2r 3  91 rr        	sta (z80_ix),y 			; set jump high.
0012E4r 3  60           	rts
0012E5r 3               
0012E5r 3               
0012E5r 3               ;----------------------------------------------------
0012E5r 3               ; Get frame data for a particular sprite.
0012E5r 3               ; Input:
0012E5r 3               ;  a		= framenumer
0012E5r 3               ; Output:
0012E5r 3               ;  hl		= frame address
0012E5r 3               ;
0012E5r 3               ; global:	hl,frmptr
0012E5r 3               ; local:	-
0012E5r 3               ; calls:	-
0012E5r 3               ;----------------------------------------------------
0012E5r 3               
0012E5r 3               gfrm:
0012E5r 3  0A           	asl a	 		 	; multiple of 2.
0012E6r 3  18           	clc
0012E7r 3  6D rr rr     	adc frmptr 			; frames used by game.
0012EAr 3  85 rr        	sta z80_l
0012ECr 3  AD rr rr     	lda frmptr+1
0012EFr 3  69 00        	adc #0
0012F1r 3  85 rr        	sta z80_h 			; point to frame start.
0012F3r 3  60           	rts
0012F4r 3               
0012F4r 3               ;----------------------------------------------------
0012F4r 3               ; Find sprite list for current room.
0012F4r 3               ;
0012F4r 3               ; global:	hl
0012F4r 3               ; local:	x,y
0012F4r 3               ; calls:	-
0012F4r 3               ;----------------------------------------------------
0012F4r 3               
0012F4r 3               sprlst:
0012F4r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
0012F6r 3  85 rr        	sta z80_l
0012F8r 3  A9 rr        	lda #>nmedat
0012FAr 3  85 rr        	sta z80_h
0012FCr 3  A6 rr        	ldx scno 			; screen number.
0012FEr 3  D0 01        	bne sprls2 			; is it the first screen?
001300r 3  60           	rts 				; yes, don't need to search data.
001301r 3               sprls2:
001301r 3  A0 00        	ldy #0
001303r 3               sprls1:
001303r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
001305r 3  C9 FF        	cmp #255			; is it an end marker?
001307r 3  F0 0E        	beq sprls0 			; yes, end of this room.
001309r 3               
001309r 3  18           	clc 				; point to next sprite in list.
00130Ar 3  A5 rr        	lda z80_l
00130Cr 3  69 04        	adc #NMESIZ
00130Er 3  85 rr        	sta z80_l
001310r 3  90 02        	bcc :+
001312r 3  E6 rr        	inc z80_h
001314r 3               :
001314r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
001317r 3               sprls0:
001317r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
001319r 3  D0 02        	bne :+
00131Br 3  E6 rr        	inc z80_h
00131Dr 3               :
00131Dr 3  CA           	dex
00131Er 3  D0 E3        	bne sprls1 			; continue until room found.
001320r 3  60           	rts
001321r 3               
001321r 3               
001321r 3               ;----------------------------------------------------
001321r 3               ; Clear all but a single player sprite.
001321r 3               ;
001321r 3               ; global:	-
001321r 3               ; local:	x,y,ix
001321r 3               ; calls:	-
001321r 3               ;----------------------------------------------------
001321r 3               
001321r 3               nspr:
001321r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001323r 3  85 rr        	sta sprcnt
001325r 3  A9 rr        	lda #<sprtab 			; sprite table.
001327r 3  85 rr        	sta z80_x
001329r 3  A9 rr        	lda #>sprtab
00132Br 3  85 rr        	sta z80_i
00132Dr 3               nspr0:
00132Dr 3  A0 00        	ldy #0 				; fetch sprite type.
00132Fr 3  B1 rr        	lda (z80_ix),y 			; is it a player?
001331r 3  F0 1A        	beq nspr1 			; yes, keep this one.
001333r 3               
001333r 3  A9 FF        	lda #255
001335r 3  A0 00        	ldy #0 				; fetch sprite type.
001337r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001339r 3  A0 05        	ldy #5
00133Br 3  91 rr        	sta (z80_ix),y 			; remove next type.
00133Dr 3               
00133Dr 3  18           	clc	 			; next sprite.
00133Er 3  A5 rr        	lda z80_x
001340r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001342r 3  85 rr        	sta z80_x
001344r 3  90 02        	bcc :+
001346r 3  E6 rr        	inc z80_i
001348r 3               :
001348r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
00134Ar 3  D0 E1        	bne nspr0
00134Cr 3  60           	rts
00134Dr 3               nspr1:
00134Dr 3  A9 FF        	lda #255
00134Fr 3  A0 00        	ldy #0
001351r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001353r 3               
001353r 3  18           	clc	 			; point to next sprite.
001354r 3  A5 rr        	lda z80_x
001356r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001358r 3  85 rr        	sta z80_x
00135Ar 3  90 02        	bcc :+
00135Cr 3  E6 rr        	inc z80_i
00135Er 3               :
00135Er 3  C6 rr        	dec sprcnt	 			; one less to do.
001360r 3  D0 01        	bne nspr2
001362r 3  60           	rts
001363r 3               nspr2:
001363r 3  A9 FF        	lda #255
001365r 3  A0 00        	ldy #0
001367r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001369r 3  A0 05        	ldy #5
00136Br 3  91 rr        	sta (z80_ix),y 			; remove next type.
00136Dr 3               
00136Dr 3  18           	clc	 			; next sprite.
00136Er 3  A5 rr        	lda z80_x
001370r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001372r 3  85 rr        	sta z80_x
001374r 3  90 02        	bcc :+
001376r 3  E6 rr        	inc z80_i
001378r 3               :
001378r 3  C6 rr        	dec sprcnt	 			; one less space in table.
00137Ar 3  D0 E7        	bne nspr2
00137Cr 3  60           	rts
00137Dr 3               
00137Dr 3               ;----------------------------------------------------------
00137Dr 3               ; Two initialisation routines.
00137Dr 3               ; Initialise sprites - copy everything from list to table.
00137Dr 3               ;
00137Dr 3               ; global:	-
00137Dr 3               ; local:	x,y,ix
00137Dr 3               ; calls:	cpsp
00137Dr 3               ;----------------------------------------------------------
00137Dr 3               
00137Dr 3               ispr:
00137Dr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00137Fr 3  85 rr        	sta sprcnt
001381r 3  A9 rr        	lda #<sprtab			; sprite table.
001383r 3  85 rr        	sta z80_x
001385r 3  A9 rr        	lda #>sprtab
001387r 3  85 rr        	sta z80_i
001389r 3               ispr2:
001389r 3  A0 00        	ldy #0
00138Br 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
00138Dr 3  C9 FF        	cmp #255 			; is it an end marker?
00138Fr 3  D0 01        	bne :+
001391r 3  60           	rts 				; yes, no more to do.
001392r 3               :
001392r 3               ispr1:
001392r 3  A0 00        	ldy #0
001394r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
001396r 3  C9 FF        	cmp #255 			; is it enabled yet?
001398r 3  D0 08        	bne ispr4			; yes, try another slot.
00139Ar 3               
00139Ar 3  A0 05        	ldy #5
00139Cr 3  B1 rr        	lda (z80_ix),y		 	; next type.
00139Er 3  C9 FF        	cmp #255 			; is it enabled yet?
0013A0r 3  F0 10        	beq ispr3 			; no, process this one.
0013A2r 3               ispr4:
0013A2r 3  18           	clc 				; next sprite.
0013A3r 3  A5 rr        	lda z80_x
0013A5r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0013A7r 3  85 rr        	sta z80_x
0013A9r 3  90 02        	bcc :+
0013ABr 3  E6 rr        	inc z80_i
0013ADr 3               :
0013ADr 3  C6 rr        	dec sprcnt
0013AFr 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0013B1r 3  60           	rts  				; no more room in table.
0013B2r 3               ispr3:
0013B2r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
0013B5r 3  C6 rr        	dec sprcnt			; one less space in the table.
0013B7r 3  D0 D0        	bne ispr2
0013B9r 3  60           	rts
0013BAr 3               
0013BAr 3               
0013BAr 3               ;-----------------------------------------------------------------------
0013BAr 3               ; Initialise sprites - but not player, we're keeping the old one.
0013BAr 3               ;
0013BAr 3               ; global:	-
0013BAr 3               ; local:	x,y,ix
0013BAr 3               ; calls:	cpsp
0013BAr 3               ;-----------------------------------------------------------------------
0013BAr 3               
0013BAr 3               kspr:
0013BAr 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0013BCr 3  A9 rr        	lda #<sprtab 			; sprite table.
0013BEr 3  85 rr        	sta z80_x
0013C0r 3  A9 rr        	lda #>sprtab
0013C2r 3  85 rr        	sta z80_i
0013C4r 3               kspr2:
0013C4r 3  A0 00        	ldy #0
0013C6r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0013C8r 3  C9 FF        	cmp #255 			; is it an end marker?
0013CAr 3  D0 01        	bne :+
0013CCr 3  60           	rts 				; yes, no more to do.
0013CDr 3               :
0013CDr 3  C9 00        	cmp #0
0013CFr 3  D0 0E        	bne kspr1 			; no, add to table as normal.
0013D1r 3               
0013D1r 3  18           	clc 				; next sprite.
0013D2r 3  A5 rr        	lda z80_l
0013D4r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0013D6r 3  85 rr        	sta z80_l
0013D8r 3  90 02        	bcc :+
0013DAr 3  E6 rr        	inc z80_h
0013DCr 3               :
0013DCr 3  4C rr rr     	jmp kspr2
0013DFr 3               kspr1:
0013DFr 3  A0 00        	ldy #0 				; fetch sprite type.
0013E1r 3  B1 rr        	lda (z80_ix),y
0013E3r 3  C9 FF        	cmp #255 			; is it enabled yet?
0013E5r 3  D0 08        	bne kspr4 			; yes, try another slot.
0013E7r 3               
0013E7r 3  A0 05        	ldy #5 				; next type.
0013E9r 3  B1 rr        	lda (z80_ix),y
0013EBr 3  C9 FF        	cmp #255 			; is it enabled yet?
0013EDr 3  F0 0F        	beq kspr3 			; no, process this one.
0013EFr 3               kspr4:
0013EFr 3  18           	clc 				; next sprite.
0013F0r 3  A5 rr        	lda z80_x
0013F2r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0013F4r 3  85 rr        	sta z80_x
0013F6r 3  90 02        	bcc :+
0013F8r 3  E6 rr        	inc z80_i
0013FAr 3               :
0013FAr 3  CA           	dex	 			; repeat for remaining sprites.
0013FBr 3  D0 E2        	bne kspr1
0013FDr 3  60           	rts  				; no more room in table.
0013FEr 3               kspr3:
0013FEr 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
001401r 3  CA           	dex	 			; one less space in the table.
001402r 3  D0 C0        	bne kspr2
001404r 3  60           	rts
001405r 3               
001405r 3               ;----------------------------------------------
001405r 3               ; Copy sprite from list to table.
001405r 3               ;
001405r 3               ; global:	hl,ix
001405r 3               ; local:	y
001405r 3               ; calls:	evnt09
001405r 3               ;----------------------------------------------
001405r 3               
001405r 3               cpsp:
001405r 3  A0 00        	ldy #0					; fetch byte from table.
001407r 3  B1 rr        	lda (z80_hl),y
001409r 3               	; y=var_Type
001409r 3  91 rr        	sta (z80_ix),y			; set up type.
00140Br 3  A0 05        	ldy #var_newType
00140Dr 3  91 rr        	sta (z80_ix),y 			; set up type.
00140Fr 3               
00140Fr 3  E6 rr        	inc z80_l 				; move to next byte.
001411r 3  D0 02        	bne :+
001413r 3  E6 rr        	inc z80_h
001415r 3               :
001415r 3  A0 00        	ldy #0 					; fetch byte from table.
001417r 3  B1 rr        	lda (z80_hl),y
001419r 3  A0 06        	ldy #var_newImage
00141Br 3  91 rr        	sta (z80_ix),y			; set up image.
00141Dr 3               
00141Dr 3  E6 rr        	inc z80_l 				; move to next byte.
00141Fr 3  D0 02        	bne :+
001421r 3  E6 rr        	inc z80_h
001423r 3               :
001423r 3  A0 00        	ldy #0
001425r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
001427r 3  A0 08        	ldy #var_newY
001429r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00142Br 3               
00142Br 3  A9 C8        	lda #200 				; set initial coordinate off screen.
00142Dr 3  A0 03        	ldy #var_Y
00142Fr 3  91 rr        	sta (z80_ix),y
001431r 3               
001431r 3  E6 rr        	inc z80_l 				; move to next byte.
001433r 3  D0 02        	bne :+
001435r 3  E6 rr        	inc z80_h
001437r 3               :
001437r 3  A0 00        	ldy #0 					; fetch byte from table.
001439r 3  B1 rr        	lda (z80_hl),y
00143Br 3  A0 09        	ldy #var_newX
00143Dr 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00143Fr 3               
00143Fr 3  E6 rr        	inc z80_l 				; move to next byte.
001441r 3  D0 02        	bne :+
001443r 3  E6 rr        	inc z80_h
001445r 3               :
001445r 3  A9 00        	lda #0					; zeroes in accumulator.
001447r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
001449r 3  91 rr        	sta (z80_ix),y
00144Br 3  A0 0A        	ldy #var_Direction 		; reset direction.
00144Dr 3  91 rr        	sta (z80_ix),y
00144Fr 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
001451r 3  91 rr        	sta (z80_ix),y
001453r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
001455r 3  91 rr        	sta (z80_ix),y
001457r 3               
001457r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
001459r 3  A0 10        	ldy #var_dataHi
00145Br 3  91 rr        	sta (z80_ix),y
00145Dr 3               evis0:
00145Dr 3  A5 rr        	lda z80_i
00145Fr 3  48           	pha
001460r 3  A5 rr        	lda z80_x
001462r 3  48           	pha
001463r 3  A5 rr        	lda z80_h
001465r 3  48           	pha
001466r 3  A5 rr        	lda z80_l
001468r 3  48           	pha
001469r 3               
001469r 3  20 rr rr     	jsr evnt09 				; perform event.
00146Cr 3               
00146Cr 3  68           	pla
00146Dr 3  85 rr        	sta z80_l
00146Fr 3  68           	pla
001470r 3  85 rr        	sta z80_h
001472r 3  68           	pla
001473r 3  85 rr        	sta z80_x
001475r 3  68           	pla
001476r 3  85 rr        	sta z80_i
001478r 3               
001478r 3  18           	clc
001479r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
00147Br 3  69 11        	adc #TABSIZ		 	; next sprite.
00147Dr 3  85 rr        	sta z80_x
00147Fr 3  90 02        	bcc :+
001481r 3  E6 rr        	inc z80_i
001483r 3               :
001483r 3  60           	rts
001484r 3               
001484r 3               
001484r 3               ;-------------------------------------
001484r 3               ; Clear the play area window.
001484r 3               ;-------------------------------------
001484r 3               
001484r 3               clw:
001484r 3  AD rr rr     	lda wintop			; get coordinates of window.
001487r 3  85 rr        	sta dispy			; put into dispx for calculation.
001489r 3  AD rr rr     	lda winlft
00148Cr 3  85 rr        	sta dispx
00148Er 3               
00148Er 3  AD rr rr     	lda winhgt			; height of window.
001491r 3  85 rr        	sta rrow			; copy to b register.
001493r 3               clw3:
001493r 3  AD rr rr     	lda winwid 			; width of window.
001496r 3  85 rr        	sta rcol
001498r 3               clw2:
001498r 3  20 rr rr     	jsr gprad 			; get print address.
00149Br 3  A9 00        	lda #0				; zero byte to write.
00149Dr 3  A2 07        	ldx #7				; pixel height of each cell.
00149Fr 3               clw1:
00149Fr 3  BC rr rr     	ldy scrtab,x
0014A2r 3  91 rr        	sta (scraddr),y 			; copy to screen.
0014A4r 3  CA           	dex				; next screen row down.
0014A5r 3  10 F8        	bpl clw1
0014A7r 3               
0014A7r 3  E6 rr        	inc dispx			; next column.
0014A9r 3  C6 rr        	dec rcol			; one less to do.
0014ABr 3  D0 EB        	bne clw2			; repeat for remaining columns.
0014ADr 3               
0014ADr 3  AD rr rr     	lda winlft			; get left edge.
0014B0r 3  85 rr        	sta dispx 			; reset x.
0014B2r 3  E6 rr        	inc dispy 			; next line down.
0014B4r 3               
0014B4r 3  C6 rr        	dec rrow
0014B6r 3  D0 DB        	bne clw3			; repeat down the screen.
0014B8r 3               
0014B8r 3  AD rr rr     	lda wintop			; get coordinates of window.
0014BBr 3  85 rr        	sta chary			; put into display position.
0014BDr 3  AD rr rr     	lda winlft
0014C0r 3  85 rr        	sta charx
0014C2r 3  60           	rts
0014C3r 3               
0014C3r 3               
0014C3r 3               ;----------------------------------------------------------
0014C3r 3               ; Effects code.
0014C3r 3               ; Ticker routine is called 25 times per second.
0014C3r 3               ;
0014C3r 3               ; txtini = text scroller address
0014C3r 3               ; txtscr = left text screen address
0014C3r 3               ; txtwid = scroller width
0014C3r 3               ; txtbit = 128
0014C3r 3               ; X      = message nr
0014C3r 3               ;----------------------------------------------------------
0014C3r 3               
0014C3r 3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
0014C7r 3  20 28 30 38  
0014CBr 3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
0014CFr 3  60 68 70 78  
0014D3r 3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
0014D7r 3  A0 A8 B0 B8  
0014DBr 3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
0014DFr 3  E0 E8 F0 F8  
0014E3r 3               .if sflag
0014E3r 3               scrly:
0014E3r 3               	rts
0014E3r 3               	.word txtscr         	; set scr_l = left screen address.
0014E3r 3               	sta scr_l
0014E3r 3               	sta tmp_byte		; tmp_byte = lb left screen address
0014E3r 3               	lda txtscr+1
0014E3r 3               	sta scr_l+1
0014E3r 3               	sta scr_r+1		; set hb scr_r = hb left screen address
0014E3r 3               
0014E3r 3               	stx xtmp		; save x
0014E3r 3               
0014E3r 3               	ldx txtwid
0014E3r 3               	dex
0014E3r 3               	ldy scrollpos,x
0014E3r 3               	tya
0014E3r 3               	clc
0014E3r 3               	adc scr_l
0014E3r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
0014E3r 3               
0014E3r 3               	lda #8
0014E3r 3               	sta line_cnt
0014E3r 3               scrly1:
0014E3r 3               	ldx txtwid		; set txtwide
0014E3r 3               	dex
0014E3r 3               	clc
0014E3r 3               scrly0:
0014E3r 3               	ldy scrollpos,x
0014E3r 3               	lda (scr_l),y		; scroll 1 line
0014E3r 3               	rol a
0014E3r 3               	sta (scr_l),y
0014E3r 3               	dex
0014E3r 3               	bpl scrly0
0014E3r 3               
0014E3r 3               	inc scr_l
0014E3r 3               	dec line_cnt
0014E3r 3               	bne scrly1		; repeat 8 times
0014E3r 3               
0014E3r 3               	lda txtpos 		; get text pointer.
0014E3r 3               	sta scr_txt
0014E3r 3               	lda txtpos+1
0014E3r 3               	sta scr_txt+1
0014E3r 3               
0014E3r 3               	ldy #0
0014E3r 3               	lda (scr_txt),y 	; find character we're displaying.
0014E3r 3               	and #127 		; remove end marker bit if applicable.
0014E3r 3               	cmp #13			; is it newline?
0014E3r 3               	bne scrly5 		; no, it's okay.
0014E3r 3               	lda #32			; convert to a space instead.
0014E3r 3               scrly5:
0014E3r 3               	sta fntaddr		; calculate char address
0014E3r 3               	lda #0
0014E3r 3               	sta fntaddr+1
0014E3r 3               	asl fntaddr  		; multiply char by 8.
0014E3r 3               	rol fntaddr+1
0014E3r 3               	asl fntaddr
0014E3r 3               	rol fntaddr+1
0014E3r 3               	asl fntaddr
0014E3r 3               	rol fntaddr+1
0014E3r 3               	lda fntaddr
0014E3r 3               	clc
0014E3r 3               	adc #<(FONT-256)
0014E3r 3               	sta scrly3+1		; that's the low byte.
0014E3r 3               	lda fntaddr+1
0014E3r 3               	adc #>(FONT-256)
0014E3r 3               	sta scrly3+2		; add displacement.
0014E3r 3               
0014E3r 3               	ldy #0
0014E3r 3               scrly3:
0014E3r 3               	lda $3333,y		; get image of char line.
0014E3r 3               	and txtbit
0014E3r 3               	beq scrly2		; don't plot pixel
0014E3r 3               	lda (scr_r),y
0014E3r 3               	clc
0014E3r 3               	ora #1
0014E3r 3               	sta (scr_r),y		; plot pixel
0014E3r 3               scrly2:
0014E3r 3               	iny			; next line of char.
0014E3r 3               	cpy #8
0014E3r 3               	bne scrly3
0014E3r 3               
0014E3r 3               	lsr txtbit		; bit of text to display.
0014E3r 3               	bcs :+
0014E3r 3               	rts
0014E3r 3               :
0014E3r 3               	ldy #0
0014E3r 3               	lda (scr_txt),y 	; what was the character?
0014E3r 3               	asl a	  		; end of message?
0014E3r 3               	bcs scrly4
0014E3r 3               	inc txtpos
0014E3r 3               	bne :+
0014E3r 3               	inc txtpos+1
0014E3r 3               :
0014E3r 3               	jmp scrly6 		; not yet - continue.
0014E3r 3               scrly4:
0014E3r 3               	lda txtini 		; start of scrolling message.
0014E3r 3               	sta txtpos
0014E3r 3               	lda txtini+1
0014E3r 3               	sta txtpos+1
0014E3r 3               scrly6:
0014E3r 3               	lda #128
0014E3r 3               	sta txtbit
0014E3r 3               	ldx xtmp
0014E3r 3               	rts
0014E3r 3               
0014E3r 3               ;scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0014E3r 3               tmp_byte:	.byte 0
0014E3r 3               line_cnt:	.byte 0
0014E3r 3               
0014E3r 3               ;-------------------------------------------------------
0014E3r 3               ; Entry TICKER command
0014E3r 3               ;
0014E3r 3               ; Entry:
0014E3r 3               ;  z80_b = message nr
0014E3r 3               ;  z80_c = width
0014E3r 3               ;-------------------------------------------------------
0014E3r 3               
0014E3r 3               iscrly:
0014E3r 3               	jsr prescr 		; set up display position.
0014E3r 3               	lda #<msgdat 		; text messages.
0014E3r 3               	sta z80_l
0014E3r 3               	lda #>msgdat
0014E3r 3               	sta z80_h
0014E3r 3               	lda z80_c 		; width.
0014E3r 3               	sec
0014E3r 3               	sbc #1			; subtract one.
0014E3r 3               	cmp #32 		; is it between 1 and 32?
0014E3r 3               	bcc :+
0014E3r 3               	lda #$60
0014E3r 3               	jmp iscrl0		; no, disable messages.
0014E3r 3               :
0014E3r 3               	ldx z80_b		; message number.
0014E3r 3               	jsr getwrd 		; find message start.
0014E3r 3               
0014E3r 3               	lda z80_l		; set initial text position.
0014E3r 3               	sta txtini
0014E3r 3               	lda z80_h
0014E3r 3               	sta txtini+1
0014E3r 3               
0014E3r 3               	lda #$ad		; code for lda adrr
0014E3r 3               iscrl0:
0014E3r 3               	sta scrly		; enable/disable scrolling routine.
0014E3r 3               
0014E3r 3               	jsr prescr 		; set up display position.
0014E3r 3               	jsr gprad 		; get print address.
0014E3r 3               
0014E3r 3               	lda scraddr 		; set text screen address.
0014E3r 3               	sta txtscr
0014E3r 3               	lda scraddr+1
0014E3r 3               	sta txtscr+1
0014E3r 3               
0014E3r 3               	lda z80_c		; width.
0014E3r 3               	sta txtwid		; set width in working storage.
0014E3r 3               
0014E3r 3               	lda #128 		; start with leftmost bit.
0014E3r 3               	sta txtbit
0014E3r 3               
0014E3r 3               	jmp scrly4
0014E3r 3               .endif
0014E3r 3               
0014E3r 3               ;------------------------------------------------------------------
0014E3r 3               ; Dig routine, conditional assembly depending on dflag
0014E3r 3               ;------------------------------------------------------------------
0014E3r 3               .if dflag
0014E3r 3               dig:
0014E3r 3               	and #3
0014E3r 3               	beq digr		; dig right
0014E3r 3               	cmp #1
0014E3r 3               	beq digl		; dig left
0014E3r 3               	cmp #2
0014E3r 3               	beq digd		; dig down
0014E3r 3               
0014E3r 3               ; Dig up.
0014E3r 3               
0014E3r 3               digu:				; dig up
0014E3r 3               	ldy #8
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	sec
0014E3r 3               	sbc #2
0014E3r 3               	sta dispy		; set y
0014E3r 3               
0014E3r 3               	iny
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	sta dispx		; set x
0014E3r 3               	jmp digv
0014E3r 3               
0014E3r 3               ; Dig down.
0014E3r 3               
0014E3r 3               digd:
0014E3r 3               	ldy #9
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	sta dispx		; set y
0014E3r 3               
0014E3r 3               	dey
0014E3r 3               	clc
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	adc #16
0014E3r 3               	sta dispy		; set y
0014E3r 3               	jmp digv
0014E3r 3               
0014E3r 3               ; Dig left.
0014E3r 3               
0014E3r 3               digl:
0014E3r 3               	ldy #8
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	sta dispy		; set y
0014E3r 3               
0014E3r 3               	iny
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	sec
0014E3r 3               	sbc #2			; x=x-2
0014E3r 3               	sta dispx		; set x
0014E3r 3               	jmp digh
0014E3r 3               
0014E3r 3               ; Dig right.
0014E3r 3               
0014E3r 3               digr:
0014E3r 3               	ldy #8
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	sta dispy		; set y
0014E3r 3               
0014E3r 3               	iny
0014E3r 3               	lda (z80_ix),y
0014E3r 3               	clc
0014E3r 3               	adc #16
0014E3r 3               	sta dispx		; set x+16
0014E3r 3               	jmp digh
0014E3r 3               
0014E3r 3               ; Vertical digging
0014E3r 3               
0014E3r 3               digv:
0014E3r 3               	jsr tstbl		; check blocktype in MAP
0014E3r 3               	jsr fdchk		; test if FODDER
0014E3r 3               
0014E3r 3               	clc
0014E3r 3               	lda dispx		; look 1 cell down
0014E3r 3               	adc #8
0014E3r 3               	sta dispx
0014E3r 3               	jsr tstbl		; check blocktype in MAP
0014E3r 3               	jsr fdchk
0014E3r 3               	lda dispx
0014E3r 3               	and #7
0014E3r 3               	bne :+
0014E3r 3               	rts
0014E3r 3               :
0014E3r 3               	clc
0014E3r 3               	lda dispx		; look 1 cell down
0014E3r 3               	adc #8
0014E3r 3               	sta dispx
0014E3r 3               	jsr tstbl		; check blocktype in MAP
0014E3r 3               	jmp fdchk
0014E3r 3               
0014E3r 3               ; Horizontal digging
0014E3r 3               
0014E3r 3               digh:
0014E3r 3               	jsr tstbl		; check blocktype in MAP
0014E3r 3               	jsr fdchk		; test if FODDER
0014E3r 3               
0014E3r 3               	clc
0014E3r 3               	lda dispy		; look 1 cell down
0014E3r 3               	adc #8
0014E3r 3               	sta dispy
0014E3r 3               	jsr tstbl		; check blocktype in MAP
0014E3r 3               	jsr fdchk
0014E3r 3               	lda dispy
0014E3r 3               	and #7
0014E3r 3               	bne :+
0014E3r 3               	rts
0014E3r 3               :
0014E3r 3               	clc
0014E3r 3               	lda dispy		; look 1 cell down
0014E3r 3               	adc #8
0014E3r 3               	sta dispy
0014E3r 3               	jsr tstbl		; check blocktype in MAP
0014E3r 3               	jmp fdchk
0014E3r 3               
0014E3r 3               digcnt:	.byte 0
0014E3r 3               
0014E3r 3               .endif
0014E3r 3               
0014E3r 3               ;------------------------------------------------------------------
0014E3r 3               ; Sprite table
0014E3r 3               ;------------------------------------------------------------------
0014E3r 3               
0014E3r 3               
0014E3r 3               ; ix+0  = type.
0014E3r 3               ; ix+1  = sprite image number.
0014E3r 3               ; ix+2  = frame.
0014E3r 3               ; ix+3  = y coord.
0014E3r 3               ; ix+4  = x coord.
0014E3r 3               
0014E3r 3               ; ix+5  = new type.
0014E3r 3               ; ix+6  = new image number.
0014E3r 3               ; ix+7  = new frame.
0014E3r 3               ; ix+8  = new y coord.
0014E3r 3               ; ix+9  = new x coord.
0014E3r 3               
0014E3r 3               ; ix+10 = direction.
0014E3r 3               ; ix+11 = parameter 1.
0014E3r 3               ; ix+12 = parameter 2.
0014E3r 3               ; ix+13 = jump pointer low.
0014E3r 3               ; ix+14 = jump pointer high.
0014E3r 3               ; ix+15 = data pointer low.
0014E3r 3               ; ix+16 = data pointer high.
0014E3r 3               
0014E3r 3               ; block NUMSPR * TABSIZ,255
0014E3r 3               
0014E3r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0014E7r 3  FF FF FF FF  
0014EBr 3  FF FF FF FF  
0015AFr 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0015B3r 3  FF FF FF 00  
0015B7r 3  C0 78 00 00  
0015C0r 3  07           roomtb:	.byte 7                      ; start room map offset.
0015C1r 3               
0015C1r 3               setfgcol:
0015C1r 3               setbgcol:
0015C1r 3  60           	rts
0015C2r 3               
0015C2r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0015C2r 3               ; if USER has an argument it will be passed in the accumulator.
0015C2r 3               
0015C2r 3               user:
0015C2r 3               	.include "user.inc"
0015C2r 4  60           	rts
0015C3r 4               
0015C3r 3               
0015C3r 3               ; Everything below here will be generated by the editors.
0015C3r 3               
0015C3r 3               
0015C3r 3  60                   rts
0015C4r 3               WINDOWTOP = 1
0015C4r 3               WINDOWLFT = 0
0015C4r 3               WINDOWHGT = 18
0015C4r 3               WINDOWWID = 22 ;a
0015C4r 3               MAPWID = 3
0015C4r 3  FF FF FF             .byte 255,255,255
0015C7r 3               mapdat:
0015C7r 3  FF 00 FF             .byte 255,0,255
0015CAr 3  FF FF FF             .byte 255,255,255
0015CDr 3  01           stmap:  .byte 1
0015CEr 3               
0015CEr 3               evnt00:
0015CEr 3  A9 01                lda #1 	; COLLISION
0015D0r 3  85 rr                sta z80_b
0015D2r 3  20 rr rr             jsr sktyp
0015D5r 3  B0 03                bcs :+
0015D7r 3  4C rr rr             jmp a00065
0015DAr 3               :
0015DAr 3  A9 0A                lda #10	; EXPLODE
0015DCr 3  20 rr rr             jsr explod
0015DFr 3  A9 32                lda #50
0015E1r 3  A0 0C                ldy #12
0015E3r 3  91 rr                sta (z80_ix),y
0015E5r 3  A9 C8                lda #200
0015E7r 3  A0 08                ldy #8
0015E9r 3  91 rr                sta (z80_ix),y
0015EBr 3  A9 00        a00065: lda #0
0015EDr 3  A0 0C                ldy #12
0015EFr 3  D1 rr                cmp (z80_ix),y
0015F1r 3  90 03                bcc *+5
0015F3r 3  4C rr rr             jmp a00205
0015F6r 3  A0 0C                ldy #12
0015F8r 3  B1 rr                lda (z80_ix),y
0015FAr 3  38                   sec
0015FBr 3  E9 01                sbc #1
0015FDr 3  A0 0C                ldy #12
0015FFr 3  91 rr                sta (z80_ix),y
001601r 3  A9 01                lda #1
001603r 3  A0 0C                ldy #12
001605r 3  D1 rr                cmp (z80_ix),y
001607r 3  F0 03                beq *+5
001609r 3  4C rr rr             jmp a00205
00160Cr 3  A5 rr                lda numlif
00160Er 3  38                   sec
00160Fr 3  E9 01                sbc #1
001611r 3  85 rr                sta numlif
001613r 3  A9 00                lda #0
001615r 3  C5 rr                cmp numlif
001617r 3  F0 03                beq *+5
001619r 3  4C rr rr             jmp a00181
00161Cr 3  A9 01                lda #1		; ENDGAME
00161Er 3  85 rr                sta gamwon
001620r 3  A9 00        a00181: lda #0
001622r 3  A0 0C                ldy #12
001624r 3  91 rr                sta (z80_ix),y
001626r 3  A9 01                lda #1	; RESTART
001628r 3  85 rr                sta restfl
00162Ar 3  A9 00        a00205: lda #0	; STAR
00162Cr 3  85 rr                sta z80_c
00162Er 3  20 rr rr             jsr qrand
001631r 3  29 03                and #3
001633r 3  D0 03                bne :+
001635r 3  20 rr rr             jsr star
001638r 3               :
001638r 3  A9 00                lda #0
00163Ar 3  A0 0C                ldy #12
00163Cr 3  D1 rr                cmp (z80_ix),y
00163Er 3  F0 03                beq *+5
001640r 3  4C rr rr             jmp a00670
001643r 3  A5 rr                lda joyval	; KEY
001645r 3  29 01                and #1
001647r 3  F0 03                beq :+
001649r 3  4C rr rr             jmp a00323
00164Cr 3               :
00164Cr 3  20 rr rr             jsr cangr	; CANGORIGHT
00164Fr 3  F0 03                beq :+
001651r 3  4C rr rr             jmp a00323
001654r 3               :
001654r 3  A0 09                ldy #9 		; SPRITERIGHT
001656r 3  B1 rr                lda (z80_ix),y
001658r 3  18                   clc
001659r 3  69 02                adc #2
00165Br 3  91 rr                sta (z80_ix),y
00165Dr 3  20 rr rr             jsr vapour	; TRAIL
001660r 3  A5 rr        a00323: lda joyval	; KEY
001662r 3  29 02                and #2
001664r 3  F0 03                beq :+
001666r 3  4C rr rr             jmp a00384
001669r 3               :
001669r 3  20 rr rr             jsr cangl	; CANGOLEFT
00166Cr 3  F0 03                beq :+
00166Er 3  4C rr rr             jmp a00384
001671r 3               :
001671r 3  A0 09                ldy #9 		; SPRITELEFT
001673r 3  B1 rr                lda (z80_ix),y
001675r 3  38                   sec
001676r 3  E9 02                sbc #2
001678r 3  91 rr                sta (z80_ix),y
00167Ar 3  A5 rr        a00384: lda joyval	; KEY
00167Cr 3  29 04                and #4
00167Er 3  F0 03                beq :+
001680r 3  4C rr rr             jmp a00471
001683r 3               :
001683r 3  20 rr rr             jsr cangd	; CANGODOWN
001686r 3  F0 03                beq :+
001688r 3  4C rr rr             jmp a00471
00168Br 3               :
00168Br 3  A0 08                ldy #8 		; SPRITEDOWN
00168Dr 3  B1 rr                lda (z80_ix),y
00168Fr 3  18                   clc
001690r 3  69 02                adc #2
001692r 3  91 rr                sta (z80_ix),y
001694r 3  A0 08                ldy #8 		; SPRITEDOWN
001696r 3  B1 rr                lda (z80_ix),y
001698r 3  18                   clc
001699r 3  69 02                adc #2
00169Br 3  91 rr                sta (z80_ix),y
00169Dr 3  A5 rr        a00471: lda joyval	; KEY
00169Fr 3  29 08                and #8
0016A1r 3  F0 03                beq :+
0016A3r 3  4C rr rr             jmp a00557
0016A6r 3               :
0016A6r 3  20 rr rr             jsr cangu	; CANGOUP
0016A9r 3  F0 03                beq :+
0016ABr 3  4C rr rr             jmp a00557
0016AEr 3               :
0016AEr 3  A0 08                ldy #8 		; SPRITEUP
0016B0r 3  B1 rr                lda (z80_ix),y
0016B2r 3  38                   sec
0016B3r 3  E9 02                sbc #2
0016B5r 3  91 rr                sta (z80_ix),y
0016B7r 3  A0 08                ldy #8 		; SPRITEUP
0016B9r 3  B1 rr                lda (z80_ix),y
0016BBr 3  38                   sec
0016BCr 3  E9 02                sbc #2
0016BEr 3  91 rr                sta (z80_ix),y
0016C0r 3  A5 rr        a00557: lda joyval	; KEY
0016C2r 3  29 10                and #16
0016C4r 3  F0 03                beq :+
0016C6r 3  4C rr rr             jmp a00622
0016C9r 3               :
0016C9r 3  A9 00                lda #0
0016CBr 3  A0 0B                ldy #11
0016CDr 3  D1 rr                cmp (z80_ix),y
0016CFr 3  F0 03                beq *+5
0016D1r 3  4C rr rr             jmp a00622
0016D4r 3  A9 01                lda #1	; LASER
0016D6r 3  20 rr rr             jsr shoot
0016D9r 3  A9 05                lda #5
0016DBr 3  A0 0B                ldy #11
0016DDr 3  91 rr                sta (z80_ix),y
0016DFr 3  A9 00        a00622: lda #0
0016E1r 3  A0 0B                ldy #11
0016E3r 3  D1 rr                cmp (z80_ix),y
0016E5r 3  90 03                bcc *+5
0016E7r 3  4C rr rr             jmp a00670
0016EAr 3  A0 0B                ldy #11
0016ECr 3  B1 rr                lda (z80_ix),y
0016EEr 3  38                   sec
0016EFr 3  E9 01                sbc #1
0016F1r 3  A0 0B                ldy #11
0016F3r 3  91 rr                sta (z80_ix),y
0016F5r 3  60           a00670: rts
0016F6r 3               evnt01:
0016F6r 3  A9 00                lda #0		; ANIMATE
0016F8r 3  20 rr rr             jsr animsp
0016FBr 3  20 rr rr             jsr cangl	; CANGOLEFT
0016FEr 3  F0 03                beq :+
001700r 3  4C rr rr             jmp b00069
001703r 3               :
001703r 3  A9 04                lda #4
001705r 3  85 rr                sta z80_c
001707r 3  A0 09                ldy #9
001709r 3  B1 rr                lda (z80_ix),y
00170Br 3  38                   sec
00170Cr 3  E5 rr                sbc z80_c
00170Er 3  A0 09                ldy #9
001710r 3  91 rr                sta (z80_ix),y
001712r 3  4C rr rr             jmp b00083
001715r 3  AD rr rr     b00069: lda wnrgtx
001718r 3  A0 09                ldy #9
00171Ar 3  91 rr                sta (z80_ix),y
00171Cr 3  20 rr rr     b00083: jsr lcol	; COLLISION
00171Fr 3  B0 03                bcs :+
001721r 3  4C rr rr             jmp b00261
001724r 3               :
001724r 3  A9 0A                lda #10	; EXPLODE
001726r 3  20 rr rr             jsr explod
001729r 3  A9 64                lda #100
00172Br 3  85 rr                sta z80_d	; GETRANDOM
00172Dr 3  20 rr rr             jsr random
001730r 3  85 rr                sta z80_h
001732r 3  20 rr rr             jsr imul
001735r 3  A5 rr                lda z80_h
001737r 3  85 rr                sta varrnd
001739r 3  A9 14                lda #20
00173Br 3  85 rr                sta z80_c
00173Dr 3  A5 rr                lda varrnd
00173Fr 3  18                   clc
001740r 3  65 rr                adc z80_c
001742r 3  85 rr                sta varrnd
001744r 3  A5 rr                lda varrnd
001746r 3  A0 08                ldy #8
001748r 3  91 rr                sta (z80_ix),y
00174Ar 3  A9 A0                lda #160
00174Cr 3  A0 09                ldy #9
00174Er 3  91 rr                sta (z80_ix),y
001750r 3  A9 64                lda #<100		; SCORE
001752r 3  85 rr                sta z80_l
001754r 3  A9 00                lda #>100
001756r 3  85 rr                sta z80_h
001758r 3  20 rr rr             jsr addsc
00175Br 3  A9 15                lda #21		; AT
00175Dr 3  85 rr                sta chary
00175Fr 3  A9 06                lda #6
001761r 3  85 rr                sta charx
001763r 3  A0 00                ldy #0		; SHOWSCORE
001765r 3  A9 06                lda #6
001767r 3  85 rr                sta z80_b
001769r 3  20 rr rr             jsr dscor
00176Cr 3  A9 00        b00261: lda #0
00176Er 3  A0 0A                ldy #10
001770r 3  D1 rr                cmp (z80_ix),y
001772r 3  F0 03                beq *+5
001774r 3  4C rr rr             jmp b00350
001777r 3  A0 08                ldy #8
001779r 3  B1 rr                lda (z80_ix),y
00177Br 3  38                   sec
00177Cr 3  E9 01                sbc #1
00177Er 3  A0 08                ldy #8
001780r 3  91 rr                sta (z80_ix),y
001782r 3  A0 08                ldy #8
001784r 3  B1 rr                lda (z80_ix),y
001786r 3  C9 12                cmp #18
001788r 3  90 03                bcc *+5
00178Ar 3  4C rr rr             jmp b00345
00178Dr 3  A9 01                lda #1
00178Fr 3  A0 0A                ldy #10
001791r 3  91 rr                sta (z80_ix),y
001793r 3  4C rr rr     b00345: jmp b00412
001796r 3  A0 08        b00350: ldy #8
001798r 3  B1 rr                lda (z80_ix),y
00179Ar 3  18                   clc
00179Br 3  69 01                adc #1
00179Dr 3  A0 08                ldy #8
00179Fr 3  91 rr                sta (z80_ix),y
0017A1r 3  A9 78                lda #120
0017A3r 3  A0 08                ldy #8
0017A5r 3  D1 rr                cmp (z80_ix),y
0017A7r 3  90 03                bcc *+5
0017A9r 3  4C rr rr             jmp b00412
0017ACr 3  A9 00                lda #0
0017AEr 3  A0 0A                ldy #10
0017B0r 3  91 rr                sta (z80_ix),y
0017B2r 3  60           b00412: rts
0017B3r 3               evnt02:
0017B3r 3  60                   rts
0017B4r 3               evnt03:
0017B4r 3  60                   rts
0017B5r 3               evnt04:
0017B5r 3  60                   rts
0017B6r 3               evnt05:
0017B6r 3  60                   rts
0017B7r 3               evnt06:
0017B7r 3  60                   rts
0017B8r 3               evnt07:
0017B8r 3  60                   rts
0017B9r 3               evnt08:
0017B9r 3  60                   rts
0017BAr 3               evnt09:
0017BAr 3  A9 00                lda #0
0017BCr 3  A0 0B                ldy #11
0017BEr 3  91 rr                sta (z80_ix),y
0017C0r 3  A9 00                lda #0
0017C2r 3  A0 0A                ldy #10
0017C4r 3  91 rr                sta (z80_ix),y
0017C6r 3  A9 00                lda #0
0017C8r 3  A0 0C                ldy #12
0017CAr 3  91 rr                sta (z80_ix),y
0017CCr 3  60                   rts
0017CDr 3               evnt10:
0017CDr 3  60                   rts
0017CEr 3               evnt11:
0017CEr 3  60                   rts
0017CFr 3               evnt12:
0017CFr 3  A9 00                lda #0 	; PAPER
0017D1r 3  0A                   asl a
0017D2r 3  0A                   asl a
0017D3r 3  0A                   asl a
0017D4r 3  0A                   asl a
0017D5r 3  85 rr                sta tmp
0017D7r 3  AD 0F 90             lda RegF
0017DAr 3  29 8F                and #%10001111
0017DCr 3  05 rr                ora tmp
0017DEr 3  8D 0F 90             sta RegF
0017E1r 3  A9 01                lda #1 	; INK
0017E3r 3  8D rr rr             sta fontcol
0017E6r 3  20 rr rr             jsr cls		; CLS
0017E9r 3  A9 06                lda #6		; AT
0017EBr 3  85 rr                sta chary
0017EDr 3  A9 05                lda #5
0017EFr 3  85 rr                sta charx
0017F1r 3  A9 01                lda #1		; PRINTMODE
0017F3r 3  85 rr                sta prtmod
0017F5r 3  A9 01                lda #1		; PRINT
0017F7r 3  20 rr rr             jsr dmsg
0017FAr 3  A9 00                lda #0		; PRINTMODE
0017FCr 3  85 rr                sta prtmod
0017FEr 3  A9 0A                lda #10		; AT
001800r 3  85 rr                sta chary
001802r 3  A9 05                lda #5
001804r 3  85 rr                sta charx
001806r 3  A9 02                lda #2		; PRINT
001808r 3  20 rr rr             jsr dmsg
00180Br 3  A9 0C                lda #12		; AT
00180Dr 3  85 rr                sta chary
00180Fr 3  A9 05                lda #5
001811r 3  85 rr                sta charx
001813r 3  A9 03                lda #3		; PRINT
001815r 3  20 rr rr             jsr dmsg
001818r 3  A9 0E                lda #14		; AT
00181Ar 3  85 rr                sta chary
00181Cr 3  A9 05                lda #5
00181Er 3  85 rr                sta charx
001820r 3  A9 04                lda #4		; PRINT
001822r 3  20 rr rr             jsr dmsg
001825r 3               
001825r 3               rtcon:			; CONTROLMENU
001825r 3  20 rr rr             jsr vsync
001828r 3  A9 00                lda #0
00182Ar 3  85 rr                sta contrl
00182Cr 3                       .if swrflag
00182Cr 3                       lda keys + data_address - data_start + 7
00182Cr 3                       .else
00182Cr 3  AD rr rr             lda keys+7
00182Fr 3                       .endif
00182Fr 3  20 rr rr             jsr ktest
001832r 3  90 18                bcc rtcon1
001834r 3  A9 01                lda #1
001836r 3  85 rr                sta contrl
001838r 3                       .if swrflag
001838r 3                       lda keys + data_address - data_start + 8
001838r 3                       .else
001838r 3  AD rr rr             lda keys+8
00183Br 3                       .endif
00183Br 3  20 rr rr             jsr ktest
00183Er 3  90 0C                bcc rtcon1
001840r 3  A9 02                lda #2
001842r 3  85 rr                sta contrl
001844r 3                       .if swrflag
001844r 3                       lda keys + data_address - data_start + 9
001844r 3                       .else
001844r 3  AD rr rr             lda keys+9
001847r 3                       .endif
001847r 3  20 rr rr             jsr ktest
00184Ar 3  B0 D9                bcs rtcon
00184Cr 3                       rtcon1:
00184Cr 3  60                   rts
00184Dr 3               evnt13:
00184Dr 3  A9 03                lda #3
00184Fr 3  85 rr                sta numlif
001851r 3  60                   rts
001852r 3               evnt14:
001852r 3  A9 00                lda #0		; AT
001854r 3  85 rr                sta chary
001856r 3  A9 00                lda #0
001858r 3  85 rr                sta charx
00185Ar 3  A9 05                lda #5		; PRINT
00185Cr 3  20 rr rr             jsr dmsg
00185Fr 3  A9 15                lda #21
001861r 3  85 rr                sta chary
001863r 3  A9 00                lda #0
001865r 3  85 rr                sta charx
001867r 3  A9 06                lda #6		; PRINT
001869r 3  20 rr rr             jsr dmsg
00186Cr 3  A0 00                ldy #0		; SHOWSCORE
00186Er 3  A9 06                lda #6
001870r 3  85 rr                sta z80_b
001872r 3  20 rr rr             jsr dscor
001875r 3  A9 15                lda #21
001877r 3  85 rr                sta chary
001879r 3  A9 0F                lda #15
00187Br 3  85 rr                sta charx
00187Dr 3  A9 07                lda #7		; PRINT
00187Fr 3  20 rr rr             jsr dmsg
001882r 3  A5 rr                lda numlif	; DISPLAY
001884r 3  20 rr rr             jsr disply
001887r 3  60                   rts
001888r 3               evnt15:
001888r 3  60                   rts
001889r 3               evnt16:
001889r 3  60                   rts
00188Ar 3               evnt17:
00188Ar 3  60                   rts
00188Br 3               evnt18:
00188Br 3  A9 0B                lda #11		; AT
00188Dr 3  85 rr                sta chary
00188Fr 3  A9 06                lda #6
001891r 3  85 rr                sta charx
001893r 3  A9 08                lda #8		; PRINT
001895r 3  20 rr rr             jsr dmsg
001898r 3  A9 14                lda #20 	; DELAY
00189Ar 3  20 rr rr             jsr delay
00189Dr 3  20 rr rr             jsr prskey	; WAITKEY
0018A0r 3  60                   rts
0018A1r 3               evnt19:
0018A1r 3  60                   rts
0018A2r 3               evnt20:
0018A2r 3  60                   rts
0018A3r 3  60           ptcusr: rts
0018A4r 3               data_start:
0018A4r 3               msgdat:
0018A4r 3  20 8D                .byte " ",141
0018A6r 3  4D 45 54 45          .byte "METEORMANI",193
0018AAr 3  4F 52 4D 41  
0018AEr 3  4E 49 C1     
0018B1r 3  31 20 2D 20          .byte "1 - KEYBOAR",196
0018B5r 3  4B 45 59 42  
0018B9r 3  4F 41 52 C4  
0018BDr 3  32 20 2D 20          .byte "2 - JOYKE",217
0018C1r 3  4A 4F 59 4B  
0018C5r 3  45 D9        
0018C7r 3  32 20 2D 20          .byte "2 - JOYMM",195
0018CBr 3  4A 4F 59 4D  
0018CFr 3  4D C3        
0018D1r 3  4D 20 45 20          .byte "M E T E O R  M A N I ",193
0018D5r 3  54 20 45 20  
0018D9r 3  4F 20 52 20  
0018E7r 3  53 43 4F 52          .byte "SCORE",186
0018EBr 3  45 BA        
0018EDr 3  4C 49 56 45          .byte "LIVES",186
0018F1r 3  53 BA        
0018F3r 3  47 41 4D 45          .byte "GAME OVER",160
0018F7r 3  20 4F 56 45  
0018FBr 3  52 A0        
0018FDr 3               nummsg:
0018FDr 3  09                   .byte 9
0018FEr 3               chgfx:
0018FEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001902r 3  00 00 00 00  
001906r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00190Ar 3  00 00 00 00  
00190Er 3               bCol:
00190Er 3  01                   .byte 1
00190Fr 3  01                   .byte 1
001910r 3               bprop:
001910r 3  00                   .byte 0
001911r 3  02                   .byte 2
001912r 3               sprgfx:
001912r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,63,0,112,248,127,6,64,248,61,0,4,0,120,0,0,0,0,0,0,0,0,0
001916r 3  00 00 00 00  
00191Ar 3  00 00 3F 00  
001932r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,15,192,28,62,159,193,16,62,15,64,1,0,30,0,0,0,0,0,0,0,0,0
001936r 3  00 00 00 00  
00193Ar 3  00 00 0F C0  
001952r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,3,240,135,15,103,240,132,15,3,208,0,64,7,128,0,0,0,0,0,0,0,0
001956r 3  00 00 00 00  
00195Ar 3  00 00 03 F0  
001972r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,252,225,195,25,252,225,3,0,244,0,16,1,224,0,0,0,0,0,0,0,0
001976r 3  00 00 00 00  
00197Ar 3  00 00 00 FC  
001992r 3  00 00 00 00          .byte 0,0,0,0,3,192,12,32,48,16,64,16,71,8,65,4,64,68,34,68,16,72,8,8,6,8,1,240,0,0,0,0
001996r 3  03 C0 0C 20  
00199Ar 3  30 10 40 10  
0019B2r 3  00 00 00 00          .byte 0,0,0,0,0,240,3,8,12,4,16,4,17,194,16,65,16,17,8,145,4,18,2,2,1,130,0,124,0,0,0,0
0019B6r 3  00 F0 03 08  
0019BAr 3  0C 04 10 04  
0019D2r 3  00 00 00 00          .byte 0,0,0,0,0,60,0,194,3,1,4,1,132,112,68,16,68,4,66,36,129,4,128,128,128,96,0,31,0,0,0,0
0019D6r 3  00 3C 00 C2  
0019DAr 3  03 01 04 01  
0019F2r 3  00 00 00 00          .byte 0,0,0,0,0,15,128,48,64,192,65,0,33,28,17,4,17,1,16,137,32,65,32,32,32,24,192,7,0,0,0,0
0019F6r 3  00 0F 80 30  
0019FAr 3  40 C0 41 00  
001A12r 3  00 00 01 E0          .byte 0,0,1,224,2,16,4,16,8,8,16,72,18,68,32,196,32,4,39,4,32,8,32,48,28,64,3,128,0,0,0,0
001A16r 3  02 10 04 10  
001A1Ar 3  08 08 10 48  
001A32r 3  00 00 00 78          .byte 0,0,0,120,0,132,1,4,2,2,4,18,4,145,8,49,8,1,9,193,8,2,8,12,7,16,0,224,0,0,0,0
001A36r 3  00 84 01 04  
001A3Ar 3  02 02 04 12  
001A52r 3  00 00 00 1E          .byte 0,0,0,30,0,33,0,65,128,128,129,4,65,36,66,12,66,0,66,112,130,0,2,3,1,196,0,56,0,0,0,0
001A56r 3  00 21 00 41  
001A5Ar 3  80 80 81 04  
001A72r 3  00 00 80 07          .byte 0,0,128,7,64,8,64,16,32,32,32,65,16,73,16,131,16,128,16,156,32,128,192,128,0,113,0,14,0,0,0,0
001A76r 3  40 08 40 10  
001A7Ar 3  20 20 20 41  
001A92r 3  00 00 00 00          .byte 0,0,0,0,15,128,16,96,16,16,18,8,34,68,34,2,32,130,16,226,8,2,8,12,4,48,3,192,0,0,0,0
001A96r 3  0F 80 10 60  
001A9Ar 3  10 10 12 08  
001AB2r 3  00 00 00 00          .byte 0,0,0,0,3,224,4,24,4,4,4,130,8,145,136,128,136,32,132,56,130,0,2,3,1,12,0,240,0,0,0,0
001AB6r 3  03 E0 04 18  
001ABAr 3  04 04 04 82  
001AD2r 3  00 00 00 00          .byte 0,0,0,0,0,248,1,6,1,1,129,32,66,36,34,32,34,8,33,14,32,128,192,128,0,67,0,60,0,0,0,0
001AD6r 3  00 F8 01 06  
001ADAr 3  01 01 81 20  
001AF2r 3  00 00 00 00          .byte 0,0,0,0,0,62,128,65,64,64,32,72,16,137,8,136,8,130,136,67,8,32,48,32,192,16,0,15,0,0,0,0
001AF6r 3  00 3E 80 41  
001AFAr 3  40 40 20 48  
001B12r 3  00 00 00 00          .byte 0,0,0,0,1,192,2,56,12,4,16,4,32,228,32,4,35,4,34,72,18,8,16,16,8,32,8,64,7,128,0,0
001B16r 3  01 C0 02 38  
001B1Ar 3  0C 04 10 04  
001B32r 3  00 00 00 00          .byte 0,0,0,0,0,112,0,142,3,1,4,1,8,57,8,1,8,193,8,146,4,130,4,4,2,8,2,16,1,224,0,0
001B36r 3  00 70 00 8E  
001B3Ar 3  03 01 04 01  
001B52r 3  00 00 00 00          .byte 0,0,0,0,0,28,128,35,64,192,65,0,66,14,66,0,66,48,130,36,129,32,1,1,0,130,0,132,0,120,0,0
001B56r 3  00 1C 80 23  
001B5Ar 3  40 C0 41 00  
001B72r 3  00 00 00 00          .byte 0,0,0,0,0,7,224,8,16,48,16,64,144,131,16,128,16,140,32,137,32,72,64,64,128,32,0,33,0,30,0,0
001B76r 3  00 07 E0 08  
001B7Ar 3  10 30 10 40  
001B92r 3               frmlst:
001B92r 3  00 01                .byte 0,1
001B94r 3  01 04 05 00          .byte 1,4,5,0
001B98r 3               scdat:
001B98r 3  0C 00                .word 12
001B9Ar 3  FF 01 16 FF          .byte 255,1,22,255,0,0,255,0,96,255,1,22
001B9Er 3  00 00 FF 00  
001BA2r 3  60 FF 01 16  
001BA6r 3               numsc:
001BA6r 3  01                   .byte 1
001BA7r 3               nmedat:
001BA7r 3  00 00 48 10          .byte 0,0,72,16,1,1,24,148,1,1,120,136,1,1,120,156,1,1,72,148,1,1,16,112,255
001BABr 3  01 01 18 94  
001BAFr 3  01 01 78 88  
001BC0r 3               NUMOBJ = 1
001BC0r 3               objdta:
001BC0r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,254,56,120,254,56,120
001BC4r 3  00 00 00 00  
001BC8r 3  00 00 00 00  
001BE7r 3               font:
001BE7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001BEBr 3  00 00 00 00  
001BEFr 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
001BF3r 3  30 00 30 00  
001BF7r 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
001BFBr 3  00 00 00 00  
001BFFr 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
001C03r 3  6C FE 6C 00  
001C07r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
001C0Br 3  7E 1E 7E 18  
001C0Fr 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
001C13r 3  30 6E CE 00  
001C17r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
001C1Br 3  7E CC 7E 00  
001C1Fr 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
001C23r 3  00 00 00 00  
001C27r 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
001C2Br 3  18 18 0C 00  
001C2Fr 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
001C33r 3  30 30 60 00  
001C37r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
001C3Br 3  7E 18 3C 00  
001C3Fr 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
001C43r 3  7E 18 18 00  
001C47r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
001C4Br 3  00 18 18 30  
001C4Fr 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
001C53r 3  7E 00 00 00  
001C57r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
001C5Br 3  00 38 38 00  
001C5Fr 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
001C63r 3  18 30 60 00  
001C67r 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
001C6Br 3  F6 E6 7C 00  
001C6Fr 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
001C73r 3  18 18 7E 00  
001C77r 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
001C7Br 3  7C C0 FE 00  
001C7Fr 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
001C83r 3  06 C6 7C 00  
001C87r 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
001C8Br 3  D8 FE 18 00  
001C8Fr 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
001C93r 3  06 C6 7C 00  
001C97r 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
001C9Br 3  C6 C6 7C 00  
001C9Fr 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
001CA3r 3  18 30 30 00  
001CA7r 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
001CABr 3  C6 C6 7C 00  
001CAFr 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
001CB3r 3  7E 06 7C 00  
001CB7r 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
001CBBr 3  00 00 30 00  
001CBFr 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
001CC3r 3  00 30 30 60  
001CC7r 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
001CCBr 3  30 18 0C 00  
001CCFr 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
001CD3r 3  00 7E 00 00  
001CD7r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
001CDBr 3  0C 18 30 00  
001CDFr 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
001CE3r 3  18 00 18 00  
001CE7r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
001CEBr 3  FE C0 7C 00  
001CEFr 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
001CF3r 3  FE C6 C6 00  
001CF7r 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
001CFBr 3  C6 C6 FC 00  
001CFFr 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
001D03r 3  C0 C6 7C 00  
001D07r 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
001D0Br 3  C6 CC F8 00  
001D0Fr 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
001D13r 3  C0 C0 FE 00  
001D17r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
001D1Br 3  C0 C0 C0 00  
001D1Fr 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
001D23r 3  DE C6 7C 00  
001D27r 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
001D2Br 3  C6 C6 C6 00  
001D2Fr 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
001D33r 3  18 18 7E 00  
001D37r 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
001D3Br 3  C6 C6 7C 00  
001D3Fr 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
001D43r 3  D8 CC C6 00  
001D47r 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
001D4Br 3  C0 C0 FE 00  
001D4Fr 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
001D53r 3  C6 C6 C6 00  
001D57r 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
001D5Br 3  DE CE C6 00  
001D5Fr 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
001D63r 3  C6 C6 7C 00  
001D67r 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
001D6Br 3  FC C0 C0 00  
001D6Fr 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
001D73r 3  F6 DE 7C 00  
001D77r 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
001D7Br 3  FC CC C6 00  
001D7Fr 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
001D83r 3  06 C6 7C 00  
001D87r 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
001D8Br 3  30 30 30 00  
001D8Fr 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
001D93r 3  C6 C6 7C 00  
001D97r 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
001D9Br 3  C6 6C 38 00  
001D9Fr 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
001DA3r 3  C6 FE 6C 00  
001DA7r 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
001DABr 3  38 6C C6 00  
001DAFr 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
001DB3r 3  30 30 30 00  
001DB7r 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
001DBBr 3  30 60 FE 00  
001DBFr 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
001DC3r 3  18 18 1E 00  
001DC7r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
001DCBr 3  30 18 0C 00  
001DCFr 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
001DD3r 3  30 30 F0 00  
001DD7r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
001DDBr 3  30 30 30 00  
001DDFr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
001DE3r 3  00 00 00 FF  
001DE7r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
001DEBr 3  60 60 FE 00  
001DEFr 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
001DF3r 3  7C CC 7C 00  
001DF7r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
001DFBr 3  66 66 7C 00  
001DFFr 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
001E03r 3  60 60 3C 00  
001E07r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
001E0Br 3  CC CC 7C 00  
001E0Fr 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
001E13r 3  F8 C0 7C 00  
001E17r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
001E1Br 3  30 30 30 00  
001E1Fr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
001E23r 3  CC 7C 0C 78  
001E27r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
001E2Br 3  CC CC CC 00  
001E2Fr 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
001E33r 3  30 30 78 00  
001E37r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
001E3Br 3  0C 0C 6C 38  
001E3Fr 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
001E43r 3  70 78 6C 00  
001E47r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
001E4Br 3  30 30 1C 00  
001E4Fr 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
001E53r 3  FC FC FC 00  
001E57r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
001E5Br 3  CC CC CC 00  
001E5Fr 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
001E63r 3  CC CC 78 00  
001E67r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
001E6Br 3  CC F8 C0 C0  
001E6Fr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
001E73r 3  CC 7C 0C 0E  
001E77r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
001E7Br 3  60 60 60 00  
001E7Fr 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
001E83r 3  78 0C F8 00  
001E87r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
001E8Br 3  30 30 1C 00  
001E8Fr 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
001E93r 3  CC CC 78 00  
001E97r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
001E9Br 3  78 78 30 00  
001E9Fr 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
001EA3r 3  FC FC 78 00  
001EA7r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
001EABr 3  30 78 CC 00  
001EAFr 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
001EB3r 3  CC 7C 0C 78  
001EB7r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
001EBBr 3  30 60 FC 00  
001EBFr 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
001EC3r 3  18 18 1E 00  
001EC7r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
001ECBr 3  18 18 18 00  
001ECFr 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
001ED3r 3  30 30 F0 00  
001ED7r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
001EDBr 3  00 00 00 00  
001EDFr 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
001EE3r 3  E3 BB C6 7C  
001EE7r 3               jtab:
001EE7r 3  63                   .byte 99
001EE8r 3  65 14 51 10  keys:   .byte 101,20,81,16,48,49,66,112,0,113,1
001EECr 3  30 31 42 70  
001EF0r 3  00 71 01     
001EF3r 3               
001EF3r 2               
001EF3r 1               	.include "lib.inc"
001EF3r 2               ;----------------------------------------------------------------------
001EF3r 2               ; VIC20 Platform Specific functions
001EF3r 2               ;----------------------------------------------------------------------
001EF3r 2               
001EF3r 2               ;============================================================
001EF3r 2               ; PLATFORM VARIABLES
001EF3r 2               ;============================================================
001EF3r 2               ;
001EF3r 2               ; Memory map:
001EF3r 2               ;
001EF3r 2               ;	$0000-$01ff	 0.5kB	CPU WS
001EF3r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
001EF3r 2               ;	$0400-$0fff	 3,0kB	RAM
001EF3r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
001EF3r 2               ;	$2000-$7fff	24,0kB	RAM
001EF3r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
001EF3r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
001EF3r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
001EF3r 2               ;	$9800-$9fff	 2,0kB	I/O
001EF3r 2               ;	$a000-$bfff	 8,0kB	RAM
001EF3r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
001EF3r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
001EF3r 2               ;
001EF3r 2               ; Keyboard matrix:
001EF3r 2               ;                          	  $9121
001EF3r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
001EF3r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
001EF3r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
001EF3r 2               ;                 VIC   07  06  05  04  03  02  01  00
001EF3r 2               ;
001EF3r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
001EF3r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
001EF3r 2               ;                 VIC   17  16  15  14  13  12  11  10
001EF3r 2               ;
001EF3r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
001EF3r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
001EF3r 2               ;                 VIC   27  26  25  24  23  22  21  20
001EF3r 2               ;
001EF3r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
001EF3r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
001EF3r 2               ;                 VIC   37  36  35  34  33  32  31  30
001EF3r 2               ;
001EF3r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
001EF3r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
001EF3r 2               ;                 VIC   47  46  45  44  43  42  41  40
001EF3r 2               ;
001EF3r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
001EF3r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
001EF3r 2               ;                 VIC   57  56  55  54  53  52  51  50
001EF3r 2               ;
001EF3r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
001EF3r 2               ;               ASCII   13  42  80  73  89  82  87
001EF3r 2               ;                 VIC   67  66  65  64  63  62  61  60
001EF3r 2               ;
001EF3r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
001EF3r 2               ;               ASCII   08  ??  43  57  55  53  51  49
001EF3r 2               ;                 VIC   77  76  75  74  73  72  71  70
001EF3r 2               ;
001EF3r 2               ;	 P =$65,O=$14,A=$51,Q=$10
001EF3r 2               ;	SPC=$30,N=$44,M=$34
001EF3r 2               ;	 1 =$70,2=$00,3=$71,4=$01
001EF3r 2               ;
001EF3r 2               ; Joysticks:
001EF3r 2               ;
001EF3r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
001EF3r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
001EF3r 2               ;	$9120	Right -     -     -     -     -     -     -
001EF3r 2               ;
001EF3r 2               ;	$9122	DDRB = Data Direction Register port $9120
001EF3r 2               ;               0 = input, 1 = output
001EF3r 2               ;		Bit7 should be 0 to read joystick $9120
001EF3r 2               ;
001EF3r 2               ; Video registers:
001EF3r 2               ;
001EF3r 2               ;	$9000	horizontal centering
001EF3r 2               ;		bits 0-6 horizontal centering
001EF3r 2               ;		bit  7 sets interlace scan
001EF3r 2               ;	$9001	vertical centering
001EF3r 2               ;	$9002	set # of columns
001EF3r 2               ;		bits 0-6 set # of columns
001EF3r 2               ;		bit 7 is part of video matrix address
001EF3r 2               ;	$9003	set # of rows
001EF3r 2               ;		bit 0 sets 8x8 or 16x8 chars
001EF3r 2               ;		bits 1-6 set # of rows
001EF3r 2               ;	$9005	start of character memory
001EF3r 2               ;		bits 0-3 start of character memory (default = 0)
001EF3r 2               ;		bits 4-7 is rest of video address (default= F)
001EF3r 2               ;		BITS 3,2,1,0 CM startinq address
001EF3r 2               ;			     HEX   DEC
001EF3r 2               ;		0000   ROM   8000  32768
001EF3r 2               ;		0001	     8400  33792
001EF3r 2               ;		0010	     8800  34816
001EF3r 2               ;		0011	     8C00  35840
001EF3r 2               ;		1000   RAM   0000  0000
001EF3r 2               ;		1001  xxxx
001EF3r 2               ;		1010  xxxx   unavail.
001EF3r 2               ;		1011  xxxx
001EF3r 2               ;		1100	     1000  4096
001EF3r 2               ;		1101	     1400  5120
001EF3r 2               ;		1110	     1800  6144
001EF3r 2               ;		1111	     1C00  7168
001EF3r 2               ;	$900f	Screen and border color register
001EF3r 2               ;		bits 4-7 select background color
001EF3r 2               ;		bits 0-2 select border color
001EF3r 2               ;		bit 3 selects inverted or normal mode
001EF3r 2               ;
001EF3r 2               
001EF3r 2               ; VIC constants
001EF3r 2               
001EF3r 2               ;	scrchar 	= 22				; char/line
001EF3r 2               ;	scrline		= 22				; lines/screen
001EF3r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
001EF3r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
001EF3r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
001EF3r 2               
001EF3r 2               ; VIC variables:
001EF3r 2               
001EF3r 2  00           	fontcol:	.byte 0		; Frontcolour text
001EF4r 2               
001EF4r 2               ; Addresses
001EF4r 2               
001EF4r 2               	MapAddr		= $400		; RAM
001EF4r 2               	ScreenAddr	= $0200		; VIDEO RAM
001EF4r 2               	CharAddress	= $1000		; CHAR RAM
001EF4r 2               	Reg0		= $9000		; Horizontal centering
001EF4r 2               	Reg1		= $9001		; Vertical centering
001EF4r 2               	Reg2		= $9002		; Set # of columns
001EF4r 2               	Reg3		= $9003		; Set # of rows
001EF4r 2               	Reg4		= $9004		; Vsync signal
001EF4r 2               	Reg5		= $9005		; Start of character memory
001EF4r 2               	RegE		= $900e		; Colour and auxcolour register
001EF4r 2               	RegF		= $900f		; Screen and border color register
001EF4r 2               	JoyAddr1	= $9111		; Joystick address 1
001EF4r 2               	KeyColAddr	= $9120		; Keyboard column (write)
001EF4r 2               	JoyAddr2	= $9120		; Joystick address 2
001EF4r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
001EF4r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
001EF4r 2               	Timer1_Low  	= $9114		; Timer 1 low byte
001EF4r 2               	Timer1_High 	= $9115		; Timer 1 high byte
001EF4r 2               	Timer2_Low  	= $9118		; Timer 2 low byte
001EF4r 2               	Timer2_High 	= $9119		; Timer 2 high byte
001EF4r 2               	AUX		= $911b		; Auxiliary control register
001EF4r 2               	IFR		= $911d		; Interrupt Flag Register
001EF4r 2               	IER		= $911e		; Interrupt Enable Register
001EF4r 2               	ColorAttr	= $9600		; Color attributes
001EF4r 2               
001EF4r 2               ;----------------------------------------------------------------------
001EF4r 2               ; VIC20 video hardware fns
001EF4r 2               ;----------------------------------------------------------------------
001EF4r 2               
001EF4r 2               init:
001EF4r 2               
001EF4r 2               ; Disable interrupts
001EF4r 2               
001EF4r 2  A9 7F        	lda #$7f
001EF6r 2  8D 1E 91     	sta $911e
001EF9r 2  8D 2D 91     	sta $912d
001EFCr 2  8D 2E 91     	sta $912e
001EFFr 2               
001EFFr 2               ; Set audio volume to max
001EFFr 2  A9 0F        	lda #$0f
001F01r 2  8D 0E 90     	sta $900e
001F04r 2               
001F04r 2               ; Init screen for NTSC
001F04r 2               ; this sets the background and border color of the screen
001F04r 2               ; in this case border black and background black
001F04r 2               
001F04r 2  A9 18        	lda #%00011000
001F06r 2  8D 0F 90     	sta RegF
001F09r 2               
001F09r 2               ; Reset fontcolor
001F09r 2  A9 00        	lda #0		; Black
001F0Br 2  8D rr rr     	sta fontcol
001F0Er 2               
001F0Er 2               
001F0Er 2               ; max num of columns 24
001F0Er 2               
001F0Er 2  AD 02 90     	lda Reg2
001F11r 2  29 80        	and #%10000000
001F13r 2  09 16        	ora #ScrWidth
001F15r 2  8D 02 90     	sta Reg2
001F18r 2               
001F18r 2               ; max num of lines (mult by 2 - 24) for 8x8 chars
001F18r 2               ; no multiply for 8x16 chars
001F18r 2               
001F18r 2  AD 03 90     	lda Reg3
001F1Br 2  29 81        	and #%10000001
001F1Dr 2  09 16        	ora #ScrWidth		; number of rows multipled by two
001F1Fr 2  8D 03 90     	sta Reg3
001F22r 2               
001F22r 2               ; horizontal and vertical position must be set for
001F22r 2               ; non standard screen resolution (standard 22x23)
001F22r 2               ; same games even allow the user to change them
001F22r 2               ; these values are for PAL for NTSC should be different
001F22r 2               ; move horizontal position in the screen
001F22r 2               
001F22r 2  AD 00 90     	lda Reg0
001F25r 2  29 80        	and #%10000000
001F27r 2  09 04        	ora #CentreX
001F29r 2  8D 00 90     	sta Reg0
001F2Cr 2               
001F2Cr 2               ; move vertical position in the screen
001F2Cr 2               
001F2Cr 2  A9 1B        	lda #CentreY
001F2Er 2  8D 01 90     	sta Reg1
001F31r 2               
001F31r 2               ; Set screem memory to $200
001F31r 2               ; bit 7 on $9002 has to be set
001F31r 2               
001F31r 2  AD 02 90     	lda Reg2
001F34r 2  09 80        	ora #%10000000
001F36r 2  8D 02 90     	sta Reg2
001F39r 2               
001F39r 2               ; Set character data pointer to CHAR RAM at $1000
001F39r 2               ; bit 7 on $9005 has always to be set
001F39r 2               ; (based on compute - mapping the vic book)
001F39r 2               ; color ram goes to 9600
001F39r 2               
001F39r 2  AD 05 90     	lda Reg5
001F3Cr 2  29 0C        	and #%00001100
001F3Er 2  09 8C        	ora #%10001100
001F40r 2  8D 05 90     	sta Reg5
001F43r 2               
001F43r 2               ; This set the char size to 8x16
001F43r 2               
001F43r 2  AD 03 90     	lda Reg3
001F46r 2  09 01        	ora #%00000001
001F48r 2  8D 03 90     	sta Reg3
001F4Br 2               
001F4Br 2               ; Init screencharacters
001F4Br 2               ; Fill screen with characters from left to right, up to down
001F4Br 2               
001F4Br 2  A2 00        	ldx #0
001F4Dr 2  A0 00        	ldy #0
001F4Fr 2               scrinit:
001F4Fr 2  8A           	txa
001F50r 2  9D 00 02     	sta ScreenAddr,x
001F53r 2  98           	tya
001F54r 2  9D 00 96     	sta ColorAttr,x
001F57r 2  E8           	inx
001F58r 2  E0 F2        	cpx#242
001F5Ar 2  D0 F3        	bne scrinit
001F5Cr 2               
001F5Cr 2               
001F5Cr 2               ; Reset fontcolor
001F5Cr 2               
001F5Cr 2  A9 00        	lda #0			; Black
001F5Er 2  8D rr rr     	sta fontcol
001F61r 2               
001F61r 2               ; Init VIA timer for timeout 1/25 sec
001F61r 2               
001F61r 2  A9 E0        	lda #$e0		; T1 continuous
001F63r 2  8D 1B 91     	sta AUX
001F66r 2  A9 7F        	lda #$7f		; No int
001F68r 2  8D 1E 91     	sta IER
001F6Br 2  A9 00        	lda #0
001F6Dr 2  8D 1D 91     	sta IFR			; Clear interrupt flags
001F70r 2  A9 A8        	lda #<timervalue	; Timer 1/25 sec
001F72r 2  8D 14 91     	sta Timer1_Low
001F75r 2  A9 61        	lda #>timervalue
001F77r 2  8D 15 91     	sta Timer1_High
001F7Ar 2               
001F7Ar 2  60           	rts
001F7Br 2               
001F7Br 2               ;========================================================
001F7Br 2               ; KEY AND JOYSTICK ROUTINES
001F7Br 2               ;--------------------------------------------------------
001F7Br 2               ; Keys
001F7Br 2               ;
001F7Br 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
001F7Br 2               ;             ||||||||
001F7Br 2               ;             |||||||+> Right    KEY 0  - X
001F7Br 2               ;             ||||||+-> Left     KEY 1  - Z
001F7Br 2               ;             |||||+--> Down     KEY 2  - .
001F7Br 2               ;             ||||+---> Up       KEY 3  - ;
001F7Br 2               ;             |||+----> Fire1    KEY 4  - SPC
001F7Br 2               ;             ||+-----> Fire2    KEY 5  - Q
001F7Br 2               ;             |+------> Fire3    KEY 6  - P
001F7Br 2               ;             +-------> Not used
001F7Br 2               ;
001F7Br 2               ;                       Option1  KEY 7  - 1
001F7Br 2               ;                       Option2  KEY 8  - 2
001F7Br 2               ;                       Option3  KEY 9  - 3
001F7Br 2               ;                       Option4  KEY 10 - 4
001F7Br 2               ;--------------------------------------------------------
001F7Br 2               
001F7Br 2               ;--------------------------------------------------------
001F7Br 2               ; PRSKEY
001F7Br 2               ;
001F7Br 2               ; Wait for keypress.
001F7Br 2               ;--------------------------------------------------------
001F7Br 2               
001F7Br 2               prskey:
001F7Br 2  98           	tya
001F7Cr 2  48           	pha
001F7Dr 2               prsloop:
001F7Dr 2  20 rr rr     	jsr vsync
001F80r 2  20 rr rr     	jsr readkey
001F83r 2  C0 FF        	cpy #255
001F85r 2  F0 F6        	beq prsloop		; wait until key pressed
001F87r 2               
001F87r 2               prsrelease:
001F87r 2  20 rr rr     	jsr vsync
001F8Ar 2  20 rr rr     	jsr readkey
001F8Dr 2  C0 FF        	cpy #255
001F8Fr 2  D0 F6        	bne prsrelease		; wait until key released
001F91r 2               
001F91r 2  20 rr rr     	jsr joykey
001F94r 2               
001F94r 2  68           	pla
001F95r 2  A8           	tay
001F96r 2  60           	rts
001F97r 2               
001F97r 2               ;--------------------------------------------------------
001F97r 2               ; KTEST
001F97r 2               ;
001F97r 2               ; Keyboard test routine with key in A.
001F97r 2               ; Scan key and clear carry if key pressed
001F97r 2               ;--------------------------------------------------------
001F97r 2               
001F97r 2               ktest:
001F97r 2  85 rr        	sta z80_a		; save key
001F99r 2               
001F99r 2  4A           	lsr a
001F9Ar 2  4A           	lsr a
001F9Br 2  4A           	lsr a
001F9Cr 2  4A           	lsr a
001F9Dr 2  AA           	tax
001F9Er 2  BD rr rr     	lda colmask,x
001FA1r 2  8D 20 91     	sta KeyColAddr		; set row
001FA4r 2               
001FA4r 2  A5 rr        	lda z80_a
001FA6r 2  29 0F        	and #$0f
001FA8r 2  AA           	tax			; get column
001FA9r 2               
001FA9r 2  AD 21 91     	lda KeyRowAddr		; read column
001FACr 2  3D rr rr     	and keymask,x		; check if key pressed
001FAFr 2  F0 02        	beq pressed		; Skip if pressed
001FB1r 2  38           	sec			; key not pressed
001FB2r 2  60           	rts
001FB3r 2               pressed:
001FB3r 2  18           	clc			; key pressed
001FB4r 2  60           	rts
001FB5r 2               
001FB5r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
001FB9r 2  F7 FB FD FE  
001FBDr 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
001FC1r 2  10 20 40 80  
001FC5r 2               
001FC5r 2               ;---------------------------------------------------------------
001FC5r 2               ; KGET
001FC5r 2               ;
001FC5r 2               ; Read keyboard matrix if a key is pressed.
001FC5r 2               ; Return A = high nibble=row and low nibble=col
001FC5r 2               ;---------------------------------------------------------------
001FC5r 2               
001FC5r 2               kget:
001FC5r 2  86 rr        	stx xtmp		; Save x-reg
001FC7r 2               kget0:
001FC7r 2  A2 00        	ldx #0			; reset row
001FC9r 2               kget1:
001FC9r 2  BD rr rr     	lda colmask,x		; Get mask
001FCCr 2  8D 20 91     	sta KeyColAddr		; Set row
001FCFr 2  AD 21 91     	lda KeyRowAddr		; Read columns
001FD2r 2  85 rr        	sta tmp			; Save colums
001FD4r 2  C9 FF        	cmp #$ff		; Key pressed?
001FD6r 2  D0 08        	bne kget2		; Yes, skip
001FD8r 2  E8           	inx			; Next row
001FD9r 2  E0 08        	cpx #8			; All rows scanned?
001FDBr 2  D0 EC        	bne kget1		; No, repeat
001FDDr 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
001FE0r 2               kget2:
001FE0r 2  A0 00        	ldy #0			; Reset column
001FE2r 2               kget3:
001FE2r 2  46 rr        	lsr tmp			; Test bit
001FE4r 2  90 04        	bcc kget4		; If clear, key pressed
001FE6r 2  C8           	iny			; Next column
001FE7r 2  4C rr rr     	jmp kget3		; Repeat
001FEAr 2               kget4:
001FEAr 2  86 rr        	stx tmp			; Get row
001FECr 2  06 rr        	asl tmp			; Make high nibble
001FEEr 2  06 rr        	asl tmp
001FF0r 2  06 rr        	asl tmp
001FF2r 2  06 rr        	asl tmp
001FF4r 2  98           	tya			; Get column
001FF5r 2  18           	clc
001FF6r 2  65 rr        	adc tmp			; Add row as low nibble
001FF8r 2  85 rr        	sta tmp
001FFAr 2               kget5:
001FFAr 2  AD 21 91     	lda KeyRowAddr		; Read columns
001FFDr 2  C9 FF        	cmp #$ff
001FFFr 2  D0 F9        	bne kget5
002001r 2               
002001r 2  A5 rr        	lda tmp			; Return keycode
002003r 2  A6 rr        	ldx xtmp		; Restore X-reg
002005r 2  60           	rts			; Return
002006r 2               
002006r 2               ;-------------------------------------------------------------
002006r 2               ; READKEY
002006r 2               ;
002006r 2               ; Check keyboard matrix if a key is pressed
002006r 2               ; Return keymask in Y
002006r 2               ;-------------------------------------------------------------
002006r 2               
002006r 2               readkey:
002006r 2  A9 FF        	lda #$ff		; Keymask
002008r 2  85 rr        	sta tmp
00200Ar 2  A2 07        	ldx #7
00200Cr 2               scanrow:
00200Cr 2  BD rr rr     	lda colmask,x
00200Fr 2  8D 20 91     	sta KeyColAddr		; set row
002012r 2  AD 21 91     	lda KeyRowAddr		; read column
002015r 2  25 rr        	and tmp			; Reset bit is key pressed
002017r 2  85 rr        	sta tmp
002019r 2  CA           	dex
00201Ar 2  10 F0        	bpl scanrow
00201Cr 2  A5 rr        	lda tmp
00201Er 2  A8           	tay
00201Fr 2  60           	rts
002020r 2               
002020r 2               ;-------------------------------------------------------------
002020r 2               ; JOY1SCAN
002020r 2               ;
002020r 2               ; Initializes joystick
002020r 2               ;-------------------------------------------------------------
002020r 2               
002020r 2               joyinit:
002020r 2  60           	rts
002021r 2               
002021r 2               ;-------------------------------------------------------------
002021r 2               ; JOY1SCAN
002021r 2               ;
002021r 2               ; Scan joystick1 and return key in z80_e
002021r 2               ; Up, down, left, right and fire are read from the joystick
002021r 2               ; Fire2 and fire3 are read from the keyboard
002021r 2               ;-------------------------------------------------------------
002021r 2               
002021r 2               joy1scan:
002021r 2  A9 FF        	lda #$ff
002023r 2  85 rr        	sta z80_e
002025r 2               
002025r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
002028r 2  4A           	lsr a
002029r 2  4A           	lsr a
00202Ar 2               
00202Ar 2  4A           	lsr a
00202Br 2  26 rr        	rol z80_e		; Up
00202Dr 2  4A           	lsr a
00202Er 2  26 rr        	rol z80_e		; Down
002030r 2  4A           	lsr a
002031r 2  26 rr        	rol z80_e		; Left
002033r 2               
002033r 2  A9 7F        	lda #%01111111
002035r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
002038r 2  AD 20 91     	lda JoyAddr2
00203Br 2  0A           	asl a
00203Cr 2  26 rr        	rol z80_e		; Right
00203Er 2  A9 FF        	lda #%11111111
002040r 2  8D 22 91     	sta DDRB		; Reset
002043r 2               
002043r 2  AD 11 91     	lda JoyAddr1
002046r 2  29 20        	and #%00100000
002048r 2  D0 06        	bne :+
00204Ar 2  A5 rr        	lda z80_e
00204Cr 2  29 EF        	and #%11101111		; Fire
00204Er 2  85 rr        	sta z80_e
002050r 2               :
002050r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
002053r 2  20 rr rr     	jsr ktest
002056r 2  B0 06        	bcs :+
002058r 2  A5 rr        	lda z80_e
00205Ar 2  29 BF        	and #%10111111
00205Cr 2  85 rr        	sta z80_e
00205Er 2               :
00205Er 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
002061r 2  20 rr rr     	jsr ktest
002064r 2  B0 06        	bcs :+
002066r 2  A5 rr        	lda z80_e
002068r 2  29 DF        	and #%11011111
00206Ar 2  85 rr        	sta z80_e
00206Cr 2               :
00206Cr 2  60           	rts
00206Dr 2               
00206Dr 2               ;-------------------------------------------------------------
00206Dr 2               ; JOY2SCAN
00206Dr 2               ;
00206Dr 2               ; TODO, Scan joystick2 and return key in z80_e
00206Dr 2               ;-------------------------------------------------------------
00206Dr 2               
00206Dr 2               joy2scan:
00206Dr 2  60           	rts
00206Er 2               
00206Er 2               
00206Er 2               
00206Er 2               ;========================================================
00206Er 2               ; HARDWARE DEPENDING ROUTINES
00206Er 2               ;========================================================
00206Er 2               
00206Er 2               ;----------------------------------------------------
00206Er 2               ; DELAY
00206Er 2               ;
00206Er 2               ; Delay routine A * 1/50 sec
00206Er 2               ;----------------------------------------------------
00206Er 2               
00206Er 2               delay:
00206Er 2  85 rr        	sta xtmp		; set delaycounter
002070r 2               del_loop:
002070r 2  AD 04 90     	lda Reg4
002073r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
002075r 2               
002075r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002077r 2               delay1:
002077r 2  61 80        	adc ($80,x)		;	 6 usec
002079r 2  61 80        	adc ($80,x)		;	 6 usec
00207Br 2  88           	dey			;	 2 usec
00207Cr 2  D0 F9        	bne delay1		;	 2 usec
00207Er 2  EA           	nop			; 2 usec
00207Fr 2  EA           	nop			; 2 usec
002080r 2               				; tot: 20000 usec
002080r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
002082r 2  D0 EC        	bne del_loop
002084r 2  60           	rts
002085r 2               
002085r 2               ;-------------------------------------------------------------
002085r 2               ; VSYNC
002085r 2               ;
002085r 2               ; - read joystick/keyboard
002085r 2               ; - sync framerate with timer 25Hz
002085r 2               ; - handle shrapnel every even frame
002085r 2               ; - handle sound
002085r 2               ;-------------------------------------------------------------
002085r 2               
002085r 2               vsync:
002085r 2  48           	pha			; save registers
002086r 2  98           	tya
002087r 2  48           	pha
002088r 2  8A           	txa
002089r 2  48           	pha
00208Ar 2               
00208Ar 2               ; Read joystick/keyboard.
00208Ar 2               
00208Ar 2  20 rr rr     	jsr joykey
00208Dr 2               
00208Dr 2               ; Sync framerate with timer 25Hz
00208Dr 2               
00208Dr 2  A9 40        	lda #$40		; set Timer1 expired bit
00208Fr 2               vsync1:
00208Fr 2  2C 1D 91     	bit IFR			; check Interrupt Flag Register
002092r 2  F0 FB        	beq vsync1		; wait if timer not expired
002094r 2  AD 14 91     	lda Timer1_Low		; clear Timer interrupt
002097r 2               
002097r 2               ; Handle shrapnel every even frame
002097r 2               
002097r 2  A5 rr        	lda clock		; get clock
002099r 2  29 01        	and #1			; 2 frames expired
00209Br 2  D0 03        	bne:+
00209Dr 2  20 rr rr     	jsr proshr		; process shrapnel
0020A0r 2               :
0020A0r 2               
0020A0r 2               ; Handle sound
0020A0r 2               
0020A0r 2  AD rr rr         lda sndtyp
0020A3r 2  F0 33            beq sndskip
0020A5r 2               
0020A5r 2               sndloop:
0020A5r 2  AC rr rr         ldy sndtyp
0020A8r 2               sndwait:
0020A8r 2  88               dey
0020A9r 2  D0 FD            bne sndwait
0020ABr 2               
0020ABr 2  AD rr rr         lda sndtyp
0020AEr 2  30 11            bmi crashaudio
0020B0r 2               
0020B0r 2               
0020B0r 2               beepaudio:
0020B0r 2                   ; enable sound on channel 2
0020B0r 2                   ; add 128 because sound is in range 128-255
0020B0r 2  4A               lsr
0020B1r 2  A9 FF            lda #$ff
0020B3r 2  38               sec
0020B4r 2  ED rr rr         sbc sndtyp
0020B7r 2  4A               lsr
0020B8r 2  4A               lsr
0020B9r 2  09 C0            ora #%11000000
0020BBr 2  8D 0C 90         sta $900c
0020BEr 2               
0020BEr 2  4C rr rr         jmp endaudiotype
0020C1r 2               crashaudio:
0020C1r 2  A9 FF            lda #$ff
0020C3r 2  38               sec
0020C4r 2  ED rr rr         sbc sndtyp
0020C7r 2  09 80            ora #%10000000
0020C9r 2  8D 0D 90         sta $900d
0020CCr 2               
0020CCr 2               endaudiotype:
0020CCr 2               
0020CCr 2  CE rr rr         dec sndtyp
0020CFr 2  F0 07            beq sndskip
0020D1r 2  C9 80            cmp #128
0020D3r 2  F0 03            beq sndskip
0020D5r 2  4C rr rr         jmp sndloop
0020D8r 2               sndskip:
0020D8r 2                   ; disable sound
0020D8r 2  A9 00            lda #$00
0020DAr 2  8D 0C 90         sta $900c
0020DDr 2  8D 0D 90         sta $900d
0020E0r 2               
0020E0r 2  68               pla
0020E1r 2  AA               tax
0020E2r 2  68               pla
0020E3r 2  A8               tay
0020E4r 2  68               pla
0020E5r 2  60               rts
0020E6r 2  00           sndtyp:		.byte 0		; Beep sound parameter
0020E7r 2               
0020E7r 2               
0020E7r 2               
0020E7r 2               
0020E7r 2               
0020E7r 2               
0020E7r 2               ;========================================================
0020E7r 2               ; SPRITE HANDLING ROUTINES
0020E7r 2               ;========================================================
0020E7r 2               
0020E7r 2               ;----------------------------------------------------
0020E7r 2               ; SPRITE
0020E7r 2               ;
0020E7r 2               ; Draw object sprite
0020E7r 2               ;----------------------------------------------------
0020E7r 2               
0020E7r 2               .if oflag
0020E7r 2               sprite:
0020E7r 2               	stx xtmp		; Save X-reg
0020E7r 2               	jsr scadd 		; get screen address in scraddr.
0020E7r 2               
0020E7r 2               	lda dispx 		; x position.
0020E7r 2               	and #7 			; position straddling cells.
0020E7r 2               	sta z80_b		; store in b register.
0020E7r 2               
0020E7r 2               	lda z80_l		; store sprite graphic address.
0020E7r 2               	sta sprit1+1
0020E7r 2               	sta sprit2+1
0020E7r 2               	lda z80_h
0020E7r 2               	sta sprit1+2
0020E7r 2               	sta sprit2+2
0020E7r 2               
0020E7r 2               	ldx #0			; pixel height.
0020E7r 2               	ldy #0
0020E7r 2               sprit1:
0020E7r 2               	lda objdta,x		; fetch first byte.
0020E7r 2               	sta spr
0020E7r 2               	inx
0020E7r 2               sprit2:
0020E7r 2               	lda objdta,x
0020E7r 2               	sta spr+1
0020E7r 2               
0020E7r 2               	lda #0
0020E7r 2               	sta spr+2
0020E7r 2               	jsr sprit7		; shift sprite
0020E7r 2               
0020E7r 2               	lda spr			; fetch graphic.
0020E7r 2               	ldy #0			; _BEEB
0020E7r 2               	eor (scraddr),y		; merge with screen image.
0020E7r 2               	sta (scraddr),y		; write to screen.
0020E7r 2               
0020E7r 2               	lda spr+1		; fetch graphic.
0020E7r 2               	ldy #16			; _BEEB
0020E7r 2               	eor (scraddr),y		; merge with screen image.
0020E7r 2               	sta (scraddr),y		; write to screen.
0020E7r 2               
0020E7r 2               	lda spr+2		; fetch graphic.
0020E7r 2               	ldy #32			; _BEEB
0020E7r 2               	eor (scraddr),y		; merge with screen image.
0020E7r 2               	sta (scraddr),y		; write to screen.
0020E7r 2               
0020E7r 2               	jsr nline
0020E7r 2               
0020E7r 2               	inx			; next source byte.
0020E7r 2               	cpx #32
0020E7r 2               	bne sprit1		; repeat
0020E7r 2               
0020E7r 2               	ldx xtmp		; retreive X-reg
0020E7r 2               	rts
0020E7r 2               
0020E7r 2               .endif
0020E7r 2               
0020E7r 2               ;------------------------------------------------------------------
0020E7r 2               ; SCADD
0020E7r 2               ;
0020E7r 2               ; This routine returns a screen address for X,Y in scraddr.
0020E7r 2               ;------------------------------------------------------------------
0020E7r 2               
0020E7r 2               scadd:
0020E7r 2  A5 rr        	lda dispx		; get x
0020E9r 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
0020EBr 2  85 rr        	sta scraddr		; set lb scraddr
0020EDr 2  A9 00        	lda #0
0020EFr 2  85 rr        	sta scraddr+1		; set hb scraddr
0020F1r 2  06 rr        	asl scraddr		; multiply X by 2
0020F3r 2  26 rr        	rol scraddr+1
0020F5r 2               
0020F5r 2               ; Add line address Y pos to X
0020F5r 2               
0020F5r 2  A6 rr        	ldx dispy		; get row address Y pos
0020F7r 2  18           	clc
0020F8r 2  A5 rr        	lda scraddr
0020FAr 2  7D 00 07     	adc SCADTB_lb,x
0020FDr 2  85 rr        	sta scraddr
0020FFr 2  A5 rr        	lda scraddr+1
002101r 2  7D 00 08     	adc SCADTB_hb,x
002104r 2  85 rr        	sta scraddr+1
002106r 2               
002106r 2  60           	rts
002107r 2               
002107r 2               ;------------------------------------------------------------------
002107r 2               ; SSPRIA
002107r 2               ;
002107r 2               ; Erase single sprite, old (ix+0).
002107r 2               ;------------------------------------------------------------------
002107r 2               
002107r 2               sspria:
002107r 2  20 rr rr     	jsr gsprad		; get old sprite address.
00210Ar 2               sspri2:
00210Ar 2               .if rflag
00210Ar 2               	lda z80_e		; 3c
00210Ar 2               	sta dline_spraddr1+1	; 4c
00210Ar 2               	sta dline_spraddr2+1	; 4c
00210Ar 2               	lda z80_d		; 3c
00210Ar 2               	sta dline_spraddr1+2	; 4c
00210Ar 2               	sta dline_spraddr2+2	; 4c
00210Ar 2               
00210Ar 2               	ldx sprshft
00210Ar 2               	lda shift_table,x
00210Ar 2               	sta dline_shift1+1
00210Ar 2               	sta dline_shift2+1
00210Ar 2               	lda shift_table+1,x
00210Ar 2               	sta dline_shift1+2
00210Ar 2               	sta dline_shift2+2
00210Ar 2               
00210Ar 2               	ldx #0			; byte counter.
00210Ar 2               sspri0:
00210Ar 2               	jsr dline		; draw a line.
00210Ar 2                 .if bflag
00210Ar 2               	cpx #48			; big sprites have 24 bytes
00210Ar 2                 .else
00210Ar 2               	cpx #32			; normal sprites have 32 bytes
00210Ar 2                 .endif
00210Ar 2               	bne sspri0		; repeat 16 times x 2 bytes
00210Ar 2               	rts
00210Ar 2               .else
00210Ar 2                 .if bflag
00210Ar 2               	lda #24			; big sprites have 24 lines
00210Ar 2                 .else
00210Ar 2  A9 10        	lda #16			; normal sprites have 16 lines.
00210Cr 2                 .endif
00210Cr 2  8D rr rr     	sta acnt
00210Fr 2               sspri0:
00210Fr 2  20 rr rr     	jsr dline		; draw a line.
002112r 2  CE rr rr     	dec acnt
002115r 2  D0 F8        	bne sspri0		; repeat 16 times
002117r 2  60           	rts
002118r 2               
002118r 2  00           acnt:	.byte 0			; line counter
002119r 2               
002119r 2               .endif
002119r 2               
002119r 2               ;------------------------------------------------------------------
002119r 2               ; SSPRIB
002119r 2               ;
002119r 2               ; Display single sprite, new (ix+5).
002119r 2               ;------------------------------------------------------------------
002119r 2               
002119r 2               ssprib:
002119r 2  20 rr rr     	jsr gspran 		; get new sprite address.
00211Cr 2  4C rr rr     	jmp sspri2		; Display sprite
00211Fr 2               
00211Fr 2               ;------------------------------------------------------------------
00211Fr 2               ; SSPRIC
00211Fr 2               ;
00211Fr 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
00211Fr 2               ;------------------------------------------------------------------
00211Fr 2               
00211Fr 2               sspric:
00211Fr 2               .if rflag
00211Fr 2               	jsr gsprad 		; get old sprite address.
00211Fr 2               
00211Fr 2               	lda z80_e		; 3c
00211Fr 2               	sta ddline_spraddr3+1	; 4c
00211Fr 2               	sta ddline_spraddr4+1	; 4c
00211Fr 2               
00211Fr 2               	lda z80_d		; 3c
00211Fr 2               	sta ddline_spraddr3+2	; 4c
00211Fr 2               	sta ddline_spraddr4+2	; 4c
00211Fr 2               
00211Fr 2               	ldx sprshft		; set spriteshift table addresses
00211Fr 2               	lda shift_table,x
00211Fr 2               	sta ddline_shift3+1
00211Fr 2               	sta ddline_shift4+1
00211Fr 2               	lda shift_table+1,x
00211Fr 2               	sta ddline_shift3+2
00211Fr 2               	sta ddline_shift4+2
00211Fr 2               
00211Fr 2               	jsr exx  		; store addresses.
00211Fr 2               	jsr gspran 		; get new sprite addresses.
00211Fr 2               
00211Fr 2               	lda z80_e		; 3c
00211Fr 2               	sta ddline_spraddr1+1	; 4c
00211Fr 2               	sta ddline_spraddr2+1	; 4c
00211Fr 2               
00211Fr 2               	lda z80_d		; 3c
00211Fr 2               	sta ddline_spraddr1+2	; 4c
00211Fr 2               	sta ddline_spraddr2+2	; 4c
00211Fr 2               
00211Fr 2               	ldx sprshft
00211Fr 2               	lda shift_table,x
00211Fr 2               	sta ddline_shift1+1
00211Fr 2               	sta ddline_shift2+1
00211Fr 2               	lda shift_table+1,x
00211Fr 2               	sta ddline_shift1+2
00211Fr 2               	sta ddline_shift2+2
00211Fr 2               
00211Fr 2               	ldx #0
00211Fr 2               lloop:
00211Fr 2               	jsr ddline 		; draw a line.
00211Fr 2                 .if bflag
00211Fr 2               	cpx #48
00211Fr 2                 .else
00211Fr 2               	cpx #32
00211Fr 2                 .endif
00211Fr 2               	bne lloop
00211Fr 2               	rts
00211Fr 2               
00211Fr 2               shift_table:
00211Fr 2               	.word shift0
00211Fr 2               	.word shift2
00211Fr 2               	.word shift4
00211Fr 2               	.word shift6
00211Fr 2               
00211Fr 2               ;------------------------------------------------------------------
00211Fr 2               ; DLINE
00211Fr 2               ;
00211Fr 2               ; Draw a sprite line, now work out next target address.
00211Fr 2               ;
00211Fr 2               ; Input:
00211Fr 2               ;  B  = right mask
00211Fr 2               ;  C  = left mask
00211Fr 2               ;  DE = spriteaddress
00211Fr 2               ;  scraddr = screen address
00211Fr 2               ;------------------------------------------------------------------
00211Fr 2               
00211Fr 2               dline:
00211Fr 2               
00211Fr 2               dline_spraddr1:
00211Fr 2               	ldy $ffff,x 		; get graphic data as pointer.
00211Fr 2               dline_shift1:
00211Fr 2               	lda $ffff,y		; get pre-shifted data
00211Fr 2               	sta sprtmp		; save byte
00211Fr 2               	and z80_c 		; mask right for left byte
00211Fr 2               
00211Fr 2               	ldy #0
00211Fr 2               	eor (scraddr),y 	; XOR with what's there.
00211Fr 2               	sta (scraddr),y 	; display left byte
00211Fr 2               
00211Fr 2               ; carry to next screen byte
00211Fr 2               
00211Fr 2               	lda sprtmp		; fetch data.
00211Fr 2               	and z80_b 		; mask for left part
00211Fr 2               	sta sprtmp
00211Fr 2               
00211Fr 2               ; middle screen byte
00211Fr 2               
00211Fr 2               	inx
00211Fr 2               dline_spraddr2:
00211Fr 2               	ldy $ffff,x 		; second bit of data.
00211Fr 2               dline_shift2:
00211Fr 2               	lda $ffff,y
00211Fr 2               	sta sprtmp2
00211Fr 2               	and z80_c 		; mask away what's not needed.
00211Fr 2               	ora sprtmp
00211Fr 2               	ldy #16
00211Fr 2               	eor (scraddr),y 	; XOR with what's there.
00211Fr 2               	sta (scraddr),y 	; display middle bye.
00211Fr 2               
00211Fr 2               ; carry to last screen byte
00211Fr 2               
00211Fr 2               	lda sprtmp2
00211Fr 2               	and z80_b 		; mask away unwanted
00211Fr 2               
00211Fr 2               	ldy #32
00211Fr 2               	eor (scraddr),y 	; XOR with what's there.
00211Fr 2               	sta (scraddr),y 	; display right byte.
00211Fr 2               
00211Fr 2               	inx
00211Fr 2               .else
00211Fr 2               
00211Fr 2  20 rr rr     	jsr gsprad 		; get old sprite address.
002122r 2  20 rr rr     	jsr exx  		; store addresses.
002125r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
002128r 2               
002128r 2               .if bflag
002128r 2               	lda #23
002128r 2               .else
002128r 2  A9 0F        	lda #15
00212Ar 2               .endif
00212Ar 2  85 rr        	sta ccnt
00212Cr 2               lloop:
00212Cr 2  20 rr rr     	jsr dline 		; draw a line.
00212Fr 2  20 rr rr     	jsr exx  		; restore old addresses.
002132r 2  20 rr rr     	jsr dline 		; delete a line.
002135r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
002138r 2  C6 rr        	dec ccnt
00213Ar 2  D0 F0        	bne lloop
00213Cr 2               
00213Cr 2  20 rr rr     	jsr dline		; draw a line.
00213Fr 2  20 rr rr     	jsr exx 		; restore old addresses.
002142r 2               
002142r 2               ;-------------------------------------------------------------
002142r 2               ; Drop through.
002142r 2               ; Line drawn, now work out next target address.
002142r 2               ;
002142r 2               ; Input:
002142r 2               ;  B  = right mask
002142r 2               ;  C  = left mask
002142r 2               ;  DE = spriteaddress
002142r 2               ;  scraddr = screen address
002142r 2               ;-------------------------------------------------------------
002142r 2               
002142r 2               dline:
002142r 2  A0 00        	ldy #0
002144r 2  B1 rr        	lda (z80_de),y 		; graphic data.
002146r 2  48           	pha
002147r 2  25 rr        	and z80_c 		; mask away what's not needed.
002149r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00214Br 2  91 rr        	sta (scraddr),y 	; left byte on screen.
00214Dr 2               
00214Dr 2  68           	pla
00214Er 2  25 rr        	and z80_b 		; mask away unwanted bits.
002150r 2  A0 20        	ldy #32
002152r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002154r 2  91 rr        	sta (scraddr),y 	; right byte on screen
002156r 2               
002156r 2  E6 rr        	inc z80_e 		; next graphic.
002158r 2  D0 02        	bne :+
00215Ar 2  E6 rr        	inc z80_d
00215Cr 2               :
00215Cr 2               ; _BEEB screen arrangement
00215Cr 2               ;	sec
00215Cr 2               ;	lda scraddr 		; one character cell to the left.
00215Cr 2               ;	sbc #8
00215Cr 2               ;	sta scraddr
00215Cr 2               ;	lda scraddr+1
00215Cr 2               ;	sbc #0
00215Cr 2               ;	sta scraddr+1
00215Cr 2  A0 00        	ldy #0
00215Er 2  B1 rr        	lda (z80_de),y 		; second bit of data.
002160r 2  A0 10        	ldy #16
002162r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002164r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
002166r 2               
002166r 2  E6 rr        	inc z80_e 		; point to next line of data.
002168r 2  D0 02        	bne :+
00216Ar 2  E6 rr        	inc z80_d
00216Cr 2               :
00216Cr 2               ; _BEEB screen arrangement
00216Cr 2               ;	sec
00216Cr 2               ;	lda scraddr 		; another char left.
00216Cr 2               ;	sbc #8
00216Cr 2               ;	sta scraddr
00216Cr 2               ;	lda scraddr+1
00216Cr 2               ;	sbc #0
00216Cr 2               ;	sta scraddr+1
00216Cr 2               .endif
00216Cr 2               
00216Cr 2               ;----------------------------------------------------------------------
00216Cr 2               ; Line drawn, now work out next target address.
00216Cr 2               ;----------------------------------------------------------------------
00216Cr 2               
00216Cr 2               ; _BEEB screen arrangement
00216Cr 2               
00216Cr 2               nline:
00216Cr 2  A5 rr        	lda scraddr 			; get low byte of address.
00216Er 2  29 0F        	and #15
002170r 2  C9 0F        	cmp #15				; is this last line of row?
002172r 2  F0 03        	beq beeb_next_row
002174r 2               
002174r 2               	; within same row
002174r 2  E6 rr        	inc scraddr			; new low byte of address.
002176r 2  60           	rts
002177r 2               
002177r 2               beeb_next_row:
002177r 2  18           	clc
002178r 2  A5 rr        	lda scraddr
00217Ar 2  69 51        	adc #<(ScreenRowBytes-15)
00217Cr 2  85 rr        	sta scraddr			; new low byte of address.
00217Er 2  A5 rr        	lda scraddr+1
002180r 2  69 01        	adc #>(ScreenRowBytes-15)
002182r 2  85 rr        	sta scraddr+1			; new high byte of address.
002184r 2  60           	rts
002185r 2               
002185r 2               .if rflag
002185r 2               ;-------------------------------------------------------------
002185r 2               ; Drop through.
002185r 2               ; Line drawn, now work out next target address.
002185r 2               ;
002185r 2               ; Input:
002185r 2               ;  B  = right mask
002185r 2               ;  C  = left mask
002185r 2               ;  DE = spriteaddress
002185r 2               ;  scraddr = screen address
002185r 2               ;-------------------------------------------------------------
002185r 2               
002185r 2               ddline:
002185r 2               
002185r 2               ; NEW SPRITE
002185r 2               
002185r 2               ; first screen byte
002185r 2               
002185r 2               ddline_spraddr1:
002185r 2               	ldy $ffff,x 		; graphic data.
002185r 2               ddline_shift1:
002185r 2               	lda $ffff,y
002185r 2               	sta sprtmp
002185r 2               	and z80_c 			; mask away what's not needed.
002185r 2               
002185r 2               	ldy #0
002185r 2               	eor (scraddr),y 	; XOR with what's there.
002185r 2               	sta (scraddr),y 	; bung it in.
002185r 2               
002185r 2               ; carry to next screen byte
002185r 2               
002185r 2               	lda sprtmp			; fetch data.
002185r 2               	and z80_b 			; mask away unwanted
002185r 2               	sta sprtmp
002185r 2               
002185r 2               ; middle screen byte
002185r 2               
002185r 2               	inx
002185r 2               ddline_spraddr2:
002185r 2               	ldy $ffff,x 		; second bit of data.
002185r 2               ddline_shift2:
002185r 2               	lda $ffff,y
002185r 2               	sta sprtmp2
002185r 2               	and z80_c 			; mask away what's not needed.
002185r 2               	ora sprtmp
002185r 2               
002185r 2               	ldy #16
002185r 2               	eor (scraddr),y 	; XOR with what's there.
002185r 2               	sta (scraddr),y 	; bung it in.
002185r 2               
002185r 2               ; carry to last screen byte
002185r 2               
002185r 2               	lda sprtmp2
002185r 2               	and z80_b 			; mask away unwanted
002185r 2               
002185r 2               	ldy #32
002185r 2               	eor (scraddr),y 	; XOR with what's there.
002185r 2               	sta (scraddr),y 	; bung it in.
002185r 2               
002185r 2               ; _BEEB next row
002185r 2               
002185r 2               	lda scraddr 		; get low byte of address.
002185r 2               	and #15
002185r 2               	cmp #15				; is this last line of row?
002185r 2               	beq :+
002185r 2               
002185r 2               	; within same row can't increment page
002185r 2               	inc scraddr			; new low byte of address.
002185r 2               	bne ddline2
002185r 2               
002185r 2               :
002185r 2               	clc
002185r 2               	lda scraddr
002185r 2               	adc #<(ScreenRowBytes-15)
002185r 2               	sta scraddr			; new low byte of address.
002185r 2               	lda scraddr+1
002185r 2               	adc #>(ScreenRowBytes-15)
002185r 2               	sta scraddr+1		; new high byte of address.
002185r 2               
002185r 2               ; OLD SPRITE
002185r 2               
002185r 2               ddline2:
002185r 2               
002185r 2               ; still first row but different data!
002185r 2               
002185r 2               	dex
002185r 2               
002185r 2               ; first screen byte
002185r 2               
002185r 2               ddline_spraddr3:
002185r 2               	ldy $ffff,x			; graphic data.
002185r 2               ddline_shift3:
002185r 2               	lda $ffff,y
002185r 2               	sta sprtmp
002185r 2               	and z80_cp 			; mask away what's not needed.
002185r 2               
002185r 2               	ldy #0
002185r 2               	eor (z80_hlp),y 	; XOR with what's there.
002185r 2               	sta (z80_hlp),y 	; bung it in.
002185r 2               
002185r 2               ; carry to next screen byte
002185r 2               
002185r 2               	lda sprtmp			; fetch data.
002185r 2               	and z80_bp 			; mask away unwanted
002185r 2               	sta sprtmp
002185r 2               
002185r 2               ; middle screen byte
002185r 2               
002185r 2               	inx
002185r 2               ddline_spraddr4:
002185r 2               	ldy $ffff,x 		; second bit of data.
002185r 2               ddline_shift4:
002185r 2               	lda $ffff,y
002185r 2               	sta sprtmp2
002185r 2               	and z80_cp 			; mask away what's not needed.
002185r 2               	ora sprtmp
002185r 2               
002185r 2               	ldy #16
002185r 2               	eor (z80_hlp),y 	; XOR with what's there.
002185r 2               	sta (z80_hlp),y 	; bung it in.
002185r 2               
002185r 2               ; last screen byte
002185r 2               
002185r 2               	lda sprtmp2			; fetch data.
002185r 2               	and z80_bp 			; mask away unwanted
002185r 2               
002185r 2               	ldy #32
002185r 2               	eor (z80_hlp),y 	; XOR with what's there.
002185r 2               	sta (z80_hlp),y 	; bung it in.
002185r 2               
002185r 2               ; next row of sprite data
002185r 2               
002185r 2               	inx
002185r 2               
002185r 2               ; _BEEB screen arrangement
002185r 2               
002185r 2               	lda z80_lp 			; get low byte of address.
002185r 2               	and #15
002185r 2               	cmp #15				; is this last line of row?
002185r 2               	beq :+
002185r 2               
002185r 2               	; within same row can't increment page
002185r 2               	inc z80_lp			; new low byte of address.
002185r 2               	rts
002185r 2               
002185r 2               :
002185r 2               	clc
002185r 2               	lda z80_lp
002185r 2               	adc #<(ScreenRowBytes-15)
002185r 2               	sta z80_lp			; new low byte of address.
002185r 2               	lda z80_lp+1
002185r 2               	adc #>(ScreenRowBytes-15)
002185r 2               	sta z80_lp+1		; new high byte of address.
002185r 2               	rts
002185r 2               .endif
002185r 2               
002185r 2               ;----------------------------------------------------
002185r 2               ; Display character in A at dispx,dispy.
002185r 2               ;
002185r 2               ; Input:
002185r 2               ;  A 	   = character to print
002185r 2               ;----------------------------------------------------
002185r 2               
002185r 2               pchar:
002185r 2  85 rr        	sta fntaddr
002187r 2  A9 00        	lda #0
002189r 2  85 rr        	sta fntaddr+1
00218Br 2  06 rr        	asl fntaddr  		; multiply char by 8.
00218Dr 2  26 rr        	rol fntaddr+1
00218Fr 2  06 rr        	asl fntaddr
002191r 2  26 rr        	rol fntaddr+1
002193r 2  06 rr        	asl fntaddr
002195r 2  26 rr        	rol fntaddr+1
002197r 2               
002197r 2  A5 rr        	lda fntaddr
002199r 2  18           	clc
00219Ar 2  69 rr        	adc #<(FONT-256)
00219Cr 2  85 rr        	sta fntaddr		; that's the low byte.
00219Er 2  A5 rr        	lda fntaddr+1
0021A0r 2  69 rr        	adc #>(FONT-256)
0021A2r 2  85 rr        	sta fntaddr+1		; add displacement.
0021A4r 2               
0021A4r 2               pchark:
0021A4r 2  20 rr rr     	jsr gaadd		; set colour attribute
0021A7r 2  AD rr rr     	lda fontcol
0021AAr 2  A0 00        	ldy #0
0021ACr 2  91 rr        	sta (bufaddr),y
0021AEr 2               
0021AEr 2  20 rr rr     	jsr gprad		; get screen address.
0021B1r 2  A2 07        	ldx #7			; lines to write.
0021B3r 2               pchar0:
0021B3r 2  A0 00        	ldy #0
0021B5r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
0021B7r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
0021BAr 2               .if iflag
0021BAr 2               	eor #TxtInvert		; Invert
0021BAr 2               .endif
0021BAr 2  91 rr        	sta (scraddr),y 	; copy to screen.
0021BCr 2  E6 rr        	inc fntaddr		; next image byte.
0021BEr 2  D0 02        	bne :+
0021C0r 2  E6 rr        	inc fntaddr+1
0021C2r 2               :
0021C2r 2  CA           	dex			; next screen row down.
0021C3r 2  10 EE        	bpl pchar0		; repeat.
0021C5r 2               
0021C5r 2  60           	rts
0021C6r 2               
0021C6r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
0021CAr 2  03 02 01 00  
0021CEr 2               
0021CEr 2               .if rflag
0021CEr 2               ;----------------------------------------------------
0021CEr 2               ; Shift tables
0021CEr 2               ;----------------------------------------------------
0021CEr 2               
0021CEr 2               .align 256
0021CEr 2               shift0:
0021CEr 2               .repeat 256, i
0021CEr 2               	.byte i
0021CEr 2               .endrep
0021CEr 2               
0021CEr 2               shift2:
0021CEr 2               .repeat 256, i
0021CEr 2               	.byte (i >> 2) | (i << 6) & $c0
0021CEr 2               .endrep
0021CEr 2               
0021CEr 2               shift4:
0021CEr 2               .repeat 256, i
0021CEr 2               	.byte (i >> 4) | ((i << 4) & $f0)
0021CEr 2               .endrep
0021CEr 2               
0021CEr 2               shift6:
0021CEr 2               .repeat 256, i
0021CEr 2               	.byte (i >> 6) | ((i << 2) & $fc)
0021CEr 2               .endrep
0021CEr 2               .endif
0021CEr 2               
0021CEr 1               	.include "z80.asm"
0021CEr 2               ;------------------------------------------------------
0021CEr 2               ; z80.asm
0021CEr 2               ; spectrum stuff
0021CEr 2               ; adresses
0021CEr 2               
0021CEr 2               ;ws	 = $60
0021CEr 2               
0021CEr 2               ;z80_f	 = ws+$00
0021CEr 2               ;z80_a	 = ws+$01
0021CEr 2               ;z80_af	 = z80_f
0021CEr 2               
0021CEr 2               ;z80_c	 = ws+$02
0021CEr 2               ;z80_b	 = ws+$03
0021CEr 2               ;z80_bc	 = z80_c
0021CEr 2               
0021CEr 2               ;z80_e	 = ws+$04
0021CEr 2               ;z80_d	 = ws+$05
0021CEr 2               ;z80_de	 = z80_e
0021CEr 2               
0021CEr 2               ;z80_l	 = ws+$06
0021CEr 2               ;z80_h	 = ws+$07
0021CEr 2               ;z80_hl	 = z80_l
0021CEr 2               
0021CEr 2               ;z80_x    = ws+$08
0021CEr 2               ;z80_i    = ws+$09
0021CEr 2               ;z80_ix	 = z80_x
0021CEr 2               
0021CEr 2               ;z80_iy	 = ws+$0a
0021CEr 2               
0021CEr 2               ;z80_fp	 = ws+$0c
0021CEr 2               ;z80_ap	 = ws+$0d
0021CEr 2               
0021CEr 2               ;z80_cp	 = ws+$0e
0021CEr 2               ;z80_bp	 = ws+$0f
0021CEr 2               ;z80_bcp = z80_cp
0021CEr 2               
0021CEr 2               ;z80_ep	 = ws+$10
0021CEr 2               ;z80_dp	 = ws+$11
0021CEr 2               ;z80_dep = z80_ep
0021CEr 2               
0021CEr 2               ;z80_lp	 = ws+$12
0021CEr 2               ;z80_hp	 = ws+$13
0021CEr 2               ;z80_hlp = z80_lp
0021CEr 2               
0021CEr 2               ;z80_sp   = ws+$14
0021CEr 2               
0021CEr 2               ;z80_reg0 = ws+$16
0021CEr 2               ;z80_reg1 = ws+$17
0021CEr 2               ;z80_reg2 = ws+$18
0021CEr 2               ;z80_reg3 = ws+$19
0021CEr 2               
0021CEr 2               ;z80_r	 = ws+$1a
0021CEr 2               
0021CEr 2               ; Contains seperatly 1 bit set
0021CEr 2               ; _BEEB this is not safe memory to use as required by MOS
0021CEr 2               
0021CEr 2               _bitmem0	= $f8
0021CEr 2               _bitmem1	= $f9
0021CEr 2               _bitmem2	= $fa
0021CEr 2               _bitmem3	= $fb
0021CEr 2               _bitmem4	= $fc
0021CEr 2               _bitmem5	= $fd
0021CEr 2               _bitmem6	= $fe
0021CEr 2               _bitmem7	= $ff
0021CEr 2               
0021CEr 2               ; constants
0021CEr 2               _bitvalue0	= $01
0021CEr 2               _bitvalue1	= $02
0021CEr 2               _bitvalue2	= $04
0021CEr 2               _bitvalue3	= $08
0021CEr 2               _bitvalue4	= $10
0021CEr 2               _bitvalue5	= $20
0021CEr 2               _bitvalue6	= $40
0021CEr 2               _bitvalue7	= $80
0021CEr 2               
0021CEr 2               _notbitvalue0	= $fe
0021CEr 2               _notbitvalue1	= $fd
0021CEr 2               _notbitvalue2	= $fb
0021CEr 2               _notbitvalue3	= $f7
0021CEr 2               _notbitvalue4	= $ef
0021CEr 2               _notbitvalue5	= $df
0021CEr 2               _notbitvalue6	= $bf
0021CEr 2               _notbitvalue7	= $7f
0021CEr 2               
0021CEr 2               
0021CEr 2               ;add_hl_bc:
0021CEr 2               ;		lda z80_l
0021CEr 2               ;		clc
0021CEr 2               ;		adc z80_c
0021CEr 2               ;		sta z80_l
0021CEr 2               ;		lda z80_h
0021CEr 2               ;		adc z80_b
0021CEr 2               ;		sta z80_h
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;add_ix_de:
0021CEr 2               ;		lda z80_ix
0021CEr 2               ;		clc
0021CEr 2               ;		adc z80_e
0021CEr 2               ;		sta z80_ix
0021CEr 2               ;		lda z80_ix+1
0021CEr 2               ;		adc z80_d
0021CEr 2               ;		sta z80_ix+1
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;add_iy_de:
0021CEr 2               ;		lda z80_iy
0021CEr 2               ;		clc
0021CEr 2               ;		adc z80_e
0021CEr 2               ;		sta z80_iy
0021CEr 2               ;		lda z80_iy+1
0021CEr 2               ;		adc z80_d
0021CEr 2               ;		sta z80_iy+1
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;add_hl_de:
0021CEr 2               ;		lda z80_l
0021CEr 2               ;		clc
0021CEr 2               ;		adc z80_e
0021CEr 2               ;		sta z80_l
0021CEr 2               ;		lda z80_h
0021CEr 2               ;		adc z80_d
0021CEr 2               ;		sta z80_h
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;add_ix_bc:
0021CEr 2               ;		lda z80_ix
0021CEr 2               ;		clc
0021CEr 2               ;		adc z80_c
0021CEr 2               ;		sta z80_ix
0021CEr 2               ;		lda z80_ix+1
0021CEr 2               ;		adc z80_b
0021CEr 2               ;		sta z80_ix+1
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;add_iy_bc:
0021CEr 2               ;		lda z80_iy
0021CEr 2               ;		clc
0021CEr 2               ;		adc z80_c
0021CEr 2               ;		sta z80_iy
0021CEr 2               ;		lda z80_iy+1
0021CEr 2               ;		adc z80_b
0021CEr 2               ;		sta z80_iy+1
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;sbc_hl_de:
0021CEr 2               ;		lda z80_l
0021CEr 2               ;		sbc z80_e
0021CEr 2               ;		sta z80_l
0021CEr 2               ;		lda z80_h
0021CEr 2               ;		sbc z80_d
0021CEr 2               ;		sta z80_h
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;sbc_hl_bc:
0021CEr 2               ;		lda z80_l
0021CEr 2               ;		sbc z80_c
0021CEr 2               ;		sta z80_l
0021CEr 2               ;		lda z80_h
0021CEr 2               ;		sbc z80_b
0021CEr 2               ;		sta z80_h
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;cmp_hl_bc:
0021CEr 2               ;		lda z80_l
0021CEr 2               ;		cmp z80_c
0021CEr 2               ;		bne cmp_hl_bc_end
0021CEr 2               ;		lda z80_h
0021CEr 2               ;		cmp z80_b
0021CEr 2               ;cmp_hl_bc_end:
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;cmp_iy_ix:
0021CEr 2               ;		lda z80_iy
0021CEr 2               ;		cmp z80_ix
0021CEr 2               ;		bne cmp_iy_ix_end
0021CEr 2               ;		lda z80_iy+1
0021CEr 2               ;		cmp z80_ix+1
0021CEr 2               ;cmp_iy_ix_end:
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;dec_hl:
0021CEr 2               ;		lda z80_l
0021CEr 2               ;		bne dec_hl_no_dec_h
0021CEr 2               ;		dec z80_h
0021CEr 2               ;dec_hl_no_dec_h:
0021CEr 2               ;		dec z80_l
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;dec_ix:
0021CEr 2               ;		lda z80_ix
0021CEr 2               ;		bne dec_ix_no_dec_h
0021CEr 2               ;		dec z80_ix+1
0021CEr 2               ;dec_ix_no_dec_h:
0021CEr 2               ;		dec z80_ix
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;dec_bc:
0021CEr 2               ;		lda z80_c
0021CEr 2               ;		bne dec_bc_no_dec_b
0021CEr 2               ;		dec z80_b
0021CEr 2               ;dec_bc_no_dec_b:
0021CEr 2               ;		dec z80_c
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;dec_de:
0021CEr 2               ;		lda z80_e
0021CEr 2               ;		bne dec_de_no_dec_d
0021CEr 2               ;		dec z80_d
0021CEr 2               ;dec_de_no_dec_d:
0021CEr 2               ;		dec z80_e
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               ;ex_af_afs:
0021CEr 2               ;	rts
0021CEr 2               ;ex_de_hl:
0021CEr 2               ;		lda z80_e
0021CEr 2               ;		ldx z80_l
0021CEr 2               ;		stx z80_e
0021CEr 2               ;		sta z80_l
0021CEr 2               ;		lda z80_d
0021CEr 2               ;		ldx z80_h
0021CEr 2               ;		stx z80_d
0021CEr 2               ;		sta z80_h
0021CEr 2               ;		rts
0021CEr 2               ;
0021CEr 2               exx:
0021CEr 2  A5 rr        		lda z80_c
0021D0r 2  A4 rr        		ldy z80_cp
0021D2r 2  84 rr        		sty z80_c
0021D4r 2  85 rr        		sta z80_cp
0021D6r 2  A5 rr        		lda z80_b
0021D8r 2  A4 rr        		ldy z80_bp
0021DAr 2  84 rr        		sty z80_b
0021DCr 2  85 rr        		sta z80_bp
0021DEr 2  A5 rr        		lda z80_e
0021E0r 2  A4 rr        		ldy z80_ep
0021E2r 2  84 rr        		sty z80_e
0021E4r 2  85 rr        		sta z80_ep
0021E6r 2  A5 rr        		lda z80_d
0021E8r 2  A4 rr        		ldy z80_dp
0021EAr 2  84 rr        		sty z80_d
0021ECr 2  85 rr        		sta z80_dp
0021EEr 2  A5 rr        		lda scraddr
0021F0r 2  A4 rr        		ldy z80_lp
0021F2r 2  84 rr        		sty scraddr
0021F4r 2  85 rr        		sta z80_lp
0021F6r 2  A5 rr        		lda scraddr+1
0021F8r 2  A4 rr        		ldy z80_hp
0021FAr 2  84 rr        		sty scraddr+1
0021FCr 2  85 rr        		sta z80_hp
0021FEr 2  60           		rts
0021FFr 2               
0021FFr 2               ;ex_sp_hl:
0021FFr 2               ;		tsx
0021FFr 2               ;		lda $0103,x
0021FFr 2               ;		ldy z80_h
0021FFr 2               ;		sta z80_h
0021FFr 2               ;		tya
0021FFr 2               ;		sta $0103,x
0021FFr 2               ;		lda $0104,x
0021FFr 2               ;		ldy z80_l
0021FFr 2               ;		sta z80_l
0021FFr 2               ;		tya
0021FFr 2               ;		sta $104,x
0021FFr 2               ;		rts
0021FFr 2               ;
0021FFr 2               ;ldi:
0021FFr 2               ;	rts
0021FFr 2               ;ldir:
0021FFr 2               ;		ldy #$00
0021FFr 2               ;		ldx z80_b
0021FFr 2               ;		beq ldir_last_page
0021FFr 2               ;ldir_loop:
0021FFr 2               ;		lda (z80_hl),y
0021FFr 2               ;		sta (z80_de),y
0021FFr 2               ;		iny
0021FFr 2               ;		bne ldir_loop
0021FFr 2               ;		inc z80_h
0021FFr 2               ;		inc z80_d
0021FFr 2               ;		dex
0021FFr 2               ;		bne ldir_loop
0021FFr 2               ;ldir_last_page:
0021FFr 2               ;		lda z80_c
0021FFr 2               ;		beq ldir_end
0021FFr 2               ;ldir_last_page_loop:
0021FFr 2               ;		lda (z80_hl),y
0021FFr 2               ;		sta (z80_de),y
0021FFr 2               ;		iny
0021FFr 2               ;		cpy z80_c
0021FFr 2               ;		bne ldir_last_page_loop
0021FFr 2               ;ldir_end:
0021FFr 2               ;		stx z80_c
0021FFr 2               ;		stx z80_b
0021FFr 2               ;		tya
0021FFr 2               ;		clc
0021FFr 2               ;		adc z80_l
0021FFr 2               ;		sta z80_l
0021FFr 2               ;		bcc *+4
0021FFr 2               ;		inc z80_h
0021FFr 2               ;		tya
0021FFr 2               ;		clc
0021FFr 2               ;		adc z80_e
0021FFr 2               ;		sta z80_e
0021FFr 2               ;		bcc *+4
0021FFr 2               ;		inc z80_d
0021FFr 2               ;		rts
0021FFr 2               ;
0021FFr 2               ;lddr:		ldy #$00
0021FFr 2               ;lddr_loop:
0021FFr 2               ;		lda (z80_hl),y
0021FFr 2               ;		sta (z80_de),y
0021FFr 2               ;		jsr dec_hl
0021FFr 2               ;		jsr dec_de
0021FFr 2               ;		jsr dec_bc
0021FFr 2               ;		lda z80_b
0021FFr 2               ;		ora z80_c
0021FFr 2               ;		bne lddr_loop
0021FFr 2               ;		rts
0021FFr 2               ;ei:
0021FFr 2               ;		rts
0021FFr 2               ;di:
0021FFr 2               ;		rts
0021FFr 2               
0021FFr 2               ;-------------------------------------------------------------
0021FFr 2               ; Set bits in bitmem
0021FFr 2               ;-------------------------------------------------------------
0021FFr 2               
0021FFr 2               .if 0
0021FFr 2               z80_init:
0021FFr 2               	ldx #$00
0021FFr 2               	lda #$01
0021FFr 2               z80_init_loop:
0021FFr 2               	sta _bitmem0,x
0021FFr 2               	inx
0021FFr 2               	asl a
0021FFr 2               	bne z80_init_loop
0021FFr 2               	rts
0021FFr 2               .endif
0021FFr 2               
0021FFr 2               push_af:
0021FFr 2               push_bc:
0021FFr 2               push_de:
0021FFr 2               push_hl:
0021FFr 2               
0021FFr 2               pop_af:
0021FFr 2               pop_bc:
0021FFr 2               pop_de:
0021FFr 2               pop_ix:
0021FFr 2               pop_hl:
0021FFr 2               
0021FFr 2               add_hl_hl:
0021FFr 2               
0021FFr 2               inc_bc:
0021FFr 2               inc_de:
0021FFr 2               inc_hl:
0021FFr 2               inc_ix:
0021FFr 2               inc_sp:
0021FFr 2               
0021FFr 2               cpir:
0021FFr 2               
0021FFr 2               ex_af_af:
0021FFr 2               ;	rts
0021FFr 2               
0021FFr 1               eind_asm:
0021FFr 1               eop:					; End Of Program
0021FFr 1               
0021FFr 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
0021FFr 1               
