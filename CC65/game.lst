ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "vic-doodlebug.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 12
000000r 3               	CentreY		= 38
000000r 3               	CentreXMP   = 14
000000r 3               	CentreYMP   = 36
000000r 3               	timervalue	= 24000
000000r 3               	timerint	= 24000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	CentreXMP   = 6
000000r 3               	CentreYMP   = 24
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 18			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               	var_colour = 17		; sprite colour
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  00           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  16           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  00           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  A0           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 D8        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3               	lda #<objdta		; objects table.
000026r 3               	sta z80_x
000026r 3               	lda #>objdta
000026r 3               	sta z80_i
000026r 3               
000026r 3               	ldx numob 		; number of objects in the game.
000026r 3               iniob0:
000026r 3               	ldy #36
000026r 3               	lda (z80_ix),y 		; start screen.
000026r 3               	ldy #33
000026r 3               	sta (z80_ix),y 		; set start screen.
000026r 3               
000026r 3               	ldy #37
000026r 3               	lda (z80_ix),y 		; find start y.
000026r 3               	ldy #34
000026r 3               	sta (z80_ix),y 		; set start y.
000026r 3               
000026r 3               	ldy #38
000026r 3               	lda (z80_ix),y 		; get initial x.
000026r 3               	ldy #35
000026r 3               	sta (z80_ix),y 		; set x coord.
000026r 3               
000026r 3               	clc 			; point to next object.
000026r 3               	lda z80_x
000026r 3               	adc #39			; distance between objects.
000026r 3               	sta z80_x
000026r 3               	bcc :+
000026r 3               	inc z80_i
000026r 3               :
000026r 3               	dex 			; repeat.
000026r 3               	bne iniob0
000026r 3               
000026r 3               	rts
000026r 3               .endif
000026r 3               
000026r 3               ;-----------------------------------------------
000026r 3               ; Redraw the screen.
000026r 3               ;
000026r 3               ; Remove old copy of all sprites for redraw.
000026r 3               ;-----------------------------------------------
000026r 3               
000026r 3               redraw:
000026r 3               .if xflag
000026r 3               	lda #WINDOWWID
000026r 3               	sta winwid
000026r 3               	lda #WINDOWHGT
000026r 3               	sta winhgt
000026r 3               .endif
000026r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000028r 3  48           	pha
000029r 3  A5 rr        	lda z80_x
00002Br 3  48           	pha
00002Cr 3               
00002Cr 3  20 rr rr     	jsr droom		; show screen layout.
00002Fr 3               .if oflag
00002Fr 3               	jsr shwob		; draw objects.
00002Fr 3               .endif
00002Fr 3               numsp0:
00002Fr 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000031r 3  85 rr        	sta tmp
000033r 3               
000033r 3  A9 rr        	lda #<sprtab		; sprite table.
000035r 3  85 rr        	sta z80_x
000037r 3  A9 rr        	lda #>sprtab
000039r 3  85 rr        	sta z80_i
00003Br 3               redrw0:
00003Br 3  A0 00        	ldy #0
00003Dr 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00003Fr 3  C9 FF        	cmp #255		; is it enabled?
000041r 3  F0 0B        	beq redrw1 		; no, find next one.
000043r 3               
000043r 3  A0 03        	ldy #var_Y
000045r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000047r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000049r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
00004Br 3               
00004Br 3  20 rr rr     	jsr sspria		; show single sprite.
00004Er 3               
00004Er 3               redrw1:
00004Er 3  18           	clc			; next sprite.
00004Fr 3  A5 rr        	lda z80_x
000051r 3  69 12        	adc #TABSIZ		; distance to next odd/even entry.
000053r 3  85 rr        	sta z80_x
000055r 3  90 02        	bcc :+
000057r 3  E6 rr        	inc z80_i
000059r 3               :
000059r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
00005Br 3  D0 DE        	bne redrw0
00005Dr 3               
00005Dr 3               rpblc1:
00005Dr 3               ;	jsr dshrp		; redraw shrapnel.
00005Dr 3               
00005Dr 3               .if aflag
00005Dr 3               	jsr rbloc		; draw blocks for this screen
00005Dr 3               .endif
00005Dr 3  68           	pla			; retrieve sprite pointer.
00005Er 3  85 rr        	sta z80_x
000060r 3  68           	pla
000061r 3  85 rr        	sta z80_i
000063r 3               
000063r 3  60           	rts
000064r 3               
000064r 3               ;----------------------------------------------------------------------
000064r 3               ; Clear screen routine.
000064r 3               ;
000064r 3               ; Fill screenmem $9400-$97ff with ScrFillByte
000064r 3               ;----------------------------------------------------------------------
000064r 3               
000064r 3               cls:
000064r 3  A9 10        	lda #>CharAddress	; Character RAM address.
000066r 3  8D rr rr     	sta clrdata+2
000069r 3               
000069r 3               ; Clear bitmap data
000069r 3               
000069r 3  A9 00        	lda #ScrFillByte	; Clear screen
00006Br 3  A0 00        	ldy #0
00006Dr 3  A2 10        	ldx #16
00006Fr 3               clrdata:
00006Fr 3  99 00 10     	sta CharAddress,y
000072r 3  C8           	iny
000073r 3  D0 FA        	bne clrdata
000075r 3  EE rr rr     	inc clrdata+2
000078r 3  CA           	dex
000079r 3  D0 F4        	bne clrdata
00007Br 3               
00007Br 3               ; Clear colour attributes
00007Br 3               
00007Br 3  AD rr rr     	lda fontcol
00007Er 3  A2 00        	ldx #0
000080r 3               clrcolour:
000080r 3  9D 00 94     	sta ColorAttr-$200,x
000083r 3  9D 00 96     	sta ColorAttr,x
000086r 3  E8           	inx
000087r 3  D0 F7        	bne clrcolour
000089r 3  60           	rts
00008Ar 3               
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               ; Clear colour attributes
00008Ar 3               ;
00008Ar 3               ; Reset colour attributes to fontcol
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               
00008Ar 3               clrcol:
00008Ar 3  AD rr rr     	lda fontcol		; Clear colour attributes
00008Dr 3  A2 00        	ldx #0
00008Fr 3               clscol:
00008Fr 3  9D 00 96     	sta ColorAttr,x
000092r 3  E8           	inx
000093r 3  E0 F2        	cpx #242
000095r 3  D0 F8        	bne clscol
000097r 3               
000097r 3  60           	rts
000098r 3               
000098r 3               ;----------------------------------------------------------------------
000098r 3               ; FODDER check
000098r 3               ;----------------------------------------------------------------------
000098r 3               
000098r 3               .if pflag .or dflag
000098r 3               fdchk:
000098r 3               	cmp #FODDER 		; is it fodder?
000098r 3               	beq :+
000098r 3               	rts 			; no.
000098r 3               :
000098r 3               	lda #0			; wipe fodder in MAP
000098r 3               	ldy #0
000098r 3               	sta (bufaddr),y 	; rewrite block type.
000098r 3               
000098r 3               	lda dispx		; x=x/8
000098r 3               	pha
000098r 3               	lsr a
000098r 3               	lsr a
000098r 3               	lsr a
000098r 3               	sta dispx
000098r 3               
000098r 3               	lda dispy		; y=y/8
000098r 3               	pha
000098r 3               	lsr a
000098r 3               	lsr a
000098r 3               	lsr a
000098r 3               	sta dispy
000098r 3               
000098r 3               	lda #0 			; block to write.
000098r 3               	jsr pattr 		; write block.
000098r 3               
000098r 3               	pla
000098r 3               	sta dispy
000098r 3               	pla
000098r 3               	sta dispx
000098r 3               	rts
000098r 3               .endif
000098r 3               
000098r 3               ;----------------------------------------------------
000098r 3               ; Scrolly text and puzzle variables.
000098r 3               ;----------------------------------------------------
000098r 3               
000098r 3               .if sflag
000098r 3               txtbit:	.byte 128		; bit to write.
000098r 3               txtwid:	.byte 16		; width of ticker message.
000098r 3               txtpos:	.word msgdat
000098r 3               txtini:	.word msgdat
000098r 3               txtscr:	.word ScreenAddr
000098r 3               .endif
000098r 3               
000098r 3               ;----------------------------------------------------
000098r 3               ; Specialist routines.
000098r 3               ; Process shrapnel.
000098r 3               ;----------------------------------------------------
000098r 3               proshr:
000098r 3               .if pflag
000098r 3               	lda #<SHRAPN		; table.
000098r 3               	sta z80_x
000098r 3               	lda #>SHRAPN
000098r 3               	sta z80_i
000098r 3               
000098r 3               	lda #NUMSHR		; shrapnel pieces to process.
000098r 3               	sta shrctr
000098r 3               prosh0:
000098r 3               	ldy #0
000098r 3               	lda (z80_ix),y		; on/off marker.
000098r 3               	asl a
000098r 3               proshx:
000098r 3               	bcs :+
000098r 3               	jsr prosh1 		; on, so process it.
000098r 3               :
000098r 3               	clc
000098r 3               	lda z80_x
000098r 3               	adc #SHRSIZ
000098r 3               	sta z80_x
000098r 3               	bcc :+
000098r 3               	inc z80_i
000098r 3               :
000098r 3               	dec shrctr		; round again.
000098r 3               	bne prosh0
000098r 3               .endif
000098r 3               .if sflag
000098r 3               	jsr scrly
000098r 3               .endif
000098r 3  60           	rts
000099r 3               
000099r 3               .if pflag
000099r 3               ;----------------------------------------------------
000099r 3               ; Proces shrapnel piece
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               prosh1:
000099r 3               	jsr plot 		; delete the pixel.
000099r 3               
000099r 3               	lda #<shrptr		; shrapnel routine pointers.
000099r 3               	sta z80_l
000099r 3               	lda #>shrptr
000099r 3               	sta z80_h
000099r 3               
000099r 3               	ldy #0
000099r 3               	lda (z80_ix),y		; restore shrapnel type.
000099r 3               	jsr prosh2 		; run the routine.
000099r 3               	jsr chkxy		; check x and y are good before we redisplay.
000099r 3               
000099r 3               	lda #<SHRSIZ 		; distance to next.
000099r 3               	sta z80_e
000099r 3               	lda #>SHRSIZ
000099r 3               	sta z80_d
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Run the routine
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               prosh2:
000099r 3               	asl a 			; 2 bytes per address.
000099r 3               	tay
000099r 3               	lda shrptr,y
000099r 3               	sta z80_l
000099r 3               	lda shrptr+1,y 		; fetch high byte from table.
000099r 3               	sta z80_h
000099r 3               	jmp (z80_hl) 		; jump to routine.
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Paricle routine table
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               shrptr:	.word laser		; laser.
000099r 3               	.word trail		; vapour trail.
000099r 3               	.word shrap		; shrapnel from explosion.
000099r 3               	.word dotl		; horizontal starfield left.
000099r 3               	.word dotr		; horizontal starfield right.
000099r 3               	.word dotu		; vertical starfield up.
000099r 3               	.word dotd		; vertical starfield down.
000099r 3               	.word ptcusr		; user particle.
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Explosion shrapnel.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               shrap:
000099r 3               	ldy #1
000099r 3               	lda (z80_ix),y 		; get the angle.
000099r 3               	clc
000099r 3               	adc #<shrsin		; shrapnel sine table.
000099r 3               	sta z80_l
000099r 3               	lda #>shrsin
000099r 3               	adc #0
000099r 3               	sta z80_h
000099r 3               
000099r 3               	ldy #0
000099r 3               	lda (z80_hl),y 		; fetch value from table.
000099r 3               	sta z80_e
000099r 3               	inc z80_l 		; next byte of table.
000099r 3               	bne :+
000099r 3               	inc z80_h
000099r 3               :
000099r 3               	ldy #0
000099r 3               	lda (z80_hl),y		; fetch value from table.
000099r 3               	sta z80_d
000099r 3               	inc z80_l		; next byte of table.
000099r 3               	bne :+
000099r 3               	inc z80_h
000099r 3               :
000099r 3               	ldy #0
000099r 3               	lda (z80_hl),y 		; fetch value from table.
000099r 3               	sta z80_c
000099r 3               	inc z80_l 		; next byte of table.
000099r 3               	bne :+
000099r 3               	inc z80_h
000099r 3               :
000099r 3               	ldy #0
000099r 3               	lda (z80_hl),y 		; fetch value from table.
000099r 3               	sta z80_b
000099r 3               
000099r 3               	ldy #2
000099r 3               	lda (z80_ix),y 		; x coordinate in hl.
000099r 3               	clc
000099r 3               	adc z80_e		; add sine lb
000099r 3               	sta (z80_ix),y		; store new coordinate lb.
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y
000099r 3               	adc z80_d		; add sine hb
000099r 3               	sta (z80_ix),y		; store new coordinate hb.
000099r 3               
000099r 3               	ldy #4
000099r 3               	lda (z80_ix),y	 	; y coordinate in hl.
000099r 3               	clc
000099r 3               	adc z80_c		; add cosine lb
000099r 3               	sta (z80_ix),y		; store new coordinate lb.
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y
000099r 3               	adc z80_b		; add cosine lb
000099r 3               	sta (z80_ix),y		; store new coordinate hb.
000099r 3               
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Move dots
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               dotl:
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y
000099r 3               	sec
000099r 3               	sbc #1		 	; move left.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               dotr:
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y
000099r 3               	clc
000099r 3               	adc #1		 	; move left.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               dotu:
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y
000099r 3               	sec
000099r 3               	sbc #1		 	; move up.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               dotd:
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y
000099r 3               	clc
000099r 3               	adc #1			; move down.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Check if coordinates are ok before redrawing at new position.
000099r 3               ;
000099r 3               ; left:   X>L		X=L	Ok
000099r 3               ; right:  R+15>X	X=R	Ok
000099r 3               ; top:    Y>T		Y=T	Ok
000099r 3               ; bottom: B+15>Y	Y=B	Ok
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               chkxy:
000099r 3               
000099r 3               ; top:    Y>T		Y=T	Ok
000099r 3               
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000099r 3               	cmp wntopx		; window top.
000099r 3               	bcs :+			; compare with top window limit.
000099r 3               	jmp kilshr		; out of window, kill shrapnel.
000099r 3               :
000099r 3               ; left:   X>L		X=L	Ok
000099r 3               
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000099r 3               	cmp wnlftx		; left edge.
000099r 3               	bcs :+			; compare with left window limit.
000099r 3               	jmp kilshr		; out of window, kill shrapnel.
000099r 3               :
000099r 3               ; bottom: B+15>Y	Y=B	Ok
000099r 3               
000099r 3               	lda wnbotx		; point to bottom.
000099r 3               	clc
000099r 3               	adc #15
000099r 3               	ldy #3
000099r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000099r 3               	bcs :+			; compare with shrapnel x coordinate.
000099r 3               	jmp kilshr		; off screen, kill shrapnel..
000099r 3               :
000099r 3               ; right:  R+15>X	X=R	Ok
000099r 3               
000099r 3               	lda wnrgtx		; point to right edge.
000099r 3               	clc
000099r 3               	adc #15
000099r 3               	ldy #5
000099r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
000099r 3               	bcs :+			; compare with window limit.
000099r 3               	jmp kilshr		; off screen, kill shrapnel.
000099r 3               :
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Drop through.
000099r 3               ; Display shrapnel.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               plot:
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y		; y integer.
000099r 3               	sta dispy	 	; workspace coordinates.
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y	 	; x integer.
000099r 3               	sta dispx 		; workspace coordinates.
000099r 3               
000099r 3               	ldy #0
000099r 3               	lda (z80_ix),y 		; type.
000099r 3               	bne :+			; is it a laser?
000099r 3               	jmp plot1 		; yes, draw laser instead.
000099r 3               :
000099r 3               plot0:
000099r 3               	lda dispx		; which pixel within byte do we
000099r 3               	and #7			; want to set first?
000099r 3               	tay
000099r 3               	lda dots,y 		; table of small pixel positions.
000099r 3               	sta z80_e 		; get value.
000099r 3               
000099r 3               	jsr scadd 		; screen address.
000099r 3               	ldy #0
000099r 3               	lda (scraddr),y		; see what's already there.
000099r 3               	eor z80_e
000099r 3               	sta (scraddr),y 	; put back on screen.
000099r 3               	rts
000099r 3               
000099r 3               plot1:
000099r 3               	jsr scadd 		; screen address.
000099r 3               	ldy #0
000099r 3               	lda (scraddr),y 	; fetch byte there.
000099r 3               	eor #255 		; toggle all bits.
000099r 3               	sta (scraddr),y 	; new byte.
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Switch off shrapnel
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               kilshr:
000099r 3               	lda #128
000099r 3               	ldy #0
000099r 3               	sta (z80_ix),y	; switch off shrapnel.
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Sine/cosine table
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
000099r 3               	.word 1024,0,946,65144,724,64811,391,64589
000099r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
000099r 3               	.word 64512,0,64589,391,64811,724,65144,946
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Create trail
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               trail:
000099r 3               	ldy #1
000099r 3               	lda (z80_ix),y 	; time remaining.
000099r 3               	sec
000099r 3               	sbc #1
000099r 3               	sta (z80_ix),y
000099r 3               	bne :+
000099r 3               	jmp trailk		; time to switch it off.
000099r 3               :
000099r 3               	jsr qrand		; get a random number.
000099r 3               	lsr a 			; x or y axis?
000099r 3               	bcc :+
000099r 3               	jmp trailv		; use y.
000099r 3               :
000099r 3               ; Trail horizontal
000099r 3               
000099r 3               	lsr a 			; which direction?
000099r 3               	bcc :+
000099r 3               	jmp traill		; go left.
000099r 3               :
000099r 3               ; Trail right
000099r 3               
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y
000099r 3               	clc
000099r 3               	adc #1	 		; go right.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               
000099r 3               ; Trail left
000099r 3               
000099r 3               traill:
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y
000099r 3               	sec
000099r 3               	sbc #1 			; go left.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               
000099r 3               ; Trail vertical
000099r 3               
000099r 3               trailv:
000099r 3               	lsr a		 	; which direction?
000099r 3               	bcc :+
000099r 3               	jmp trailu		; go up.
000099r 3               :
000099r 3               ; Trail down
000099r 3               
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y
000099r 3               	clc
000099r 3               	adc #1 			; go down.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               
000099r 3               ; Trail up
000099r 3               
000099r 3               trailu:
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y
000099r 3               	sec
000099r 3               	sbc #1 			; go up.
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               
000099r 3               ; Kill trail
000099r 3               
000099r 3               trailk:
000099r 3               	lda #200		; set off-screen to kill vapour trail.
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Create laser beam
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               laser:
000099r 3               	ldy #1
000099r 3               	lda (z80_ix),y 		; direction.
000099r 3               	ror a 			; left or right?
000099r 3               	bcs :+
000099r 3               	jmp laserl		; move left.
000099r 3               :
000099r 3               ; Laser right
000099r 3               
000099r 3               	lda #8			; distance to travel.
000099r 3               	sta z80_b
000099r 3               	jmp laserm		; move laser.
000099r 3               
000099r 3               ; Laser left
000099r 3               
000099r 3               laserl:
000099r 3               	lda #248		; distance to travel.
000099r 3               	sta z80_b
000099r 3               laserm:
000099r 3               	ldy #5
000099r 3               	lda (z80_ix),y		; x position.
000099r 3               	clc
000099r 3               	adc z80_b		; add distance.
000099r 3               	sta (z80_ix),y		; set new x coordinate.
000099r 3               
000099r 3               ; Test new block.
000099r 3               
000099r 3               	sta dispx 		; set x for block collision detection purposes.
000099r 3               	ldy #3
000099r 3               	lda (z80_ix),y 		; get y.
000099r 3               	sta dispy		; set coordinate for collision test.
000099r 3               	jsr tstbl 		; get block type there.
000099r 3               	cmp #WALL		; is it solid?
000099r 3               	bne :+
000099r 3               	jmp trailk		; yes, it cannot pass.
000099r 3               :
000099r 3               .if pflag .or dflag
000099r 3                       cmp #FODDER             ; is it fodder?
000099r 3                       bne :+
000099r 3                       jsr fdchk               ; remove fodder block.
000099r 3                       jmp trailk              ; destroy laser.
000099r 3               :
000099r 3               .endif
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Dots mask
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               dots:	.byte 128,64,32,16,8,4,2,1
000099r 3               
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Plot, preserving de.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               plotde:
000099r 3               	lda z80_d 		; put de on stack.
000099r 3               	pha
000099r 3               	lda z80_e
000099r 3               	pha
000099r 3               
000099r 3               	jsr plot 		; plot pixel.
000099r 3               
000099r 3               	pla			; restore de from stack.
000099r 3               	sta z80_e
000099r 3               	pla
000099r 3               	sta z80_d
000099r 3               
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Shoot a laser.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               shoot:
000099r 3               	sta z80_c		; store direction in c register.
000099r 3               	ldy #8
000099r 3               	lda (z80_ix),y 		; y coordinate.
000099r 3               	clc
000099r 3               shoot1:
000099r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
000099r 3               	sta z80_l 		; puty y coordinate in l.
000099r 3               
000099r 3               	ldy #9
000099r 3               	lda (z80_ix),y 		; x coordinate in h.
000099r 3               	sta z80_h
000099r 3               
000099r 3               	lda z80_i		; store pointer to sprite.
000099r 3               	pha
000099r 3               	lda z80_x
000099r 3               	pha
000099r 3               
000099r 3               	jsr fpslot 		; find particle slot.
000099r 3               	bcs :+
000099r 3               	jmp vapou2		; failed, restore ix.
000099r 3               :
000099r 3               	lda #0
000099r 3               	ldy #0
000099r 3               	sta (z80_ix),y 		; set up a laser.
000099r 3               
000099r 3               	lda z80_c
000099r 3               	ldy #1
000099r 3               	sta (z80_ix),y 		; set the direction.
000099r 3               
000099r 3               	lda z80_l
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y		; set y coordinate.
000099r 3               
000099r 3               	ror z80_c		; check direction we want.
000099r 3               	bcc :+
000099r 3               	jmp shootr		; shoot right.
000099r 3               :
000099r 3               	lda z80_h		; X position.
000099r 3               shoot0:
000099r 3               	and #248		; align on character boundary.
000099r 3               	ldy #5
000099r 3               	sta (z80_ix),y		; set x coordinate.
000099r 3               	jmp vapou0 		; draw first image.
000099r 3               shootr:
000099r 3               	lda z80_h		; x position.
000099r 3               	clc
000099r 3               	adc #15			; look right.
000099r 3               	jmp shoot0		; align and continue.
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Create a bit of vapour trail.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               vapour:
000099r 3               	lda z80_i		; store pointer to sprite.
000099r 3               	pha
000099r 3               	lda z80_x
000099r 3               	pha
000099r 3               
000099r 3               	ldy #8
000099r 3               	lda (z80_ix),y 		; y coordinate.
000099r 3               	clc
000099r 3               vapou3:
000099r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000099r 3               	sta z80_l
000099r 3               
000099r 3               	ldy #9
000099r 3               	lda (z80_ix),y 		; x coordinate.
000099r 3               	adc #7
000099r 3               	sta z80_h
000099r 3               
000099r 3               	jsr fpslot 		; find particle slot.
000099r 3               	bcc :+
000099r 3               	jmp vapou1		; no, we can use it.
000099r 3               :
000099r 3               vapou2:
000099r 3               	pla
000099r 3               	sta z80_x
000099r 3               	pla
000099r 3               	sta z80_i
000099r 3               	rts
000099r 3               vapou1:
000099r 3               	lda z80_l
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y		; set up y.
000099r 3               
000099r 3               	lda z80_h
000099r 3               	ldy #5
000099r 3               	sta (z80_ix),y 		; set up x coordinate.
000099r 3               
000099r 3               	jsr qrand		; get quick random number.
000099r 3               	and #15			; random time.
000099r 3               	clc
000099r 3               	adc #15			; minimum time on screen.
000099r 3               	ldy #1
000099r 3               	sta (z80_ix),y		; set time on screen.
000099r 3               
000099r 3               	lda #1
000099r 3               	ldy #0
000099r 3               	sta (z80_ix),y		; define particle as vapour trail.
000099r 3               vapou0:
000099r 3               	jsr chkxy		; plot first position.
000099r 3               	jmp vapou2
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Create a user particle.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               ptusr:
000099r 3               	sta z80_f		; store timer.
000099r 3               
000099r 3               	ldy #8
000099r 3               	lda (z80_ix),y 		; y coordinate.
000099r 3               	clc
000099r 3               	adc #7			; mid-point of sprite.
000099r 3               	sta z80_l
000099r 3               
000099r 3               	ldy #9
000099r 3               	lda (z80_ix),y 		; x coordinate.
000099r 3               	clc
000099r 3               	adc #7			; mid-point of sprite.
000099r 3               	sta z80_h
000099r 3               
000099r 3               	jsr fpslot 		; find particle slot.
000099r 3               	bcs ptusr1
000099r 3               	rts 			; out of slots, can't generate anything.
000099r 3               ptusr1:
000099r 3               	lda z80_l
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y 		; set up y.
000099r 3               
000099r 3               	lda z80_h
000099r 3               	ldy #5
000099r 3               	sta (z80_ix),y		; set up x coordinate.
000099r 3               
000099r 3               	lda z80_f 		; restore timer.
000099r 3               	ldy #1
000099r 3               	sta (z80_ix),y		; set time on screen.
000099r 3               
000099r 3               	lda #7
000099r 3               	ldy #0
000099r 3               	sta (z80_ix),y		; define particle as user particle.
000099r 3               
000099r 3               	jmp chkxy		; plot first position.
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Create a vertical or horizontal star.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               star:
000099r 3               	lda z80_i		; store pointer to sprite.
000099r 3               	pha
000099r 3               	lda z80_x
000099r 3               	pha
000099r 3               
000099r 3               	jsr fpslot 		; find particle slot.
000099r 3               	bcs star7		; found one we can use.
000099r 3               star0:
000099r 3               	pla 			; restore sprite pointer.
000099r 3               	sta z80_x
000099r 3               	pla
000099r 3               	sta z80_i
000099r 3               	rts 			; out of slots, can't generate anything.
000099r 3               star7:
000099r 3               	lda z80_c		; direction.
000099r 3               	and #3 			; is it left?
000099r 3               	bne :+
000099r 3               	jmp star1 		; yes, it's left.
000099r 3               :
000099r 3               	cmp #1 			; is it right?
000099r 3               	bne :+
000099r 3               	jmp star2 		; yes, it's right.
000099r 3               :
000099r 3               	cmp #2 			; is it up?
000099r 3               	bne :+
000099r 3               	jmp star3 		; yes, it's up.
000099r 3               :
000099r 3               	ldy wntopx 		; get edge of screen.
000099r 3               	iny			; down one pixel.
000099r 3               	tya
000099r 3               star8:
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y 		; set y coord.
000099r 3               	jsr qrand 		; get quick random number.
000099r 3               star9:
000099r 3               	ldy #5
000099r 3               	sta (z80_ix),y		; set x position.
000099r 3               
000099r 3               	lda z80_c		; direction.
000099r 3               	and #3			; zero to three.
000099r 3               	clc
000099r 3               	adc #3			; 3 to 6 for starfield.
000099r 3               	ldy #0
000099r 3               	sta (z80_ix),y		; define particle as star.
000099r 3               	jsr chkxy		; plot first position.
000099r 3               	jmp star0
000099r 3               star1:
000099r 3               	jsr qrand		; get quick random number.
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y 		; set y coord.
000099r 3               
000099r 3               	lda wnrgtx 		; get edge of screen.
000099r 3               	clc
000099r 3               	adc #15			; add width of sprite minus 1.
000099r 3               	jmp star9
000099r 3               star2:
000099r 3               	jsr qrand 		; get quick random number.
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y		; set y coord.
000099r 3               
000099r 3               	lda wnlftx		; get edge of screen.
000099r 3               	jmp star9
000099r 3               star3:
000099r 3               	lda wnbotx 		; get edge of screen.
000099r 3               	clc
000099r 3               	adc #15 		; height of sprite minus one pixel.
000099r 3               	jmp star8
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Find particle slot for lasers or vapour trail.
000099r 3               ; can't use alternate accumulator.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               fpslot:
000099r 3               	lda #<SHRAPN 		; shrapnel table.
000099r 3               	sta z80_x
000099r 3               	lda #>SHRAPN
000099r 3               	sta z80_i
000099r 3               
000099r 3               	lda #NUMSHR		; number of pieces in table.
000099r 3               	sta z80_b
000099r 3               fpslt0:
000099r 3               	ldy #0
000099r 3               	lda (z80_ix),y		; get type.
000099r 3               	asl a  			; is this slot in use?
000099r 3               	bcc :+
000099r 3               	rts			; no, we can use it.
000099r 3               :
000099r 3               	clc			; point to more shrapnel.
000099r 3               	lda z80_x
000099r 3               	adc #SHRSIZ
000099r 3               	sta z80_x
000099r 3               	bcc :+
000099r 3               	inc z80_i
000099r 3               :
000099r 3               	dec z80_b		; repeat for all shrapnel.
000099r 3               	bne fpslt0
000099r 3               
000099r 3               	clc
000099r 3               	rts 			; out of slots, can't generate anything.
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Create an explosion at sprite position.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               explod:
000099r 3               	sta z80_c 		; particles to create.
000099r 3               
000099r 3               	lda z80_i 		; store pointer to sprite.
000099r 3               	pha
000099r 3               	lda z80_x
000099r 3               	pha
000099r 3               
000099r 3               	ldy #8
000099r 3               	lda (z80_ix),y 		; y coordinate.
000099r 3               	sta z80_l
000099r 3               	ldy #9
000099r 3               	lda (z80_ix),y		; x coordinate.
000099r 3               	sta z80_h
000099r 3               
000099r 3               	lda #<SHRAPN		; shrapnel table.
000099r 3               	sta z80_x
000099r 3               	lda #>SHRAPN
000099r 3               	sta z80_i
000099r 3               
000099r 3               	lda #NUMSHR		; number of pieces in table.
000099r 3               	sta explcnt
000099r 3               expld0:
000099r 3               	ldy #0
000099r 3               	lda (z80_ix),y		; get type.
000099r 3               	asl a 			; is this slot in use?
000099r 3               	bcs expld1		; no, we can use it.
000099r 3               expld2:
000099r 3               	clc
000099r 3               	lda z80_x
000099r 3               	adc #SHRSIZ
000099r 3               	sta z80_x
000099r 3               	bcc :+
000099r 3               	inc z80_i
000099r 3               :
000099r 3               	dec explcnt		; repeat for all shrapnel.
000099r 3               	bne expld0
000099r 3               expld3:
000099r 3               	pla			; restore sprite pointer.
000099r 3               	sta z80_x
000099r 3               	pla
000099r 3               	sta z80_i
000099r 3               	rts 			; out of slots, can't generate any more.
000099r 3               
000099r 3               expld1:
000099r 3               	lda z80_c		; shrapnel counter.
000099r 3               	and #15			; 0 to 15.
000099r 3               	clc			; add to x.
000099r 3               	adc z80_l
000099r 3               	ldy #3
000099r 3               	sta (z80_ix),y		; y coord.
000099r 3               
000099r 3               	lda seed3 		; crap random number.
000099r 3               	and #15			; 0 to 15.
000099r 3               	clc 			; add to y.
000099r 3               	adc z80_h
000099r 3               	ldy #5
000099r 3               	sta (z80_ix),y		; x coord.
000099r 3               
000099r 3               	lda #2
000099r 3               	ldy #0
000099r 3               	sta (z80_ix),y		; switch it on.
000099r 3               
000099r 3               	jsr chkxy		; plot first position.
000099r 3               	jsr qrand		; quick random angle.
000099r 3               	and #60 		; keep within range.
000099r 3               	ldy #1
000099r 3               	sta (z80_ix),y		; angle.
000099r 3               
000099r 3               	dec z80_c		; one less piece of shrapnel to generate.
000099r 3               	bne expld2 		; back to main explosion loop.
000099r 3               	jmp expld3 		; restore sprite pointer and exit.
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Quick random
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               qrand:
000099r 3               	jsr random		; r register.
000099r 3               	eor seed3		; combine with seed.
000099r 3               	sta seed3 		; new seed.
000099r 3               	rts
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Display all shrapnel.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               dshrp:
000099r 3               	lda #<plotde		; display routine.
000099r 3               	sta proshx+1
000099r 3               	lda #>plotde
000099r 3               	sta proshx+2
000099r 3               	jsr proshr		; process shrapnel.
000099r 3               
000099r 3               	lda #<prosh1		; processing routine.
000099r 3               	sta proshx+1
000099r 3               	lda #>prosh1
000099r 3               	sta proshx+2
000099r 3               	rts
000099r 3               
000099r 3               ;------------------------------------------------------
000099r 3               ; Particle engine.
000099r 3               ;
000099r 3               ; Init particle data for 55 particles in SHRAPN table.
000099r 3               ; Every particle has 6 bytes.
000099r 3               ;
000099r 3               ; global:	-
000099r 3               ; local:	x,y,hl
000099r 3               ; calls:	-
000099r 3               ;------------------------------------------------------
000099r 3               
000099r 3               inishr:
000099r 3               	lda #<SHRAPN 		; table.
000099r 3               	sta z80_l
000099r 3               	lda #>SHRAPN
000099r 3               	sta z80_h
000099r 3               
000099r 3               	ldy #0
000099r 3               	ldx #NUMSHR		; shrapnel pieces to process.
000099r 3               inish0:
000099r 3               	lda #255 		; kill the shrapnel.
000099r 3               	sta (z80_hl),y
000099r 3               
000099r 3               	clc 			; point there.
000099r 3               	lda z80_l
000099r 3               	adc #SHRSIZ		; distance to next.
000099r 3               	sta z80_l
000099r 3               	bcc :+
000099r 3               	inc z80_h
000099r 3               :
000099r 3               	dex
000099r 3               	bne inish0 		; round again.
000099r 3               	rts
000099r 3               
000099r 3               ;------------------------------------------------------
000099r 3               ; Check for collision between laser and sprite.
000099r 3               ;------------------------------------------------------
000099r 3               
000099r 3               lcol:
000099r 3               	lda #<SHRAPN		; shrapnel table.
000099r 3               	sta z80_l
000099r 3               	lda #>SHRAPN
000099r 3               	sta z80_h
000099r 3               
000099r 3               	lda #NUMSHR		; number of pieces in table.
000099r 3               	sta z80_b
000099r 3               lcol0:
000099r 3               	ldy #0
000099r 3               	lda (z80_hl),y 		; get type.
000099r 3               	beq lcol1		; yes, check collision.
000099r 3               lcol3:
000099r 3               	clc			; point to more shrapnel.
000099r 3               	lda z80_l
000099r 3               	adc #SHRSIZ
000099r 3               	sta z80_l
000099r 3               	bcc :+
000099r 3               	inc z80_h
000099r 3               :
000099r 3               	dec z80_b		; repeat for all shrapnel.
000099r 3               	bne lcol0
000099r 3               	clc
000099r 3               	rts 			; no collision, carry not set.
000099r 3               lcol1:
000099r 3               	ldy #3
000099r 3               	lda (z80_hl),y		; get y.
000099r 3               	sec
000099r 3               	ldy #8
000099r 3               	sbc (z80_ix),y		; subtract sprite y.
000099r 3               lcolh:
000099r 3               	cmp #SPR_HGT 		; within range?
000099r 3               	bcc :+
000099r 3               	jmp lcol2		; no, missed.
000099r 3               :
000099r 3               	ldy #5
000099r 3               	lda (z80_hl),y 		; get x.
000099r 3               	sec
000099r 3               	ldy #9
000099r 3               	sbc (z80_ix),y 		; subtract sprite y.
000099r 3               	cmp #16			; within range?
000099r 3               	bcs :+
000099r 3               	jmp lcol4 		; yes, collision occurred.
000099r 3               :
000099r 3               lcol2:
000099r 3               	jmp lcol3
000099r 3               lcol4:
000099r 3               	sec
000099r 3               	rts 			; return with carry set for collision.
000099r 3               .endif
000099r 3               
000099r 3               ;------------------------------------------------------
000099r 3               ; Main game engine code starts here.
000099r 3               ; After initialisation, mloop is the main loop
000099r 3               ;------------------------------------------------------
000099r 3               
000099r 3               game:
000099r 3               
000099r 3               ; Set up screen address table.
000099r 3               
000099r 3               setsat:
000099r 3  A9 00        	lda #<CharAddress	; start of screen.
00009Br 3  85 rr        	sta scraddr
00009Dr 3  A9 10        	lda #>CharAddress
00009Fr 3  85 rr        	sta scraddr+1
0000A1r 3               
0000A1r 3  A0 00        	ldy #0			; vertical lines on screen.
0000A3r 3               setsa0:
0000A3r 3  A5 rr        	lda scraddr
0000A5r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000A8r 3  A5 rr        	lda scraddr+1
0000AAr 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000ADr 3  20 rr rr     	jsr nline		; next line down.
0000B0r 3  C8           	iny			; next position in table.
0000B1r 3  D0 F0        	bne setsa0
0000B3r 3               
0000B3r 3               ; Set up colour address table
0000B3r 3               
0000B3r 3               setsof:
0000B3r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000B5r 3  85 rr        	sta bufaddr
0000B7r 3  A9 96        	lda #>ColorAttr
0000B9r 3  85 rr        	sta bufaddr+1
0000BBr 3               
0000BBr 3  A0 00        	ldy #0			; vertical lines on screen.
0000BDr 3               setof0:
0000BDr 3  A5 rr        	lda bufaddr
0000BFr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000C2r 3  A5 rr        	lda bufaddr+1
0000C4r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000C7r 3  18           	clc			; next line down.
0000C8r 3  A5 rr        	lda bufaddr
0000CAr 3  69 16        	adc #ScrWidth
0000CCr 3  85 rr        	sta bufaddr
0000CEr 3  90 02        	bcc :+
0000D0r 3  E6 rr        	inc bufaddr+1
0000D2r 3               :
0000D2r 3  C8           	iny			; next position in table.
0000D3r 3  C0 0B        	cpy #ScrHeight/2
0000D5r 3  D0 E6        	bne setof0
0000D7r 3               
0000D7r 3               ; Init graphics mode
0000D7r 3               
0000D7r 3  20 rr rr     	jsr init
0000DAr 3               
0000DAr 3               ; Init joysticks
0000DAr 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0000DDr 3               
0000DDr 3               rpblc2:
0000DDr 3               .if pflag
0000DDr 3               	jsr inishr 		; initialise particle engine.
0000DDr 3               .endif
0000DDr 3               evintr:
0000DDr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0000E0r 3               
0000E0r 3  A9 02        	lda #WALL 		; write default property.
0000E2r 3  A2 00        	ldx #0
0000E4r 3               clrmap:
0000E4r 3  9D 00 04     	sta MAP,x 		; block properties.
0000E7r 3  9D 00 05     	sta MAP+256,x
0000EAr 3  E8           	inx
0000EBr 3  D0 F7        	bne clrmap
0000EDr 3               
0000EDr 3               .if oflag
0000EDr 3               	jsr iniob 		; initialise objects.
0000EDr 3               .endif
0000EDr 3  A9 00        	lda #0			; put zero in accumulator.
0000EFr 3  85 rr        	sta gamwon		; reset game won flag.
0000F1r 3               
0000F1r 3  20 rr rr     	jsr inisc 		; init the score.
0000F4r 3               mapst:
0000F4r 3  AD rr rr     	lda stmap 		; start position on map.
0000F7r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
0000FAr 3               
0000FAr 3               inipbl:
0000FAr 3               .if aflag
0000FAr 3               	lda #<eop		; reset blockpointer
0000FAr 3               	sta pbptr
0000FAr 3               	lda #>eop
0000FAr 3               	sta pbptr+1
0000FAr 3               .endif
0000FAr 3  20 rr rr     	jsr initsc 		; set up first screen.
0000FDr 3               
0000FDr 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0000FFr 3  85 rr        	sta z80_x
000101r 3  A9 rr        	lda #>ssprit
000103r 3  85 rr        	sta z80_i
000105r 3               evini:
000105r 3  20 rr rr     	jsr evnt13 		; initialisation.
000108r 3               
000108r 3               ; Two restarts.
000108r 3               ; First restart - clear all sprites and initialise everything.
000108r 3               
000108r 3               rstrt:
000108r 3  20 rr rr     	jsr rsevt 		; restart events.
00010Br 3  20 rr rr     	jsr xspr 		; clear sprite table.
00010Er 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000111r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000114r 3  4C rr rr     	jmp rstrt0
000117r 3               
000117r 3               ; Second restart - clear all but player, and don't initialise him.
000117r 3               
000117r 3               rstrtn:
000117r 3  20 rr rr     	jsr rsevt		; restart events.
00011Ar 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
00011Dr 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000120r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000123r 3               
000123r 3               ; Set up the player and/or enemy sprites.
000123r 3               
000123r 3               rstrt0:
000123r 3  A9 00        	lda #0 			; zero in accumulator.
000125r 3  85 rr        	sta nexlev 		; reset next level flag.
000127r 3  85 rr        	sta restfl 		; reset restart flag.
000129r 3  85 rr        	sta deadf 		; reset dead flag.
00012Br 3               
00012Br 3  20 rr rr     	jsr droom 		; show screen layout.
00012Er 3               rpblc0:
00012Er 3               .if pflag
00012Er 3               	jsr inishr 		; initialise particle engine.
00012Er 3               .endif
00012Er 3               .if aflag
00012Er 3               	jsr rbloc		; draw blocks for this screen
00012Er 3               .endif
00012Er 3               .if oflag
00012Er 3               	jsr shwob		; draw objects.
00012Er 3               .endif
00012Er 3               
00012Er 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000130r 3  85 rr        	sta z80_x
000132r 3  A9 rr        	lda #>sprtab
000134r 3  85 rr        	sta z80_i
000136r 3  20 rr rr     	jsr dspr 		; display sprites.
000139r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00013Br 3  85 rr        	sta z80_x
00013Dr 3  A9 rr        	lda #>(sprtab+TABSIZ)
00013Fr 3  85 rr        	sta z80_i
000141r 3  20 rr rr     	jsr dspr 		; display sprites.
000144r 3               mloop:
000144r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000147r 3               
000147r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000149r 3  85 rr        	sta z80_x
00014Br 3  A9 rr        	lda #>sprtab
00014Dr 3  85 rr        	sta z80_i
00014Fr 3  20 rr rr     	jsr dspr 		; display even sprites.
000152r 3               
000152r 3               ;	jsr plsnd 		; play sounds.
000152r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000155r 3  20 rr rr     	jsr proshr
000158r 3               
000158r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00015Ar 3  85 rr        	sta z80_x
00015Cr 3  A9 rr        	lda #>(sprtab+TABSIZ)
00015Er 3  85 rr        	sta z80_i
000160r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000163r 3               
000163r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000165r 3  85 rr        	sta z80_x
000167r 3  A9 rr        	lda #>(ssprit)
000169r 3  85 rr        	sta z80_i
00016Br 3               evlp1:
00016Br 3  20 rr rr     	jsr evnt10 		; called once per main loop.
00016Er 3  20 rr rr     	jsr pspr 		; process sprites.
000171r 3               
000171r 3               ; Main loop events.
000171r 3               
000171r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000173r 3  85 rr        	sta z80_x
000175r 3  A9 rr        	lda #>ssprit
000177r 3  85 rr        	sta z80_i
000179r 3               evlp2:
000179r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
00017Cr 3               bsortx:
00017Cr 3  20 rr rr     	jsr bsort 		; sort sprites.
00017Fr 3               
00017Fr 3  A5 rr        	lda nexlev		; finished level flag.
000181r 3  D0 1F        	bne newlev		; is set, go to next level.
000183r 3  A5 rr        	lda gamwon		; finished game flag.
000185r 3  D0 2A        	bne evwon		; is set, finish the game.
000187r 3  A5 rr        	lda restfl 		; finished level flag.
000189r 3  C9 01        	cmp #1			; has it been set?
00018Br 3  D0 03        	bne :+
00018Dr 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000190r 3               :
000190r 3  C9 02        	cmp #2			; has it been set?
000192r 3  D0 03        	bne :+
000194r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
000197r 3               :
000197r 3  A5 rr        	lda deadf 		; dead flag.
000199r 3  D0 1C        	bne pdead		; yes, player dead.
00019Br 3               
00019Br 3               ; back to start of main loop.
00019Br 3               
00019Br 3  E6 rr        	inc frmno
00019Dr 3  E6 rr        	inc clock
00019Fr 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
0001A2r 3               
0001A2r 3               ;----------------------------------------------------------
0001A2r 3               ; Read blocks from list and update screen accordingly.
0001A2r 3               ;----------------------------------------------------------
0001A2r 3               
0001A2r 3               .if aflag
0001A2r 3               rbloc:
0001A2r 3               	lda #<eop		; reset blockpointer
0001A2r 3               	sta pbbuf
0001A2r 3               	lda #>eop
0001A2r 3               	sta pbbuf+1
0001A2r 3               
0001A2r 3               rbloc2:
0001A2r 3               	lda pbbuf			; check for last block
0001A2r 3               	cmp pbptr
0001A2r 3               	bne rbloc1
0001A2r 3               	lda pbbuf+1
0001A2r 3               	cmp pbptr+1
0001A2r 3               	bne rbloc1
0001A2r 3               	rts
0001A2r 3               rbloc1:
0001A2r 3               	ldy #0
0001A2r 3               	lda (pbbuf),y		; check if block for this scno
0001A2r 3               	cmp scno
0001A2r 3               	bne rbloc0		; if not, skip
0001A2r 3               	iny
0001A2r 3               	lda (pbbuf),y		; get y
0001A2r 3               	sta dispy
0001A2r 3               	iny
0001A2r 3               	lda (pbbuf),y		; get x
0001A2r 3               	sta dispx
0001A2r 3               	iny
0001A2r 3               	lda (pbbuf),y		; get blocknr
0001A2r 3               	jsr pattr2		; draw block
0001A2r 3               rbloc0:
0001A2r 3               	clc			; point to next block
0001A2r 3               	lda pbbuf
0001A2r 3               	adc #4
0001A2r 3               	sta pbbuf
0001A2r 3               	bcc rbloc2
0001A2r 3               	inc pbbuf+1
0001A2r 3               	jmp rbloc2
0001A2r 3               .endif
0001A2r 3               
0001A2r 3               ;----------------------------------------------------------
0001A2r 3               ; New level
0001A2r 3               ;----------------------------------------------------------
0001A2r 3               
0001A2r 3               newlev:
0001A2r 3  A5 rr        	lda scno 			; current screen.
0001A4r 3  18           	clc
0001A5r 3  69 01        	adc #1				; next screen.
0001A7r 3  CD rr rr     	cmp numsc 			; total number of screens.
0001AAr 3  B0 05        	bcs evwon			; yes, game finished.
0001ACr 3  85 rr        	sta scno			; set new level number.
0001AEr 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001B1r 3               
0001B1r 3               evwon:
0001B1r 3  20 rr rr     	jsr evnt18		 	; game completed.
0001B4r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001B7r 3               
0001B7r 3               ;----------------------------------------------------------
0001B7r 3               ; Player dead.
0001B7r 3               ;----------------------------------------------------------
0001B7r 3               
0001B7r 3               pdead:
0001B7r 3  A9 00        	lda #0				; zeroise accumulator.
0001B9r 3  85 rr        	sta deadf			; reset dead flag.
0001BBr 3               evdie:
0001BBr 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001BEr 3  A5 rr        	lda numlif			; number of lives.
0001C0r 3  F0 03        	beq :+
0001C2r 3  4C rr rr     	jmp rstrt 			; restart game.
0001C5r 3               :
0001C5r 3               evfail:
0001C5r 3  20 rr rr     	jsr evnt17 			; failure event.
0001C8r 3  4C rr rr     	jmp game			; restart game
0001CBr 3               
0001CBr 3               ;----------------------------------------------------------
0001CBr 3               ; Tidy things up
0001CBr 3               ;----------------------------------------------------------
0001CBr 3               
0001CBr 3               tidyup:
0001CBr 3  A0 00        	ldy #0				; digits to check.
0001CDr 3               tidyu2:
0001CDr 3  B9 rr rr     	lda score,y 			; get score digit.
0001D0r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001D3r 3  90 07        	bcc tidyu0			; high score is bigger.
0001D5r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001D7r 3  C8           	iny				; next digit of high score.
0001D8r 3  C0 06        	cpy #6
0001DAr 3  D0 F1        	bne tidyu2			; repeat for all digits
0001DCr 3               tidyu0:
0001DCr 3  A9 rr        	lda #<score			; return pointing to score.
0001DEr 3  85 rr        	sta z80_c
0001E0r 3  A9 rr        	lda #>score
0001E2r 3  85 rr        	sta z80_b
0001E4r 3  60           	rts
0001E5r 3               tidyu1:
0001E5r 3  A0 05        	ldy #5
0001E7r 3               tidyu3:
0001E7r 3  B9 rr rr     	lda score,y			; score.
0001EAr 3  99 rr rr     	sta hiscor,y			; high score.
0001EDr 3  88           	dey
0001EEr 3  10 F7        	bpl tidyu3 			; copy score to high score.
0001F0r 3               evnewh:
0001F0r 3  20 rr rr     	jsr evnt19			; new high score event.
0001F3r 3  4C rr rr     	jmp tidyu0			; tidy up.
0001F6r 3               
0001F6r 3               ;--------------------------------------------------
0001F6r 3               ; Restart event.
0001F6r 3               ;--------------------------------------------------
0001F6r 3               
0001F6r 3               rsevt:
0001F6r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
0001F8r 3  85 rr        	sta z80_x
0001FAr 3  A9 rr        	lda #>ssprit
0001FCr 3  85 rr        	sta z80_i
0001FEr 3               
0001FEr 3               evrs:
0001FEr 3  4C rr rr     	jmp evnt14	 		; call restart event.
000201r 3               
000201r 3               ;------------------------------------------------------------------
000201r 3               ; Copy number passed in a to string position bc, right-justified.
000201r 3               ;
000201r 3               ; Input:
000201r 3               ;  A  = number
000201r 3               ;  BC = string address
000201r 3               ;
000201r 3               ; Output:
000201r 3               ;  BC = string with number
000201r 3               ;-----------------------------------------------------------------
000201r 3               
000201r 3               num2ch:
000201r 3  85 rr        	sta z80_d		; Save number
000203r 3               
000203r 3  A9 00        	lda #0
000205r 3  85 rr        	sta flag
000207r 3               numdg3:
000207r 3  A2 64        	ldx #100		; hundreds column.
000209r 3  86 rr        	stx z80_e
00020Br 3  20 rr rr     	jsr numdg		; show digit.
00020Er 3               numdg2:
00020Er 3  A2 0A        	ldx #10			; tens column.
000210r 3  86 rr        	stx z80_e
000212r 3  20 rr rr     	jsr numdg		; show digit.
000215r 3               
000215r 3  E6 rr        	inc flag
000217r 3  A2 01        	ldx #1			; units column.
000219r 3  86 rr        	stx z80_e
00021Br 3               numdg:
00021Br 3  A9 30        	lda #48			; clear digit.
00021Dr 3  85 rr        	sta z80_a
00021Fr 3               numdg1:
00021Fr 3  A5 rr        	lda z80_d
000221r 3  C5 rr        	cmp z80_e
000223r 3  90 0E        	bcc numdg0		; nothing to show.
000225r 3  38           	sec
000226r 3  A5 rr        	lda z80_d
000228r 3  E5 rr        	sbc z80_e		; subtract from column.
00022Ar 3  85 rr        	sta z80_d
00022Cr 3  E6 rr        	inc z80_a		; increment digit.
00022Er 3  E6 rr        	inc flag
000230r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
000233r 3               numdg0:
000233r 3  A0 00        	ldy #0
000235r 3  A5 rr        	lda z80_a
000237r 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000239r 3  A5 rr        	lda flag
00023Br 3  F0 06        	beq :+
00023Dr 3  E6 rr        	inc z80_c		; next buffer position.
00023Fr 3  D0 02        	bne :+
000241r 3  E6 rr        	inc z80_b
000243r 3               :
000243r 3  60           	rts
000244r 3               num2dd:
000244r 3  85 rr        	sta z80_d		; Save number
000246r 3               
000246r 3  A9 01        	lda #1
000248r 3  85 rr        	sta flag
00024Ar 3               
00024Ar 3  4C rr rr     	jmp numdg2
00024Dr 3               num2td:
00024Dr 3  85 rr        	sta z80_d		; Save number
00024Fr 3               
00024Fr 3  A9 01        	lda #1
000251r 3  85 rr        	sta flag
000253r 3  4C rr rr     	jmp numdg3
000256r 3               
000256r 3               ;---------------------------------------------------------
000256r 3               ; Reset score to "000000"
000256r 3               ;---------------------------------------------------------
000256r 3               
000256r 3               inisc:
000256r 3  A9 30        	lda #'0'
000258r 3  A2 05        	ldx #5			; digits to initialise.
00025Ar 3               inisc0:
00025Ar 3  9D rr rr     	sta score,x 		; write zero digit.
00025Dr 3  CA           	dex			; next column.
00025Er 3  10 FA        	bpl inisc0		; repeat for all digits.
000260r 3               
000260r 3  60           	rts
000261r 3               
000261r 3               ;-----------------------------------------------------
000261r 3               ; Multiply h by d and return in hl.
000261r 3               ;
000261r 3               ; Input:
000261r 3               ;  H = first number
000261r 3               ;  D = second number
000261r 3               ;
000261r 3               ; Output:
000261r 3               ;  HL = result H x D
000261r 3               ;-----------------------------------------------------
000261r 3               
000261r 3               imul:
000261r 3  A5 rr        	lda z80_d		; HL = H * D
000263r 3  85 rr        	sta z80_e
000265r 3  A5 rr        	lda z80_h
000267r 3  85 rr        	sta z80_c		; make c first multiplier.
000269r 3               imul0:
000269r 3  A9 00        	lda #0			; zeroise total.
00026Br 3  85 rr        	sta z80_l
00026Dr 3  85 rr        	sta z80_h
00026Fr 3               
00026Fr 3  A5 rr        	lda z80_h
000271r 3  85 rr        	sta z80_d		; zeroise high byte.
000273r 3               
000273r 3  A9 08        	lda #8			; repeat 8 times.
000275r 3  85 rr        	sta z80_b
000277r 3               imul1:
000277r 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
000279r 3  90 0E        	bcc imul2		; wasn't set.
00027Br 3  18           	clc			; bit was set, so add de.
00027Cr 3  A5 rr        	lda z80_l
00027Er 3  65 rr        	adc z80_e
000280r 3  85 rr        	sta z80_l
000282r 3  A5 rr        	lda z80_h
000284r 3  65 rr        	adc z80_d
000286r 3  85 rr        	sta z80_h
000288r 3  18           	clc 			; reset carry.
000289r 3               imul2:
000289r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
00028Br 3  26 rr        	rol z80_d
00028Dr 3  C6 rr        	dec z80_b
00028Fr 3  D0 E6        	bne imul1		; repeat 8 times.
000291r 3               
000291r 3  60           	rts
000292r 3               
000292r 3               ;-----------------------------------------------
000292r 3               ; Divide d by e and return in d, remainder in a.
000292r 3               ;
000292r 3               ; Input:
000292r 3               ;  D = first number
000292r 3               ;  E = second number
000292r 3               ;
000292r 3               ; Output:
000292r 3               ;  D = result D/E
000292r 3               ;  A = remainder
000292r 3               ;-----------------------------------------------
000292r 3               
000292r 3               idiv:
000292r 3  A9 00        	lda #0
000294r 3  A0 08        	ldy #8		 	; bits to shift.
000296r 3  06 rr        	asl z80_d
000298r 3               idiv0:
000298r 3  2A           	rol a 			; multiply d by 2.
000299r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
00029Br 3  90 02        	bcc idiv1		; e is greater, no division this time.
00029Dr 3  E5 rr        	sbc z80_e		; subtract it.
00029Fr 3               idiv1:
00029Fr 3  26 rr        	rol z80_d		; rotate into d.
0002A1r 3  88           	dey
0002A2r 3  D0 F4        	bne idiv0		; repeat
0002A4r 3  60           	rts
0002A5r 3               
0002A5r 3               ;---------------------------------------------------
0002A5r 3               ; Play AY sound effect
0002A5r 3               ;---------------------------------------------------
0002A5r 3               
0002A5r 3               plsnd:
0002A5r 3  60           	rts
0002A6r 3               
0002A6r 3               ;---------------------------------------------------
0002A6r 3               ; Objects handling.
0002A6r 3               ; 32 bytes for image
0002A6r 3               ; 1 for colour
0002A6r 3               ; 3 for room, y and x
0002A6r 3               ; 3 for starting room, y and x.
0002A6r 3               ; 254 = disabled.
0002A6r 3               ; 255 = object in player"s pockets.
0002A6r 3               ;---------------------------------------------------
0002A6r 3               
0002A6r 3               ;---------------------------------------------------
0002A6r 3               ; Show items present.
0002A6r 3               ;---------------------------------------------------
0002A6r 3               
0002A6r 3               .if oflag
0002A6r 3               shwob:
0002A6r 3               	lda #<objdta			; objects table.
0002A6r 3               	sta z80_l
0002A6r 3               	lda #>objdta
0002A6r 3               	sta z80_h
0002A6r 3               	lda numob 			; number of objects in the game.
0002A6r 3               	sta sprcnt
0002A6r 3               shwob0:
0002A6r 3               	ldy #33 			; distance to room number.
0002A6r 3               	lda (z80_hl),y 			; same as an item?
0002A6r 3               	cmp scno 			; current location.
0002A6r 3               	bne :+
0002A6r 3               	jsr dobj 			; yes, display object.
0002A6r 3               :
0002A6r 3               	clc
0002A6r 3               	lda z80_l
0002A6r 3               	adc #39 			; distance to next item.
0002A6r 3               	sta z80_l
0002A6r 3               	lda z80_h
0002A6r 3               	adc #0
0002A6r 3               	sta z80_h	 		; point to it.
0002A6r 3               	dec sprcnt
0002A6r 3               	bne shwob0 			; repeat for others.
0002A6r 3               	rts
0002A6r 3               
0002A6r 3               ;---------------------------------------------------
0002A6r 3               ; Display object.
0002A6r 3               ; hl must point to object's start address.
0002A6r 3               ;
0002A6r 3               ; Input:
0002A6r 3               ;  HL = object address
0002A6r 3               ;---------------------------------------------------
0002A6r 3               
0002A6r 3               dobj:
0002A6r 3               	ldy #32
0002A6r 3               	lda (z80_hl),y 			; point to y.
0002A6r 3               	sta objcol
0002A6r 3               	ldy #34
0002A6r 3               	lda (z80_hl),y 			; point to y.
0002A6r 3               	sta dispy
0002A6r 3               	iny
0002A6r 3               	lda (z80_hl),y 			; point to x.
0002A6r 3               	sta dispx
0002A6r 3               dobj1:
0002A6r 3               	jmp sprite 			; draw this sprite.
0002A6r 3               
0002A6r 3               ;--------------------------------------
0002A6r 3               ; Remove an object.
0002A6r 3               ;
0002A6r 3               ; Input:
0002A6r 3               ;  A = object number
0002A6r 3               ;--------------------------------------
0002A6r 3               
0002A6r 3               remob:
0002A6r 3               	cmp numob			; number of objects in game.
0002A6r 3               	bcc :+				; are we checking past the end?
0002A6r 3               	rts				; yes, can't get non-existent item.
0002A6r 3               :
0002A6r 3               	pha				; remember object.
0002A6r 3               	jsr getob			; pick it up if we haven't already got it.
0002A6r 3               	pla				; retrieve object number.
0002A6r 3               	jsr gotob			; get its address.
0002A6r 3               	lda #254
0002A6r 3               	ldy #33
0002A6r 3               	sta (z80_hl),y			; remove it.
0002A6r 3               	rts
0002A6r 3               
0002A6r 3               ;---------------------------------------------------
0002A6r 3               ; Pick up object number held in the accumulator.
0002A6r 3               ;
0002A6r 3               ; Input:
0002A6r 3               ;  A = object number
0002A6r 3               ;---------------------------------------------------
0002A6r 3               
0002A6r 3               getob:
0002A6r 3               	cmp numob 		; number of objects in game.
0002A6r 3               	bcc :+			; are we checking past the end?
0002A6r 3               	rts			; yes, can't get non-existent item.
0002A6r 3               :
0002A6r 3               	jsr gotob 		; check if we already have it.
0002A6r 3               	cmp #255
0002A6r 3               	bne :+
0002A6r 3               	rts			; we already do.
0002A6r 3               :
0002A6r 3               	ldy #33
0002A6r 3               	lda (z80_hl),y		; is it on this screen?
0002A6r 3               	cmp scno 		; current screen.
0002A6r 3               	bne getob0		; not on screen, so nothing to delete.
0002A6r 3               
0002A6r 3               	lda #255
0002A6r 3               	sta (z80_hl),y		; pick it up.
0002A6r 3               	iny 			; point to y coord.
0002A6r 3               getob1:
0002A6r 3               	ldy #34
0002A6r 3               	lda (z80_hl),y		; y coord.
0002A6r 3               	sta dispy
0002A6r 3               	ldy #35
0002A6r 3               	lda (z80_hl),y 		; x coord.
0002A6r 3               	sta dispx
0002A6r 3               	jmp dobj1 		; delete object sprite.
0002A6r 3               getob0:
0002A6r 3               	lda #255
0002A6r 3               	sta (z80_hl),y 		; pick it up.
0002A6r 3               	rts
0002A6r 3               .endif
0002A6r 3               
0002A6r 3               ;-----------------------------------------------------------------
0002A6r 3               ; Got object check.
0002A6r 3               ; Call with object in accumulator, returns zero set if in pockets.
0002A6r 3               ;
0002A6r 3               ; Input:
0002A6r 3               ;  A = object number
0002A6r 3               ;-----------------------------------------------------------------
0002A6r 3               .if oflag .or mflag
0002A6r 3               gotob:
0002A6r 3               	cmp numob 		; number of objects in game.
0002A6r 3               	bcc :+ 			; are we checking past the end?
0002A6r 3               	jmp gotob0 		; yes, we can't have a non-existent object.
0002A6r 3               :
0002A6r 3               	jsr findob		; find the object.
0002A6r 3               gotob1:
0002A6r 3               	rts
0002A6r 3               
0002A6r 3               gotob0:
0002A6r 3               	lda #254 		; missing.
0002A6r 3               	jmp gotob1
0002A6r 3               
0002A6r 3               findob:
0002A6r 3               	pha			; save object number
0002A6r 3               	lda #<objdta 		; objects.
0002A6r 3               	sta z80_l
0002A6r 3               	lda #>objdta
0002A6r 3               	sta z80_h
0002A6r 3               	pla			; retreive object number
0002A6r 3               	beq fndob1 		; is it zero? yes, skip loop.
0002A6r 3               	tax 			; loop counter
0002A6r 3               fndob2:
0002A6r 3               	clc
0002A6r 3               	lda z80_l
0002A6r 3               	adc #39 		; size of each object.
0002A6r 3               	sta z80_l
0002A6r 3               	bcc :+
0002A6r 3               	inc z80_h
0002A6r 3               :
0002A6r 3               	dex 			; repeat until we find address.
0002A6r 3               	bne fndob2
0002A6r 3               fndob1:
0002A6r 3               	ldy #33			; distance to room it's in.
0002A6r 3               	lda (z80_hl),y		; fetch status.
0002A6r 3               	rts
0002A6r 3               .endif
0002A6r 3               
0002A6r 3               ;---------------------------------------------
0002A6r 3               ; Drop object number at (dispx, dispy).
0002A6r 3               ;
0002A6r 3               ; Input:
0002A6r 3               ;  A = object number
0002A6r 3               ;---------------------------------------------
0002A6r 3               
0002A6r 3               .if oflag
0002A6r 3               drpob:
0002A6r 3               	cmp numob 		; are we checking past the end?
0002A6r 3               	bcc :+
0002A6r 3               	rts			; yes, can't drop non-existent item.
0002A6r 3               :
0002A6r 3               	jsr gotob		; make sure object is in inventory.
0002A6r 3               	cmp scno		; already on this screen?
0002A6r 3               	bne :+
0002A6r 3               	rts			; yes, nothing to do.
0002A6r 3               :
0002A6r 3               	ldy #33
0002A6r 3               	lda scno
0002A6r 3               	sta (z80_hl),y		; bring onto screen.
0002A6r 3               	lda dispy		; sprite y coordinate.
0002A6r 3               	iny
0002A6r 3               	sta (z80_hl),y		; point to object y.
0002A6r 3               	lda dispx 		; sprite x coordinate.
0002A6r 3               	iny
0002A6r 3               	sta (z80_hl),y 		; point to object x
0002A6r 3               	jmp dobj		; draw the object sprite.
0002A6r 3               
0002A6r 3               ;-----------------------------------------------
0002A6r 3               ; Seek objects at sprite position.
0002A6r 3               ;
0002A6r 3               ; Output:
0002A6r 3               ;  A = object number, if not found A=255
0002A6r 3               ;-----------------------------------------------
0002A6r 3               
0002A6r 3               skobj:
0002A6r 3               	lda #<objdta 		; pointer to objects.
0002A6r 3               	sta z80_l
0002A6r 3               	lda #>objdta
0002A6r 3               	sta z80_h
0002A6r 3               
0002A6r 3               	lda numob 		; number of objects in game.
0002A6r 3               	sta z80_b 		; set up the loop counter.
0002A6r 3               skobj0:
0002A6r 3               	lda scno		; current room number.
0002A6r 3               	ldy #33
0002A6r 3               	cmp (z80_hl),y		; is object in here?
0002A6r 3               	bne :+
0002A6r 3               	jsr skobj1		; yes, check coordinates.
0002A6r 3               :
0002A6r 3               	clc			; point to next object in table.
0002A6r 3               	lda z80_l
0002A6r 3               	adc #39			; size of each object.
0002A6r 3               	sta z80_l
0002A6r 3               	bcc :+
0002A6r 3               	inc z80_h
0002A6r 3               :
0002A6r 3               	dec z80_b
0002A6r 3               	bne skobj0		; repeat for all objects.
0002A6r 3               
0002A6r 3               	lda #255		; end of list and nothing found, return 255.
0002A6r 3               	rts
0002A6r 3               
0002A6r 3               skobj1:
0002A6r 3               	ldy #34			; point to y coordinate.
0002A6r 3               	lda (z80_hl),y		; point to y coordinate.
0002A6r 3               	sec
0002A6r 3               	ldy #var_newY
0002A6r 3               	sbc (z80_ix),y 		; subtract sprite y.
0002A6r 3               	clc
0002A6r 3               	adc #15			; add sprite height minus one.
0002A6r 3               	cmp #31			; within range?
0002A6r 3               	bcs skobj2		; no, ignore object.
0002A6r 3               
0002A6r 3               	ldy #35			; point to x coordinate now.
0002A6r 3               	lda (z80_hl),y 		; get coordinate.
0002A6r 3               	sec
0002A6r 3               	ldy #var_newX
0002A6r 3               	sbc (z80_ix),y 		; subtract the sprite x.
0002A6r 3               	clc			; add sprite width minus one.
0002A6r 3               	adc #15
0002A6r 3               	cmp #31			; within range?
0002A6r 3               	bcs skobj2		; no, ignore object.
0002A6r 3               
0002A6r 3               	pla			; remove return address from stack.
0002A6r 3               	pla
0002A6r 3               
0002A6r 3               	lda numob 		; objects in game.
0002A6r 3               	sec
0002A6r 3               	sbc z80_b		; subtract loop counter.
0002A6r 3               skobj2:
0002A6r 3               	rts			; accumulator now points to object.
0002A6r 3               .endif
0002A6r 3               
0002A6r 3               ;---------------------------------------------------------------------
0002A6r 3               ; Spawn a new sprite.
0002A6r 3               ;---------------------------------------------------------------------
0002A6r 3               
0002A6r 3               spawn:
0002A6r 3  A9 rr        	lda #<sprtab		; sprite table.
0002A8r 3  85 rr        	sta z80_l
0002AAr 3  A9 rr        	lda #>sprtab
0002ACr 3  85 rr        	sta z80_h
0002AEr 3               numsp1:
0002AEr 3  A9 0C        	lda #NUMSPR		; number of sprites.
0002B0r 3  85 rr        	sta spcnt
0002B2r 3               spaw0:
0002B2r 3  A0 00        	ldy #var_Type
0002B4r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0002B6r 3  C9 FF        	cmp #255		; is it an unused slot?
0002B8r 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0002BAr 3               
0002BAr 3  18           	clc 			; point to next sprite in table.
0002BBr 3  A5 rr        	lda z80_l
0002BDr 3  69 12        	adc #TABSIZ		; size of each entry.
0002BFr 3  85 rr        	sta z80_l
0002C1r 3  90 02        	bcc :+
0002C3r 3  E6 rr        	inc z80_h
0002C5r 3               :
0002C5r 3  C6 rr        	dec spcnt		; one less iteration.
0002C7r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0002C9r 3               
0002C9r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0002C9r 3               
0002C9r 3               spaw1:
0002C9r 3  A5 rr        	lda z80_i		; address of original sprite.
0002CBr 3  48           	pha
0002CCr 3  A5 rr        	lda z80_x
0002CEr 3  48           	pha
0002CFr 3               
0002CFr 3  A5 rr        	lda z80_l		; store spawned sprite address.
0002D1r 3  85 rr        	sta spptr
0002D3r 3  A5 rr        	lda z80_h
0002D5r 3  85 rr        	sta spptr+1
0002D7r 3               
0002D7r 3  A5 rr        	lda z80_c
0002D9r 3  A0 00        	ldy #var_Type
0002DBr 3  91 rr        	sta (z80_hl),y 		; set the type.
0002DDr 3  A0 05        	ldy #var_newType
0002DFr 3  91 rr        	sta (z80_hl),y		; copy
0002E1r 3               
0002E1r 3  A5 rr        	lda z80_b
0002E3r 3  A0 01        	ldy #var_Image
0002E5r 3  91 rr        	sta (z80_hl),y		; set the image.
0002E7r 3  A0 06        	ldy #var_newImage
0002E9r 3  91 rr        	sta (z80_hl),y		; copy
0002EBr 3               
0002EBr 3  A9 00        	lda #0 				; frame zero.
0002EDr 3  A0 02        	ldy #var_Frame
0002EFr 3  91 rr        	sta (z80_hl),y		; set frame.
0002F1r 3  A0 07        	ldy #var_newFrame
0002F3r 3  91 rr        	sta (z80_hl),y		; copy
0002F5r 3               
0002F5r 3  A0 08        	ldy #8
0002F7r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0002F9r 3  A0 03        	ldy #3
0002FBr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0002FDr 3  A0 08        	ldy #8
0002FFr 3  91 rr        	sta (z80_hl),y		; copy
000301r 3               
000301r 3  A0 09        	ldy #9
000303r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000305r 3  A0 04        	ldy #4
000307r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000309r 3  A0 09        	ldy #9
00030Br 3  91 rr        	sta (z80_hl),y		; copy
00030Dr 3               
00030Dr 3  A0 0A        	ldy #10				; direction of original.
00030Fr 3  B1 rr        	lda (z80_ix),y
000311r 3  91 rr        	sta (z80_hl),y		; direction
000313r 3               
000313r 3  A9 00        	lda #0
000315r 3  A0 0D        	ldy #var_jumpLo
000317r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000319r 3  C8           	iny
00031Ar 3  91 rr        	sta (z80_hl),y		; reset parameter.
00031Cr 3  C8           	iny
00031Dr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00031Fr 3  C8           	iny
000320r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000322r 3  C8           	iny
000323r 3  AD rr rr     	lda fontcol
000326r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000328r 3               rtssp:
000328r 3  A5 rr        	lda spptr			; address of new sprite.
00032Ar 3  85 rr        	sta z80_x
00032Cr 3  A5 rr        	lda spptr+1
00032Er 3  85 rr        	sta z80_i
000330r 3               evis1:
000330r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
000333r 3               
000333r 3  A5 rr        	lda spptr 			; address of new sprite.
000335r 3  85 rr        	sta z80_x
000337r 3  A5 rr        	lda spptr+1
000339r 3  85 rr        	sta z80_i
00033Br 3               
00033Br 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
00033Br 3  A0 03        	ldy #var_Y
00033Dr 3  B1 rr        	lda (z80_hl), y		; old x coord
00033Fr 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
000341r 3  B0 03        	bcs :+				; yes, don't draw it.
000343r 3               
000343r 3  20 rr rr     	jsr sspria 			; display the new sprite.
000346r 3               :
000346r 3  68           	pla					; address of original sprite.
000347r 3  85 rr        	sta z80_x
000349r 3  68           	pla
00034Ar 3  85 rr        	sta z80_i
00034Cr 3               
00034Cr 3  60           	rts
00034Dr 3               
00034Dr 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000351r 3  30 30        
000353r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000357r 3  30 30        
000359r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00035Dr 3  30 30        
00035Fr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000361r 3               
000361r 3               ;----------------------------------------------------
000361r 3               ; Check y-pos
000361r 3               ;----------------------------------------------------
000361r 3               
000361r 3               checkx:
000361r 3  A5 rr        	lda dispy		; y position.
000363r 3  C9 16        	cmp #22			; off screen?
000365r 3  B0 01        	bcs :+
000367r 3  60           	rts			; no, it's okay.
000368r 3               :
000368r 3  68           	pla			; remove return address from stack.
000369r 3  85 rr        	sta z80_l
00036Br 3  68           	pla
00036Cr 3  85 rr        	sta z80_h
00036Er 3  60           	rts
00036Fr 3               
00036Fr 3               ;-----------------------------------------------
00036Fr 3               ; Displays the current high score.
00036Fr 3               ;-----------------------------------------------
00036Fr 3               
00036Fr 3               dhisc:
00036Fr 3  A9 rr        	lda #<hiscor 		; high score text.
000371r 3  8D rr rr     	sta dscor3+1
000374r 3  8D rr rr     	sta bscor3+1
000377r 3  A9 rr        	lda #>hiscor
000379r 3  8D rr rr     	sta dscor3+2
00037Cr 3  8D rr rr     	sta bscor3+2
00037Fr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000382r 3               
000382r 3               ;------------------------------------------------------
000382r 3               ; Displays the current score.
000382r 3               ;------------------------------------------------------
000382r 3               
000382r 3               dscor:
000382r 3  A9 rr        	lda #<score		; score text.
000384r 3  8D rr rr     	sta dscor3+1
000387r 3  8D rr rr     	sta bscor3+1
00038Ar 3  A9 rr        	lda #>score
00038Cr 3  8D rr rr     	sta dscor3+2
00038Fr 3  8D rr rr     	sta bscor3+2
000392r 3               dscor1:
000392r 3  8C rr rr     	sty tmpscr
000395r 3  20 rr rr     	jsr preprt		; set up font and print position.
000398r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
00039Br 3               
00039Br 3               ;	lda #6			; digits to display.
00039Br 3               ;	sta z80_b
00039Br 3  A5 rr        	lda prtmod		; get print mode.
00039Dr 3  F0 03        	beq :+			; standard size text?
00039Fr 3  4C rr rr     	jmp bscor0		; no, show double-height.
0003A2r 3               :
0003A2r 3               dscor0:
0003A2r 3               ;	ldy #0
0003A2r 3               ;	lda (z80_hl),y 		; fetch character.
0003A2r 3  AC rr rr     	ldy tmpscr
0003A5r 3               dscor3:
0003A5r 3  B9 rr rr     	lda score,y
0003A8r 3  20 rr rr     	jsr pchar 		; display character.
0003ABr 3  E6 rr        	inc dispx		; move along x coordinate
0003ADr 3               
0003ADr 3               ;	inc z80_l		; next score column.
0003ADr 3               ;	bne :+
0003ADr 3               ;	inc z80_h
0003ADr 3               ;:
0003ADr 3  EE rr rr     	inc tmpscr
0003B0r 3  C6 rr        	dec z80_b
0003B2r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0003B4r 3               dscor2:
0003B4r 3  A5 rr        	lda dispx 		; set up display coordinates.
0003B6r 3  85 rr        	sta charx
0003B8r 3  A5 rr        	lda dispy
0003BAr 3  85 rr        	sta chary
0003BCr 3  60           	rts
0003BDr 3               
0003BDr 3  00           tmpscr:	.byte 0
0003BEr 3               ;------------------------------------------------------
0003BEr 3               ; Displays the current score in double-height characters.
0003BEr 3               ;
0003BEr 3               ; Input:
0003BEr 3               ;  B  = digit number
0003BEr 3               ;  HL = score string
0003BEr 3               ;------------------------------------------------------
0003BEr 3               
0003BEr 3               bscor0:
0003BEr 3               ;	ldy #0
0003BEr 3               
0003BEr 3               ;	lda (z80_hl),y 		; fetch character.
0003BEr 3  A4 rr        	ldy tmp
0003C0r 3               bscor3:
0003C0r 3  B9 rr rr     	lda score,y
0003C3r 3  20 rr rr     	jsr bchar 		; display big char.
0003C6r 3               
0003C6r 3               ;	inc z80_l 		; next score column.
0003C6r 3               ;	bne :+
0003C6r 3               ;	inc z80_h
0003C6r 3               ;:
0003C6r 3  E6 rr        	inc tmp
0003C8r 3  C6 rr        	dec z80_b
0003CAr 3  F0 03        	beq :+
0003CCr 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0003CFr 3               :
0003CFr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0003D2r 3               
0003D2r 3               ;-----------------------------------------------------
0003D2r 3               ; Adds number in the hl pair to the score.
0003D2r 3               ;-----------------------------------------------------
0003D2r 3               
0003D2r 3               addsc:
0003D2r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0003D4r 3  85 rr        	sta z80_e
0003D6r 3  A9 rr        	lda #>(score+1)
0003D8r 3  85 rr        	sta z80_d
0003DAr 3  A9 10        	lda #<10000		; amount to add each time.
0003DCr 3  85 rr        	sta z80_c
0003DEr 3  A9 27        	lda #>10000
0003E0r 3  85 rr        	sta z80_b
0003E2r 3  20 rr rr     	jsr incsc		; add to score.
0003E5r 3               
0003E5r 3  E6 rr        	inc z80_e		; thousands column.
0003E7r 3  D0 02        	bne :+
0003E9r 3  E6 rr        	inc z80_d
0003EBr 3               :
0003EBr 3  A9 E8        	lda #<1000		; amount to add each time.
0003EDr 3  85 rr        	sta z80_c
0003EFr 3  A9 03        	lda #>1000
0003F1r 3  85 rr        	sta z80_b
0003F3r 3  20 rr rr     	jsr incsc 		; add to score.
0003F6r 3               
0003F6r 3  E6 rr        	inc z80_e		; hundreds column.
0003F8r 3  D0 02        	bne :+
0003FAr 3  E6 rr        	inc z80_d
0003FCr 3               :
0003FCr 3  A9 64        	lda #<100		; amount to add each time.
0003FEr 3  85 rr        	sta z80_c
000400r 3  A9 00        	lda #>100
000402r 3  85 rr        	sta z80_b
000404r 3  20 rr rr     	jsr incsc		; add to score.
000407r 3               
000407r 3  E6 rr        	inc z80_e 		; tens column.
000409r 3  D0 02        	bne :+
00040Br 3  E6 rr        	inc z80_d
00040Dr 3               :
00040Dr 3  A9 0A        	lda #<10		; amount to add each time.
00040Fr 3  85 rr        	sta z80_c
000411r 3  A9 00        	lda #>10
000413r 3  85 rr        	sta z80_b
000415r 3  20 rr rr     	jsr incsc 		; add to score.
000418r 3               
000418r 3  E6 rr        	inc z80_e		; units column.
00041Ar 3  D0 02        	bne :+
00041Cr 3  E6 rr        	inc z80_d
00041Er 3               :
00041Er 3  A9 01        	lda #<1			; units.
000420r 3  85 rr        	sta z80_c
000422r 3  A9 00        	lda #>1
000424r 3  85 rr        	sta z80_b
000426r 3               incsc:
000426r 3  A5 rr        	lda z80_h		; store amount to add.
000428r 3  48           	pha
000429r 3  A5 rr        	lda z80_l
00042Br 3  48           	pha
00042Cr 3               
00042Cr 3  38           	sec			; subtract from amount to add.
00042Dr 3  A5 rr        	lda z80_l
00042Fr 3  E5 rr        	sbc z80_c
000431r 3  85 rr        	sta z80_l
000433r 3  A5 rr        	lda z80_h
000435r 3  E5 rr        	sbc z80_b
000437r 3  85 rr        	sta z80_h
000439r 3  90 14        	bcc incsc0		; too much, restore value.
00043Br 3               
00043Br 3  68           	pla			; delete the previous amount from the stack.
00043Cr 3  68           	pla
00043Dr 3               
00043Dr 3  A5 rr        	lda z80_d 		; store column position.
00043Fr 3  48           	pha
000440r 3  A5 rr        	lda z80_e
000442r 3  48           	pha
000443r 3  20 rr rr     	jsr incsc2		; do the increment.
000446r 3               
000446r 3  68           	pla			; restore column.
000447r 3  85 rr        	sta z80_e
000449r 3  68           	pla
00044Ar 3  85 rr        	sta z80_d
00044Cr 3  4C rr rr     	jmp incsc		; repeat until all added.
00044Fr 3               
00044Fr 3               incsc0:
00044Fr 3  68           	pla			; restore previous value.
000450r 3  85 rr        	sta z80_l
000452r 3  68           	pla
000453r 3  85 rr        	sta z80_h
000455r 3  60           	rts
000456r 3               incsc2:
000456r 3  A0 00        	ldy #0
000458r 3  B1 rr        	lda (z80_de),y 		; get amount.
00045Ar 3  18           	clc
00045Br 3  69 01        	adc #1			; add one to column.
00045Dr 3  91 rr        	sta (z80_de),y		; write new column total.
00045Fr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000461r 3  B0 01        	bcs :+
000463r 3  60           	rts			; no, carry on.
000464r 3               :
000464r 3  A9 30        	lda #'0'		; make it zero.
000466r 3  91 rr        	sta (z80_de),y		; write new column total.
000468r 3  C6 rr        	dec z80_e		; back one column.
00046Ar 3  D0 02        	bne :+
00046Cr 3  C6 rr        	dec z80_d
00046Er 3               :
00046Er 3  4C rr rr     	jmp incsc2
000471r 3               
000471r 3               ;------------------------------------
000471r 3               ; Add bonus to score and reset bonus
000471r 3               ;------------------------------------
000471r 3               
000471r 3               addbo:
000471r 3  A2 05        	ldx #5			; last digit.
000473r 3  18           	clc
000474r 3               addbo0:
000474r 3  BD rr rr     	lda score,x		; get score.
000477r 3  7D rr rr     	adc bonus,x		; add bonus.
00047Ar 3  38           	sec			; 0 to 18.
00047Br 3  E9 30        	sbc #48
00047Dr 3  48           	pha
00047Er 3  A9 30        	lda #'0'
000480r 3  9D rr rr     	sta bonus,x
000483r 3  68           	pla
000484r 3  C9 3A        	cmp #58
000486r 3  90 03        	bcc addbo1
000488r 3  38           	sec
000489r 3  E9 0A        	sbc #10
00048Br 3               addbo1:
00048Br 3  9D rr rr     	sta score,x		; zeroise bonus.
00048Er 3  CA           	dex			; next digit.
00048Fr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000491r 3  60           	rts
000492r 3               
000492r 3               ;------------------------------------
000492r 3               ; Swap score and bonus.
000492r 3               ;------------------------------------
000492r 3               
000492r 3               swpsb:
000492r 3  A2 05        	ldx #5			; digits to add.
000494r 3               swpsb0:
000494r 3  BD rr rr     	lda score,x 		; get score digits.
000497r 3  48           	pha			; save digit
000498r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
00049Br 3  9D rr rr     	sta score,x		; switch score-bonus
00049Er 3  68           	pla
00049Fr 3  9D rr rr     	sta bonus,x
0004A2r 3  CA           	dex 			; repeat for all 6 digits.
0004A3r 3  10 EF        	bpl swpsb0
0004A5r 3  60           	rts
0004A6r 3               
0004A6r 3               ;----------------------------------------------------
0004A6r 3               ; Get print address.
0004A6r 3               ;----------------------------------------------------
0004A6r 3               
0004A6r 3               gprad:
0004A6r 3  98           	tya
0004A7r 3  48           	pha
0004A8r 3               
0004A8r 3  A5 rr        	lda dispx 		; x coordinate.
0004AAr 3  85 rr        	sta scraddr
0004ACr 3  A9 00        	lda #0
0004AEr 3  85 rr        	sta scraddr+1
0004B0r 3  06 rr        	asl scraddr  		; multiply char by 16
0004B2r 3  26 rr        	rol scraddr+1
0004B4r 3  06 rr        	asl scraddr
0004B6r 3  26 rr        	rol scraddr+1
0004B8r 3  06 rr        	asl scraddr
0004BAr 3  26 rr        	rol scraddr+1
0004BCr 3  06 rr        	asl scraddr
0004BEr 3  26 rr        	rol scraddr+1
0004C0r 3               
0004C0r 3  A5 rr        	lda dispy		; y coordinate.
0004C2r 3  0A           	asl a
0004C3r 3  0A           	asl a
0004C4r 3  0A           	asl a			; multiply char by 8
0004C5r 3  A8           	tay
0004C6r 3               
0004C6r 3  18           	clc
0004C7r 3  A5 rr        	lda scraddr
0004C9r 3  79 00 07     	adc SCADTB_lb,y
0004CCr 3  85 rr        	sta scraddr
0004CEr 3  A5 rr        	lda scraddr+1
0004D0r 3  79 00 08     	adc SCADTB_hb,y
0004D3r 3  85 rr        	sta scraddr+1
0004D5r 3               
0004D5r 3  A5 rr        	lda prtmod		; Double line if bigtxt
0004D7r 3  F0 08        	beq noskip
0004D9r 3  A5 rr        	lda dispx
0004DBr 3  29 E0        	and #$e0
0004DDr 3  F0 02        	beq noskip
0004DFr 3  E6 rr        	inc scraddr+1
0004E1r 3               noskip:
0004E1r 3               
0004E1r 3  68           	pla
0004E2r 3  A8           	tay
0004E3r 3  60           	rts
0004E4r 3               ;--------------------------------------------------------------
0004E4r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
0004E4r 3               ;
0004E4r 3               ; Output:
0004E4r 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
0004E4r 3               ;--------------------------------------------------------------
0004E4r 3               
0004E4r 3               pradd:
0004E4r 3  A5 rr        	lda dispy 		; y coordinate.
0004E6r 3  85 rr        	sta bufaddr
0004E8r 3  A9 00        	lda #0
0004EAr 3  85 rr        	sta bufaddr+1
0004ECr 3  06 rr        	asl bufaddr  		; multiply char by 32
0004EEr 3  26 rr        	rol bufaddr+1
0004F0r 3  06 rr        	asl bufaddr
0004F2r 3  26 rr        	rol bufaddr+1
0004F4r 3  06 rr        	asl bufaddr
0004F6r 3  26 rr        	rol bufaddr+1
0004F8r 3  06 rr        	asl bufaddr
0004FAr 3  26 rr        	rol bufaddr+1
0004FCr 3  06 rr        	asl bufaddr
0004FEr 3  26 rr        	rol bufaddr+1
000500r 3  18           	clc			; add address of MAP graphics.
000501r 3  A5 rr        	lda bufaddr
000503r 3  65 rr        	adc dispx
000505r 3  69 00        	adc #<MAP
000507r 3  85 rr        	sta bufaddr
000509r 3  A5 rr        	lda bufaddr+1
00050Br 3  69 04        	adc #>MAP
00050Dr 3  85 rr        	sta bufaddr+1
00050Fr 3  60           	rts
000510r 3               
000510r 3               ;--------------------------------------------------------------
000510r 3               ; Get attribute address at (dispx, dispy).
000510r 3               ;
000510r 3               ; Output:
000510r 3               ;  bufaddr = COLOR + dispy*22 + dispx
000510r 3               ;--------------------------------------------------------------
000510r 3               
000510r 3               gaadd:
000510r 3  A5 rr        	lda dispy
000512r 3  4A           	lsr a
000513r 3  A8           	tay
000514r 3  B9 55 0A     	lda COLATTTB_hb,y
000517r 3  85 rr        	sta bufaddr+1
000519r 3  B9 4A 0A     	lda COLATTTB_lb,y
00051Cr 3  18           	clc
00051Dr 3  65 rr        	adc dispx
00051Fr 3  85 rr        	sta bufaddr
000521r 3  60           	rts
000522r 3               
000522r 3               ;----------------------------------------------
000522r 3               ; Print attributes, properties and pixels.
000522r 3               ;
000522r 3               ; Input:
000522r 3               ;  A	= tile number
000522r 3               ;----------------------------------------------
000522r 3               
000522r 3               pbpattr:			; entry PUTBLOCK command
000522r 3  A4 rr        	ldy charx
000524r 3  84 rr        	sty dispx
000526r 3  A4 rr        	ldy chary
000528r 3  84 rr        	sty dispy
00052Ar 3               pattr:
00052Ar 3               .if aflag
00052Ar 3               	pha
00052Ar 3               	jsr wbloc		; save blockinfo
00052Ar 3               	pla
00052Ar 3               .endif
00052Ar 3               
00052Ar 3               pattr2:
00052Ar 3  85 rr        	sta z80_b		; store cell in b register for now.
00052Cr 3  AA           	tax
00052Dr 3  BD rr rr     	lda bprop,x 		; block properties.
000530r 3  85 rr        	sta z80_c
000532r 3  C9 08        	cmp #COLECT
000534r 3  D0 04        	bne :+
000536r 3  A5 rr        	lda z80_b
000538r 3  85 rr        	sta colpatt
00053Ar 3               :
00053Ar 3  20 rr rr     	jsr pradd 		; get property buffer address.
00053Dr 3  A5 rr        	lda z80_c
00053Fr 3  A0 00        	ldy #0
000541r 3  91 rr        	sta (bufaddr),y 	; write property.
000543r 3  A5 rr        	lda z80_b 		; restore cell.
000545r 3  4C rr rr     	jmp panp
000548r 3               ; Print attributes, no properties.
000548r 3               
000548r 3               ;colpatt:	.byte 0
000548r 3               
000548r 3               panp:
000548r 3  85 rr        	sta z80_e		; displacement in e.
00054Ar 3  A9 00        	lda #0
00054Cr 3  85 rr        	sta z80_d		; no high byte.
00054Er 3  06 rr        	asl z80_e  		; multiply char by 8.
000550r 3  26 rr        	rol z80_d
000552r 3  06 rr        	asl z80_e
000554r 3  26 rr        	rol z80_d
000556r 3  06 rr        	asl z80_e
000558r 3  26 rr        	rol z80_d
00055Ar 3  18           	clc
00055Br 3  A5 rr        	lda z80_e
00055Dr 3  69 rr        	adc #<chgfx 		; address of graphics.
00055Fr 3  85 rr        	sta tileaddr
000561r 3  A5 rr        	lda z80_d
000563r 3  69 rr        	adc #>chgfx
000565r 3  85 rr        	sta tileaddr+1
000567r 3               
000567r 3  A6 rr        	ldx z80_b		; set colour attribute
000569r 3  BD rr rr     	lda bCol,x
00056Cr 3  48           	pha
00056Dr 3  20 rr rr     	jsr gaadd
000570r 3  A0 00        	ldy #0
000572r 3  68           	pla
000573r 3  91 rr        	sta (bufaddr),y
000575r 3               
000575r 3  20 rr rr     	jsr gprad 		; get screen address.
000578r 3  A2 07        	ldx #7			; number of pixel rows to write.
00057Ar 3               panp0:
00057Ar 3  A0 00        	ldy #0
00057Cr 3  B1 rr        	lda (tileaddr),y 	; get image byte.
00057Er 3               .if iflag
00057Er 3               	eor #$ff		; Invert
00057Er 3               .endif
00057Er 3  BC rr rr     	ldy scrtab,x
000581r 3  91 rr        	sta (scraddr),y 	; copy to screen.
000583r 3  E6 rr        	inc tileaddr 		; next image byte.
000585r 3  D0 02        	bne :+
000587r 3  E6 rr        	inc tileaddr+1
000589r 3               :
000589r 3  CA           	dex	 		; repeat for 8 pixel rows.
00058Ar 3  10 EE        	bpl panp0
00058Cr 3  E6 rr        	inc dispx 		; move along one.
00058Er 3  E6 rr        	inc charx
000590r 3  60           	rts
000591r 3               
000591r 3               ;----------------------------------------------
000591r 3               ; Write block
000591r 3               ;----------------------------------------------
000591r 3               
000591r 3               .if aflag
000591r 3               wbloc:
000591r 3               	ldy #3
000591r 3               	sta (pbptr),y		; store block number
000591r 3               	dey
000591r 3               	lda dispx
000591r 3               	sta (pbptr),y		; write x position of block.
000591r 3               	dey
000591r 3               	lda dispy
000591r 3               	sta (pbptr),y		; write y position of block.
000591r 3               	dey
000591r 3               	lda scno
000591r 3               	sta (pbptr),y		; write screen.
000591r 3               	clc			; point to next free location
000591r 3               	lda pbptr
000591r 3               	adc #4
000591r 3               	sta pbptr
000591r 3               	bcc :+
000591r 3               	inc pbptr+1
000591r 3               :
000591r 3               	rts
000591r 3               .endif
000591r 3               
000591r 3               ;.if kflag
000591r 3               ;panp:
000591r 3               ;.endif
000591r 3               
000591r 3               ;----------------------------------------------
000591r 3               ; Print character pixels, no more.
000591r 3               ;
000591r 3               ; Input:
000591r 3               ;  A	= character to print
000591r 3               ;----------------------------------------------
000591r 3               
000591r 3               pchr:
000591r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000594r 3  E6 rr        	inc dispx		; move along one.
000596r 3  60           	rts
000597r 3               
000597r 3               ;----------------------------------------------------
000597r 3               ; Shifter sprite routine for objects.
000597r 3               ;----------------------------------------------------
000597r 3               
000597r 3               .if oflag
000597r 3               sprit7:
000597r 3               	lda z80_b
000597r 3               	beq sprit0
000597r 3               	sta z80_a
000597r 3               sprit3:
000597r 3               	lsr spr			; shift into position.
000597r 3               	ror spr+1
000597r 3               	ror spr+2
000597r 3               	dec z80_a		; one less iteration.
000597r 3               	bne sprit3
000597r 3               sprit0:
000597r 3               	rts 			; now apply to screen.
000597r 3               .endif
000597r 3               
000597r 3               ;-----------------------------------------------------------
000597r 3               ; Get room address.
000597r 3               ;-----------------------------------------------------------
000597r 3               
000597r 3               groom:
000597r 3  A6 rr        	ldx scno 		; screen number.
000599r 3  A0 00        	ldy #0
00059Br 3               groomx:
00059Br 3  A9 rr        	lda #<scdat 		; pointer to screens.
00059Dr 3  85 rr        	sta z80_l
00059Fr 3  A9 rr        	lda #>scdat
0005A1r 3  85 rr        	sta z80_h
0005A3r 3               groom1:
0005A3r 3  E0 00        	cpx #0			; is it the first one?
0005A5r 3  F0 15        	beq groom0 		; no more screens to skip.
0005A7r 3               
0005A7r 3  18           	clc
0005A8r 3  A5 rr        	lda z80_l
0005AAr 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0005ADr 3  85 rr        	sta z80_l
0005AFr 3  C8           	iny			; point to high byte.
0005B0r 3  A5 rr        	lda z80_h
0005B2r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
0005B5r 3  85 rr        	sta z80_h
0005B7r 3  C8           	iny			; next address.
0005B8r 3               
0005B8r 3  CA           	dex 			; one less iteration.
0005B9r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
0005BCr 3               groom0:
0005BCr 3  AD rr rr     	lda numsc		; add displacement.
0005BFr 3  0A           	asl a
0005C0r 3  18           	clc			; add double displacement to address.
0005C1r 3  65 rr        	adc z80_l
0005C3r 3  85 rr        	sta z80_l
0005C5r 3  A5 rr        	lda z80_h
0005C7r 3  69 00        	adc #0
0005C9r 3  85 rr        	sta z80_h
0005CBr 3  60           	rts
0005CCr 3               
0005CCr 3               ;-----------------------------------------------------------
0005CCr 3               ; Draw present room.
0005CCr 3               ;-----------------------------------------------------------
0005CCr 3               
0005CCr 3               droom:
0005CCr 3  AD rr rr     	lda wintop 		; window top.
0005CFr 3  85 rr        	sta dispy		; set cursor y position.
0005D1r 3               droom2:
0005D1r 3  20 rr rr     	jsr groom 		; get address of current room.
0005D4r 3  A9 00        	lda #0	 		; zero in accumulator.
0005D6r 3  85 rr        	sta comcnt 		; reset compression counter.
0005D8r 3  AD rr rr     	lda winhgt 		; height of window.
0005DBr 3  85 rr        	sta rrow		; set row counter
0005DDr 3               droom0:
0005DDr 3  AD rr rr     	lda winlft 		; window left edge.
0005E0r 3  85 rr        	sta dispx 		; set cursor x position.
0005E2r 3  AD rr rr     	lda winwid 		; width of window.
0005E5r 3  85 rr        	sta rcol		; set column counter
0005E7r 3               droom1:
0005E7r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
0005EAr 3               .if xflag
0005EAr 3               	jsr drwmeta
0005EAr 3               .else
0005EAr 3  20 rr rr     	jsr pattr2 		; show attributes and block.
0005EDr 3               .endif
0005EDr 3  C6 rr        	dec rcol		; one less column.
0005EFr 3  D0 F6        	bne droom1 		; repeat for entire line.
0005F1r 3  E6 rr        	inc dispy		; move down one line.
0005F3r 3               .if xflag
0005F3r 3               	inc dispy		; move down one line.
0005F3r 3               .endif
0005F3r 3  C6 rr        	dec rrow 		; one less row.
0005F5r 3  D0 E6        	bne droom0 		; repeat for all rows.
0005F7r 3  60           	rts
0005F8r 3               
0005F8r 3               ;----------------------------------------------
0005F8r 3               ; Decompress bytes on-the-fly.
0005F8r 3               ;----------------------------------------------
0005F8r 3               
0005F8r 3               flbyt:
0005F8r 3  A5 rr        	lda comcnt 		; compression counter.
0005FAr 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
0005FCr 3               
0005FCr 3  A0 00        	ldy #0
0005FEr 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000600r 3  E6 rr        	inc z80_l 		; point to next cell.
000602r 3  D0 02        	bne :+
000604r 3  E6 rr        	inc z80_h
000606r 3               :
000606r 3  C9 FF        	cmp #255 		; is this byte a control code?
000608r 3  F0 01        	beq :+
00060Ar 3  60           	rts 			; no, this byte is uncompressed.
00060Br 3               :
00060Br 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
00060Dr 3  85 rr        	sta combyt 		; set up the type.
00060Fr 3  E6 rr        	inc z80_l 		; point to quantity.
000611r 3  D0 02        	bne :+
000613r 3  E6 rr        	inc z80_h
000615r 3               :
000615r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000617r 3  E6 rr        	inc z80_l 		; point to next byte.
000619r 3  D0 02        	bne :+
00061Br 3  E6 rr        	inc z80_h
00061Dr 3               :
00061Dr 3               flbyt1:
00061Dr 3  85 rr        	sta comcnt 		; store new quantity.
00061Fr 3  C6 rr        	dec comcnt		; one less.
000621r 3  A5 rr        	lda combyt 		; byte to expand.
000623r 3  60           	rts
000624r 3               
000624r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000624r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000624r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000624r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000624r 3               .if xflag
000624r 3               drwmeta:
000624r 3               	sta tmpblk
000624r 3               	jsr pattr2
000624r 3               
000624r 3               	inc dispy
000624r 3               	dec dispx
000624r 3               	ldx tmpblk
000624r 3               	beq :+
000624r 3               	inx
000624r 3               :
000624r 3               	txa
000624r 3               	jsr pattr2
000624r 3               
000624r 3               	ldx tmpblk
000624r 3               	beq :+
000624r 3               	inx
000624r 3               	inx
000624r 3               	inx
000624r 3               :
000624r 3               	txa
000624r 3               	jsr pattr2
000624r 3               
000624r 3               	dec dispy
000624r 3               	dec dispx
000624r 3               	ldx tmpblk
000624r 3               	beq :+
000624r 3               	inx
000624r 3               	inx
000624r 3               :
000624r 3               	txa
000624r 3               	jsr pattr2
000624r 3               	rts
000624r 3               
000624r 3               tmpblk:	.byte 0
000624r 3               
000624r 3               .endif
000624r 3               
000624r 3               ;------------------------------------------
000624r 3               ; Ladder down check.
000624r 3               ;
000624r 3               ; Input:
000624r 3               ;  IX = sprite pointer
000624r 3               ;------------------------------------------
000624r 3               
000624r 3               .if lflag
000624r 3               laddd:
000624r 3               	ldy #9
000624r 3               	lda (z80_ix),y		; x coordinate.
000624r 3               	sta dispx
000624r 3               
000624r 3               	ldy #8
000624r 3               	lda (z80_ix),y		; y coordinate.
000624r 3               	and #254		; make it even.
000624r 3               	sta (z80_ix),y 		; reset it.
000624r 3               	clc 			; look down 16 pixels.
000624r 3               numsp5:
000624r 3               	adc #SPR_HGT
000624r 3               	sta dispy		; coords in dispx,dispy.
000624r 3               	jmp laddv
000624r 3               
000624r 3               ;------------------------------------------
000624r 3               ; Ladder up check.
000624r 3               ;
000624r 3               ; Input:
000624r 3               ;  IX = sprite pointer
000624r 3               ;
000624r 3               ; Output:
000624r 3               ;  A  = 0 is ok, A <>0 is not ok
000624r 3               ;------------------------------------------
000624r 3               
000624r 3               laddu:
000624r 3               	ldy #9
000624r 3               	lda (z80_ix),y		; x coordinate.
000624r 3               	sta dispx
000624r 3               
000624r 3               	ldy #8
000624r 3               	lda (z80_ix),y		; y coordinate.
000624r 3               	and #254 		; make it even.
000624r 3               	sta (z80_ix),y		; reset it.
000624r 3               	clc 			; look 2 pixels above feet.
000624r 3               numsp6:
000624r 3               	adc #SPR_HGT-2
000624r 3               	sta dispy		; coords in dispx,dispy.
000624r 3               laddv:
000624r 3               	jsr tstbl 		; get map address.
000624r 3               	jsr ldchk 		; standard ladder check.
000624r 3               	beq :+
000624r 3               	rts 			; no way through.
000624r 3               :
000624r 3               	inc bufaddr 		; look right one cell.
000624r 3               	bne :+
000624r 3               	inc bufaddr+1
000624r 3               :
000624r 3               	jsr ldchk 		; do the check.
000624r 3               	beq :+
000624r 3               	rts 			; impassable.
000624r 3               :
000624r 3               	lda dispx 		; y coordinate.
000624r 3               	and #7 			; position straddling block cells.
000624r 3               	bne :+
000624r 3               	rts 			; no more checks needed.
000624r 3               :
000624r 3               	inc bufaddr 		; look to third cell.
000624r 3               	bne :+
000624r 3               	inc bufaddr+1
000624r 3               :
000624r 3               	jsr ldchk 		; do the check.
000624r 3               	rts  			; return with zero flag set accordingly.
000624r 3               .endif
000624r 3               
000624r 3               ;---------------------------------------------------------
000624r 3               ; Can go up check.
000624r 3               ;
000624r 3               ; Input:
000624r 3               ;  IX = sprite pointer
000624r 3               ;
000624r 3               ; Output:
000624r 3               ;  A  = 0 is ok, A <>0 is not ok
000624r 3               ;---------------------------------------------------------
000624r 3               
000624r 3               cangu:
000624r 3  A0 09        	ldy #9
000626r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000628r 3  85 rr        	sta dispx
00062Ar 3  A0 08        	ldy #8
00062Cr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00062Er 3  38           	sec
00062Fr 3  E9 02        	sbc #2
000631r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000633r 3  20 rr rr     	jsr tstbl 		; get map address.
000636r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000639r 3  F0 01        	beq :+
00063Br 3  60           	rts			; no way through.
00063Cr 3               :
00063Cr 3  E6 rr        	inc bufaddr		; look right one cell.
00063Er 3  D0 02        	bne :+
000640r 3  E6 rr        	inc bufaddr+1
000642r 3               :
000642r 3  20 rr rr     	jsr lrchk 		; do the check.
000645r 3  F0 01        	beq :+
000647r 3  60           	rts			; impassable.
000648r 3               :
000648r 3  A5 rr        	lda dispx		; x coordinate.
00064Ar 3  29 07        	and #7			; position straddling block cells.
00064Cr 3  D0 01        	bne :+
00064Er 3  60           	rts			; no more checks needed.
00064Fr 3               :
00064Fr 3  E6 rr        	inc bufaddr		; look to third cell.
000651r 3  D0 02        	bne :+
000653r 3  E6 rr        	inc bufaddr+1
000655r 3               :
000655r 3  20 rr rr     	jsr lrchk		; do the check.
000658r 3  60           	rts 			; return with zero flag set accordingly.
000659r 3               
000659r 3               ;---------------------------------------------------------
000659r 3               ; Can go down check.
000659r 3               ;
000659r 3               ; Input:
000659r 3               ;  IX = sprite pointer
000659r 3               ;
000659r 3               ; Output:
000659r 3               ;  A  = 0 is ok, A <>0 is not ok
000659r 3               ;---------------------------------------------------------
000659r 3               
000659r 3               cangd:
000659r 3  A0 09        	ldy #9
00065Br 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00065Dr 3  85 rr        	sta dispx
00065Fr 3  A0 08        	ldy #8
000661r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000663r 3  18           	clc
000664r 3               numsp3:
000664r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000666r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000668r 3  20 rr rr     	jsr tstbl 		; get map address.
00066Br 3  20 rr rr     	jsr plchk 		; block, platform check.
00066Er 3  F0 01        	beq :+
000670r 3  60           	rts			; no way through.
000671r 3               :
000671r 3  E6 rr        	inc bufaddr		; look right one cell.
000673r 3  D0 02        	bne :+
000675r 3  E6 rr        	inc bufaddr+1
000677r 3               :
000677r 3  20 rr rr     	jsr plchk		; block, platform check.
00067Ar 3  F0 01        	beq :+
00067Cr 3  60           	rts			; impassable.
00067Dr 3               :
00067Dr 3  A5 rr        	lda dispx		; x coordinate.
00067Fr 3  29 07        	and #7			; position straddling block cells.
000681r 3  D0 01        	bne :+
000683r 3  60           	rts			; no more checks needed.
000684r 3               :
000684r 3  E6 rr        	inc bufaddr		; look to third cell.
000686r 3  D0 02        	bne :+
000688r 3  E6 rr        	inc bufaddr+1
00068Ar 3               :
00068Ar 3  20 rr rr     	jsr plchk		; block, platform check.
00068Dr 3  60           	rts			; return with zero flag set accordingly.
00068Er 3               
00068Er 3               ;---------------------------------------------------------
00068Er 3               ; Can go left check.
00068Er 3               ;
00068Er 3               ; Input:
00068Er 3               ;  IX = sprite pointer
00068Er 3               ;
00068Er 3               ; Output:
00068Er 3               ;  A  = 0 is ok, A <>0 is not ok
00068Er 3               ;---------------------------------------------------------
00068Er 3               
00068Er 3               cangl:
00068Er 3  A0 08        	ldy #8
000690r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000692r 3  85 rr        	sta dispy
000694r 3  A0 09        	ldy #9
000696r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000698r 3  38           	sec
000699r 3  E9 02        	sbc #2			; look left 2 pixels.
00069Br 3  85 rr        	sta dispx		; coords in dispx,dispy.
00069Dr 3  4C rr rr     	jmp cangh		; test if we can go there.
0006A0r 3               
0006A0r 3               ;---------------------------------------------------------
0006A0r 3               ; Can go right check.
0006A0r 3               ;
0006A0r 3               ; Input:
0006A0r 3               ;  IX = sprite pointer
0006A0r 3               ;
0006A0r 3               ; Output:
0006A0r 3               ;  A  = 0 is ok, A <>0 is not ok
0006A0r 3               ;---------------------------------------------------------
0006A0r 3               
0006A0r 3               cangr:
0006A0r 3  A0 08        	ldy #8
0006A2r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
0006A4r 3  85 rr        	sta dispy
0006A6r 3  A0 09        	ldy #9
0006A8r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0006AAr 3  18           	clc
0006ABr 3  69 10        	adc #16			; look right 16 pixels.
0006ADr 3  85 rr        	sta dispx		; coords in dispx,dispy.
0006AFr 3               cangh:
0006AFr 3               cangh2:
0006AFr 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0006B1r 3  85 rr        	sta z80_b
0006B3r 3  A5 rr        	lda dispy		; y position.
0006B5r 3  29 07        	and #7			; does x straddle cells?
0006B7r 3  D0 02        	bne cangh0		; yes, loop counter is good.
0006B9r 3  C6 rr        	dec z80_b		; one less row to write.
0006BBr 3               cangh0:
0006BBr 3  20 rr rr     	jsr tstbl		; get map address.
0006BEr 3               cangh1:
0006BEr 3  20 rr rr     	jsr lrchk		; standard left/right check.
0006C1r 3  F0 01        	beq :+
0006C3r 3  60           	rts			; no way through.
0006C4r 3               :
0006C4r 3  48           	pha
0006C5r 3  18           	clc
0006C6r 3  A5 rr        	lda bufaddr
0006C8r 3  69 20        	adc #32		; look down.
0006CAr 3  85 rr        	sta bufaddr
0006CCr 3  90 02        	bcc :+
0006CEr 3  E6 rr        	inc bufaddr+1
0006D0r 3               :
0006D0r 3  68           	pla
0006D1r 3               
0006D1r 3  C6 rr        	dec z80_b
0006D3r 3  D0 E9        	bne cangh1
0006D5r 3  60           	rts
0006D6r 3               
0006D6r 3               ;-------------------------------------
0006D6r 3               ; Check left/right movement is okay.
0006D6r 3               ;
0006D6r 3               ; Input:
0006D6r 3               ;  bufaddr = MAP + x/8 + y/8*32
0006D6r 3               ;
0006D6r 3               ; Output:
0006D6r 3               ;  A  = 0 is ok, A <>0 is not ok
0006D6r 3               ;-------------------------------------
0006D6r 3               
0006D6r 3               lrchk:
0006D6r 3  A0 00        	ldy #0
0006D8r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
0006DAr 3  C9 02        	cmp #WALL 		; is it passable?
0006DCr 3  F0 0A        	beq lrchkx		; no.
0006DEr 3               
0006DEr 3  C9 04        	cmp #FODDER		; fodder has to be dug.
0006E0r 3  F0 06        	beq lrchkx		; not passable.
0006E2r 3  A9 00        	lda #0
0006E4r 3  60           	rts
0006E5r 3               
0006E5r 3               ;--------------------------------------------------------------
0006E5r 3               ; Called by mmenu
0006E5r 3               ;--------------------------------------------------------------
0006E5r 3               
0006E5r 3               always:
0006E5r 3  A9 FF        	lda #255		; report it as okay.
0006E7r 3  60           	rts
0006E8r 3               
0006E8r 3               lrchkx:
0006E8r 3  A9 01        	lda #1 			; reset all bits.
0006EAr 3  60           	rts
0006EBr 3               
0006EBr 3               
0006EBr 3               ;--------------------------------------------------------------
0006EBr 3               ; Check platform or solid item is not in way.
0006EBr 3               ;
0006EBr 3               ; Input:
0006EBr 3               ;  bufaddr = MAP + x/8 + y/8*32
0006EBr 3               ;
0006EBr 3               ; Output:
0006EBr 3               ;  A  = 0 is ok, A <>0 is not ok
0006EBr 3               ;--------------------------------------------------------------
0006EBr 3               
0006EBr 3               plchk:
0006EBr 3  A0 00        	ldy #0
0006EDr 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0006EFr 3  C9 02        	cmp #WALL 		; is it passable?
0006F1r 3  F0 F5        	beq lrchkx		; no.
0006F3r 3               .if pflag .or dflag
0006F3r 3               	cmp #FODDER		; fodder has to be dug.
0006F3r 3               	beq lrchkx		; not passable.
0006F3r 3               .endif
0006F3r 3  C9 01        	cmp #PLATFM		; platform is solid.
0006F5r 3  F0 03        	beq plchkx		; not passable.
0006F7r 3               .if lflag
0006F7r 3               	cmp #LADDER		; is it a ladder?
0006F7r 3               	beq lrchkx		; on ladder, deny movement.
0006F7r 3               .endif
0006F7r 3               plchk0:
0006F7r 3  A9 00        	lda #0			; report as ok
0006F9r 3  60           	rts
0006FAr 3               plchkx:
0006FAr 3  A5 rr        	lda dispy		; x coordinate.
0006FCr 3  29 07        	and #7			; position straddling blocks.
0006FEr 3  F0 E8        	beq lrchkx		; on platform, deny movement.
000700r 3  4C rr rr     	jmp plchk0
000703r 3               
000703r 3               ;--------------------------------------------------------------
000703r 3               ; Check ladder is available.
000703r 3               ;
000703r 3               ; Input:
000703r 3               ;  bufaddr = MAP + x/8 + y/8*32
000703r 3               ;
000703r 3               ; Output:
000703r 3               ;  A  = 0 is ok, A <>0 is not ok
000703r 3               ;--------------------------------------------------------------
000703r 3               
000703r 3               .if lflag
000703r 3               ldchk:
000703r 3               	ldy #0
000703r 3               	lda (bufaddr),y 	; fetch cell.
000703r 3               	cmp #LADDER 		; is it a ladder?
000703r 3               	beq ldchk1
000703r 3               	lda #1
000703r 3               	rts  			; return with zero flag set accordingly.
000703r 3               ldchk1:
000703r 3               	lda #0
000703r 3               	rts
000703r 3               .endif
000703r 3               
000703r 3               ;--------------------------------------------------------------
000703r 3               ; Get collectables.
000703r 3               ;--------------------------------------------------------------
000703r 3               
000703r 3               .if cflag
000703r 3               getcol:
000703r 3                       lda #COLECT             ; collectable blocks.
000703r 3                       sta z80_b
000703r 3                       jsr tded                ; test for collectable blocks.
000703r 3                       cmp z80_b               ; did we find one?
000703r 3                       beq :+
000703r 3                       rts                     ; none were found, job done.
000703r 3               :
000703r 3                       jsr gtblk               ; get block.
000703r 3                       jsr evnt20              ; collected block event.
000703r 3                       jmp getcol              ; repeat until none left.
000703r 3               
000703r 3               ; Get collectable block.
000703r 3               
000703r 3               gtblk:
000703r 3               	ldy #0
000703r 3               	lda (bufaddr),y
000703r 3               	sta z80_a
000703r 3                       lda #0
000703r 3                       sta (bufaddr),y		; make it empty now.
000703r 3               
000703r 3               	lda bufaddr		; set dispx
000703r 3               	and #31
000703r 3               	sta dispx
000703r 3               
000703r 3               	lda bufaddr+1		; Set dispy
000703r 3               	sec
000703r 3               	sbc #>MAP
000703r 3               	sta bufaddr+1
000703r 3               	asl bufaddr
000703r 3               	rol bufaddr+1
000703r 3               	asl bufaddr
000703r 3               	rol bufaddr+1
000703r 3               	asl bufaddr
000703r 3               	rol bufaddr+1
000703r 3               	lda bufaddr+1
000703r 3               	sta dispy
000703r 3               
000703r 3               	lda colpatt		; get blocknr
000703r 3               	sta z80_e		; displacement in e.
000703r 3               	lda #0
000703r 3               	sta z80_d		; no high byte.
000703r 3               	asl z80_e  		; multiply char by 8.
000703r 3               	rol z80_d
000703r 3               	asl z80_e
000703r 3               	rol z80_d
000703r 3               	asl z80_e
000703r 3               	rol z80_d
000703r 3               	clc
000703r 3               	lda z80_e
000703r 3               	adc #<chgfx 		; address of graphics.
000703r 3               	sta tileaddr
000703r 3               	lda z80_d
000703r 3               	adc #>chgfx
000703r 3               	sta tileaddr+1
000703r 3               
000703r 3               	jsr gprad 		; get screen address.
000703r 3               	ldx #7			; number of pixel rows to write.
000703r 3               gtblk0:
000703r 3               	ldy #0
000703r 3               	lda (tileaddr),y 	; get image byte.
000703r 3               	ldy scrtab,x
000703r 3               	eor (scraddr),y 	; XOR tile on screen
000703r 3               	sta (scraddr),y 	; copy to screen.
000703r 3               	inc tileaddr 		; next image byte.
000703r 3               	bne :+
000703r 3               	inc tileaddr+1
000703r 3               :
000703r 3               	dex	 		; repeat for 8 pixel rows.
000703r 3               	bpl gtblk0
000703r 3               	rts
000703r 3               .endif
000703r 3               
000703r 3               ;--------------------------------------------------------------
000703r 3               ; Touched deadly block check.
000703r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000703r 3               ;
000703r 3               ; Input:
000703r 3               ;  IX = sprite address
000703r 3               ;
000703r 3               ; Output:
000703r 3               ;  A  = 0 is ok, A=5 is not ok
000703r 3               ;--------------------------------------------------------------
000703r 3               
000703r 3               tded:
000703r 3  A0 08        	ldy #8
000705r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000707r 3  85 rr        	sta dispy
000709r 3  C8           	iny
00070Ar 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00070Cr 3  85 rr        	sta dispx		; coords in dispx,dispy.
00070Er 3  20 rr rr     	jsr tstbl		; get map address.
000711r 3  48           	pha
000712r 3  A9 1F        	lda #31			; default distance to next line down.
000714r 3  85 rr        	sta z80_e
000716r 3  68           	pla
000717r 3  C5 rr        	cmp z80_b		; is this the required block?
000719r 3  D0 01        	bne :+
00071Br 3  60           	rts			; yes.
00071Cr 3               :
00071Cr 3  E6 rr        	inc bufaddr 		; next cell.
00071Er 3  D0 02        	bne :+
000720r 3  E6 rr        	inc bufaddr+1
000722r 3               :
000722r 3  A0 00        	ldy #0
000724r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000726r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000728r 3  D0 01        	bne :+
00072Ar 3  60           	rts			; yes.
00072Br 3               :
00072Br 3  A5 rr        	lda dispx		; horizontal position.
00072Dr 3  85 rr        	sta z80_c 		; store column in c register.
00072Fr 3  29 07        	and #7			; is it straddling cells?
000731r 3  D0 03        	bne :+
000733r 3  4C rr rr     	jmp tded0		; no.
000736r 3               :
000736r 3  E6 rr        	inc bufaddr 		; last cell.
000738r 3  D0 02        	bne :+
00073Ar 3  E6 rr        	inc bufaddr+1
00073Cr 3               :
00073Cr 3  A0 00        	ldy #0
00073Er 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000740r 3  C5 rr        	cmp z80_b		; is this the block?
000742r 3  D0 01        	bne :+
000744r 3  60           	rts			; yes.
000745r 3               :
000745r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000747r 3               tded0:
000747r 3  18           	clc 			; point to next row.
000748r 3  A5 rr        	lda bufaddr
00074Ar 3  65 rr        	adc z80_e
00074Cr 3  85 rr        	sta bufaddr
00074Er 3  90 02        	bcc :+
000750r 3  E6 rr        	inc bufaddr+1
000752r 3               :
000752r 3  A0 00        	ldy #0
000754r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000756r 3  C5 rr        	cmp z80_b		; is this fatal?
000758r 3  D0 01        	bne :+
00075Ar 3  60           	rts			; yes.
00075Br 3               :
00075Br 3  E6 rr        	inc bufaddr 		; next cell.
00075Dr 3  D0 02        	bne :+
00075Fr 3  E6 rr        	inc bufaddr+1
000761r 3               :
000761r 3  A0 00        	ldy #0
000763r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000765r 3  C5 rr        	cmp z80_b		; is this fatal?
000767r 3  D0 01        	bne :+
000769r 3  60           	rts			; yes.
00076Ar 3               :
00076Ar 3  A5 rr        	lda z80_c		; horizontal position.
00076Cr 3  29 07        	and #7			; is it straddling cells?
00076Er 3  D0 03        	bne :+
000770r 3  4C rr rr     	jmp tded1 		; no.
000773r 3               :
000773r 3  E6 rr        	inc bufaddr		; last cell.
000775r 3  D0 02        	bne :+
000777r 3  E6 rr        	inc bufaddr+1
000779r 3               :
000779r 3  A0 00        	ldy #0
00077Br 3  B1 rr        	lda (bufaddr),y		; fetch type.
00077Dr 3  C5 rr        	cmp z80_b		; is this fatal?
00077Fr 3  D0 01        	bne :+
000781r 3  60           	rts			; yes.
000782r 3               :
000782r 3               tded1:
000782r 3  A5 rr        	lda dispy		; vertical position.
000784r 3  29 07        	and #7 			; is it straddling cells?
000786r 3  D0 01        	bne :+
000788r 3  60           	rts			; no, job done.
000789r 3               :
000789r 3  18           	clc			; point to next row.
00078Ar 3  A5 rr        	lda bufaddr
00078Cr 3  65 rr        	adc z80_e
00078Er 3  85 rr        	sta bufaddr
000790r 3  90 02        	bcc :+
000792r 3  E6 rr        	inc bufaddr+1
000794r 3               :
000794r 3  A0 00        	ldy #0
000796r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000798r 3  C5 rr        	cmp z80_b		; is this fatal?
00079Ar 3  D0 01        	bne :+
00079Cr 3  60           	rts			; yes.
00079Dr 3               :
00079Dr 3  E6 rr        	inc bufaddr		; next cell.
00079Fr 3  D0 02        	bne :+
0007A1r 3  E6 rr        	inc bufaddr+1
0007A3r 3               :
0007A3r 3  A0 00        	ldy #0
0007A5r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0007A7r 3  C5 rr        	cmp z80_b		; is this fatal?
0007A9r 3  D0 01        	bne :+
0007ABr 3  60           	rts			; yes.
0007ACr 3               :
0007ACr 3  A5 rr        	lda z80_c		; horizontal position.
0007AEr 3  29 07        	and #7			; is it straddling cells?
0007B0r 3  D0 01        	bne :+
0007B2r 3  60           	rts			; no.
0007B3r 3               :
0007B3r 3  E6 rr        	inc bufaddr		; last cell.
0007B5r 3  D0 02        	bne :+
0007B7r 3  E6 rr        	inc bufaddr+1
0007B9r 3               :
0007B9r 3  A0 00        	ldy #0
0007BBr 3  B1 rr        	lda (bufaddr),y		; fetch final type.
0007BDr 3  60           	rts 			; return with final type in accumulator.
0007BEr 3               
0007BEr 3               ;---------------------------------------------------
0007BEr 3               ; Fetch block type at (dispx, dispy).
0007BEr 3               ;
0007BEr 3               ; Output:
0007BEr 3               ;  A = block type
0007BEr 3               ;---------------------------------------------------
0007BEr 3               
0007BEr 3               tstbl:
0007BEr 3  A5 rr        	lda dispy 		; fetch y coord.
0007C0r 3  4A           	lsr a			; bufaddr = y/8
0007C1r 3  4A           	lsr a
0007C2r 3  4A           	lsr a
0007C3r 3               ;	sta chary
0007C3r 3               
0007C3r 3  85 rr        	sta bufaddr
0007C5r 3  A9 00        	lda #0
0007C7r 3  85 rr        	sta bufaddr+1
0007C9r 3               
0007C9r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0007CBr 3  26 rr        	rol bufaddr+1
0007CDr 3  06 rr        	asl bufaddr
0007CFr 3  26 rr        	rol bufaddr+1
0007D1r 3  06 rr        	asl bufaddr
0007D3r 3  26 rr        	rol bufaddr+1
0007D5r 3  06 rr        	asl bufaddr
0007D7r 3  26 rr        	rol bufaddr+1
0007D9r 3  06 rr        	asl bufaddr
0007DBr 3  26 rr        	rol bufaddr+1
0007DDr 3               
0007DDr 3  A5 rr        	lda dispx		; x/8
0007DFr 3  4A           	lsr a
0007E0r 3  4A           	lsr a
0007E1r 3  4A           	lsr a
0007E2r 3               ;	sta charx
0007E2r 3               
0007E2r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0007E3r 3  65 rr        	adc bufaddr
0007E5r 3  69 00        	adc #<MAP
0007E7r 3  85 rr        	sta bufaddr
0007E9r 3  A5 rr        	lda bufaddr+1
0007EBr 3  69 04        	adc #>MAP
0007EDr 3  85 rr        	sta bufaddr+1
0007EFr 3               
0007EFr 3  A0 00        	ldy #0
0007F1r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0007F3r 3  60           	rts
0007F4r 3               
0007F4r 3               ;-------------------------------------------------------------------
0007F4r 3               ; Jump - if we can.
0007F4r 3               ; Requires initial speed to be set up in accumulator prior to call.
0007F4r 3               ;
0007F4r 3               ; Input:
0007F4r 3               ;  IX = sprite address
0007F4r 3               ;-------------------------------------------------------------------
0007F4r 3               
0007F4r 3               jump:
0007F4r 3  A0 0D        	ldy #var_jumpLo
0007F6r 3  B1 rr        	lda (z80_ix),y		; jump table low.
0007F8r 3  A0 0E        	ldy #var_jumpHi
0007FAr 3  11 rr        	ora (z80_ix),y		; jump table high.
0007FCr 3  F0 01        	beq :+
0007FEr 3  60           	rts			; already in the air.
0007FFr 3               :
0007FFr 3  A9 rr        	lda #>jtab
000801r 3  A0 0E        	ldy #var_jumpHi
000803r 3  91 rr        	sta (z80_ix),y		; set jump high.
000805r 3  A9 rr        	lda #<jtab		; jump table start.
000807r 3  A0 0D        	ldy #var_jumpLo
000809r 3  91 rr        	sta (z80_ix),y		; set jump low.
00080Br 3  60           	rts
00080Cr 3               
00080Cr 3               ; Jump table.
00080Cr 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
00080Cr 3               ;.align 32
00080Cr 3               ;jtab:
00080Cr 3               ;	.byte 248,250,252
00080Cr 3               ;	.byte 254,254,255
00080Cr 3               ;	.byte 255,255,0,0
00080Cr 3               ;	.byte 0,1,1,1,2,2
00080Cr 3               ;	.byte 4,6,8,8,8,99
00080Cr 3               
00080Cr 3               ;------------------------------------------------
00080Cr 3               ; Random numbers code.
00080Cr 3               ; Pseudo-random number generator, 8-bit.
00080Cr 3               ;
00080Cr 3               ; Output:
00080Cr 3               ;  RND = random number
00080Cr 3               ;------------------------------------------------
00080Cr 3               
00080Cr 3               random:
00080Cr 3  A5 rr        	lda seed
00080Er 3  F0 05        	beq doEor
000810r 3  0A           	asl a
000811r 3  F0 04        	beq noEor
000813r 3  90 02        	bcc noEor
000815r 3  49 1D        doEor:	eor #$1d
000817r 3  85 rr        noEor:	sta seed
000819r 3  60           	rts
00081Ar 3               
00081Ar 3               ;	lda seed		; get last random number.
00081Ar 3               ;	asl a
00081Ar 3               ;	asl a
00081Ar 3               ;	clc
00081Ar 3               ;	adc seed
00081Ar 3               ;	clc
00081Ar 3               ;	adc #$45
00081Ar 3               ;	sta seed		; store new seed.
00081Ar 3               ;	sta varrnd		; return number in variable.
00081Ar 3               ;	rts
00081Ar 3               
00081Ar 3               ;-------------------------------------------------------
00081Ar 3               ; Joystick and keyboard reading routines.
00081Ar 3               ;
00081Ar 3               ; contrl = 0, Keyboard
00081Ar 3               ;          1, JoyKeyb
00081Ar 3               ;          2, JoyMMC
00081Ar 3               ;
00081Ar 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
00081Ar 3               ;             ||||||||
00081Ar 3               ;             |||||||+> Right    KEY 0  - X
00081Ar 3               ;             ||||||+-> Left     KEY 1  - Z
00081Ar 3               ;             |||||+--> Down     KEY 2  - .
00081Ar 3               ;             ||||+---> Up       KEY 3  - ;
00081Ar 3               ;             |||+----> Fire1    KEY 4  - SPC
00081Ar 3               ;             ||+-----> Fire2    KEY 5  - Q
00081Ar 3               ;             |+------> Fire3    KEY 6  - P
00081Ar 3               ;             +-------> Not used
00081Ar 3               ;
00081Ar 3               ;                       Option1  KEY 7  - 1
00081Ar 3               ;                       Option2  KEY 8  - 2
00081Ar 3               ;                       Option3  KEY 9  - 3
00081Ar 3               ;                       Option4  KEY 10 - 4
00081Ar 3               ;-------------------------------------------------------
00081Ar 3               
00081Ar 3               joykey:
00081Ar 3  A5 rr        	lda contrl 		; control flag.
00081Cr 3  C9 01        	cmp #1
00081Er 3  F0 1A        	beq joy1 		; scan joystick1
000820r 3  C9 02        	cmp #2
000822r 3  F0 1C        	beq joy2 		; scan joystick2
000824r 3               
000824r 3               ; Scan keyboard
000824r 3               
000824r 3  A9 00        	lda #0		 	; zero reading.
000826r 3  85 rr        	sta z80_e
000828r 3               
000828r 3  A0 06        	ldy #6	 		; address of last key.
00082Ar 3               joyke0:
00082Ar 3  B9 rr rr     	lda keys,y 		; get key from table.
00082Dr 3  20 rr rr     	jsr ktest		; being pressed?
000830r 3  26 rr        	rol z80_e 		; rotate into reading.
000832r 3               
000832r 3  88           	dey		 	; next key.
000833r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000835r 3               joyret:
000835r 3  A5 rr        	lda z80_e
000837r 3  85 rr        	sta joyval
000839r 3  60           	rts
00083Ar 3               
00083Ar 3               ; Scan joystick 1
00083Ar 3               
00083Ar 3               joy1:
00083Ar 3  20 rr rr     	jsr joy1scan
00083Dr 3  4C rr rr     	jmp joyret 		; store the value.
000840r 3               
000840r 3               ; Scan joystick 2
000840r 3               
000840r 3               joy2:
000840r 3  20 rr rr     	jsr joy2scan
000843r 3  4C rr rr     	jmp joyret 		; store the value.
000846r 3               
000846r 3               ;---------------------------------------------------------------
000846r 3               ; Display message.
000846r 3               ;
000846r 3               ; Input:
000846r 3               ;  A = message number
000846r 3               ;---------------------------------------------------------------
000846r 3               
000846r 3               dmsg:
000846r 3  AA           	tax
000847r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000849r 3  85 rr        	sta z80_l
00084Br 3  A9 rr        	lda #>msgdat
00084Dr 3  85 rr        	sta z80_h
00084Fr 3  20 rr rr     	jsr getwrd		; get message number.
000852r 3               dmsg3:
000852r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000855r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000858r 3  A5 rr        	lda prtmod		; print mode.
00085Ar 3  D0 47        	bne bmsg1		; no, double-height text.
00085Cr 3               dmsg0:
00085Cr 3  A5 rr        	lda z80_h		; store string pointer.
00085Er 3  48           	pha
00085Fr 3  A5 rr        	lda z80_l
000861r 3  48           	pha
000862r 3               
000862r 3  A0 00        	ldy #0
000864r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000866r 3  29 7F        	and #127		; remove any end marker.
000868r 3  C9 0D        	cmp #ASCII_NEWLINE
00086Ar 3  F0 24        	beq dmsg1
00086Cr 3  20 rr rr     	jsr pchar		; display character.
00086Fr 3  20 rr rr     	jsr nexpos 		; display position.
000872r 3  D0 03        	bne dmsg2		; not on a new line.
000874r 3  20 rr rr     	jsr nexlin		; next line down.
000877r 3               dmsg2:
000877r 3  68           	pla			; retrieve string pointer
000878r 3  85 rr        	sta z80_l
00087Ar 3  68           	pla
00087Br 3  85 rr        	sta z80_h
00087Dr 3               
00087Dr 3  A0 00        	ldy #0
00087Fr 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000881r 3  0A           	asl a  			; was it the end?
000882r 3  90 03        	bcc :+
000884r 3  4C rr rr     	jmp dscor2		; yes, job done.
000887r 3               :
000887r 3  E6 rr        	inc z80_l		; next character to display.
000889r 3  D0 02        	bne :+
00088Br 3  E6 rr        	inc z80_h
00088Dr 3               :
00088Dr 3  4C rr rr     	jmp dmsg0
000890r 3               dmsg1:
000890r 3  E6 rr        	inc dispy
000892r 3  A5 rr        	lda dispy
000894r 3  C9 18        	cmp #24
000896r 3  90 04        	bcc dmsg4
000898r 3  A9 00        	lda #0
00089Ar 3  85 rr        	sta dispy
00089Cr 3               dmsg4:
00089Cr 3  A9 00        	lda #0
00089Er 3  85 rr        	sta dispx
0008A0r 3  4C rr rr     	jmp dmsg2
0008A3r 3               
0008A3r 3               
0008A3r 3               ;----------------------------------------------------------
0008A3r 3               ; Display message in big text.
0008A3r 3               ;
0008A3r 3               ; Input:
0008A3r 3               ;  HL = string pointer
0008A3r 3               ;----------------------------------------------------------
0008A3r 3               
0008A3r 3               bmsg1:
0008A3r 3  A0 00        	ldy #0
0008A5r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
0008A7r 3  29 7F        	and #127		; only want 7 bits.
0008A9r 3  C9 0D        	cmp #ASCII_NEWLINE
0008ABr 3  F0 13        	beq bmsg2
0008ADr 3  20 rr rr     	jsr bchar 		; display big char.
0008B0r 3               bmsg3:
0008B0r 3  A0 00        	ldy #0
0008B2r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
0008B4r 3  48           	pha
0008B5r 3  E6 rr        	inc z80_l 		; next character in list.
0008B7r 3  D0 02        	bne :+
0008B9r 3  E6 rr        	inc z80_h
0008BBr 3               :
0008BBr 3  68           	pla
0008BCr 3  0A           	asl a  			; was terminator flag set?
0008BDr 3  90 E4        	bcc bmsg1		; no, keep going.
0008BFr 3               
0008BFr 3  60           	rts
0008C0r 3               bmsg2:
0008C0r 3  A9 00        	lda #0
0008C2r 3  85 rr        	sta dispx
0008C4r 3  E6 rr        	inc dispy
0008C6r 3  E6 rr        	inc dispy
0008C8r 3  A5 rr        	lda dispy
0008CAr 3  C9 17        	cmp #23
0008CCr 3  90 E2        	bcc bmsg3
0008CEr 3  A9 00        	lda #0
0008D0r 3  85 rr        	sta dispy
0008D2r 3  4C rr rr     	jmp bmsg3
0008D5r 3               
0008D5r 3               ;----------------------------------------------------------
0008D5r 3               ; Big character display.
0008D5r 3               ;
0008D5r 3               ; Input:
0008D5r 3               ;  A = character
0008D5r 3               ;----------------------------------------------------------
0008D5r 3               
0008D5r 3               bchar:
0008D5r 3  85 rr        	sta z80_e		; save char in lb
0008D7r 3  A9 00        	lda #0
0008D9r 3  85 rr        	sta z80_d		; reset hb
0008DBr 3               
0008DBr 3  06 rr        	asl z80_e 		; multiply char by 8.
0008DDr 3  26 rr        	rol z80_d
0008DFr 3  06 rr        	asl z80_e
0008E1r 3  26 rr        	rol z80_d
0008E3r 3  06 rr        	asl z80_e
0008E5r 3  26 rr        	rol z80_d		; de = a*8
0008E7r 3               
0008E7r 3  18           	clc			; de = #<(FONT-256) + a*8
0008E8r 3  A5 rr        	lda z80_e
0008EAr 3  69 rr        	adc #<(FONT-256) 		; address of font.
0008ECr 3  85 rr        	sta z80_e
0008EEr 3  A5 rr        	lda z80_d
0008F0r 3  69 rr        	adc #>(FONT-256)
0008F2r 3  85 rr        	sta z80_d
0008F4r 3               
0008F4r 3  20 rr rr     	jsr gaadd		; set colour attribute
0008F7r 3  AD rr rr     	lda fontcol
0008FAr 3  A0 00        	ldy #0
0008FCr 3  91 rr        	sta (bufaddr),y
0008FEr 3               
0008FEr 3  20 rr rr     	jsr gprad 		; get screen address.
000901r 3               
000901r 3  A2 00        	ldx #0			; height of character in font.
000903r 3               bchar0:
000903r 3  A0 00        	ldy #0
000905r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000907r 3               
000907r 3               .if iflag
000907r 3               	eor #$ff
000907r 3               .endif
000907r 3               
000907r 3  91 rr        	sta (scraddr),y
000909r 3  48           	pha
00090Ar 3  20 rr rr     	jsr nline 		; next line down.
00090Dr 3  68           	pla
00090Er 3  91 rr        	sta (scraddr),y
000910r 3  20 rr rr     	jsr nline 		; next line down.
000913r 3               
000913r 3  18           	clc
000914r 3  E6 rr        	inc z80_e 		; next line of font.
000916r 3  D0 02        	bne :+
000918r 3  E6 rr        	inc z80_d
00091Ar 3               :
00091Ar 3  E8           	inx
00091Br 3  E0 08        	cpx #8
00091Dr 3  D0 E4        	bne bchar0
00091Fr 3               
00091Fr 3  20 rr rr     	jsr nexpos		; display position.
000922r 3  D0 05        	bne bchar2 		; not on a new line.
000924r 3               bchar3:
000924r 3  E6 rr        	inc dispy
000926r 3  20 rr rr     	jsr nexlin 		; next line check.
000929r 3               bchar2:
000929r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
00092Cr 3               
00092Cr 3               
00092Cr 3               ;-------------------------------------------------
00092Cr 3               ; Display a character.
00092Cr 3               ;
00092Cr 3               ; Input:
00092Cr 3               ;  A = character
00092Cr 3               ;-------------------------------------------------
00092Cr 3               
00092Cr 3               achar:
00092Cr 3  85 rr        	sta z80_b 		; copy to b.
00092Er 3  20 rr rr     	jsr preprt 		; get ready to print.
000931r 3  A5 rr        	lda z80_b		; character in accumulator.
000933r 3  A6 rr        	ldx prtmod 		; print mode.
000935r 3  F0 03        	beq :+
000937r 3  4C rr rr     	jmp bchar 		; no, double-height text.
00093Ar 3               :
00093Ar 3  20 rr rr     	jsr pchar 		; display character.
00093Dr 3  20 rr rr     	jsr nexpos 		; display position.
000940r 3  F0 E2        	beq bchar3		; next line down.
000942r 3  4C rr rr     	jmp bchar2 		; tidy up.
000945r 3               
000945r 3               
000945r 3               ;-------------------------------------------------
000945r 3               ; Get next print column position.
000945r 3               ;-------------------------------------------------
000945r 3               
000945r 3               nexpos:
000945r 3  E6 rr        	inc dispx		; move along one position.
000947r 3  A5 rr        	lda dispx 		; get coordinate.
000949r 3  C9 16        	cmp #22
00094Br 3  D0 0E        	bne :+
00094Dr 3  A9 00        	lda #0
00094Fr 3  85 rr        	sta dispx
000951r 3  A5 rr        	lda prtmod
000953r 3  F0 06        	beq :+
000955r 3  20 rr rr     	jsr nexlin
000958r 3  4C rr rr     	jmp nexlin
00095Br 3               :
00095Br 3  60           	rts
00095Cr 3               
00095Cr 3               ;-------------------------------------------------
00095Cr 3               ; Get next print line position.
00095Cr 3               ;-------------------------------------------------
00095Cr 3               
00095Cr 3               nexlin:
00095Cr 3  E6 rr        	inc dispy 		; newline.
00095Er 3  A5 rr        	lda dispy		; vertical position.
000960r 3  C9 16        	cmp #22			; past screen edge?
000962r 3  B0 01        	bcs :+
000964r 3  60           	rts			; no, still okay.
000965r 3               :
000965r 3  A9 00        	lda #0			; restart at top.
000967r 3  85 rr        	sta dispy
000969r 3  60           	rts
00096Ar 3               
00096Ar 3               ;--------------------------------------------------------
00096Ar 3               ; Pre-print preliminaries.
00096Ar 3               ;--------------------------------------------------------
00096Ar 3               
00096Ar 3               preprt:
00096Ar 3  A9 rr        	lda #<(FONT-256)		; font pointer.
00096Cr 3  8D rr rr     	sta grbase		; set up graphics base.
00096Fr 3  A9 rr        	lda #>(FONT-256)
000971r 3  8D rr rr     	sta grbase+1
000974r 3               prescr:
000974r 3  A5 rr        	lda charx 		; display coordinates.
000976r 3  85 rr        	sta dispx		; set up general coordinates.
000978r 3  A5 rr        	lda chary
00097Ar 3  85 rr        	sta dispy
00097Cr 3  60           	rts
00097Dr 3               
00097Dr 3               ;--------------------------------------------------------------
00097Dr 3               ; Get messagenr x in hl
00097Dr 3               ;
00097Dr 3               ; Input:
00097Dr 3               ;  HL = pointer to message list
00097Dr 3               ;  X  = message number.
00097Dr 3               ;--------------------------------------------------------------
00097Dr 3               
00097Dr 3               getwrd:
00097Dr 3  E0 00        	cpx #0
00097Fr 3  D0 01        	bne:+ 			; first word in list?
000981r 3  60           	rts 			; yep, don't search.
000982r 3               :
000982r 3  A0 00        	ldy #0
000984r 3               getwd0:
000984r 3  B1 rr        	lda (z80_hl),y
000986r 3  48           	pha
000987r 3  E6 rr        	inc z80_l
000989r 3  D0 02        	bne :+
00098Br 3  E6 rr        	inc z80_h
00098Dr 3               :
00098Dr 3  68           	pla
00098Er 3  C9 80        	cmp #128		; found end?
000990r 3  30 F2        	bmi getwd0		; no, carry on.
000992r 3  CA           	dex			; until we have right number.
000993r 3  D0 EF        	bne getwd0
000995r 3  60           	rts
000996r 3               
000996r 3               ;-----------------------------------------------------------
000996r 3               ; Bubble sort.
000996r 3               ;-----------------------------------------------------------
000996r 3               
000996r 3               bsort:
000996r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000998r 3  85 rr        	sta qscnt
00099Ar 3               
00099Ar 3  A9 rr        	lda #<sprtab 		; sprite table.
00099Cr 3  85 rr        	sta z80_x
00099Er 3  A9 rr        	lda #>sprtab
0009A0r 3  85 rr        	sta z80_i
0009A2r 3               bsort0:
0009A2r 3  A0 00        	ldy #0
0009A4r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
0009A6r 3  C9 FF        	cmp #255 		; is it switched off?
0009A8r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
0009AAr 3               
0009AAr 3  A0 12        	ldy #TABSIZ
0009ACr 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
0009AEr 3  C9 FF        	cmp #255 		; is it enabled?
0009B0r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
0009B2r 3               
0009B2r 3  A0 15        	ldy #TABSIZ+3
0009B4r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0009B6r 3  A0 03        	ldy #3
0009B8r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
0009BAr 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0009BCr 3               bsort2:
0009BCr 3  18           	clc
0009BDr 3  A5 rr        	lda z80_x
0009BFr 3  69 12        	adc #TABSIZ 		; distance to next odd/even entry.
0009C1r 3  85 rr        	sta z80_x
0009C3r 3  90 02        	bcc :+
0009C5r 3  E6 rr        	inc z80_i
0009C7r 3               :
0009C7r 3  C6 rr        	dec qscnt
0009C9r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0009CBr 3  60           	rts
0009CCr 3               
0009CCr 3               bsort1:
0009CCr 3  A0 12        	ldy #TABSIZ
0009CEr 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
0009D0r 3  C9 FF        	cmp #255		; is it enabled?
0009D2r 3  F0 E8        	beq bsort2		; no, nothing to swap.
0009D4r 3  20 rr rr     	jsr swspr		; swap positions.
0009D7r 3  4C rr rr     	jmp bsort2
0009DAr 3               swemp:
0009DAr 3  A0 12        	ldy #TABSIZ
0009DCr 3  B1 rr        	lda (z80_ix),y		; next table entry.
0009DEr 3  C9 FF        	cmp #255		; is that one on?
0009E0r 3  F0 DA        	beq bsort2		; no, nothing to swap.
0009E2r 3  20 rr rr     	jsr swspr		; swap positions.
0009E5r 3  4C rr rr     	jmp bsort2
0009E8r 3               
0009E8r 3               ; Swap sprites.
0009E8r 3               
0009E8r 3               swspr:
0009E8r 3  A5 rr        	lda z80_x		; table address
0009EAr 3  85 rr        	sta z80_e		; copy to de pair.
0009ECr 3  85 rr        	sta z80_l		; copy to hl pair.
0009EEr 3  A5 rr        	lda z80_i
0009F0r 3  85 rr        	sta z80_h
0009F2r 3  85 rr        	sta z80_d
0009F4r 3               
0009F4r 3  18           	clc
0009F5r 3  A5 rr        	lda z80_l
0009F7r 3  69 12        	adc #TABSIZ		; distance to second entry.
0009F9r 3  85 rr        	sta z80_l
0009FBr 3  90 02        	bcc :+
0009FDr 3  E6 rr        	inc z80_h
0009FFr 3               :
0009FFr 3  A9 12        	lda #TABSIZ		; bytes to swap.
000A01r 3  85 rr        	sta z80_b
000A03r 3  A0 00        	ldy #0
000A05r 3               swspr0:
000A05r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000A07r 3  48           	pha
000A08r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000A0Ar 3  91 rr        	sta (z80_hl),y 		; copy to second.
000A0Cr 3  68           	pla
000A0Dr 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000A0Fr 3               
000A0Fr 3  E6 rr        	inc z80_e 		; next byte.
000A11r 3  D0 02        	bne :+
000A13r 3  E6 rr        	inc z80_d
000A15r 3               :
000A15r 3  E6 rr        	inc z80_l 		; next byte.
000A17r 3  D0 02        	bne :+
000A19r 3  E6 rr        	inc z80_h
000A1Br 3               :
000A1Br 3  C6 rr        	dec z80_b
000A1Dr 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000A1Fr 3  60           	rts
000A20r 3               
000A20r 3               ;----------------------------------------------------
000A20r 3               ; Process sprites.
000A20r 3               ;----------------------------------------------------
000A20r 3               
000A20r 3               pspr:
000A20r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000A22r 3  85 rr        	sta sprptr
000A24r 3               
000A24r 3  A9 rr        	lda #<sprtab 		; sprite table.
000A26r 3  85 rr        	sta z80_x
000A28r 3  A9 rr        	lda #>sprtab
000A2Ar 3  85 rr        	sta z80_i
000A2Cr 3               pspr1:
000A2Cr 3  A0 00        	ldy #0
000A2Er 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000A30r 3  C9 09        	cmp #9 			; within range of sprite types?
000A32r 3  B0 03        	bcs :+
000A34r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000A37r 3               :
000A37r 3  18           	clc
000A38r 3  A5 rr        	lda z80_x
000A3Ar 3  69 12        	adc #TABSIZ 		; distance to next odd/even entry.
000A3Cr 3  85 rr        	sta z80_x
000A3Er 3  90 02        	bcc :+
000A40r 3  E6 rr        	inc z80_i		; next sprite.
000A42r 3               :
000A42r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000A44r 3  D0 E6        	bne pspr1
000A46r 3  60           	rts
000A47r 3               
000A47r 3               pspr2:
000A47r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000A49r 3  85 rr        	sta ogptr
000A4Br 3  A5 rr        	lda z80_i
000A4Dr 3  85 rr        	sta ogptr+1
000A4Fr 3  20 rr rr     	jsr pspr3		; do the routine.
000A52r 3               rtorg:
000A52r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000A54r 3  85 rr        	sta z80_x
000A56r 3  A5 rr        	lda ogptr+1
000A58r 3  85 rr        	sta z80_i
000A5Ar 3               rtorg0:
000A5Ar 3  60           	rts
000A5Br 3               
000A5Br 3               pspr3:
000A5Br 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000A5Dr 3  85 rr        	sta z80_l
000A5Fr 3  A9 rr        	lda #>evtyp0
000A61r 3  85 rr        	sta z80_h
000A63r 3               pspr4:
000A63r 3  B1 rr        	lda (z80_ix),y
000A65r 3  0A           	asl a			; double accumulator.
000A66r 3  18           	clc
000A67r 3  65 rr        	adc z80_l
000A69r 3  85 rr        	sta z80_l
000A6Br 3  90 02        	bcc :+
000A6Dr 3  E6 rr        	inc z80_h
000A6Fr 3               :
000A6Fr 3  B1 rr        	lda (z80_hl),y
000A71r 3  85 rr        	sta z80_e 		; copy to de.
000A73r 3  48           	pha
000A74r 3               
000A74r 3  E6 rr        	inc z80_l 		; next byte of address.
000A76r 3  D0 02        	bne :+
000A78r 3  E6 rr        	inc z80_h
000A7Ar 3               :
000A7Ar 3  B1 rr        	lda (z80_hl),y 		; address high.
000A7Cr 3  85 rr        	sta z80_d
000A7Er 3               
000A7Er 3  48           	pha	 		; swap address into hl.
000A7Fr 3  A5 rr        	lda z80_h
000A81r 3  85 rr        	sta z80_d
000A83r 3  68           	pla
000A84r 3  85 rr        	sta z80_h
000A86r 3  68           	pla
000A87r 3  85 rr        	sta z80_l
000A89r 3  A5 rr        	lda z80_l
000A8Br 3  85 rr        	sta z80_e
000A8Dr 3               
000A8Dr 3  6C rr rr     	jmp (z80_hl) 		; go there.
000A90r 3               
000A90r 3               ; Address of each sprite type's routine.
000A90r 3               
000A90r 3  rr rr        evtyp0:	.word evnt00
000A92r 3  rr rr        evtyp1:	.word evnt01
000A94r 3  rr rr        evtyp2:	.word evnt02
000A96r 3  rr rr        evtyp3:	.word evnt03
000A98r 3  rr rr        evtyp4:	.word evnt04
000A9Ar 3  rr rr        evtyp5:	.word evnt05
000A9Cr 3  rr rr        evtyp6:	.word evnt06
000A9Er 3  rr rr        evtyp7:	.word evnt07
000AA0r 3  rr rr        evtyp8:	.word evnt08
000AA2r 3               
000AA2r 3               ;--------------------------------------------------------------
000AA2r 3               ; Display sprites.
000AA2r 3               ;
000AA2r 3               ; Input:
000AA2r 3               ;  IX = sprite table
000AA2r 3               ;--------------------------------------------------------------
000AA2r 3               
000AA2r 3               dspr:
000AA2r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000AA4r 3  85 rr        	sta sprcnt
000AA6r 3               
000AA6r 3               dspr0:
000AA6r 3  A0 00        	ldy #var_Type
000AA8r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000AAAr 3  C9 FF        	cmp #255 		; is it enabled?
000AACr 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000AAEr 3               dspr5:
000AAEr 3  A0 05        	ldy #var_newType
000AB0r 3  B1 rr        	lda (z80_ix),y 		; new type.
000AB2r 3  C9 FF        	cmp #255		; is it enabled?
000AB4r 3  F0 03        	beq dspr2
000AB6r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000AB9r 3               dspr2:
000AB9r 3  A0 05        	ldy #var_newType
000ABBr 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000ABDr 3  A0 00        	ldy #var_Type
000ABFr 3  91 rr        	sta (z80_ix),y
000AC1r 3  A0 06        	ldy #var_newImage
000AC3r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000AC5r 3  A0 01        	ldy #var_Image
000AC7r 3  91 rr        	sta (z80_ix),y
000AC9r 3  A0 07        	ldy #var_newFrame
000ACBr 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000ACDr 3  A0 02        	ldy #var_Frame
000ACFr 3  91 rr        	sta (z80_ix),y
000AD1r 3  A0 08        	ldy #var_newY
000AD3r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000AD5r 3  A0 03        	ldy #var_Y
000AD7r 3  91 rr        	sta (z80_ix),y
000AD9r 3  A0 09        	ldy #var_newX
000ADBr 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000ADDr 3  A0 04        	ldy #var_X
000ADFr 3  91 rr        	sta (z80_ix),y
000AE1r 3               
000AE1r 3  18           	clc
000AE2r 3  A5 rr        	lda z80_x
000AE4r 3  69 24        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000AE6r 3  85 rr        	sta z80_x
000AE8r 3  A5 rr        	lda z80_i
000AEAr 3  69 00        	adc #0
000AECr 3  85 rr        	sta z80_i 		; next sprite.
000AEEr 3  C6 rr        	dec sprcnt
000AF0r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000AF2r 3  60           	rts
000AF3r 3               
000AF3r 3               dspr1:
000AF3r 3               	; _BEEB clipping code copied from CPC Engine
000AF3r 3  A0 03        	ldy #var_Y
000AF5r 3  B1 rr        	lda (z80_ix), y		; old x coord
000AF7r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000AF9r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000AFBr 3               
000AFBr 3  A0 05        	ldy #var_newType
000AFDr 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000AFFr 3  C9 FF        	cmp #255		; is this enabled?
000B01r 3  D0 06        	bne dspr4 		; yes, display both.
000B03r 3               
000B03r 3               dspr6:
000B03r 3  20 rr rr     	jsr sspria 		; show single sprite.
000B06r 3  4C rr rr     	jmp dspr2
000B09r 3               
000B09r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000B09r 3               
000B09r 3               dspr4:
000B09r 3               	; _BEEB clipping code copied from CPC Engine
000B09r 3  A0 08        	ldy #var_newY
000B0Br 3  B1 rr        	lda (z80_ix), y		; old x coord
000B0Dr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B0Fr 3  B0 F2        	bcs dspr6		; yes, don't display it.
000B11r 3               
000B11r 3  A0 04        	ldy #var_X
000B13r 3  B1 rr        	lda (z80_ix),y		; old x.
000B15r 3  A0 09        	ldy #var_newX
000B17r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000B19r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000B1Br 3               
000B1Br 3  A0 03        	ldy #var_Y
000B1Dr 3  B1 rr        	lda (z80_ix),y		; old y.
000B1Fr 3  A0 08        	ldy #var_newY
000B21r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B23r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000B25r 3               
000B25r 3  A0 02        	ldy #var_Frame
000B27r 3  B1 rr        	lda (z80_ix),y 		; old frame.
000B29r 3  A0 07        	ldy #var_newFrame
000B2Br 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B2Dr 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000B2Fr 3               
000B2Fr 3  A0 01        	ldy #var_Image
000B31r 3  B1 rr        	lda (z80_ix),y 		; old image.
000B33r 3  A0 06        	ldy #var_newImage
000B35r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B37r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000B39r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000B3Cr 3               dspr7:
000B3Cr 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000B3Fr 3  4C rr rr     	jmp dspr2
000B42r 3               dspr3:
000B42r 3               	; _BEEB clipping code copied from CPC Engine
000B42r 3  A0 08        	ldy #var_newY
000B44r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B46r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B48r 3  90 03        	bcc :+			; no, continue
000B4Ar 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000B4Dr 3               :
000B4Dr 3  20 rr rr     	jsr ssprib 		; show single sprite.
000B50r 3  4C rr rr     	jmp dspr2
000B53r 3               
000B53r 3               ;-----------------------------------------
000B53r 3               ; Get sprite address calculations.
000B53r 3               ; gspran = new sprite, gsprad = old sprite.
000B53r 3               ;
000B53r 3               ; Input:
000B53r 3               ;  IX = sprite address
000B53r 3               ;-----------------------------------------
000B53r 3               
000B53r 3               gspran:
000B53r 3  A0 08        	ldy #var_newY
000B55r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000B57r 3  85 rr        	sta dispy
000B59r 3  A0 09        	ldy #var_newX
000B5Br 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000B5Dr 3  85 rr        	sta dispx
000B5Fr 3  A0 06        	ldy #var_newImage
000B61r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000B63r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000B66r 3               
000B66r 3  A0 00        	ldy #0
000B68r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B6Ar 3  A0 07        	ldy #var_newFrame
000B6Cr 3  18           	clc
000B6Dr 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000B6Fr 3  4C rr rr     	jmp gspra0
000B72r 3               
000B72r 3               ;-----------------------------------------
000B72r 3               ; Calculate old sprite address
000B72r 3               ;
000B72r 3               ; Input:
000B72r 3               ;  IX = sprite address
000B72r 3               ;
000B72r 3               ; Output:
000B72r 3               ;  B  = right byte mask
000B72r 3               ;  C  = left byte mask
000B72r 3               ;  DE = spriteframe address
000B72r 3               ;  scraddr = screenaddress(dispx,dispy)
000B72r 3               ;-----------------------------------------
000B72r 3               
000B72r 3               gsprad:
000B72r 3  A0 03        	ldy #var_Y
000B74r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B76r 3  85 rr        	sta dispy
000B78r 3  A0 04        	ldy #var_X
000B7Ar 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B7Cr 3  85 rr        	sta dispx
000B7Er 3  A0 01        	ldy #var_Image
000B80r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000B82r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000B85r 3               
000B85r 3  A0 00        	ldy #0
000B87r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B89r 3  A0 02        	ldy #var_Frame
000B8Br 3  18           	clc
000B8Cr 3  71 rr        	adc (z80_ix),y 		; add frame number.
000B8Er 3               
000B8Er 3               gspra0:
000B8Er 3               .if rflag
000B8Er 3               	sta z80_e		; multiply by 32.
000B8Er 3               	lda #0
000B8Er 3               	sta z80_d
000B8Er 3               
000B8Er 3               	asl z80_e
000B8Er 3               	rol z80_d
000B8Er 3               	asl z80_e
000B8Er 3               	rol z80_d
000B8Er 3               	asl z80_e
000B8Er 3               	rol z80_d
000B8Er 3               	asl z80_e
000B8Er 3               	rol z80_d
000B8Er 3               .if bflag
000B8Er 3               	lda z80_e		; multiply by 48
000B8Er 3               	sta tmp1
000B8Er 3               	lda z80_d
000B8Er 3               	sta tmp2
000B8Er 3               .endif
000B8Er 3               	asl z80_e
000B8Er 3               	rol z80_d
000B8Er 3               .if bflag
000B8Er 3               	clc
000B8Er 3               	lda z80_e
000B8Er 3               	adc tmp1
000B8Er 3               	sta z80_e
000B8Er 3               	lda z80_d
000B8Er 3               	adc tmp2
000B8Er 3               	sta z80_d
000B8Er 3               .endif
000B8Er 3               .else
000B8Er 3  4A           	lsr a	  		; multiply by 128.
000B8Fr 3  85 rr        	sta z80_d 		; store in d.
000B91r 3  85 rr        	sta tmp1
000B93r 3  A9 00        	lda #0
000B95r 3  6A           	ror a
000B96r 3  85 rr        	sta z80_e 		; got low byte.
000B98r 3  85 rr        	sta tmp2
000B9Ar 3               .if bflag
000B9Ar 3               	lsr tmp1		; multiply by 192
000B9Ar 3               	ror tmp2
000B9Ar 3               	clc
000B9Ar 3               	lda tmp2
000B9Ar 3               	adc z80_e
000B9Ar 3               	sta z80_e
000B9Ar 3               	lda tmp1
000B9Ar 3               	adc z80_d
000B9Ar 3               	sta z80_d
000B9Ar 3               .endif
000B9Ar 3               .endif
000B9Ar 3  18           	clc 			; address of play sprites.
000B9Br 3  A5 rr        	lda z80_e
000B9Dr 3  69 rr        	adc #<sprgfx
000B9Fr 3  85 rr        	sta z80_e
000BA1r 3  A5 rr        	lda z80_d
000BA3r 3  69 rr        	adc #>sprgfx
000BA5r 3  85 rr        	sta z80_d
000BA7r 3               
000BA7r 3  A5 rr        	lda dispx 		; y coordinate.
000BA9r 3  29 06        	and #6 			; position within byte boundary.
000BABr 3  AA           	tax	 		; low byte of table displacement.
000BACr 3               .if rflag
000BACr 3               	stx sprshft
000BACr 3               .else
000BACr 3  0A           	asl a	  		; multiply by 32.
000BADr 3  0A           	asl a  			; already a multiple
000BAEr 3  0A           	asl a  			; of 2, so just 4
000BAFr 3               .if bflag
000BAFr 3               	sta tmp1
000BAFr 3               	asl a  			; shifts needed.
000BAFr 3               	clc
000BAFr 3               	adc tmp1
000BAFr 3               .else
000BAFr 3  0A           	asl a  			; shifts needed.
000BB0r 3               .endif
000BB0r 3  18           	clc 			; add to sprite address.
000BB1r 3  65 rr        	adc z80_e
000BB3r 3  85 rr        	sta z80_e
000BB5r 3  90 02        	bcc :+
000BB7r 3  E6 rr        	inc z80_d
000BB9r 3               :
000BB9r 3               .endif
000BB9r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000BBCr 3  85 rr        	sta z80_c 		; left mask.
000BBEr 3  BD rr rr     	lda spmask+1,x
000BC1r 3  85 rr        	sta z80_b 		; right mask.
000BC3r 3               ; Drop into screen address routine.
000BC3r 3  4C rr rr     	jmp scadd
000BC6r 3               
000BC6r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000BCAr 3  0F F0 03 FC  
000BCEr 3               
000BCEr 3               
000BCEr 3               ;-----------------------------------------------------------
000BCEr 3               ; Animates a sprite.
000BCEr 3               ;
000BCEr 3               ; Input:
000BCEr 3               ;  IX = sprite address
000BCEr 3               ;  HL = last sprite address
000BCEr 3               ;-----------------------------------------------------------
000BCEr 3               
000BCEr 3               animsp:
000BCEr 3  25 rr        	and frmno
000BD0r 3  F0 01        	beq :+
000BD2r 3  60           	rts
000BD3r 3               :
000BD3r 3  A0 06        	ldy #var_newImage
000BD5r 3  B1 rr        	lda (z80_ix),y		; sprite image
000BD7r 3  20 rr rr     	jsr gfrm		; get frame data.
000BDAr 3               
000BDAr 3  E6 rr        	inc z80_l		; point to frames.
000BDCr 3  D0 02        	bne :+
000BDEr 3  E6 rr        	inc z80_h
000BE0r 3               :
000BE0r 3  A0 07        	ldy #var_newFrame
000BE2r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000BE4r 3  18           	clc
000BE5r 3  69 01        	adc #1			; next one along.
000BE7r 3  A0 00        	ldy #0
000BE9r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000BEBr 3  90 02        	bcc anims0		; no, not yet.
000BEDr 3  A9 00        	lda #0			; start at first frame.
000BEFr 3               anims0:
000BEFr 3  A0 07        	ldy #var_newFrame
000BF1r 3  91 rr        	sta (z80_ix),y		; new frame.
000BF3r 3  60           	rts
000BF4r 3               
000BF4r 3               ;--------------------------------------------------------------
000BF4r 3               ; Animate back
000BF4r 3               ;
000BF4r 3               ; Input:
000BF4r 3               ;  IX = sprite address
000BF4r 3               ;  HL = last sprite address
000BF4r 3               ;--------------------------------------------------------------
000BF4r 3               
000BF4r 3               animbk:
000BF4r 3  25 rr        	and frmno
000BF6r 3  F0 01        	beq :+
000BF8r 3  60           	rts
000BF9r 3               :
000BF9r 3  A0 06        	ldy #var_newImage
000BFBr 3  B1 rr        	lda (z80_ix),y		; sprite image.
000BFDr 3  20 rr rr     	jsr gfrm		; get frame data.
000C00r 3               
000C00r 3  E6 rr        	inc z80_l 		; point to frames.
000C02r 3  D0 02        	bne :+
000C04r 3  E6 rr        	inc z80_h
000C06r 3               :
000C06r 3  A0 07        	ldy #var_newFrame
000C08r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000C0Ar 3  F0 03        	beq :+
000C0Cr 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000C0Fr 3               :
000C0Fr 3  A0 00        	ldy #0
000C11r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000C13r 3               rtanb0:
000C13r 3  38           	sec
000C14r 3  E9 01        	sbc #1			; next one along.
000C16r 3  4C rr rr     	jmp anims0		; set new frame.
000C19r 3               
000C19r 3               ;--------------------------------------------------------------
000C19r 3               ; Check for collision with other sprite, strict enforcement.
000C19r 3               ;
000C19r 3               ; Input:
000C19r 3               ;  b		= sprite to test for
000C19r 3               ;  ix		= current sprite pointer
000C19r 3               ;
000C19r 3               ; global:	b
000C19r 3               ; local:	x,y,hl,de,skptr
000C19r 3               ; calls:	-
000C19r 3               ;--------------------------------------------------------------
000C19r 3               
000C19r 3               sktyp:
000C19r 3  A9 rr        	lda #<sprtab				; sprite table.
000C1Br 3  85 rr        	sta z80_l
000C1Dr 3  A9 rr        	lda #>sprtab
000C1Fr 3  85 rr        	sta z80_h
000C21r 3               numsp2:
000C21r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000C23r 3  85 rr        	sta sktptr
000C25r 3               sktyp0:
000C25r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000C27r 3  85 rr        	sta skptr
000C29r 3  A5 rr        	lda z80_h
000C2Br 3  85 rr        	sta skptr+1
000C2Dr 3               
000C2Dr 3  A0 00        	ldy #0
000C2Fr 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000C31r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000C33r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000C35r 3               sktyp1:
000C35r 3  18           	clc
000C36r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000C38r 3  69 12        	adc #TABSIZ				; size of each entry.
000C3Ar 3  85 rr        	sta z80_l
000C3Cr 3  A5 rr        	lda skptr+1
000C3Er 3  69 00        	adc #0
000C40r 3  85 rr        	sta z80_h
000C42r 3  C6 rr        	dec sktptr					; one less iteration.
000C44r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000C46r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000C48r 3  85 rr        	sta z80_l
000C4Ar 3  85 rr        	sta z80_h
000C4Cr 3  85 rr        	sta skptr				; store pointer to sprite.
000C4Er 3  85 rr        	sta skptr+1
000C50r 3               
000C50r 3  18           	clc					; don't return with zero flag set.
000C51r 3  60           	rts 					; didn't find one.
000C52r 3               
000C52r 3               coltyp:
000C52r 3  A0 00        	ldy #0
000C54r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000C56r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000C58r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000C5Ar 3               colty0:
000C5Ar 3  A0 09        	ldy #9					; distance to x position in table.
000C5Cr 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000C5Er 3  85 rr        	sta z80_e
000C60r 3  88           	dey
000C61r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000C63r 3  85 rr        	sta z80_d
000C65r 3               
000C65r 3               ; Drop into collision detection.
000C65r 3               
000C65r 3               colc16:
000C65r 3  A0 09        	ldy #9
000C67r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000C69r 3  38           	sec					; subtract x.
000C6Ar 3  E5 rr        	sbc z80_e
000C6Cr 3  B0 05        	bcs  colc1a 				; result is positive.
000C6Er 3  49 FF        	eor #$ff				; make negative positive.
000C70r 3  18           	clc
000C71r 3  69 01        	adc #1
000C73r 3               colc1a:
000C73r 3  C9 10        	cmp #16 				; within x range?
000C75r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000C77r 3  85 rr        	sta z80_c				; store difference.
000C79r 3               
000C79r 3  A0 08        	ldy #8
000C7Br 3  B1 rr        	lda (z80_ix),y				; y coord.
000C7Dr 3  38           	sec
000C7Er 3  E5 rr        	sbc z80_d				; subtract y.
000C80r 3  B0 05        	bcs colc1b				; result is positive.
000C82r 3  49 FF        	eor #$ff				; make negative positive.
000C84r 3  18           	clc
000C85r 3  69 01        	adc #1
000C87r 3               colc1b:
000C87r 3  C9 10        	cmp #16					; within y range?
000C89r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000C8Br 3  18           	clc					; add x difference.
000C8Cr 3  65 rr        	adc z80_c
000C8Er 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000C90r 3  B0 02        	bcs :+
000C92r 3  38           	sec
000C93r 3  60           	rts 					; carry set if there's a collision.
000C94r 3               :
000C94r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000C97r 3               colty1:
000C97r 3  A5 rr        	lda z80_x  				; compare the two.
000C99r 3  C5 rr        	cmp z80_l
000C9Br 3  D0 09        	bne end_col
000C9Dr 3  A5 rr        	lda z80_i
000C9Fr 3  C5 rr        	cmp z80_h
000CA1r 3  D0 03        	bne end_col
000CA3r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000CA6r 3               end_col:
000CA6r 3  4C rr rr     	jmp colty0
000CA9r 3               
000CA9r 3               ;-----------------------------------------------------------
000CA9r 3               ; Display number, left aligned
000CA9r 3               ;
000CA9r 3               ; Input:
000CA9r 3               ;  a		= number
000CA9r 3               ;
000CA9r 3               ; global:	-
000CA9r 3               ; local:	a,y,bc,hl,displ0
000CA9r 3               ; calls:	num2ch,dmsg3
000CA9r 3               ;-----------------------------------------------------------
000CA9r 3               
000CA9r 3               disply:
000CA9r 3  85 rr        	sta z80_a
000CABr 3  A9 rr        	lda #<displ0				; display workspace.
000CADr 3  85 rr        	sta z80_c
000CAFr 3  A9 rr        	lda #>displ0
000CB1r 3  85 rr        	sta z80_b
000CB3r 3  A5 rr        	lda z80_a
000CB5r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000CB8r 3               displ1:
000CB8r 3  C6 rr        	dec z80_c				; back one character.
000CBAr 3  A5 rr        	lda z80_c
000CBCr 3  C9 FF        	cmp #$ff
000CBEr 3  D0 02        	bne :+
000CC0r 3  C6 rr        	dec z80_b
000CC2r 3               :
000CC2r 3  A0 00        	ldy #0
000CC4r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000CC6r 3  09 80        	ora #128				; insert end marker.
000CC8r 3  91 rr        	sta (z80_bc),y				; new value.
000CCAr 3               
000CCAr 3  A9 rr        	lda #<displ0				; display space.
000CCCr 3  85 rr        	sta z80_l
000CCEr 3  A9 rr        	lda #>displ0
000CD0r 3  85 rr        	sta z80_h
000CD2r 3  4C rr rr     	jmp dmsg3				; display the string.
000CD5r 3               
000CD5r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000CD9r 3               
000CD9r 3               ;----------------------------------------------------------------
000CD9r 3               ; Initialise screen.
000CD9r 3               ;
000CD9r 3               ; global:	roomtb,scno
000CD9r 3               ; local:	-
000CD9r 3               ; calls:	tstcs
000CD9r 3               ;----------------------------------------------------------------
000CD9r 3               
000CD9r 3               initsc:
000CD9r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000CDCr 3  20 rr rr     	jsr tstsc 			; find displacement.
000CDFr 3  C9 FF        	cmp #255 			; is it valid?
000CE1r 3  F0 02        	beq init_end 			; no, it's rubbish.
000CE3r 3  85 rr        	sta scno			; store new room number.
000CE5r 3               init_end:
000CE5r 3  60           	rts
000CE6r 3               
000CE6r 3               ;----------------------------------------------------------------
000CE6r 3               ; Test screen.
000CE6r 3               ;
000CE6r 3               ; global:	-
000CE6r 3               ; local:	x
000CE6r 3               ; calls:	-
000CE6r 3               ;----------------------------------------------------------------
000CE6r 3               
000CE6r 3               tstsc:
000CE6r 3  85 rr        	sta tmproom
000CE8r 3  18           	clc
000CE9r 3  69 01        	adc #MAPWID 			; add width in case we"re negative.
000CEBr 3  AA           	tax 				; add displacement to map data.
000CECr 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000CEFr 3  60           	rts
000CF0r 3               
000CF0r 3               ;--------------------------
000CF0r 3               ; Screen left.
000CF0r 3               ;--------------------------
000CF0r 3               
000CF0r 3               scrl:
000CF0r 3  AD rr rr     	lda roomtb 			; present room table pointer.
000CF3r 3  38           	sec
000CF4r 3  E9 01        	sbc #1				; room left.
000CF6r 3               scrl0:
000CF6r 3  20 rr rr     	jsr tstsc			; test screen.
000CF9r 3  C9 FF        	cmp #255			; is there a screen this way?
000CFBr 3  D0 01        	bne :+
000CFDr 3  60           	rts				; no, return to loop.
000CFEr 3               :
000CFEr 3  A5 rr        	lda tmproom			; restore room displacement.
000D00r 3  8D rr rr     	sta roomtb			; new room table position.
000D03r 3               scrl1:
000D03r 3  20 rr rr     	jsr initsc 			; set new screen.
000D06r 3  A9 02        	lda #2
000D08r 3  85 rr        	sta restfl 			; set it.
000D0Ar 3  60           	rts
000D0Br 3               scrr:
000D0Br 3  AD rr rr     	lda roomtb 			; room table pointer.
000D0Er 3  18           	clc
000D0Fr 3  69 01        	adc #1				; room right.
000D11r 3  4C rr rr     	jmp scrl0
000D14r 3               scru:
000D14r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D17r 3  38           	sec
000D18r 3  E9 01        	sbc #MAPWID 			; room up.
000D1Ar 3  4C rr rr     	jmp scrl0
000D1Dr 3               scrd:
000D1Dr 3  AD rr rr     	lda roomtb 			; room table pointer.
000D20r 3  18           	clc
000D21r 3  69 01        	adc #MAPWID 			; room down.
000D23r 3  4C rr rr     	jmp scrl0
000D26r 3               
000D26r 3               ;-----------------------------------------
000D26r 3               ; Jump to new screen.
000D26r 3               ;-----------------------------------------
000D26r 3               
000D26r 3               nwscr:
000D26r 3  A2 00        	ldx #0				; start of map data.
000D28r 3               nwscr0:
000D28r 3  DD rr rr     	cmp mapdat,x
000D2Br 3  F0 06        	beq nwscr1			; have we found a match for screen?
000D2Dr 3  E8           	inx 				; next room.
000D2Er 3  E0 50        	cpx #80				; zero room count, 80 to search.
000D30r 3  D0 F6        	bne nwscr0			; keep looking.
000D32r 3  60           	rts
000D33r 3               nwscr1:
000D33r 3  8E rr rr     	stx roomtb			; set the map position.
000D36r 3  4C rr rr     	jmp scrl1			; draw new room.
000D39r 3               
000D39r 3               
000D39r 3               ;----------------------------------------------------------
000D39r 3               ; Gravity processing.
000D39r 3               ;----------------------------------------------------------
000D39r 3               
000D39r 3               grav:
000D39r 3  A0 0D        	ldy #13
000D3Br 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D3Dr 3  85 rr        	sta z80_l
000D3Fr 3  A0 0E        	ldy #14
000D41r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D43r 3  85 rr        	sta z80_h
000D45r 3  05 rr        	ora z80_l			; merge in low byte.
000D47r 3  D0 01        	bne :+
000D49r 3  60           	rts				; if neither is set, we're not in the air.
000D4Ar 3               :
000D4Ar 3  A0 00        	ldy #0
000D4Cr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000D4Er 3  85 rr        	sta z80_a
000D50r 3  C9 63        	cmp #99				; reached the end?
000D52r 3  D0 0C        	bne grav0			; no, continue.
000D54r 3               grav2:
000D54r 3  C6 rr        	dec z80_l			; go back to previous value.
000D56r 3  C9 FF        	cmp #$ff
000D58r 3  D0 02        	bne :+
000D5Ar 3  C6 rr        	dec z80_h
000D5Cr 3               :
000D5Cr 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000D5Er 3  85 rr        	sta z80_a
000D60r 3               grav0:
000D60r 3  E6 rr        	inc z80_l			; point to next table entry.
000D62r 3  D0 02        	bne :+
000D64r 3  E6 rr        	inc z80_h
000D66r 3               :
000D66r 3  A5 rr        	lda z80_l
000D68r 3  A0 0D        	ldy #13
000D6Ar 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000D6Cr 3  A5 rr        	lda z80_h
000D6Er 3  A0 0E        	ldy #14
000D70r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000D72r 3               grav1:
000D72r 3  A5 rr        	lda z80_a
000D74r 3  D0 01        	bne :+				; any movement required?
000D76r 3  60           	rts				; no, not this time.
000D77r 3               :
000D77r 3  A5 rr        	lda z80_a
000D79r 3  C9 80        	cmp #128			; is it up or down?
000D7Br 3  B0 15        	bcs gravu			; it's up.
000D7Dr 3               gravd:
000D7Dr 3  85 rr        	sta z80_b			; set pixels to move.
000D7Fr 3               gravd0:
000D7Fr 3  20 rr rr     	jsr cangd			; can we go down?
000D82r 3  D0 28        	bne gravst			; can't move down, so stop.
000D84r 3  A0 08        	ldy #8
000D86r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000D88r 3  18           	clc
000D89r 3  69 01        	adc #1
000D8Br 3  91 rr        	sta (z80_ix),y
000D8Dr 3  C6 rr        	dec z80_b
000D8Fr 3  D0 EE        	bne gravd0
000D91r 3  60           	rts
000D92r 3               gravu:
000D92r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000D94r 3  18           	clc
000D95r 3  69 01        	adc #1
000D97r 3  85 rr        	sta z80_b			; set pixels to move.
000D99r 3               gravu0:
000D99r 3  20 rr rr     	jsr cangu			; can we go up?
000D9Cr 3  D0 6E        	bne ifalls			; can't move up, go down next.
000D9Er 3  A0 08        	ldy #8
000DA0r 3  B1 rr        	lda (z80_ix),y
000DA2r 3  38           	sec
000DA3r 3  E9 01        	sbc #1
000DA5r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000DA7r 3  C6 rr        	dec z80_b
000DA9r 3  D0 EE        	bne gravu0
000DABr 3  60           	rts
000DACr 3               gravst:
000DACr 3  A0 0D        	ldy #var_jumpLo
000DAEr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000DB0r 3  85 rr        	sta z80_l
000DB2r 3  A0 0E        	ldy #var_jumpHi
000DB4r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000DB6r 3  85 rr        	sta z80_h
000DB8r 3               
000DB8r 3  A9 00        	lda #0				; null value in pointer.
000DBAr 3  A0 0D        	ldy #var_jumpLo
000DBCr 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000DBEr 3  C8           	iny
000DBFr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000DC1r 3               
000DC1r 3  A0 00        	ldy #0
000DC3r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000DC5r 3  C9 63        	cmp #99				; is it the end marker?
000DC7r 3               evftf:
000DC7r 3  F0 01        	beq :+				; yes, fallen too far.
000DC9r 3  60           	rts
000DCAr 3               :
000DCAr 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000DCDr 3               
000DCDr 3               ;------------------------------------------------
000DCDr 3               ; Initiate fall check.
000DCDr 3               ;------------------------------------------------
000DCDr 3               
000DCDr 3               ifall:
000DCDr 3  A0 0D        	ldy #var_jumpLo
000DCFr 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000DD1r 3  85 rr        	sta z80_l
000DD3r 3  A0 0E        	ldy #var_jumpHi
000DD5r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000DD7r 3  85 rr        	sta z80_h			; high byte in accumulator.
000DD9r 3  05 rr        	ora z80_l			; merge in low byte.
000DDBr 3  F0 01        	beq :+
000DDDr 3  60           	rts				; if either is set, we're already in the air.
000DDEr 3               :
000DDEr 3  A0 09        	ldy #9
000DE0r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000DE2r 3  85 rr        	sta dispx
000DE4r 3  A0 08        	ldy #8
000DE6r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000DE8r 3  18           	clc
000DE9r 3               numsp7:
000DE9r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000DEBr 3  85 rr        	sta dispy			; set up test coordinates.
000DEDr 3  20 rr rr     	jsr tstbl			; get map address.
000DF0r 3  20 rr rr     	jsr plchk			; block, platform check.
000DF3r 3  F0 01        	beq :+
000DF5r 3  60           	rts				; it's solid, don't fall.
000DF6r 3               :
000DF6r 3  E6 rr        	inc bufaddr			; look right one cell.
000DF8r 3  20 rr rr     	jsr plchk			; block, platform check.
000DFBr 3  F0 01        	beq :+
000DFDr 3  60           	rts				; it's solid, don't fall.
000DFEr 3               :
000DFEr 3  A5 rr        	lda dispx			; y coordinate.
000E00r 3  29 07        	and #7				; position straddling block cells.
000E02r 3  F0 08        	beq ifalls			; no more checks needed.
000E04r 3  E6 rr        	inc bufaddr			; look to third cell.
000E06r 3  20 rr rr     	jsr plchk			; block, platform check.
000E09r 3  F0 01        	beq :+
000E0Br 3  60           	rts				; it's solid, don't fall.
000E0Cr 3               :
000E0Cr 3               ifalls:
000E0Cr 3  A9 rr        	lda #<jtab			; jump table start.
000E0Er 3  85 rr        	sta z80_l
000E10r 3  A9 rr        	lda #>jtab
000E12r 3  85 rr        	sta z80_h
000E14r 3               ifal0:
000E14r 3  E6 rr        	inc z80_l			; point to next value.
000E16r 3  D0 02        	bne :+
000E18r 3  E6 rr        	inc z80_h
000E1Ar 3               :
000E1Ar 3  A0 00        	ldy #0
000E1Cr 3  B1 rr        	lda (z80_hl),y			; fetch value.
000E1Er 3  F0 F4        	beq ifal0			; no, get next value.
000E20r 3  C9 63        	cmp #99				; reached end of table?
000E22r 3  D0 01        	bne :+
000E24r 3  60           	rts				; yes, don't fall.
000E25r 3               :
000E25r 3  C9 80        	cmp #128			; is it going up?
000E27r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000E29r 3               
000E29r 3  A0 0D        	ldy #13
000E2Br 3  A5 rr        	lda z80_l
000E2Dr 3  91 rr        	sta (z80_ix),y 			; set jump low.
000E2Fr 3  A0 0E        	ldy #14
000E31r 3  A5 rr        	lda z80_h
000E33r 3  91 rr        	sta (z80_ix),y 			; set jump high.
000E35r 3  60           	rts
000E36r 3               
000E36r 3               
000E36r 3               ;----------------------------------------------------
000E36r 3               ; Get frame data for a particular sprite.
000E36r 3               ; Input:
000E36r 3               ;  a		= framenumer
000E36r 3               ; Output:
000E36r 3               ;  hl		= frame address
000E36r 3               ;
000E36r 3               ; global:	hl,frmptr
000E36r 3               ; local:	-
000E36r 3               ; calls:	-
000E36r 3               ;----------------------------------------------------
000E36r 3               
000E36r 3               gfrm:
000E36r 3  0A           	asl a	 		 	; multiple of 2.
000E37r 3  18           	clc
000E38r 3  6D rr rr     	adc frmptr 			; frames used by game.
000E3Br 3  85 rr        	sta z80_l
000E3Dr 3  AD rr rr     	lda frmptr+1
000E40r 3  69 00        	adc #0
000E42r 3  85 rr        	sta z80_h 			; point to frame start.
000E44r 3  60           	rts
000E45r 3               
000E45r 3               ;----------------------------------------------------
000E45r 3               ; Find sprite list for current room.
000E45r 3               ;
000E45r 3               ; global:	hl
000E45r 3               ; local:	x,y
000E45r 3               ; calls:	-
000E45r 3               ;----------------------------------------------------
000E45r 3               
000E45r 3               sprlst:
000E45r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000E47r 3  85 rr        	sta z80_l
000E49r 3  A9 rr        	lda #>nmedat
000E4Br 3  85 rr        	sta z80_h
000E4Dr 3  A6 rr        	ldx scno 			; screen number.
000E4Fr 3  D0 01        	bne sprls2 			; is it the first screen?
000E51r 3  60           	rts 				; yes, don't need to search data.
000E52r 3               sprls2:
000E52r 3  A0 00        	ldy #0
000E54r 3               sprls1:
000E54r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000E56r 3  C9 FF        	cmp #255			; is it an end marker?
000E58r 3  F0 0E        	beq sprls0 			; yes, end of this room.
000E5Ar 3               
000E5Ar 3  18           	clc 				; point to next sprite in list.
000E5Br 3  A5 rr        	lda z80_l
000E5Dr 3  69 04        	adc #NMESIZ
000E5Fr 3  85 rr        	sta z80_l
000E61r 3  90 02        	bcc :+
000E63r 3  E6 rr        	inc z80_h
000E65r 3               :
000E65r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000E68r 3               sprls0:
000E68r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000E6Ar 3  D0 02        	bne :+
000E6Cr 3  E6 rr        	inc z80_h
000E6Er 3               :
000E6Er 3  CA           	dex
000E6Fr 3  D0 E3        	bne sprls1 			; continue until room found.
000E71r 3  60           	rts
000E72r 3               
000E72r 3               
000E72r 3               ;----------------------------------------------------
000E72r 3               ; Clear all but a single player sprite.
000E72r 3               ;
000E72r 3               ; global:	-
000E72r 3               ; local:	x,y,ix
000E72r 3               ; calls:	-
000E72r 3               ;----------------------------------------------------
000E72r 3               
000E72r 3               nspr:
000E72r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E74r 3  85 rr        	sta sprcnt
000E76r 3  A9 rr        	lda #<sprtab 			; sprite table.
000E78r 3  85 rr        	sta z80_x
000E7Ar 3  A9 rr        	lda #>sprtab
000E7Cr 3  85 rr        	sta z80_i
000E7Er 3               nspr0:
000E7Er 3  A0 00        	ldy #0 				; fetch sprite type.
000E80r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000E82r 3  F0 1A        	beq nspr1 			; yes, keep this one.
000E84r 3               
000E84r 3  A9 FF        	lda #255
000E86r 3  A0 00        	ldy #0 				; fetch sprite type.
000E88r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000E8Ar 3  A0 05        	ldy #5
000E8Cr 3  91 rr        	sta (z80_ix),y 			; remove next type.
000E8Er 3               
000E8Er 3  18           	clc	 			; next sprite.
000E8Fr 3  A5 rr        	lda z80_x
000E91r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000E93r 3  85 rr        	sta z80_x
000E95r 3  90 02        	bcc :+
000E97r 3  E6 rr        	inc z80_i
000E99r 3               :
000E99r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000E9Br 3  D0 E1        	bne nspr0
000E9Dr 3  60           	rts
000E9Er 3               nspr1:
000E9Er 3  A9 FF        	lda #255
000EA0r 3  A0 00        	ldy #0
000EA2r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EA4r 3               
000EA4r 3  18           	clc	 			; point to next sprite.
000EA5r 3  A5 rr        	lda z80_x
000EA7r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000EA9r 3  85 rr        	sta z80_x
000EABr 3  90 02        	bcc :+
000EADr 3  E6 rr        	inc z80_i
000EAFr 3               :
000EAFr 3  C6 rr        	dec sprcnt	 			; one less to do.
000EB1r 3  D0 01        	bne nspr2
000EB3r 3  60           	rts
000EB4r 3               nspr2:
000EB4r 3  A9 FF        	lda #255
000EB6r 3  A0 00        	ldy #0
000EB8r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EBAr 3  A0 05        	ldy #5
000EBCr 3  91 rr        	sta (z80_ix),y 			; remove next type.
000EBEr 3               
000EBEr 3  18           	clc	 			; next sprite.
000EBFr 3  A5 rr        	lda z80_x
000EC1r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000EC3r 3  85 rr        	sta z80_x
000EC5r 3  90 02        	bcc :+
000EC7r 3  E6 rr        	inc z80_i
000EC9r 3               :
000EC9r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000ECBr 3  D0 E7        	bne nspr2
000ECDr 3  60           	rts
000ECEr 3               
000ECEr 3               ;----------------------------------------------------------
000ECEr 3               ; Two initialisation routines.
000ECEr 3               ; Initialise sprites - copy everything from list to table.
000ECEr 3               ;
000ECEr 3               ; global:	-
000ECEr 3               ; local:	x,y,ix
000ECEr 3               ; calls:	cpsp
000ECEr 3               ;----------------------------------------------------------
000ECEr 3               
000ECEr 3               ispr:
000ECEr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000ED0r 3  85 rr        	sta sprcnt
000ED2r 3  A9 rr        	lda #<sprtab			; sprite table.
000ED4r 3  85 rr        	sta z80_x
000ED6r 3  A9 rr        	lda #>sprtab
000ED8r 3  85 rr        	sta z80_i
000EDAr 3               ispr2:
000EDAr 3  A0 00        	ldy #0
000EDCr 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000EDEr 3  C9 FF        	cmp #255 			; is it an end marker?
000EE0r 3  D0 01        	bne :+
000EE2r 3  60           	rts 				; yes, no more to do.
000EE3r 3               :
000EE3r 3               ispr1:
000EE3r 3  A0 00        	ldy #0
000EE5r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000EE7r 3  C9 FF        	cmp #255 			; is it enabled yet?
000EE9r 3  D0 08        	bne ispr4			; yes, try another slot.
000EEBr 3               
000EEBr 3  A0 05        	ldy #5
000EEDr 3  B1 rr        	lda (z80_ix),y		 	; next type.
000EEFr 3  C9 FF        	cmp #255 			; is it enabled yet?
000EF1r 3  F0 10        	beq ispr3 			; no, process this one.
000EF3r 3               ispr4:
000EF3r 3  18           	clc 				; next sprite.
000EF4r 3  A5 rr        	lda z80_x
000EF6r 3  69 12        	adc #TABSIZ		 	; distance to next odd/even entry.
000EF8r 3  85 rr        	sta z80_x
000EFAr 3  90 02        	bcc :+
000EFCr 3  E6 rr        	inc z80_i
000EFEr 3               :
000EFEr 3  C6 rr        	dec sprcnt
000F00r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000F02r 3  60           	rts  				; no more room in table.
000F03r 3               ispr3:
000F03r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000F06r 3  C6 rr        	dec sprcnt			; one less space in the table.
000F08r 3  D0 D0        	bne ispr2
000F0Ar 3  60           	rts
000F0Br 3               
000F0Br 3               
000F0Br 3               ;-----------------------------------------------------------------------
000F0Br 3               ; Initialise sprites - but not player, we're keeping the old one.
000F0Br 3               ;
000F0Br 3               ; global:	-
000F0Br 3               ; local:	x,y,ix
000F0Br 3               ; calls:	cpsp
000F0Br 3               ;-----------------------------------------------------------------------
000F0Br 3               
000F0Br 3               kspr:
000F0Br 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000F0Dr 3  A9 rr        	lda #<sprtab 			; sprite table.
000F0Fr 3  85 rr        	sta z80_x
000F11r 3  A9 rr        	lda #>sprtab
000F13r 3  85 rr        	sta z80_i
000F15r 3               kspr2:
000F15r 3  A0 00        	ldy #0
000F17r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F19r 3  C9 FF        	cmp #255 			; is it an end marker?
000F1Br 3  D0 01        	bne :+
000F1Dr 3  60           	rts 				; yes, no more to do.
000F1Er 3               :
000F1Er 3  C9 00        	cmp #0
000F20r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000F22r 3               
000F22r 3  18           	clc 				; next sprite.
000F23r 3  A5 rr        	lda z80_l
000F25r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000F27r 3  85 rr        	sta z80_l
000F29r 3  90 02        	bcc :+
000F2Br 3  E6 rr        	inc z80_h
000F2Dr 3               :
000F2Dr 3  4C rr rr     	jmp kspr2
000F30r 3               kspr1:
000F30r 3  A0 00        	ldy #0 				; fetch sprite type.
000F32r 3  B1 rr        	lda (z80_ix),y
000F34r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F36r 3  D0 08        	bne kspr4 			; yes, try another slot.
000F38r 3               
000F38r 3  A0 05        	ldy #5 				; next type.
000F3Ar 3  B1 rr        	lda (z80_ix),y
000F3Cr 3  C9 FF        	cmp #255 			; is it enabled yet?
000F3Er 3  F0 0F        	beq kspr3 			; no, process this one.
000F40r 3               kspr4:
000F40r 3  18           	clc 				; next sprite.
000F41r 3  A5 rr        	lda z80_x
000F43r 3  69 12        	adc #TABSIZ		 	; distance to next odd/even entry.
000F45r 3  85 rr        	sta z80_x
000F47r 3  90 02        	bcc :+
000F49r 3  E6 rr        	inc z80_i
000F4Br 3               :
000F4Br 3  CA           	dex	 			; repeat for remaining sprites.
000F4Cr 3  D0 E2        	bne kspr1
000F4Er 3  60           	rts  				; no more room in table.
000F4Fr 3               kspr3:
000F4Fr 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000F52r 3  CA           	dex	 			; one less space in the table.
000F53r 3  D0 C0        	bne kspr2
000F55r 3  60           	rts
000F56r 3               
000F56r 3               ;----------------------------------------------
000F56r 3               ; Copy sprite from list to table.
000F56r 3               ;
000F56r 3               ; global:	hl,ix
000F56r 3               ; local:	y
000F56r 3               ; calls:	evnt09
000F56r 3               ;----------------------------------------------
000F56r 3               
000F56r 3               cpsp:
000F56r 3  A0 00        	ldy #0				; fetch byte from table.
000F58r 3  B1 rr        	lda (z80_hl),y
000F5Ar 3               	; y=var_Type
000F5Ar 3  91 rr        	sta (z80_ix),y			; set up type.
000F5Cr 3  A0 05        	ldy #var_newType
000F5Er 3  91 rr        	sta (z80_ix),y 			; set up type.
000F60r 3               
000F60r 3  E6 rr        	inc z80_l 			; move to next byte.
000F62r 3  D0 02        	bne :+
000F64r 3  E6 rr        	inc z80_h
000F66r 3               :
000F66r 3  A0 00        	ldy #0 				; fetch byte from table.
000F68r 3  B1 rr        	lda (z80_hl),y
000F6Ar 3  A0 06        	ldy #var_newImage
000F6Cr 3  91 rr        	sta (z80_ix),y			; set up image.
000F6Er 3               
000F6Er 3  E6 rr        	inc z80_l 			; move to next byte.
000F70r 3  D0 02        	bne :+
000F72r 3  E6 rr        	inc z80_h
000F74r 3               :
000F74r 3  A0 00        	ldy #0
000F76r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
000F78r 3  A0 08        	ldy #var_newY
000F7Ar 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F7Cr 3               
000F7Cr 3  A9 C8        	lda #200 			; set initial coordinate off screen.
000F7Er 3  A0 03        	ldy #var_Y
000F80r 3  91 rr        	sta (z80_ix),y
000F82r 3               
000F82r 3  E6 rr        	inc z80_l 			; move to next byte.
000F84r 3  D0 02        	bne :+
000F86r 3  E6 rr        	inc z80_h
000F88r 3               :
000F88r 3  A0 00        	ldy #0 				; fetch byte from table.
000F8Ar 3  B1 rr        	lda (z80_hl),y
000F8Cr 3  A0 09        	ldy #var_newX
000F8Er 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000F90r 3               
000F90r 3  E6 rr        	inc z80_l 			; move to next byte.
000F92r 3  D0 02        	bne :+
000F94r 3  E6 rr        	inc z80_h
000F96r 3               :
000F96r 3  A9 00        	lda #0				; zeroes in accumulator.
000F98r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
000F9Ar 3  91 rr        	sta (z80_ix),y
000F9Cr 3  A0 0A        	ldy #var_Direction 		; reset direction.
000F9Er 3  91 rr        	sta (z80_ix),y
000FA0r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
000FA2r 3  91 rr        	sta (z80_ix),y
000FA4r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
000FA6r 3  91 rr        	sta (z80_ix),y
000FA8r 3               
000FA8r 3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
000FAAr 3  A0 10        	ldy #var_dataHi
000FACr 3  91 rr        	sta (z80_ix),y
000FAEr 3               
000FAEr 3  AD rr rr     	lda fontcol			; set background INK
000FB1r 3  A0 11        	ldy #var_colour
000FB3r 3  91 rr        	sta (z80_ix),y
000FB5r 3               
000FB5r 3               evis0:
000FB5r 3  A5 rr        	lda z80_i
000FB7r 3  48           	pha
000FB8r 3  A5 rr        	lda z80_x
000FBAr 3  48           	pha
000FBBr 3  A5 rr        	lda z80_h
000FBDr 3  48           	pha
000FBEr 3  A5 rr        	lda z80_l
000FC0r 3  48           	pha
000FC1r 3               
000FC1r 3  20 rr rr     	jsr evnt09 				; perform event.
000FC4r 3               
000FC4r 3  68           	pla
000FC5r 3  85 rr        	sta z80_l
000FC7r 3  68           	pla
000FC8r 3  85 rr        	sta z80_h
000FCAr 3  68           	pla
000FCBr 3  85 rr        	sta z80_x
000FCDr 3  68           	pla
000FCEr 3  85 rr        	sta z80_i
000FD0r 3               
000FD0r 3  18           	clc
000FD1r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
000FD3r 3  69 12        	adc #TABSIZ		 	; next sprite.
000FD5r 3  85 rr        	sta z80_x
000FD7r 3  90 02        	bcc :+
000FD9r 3  E6 rr        	inc z80_i
000FDBr 3               :
000FDBr 3  60           	rts
000FDCr 3               
000FDCr 3               
000FDCr 3               ;-------------------------------------
000FDCr 3               ; Clear the play area window.
000FDCr 3               ;-------------------------------------
000FDCr 3               
000FDCr 3               clw:
000FDCr 3  AD rr rr     	lda wintop			; get coordinates of window.
000FDFr 3  85 rr        	sta dispy			; put into dispx for calculation.
000FE1r 3  AD rr rr     	lda winlft
000FE4r 3  85 rr        	sta dispx
000FE6r 3               
000FE6r 3  AD rr rr     	lda winhgt			; height of window.
000FE9r 3  85 rr        	sta rrow			; copy to b register.
000FEBr 3               clw3:
000FEBr 3  AD rr rr     	lda winwid 			; width of window.
000FEEr 3  85 rr        	sta rcol
000FF0r 3               clw2:
000FF0r 3  20 rr rr     	jsr gprad 			; get print address.
000FF3r 3  A9 20        	lda #32
000FF5r 3  20 rr rr     	jsr pchar
000FF8r 3  E6 rr        	inc dispx			; next column.
000FFAr 3  C6 rr        	dec rcol			; one less to do.
000FFCr 3  D0 F2        	bne clw2			; repeat for remaining columns.
000FFEr 3               
000FFEr 3  AD rr rr     	lda winlft			; get left edge.
001001r 3  85 rr        	sta dispx 			; reset x.
001003r 3  E6 rr        	inc dispy 			; next line down.
001005r 3               
001005r 3  C6 rr        	dec rrow
001007r 3  D0 E2        	bne clw3			; repeat down the screen.
001009r 3               
001009r 3  AD rr rr     	lda wintop			; get coordinates of window.
00100Cr 3  85 rr        	sta chary			; put into display position.
00100Er 3  AD rr rr     	lda winlft
001011r 3  85 rr        	sta charx
001013r 3  60           	rts
001014r 3               
001014r 3               
001014r 3               ;----------------------------------------------------------
001014r 3               ; Effects code.
001014r 3               ; Ticker routine is called 25 times per second.
001014r 3               ;
001014r 3               ; txtini = text scroller address
001014r 3               ; txtscr = left text screen address
001014r 3               ; txtwid = scroller width
001014r 3               ; txtbit = 128
001014r 3               ; X      = message nr
001014r 3               ;----------------------------------------------------------
001014r 3               
001014r 3               .if sflag
001014r 3               
001014r 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
001014r 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
001014r 3               		.byte $00,$10,$20,$30,$40,$50
001014r 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
001014r 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
001014r 3               		.byte $01,$01,$01,$01,$01,$01
001014r 3               
001014r 3               scrly:
001014r 3               
001014r 3               ; Set scr_l = txtscr
001014r 3               
001014r 3               	rts
001014r 3               	.word txtscr         	; set scr_l = left screen address.
001014r 3               	sta scr_l
001014r 3               	sta scr_r
001014r 3               	lda txtscr+1
001014r 3               	sta scr_l+1
001014r 3               	sta scr_r+1
001014r 3               
001014r 3               	stx xtmp		; save x
001014r 3               
001014r 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
001014r 3               
001014r 3               	ldx txtwid
001014r 3               	dex
001014r 3               	lda scrollpos_lb,x
001014r 3               	clc
001014r 3               	adc scr_r
001014r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
001014r 3               	bcc :+
001014r 3               	inc scr_r+1
001014r 3               :
001014r 3               	clc
001014r 3               	lda scrollpos_hb,x
001014r 3               	adc scr_r+1
001014r 3               	sta scr_r+1
001014r 3               
001014r 3               ; Scroll string
001014r 3               
001014r 3               	lda #0
001014r 3               	sta line_cnt		; Set line counter
001014r 3               scrly1:
001014r 3               	clc
001014r 3               	lda scr_r
001014r 3               	adc line_cnt
001014r 3               	sta scr_tmp
001014r 3               	lda scr_r+1
001014r 3               	sta scr_tmp+1
001014r 3               
001014r 3               	ldx txtwid		; set column counter
001014r 3               	dex
001014r 3               	ldy #0
001014r 3               	clc			; Reset pixel to be shifted in
001014r 3               scrly0:
001014r 3               	lda (scr_tmp),y
001014r 3               	rol a			; Shift screenbyte
001014r 3               	sta (scr_tmp),y		; store screenbyte
001014r 3               	php			; save carry
001014r 3               
001014r 3               	sec			; subtract 16 form screenaddress
001014r 3               	lda scr_tmp
001014r 3               	sbc #$10
001014r 3               	sta scr_tmp
001014r 3               	bcs :+
001014r 3               	dec scr_tmp+1
001014r 3               :
001014r 3               	plp			; restore carry
001014r 3               	dex			; previous column
001014r 3               	bpl scrly0		; repeat for all columns
001014r 3               
001014r 3               	inc line_cnt		; next line
001014r 3               	lda line_cnt
001014r 3               	cmp #8
001014r 3               	bne scrly1		; repeat for 8 lines
001014r 3               
001014r 3               ; Get next character in string
001014r 3               
001014r 3               	lda txtpos 		; get text pointer.
001014r 3               	sta scr_txt
001014r 3               	lda txtpos+1
001014r 3               	sta scr_txt+1
001014r 3               
001014r 3               	ldy #0
001014r 3               	lda (scr_txt),y 	; find character we're displaying.
001014r 3               	and #127 		; remove end marker bit if applicable.
001014r 3               	cmp #13			; is it newline?
001014r 3               	bne scrly5 		; no, it's okay.
001014r 3               	lda #32			; convert to a space instead.
001014r 3               scrly5:
001014r 3               	sta fntaddr		; calculate char address
001014r 3               	lda #0
001014r 3               	sta fntaddr+1
001014r 3               	asl fntaddr  		; multiply char by 8.
001014r 3               	rol fntaddr+1
001014r 3               	asl fntaddr
001014r 3               	rol fntaddr+1
001014r 3               	asl fntaddr
001014r 3               	rol fntaddr+1
001014r 3               	lda fntaddr
001014r 3               	clc
001014r 3               	adc #<(FONT-256)
001014r 3               	sta scrly3+1		; that's the low byte.
001014r 3               	lda fntaddr+1
001014r 3               	adc #>(FONT-256)
001014r 3               	sta scrly3+2		; add displacement.
001014r 3               
001014r 3               	ldy #0
001014r 3               scrly3:
001014r 3               	lda $3333,y		; get image of char line.
001014r 3               	and txtbit
001014r 3               	beq scrly2		; don't plot pixel
001014r 3               	lda (scr_r),y
001014r 3               	clc
001014r 3               	ora #1
001014r 3               	sta (scr_r),y		; plot pixel
001014r 3               scrly2:
001014r 3               	iny			; next line of char.
001014r 3               	cpy #8
001014r 3               	bne scrly3
001014r 3               
001014r 3               	lsr txtbit		; bit of text to display.
001014r 3               	bcs :+
001014r 3               	rts
001014r 3               :
001014r 3               	ldy #0
001014r 3               	lda (scr_txt),y 	; what was the character?
001014r 3               	asl a	  		; end of message?
001014r 3               	bcs scrly4
001014r 3               	inc txtpos
001014r 3               	bne :+
001014r 3               	inc txtpos+1
001014r 3               :
001014r 3               	jmp scrly6 		; not yet - continue.
001014r 3               scrly4:
001014r 3               	lda txtini 		; start of scrolling message.
001014r 3               	sta txtpos
001014r 3               	lda txtini+1
001014r 3               	sta txtpos+1
001014r 3               scrly6:
001014r 3               	lda #128
001014r 3               	sta txtbit
001014r 3               	ldx xtmp
001014r 3               	rts
001014r 3               
001014r 3               tmp_byte:	.byte 0
001014r 3               line_cnt:	.byte 0
001014r 3               
001014r 3               ;-------------------------------------------------------
001014r 3               ; Entry TICKER command
001014r 3               ;
001014r 3               ; Entry:
001014r 3               ;  z80_b = message nr
001014r 3               ;  z80_c = width
001014r 3               ;-------------------------------------------------------
001014r 3               
001014r 3               iscrly:
001014r 3               	jsr prescr 		; set up display position.
001014r 3               	lda #<msgdat 		; text messages.
001014r 3               	sta z80_l
001014r 3               	lda #>msgdat
001014r 3               	sta z80_h
001014r 3               	lda z80_c 		; width.
001014r 3               	sec
001014r 3               	sbc #1			; subtract one.
001014r 3               	cmp #32 		; is it between 1 and 32?
001014r 3               	bcc :+
001014r 3               	lda #$60
001014r 3               	jmp iscrl0		; no, disable messages.
001014r 3               :
001014r 3               	ldx z80_b		; message number.
001014r 3               	jsr getwrd 		; find message start.
001014r 3               
001014r 3               	lda z80_l		; set initial text position.
001014r 3               	sta txtini
001014r 3               	lda z80_h
001014r 3               	sta txtini+1
001014r 3               
001014r 3               	lda #$ad		; code for lda adrr
001014r 3               iscrl0:
001014r 3               	sta scrly		; enable/disable scrolling routine.
001014r 3               
001014r 3               	jsr prescr 		; set up display position.
001014r 3               	jsr gprad 		; get print address.
001014r 3               
001014r 3               	lda scraddr 		; set text screen address.
001014r 3               	sta txtscr
001014r 3               	lda scraddr+1
001014r 3               	sta txtscr+1
001014r 3               
001014r 3               	lda z80_c		; width.
001014r 3               	sta txtwid		; set width in working storage.
001014r 3               
001014r 3               	lda #128 		; start with leftmost bit.
001014r 3               	sta txtbit
001014r 3               
001014r 3               	jmp scrly4
001014r 3               .endif
001014r 3               
001014r 3               ;------------------------------------------------------------------
001014r 3               ; Dig routine, conditional assembly depending on dflag
001014r 3               ;------------------------------------------------------------------
001014r 3               .if dflag
001014r 3               dig:
001014r 3               	and #3
001014r 3               	beq digr		; dig right
001014r 3               	cmp #1
001014r 3               	beq digl		; dig left
001014r 3               	cmp #2
001014r 3               	beq digd		; dig down
001014r 3               
001014r 3               ; Dig up.
001014r 3               
001014r 3               digu:				; dig up
001014r 3               	ldy #8
001014r 3               	lda (z80_ix),y
001014r 3               	sec
001014r 3               	sbc #2
001014r 3               	sta dispy		; set y
001014r 3               
001014r 3               	iny
001014r 3               	lda (z80_ix),y
001014r 3               	sta dispx		; set x
001014r 3               	jmp digv
001014r 3               
001014r 3               ; Dig down.
001014r 3               
001014r 3               digd:
001014r 3               	ldy #9
001014r 3               	lda (z80_ix),y
001014r 3               	sta dispx		; set y
001014r 3               
001014r 3               	dey
001014r 3               	clc
001014r 3               	lda (z80_ix),y
001014r 3               	adc #16
001014r 3               	sta dispy		; set y
001014r 3               	jmp digv
001014r 3               
001014r 3               ; Dig left.
001014r 3               
001014r 3               digl:
001014r 3               	ldy #8
001014r 3               	lda (z80_ix),y
001014r 3               	sta dispy		; set y
001014r 3               
001014r 3               	iny
001014r 3               	lda (z80_ix),y
001014r 3               	sec
001014r 3               	sbc #2			; x=x-2
001014r 3               	sta dispx		; set x
001014r 3               	jmp digh
001014r 3               
001014r 3               ; Dig right.
001014r 3               
001014r 3               digr:
001014r 3               	ldy #8
001014r 3               	lda (z80_ix),y
001014r 3               	sta dispy		; set y
001014r 3               
001014r 3               	iny
001014r 3               	lda (z80_ix),y
001014r 3               	clc
001014r 3               	adc #16
001014r 3               	sta dispx		; set x+16
001014r 3               	jmp digh
001014r 3               
001014r 3               ; Vertical digging
001014r 3               
001014r 3               digv:
001014r 3               	jsr tstbl		; check blocktype in MAP
001014r 3               	jsr fdchk		; test if FODDER
001014r 3               
001014r 3               	clc
001014r 3               	lda dispx		; look 1 cell down
001014r 3               	adc #8
001014r 3               	sta dispx
001014r 3               	jsr tstbl		; check blocktype in MAP
001014r 3               	jsr fdchk
001014r 3               	lda dispx
001014r 3               	and #7
001014r 3               	bne :+
001014r 3               	rts
001014r 3               :
001014r 3               	clc
001014r 3               	lda dispx		; look 1 cell down
001014r 3               	adc #8
001014r 3               	sta dispx
001014r 3               	jsr tstbl		; check blocktype in MAP
001014r 3               	jmp fdchk
001014r 3               
001014r 3               ; Horizontal digging
001014r 3               
001014r 3               digh:
001014r 3               	jsr tstbl		; check blocktype in MAP
001014r 3               	jsr fdchk		; test if FODDER
001014r 3               
001014r 3               	clc
001014r 3               	lda dispy		; look 1 cell down
001014r 3               	adc #8
001014r 3               	sta dispy
001014r 3               	jsr tstbl		; check blocktype in MAP
001014r 3               	jsr fdchk
001014r 3               	lda dispy
001014r 3               	and #7
001014r 3               	bne :+
001014r 3               	rts
001014r 3               :
001014r 3               	clc
001014r 3               	lda dispy		; look 1 cell down
001014r 3               	adc #8
001014r 3               	sta dispy
001014r 3               	jsr tstbl		; check blocktype in MAP
001014r 3               	jmp fdchk
001014r 3               
001014r 3               digcnt:	.byte 0
001014r 3               
001014r 3               .endif
001014r 3               
001014r 3               ;------------------------------------------------------------------
001014r 3               ; Sprite table
001014r 3               ;------------------------------------------------------------------
001014r 3               
001014r 3               
001014r 3               ; ix+0  = type.
001014r 3               ; ix+1  = sprite image number.
001014r 3               ; ix+2  = frame.
001014r 3               ; ix+3  = y coord.
001014r 3               ; ix+4  = x coord.
001014r 3               
001014r 3               ; ix+5  = new type.
001014r 3               ; ix+6  = new image number.
001014r 3               ; ix+7  = new frame.
001014r 3               ; ix+8  = new y coord.
001014r 3               ; ix+9  = new x coord.
001014r 3               
001014r 3               ; ix+10 = direction.
001014r 3               ; ix+11 = parameter 1.
001014r 3               ; ix+12 = parameter 2.
001014r 3               ; ix+13 = jump pointer low.
001014r 3               ; ix+14 = jump pointer high.
001014r 3               ; ix+15 = data pointer low.
001014r 3               ; ix+16 = data pointer high.
001014r 3               
001014r 3               ; block NUMSPR * TABSIZ,255
001014r 3               
001014r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001018r 3  FF FF FF FF  
00101Cr 3  FF FF FF FF  
0010ECr 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0010F0r 3  FF FF FF 00  
0010F4r 3  C0 78 00 00  
0010FDr 3  07           roomtb:	.byte 7                      ; start room map offset.
0010FEr 3               
0010FEr 3               setfgcol:
0010FEr 3               setbgcol:
0010FEr 3  60           	rts
0010FFr 3               
0010FFr 3               ; User routine.  Put your own code in here to be called with USER instruction.
0010FFr 3               ; if USER has an argument it will be passed in the accumulator.
0010FFr 3               
0010FFr 3               user:
0010FFr 3               	.include "user.inc"
0010FFr 4  60           	rts
001100r 4               
001100r 3               
001100r 3               ; Everything below here will be generated by the editors.
001100r 3               
001100r 3               
001100r 3  60                   rts
001101r 3               WINDOWTOP = 0
001101r 3               WINDOWLFT = 0
001101r 3               WINDOWHGT = 22
001101r 3               WINDOWWID = 22 ;a
001101r 3               MAPWID = 1
001101r 3  FF                   .byte 255
001102r 3               mapdat:
001102r 3  00                   .byte 0
001103r 3  FF                   .byte 255
001104r 3  00           stmap:  .byte 0
001105r 3               
001105r 3               evnt00:
001105r 3  20 rr rr             jsr ifall	; TABLEFALL
001108r 3  A5 rr                lda joyval	; KEY
00110Ar 3  29 04                and #4
00110Cr 3  F0 03                beq :+
00110Er 3  4C rr rr             jmp a00035
001111r 3               :
001111r 3  20 rr rr             jsr prskey	; WAITKEY
001114r 3  A5 rr        a00035: lda joyval	; KEY
001116r 3  29 01                and #1
001118r 3  F0 03                beq :+
00111Ar 3  4C rr rr             jmp a00097
00111Dr 3               :
00111Dr 3  20 rr rr             jsr cangr	; CANGORIGHT
001120r 3  F0 03                beq :+
001122r 3  4C rr rr             jmp a00097
001125r 3               :
001125r 3  A0 09                ldy #9 		; SPRITERIGHT
001127r 3  B1 rr                lda (z80_ix),y
001129r 3  18                   clc
00112Ar 3  69 02                adc #2
00112Cr 3  91 rr                sta (z80_ix),y
00112Er 3  A5 rr        a00097: lda joyval	; KEY
001130r 3  29 02                and #2
001132r 3  F0 03                beq :+
001134r 3  4C rr rr             jmp a00158
001137r 3               :
001137r 3  20 rr rr             jsr cangl	; CANGOLEFT
00113Ar 3  F0 03                beq :+
00113Cr 3  4C rr rr             jmp a00158
00113Fr 3               :
00113Fr 3  A0 09                ldy #9 		; SPRITELEFT
001141r 3  B1 rr                lda (z80_ix),y
001143r 3  38                   sec
001144r 3  E9 02                sbc #2
001146r 3  91 rr                sta (z80_ix),y
001148r 3  20 rr rr     a00158: jsr cangd	; CANGODOWN
00114Br 3  F0 03                beq :+
00114Dr 3  4C rr rr             jmp a00180
001150r 3               :
001150r 3  4C rr rr             jmp a00193
001153r 3  A9 03        a00180: lda #3
001155r 3  A0 0B                ldy #11
001157r 3  91 rr                sta (z80_ix),y
001159r 3  A0 0B        a00193: ldy #11
00115Br 3  B1 rr                lda (z80_ix),y
00115Dr 3  A0 07                ldy #7
00115Fr 3  91 rr                sta (z80_ix),y
001161r 3  A9 00                lda #0
001163r 3  A0 0B                ldy #11
001165r 3  D1 rr                cmp (z80_ix),y
001167r 3  90 03                bcc *+5
001169r 3  4C rr rr             jmp a00278
00116Cr 3  A9 00                lda #0
00116Er 3  C5 rr                cmp vart
001170r 3  F0 03                beq *+5
001172r 3  4C rr rr             jmp a00278
001175r 3  A0 0B                ldy #11
001177r 3  B1 rr                lda (z80_ix),y
001179r 3  38                   sec
00117Ar 3  E9 01                sbc #1
00117Cr 3  A0 0B                ldy #11
00117Er 3  91 rr                sta (z80_ix),y
001180r 3  20 rr rr     a00278: jsr jump	; TABLEJUMP
001183r 3  A9 05                lda #DEADLY	; DEADLY
001185r 3  85 rr                sta z80_b
001187r 3  20 rr rr             jsr tded
00118Ar 3  C5 rr                cmp z80_b
00118Cr 3  F0 03                beq :+
00118Er 3  4C rr rr             jmp a00325
001191r 3               :
001191r 3  A9 01                lda #1 		; KILL
001193r 3  85 rr                sta deadf
001195r 3  A9 06        a00325: lda #CUSTOM	; CUSTOM
001197r 3  85 rr                sta z80_b
001199r 3  20 rr rr             jsr tded
00119Cr 3  C5 rr                cmp z80_b
00119Er 3  F0 03                beq :+
0011A0r 3  4C rr rr             jmp a00398
0011A3r 3               :
0011A3r 3  A9 01                lda #1
0011A5r 3  85 rr                sta vare
0011A7r 3  A9 00                lda #0
0011A9r 3  C5 rr                cmp vars
0011ABr 3  F0 03                beq *+5
0011ADr 3  4C rr rr             jmp a00390
0011B0r 3  A9 64                lda #100		; BEEP
0011B2r 3  8D rr rr             sta sndtyp
0011B5r 3  A9 01        a00390: lda #1
0011B7r 3  85 rr                sta vars
0011B9r 3  4C rr rr     a00398: jmp grav
0011BCr 3               evnt01:
0011BCr 3  A9 00                lda #0
0011BEr 3  A0 0B                ldy #11
0011C0r 3  D1 rr                cmp (z80_ix),y
0011C2r 3  F0 03                beq *+5
0011C4r 3  4C rr rr             jmp b00128
0011C7r 3  20 rr rr             jsr cangu	; CANGOUP
0011CAr 3  F0 03                beq :+
0011CCr 3  4C rr rr             jmp b00110
0011CFr 3               :
0011CFr 3  A9 00                lda #0
0011D1r 3  A0 08                ldy #8
0011D3r 3  D1 rr                cmp (z80_ix),y
0011D5r 3  90 03                bcc *+5
0011D7r 3  4C rr rr             jmp b00092
0011DAr 3  A0 08                ldy #8 		; SPRITEUP
0011DCr 3  B1 rr                lda (z80_ix),y
0011DEr 3  38                   sec
0011DFr 3  E9 02                sbc #2
0011E1r 3  91 rr                sta (z80_ix),y
0011E3r 3  4C rr rr             jmp b00105
0011E6r 3  A9 01        b00092: lda #1
0011E8r 3  A0 0B                ldy #11
0011EAr 3  91 rr                sta (z80_ix),y
0011ECr 3  4C rr rr     b00105: jmp b00124
0011EFr 3  A9 01        b00110: lda #1
0011F1r 3  A0 0B                ldy #11
0011F3r 3  91 rr                sta (z80_ix),y
0011F5r 3  4C rr rr     b00124: jmp b00189
0011F8r 3  20 rr rr     b00128: jsr cangd	; CANGODOWN
0011FBr 3  F0 03                beq :+
0011FDr 3  4C rr rr             jmp b00175
001200r 3               :
001200r 3  A0 08                ldy #8 		; SPRITEDOWN
001202r 3  B1 rr                lda (z80_ix),y
001204r 3  18                   clc
001205r 3  69 02                adc #2
001207r 3  91 rr                sta (z80_ix),y
001209r 3  4C rr rr             jmp b00189
00120Cr 3  A9 00        b00175: lda #0
00120Er 3  A0 0B                ldy #11
001210r 3  91 rr                sta (z80_ix),y
001212r 3  A9 01        b00189: lda #1
001214r 3  C5 rr                cmp vart
001216r 3  F0 03                beq *+5
001218r 3  4C rr rr             jmp b00318
00121Br 3  A0 0C                ldy #12
00121Dr 3  B1 rr                lda (z80_ix),y
00121Fr 3  18                   clc
001220r 3  69 01                adc #1
001222r 3  A0 0C                ldy #12
001224r 3  91 rr                sta (z80_ix),y
001226r 3  A9 05                lda #5
001228r 3  A0 0C                ldy #12
00122Ar 3  D1 rr                cmp (z80_ix),y
00122Cr 3  90 03                bcc *+5
00122Er 3  4C rr rr             jmp b00268
001231r 3  A9 00                lda #0
001233r 3  A0 0C                ldy #12
001235r 3  91 rr                sta (z80_ix),y
001237r 3  A0 0C        b00268: ldy #12
001239r 3  B1 rr                lda (z80_ix),y
00123Br 3  C9 03                cmp #3
00123Dr 3  90 03                bcc *+5
00123Fr 3  4C rr rr             jmp b00306
001242r 3  A9 00                lda #0		; ANIMATE
001244r 3  20 rr rr             jsr animsp
001247r 3  4C rr rr             jmp b00318
00124Ar 3  A9 00        b00306: lda #0		; ANIMATEBACK
00124Cr 3  20 rr rr             jsr animbk
00124Fr 3  A9 00        b00318: lda #0 	; COLLISION
001251r 3  85 rr                sta z80_b
001253r 3  20 rr rr             jsr sktyp
001256r 3  B0 03                bcs :+
001258r 3  4C rr rr             jmp b00354
00125Br 3               :
00125Br 3  A9 01                lda #1 		; KILL
00125Dr 3  85 rr                sta deadf
00125Fr 3  60           b00354: rts
001260r 3               evnt02:
001260r 3  A9 00                lda #0
001262r 3  A0 0B                ldy #11
001264r 3  D1 rr                cmp (z80_ix),y
001266r 3  F0 03                beq *+5
001268r 3  4C rr rr             jmp c00189
00126Br 3  20 rr rr             jsr cangl	; CANGOLEFT
00126Er 3  F0 03                beq :+
001270r 3  4C rr rr             jmp c00171
001273r 3               :
001273r 3  A0 09                ldy #9 		; SPRITELEFT
001275r 3  B1 rr                lda (z80_ix),y
001277r 3  38                   sec
001278r 3  E9 02                sbc #2
00127Ar 3  91 rr                sta (z80_ix),y
00127Cr 3  A9 10                lda #16
00127Er 3  85 rr                sta z80_c
001280r 3  A0 09                ldy #9
001282r 3  B1 rr                lda (z80_ix),y
001284r 3  38                   sec
001285r 3  E5 rr                sbc z80_c
001287r 3  A0 09                ldy #9
001289r 3  91 rr                sta (z80_ix),y
00128Br 3  20 rr rr             jsr cangd	; CANGODOWN
00128Er 3  F0 03                beq :+
001290r 3  4C rr rr             jmp c00131
001293r 3               :
001293r 3  A9 01                lda #1
001295r 3  A0 0B                ldy #11
001297r 3  91 rr                sta (z80_ix),y
001299r 3  A9 10        c00131: lda #16
00129Br 3  85 rr                sta z80_c
00129Dr 3  A0 09                ldy #9
00129Fr 3  B1 rr                lda (z80_ix),y
0012A1r 3  18                   clc
0012A2r 3  65 rr                adc z80_c
0012A4r 3  A0 09                ldy #9
0012A6r 3  91 rr                sta (z80_ix),y
0012A8r 3  4C rr rr             jmp c00184
0012ABr 3  A9 01        c00171: lda #1
0012ADr 3  A0 0B                ldy #11
0012AFr 3  91 rr                sta (z80_ix),y
0012B1r 3  4C rr rr     c00184: jmp c00350
0012B4r 3  20 rr rr     c00189: jsr cangr	; CANGORIGHT
0012B7r 3  F0 03                beq :+
0012B9r 3  4C rr rr             jmp c00337
0012BCr 3               :
0012BCr 3  A0 09                ldy #9 		; SPRITERIGHT
0012BEr 3  B1 rr                lda (z80_ix),y
0012C0r 3  18                   clc
0012C1r 3  69 02                adc #2
0012C3r 3  91 rr                sta (z80_ix),y
0012C5r 3  A9 10                lda #16
0012C7r 3  85 rr                sta z80_c
0012C9r 3  A0 09                ldy #9
0012CBr 3  B1 rr                lda (z80_ix),y
0012CDr 3  18                   clc
0012CEr 3  65 rr                adc z80_c
0012D0r 3  A0 09                ldy #9
0012D2r 3  91 rr                sta (z80_ix),y
0012D4r 3  20 rr rr             jsr cangd	; CANGODOWN
0012D7r 3  F0 03                beq :+
0012D9r 3  4C rr rr             jmp c00297
0012DCr 3               :
0012DCr 3  A9 00                lda #0
0012DEr 3  A0 0B                ldy #11
0012E0r 3  91 rr                sta (z80_ix),y
0012E2r 3  A9 10        c00297: lda #16
0012E4r 3  85 rr                sta z80_c
0012E6r 3  A0 09                ldy #9
0012E8r 3  B1 rr                lda (z80_ix),y
0012EAr 3  38                   sec
0012EBr 3  E5 rr                sbc z80_c
0012EDr 3  A0 09                ldy #9
0012EFr 3  91 rr                sta (z80_ix),y
0012F1r 3  4C rr rr             jmp c00350
0012F4r 3  A9 00        c00337: lda #0
0012F6r 3  A0 0B                ldy #11
0012F8r 3  91 rr                sta (z80_ix),y
0012FAr 3  A9 00        c00350: lda #0
0012FCr 3  C5 rr                cmp vart
0012FEr 3  F0 03                beq *+5
001300r 3  4C rr rr             jmp c00479
001303r 3  A0 0C                ldy #12
001305r 3  B1 rr                lda (z80_ix),y
001307r 3  18                   clc
001308r 3  69 01                adc #1
00130Ar 3  A0 0C                ldy #12
00130Cr 3  91 rr                sta (z80_ix),y
00130Er 3  A9 05                lda #5
001310r 3  A0 0C                ldy #12
001312r 3  D1 rr                cmp (z80_ix),y
001314r 3  90 03                bcc *+5
001316r 3  4C rr rr             jmp c00429
001319r 3  A9 00                lda #0
00131Br 3  A0 0C                ldy #12
00131Dr 3  91 rr                sta (z80_ix),y
00131Fr 3  A0 0C        c00429: ldy #12
001321r 3  B1 rr                lda (z80_ix),y
001323r 3  C9 03                cmp #3
001325r 3  90 03                bcc *+5
001327r 3  4C rr rr             jmp c00467
00132Ar 3  A9 00                lda #0		; ANIMATE
00132Cr 3  20 rr rr             jsr animsp
00132Fr 3  4C rr rr             jmp c00479
001332r 3  A9 00        c00467: lda #0		; ANIMATEBACK
001334r 3  20 rr rr             jsr animbk
001337r 3  A9 00        c00479: lda #0 	; COLLISION
001339r 3  85 rr                sta z80_b
00133Br 3  20 rr rr             jsr sktyp
00133Er 3  B0 03                bcs :+
001340r 3  4C rr rr             jmp c00515
001343r 3               :
001343r 3  A9 01                lda #1 		; KILL
001345r 3  85 rr                sta deadf
001347r 3  60           c00515: rts
001348r 3               evnt03:
001348r 3  A9 00                lda #0 	; COLLISION
00134Ar 3  85 rr                sta z80_b
00134Cr 3  20 rr rr             jsr sktyp
00134Fr 3  B0 03                bcs :+
001351r 3  4C rr rr             jmp d00037
001354r 3               :
001354r 3  A9 01                lda #1 		; KILL
001356r 3  85 rr                sta deadf
001358r 3  A9 01        d00037: lda #1
00135Ar 3  C5 rr                cmp vart
00135Cr 3  F0 03                beq *+5
00135Er 3  4C rr rr             jmp d00059
001361r 3  60                   rts		; EXIT
001362r 3  A9 00        d00059: lda #0
001364r 3  A0 0B                ldy #11
001366r 3  D1 rr                cmp (z80_ix),y
001368r 3  F0 03                beq *+5
00136Ar 3  4C rr rr             jmp d00246
00136Dr 3  20 rr rr             jsr cangl	; CANGOLEFT
001370r 3  F0 03                beq :+
001372r 3  4C rr rr             jmp d00228
001375r 3               :
001375r 3  A0 09                ldy #9 		; SPRITELEFT
001377r 3  B1 rr                lda (z80_ix),y
001379r 3  38                   sec
00137Ar 3  E9 02                sbc #2
00137Cr 3  91 rr                sta (z80_ix),y
00137Er 3  A9 10                lda #16
001380r 3  85 rr                sta z80_c
001382r 3  A0 09                ldy #9
001384r 3  B1 rr                lda (z80_ix),y
001386r 3  38                   sec
001387r 3  E5 rr                sbc z80_c
001389r 3  A0 09                ldy #9
00138Br 3  91 rr                sta (z80_ix),y
00138Dr 3  20 rr rr             jsr cangd	; CANGODOWN
001390r 3  F0 03                beq :+
001392r 3  4C rr rr             jmp d00188
001395r 3               :
001395r 3  A9 01                lda #1
001397r 3  A0 0B                ldy #11
001399r 3  91 rr                sta (z80_ix),y
00139Br 3  A9 10        d00188: lda #16
00139Dr 3  85 rr                sta z80_c
00139Fr 3  A0 09                ldy #9
0013A1r 3  B1 rr                lda (z80_ix),y
0013A3r 3  18                   clc
0013A4r 3  65 rr                adc z80_c
0013A6r 3  A0 09                ldy #9
0013A8r 3  91 rr                sta (z80_ix),y
0013AAr 3  4C rr rr             jmp d00242
0013ADr 3  A9 01        d00228: lda #1
0013AFr 3  A0 0B                ldy #11
0013B1r 3  91 rr                sta (z80_ix),y
0013B3r 3  4C rr rr     d00242: jmp d00407
0013B6r 3  20 rr rr     d00246: jsr cangr	; CANGORIGHT
0013B9r 3  F0 03                beq :+
0013BBr 3  4C rr rr             jmp d00394
0013BEr 3               :
0013BEr 3  A0 09                ldy #9 		; SPRITERIGHT
0013C0r 3  B1 rr                lda (z80_ix),y
0013C2r 3  18                   clc
0013C3r 3  69 02                adc #2
0013C5r 3  91 rr                sta (z80_ix),y
0013C7r 3  A9 10                lda #16
0013C9r 3  85 rr                sta z80_c
0013CBr 3  A0 09                ldy #9
0013CDr 3  B1 rr                lda (z80_ix),y
0013CFr 3  18                   clc
0013D0r 3  65 rr                adc z80_c
0013D2r 3  A0 09                ldy #9
0013D4r 3  91 rr                sta (z80_ix),y
0013D6r 3  20 rr rr             jsr cangd	; CANGODOWN
0013D9r 3  F0 03                beq :+
0013DBr 3  4C rr rr             jmp d00354
0013DEr 3               :
0013DEr 3  A9 00                lda #0
0013E0r 3  A0 0B                ldy #11
0013E2r 3  91 rr                sta (z80_ix),y
0013E4r 3  A9 10        d00354: lda #16
0013E6r 3  85 rr                sta z80_c
0013E8r 3  A0 09                ldy #9
0013EAr 3  B1 rr                lda (z80_ix),y
0013ECr 3  38                   sec
0013EDr 3  E5 rr                sbc z80_c
0013EFr 3  A0 09                ldy #9
0013F1r 3  91 rr                sta (z80_ix),y
0013F3r 3  4C rr rr             jmp d00407
0013F6r 3  A9 00        d00394: lda #0
0013F8r 3  A0 0B                ldy #11
0013FAr 3  91 rr                sta (z80_ix),y
0013FCr 3  A0 0C        d00407: ldy #12
0013FEr 3  B1 rr                lda (z80_ix),y
001400r 3  18                   clc
001401r 3  69 01                adc #1
001403r 3  A0 0C                ldy #12
001405r 3  91 rr                sta (z80_ix),y
001407r 3  A9 05                lda #5
001409r 3  A0 0C                ldy #12
00140Br 3  D1 rr                cmp (z80_ix),y
00140Dr 3  90 03                bcc *+5
00140Fr 3  4C rr rr             jmp d00469
001412r 3  A9 00                lda #0
001414r 3  A0 0C                ldy #12
001416r 3  91 rr                sta (z80_ix),y
001418r 3  A0 0C        d00469: ldy #12
00141Ar 3  B1 rr                lda (z80_ix),y
00141Cr 3  C9 03                cmp #3
00141Er 3  90 03                bcc *+5
001420r 3  4C rr rr             jmp d00508
001423r 3  A9 00                lda #0		; ANIMATE
001425r 3  20 rr rr             jsr animsp
001428r 3  4C rr rr             jmp d00520
00142Br 3  A9 00        d00508: lda #0		; ANIMATEBACK
00142Dr 3  20 rr rr             jsr animbk
001430r 3  60           d00520: rts
001431r 3               evnt04:
001431r 3  A9 00                lda #0 	; COLLISION
001433r 3  85 rr                sta z80_b
001435r 3  20 rr rr             jsr sktyp
001438r 3  B0 03                bcs :+
00143Ar 3  4C rr rr             jmp e00037
00143Dr 3               :
00143Dr 3  A9 01                lda #1 		; KILL
00143Fr 3  85 rr                sta deadf
001441r 3  A9 00        e00037: lda #0
001443r 3  A0 0B                ldy #11
001445r 3  D1 rr                cmp (z80_ix),y
001447r 3  F0 03                beq *+5
001449r 3  4C rr rr             jmp e00125
00144Cr 3  20 rr rr             jsr cangl	; CANGOLEFT
00144Fr 3  F0 03                beq :+
001451r 3  4C rr rr             jmp e00106
001454r 3               :
001454r 3  A0 09                ldy #9 		; SPRITELEFT
001456r 3  B1 rr                lda (z80_ix),y
001458r 3  38                   sec
001459r 3  E9 02                sbc #2
00145Br 3  91 rr                sta (z80_ix),y
00145Dr 3  4C rr rr             jmp e00120
001460r 3  A9 01        e00106: lda #1
001462r 3  A0 0B                ldy #11
001464r 3  91 rr                sta (z80_ix),y
001466r 3  4C rr rr     e00120: jmp e00186
001469r 3  20 rr rr     e00125: jsr cangr	; CANGORIGHT
00146Cr 3  F0 03                beq :+
00146Er 3  4C rr rr             jmp e00172
001471r 3               :
001471r 3  A0 09                ldy #9 		; SPRITERIGHT
001473r 3  B1 rr                lda (z80_ix),y
001475r 3  18                   clc
001476r 3  69 02                adc #2
001478r 3  91 rr                sta (z80_ix),y
00147Ar 3  4C rr rr             jmp e00186
00147Dr 3  A9 00        e00172: lda #0
00147Fr 3  A0 0B                ldy #11
001481r 3  91 rr                sta (z80_ix),y
001483r 3  A9 00        e00186: lda #0
001485r 3  C5 rr                cmp vart
001487r 3  F0 03                beq *+5
001489r 3  4C rr rr             jmp e00315
00148Cr 3  A0 0C                ldy #12
00148Er 3  B1 rr                lda (z80_ix),y
001490r 3  18                   clc
001491r 3  69 01                adc #1
001493r 3  A0 0C                ldy #12
001495r 3  91 rr                sta (z80_ix),y
001497r 3  A9 05                lda #5
001499r 3  A0 0C                ldy #12
00149Br 3  D1 rr                cmp (z80_ix),y
00149Dr 3  90 03                bcc *+5
00149Fr 3  4C rr rr             jmp e00264
0014A2r 3  A9 00                lda #0
0014A4r 3  A0 0C                ldy #12
0014A6r 3  91 rr                sta (z80_ix),y
0014A8r 3  A0 0C        e00264: ldy #12
0014AAr 3  B1 rr                lda (z80_ix),y
0014ACr 3  C9 03                cmp #3
0014AEr 3  90 03                bcc *+5
0014B0r 3  4C rr rr             jmp e00303
0014B3r 3  A9 00                lda #0		; ANIMATE
0014B5r 3  20 rr rr             jsr animsp
0014B8r 3  4C rr rr             jmp e00315
0014BBr 3  A9 00        e00303: lda #0		; ANIMATEBACK
0014BDr 3  20 rr rr             jsr animbk
0014C0r 3  60           e00315: rts
0014C1r 3               evnt05:
0014C1r 3  A9 00                lda #0 	; COLLISION
0014C3r 3  85 rr                sta z80_b
0014C5r 3  20 rr rr             jsr sktyp
0014C8r 3  B0 03                bcs :+
0014CAr 3  4C rr rr             jmp f00037
0014CDr 3               :
0014CDr 3  A9 01                lda #1 		; KILL
0014CFr 3  85 rr                sta deadf
0014D1r 3  A9 00        f00037: lda #0
0014D3r 3  C5 rr                cmp vart
0014D5r 3  F0 03                beq *+5
0014D7r 3  4C rr rr             jmp f00059
0014DAr 3  60                   rts		; EXIT
0014DBr 3  A9 00        f00059: lda #0
0014DDr 3  A0 0B                ldy #11
0014DFr 3  D1 rr                cmp (z80_ix),y
0014E1r 3  F0 03                beq *+5
0014E3r 3  4C rr rr             jmp f00146
0014E6r 3  20 rr rr             jsr cangd	; CANGODOWN
0014E9r 3  F0 03                beq :+
0014EBr 3  4C rr rr             jmp f00128
0014EEr 3               :
0014EEr 3  A0 08                ldy #8 		; SPRITEDOWN
0014F0r 3  B1 rr                lda (z80_ix),y
0014F2r 3  18                   clc
0014F3r 3  69 02                adc #2
0014F5r 3  91 rr                sta (z80_ix),y
0014F7r 3  4C rr rr             jmp f00142
0014FAr 3  A9 01        f00128: lda #1
0014FCr 3  A0 0B                ldy #11
0014FEr 3  91 rr                sta (z80_ix),y
001500r 3  4C rr rr     f00142: jmp f00206
001503r 3  20 rr rr     f00146: jsr cangu	; CANGOUP
001506r 3  F0 03                beq :+
001508r 3  4C rr rr             jmp f00192
00150Br 3               :
00150Br 3  A0 08                ldy #8 		; SPRITEUP
00150Dr 3  B1 rr                lda (z80_ix),y
00150Fr 3  38                   sec
001510r 3  E9 02                sbc #2
001512r 3  91 rr                sta (z80_ix),y
001514r 3  4C rr rr             jmp f00206
001517r 3  A9 00        f00192: lda #0
001519r 3  A0 0B                ldy #11
00151Br 3  91 rr                sta (z80_ix),y
00151Dr 3  A9 01        f00206: lda #1
00151Fr 3  C5 rr                cmp vart
001521r 3  F0 03                beq *+5
001523r 3  4C rr rr             jmp f00335
001526r 3  A0 0C                ldy #12
001528r 3  B1 rr                lda (z80_ix),y
00152Ar 3  18                   clc
00152Br 3  69 01                adc #1
00152Dr 3  A0 0C                ldy #12
00152Fr 3  91 rr                sta (z80_ix),y
001531r 3  A9 05                lda #5
001533r 3  A0 0C                ldy #12
001535r 3  D1 rr                cmp (z80_ix),y
001537r 3  90 03                bcc *+5
001539r 3  4C rr rr             jmp f00285
00153Cr 3  A9 00                lda #0
00153Er 3  A0 0C                ldy #12
001540r 3  91 rr                sta (z80_ix),y
001542r 3  A0 0C        f00285: ldy #12
001544r 3  B1 rr                lda (z80_ix),y
001546r 3  C9 03                cmp #3
001548r 3  90 03                bcc *+5
00154Ar 3  4C rr rr             jmp f00323
00154Dr 3  A9 00                lda #0		; ANIMATE
00154Fr 3  20 rr rr             jsr animsp
001552r 3  4C rr rr             jmp f00335
001555r 3  A9 00        f00323: lda #0		; ANIMATEBACK
001557r 3  20 rr rr             jsr animbk
00155Ar 3  60           f00335: rts
00155Br 3               evnt06:
00155Br 3  20 rr rr             jsr ifall	; TABLEFALL
00155Er 3  20 rr rr             jsr jump	; TABLEJUMP
001561r 3  A9 00                lda #0
001563r 3  A0 0B                ldy #11
001565r 3  D1 rr                cmp (z80_ix),y
001567r 3  F0 03                beq *+5
001569r 3  4C rr rr             jmp g00104
00156Cr 3  20 rr rr             jsr cangr	; CANGORIGHT
00156Fr 3  F0 03                beq :+
001571r 3  4C rr rr             jmp g00086
001574r 3               :
001574r 3  A0 09                ldy #9 		; SPRITERIGHT
001576r 3  B1 rr                lda (z80_ix),y
001578r 3  18                   clc
001579r 3  69 02                adc #2
00157Br 3  91 rr                sta (z80_ix),y
00157Dr 3  4C rr rr             jmp g00100
001580r 3  A9 01        g00086: lda #1
001582r 3  A0 0B                ldy #11
001584r 3  91 rr                sta (z80_ix),y
001586r 3  4C rr rr     g00100: jmp g00165
001589r 3  20 rr rr     g00104: jsr cangl	; CANGOLEFT
00158Cr 3  F0 03                beq :+
00158Er 3  4C rr rr             jmp g00151
001591r 3               :
001591r 3  A0 09                ldy #9 		; SPRITELEFT
001593r 3  B1 rr                lda (z80_ix),y
001595r 3  38                   sec
001596r 3  E9 02                sbc #2
001598r 3  91 rr                sta (z80_ix),y
00159Ar 3  4C rr rr             jmp g00165
00159Dr 3  A9 00        g00151: lda #0
00159Fr 3  A0 0B                ldy #11
0015A1r 3  91 rr                sta (z80_ix),y
0015A3r 3  4C rr rr     g00165: jmp grav
0015A6r 3               evnt07:
0015A6r 3  60                   rts
0015A7r 3               evnt08:
0015A7r 3  A9 00                lda #0
0015A9r 3  C5 rr                cmp vare
0015ABr 3  F0 03                beq *+5
0015ADr 3  4C rr rr             jmp i00028
0015B0r 3  60                   rts		; EXIT
0015B1r 3  4C rr rr             jmp i00086
0015B4r 3  A9 01        i00028: lda #1
0015B6r 3  A0 07                ldy #7
0015B8r 3  91 rr                sta (z80_ix),y
0015BAr 3  A9 00                lda #0 	; COLLISION
0015BCr 3  85 rr                sta z80_b
0015BEr 3  20 rr rr             jsr sktyp
0015C1r 3  B0 03                bcs :+
0015C3r 3  4C rr rr             jmp i00086
0015C6r 3               :
0015C6r 3  A9 01                lda #1
0015C8r 3  85 rr                sta vara
0015CAr 3  A9 01                lda #1	; NEXTLEVEL
0015CCr 3  85 rr                sta nexlev
0015CEr 3  60           i00086: rts
0015CFr 3               evnt09:
0015CFr 3  A9 00                lda #0
0015D1r 3  A0 05                ldy #5
0015D3r 3  D1 rr                cmp (z80_ix),y
0015D5r 3  F0 03                beq *+5
0015D7r 3  4C rr rr             jmp j00051
0015DAr 3  A9 00                lda #0
0015DCr 3  A0 0B                ldy #11
0015DEr 3  91 rr                sta (z80_ix),y
0015E0r 3  A9 00                lda #0
0015E2r 3  A0 0C                ldy #12
0015E4r 3  91 rr                sta (z80_ix),y
0015E6r 3  60           j00051: rts
0015E7r 3               evnt10:
0015E7r 3  A5 rr                lda vart
0015E9r 3  18                   clc
0015EAr 3  69 01                adc #1
0015ECr 3  85 rr                sta vart
0015EEr 3  A9 01                lda #1
0015F0r 3  C5 rr                cmp vart
0015F2r 3  90 03                bcc *+5
0015F4r 3  4C rr rr             jmp k00042
0015F7r 3  A9 00                lda #0
0015F9r 3  85 rr                sta vart
0015FBr 3  60           k00042: rts
0015FCr 3               evnt11:
0015FCr 3  A9 00                lda #0
0015FEr 3  C5 rr                cmp scno
001600r 3  F0 03                beq *+5
001602r 3  4C rr rr             jmp l00233
001605r 3  A9 01                lda #1
001607r 3  C5 rr                cmp varm
001609r 3  F0 03                beq *+5
00160Br 3  4C rr rr             jmp l00233
00160Er 3  A9 02                lda #2 	; INK
001610r 3  8D rr rr             sta fontcol
001613r 3  A9 02                lda #2		; AT
001615r 3  85 rr                sta chary
001617r 3  A9 07                lda #7
001619r 3  85 rr                sta charx
00161Br 3  A9 01                lda #1		; PRINTMODE
00161Dr 3  85 rr                sta prtmod
00161Fr 3  A9 00                lda #0  	; MESSAGE
001621r 3  20 rr rr             jsr dmsg
001624r 3  A9 00                lda #0 	; INK
001626r 3  8D rr rr             sta fontcol
001629r 3  A9 00                lda #0		; PRINTMODE
00162Br 3  85 rr                sta prtmod
00162Dr 3  A9 05                lda #5		; AT
00162Fr 3  85 rr                sta chary
001631r 3  A9 03                lda #3
001633r 3  85 rr                sta charx
001635r 3  A9 01                lda #1  	; MESSAGE
001637r 3  20 rr rr             jsr dmsg
00163Ar 3  A9 06                lda #6		; AT
00163Cr 3  85 rr                sta chary
00163Er 3  A9 03                lda #3
001640r 3  85 rr                sta charx
001642r 3  A9 02                lda #2  	; MESSAGE
001644r 3  20 rr rr             jsr dmsg
001647r 3  A9 07                lda #7		; AT
001649r 3  85 rr                sta chary
00164Br 3  A9 07                lda #7
00164Dr 3  85 rr                sta charx
00164Fr 3  A9 03                lda #3  	; MESSAGE
001651r 3  20 rr rr             jsr dmsg
001654r 3  A9 08                lda #8		; AT
001656r 3  85 rr                sta chary
001658r 3  A9 02                lda #2
00165Ar 3  85 rr                sta charx
00165Cr 3  A9 04                lda #4  	; MESSAGE
00165Er 3  20 rr rr             jsr dmsg
001661r 3  A9 00                lda #0
001663r 3  85 rr                sta varm
001665r 3  A9 07        l00233: lda #7
001667r 3  C5 rr                cmp scno
001669r 3  F0 03                beq *+5
00166Br 3  4C rr rr             jmp l00273
00166Er 3  A5 rr                lda clock
001670r 3  85 rr                sta vara
001672r 3  A5 rr                lda clock	; BEEP
001674r 3  29 7F                and #127
001676r 3  8D rr rr             sta sndtyp
001679r 3  60           l00273: rts
00167Ar 3               evnt12:
00167Ar 3  A9 01                lda #1 	; PAPER
00167Cr 3  0A                   asl a
00167Dr 3  0A                   asl a
00167Er 3  0A                   asl a
00167Fr 3  0A                   asl a
001680r 3  85 rr                sta tmp
001682r 3  AD 0F 90             lda RegF
001685r 3  29 0F                and #%00001111
001687r 3  05 rr                ora tmp
001689r 3  8D 0F 90             sta RegF
00168Cr 3  A9 00                lda #0 	; INK
00168Er 3  8D rr rr             sta fontcol
001691r 3  20 rr rr             jsr cls		; CLS
001694r 3  A9 05                lda #5		; AT
001696r 3  85 rr                sta chary
001698r 3  A9 06                lda #6
00169Ar 3  85 rr                sta charx
00169Cr 3  A9 01                lda #1		; PRINTMODE
00169Er 3  85 rr                sta prtmod
0016A0r 3  A9 05                lda #5		; PRINT
0016A2r 3  20 rr rr             jsr dmsg
0016A5r 3  A9 00                lda #0		; PRINTMODE
0016A7r 3  85 rr                sta prtmod
0016A9r 3  A9 0A                lda #10		; AT
0016ABr 3  85 rr                sta chary
0016ADr 3  A9 05                lda #5
0016AFr 3  85 rr                sta charx
0016B1r 3  A9 06                lda #6		; PRINT
0016B3r 3  20 rr rr             jsr dmsg
0016B6r 3  A9 0C                lda #12		; AT
0016B8r 3  85 rr                sta chary
0016BAr 3  A9 05                lda #5
0016BCr 3  85 rr                sta charx
0016BEr 3  A9 07                lda #7		; PRINT
0016C0r 3  20 rr rr             jsr dmsg
0016C3r 3               
0016C3r 3               rtcon:			; CONTROLMENU
0016C3r 3  20 rr rr             jsr vsync
0016C6r 3  A9 00                lda #0
0016C8r 3  85 rr                sta contrl
0016CAr 3  AD rr rr             lda keys+7
0016CDr 3  20 rr rr             jsr ktest
0016D0r 3  90 0C                bcc rtcon1
0016D2r 3  A9 01                lda #1
0016D4r 3  85 rr                sta contrl
0016D6r 3  AD rr rr             lda keys+8
0016D9r 3  20 rr rr             jsr ktest
0016DCr 3  B0 E5                bcs rtcon
0016DEr 3                       rtcon1:
0016DEr 3  60                   rts
0016DFr 3               evnt13:
0016DFr 3  A9 01                lda #1
0016E1r 3  85 rr                sta varm
0016E3r 3  A9 63                lda #99
0016E5r 3  85 rr                sta numlif
0016E7r 3  20 rr rr             jsr cls		; CLS
0016EAr 3  60                   rts
0016EBr 3               evnt14:
0016EBr 3  A9 00                lda #0
0016EDr 3  85 rr                sta vara
0016EFr 3  A9 00                lda #0
0016F1r 3  85 rr                sta vare
0016F3r 3  A9 00                lda #0
0016F5r 3  85 rr                sta vars
0016F7r 3  60                   rts
0016F8r 3               evnt15:
0016F8r 3  60                   rts
0016F9r 3               evnt16:
0016F9r 3  A9 7F                lda #127		; BEEP
0016FBr 3  8D rr rr             sta sndtyp
0016FEr 3  60                   rts
0016FFr 3               evnt17:
0016FFr 3  A9 32                lda #50 	; DELAY
001701r 3  20 rr rr             jsr delay
001704r 3  60                   rts
001705r 3               evnt18:
001705r 3  A9 32                lda #50 	; DELAY
001707r 3  20 rr rr             jsr delay
00170Ar 3  60                   rts
00170Br 3               evnt19:
00170Br 3  60                   rts
00170Cr 3               evnt20:
00170Cr 3  60                   rts
00170Dr 3  60           ptcusr: rts
00170Er 3               data_start:
00170Er 3               msgdat:
00170Er 3  44 4F 4F 44          .byte "DOODLEBUG",161
001712r 3  4C 45 42 55  
001716r 3  47 A1        
001718r 3  54 4F 55 43          .byte "TOUCH GREEN TIC",203
00171Cr 3  48 20 47 52  
001720r 3  45 45 4E 20  
001728r 3  47 4F 20 54          .byte "GO TO THE EXIT",174
00172Cr 3  4F 20 54 48  
001730r 3  45 20 45 58  
001737r 3  53 49 4D 50          .byte "SIMPLES",161
00173Br 3  4C 45 53 A1  
00173Fr 3  4B 45 59 53          .byte "KEYS: OP (Z-Pause",169
001743r 3  3A 20 4F 50  
001747r 3  20 28 5A 2D  
001751r 3  44 4F 4F 44          .byte "DOODLEBU",199
001755r 3  4C 45 42 55  
001759r 3  C7           
00175Ar 3  31 20 2D 20          .byte "1 - KEYBOAR",196
00175Er 3  4B 45 59 42  
001762r 3  4F 41 52 C4  
001766r 3  32 20 2D 20          .byte "2 - JOYSTIC",203
00176Ar 3  4A 4F 59 53  
00176Er 3  54 49 43 CB  
001772r 3               nummsg:
001772r 3  08                   .byte 8
001773r 3               chgfx:
001773r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001777r 3  00 00 00 00  
00177Br 3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0
00177Fr 3  FF 00 FF 00  
001783r 3  AA AA AA AA          .byte 170,170,170,170,170,170,170,170
001787r 3  AA AA AA AA  
00178Br 3  AA 2A EA 0A          .byte 170,42,234,10,250,2,254,0
00178Fr 3  FA 02 FE 00  
001793r 3  FF 80 FF E0          .byte 255,128,255,224,255,240,255,252
001797r 3  FF F0 FF FC  
00179Br 3  FF BF BF AF          .byte 255,191,191,175,175,171,171,170
00179Fr 3  AF AB AB AA  
0017A3r 3  00 00 18 FC          .byte 0,0,24,252,252,24,0,0
0017A7r 3  FC 18 00 00  
0017ABr 3  02 02 00 00          .byte 2,2,0,0,2,2,0,0
0017AFr 3  02 02 00 00  
0017B3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0017B7r 3  00 00 00 00  
0017BBr 3  FE 82 AA 96          .byte 254,130,170,150,254,0,0,0
0017BFr 3  FE 00 00 00  
0017C3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0017C7r 3  00 00 00 00  
0017CBr 3  FE 82 FE 00          .byte 254,130,254,0,239,40,239,0
0017CFr 3  EF 28 EF 00  
0017D3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0017D7r 3  00 00 00 00  
0017DBr 3  00 00 01 02          .byte 0,0,1,2,4,136,80,32
0017DFr 3  04 88 50 20  
0017E3r 3  82 64 14 18          .byte 130,100,20,24,36,66,194,0
0017E7r 3  24 42 C2 00  
0017EBr 3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
0017EFr 3  AA 55 AA 55  
0017F3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0017F7r 3  00 00 00 00  
0017FBr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0017FFr 3  00 00 00 00  
001803r 3               bCol:
001803r 3  00                   .byte 0
001804r 3  00                   .byte 0
001805r 3  00                   .byte 0
001806r 3  00                   .byte 0
001807r 3  00                   .byte 0
001808r 3  00                   .byte 0
001809r 3  00                   .byte 0
00180Ar 3  05                   .byte 5
00180Br 3  00                   .byte 0
00180Cr 3  00                   .byte 0
00180Dr 3  00                   .byte 0
00180Er 3  00                   .byte 0
00180Fr 3  00                   .byte 0
001810r 3  05                   .byte 5
001811r 3  00                   .byte 0
001812r 3  00                   .byte 0
001813r 3  02                   .byte 2
001814r 3  05                   .byte 5
001815r 3               bprop:
001815r 3  00                   .byte 0
001816r 3  02                   .byte 2
001817r 3  02                   .byte 2
001818r 3  02                   .byte 2
001819r 3  02                   .byte 2
00181Ar 3  02                   .byte 2
00181Br 3  02                   .byte 2
00181Cr 3  02                   .byte 2
00181Dr 3  00                   .byte 0
00181Er 3  01                   .byte 1
00181Fr 3  01                   .byte 1
001820r 3  02                   .byte 2
001821r 3  02                   .byte 2
001822r 3  06                   .byte 6
001823r 3  05                   .byte 5
001824r 3  00                   .byte 0
001825r 3  00                   .byte 0
001826r 3  00                   .byte 0
001827r 3               sprgfx:
001827r 3  01 80 06 60          .byte 1,128,6,96,24,24,32,4,38,4,79,2,79,2,134,1,128,1,64,2,64,2,32,4,32,4,24,24,6,96,1,128
00182Br 3  18 18 20 04  
00182Fr 3  26 04 4F 02  
001847r 3  00 60 01 98          .byte 0,96,1,152,6,6,8,1,9,129,147,192,147,192,97,128,96,0,144,0,144,0,8,1,8,1,6,6,1,152,0,96
00184Br 3  06 06 08 01  
00184Fr 3  09 81 93 C0  
001867r 3  00 18 00 66          .byte 0,24,0,102,129,129,66,0,66,96,36,240,36,240,24,96,24,0,36,0,36,0,66,0,66,0,129,129,0,102,0,24
00186Br 3  81 81 42 00  
00186Fr 3  42 60 24 F0  
001887r 3  00 06 80 19          .byte 0,6,128,25,96,96,16,128,16,152,9,60,9,60,6,24,6,0,9,0,9,0,16,128,16,128,96,96,128,25,0,6
00188Br 3  60 60 10 80  
00188Fr 3  10 98 09 3C  
0018A7r 3  00 00 07 E0          .byte 0,0,7,224,24,24,32,4,32,4,70,2,79,2,143,1,134,1,128,1,64,2,64,2,64,2,48,12,12,48,3,192
0018ABr 3  18 18 20 04  
0018AFr 3  20 04 46 02  
0018C7r 3  00 00 01 F8          .byte 0,0,1,248,6,6,8,1,8,1,145,128,147,192,99,192,97,128,96,0,144,0,144,0,144,0,12,3,3,12,0,240
0018CBr 3  06 06 08 01  
0018CFr 3  08 01 91 80  
0018E7r 3  00 00 00 7E          .byte 0,0,0,126,129,129,66,0,66,0,36,96,36,240,24,240,24,96,24,0,36,0,36,0,36,0,195,0,0,195,0,60
0018EBr 3  81 81 42 00  
0018EFr 3  42 00 24 60  
001907r 3  00 00 80 1F          .byte 0,0,128,31,96,96,16,128,16,128,9,24,9,60,6,60,6,24,6,0,9,0,9,0,9,0,48,192,192,48,0,15
00190Br 3  60 60 10 80  
00190Fr 3  10 80 09 18  
001927r 3  00 00 00 00          .byte 0,0,0,0,7,224,24,24,32,4,64,2,70,2,143,1,143,1,134,1,128,1,64,2,64,2,32,4,24,24,7,224
00192Br 3  07 E0 18 18  
00192Fr 3  20 04 40 02  
001947r 3  00 00 00 00          .byte 0,0,0,0,1,248,6,6,8,1,144,0,145,128,99,192,99,192,97,128,96,0,144,0,144,0,8,1,6,6,1,248
00194Br 3  01 F8 06 06  
00194Fr 3  08 01 90 00  
001967r 3  00 00 00 00          .byte 0,0,0,0,0,126,129,129,66,0,36,0,36,96,24,240,24,240,24,96,24,0,36,0,36,0,66,0,129,129,0,126
00196Br 3  00 7E 81 81  
00196Fr 3  42 00 24 00  
001987r 3  00 00 00 00          .byte 0,0,0,0,128,31,96,96,16,128,9,0,9,24,6,60,6,60,6,24,6,0,9,0,9,0,16,128,96,96,128,31
00198Br 3  80 1F 60 60  
00198Fr 3  10 80 09 00  
0019A7r 3  00 00 00 00          .byte 0,0,0,0,0,0,7,240,24,12,32,2,64,2,134,1,143,1,143,1,134,1,128,1,64,2,64,2,48,12,15,240
0019ABr 3  00 00 07 F0  
0019AFr 3  18 0C 20 02  
0019C7r 3  00 00 00 00          .byte 0,0,0,0,0,0,1,252,6,3,136,0,144,0,97,128,99,192,99,192,97,128,96,0,144,0,144,0,12,3,3,252
0019CBr 3  00 00 01 FC  
0019CFr 3  06 03 88 00  
0019E7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,127,193,128,34,0,36,0,24,96,24,240,24,240,24,96,24,0,36,0,36,0,195,0,0,255
0019EBr 3  00 00 00 7F  
0019EFr 3  C1 80 22 00  
001A07r 3  00 00 00 00          .byte 0,0,0,0,0,0,192,31,48,96,8,128,9,0,6,24,6,60,6,60,6,24,6,0,9,0,9,0,48,192,192,63
001A0Br 3  00 00 C0 1F  
001A0Fr 3  30 60 08 80  
001A27r 3  07 E0 18 18          .byte 7,224,24,24,32,4,64,2,140,49,158,121,190,125,186,93,154,89,76,50,32,4,88,26,199,227,224,7,232,23,48,12
001A2Br 3  20 04 40 02  
001A2Fr 3  8C 31 9E 79  
001A47r 3  01 F8 06 06          .byte 1,248,6,6,8,1,144,0,99,12,103,158,111,159,110,151,102,150,147,12,8,1,150,6,241,248,248,1,250,5,12,3
001A4Br 3  08 01 90 00  
001A4Fr 3  63 0C 67 9E  
001A67r 3  00 7E 81 81          .byte 0,126,129,129,66,0,36,0,24,195,153,231,219,231,219,165,153,165,36,195,66,0,165,129,60,126,126,0,126,129,195,0
001A6Br 3  42 00 24 00  
001A6Fr 3  18 C3 99 E7  
001A87r 3  80 1F 60 60          .byte 128,31,96,96,16,128,9,0,198,48,230,121,246,249,118,233,102,105,201,48,16,128,105,96,143,31,31,128,95,160,48,192
001A8Br 3  10 80 09 00  
001A8Fr 3  C6 30 E6 79  
001AA7r 3  07 E0 18 18          .byte 7,224,24,24,32,4,64,2,140,49,158,121,190,125,186,93,154,89,76,50,32,4,88,26,71,226,224,7,116,46,56,28
001AABr 3  20 04 40 02  
001AAFr 3  8C 31 9E 79  
001AC7r 3  01 F8 06 06          .byte 1,248,6,6,8,1,144,0,99,12,103,158,111,159,110,151,102,150,147,12,8,1,150,6,145,248,248,1,157,11,14,7
001ACBr 3  08 01 90 00  
001ACFr 3  63 0C 67 9E  
001AE7r 3  00 7E 81 81          .byte 0,126,129,129,66,0,36,0,24,195,153,231,219,231,219,165,153,165,36,195,66,0,165,129,36,126,126,0,231,66,195,129
001AEBr 3  42 00 24 00  
001AEFr 3  18 C3 99 E7  
001B07r 3  80 1F 60 60          .byte 128,31,96,96,16,128,9,0,198,48,230,121,246,249,118,233,102,105,201,48,16,128,105,96,137,31,31,128,185,208,112,224
001B0Br 3  10 80 09 00  
001B0Fr 3  C6 30 E6 79  
001B27r 3  07 E0 18 18          .byte 7,224,24,24,32,4,64,2,140,49,158,121,190,125,186,93,154,89,76,50,32,4,88,26,71,226,112,14,58,92,28,56
001B2Br 3  20 04 40 02  
001B2Fr 3  8C 31 9E 79  
001B47r 3  01 F8 06 06          .byte 1,248,6,6,8,1,144,0,99,12,103,158,111,159,110,151,102,150,147,12,8,1,150,6,145,248,156,3,14,151,7,14
001B4Br 3  08 01 90 00  
001B4Fr 3  63 0C 67 9E  
001B67r 3  00 7E 81 81          .byte 0,126,129,129,66,0,36,0,24,195,153,231,219,231,219,165,153,165,36,195,66,0,165,129,36,126,231,0,195,165,129,195
001B6Br 3  42 00 24 00  
001B6Fr 3  18 C3 99 E7  
001B87r 3  80 1F 60 60          .byte 128,31,96,96,16,128,9,0,198,48,230,121,246,249,118,233,102,105,201,48,16,128,105,96,137,31,57,192,112,233,224,112
001B8Br 3  10 80 09 00  
001B8Fr 3  C6 30 E6 79  
001BA7r 3  07 E0 18 18          .byte 7,224,24,24,32,4,64,2,140,49,158,121,190,125,186,93,154,89,76,50,32,4,88,26,103,230,56,28,29,184,14,112
001BABr 3  20 04 40 02  
001BAFr 3  8C 31 9E 79  
001BC7r 3  01 F8 06 06          .byte 1,248,6,6,8,1,144,0,99,12,103,158,111,159,110,151,102,150,147,12,8,1,150,6,153,249,14,7,7,110,3,156
001BCBr 3  08 01 90 00  
001BCFr 3  63 0C 67 9E  
001BE7r 3  00 7E 81 81          .byte 0,126,129,129,66,0,36,0,24,195,153,231,219,231,219,165,153,165,36,195,66,0,165,129,102,126,195,129,129,219,0,231
001BEBr 3  42 00 24 00  
001BEFr 3  18 C3 99 E7  
001C07r 3  80 1F 60 60          .byte 128,31,96,96,16,128,9,0,198,48,230,121,246,249,118,233,102,105,201,48,16,128,105,96,153,159,112,224,224,118,192,57
001C0Br 3  10 80 09 00  
001C0Fr 3  C6 30 E6 79  
001C27r 3  06 60 19 98          .byte 6,96,25,152,32,4,64,2,64,2,128,1,129,129,66,194,67,194,129,129,128,1,64,2,64,2,32,4,25,152,6,96
001C2Br 3  20 04 40 02  
001C2Fr 3  40 02 80 01  
001C47r 3  01 98 06 66          .byte 1,152,6,102,8,1,144,0,144,0,96,0,96,96,144,176,144,240,96,96,96,0,144,0,144,0,8,1,6,102,1,152
001C4Br 3  08 01 90 00  
001C4Fr 3  90 00 60 00  
001C67r 3  00 66 81 99          .byte 0,102,129,153,66,0,36,0,36,0,24,0,24,24,36,44,36,60,24,24,24,0,36,0,36,0,66,0,129,153,0,102
001C6Br 3  42 00 24 00  
001C6Fr 3  24 00 18 00  
001C87r 3  80 19 60 66          .byte 128,25,96,102,16,128,9,0,9,0,6,0,6,6,9,11,9,15,6,6,6,0,9,0,9,0,16,128,96,102,128,25
001C8Br 3  10 80 09 00  
001C8Fr 3  09 00 06 00  
001CA7r 3  06 60 19 98          .byte 6,96,25,152,32,4,64,2,64,2,129,129,130,193,69,226,71,226,131,193,129,129,64,2,64,2,32,4,25,152,6,96
001CABr 3  20 04 40 02  
001CAFr 3  40 02 81 81  
001CC7r 3  01 98 06 66          .byte 1,152,6,102,8,1,144,0,144,0,96,96,96,176,145,120,145,248,96,240,96,96,144,0,144,0,8,1,6,102,1,152
001CCBr 3  08 01 90 00  
001CCFr 3  90 00 60 60  
001CE7r 3  00 66 81 99          .byte 0,102,129,153,66,0,36,0,36,0,24,24,24,44,36,94,36,126,24,60,24,24,36,0,36,0,66,0,129,153,0,102
001CEBr 3  42 00 24 00  
001CEFr 3  24 00 18 18  
001D07r 3  80 19 60 66          .byte 128,25,96,102,16,128,9,0,9,0,6,6,6,11,137,23,137,31,6,15,6,6,9,0,9,0,16,128,96,102,128,25
001D0Br 3  10 80 09 00  
001D0Fr 3  09 00 06 06  
001D27r 3  06 60 19 98          .byte 6,96,25,152,32,4,64,2,65,130,135,225,132,225,76,242,79,242,135,225,135,225,65,130,64,2,32,4,25,152,6,96
001D2Br 3  20 04 40 02  
001D2Fr 3  41 82 87 E1  
001D47r 3  01 98 06 66          .byte 1,152,6,102,8,1,144,0,144,96,97,248,97,56,147,60,147,252,97,248,97,248,144,96,144,0,8,1,6,102,1,152
001D4Br 3  08 01 90 00  
001D4Fr 3  90 60 61 F8  
001D67r 3  00 66 81 99          .byte 0,102,129,153,66,0,36,0,36,24,24,126,24,78,36,207,36,255,24,126,24,126,36,24,36,0,66,0,129,153,0,102
001D6Br 3  42 00 24 00  
001D6Fr 3  24 18 18 7E  
001D87r 3  80 19 60 66          .byte 128,25,96,102,16,128,9,0,9,6,134,31,134,19,201,51,201,63,134,31,134,31,9,6,9,0,16,128,96,102,128,25
001D8Br 3  10 80 09 00  
001D8Fr 3  09 06 86 1F  
001DA7r 3  06 60 19 98          .byte 6,96,25,152,32,4,67,194,79,242,140,241,152,121,88,122,92,250,159,249,143,241,79,242,67,194,32,4,25,152,6,96
001DABr 3  20 04 43 C2  
001DAFr 3  4F F2 8C F1  
001DC7r 3  01 98 06 66          .byte 1,152,6,102,8,1,144,240,147,252,99,60,102,30,150,30,151,62,103,254,99,252,147,252,144,240,8,1,6,102,1,152
001DCBr 3  08 01 90 F0  
001DCFr 3  93 FC 63 3C  
001DE7r 3  00 66 81 99          .byte 0,102,129,153,66,0,36,60,36,255,24,207,153,135,165,135,165,207,153,255,24,255,36,255,36,60,66,0,129,153,0,102
001DEBr 3  42 00 24 3C  
001DEFr 3  24 FF 18 CF  
001E07r 3  80 19 60 66          .byte 128,25,96,102,16,128,9,15,201,63,198,51,230,97,233,97,233,115,230,127,198,63,201,63,9,15,16,128,96,102,128,25
001E0Br 3  10 80 09 0F  
001E0Fr 3  C9 3F C6 33  
001E27r 3  18 00 7C 00          .byte 24,0,124,0,98,0,209,0,232,128,84,64,42,32,21,16,10,152,5,108,2,194,1,130,0,134,0,78,0,63,0,3
001E2Br 3  62 00 D1 00  
001E2Fr 3  E8 80 54 40  
001E47r 3  06 00 1F 00          .byte 6,0,31,0,24,128,52,64,58,32,21,16,10,136,5,68,2,166,1,91,128,176,128,96,128,33,128,19,192,15,192,0
001E4Br 3  18 80 34 40  
001E4Fr 3  3A 20 15 10  
001E67r 3  01 80 07 C0          .byte 1,128,7,192,6,32,13,16,14,136,5,68,2,162,1,81,128,169,192,86,32,44,32,24,96,8,224,4,240,3,48,0
001E6Br 3  06 20 0D 10  
001E6Fr 3  0E 88 05 44  
001E87r 3  00 60 01 F0          .byte 0,96,1,240,1,136,3,68,3,162,1,81,128,168,64,84,96,42,176,21,8,11,8,6,24,2,56,1,252,0,12,0
001E8Br 3  01 88 03 44  
001E8Fr 3  03 A2 01 51  
001EA7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001EABr 3  00 00 00 00  
001EAFr 3  00 00 00 00  
001EC7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001ECBr 3  00 00 00 00  
001ECFr 3  00 00 00 00  
001EE7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001EEBr 3  00 00 00 00  
001EEFr 3  00 00 00 00  
001F07r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001F0Br 3  00 00 00 00  
001F0Fr 3  00 00 00 00  
001F27r 3  FE C3 F0 E7          .byte 254,195,240,231,252,102,240,60,240,60,240,102,254,231,254,195,0,0,254,255,56,60,56,60,56,60,56,60,56,60,254,60
001F2Br 3  FC 66 F0 3C  
001F2Fr 3  F0 3C F0 66  
001F47r 3  FF B0 FC 39          .byte 255,176,252,57,191,25,60,15,60,15,188,25,255,185,255,176,0,0,255,191,14,15,14,15,14,15,14,15,14,15,63,143
001F4Br 3  BF 19 3C 0F  
001F4Fr 3  3C 0F BC 19  
001F67r 3  3F EC 7F 0E          .byte 63,236,127,14,111,198,207,3,207,3,111,6,127,238,63,236,0,0,255,239,195,131,195,131,195,131,195,131,195,131,207,227
001F6Br 3  6F C6 CF 03  
001F6Fr 3  CF 03 6F 06  
001F87r 3  0F FB 9F C3          .byte 15,251,159,195,155,241,243,192,243,192,155,193,159,251,15,251,0,0,255,251,240,224,240,224,240,224,240,224,240,224,243,248
001F8Br 3  9B F1 F3 C0  
001F8Fr 3  F3 C0 9B C1  
001FA7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001FABr 3  00 00 00 00  
001FAFr 3  00 00 00 00  
001FC7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001FCBr 3  00 00 00 00  
001FCFr 3  00 00 00 00  
001FE7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001FEBr 3  00 00 00 00  
001FEFr 3  00 00 00 00  
002007r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00200Br 3  00 00 00 00  
00200Fr 3  00 00 00 00  
002027r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00202Br 3  00 00 00 00  
00202Fr 3  00 00 00 00  
002047r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00204Br 3  00 00 00 00  
00204Fr 3  00 00 00 00  
002067r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00206Br 3  00 00 00 00  
00206Fr 3  00 00 00 00  
002087r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00208Br 3  00 00 00 00  
00208Fr 3  00 00 00 00  
0020A7r 3               frmlst:
0020A7r 3  00 04                .byte 0,4
0020A9r 3  04 04                .byte 4,4
0020ABr 3  08 04                .byte 8,4
0020ADr 3  0C 01                .byte 12,1
0020AFr 3  0D 02                .byte 13,2
0020B1r 3  0F 02 11 00          .byte 15,2,17,0
0020B5r 3               scdat:
0020B5r 3  CD 00 B2 00          .word 205,178,207,189,244,220,232,282
0020B9r 3  CF 00 BD 00  
0020BDr 3  F4 00 DC 00  
0020C5r 3  00 07 FF 0C          .byte 0,7,255,12,19,5,6,7,255,0,19,2,0,7,255,0,19,2,6,7,0,255,12,17,0,2,0,7,0,12,255,0,15
0020C9r 3  13 05 06 07  
0020CDr 3  FF 00 13 02  
0020E6r 3  0C 00 02 06          .byte 12,0,2,6,7,0,12,255,0,15,12,0,2,0,7,0,12,255,0,15,12,0,2,6,7,0,12,255,0,15,12,0,2
0020EAr 3  07 00 0C FF  
0020EEr 3  00 0F 0C 00  
002107r 3  00 07 00 0C          .byte 0,7,0,12,255,0,15,12,0,2,6,7,0,12,255,0,15,12,0,2,0,7,0,12,255,0,15,12,0,2,6,7,0
00210Br 3  FF 00 0F 0C  
00210Fr 3  00 02 06 07  
002128r 3  0C FF 00 0F          .byte 12,255,0,15,12,0,2,0,7,0,12,255,0,15,12,0,2,6,7,0,12,255,0,15,12,0,2,0,7,0,12,255,0,13
00212Cr 3  0C 00 02 00  
002130r 3  07 00 0C FF  
00214Ar 3  0D 00 0C 00          .byte 13,0,12,0,2,6,7,0,12,255,0,13,17,0,12,0,2,0,7,0,12,255,11,15,12,0,2,6,7,255,0,19,2
00214Er 3  02 06 07 00  
002152r 3  0C FF 00 0D  
00216Br 3  00 07 FF 00          .byte 0,7,255,0,19,2,6,7,255,0,19,2,0,7,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0,14,0
00216Fr 3  13 02 06 07  
002173r 3  FF 00 13 02  
00218Cr 3  02 04 FF 01          .byte 2,4,255,1,20,3
002190r 3  14 03        
002192r 3  00 07 FF 00          .byte 0,7,255,0,19,2,6,7,255,0,19,2,0,7,255,0,8,13,255,0,10,2,6,7,255,0,8,17,255,0,10,2,0
002196r 3  13 02 06 07  
00219Ar 3  FF 00 13 02  
0021B3r 3  07 FF 00 13          .byte 7,255,0,19,2,6,7,255,0,7,255,9,5,255,0,7,2,0,7,255,0,13,9,9,255,0,4,2,6,7,255,0,19
0021B7r 3  02 06 07 FF  
0021BBr 3  00 07 FF 09  
0021D4r 3  02 00 07 FF          .byte 2,0,7,255,0,19,2,6,7,0,9,9,0,0,0,255,11,9,255,0,4,2,0,7,255,0,19,2,6,7,255,0,19
0021D8r 3  00 13 02 06  
0021DCr 3  07 00 09 09  
0021F5r 3  02 00 07 00          .byte 2,0,7,0,9,9,255,0,16,2,6,7,255,0,16,9,9,0,2,0,7,255,0,19,2,6,7,255,11,11,0,0,9,9
0021F9r 3  09 09 FF 00  
0021FDr 3  10 02 06 07  
002217r 3  FF 00 04 02          .byte 255,0,4,2,0,7,255,0,16,9,9,0,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7,255,0,16,9,9,0
00221Br 3  00 07 FF 00  
00221Fr 3  10 09 09 00  
002238r 3  02 00 07 FF          .byte 2,0,7,255,0,19,2,4,255,1,20,3
00223Cr 3  00 13 02 04  
002240r 3  FF 01 14 03  
002244r 3  00 07 FF 0C          .byte 0,7,255,12,19,5,6,7,255,0,19,2,0,7,255,0,19,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7,255,0,19
002248r 3  13 05 06 07  
00224Cr 3  FF 00 13 02  
002267r 3  02 00 07 00          .byte 2,0,7,0,0,0,14,0,0,0,14,255,0,11,2,6,7,255,9,9,11,0,0,11,9,9,9,0,0,0,2,0,7
00226Br 3  00 00 0E 00  
00226Fr 3  00 00 0E FF  
002288r 3  FF 00 06 11          .byte 255,0,6,17,0,0,11,0,0,11,255,0,6,2,6,7,9,9,255,0,4,13,0,0,11,0,0,11,255,0,6,2,0
00228Cr 3  00 00 0B 00  
002290r 3  00 0B FF 00  
0022A9r 3  07 FF 00 09          .byte 7,255,0,9,11,0,0,11,255,0,6,2,6,7,255,0,9,255,11,4,255,0,6,2,0,7,9,9,0,0,0,255,9,8
0022ADr 3  0B 00 00 0B  
0022B1r 3  FF 00 06 02  
0022CBr 3  FF 00 06 02          .byte 255,0,6,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7,9,9,255,0,17,2,0,7,255,0,19,2,6,7,255,0,19
0022CFr 3  06 07 FF 00  
0022D3r 3  13 02 00 07  
0022EEr 3  02 00 07 09          .byte 2,0,7,9,9,255,0,17,2,6,7,255,0,19,2,0,7,255,0,6,14,255,0,4,14,255,0,4,14,14,14,2,4
0022F2r 3  09 FF 00 11  
0022F6r 3  02 06 07 FF  
00230Fr 3  FF 01 14 03          .byte 255,1,20,3
002313r 3  00 07 FF 00          .byte 0,7,255,0,19,2,6,7,255,0,19,2,0,7,0,13,255,0,17,2,6,7,0,17,255,0,17,2,0,7,255,0,19
002317r 3  13 02 06 07  
00231Br 3  FF 00 13 02  
002334r 3  02 06 07 09          .byte 2,6,7,9,9,9,255,0,16,2,0,7,255,0,19,2,6,7,255,9,6,0,0,9,9,0,0,0,9,255,0,5,2
002338r 3  09 09 FF 00  
00233Cr 3  10 02 00 07  
002355r 3  00 07 FF 00          .byte 0,7,255,0,19,2,6,7,255,0,16,9,9,0,2,0,7,255,0,19,2,6,7,255,0,19,2,0,7,255,0,16,9,9
002359r 3  13 02 06 07  
00235Dr 3  FF 00 10 09  
002377r 3  00 02 06 07          .byte 0,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7,255,0,6,11,11,255,0,8,11,11,0,2,0,7,255,0,6
00237Br 3  FF 00 13 02  
00237Fr 3  00 07 FF 00  
002398r 3  0B 0B FF 00          .byte 11,11,255,0,8,11,11,0,2,6,7,0,11,11,255,0,8,11,11,11,255,0,5,2,0,7,0,11,11,255,0,8,11,11,11
00239Cr 3  08 0B 0B 00  
0023A0r 3  02 06 07 00  
0023BBr 3  FF 00 05 02          .byte 255,0,5,2,6,7,255,0,19,2,0,7,255,14,19,2,4,255,1,20,3
0023BFr 3  06 07 FF 00  
0023C3r 3  13 02 00 07  
0023D0r 3  00 07 FF 00          .byte 0,7,255,0,12,255,12,7,5,6,7,255,0,12,11,255,0,6,2,0,7,255,0,12,11,255,0,6,2,6,7,255,0,12
0023D4r 3  0C FF 0C 07  
0023D8r 3  05 06 07 FF  
0023F2r 3  0B FF 00 06          .byte 11,255,0,6,2,0,7,255,0,12,11,255,0,4,9,9,2,6,7,255,0,4,255,11,8,255,0,7,2,0,7,255,0,19
0023F6r 3  02 00 07 FF  
0023FAr 3  00 0C 0B FF  
002414r 3  02 06 07 FF          .byte 2,6,7,255,0,17,9,9,2,0,7,255,0,19,2,6,7,255,0,14,11,255,0,4,2,0,7,255,0,14,11,0,0
002418r 3  00 11 09 09  
00241Cr 3  02 00 07 FF  
002435r 3  09 09 02 06          .byte 9,9,2,6,7,255,0,14,11,255,0,4,2,0,7,255,0,7,9,9,11,0,0,9,9,11,255,0,4,2,6,7,255,0,9
002439r 3  07 FF 00 0E  
00243Dr 3  0B FF 00 04  
002458r 3  0B FF 00 04          .byte 11,255,0,4,11,255,0,4,2,0,7,255,0,9,11,255,0,4,11,255,0,4,2,6,7,255,0,7,9,9,11,0,0
00245Cr 3  0B FF 00 04  
002460r 3  02 00 07 FF  
002479r 3  09 09 0B FF          .byte 9,9,11,255,0,4,2,0,7,14,0,0,0,14,255,0,9,11,0,0,9,9,2,6,7,255,11,7,255,0,7,11,255,0,4
00247Dr 3  00 04 02 00  
002481r 3  07 0E 00 00  
00249Cr 3  02 00 07 FF          .byte 2,0,7,255,0,12,9,9,11,255,0,4,2,6,7,0,13,255,0,12,14,255,0,4,2,0,7,255,0,14,14,255,0,4
0024A0r 3  00 0C 09 09  
0024A4r 3  0B FF 00 04  
0024BEr 3  02 04 FF 01          .byte 2,4,255,1,20,3
0024C2r 3  14 03        
0024C4r 3  00 07 FF 0C          .byte 0,7,255,12,19,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7,255,0,19,2,0,7,0,0,255,11,15,0,0
0024C8r 3  13 02 06 07  
0024CCr 3  FF 00 13 02  
0024E5r 3  02 06 07 00          .byte 2,6,7,0,0,14,11,255,0,12,11,0,0,2,0,7,0,0,14,11,255,0,12,11,9,9,2,6,7,0,0,14,11
0024E9r 3  00 0E 0B FF  
0024EDr 3  00 0C 0B 00  
002506r 3  FF 00 0C 0B          .byte 255,0,12,11,0,0,2,0,7,0,0,0,11,0,13,255,0,10,11,0,0,2,6,7,0,0,0,11,0,17,255,0,10
00250Ar 3  00 00 02 00  
00250Er 3  07 00 00 00  
002527r 3  0B 09 09 02          .byte 11,9,9,2,0,7,0,0,0,11,255,0,12,11,0,0,2,6,7,0,0,0,11,255,9,4,0,0,9,9,255,0,4
00252Br 3  00 07 00 00  
00252Fr 3  00 0B FF 00  
002548r 3  0B 00 00 02          .byte 11,0,0,2,0,7,255,0,14,9,9,11,9,9,2,6,7,255,0,16,11,0,0,2,0,7,255,0,16,11,0,0,2
00254Cr 3  00 07 FF 00  
002550r 3  0E 09 09 0B  
002569r 3  06 07 00 00          .byte 6,7,0,0,255,11,15,9,9,2,0,7,255,0,19,2,6,7,255,0,19,2,0,7,255,0,17,9,9,2,6,7,255,0,19
00256Dr 3  FF 0B 0F 09  
002571r 3  09 02 00 07  
00258Cr 3  02 00 07 FF          .byte 2,0,7,255,0,4,14,255,0,9,14,255,0,4,2,4,255,1,20,3
002590r 3  00 04 0E FF  
002594r 3  00 09 0E FF  
0025A0r 3  00 07 FF 00          .byte 0,7,255,0,19,2,6,7,255,0,19,2,0,7,11,11,255,0,9,13,255,0,7,2,6,7,255,0,11,17,255,0,7
0025A4r 3  13 02 06 07  
0025A8r 3  FF 00 13 02  
0025C1r 3  02 00 07 FF          .byte 2,0,7,255,0,19,2,6,7,255,0,6,14,0,0,0,14,255,0,8,2,0,7,9,9,9,255,11,13,0,0,0,2
0025C5r 3  00 13 02 06  
0025C9r 3  07 FF 00 06  
0025E2r 3  06 07 09 09          .byte 6,7,9,9,9,255,0,12,11,0,0,0,2,0,7,255,0,15,11,0,0,0,2,6,7,9,9,255,0,13,11,0,0,0
0025E6r 3  09 FF 00 0C  
0025EAr 3  0B 00 00 00  
002604r 3  02 00 07 FF          .byte 2,0,7,255,0,15,11,0,0,0,2,6,7,9,9,255,0,13,11,0,0,0,2,0,7,255,0,15,11,0,0,0,2
002608r 3  00 0F 0B 00  
00260Cr 3  00 00 02 06  
002625r 3  06 07 00 00          .byte 6,7,0,0,0,9,9,0,0,0,9,9,0,0,0,9,9,11,0,0,0,2,0,7,255,0,15,11,0,0,0,2,6
002629r 3  00 09 09 00  
00262Dr 3  00 00 09 09  
002646r 3  07 FF 00 0F          .byte 7,255,0,15,11,0,0,0,2,0,7,255,0,13,9,9,11,0,0,0,2,6,7,0,0,0,9,9,0,0,0,9,9
00264Ar 3  0B 00 00 00  
00264Er 3  02 00 07 FF  
002667r 3  FF 00 09 02          .byte 255,0,9,2,0,7,9,9,255,0,17,2,6,7,255,0,19,2,0,7,255,0,9,14,255,0,9,2,4,255,1,20,3
00266Br 3  00 07 09 09  
00266Fr 3  FF 00 11 02  
002688r 3  00 07 FF 00          .byte 0,7,255,0,19,5,6,7,255,0,19,2,0,7,15,0,0,0,15,0,15,15,15,0,15,0,0,0,15,255,0,4,2
00268Cr 3  13 05 06 07  
002690r 3  FF 00 13 02  
0026A9r 3  06 07 0F 00          .byte 6,7,15,0,0,0,15,0,15,0,0,0,15,0,0,0,15,255,0,4,2,0,7,15,0,15,0,15,0,15,15,0,0
0026ADr 3  00 00 0F 00  
0026B1r 3  0F 00 00 00  
0026CAr 3  0F 00 00 00          .byte 15,0,0,0,15,255,0,4,2,6,7,15,0,15,0,15,0,15,0,0,0,15,0,0,0,15,255,0,4,2,0,7,255,15,5
0026CEr 3  0F FF 00 04  
0026D2r 3  02 06 07 0F  
0026EDr 3  00 0F 0F 0F          .byte 0,15,15,15,0,15,15,15,0,15,15,15,0,0,2,6,7,255,0,19,2,0,7,15,15,0,0,15,15,15,0,15,15
0026F1r 3  00 0F 0F 0F  
0026F5r 3  00 0F 0F 0F  
00270Er 3  00 00 0F 0F          .byte 0,0,15,15,15,0,15,15,0,2,6,7,15,0,15,0,15,0,15,0,15,0,15,0,15,0,0,0,15,15,0,2,0
002712r 3  0F 00 0F 0F  
002716r 3  00 02 06 07  
00272Fr 3  07 0F 00 0F          .byte 7,15,0,15,0,15,0,15,0,15,0,15,0,15,15,0,0,15,15,0,2,6,7,15,0,15,0,15,0,15,0,15,0
002733r 3  00 0F 00 0F  
002737r 3  00 0F 00 0F  
002750r 3  0F 00 0F FF          .byte 15,0,15,255,0,6,2,0,7,15,15,0,0,15,15,15,0,15,0,15,0,15,15,15,0,15,15,0,2,6,7,255,0,19
002754r 3  00 06 02 00  
002758r 3  07 0F 0F 00  
002772r 3  02 00 07 FF          .byte 2,0,7,255,0,19,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7,255,0,19,2,0,7,255,0,19,2,6,7
002776r 3  00 13 02 06  
00277Ar 3  07 FF 00 13  
002793r 3  FF 0B 13 02          .byte 255,11,19,2,0,7,255,0,19,2,4,255,1,20,3
002797r 3  00 07 FF 00  
00279Br 3  13 02 04 FF  
0027A2r 3               numsc:
0027A2r 3  08                   .byte 8
0027A3r 3               nmedat:
0027A3r 3  00 00 68 20          .byte 0,0,104,32,8,4,104,32,255
0027A7r 3  08 04 68 20  
0027ABr 3  FF           
0027ACr 3  00 00 88 20          .byte 0,0,136,32,1,1,48,144,2,2,152,112,8,4,144,24,2,2,104,88,2,1,56,112,255
0027B0r 3  01 01 30 90  
0027B4r 3  02 02 98 70  
0027C5r 3  00 00 10 10          .byte 0,0,16,16,1,3,72,96,2,2,152,32,8,4,136,144,255
0027C9r 3  01 03 48 60  
0027CDr 3  02 02 98 20  
0027D6r 3  00 00 50 18          .byte 0,0,80,24,1,2,8,104,4,1,80,64,8,4,120,24,1,2,104,64,255
0027DAr 3  01 02 08 68  
0027DEr 3  04 01 50 40  
0027EBr 3  00 00 08 60          .byte 0,0,8,96,3,2,152,80,4,1,48,136,8,4,8,152,1,2,32,32,1,3,104,136,255
0027EFr 3  03 02 98 50  
0027F3r 3  04 01 30 88  
002804r 3  00 00 80 10          .byte 0,0,128,16,2,1,104,112,5,3,56,80,8,4,48,16,255
002808r 3  02 01 68 70  
00280Cr 3  05 03 38 50  
002815r 3  00 00 30 98          .byte 0,0,48,152,4,1,0,128,1,3,76,60,1,3,104,100,8,4,32,16,255
002819r 3  04 01 00 80  
00281Dr 3  01 03 4C 3C  
00282Ar 3  00 00 08 30          .byte 0,0,8,48,6,0,24,144,6,0,80,56,6,0,24,120,6,0,80,136,255
00282Er 3  06 00 18 90  
002832r 3  06 00 50 38  
00283Fr 3               NUMOBJ = 1
00283Fr 3               objdta:
00283Fr 3  54 48 45 4E          .byte 84,72,69,78,32,71,79,32,84,79,32,84,72,69,32,69,88,73,84,46,13,83,73,77,80,76,69,83,0,0,0,0,0,254,56,120,254,56,120
002843r 3  20 47 4F 20  
002847r 3  54 4F 20 54  
002866r 3               font:
002866r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00286Ar 3  00 00 00 00  
00286Er 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
002872r 3  30 00 30 00  
002876r 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
00287Ar 3  00 00 00 00  
00287Er 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
002882r 3  6C FE 6C 00  
002886r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
00288Ar 3  7E 1E 7E 18  
00288Er 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
002892r 3  30 6E CE 00  
002896r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
00289Ar 3  7E CC 7E 00  
00289Er 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0028A2r 3  00 00 00 00  
0028A6r 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0028AAr 3  18 18 0C 00  
0028AEr 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0028B2r 3  30 30 60 00  
0028B6r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0028BAr 3  7E 18 3C 00  
0028BEr 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0028C2r 3  7E 18 18 00  
0028C6r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0028CAr 3  00 18 18 30  
0028CEr 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0028D2r 3  7E 00 00 00  
0028D6r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0028DAr 3  00 38 38 00  
0028DEr 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0028E2r 3  18 30 60 00  
0028E6r 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0028EAr 3  F6 E6 7C 00  
0028EEr 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
0028F2r 3  18 18 7E 00  
0028F6r 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
0028FAr 3  7C C0 FE 00  
0028FEr 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
002902r 3  06 C6 7C 00  
002906r 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00290Ar 3  D8 FE 18 00  
00290Er 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
002912r 3  06 C6 7C 00  
002916r 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00291Ar 3  C6 C6 7C 00  
00291Er 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
002922r 3  18 30 30 00  
002926r 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00292Ar 3  C6 C6 7C 00  
00292Er 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
002932r 3  7E 06 7C 00  
002936r 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00293Ar 3  00 00 30 00  
00293Er 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
002942r 3  00 30 30 60  
002946r 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
00294Ar 3  30 18 0C 00  
00294Er 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
002952r 3  00 7E 00 00  
002956r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
00295Ar 3  0C 18 30 00  
00295Er 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
002962r 3  18 00 18 00  
002966r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
00296Ar 3  FE C0 7C 00  
00296Er 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
002972r 3  FE C6 C6 00  
002976r 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
00297Ar 3  C6 C6 FC 00  
00297Er 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
002982r 3  C0 C6 7C 00  
002986r 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
00298Ar 3  C6 CC F8 00  
00298Er 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
002992r 3  C0 C0 FE 00  
002996r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
00299Ar 3  C0 C0 C0 00  
00299Er 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0029A2r 3  DE C6 7C 00  
0029A6r 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0029AAr 3  C6 C6 C6 00  
0029AEr 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0029B2r 3  18 18 7E 00  
0029B6r 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0029BAr 3  C6 C6 7C 00  
0029BEr 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0029C2r 3  D8 CC C6 00  
0029C6r 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0029CAr 3  C0 C0 FE 00  
0029CEr 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0029D2r 3  C6 C6 C6 00  
0029D6r 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0029DAr 3  DE CE C6 00  
0029DEr 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0029E2r 3  C6 C6 7C 00  
0029E6r 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0029EAr 3  FC C0 C0 00  
0029EEr 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
0029F2r 3  F6 DE 7C 00  
0029F6r 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
0029FAr 3  FC CC C6 00  
0029FEr 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
002A02r 3  06 C6 7C 00  
002A06r 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
002A0Ar 3  30 30 30 00  
002A0Er 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
002A12r 3  C6 C6 7C 00  
002A16r 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
002A1Ar 3  C6 6C 38 00  
002A1Er 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
002A22r 3  C6 FE 6C 00  
002A26r 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
002A2Ar 3  38 6C C6 00  
002A2Er 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
002A32r 3  30 30 30 00  
002A36r 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
002A3Ar 3  30 60 FE 00  
002A3Er 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
002A42r 3  18 18 1E 00  
002A46r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
002A4Ar 3  30 18 0C 00  
002A4Er 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
002A52r 3  30 30 F0 00  
002A56r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
002A5Ar 3  30 30 30 00  
002A5Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
002A62r 3  00 00 00 FF  
002A66r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
002A6Ar 3  60 60 FE 00  
002A6Er 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
002A72r 3  7C CC 7C 00  
002A76r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
002A7Ar 3  66 66 7C 00  
002A7Er 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
002A82r 3  60 60 3C 00  
002A86r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
002A8Ar 3  CC CC 7C 00  
002A8Er 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
002A92r 3  F8 C0 7C 00  
002A96r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
002A9Ar 3  30 30 30 00  
002A9Er 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
002AA2r 3  CC 7C 0C 78  
002AA6r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
002AAAr 3  CC CC CC 00  
002AAEr 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
002AB2r 3  30 30 78 00  
002AB6r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
002ABAr 3  0C 0C 6C 38  
002ABEr 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
002AC2r 3  70 78 6C 00  
002AC6r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
002ACAr 3  30 30 1C 00  
002ACEr 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
002AD2r 3  FC FC FC 00  
002AD6r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
002ADAr 3  CC CC CC 00  
002ADEr 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
002AE2r 3  CC CC 78 00  
002AE6r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
002AEAr 3  CC F8 C0 C0  
002AEEr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
002AF2r 3  CC 7C 0C 0E  
002AF6r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
002AFAr 3  60 60 60 00  
002AFEr 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
002B02r 3  78 0C F8 00  
002B06r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
002B0Ar 3  30 30 1C 00  
002B0Er 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
002B12r 3  CC CC 78 00  
002B16r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
002B1Ar 3  78 78 30 00  
002B1Er 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
002B22r 3  FC FC 78 00  
002B26r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
002B2Ar 3  30 78 CC 00  
002B2Er 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
002B32r 3  CC 7C 0C 78  
002B36r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
002B3Ar 3  30 60 FC 00  
002B3Er 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
002B42r 3  18 18 1E 00  
002B46r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
002B4Ar 3  18 18 18 00  
002B4Er 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
002B52r 3  30 30 F0 00  
002B56r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
002B5Ar 3  00 00 00 00  
002B5Er 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
002B62r 3  E3 BB C6 7C  
002B66r 3               jtab:
002B66r 3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
002B6Ar 3  FE FF FF 00  
002B6Er 3  00 00 01 01  
002B7Br 3  65 14 31 10  keys:   .byte 101,20,49,16,35,18,98,112,0,113,1
002B7Fr 3  23 12 62 70  
002B83r 3  00 71 01     
002B86r 3               
002B86r 2               
002B86r 1               	.include "lib.inc"
002B86r 2               ;----------------------------------------------------------------------
002B86r 2               ; VIC20 Platform Specific functions
002B86r 2               ;----------------------------------------------------------------------
002B86r 2               
002B86r 2               ;============================================================
002B86r 2               ; PLATFORM VARIABLES
002B86r 2               ;============================================================
002B86r 2               ;
002B86r 2               ; Memory map:
002B86r 2               ;
002B86r 2               ;	$0000-$01ff	 0.5kB	CPU WS
002B86r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
002B86r 2               ;	$0400-$0fff	 3,0kB	RAM
002B86r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
002B86r 2               ;	$2000-$7fff	24,0kB	RAM
002B86r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
002B86r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
002B86r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
002B86r 2               ;	$9800-$9fff	 2,0kB	I/O
002B86r 2               ;	$a000-$bfff	 8,0kB	RAM
002B86r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
002B86r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
002B86r 2               ;
002B86r 2               ; Keyboard matrix:
002B86r 2               ;                          	  $9121
002B86r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
002B86r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
002B86r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
002B86r 2               ;                 VIC   07  06  05  04  03  02  01  00
002B86r 2               ;
002B86r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
002B86r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
002B86r 2               ;                 VIC   17  16  15  14  13  12  11  10
002B86r 2               ;
002B86r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
002B86r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
002B86r 2               ;                 VIC   27  26  25  24  23  22  21  20
002B86r 2               ;
002B86r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
002B86r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
002B86r 2               ;                 VIC   37  36  35  34  33  32  31  30
002B86r 2               ;
002B86r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
002B86r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
002B86r 2               ;                 VIC   47  46  45  44  43  42  41  40
002B86r 2               ;
002B86r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
002B86r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
002B86r 2               ;                 VIC   57  56  55  54  53  52  51  50
002B86r 2               ;
002B86r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
002B86r 2               ;               ASCII   13  42  80  73  89  82  87
002B86r 2               ;                 VIC   67  66  65  64  63  62  61  60
002B86r 2               ;
002B86r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
002B86r 2               ;               ASCII   08  ??  43  57  55  53  51  49
002B86r 2               ;                 VIC   77  76  75  74  73  72  71  70
002B86r 2               ;
002B86r 2               ;	 P =$65,O=$14,A=$51,Q=$10
002B86r 2               ;	SPC=$30,N=$44,M=$34
002B86r 2               ;	 1 =$70,2=$00,3=$71,4=$01
002B86r 2               ;
002B86r 2               ; Joysticks:
002B86r 2               ;
002B86r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
002B86r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
002B86r 2               ;	$9120	Right -     -     -     -     -     -     -
002B86r 2               ;
002B86r 2               ;	$9122	DDRB = Data Direction Register port $9120
002B86r 2               ;               0 = input, 1 = output
002B86r 2               ;		Bit7 should be 0 to read joystick $9120
002B86r 2               ;
002B86r 2               ; Video registers:
002B86r 2               ;
002B86r 2               ;	$9000	horizontal centering
002B86r 2               ;		bits 0-6 horizontal centering
002B86r 2               ;		bit  7 sets interlace scan
002B86r 2               ;	$9001	vertical centering
002B86r 2               ;	$9002	set # of columns
002B86r 2               ;		bits 0-6 set # of columns
002B86r 2               ;		bit 7 is part of video matrix address
002B86r 2               ;	$9003	set # of rows
002B86r 2               ;		bit 0 sets 8x8 or 16x8 chars
002B86r 2               ;		bits 1-6 set # of rows
002B86r 2               ;	$9004	TV raster beam line
002B86r 2               ;	$9005	start of character memory
002B86r 2               ;		bits 0-3 start of character memory (default = 0)
002B86r 2               ;		bits 4-7 is rest of video address (default= F)
002B86r 2               ;		BITS 3,2,1,0 CM startinq address
002B86r 2               ;			     HEX   DEC
002B86r 2               ;		0000   ROM   8000  32768
002B86r 2               ;		0001	     8400  33792
002B86r 2               ;		0010	     8800  34816
002B86r 2               ;		0011	     8C00  35840
002B86r 2               ;		1000   RAM   0000  0000
002B86r 2               ;		1001  xxxx
002B86r 2               ;		1010  xxxx   unavail.
002B86r 2               ;		1011  xxxx
002B86r 2               ;		1100	     1000  4096
002B86r 2               ;		1101	     1400  5120
002B86r 2               ;		1110	     1800  6144
002B86r 2               ;		1111	     1C00  7168
002B86r 2               ;
002B86r 2               ; Sound registers:
002B86r 2               ;
002B86r 2               ;	$900a	Frequency for oscillator 1 (low)
002B86r 2               ;		(on: 128-255)
002B86r 2               ;	$900b	Frequency for oscillator 2 (medium)
002B86r 2               ;		(on: 128-255)
002B86r 2               ;	$900c	Frequency for oscillator 3 (high)
002B86r 2               ;		(on: 128-255)
002B86r 2               ;	$900d	Frequency of noise source
002B86r 2               ;	$900e	bit 0-3 sets volume of all sound
002B86r 2               ;		bits 4-7 are auxiliary color information
002B86r 2               ;	$900f	Screen and border color register
002B86r 2               ;		bits 4-7 select background color
002B86r 2               ;		bits 0-2 select border color
002B86r 2               ;		bit 3 selects inverted or normal mode
002B86r 2               ;
002B86r 2               ; I/O:
002B86r 2               ;	VIA1 -VIA2
002B86r 2               ;-----------------------------------------------------------
002B86r 2               ;	$9110,$9120 	Port B output register
002B86r 2               ;	$9111,$9121 	Port A output register
002B86r 2               ;			(PA0) Bit 0=Serial CLK IN
002B86r 2               ;			(PA1) Bit 1=Serial DATA IN
002B86r 2               ;			(PA2) Bit 2=Joy 0
002B86r 2               ;			(PA3) Bit 3=Joy 1
002B86r 2               ;			(PA4) Bit 4=Joy 2
002B86r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
002B86r 2               ;			(PA6) Bit 6=Cassette switch sense
002B86r 2               ;			(PA7) Bit 7=Serial ATN out
002B86r 2               ;	$9112,$9122	Data direction register B
002B86r 2               ;	$9113,$9123	Data direction register A
002B86r 2               ;	$9114,$9124	Timer 1 low byte
002B86r 2               ;	$9115,$9125	Timer 1 high byte & counter
002B86r 2               ;	$9116,$9126	Timer 1 low byte
002B86r 2               ;	$9117,$9127	Timer 1 high byte
002B86r 2               ;	$9118,$9128	Timer 2 low byte
002B86r 2               ;	$9119,$9129	Timer 2 high byte
002B86r 2               ;	$911A,$912A	Shift register
002B86r 2               ;	$911B,$912B	Auxiliary control register
002B86r 2               ;	$911C,$912C	Peripheral control register
002B86r 2               ;			(CA1, CA2, CB1, CB2)
002B86r 2               ;			CA1 = restore key (Bit 0)
002B86r 2               ;			CA2 = cassette motor control (Bits 1-3)
002B86r 2               ;			CB1 = interrupt signal for received
002B86r 2               ;			RS-232 data (Bit 4)
002B86r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
002B86r 2               ;	$911D,$912D	Interrupt flag register
002B86r 2               ;	$911E,$912E	Interrupt enable register
002B86r 2               ;	$911F,$912F	Port A (Sense cassette switch)
002B86r 2               
002B86r 2               ; VIC constants
002B86r 2               
002B86r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
002B86r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
002B86r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
002B86r 2               
002B86r 2               ; VIC variables:
002B86r 2               
002B86r 2  00           	fontcol:	.byte 0		; Frontcolour text
002B87r 2  00           	mode:		.byte 0		; 0=MPAGD, 1=MiniPaint
002B88r 2               .if modelflag				; Set crtflag to identify machine, NTSC or PAL
002B88r 2               	crtflag:	.byte 1		; PAL
002B88r 2               .else
002B88r 2  00           	crtflag:	.byte 0		; NTSC
002B89r 2               .endif
002B89r 2               
002B89r 2               ; Addresses
002B89r 2               
002B89r 2               	ScreenAddr	= $0200		; VIDEO RAM
002B89r 2               	MapAddr		= $0400		; RAM
002B89r 2               	CharAddress	= $1000		; CHAR RAM
002B89r 2               	Reg0		= $9000		; Horizontal centering
002B89r 2               	Reg1		= $9001		; Vertical centering
002B89r 2               	Reg2		= $9002		; Set # of columns
002B89r 2               	Reg3		= $9003		; Set # of rows
002B89r 2               	Reg4		= $9004		; Vsync signal
002B89r 2               	Reg5		= $9005		; Start of character memory
002B89r 2               	RegA		= $900a		; Colour and auxcolour register
002B89r 2               	RegB		= $900b		; Colour and auxcolour register
002B89r 2               	RegC		= $900c		; Colour and auxcolour register
002B89r 2               	RegD		= $900d		; Colour and auxcolour register
002B89r 2               	RegE		= $900e		; Colour and auxcolour register
002B89r 2               	RegF		= $900f		; Screen and border color register
002B89r 2               
002B89r 2               	JoyAddr1	= $9111		; Joystick address 1
002B89r 2               	Timer11_Low  	= $9114		; Timer 1 low byte
002B89r 2               	Timer11_High 	= $9115		; Timer 1 high byte
002B89r 2               	Timer12_Low  	= $9118		; Timer 2 low byte
002B89r 2               	Timer12_High 	= $9119		; Timer 2 high byte
002B89r 2               	AUX1		= $911b		; Auxiliary control register
002B89r 2               	IFR1		= $911d		; Interrupt Flag Register
002B89r 2               	IER1		= $911e		; Interrupt Enable Register
002B89r 2               
002B89r 2               	KeyColAddr	= $9120		; Keyboard column (write)
002B89r 2               	JoyAddr2	= $9120		; Joystick address 2
002B89r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
002B89r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
002B89r 2               	Timer21_Low  	= $9124		; Timer 1 low byte
002B89r 2               	Timer21_High 	= $9125		; Timer 1 high byte
002B89r 2               	AUX2		= $912b		; Auxiliary control register
002B89r 2               	IFR2		= $912d		; Interrupt Flag Register
002B89r 2               	IER2		= $912e		; Interrupt Enable Register
002B89r 2               
002B89r 2               	ColorAttr	= $9600		; Color attributes
002B89r 2               	HiRAM		= $a000		; Hi RAM 8kB
002B89r 2               
002B89r 2               ;----------------------------------------------------------------------
002B89r 2               ; VIC20 video hardware fns
002B89r 2               ;----------------------------------------------------------------------
002B89r 2               
002B89r 2               init:
002B89r 2               
002B89r 2               ; Disable interrupts
002B89r 2               
002B89r 2  A9 7F        	lda #$7f
002B8Br 2  8D 1E 91     	sta IER1
002B8Er 2  8D 2D 91     	sta IFR2
002B91r 2  8D 2E 91     	sta IER2
002B94r 2               
002B94r 2               ; Set audio volume and flag to 0 to check when disabling
002B94r 2               ; beep and crash
002B94r 2               
002B94r 2  A9 00        	lda #0
002B96r 2  8D 0A 90     	sta RegA
002B99r 2  8D 0B 90     	sta RegB
002B9Cr 2  8D 0C 90     	sta RegC
002B9Fr 2  8D 0D 90     	sta RegD
002BA2r 2  A9 00        	lda #$00
002BA4r 2  85 rr        	sta SOUNDS_STATUS
002BA6r 2               
002BA6r 2  AD 0E 90     	lda RegE
002BA9r 2  09 0F        	ora #$0f		; Set volume max
002BABr 2  8D 0E 90     	sta RegE
002BAEr 2               
002BAEr 2               ; Init screen for NTSC
002BAEr 2               ; this sets the background and border color of the screen
002BAEr 2               ; in this case border black and background black
002BAEr 2               
002BAEr 2  A9 18        	lda #%00011000
002BB0r 2  8D 0F 90     	sta RegF
002BB3r 2               
002BB3r 2               ; Reset fontcolor
002BB3r 2  A9 00        	lda #0		; Black
002BB5r 2  8D rr rr     	sta fontcol
002BB8r 2               
002BB8r 2               
002BB8r 2  A9 00        	lda #0		; Mode 0 = MPAGD
002BBAr 2  20 rr rr     	jsr SetReg
002BBDr 2               
002BBDr 2               ; Init screencharacters
002BBDr 2               ; Fill screen with characters from left to right, up to down
002BBDr 2               
002BBDr 2  A2 00        	ldx #0
002BBFr 2  A0 00        	ldy #0
002BC1r 2               scrinit:
002BC1r 2  8A           	txa
002BC2r 2  9D 00 02     	sta ScreenAddr,x
002BC5r 2  98           	tya
002BC6r 2  9D 00 96     	sta ColorAttr,x
002BC9r 2  E8           	inx
002BCAr 2  E0 F2        	cpx#242
002BCCr 2  D0 F3        	bne scrinit
002BCEr 2               
002BCEr 2               ; Reset fontcolor
002BCEr 2               
002BCEr 2  A9 00        	lda #0			; Black
002BD0r 2  8D rr rr     	sta fontcol
002BD3r 2               
002BD3r 2               ; Init music
002BD3r 2               
002BD3r 2               ;	jsr initmusic
002BD3r 2               
002BD3r 2               ; Init VIA1 timer11 for timeout 1/25 sec
002BD3r 2               
002BD3r 2  A9 E0        	lda #$e0		; T1 continuous
002BD5r 2  8D 1B 91     	sta AUX1
002BD8r 2  A9 7F        	lda #$7f		; No int
002BDAr 2  8D 1E 91     	sta IER1
002BDDr 2  A9 00        	lda #0
002BDFr 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
002BE2r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
002BE4r 2  8D 14 91     	sta Timer11_Low
002BE7r 2  A9 4E        	lda #>timervalue
002BE9r 2  8D 15 91     	sta Timer11_High
002BECr 2               
002BECr 2               ; Pre-shifted byte tables if parameter 'r' given
002BECr 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
002BECr 2               ; The bits are shifted to the right and overflow bits are
002BECr 2               ; inserted to the left. So 1 byte contains a left and right part
002BECr 2               
002BECr 2               .if rflag
002BECr 2               shift0 = HiRAM
002BECr 2               shift2 = HiRAM+256
002BECr 2               shift4 = HiRAM+512
002BECr 2               shift6 = HiRAM+768
002BECr 2               
002BECr 2               ; Pre-shifted table 0 pixels
002BECr 2               
002BECr 2               	ldx #0
002BECr 2               shf0:
002BECr 2               	txa
002BECr 2               	sta shift0,x
002BECr 2               	inx
002BECr 2               	bne shf0
002BECr 2               
002BECr 2               ; Pre-shifted table 2 pixels
002BECr 2               
002BECr 2               	ldx #0
002BECr 2               shf2:
002BECr 2               	ldy #2
002BECr 2               	txa
002BECr 2               shf2loop:
002BECr 2               	lsr a
002BECr 2               	bcc :+
002BECr 2               	ora #$80
002BECr 2               :
002BECr 2               	dey
002BECr 2               	bne shf2loop
002BECr 2               	sta shift2,x
002BECr 2               	inx
002BECr 2               	bne shf2
002BECr 2               
002BECr 2               ; Pre-shifted table 4 pixels
002BECr 2               
002BECr 2               	ldx #0
002BECr 2               shf4:
002BECr 2               	ldy #4
002BECr 2               	txa
002BECr 2               shf4loop:
002BECr 2               	lsr a
002BECr 2               	bcc :+
002BECr 2               	ora #$80
002BECr 2               :
002BECr 2               	dey
002BECr 2               	bne shf4loop
002BECr 2               	sta shift4,x
002BECr 2               	inx
002BECr 2               	bne shf4
002BECr 2               
002BECr 2               ; Pre-shifted table 6 pixels
002BECr 2               
002BECr 2               	ldx #0
002BECr 2               shf6:
002BECr 2               	ldy #6
002BECr 2               	txa
002BECr 2               shf6loop:
002BECr 2               	lsr a
002BECr 2               	bcc :+
002BECr 2               	ora #$80
002BECr 2               :
002BECr 2               	dey
002BECr 2               	bne shf6loop
002BECr 2               	sta shift6,x
002BECr 2               	inx
002BECr 2               	bne shf6
002BECr 2               .endif
002BECr 2               
002BECr 2  60           	rts
002BEDr 2               
002BEDr 2               ;========================================================
002BEDr 2               ; KEY AND JOYSTICK ROUTINES
002BEDr 2               ;--------------------------------------------------------
002BEDr 2               ; Keys
002BEDr 2               ;
002BEDr 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002BEDr 2               ;             ||||||||
002BEDr 2               ;             |||||||+> Right    KEY 0  - X
002BEDr 2               ;             ||||||+-> Left     KEY 1  - Z
002BEDr 2               ;             |||||+--> Down     KEY 2  - .
002BEDr 2               ;             ||||+---> Up       KEY 3  - ;
002BEDr 2               ;             |||+----> Fire1    KEY 4  - SPC
002BEDr 2               ;             ||+-----> Fire2    KEY 5  - Q
002BEDr 2               ;             |+------> Fire3    KEY 6  - P
002BEDr 2               ;             +-------> Not used
002BEDr 2               ;
002BEDr 2               ;                       Option1  KEY 7  - 1
002BEDr 2               ;                       Option2  KEY 8  - 2
002BEDr 2               ;                       Option3  KEY 9  - 3
002BEDr 2               ;                       Option4  KEY 10 - 4
002BEDr 2               ;--------------------------------------------------------
002BEDr 2               
002BEDr 2               ;----------------------------------------------------
002BEDr 2               ; Interrupt service
002BEDr 2               ;----------------------------------------------------
002BEDr 2               
002BEDr 2               intserv:
002BEDr 2  EE 01 96     	inc $9601	; scroll colour char topleft
002BF0r 2  68           	pla
002BF1r 2  A8           	tay
002BF2r 2  68           	pla
002BF3r 2  AA           	tax
002BF4r 2  68           	pla
002BF5r 2  40           	rti
002BF6r 2               
002BF6r 2               ;--------------------------------------------------------
002BF6r 2               ; PRSKEY
002BF6r 2               ;
002BF6r 2               ; Wait for keypress.
002BF6r 2               ;--------------------------------------------------------
002BF6r 2               
002BF6r 2               prskey:
002BF6r 2  98           	tya
002BF7r 2  48           	pha
002BF8r 2               prsloop:
002BF8r 2  20 rr rr     	jsr vsync
002BFBr 2  20 rr rr     	jsr joykey
002BFEr 2  09 80        	ora #$80
002C00r 2  C9 FF        	cmp #$ff
002C02r 2  D0 07        	bne :+
002C04r 2  20 rr rr     	jsr readkey
002C07r 2  C9 FF        	cmp #255
002C09r 2  F0 ED        	beq prsloop		; wait until key pressed
002C0Br 2               :
002C0Br 2               prsrelease:
002C0Br 2  20 rr rr     	jsr vsync
002C0Er 2  20 rr rr     	jsr joykey
002C11r 2  09 80        	ora #$80
002C13r 2  C9 FF        	cmp #$ff
002C15r 2  F0 07        	beq :+
002C17r 2  20 rr rr     	jsr readkey
002C1Ar 2  C9 FF        	cmp #255
002C1Cr 2  D0 ED        	bne prsrelease		; wait until key released
002C1Er 2               :
002C1Er 2  68           	pla
002C1Fr 2  A8           	tay
002C20r 2  60           	rts
002C21r 2               
002C21r 2               ;--------------------------------------------------------
002C21r 2               ; KTEST
002C21r 2               ;
002C21r 2               ; Keyboard test routine with key in A.
002C21r 2               ; Scan key and clear carry if key pressed
002C21r 2               ;--------------------------------------------------------
002C21r 2               
002C21r 2               ktest:
002C21r 2  85 rr        	sta z80_a		; save key
002C23r 2               
002C23r 2  4A           	lsr a
002C24r 2  4A           	lsr a
002C25r 2  4A           	lsr a
002C26r 2  4A           	lsr a
002C27r 2  AA           	tax
002C28r 2  BD rr rr     	lda colmask,x
002C2Br 2  8D 20 91     	sta KeyColAddr		; set row
002C2Er 2               
002C2Er 2  A5 rr        	lda z80_a
002C30r 2  29 0F        	and #$0f
002C32r 2  AA           	tax			; get column
002C33r 2               
002C33r 2  AD 21 91     	lda KeyRowAddr		; read column
002C36r 2  3D rr rr     	and keymask,x		; check if key pressed
002C39r 2  F0 02        	beq pressed		; Skip if pressed
002C3Br 2  38           	sec			; key not pressed
002C3Cr 2  60           	rts
002C3Dr 2               pressed:
002C3Dr 2  18           	clc			; key pressed
002C3Er 2  60           	rts
002C3Fr 2               
002C3Fr 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
002C43r 2  F7 FB FD FE  
002C47r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
002C4Br 2  10 20 40 80  
002C4Fr 2               
002C4Fr 2               ;---------------------------------------------------------------
002C4Fr 2               ; KGET
002C4Fr 2               ;
002C4Fr 2               ; Read keyboard matrix if a key is pressed.
002C4Fr 2               ; Return A = high nibble=row and low nibble=col
002C4Fr 2               ;---------------------------------------------------------------
002C4Fr 2               
002C4Fr 2               kget:
002C4Fr 2  86 rr        	stx xtmp		; Save x-reg
002C51r 2               kget0:
002C51r 2  A2 00        	ldx #0			; reset row
002C53r 2               kget1:
002C53r 2  BD rr rr     	lda colmask,x		; Get mask
002C56r 2  8D 20 91     	sta KeyColAddr		; Set row
002C59r 2  AD 21 91     	lda KeyRowAddr		; Read columns
002C5Cr 2  85 rr        	sta tmp			; Save colums
002C5Er 2  C9 FF        	cmp #$ff		; Key pressed?
002C60r 2  D0 08        	bne kget2		; Yes, skip
002C62r 2  E8           	inx			; Next row
002C63r 2  E0 08        	cpx #8			; All rows scanned?
002C65r 2  D0 EC        	bne kget1		; No, repeat
002C67r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
002C6Ar 2               kget2:
002C6Ar 2  A0 00        	ldy #0			; Reset column
002C6Cr 2               kget3:
002C6Cr 2  46 rr        	lsr tmp			; Test bit
002C6Er 2  90 04        	bcc kget4		; If clear, key pressed
002C70r 2  C8           	iny			; Next column
002C71r 2  4C rr rr     	jmp kget3		; Repeat
002C74r 2               kget4:
002C74r 2  86 rr        	stx tmp			; Get row
002C76r 2  06 rr        	asl tmp			; Make high nibble
002C78r 2  06 rr        	asl tmp
002C7Ar 2  06 rr        	asl tmp
002C7Cr 2  06 rr        	asl tmp
002C7Er 2  98           	tya			; Get column
002C7Fr 2  18           	clc
002C80r 2  65 rr        	adc tmp			; Add row as low nibble
002C82r 2  85 rr        	sta tmp
002C84r 2               kget5:
002C84r 2  AD 21 91     	lda KeyRowAddr		; Read columns
002C87r 2  C9 FF        	cmp #$ff
002C89r 2  D0 F9        	bne kget5
002C8Br 2               
002C8Br 2  A5 rr        	lda tmp			; Return keycode
002C8Dr 2  A6 rr        	ldx xtmp		; Restore X-reg
002C8Fr 2  60           	rts			; Return
002C90r 2               
002C90r 2               ;-------------------------------------------------------------
002C90r 2               ; READKEY
002C90r 2               ;
002C90r 2               ; Check keyboard matrix if a key is pressed
002C90r 2               ; Return keymask in Y
002C90r 2               ;-------------------------------------------------------------
002C90r 2               
002C90r 2               readkey:
002C90r 2  A9 FF        	lda #$ff		; Keymask
002C92r 2  85 rr        	sta tmp
002C94r 2  A2 07        	ldx #7
002C96r 2               scanrow:
002C96r 2  BD rr rr     	lda colmask,x
002C99r 2  8D 20 91     	sta KeyColAddr		; set row
002C9Cr 2  AD 21 91     	lda KeyRowAddr		; read column
002C9Fr 2  25 rr        	and tmp			; Reset bit is key pressed
002CA1r 2  85 rr        	sta tmp
002CA3r 2  CA           	dex
002CA4r 2  10 F0        	bpl scanrow
002CA6r 2  A5 rr        	lda tmp
002CA8r 2  A8           	tay
002CA9r 2  60           	rts
002CAAr 2               
002CAAr 2               ;-------------------------------------------------------------
002CAAr 2               ; JOY1SCAN
002CAAr 2               ;
002CAAr 2               ; Initializes joystick
002CAAr 2               ;-------------------------------------------------------------
002CAAr 2               
002CAAr 2               joyinit:
002CAAr 2  60           	rts
002CABr 2               
002CABr 2               ;-------------------------------------------------------------
002CABr 2               ; JOY1SCAN
002CABr 2               ;
002CABr 2               ; Scan joystick1 and return key in z80_e
002CABr 2               ; Up, down, left, right and fire are read from the joystick
002CABr 2               ; Fire2 and fire3 are read from the keyboard
002CABr 2               ;-------------------------------------------------------------
002CABr 2               
002CABr 2               joy1scan:
002CABr 2  A9 FF        	lda #$ff
002CADr 2  85 rr        	sta z80_e
002CAFr 2               
002CAFr 2  AD 11 91     	lda JoyAddr1		; Read joystick input
002CB2r 2  4A           	lsr a
002CB3r 2  4A           	lsr a
002CB4r 2               
002CB4r 2  4A           	lsr a
002CB5r 2  26 rr        	rol z80_e		; Up
002CB7r 2  4A           	lsr a
002CB8r 2  26 rr        	rol z80_e		; Down
002CBAr 2  4A           	lsr a
002CBBr 2  26 rr        	rol z80_e		; Left
002CBDr 2               
002CBDr 2  A9 7F        	lda #%01111111
002CBFr 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
002CC2r 2  AD 20 91     	lda JoyAddr2
002CC5r 2  0A           	asl a
002CC6r 2  26 rr        	rol z80_e		; Right
002CC8r 2  A9 FF        	lda #%11111111
002CCAr 2  8D 22 91     	sta DDRB		; Reset
002CCDr 2               
002CCDr 2  AD 11 91     	lda JoyAddr1
002CD0r 2  29 20        	and #%00100000
002CD2r 2  D0 06        	bne :+
002CD4r 2  A5 rr        	lda z80_e
002CD6r 2  29 EF        	and #%11101111		; Fire
002CD8r 2  85 rr        	sta z80_e
002CDAr 2               :
002CDAr 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
002CDDr 2  20 rr rr     	jsr ktest
002CE0r 2  B0 06        	bcs :+
002CE2r 2  A5 rr        	lda z80_e
002CE4r 2  29 BF        	and #%10111111
002CE6r 2  85 rr        	sta z80_e
002CE8r 2               :
002CE8r 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
002CEBr 2  20 rr rr     	jsr ktest
002CEEr 2  B0 06        	bcs :+
002CF0r 2  A5 rr        	lda z80_e
002CF2r 2  29 DF        	and #%11011111
002CF4r 2  85 rr        	sta z80_e
002CF6r 2               :
002CF6r 2  60           	rts
002CF7r 2               
002CF7r 2               ;-------------------------------------------------------------
002CF7r 2               ; JOY2SCAN
002CF7r 2               ;
002CF7r 2               ; TODO, Scan joystick2 and return key in z80_e
002CF7r 2               ;-------------------------------------------------------------
002CF7r 2               
002CF7r 2               joy2scan:
002CF7r 2  60           	rts
002CF8r 2               
002CF8r 2               
002CF8r 2               
002CF8r 2               ;========================================================
002CF8r 2               ; HARDWARE DEPENDING ROUTINES
002CF8r 2               ;========================================================
002CF8r 2               
002CF8r 2               ;----------------------------------------------------
002CF8r 2               ; DELAY
002CF8r 2               ;
002CF8r 2               ; Delay routine A * 1/50 sec
002CF8r 2               ;----------------------------------------------------
002CF8r 2               
002CF8r 2               delay:
002CF8r 2  85 rr        	sta xtmp		; set delaycounter
002CFAr 2               del_loop:
002CFAr 2  AD 04 90     	lda Reg4
002CFDr 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
002CFFr 2               
002CFFr 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002D01r 2               delay1:
002D01r 2  61 80        	adc ($80,x)		;	 6 usec
002D03r 2  61 80        	adc ($80,x)		;	 6 usec
002D05r 2  88           	dey			;	 2 usec
002D06r 2  D0 F9        	bne delay1		;	 2 usec
002D08r 2  EA           	nop			; 2 usec
002D09r 2  EA           	nop			; 2 usec
002D0Ar 2               				; tot: 20000 usec
002D0Ar 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
002D0Cr 2  D0 EC        	bne del_loop
002D0Er 2  60           	rts
002D0Fr 2               
002D0Fr 2               ;-------------------------------------------------------------
002D0Fr 2               ; VSYNC
002D0Fr 2               ;
002D0Fr 2               ; - read joystick/keyboard
002D0Fr 2               ; - sync framerate with timer 25Hz
002D0Fr 2               ; - handle shrapnel every even frame
002D0Fr 2               ; - handle sound
002D0Fr 2               ;-------------------------------------------------------------
002D0Fr 2               
002D0Fr 2               vsync:
002D0Fr 2  48           	pha			; save registers
002D10r 2  98           	tya
002D11r 2  48           	pha
002D12r 2  8A           	txa
002D13r 2  48           	pha
002D14r 2               
002D14r 2               ;-------------------------------------------------------------
002D14r 2               ; Read joystick/keyboard.
002D14r 2               ;-------------------------------------------------------------
002D14r 2               
002D14r 2  20 rr rr     	jsr joykey
002D17r 2               
002D17r 2               ;-------------------------------------------------------------
002D17r 2               ; Sync framerate with timer 25Hz
002D17r 2               ;-------------------------------------------------------------
002D17r 2               
002D17r 2  A9 40        	lda #$40		; set Timer1 expired bit
002D19r 2               vsync1:
002D19r 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
002D1Cr 2  F0 FB        	beq vsync1		; wait if timer not expired
002D1Er 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
002D21r 2               
002D21r 2               rasterwait:
002D21r 2  AD 04 90     	lda Reg4
002D24r 2  D0 FB        	bne rasterwait
002D26r 2               
002D26r 2               ;-------------------------------------------------------------
002D26r 2               ; Handle sound command
002D26r 2               ;-------------------------------------------------------------
002D26r 2               
002D26r 2  20 rr rr     	jsr make_sound2
002D29r 2               
002D29r 2               ;-------------------------------------------------------------
002D29r 2               ; Handle shrapnel every even frame
002D29r 2               ;-------------------------------------------------------------
002D29r 2               
002D29r 2  A5 rr        	lda clock		; get clock
002D2Br 2  29 01        	and #1			; 2 frames expired
002D2Dr 2  D0 03        	bne:+
002D2Fr 2  20 rr rr     	jsr proshr		; process shrapnel
002D32r 2               :
002D32r 2               
002D32r 2               ;-------------------------------------------------------------
002D32r 2               ; Handle sound BEEP and CRASH
002D32r 2               ;-------------------------------------------------------------
002D32r 2               
002D32r 2  AD rr rr     	lda sndtyp
002D35r 2  F0 4E        	beq sndskip
002D37r 2               
002D37r 2               sndloop:
002D37r 2  AC rr rr     	ldy sndtyp
002D3Ar 2               sndwait:
002D3Ar 2  88           	dey
002D3Br 2  D0 FD        	bne sndwait
002D3Dr 2               
002D3Dr 2  AD rr rr     	lda sndtyp
002D40r 2  30 1E        	bmi crashaudio
002D42r 2               
002D42r 2               ; BEEP command:
002D42r 2               ; enable sound on channel 2
002D42r 2               ; range 0-127
002D42r 2               
002D42r 2               beepaudio:
002D42r 2  AD 0E 90     	lda RegE
002D45r 2  09 0F        	ora #$0f
002D47r 2  8D 0E 90     	sta RegE
002D4Ar 2               
002D4Ar 2  A5 rr        	lda SOUNDS_STATUS
002D4Cr 2  09 40        	ora #%01000000
002D4Er 2  85 rr        	sta SOUNDS_STATUS
002D50r 2  A9 FF        	lda #$ff
002D52r 2  38           	sec
002D53r 2  ED rr rr     	sbc sndtyp
002D56r 2  4A           	lsr
002D57r 2  4A           	lsr
002D58r 2  09 C0        	ora #%11000000
002D5Ar 2  8D 0C 90     	sta RegC
002D5Dr 2  4C rr rr     	jmp endaudiotype
002D60r 2               
002D60r 2               ; CRASH command:
002D60r 2               ; enable sound on channel 3
002D60r 2               ; range 128-255
002D60r 2               
002D60r 2               crashaudio:
002D60r 2  AD 0E 90     	lda RegE
002D63r 2  09 0F        	ora #$0f
002D65r 2  8D 0E 90     	sta RegE
002D68r 2  A5 rr        	lda SOUNDS_STATUS
002D6Ar 2  09 80        	ora #%10000000
002D6Cr 2  85 rr        	sta SOUNDS_STATUS
002D6Er 2  A9 FF        	lda #$ff
002D70r 2  38           	sec
002D71r 2  ED rr rr     	sbc sndtyp
002D74r 2  09 80        	ora #%10000000
002D76r 2  8D 0D 90     	sta RegD
002D79r 2               
002D79r 2               endaudiotype:
002D79r 2  CE rr rr     	dec sndtyp
002D7Cr 2  F0 07        	beq sndskip
002D7Er 2  C9 80        	cmp #128
002D80r 2  F0 03        	beq sndskip
002D82r 2  4C rr rr     	jmp sndloop
002D85r 2               
002D85r 2               ; disable sound
002D85r 2               
002D85r 2               sndskip:
002D85r 2  24 rr        	bit SOUNDS_STATUS
002D87r 2  50 0B        	bvc :+
002D89r 2  A5 rr        	lda SOUNDS_STATUS
002D8Br 2  29 BF        	and #%10111111
002D8Dr 2  85 rr        	sta SOUNDS_STATUS
002D8Fr 2  A9 00        	lda #$00
002D91r 2  8D 0C 90     	sta RegC
002D94r 2               :
002D94r 2  24 rr        	bit SOUNDS_STATUS
002D96r 2  10 0B        	bpl :+
002D98r 2               
002D98r 2  A5 rr        	lda SOUNDS_STATUS
002D9Ar 2  29 7F        	and #%01111111
002D9Cr 2  85 rr        	sta SOUNDS_STATUS
002D9Er 2  A9 00        	lda #$00
002DA0r 2  8D 0D 90     	sta RegD
002DA3r 2               :
002DA3r 2  68           	pla
002DA4r 2  AA           	tax
002DA5r 2  68           	pla
002DA6r 2  A8           	tay
002DA7r 2  68           	pla
002DA8r 2  60           	rts
002DA9r 2               
002DA9r 2  00           sndtyp:		.byte 0		; Beep sound parameter
002DAAr 2               
002DAAr 2               ;========================================================
002DAAr 2               ; SPRITE HANDLING ROUTINES
002DAAr 2               ;========================================================
002DAAr 2               
002DAAr 2               ;----------------------------------------------------
002DAAr 2               ; SPRITE
002DAAr 2               ;
002DAAr 2               ; Draw object sprite
002DAAr 2               ;----------------------------------------------------
002DAAr 2               
002DAAr 2               .if oflag
002DAAr 2               sprite:
002DAAr 2               	stx xtmp		; Save X-reg
002DAAr 2               	jsr scadd 		; get screen address in scraddr.
002DAAr 2               
002DAAr 2               	lda dispx 		; x position.
002DAAr 2               	and #7 			; position straddling cells.
002DAAr 2               	sta z80_b		; store in b register.
002DAAr 2               
002DAAr 2               	lda z80_l		; store sprite graphic address.
002DAAr 2               	sta sprit1+1
002DAAr 2               	sta sprit2+1
002DAAr 2               	lda z80_h
002DAAr 2               	sta sprit1+2
002DAAr 2               	sta sprit2+2
002DAAr 2               
002DAAr 2               	ldx #0			; pixel height.
002DAAr 2               	ldy #0
002DAAr 2               sprit1:
002DAAr 2               	lda objdta,x		; fetch first byte.
002DAAr 2               	sta spr
002DAAr 2               	inx
002DAAr 2               sprit2:
002DAAr 2               	lda objdta,x
002DAAr 2               	sta spr+1
002DAAr 2               
002DAAr 2               	lda #0
002DAAr 2               	sta spr+2
002DAAr 2               	jsr sprit7		; shift sprite
002DAAr 2               
002DAAr 2               	lda spr			; fetch graphic.
002DAAr 2               	ldy #0			; _BEEB
002DAAr 2               	eor (scraddr),y		; merge with screen image.
002DAAr 2               	sta (scraddr),y		; write to screen.
002DAAr 2               
002DAAr 2               	lda spr+1		; fetch graphic.
002DAAr 2               	ldy #16			; _BEEB
002DAAr 2               	eor (scraddr),y		; merge with screen image.
002DAAr 2               	sta (scraddr),y		; write to screen.
002DAAr 2               
002DAAr 2               	lda spr+2		; fetch graphic.
002DAAr 2               	ldy #32			; _BEEB
002DAAr 2               	eor (scraddr),y		; merge with screen image.
002DAAr 2               	sta (scraddr),y		; write to screen.
002DAAr 2               
002DAAr 2               	jsr nline
002DAAr 2               
002DAAr 2               	inx			; next source byte.
002DAAr 2               	cpx #32
002DAAr 2               	bne sprit1		; repeat
002DAAr 2               
002DAAr 2               	ldx xtmp		; retreive X-reg
002DAAr 2               	rts
002DAAr 2               
002DAAr 2               .endif
002DAAr 2               
002DAAr 2               ;------------------------------------------------------------------
002DAAr 2               ; SCADD
002DAAr 2               ;
002DAAr 2               ; This routine returns a screen address for X,Y in scraddr.
002DAAr 2               ;------------------------------------------------------------------
002DAAr 2               
002DAAr 2               scadd:
002DAAr 2  A5 rr        	lda dispx		; get x
002DACr 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
002DAEr 2  85 rr        	sta scraddr		; set lb scraddr
002DB0r 2  A9 00        	lda #0
002DB2r 2  85 rr        	sta scraddr+1		; set hb scraddr
002DB4r 2  06 rr        	asl scraddr		; multiply X by 2
002DB6r 2  26 rr        	rol scraddr+1
002DB8r 2               
002DB8r 2               ; Add line address Y pos to X
002DB8r 2               
002DB8r 2  A6 rr        	ldx dispy		; get row address Y pos
002DBAr 2  18           	clc
002DBBr 2  A5 rr        	lda scraddr
002DBDr 2  7D 00 07     	adc SCADTB_lb,x
002DC0r 2  85 rr        	sta scraddr
002DC2r 2  A5 rr        	lda scraddr+1
002DC4r 2  7D 00 08     	adc SCADTB_hb,x
002DC7r 2  85 rr        	sta scraddr+1
002DC9r 2               
002DC9r 2  60           	rts
002DCAr 2               
002DCAr 2               ;------------------------------------------------------------------
002DCAr 2               ; SSPRIA
002DCAr 2               ;
002DCAr 2               ; Erase single sprite, old (ix+0).
002DCAr 2               ;------------------------------------------------------------------
002DCAr 2               
002DCAr 2               sspria:
002DCAr 2  20 rr rr     	jsr gsprad		; get old sprite address.
002DCDr 2               sspri2:
002DCDr 2               .if rflag
002DCDr 2               	lda z80_e		; 3c
002DCDr 2               	sta dline_spraddr1+1	; 4c
002DCDr 2               	sta dline_spraddr2+1	; 4c
002DCDr 2               	lda z80_d		; 3c
002DCDr 2               	sta dline_spraddr1+2	; 4c
002DCDr 2               	sta dline_spraddr2+2	; 4c
002DCDr 2               
002DCDr 2               	ldx sprshft
002DCDr 2               	lda shift_table,x
002DCDr 2               	sta dline_shift1+1
002DCDr 2               	sta dline_shift2+1
002DCDr 2               	lda shift_table+1,x
002DCDr 2               	sta dline_shift1+2
002DCDr 2               	sta dline_shift2+2
002DCDr 2               
002DCDr 2               	ldx #0			; byte counter.
002DCDr 2               sspri0:
002DCDr 2               	jsr dline		; draw a line.
002DCDr 2                 .if bflag
002DCDr 2               	cpx #48			; big sprites have 24 bytes
002DCDr 2                 .else
002DCDr 2               	cpx #32			; normal sprites have 32 bytes
002DCDr 2                 .endif
002DCDr 2               	bne sspri0		; repeat 16 times x 2 bytes
002DCDr 2               	rts
002DCDr 2               .else
002DCDr 2                 .if bflag
002DCDr 2               	lda #24			; big sprites have 24 lines
002DCDr 2                 .else
002DCDr 2  A9 10        	lda #16			; normal sprites have 16 lines.
002DCFr 2                 .endif
002DCFr 2  8D rr rr     	sta acnt
002DD2r 2               sspri0:
002DD2r 2  20 rr rr     	jsr dline		; draw a line.
002DD5r 2  CE rr rr     	dec acnt
002DD8r 2  D0 F8        	bne sspri0		; repeat 16 times
002DDAr 2  60           	rts
002DDBr 2               
002DDBr 2  00           acnt:	.byte 0			; line counter
002DDCr 2               
002DDCr 2               .endif
002DDCr 2               
002DDCr 2               ;------------------------------------------------------------------
002DDCr 2               ; SSPRIB
002DDCr 2               ;
002DDCr 2               ; Display single sprite, new (ix+5).
002DDCr 2               ;------------------------------------------------------------------
002DDCr 2               
002DDCr 2               ssprib:
002DDCr 2  20 rr rr     	jsr gspran 		; get new sprite address.
002DDFr 2  4C rr rr     	jmp sspri2		; Display sprite
002DE2r 2               
002DE2r 2               ;------------------------------------------------------------------
002DE2r 2               ; SSPRIC
002DE2r 2               ;
002DE2r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
002DE2r 2               ;------------------------------------------------------------------
002DE2r 2               
002DE2r 2               sspric:
002DE2r 2  AD rr rr     	lda fontcol			; Background colour
002DE5r 2  85 rr        	sta z80_c
002DE7r 2  20 rr rr     	jsr cspr_old
002DEAr 2               
002DEAr 2  A0 11        	ldy #17
002DECr 2  B1 rr        	lda (z80_ix),y
002DEEr 2  85 rr        	sta z80_c
002DF0r 2  20 rr rr     	jsr cspr_new
002DF3r 2               
002DF3r 2               .if rflag
002DF3r 2               	jsr gsprad 		; get old sprite address.
002DF3r 2               
002DF3r 2               	lda z80_e		; 3c
002DF3r 2               	sta ddline_spraddr3+1	; 4c
002DF3r 2               	sta ddline_spraddr4+1	; 4c
002DF3r 2               
002DF3r 2               	lda z80_d		; 3c
002DF3r 2               	sta ddline_spraddr3+2	; 4c
002DF3r 2               	sta ddline_spraddr4+2	; 4c
002DF3r 2               
002DF3r 2               	ldx sprshft		; set spriteshift table addresses
002DF3r 2               	lda shift_table,x
002DF3r 2               	sta ddline_shift3+1
002DF3r 2               	sta ddline_shift4+1
002DF3r 2               	lda shift_table+1,x
002DF3r 2               	sta ddline_shift3+2
002DF3r 2               	sta ddline_shift4+2
002DF3r 2               
002DF3r 2               	jsr exx  		; store addresses.
002DF3r 2               	jsr gspran 		; get new sprite addresses.
002DF3r 2               
002DF3r 2               	lda z80_e		; 3c
002DF3r 2               	sta ddline_spraddr1+1	; 4c
002DF3r 2               	sta ddline_spraddr2+1	; 4c
002DF3r 2               
002DF3r 2               	lda z80_d		; 3c
002DF3r 2               	sta ddline_spraddr1+2	; 4c
002DF3r 2               	sta ddline_spraddr2+2	; 4c
002DF3r 2               
002DF3r 2               	ldx sprshft
002DF3r 2               	lda shift_table,x
002DF3r 2               	sta ddline_shift1+1
002DF3r 2               	sta ddline_shift2+1
002DF3r 2               	lda shift_table+1,x
002DF3r 2               	sta ddline_shift1+2
002DF3r 2               	sta ddline_shift2+2
002DF3r 2               
002DF3r 2               	ldx #0
002DF3r 2               lloop:
002DF3r 2               	jsr ddline 		; draw a line.
002DF3r 2                 .if bflag
002DF3r 2               	cpx #48
002DF3r 2                 .else
002DF3r 2               	cpx #32
002DF3r 2                 .endif
002DF3r 2               	bne lloop
002DF3r 2               	rts
002DF3r 2               
002DF3r 2               shift_table:
002DF3r 2               	.word shift0
002DF3r 2               	.word shift2
002DF3r 2               	.word shift4
002DF3r 2               	.word shift6
002DF3r 2               
002DF3r 2               ;------------------------------------------------------------------
002DF3r 2               ; DLINE
002DF3r 2               ;
002DF3r 2               ; Draw a sprite line, now work out next target address.
002DF3r 2               ;
002DF3r 2               ; Input:
002DF3r 2               ;  B  = right mask
002DF3r 2               ;  C  = left mask
002DF3r 2               ;  DE = spriteaddress
002DF3r 2               ;  scraddr = screen address
002DF3r 2               ;------------------------------------------------------------------
002DF3r 2               
002DF3r 2               dline:
002DF3r 2               
002DF3r 2               dline_spraddr1:
002DF3r 2               	ldy $ffff,x 		; get graphic data as pointer.
002DF3r 2               dline_shift1:
002DF3r 2               	lda $ffff,y		; get pre-shifted data
002DF3r 2               	sta sprtmp		; save byte
002DF3r 2               	and z80_c 		; mask right for left byte
002DF3r 2               
002DF3r 2               	ldy #0
002DF3r 2               	eor (scraddr),y 	; XOR with what's there.
002DF3r 2               	sta (scraddr),y 	; display left byte
002DF3r 2               
002DF3r 2               ; carry to next screen byte
002DF3r 2               
002DF3r 2               	lda sprtmp		; fetch data.
002DF3r 2               	and z80_b 		; mask for left part
002DF3r 2               	sta sprtmp
002DF3r 2               
002DF3r 2               ; middle screen byte
002DF3r 2               
002DF3r 2               	inx
002DF3r 2               dline_spraddr2:
002DF3r 2               	ldy $ffff,x 		; second bit of data.
002DF3r 2               dline_shift2:
002DF3r 2               	lda $ffff,y
002DF3r 2               	sta sprtmp2
002DF3r 2               	and z80_c 		; mask away what's not needed.
002DF3r 2               	ora sprtmp
002DF3r 2               	ldy #16
002DF3r 2               	eor (scraddr),y 	; XOR with what's there.
002DF3r 2               	sta (scraddr),y 	; display middle bye.
002DF3r 2               
002DF3r 2               ; carry to last screen byte
002DF3r 2               
002DF3r 2               	lda sprtmp2
002DF3r 2               	and z80_b 		; mask away unwanted
002DF3r 2               
002DF3r 2               	ldy #32
002DF3r 2               	eor (scraddr),y 	; XOR with what's there.
002DF3r 2               	sta (scraddr),y 	; display right byte.
002DF3r 2               
002DF3r 2               	inx
002DF3r 2               .else
002DF3r 2               
002DF3r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
002DF6r 2  20 rr rr     	jsr exx  		; store addresses.
002DF9r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
002DFCr 2               
002DFCr 2               .if bflag
002DFCr 2               	lda #23
002DFCr 2               .else
002DFCr 2  A9 0F        	lda #15
002DFEr 2               .endif
002DFEr 2  85 rr        	sta ccnt
002E00r 2               lloop:
002E00r 2  20 rr rr     	jsr dline 		; draw a line.
002E03r 2  20 rr rr     	jsr exx  		; restore old addresses.
002E06r 2  20 rr rr     	jsr dline 		; delete a line.
002E09r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
002E0Cr 2  C6 rr        	dec ccnt
002E0Er 2  D0 F0        	bne lloop
002E10r 2               
002E10r 2  20 rr rr     	jsr dline		; draw a line.
002E13r 2  20 rr rr     	jsr exx 		; restore old addresses.
002E16r 2               
002E16r 2               ;-------------------------------------------------------------
002E16r 2               ; Drop through.
002E16r 2               ; Line drawn, now work out next target address.
002E16r 2               ;
002E16r 2               ; Input:
002E16r 2               ;  B  = right mask
002E16r 2               ;  C  = left mask
002E16r 2               ;  DE = spriteaddress
002E16r 2               ;  scraddr = screen address
002E16r 2               ;-------------------------------------------------------------
002E16r 2               
002E16r 2               dline:
002E16r 2  A0 00        	ldy #0
002E18r 2  B1 rr        	lda (z80_de),y 		; graphic data.
002E1Ar 2  48           	pha
002E1Br 2  25 rr        	and z80_c 		; mask away what's not needed.
002E1Dr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002E1Fr 2  91 rr        	sta (scraddr),y 	; left byte on screen.
002E21r 2               
002E21r 2  68           	pla
002E22r 2  25 rr        	and z80_b 		; mask away unwanted bits.
002E24r 2  A0 20        	ldy #32
002E26r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002E28r 2  91 rr        	sta (scraddr),y 	; right byte on screen
002E2Ar 2               
002E2Ar 2  E6 rr        	inc z80_e 		; next graphic.
002E2Cr 2  D0 02        	bne :+
002E2Er 2  E6 rr        	inc z80_d
002E30r 2               :
002E30r 2               ; _BEEB screen arrangement
002E30r 2               ;	sec
002E30r 2               ;	lda scraddr 		; one character cell to the left.
002E30r 2               ;	sbc #8
002E30r 2               ;	sta scraddr
002E30r 2               ;	lda scraddr+1
002E30r 2               ;	sbc #0
002E30r 2               ;	sta scraddr+1
002E30r 2  A0 00        	ldy #0
002E32r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
002E34r 2  A0 10        	ldy #16
002E36r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002E38r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
002E3Ar 2               
002E3Ar 2  E6 rr        	inc z80_e 		; point to next line of data.
002E3Cr 2  D0 02        	bne :+
002E3Er 2  E6 rr        	inc z80_d
002E40r 2               :
002E40r 2               ; _BEEB screen arrangement
002E40r 2               ;	sec
002E40r 2               ;	lda scraddr 		; another char left.
002E40r 2               ;	sbc #8
002E40r 2               ;	sta scraddr
002E40r 2               ;	lda scraddr+1
002E40r 2               ;	sbc #0
002E40r 2               ;	sta scraddr+1
002E40r 2               .endif
002E40r 2               
002E40r 2               ;----------------------------------------------------------------------
002E40r 2               ; Line drawn, now work out next target address.
002E40r 2               ;----------------------------------------------------------------------
002E40r 2               
002E40r 2               ; _BEEB screen arrangement
002E40r 2               
002E40r 2               nline:
002E40r 2  A5 rr        	lda scraddr 			; get low byte of address.
002E42r 2  29 0F        	and #15
002E44r 2  C9 0F        	cmp #15				; is this last line of row?
002E46r 2  F0 03        	beq beeb_next_row
002E48r 2               
002E48r 2               	; within same row
002E48r 2  E6 rr        	inc scraddr			; new low byte of address.
002E4Ar 2  60           	rts
002E4Br 2               
002E4Br 2               beeb_next_row:
002E4Br 2  18           	clc
002E4Cr 2  A5 rr        	lda scraddr
002E4Er 2  69 51        	adc #<(ScreenRowBytes-15)
002E50r 2  85 rr        	sta scraddr			; new low byte of address.
002E52r 2  A5 rr        	lda scraddr+1
002E54r 2  69 01        	adc #>(ScreenRowBytes-15)
002E56r 2  85 rr        	sta scraddr+1			; new high byte of address.
002E58r 2  60           	rts
002E59r 2               
002E59r 2               .if rflag
002E59r 2               ;-------------------------------------------------------------
002E59r 2               ; Drop through.
002E59r 2               ; Line drawn, now work out next target address.
002E59r 2               ;
002E59r 2               ; Input:
002E59r 2               ;  B  = right mask
002E59r 2               ;  C  = left mask
002E59r 2               ;  DE = spriteaddress
002E59r 2               ;  scraddr = screen address
002E59r 2               ;-------------------------------------------------------------
002E59r 2               
002E59r 2               ddline:
002E59r 2               
002E59r 2               ; NEW SPRITE
002E59r 2               
002E59r 2               ; first screen byte
002E59r 2               
002E59r 2               ddline_spraddr1:
002E59r 2               	ldy $ffff,x 		; graphic data.
002E59r 2               ddline_shift1:
002E59r 2               	lda $ffff,y
002E59r 2               	sta sprtmp
002E59r 2               	and z80_c 			; mask away what's not needed.
002E59r 2               
002E59r 2               	ldy #0
002E59r 2               	eor (scraddr),y 	; XOR with what's there.
002E59r 2               	sta (scraddr),y 	; bung it in.
002E59r 2               
002E59r 2               ; carry to next screen byte
002E59r 2               
002E59r 2               	lda sprtmp			; fetch data.
002E59r 2               	and z80_b 			; mask away unwanted
002E59r 2               	sta sprtmp
002E59r 2               
002E59r 2               ; middle screen byte
002E59r 2               
002E59r 2               	inx
002E59r 2               ddline_spraddr2:
002E59r 2               	ldy $ffff,x 		; second bit of data.
002E59r 2               ddline_shift2:
002E59r 2               	lda $ffff,y
002E59r 2               	sta sprtmp2
002E59r 2               	and z80_c 			; mask away what's not needed.
002E59r 2               	ora sprtmp
002E59r 2               
002E59r 2               	ldy #16
002E59r 2               	eor (scraddr),y 	; XOR with what's there.
002E59r 2               	sta (scraddr),y 	; bung it in.
002E59r 2               
002E59r 2               ; carry to last screen byte
002E59r 2               
002E59r 2               	lda sprtmp2
002E59r 2               	and z80_b 			; mask away unwanted
002E59r 2               
002E59r 2               	ldy #32
002E59r 2               	eor (scraddr),y 	; XOR with what's there.
002E59r 2               	sta (scraddr),y 	; bung it in.
002E59r 2               
002E59r 2               ; _BEEB next row
002E59r 2               
002E59r 2               	lda scraddr 		; get low byte of address.
002E59r 2               	and #15
002E59r 2               	cmp #15				; is this last line of row?
002E59r 2               	beq :+
002E59r 2               
002E59r 2               	; within same row can't increment page
002E59r 2               	inc scraddr			; new low byte of address.
002E59r 2               	bne ddline2
002E59r 2               
002E59r 2               :
002E59r 2               	clc
002E59r 2               	lda scraddr
002E59r 2               	adc #<(ScreenRowBytes-15)
002E59r 2               	sta scraddr			; new low byte of address.
002E59r 2               	lda scraddr+1
002E59r 2               	adc #>(ScreenRowBytes-15)
002E59r 2               	sta scraddr+1		; new high byte of address.
002E59r 2               
002E59r 2               ; OLD SPRITE
002E59r 2               
002E59r 2               ddline2:
002E59r 2               
002E59r 2               ; still first row but different data!
002E59r 2               
002E59r 2               	dex
002E59r 2               
002E59r 2               ; first screen byte
002E59r 2               
002E59r 2               ddline_spraddr3:
002E59r 2               	ldy $ffff,x			; graphic data.
002E59r 2               ddline_shift3:
002E59r 2               	lda $ffff,y
002E59r 2               	sta sprtmp
002E59r 2               	and z80_cp 			; mask away what's not needed.
002E59r 2               
002E59r 2               	ldy #0
002E59r 2               	eor (z80_hlp),y 	; XOR with what's there.
002E59r 2               	sta (z80_hlp),y 	; bung it in.
002E59r 2               
002E59r 2               ; carry to next screen byte
002E59r 2               
002E59r 2               	lda sprtmp			; fetch data.
002E59r 2               	and z80_bp 			; mask away unwanted
002E59r 2               	sta sprtmp
002E59r 2               
002E59r 2               ; middle screen byte
002E59r 2               
002E59r 2               	inx
002E59r 2               ddline_spraddr4:
002E59r 2               	ldy $ffff,x 		; second bit of data.
002E59r 2               ddline_shift4:
002E59r 2               	lda $ffff,y
002E59r 2               	sta sprtmp2
002E59r 2               	and z80_cp 			; mask away what's not needed.
002E59r 2               	ora sprtmp
002E59r 2               
002E59r 2               	ldy #16
002E59r 2               	eor (z80_hlp),y 	; XOR with what's there.
002E59r 2               	sta (z80_hlp),y 	; bung it in.
002E59r 2               
002E59r 2               ; last screen byte
002E59r 2               
002E59r 2               	lda sprtmp2			; fetch data.
002E59r 2               	and z80_bp 			; mask away unwanted
002E59r 2               
002E59r 2               	ldy #32
002E59r 2               	eor (z80_hlp),y 	; XOR with what's there.
002E59r 2               	sta (z80_hlp),y 	; bung it in.
002E59r 2               
002E59r 2               ; next row of sprite data
002E59r 2               
002E59r 2               	inx
002E59r 2               
002E59r 2               ; _BEEB screen arrangement
002E59r 2               
002E59r 2               	lda z80_lp 			; get low byte of address.
002E59r 2               	and #15
002E59r 2               	cmp #15				; is this last line of row?
002E59r 2               	beq :+
002E59r 2               
002E59r 2               	; within same row can't increment page
002E59r 2               	inc z80_lp			; new low byte of address.
002E59r 2               	rts
002E59r 2               
002E59r 2               :
002E59r 2               	clc
002E59r 2               	lda z80_lp
002E59r 2               	adc #<(ScreenRowBytes-15)
002E59r 2               	sta z80_lp			; new low byte of address.
002E59r 2               	lda z80_lp+1
002E59r 2               	adc #>(ScreenRowBytes-15)
002E59r 2               	sta z80_lp+1		; new high byte of address.
002E59r 2               	rts
002E59r 2               .endif
002E59r 2               
002E59r 2               ;----------------------------------------------------
002E59r 2               ; SPRINTEINK
002E59r 2               ;----------------------------------------------------
002E59r 2               
002E59r 2               cspr:
002E59r 2  A5 rr        	lda z80_c
002E5Br 2  A0 11        	ldy #17
002E5Dr 2  91 rr        	sta (z80_ix),y
002E5Fr 2  20 rr rr     	jsr cspr_new
002E62r 2  60           	rts
002E63r 2               
002E63r 2               cspr_new:
002E63r 2  A0 08        	ldy #8
002E65r 2  B1 rr        	lda (z80_ix),y			; Get sprite y
002E67r 2  4C rr rr     	jmp cspr_go
002E6Ar 2               cspr_old:
002E6Ar 2  A0 03        	ldy #3
002E6Cr 2  B1 rr        	lda(z80_ix),y
002E6Er 2               cspr_go:
002E6Er 2  85 rr        	sta dispy
002E70r 2  C9 B1        	cmp #8*ScrHeight+1		; Check if on screen
002E72r 2  90 01        	bcc :+
002E74r 2  60           	rts
002E75r 2               :
002E75r 2  C8           	iny
002E76r 2  B1 rr        	lda (z80_ix),y			; Get sprite x
002E78r 2  85 rr        	sta dispx
002E7Ar 2               
002E7Ar 2               ; Calculate colour attribte address in scraddr
002E7Ar 2               
002E7Ar 2  20 rr rr     	jsr coladdr
002E7Dr 2               
002E7Dr 2               ; Set number of rows
002E7Dr 2               
002E7Dr 2  A9 02        	lda #2
002E7Fr 2  85 rr        	sta z80_b
002E81r 2  A5 rr        	lda dispy
002E83r 2  29 0F        	and #15
002E85r 2  D0 02        	bne :+
002E87r 2  C6 rr        	dec z80_b
002E89r 2               :
002E89r 2               ; Loop to colour row blocks
002E89r 2               
002E89r 2               cspr0:
002E89r 2  A0 00        	ldy #0
002E8Br 2  A5 rr        	lda z80_c
002E8Dr 2  91 rr        	sta (scraddr),y
002E8Fr 2               cspr6:
002E8Fr 2  A0 01        	ldy #1
002E91r 2  91 rr        	sta (scraddr),y
002E93r 2               cspr7:
002E93r 2  A5 rr        	lda dispx
002E95r 2  29 07        	and #7
002E97r 2  F0 06        	beq cspr1
002E99r 2               
002E99r 2  A0 02        	ldy #2
002E9Br 2  A5 rr        	lda z80_c
002E9Dr 2  91 rr        	sta (scraddr),y
002E9Fr 2               cspr1:
002E9Fr 2  A5 rr        	lda scraddr
002EA1r 2  18           	clc
002EA2r 2  69 16        	adc #22
002EA4r 2  85 rr        	sta scraddr
002EA6r 2  90 02        	bcc :+
002EA8r 2  E6 rr        	inc scraddr+1
002EAAr 2               :
002EAAr 2  C6 rr        	dec z80_b
002EACr 2  D0 DB        	bne cspr0
002EAEr 2  60           	rts
002EAFr 2               
002EAFr 2               ; Calculate colour attribte address
002EAFr 2               ; scraddr = COLOR + dispy/16 + dispx/8
002EAFr 2               
002EAFr 2               coladdr:
002EAFr 2  A5 rr        	lda dispy
002EB1r 2  4A           	lsr a
002EB2r 2  4A           	lsr a
002EB3r 2  4A           	lsr a
002EB4r 2  4A           	lsr a
002EB5r 2  A8           	tay
002EB6r 2  B9 55 0A     	lda COLATTTB_hb,y
002EB9r 2  85 rr        	sta scraddr+1
002EBBr 2  B9 4A 0A     	lda COLATTTB_lb,y
002EBEr 2  85 rr        	sta scraddr
002EC0r 2  A5 rr        	lda dispx
002EC2r 2  4A           	lsr a
002EC3r 2  4A           	lsr a
002EC4r 2  4A           	lsr a
002EC5r 2  18           	clc
002EC6r 2  65 rr        	adc scraddr
002EC8r 2  85 rr        	sta scraddr
002ECAr 2  90 02        	bcc :+
002ECCr 2  E6 rr        	inc scraddr+1
002ECEr 2               :
002ECEr 2  60           	rts
002ECFr 2               
002ECFr 2               ;----------------------------------------------------
002ECFr 2               ; Display character in A at dispx,dispy.
002ECFr 2               ;
002ECFr 2               ; Input:
002ECFr 2               ;  A 	   = character to print
002ECFr 2               ;----------------------------------------------------
002ECFr 2               
002ECFr 2               pchar:
002ECFr 2  85 rr        	sta fntaddr
002ED1r 2  A9 00        	lda #0
002ED3r 2  85 rr        	sta fntaddr+1
002ED5r 2  06 rr        	asl fntaddr  		; multiply char by 8.
002ED7r 2  26 rr        	rol fntaddr+1
002ED9r 2  06 rr        	asl fntaddr
002EDBr 2  26 rr        	rol fntaddr+1
002EDDr 2  06 rr        	asl fntaddr
002EDFr 2  26 rr        	rol fntaddr+1
002EE1r 2               
002EE1r 2  A5 rr        	lda fntaddr
002EE3r 2  18           	clc
002EE4r 2  69 rr        	adc #<(FONT-256)
002EE6r 2  85 rr        	sta fntaddr		; that's the low byte.
002EE8r 2  A5 rr        	lda fntaddr+1
002EEAr 2  69 rr        	adc #>(FONT-256)
002EECr 2  85 rr        	sta fntaddr+1		; add displacement.
002EEEr 2               
002EEEr 2               pchark:
002EEEr 2  20 rr rr     	jsr gaadd		; set colour attribute
002EF1r 2  AD rr rr     	lda fontcol
002EF4r 2  A0 00        	ldy #0
002EF6r 2  91 rr        	sta (bufaddr),y
002EF8r 2               
002EF8r 2  20 rr rr     	jsr gprad		; get screen address.
002EFBr 2  A2 07        	ldx #7			; lines to write.
002EFDr 2               pchar0:
002EFDr 2  A0 00        	ldy #0
002EFFr 2  B1 rr        	lda (fntaddr),y 	; get image byte.
002F01r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
002F04r 2               .if iflag
002F04r 2               	eor #TxtInvert		; Invert
002F04r 2               .endif
002F04r 2  91 rr        	sta (scraddr),y 	; copy to screen.
002F06r 2  E6 rr        	inc fntaddr		; next image byte.
002F08r 2  D0 02        	bne :+
002F0Ar 2  E6 rr        	inc fntaddr+1
002F0Cr 2               :
002F0Cr 2  CA           	dex			; next screen row down.
002F0Dr 2  10 EE        	bpl pchar0		; repeat.
002F0Fr 2               
002F0Fr 2  60           	rts
002F10r 2               
002F10r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
002F14r 2  03 02 01 00  
002F18r 2               
002F18r 2               ;----------------------------------------------------
002F18r 2               ; LoadFile
002F18r 2               ;----------------------------------------------------
002F18r 2               
002F18r 2               loadfile:
002F18r 2  AA           	tax
002F19r 2  A9 rr        	lda #<msgdat		; pointer to messages.
002F1Br 2  85 rr        	sta z80_l
002F1Dr 2  A9 rr        	lda #>msgdat
002F1Fr 2  85 rr        	sta z80_h
002F21r 2  20 rr rr     	jsr getwrd		; get message number.
002F24r 2               
002F24r 2               ; Init screen for NTSC
002F24r 2               ; this sets the background and border color of the screen
002F24r 2               ; in this case border black and background black
002F24r 2               
002F24r 2  A9 08        	lda #%00001000
002F26r 2  8D 0F 90     	sta RegF
002F29r 2               
002F29r 2               ; z80_hl should point to the textstring now.
002F29r 2               ; Read filename +length into buffer
002F29r 2               
002F29r 2  A0 00        	ldy #0
002F2Br 2               nameloop:
002F2Br 2  B1 rr        	lda (z80_hl),y
002F2Dr 2  30 07        	bmi lastchar
002F2Fr 2  99 rr rr     	sta filename,y
002F32r 2  C8           	iny
002F33r 2  4C rr rr     	jmp nameloop
002F36r 2               lastchar:
002F36r 2  29 7F        	and #$7f
002F38r 2  99 rr rr     	sta filename,y
002F3Br 2  C8           	iny
002F3Cr 2  8C rr rr     	sty filelen
002F3Fr 2               
002F3Fr 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
002F3Fr 2               ;                       usually the first drive, and y set to 1 reads from the header
002F3Fr 2               ;                       of the file the location where to save it)
002F3Fr 2  A9 01        	lda #1
002F41r 2  A2 08        	ldx #8		; Disk device
002F43r 2  A0 01        	ldy #1
002F45r 2  20 BA FF     	jsr $ffba
002F48r 2               
002F48r 2               ; Load the file name (in accumulator the size of the string
002F48r 2               ;                      containing the name, x low address for FileName,
002F48r 2               ;                      y high address for FileName)
002F48r 2  AD rr rr     	lda filelen
002F4Br 2  A2 rr        	ldx #<filename
002F4Dr 2  A0 rr        	ldy #>filename
002F4Fr 2  20 BD FF     	jsr $ffbd
002F52r 2               
002F52r 2               ; load from disk to ram
002F52r 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
002F54r 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
002F56r 2  A0 00        	ldy #>$ff	; target location high (got from header)
002F58r 2  20 D5 FF     	jsr $ffd5
002F5Br 2               
002F5Br 2  60           	rts
002F5Cr 2               
002F5Cr 2               filename:
002F5Cr 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002F60r 2  00 00 00 00  
002F64r 2  00 00 00 00  
002F6Cr 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002F70r 2  00 00 00 00  
002F74r 2  00 00 00 00  
002F7Cr 2               filelen:
002F7Cr 2  00           	.byte 0
002F7Dr 2               
002F7Dr 2               ;----------------------------------------------------
002F7Dr 2               ; Sound
002F7Dr 2               ;----------------------------------------------------
002F7Dr 2               
002F7Dr 2               ; Actual memory locations
002F7Dr 2               
002F7Dr 2               CHANNEL1_ENABLED  = $ea
002F7Dr 2               CHANNEL2_ENABLED  = $eb
002F7Dr 2               CHANNEL3_ENABLED  = $ec
002F7Dr 2               CHANNEL4_ENABLED  = $ed
002F7Dr 2               MUSIC_ON		  = $ee
002F7Dr 2               
002F7Dr 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
002F81r 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
002F85r 2  DE           SetSoundTone: 		.byte $de
002F86r 2               
002F86r 2               ;--------------------------------------------
002F86r 2               ;                      SOUND    0   1   2   3
002F86r 2               ;--------------------------------------------
002F86r 2  C8 C8 DE DC  SndTone:		.byte 200,200,222,220
002F8Ar 2  01 00 03 01  SndChannel:		.byte   1,  0,  3,  1
002F8Er 2  3C 3C 3C 28  SndDuration:		.byte  60, 60, 60, 40
002F92r 2               
002F92r 2               ;--------------------------------------------
002F92r 2               ; Called by SOUND with parameter in A
002F92r 2               ;--------------------------------------------
002F92r 2               
002F92r 2               playsound:
002F92r 2  A8           	tay
002F93r 2  B9 rr rr     	lda SndTone,y		; lda $a0
002F96r 2  8D rr rr     	sta SetSoundTone	; sta SetSoundTone
002F99r 2  B9 rr rr     	lda SndDuration,y	; lda $a2
002F9Cr 2  BE rr rr     	ldx SndChannel,y	; ldx $a1
002F9Fr 2  9D rr rr     	sta SetSoundDuration,x	; sta SetSoundDuration,x
002FA2r 2  B9 rr rr     	lda SndTone,y		; lda $a0
002FA5r 2  9D rr rr     	sta SetSoundVars,x	; sta SetSoundVars,x
002FA8r 2  60           	rts
002FA9r 2               
002FA9r 2               ;--------------------------------------------
002FA9r 2               ; Make sound
002FA9r 2               ; Called by vsync every frame
002FA9r 2               ;--------------------------------------------
002FA9r 2               
002FA9r 2               make_sound2:
002FA9r 2  A0 00        	ldy #$00
002FABr 2  AE rr rr     	ldx SetSoundTone
002FAEr 2  AD rr rr     	lda SetSoundVars
002FB1r 2  CD rr rr     	cmp SetSoundDuration
002FB4r 2  B0 1C        	bcs l0366
002FB6r 2               
002FB6r 2  AD rr rr     	lda SetSoundVars
002FB9r 2  CD rr rr     	cmp SetSoundDuration
002FBCr 2  D0 07        	bne :+
002FBEr 2  A5 EE        	lda MUSIC_ON
002FC0r 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
002FC2r 2  4C rr rr     	jmp l0374
002FC5r 2               :
002FC5r 2               
002FC5r 2  A9 00        	lda #$0
002FC7r 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
002FC9r 2  EE rr rr     	inc SetSoundVars
002FCCr 2  EE 0A 90     	inc RegA
002FCFr 2  4C rr rr     	jmp l0374
002FD2r 2               
002FD2r 2  8C 0A 90     l0366:	sty RegA
002FD5r 2  EC rr rr     	cpx SetSoundVars
002FD8r 2  D0 06        	bne l0374
002FDAr 2  8C rr rr     	sty SetSoundVars
002FDDr 2  8E 0A 90     	stx RegA
002FE0r 2               
002FE0r 2  AD rr rr     l0374:	lda SetSoundVars+1
002FE3r 2  CD rr rr     	cmp SetSoundDuration+1
002FE6r 2  D0 07        	bne :+
002FE8r 2  A5 EE        	lda MUSIC_ON
002FEAr 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 1
002FECr 2  4C rr rr     	jmp l0392
002FEFr 2               :
002FEFr 2  A9 00        	lda #$0
002FF1r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 2
002FF3r 2  AD rr rr     	lda SetSoundVars+1
002FF6r 2  CD rr rr     	cmp SetSoundDuration+1
002FF9r 2  B0 09        	bcs l0384
002FFBr 2  EE rr rr     	inc SetSoundVars+1
002FFEr 2  EE 0B 90     	inc RegB
003001r 2  4C rr rr     	jmp l0392
003004r 2               
003004r 2  8C 0B 90     l0384:	sty RegB
003007r 2  EC rr rr     	cpx SetSoundVars+1
00300Ar 2  D0 06        	bne l0392
00300Cr 2  8C rr rr     	sty SetSoundVars+1
00300Fr 2  8E 0B 90     	stx RegB
003012r 2               
003012r 2  AD rr rr     l0392:	lda SetSoundVars+2
003015r 2  CD rr rr     	cmp SetSoundDuration+2
003018r 2  D0 07        	bne :+
00301Ar 2  A5 EE        	lda MUSIC_ON
00301Cr 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 1
00301Er 2  4C rr rr     	jmp l03b0
003021r 2               :
003021r 2  A9 00        	lda #$0
003023r 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 3
003025r 2  AD rr rr     	lda SetSoundVars+2
003028r 2  CD rr rr     	cmp SetSoundDuration+2
00302Br 2  B0 09        	bcs l03a2
00302Dr 2  EE rr rr     	inc SetSoundVars+2
003030r 2  CE 0C 90     	dec RegC
003033r 2  4C rr rr     	jmp l03b0
003036r 2               
003036r 2  8C 0C 90     l03a2:	sty RegC
003039r 2  EC rr rr     	cpx SetSoundVars+2
00303Cr 2  D0 06        	bne l03b0
00303Er 2  8C rr rr     	sty SetSoundVars+2
003041r 2  8E 0C 90     	stx RegC
003044r 2               
003044r 2  AD rr rr     l03b0:	lda SetSoundVars+3
003047r 2  CD rr rr     	cmp SetSoundDuration+3
00304Ar 2  D0 07        	bne :+
00304Cr 2  A5 EE        	lda MUSIC_ON
00304Er 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 1
003050r 2  4C rr rr     	jmp l03d3
003053r 2               :
003053r 2               
003053r 2               	; lda SetSoundVars+3
003053r 2               	; cmp SetSoundDuration+3
003053r 2               	; beq l03e1
003053r 2               
003053r 2  A9 00        	lda #$0
003055r 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 4
003057r 2               
003057r 2  AD rr rr     	lda SetSoundVars+3
00305Ar 2  CD rr rr         cmp SetSoundDuration+3 ; $03b3 $03b4
00305Dr 2  B0 1C            bcs l03d3
00305Fr 2               
00305Fr 2  EE rr rr     	inc SetSoundVars+3
003062r 2  AD rr rr     	lda SetSoundVars+3
003065r 2  C9 16        	cmp #$16
003067r 2  D0 07        	bne l03c8
003069r 2  A9 B0        	lda #$b0
00306Br 2  8D 0D 90     	sta RegD
00306Er 2  F0 19        	beq l03e1
003070r 2  C9 2B        l03c8:	cmp #$2b
003072r 2  D0 15        	bne l03e1
003074r 2  A9 A0        	lda #$a0
003076r 2  8D 0D 90     	sta RegD
003079r 2  F0 0E        	beq l03e1
00307Br 2  8C 0D 90     l03d3:	sty RegD
00307Er 2  EC rr rr     	cpx SetSoundVars+3
003081r 2  D0 06        	bne l03e1
003083r 2  8C rr rr     	sty SetSoundVars+3
003086r 2  8E 0D 90     	stx RegD
003089r 2               
003089r 2  60           l03e1:	rts
00308Ar 2               
00308Ar 2               ;----------------------------------------------------
00308Ar 2               ; Set video registers
00308Ar 2               ;----------------------------------------------------
00308Ar 2               
00308Ar 2               SetReg:
00308Ar 2  8D rr rr     	sta mode
00308Dr 2  0A           	asl a
00308Er 2  18           	clc
00308Fr 2  6D rr rr     	adc crtflag
003092r 2  AA           	tax
003093r 2  BD rr rr     	lda centreX,x
003096r 2  8D 00 90     	sta Reg0
003099r 2  BD rr rr     	lda centreY,x
00309Cr 2  8D 01 90     	sta Reg1
00309Fr 2  BD rr rr     	lda scrW,x
0030A2r 2  8D 02 90     	sta Reg2
0030A5r 2  BD rr rr     	lda scrH,x
0030A8r 2  8D 03 90     	sta Reg3
0030ABr 2  BD rr rr     	lda RAMset,x
0030AEr 2  8D 05 90     	sta Reg5
0030B1r 2  60           	rts
0030B2r 2               
0030B2r 2  04 0C 06 0E  centreX:	.byte $04,$0c,$06,$0e
0030B6r 2  1B 26 18 24  centreY:	.byte $1b,$26,$18,$24
0030BAr 2  96 96 14 14  scrW:		.byte $96,$96,$14,$14
0030BEr 2  17 17 19 19  scrH:		.byte $17,$17,$19,$19
0030C2r 2  8C 8C CC CC  RAMset:		.byte $8c,$8c,$cc,$cc
0030C6r 2  84 A0 84 A0  BottomScr:	.byte $84,$a0,$84,$a0
0030CAr 2               
0030CAr 2               ;----------------------------------------------------
0030CAr 2               ; Display functions
0030CAr 2               ;
0030CAr 2               ; DISPLAYON   resets CentreY
0030CAr 2               ; DISPLAYOFF  locates screen below bottom
0030CAr 2               ; DISPLAYUP   scrolls screen up until default CentreY
0030CAr 2               ; DISPLAYDOWN scrolls screen down until below bottom
0030CAr 2               ;----------------------------------------------------
0030CAr 2               
0030CAr 2               dispon:
0030CAr 2  AD rr rr     	lda mode
0030CDr 2  0A           	asl a
0030CEr 2  18           	clc
0030CFr 2  6D rr rr     	adc crtflag
0030D2r 2  AA           	tax
0030D3r 2  BD rr rr     	lda centreY,x
0030D6r 2  8D 01 90     	sta Reg1
0030D9r 2  60           	rts
0030DAr 2               
0030DAr 2               dispoff:
0030DAr 2  AD rr rr     	lda mode
0030DDr 2  0A           	asl a
0030DEr 2  18           	clc
0030DFr 2  6D rr rr     	adc crtflag
0030E2r 2  AA           	tax
0030E3r 2  BD rr rr     	lda BottomScr,x
0030E6r 2  8D 01 90     	sta Reg1
0030E9r 2  60           	rts
0030EAr 2               
0030EAr 2               dispup:
0030EAr 2  AD rr rr     	lda mode
0030EDr 2  0A           	asl a
0030EEr 2  18           	clc
0030EFr 2  6D rr rr     	adc crtflag
0030F2r 2  AA           	tax
0030F3r 2  BD rr rr     	lda centreY,x
0030F6r 2  85 rr        	sta tmp
0030F8r 2               scr_down_loop:
0030F8r 2  A9 01        	lda #1
0030FAr 2  20 rr rr     	jsr delay
0030FDr 2  CE 01 90     	dec Reg1
003100r 2  AD 01 90     	lda Reg1
003103r 2  C5 rr        	cmp tmp
003105r 2  D0 F1        	bne scr_down_loop
003107r 2  60           	rts
003108r 2               
003108r 2               dispdown:
003108r 2  AD rr rr     	lda mode
00310Br 2  0A           	asl a
00310Cr 2  18           	clc
00310Dr 2  6D rr rr     	adc crtflag
003110r 2  AA           	tax
003111r 2  A9 01        	lda #1
003113r 2  20 rr rr     	jsr delay
003116r 2  EE 01 90     	inc Reg1
003119r 2  AD 01 90     	lda Reg1
00311Cr 2  DD rr rr     	cmp BottomScr,x
00311Fr 2  D0 E7        	bne dispdown
003121r 2  60           	rts
003122r 2               
003122r 1               ;	.include "music.inc"
003122r 1               ;colscr:	.incbin "..\pictures\slasher3c"
003122r 1               ;datscr:	.incbin "..\pictures\slasher3d"
003122r 1               
003122r 1               	.include "z80.asm"
003122r 2               ;------------------------------------------------------
003122r 2               ; z80.asm
003122r 2               ; spectrum stuff
003122r 2               ; adresses
003122r 2               
003122r 2               ;ws	 = $60
003122r 2               
003122r 2               ;z80_f	 = ws+$00
003122r 2               ;z80_a	 = ws+$01
003122r 2               ;z80_af	 = z80_f
003122r 2               
003122r 2               ;z80_c	 = ws+$02
003122r 2               ;z80_b	 = ws+$03
003122r 2               ;z80_bc	 = z80_c
003122r 2               
003122r 2               ;z80_e	 = ws+$04
003122r 2               ;z80_d	 = ws+$05
003122r 2               ;z80_de	 = z80_e
003122r 2               
003122r 2               ;z80_l	 = ws+$06
003122r 2               ;z80_h	 = ws+$07
003122r 2               ;z80_hl	 = z80_l
003122r 2               
003122r 2               ;z80_x    = ws+$08
003122r 2               ;z80_i    = ws+$09
003122r 2               ;z80_ix	 = z80_x
003122r 2               
003122r 2               ;z80_iy	 = ws+$0a
003122r 2               
003122r 2               ;z80_fp	 = ws+$0c
003122r 2               ;z80_ap	 = ws+$0d
003122r 2               
003122r 2               ;z80_cp	 = ws+$0e
003122r 2               ;z80_bp	 = ws+$0f
003122r 2               ;z80_bcp = z80_cp
003122r 2               
003122r 2               ;z80_ep	 = ws+$10
003122r 2               ;z80_dp	 = ws+$11
003122r 2               ;z80_dep = z80_ep
003122r 2               
003122r 2               ;z80_lp	 = ws+$12
003122r 2               ;z80_hp	 = ws+$13
003122r 2               ;z80_hlp = z80_lp
003122r 2               
003122r 2               ;z80_sp   = ws+$14
003122r 2               
003122r 2               ;z80_reg0 = ws+$16
003122r 2               ;z80_reg1 = ws+$17
003122r 2               ;z80_reg2 = ws+$18
003122r 2               ;z80_reg3 = ws+$19
003122r 2               
003122r 2               ;z80_r	 = ws+$1a
003122r 2               
003122r 2               ; Contains seperatly 1 bit set
003122r 2               ; _BEEB this is not safe memory to use as required by MOS
003122r 2               
003122r 2               _bitmem0	= $f8
003122r 2               _bitmem1	= $f9
003122r 2               _bitmem2	= $fa
003122r 2               _bitmem3	= $fb
003122r 2               _bitmem4	= $fc
003122r 2               _bitmem5	= $fd
003122r 2               _bitmem6	= $fe
003122r 2               _bitmem7	= $ff
003122r 2               
003122r 2               ; constants
003122r 2               _bitvalue0	= $01
003122r 2               _bitvalue1	= $02
003122r 2               _bitvalue2	= $04
003122r 2               _bitvalue3	= $08
003122r 2               _bitvalue4	= $10
003122r 2               _bitvalue5	= $20
003122r 2               _bitvalue6	= $40
003122r 2               _bitvalue7	= $80
003122r 2               
003122r 2               _notbitvalue0	= $fe
003122r 2               _notbitvalue1	= $fd
003122r 2               _notbitvalue2	= $fb
003122r 2               _notbitvalue3	= $f7
003122r 2               _notbitvalue4	= $ef
003122r 2               _notbitvalue5	= $df
003122r 2               _notbitvalue6	= $bf
003122r 2               _notbitvalue7	= $7f
003122r 2               
003122r 2               
003122r 2               ;add_hl_bc:
003122r 2               ;		lda z80_l
003122r 2               ;		clc
003122r 2               ;		adc z80_c
003122r 2               ;		sta z80_l
003122r 2               ;		lda z80_h
003122r 2               ;		adc z80_b
003122r 2               ;		sta z80_h
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;add_ix_de:
003122r 2               ;		lda z80_ix
003122r 2               ;		clc
003122r 2               ;		adc z80_e
003122r 2               ;		sta z80_ix
003122r 2               ;		lda z80_ix+1
003122r 2               ;		adc z80_d
003122r 2               ;		sta z80_ix+1
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;add_iy_de:
003122r 2               ;		lda z80_iy
003122r 2               ;		clc
003122r 2               ;		adc z80_e
003122r 2               ;		sta z80_iy
003122r 2               ;		lda z80_iy+1
003122r 2               ;		adc z80_d
003122r 2               ;		sta z80_iy+1
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;add_hl_de:
003122r 2               ;		lda z80_l
003122r 2               ;		clc
003122r 2               ;		adc z80_e
003122r 2               ;		sta z80_l
003122r 2               ;		lda z80_h
003122r 2               ;		adc z80_d
003122r 2               ;		sta z80_h
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;add_ix_bc:
003122r 2               ;		lda z80_ix
003122r 2               ;		clc
003122r 2               ;		adc z80_c
003122r 2               ;		sta z80_ix
003122r 2               ;		lda z80_ix+1
003122r 2               ;		adc z80_b
003122r 2               ;		sta z80_ix+1
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;add_iy_bc:
003122r 2               ;		lda z80_iy
003122r 2               ;		clc
003122r 2               ;		adc z80_c
003122r 2               ;		sta z80_iy
003122r 2               ;		lda z80_iy+1
003122r 2               ;		adc z80_b
003122r 2               ;		sta z80_iy+1
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;sbc_hl_de:
003122r 2               ;		lda z80_l
003122r 2               ;		sbc z80_e
003122r 2               ;		sta z80_l
003122r 2               ;		lda z80_h
003122r 2               ;		sbc z80_d
003122r 2               ;		sta z80_h
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;sbc_hl_bc:
003122r 2               ;		lda z80_l
003122r 2               ;		sbc z80_c
003122r 2               ;		sta z80_l
003122r 2               ;		lda z80_h
003122r 2               ;		sbc z80_b
003122r 2               ;		sta z80_h
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;cmp_hl_bc:
003122r 2               ;		lda z80_l
003122r 2               ;		cmp z80_c
003122r 2               ;		bne cmp_hl_bc_end
003122r 2               ;		lda z80_h
003122r 2               ;		cmp z80_b
003122r 2               ;cmp_hl_bc_end:
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;cmp_iy_ix:
003122r 2               ;		lda z80_iy
003122r 2               ;		cmp z80_ix
003122r 2               ;		bne cmp_iy_ix_end
003122r 2               ;		lda z80_iy+1
003122r 2               ;		cmp z80_ix+1
003122r 2               ;cmp_iy_ix_end:
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;dec_hl:
003122r 2               ;		lda z80_l
003122r 2               ;		bne dec_hl_no_dec_h
003122r 2               ;		dec z80_h
003122r 2               ;dec_hl_no_dec_h:
003122r 2               ;		dec z80_l
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;dec_ix:
003122r 2               ;		lda z80_ix
003122r 2               ;		bne dec_ix_no_dec_h
003122r 2               ;		dec z80_ix+1
003122r 2               ;dec_ix_no_dec_h:
003122r 2               ;		dec z80_ix
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;dec_bc:
003122r 2               ;		lda z80_c
003122r 2               ;		bne dec_bc_no_dec_b
003122r 2               ;		dec z80_b
003122r 2               ;dec_bc_no_dec_b:
003122r 2               ;		dec z80_c
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;dec_de:
003122r 2               ;		lda z80_e
003122r 2               ;		bne dec_de_no_dec_d
003122r 2               ;		dec z80_d
003122r 2               ;dec_de_no_dec_d:
003122r 2               ;		dec z80_e
003122r 2               ;		rts
003122r 2               ;
003122r 2               ;ex_af_afs:
003122r 2               ;	rts
003122r 2               ;ex_de_hl:
003122r 2               ;		lda z80_e
003122r 2               ;		ldx z80_l
003122r 2               ;		stx z80_e
003122r 2               ;		sta z80_l
003122r 2               ;		lda z80_d
003122r 2               ;		ldx z80_h
003122r 2               ;		stx z80_d
003122r 2               ;		sta z80_h
003122r 2               ;		rts
003122r 2               ;
003122r 2               exx:
003122r 2  A5 rr        		lda z80_c
003124r 2  A4 rr        		ldy z80_cp
003126r 2  84 rr        		sty z80_c
003128r 2  85 rr        		sta z80_cp
00312Ar 2  A5 rr        		lda z80_b
00312Cr 2  A4 rr        		ldy z80_bp
00312Er 2  84 rr        		sty z80_b
003130r 2  85 rr        		sta z80_bp
003132r 2  A5 rr        		lda z80_e
003134r 2  A4 rr        		ldy z80_ep
003136r 2  84 rr        		sty z80_e
003138r 2  85 rr        		sta z80_ep
00313Ar 2  A5 rr        		lda z80_d
00313Cr 2  A4 rr        		ldy z80_dp
00313Er 2  84 rr        		sty z80_d
003140r 2  85 rr        		sta z80_dp
003142r 2  A5 rr        		lda scraddr
003144r 2  A4 rr        		ldy z80_lp
003146r 2  84 rr        		sty scraddr
003148r 2  85 rr        		sta z80_lp
00314Ar 2  A5 rr        		lda scraddr+1
00314Cr 2  A4 rr        		ldy z80_hp
00314Er 2  84 rr        		sty scraddr+1
003150r 2  85 rr        		sta z80_hp
003152r 2  60           		rts
003153r 2               
003153r 2               ;ex_sp_hl:
003153r 2               ;		tsx
003153r 2               ;		lda $0103,x
003153r 2               ;		ldy z80_h
003153r 2               ;		sta z80_h
003153r 2               ;		tya
003153r 2               ;		sta $0103,x
003153r 2               ;		lda $0104,x
003153r 2               ;		ldy z80_l
003153r 2               ;		sta z80_l
003153r 2               ;		tya
003153r 2               ;		sta $104,x
003153r 2               ;		rts
003153r 2               ;
003153r 2               ;ldi:
003153r 2               ;	rts
003153r 2               ;ldir:
003153r 2               ;		ldy #$00
003153r 2               ;		ldx z80_b
003153r 2               ;		beq ldir_last_page
003153r 2               ;ldir_loop:
003153r 2               ;		lda (z80_hl),y
003153r 2               ;		sta (z80_de),y
003153r 2               ;		iny
003153r 2               ;		bne ldir_loop
003153r 2               ;		inc z80_h
003153r 2               ;		inc z80_d
003153r 2               ;		dex
003153r 2               ;		bne ldir_loop
003153r 2               ;ldir_last_page:
003153r 2               ;		lda z80_c
003153r 2               ;		beq ldir_end
003153r 2               ;ldir_last_page_loop:
003153r 2               ;		lda (z80_hl),y
003153r 2               ;		sta (z80_de),y
003153r 2               ;		iny
003153r 2               ;		cpy z80_c
003153r 2               ;		bne ldir_last_page_loop
003153r 2               ;ldir_end:
003153r 2               ;		stx z80_c
003153r 2               ;		stx z80_b
003153r 2               ;		tya
003153r 2               ;		clc
003153r 2               ;		adc z80_l
003153r 2               ;		sta z80_l
003153r 2               ;		bcc *+4
003153r 2               ;		inc z80_h
003153r 2               ;		tya
003153r 2               ;		clc
003153r 2               ;		adc z80_e
003153r 2               ;		sta z80_e
003153r 2               ;		bcc *+4
003153r 2               ;		inc z80_d
003153r 2               ;		rts
003153r 2               ;
003153r 2               ;lddr:		ldy #$00
003153r 2               ;lddr_loop:
003153r 2               ;		lda (z80_hl),y
003153r 2               ;		sta (z80_de),y
003153r 2               ;		jsr dec_hl
003153r 2               ;		jsr dec_de
003153r 2               ;		jsr dec_bc
003153r 2               ;		lda z80_b
003153r 2               ;		ora z80_c
003153r 2               ;		bne lddr_loop
003153r 2               ;		rts
003153r 2               ;ei:
003153r 2               ;		rts
003153r 2               ;di:
003153r 2               ;		rts
003153r 2               
003153r 2               ;-------------------------------------------------------------
003153r 2               ; Set bits in bitmem
003153r 2               ;-------------------------------------------------------------
003153r 2               
003153r 2               .if 0
003153r 2               z80_init:
003153r 2               	ldx #$00
003153r 2               	lda #$01
003153r 2               z80_init_loop:
003153r 2               	sta _bitmem0,x
003153r 2               	inx
003153r 2               	asl a
003153r 2               	bne z80_init_loop
003153r 2               	rts
003153r 2               .endif
003153r 2               
003153r 2               push_af:
003153r 2               push_bc:
003153r 2               push_de:
003153r 2               push_hl:
003153r 2               
003153r 2               pop_af:
003153r 2               pop_bc:
003153r 2               pop_de:
003153r 2               pop_ix:
003153r 2               pop_hl:
003153r 2               
003153r 2               add_hl_hl:
003153r 2               
003153r 2               inc_bc:
003153r 2               inc_de:
003153r 2               inc_hl:
003153r 2               inc_ix:
003153r 2               inc_sp:
003153r 2               
003153r 2               cpir:
003153r 2               
003153r 2               ex_af_af:
003153r 2               ;	rts
003153r 2               
003153r 1               
003153r 1               eind_asm:
003153r 1               eop:					; End Of Program
003153r 1               
003153r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
003153r 1               
