ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 1 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:		.res 1
00002Br 2  xx           loopb:		.res 1
00002Cr 2  xx           loopc:		.res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      ; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      ; not a ptr
000051r 2  xx           tmproom:	.res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000057r 2  xx           vsync_count:.res 1
000058r 2  xx           colpatt:	.res 1
000059r 2  xx           sprtmp:     .res 1
00005Ar 2  xx           sprtmp2:    .res 1
00005Br 2  xx           sprshft:    .res 1
00005Cr 2               
00005Cr 2  xx           spriteink:  .res 1
00005Dr 2  xx           colour_byte:.res 1
00005Er 2  xx           colour_xor: .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:	.res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2  xx           shrctr:	    .res 1
000060r 2  xx           explcnt:	.res 1
000061r 2  xx           seed3:	    .res 1
000062r 2               .endif
000062r 2               
000062r 2               .if aflag
000062r 2               pbptr:      .res 2
000062r 2               .endif
000062r 2               
000062r 2  xx           tmp1:       .res 1
000063r 2  xx           tmp2:       .res 1
000064r 2               
000064r 1               	.include "z80-zp.inc"
000064r 2               ;ws	 = $60
000064r 2               
000064r 2  xx           z80_f: .res 1;	 = ws+$00
000065r 2  xx           z80_a: .res 1;	 = ws+$01
000066r 2               z80_af	 = z80_f
000066r 2               
000066r 2  xx           z80_c: .res 1;	 = ws+$02
000067r 2  xx           z80_b: .res 1;	 = ws+$03
000068r 2               z80_bc	 = z80_c
000068r 2               
000068r 2  xx           z80_e: .res 1;	 = ws+$04
000069r 2  xx           z80_d: .res 1;	 = ws+$05
00006Ar 2               z80_de	 = z80_e
00006Ar 2               
00006Ar 2  xx           z80_l: .res 1;	 = ws+$06
00006Br 2  xx           z80_h: .res 1;	 = ws+$07
00006Cr 2               z80_hl	 = z80_l
00006Cr 2               
00006Cr 2  xx           z80_x: .res 1;    = ws+$08
00006Dr 2  xx           z80_i: .res 1;    = ws+$09
00006Er 2               z80_ix	 = z80_x
00006Er 2               
00006Er 2  xx xx        z80_iy: .res 2;	 = ws+$0a
000070r 2               
000070r 2  xx           z80_fp: .res 1;	 = ws+$0c
000071r 2  xx           z80_ap: .res 1;	 = ws+$0d
000072r 2               
000072r 2  xx           z80_cp: .res 1;	 = ws+$0e
000073r 2  xx           z80_bp: .res 1;	 = ws+$0f
000074r 2               z80_bcp	 = z80_cp
000074r 2               
000074r 2  xx           z80_ep: .res 1;	 = ws+$10
000075r 2  xx           z80_dp: .res 1;	 = ws+$11
000076r 2               z80_dep	 = z80_ep
000076r 2               
000076r 2  xx           z80_lp: .res 1;	 = ws+$12
000077r 2  xx           z80_hp: .res 1;	 = ws+$13
000078r 2               z80_hlp	 = z80_lp
000078r 2               
000078r 2  xx xx        z80_sp: .res 2;   = ws+$14
00007Ar 2               
00007Ar 2  xx           z80_reg0: .res 1; = ws+$16
00007Br 2  xx           z80_reg1: .res 1; = ws+$17
00007Cr 2  xx           z80_reg2: .res 1; = ws+$18
00007Dr 2  xx           z80_reg3: .res 1; = ws+$19
00007Er 2               
00007Er 2               ;z80_r: .res 1;	 = ws+$1a
00007Er 2               
00007Er 1               
00007Er 1               ;----------------------------------------------
00007Er 1               ; BASIC header
00007Er 1               ;----------------------------------------------
00007Er 1               
00007Er 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "ladder.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving sprites enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metablocks 16x6"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 43450	; = 40000 * 1,108/1,02
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 25000
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; MAP + 22 x 22
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3  20 rr rr     	jsr game	 		; start the game.
000003r 3  60           	rts
000004r 3               
000004r 3               ; Don't change the order of these four.
000004r 3               ; Menu routine relies on winlft following wintop.
000004r 3               
000004r 3  00           wintop:	.byte WINDOWTOP		; top of window.
000005r 3  00           winlft:	.byte WINDOWLFT		; left edge.
000006r 3  16           winhgt:	.byte WINDOWHGT		; window height.
000007r 3  16           winwid:	.byte WINDOWWID		; window width.
000008r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000009r 3               
000009r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000009r 3               
000009r 3  00           wntopx:	.byte (8 * WINDOWTOP)
00000Ar 3  00           wnlftx:	.byte (8 * WINDOWLFT)
00000Br 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00000Cr 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00000Dr 3               
00000Dr 3               ; Make sure pointers are arranged in the same order as the data itself.
00000Dr 3               
00000Dr 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
00000Fr 3               
00000Fr 3               ; Assorted game routines which can go in contended memory.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for inventory.
00000Fr 3               ; called by the INV command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with objects seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of INV menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               .if mflag
00000Fr 3               minve:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	asl a
00000Fr 3               	sta winhgt
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	asl a
00000Fr 3               	sta winwid
00000Fr 3               .endif
00000Fr 3               	lda #<(invdis)		; routine address.
00000Fr 3               	sta mod0+1		; set up menu routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(invdis)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               	lda #<(fopt)		; find option from available objects.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fopt)
00000Fr 3               	sta mod1+1+1
00000Fr 3               	jmp dbox		; do menu routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for menu.
00000Fr 3               ; called by the MENU command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with menu items seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of MENU menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               mmenu:
00000Fr 3               	lda #<(always)		; routine address.
00000Fr 3               	sta mod0+1		; set up routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(always)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               
00000Fr 3               	lda #<(fstd)		; standard option selection.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fstd)
00000Fr 3               	sta mod1+2
00000Fr 3               
00000Fr 3               ; Drop through into box routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Work out size of box for message or menu.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox:
00000Fr 3               	lda #<msgdat		; pointer to messages.
00000Fr 3               	sta z80_l
00000Fr 3               	lda #>msgdat
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	jsr getwrd		; get message number.
00000Fr 3               
00000Fr 3               	lda z80_h		; store pointer to message.
00000Fr 3               	sta TmpAddr
00000Fr 3               	lda z80_l
00000Fr 3               	sta TmpAddr+1
00000Fr 3               
00000Fr 3               	lda #1			; height.
00000Fr 3               	sta z80_d
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               	sta z80_e		; maximum width.
00000Fr 3               dbox5:
00000Fr 3               	lda #0			; this line"s width.
00000Fr 3               	sta z80_b
00000Fr 3               mod2:
00000Fr 3               	jsr always		; item in player"s possession?
00000Fr 3               	cmp #255
00000Fr 3               	bne dbox6		; not in inventory, skip this line.
00000Fr 3               	inc z80_d		; add to tally.
00000Fr 3               dbox6:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a		; reached end of line?
00000Fr 3               	cmp #','
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	cmp #ASCII_NEWLINE
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	inc z80_b		; add to this line"s width.
00000Fr 3               	lda z80_a
00000Fr 3               	bmi dbox4		; end of message? yes, end count.
00000Fr 3               	jmp dbox6		; repeat until we find the end.
00000Fr 3               dbox3:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox5		; no, carry on looking.
00000Fr 3               	lda z80_b		; make this the widest so far.
00000Fr 3               	sta z80_e
00000Fr 3               	jmp dbox5		; keep looking.
00000Fr 3               dbox4:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox8		; no, carry on looking.
00000Fr 3               	lda z80_b		; final line is the longest so far.
00000Fr 3               	sta z80_e
00000Fr 3               dbox8:
00000Fr 3               	dec z80_d		; decrement items found.
00000Fr 3               	bne :+			; total was zero.
00000Fr 3               	lda #255
00000Fr 3               	sta varopt
00000Fr 3               	jmp dbox15
00000Fr 3               :
00000Fr 3               	lda z80_e		; longest line.
00000Fr 3               	bne :+			; was it zero?
00000Fr 3               	jmp dbox15		; total was zero.
00000Fr 3               :
00000Fr 3               	sta bwid		; set up size.
00000Fr 3               	lda z80_d
00000Fr 3               	sta blen
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; That's set up our box size.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               	lda winhgt		; window height in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_d		; subtract height of box.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc wintop		; add top edge of window.
00000Fr 3               	sta btop		; set up box top.
00000Fr 3               
00000Fr 3               	lda winwid		; window width in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_e		; subtract box width.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc winlft		; add left edge of window.
00000Fr 3               	sta blft		; box left.
00000Fr 3               
00000Fr 3               	lda #<(FONT-256)		; font.
00000Fr 3               	sta grbase		; set up for text display.
00000Fr 3               	lda #>(FONT-256)
00000Fr 3               	sta grbase+1
00000Fr 3               
00000Fr 3               	lda TmpAddr+1		; restore message pointer.
00000Fr 3               	sta z80_l
00000Fr 3               	lda TmpAddr
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set display coordinate.
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               dbox2:
00000Fr 3               	lda combyt		; get object number.
00000Fr 3               	sta z80_a
00000Fr 3               mod0:
00000Fr 3               	jsr always		; check inventory for display.
00000Fr 3               	cmp #255
00000Fr 3               	beq :+
00000Fr 3               	jmp dbox13		; not in inventory, skip this line.
00000Fr 3               :
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set left display position.
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_b		; store width.
00000Fr 3               dbox0:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	cmp #','		; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               	cmp #ASCII_NEWLINE			; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               
00000Fr 3               	cmp #141			; end of line?
00000Fr 3               	bne :+
00000Fr 3               	dec bwid
00000Fr 3               	jmp dbox7		; yes, next one.
00000Fr 3               :
00000Fr 3               	dec z80_b		; one less to display.
00000Fr 3               	and #127		; remove terminator.
00000Fr 3               
00000Fr 3               	jsr pchr		; display on screen.
00000Fr 3               
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bmi :+
00000Fr 3               	jmp dbox7		; yes, job done.
00000Fr 3               :
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	beq :+			; are any left?
00000Fr 3               	jmp dbox0		; yes, continue.
00000Fr 3               :
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Reached limit of characters per line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dbox9:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bcs :+
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox9
00000Fr 3               
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Fill box to end of line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dboxf:
00000Fr 3               	lda #32			; space character.
00000Fr 3               	jsr pchr		; display character.
00000Fr 3               	dec z80_b
00000Fr 3               	beq :+
00000Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00000Fr 3               :
00000Fr 3               	rts
00000Fr 3               dbox1:
00000Fr 3               	inc z80_l		; skip character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill box out to right side.
00000Fr 3               dbox10:
00000Fr 3               	inc dispy		; y coordinate down a line next position.
00000Fr 3               	jmp dbox2		; next line.
00000Fr 3               dbox7:
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	bne :+			; are any left?
00000Fr 3               	jmp dbox11		; no, nothing to draw.
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill message to line.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Drawn the box menu, now select option.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox11:
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set bar position.
00000Fr 3               dbox14:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	bne dbox14		; yes, debounce it.
00000Fr 3               	jsr dbar		; draw bar.
00000Fr 3               dbox12:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	beq dbox12		; no, nothing.
00000Fr 3               	and #16			; fire button pressed?
00000Fr 3               	bne :+
00000Fr 3               mod1:
00000Fr 3               	jmp fstd		; yes, job done.
00000Fr 3               :
00000Fr 3               	jsr dbar		; delete bar.
00000Fr 3               
00000Fr 3               	lda joyval		; joystick reading.
00000Fr 3               	and #8			; going up?
00000Fr 3               	beq dboxu		; yes, go up.
00000Fr 3               
00000Fr 3               	ldx dispy		; vertical position of bar.
00000Fr 3               	inx			; look down.
00000Fr 3               	txa
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find distance from top.
00000Fr 3               	cmp blen		; top of box.
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	inc dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               dboxu:
00000Fr 3               	lda dispy		; vertical position of bar.
00000Fr 3               	cmp btop		; are we at the top?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	dec dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               fstd:
00000Fr 3               	lda dispy		; bar position.
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Option not available.  Skip this line.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox13:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               
00000Fr 3               	bpl :+			; end of message?
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox13
00000Fr 3               dbox15:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	sta winwid
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	sta winhgt
00000Fr 3               .endif
00000Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00000Fr 3               	sta z80_h
00000Fr 3               	lda TmpAddr+1
00000Fr 3               	sta z80_l
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Invert bar
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbar:
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set display coordinate.
00000Fr 3               	jsr gprad		; get printing address.
00000Fr 3               
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_c		; loop counter in c.
00000Fr 3               	lda z80_h
00000Fr 3               	sta z80_d		; store screen address high byte.
00000Fr 3               dbar1:
00000Fr 3               	ldx #7			; pixel height in b.
00000Fr 3               dbar0:
00000Fr 3               	ldy scrtab,x
00000Fr 3               	lda (scraddr),y		; get screen byte.
00000Fr 3               	eor #255		; reverse all bits.
00000Fr 3               	sta (scraddr),y		; write back to screen.
00000Fr 3               	dex			; next line down.
00000Fr 3               	bpl dbar0		; draw rest of character.
00000Fr 3               
00000Fr 3               	lda scraddr
00000Fr 3               	adc #8
00000Fr 3               	sta scraddr
00000Fr 3               	bcc :+
00000Fr 3               	inc scraddr+1
00000Fr 3               :
00000Fr 3               	dec z80_c		; decrement character counter.
00000Fr 3               	bne dbar1		; repeat for whole line.
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Point to object
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  A = object number, A=255 if already in possession
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               invdis:
00000Fr 3               	lda z80_l		; store message text pointer.
00000Fr 3               	pha
00000Fr 3               	lda z80_h
00000Fr 3               	pha
00000Fr 3               	lda combyt		; object number.
00000Fr 3               	inc combyt		; ready for next one.
00000Fr 3               	jsr gotob		; check if we have object.
00000Fr 3               	tay
00000Fr 3               	pla
00000Fr 3               	sta z80_h
00000Fr 3               	pla
00000Fr 3               	sta z80_l
00000Fr 3               	tya
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Find option selected.
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected object
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               fopt:
00000Fr 3               	lda dispy
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta tmp+2		; option selected in b register.
00000Fr 3               	inc tmp+2
00000Fr 3               
00000Fr 3               	lda #0			; set to first item.
00000Fr 3               	sta combyt		; object number.
00000Fr 3               fopt0:
00000Fr 3               	jsr fobj		; find next object in inventory.
00000Fr 3               	dec tmp+2
00000Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00000Fr 3               
00000Fr 3               	lda combyt		; get option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	dec varopt		; one less, due to where we increment combyt.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               fobj:
00000Fr 3               	ldy combyt		; object number.
00000Fr 3               	inc combyt		; ready for next item.
00000Fr 3               	tya
00000Fr 3               	jsr gotob		; do we have this item?
00000Fr 3               	cmp #255
00000Fr 3               	bne :+
00000Fr 3               	rts
00000Fr 3               :
00000Fr 3               	jmp fobj		; yes, it's on the list.
00000Fr 3               .endif
00000Fr 3               
00000Fr 3               ;----------------------------------------------------
00000Fr 3               ; Clear sprite table.
00000Fr 3               ;
00000Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00000Fr 3               ;----------------------------------------------------
00000Fr 3               
00000Fr 3               xspr:
00000Fr 3  A9 FF        	lda #255		; clear byte.
000011r 3  A2 00        	ldx #0			; length of table.
000013r 3               xspr0:
000013r 3  9D rr rr     	sta sprtab,x		; sprite table.
000016r 3  E8           	inx			; move to next byte.
000017r 3  E0 CC        	cpx #SPRBUF
000019r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00001Br 3  60           	rts
00001Cr 3               
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               ; Initialise all objects.
00001Cr 3               ;
00001Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               
00001Cr 3               .if oflag
00001Cr 3               iniob:
00001Cr 3               	lda #<objdta		; objects table.
00001Cr 3               	sta z80_x
00001Cr 3               	lda #>objdta
00001Cr 3               	sta z80_i
00001Cr 3               
00001Cr 3               	ldx numob 		; number of objects in the game.
00001Cr 3               iniob0:
00001Cr 3               	ldy #35
00001Cr 3               	lda (z80_ix),y 		; start screen.
00001Cr 3               	ldy #32
00001Cr 3               	sta (z80_ix),y 		; set start screen.
00001Cr 3               
00001Cr 3               	ldy #36
00001Cr 3               	lda (z80_ix),y 		; find start y.
00001Cr 3               	ldy #33
00001Cr 3               	sta (z80_ix),y 		; set start y.
00001Cr 3               
00001Cr 3               	ldy #37
00001Cr 3               	lda (z80_ix),y 		; get initial x.
00001Cr 3               	ldy #34
00001Cr 3               	sta (z80_ix),y 		; set x coord.
00001Cr 3               
00001Cr 3               	clc 			; point to next object.
00001Cr 3               	lda z80_x
00001Cr 3               	adc #38			; distance between objects.
00001Cr 3               	sta z80_x
00001Cr 3               	bcc :+
00001Cr 3               	inc z80_i
00001Cr 3               :
00001Cr 3               	dex 			; repeat.
00001Cr 3               	bne iniob0
00001Cr 3               
00001Cr 3               	rts
00001Cr 3               .endif
00001Cr 3               
00001Cr 3               ;-----------------------------------------------
00001Cr 3               ; Redraw the screen.
00001Cr 3               ;
00001Cr 3               ; Remove old copy of all sprites for redraw.
00001Cr 3               ;-----------------------------------------------
00001Cr 3               
00001Cr 3               redraw:
00001Cr 3               .if xflag
00001Cr 3               	lda #WINDOWWID
00001Cr 3               	sta winwid
00001Cr 3               	lda #WINDOWHGT
00001Cr 3               	sta winhgt
00001Cr 3               .endif
00001Cr 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00001Er 3  48           	pha
00001Fr 3  A5 rr        	lda z80_x
000021r 3  48           	pha
000022r 3               
000022r 3  20 rr rr     	jsr droom		; show screen layout.
000025r 3               .if oflag
000025r 3               	jsr shwob		; draw objects.
000025r 3               .endif
000025r 3               numsp0:
000025r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000027r 3  85 rr        	sta tmp
000029r 3               
000029r 3  A9 rr        	lda #<sprtab		; sprite table.
00002Br 3  85 rr        	sta z80_x
00002Dr 3  A9 rr        	lda #>sprtab
00002Fr 3  85 rr        	sta z80_i
000031r 3               redrw0:
000031r 3  A0 00        	ldy #0
000033r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
000035r 3  C9 FF        	cmp #255		; is it enabled?
000037r 3  F0 0B        	beq redrw1 		; no, find next one.
000039r 3               
000039r 3  A0 03        	ldy #var_Y
00003Br 3  B1 rr        	lda (z80_ix),y 		; sprite y.
00003Dr 3  C9 B1        	cmp #177		; beyond maximum?
00003Fr 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000041r 3               
000041r 3  20 rr rr     	jsr sspria		; show single sprite.
000044r 3               
000044r 3               redrw1:
000044r 3  18           	clc			; next sprite.
000045r 3  A5 rr        	lda z80_x
000047r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000049r 3  85 rr        	sta z80_x
00004Br 3  90 02        	bcc :+
00004Dr 3  E6 rr        	inc z80_i
00004Fr 3               :
00004Fr 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000051r 3  D0 DE        	bne redrw0
000053r 3               
000053r 3               rpblc1:
000053r 3               ;	jsr dshrp		; redraw shrapnel.
000053r 3               
000053r 3               .if aflag
000053r 3               	jsr rbloc		; draw blocks for this screen
000053r 3               .endif
000053r 3  68           	pla			; retrieve sprite pointer.
000054r 3  85 rr        	sta z80_x
000056r 3  68           	pla
000057r 3  85 rr        	sta z80_i
000059r 3               
000059r 3  60           	rts
00005Ar 3               
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               ; Clear screen routine.
00005Ar 3               ;
00005Ar 3               ; Fill screenmem $8000-$97ff with ScrFillByte
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               
00005Ar 3               cls:
00005Ar 3  A9 10        	lda #>CharAddress	; Character RAM address.
00005Cr 3  8D rr rr     	sta clsloop+2
00005Fr 3  A9 00        	lda #ScrFillByte
000061r 3  A0 00        	ldy #0
000063r 3  A2 10        	ldx #16
000065r 3               clsloop:
000065r 3  99 00 10     	sta CharAddress,y
000068r 3  C8           	iny
000069r 3  D0 FA        	bne clsloop
00006Br 3  EE rr rr     	inc clsloop+2
00006Er 3  CA           	dex
00006Fr 3  D0 F4        	bne clsloop
000071r 3               
000071r 3  60           	rts
000072r 3               
000072r 3               ;----------------------------------------------------------------------
000072r 3               ; FODDER check
000072r 3               ;----------------------------------------------------------------------
000072r 3               
000072r 3               .if pflag .or dflag
000072r 3               fdchk:
000072r 3  C9 04        	cmp #FODDER 		; is it fodder?
000074r 3  F0 01        	beq :+
000076r 3  60           	rts 			; no.
000077r 3               :
000077r 3  A9 00        	lda #0			; wipe fodder in MAP
000079r 3  A0 00        	ldy #0
00007Br 3  91 rr        	sta (bufaddr),y 	; rewrite block type.
00007Dr 3               
00007Dr 3  A5 rr        	lda dispx		; x=x/8
00007Fr 3  48           	pha
000080r 3  4A           	lsr a
000081r 3  4A           	lsr a
000082r 3  4A           	lsr a
000083r 3  85 rr        	sta dispx
000085r 3               
000085r 3  A5 rr        	lda dispy		; y=y/8
000087r 3  48           	pha
000088r 3  4A           	lsr a
000089r 3  4A           	lsr a
00008Ar 3  4A           	lsr a
00008Br 3  85 rr        	sta dispy
00008Dr 3               
00008Dr 3  A9 00        	lda #0 			; block to write.
00008Fr 3  20 rr rr     	jsr pattr 		; write block.
000092r 3               
000092r 3  68           	pla
000093r 3  85 rr        	sta dispy
000095r 3  68           	pla
000096r 3  85 rr        	sta dispx
000098r 3  60           	rts
000099r 3               .endif
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Scrolly text and puzzle variables.
000099r 3               ;----------------------------------------------------
000099r 3               
000099r 3               .if sflag
000099r 3               txtbit:	.byte 128		; bit to write.
000099r 3               txtwid:	.byte 16		; width of ticker message.
000099r 3               txtpos:	.word msgdat
000099r 3               txtini:	.word msgdat
000099r 3               txtscr:	.word ScreenAddr
000099r 3               .endif
000099r 3               
000099r 3               ;----------------------------------------------------
000099r 3               ; Specialist routines.
000099r 3               ; Process shrapnel.
000099r 3               ;----------------------------------------------------
000099r 3               proshr:
000099r 3               .if pflag
000099r 3  A9 00        	lda #<SHRAPN		; table.
00009Br 3  85 rr        	sta z80_x
00009Dr 3  A9 09        	lda #>SHRAPN
00009Fr 3  85 rr        	sta z80_i
0000A1r 3               
0000A1r 3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
0000A3r 3  85 rr        	sta shrctr
0000A5r 3               prosh0:
0000A5r 3  A0 00        	ldy #0
0000A7r 3  B1 rr        	lda (z80_ix),y		; on/off marker.
0000A9r 3  0A           	asl a
0000AAr 3               proshx:
0000AAr 3  B0 03        	bcs :+
0000ACr 3  20 rr rr     	jsr prosh1 		; on, so process it.
0000AFr 3               :
0000AFr 3  18           	clc
0000B0r 3  A5 rr        	lda z80_x
0000B2r 3  69 06        	adc #SHRSIZ
0000B4r 3  85 rr        	sta z80_x
0000B6r 3  90 02        	bcc :+
0000B8r 3  E6 rr        	inc z80_i
0000BAr 3               :
0000BAr 3  C6 rr        	dec shrctr		; round again.
0000BCr 3  D0 E7        	bne prosh0
0000BEr 3               .endif
0000BEr 3               .if sflag
0000BEr 3               	jsr scrly
0000BEr 3               .endif
0000BEr 3  60           	rts
0000BFr 3               
0000BFr 3               .if pflag
0000BFr 3               ;----------------------------------------------------
0000BFr 3               ; Proces shrapnel piece
0000BFr 3               ;----------------------------------------------------
0000BFr 3               
0000BFr 3               prosh1:
0000BFr 3  20 rr rr     	jsr plot 		; delete the pixel.
0000C2r 3               
0000C2r 3  A9 rr        	lda #<shrptr		; shrapnel routine pointers.
0000C4r 3  85 rr        	sta z80_l
0000C6r 3  A9 rr        	lda #>shrptr
0000C8r 3  85 rr        	sta z80_h
0000CAr 3               
0000CAr 3  A0 00        	ldy #0
0000CCr 3  B1 rr        	lda (z80_ix),y		; restore shrapnel type.
0000CEr 3  20 rr rr     	jsr prosh2 		; run the routine.
0000D1r 3  20 rr rr     	jsr chkxy		; check x and y are good before we redisplay.
0000D4r 3               
0000D4r 3  A9 06        	lda #<SHRSIZ 		; distance to next.
0000D6r 3  85 rr        	sta z80_e
0000D8r 3  A9 00        	lda #>SHRSIZ
0000DAr 3  85 rr        	sta z80_d
0000DCr 3  60           	rts
0000DDr 3               
0000DDr 3               ;----------------------------------------------------
0000DDr 3               ; Run the routine
0000DDr 3               ;----------------------------------------------------
0000DDr 3               
0000DDr 3               prosh2:
0000DDr 3  0A           	asl a 			; 2 bytes per address.
0000DEr 3  A8           	tay
0000DFr 3  B9 rr rr     	lda shrptr,y
0000E2r 3  85 rr        	sta z80_l
0000E4r 3  B9 rr rr     	lda shrptr+1,y 		; fetch high byte from table.
0000E7r 3  85 rr        	sta z80_h
0000E9r 3  6C rr rr     	jmp (z80_hl) 		; jump to routine.
0000ECr 3               
0000ECr 3               ;----------------------------------------------------
0000ECr 3               ; Paricle routine table
0000ECr 3               ;----------------------------------------------------
0000ECr 3               
0000ECr 3  rr rr        shrptr:	.word laser		; laser.
0000EEr 3  rr rr        	.word trail		; vapour trail.
0000F0r 3  rr rr        	.word shrap		; shrapnel from explosion.
0000F2r 3  rr rr        	.word dotl		; horizontal starfield left.
0000F4r 3  rr rr        	.word dotr		; horizontal starfield right.
0000F6r 3  rr rr        	.word dotu		; vertical starfield up.
0000F8r 3  rr rr        	.word dotd		; vertical starfield down.
0000FAr 3  rr rr        	.word ptcusr		; user particle.
0000FCr 3               
0000FCr 3               ;----------------------------------------------------
0000FCr 3               ; Explosion shrapnel.
0000FCr 3               ;----------------------------------------------------
0000FCr 3               
0000FCr 3               shrap:
0000FCr 3  A0 01        	ldy #1
0000FEr 3  B1 rr        	lda (z80_ix),y 		; get the angle.
000100r 3  18           	clc
000101r 3  69 rr        	adc #<shrsin		; shrapnel sine table.
000103r 3  85 rr        	sta z80_l
000105r 3  A9 rr        	lda #>shrsin
000107r 3  69 00        	adc #0
000109r 3  85 rr        	sta z80_h
00010Br 3               
00010Br 3  A0 00        	ldy #0
00010Dr 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
00010Fr 3  85 rr        	sta z80_e
000111r 3  E6 rr        	inc z80_l 		; next byte of table.
000113r 3  D0 02        	bne :+
000115r 3  E6 rr        	inc z80_h
000117r 3               :
000117r 3  A0 00        	ldy #0
000119r 3  B1 rr        	lda (z80_hl),y		; fetch value from table.
00011Br 3  85 rr        	sta z80_d
00011Dr 3  E6 rr        	inc z80_l		; next byte of table.
00011Fr 3  D0 02        	bne :+
000121r 3  E6 rr        	inc z80_h
000123r 3               :
000123r 3  A0 00        	ldy #0
000125r 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000127r 3  85 rr        	sta z80_c
000129r 3  E6 rr        	inc z80_l 		; next byte of table.
00012Br 3  D0 02        	bne :+
00012Dr 3  E6 rr        	inc z80_h
00012Fr 3               :
00012Fr 3  A0 00        	ldy #0
000131r 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000133r 3  85 rr        	sta z80_b
000135r 3               
000135r 3  A0 02        	ldy #2
000137r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in hl.
000139r 3  18           	clc
00013Ar 3  65 rr        	adc z80_e		; add sine lb
00013Cr 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
00013Er 3  A0 03        	ldy #3
000140r 3  B1 rr        	lda (z80_ix),y
000142r 3  65 rr        	adc z80_d		; add sine hb
000144r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
000146r 3               
000146r 3  A0 04        	ldy #4
000148r 3  B1 rr        	lda (z80_ix),y	 	; y coordinate in hl.
00014Ar 3  18           	clc
00014Br 3  65 rr        	adc z80_c		; add cosine lb
00014Dr 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
00014Fr 3  A0 05        	ldy #5
000151r 3  B1 rr        	lda (z80_ix),y
000153r 3  65 rr        	adc z80_b		; add cosine lb
000155r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
000157r 3               
000157r 3  60           	rts
000158r 3               
000158r 3               ;----------------------------------------------------
000158r 3               ; Move dots
000158r 3               ;----------------------------------------------------
000158r 3               
000158r 3               dotl:
000158r 3  A0 05        	ldy #5
00015Ar 3  B1 rr        	lda (z80_ix),y
00015Cr 3  38           	sec
00015Dr 3  E9 01        	sbc #1		 	; move left.
00015Fr 3  91 rr        	sta (z80_ix),y
000161r 3  60           	rts
000162r 3               dotr:
000162r 3  A0 05        	ldy #5
000164r 3  B1 rr        	lda (z80_ix),y
000166r 3  18           	clc
000167r 3  69 01        	adc #1		 	; move left.
000169r 3  91 rr        	sta (z80_ix),y
00016Br 3  60           	rts
00016Cr 3               dotu:
00016Cr 3  A0 03        	ldy #3
00016Er 3  B1 rr        	lda (z80_ix),y
000170r 3  38           	sec
000171r 3  E9 01        	sbc #1		 	; move up.
000173r 3  91 rr        	sta (z80_ix),y
000175r 3  60           	rts
000176r 3               dotd:
000176r 3  A0 03        	ldy #3
000178r 3  B1 rr        	lda (z80_ix),y
00017Ar 3  18           	clc
00017Br 3  69 01        	adc #1			; move down.
00017Dr 3  91 rr        	sta (z80_ix),y
00017Fr 3  60           	rts
000180r 3               
000180r 3               ;----------------------------------------------------
000180r 3               ; Check if coordinates are ok before redrawing at new position.
000180r 3               ;
000180r 3               ; left:   X>L		X=L	Ok
000180r 3               ; right:  R+15>X	X=R	Ok
000180r 3               ; top:    Y>T		Y=T	Ok
000180r 3               ; bottom: B+15>Y	Y=B	Ok
000180r 3               ;----------------------------------------------------
000180r 3               
000180r 3               chkxy:
000180r 3               
000180r 3               ; top:    Y>T		Y=T	Ok
000180r 3               
000180r 3  A0 03        	ldy #3
000182r 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000184r 3  CD rr rr     	cmp wntopx		; window top.
000187r 3  B0 03        	bcs :+			; compare with top window limit.
000189r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
00018Cr 3               :
00018Cr 3               ; left:   X>L		X=L	Ok
00018Cr 3               
00018Cr 3  A0 05        	ldy #5
00018Er 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000190r 3  CD rr rr     	cmp wnlftx		; left edge.
000193r 3  B0 03        	bcs :+			; compare with left window limit.
000195r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
000198r 3               :
000198r 3               ; bottom: B+15>Y	Y=B	Ok
000198r 3               
000198r 3  AD rr rr     	lda wnbotx		; point to bottom.
00019Br 3  18           	clc
00019Cr 3  69 0F        	adc #15
00019Er 3  A0 03        	ldy #3
0001A0r 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001A2r 3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
0001A4r 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel..
0001A7r 3               :
0001A7r 3               ; right:  R+15>X	X=R	Ok
0001A7r 3               
0001A7r 3  AD rr rr     	lda wnrgtx		; point to right edge.
0001AAr 3  18           	clc
0001ABr 3  69 0F        	adc #15
0001ADr 3  A0 05        	ldy #5
0001AFr 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001B1r 3  B0 03        	bcs :+			; compare with window limit.
0001B3r 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel.
0001B6r 3               :
0001B6r 3               
0001B6r 3               ;----------------------------------------------------
0001B6r 3               ; Drop through.
0001B6r 3               ; Display shrapnel.
0001B6r 3               ;----------------------------------------------------
0001B6r 3               
0001B6r 3               plot:
0001B6r 3  A0 03        	ldy #3
0001B8r 3  B1 rr        	lda (z80_ix),y		; y integer.
0001BAr 3  85 rr        	sta dispy	 	; workspace coordinates.
0001BCr 3  A0 05        	ldy #5
0001BEr 3  B1 rr        	lda (z80_ix),y	 	; x integer.
0001C0r 3  85 rr        	sta dispx 		; workspace coordinates.
0001C2r 3               
0001C2r 3  A0 00        	ldy #0
0001C4r 3  B1 rr        	lda (z80_ix),y 		; type.
0001C6r 3  D0 03        	bne :+			; is it a laser?
0001C8r 3  4C rr rr     	jmp plot1 		; yes, draw laser instead.
0001CBr 3               :
0001CBr 3               plot0:
0001CBr 3  A5 rr        	lda dispx		; which pixel within byte do we
0001CDr 3  29 07        	and #7			; want to set first?
0001CFr 3  A8           	tay
0001D0r 3  B9 rr rr     	lda dots,y 		; table of small pixel positions.
0001D3r 3  85 rr        	sta z80_e 		; get value.
0001D5r 3               
0001D5r 3  20 rr rr     	jsr scadd 		; screen address.
0001D8r 3  A0 00        	ldy #0
0001DAr 3  B1 rr        	lda (scraddr),y		; see what's already there.
0001DCr 3  45 rr        	eor z80_e
0001DEr 3  91 rr        	sta (scraddr),y 	; put back on screen.
0001E0r 3  60           	rts
0001E1r 3               
0001E1r 3               plot1:
0001E1r 3  20 rr rr     	jsr scadd 		; screen address.
0001E4r 3  A0 00        	ldy #0
0001E6r 3  B1 rr        	lda (scraddr),y 	; fetch byte there.
0001E8r 3  49 FF        	eor #255 		; toggle all bits.
0001EAr 3  91 rr        	sta (scraddr),y 	; new byte.
0001ECr 3  60           	rts
0001EDr 3               
0001EDr 3               ;----------------------------------------------------
0001EDr 3               ; Switch off shrapnel
0001EDr 3               ;----------------------------------------------------
0001EDr 3               
0001EDr 3               kilshr:
0001EDr 3  A9 80        	lda #128
0001EFr 3  A0 00        	ldy #0
0001F1r 3  91 rr        	sta (z80_ix),y	; switch off shrapnel.
0001F3r 3  60           	rts
0001F4r 3               
0001F4r 3               ;----------------------------------------------------
0001F4r 3               ; Sine/cosine table
0001F4r 3               ;----------------------------------------------------
0001F4r 3               
0001F4r 3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
0001F8r 3  87 01 B2 03  
0001FCr 3  D4 02 D4 02  
000204r 3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
000208r 3  B2 03 78 FE  
00020Cr 3  D4 02 2B FD  
000214r 3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
000218r 3  78 FE 4D FC  
00021Cr 3  2B FD 2B FD  
000224r 3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
000228r 3  4D FC 87 01  
00022Cr 3  2B FD D4 02  
000234r 3               
000234r 3               ;----------------------------------------------------
000234r 3               ; Create trail
000234r 3               ;----------------------------------------------------
000234r 3               
000234r 3               trail:
000234r 3  A0 01        	ldy #1
000236r 3  B1 rr        	lda (z80_ix),y 	; time remaining.
000238r 3  38           	sec
000239r 3  E9 01        	sbc #1
00023Br 3  91 rr        	sta (z80_ix),y
00023Dr 3  D0 03        	bne :+
00023Fr 3  4C rr rr     	jmp trailk		; time to switch it off.
000242r 3               :
000242r 3  20 rr rr     	jsr qrand		; get a random number.
000245r 3  4A           	lsr a 			; x or y axis?
000246r 3  90 03        	bcc :+
000248r 3  4C rr rr     	jmp trailv		; use y.
00024Br 3               :
00024Br 3               ; Trail horizontal
00024Br 3               
00024Br 3  4A           	lsr a 			; which direction?
00024Cr 3  90 03        	bcc :+
00024Er 3  4C rr rr     	jmp traill		; go left.
000251r 3               :
000251r 3               ; Trail right
000251r 3               
000251r 3  A0 05        	ldy #5
000253r 3  B1 rr        	lda (z80_ix),y
000255r 3  18           	clc
000256r 3  69 01        	adc #1	 		; go right.
000258r 3  91 rr        	sta (z80_ix),y
00025Ar 3  60           	rts
00025Br 3               
00025Br 3               ; Trail left
00025Br 3               
00025Br 3               traill:
00025Br 3  A0 05        	ldy #5
00025Dr 3  B1 rr        	lda (z80_ix),y
00025Fr 3  38           	sec
000260r 3  E9 01        	sbc #1 			; go left.
000262r 3  91 rr        	sta (z80_ix),y
000264r 3  60           	rts
000265r 3               
000265r 3               ; Trail vertical
000265r 3               
000265r 3               trailv:
000265r 3  4A           	lsr a		 	; which direction?
000266r 3  90 03        	bcc :+
000268r 3  4C rr rr     	jmp trailu		; go up.
00026Br 3               :
00026Br 3               ; Trail down
00026Br 3               
00026Br 3  A0 03        	ldy #3
00026Dr 3  B1 rr        	lda (z80_ix),y
00026Fr 3  18           	clc
000270r 3  69 01        	adc #1 			; go down.
000272r 3  91 rr        	sta (z80_ix),y
000274r 3  60           	rts
000275r 3               
000275r 3               ; Trail up
000275r 3               
000275r 3               trailu:
000275r 3  A0 03        	ldy #3
000277r 3  B1 rr        	lda (z80_ix),y
000279r 3  38           	sec
00027Ar 3  E9 01        	sbc #1 			; go up.
00027Cr 3  91 rr        	sta (z80_ix),y
00027Er 3  60           	rts
00027Fr 3               
00027Fr 3               ; Kill trail
00027Fr 3               
00027Fr 3               trailk:
00027Fr 3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
000281r 3  A0 03        	ldy #3
000283r 3  91 rr        	sta (z80_ix),y
000285r 3  60           	rts
000286r 3               
000286r 3               ;----------------------------------------------------
000286r 3               ; Create laser beam
000286r 3               ;----------------------------------------------------
000286r 3               
000286r 3               laser:
000286r 3  A0 01        	ldy #1
000288r 3  B1 rr        	lda (z80_ix),y 		; direction.
00028Ar 3  6A           	ror a 			; left or right?
00028Br 3  B0 03        	bcs :+
00028Dr 3  4C rr rr     	jmp laserl		; move left.
000290r 3               :
000290r 3               ; Laser right
000290r 3               
000290r 3  A9 08        	lda #8			; distance to travel.
000292r 3  85 rr        	sta z80_b
000294r 3  4C rr rr     	jmp laserm		; move laser.
000297r 3               
000297r 3               ; Laser left
000297r 3               
000297r 3               laserl:
000297r 3  A9 F8        	lda #248		; distance to travel.
000299r 3  85 rr        	sta z80_b
00029Br 3               laserm:
00029Br 3  A0 05        	ldy #5
00029Dr 3  B1 rr        	lda (z80_ix),y		; x position.
00029Fr 3  18           	clc
0002A0r 3  65 rr        	adc z80_b		; add distance.
0002A2r 3  91 rr        	sta (z80_ix),y		; set new x coordinate.
0002A4r 3               
0002A4r 3               ; Test new block.
0002A4r 3               
0002A4r 3  85 rr        	sta dispx 		; set x for block collision detection purposes.
0002A6r 3  A0 03        	ldy #3
0002A8r 3  B1 rr        	lda (z80_ix),y 		; get y.
0002AAr 3  85 rr        	sta dispy		; set coordinate for collision test.
0002ACr 3  20 rr rr     	jsr tstbl 		; get block type there.
0002AFr 3  C9 02        	cmp #WALL		; is it solid?
0002B1r 3  D0 03        	bne :+
0002B3r 3  4C rr rr     	jmp trailk		; yes, it cannot pass.
0002B6r 3               :
0002B6r 3               .if pflag .or dflag
0002B6r 3  C9 04                cmp #FODDER             ; is it fodder?
0002B8r 3  D0 06                bne :+
0002BAr 3  20 rr rr             jsr fdchk               ; remove fodder block.
0002BDr 3  4C rr rr             jmp trailk              ; destroy laser.
0002C0r 3               :
0002C0r 3               .endif
0002C0r 3  60           	rts
0002C1r 3               
0002C1r 3               ;----------------------------------------------------
0002C1r 3               ; Dots mask
0002C1r 3               ;----------------------------------------------------
0002C1r 3               
0002C1r 3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
0002C5r 3  08 04 02 01  
0002C9r 3               
0002C9r 3               
0002C9r 3               ;----------------------------------------------------
0002C9r 3               ; Plot, preserving de.
0002C9r 3               ;----------------------------------------------------
0002C9r 3               
0002C9r 3               plotde:
0002C9r 3  A5 rr        	lda z80_d 		; put de on stack.
0002CBr 3  48           	pha
0002CCr 3  A5 rr        	lda z80_e
0002CEr 3  48           	pha
0002CFr 3               
0002CFr 3  20 rr rr     	jsr plot 		; plot pixel.
0002D2r 3               
0002D2r 3  68           	pla			; restore de from stack.
0002D3r 3  85 rr        	sta z80_e
0002D5r 3  68           	pla
0002D6r 3  85 rr        	sta z80_d
0002D8r 3               
0002D8r 3  60           	rts
0002D9r 3               
0002D9r 3               ;----------------------------------------------------
0002D9r 3               ; Shoot a laser.
0002D9r 3               ;----------------------------------------------------
0002D9r 3               
0002D9r 3               shoot:
0002D9r 3  85 rr        	sta z80_c		; store direction in c register.
0002DBr 3  A0 08        	ldy #8
0002DDr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0002DFr 3  18           	clc
0002E0r 3               shoot1:
0002E0r 3  69 07        	adc #(SPR_HGT/2-1)	; down 7 pixels.
0002E2r 3  85 rr        	sta z80_l 		; puty y coordinate in l.
0002E4r 3               
0002E4r 3  A0 09        	ldy #9
0002E6r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in h.
0002E8r 3  85 rr        	sta z80_h
0002EAr 3               
0002EAr 3  A5 rr        	lda z80_i		; store pointer to sprite.
0002ECr 3  48           	pha
0002EDr 3  A5 rr        	lda z80_x
0002EFr 3  48           	pha
0002F0r 3               
0002F0r 3  20 rr rr     	jsr fpslot 		; find particle slot.
0002F3r 3  B0 03        	bcs :+
0002F5r 3  4C rr rr     	jmp vapou2		; failed, restore ix.
0002F8r 3               :
0002F8r 3  A9 00        	lda #0
0002FAr 3  A0 00        	ldy #0
0002FCr 3  91 rr        	sta (z80_ix),y 		; set up a laser.
0002FEr 3               
0002FEr 3  A5 rr        	lda z80_c
000300r 3  A0 01        	ldy #1
000302r 3  91 rr        	sta (z80_ix),y 		; set the direction.
000304r 3               
000304r 3  A5 rr        	lda z80_l
000306r 3  A0 03        	ldy #3
000308r 3  91 rr        	sta (z80_ix),y		; set y coordinate.
00030Ar 3               
00030Ar 3  66 rr        	ror z80_c		; check direction we want.
00030Cr 3  90 03        	bcc :+
00030Er 3  4C rr rr     	jmp shootr		; shoot right.
000311r 3               :
000311r 3  A5 rr        	lda z80_h		; X position.
000313r 3               shoot0:
000313r 3  29 F8        	and #248		; align on character boundary.
000315r 3  A0 05        	ldy #5
000317r 3  91 rr        	sta (z80_ix),y		; set x coordinate.
000319r 3  4C rr rr     	jmp vapou0 		; draw first image.
00031Cr 3               shootr:
00031Cr 3  A5 rr        	lda z80_h		; x position.
00031Er 3  18           	clc
00031Fr 3  69 0F        	adc #15			; look right.
000321r 3  4C rr rr     	jmp shoot0		; align and continue.
000324r 3               
000324r 3               ;----------------------------------------------------
000324r 3               ; Create a bit of vapour trail.
000324r 3               ;----------------------------------------------------
000324r 3               
000324r 3               vapour:
000324r 3  A5 rr        	lda z80_i		; store pointer to sprite.
000326r 3  48           	pha
000327r 3  A5 rr        	lda z80_x
000329r 3  48           	pha
00032Ar 3               
00032Ar 3  A0 08        	ldy #8
00032Cr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00032Er 3  18           	clc
00032Fr 3               vapou3:
00032Fr 3  69 07        	adc #(SPR_HGT/2-1)	; mid-point of sprite.
000331r 3  85 rr        	sta z80_l
000333r 3               
000333r 3  A0 09        	ldy #9
000335r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000337r 3  69 07        	adc #7
000339r 3  85 rr        	sta z80_h
00033Br 3               
00033Br 3  20 rr rr     	jsr fpslot 		; find particle slot.
00033Er 3  90 03        	bcc :+
000340r 3  4C rr rr     	jmp vapou1		; no, we can use it.
000343r 3               :
000343r 3               vapou2:
000343r 3  68           	pla
000344r 3  85 rr        	sta z80_x
000346r 3  68           	pla
000347r 3  85 rr        	sta z80_i
000349r 3  60           	rts
00034Ar 3               vapou1:
00034Ar 3  A5 rr        	lda z80_l
00034Cr 3  A0 03        	ldy #3
00034Er 3  91 rr        	sta (z80_ix),y		; set up y.
000350r 3               
000350r 3  A5 rr        	lda z80_h
000352r 3  A0 05        	ldy #5
000354r 3  91 rr        	sta (z80_ix),y 		; set up x coordinate.
000356r 3               
000356r 3  20 rr rr     	jsr qrand		; get quick random number.
000359r 3  29 0F        	and #15			; random time.
00035Br 3  18           	clc
00035Cr 3  69 0F        	adc #15			; minimum time on screen.
00035Er 3  A0 01        	ldy #1
000360r 3  91 rr        	sta (z80_ix),y		; set time on screen.
000362r 3               
000362r 3  A9 01        	lda #1
000364r 3  A0 00        	ldy #0
000366r 3  91 rr        	sta (z80_ix),y		; define particle as vapour trail.
000368r 3               vapou0:
000368r 3  20 rr rr     	jsr chkxy		; plot first position.
00036Br 3  4C rr rr     	jmp vapou2
00036Er 3               
00036Er 3               ;----------------------------------------------------
00036Er 3               ; Create a user particle.
00036Er 3               ;----------------------------------------------------
00036Er 3               
00036Er 3               ptusr:
00036Er 3  85 rr        	sta z80_f		; store timer.
000370r 3               
000370r 3  A0 08        	ldy #8
000372r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000374r 3  18           	clc
000375r 3  69 07        	adc #7			; mid-point of sprite.
000377r 3  85 rr        	sta z80_l
000379r 3               
000379r 3  A0 09        	ldy #9
00037Br 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00037Dr 3  18           	clc
00037Er 3  69 07        	adc #7			; mid-point of sprite.
000380r 3  85 rr        	sta z80_h
000382r 3               
000382r 3  20 rr rr     	jsr fpslot 		; find particle slot.
000385r 3  B0 01        	bcs ptusr1
000387r 3  60           	rts 			; out of slots, can't generate anything.
000388r 3               ptusr1:
000388r 3  A5 rr        	lda z80_l
00038Ar 3  A0 03        	ldy #3
00038Cr 3  91 rr        	sta (z80_ix),y 		; set up y.
00038Er 3               
00038Er 3  A5 rr        	lda z80_h
000390r 3  A0 05        	ldy #5
000392r 3  91 rr        	sta (z80_ix),y		; set up x coordinate.
000394r 3               
000394r 3  A5 rr        	lda z80_f 		; restore timer.
000396r 3  A0 01        	ldy #1
000398r 3  91 rr        	sta (z80_ix),y		; set time on screen.
00039Ar 3               
00039Ar 3  A9 07        	lda #7
00039Cr 3  A0 00        	ldy #0
00039Er 3  91 rr        	sta (z80_ix),y		; define particle as user particle.
0003A0r 3               
0003A0r 3  4C rr rr     	jmp chkxy		; plot first position.
0003A3r 3               
0003A3r 3               ;----------------------------------------------------
0003A3r 3               ; Create a vertical or horizontal star.
0003A3r 3               ;----------------------------------------------------
0003A3r 3               
0003A3r 3               star:
0003A3r 3  A5 rr        	lda z80_i		; store pointer to sprite.
0003A5r 3  48           	pha
0003A6r 3  A5 rr        	lda z80_x
0003A8r 3  48           	pha
0003A9r 3               
0003A9r 3  20 rr rr     	jsr fpslot 		; find particle slot.
0003ACr 3  B0 07        	bcs star7		; found one we can use.
0003AEr 3               star0:
0003AEr 3  68           	pla 			; restore sprite pointer.
0003AFr 3  85 rr        	sta z80_x
0003B1r 3  68           	pla
0003B2r 3  85 rr        	sta z80_i
0003B4r 3  60           	rts 			; out of slots, can't generate anything.
0003B5r 3               star7:
0003B5r 3  A5 rr        	lda z80_c		; direction.
0003B7r 3  29 03        	and #3 			; is it left?
0003B9r 3  D0 03        	bne :+
0003BBr 3  4C rr rr     	jmp star1 		; yes, it's left.
0003BEr 3               :
0003BEr 3  C9 01        	cmp #1 			; is it right?
0003C0r 3  D0 03        	bne :+
0003C2r 3  4C rr rr     	jmp star2 		; yes, it's right.
0003C5r 3               :
0003C5r 3  C9 02        	cmp #2 			; is it up?
0003C7r 3  D0 03        	bne :+
0003C9r 3  4C rr rr     	jmp star3 		; yes, it's up.
0003CCr 3               :
0003CCr 3  AC rr rr     	ldy wntopx 		; get edge of screen.
0003CFr 3  C8           	iny			; down one pixel.
0003D0r 3  98           	tya
0003D1r 3               star8:
0003D1r 3  A0 03        	ldy #3
0003D3r 3  91 rr        	sta (z80_ix),y 		; set y coord.
0003D5r 3  20 rr rr     	jsr qrand 		; get quick random number.
0003D8r 3               star9:
0003D8r 3  A0 05        	ldy #5
0003DAr 3  91 rr        	sta (z80_ix),y		; set x position.
0003DCr 3               
0003DCr 3  A5 rr        	lda z80_c		; direction.
0003DEr 3  29 03        	and #3			; zero to three.
0003E0r 3  18           	clc
0003E1r 3  69 03        	adc #3			; 3 to 6 for starfield.
0003E3r 3  A0 00        	ldy #0
0003E5r 3  91 rr        	sta (z80_ix),y		; define particle as star.
0003E7r 3  20 rr rr     	jsr chkxy		; plot first position.
0003EAr 3  4C rr rr     	jmp star0
0003EDr 3               star1:
0003EDr 3  20 rr rr     	jsr qrand		; get quick random number.
0003F0r 3  A0 03        	ldy #3
0003F2r 3  91 rr        	sta (z80_ix),y 		; set y coord.
0003F4r 3               
0003F4r 3  AD rr rr     	lda wnrgtx 		; get edge of screen.
0003F7r 3  18           	clc
0003F8r 3  69 0F        	adc #15			; add width of sprite minus 1.
0003FAr 3  4C rr rr     	jmp star9
0003FDr 3               star2:
0003FDr 3  20 rr rr     	jsr qrand 		; get quick random number.
000400r 3  A0 03        	ldy #3
000402r 3  91 rr        	sta (z80_ix),y		; set y coord.
000404r 3               
000404r 3  AD rr rr     	lda wnlftx		; get edge of screen.
000407r 3  4C rr rr     	jmp star9
00040Ar 3               star3:
00040Ar 3  AD rr rr     	lda wnbotx 		; get edge of screen.
00040Dr 3  18           	clc
00040Er 3  69 0F        	adc #15 		; height of sprite minus one pixel.
000410r 3  4C rr rr     	jmp star8
000413r 3               
000413r 3               ;----------------------------------------------------
000413r 3               ; Find particle slot for lasers or vapour trail.
000413r 3               ; can't use alternate accumulator.
000413r 3               ;----------------------------------------------------
000413r 3               
000413r 3               fpslot:
000413r 3  A9 00        	lda #<SHRAPN 		; shrapnel table.
000415r 3  85 rr        	sta z80_x
000417r 3  A9 09        	lda #>SHRAPN
000419r 3  85 rr        	sta z80_i
00041Br 3               
00041Br 3  A9 37        	lda #NUMSHR		; number of pieces in table.
00041Dr 3  85 rr        	sta z80_b
00041Fr 3               fpslt0:
00041Fr 3  A0 00        	ldy #0
000421r 3  B1 rr        	lda (z80_ix),y		; get type.
000423r 3  0A           	asl a  			; is this slot in use?
000424r 3  90 01        	bcc :+
000426r 3  60           	rts			; no, we can use it.
000427r 3               :
000427r 3  18           	clc			; point to more shrapnel.
000428r 3  A5 rr        	lda z80_x
00042Ar 3  69 06        	adc #SHRSIZ
00042Cr 3  85 rr        	sta z80_x
00042Er 3  90 02        	bcc :+
000430r 3  E6 rr        	inc z80_i
000432r 3               :
000432r 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
000434r 3  D0 E9        	bne fpslt0
000436r 3               
000436r 3  18           	clc
000437r 3  60           	rts 			; out of slots, can't generate anything.
000438r 3               
000438r 3               ;----------------------------------------------------
000438r 3               ; Create an explosion at sprite position.
000438r 3               ;----------------------------------------------------
000438r 3               
000438r 3               explod:
000438r 3  85 rr        	sta z80_c 		; particles to create.
00043Ar 3               
00043Ar 3  A5 rr        	lda z80_i 		; store pointer to sprite.
00043Cr 3  48           	pha
00043Dr 3  A5 rr        	lda z80_x
00043Fr 3  48           	pha
000440r 3               
000440r 3  A0 08        	ldy #8
000442r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000444r 3  85 rr        	sta z80_l
000446r 3  A0 09        	ldy #9
000448r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00044Ar 3  85 rr        	sta z80_h
00044Cr 3               
00044Cr 3  A9 00        	lda #<SHRAPN		; shrapnel table.
00044Er 3  85 rr        	sta z80_x
000450r 3  A9 09        	lda #>SHRAPN
000452r 3  85 rr        	sta z80_i
000454r 3               
000454r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
000456r 3  85 rr        	sta explcnt
000458r 3               expld0:
000458r 3  A0 00        	ldy #0
00045Ar 3  B1 rr        	lda (z80_ix),y		; get type.
00045Cr 3  0A           	asl a 			; is this slot in use?
00045Dr 3  B0 16        	bcs expld1		; no, we can use it.
00045Fr 3               expld2:
00045Fr 3  18           	clc
000460r 3  A5 rr        	lda z80_x
000462r 3  69 06        	adc #SHRSIZ
000464r 3  85 rr        	sta z80_x
000466r 3  90 02        	bcc :+
000468r 3  E6 rr        	inc z80_i
00046Ar 3               :
00046Ar 3  C6 rr        	dec explcnt		; repeat for all shrapnel.
00046Cr 3  D0 EA        	bne expld0
00046Er 3               expld3:
00046Er 3  68           	pla			; restore sprite pointer.
00046Fr 3  85 rr        	sta z80_x
000471r 3  68           	pla
000472r 3  85 rr        	sta z80_i
000474r 3  60           	rts 			; out of slots, can't generate any more.
000475r 3               
000475r 3               expld1:
000475r 3  A5 rr        	lda z80_c		; shrapnel counter.
000477r 3  29 0F        	and #15			; 0 to 15.
000479r 3  18           	clc			; add to x.
00047Ar 3  65 rr        	adc z80_l
00047Cr 3  A0 03        	ldy #3
00047Er 3  91 rr        	sta (z80_ix),y		; y coord.
000480r 3               
000480r 3  A5 rr        	lda seed3 		; crap random number.
000482r 3  29 0F        	and #15			; 0 to 15.
000484r 3  18           	clc 			; add to y.
000485r 3  65 rr        	adc z80_h
000487r 3  A0 05        	ldy #5
000489r 3  91 rr        	sta (z80_ix),y		; x coord.
00048Br 3               
00048Br 3  A9 02        	lda #2
00048Dr 3  A0 00        	ldy #0
00048Fr 3  91 rr        	sta (z80_ix),y		; switch it on.
000491r 3               
000491r 3  20 rr rr     	jsr chkxy		; plot first position.
000494r 3  20 rr rr     	jsr qrand		; quick random angle.
000497r 3  29 3C        	and #60 		; keep within range.
000499r 3  A0 01        	ldy #1
00049Br 3  91 rr        	sta (z80_ix),y		; angle.
00049Dr 3               
00049Dr 3  C6 rr        	dec z80_c		; one less piece of shrapnel to generate.
00049Fr 3  D0 BE        	bne expld2 		; back to main explosion loop.
0004A1r 3  4C rr rr     	jmp expld3 		; restore sprite pointer and exit.
0004A4r 3               
0004A4r 3               ;----------------------------------------------------
0004A4r 3               ; Quick random
0004A4r 3               ;----------------------------------------------------
0004A4r 3               
0004A4r 3               qrand:
0004A4r 3  20 rr rr     	jsr random		; r register.
0004A7r 3  45 rr        	eor seed3		; combine with seed.
0004A9r 3  85 rr        	sta seed3 		; new seed.
0004ABr 3  60           	rts
0004ACr 3               
0004ACr 3               ;----------------------------------------------------
0004ACr 3               ; Display all shrapnel.
0004ACr 3               ;----------------------------------------------------
0004ACr 3               
0004ACr 3               dshrp:
0004ACr 3  A9 rr        	lda #<plotde		; display routine.
0004AEr 3  8D rr rr     	sta proshx+1
0004B1r 3  A9 rr        	lda #>plotde
0004B3r 3  8D rr rr     	sta proshx+2
0004B6r 3  20 rr rr     	jsr proshr		; process shrapnel.
0004B9r 3               
0004B9r 3  A9 rr        	lda #<prosh1		; processing routine.
0004BBr 3  8D rr rr     	sta proshx+1
0004BEr 3  A9 rr        	lda #>prosh1
0004C0r 3  8D rr rr     	sta proshx+2
0004C3r 3  60           	rts
0004C4r 3               
0004C4r 3               ;------------------------------------------------------
0004C4r 3               ; Particle engine.
0004C4r 3               ;
0004C4r 3               ; Init particle data for 55 particles in SHRAPN table.
0004C4r 3               ; Every particle has 6 bytes.
0004C4r 3               ;
0004C4r 3               ; global:	-
0004C4r 3               ; local:	x,y,hl
0004C4r 3               ; calls:	-
0004C4r 3               ;------------------------------------------------------
0004C4r 3               
0004C4r 3               inishr:
0004C4r 3  A9 00        	lda #<SHRAPN 		; table.
0004C6r 3  85 rr        	sta z80_l
0004C8r 3  A9 09        	lda #>SHRAPN
0004CAr 3  85 rr        	sta z80_h
0004CCr 3               
0004CCr 3  A0 00        	ldy #0
0004CEr 3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
0004D0r 3               inish0:
0004D0r 3  A9 FF        	lda #255 		; kill the shrapnel.
0004D2r 3  91 rr        	sta (z80_hl),y
0004D4r 3               
0004D4r 3  18           	clc 			; point there.
0004D5r 3  A5 rr        	lda z80_l
0004D7r 3  69 06        	adc #SHRSIZ		; distance to next.
0004D9r 3  85 rr        	sta z80_l
0004DBr 3  90 02        	bcc :+
0004DDr 3  E6 rr        	inc z80_h
0004DFr 3               :
0004DFr 3  CA           	dex
0004E0r 3  D0 EE        	bne inish0 		; round again.
0004E2r 3  60           	rts
0004E3r 3               
0004E3r 3               ;------------------------------------------------------
0004E3r 3               ; Check for collision between laser and sprite.
0004E3r 3               ;------------------------------------------------------
0004E3r 3               
0004E3r 3               lcol:
0004E3r 3  A9 00        	lda #<SHRAPN		; shrapnel table.
0004E5r 3  85 rr        	sta z80_l
0004E7r 3  A9 09        	lda #>SHRAPN
0004E9r 3  85 rr        	sta z80_h
0004EBr 3               
0004EBr 3  A9 37        	lda #NUMSHR		; number of pieces in table.
0004EDr 3  85 rr        	sta z80_b
0004EFr 3               lcol0:
0004EFr 3  A0 00        	ldy #0
0004F1r 3  B1 rr        	lda (z80_hl),y 		; get type.
0004F3r 3  F0 11        	beq lcol1		; yes, check collision.
0004F5r 3               lcol3:
0004F5r 3  18           	clc			; point to more shrapnel.
0004F6r 3  A5 rr        	lda z80_l
0004F8r 3  69 06        	adc #SHRSIZ
0004FAr 3  85 rr        	sta z80_l
0004FCr 3  90 02        	bcc :+
0004FEr 3  E6 rr        	inc z80_h
000500r 3               :
000500r 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
000502r 3  D0 EB        	bne lcol0
000504r 3  18           	clc
000505r 3  60           	rts 			; no collision, carry not set.
000506r 3               lcol1:
000506r 3  A0 03        	ldy #3
000508r 3  B1 rr        	lda (z80_hl),y		; get y.
00050Ar 3  38           	sec
00050Br 3  A0 08        	ldy #8
00050Dr 3  F1 rr        	sbc (z80_ix),y		; subtract sprite y.
00050Fr 3               lcolh:
00050Fr 3  C9 10        	cmp #SPR_HGT 		; within range?
000511r 3  90 03        	bcc :+
000513r 3  4C rr rr     	jmp lcol2		; no, missed.
000516r 3               :
000516r 3  A0 05        	ldy #5
000518r 3  B1 rr        	lda (z80_hl),y 		; get x.
00051Ar 3  38           	sec
00051Br 3  A0 09        	ldy #9
00051Dr 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
00051Fr 3  C9 10        	cmp #16			; within range?
000521r 3  B0 03        	bcs :+
000523r 3  4C rr rr     	jmp lcol4 		; yes, collision occurred.
000526r 3               :
000526r 3               lcol2:
000526r 3  4C rr rr     	jmp lcol3
000529r 3               lcol4:
000529r 3  38           	sec
00052Ar 3  60           	rts 			; return with carry set for collision.
00052Br 3               .endif
00052Br 3               
00052Br 3               ;------------------------------------------------------
00052Br 3               ; Main game engine code starts here.
00052Br 3               ; After initialisation, mloop is the main loop
00052Br 3               ;------------------------------------------------------
00052Br 3               
00052Br 3               game:
00052Br 3               
00052Br 3               ; Set up screen address table.
00052Br 3               
00052Br 3               setsat:
00052Br 3  A9 00        	lda #<CharAddress	; start of screen.
00052Dr 3  85 rr        	sta scraddr
00052Fr 3  A9 10        	lda #>CharAddress
000531r 3  85 rr        	sta scraddr+1
000533r 3               
000533r 3  A0 00        	ldy #0			; vertical lines on screen.
000535r 3               setsa0:
000535r 3  A5 rr        	lda scraddr
000537r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
00053Ar 3  A5 rr        	lda scraddr+1
00053Cr 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
00053Fr 3  20 rr rr     	jsr nline		; next line down.
000542r 3  C8           	iny			; next position in table.
000543r 3  D0 F0        	bne setsa0
000545r 3               
000545r 3               ; Init graphics mode
000545r 3               
000545r 3  20 rr rr     	jsr init
000548r 3               
000548r 3               ; Init joysticks
000548r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
00054Br 3               
00054Br 3               rpblc2:
00054Br 3               .if pflag
00054Br 3  20 rr rr     	jsr inishr 		; initialise particle engine.
00054Er 3               .endif
00054Er 3               evintr:
00054Er 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000551r 3               
000551r 3  A9 02        	lda #WALL 		; write default property.
000553r 3  A2 00        	ldx #0
000555r 3               clrmap:
000555r 3  9D 00 04     	sta MAP,x 		; block properties.
000558r 3  9D 00 05     	sta MAP+256,x
00055Br 3  E8           	inx
00055Cr 3  D0 F7        	bne clrmap
00055Er 3               
00055Er 3               .if oflag
00055Er 3               	jsr iniob 		; initialise objects.
00055Er 3               .endif
00055Er 3  A9 00        	lda #0			; put zero in accumulator.
000560r 3  85 rr        	sta gamwon		; reset game won flag.
000562r 3               
000562r 3  20 rr rr     	jsr inisc 		; init the score.
000565r 3               mapst:
000565r 3  AD rr rr     	lda stmap 		; start position on map.
000568r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
00056Br 3               
00056Br 3               inipbl:
00056Br 3               .if aflag
00056Br 3               	lda #<eop		; reset blockpointer
00056Br 3               	sta pbptr
00056Br 3               	lda #>eop
00056Br 3               	sta pbptr+1
00056Br 3               .endif
00056Br 3  20 rr rr     	jsr initsc 		; set up first screen.
00056Er 3               
00056Er 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
000570r 3  85 rr        	sta z80_x
000572r 3  A9 rr        	lda #>ssprit
000574r 3  85 rr        	sta z80_i
000576r 3               evini:
000576r 3  20 rr rr     	jsr evnt13 		; initialisation.
000579r 3               
000579r 3               ; Two restarts.
000579r 3               ; First restart - clear all sprites and initialise everything.
000579r 3               
000579r 3               rstrt:
000579r 3  20 rr rr     	jsr rsevt 		; restart events.
00057Cr 3  20 rr rr     	jsr xspr 		; clear sprite table.
00057Fr 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000582r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000585r 3  4C rr rr     	jmp rstrt0
000588r 3               
000588r 3               ; Second restart - clear all but player, and don't initialise him.
000588r 3               
000588r 3               rstrtn:
000588r 3  20 rr rr     	jsr rsevt		; restart events.
00058Br 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
00058Er 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000591r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000594r 3               
000594r 3               ; Set up the player and/or enemy sprites.
000594r 3               
000594r 3               rstrt0:
000594r 3  A9 00        	lda #0 			; zero in accumulator.
000596r 3  85 rr        	sta nexlev 		; reset next level flag.
000598r 3  85 rr        	sta restfl 		; reset restart flag.
00059Ar 3  85 rr        	sta deadf 		; reset dead flag.
00059Cr 3               
00059Cr 3  20 rr rr     	jsr droom 		; show screen layout.
00059Fr 3               rpblc0:
00059Fr 3               .if pflag
00059Fr 3  20 rr rr     	jsr inishr 		; initialise particle engine.
0005A2r 3               .endif
0005A2r 3               .if aflag
0005A2r 3               	jsr rbloc		; draw blocks for this screen
0005A2r 3               .endif
0005A2r 3               .if oflag
0005A2r 3               	jsr shwob		; draw objects.
0005A2r 3               .endif
0005A2r 3               
0005A2r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0005A4r 3  85 rr        	sta z80_x
0005A6r 3  A9 rr        	lda #>sprtab
0005A8r 3  85 rr        	sta z80_i
0005AAr 3  20 rr rr     	jsr dspr 		; display sprites.
0005ADr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0005AFr 3  85 rr        	sta z80_x
0005B1r 3  A9 rr        	lda #>(sprtab+TABSIZ)
0005B3r 3  85 rr        	sta z80_i
0005B5r 3  20 rr rr     	jsr dspr 		; display sprites.
0005B8r 3               mloop:
0005B8r 3  20 rr rr     	jsr vsync 		; synchronise with display.
0005BBr 3               
0005BBr 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0005BDr 3  85 rr        	sta z80_x
0005BFr 3  A9 rr        	lda #>sprtab
0005C1r 3  85 rr        	sta z80_i
0005C3r 3  20 rr rr     	jsr dspr 		; display even sprites.
0005C6r 3               
0005C6r 3               ;	jsr plsnd 		; play sounds.
0005C6r 3  20 rr rr     	jsr vsync 		; synchronise with display.
0005C9r 3  20 rr rr     	jsr proshr
0005CCr 3               
0005CCr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0005CEr 3  85 rr        	sta z80_x
0005D0r 3  A9 rr        	lda #>(sprtab+TABSIZ)
0005D2r 3  85 rr        	sta z80_i
0005D4r 3  20 rr rr     	jsr dspr 		; display odd sprites.
0005D7r 3               
0005D7r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0005D9r 3  85 rr        	sta z80_x
0005DBr 3  A9 rr        	lda #>(ssprit)
0005DDr 3  85 rr        	sta z80_i
0005DFr 3               evlp1:
0005DFr 3  20 rr rr     	jsr evnt10 		; called once per main loop.
0005E2r 3  20 rr rr     	jsr pspr 		; process sprites.
0005E5r 3               
0005E5r 3               ; Main loop events.
0005E5r 3               
0005E5r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0005E7r 3  85 rr        	sta z80_x
0005E9r 3  A9 rr        	lda #>ssprit
0005EBr 3  85 rr        	sta z80_i
0005EDr 3               evlp2:
0005EDr 3  20 rr rr     	jsr evnt11 		; called once per main loop.
0005F0r 3               bsortx:
0005F0r 3  20 rr rr     	jsr bsort 		; sort sprites.
0005F3r 3               
0005F3r 3  A5 rr        	lda nexlev		; finished level flag.
0005F5r 3  D0 1F        	bne newlev		; is set, go to next level.
0005F7r 3  A5 rr        	lda gamwon		; finished game flag.
0005F9r 3  D0 2A        	bne evwon		; is set, finish the game.
0005FBr 3  A5 rr        	lda restfl 		; finished level flag.
0005FDr 3  C9 01        	cmp #1			; has it been set?
0005FFr 3  D0 03        	bne :+
000601r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000604r 3               :
000604r 3  C9 02        	cmp #2			; has it been set?
000606r 3  D0 03        	bne :+
000608r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
00060Br 3               :
00060Br 3  A5 rr        	lda deadf 		; dead flag.
00060Dr 3  D0 1C        	bne pdead		; yes, player dead.
00060Fr 3               
00060Fr 3               ; back to start of main loop.
00060Fr 3               
00060Fr 3  E6 rr        	inc frmno
000611r 3  E6 rr        	inc clock
000613r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
000616r 3               
000616r 3               ;----------------------------------------------------------
000616r 3               ; Read blocks from list and update screen accordingly.
000616r 3               ;----------------------------------------------------------
000616r 3               
000616r 3               .if aflag
000616r 3               rbloc:
000616r 3               	lda #<eop		; reset blockpointer
000616r 3               	sta pbbuf
000616r 3               	lda #>eop
000616r 3               	sta pbbuf+1
000616r 3               
000616r 3               rbloc2:
000616r 3               	lda pbbuf			; check for last block
000616r 3               	cmp pbptr
000616r 3               	bne rbloc1
000616r 3               	lda pbbuf+1
000616r 3               	cmp pbptr+1
000616r 3               	bne rbloc1
000616r 3               	rts
000616r 3               rbloc1:
000616r 3               	ldy #0
000616r 3               	lda (pbbuf),y		; check if block for this scno
000616r 3               	cmp scno
000616r 3               	bne rbloc0		; if not, skip
000616r 3               	iny
000616r 3               	lda (pbbuf),y		; get y
000616r 3               	sta dispy
000616r 3               	iny
000616r 3               	lda (pbbuf),y		; get x
000616r 3               	sta dispx
000616r 3               	iny
000616r 3               	lda (pbbuf),y		; get blocknr
000616r 3               	jsr pattr2		; draw block
000616r 3               rbloc0:
000616r 3               	clc			; point to next block
000616r 3               	lda pbbuf
000616r 3               	adc #4
000616r 3               	sta pbbuf
000616r 3               	bcc rbloc2
000616r 3               	inc pbbuf+1
000616r 3               	jmp rbloc2
000616r 3               .endif
000616r 3               
000616r 3               ;----------------------------------------------------------
000616r 3               ; New level
000616r 3               ;----------------------------------------------------------
000616r 3               
000616r 3               newlev:
000616r 3  A5 rr        	lda scno 			; current screen.
000618r 3  18           	clc
000619r 3  69 01        	adc #1				; next screen.
00061Br 3  CD rr rr     	cmp numsc 			; total number of screens.
00061Er 3  B0 05        	bcs evwon			; yes, game finished.
000620r 3  85 rr        	sta scno			; set new level number.
000622r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
000625r 3               
000625r 3               evwon:
000625r 3  20 rr rr     	jsr evnt18		 	; game completed.
000628r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00062Br 3               
00062Br 3               ;----------------------------------------------------------
00062Br 3               ; Player dead.
00062Br 3               ;----------------------------------------------------------
00062Br 3               
00062Br 3               pdead:
00062Br 3  A9 00        	lda #0				; zeroise accumulator.
00062Dr 3  85 rr        	sta deadf			; reset dead flag.
00062Fr 3               evdie:
00062Fr 3  20 rr rr     	jsr evnt16 			; death subroutine.
000632r 3  A5 rr        	lda numlif			; number of lives.
000634r 3  F0 03        	beq :+
000636r 3  4C rr rr     	jmp rstrt 			; restart game.
000639r 3               :
000639r 3               evfail:
000639r 3  20 rr rr     	jsr evnt17 			; failure event.
00063Cr 3  4C rr rr     	jmp game			; restart game
00063Fr 3               
00063Fr 3               ;----------------------------------------------------------
00063Fr 3               ; Tidy things up
00063Fr 3               ;----------------------------------------------------------
00063Fr 3               
00063Fr 3               tidyup:
00063Fr 3  A0 00        	ldy #0				; digits to check.
000641r 3               tidyu2:
000641r 3  B9 rr rr     	lda score,y 			; get score digit.
000644r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
000647r 3  90 07        	bcc tidyu0			; high score is bigger.
000649r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00064Br 3  C8           	iny				; next digit of high score.
00064Cr 3  C0 06        	cpy #6
00064Er 3  D0 F1        	bne tidyu2			; repeat for all digits
000650r 3               tidyu0:
000650r 3  A9 rr        	lda #<score			; return pointing to score.
000652r 3  85 rr        	sta z80_c
000654r 3  A9 rr        	lda #>score
000656r 3  85 rr        	sta z80_b
000658r 3  60           	rts
000659r 3               tidyu1:
000659r 3  A0 05        	ldy #5
00065Br 3               tidyu3:
00065Br 3  B9 rr rr     	lda score,y			; score.
00065Er 3  99 rr rr     	sta hiscor,y			; high score.
000661r 3  88           	dey
000662r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000664r 3               evnewh:
000664r 3  20 rr rr     	jsr evnt19			; new high score event.
000667r 3  4C rr rr     	jmp tidyu0			; tidy up.
00066Ar 3               
00066Ar 3               ;--------------------------------------------------
00066Ar 3               ; Restart event.
00066Ar 3               ;--------------------------------------------------
00066Ar 3               
00066Ar 3               rsevt:
00066Ar 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00066Cr 3  85 rr        	sta z80_x
00066Er 3  A9 rr        	lda #>ssprit
000670r 3  85 rr        	sta z80_i
000672r 3               
000672r 3               evrs:
000672r 3  4C rr rr     	jmp evnt14	 		; call restart event.
000675r 3               
000675r 3               ;------------------------------------------------------------------
000675r 3               ; Copy number passed in a to string position bc, right-justified.
000675r 3               ;
000675r 3               ; Input:
000675r 3               ;  A  = number
000675r 3               ;  BC = string address
000675r 3               ;
000675r 3               ; Output:
000675r 3               ;  BC = string with number
000675r 3               ;-----------------------------------------------------------------
000675r 3               
000675r 3               num2ch:
000675r 3  85 rr        	sta z80_d		; Save number
000677r 3               
000677r 3  A9 00        	lda #0
000679r 3  85 rr        	sta flag
00067Br 3               numdg3:
00067Br 3  A2 64        	ldx #100		; hundreds column.
00067Dr 3  86 rr        	stx z80_e
00067Fr 3  20 rr rr     	jsr numdg		; show digit.
000682r 3               numdg2:
000682r 3  A2 0A        	ldx #10			; tens column.
000684r 3  86 rr        	stx z80_e
000686r 3  20 rr rr     	jsr numdg		; show digit.
000689r 3               
000689r 3  E6 rr        	inc flag
00068Br 3  A2 01        	ldx #1			; units column.
00068Dr 3  86 rr        	stx z80_e
00068Fr 3               numdg:
00068Fr 3  A9 30        	lda #48			; clear digit.
000691r 3  85 rr        	sta z80_a
000693r 3               numdg1:
000693r 3  A5 rr        	lda z80_d
000695r 3  C5 rr        	cmp z80_e
000697r 3  90 0E        	bcc numdg0		; nothing to show.
000699r 3  38           	sec
00069Ar 3  A5 rr        	lda z80_d
00069Cr 3  E5 rr        	sbc z80_e		; subtract from column.
00069Er 3  85 rr        	sta z80_d
0006A0r 3  E6 rr        	inc z80_a		; increment digit.
0006A2r 3  E6 rr        	inc flag
0006A4r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
0006A7r 3               numdg0:
0006A7r 3  A0 00        	ldy #0
0006A9r 3  A5 rr        	lda z80_a
0006ABr 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
0006ADr 3  A5 rr        	lda flag
0006AFr 3  F0 06        	beq :+
0006B1r 3  E6 rr        	inc z80_c		; next buffer position.
0006B3r 3  D0 02        	bne :+
0006B5r 3  E6 rr        	inc z80_b
0006B7r 3               :
0006B7r 3  60           	rts
0006B8r 3               num2dd:
0006B8r 3  85 rr        	sta z80_d		; Save number
0006BAr 3               
0006BAr 3  A9 01        	lda #1
0006BCr 3  85 rr        	sta flag
0006BEr 3               
0006BEr 3  4C rr rr     	jmp numdg2
0006C1r 3               num2td:
0006C1r 3  85 rr        	sta z80_d		; Save number
0006C3r 3               
0006C3r 3  A9 01        	lda #1
0006C5r 3  85 rr        	sta flag
0006C7r 3  4C rr rr     	jmp numdg3
0006CAr 3               
0006CAr 3               ;---------------------------------------------------------
0006CAr 3               ; Reset score to "000000"
0006CAr 3               ;---------------------------------------------------------
0006CAr 3               
0006CAr 3               inisc:
0006CAr 3  A9 30        	lda #'0'
0006CCr 3  A2 05        	ldx #5			; digits to initialise.
0006CEr 3               inisc0:
0006CEr 3  9D rr rr     	sta score,x 		; write zero digit.
0006D1r 3  CA           	dex			; next column.
0006D2r 3  10 FA        	bpl inisc0		; repeat for all digits.
0006D4r 3               
0006D4r 3  60           	rts
0006D5r 3               
0006D5r 3               ;-----------------------------------------------------
0006D5r 3               ; Multiply h by d and return in hl.
0006D5r 3               ;
0006D5r 3               ; Input:
0006D5r 3               ;  H = first number
0006D5r 3               ;  D = second number
0006D5r 3               ;
0006D5r 3               ; Output:
0006D5r 3               ;  HL = result H x D
0006D5r 3               ;-----------------------------------------------------
0006D5r 3               
0006D5r 3               imul:
0006D5r 3  A5 rr        	lda z80_d		; HL = H * D
0006D7r 3  85 rr        	sta z80_e
0006D9r 3  A5 rr        	lda z80_h
0006DBr 3  85 rr        	sta z80_c		; make c first multiplier.
0006DDr 3               imul0:
0006DDr 3  A9 00        	lda #0			; zeroise total.
0006DFr 3  85 rr        	sta z80_l
0006E1r 3  85 rr        	sta z80_h
0006E3r 3               
0006E3r 3  A5 rr        	lda z80_h
0006E5r 3  85 rr        	sta z80_d		; zeroise high byte.
0006E7r 3               
0006E7r 3  A9 08        	lda #8			; repeat 8 times.
0006E9r 3  85 rr        	sta z80_b
0006EBr 3               imul1:
0006EBr 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
0006EDr 3  90 0E        	bcc imul2		; wasn't set.
0006EFr 3  18           	clc			; bit was set, so add de.
0006F0r 3  A5 rr        	lda z80_l
0006F2r 3  65 rr        	adc z80_e
0006F4r 3  85 rr        	sta z80_l
0006F6r 3  A5 rr        	lda z80_h
0006F8r 3  65 rr        	adc z80_d
0006FAr 3  85 rr        	sta z80_h
0006FCr 3  18           	clc 			; reset carry.
0006FDr 3               imul2:
0006FDr 3  06 rr        	asl z80_e 		; shift de 1 bit left.
0006FFr 3  26 rr        	rol z80_d
000701r 3  C6 rr        	dec z80_b
000703r 3  D0 E6        	bne imul1		; repeat 8 times.
000705r 3               
000705r 3  60           	rts
000706r 3               
000706r 3               ;-----------------------------------------------
000706r 3               ; Divide d by e and return in d, remainder in a.
000706r 3               ;
000706r 3               ; Input:
000706r 3               ;  D = first number
000706r 3               ;  E = second number
000706r 3               ;
000706r 3               ; Output:
000706r 3               ;  D = result D/E
000706r 3               ;  A = remainder
000706r 3               ;-----------------------------------------------
000706r 3               
000706r 3               idiv:
000706r 3  A9 00        	lda #0
000708r 3  A0 08        	ldy #8		 	; bits to shift.
00070Ar 3  06 rr        	asl z80_d
00070Cr 3               idiv0:
00070Cr 3  2A           	rol a 			; multiply d by 2.
00070Dr 3  C5 rr        	cmp z80_e 		; test if e is smaller.
00070Fr 3  90 02        	bcc idiv1		; e is greater, no division this time.
000711r 3  E5 rr        	sbc z80_e		; subtract it.
000713r 3               idiv1:
000713r 3  26 rr        	rol z80_d		; rotate into d.
000715r 3  88           	dey
000716r 3  D0 F4        	bne idiv0		; repeat
000718r 3  60           	rts
000719r 3               
000719r 3               ;---------------------------------------------------
000719r 3               ; Play AY sound effect
000719r 3               ;---------------------------------------------------
000719r 3               
000719r 3               plsnd:
000719r 3  60           	rts
00071Ar 3               
00071Ar 3               ;---------------------------------------------------
00071Ar 3               ; Objects handling.
00071Ar 3               ; 32 bytes for image
00071Ar 3               ; 3 for room, y and x
00071Ar 3               ; 3 for starting room, y and x.
00071Ar 3               ; 254 = disabled.
00071Ar 3               ; 255 = object in player"s pockets.
00071Ar 3               ;---------------------------------------------------
00071Ar 3               
00071Ar 3               ;---------------------------------------------------
00071Ar 3               ; Show items present.
00071Ar 3               ;---------------------------------------------------
00071Ar 3               
00071Ar 3               .if oflag
00071Ar 3               shwob:
00071Ar 3               	lda #<objdta			; objects table.
00071Ar 3               	sta z80_l
00071Ar 3               	lda #>objdta
00071Ar 3               	sta z80_h
00071Ar 3               	lda numob 			; number of objects in the game.
00071Ar 3               	sta sprcnt
00071Ar 3               shwob0:
00071Ar 3               	ldy #32 			; distance to room number.
00071Ar 3               	lda (z80_hl),y 			; same as an item?
00071Ar 3               	cmp scno 			; current location.
00071Ar 3               	bne :+
00071Ar 3               	jsr dobj 			; yes, display object.
00071Ar 3               :
00071Ar 3               	clc
00071Ar 3               	lda z80_l
00071Ar 3               	adc #38 			; distance to next item.
00071Ar 3               	sta z80_l
00071Ar 3               	lda z80_h
00071Ar 3               	adc #0
00071Ar 3               	sta z80_h	 		; point to it.
00071Ar 3               	dec sprcnt
00071Ar 3               	bne shwob0 			; repeat for others.
00071Ar 3               	rts
00071Ar 3               
00071Ar 3               ;---------------------------------------------------
00071Ar 3               ; Display object.
00071Ar 3               ; hl must point to object's start address.
00071Ar 3               ;
00071Ar 3               ; Input:
00071Ar 3               ;  HL = object address
00071Ar 3               ;---------------------------------------------------
00071Ar 3               
00071Ar 3               dobj:
00071Ar 3               	ldy #33
00071Ar 3               	lda (z80_hl),y 			; point to y.
00071Ar 3               	sta dispy
00071Ar 3               	iny
00071Ar 3               	lda (z80_hl),y 			; point to x.
00071Ar 3               	sta dispx
00071Ar 3               dobj1:
00071Ar 3               	jmp sprite 			; draw this sprite.
00071Ar 3               
00071Ar 3               ;--------------------------------------
00071Ar 3               ; Remove an object.
00071Ar 3               ;
00071Ar 3               ; Input:
00071Ar 3               ;  A = object number
00071Ar 3               ;--------------------------------------
00071Ar 3               
00071Ar 3               remob:
00071Ar 3               	cmp numob			; number of objects in game.
00071Ar 3               	bcc :+				; are we checking past the end?
00071Ar 3               	rts				; yes, can't get non-existent item.
00071Ar 3               :
00071Ar 3               	pha				; remember object.
00071Ar 3               	jsr getob			; pick it up if we haven't already got it.
00071Ar 3               	pla				; retrieve object number.
00071Ar 3               	jsr gotob			; get its address.
00071Ar 3               	lda #254
00071Ar 3               	ldy #32
00071Ar 3               	sta (z80_hl),y			; remove it.
00071Ar 3               	rts
00071Ar 3               
00071Ar 3               ;---------------------------------------------------
00071Ar 3               ; Pick up object number held in the accumulator.
00071Ar 3               ;
00071Ar 3               ; Input:
00071Ar 3               ;  A = object number
00071Ar 3               ;---------------------------------------------------
00071Ar 3               
00071Ar 3               getob:
00071Ar 3               	cmp numob 		; number of objects in game.
00071Ar 3               	bcc :+			; are we checking past the end?
00071Ar 3               	rts			; yes, can't get non-existent item.
00071Ar 3               :
00071Ar 3               	jsr gotob 		; check if we already have it.
00071Ar 3               	cmp #255
00071Ar 3               	bne :+
00071Ar 3               	rts			; we already do.
00071Ar 3               :
00071Ar 3               	ldy #32
00071Ar 3               	lda (z80_hl),y		; is it on this screen?
00071Ar 3               	cmp scno 		; current screen.
00071Ar 3               	bne getob0		; not on screen, so nothing to delete.
00071Ar 3               
00071Ar 3               	lda #255
00071Ar 3               	sta (z80_hl),y		; pick it up.
00071Ar 3               	iny 			; point to y coord.
00071Ar 3               getob1:
00071Ar 3               	ldy #33
00071Ar 3               	lda (z80_hl),y		; y coord.
00071Ar 3               	sta dispy
00071Ar 3               	ldy #34
00071Ar 3               	lda (z80_hl),y 		; x coord.
00071Ar 3               	sta dispx
00071Ar 3               	jmp dobj1 		; delete object sprite.
00071Ar 3               getob0:
00071Ar 3               	lda #255
00071Ar 3               	sta (z80_hl),y 		; pick it up.
00071Ar 3               	rts
00071Ar 3               .endif
00071Ar 3               
00071Ar 3               ;-----------------------------------------------------------------
00071Ar 3               ; Got object check.
00071Ar 3               ; Call with object in accumulator, returns zero set if in pockets.
00071Ar 3               ;
00071Ar 3               ; Input:
00071Ar 3               ;  A = object number
00071Ar 3               ;-----------------------------------------------------------------
00071Ar 3               .if oflag .or mflag
00071Ar 3               gotob:
00071Ar 3               	cmp numob 		; number of objects in game.
00071Ar 3               	bcc :+ 			; are we checking past the end?
00071Ar 3               	jmp gotob0 		; yes, we can't have a non-existent object.
00071Ar 3               :
00071Ar 3               	jsr findob		; find the object.
00071Ar 3               gotob1:
00071Ar 3               	rts
00071Ar 3               
00071Ar 3               gotob0:
00071Ar 3               	lda #254 		; missing.
00071Ar 3               	jmp gotob1
00071Ar 3               
00071Ar 3               findob:
00071Ar 3               	pha			; save object number
00071Ar 3               	lda #<objdta 		; objects.
00071Ar 3               	sta z80_l
00071Ar 3               	lda #>objdta
00071Ar 3               	sta z80_h
00071Ar 3               	pla			; retreive object number
00071Ar 3               	beq fndob1 		; is it zero? yes, skip loop.
00071Ar 3               	tax 			; loop counter
00071Ar 3               fndob2:
00071Ar 3               	clc
00071Ar 3               	lda z80_l
00071Ar 3               	adc #38 		; size of each object.
00071Ar 3               	sta z80_l
00071Ar 3               	bcc :+
00071Ar 3               	inc z80_h
00071Ar 3               :
00071Ar 3               	dex 			; repeat until we find address.
00071Ar 3               	bne fndob2
00071Ar 3               fndob1:
00071Ar 3               	ldy #32			; distance to room it's in.
00071Ar 3               	lda (z80_hl),y		; fetch status.
00071Ar 3               	rts
00071Ar 3               .endif
00071Ar 3               
00071Ar 3               ;---------------------------------------------
00071Ar 3               ; Drop object number at (dispx, dispy).
00071Ar 3               ;
00071Ar 3               ; Input:
00071Ar 3               ;  A = object number
00071Ar 3               ;---------------------------------------------
00071Ar 3               
00071Ar 3               .if oflag
00071Ar 3               drpob:
00071Ar 3               	cmp numob 		; are we checking past the end?
00071Ar 3               	bcc :+
00071Ar 3               	rts			; yes, can't drop non-existent item.
00071Ar 3               :
00071Ar 3               	jsr gotob		; make sure object is in inventory.
00071Ar 3               	cmp scno		; already on this screen?
00071Ar 3               	bne :+
00071Ar 3               	rts			; yes, nothing to do.
00071Ar 3               :
00071Ar 3               	ldy #32
00071Ar 3               	lda scno
00071Ar 3               	sta (z80_hl),y		; bring onto screen.
00071Ar 3               	lda dispy		; sprite y coordinate.
00071Ar 3               	iny
00071Ar 3               	sta (z80_hl),y		; point to object y.
00071Ar 3               	lda dispx 		; sprite x coordinate.
00071Ar 3               	iny
00071Ar 3               	sta (z80_hl),y 		; point to object x
00071Ar 3               	jmp dobj		; draw the object sprite.
00071Ar 3               
00071Ar 3               ;-----------------------------------------------
00071Ar 3               ; Seek objects at sprite position.
00071Ar 3               ;
00071Ar 3               ; Output:
00071Ar 3               ;  A = object number, if not found A=255
00071Ar 3               ;-----------------------------------------------
00071Ar 3               
00071Ar 3               skobj:
00071Ar 3               	lda #<objdta 		; pointer to objects.
00071Ar 3               	sta z80_l
00071Ar 3               	lda #>objdta
00071Ar 3               	sta z80_h
00071Ar 3               
00071Ar 3               	lda numob 		; number of objects in game.
00071Ar 3               	sta z80_b 		; set up the loop counter.
00071Ar 3               skobj0:
00071Ar 3               	lda scno		; current room number.
00071Ar 3               	ldy #32
00071Ar 3               	cmp (z80_hl),y		; is object in here?
00071Ar 3               	bne :+
00071Ar 3               	jsr skobj1		; yes, check coordinates.
00071Ar 3               :
00071Ar 3               	clc			; point to next object in table.
00071Ar 3               	lda z80_l
00071Ar 3               	adc #38			; size of each object.
00071Ar 3               	sta z80_l
00071Ar 3               	bcc :+
00071Ar 3               	inc z80_h
00071Ar 3               :
00071Ar 3               	dec z80_b
00071Ar 3               	bne skobj0		; repeat for all objects.
00071Ar 3               
00071Ar 3               	lda #255		; end of list and nothing found, return 255.
00071Ar 3               	rts
00071Ar 3               
00071Ar 3               skobj1:
00071Ar 3               	ldy #33			; point to y coordinate.
00071Ar 3               	lda (z80_hl),y		; point to y coordinate.
00071Ar 3               	sec
00071Ar 3               	ldy #var_newY
00071Ar 3               	sbc (z80_ix),y 		; subtract sprite y.
00071Ar 3               	clc
00071Ar 3               	adc #15			; add sprite height minus one.
00071Ar 3               	cmp #31			; within range?
00071Ar 3               	bcs skobj2		; no, ignore object.
00071Ar 3               
00071Ar 3               	ldy #34			; point to x coordinate now.
00071Ar 3               	lda (z80_hl),y 		; get coordinate.
00071Ar 3               	sec
00071Ar 3               	ldy #var_newX
00071Ar 3               	sbc (z80_ix),y 		; subtract the sprite x.
00071Ar 3               	clc			; add sprite width minus one.
00071Ar 3               	adc #15
00071Ar 3               	cmp #31			; within range?
00071Ar 3               	bcs skobj2		; no, ignore object.
00071Ar 3               
00071Ar 3               	pla			; remove return address from stack.
00071Ar 3               	pla
00071Ar 3               
00071Ar 3               	lda numob 		; objects in game.
00071Ar 3               	sec
00071Ar 3               	sbc z80_b		; subtract loop counter.
00071Ar 3               skobj2:
00071Ar 3               	rts			; accumulator now points to object.
00071Ar 3               .endif
00071Ar 3               
00071Ar 3               ;---------------------------------------------------------------------
00071Ar 3               ; Spawn a new sprite.
00071Ar 3               ;---------------------------------------------------------------------
00071Ar 3               
00071Ar 3               spawn:
00071Ar 3  A9 rr        	lda #<sprtab		; sprite table.
00071Cr 3  85 rr        	sta z80_l
00071Er 3  A9 rr        	lda #>sprtab
000720r 3  85 rr        	sta z80_h
000722r 3               numsp1:
000722r 3  A9 0C        	lda #NUMSPR		; number of sprites.
000724r 3  85 rr        	sta spcnt
000726r 3               spaw0:
000726r 3  A0 00        	ldy #var_Type
000728r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
00072Ar 3  C9 FF        	cmp #255		; is it an unused slot?
00072Cr 3  F0 0F        	beq spaw1 		; yes, we can use this one.
00072Er 3               
00072Er 3  18           	clc 			; point to next sprite in table.
00072Fr 3  A5 rr        	lda z80_l
000731r 3  69 11        	adc #TABSIZ		; size of each entry.
000733r 3  85 rr        	sta z80_l
000735r 3  90 02        	bcc :+
000737r 3  E6 rr        	inc z80_h
000739r 3               :
000739r 3  C6 rr        	dec spcnt		; one less iteration.
00073Br 3  D0 E9        	bne spaw0		; keep going until we find a slot.
00073Dr 3               
00073Dr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
00073Dr 3               
00073Dr 3               spaw1:
00073Dr 3  A5 rr        	lda z80_i		; address of original sprite.
00073Fr 3  48           	pha
000740r 3  A5 rr        	lda z80_x
000742r 3  48           	pha
000743r 3               
000743r 3  A5 rr        	lda z80_l		; store spawned sprite address.
000745r 3  85 rr        	sta spptr
000747r 3  A5 rr        	lda z80_h
000749r 3  85 rr        	sta spptr+1
00074Br 3               
00074Br 3  A5 rr        	lda z80_c
00074Dr 3  A0 00        	ldy #var_Type
00074Fr 3  91 rr        	sta (z80_hl),y 		; set the type.
000751r 3  A0 05        	ldy #var_newType
000753r 3  91 rr        	sta (z80_hl),y		; copy
000755r 3               
000755r 3  A5 rr        	lda z80_b
000757r 3  A0 01        	ldy #var_Image
000759r 3  91 rr        	sta (z80_hl),y		; set the image.
00075Br 3  A0 06        	ldy #var_newImage
00075Dr 3  91 rr        	sta (z80_hl),y		; copy
00075Fr 3               
00075Fr 3  A9 00        	lda #0 				; frame zero.
000761r 3  A0 02        	ldy #var_Frame
000763r 3  91 rr        	sta (z80_hl),y		; set frame.
000765r 3  A0 07        	ldy #var_newFrame
000767r 3  91 rr        	sta (z80_hl),y		; copy
000769r 3               
000769r 3  A0 08        	ldy #8
00076Br 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00076Dr 3  A0 03        	ldy #3
00076Fr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000771r 3  A0 08        	ldy #8
000773r 3  91 rr        	sta (z80_hl),y		; copy
000775r 3               
000775r 3  A0 09        	ldy #9
000777r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000779r 3  A0 04        	ldy #4
00077Br 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
00077Dr 3  A0 09        	ldy #9
00077Fr 3  91 rr        	sta (z80_hl),y		; copy
000781r 3               
000781r 3  A0 0A        	ldy #10				; direction of original.
000783r 3  B1 rr        	lda (z80_ix),y
000785r 3  91 rr        	sta (z80_hl),y		; direction
000787r 3               
000787r 3  A9 00        	lda #0
000789r 3  A0 0D        	ldy #var_jumpLo
00078Br 3  91 rr        	sta (z80_hl),y		; reset parameter.
00078Dr 3  C8           	iny
00078Er 3  91 rr        	sta (z80_hl),y		; reset parameter.
000790r 3  C8           	iny
000791r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000793r 3  C8           	iny
000794r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000796r 3               rtssp:
000796r 3  A5 rr        	lda spptr			; address of new sprite.
000798r 3  85 rr        	sta z80_x
00079Ar 3  A5 rr        	lda spptr+1
00079Cr 3  85 rr        	sta z80_i
00079Er 3               evis1:
00079Er 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
0007A1r 3               
0007A1r 3  A5 rr        	lda spptr 			; address of new sprite.
0007A3r 3  85 rr        	sta z80_x
0007A5r 3  A5 rr        	lda spptr+1
0007A7r 3  85 rr        	sta z80_i
0007A9r 3               
0007A9r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
0007A9r 3  A0 03        	ldy #var_Y
0007ABr 3  B1 rr        	lda (z80_hl), y		; old x coord
0007ADr 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
0007AFr 3  B0 03        	bcs :+				; yes, don't draw it.
0007B1r 3               
0007B1r 3  20 rr rr     	jsr sspria 			; display the new sprite.
0007B4r 3               :
0007B4r 3  68           	pla					; address of original sprite.
0007B5r 3  85 rr        	sta z80_x
0007B7r 3  68           	pla
0007B8r 3  85 rr        	sta z80_i
0007BAr 3               
0007BAr 3  60           	rts
0007BBr 3               
0007BBr 3  30 30 30 30  score:	.byte "000000"		; player"s score.
0007BFr 3  30 30        
0007C1r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0007C5r 3  30 30        
0007C7r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0007CBr 3  30 30        
0007CDr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
0007CFr 3               
0007CFr 3               ;----------------------------------------------------
0007CFr 3               ; Check y-pos
0007CFr 3               ;----------------------------------------------------
0007CFr 3               
0007CFr 3               checkx:
0007CFr 3  A5 rr        	lda dispy		; y position.
0007D1r 3  C9 18        	cmp #24			; off screen?
0007D3r 3  B0 01        	bcs :+
0007D5r 3  60           	rts			; no, it's okay.
0007D6r 3               :
0007D6r 3  68           	pla			; remove return address from stack.
0007D7r 3  85 rr        	sta z80_l
0007D9r 3  68           	pla
0007DAr 3  85 rr        	sta z80_h
0007DCr 3  60           	rts
0007DDr 3               
0007DDr 3               ;-----------------------------------------------
0007DDr 3               ; Displays the current high score.
0007DDr 3               ;-----------------------------------------------
0007DDr 3               
0007DDr 3               dhisc:
0007DDr 3  A9 rr        	lda #<hiscor 		; high score text.
0007DFr 3  8D rr rr     	sta dscor3+1
0007E2r 3  8D rr rr     	sta bscor3+1
0007E5r 3  A9 rr        	lda #>hiscor
0007E7r 3  8D rr rr     	sta dscor3+2
0007EAr 3  8D rr rr     	sta bscor3+2
0007EDr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
0007F0r 3               
0007F0r 3               ;------------------------------------------------------
0007F0r 3               ; Displays the current score.
0007F0r 3               ;------------------------------------------------------
0007F0r 3               
0007F0r 3               dscor:
0007F0r 3  A9 rr        	lda #<score		; score text.
0007F2r 3  8D rr rr     	sta dscor3+1
0007F5r 3  8D rr rr     	sta bscor3+1
0007F8r 3  A9 rr        	lda #>score
0007FAr 3  8D rr rr     	sta dscor3+2
0007FDr 3  8D rr rr     	sta bscor3+2
000800r 3               dscor1:
000800r 3  8C rr rr     	sty tmpscr
000803r 3  20 rr rr     	jsr preprt		; set up font and print position.
000806r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
000809r 3               
000809r 3               ;	lda #6			; digits to display.
000809r 3               ;	sta z80_b
000809r 3  A5 rr        	lda prtmod		; get print mode.
00080Br 3  F0 03        	beq :+			; standard size text?
00080Dr 3  4C rr rr     	jmp bscor0		; no, show double-height.
000810r 3               :
000810r 3               dscor0:
000810r 3               ;	ldy #0
000810r 3               ;	lda (z80_hl),y 		; fetch character.
000810r 3  AC rr rr     	ldy tmpscr
000813r 3               dscor3:
000813r 3  B9 rr rr     	lda score,y
000816r 3  20 rr rr     	jsr pchar 		; display character.
000819r 3  E6 rr        	inc dispx		; move along x coordinate
00081Br 3               
00081Br 3               ;	inc z80_l		; next score column.
00081Br 3               ;	bne :+
00081Br 3               ;	inc z80_h
00081Br 3               ;:
00081Br 3  EE rr rr     	inc tmpscr
00081Er 3  C6 rr        	dec z80_b
000820r 3  D0 EE        	bne dscor0 		; repeat for all digits.
000822r 3               dscor2:
000822r 3  A5 rr        	lda dispx 		; set up display coordinates.
000824r 3  85 rr        	sta charx
000826r 3  A5 rr        	lda dispy
000828r 3  85 rr        	sta chary
00082Ar 3  60           	rts
00082Br 3               
00082Br 3  00           tmpscr:	.byte 0
00082Cr 3               ;------------------------------------------------------
00082Cr 3               ; Displays the current score in double-height characters.
00082Cr 3               ;
00082Cr 3               ; Input:
00082Cr 3               ;  B  = digit number
00082Cr 3               ;  HL = score string
00082Cr 3               ;------------------------------------------------------
00082Cr 3               
00082Cr 3               bscor0:
00082Cr 3               ;	ldy #0
00082Cr 3               
00082Cr 3               ;	lda (z80_hl),y 		; fetch character.
00082Cr 3  A4 rr        	ldy tmp
00082Er 3               bscor3:
00082Er 3  B9 rr rr     	lda score,y
000831r 3  20 rr rr     	jsr bchar 		; display big char.
000834r 3               
000834r 3               ;	inc z80_l 		; next score column.
000834r 3               ;	bne :+
000834r 3               ;	inc z80_h
000834r 3               ;:
000834r 3  E6 rr        	inc tmp
000836r 3  C6 rr        	dec z80_b
000838r 3  F0 03        	beq :+
00083Ar 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
00083Dr 3               :
00083Dr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
000840r 3               
000840r 3               ;-----------------------------------------------------
000840r 3               ; Adds number in the hl pair to the score.
000840r 3               ;-----------------------------------------------------
000840r 3               
000840r 3               addsc:
000840r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000842r 3  85 rr        	sta z80_e
000844r 3  A9 rr        	lda #>(score+1)
000846r 3  85 rr        	sta z80_d
000848r 3  A9 10        	lda #<10000		; amount to add each time.
00084Ar 3  85 rr        	sta z80_c
00084Cr 3  A9 27        	lda #>10000
00084Er 3  85 rr        	sta z80_b
000850r 3  20 rr rr     	jsr incsc		; add to score.
000853r 3               
000853r 3  E6 rr        	inc z80_e		; thousands column.
000855r 3  D0 02        	bne :+
000857r 3  E6 rr        	inc z80_d
000859r 3               :
000859r 3  A9 E8        	lda #<1000		; amount to add each time.
00085Br 3  85 rr        	sta z80_c
00085Dr 3  A9 03        	lda #>1000
00085Fr 3  85 rr        	sta z80_b
000861r 3  20 rr rr     	jsr incsc 		; add to score.
000864r 3               
000864r 3  E6 rr        	inc z80_e		; hundreds column.
000866r 3  D0 02        	bne :+
000868r 3  E6 rr        	inc z80_d
00086Ar 3               :
00086Ar 3  A9 64        	lda #<100		; amount to add each time.
00086Cr 3  85 rr        	sta z80_c
00086Er 3  A9 00        	lda #>100
000870r 3  85 rr        	sta z80_b
000872r 3  20 rr rr     	jsr incsc		; add to score.
000875r 3               
000875r 3  E6 rr        	inc z80_e 		; tens column.
000877r 3  D0 02        	bne :+
000879r 3  E6 rr        	inc z80_d
00087Br 3               :
00087Br 3  A9 0A        	lda #<10		; amount to add each time.
00087Dr 3  85 rr        	sta z80_c
00087Fr 3  A9 00        	lda #>10
000881r 3  85 rr        	sta z80_b
000883r 3  20 rr rr     	jsr incsc 		; add to score.
000886r 3               
000886r 3  E6 rr        	inc z80_e		; units column.
000888r 3  D0 02        	bne :+
00088Ar 3  E6 rr        	inc z80_d
00088Cr 3               :
00088Cr 3  A9 01        	lda #<1			; units.
00088Er 3  85 rr        	sta z80_c
000890r 3  A9 00        	lda #>1
000892r 3  85 rr        	sta z80_b
000894r 3               incsc:
000894r 3  A5 rr        	lda z80_h		; store amount to add.
000896r 3  48           	pha
000897r 3  A5 rr        	lda z80_l
000899r 3  48           	pha
00089Ar 3               
00089Ar 3  38           	sec			; subtract from amount to add.
00089Br 3  A5 rr        	lda z80_l
00089Dr 3  E5 rr        	sbc z80_c
00089Fr 3  85 rr        	sta z80_l
0008A1r 3  A5 rr        	lda z80_h
0008A3r 3  E5 rr        	sbc z80_b
0008A5r 3  85 rr        	sta z80_h
0008A7r 3  90 14        	bcc incsc0		; too much, restore value.
0008A9r 3               
0008A9r 3  68           	pla			; delete the previous amount from the stack.
0008AAr 3  68           	pla
0008ABr 3               
0008ABr 3  A5 rr        	lda z80_d 		; store column position.
0008ADr 3  48           	pha
0008AEr 3  A5 rr        	lda z80_e
0008B0r 3  48           	pha
0008B1r 3  20 rr rr     	jsr incsc2		; do the increment.
0008B4r 3               
0008B4r 3  68           	pla			; restore column.
0008B5r 3  85 rr        	sta z80_e
0008B7r 3  68           	pla
0008B8r 3  85 rr        	sta z80_d
0008BAr 3  4C rr rr     	jmp incsc		; repeat until all added.
0008BDr 3               
0008BDr 3               incsc0:
0008BDr 3  68           	pla			; restore previous value.
0008BEr 3  85 rr        	sta z80_l
0008C0r 3  68           	pla
0008C1r 3  85 rr        	sta z80_h
0008C3r 3  60           	rts
0008C4r 3               incsc2:
0008C4r 3  A0 00        	ldy #0
0008C6r 3  B1 rr        	lda (z80_de),y 		; get amount.
0008C8r 3  18           	clc
0008C9r 3  69 01        	adc #1			; add one to column.
0008CBr 3  91 rr        	sta (z80_de),y		; write new column total.
0008CDr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0008CFr 3  B0 01        	bcs :+
0008D1r 3  60           	rts			; no, carry on.
0008D2r 3               :
0008D2r 3  A9 30        	lda #'0'		; make it zero.
0008D4r 3  91 rr        	sta (z80_de),y		; write new column total.
0008D6r 3  C6 rr        	dec z80_e		; back one column.
0008D8r 3  D0 02        	bne :+
0008DAr 3  C6 rr        	dec z80_d
0008DCr 3               :
0008DCr 3  4C rr rr     	jmp incsc2
0008DFr 3               
0008DFr 3               ;------------------------------------
0008DFr 3               ; Add bonus to score and reset bonus
0008DFr 3               ;------------------------------------
0008DFr 3               
0008DFr 3               addbo:
0008DFr 3  A2 05        	ldx #5			; last digit.
0008E1r 3  18           	clc
0008E2r 3               addbo0:
0008E2r 3  BD rr rr     	lda score,x		; get score.
0008E5r 3  7D rr rr     	adc bonus,x		; add bonus.
0008E8r 3  38           	sec			; 0 to 18.
0008E9r 3  E9 30        	sbc #48
0008EBr 3  48           	pha
0008ECr 3  A9 30        	lda #'0'
0008EEr 3  9D rr rr     	sta bonus,x
0008F1r 3  68           	pla
0008F2r 3  C9 3A        	cmp #58
0008F4r 3  90 03        	bcc addbo1
0008F6r 3  38           	sec
0008F7r 3  E9 0A        	sbc #10
0008F9r 3               addbo1:
0008F9r 3  9D rr rr     	sta score,x		; zeroise bonus.
0008FCr 3  CA           	dex			; next digit.
0008FDr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0008FFr 3  60           	rts
000900r 3               
000900r 3               ;------------------------------------
000900r 3               ; Swap score and bonus.
000900r 3               ;------------------------------------
000900r 3               
000900r 3               swpsb:
000900r 3  A2 05        	ldx #5			; digits to add.
000902r 3               swpsb0:
000902r 3  BD rr rr     	lda score,x 		; get score digits.
000905r 3  48           	pha			; save digit
000906r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
000909r 3  9D rr rr     	sta score,x		; switch score-bonus
00090Cr 3  68           	pla
00090Dr 3  9D rr rr     	sta bonus,x
000910r 3  CA           	dex 			; repeat for all 6 digits.
000911r 3  10 EF        	bpl swpsb0
000913r 3  60           	rts
000914r 3               
000914r 3               ;----------------------------------------------------
000914r 3               ; Get print address.
000914r 3               ;----------------------------------------------------
000914r 3               
000914r 3               gprad:
000914r 3  98           	tya
000915r 3  48           	pha
000916r 3               
000916r 3  A5 rr        	lda dispx 		; x coordinate.
000918r 3  85 rr        	sta scraddr
00091Ar 3  A9 00        	lda #0
00091Cr 3  85 rr        	sta scraddr+1
00091Er 3  06 rr        	asl scraddr  		; multiply char by 16
000920r 3  26 rr        	rol scraddr+1
000922r 3  06 rr        	asl scraddr
000924r 3  26 rr        	rol scraddr+1
000926r 3  06 rr        	asl scraddr
000928r 3  26 rr        	rol scraddr+1
00092Ar 3  06 rr        	asl scraddr
00092Cr 3  26 rr        	rol scraddr+1
00092Er 3               
00092Er 3  A5 rr        	lda dispy		; y coordinate.
000930r 3  0A           	asl a
000931r 3  0A           	asl a
000932r 3  0A           	asl a			; multiply char by 8
000933r 3  A8           	tay
000934r 3               
000934r 3  18           	clc
000935r 3  A5 rr        	lda scraddr
000937r 3  79 00 07     	adc SCADTB_lb,y
00093Ar 3  85 rr        	sta scraddr
00093Cr 3  A5 rr        	lda scraddr+1
00093Er 3  79 00 08     	adc SCADTB_hb,y
000941r 3  85 rr        	sta scraddr+1
000943r 3               
000943r 3               
000943r 3               
000943r 3  A5 rr        	lda prtmod		; Double line if bigtxt
000945r 3  F0 08        	beq noskip
000947r 3  A5 rr        	lda dispx
000949r 3  29 E0        	and #$e0
00094Br 3  F0 02        	beq noskip
00094Dr 3  E6 rr        	inc scraddr+1
00094Fr 3               noskip:
00094Fr 3               
00094Fr 3  68           	pla
000950r 3  A8           	tay
000951r 3  60           	rts
000952r 3               ;--------------------------------------------------------------
000952r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000952r 3               ;
000952r 3               ; Output:
000952r 3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
000952r 3               ;--------------------------------------------------------------
000952r 3               
000952r 3               pradd:
000952r 3  A5 rr        	lda dispy 		; y coordinate.
000954r 3  85 rr        	sta bufaddr
000956r 3  A9 00        	lda #0
000958r 3  85 rr        	sta bufaddr+1
00095Ar 3  06 rr        	asl bufaddr  		; multiply char by 32
00095Cr 3  26 rr        	rol bufaddr+1
00095Er 3  06 rr        	asl bufaddr
000960r 3  26 rr        	rol bufaddr+1
000962r 3  06 rr        	asl bufaddr
000964r 3  26 rr        	rol bufaddr+1
000966r 3  06 rr        	asl bufaddr
000968r 3  26 rr        	rol bufaddr+1
00096Ar 3  06 rr        	asl bufaddr
00096Cr 3  26 rr        	rol bufaddr+1
00096Er 3  18           	clc			; add address of MAP graphics.
00096Fr 3  A5 rr        	lda bufaddr
000971r 3  65 rr        	adc dispx
000973r 3  69 00        	adc #<MAP
000975r 3  85 rr        	sta bufaddr
000977r 3  A5 rr        	lda bufaddr+1
000979r 3  69 04        	adc #>MAP
00097Br 3  85 rr        	sta bufaddr+1
00097Dr 3  60           	rts
00097Er 3               
00097Er 3               ;.if kflag
00097Er 3               ;gaadd:
00097Er 3               ;	lda dispy 		; y coordinate.
00097Er 3               ;	sta bufaddr
00097Er 3               ;	lda #0
00097Er 3               ;	sta bufaddr+1
00097Er 3               ;	asl bufaddr  		; multiply char by 32
00097Er 3               ;	rol bufaddr+1
00097Er 3               ;	asl bufaddr
00097Er 3               ;	rol bufaddr+1
00097Er 3               ;	asl bufaddr
00097Er 3               ;	rol bufaddr+1
00097Er 3               ;	asl bufaddr
00097Er 3               ;	rol bufaddr+1
00097Er 3               ;	asl bufaddr
00097Er 3               ;	rol bufaddr+1
00097Er 3               ;	clc			; add address of MAP graphics.
00097Er 3               ;	lda bufaddr
00097Er 3               ;	adc dispx
00097Er 3               ;	adc #<att_table
00097Er 3               ;	sta bufaddr
00097Er 3               ;	lda bufaddr+1
00097Er 3               ;	adc #>att_table
00097Er 3               ;	sta bufaddr+1
00097Er 3               ;	rts
00097Er 3               ;.endif
00097Er 3               
00097Er 3               ;----------------------------------------------
00097Er 3               ; Print attributes, properties and pixels.
00097Er 3               ;
00097Er 3               ; Input:
00097Er 3               ;  A	= tile number
00097Er 3               ;----------------------------------------------
00097Er 3               
00097Er 3               pbpattr:			; entry PUTBLOCK command
00097Er 3  A4 rr        	ldy charx
000980r 3  84 rr        	sty dispx
000982r 3  A4 rr        	ldy chary
000984r 3  84 rr        	sty dispy
000986r 3               pattr:
000986r 3               .if aflag
000986r 3               	pha
000986r 3               	jsr wbloc		; save blockinfo
000986r 3               	pla
000986r 3               .endif
000986r 3               
000986r 3               pattr2:
000986r 3  85 rr        	sta z80_b		; store cell in b register for now.
000988r 3  AA           	tax
000989r 3  BD rr rr     	lda bprop,x 		; block properties.
00098Cr 3  85 rr        	sta z80_c
00098Er 3  C9 08        	cmp #COLECT
000990r 3  D0 04        	bne :+
000992r 3  A5 rr        	lda z80_b
000994r 3  85 rr        	sta colpatt
000996r 3               :
000996r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000999r 3  A5 rr        	lda z80_c
00099Br 3  A0 00        	ldy #0
00099Dr 3  91 rr        	sta (bufaddr),y 	; write property.
00099Fr 3  A5 rr        	lda z80_b 		; restore cell.
0009A1r 3  4C rr rr     	jmp panp
0009A4r 3               ; Print attributes, no properties.
0009A4r 3               
0009A4r 3               ;colpatt:	.byte 0
0009A4r 3               
0009A4r 3               panp:
0009A4r 3  85 rr        	sta z80_e		; displacement in e.
0009A6r 3  A9 00        	lda #0
0009A8r 3  85 rr        	sta z80_d		; no high byte.
0009AAr 3  06 rr        	asl z80_e  		; multiply char by 8.
0009ACr 3  26 rr        	rol z80_d
0009AEr 3  06 rr        	asl z80_e
0009B0r 3  26 rr        	rol z80_d
0009B2r 3  06 rr        	asl z80_e
0009B4r 3  26 rr        	rol z80_d
0009B6r 3  18           	clc
0009B7r 3  A5 rr        	lda z80_e
0009B9r 3  69 rr        	adc #<chgfx 		; address of graphics.
0009BBr 3  85 rr        	sta tileaddr
0009BDr 3  A5 rr        	lda z80_d
0009BFr 3  69 rr        	adc #>chgfx
0009C1r 3  85 rr        	sta tileaddr+1
0009C3r 3  20 rr rr     	jsr gprad 		; get screen address.
0009C6r 3  A2 07        	ldx #7			; number of pixel rows to write.
0009C8r 3               panp0:
0009C8r 3  A0 00        	ldy #0
0009CAr 3  B1 rr        	lda (tileaddr),y 	; get image byte.
0009CCr 3               .if iflag
0009CCr 3               	eor #$ff		; Invert
0009CCr 3               .endif
0009CCr 3  BC rr rr     	ldy scrtab,x
0009CFr 3  91 rr        	sta (scraddr),y 	; copy to screen.
0009D1r 3  E6 rr        	inc tileaddr 		; next image byte.
0009D3r 3  D0 02        	bne :+
0009D5r 3  E6 rr        	inc tileaddr+1
0009D7r 3               :
0009D7r 3  CA           	dex	 		; repeat for 8 pixel rows.
0009D8r 3  10 EE        	bpl panp0
0009DAr 3  E6 rr        	inc dispx 		; move along one.
0009DCr 3  E6 rr        	inc charx
0009DEr 3  60           	rts
0009DFr 3               
0009DFr 3               ;----------------------------------------------
0009DFr 3               ; Write block
0009DFr 3               ;----------------------------------------------
0009DFr 3               
0009DFr 3               .if aflag
0009DFr 3               wbloc:
0009DFr 3               	ldy #3
0009DFr 3               	sta (pbptr),y		; store block number
0009DFr 3               	dey
0009DFr 3               	lda dispx
0009DFr 3               	sta (pbptr),y		; write x position of block.
0009DFr 3               	dey
0009DFr 3               	lda dispy
0009DFr 3               	sta (pbptr),y		; write y position of block.
0009DFr 3               	dey
0009DFr 3               	lda scno
0009DFr 3               	sta (pbptr),y		; write screen.
0009DFr 3               	clc			; point to next free location
0009DFr 3               	lda pbptr
0009DFr 3               	adc #4
0009DFr 3               	sta pbptr
0009DFr 3               	bcc :+
0009DFr 3               	inc pbptr+1
0009DFr 3               :
0009DFr 3               	rts
0009DFr 3               .endif
0009DFr 3               
0009DFr 3               ;.if kflag
0009DFr 3               ;panp:
0009DFr 3               ;.endif
0009DFr 3               
0009DFr 3               ;----------------------------------------------
0009DFr 3               ; Print character pixels, no more.
0009DFr 3               ;
0009DFr 3               ; Input:
0009DFr 3               ;  A	= character to print
0009DFr 3               ;----------------------------------------------
0009DFr 3               
0009DFr 3               pchr:
0009DFr 3  20 rr rr     	jsr pchar 		; show character in accumulator.
0009E2r 3  E6 rr        	inc dispx		; move along one.
0009E4r 3  60           	rts
0009E5r 3               
0009E5r 3               ;----------------------------------------------------
0009E5r 3               ; Shifter sprite routine for objects.
0009E5r 3               ;----------------------------------------------------
0009E5r 3               
0009E5r 3               .if oflag
0009E5r 3               sprit7:
0009E5r 3               	lda z80_b
0009E5r 3               	beq sprit0
0009E5r 3               	sta z80_a
0009E5r 3               sprit3:
0009E5r 3               	lsr spr			; shift into position.
0009E5r 3               	ror spr+1
0009E5r 3               	ror spr+2
0009E5r 3               	dec z80_a		; one less iteration.
0009E5r 3               	bne sprit3
0009E5r 3               sprit0:
0009E5r 3               	rts 			; now apply to screen.
0009E5r 3               .endif
0009E5r 3               
0009E5r 3               ;-----------------------------------------------------------
0009E5r 3               ; Get room address.
0009E5r 3               ;-----------------------------------------------------------
0009E5r 3               
0009E5r 3               groom:
0009E5r 3  A6 rr        	ldx scno 		; screen number.
0009E7r 3  A0 00        	ldy #0
0009E9r 3               groomx:
0009E9r 3  A9 rr        	lda #<scdat 		; pointer to screens.
0009EBr 3  85 rr        	sta z80_l
0009EDr 3  A9 rr        	lda #>scdat
0009EFr 3  85 rr        	sta z80_h
0009F1r 3               groom1:
0009F1r 3  E0 00        	cpx #0			; is it the first one?
0009F3r 3  F0 15        	beq groom0 		; no more screens to skip.
0009F5r 3               
0009F5r 3  18           	clc
0009F6r 3  A5 rr        	lda z80_l
0009F8r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0009FBr 3  85 rr        	sta z80_l
0009FDr 3  C8           	iny			; point to high byte.
0009FEr 3  A5 rr        	lda z80_h
000A00r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000A03r 3  85 rr        	sta z80_h
000A05r 3  C8           	iny			; next address.
000A06r 3               
000A06r 3  CA           	dex 			; one less iteration.
000A07r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000A0Ar 3               groom0:
000A0Ar 3  AD rr rr     	lda numsc		; add displacement.
000A0Dr 3  0A           	asl a
000A0Er 3  18           	clc			; add double displacement to address.
000A0Fr 3  65 rr        	adc z80_l
000A11r 3  85 rr        	sta z80_l
000A13r 3  A5 rr        	lda z80_h
000A15r 3  69 00        	adc #0
000A17r 3  85 rr        	sta z80_h
000A19r 3  60           	rts
000A1Ar 3               
000A1Ar 3               ;-----------------------------------------------------------
000A1Ar 3               ; Draw present room.
000A1Ar 3               ;-----------------------------------------------------------
000A1Ar 3               
000A1Ar 3               droom:
000A1Ar 3  AD rr rr     	lda wintop 		; window top.
000A1Dr 3  85 rr        	sta dispy		; set cursor y position.
000A1Fr 3               droom2:
000A1Fr 3  20 rr rr     	jsr groom 		; get address of current room.
000A22r 3  A9 00        	lda #0	 		; zero in accumulator.
000A24r 3  85 rr        	sta comcnt 		; reset compression counter.
000A26r 3  AD rr rr     	lda winhgt 		; height of window.
000A29r 3  85 rr        	sta rrow		; set row counter
000A2Br 3               droom0:
000A2Br 3  AD rr rr     	lda winlft 		; window left edge.
000A2Er 3  85 rr        	sta dispx 		; set cursor x position.
000A30r 3  AD rr rr     	lda winwid 		; width of window.
000A33r 3  85 rr        	sta rcol		; set column counter
000A35r 3               droom1:
000A35r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000A38r 3               .if xflag
000A38r 3               	jsr drwmeta
000A38r 3               .else
000A38r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000A3Br 3               .endif
000A3Br 3  C6 rr        	dec rcol		; one less column.
000A3Dr 3  D0 F6        	bne droom1 		; repeat for entire line.
000A3Fr 3  E6 rr        	inc dispy		; move down one line.
000A41r 3               .if xflag
000A41r 3               	inc dispy		; move down one line.
000A41r 3               .endif
000A41r 3  C6 rr        	dec rrow 		; one less row.
000A43r 3  D0 E6        	bne droom0 		; repeat for all rows.
000A45r 3  60           	rts
000A46r 3               
000A46r 3               ;----------------------------------------------
000A46r 3               ; Decompress bytes on-the-fly.
000A46r 3               ;----------------------------------------------
000A46r 3               
000A46r 3               flbyt:
000A46r 3  A5 rr        	lda comcnt 		; compression counter.
000A48r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000A4Ar 3               
000A4Ar 3  A0 00        	ldy #0
000A4Cr 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000A4Er 3  E6 rr        	inc z80_l 		; point to next cell.
000A50r 3  D0 02        	bne :+
000A52r 3  E6 rr        	inc z80_h
000A54r 3               :
000A54r 3  C9 FF        	cmp #255 		; is this byte a control code?
000A56r 3  F0 01        	beq :+
000A58r 3  60           	rts 			; no, this byte is uncompressed.
000A59r 3               :
000A59r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000A5Br 3  85 rr        	sta combyt 		; set up the type.
000A5Dr 3  E6 rr        	inc z80_l 		; point to quantity.
000A5Fr 3  D0 02        	bne :+
000A61r 3  E6 rr        	inc z80_h
000A63r 3               :
000A63r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000A65r 3  E6 rr        	inc z80_l 		; point to next byte.
000A67r 3  D0 02        	bne :+
000A69r 3  E6 rr        	inc z80_h
000A6Br 3               :
000A6Br 3               flbyt1:
000A6Br 3  85 rr        	sta comcnt 		; store new quantity.
000A6Dr 3  C6 rr        	dec comcnt		; one less.
000A6Fr 3  A5 rr        	lda combyt 		; byte to expand.
000A71r 3  60           	rts
000A72r 3               
000A72r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000A72r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000A72r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000A72r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000A72r 3               .if xflag
000A72r 3               drwmeta:
000A72r 3               	sta tmpblk
000A72r 3               	jsr pattr2
000A72r 3               
000A72r 3               	inc dispy
000A72r 3               	dec dispx
000A72r 3               	ldx tmpblk
000A72r 3               	beq :+
000A72r 3               	inx
000A72r 3               :
000A72r 3               	txa
000A72r 3               	jsr pattr2
000A72r 3               
000A72r 3               	ldx tmpblk
000A72r 3               	beq :+
000A72r 3               	inx
000A72r 3               	inx
000A72r 3               	inx
000A72r 3               :
000A72r 3               	txa
000A72r 3               	jsr pattr2
000A72r 3               
000A72r 3               	dec dispy
000A72r 3               	dec dispx
000A72r 3               	ldx tmpblk
000A72r 3               	beq :+
000A72r 3               	inx
000A72r 3               	inx
000A72r 3               :
000A72r 3               	txa
000A72r 3               	jsr pattr2
000A72r 3               	rts
000A72r 3               
000A72r 3               tmpblk:	.byte 0
000A72r 3               
000A72r 3               .endif
000A72r 3               
000A72r 3               ;------------------------------------------
000A72r 3               ; Ladder down check.
000A72r 3               ;
000A72r 3               ; Input:
000A72r 3               ;  IX = sprite pointer
000A72r 3               ;------------------------------------------
000A72r 3               
000A72r 3               .if lflag
000A72r 3               laddd:
000A72r 3  A0 09        	ldy #9
000A74r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000A76r 3  85 rr        	sta dispx
000A78r 3               
000A78r 3  A0 08        	ldy #8
000A7Ar 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000A7Cr 3  29 FE        	and #254		; make it even.
000A7Er 3  91 rr        	sta (z80_ix),y 		; reset it.
000A80r 3  18           	clc 			; look down 16 pixels.
000A81r 3               numsp5:
000A81r 3  69 10        	adc #SPR_HGT
000A83r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000A85r 3  4C rr rr     	jmp laddv
000A88r 3               
000A88r 3               ;------------------------------------------
000A88r 3               ; Ladder up check.
000A88r 3               ;
000A88r 3               ; Input:
000A88r 3               ;  IX = sprite pointer
000A88r 3               ;
000A88r 3               ; Output:
000A88r 3               ;  A  = 0 is ok, A <>0 is not ok
000A88r 3               ;------------------------------------------
000A88r 3               
000A88r 3               laddu:
000A88r 3  A0 09        	ldy #9
000A8Ar 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000A8Cr 3  85 rr        	sta dispx
000A8Er 3               
000A8Er 3  A0 08        	ldy #8
000A90r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000A92r 3  29 FE        	and #254 		; make it even.
000A94r 3  91 rr        	sta (z80_ix),y		; reset it.
000A96r 3  18           	clc 			; look 2 pixels above feet.
000A97r 3               numsp6:
000A97r 3  69 0E        	adc #SPR_HGT-2
000A99r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000A9Br 3               laddv:
000A9Br 3  20 rr rr     	jsr tstbl 		; get map address.
000A9Er 3  20 rr rr     	jsr ldchk 		; standard ladder check.
000AA1r 3  F0 01        	beq :+
000AA3r 3  60           	rts 			; no way through.
000AA4r 3               :
000AA4r 3  E6 rr        	inc bufaddr 		; look right one cell.
000AA6r 3  D0 02        	bne :+
000AA8r 3  E6 rr        	inc bufaddr+1
000AAAr 3               :
000AAAr 3  20 rr rr     	jsr ldchk 		; do the check.
000AADr 3  F0 01        	beq :+
000AAFr 3  60           	rts 			; impassable.
000AB0r 3               :
000AB0r 3  A5 rr        	lda dispx 		; y coordinate.
000AB2r 3  29 07        	and #7 			; position straddling block cells.
000AB4r 3  D0 01        	bne :+
000AB6r 3  60           	rts 			; no more checks needed.
000AB7r 3               :
000AB7r 3  E6 rr        	inc bufaddr 		; look to third cell.
000AB9r 3  D0 02        	bne :+
000ABBr 3  E6 rr        	inc bufaddr+1
000ABDr 3               :
000ABDr 3  20 rr rr     	jsr ldchk 		; do the check.
000AC0r 3  60           	rts  			; return with zero flag set accordingly.
000AC1r 3               .endif
000AC1r 3               
000AC1r 3               ;---------------------------------------------------------
000AC1r 3               ; Can go up check.
000AC1r 3               ;
000AC1r 3               ; Input:
000AC1r 3               ;  IX = sprite pointer
000AC1r 3               ;
000AC1r 3               ; Output:
000AC1r 3               ;  A  = 0 is ok, A <>0 is not ok
000AC1r 3               ;---------------------------------------------------------
000AC1r 3               
000AC1r 3               cangu:
000AC1r 3  A0 09        	ldy #9
000AC3r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000AC5r 3  85 rr        	sta dispx
000AC7r 3  A0 08        	ldy #8
000AC9r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000ACBr 3  38           	sec
000ACCr 3  E9 02        	sbc #2
000ACEr 3  85 rr        	sta dispy		; coords in dispx,dispy.
000AD0r 3  20 rr rr     	jsr tstbl 		; get map address.
000AD3r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000AD6r 3  F0 01        	beq :+
000AD8r 3  60           	rts			; no way through.
000AD9r 3               :
000AD9r 3  E6 rr        	inc bufaddr		; look right one cell.
000ADBr 3  D0 02        	bne :+
000ADDr 3  E6 rr        	inc bufaddr+1
000ADFr 3               :
000ADFr 3  20 rr rr     	jsr lrchk 		; do the check.
000AE2r 3  F0 01        	beq :+
000AE4r 3  60           	rts			; impassable.
000AE5r 3               :
000AE5r 3  A5 rr        	lda dispx		; x coordinate.
000AE7r 3  29 07        	and #7			; position straddling block cells.
000AE9r 3  D0 01        	bne :+
000AEBr 3  60           	rts			; no more checks needed.
000AECr 3               :
000AECr 3  E6 rr        	inc bufaddr		; look to third cell.
000AEEr 3  D0 02        	bne :+
000AF0r 3  E6 rr        	inc bufaddr+1
000AF2r 3               :
000AF2r 3  20 rr rr     	jsr lrchk		; do the check.
000AF5r 3  60           	rts 			; return with zero flag set accordingly.
000AF6r 3               
000AF6r 3               ;---------------------------------------------------------
000AF6r 3               ; Can go down check.
000AF6r 3               ;
000AF6r 3               ; Input:
000AF6r 3               ;  IX = sprite pointer
000AF6r 3               ;
000AF6r 3               ; Output:
000AF6r 3               ;  A  = 0 is ok, A <>0 is not ok
000AF6r 3               ;---------------------------------------------------------
000AF6r 3               
000AF6r 3               cangd:
000AF6r 3  A0 09        	ldy #9
000AF8r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000AFAr 3  85 rr        	sta dispx
000AFCr 3  A0 08        	ldy #8
000AFEr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B00r 3  18           	clc
000B01r 3               numsp3:
000B01r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000B03r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000B05r 3  20 rr rr     	jsr tstbl 		; get map address.
000B08r 3  20 rr rr     	jsr plchk 		; block, platform check.
000B0Br 3  F0 01        	beq :+
000B0Dr 3  60           	rts			; no way through.
000B0Er 3               :
000B0Er 3  E6 rr        	inc bufaddr		; look right one cell.
000B10r 3  D0 02        	bne :+
000B12r 3  E6 rr        	inc bufaddr+1
000B14r 3               :
000B14r 3  20 rr rr     	jsr plchk		; block, platform check.
000B17r 3  F0 01        	beq :+
000B19r 3  60           	rts			; impassable.
000B1Ar 3               :
000B1Ar 3  A5 rr        	lda dispx		; x coordinate.
000B1Cr 3  29 07        	and #7			; position straddling block cells.
000B1Er 3  D0 01        	bne :+
000B20r 3  60           	rts			; no more checks needed.
000B21r 3               :
000B21r 3  E6 rr        	inc bufaddr		; look to third cell.
000B23r 3  D0 02        	bne :+
000B25r 3  E6 rr        	inc bufaddr+1
000B27r 3               :
000B27r 3  20 rr rr     	jsr plchk		; block, platform check.
000B2Ar 3  60           	rts			; return with zero flag set accordingly.
000B2Br 3               
000B2Br 3               ;---------------------------------------------------------
000B2Br 3               ; Can go left check.
000B2Br 3               ;
000B2Br 3               ; Input:
000B2Br 3               ;  IX = sprite pointer
000B2Br 3               ;
000B2Br 3               ; Output:
000B2Br 3               ;  A  = 0 is ok, A <>0 is not ok
000B2Br 3               ;---------------------------------------------------------
000B2Br 3               
000B2Br 3               cangl:
000B2Br 3  A0 08        	ldy #8
000B2Dr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000B2Fr 3  85 rr        	sta dispy
000B31r 3  A0 09        	ldy #9
000B33r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000B35r 3  38           	sec
000B36r 3  E9 02        	sbc #2			; look left 2 pixels.
000B38r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000B3Ar 3  4C rr rr     	jmp cangh		; test if we can go there.
000B3Dr 3               
000B3Dr 3               ;---------------------------------------------------------
000B3Dr 3               ; Can go right check.
000B3Dr 3               ;
000B3Dr 3               ; Input:
000B3Dr 3               ;  IX = sprite pointer
000B3Dr 3               ;
000B3Dr 3               ; Output:
000B3Dr 3               ;  A  = 0 is ok, A <>0 is not ok
000B3Dr 3               ;---------------------------------------------------------
000B3Dr 3               
000B3Dr 3               cangr:
000B3Dr 3  A0 08        	ldy #8
000B3Fr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B41r 3  85 rr        	sta dispy
000B43r 3  A0 09        	ldy #9
000B45r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B47r 3  18           	clc
000B48r 3  69 10        	adc #16			; look right 16 pixels.
000B4Ar 3  85 rr        	sta dispx		; coords in dispx,dispy.
000B4Cr 3               cangh:
000B4Cr 3               cangh2:
000B4Cr 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000B4Er 3  85 rr        	sta z80_b
000B50r 3  A5 rr        	lda dispy		; y position.
000B52r 3  29 07        	and #7			; does x straddle cells?
000B54r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000B56r 3  C6 rr        	dec z80_b		; one less row to write.
000B58r 3               cangh0:
000B58r 3  20 rr rr     	jsr tstbl		; get map address.
000B5Br 3               cangh1:
000B5Br 3  20 rr rr     	jsr lrchk		; standard left/right check.
000B5Er 3  F0 01        	beq :+
000B60r 3  60           	rts			; no way through.
000B61r 3               :
000B61r 3  48           	pha
000B62r 3  18           	clc
000B63r 3  A5 rr        	lda bufaddr
000B65r 3  69 20        	adc #32			; look down.
000B67r 3  85 rr        	sta bufaddr
000B69r 3  90 02        	bcc :+
000B6Br 3  E6 rr        	inc bufaddr+1
000B6Dr 3               :
000B6Dr 3  68           	pla
000B6Er 3               
000B6Er 3  C6 rr        	dec z80_b
000B70r 3  D0 E9        	bne cangh1
000B72r 3  60           	rts
000B73r 3               
000B73r 3               ;-------------------------------------
000B73r 3               ; Check left/right movement is okay.
000B73r 3               ;
000B73r 3               ; Input:
000B73r 3               ;  bufaddr = MAP + x/8 + y/8*32
000B73r 3               ;
000B73r 3               ; Output:
000B73r 3               ;  A  = 0 is ok, A <>0 is not ok
000B73r 3               ;-------------------------------------
000B73r 3               
000B73r 3               lrchk:
000B73r 3  A0 00        	ldy #0
000B75r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000B77r 3  C9 02        	cmp #WALL 		; is it passable?
000B79r 3  F0 0A        	beq lrchkx		; no.
000B7Br 3               
000B7Br 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000B7Dr 3  F0 06        	beq lrchkx		; not passable.
000B7Fr 3  A9 00        	lda #0
000B81r 3  60           	rts
000B82r 3               
000B82r 3               ;--------------------------------------------------------------
000B82r 3               ; Called by mmenu
000B82r 3               ;--------------------------------------------------------------
000B82r 3               
000B82r 3               always:
000B82r 3  A9 FF        	lda #255		; report it as okay.
000B84r 3  60           	rts
000B85r 3               
000B85r 3               lrchkx:
000B85r 3  A9 01        	lda #1 			; reset all bits.
000B87r 3  60           	rts
000B88r 3               
000B88r 3               
000B88r 3               ;--------------------------------------------------------------
000B88r 3               ; Check platform or solid item is not in way.
000B88r 3               ;
000B88r 3               ; Input:
000B88r 3               ;  bufaddr = MAP + x/8 + y/8*32
000B88r 3               ;
000B88r 3               ; Output:
000B88r 3               ;  A  = 0 is ok, A <>0 is not ok
000B88r 3               ;--------------------------------------------------------------
000B88r 3               
000B88r 3               plchk:
000B88r 3  A0 00        	ldy #0
000B8Ar 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000B8Cr 3  C9 02        	cmp #WALL 		; is it passable?
000B8Er 3  F0 F5        	beq lrchkx		; no.
000B90r 3               .if pflag .or dflag
000B90r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000B92r 3  F0 F1        	beq lrchkx		; not passable.
000B94r 3               .endif
000B94r 3  C9 01        	cmp #PLATFM		; platform is solid.
000B96r 3  F0 07        	beq plchkx		; not passable.
000B98r 3               .if lflag
000B98r 3  C9 03        	cmp #LADDER		; is it a ladder?
000B9Ar 3  F0 E9        	beq lrchkx		; on ladder, deny movement.
000B9Cr 3               .endif
000B9Cr 3               plchk0:
000B9Cr 3  A9 00        	lda #0			; report as ok
000B9Er 3  60           	rts
000B9Fr 3               plchkx:
000B9Fr 3  A5 rr        	lda dispy		; x coordinate.
000BA1r 3  29 07        	and #7			; position straddling blocks.
000BA3r 3  F0 E0        	beq lrchkx		; on platform, deny movement.
000BA5r 3  4C rr rr     	jmp plchk0
000BA8r 3               
000BA8r 3               ;--------------------------------------------------------------
000BA8r 3               ; Check ladder is available.
000BA8r 3               ;
000BA8r 3               ; Input:
000BA8r 3               ;  bufaddr = MAP + x/8 + y/8*32
000BA8r 3               ;
000BA8r 3               ; Output:
000BA8r 3               ;  A  = 0 is ok, A <>0 is not ok
000BA8r 3               ;--------------------------------------------------------------
000BA8r 3               
000BA8r 3               .if lflag
000BA8r 3               ldchk:
000BA8r 3  A0 00        	ldy #0
000BAAr 3  B1 rr        	lda (bufaddr),y 	; fetch cell.
000BACr 3  C9 03        	cmp #LADDER 		; is it a ladder?
000BAEr 3  F0 03        	beq ldchk1
000BB0r 3  A9 01        	lda #1
000BB2r 3  60           	rts  			; return with zero flag set accordingly.
000BB3r 3               ldchk1:
000BB3r 3  A9 00        	lda #0
000BB5r 3  60           	rts
000BB6r 3               .endif
000BB6r 3               
000BB6r 3               ;--------------------------------------------------------------
000BB6r 3               ; Get collectables.
000BB6r 3               ;--------------------------------------------------------------
000BB6r 3               
000BB6r 3               .if cflag
000BB6r 3               getcol:
000BB6r 3                       lda #COLECT             ; collectable blocks.
000BB6r 3                       sta z80_b
000BB6r 3                       jsr tded                ; test for collectable blocks.
000BB6r 3                       cmp z80_b               ; did we find one?
000BB6r 3                       beq :+
000BB6r 3                       rts                     ; none were found, job done.
000BB6r 3               :
000BB6r 3                       jsr gtblk               ; get block.
000BB6r 3                       jsr evnt20              ; collected block event.
000BB6r 3                       jmp getcol              ; repeat until none left.
000BB6r 3               
000BB6r 3               ; Get collectable block.
000BB6r 3               
000BB6r 3               gtblk:
000BB6r 3               	ldy #0
000BB6r 3               	lda (bufaddr),y
000BB6r 3               	sta z80_a
000BB6r 3                       lda #0
000BB6r 3                       sta (bufaddr),y		; make it empty now.
000BB6r 3               
000BB6r 3               	lda bufaddr		; set dispx
000BB6r 3               	and #31
000BB6r 3               	sta dispx
000BB6r 3               
000BB6r 3               	lda bufaddr+1		; Set dispy
000BB6r 3               	sec
000BB6r 3               	sbc #>MAP
000BB6r 3               	sta bufaddr+1
000BB6r 3               	asl bufaddr
000BB6r 3               	rol bufaddr+1
000BB6r 3               	asl bufaddr
000BB6r 3               	rol bufaddr+1
000BB6r 3               	asl bufaddr
000BB6r 3               	rol bufaddr+1
000BB6r 3               	lda bufaddr+1
000BB6r 3               	sta dispy
000BB6r 3               
000BB6r 3               	lda colpatt		; get blocknr
000BB6r 3               	sta z80_e		; displacement in e.
000BB6r 3               	lda #0
000BB6r 3               	sta z80_d		; no high byte.
000BB6r 3               	asl z80_e  		; multiply char by 8.
000BB6r 3               	rol z80_d
000BB6r 3               	asl z80_e
000BB6r 3               	rol z80_d
000BB6r 3               	asl z80_e
000BB6r 3               	rol z80_d
000BB6r 3               	clc
000BB6r 3               	lda z80_e
000BB6r 3               	adc #<chgfx 		; address of graphics.
000BB6r 3               	sta tileaddr
000BB6r 3               	lda z80_d
000BB6r 3               	adc #>chgfx
000BB6r 3               	sta tileaddr+1
000BB6r 3               	jsr gprad 		; get screen address.
000BB6r 3               	ldx #7			; number of pixel rows to write.
000BB6r 3               gtblk0:
000BB6r 3               	ldy #0
000BB6r 3               	lda (tileaddr),y 	; get image byte.
000BB6r 3               	ldy scrtab,x
000BB6r 3               	eor (scraddr),y 	; XOR tile on screen
000BB6r 3               	sta (scraddr),y 	; copy to screen.
000BB6r 3               	inc tileaddr 		; next image byte.
000BB6r 3               	bne :+
000BB6r 3               	inc tileaddr+1
000BB6r 3               :
000BB6r 3               	dex	 		; repeat for 8 pixel rows.
000BB6r 3               	bpl gtblk0
000BB6r 3               	rts
000BB6r 3               .endif
000BB6r 3               
000BB6r 3               ;--------------------------------------------------------------
000BB6r 3               ; Touched deadly block check.
000BB6r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000BB6r 3               ;
000BB6r 3               ; Input:
000BB6r 3               ;  IX = sprite address
000BB6r 3               ;
000BB6r 3               ; Output:
000BB6r 3               ;  A  = 0 is ok, A=5 is not ok
000BB6r 3               ;--------------------------------------------------------------
000BB6r 3               
000BB6r 3               tded:
000BB6r 3  A0 08        	ldy #8
000BB8r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000BBAr 3  85 rr        	sta dispy
000BBCr 3  C8           	iny
000BBDr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000BBFr 3  85 rr        	sta dispx		; coords in dispx,dispy.
000BC1r 3  20 rr rr     	jsr tstbl		; get map address.
000BC4r 3  48           	pha
000BC5r 3  A9 1F        	lda #31			; default distance to next line down.
000BC7r 3  85 rr        	sta z80_e
000BC9r 3  68           	pla
000BCAr 3  C5 rr        	cmp z80_b		; is this the required block?
000BCCr 3  D0 01        	bne :+
000BCEr 3  60           	rts			; yes.
000BCFr 3               :
000BCFr 3  E6 rr        	inc bufaddr 		; next cell.
000BD1r 3  D0 02        	bne :+
000BD3r 3  E6 rr        	inc bufaddr+1
000BD5r 3               :
000BD5r 3  A0 00        	ldy #0
000BD7r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000BD9r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000BDBr 3  D0 01        	bne :+
000BDDr 3  60           	rts			; yes.
000BDEr 3               :
000BDEr 3  A5 rr        	lda dispx		; horizontal position.
000BE0r 3  85 rr        	sta z80_c 		; store column in c register.
000BE2r 3  29 07        	and #7			; is it straddling cells?
000BE4r 3  D0 03        	bne :+
000BE6r 3  4C rr rr     	jmp tded0		; no.
000BE9r 3               :
000BE9r 3  E6 rr        	inc bufaddr 		; last cell.
000BEBr 3  D0 02        	bne :+
000BEDr 3  E6 rr        	inc bufaddr+1
000BEFr 3               :
000BEFr 3  A0 00        	ldy #0
000BF1r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000BF3r 3  C5 rr        	cmp z80_b		; is this the block?
000BF5r 3  D0 01        	bne :+
000BF7r 3  60           	rts			; yes.
000BF8r 3               :
000BF8r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000BFAr 3               tded0:
000BFAr 3  18           	clc 			; point to next row.
000BFBr 3  A5 rr        	lda bufaddr
000BFDr 3  65 rr        	adc z80_e
000BFFr 3  85 rr        	sta bufaddr
000C01r 3  90 02        	bcc :+
000C03r 3  E6 rr        	inc bufaddr+1
000C05r 3               :
000C05r 3  A0 00        	ldy #0
000C07r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000C09r 3  C5 rr        	cmp z80_b		; is this fatal?
000C0Br 3  D0 01        	bne :+
000C0Dr 3  60           	rts			; yes.
000C0Er 3               :
000C0Er 3  E6 rr        	inc bufaddr 		; next cell.
000C10r 3  D0 02        	bne :+
000C12r 3  E6 rr        	inc bufaddr+1
000C14r 3               :
000C14r 3  A0 00        	ldy #0
000C16r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C18r 3  C5 rr        	cmp z80_b		; is this fatal?
000C1Ar 3  D0 01        	bne :+
000C1Cr 3  60           	rts			; yes.
000C1Dr 3               :
000C1Dr 3  A5 rr        	lda z80_c		; horizontal position.
000C1Fr 3  29 07        	and #7			; is it straddling cells?
000C21r 3  D0 03        	bne :+
000C23r 3  4C rr rr     	jmp tded1 		; no.
000C26r 3               :
000C26r 3  E6 rr        	inc bufaddr		; last cell.
000C28r 3  D0 02        	bne :+
000C2Ar 3  E6 rr        	inc bufaddr+1
000C2Cr 3               :
000C2Cr 3  A0 00        	ldy #0
000C2Er 3  B1 rr        	lda (bufaddr),y		; fetch type.
000C30r 3  C5 rr        	cmp z80_b		; is this fatal?
000C32r 3  D0 01        	bne :+
000C34r 3  60           	rts			; yes.
000C35r 3               :
000C35r 3               tded1:
000C35r 3  A5 rr        	lda dispy		; vertical position.
000C37r 3  29 07        	and #7 			; is it straddling cells?
000C39r 3  D0 01        	bne :+
000C3Br 3  60           	rts			; no, job done.
000C3Cr 3               :
000C3Cr 3  18           	clc			; point to next row.
000C3Dr 3  A5 rr        	lda bufaddr
000C3Fr 3  65 rr        	adc z80_e
000C41r 3  85 rr        	sta bufaddr
000C43r 3  90 02        	bcc :+
000C45r 3  E6 rr        	inc bufaddr+1
000C47r 3               :
000C47r 3  A0 00        	ldy #0
000C49r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000C4Br 3  C5 rr        	cmp z80_b		; is this fatal?
000C4Dr 3  D0 01        	bne :+
000C4Fr 3  60           	rts			; yes.
000C50r 3               :
000C50r 3  E6 rr        	inc bufaddr		; next cell.
000C52r 3  D0 02        	bne :+
000C54r 3  E6 rr        	inc bufaddr+1
000C56r 3               :
000C56r 3  A0 00        	ldy #0
000C58r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C5Ar 3  C5 rr        	cmp z80_b		; is this fatal?
000C5Cr 3  D0 01        	bne :+
000C5Er 3  60           	rts			; yes.
000C5Fr 3               :
000C5Fr 3  A5 rr        	lda z80_c		; horizontal position.
000C61r 3  29 07        	and #7			; is it straddling cells?
000C63r 3  D0 01        	bne :+
000C65r 3  60           	rts			; no.
000C66r 3               :
000C66r 3  E6 rr        	inc bufaddr		; last cell.
000C68r 3  D0 02        	bne :+
000C6Ar 3  E6 rr        	inc bufaddr+1
000C6Cr 3               :
000C6Cr 3  A0 00        	ldy #0
000C6Er 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000C70r 3  60           	rts 			; return with final type in accumulator.
000C71r 3               
000C71r 3               ;---------------------------------------------------
000C71r 3               ; Fetch block type at (dispx, dispy).
000C71r 3               ;
000C71r 3               ; Output:
000C71r 3               ;  A = block type
000C71r 3               ;---------------------------------------------------
000C71r 3               
000C71r 3               tstbl:
000C71r 3  A5 rr        	lda dispy 		; fetch y coord.
000C73r 3  4A           	lsr a			; bufaddr = y/8
000C74r 3  4A           	lsr a
000C75r 3  4A           	lsr a
000C76r 3               ;	sta chary
000C76r 3               
000C76r 3  85 rr        	sta bufaddr
000C78r 3  A9 00        	lda #0
000C7Ar 3  85 rr        	sta bufaddr+1
000C7Cr 3               
000C7Cr 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000C7Er 3  26 rr        	rol bufaddr+1
000C80r 3  06 rr        	asl bufaddr
000C82r 3  26 rr        	rol bufaddr+1
000C84r 3  06 rr        	asl bufaddr
000C86r 3  26 rr        	rol bufaddr+1
000C88r 3  06 rr        	asl bufaddr
000C8Ar 3  26 rr        	rol bufaddr+1
000C8Cr 3  06 rr        	asl bufaddr
000C8Er 3  26 rr        	rol bufaddr+1
000C90r 3               
000C90r 3  A5 rr        	lda dispx		; x/8
000C92r 3  4A           	lsr a
000C93r 3  4A           	lsr a
000C94r 3  4A           	lsr a
000C95r 3               ;	sta charx
000C95r 3               
000C95r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000C96r 3  65 rr        	adc bufaddr
000C98r 3  69 00        	adc #<MAP
000C9Ar 3  85 rr        	sta bufaddr
000C9Cr 3  A5 rr        	lda bufaddr+1
000C9Er 3  69 04        	adc #>MAP
000CA0r 3  85 rr        	sta bufaddr+1
000CA2r 3               
000CA2r 3  A0 00        	ldy #0
000CA4r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000CA6r 3  60           	rts
000CA7r 3               
000CA7r 3               ;-------------------------------------------------------------------
000CA7r 3               ; Jump - if we can.
000CA7r 3               ; Requires initial speed to be set up in accumulator prior to call.
000CA7r 3               ;
000CA7r 3               ; Input:
000CA7r 3               ;  IX = sprite address
000CA7r 3               ;-------------------------------------------------------------------
000CA7r 3               
000CA7r 3               jump:
000CA7r 3  A0 0D        	ldy #var_jumpLo
000CA9r 3  B1 rr        	lda (z80_ix),y		; jump table low.
000CABr 3  A0 0E        	ldy #var_jumpHi
000CADr 3  11 rr        	ora (z80_ix),y		; jump table high.
000CAFr 3  F0 01        	beq :+
000CB1r 3  60           	rts			; already in the air.
000CB2r 3               :
000CB2r 3  A9 rr        	lda #>jtab
000CB4r 3  A0 0E        	ldy #var_jumpHi
000CB6r 3  91 rr        	sta (z80_ix),y		; set jump high.
000CB8r 3  A9 rr        	lda #<jtab		; jump table start.
000CBAr 3  A0 0D        	ldy #var_jumpLo
000CBCr 3  91 rr        	sta (z80_ix),y		; set jump low.
000CBEr 3  60           	rts
000CBFr 3               
000CBFr 3               ; Jump table.
000CBFr 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000CBFr 3               ;.align 32
000CBFr 3               ;jtab:
000CBFr 3               ;	.byte 248,250,252
000CBFr 3               ;	.byte 254,254,255
000CBFr 3               ;	.byte 255,255,0,0
000CBFr 3               ;	.byte 0,1,1,1,2,2
000CBFr 3               ;	.byte 4,6,8,8,8,99
000CBFr 3               
000CBFr 3               ;------------------------------------------------
000CBFr 3               ; Random numbers code.
000CBFr 3               ; Pseudo-random number generator, 8-bit.
000CBFr 3               ;
000CBFr 3               ; Output:
000CBFr 3               ;  RND = random number
000CBFr 3               ;------------------------------------------------
000CBFr 3               
000CBFr 3               random:
000CBFr 3  A5 rr        	lda seed
000CC1r 3  F0 05        	beq doEor
000CC3r 3  0A           	asl a
000CC4r 3  F0 04        	beq noEor
000CC6r 3  90 02        	bcc noEor
000CC8r 3  49 1D        doEor:	eor #$1d
000CCAr 3  85 rr        noEor:	sta seed
000CCCr 3  60           	rts
000CCDr 3               
000CCDr 3  A5 rr        	lda seed		; get last random number.
000CCFr 3  0A           	asl a
000CD0r 3  0A           	asl a
000CD1r 3  18           	clc
000CD2r 3  65 rr        	adc seed
000CD4r 3  18           	clc
000CD5r 3  69 45        	adc #$45
000CD7r 3  85 rr        	sta seed		; store new seed.
000CD9r 3  85 rr        	sta varrnd		; return number in variable.
000CDBr 3  60           	rts
000CDCr 3               
000CDCr 3               ;-------------------------------------------------------
000CDCr 3               ; Joystick and keyboard reading routines.
000CDCr 3               ;
000CDCr 3               ; contrl = 0, Keyboard
000CDCr 3               ;          1, JoyKeyb
000CDCr 3               ;          2, JoyMMC
000CDCr 3               ;
000CDCr 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000CDCr 3               ;             ||||||||
000CDCr 3               ;             |||||||+> Right    KEY 0  - X
000CDCr 3               ;             ||||||+-> Left     KEY 1  - Z
000CDCr 3               ;             |||||+--> Down     KEY 2  - .
000CDCr 3               ;             ||||+---> Up       KEY 3  - ;
000CDCr 3               ;             |||+----> Fire1    KEY 4  - SPC
000CDCr 3               ;             ||+-----> Fire2    KEY 5  - Q
000CDCr 3               ;             |+------> Fire3    KEY 6  - P
000CDCr 3               ;             +-------> Not used
000CDCr 3               ;
000CDCr 3               ;                       Option1  KEY 7  - 1
000CDCr 3               ;                       Option2  KEY 8  - 2
000CDCr 3               ;                       Option3  KEY 9  - 3
000CDCr 3               ;                       Option4  KEY 10 - 4
000CDCr 3               ;-------------------------------------------------------
000CDCr 3               
000CDCr 3               joykey:
000CDCr 3  A5 rr        	lda contrl 		; control flag.
000CDEr 3  C9 01        	cmp #1
000CE0r 3  F0 1A        	beq joy1 		; scan joystick1
000CE2r 3  C9 02        	cmp #2
000CE4r 3  F0 1C        	beq joy2 		; scan joystick2
000CE6r 3               
000CE6r 3               ; Scan keyboard
000CE6r 3               
000CE6r 3  A9 00        	lda #0		 	; zero reading.
000CE8r 3  85 rr        	sta z80_e
000CEAr 3               
000CEAr 3  A0 06        	ldy #6	 		; address of last key.
000CECr 3               joyke0:
000CECr 3  B9 rr rr     	lda keys,y 		; get key from table.
000CEFr 3  20 rr rr     	jsr ktest		; being pressed?
000CF2r 3  26 rr        	rol z80_e 		; rotate into reading.
000CF4r 3               
000CF4r 3  88           	dey		 	; next key.
000CF5r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000CF7r 3               joyret:
000CF7r 3  A5 rr        	lda z80_e
000CF9r 3  85 rr        	sta joyval
000CFBr 3  60           	rts
000CFCr 3               
000CFCr 3               ; Scan joystick 1
000CFCr 3               
000CFCr 3               joy1:
000CFCr 3  20 rr rr     	jsr joy1scan
000CFFr 3  4C rr rr     	jmp joyret 		; store the value.
000D02r 3               
000D02r 3               ; Scan joystick 2
000D02r 3               
000D02r 3               joy2:
000D02r 3  20 rr rr     	jsr joy2scan
000D05r 3  4C rr rr     	jmp joyret 		; store the value.
000D08r 3               
000D08r 3               ;---------------------------------------------------------------
000D08r 3               ; Display message.
000D08r 3               ;
000D08r 3               ; Input:
000D08r 3               ;  A = message number
000D08r 3               ;---------------------------------------------------------------
000D08r 3               
000D08r 3               dmsg:
000D08r 3  AA           	tax
000D09r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000D0Br 3  85 rr        	sta z80_l
000D0Dr 3  A9 rr        	lda #>msgdat
000D0Fr 3  85 rr        	sta z80_h
000D11r 3  20 rr rr     	jsr getwrd		; get message number.
000D14r 3               dmsg3:
000D14r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000D17r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000D1Ar 3  A5 rr        	lda prtmod		; print mode.
000D1Cr 3  D0 47        	bne bmsg1		; no, double-height text.
000D1Er 3               dmsg0:
000D1Er 3  A5 rr        	lda z80_h		; store string pointer.
000D20r 3  48           	pha
000D21r 3  A5 rr        	lda z80_l
000D23r 3  48           	pha
000D24r 3               
000D24r 3  A0 00        	ldy #0
000D26r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000D28r 3  29 7F        	and #127		; remove any end marker.
000D2Ar 3  C9 0D        	cmp #ASCII_NEWLINE
000D2Cr 3  F0 24        	beq dmsg1
000D2Er 3  20 rr rr     	jsr pchar		; display character.
000D31r 3  20 rr rr     	jsr nexpos 		; display position.
000D34r 3  D0 03        	bne dmsg2		; not on a new line.
000D36r 3  20 rr rr     	jsr nexlin		; next line down.
000D39r 3               dmsg2:
000D39r 3  68           	pla			; retrieve string pointer
000D3Ar 3  85 rr        	sta z80_l
000D3Cr 3  68           	pla
000D3Dr 3  85 rr        	sta z80_h
000D3Fr 3               
000D3Fr 3  A0 00        	ldy #0
000D41r 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000D43r 3  0A           	asl a  			; was it the end?
000D44r 3  90 03        	bcc :+
000D46r 3  4C rr rr     	jmp dscor2		; yes, job done.
000D49r 3               :
000D49r 3  E6 rr        	inc z80_l		; next character to display.
000D4Br 3  D0 02        	bne :+
000D4Dr 3  E6 rr        	inc z80_h
000D4Fr 3               :
000D4Fr 3  4C rr rr     	jmp dmsg0
000D52r 3               dmsg1:
000D52r 3  E6 rr        	inc dispy
000D54r 3  A5 rr        	lda dispy
000D56r 3  C9 18        	cmp #24
000D58r 3  90 04        	bcc dmsg4
000D5Ar 3  A9 00        	lda #0
000D5Cr 3  85 rr        	sta dispy
000D5Er 3               dmsg4:
000D5Er 3  A9 00        	lda #0
000D60r 3  85 rr        	sta dispx
000D62r 3  4C rr rr     	jmp dmsg2
000D65r 3               
000D65r 3               
000D65r 3               ;----------------------------------------------------------
000D65r 3               ; Display message in big text.
000D65r 3               ;
000D65r 3               ; Input:
000D65r 3               ;  HL = string pointer
000D65r 3               ;----------------------------------------------------------
000D65r 3               
000D65r 3               bmsg1:
000D65r 3  A0 00        	ldy #0
000D67r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000D69r 3  29 7F        	and #127		; only want 7 bits.
000D6Br 3  C9 0D        	cmp #ASCII_NEWLINE
000D6Dr 3  F0 13        	beq bmsg2
000D6Fr 3  20 rr rr     	jsr bchar 		; display big char.
000D72r 3               bmsg3:
000D72r 3  A0 00        	ldy #0
000D74r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000D76r 3  48           	pha
000D77r 3  E6 rr        	inc z80_l 		; next character in list.
000D79r 3  D0 02        	bne :+
000D7Br 3  E6 rr        	inc z80_h
000D7Dr 3               :
000D7Dr 3  68           	pla
000D7Er 3  0A           	asl a  			; was terminator flag set?
000D7Fr 3  90 E4        	bcc bmsg1		; no, keep going.
000D81r 3               
000D81r 3  60           	rts
000D82r 3               bmsg2:
000D82r 3  A9 00        	lda #0
000D84r 3  85 rr        	sta dispx
000D86r 3  E6 rr        	inc dispy
000D88r 3  E6 rr        	inc dispy
000D8Ar 3  A5 rr        	lda dispy
000D8Cr 3  C9 17        	cmp #23
000D8Er 3  90 E2        	bcc bmsg3
000D90r 3  A9 00        	lda #0
000D92r 3  85 rr        	sta dispy
000D94r 3  4C rr rr     	jmp bmsg3
000D97r 3               
000D97r 3               ;----------------------------------------------------------
000D97r 3               ; Big character display.
000D97r 3               ;
000D97r 3               ; Input:
000D97r 3               ;  A = character
000D97r 3               ;----------------------------------------------------------
000D97r 3               
000D97r 3               bchar:
000D97r 3  85 rr        	sta z80_e		; save char in lb
000D99r 3  A9 00        	lda #0
000D9Br 3  85 rr        	sta z80_d		; reset hb
000D9Dr 3               
000D9Dr 3  06 rr        	asl z80_e 		; multiply char by 8.
000D9Fr 3  26 rr        	rol z80_d
000DA1r 3  06 rr        	asl z80_e
000DA3r 3  26 rr        	rol z80_d
000DA5r 3  06 rr        	asl z80_e
000DA7r 3  26 rr        	rol z80_d		; de = a*8
000DA9r 3               
000DA9r 3  18           	clc			; de = #<(FONT-256) + a*8
000DAAr 3  A5 rr        	lda z80_e
000DACr 3  69 rr        	adc #<(FONT-256) 		; address of font.
000DAEr 3  85 rr        	sta z80_e
000DB0r 3  A5 rr        	lda z80_d
000DB2r 3  69 rr        	adc #>(FONT-256)
000DB4r 3  85 rr        	sta z80_d
000DB6r 3               
000DB6r 3  20 rr rr     	jsr gprad 		; get screen address.
000DB9r 3               
000DB9r 3  A2 00        	ldx #0			; height of character in font.
000DBBr 3               bchar0:
000DBBr 3  A0 00        	ldy #0
000DBDr 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000DBFr 3               
000DBFr 3               .if iflag
000DBFr 3               	eor #$ff
000DBFr 3               .endif
000DBFr 3               
000DBFr 3  91 rr        	sta (scraddr),y
000DC1r 3  48           	pha
000DC2r 3  20 rr rr     	jsr nline 		; next line down.
000DC5r 3  68           	pla
000DC6r 3  91 rr        	sta (scraddr),y
000DC8r 3  20 rr rr     	jsr nline 		; next line down.
000DCBr 3               
000DCBr 3  18           	clc
000DCCr 3  E6 rr        	inc z80_e 		; next line of font.
000DCEr 3  D0 02        	bne :+
000DD0r 3  E6 rr        	inc z80_d
000DD2r 3               :
000DD2r 3  E8           	inx
000DD3r 3  E0 08        	cpx #8
000DD5r 3  D0 E4        	bne bchar0
000DD7r 3               
000DD7r 3  20 rr rr     	jsr nexpos		; display position.
000DDAr 3  D0 05        	bne bchar2 		; not on a new line.
000DDCr 3               bchar3:
000DDCr 3  E6 rr        	inc dispy
000DDEr 3  20 rr rr     	jsr nexlin 		; next line check.
000DE1r 3               bchar2:
000DE1r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000DE4r 3               
000DE4r 3               
000DE4r 3               ;-------------------------------------------------
000DE4r 3               ; Display a character.
000DE4r 3               ;
000DE4r 3               ; Input:
000DE4r 3               ;  A = character
000DE4r 3               ;-------------------------------------------------
000DE4r 3               
000DE4r 3               achar:
000DE4r 3  85 rr        	sta z80_b 		; copy to b.
000DE6r 3  20 rr rr     	jsr preprt 		; get ready to print.
000DE9r 3  A5 rr        	lda z80_b		; character in accumulator.
000DEBr 3  A6 rr        	ldx prtmod 		; print mode.
000DEDr 3  F0 03        	beq :+
000DEFr 3  4C rr rr     	jmp bchar 		; no, double-height text.
000DF2r 3               :
000DF2r 3  20 rr rr     	jsr pchar 		; display character.
000DF5r 3  20 rr rr     	jsr nexpos 		; display position.
000DF8r 3  F0 E2        	beq bchar3		; next line down.
000DFAr 3  4C rr rr     	jmp bchar2 		; tidy up.
000DFDr 3               
000DFDr 3               
000DFDr 3               ;-------------------------------------------------
000DFDr 3               ; Get next print column position.
000DFDr 3               ;-------------------------------------------------
000DFDr 3               
000DFDr 3               nexpos:
000DFDr 3  E6 rr        	inc dispx		; move along one position.
000DFFr 3  A5 rr        	lda dispx 		; get coordinate.
000E01r 3               ;	and #31
000E01r 3  60           	rts 			; return with status in zero flag.
000E02r 3               
000E02r 3               ;-------------------------------------------------
000E02r 3               ; Get next print line position.
000E02r 3               ;-------------------------------------------------
000E02r 3               
000E02r 3               nexlin:
000E02r 3  E6 rr        	inc dispy 		; newline.
000E04r 3  A5 rr        	lda dispy		; vertical position.
000E06r 3  C9 18        	cmp #24			; past screen edge?
000E08r 3  B0 01        	bcs :+
000E0Ar 3  60           	rts			; no, still okay.
000E0Br 3               :
000E0Br 3  A9 00        	lda #0			; restart at top.
000E0Dr 3  85 rr        	sta dispy
000E0Fr 3  60           	rts
000E10r 3               
000E10r 3               ;--------------------------------------------------------
000E10r 3               ; Pre-print preliminaries.
000E10r 3               ;--------------------------------------------------------
000E10r 3               
000E10r 3               preprt:
000E10r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000E12r 3  8D rr rr     	sta grbase		; set up graphics base.
000E15r 3  A9 rr        	lda #>(FONT-256)
000E17r 3  8D rr rr     	sta grbase+1
000E1Ar 3               prescr:
000E1Ar 3  A5 rr        	lda charx 		; display coordinates.
000E1Cr 3  85 rr        	sta dispx		; set up general coordinates.
000E1Er 3  A5 rr        	lda chary
000E20r 3  85 rr        	sta dispy
000E22r 3  60           	rts
000E23r 3               
000E23r 3               ;--------------------------------------------------------------
000E23r 3               ; Get messagenr x in hl
000E23r 3               ;
000E23r 3               ; Input:
000E23r 3               ;  HL = pointer to message list
000E23r 3               ;  X  = message number.
000E23r 3               ;--------------------------------------------------------------
000E23r 3               
000E23r 3               getwrd:
000E23r 3  E0 00        	cpx #0
000E25r 3  D0 01        	bne:+ 			; first word in list?
000E27r 3  60           	rts 			; yep, don't search.
000E28r 3               :
000E28r 3  A0 00        	ldy #0
000E2Ar 3               getwd0:
000E2Ar 3  B1 rr        	lda (z80_hl),y
000E2Cr 3  48           	pha
000E2Dr 3  E6 rr        	inc z80_l
000E2Fr 3  D0 02        	bne :+
000E31r 3  E6 rr        	inc z80_h
000E33r 3               :
000E33r 3  68           	pla
000E34r 3  C9 80        	cmp #128		; found end?
000E36r 3  30 F2        	bmi getwd0		; no, carry on.
000E38r 3  CA           	dex			; until we have right number.
000E39r 3  D0 EF        	bne getwd0
000E3Br 3  60           	rts
000E3Cr 3               
000E3Cr 3               ;-----------------------------------------------------------
000E3Cr 3               ; Bubble sort.
000E3Cr 3               ;-----------------------------------------------------------
000E3Cr 3               
000E3Cr 3               bsort:
000E3Cr 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000E3Er 3  85 rr        	sta qscnt
000E40r 3               
000E40r 3  A9 rr        	lda #<sprtab 		; sprite table.
000E42r 3  85 rr        	sta z80_x
000E44r 3  A9 rr        	lda #>sprtab
000E46r 3  85 rr        	sta z80_i
000E48r 3               bsort0:
000E48r 3  A0 00        	ldy #0
000E4Ar 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000E4Cr 3  C9 FF        	cmp #255 		; is it switched off?
000E4Er 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000E50r 3               
000E50r 3  A0 11        	ldy #TABSIZ
000E52r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000E54r 3  C9 FF        	cmp #255 		; is it enabled?
000E56r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000E58r 3               
000E58r 3  A0 14        	ldy #TABSIZ+3
000E5Ar 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000E5Cr 3  A0 03        	ldy #3
000E5Er 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000E60r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000E62r 3               bsort2:
000E62r 3  18           	clc
000E63r 3  A5 rr        	lda z80_x
000E65r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000E67r 3  85 rr        	sta z80_x
000E69r 3  90 02        	bcc :+
000E6Br 3  E6 rr        	inc z80_i
000E6Dr 3               :
000E6Dr 3  C6 rr        	dec qscnt
000E6Fr 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000E71r 3  60           	rts
000E72r 3               
000E72r 3               bsort1:
000E72r 3  A0 11        	ldy #TABSIZ
000E74r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000E76r 3  C9 FF        	cmp #255		; is it enabled?
000E78r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000E7Ar 3  20 rr rr     	jsr swspr		; swap positions.
000E7Dr 3  4C rr rr     	jmp bsort2
000E80r 3               swemp:
000E80r 3  A0 11        	ldy #TABSIZ
000E82r 3  B1 rr        	lda (z80_ix),y		; next table entry.
000E84r 3  C9 FF        	cmp #255		; is that one on?
000E86r 3  F0 DA        	beq bsort2		; no, nothing to swap.
000E88r 3  20 rr rr     	jsr swspr		; swap positions.
000E8Br 3  4C rr rr     	jmp bsort2
000E8Er 3               
000E8Er 3               ; Swap sprites.
000E8Er 3               
000E8Er 3               swspr:
000E8Er 3  A5 rr        	lda z80_x		; table address
000E90r 3  85 rr        	sta z80_e		; copy to de pair.
000E92r 3  85 rr        	sta z80_l		; copy to hl pair.
000E94r 3  A5 rr        	lda z80_i
000E96r 3  85 rr        	sta z80_h
000E98r 3  85 rr        	sta z80_d
000E9Ar 3               
000E9Ar 3  18           	clc
000E9Br 3  A5 rr        	lda z80_l
000E9Dr 3  69 11        	adc #TABSIZ		; distance to second entry.
000E9Fr 3  85 rr        	sta z80_l
000EA1r 3  90 02        	bcc :+
000EA3r 3  E6 rr        	inc z80_h
000EA5r 3               :
000EA5r 3  A9 11        	lda #TABSIZ		; bytes to swap.
000EA7r 3  85 rr        	sta z80_b
000EA9r 3  A0 00        	ldy #0
000EABr 3               swspr0:
000EABr 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000EADr 3  48           	pha
000EAEr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000EB0r 3  91 rr        	sta (z80_hl),y 		; copy to second.
000EB2r 3  68           	pla
000EB3r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000EB5r 3               
000EB5r 3  E6 rr        	inc z80_e 		; next byte.
000EB7r 3  D0 02        	bne :+
000EB9r 3  E6 rr        	inc z80_d
000EBBr 3               :
000EBBr 3  E6 rr        	inc z80_l 		; next byte.
000EBDr 3  D0 02        	bne :+
000EBFr 3  E6 rr        	inc z80_h
000EC1r 3               :
000EC1r 3  C6 rr        	dec z80_b
000EC3r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000EC5r 3  60           	rts
000EC6r 3               
000EC6r 3               ;----------------------------------------------------
000EC6r 3               ; Process sprites.
000EC6r 3               ;----------------------------------------------------
000EC6r 3               
000EC6r 3               pspr:
000EC6r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000EC8r 3  85 rr        	sta sprptr
000ECAr 3               
000ECAr 3  A9 rr        	lda #<sprtab 		; sprite table.
000ECCr 3  85 rr        	sta z80_x
000ECEr 3  A9 rr        	lda #>sprtab
000ED0r 3  85 rr        	sta z80_i
000ED2r 3               pspr1:
000ED2r 3  A0 00        	ldy #0
000ED4r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000ED6r 3  C9 09        	cmp #9 			; within range of sprite types?
000ED8r 3  B0 03        	bcs :+
000EDAr 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000EDDr 3               :
000EDDr 3  18           	clc
000EDEr 3  A5 rr        	lda z80_x
000EE0r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000EE2r 3  85 rr        	sta z80_x
000EE4r 3  90 02        	bcc :+
000EE6r 3  E6 rr        	inc z80_i		; next sprite.
000EE8r 3               :
000EE8r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000EEAr 3  D0 E6        	bne pspr1
000EECr 3  60           	rts
000EEDr 3               
000EEDr 3               pspr2:
000EEDr 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000EEFr 3  85 rr        	sta ogptr
000EF1r 3  A5 rr        	lda z80_i
000EF3r 3  85 rr        	sta ogptr+1
000EF5r 3  20 rr rr     	jsr pspr3		; do the routine.
000EF8r 3               rtorg:
000EF8r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000EFAr 3  85 rr        	sta z80_x
000EFCr 3  A5 rr        	lda ogptr+1
000EFEr 3  85 rr        	sta z80_i
000F00r 3               rtorg0:
000F00r 3  60           	rts
000F01r 3               
000F01r 3               pspr3:
000F01r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000F03r 3  85 rr        	sta z80_l
000F05r 3  A9 rr        	lda #>evtyp0
000F07r 3  85 rr        	sta z80_h
000F09r 3               pspr4:
000F09r 3  B1 rr        	lda (z80_ix),y
000F0Br 3  0A           	asl a			; double accumulator.
000F0Cr 3  18           	clc
000F0Dr 3  65 rr        	adc z80_l
000F0Fr 3  85 rr        	sta z80_l
000F11r 3  90 02        	bcc :+
000F13r 3  E6 rr        	inc z80_h
000F15r 3               :
000F15r 3  B1 rr        	lda (z80_hl),y
000F17r 3  85 rr        	sta z80_e 		; copy to de.
000F19r 3  48           	pha
000F1Ar 3               
000F1Ar 3  E6 rr        	inc z80_l 		; next byte of address.
000F1Cr 3  D0 02        	bne :+
000F1Er 3  E6 rr        	inc z80_h
000F20r 3               :
000F20r 3  B1 rr        	lda (z80_hl),y 		; address high.
000F22r 3  85 rr        	sta z80_d
000F24r 3               
000F24r 3  48           	pha	 		; swap address into hl.
000F25r 3  A5 rr        	lda z80_h
000F27r 3  85 rr        	sta z80_d
000F29r 3  68           	pla
000F2Ar 3  85 rr        	sta z80_h
000F2Cr 3  68           	pla
000F2Dr 3  85 rr        	sta z80_l
000F2Fr 3  A5 rr        	lda z80_l
000F31r 3  85 rr        	sta z80_e
000F33r 3               
000F33r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000F36r 3               
000F36r 3               ; Address of each sprite type's routine.
000F36r 3               
000F36r 3  rr rr        evtyp0:	.word evnt00
000F38r 3  rr rr        evtyp1:	.word evnt01
000F3Ar 3  rr rr        evtyp2:	.word evnt02
000F3Cr 3  rr rr        evtyp3:	.word evnt03
000F3Er 3  rr rr        evtyp4:	.word evnt04
000F40r 3  rr rr        evtyp5:	.word evnt05
000F42r 3  rr rr        evtyp6:	.word evnt06
000F44r 3  rr rr        evtyp7:	.word evnt07
000F46r 3  rr rr        evtyp8:	.word evnt08
000F48r 3               
000F48r 3               ;--------------------------------------------------------------
000F48r 3               ; Display sprites.
000F48r 3               ;
000F48r 3               ; Input:
000F48r 3               ;  IX = sprite table
000F48r 3               ;--------------------------------------------------------------
000F48r 3               
000F48r 3               dspr:
000F48r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000F4Ar 3  85 rr        	sta sprcnt
000F4Cr 3               
000F4Cr 3               dspr0:
000F4Cr 3  A0 00        	ldy #var_Type
000F4Er 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000F50r 3  C9 FF        	cmp #255 		; is it enabled?
000F52r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000F54r 3               dspr5:
000F54r 3  A0 05        	ldy #var_newType
000F56r 3  B1 rr        	lda (z80_ix),y 		; new type.
000F58r 3  C9 FF        	cmp #255		; is it enabled?
000F5Ar 3  F0 03        	beq dspr2
000F5Cr 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000F5Fr 3               dspr2:
000F5Fr 3  A0 05        	ldy #var_newType
000F61r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000F63r 3  A0 00        	ldy #var_Type
000F65r 3  91 rr        	sta (z80_ix),y
000F67r 3  A0 06        	ldy #var_newImage
000F69r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000F6Br 3  A0 01        	ldy #var_Image
000F6Dr 3  91 rr        	sta (z80_ix),y
000F6Fr 3  A0 07        	ldy #var_newFrame
000F71r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000F73r 3  A0 02        	ldy #var_Frame
000F75r 3  91 rr        	sta (z80_ix),y
000F77r 3  A0 08        	ldy #var_newY
000F79r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000F7Br 3  A0 03        	ldy #var_Y
000F7Dr 3  91 rr        	sta (z80_ix),y
000F7Fr 3  A0 09        	ldy #var_newX
000F81r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000F83r 3  A0 04        	ldy #var_X
000F85r 3  91 rr        	sta (z80_ix),y
000F87r 3               
000F87r 3  18           	clc
000F88r 3  A5 rr        	lda z80_x
000F8Ar 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000F8Cr 3  85 rr        	sta z80_x
000F8Er 3  A5 rr        	lda z80_i
000F90r 3  69 00        	adc #0
000F92r 3  85 rr        	sta z80_i 		; next sprite.
000F94r 3  C6 rr        	dec sprcnt
000F96r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000F98r 3  60           	rts
000F99r 3               
000F99r 3               dspr1:
000F99r 3               	; _BEEB clipping code copied from CPC Engine
000F99r 3  A0 03        	ldy #var_Y
000F9Br 3  B1 rr        	lda (z80_ix), y		; old x coord
000F9Dr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000F9Fr 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000FA1r 3               
000FA1r 3  A0 05        	ldy #var_newType
000FA3r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000FA5r 3  C9 FF        	cmp #255		; is this enabled?
000FA7r 3  D0 06        	bne dspr4 		; yes, display both.
000FA9r 3               
000FA9r 3               dspr6:
000FA9r 3  20 rr rr     	jsr sspria 		; show single sprite.
000FACr 3  4C rr rr     	jmp dspr2
000FAFr 3               
000FAFr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000FAFr 3               
000FAFr 3               dspr4:
000FAFr 3               	; _BEEB clipping code copied from CPC Engine
000FAFr 3  A0 08        	ldy #var_newY
000FB1r 3  B1 rr        	lda (z80_ix), y		; old x coord
000FB3r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000FB5r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000FB7r 3               
000FB7r 3  A0 04        	ldy #var_X
000FB9r 3  B1 rr        	lda (z80_ix),y		; old x.
000FBBr 3  A0 09        	ldy #var_newX
000FBDr 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000FBFr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000FC1r 3               
000FC1r 3  A0 03        	ldy #var_Y
000FC3r 3  B1 rr        	lda (z80_ix),y		; old y.
000FC5r 3  A0 08        	ldy #var_newY
000FC7r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000FC9r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000FCBr 3               
000FCBr 3  A0 02        	ldy #var_Frame
000FCDr 3  B1 rr        	lda (z80_ix),y 		; old frame.
000FCFr 3  A0 07        	ldy #var_newFrame
000FD1r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000FD3r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000FD5r 3               
000FD5r 3  A0 01        	ldy #var_Image
000FD7r 3  B1 rr        	lda (z80_ix),y 		; old image.
000FD9r 3  A0 06        	ldy #var_newImage
000FDBr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000FDDr 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000FDFr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000FE2r 3               dspr7:
000FE2r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000FE5r 3  4C rr rr     	jmp dspr2
000FE8r 3               dspr3:
000FE8r 3               	; _BEEB clipping code copied from CPC Engine
000FE8r 3  A0 08        	ldy #var_newY
000FEAr 3  B1 rr        	lda (z80_ix), y		; old x coord
000FECr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000FEEr 3  90 03        	bcc :+			; no, continue
000FF0r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000FF3r 3               :
000FF3r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000FF6r 3  4C rr rr     	jmp dspr2
000FF9r 3               
000FF9r 3               ;-----------------------------------------
000FF9r 3               ; Get sprite address calculations.
000FF9r 3               ; gspran = new sprite, gsprad = old sprite.
000FF9r 3               ;
000FF9r 3               ; Input:
000FF9r 3               ;  IX = sprite address
000FF9r 3               ;-----------------------------------------
000FF9r 3               
000FF9r 3               gspran:
000FF9r 3  A0 08        	ldy #var_newY
000FFBr 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000FFDr 3  85 rr        	sta dispy
000FFFr 3  A0 09        	ldy #var_newX
001001r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
001003r 3  85 rr        	sta dispx
001005r 3  A0 06        	ldy #var_newImage
001007r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
001009r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
00100Cr 3               
00100Cr 3  A0 00        	ldy #0
00100Er 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
001010r 3  A0 07        	ldy #var_newFrame
001012r 3  18           	clc
001013r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
001015r 3  4C rr rr     	jmp gspra0
001018r 3               
001018r 3               ;-----------------------------------------
001018r 3               ; Calculate old sprite address
001018r 3               ;
001018r 3               ; Input:
001018r 3               ;  IX = sprite address
001018r 3               ;
001018r 3               ; Output:
001018r 3               ;  B  = right byte mask
001018r 3               ;  C  = left byte mask
001018r 3               ;  DE = spriteframe address
001018r 3               ;  scraddr = screenaddress(dispx,dispy)
001018r 3               ;-----------------------------------------
001018r 3               
001018r 3               gsprad:
001018r 3  A0 03        	ldy #var_Y
00101Ar 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00101Cr 3  85 rr        	sta dispy
00101Er 3  A0 04        	ldy #var_X
001020r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
001022r 3  85 rr        	sta dispx
001024r 3  A0 01        	ldy #var_Image
001026r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
001028r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
00102Br 3               
00102Br 3  A0 00        	ldy #0
00102Dr 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
00102Fr 3  A0 02        	ldy #var_Frame
001031r 3  18           	clc
001032r 3  71 rr        	adc (z80_ix),y 		; add frame number.
001034r 3               
001034r 3               gspra0:
001034r 3               .if rflag
001034r 3               	sta z80_e		; multiply by 32.
001034r 3               	lda #0
001034r 3               	sta z80_d
001034r 3               
001034r 3               	asl z80_e
001034r 3               	rol z80_d
001034r 3               	asl z80_e
001034r 3               	rol z80_d
001034r 3               	asl z80_e
001034r 3               	rol z80_d
001034r 3               	asl z80_e
001034r 3               	rol z80_d
001034r 3               .if bflag
001034r 3               	lda z80_e		; multiply by 48
001034r 3               	sta tmp1
001034r 3               	lda z80_d
001034r 3               	sta tmp2
001034r 3               .endif
001034r 3               	asl z80_e
001034r 3               	rol z80_d
001034r 3               .if bflag
001034r 3               	clc
001034r 3               	lda z80_e
001034r 3               	adc tmp1
001034r 3               	sta z80_e
001034r 3               	lda z80_d
001034r 3               	adc tmp2
001034r 3               	sta z80_d
001034r 3               .endif
001034r 3               .else
001034r 3  4A           	lsr a	  		; multiply by 128.
001035r 3  85 rr        	sta z80_d 		; store in d.
001037r 3  85 rr        	sta tmp1
001039r 3  A9 00        	lda #0
00103Br 3  6A           	ror a
00103Cr 3  85 rr        	sta z80_e 		; got low byte.
00103Er 3  85 rr        	sta tmp2
001040r 3               .if bflag
001040r 3               	lsr tmp1		; multiply by 192
001040r 3               	ror tmp2
001040r 3               	clc
001040r 3               	lda tmp2
001040r 3               	adc z80_e
001040r 3               	sta z80_e
001040r 3               	lda tmp1
001040r 3               	adc z80_d
001040r 3               	sta z80_d
001040r 3               .endif
001040r 3               .endif
001040r 3  18           	clc 			; address of play sprites.
001041r 3  A5 rr        	lda z80_e
001043r 3  69 rr        	adc #<sprgfx
001045r 3  85 rr        	sta z80_e
001047r 3  A5 rr        	lda z80_d
001049r 3  69 rr        	adc #>sprgfx
00104Br 3  85 rr        	sta z80_d
00104Dr 3               
00104Dr 3  A5 rr        	lda dispx 		; y coordinate.
00104Fr 3  29 06        	and #6 			; position within byte boundary.
001051r 3  AA           	tax	 		; low byte of table displacement.
001052r 3               .if rflag
001052r 3               	stx sprshft
001052r 3               .else
001052r 3  0A           	asl a	  		; multiply by 32.
001053r 3  0A           	asl a  			; already a multiple
001054r 3  0A           	asl a  			; of 2, so just 4
001055r 3               .if bflag
001055r 3               	sta tmp1
001055r 3               	asl a  			; shifts needed.
001055r 3               	clc
001055r 3               	adc tmp1
001055r 3               .else
001055r 3  0A           	asl a  			; shifts needed.
001056r 3               .endif
001056r 3  18           	clc 			; add to sprite address.
001057r 3  65 rr        	adc z80_e
001059r 3  85 rr        	sta z80_e
00105Br 3  90 02        	bcc :+
00105Dr 3  E6 rr        	inc z80_d
00105Fr 3               :
00105Fr 3               .endif
00105Fr 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
001062r 3  85 rr        	sta z80_c 		; left mask.
001064r 3  BD rr rr     	lda spmask+1,x
001067r 3  85 rr        	sta z80_b 		; right mask.
001069r 3               ; Drop into screen address routine.
001069r 3  4C rr rr     	jmp scadd
00106Cr 3               
00106Cr 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
001070r 3  0F F0 03 FC  
001074r 3               
001074r 3               
001074r 3               ;-----------------------------------------------------------
001074r 3               ; Animates a sprite.
001074r 3               ;
001074r 3               ; Input:
001074r 3               ;  IX = sprite address
001074r 3               ;  HL = last sprite address
001074r 3               ;-----------------------------------------------------------
001074r 3               
001074r 3               animsp:
001074r 3  25 rr        	and frmno
001076r 3  F0 01        	beq :+
001078r 3  60           	rts
001079r 3               :
001079r 3  A0 06        	ldy #var_newImage
00107Br 3  B1 rr        	lda (z80_ix),y		; sprite image
00107Dr 3  20 rr rr     	jsr gfrm		; get frame data.
001080r 3               
001080r 3  E6 rr        	inc z80_l		; point to frames.
001082r 3  D0 02        	bne :+
001084r 3  E6 rr        	inc z80_h
001086r 3               :
001086r 3  A0 07        	ldy #var_newFrame
001088r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
00108Ar 3  18           	clc
00108Br 3  69 01        	adc #1			; next one along.
00108Dr 3  A0 00        	ldy #0
00108Fr 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
001091r 3  90 02        	bcc anims0		; no, not yet.
001093r 3  A9 00        	lda #0			; start at first frame.
001095r 3               anims0:
001095r 3  A0 07        	ldy #var_newFrame
001097r 3  91 rr        	sta (z80_ix),y		; new frame.
001099r 3  60           	rts
00109Ar 3               
00109Ar 3               ;--------------------------------------------------------------
00109Ar 3               ; Animate back
00109Ar 3               ;
00109Ar 3               ; Input:
00109Ar 3               ;  IX = sprite address
00109Ar 3               ;  HL = last sprite address
00109Ar 3               ;--------------------------------------------------------------
00109Ar 3               
00109Ar 3               animbk:
00109Ar 3  25 rr        	and frmno
00109Cr 3  F0 01        	beq :+
00109Er 3  60           	rts
00109Fr 3               :
00109Fr 3  A0 06        	ldy #var_newImage
0010A1r 3  B1 rr        	lda (z80_ix),y		; sprite image.
0010A3r 3  20 rr rr     	jsr gfrm		; get frame data.
0010A6r 3               
0010A6r 3  E6 rr        	inc z80_l 		; point to frames.
0010A8r 3  D0 02        	bne :+
0010AAr 3  E6 rr        	inc z80_h
0010ACr 3               :
0010ACr 3  A0 07        	ldy #var_newFrame
0010AEr 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
0010B0r 3  F0 03        	beq :+
0010B2r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
0010B5r 3               :
0010B5r 3  A0 00        	ldy #0
0010B7r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
0010B9r 3               rtanb0:
0010B9r 3  38           	sec
0010BAr 3  E9 01        	sbc #1			; next one along.
0010BCr 3  4C rr rr     	jmp anims0		; set new frame.
0010BFr 3               
0010BFr 3               ;--------------------------------------------------------------
0010BFr 3               ; Check for collision with other sprite, strict enforcement.
0010BFr 3               ;
0010BFr 3               ; Input:
0010BFr 3               ;  b		= sprite to test for
0010BFr 3               ;  ix		= current sprite pointer
0010BFr 3               ;
0010BFr 3               ; global:	b
0010BFr 3               ; local:	x,y,hl,de,skptr
0010BFr 3               ; calls:	-
0010BFr 3               ;--------------------------------------------------------------
0010BFr 3               
0010BFr 3               sktyp:
0010BFr 3  A9 rr        	lda #<sprtab				; sprite table.
0010C1r 3  85 rr        	sta z80_l
0010C3r 3  A9 rr        	lda #>sprtab
0010C5r 3  85 rr        	sta z80_h
0010C7r 3               numsp2:
0010C7r 3  A9 0C        	lda #NUMSPR				; number of sprites.
0010C9r 3  85 rr        	sta sktptr
0010CBr 3               sktyp0:
0010CBr 3  A5 rr        	lda z80_l 				; store pointer to sprite.
0010CDr 3  85 rr        	sta skptr
0010CFr 3  A5 rr        	lda z80_h
0010D1r 3  85 rr        	sta skptr+1
0010D3r 3               
0010D3r 3  A0 00        	ldy #0
0010D5r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
0010D7r 3  C5 rr        	cmp z80_b				; is it the type we seek?
0010D9r 3  F0 1D        	beq coltyp				; yes, we can use this one.
0010DBr 3               sktyp1:
0010DBr 3  18           	clc
0010DCr 3  A5 rr        	lda skptr				; retrieve sprite pointer.
0010DEr 3  69 11        	adc #TABSIZ				; size of each entry.
0010E0r 3  85 rr        	sta z80_l
0010E2r 3  A5 rr        	lda skptr+1
0010E4r 3  69 00        	adc #0
0010E6r 3  85 rr        	sta z80_h
0010E8r 3  C6 rr        	dec sktptr					; one less iteration.
0010EAr 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0010ECr 3  A9 00        	lda #0					; default to ROM address - no sprite.
0010EEr 3  85 rr        	sta z80_l
0010F0r 3  85 rr        	sta z80_h
0010F2r 3  85 rr        	sta skptr				; store pointer to sprite.
0010F4r 3  85 rr        	sta skptr+1
0010F6r 3               
0010F6r 3  18           	clc					; don't return with zero flag set.
0010F7r 3  60           	rts 					; didn't find one.
0010F8r 3               
0010F8r 3               coltyp:
0010F8r 3  A0 00        	ldy #0
0010FAr 3  B1 rr        	lda (z80_ix),y				; current sprite type.
0010FCr 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
0010FEr 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
001100r 3               colty0:
001100r 3  A0 09        	ldy #9					; distance to x position in table.
001102r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
001104r 3  85 rr        	sta z80_e
001106r 3  88           	dey
001107r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
001109r 3  85 rr        	sta z80_d
00110Br 3               
00110Br 3               ; Drop into collision detection.
00110Br 3               
00110Br 3               colc16:
00110Br 3  A0 09        	ldy #9
00110Dr 3  B1 rr        	lda (z80_ix),y			 	; x coord.
00110Fr 3  38           	sec					; subtract x.
001110r 3  E5 rr        	sbc z80_e
001112r 3  B0 05        	bcs  colc1a 				; result is positive.
001114r 3  49 FF        	eor #$ff				; make negative positive.
001116r 3  18           	clc
001117r 3  69 01        	adc #1
001119r 3               colc1a:
001119r 3  C9 10        	cmp #16 				; within x range?
00111Br 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
00111Dr 3  85 rr        	sta z80_c				; store difference.
00111Fr 3               
00111Fr 3  A0 08        	ldy #8
001121r 3  B1 rr        	lda (z80_ix),y				; y coord.
001123r 3  38           	sec
001124r 3  E5 rr        	sbc z80_d				; subtract y.
001126r 3  B0 05        	bcs colc1b				; result is positive.
001128r 3  49 FF        	eor #$ff				; make negative positive.
00112Ar 3  18           	clc
00112Br 3  69 01        	adc #1
00112Dr 3               colc1b:
00112Dr 3  C9 10        	cmp #16					; within y range?
00112Fr 3  B0 AA        	bcs sktyp1 				; no - they've missed.
001131r 3  18           	clc					; add x difference.
001132r 3  65 rr        	adc z80_c
001134r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
001136r 3  B0 02        	bcs :+
001138r 3  38           	sec
001139r 3  60           	rts 					; carry set if there's a collision.
00113Ar 3               :
00113Ar 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
00113Dr 3               colty1:
00113Dr 3  A5 rr        	lda z80_x  				; compare the two.
00113Fr 3  C5 rr        	cmp z80_l
001141r 3  D0 09        	bne end_col
001143r 3  A5 rr        	lda z80_i
001145r 3  C5 rr        	cmp z80_h
001147r 3  D0 03        	bne end_col
001149r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
00114Cr 3               end_col:
00114Cr 3  4C rr rr     	jmp colty0
00114Fr 3               
00114Fr 3               ;-----------------------------------------------------------
00114Fr 3               ; Display number, left aligned
00114Fr 3               ;
00114Fr 3               ; Input:
00114Fr 3               ;  a		= number
00114Fr 3               ;
00114Fr 3               ; global:	-
00114Fr 3               ; local:	a,y,bc,hl,displ0
00114Fr 3               ; calls:	num2ch,dmsg3
00114Fr 3               ;-----------------------------------------------------------
00114Fr 3               
00114Fr 3               disply:
00114Fr 3  85 rr        	sta z80_a
001151r 3  A9 rr        	lda #<displ0				; display workspace.
001153r 3  85 rr        	sta z80_c
001155r 3  A9 rr        	lda #>displ0
001157r 3  85 rr        	sta z80_b
001159r 3  A5 rr        	lda z80_a
00115Br 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
00115Er 3               displ1:
00115Er 3  C6 rr        	dec z80_c				; back one character.
001160r 3  D0 02        	bne :+
001162r 3  C6 rr        	dec z80_b
001164r 3               :
001164r 3  A0 00        	ldy #0
001166r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
001168r 3  09 80        	ora #128				; insert end marker.
00116Ar 3  91 rr        	sta (z80_bc),y				; new value.
00116Cr 3               
00116Cr 3  A9 rr        	lda #<displ0				; display space.
00116Er 3  85 rr        	sta z80_l
001170r 3  A9 rr        	lda #>displ0
001172r 3  85 rr        	sta z80_h
001174r 3  4C rr rr     	jmp dmsg3				; display the string.
001177r 3               
001177r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
00117Br 3               
00117Br 3               ;----------------------------------------------------------------
00117Br 3               ; Initialise screen.
00117Br 3               ;
00117Br 3               ; global:	roomtb,scno
00117Br 3               ; local:	-
00117Br 3               ; calls:	tstcs
00117Br 3               ;----------------------------------------------------------------
00117Br 3               
00117Br 3               initsc:
00117Br 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
00117Er 3  20 rr rr     	jsr tstsc 			; find displacement.
001181r 3  C9 FF        	cmp #255 			; is it valid?
001183r 3  F0 02        	beq init_end 			; no, it's rubbish.
001185r 3  85 rr        	sta scno			; store new room number.
001187r 3               init_end:
001187r 3  60           	rts
001188r 3               
001188r 3               ;----------------------------------------------------------------
001188r 3               ; Test screen.
001188r 3               ;
001188r 3               ; global:	-
001188r 3               ; local:	x
001188r 3               ; calls:	-
001188r 3               ;----------------------------------------------------------------
001188r 3               
001188r 3               tstsc:
001188r 3  85 rr        	sta tmproom
00118Ar 3  18           	clc
00118Br 3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
00118Dr 3  AA           	tax 				; add displacement to map data.
00118Er 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
001191r 3  60           	rts
001192r 3               
001192r 3               ;--------------------------
001192r 3               ; Screen left.
001192r 3               ;--------------------------
001192r 3               
001192r 3               scrl:
001192r 3  AD rr rr     	lda roomtb 			; present room table pointer.
001195r 3  38           	sec
001196r 3  E9 01        	sbc #1				; room left.
001198r 3               scrl0:
001198r 3  20 rr rr     	jsr tstsc			; test screen.
00119Br 3  C9 FF        	cmp #255			; is there a screen this way?
00119Dr 3  D0 01        	bne :+
00119Fr 3  60           	rts				; no, return to loop.
0011A0r 3               :
0011A0r 3  A5 rr        	lda tmproom			; restore room displacement.
0011A2r 3  8D rr rr     	sta roomtb			; new room table position.
0011A5r 3               scrl1:
0011A5r 3  20 rr rr     	jsr initsc 			; set new screen.
0011A8r 3  A9 02        	lda #2
0011AAr 3  85 rr        	sta restfl 			; set it.
0011ACr 3  60           	rts
0011ADr 3               scrr:
0011ADr 3  AD rr rr     	lda roomtb 			; room table pointer.
0011B0r 3  18           	clc
0011B1r 3  69 01        	adc #1				; room right.
0011B3r 3  4C rr rr     	jmp scrl0
0011B6r 3               scru:
0011B6r 3  AD rr rr     	lda roomtb 			; room table pointer.
0011B9r 3  38           	sec
0011BAr 3  E9 0B        	sbc #MAPWID 			; room up.
0011BCr 3  4C rr rr     	jmp scrl0
0011BFr 3               scrd:
0011BFr 3  AD rr rr     	lda roomtb 			; room table pointer.
0011C2r 3  18           	clc
0011C3r 3  69 0B        	adc #MAPWID 			; room down.
0011C5r 3  4C rr rr     	jmp scrl0
0011C8r 3               
0011C8r 3               ;-----------------------------------------
0011C8r 3               ; Jump to new screen.
0011C8r 3               ;-----------------------------------------
0011C8r 3               
0011C8r 3               nwscr:
0011C8r 3  A2 00        	ldx #0				; start of map data.
0011CAr 3               nwscr0:
0011CAr 3  DD rr rr     	cmp mapdat,x
0011CDr 3  F0 06        	beq nwscr1			; have we found a match for screen?
0011CFr 3  E8           	inx 				; next room.
0011D0r 3  E0 50        	cpx #80				; zero room count, 80 to search.
0011D2r 3  D0 F6        	bne nwscr0			; keep looking.
0011D4r 3  60           	rts
0011D5r 3               nwscr1:
0011D5r 3  8E rr rr     	stx roomtb			; set the map position.
0011D8r 3  4C rr rr     	jmp scrl1			; draw new room.
0011DBr 3               
0011DBr 3               
0011DBr 3               ;----------------------------------------------------------
0011DBr 3               ; Gravity processing.
0011DBr 3               ;----------------------------------------------------------
0011DBr 3               
0011DBr 3               grav:
0011DBr 3  A0 0D        	ldy #13
0011DDr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
0011DFr 3  85 rr        	sta z80_l
0011E1r 3  A0 0E        	ldy #14
0011E3r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
0011E5r 3  85 rr        	sta z80_h
0011E7r 3  05 rr        	ora z80_l			; merge in low byte.
0011E9r 3  D0 01        	bne :+
0011EBr 3  60           	rts				; if neither is set, we're not in the air.
0011ECr 3               :
0011ECr 3  A0 00        	ldy #0
0011EEr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
0011F0r 3  85 rr        	sta z80_a
0011F2r 3  C9 63        	cmp #99				; reached the end?
0011F4r 3  D0 0C        	bne grav0			; no, continue.
0011F6r 3               grav2:
0011F6r 3  C6 rr        	dec z80_l			; go back to previous value.
0011F8r 3  C9 FF        	cmp #$ff
0011FAr 3  D0 02        	bne :+
0011FCr 3  C6 rr        	dec z80_h
0011FEr 3               :
0011FEr 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
001200r 3  85 rr        	sta z80_a
001202r 3               grav0:
001202r 3  E6 rr        	inc z80_l			; point to next table entry.
001204r 3  D0 02        	bne :+
001206r 3  E6 rr        	inc z80_h
001208r 3               :
001208r 3  A5 rr        	lda z80_l
00120Ar 3  A0 0D        	ldy #13
00120Cr 3  91 rr        	sta (z80_ix),y			; store new pointer low.
00120Er 3  A5 rr        	lda z80_h
001210r 3  A0 0E        	ldy #14
001212r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
001214r 3               grav1:
001214r 3  A5 rr        	lda z80_a
001216r 3  D0 01        	bne :+				; any movement required?
001218r 3  60           	rts				; no, not this time.
001219r 3               :
001219r 3  A5 rr        	lda z80_a
00121Br 3  C9 80        	cmp #128			; is it up or down?
00121Dr 3  B0 15        	bcs gravu			; it's up.
00121Fr 3               gravd:
00121Fr 3  85 rr        	sta z80_b			; set pixels to move.
001221r 3               gravd0:
001221r 3  20 rr rr     	jsr cangd			; can we go down?
001224r 3  D0 28        	bne gravst			; can't move down, so stop.
001226r 3  A0 08        	ldy #8
001228r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
00122Ar 3  18           	clc
00122Br 3  69 01        	adc #1
00122Dr 3  91 rr        	sta (z80_ix),y
00122Fr 3  C6 rr        	dec z80_b
001231r 3  D0 EE        	bne gravd0
001233r 3  60           	rts
001234r 3               gravu:
001234r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
001236r 3  18           	clc
001237r 3  69 01        	adc #1
001239r 3  85 rr        	sta z80_b			; set pixels to move.
00123Br 3               gravu0:
00123Br 3  20 rr rr     	jsr cangu			; can we go up?
00123Er 3  D0 6E        	bne ifalls			; can't move up, go down next.
001240r 3  A0 08        	ldy #8
001242r 3  B1 rr        	lda (z80_ix),y
001244r 3  38           	sec
001245r 3  E9 01        	sbc #1
001247r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
001249r 3  C6 rr        	dec z80_b
00124Br 3  D0 EE        	bne gravu0
00124Dr 3  60           	rts
00124Er 3               gravst:
00124Er 3  A0 0D        	ldy #var_jumpLo
001250r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
001252r 3  85 rr        	sta z80_l
001254r 3  A0 0E        	ldy #var_jumpHi
001256r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
001258r 3  85 rr        	sta z80_h
00125Ar 3               
00125Ar 3  A9 00        	lda #0				; null value in pointer.
00125Cr 3  A0 0D        	ldy #var_jumpLo
00125Er 3  91 rr        	sta (z80_ix),y			; store new pointer low.
001260r 3  C8           	iny
001261r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
001263r 3               
001263r 3  A0 00        	ldy #0
001265r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
001267r 3  C9 63        	cmp #99				; is it the end marker?
001269r 3               evftf:
001269r 3  F0 01        	beq :+				; yes, fallen too far.
00126Br 3  60           	rts
00126Cr 3               :
00126Cr 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
00126Fr 3               
00126Fr 3               ;------------------------------------------------
00126Fr 3               ; Initiate fall check.
00126Fr 3               ;------------------------------------------------
00126Fr 3               
00126Fr 3               ifall:
00126Fr 3  A0 0D        	ldy #var_jumpLo
001271r 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
001273r 3  85 rr        	sta z80_l
001275r 3  A0 0E        	ldy #var_jumpHi
001277r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
001279r 3  85 rr        	sta z80_h			; high byte in accumulator.
00127Br 3  05 rr        	ora z80_l			; merge in low byte.
00127Dr 3  F0 01        	beq :+
00127Fr 3  60           	rts				; if either is set, we're already in the air.
001280r 3               :
001280r 3  A0 09        	ldy #9
001282r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
001284r 3  85 rr        	sta dispx
001286r 3  A0 08        	ldy #8
001288r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
00128Ar 3  18           	clc
00128Br 3               numsp7:
00128Br 3  69 10        	adc #SPR_HGT			; add 16 pixels.
00128Dr 3  85 rr        	sta dispy			; set up test coordinates.
00128Fr 3  20 rr rr     	jsr tstbl			; get map address.
001292r 3  20 rr rr     	jsr plchk			; block, platform check.
001295r 3  F0 01        	beq :+
001297r 3  60           	rts				; it's solid, don't fall.
001298r 3               :
001298r 3  E6 rr        	inc bufaddr			; look right one cell.
00129Ar 3  20 rr rr     	jsr plchk			; block, platform check.
00129Dr 3  F0 01        	beq :+
00129Fr 3  60           	rts				; it's solid, don't fall.
0012A0r 3               :
0012A0r 3  A5 rr        	lda dispx			; y coordinate.
0012A2r 3  29 07        	and #7				; position straddling block cells.
0012A4r 3  F0 08        	beq ifalls			; no more checks needed.
0012A6r 3  E6 rr        	inc bufaddr			; look to third cell.
0012A8r 3  20 rr rr     	jsr plchk			; block, platform check.
0012ABr 3  F0 01        	beq :+
0012ADr 3  60           	rts				; it's solid, don't fall.
0012AEr 3               :
0012AEr 3               ifalls:
0012AEr 3  A9 rr        	lda #<jtab			; jump table start.
0012B0r 3  85 rr        	sta z80_l
0012B2r 3  A9 rr        	lda #>jtab
0012B4r 3  85 rr        	sta z80_h
0012B6r 3               ifal0:
0012B6r 3  E6 rr        	inc z80_l			; point to next value.
0012B8r 3  D0 02        	bne :+
0012BAr 3  E6 rr        	inc z80_h
0012BCr 3               :
0012BCr 3  A0 00        	ldy #0
0012BEr 3  B1 rr        	lda (z80_hl),y			; fetch value.
0012C0r 3  F0 F4        	beq ifal0			; no, get next value.
0012C2r 3  C9 63        	cmp #99				; reached end of table?
0012C4r 3  D0 01        	bne :+
0012C6r 3  60           	rts				; yes, don't fall.
0012C7r 3               :
0012C7r 3  C9 80        	cmp #128			; is it going up?
0012C9r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
0012CBr 3               
0012CBr 3  A0 0D        	ldy #13
0012CDr 3  A5 rr        	lda z80_l
0012CFr 3  91 rr        	sta (z80_ix),y 			; set jump low.
0012D1r 3  A0 0E        	ldy #14
0012D3r 3  A5 rr        	lda z80_h
0012D5r 3  91 rr        	sta (z80_ix),y 			; set jump high.
0012D7r 3  60           	rts
0012D8r 3               
0012D8r 3               
0012D8r 3               ;----------------------------------------------------
0012D8r 3               ; Get frame data for a particular sprite.
0012D8r 3               ; Input:
0012D8r 3               ;  a		= framenumer
0012D8r 3               ; Output:
0012D8r 3               ;  hl		= frame address
0012D8r 3               ;
0012D8r 3               ; global:	hl,frmptr
0012D8r 3               ; local:	-
0012D8r 3               ; calls:	-
0012D8r 3               ;----------------------------------------------------
0012D8r 3               
0012D8r 3               gfrm:
0012D8r 3  0A           	asl a	 		 	; multiple of 2.
0012D9r 3  18           	clc
0012DAr 3  6D rr rr     	adc frmptr 			; frames used by game.
0012DDr 3  85 rr        	sta z80_l
0012DFr 3  AD rr rr     	lda frmptr+1
0012E2r 3  69 00        	adc #0
0012E4r 3  85 rr        	sta z80_h 			; point to frame start.
0012E6r 3  60           	rts
0012E7r 3               
0012E7r 3               ;----------------------------------------------------
0012E7r 3               ; Find sprite list for current room.
0012E7r 3               ;
0012E7r 3               ; global:	hl
0012E7r 3               ; local:	x,y
0012E7r 3               ; calls:	-
0012E7r 3               ;----------------------------------------------------
0012E7r 3               
0012E7r 3               sprlst:
0012E7r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
0012E9r 3  85 rr        	sta z80_l
0012EBr 3  A9 rr        	lda #>nmedat
0012EDr 3  85 rr        	sta z80_h
0012EFr 3  A6 rr        	ldx scno 			; screen number.
0012F1r 3  D0 01        	bne sprls2 			; is it the first screen?
0012F3r 3  60           	rts 				; yes, don't need to search data.
0012F4r 3               sprls2:
0012F4r 3  A0 00        	ldy #0
0012F6r 3               sprls1:
0012F6r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
0012F8r 3  C9 FF        	cmp #255			; is it an end marker?
0012FAr 3  F0 0E        	beq sprls0 			; yes, end of this room.
0012FCr 3               
0012FCr 3  18           	clc 				; point to next sprite in list.
0012FDr 3  A5 rr        	lda z80_l
0012FFr 3  69 04        	adc #NMESIZ
001301r 3  85 rr        	sta z80_l
001303r 3  90 02        	bcc :+
001305r 3  E6 rr        	inc z80_h
001307r 3               :
001307r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
00130Ar 3               sprls0:
00130Ar 3  E6 rr        	inc z80_l 			; point to start of next screen.s
00130Cr 3  D0 02        	bne :+
00130Er 3  E6 rr        	inc z80_h
001310r 3               :
001310r 3  CA           	dex
001311r 3  D0 E3        	bne sprls1 			; continue until room found.
001313r 3  60           	rts
001314r 3               
001314r 3               
001314r 3               ;----------------------------------------------------
001314r 3               ; Clear all but a single player sprite.
001314r 3               ;
001314r 3               ; global:	-
001314r 3               ; local:	x,y,ix
001314r 3               ; calls:	-
001314r 3               ;----------------------------------------------------
001314r 3               
001314r 3               nspr:
001314r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001316r 3  85 rr        	sta sprcnt
001318r 3  A9 rr        	lda #<sprtab 			; sprite table.
00131Ar 3  85 rr        	sta z80_x
00131Cr 3  A9 rr        	lda #>sprtab
00131Er 3  85 rr        	sta z80_i
001320r 3               nspr0:
001320r 3  A0 00        	ldy #0 				; fetch sprite type.
001322r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
001324r 3  F0 1A        	beq nspr1 			; yes, keep this one.
001326r 3               
001326r 3  A9 FF        	lda #255
001328r 3  A0 00        	ldy #0 				; fetch sprite type.
00132Ar 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00132Cr 3  A0 05        	ldy #5
00132Er 3  91 rr        	sta (z80_ix),y 			; remove next type.
001330r 3               
001330r 3  18           	clc	 			; next sprite.
001331r 3  A5 rr        	lda z80_x
001333r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001335r 3  85 rr        	sta z80_x
001337r 3  90 02        	bcc :+
001339r 3  E6 rr        	inc z80_i
00133Br 3               :
00133Br 3  C6 rr        	dec sprcnt	 			; one less space in the table.
00133Dr 3  D0 E1        	bne nspr0
00133Fr 3  60           	rts
001340r 3               nspr1:
001340r 3  A9 FF        	lda #255
001342r 3  A0 00        	ldy #0
001344r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001346r 3               
001346r 3  18           	clc	 			; point to next sprite.
001347r 3  A5 rr        	lda z80_x
001349r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00134Br 3  85 rr        	sta z80_x
00134Dr 3  90 02        	bcc :+
00134Fr 3  E6 rr        	inc z80_i
001351r 3               :
001351r 3  C6 rr        	dec sprcnt	 			; one less to do.
001353r 3  D0 01        	bne nspr2
001355r 3  60           	rts
001356r 3               nspr2:
001356r 3  A9 FF        	lda #255
001358r 3  A0 00        	ldy #0
00135Ar 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00135Cr 3  A0 05        	ldy #5
00135Er 3  91 rr        	sta (z80_ix),y 			; remove next type.
001360r 3               
001360r 3  18           	clc	 			; next sprite.
001361r 3  A5 rr        	lda z80_x
001363r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001365r 3  85 rr        	sta z80_x
001367r 3  90 02        	bcc :+
001369r 3  E6 rr        	inc z80_i
00136Br 3               :
00136Br 3  C6 rr        	dec sprcnt	 			; one less space in table.
00136Dr 3  D0 E7        	bne nspr2
00136Fr 3  60           	rts
001370r 3               
001370r 3               ;----------------------------------------------------------
001370r 3               ; Two initialisation routines.
001370r 3               ; Initialise sprites - copy everything from list to table.
001370r 3               ;
001370r 3               ; global:	-
001370r 3               ; local:	x,y,ix
001370r 3               ; calls:	cpsp
001370r 3               ;----------------------------------------------------------
001370r 3               
001370r 3               ispr:
001370r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001372r 3  85 rr        	sta sprcnt
001374r 3  A9 rr        	lda #<sprtab			; sprite table.
001376r 3  85 rr        	sta z80_x
001378r 3  A9 rr        	lda #>sprtab
00137Ar 3  85 rr        	sta z80_i
00137Cr 3               ispr2:
00137Cr 3  A0 00        	ldy #0
00137Er 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
001380r 3  C9 FF        	cmp #255 			; is it an end marker?
001382r 3  D0 01        	bne :+
001384r 3  60           	rts 				; yes, no more to do.
001385r 3               :
001385r 3               ispr1:
001385r 3  A0 00        	ldy #0
001387r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
001389r 3  C9 FF        	cmp #255 			; is it enabled yet?
00138Br 3  D0 08        	bne ispr4			; yes, try another slot.
00138Dr 3               
00138Dr 3  A0 05        	ldy #5
00138Fr 3  B1 rr        	lda (z80_ix),y		 	; next type.
001391r 3  C9 FF        	cmp #255 			; is it enabled yet?
001393r 3  F0 10        	beq ispr3 			; no, process this one.
001395r 3               ispr4:
001395r 3  18           	clc 				; next sprite.
001396r 3  A5 rr        	lda z80_x
001398r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00139Ar 3  85 rr        	sta z80_x
00139Cr 3  90 02        	bcc :+
00139Er 3  E6 rr        	inc z80_i
0013A0r 3               :
0013A0r 3  C6 rr        	dec sprcnt
0013A2r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0013A4r 3  60           	rts  				; no more room in table.
0013A5r 3               ispr3:
0013A5r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
0013A8r 3  C6 rr        	dec sprcnt			; one less space in the table.
0013AAr 3  D0 D0        	bne ispr2
0013ACr 3  60           	rts
0013ADr 3               
0013ADr 3               
0013ADr 3               ;-----------------------------------------------------------------------
0013ADr 3               ; Initialise sprites - but not player, we're keeping the old one.
0013ADr 3               ;
0013ADr 3               ; global:	-
0013ADr 3               ; local:	x,y,ix
0013ADr 3               ; calls:	cpsp
0013ADr 3               ;-----------------------------------------------------------------------
0013ADr 3               
0013ADr 3               kspr:
0013ADr 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0013AFr 3  A9 rr        	lda #<sprtab 			; sprite table.
0013B1r 3  85 rr        	sta z80_x
0013B3r 3  A9 rr        	lda #>sprtab
0013B5r 3  85 rr        	sta z80_i
0013B7r 3               kspr2:
0013B7r 3  A0 00        	ldy #0
0013B9r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0013BBr 3  C9 FF        	cmp #255 			; is it an end marker?
0013BDr 3  D0 01        	bne :+
0013BFr 3  60           	rts 				; yes, no more to do.
0013C0r 3               :
0013C0r 3  C9 00        	cmp #0
0013C2r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
0013C4r 3               
0013C4r 3  18           	clc 				; next sprite.
0013C5r 3  A5 rr        	lda z80_l
0013C7r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0013C9r 3  85 rr        	sta z80_l
0013CBr 3  90 02        	bcc :+
0013CDr 3  E6 rr        	inc z80_h
0013CFr 3               :
0013CFr 3  4C rr rr     	jmp kspr2
0013D2r 3               kspr1:
0013D2r 3  A0 00        	ldy #0 				; fetch sprite type.
0013D4r 3  B1 rr        	lda (z80_ix),y
0013D6r 3  C9 FF        	cmp #255 			; is it enabled yet?
0013D8r 3  D0 08        	bne kspr4 			; yes, try another slot.
0013DAr 3               
0013DAr 3  A0 05        	ldy #5 				; next type.
0013DCr 3  B1 rr        	lda (z80_ix),y
0013DEr 3  C9 FF        	cmp #255 			; is it enabled yet?
0013E0r 3  F0 0F        	beq kspr3 			; no, process this one.
0013E2r 3               kspr4:
0013E2r 3  18           	clc 				; next sprite.
0013E3r 3  A5 rr        	lda z80_x
0013E5r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0013E7r 3  85 rr        	sta z80_x
0013E9r 3  90 02        	bcc :+
0013EBr 3  E6 rr        	inc z80_i
0013EDr 3               :
0013EDr 3  CA           	dex	 			; repeat for remaining sprites.
0013EEr 3  D0 E2        	bne kspr1
0013F0r 3  60           	rts  				; no more room in table.
0013F1r 3               kspr3:
0013F1r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
0013F4r 3  CA           	dex	 			; one less space in the table.
0013F5r 3  D0 C0        	bne kspr2
0013F7r 3  60           	rts
0013F8r 3               
0013F8r 3               ;----------------------------------------------
0013F8r 3               ; Copy sprite from list to table.
0013F8r 3               ;
0013F8r 3               ; global:	hl,ix
0013F8r 3               ; local:	y
0013F8r 3               ; calls:	evnt09
0013F8r 3               ;----------------------------------------------
0013F8r 3               
0013F8r 3               cpsp:
0013F8r 3  A0 00        	ldy #0					; fetch byte from table.
0013FAr 3  B1 rr        	lda (z80_hl),y
0013FCr 3               	; y=var_Type
0013FCr 3  91 rr        	sta (z80_ix),y			; set up type.
0013FEr 3  A0 05        	ldy #var_newType
001400r 3  91 rr        	sta (z80_ix),y 			; set up type.
001402r 3               
001402r 3  E6 rr        	inc z80_l 				; move to next byte.
001404r 3  D0 02        	bne :+
001406r 3  E6 rr        	inc z80_h
001408r 3               :
001408r 3  A0 00        	ldy #0 					; fetch byte from table.
00140Ar 3  B1 rr        	lda (z80_hl),y
00140Cr 3  A0 06        	ldy #var_newImage
00140Er 3  91 rr        	sta (z80_ix),y			; set up image.
001410r 3               
001410r 3  E6 rr        	inc z80_l 				; move to next byte.
001412r 3  D0 02        	bne :+
001414r 3  E6 rr        	inc z80_h
001416r 3               :
001416r 3  A0 00        	ldy #0
001418r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
00141Ar 3  A0 08        	ldy #var_newY
00141Cr 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00141Er 3               
00141Er 3  A9 C8        	lda #200 				; set initial coordinate off screen.
001420r 3  A0 03        	ldy #var_Y
001422r 3  91 rr        	sta (z80_ix),y
001424r 3               
001424r 3  E6 rr        	inc z80_l 				; move to next byte.
001426r 3  D0 02        	bne :+
001428r 3  E6 rr        	inc z80_h
00142Ar 3               :
00142Ar 3  A0 00        	ldy #0 					; fetch byte from table.
00142Cr 3  B1 rr        	lda (z80_hl),y
00142Er 3  A0 09        	ldy #var_newX
001430r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
001432r 3               
001432r 3  E6 rr        	inc z80_l 				; move to next byte.
001434r 3  D0 02        	bne :+
001436r 3  E6 rr        	inc z80_h
001438r 3               :
001438r 3  A9 00        	lda #0					; zeroes in accumulator.
00143Ar 3  A0 07        	ldy #var_newFrame 		; reset frame number.
00143Cr 3  91 rr        	sta (z80_ix),y
00143Er 3  A0 0A        	ldy #var_Direction 		; reset direction.
001440r 3  91 rr        	sta (z80_ix),y
001442r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
001444r 3  91 rr        	sta (z80_ix),y
001446r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
001448r 3  91 rr        	sta (z80_ix),y
00144Ar 3               
00144Ar 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
00144Cr 3  A0 10        	ldy #var_dataHi
00144Er 3  91 rr        	sta (z80_ix),y
001450r 3               evis0:
001450r 3  A5 rr        	lda z80_i
001452r 3  48           	pha
001453r 3  A5 rr        	lda z80_x
001455r 3  48           	pha
001456r 3  A5 rr        	lda z80_h
001458r 3  48           	pha
001459r 3  A5 rr        	lda z80_l
00145Br 3  48           	pha
00145Cr 3               
00145Cr 3  20 rr rr     	jsr evnt09 				; perform event.
00145Fr 3               
00145Fr 3  68           	pla
001460r 3  85 rr        	sta z80_l
001462r 3  68           	pla
001463r 3  85 rr        	sta z80_h
001465r 3  68           	pla
001466r 3  85 rr        	sta z80_x
001468r 3  68           	pla
001469r 3  85 rr        	sta z80_i
00146Br 3               
00146Br 3  18           	clc
00146Cr 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
00146Er 3  69 11        	adc #TABSIZ		 	; next sprite.
001470r 3  85 rr        	sta z80_x
001472r 3  90 02        	bcc :+
001474r 3  E6 rr        	inc z80_i
001476r 3               :
001476r 3  60           	rts
001477r 3               
001477r 3               
001477r 3               ;-------------------------------------
001477r 3               ; Clear the play area window.
001477r 3               ;-------------------------------------
001477r 3               
001477r 3               clw:
001477r 3  AD rr rr     	lda wintop			; get coordinates of window.
00147Ar 3  85 rr        	sta dispy			; put into dispx for calculation.
00147Cr 3  AD rr rr     	lda winlft
00147Fr 3  85 rr        	sta dispx
001481r 3               
001481r 3  AD rr rr     	lda winhgt			; height of window.
001484r 3  85 rr        	sta rrow			; copy to b register.
001486r 3               clw3:
001486r 3  AD rr rr     	lda winwid 			; width of window.
001489r 3  85 rr        	sta rcol
00148Br 3               clw2:
00148Br 3  20 rr rr     	jsr gprad 			; get print address.
00148Er 3  A9 00        	lda #0				; zero byte to write.
001490r 3  A2 07        	ldx #7				; pixel height of each cell.
001492r 3               clw1:
001492r 3  BC rr rr     	ldy scrtab,x
001495r 3  91 rr        	sta (scraddr),y 			; copy to screen.
001497r 3  CA           	dex				; next screen row down.
001498r 3  10 F8        	bpl clw1
00149Ar 3               
00149Ar 3  E6 rr        	inc dispx			; next column.
00149Cr 3  C6 rr        	dec rcol			; one less to do.
00149Er 3  D0 EB        	bne clw2			; repeat for remaining columns.
0014A0r 3               
0014A0r 3  AD rr rr     	lda winlft			; get left edge.
0014A3r 3  85 rr        	sta dispx 			; reset x.
0014A5r 3  E6 rr        	inc dispy 			; next line down.
0014A7r 3               
0014A7r 3  C6 rr        	dec rrow
0014A9r 3  D0 DB        	bne clw3			; repeat down the screen.
0014ABr 3               
0014ABr 3  AD rr rr     	lda wintop			; get coordinates of window.
0014AEr 3  85 rr        	sta chary			; put into display position.
0014B0r 3  AD rr rr     	lda winlft
0014B3r 3  85 rr        	sta charx
0014B5r 3  60           	rts
0014B6r 3               
0014B6r 3               
0014B6r 3               ;----------------------------------------------------------
0014B6r 3               ; Effects code.
0014B6r 3               ; Ticker routine is called 25 times per second.
0014B6r 3               ;
0014B6r 3               ; txtini = text scroller address
0014B6r 3               ; txtscr = left text screen address
0014B6r 3               ; txtwid = scroller width
0014B6r 3               ; txtbit = 128
0014B6r 3               ; X      = message nr
0014B6r 3               ;----------------------------------------------------------
0014B6r 3               
0014B6r 3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
0014BAr 3  20 28 30 38  
0014BEr 3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
0014C2r 3  60 68 70 78  
0014C6r 3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
0014CAr 3  A0 A8 B0 B8  
0014CEr 3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
0014D2r 3  E0 E8 F0 F8  
0014D6r 3               .if sflag
0014D6r 3               scrly:
0014D6r 3               	rts
0014D6r 3               	.word txtscr         	; set scr_l = left screen address.
0014D6r 3               	sta scr_l
0014D6r 3               	sta tmp_byte		; tmp_byte = lb left screen address
0014D6r 3               	lda txtscr+1
0014D6r 3               	sta scr_l+1
0014D6r 3               	sta scr_r+1		; set hb scr_r = hb left screen address
0014D6r 3               
0014D6r 3               	stx xtmp		; save x
0014D6r 3               
0014D6r 3               	ldx txtwid
0014D6r 3               	dex
0014D6r 3               	ldy scrollpos,x
0014D6r 3               	tya
0014D6r 3               	clc
0014D6r 3               	adc scr_l
0014D6r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
0014D6r 3               
0014D6r 3               	lda #8
0014D6r 3               	sta line_cnt
0014D6r 3               scrly1:
0014D6r 3               	ldx txtwid		; set txtwide
0014D6r 3               	dex
0014D6r 3               	clc
0014D6r 3               scrly0:
0014D6r 3               	ldy scrollpos,x
0014D6r 3               	lda (scr_l),y		; scroll 1 line
0014D6r 3               	rol a
0014D6r 3               	sta (scr_l),y
0014D6r 3               	dex
0014D6r 3               	bpl scrly0
0014D6r 3               
0014D6r 3               	inc scr_l
0014D6r 3               	dec line_cnt
0014D6r 3               	bne scrly1		; repeat 8 times
0014D6r 3               
0014D6r 3               	lda txtpos 		; get text pointer.
0014D6r 3               	sta scr_txt
0014D6r 3               	lda txtpos+1
0014D6r 3               	sta scr_txt+1
0014D6r 3               
0014D6r 3               	ldy #0
0014D6r 3               	lda (scr_txt),y 	; find character we're displaying.
0014D6r 3               	and #127 		; remove end marker bit if applicable.
0014D6r 3               	cmp #13			; is it newline?
0014D6r 3               	bne scrly5 		; no, it's okay.
0014D6r 3               	lda #32			; convert to a space instead.
0014D6r 3               scrly5:
0014D6r 3               	sta fntaddr		; calculate char address
0014D6r 3               	lda #0
0014D6r 3               	sta fntaddr+1
0014D6r 3               	asl fntaddr  		; multiply char by 8.
0014D6r 3               	rol fntaddr+1
0014D6r 3               	asl fntaddr
0014D6r 3               	rol fntaddr+1
0014D6r 3               	asl fntaddr
0014D6r 3               	rol fntaddr+1
0014D6r 3               	lda fntaddr
0014D6r 3               	clc
0014D6r 3               	adc #<(FONT-256)
0014D6r 3               	sta scrly3+1		; that's the low byte.
0014D6r 3               	lda fntaddr+1
0014D6r 3               	adc #>(FONT-256)
0014D6r 3               	sta scrly3+2		; add displacement.
0014D6r 3               
0014D6r 3               	ldy #0
0014D6r 3               scrly3:
0014D6r 3               	lda $3333,y		; get image of char line.
0014D6r 3               	and txtbit
0014D6r 3               	beq scrly2		; don't plot pixel
0014D6r 3               ;	ldy scrline,x
0014D6r 3               	lda (scr_r),y
0014D6r 3               	clc
0014D6r 3               	ora #1
0014D6r 3               	sta (scr_r),y		; plot pixel
0014D6r 3               scrly2:
0014D6r 3               	iny			; next line of char.
0014D6r 3               	cpy #8
0014D6r 3               	bne scrly3
0014D6r 3               
0014D6r 3               	lsr txtbit		; bit of text to display.
0014D6r 3               	bcs :+
0014D6r 3               	rts
0014D6r 3               :
0014D6r 3               	ldy #0
0014D6r 3               	lda (scr_txt),y 	; what was the character?
0014D6r 3               	asl a	  		; end of message?
0014D6r 3               	bcs scrly4
0014D6r 3               	inc txtpos
0014D6r 3               	bne :+
0014D6r 3               	inc txtpos+1
0014D6r 3               :
0014D6r 3               	jmp scrly6 		; not yet - continue.
0014D6r 3               scrly4:
0014D6r 3               	lda txtini 		; start of scrolling message.
0014D6r 3               	sta txtpos
0014D6r 3               	lda txtini+1
0014D6r 3               	sta txtpos+1
0014D6r 3               scrly6:
0014D6r 3               	lda #128
0014D6r 3               	sta txtbit
0014D6r 3               	ldx xtmp
0014D6r 3               	rts
0014D6r 3               
0014D6r 3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0014D6r 3               tmp_byte:	.byte 0
0014D6r 3               line_cnt:	.byte 0
0014D6r 3               
0014D6r 3               ;-------------------------------------------------------
0014D6r 3               ; Entry TICKER command
0014D6r 3               ;
0014D6r 3               ; Entry:
0014D6r 3               ;  z80_b = message nr
0014D6r 3               ;  z80_c = width
0014D6r 3               ;-------------------------------------------------------
0014D6r 3               
0014D6r 3               iscrly:
0014D6r 3               	jsr prescr 		; set up display position.
0014D6r 3               	lda #<msgdat 		; text messages.
0014D6r 3               	sta z80_l
0014D6r 3               	lda #>msgdat
0014D6r 3               	sta z80_h
0014D6r 3               	lda z80_c 		; width.
0014D6r 3               	sec
0014D6r 3               	sbc #1			; subtract one.
0014D6r 3               	cmp #32 		; is it between 1 and 32?
0014D6r 3               	bcc :+
0014D6r 3               	lda #$60
0014D6r 3               	jmp iscrl0		; no, disable messages.
0014D6r 3               :
0014D6r 3               	ldx z80_b		; message number.
0014D6r 3               	jsr getwrd 		; find message start.
0014D6r 3               
0014D6r 3               	lda z80_l		; set initial text position.
0014D6r 3               	sta txtini
0014D6r 3               	lda z80_h
0014D6r 3               	sta txtini+1
0014D6r 3               
0014D6r 3               	lda #$ad		; code for lda adrr
0014D6r 3               iscrl0:
0014D6r 3               	sta scrly		; enable/disable scrolling routine.
0014D6r 3               
0014D6r 3               	jsr prescr 		; set up display position.
0014D6r 3               	jsr gprad 		; get print address.
0014D6r 3               
0014D6r 3               	lda scraddr 		; set text screen address.
0014D6r 3               	sta txtscr
0014D6r 3               	lda scraddr+1
0014D6r 3               	sta txtscr+1
0014D6r 3               
0014D6r 3               	lda z80_c		; width.
0014D6r 3               	sta txtwid		; set width in working storage.
0014D6r 3               
0014D6r 3               	lda #128 		; start with leftmost bit.
0014D6r 3               	sta txtbit
0014D6r 3               
0014D6r 3               	jmp scrly4
0014D6r 3               .endif
0014D6r 3               
0014D6r 3               ;------------------------------------------------------------------
0014D6r 3               ; Dig routine, conditional assembly depending on dflag
0014D6r 3               ;------------------------------------------------------------------
0014D6r 3               .if dflag
0014D6r 3               dig:
0014D6r 3               	and #3
0014D6r 3               	beq digr		; dig right
0014D6r 3               	cmp #1
0014D6r 3               	beq digl		; dig left
0014D6r 3               	cmp #2
0014D6r 3               	beq digd		; dig down
0014D6r 3               
0014D6r 3               ; Dig up.
0014D6r 3               
0014D6r 3               digu:				; dig up
0014D6r 3               	ldy #8
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	sec
0014D6r 3               	sbc #2
0014D6r 3               	sta dispy		; set y
0014D6r 3               
0014D6r 3               	iny
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	sta dispx		; set x
0014D6r 3               	jmp digv
0014D6r 3               
0014D6r 3               ; Dig down.
0014D6r 3               
0014D6r 3               digd:
0014D6r 3               	ldy #9
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	sta dispx		; set y
0014D6r 3               
0014D6r 3               	dey
0014D6r 3               	clc
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	adc #16
0014D6r 3               	sta dispy		; set y
0014D6r 3               	jmp digv
0014D6r 3               
0014D6r 3               ; Dig left.
0014D6r 3               
0014D6r 3               digl:
0014D6r 3               	ldy #8
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	sta dispy		; set y
0014D6r 3               
0014D6r 3               	iny
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	sec
0014D6r 3               	sbc #2			; x=x-2
0014D6r 3               	sta dispx		; set x
0014D6r 3               	jmp digh
0014D6r 3               
0014D6r 3               ; Dig right.
0014D6r 3               
0014D6r 3               digr:
0014D6r 3               	ldy #8
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	sta dispy		; set y
0014D6r 3               
0014D6r 3               	iny
0014D6r 3               	lda (z80_ix),y
0014D6r 3               	clc
0014D6r 3               	adc #16
0014D6r 3               	sta dispx		; set x+16
0014D6r 3               	jmp digh
0014D6r 3               
0014D6r 3               ; Vertical digging
0014D6r 3               
0014D6r 3               digv:
0014D6r 3               	jsr tstbl		; check blocktype in MAP
0014D6r 3               	jsr fdchk		; test if FODDER
0014D6r 3               
0014D6r 3               	clc
0014D6r 3               	lda dispx		; look 1 cell down
0014D6r 3               	adc #8
0014D6r 3               	sta dispx
0014D6r 3               	jsr tstbl		; check blocktype in MAP
0014D6r 3               	jsr fdchk
0014D6r 3               	lda dispx
0014D6r 3               	and #7
0014D6r 3               	bne :+
0014D6r 3               	rts
0014D6r 3               :
0014D6r 3               	clc
0014D6r 3               	lda dispx		; look 1 cell down
0014D6r 3               	adc #8
0014D6r 3               	sta dispx
0014D6r 3               	jsr tstbl		; check blocktype in MAP
0014D6r 3               	jmp fdchk
0014D6r 3               
0014D6r 3               ; Horizontal digging
0014D6r 3               
0014D6r 3               digh:
0014D6r 3               	jsr tstbl		; check blocktype in MAP
0014D6r 3               	jsr fdchk		; test if FODDER
0014D6r 3               
0014D6r 3               	clc
0014D6r 3               	lda dispy		; look 1 cell down
0014D6r 3               	adc #8
0014D6r 3               	sta dispy
0014D6r 3               	jsr tstbl		; check blocktype in MAP
0014D6r 3               	jsr fdchk
0014D6r 3               	lda dispy
0014D6r 3               	and #7
0014D6r 3               	bne :+
0014D6r 3               	rts
0014D6r 3               :
0014D6r 3               	clc
0014D6r 3               	lda dispy		; look 1 cell down
0014D6r 3               	adc #8
0014D6r 3               	sta dispy
0014D6r 3               	jsr tstbl		; check blocktype in MAP
0014D6r 3               	jmp fdchk
0014D6r 3               
0014D6r 3               digcnt:	.byte 0
0014D6r 3               
0014D6r 3               .endif
0014D6r 3               
0014D6r 3               ;------------------------------------------------------------------
0014D6r 3               ; Sprite table
0014D6r 3               ;------------------------------------------------------------------
0014D6r 3               
0014D6r 3               
0014D6r 3               ; ix+0  = type.
0014D6r 3               ; ix+1  = sprite image number.
0014D6r 3               ; ix+2  = frame.
0014D6r 3               ; ix+3  = y coord.
0014D6r 3               ; ix+4  = x coord.
0014D6r 3               
0014D6r 3               ; ix+5  = new type.
0014D6r 3               ; ix+6  = new image number.
0014D6r 3               ; ix+7  = new frame.
0014D6r 3               ; ix+8  = new y coord.
0014D6r 3               ; ix+9  = new x coord.
0014D6r 3               
0014D6r 3               ; ix+10 = direction.
0014D6r 3               ; ix+11 = parameter 1.
0014D6r 3               ; ix+12 = parameter 2.
0014D6r 3               ; ix+13 = jump pointer low.
0014D6r 3               ; ix+14 = jump pointer high.
0014D6r 3               ; ix+15 = data pointer low.
0014D6r 3               ; ix+16 = data pointer high.
0014D6r 3               
0014D6r 3               ; block NUMSPR * TABSIZ,255
0014D6r 3               
0014D6r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0014DAr 3  FF FF FF FF  
0014DEr 3  FF FF FF FF  
0015A2r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0015A6r 3  FF FF FF 00  
0015AAr 3  C0 78 00 00  
0015B3r 3  07           roomtb:	.byte 7                      ; start room map offset.
0015B4r 3               
0015B4r 3               setfgcol:
0015B4r 3               setbgcol:
0015B4r 3  60           	rts
0015B5r 3               
0015B5r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0015B5r 3               ; if USER has an argument it will be passed in the accumulator.
0015B5r 3               
0015B5r 3               user:
0015B5r 3               	.include "user.inc"
0015B5r 4  60           	rts
0015B6r 4               
0015B6r 3               
0015B6r 3               ; Everything below here will be generated by the editors.
0015B6r 3               
0015B6r 3               
0015B6r 3  60                   rts
0015B7r 3               WINDOWTOP = 0
0015B7r 3               WINDOWLFT = 0
0015B7r 3               WINDOWHGT = 22
0015B7r 3               WINDOWWID = 22 ;a
0015B7r 3               MAPWID = 11
0015B7r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
0015BBr 3  FF FF FF FF  
0015BFr 3  FF FF FF     
0015C2r 3               mapdat:
0015C2r 3  FF FF FF 00          .byte 255,255,255,0,1,2,255,255,255,255,255
0015C6r 3  01 02 FF FF  
0015CAr 3  FF FF FF     
0015CDr 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
0015D1r 3  FF FF FF FF  
0015D5r 3  FF FF FF     
0015D8r 3  0A           stmap:  .byte 10
0015D9r 3               
0015D9r 3               evnt00:
0015D9r 3                       ; SPRITEINK command
0015D9r 3  A5 rr                lda joyval	; KEY
0015DBr 3  29 08                and #8
0015DDr 3  F0 03                beq :+
0015DFr 3  4C rr rr             jmp a00093
0015E2r 3               :
0015E2r 3  20 rr rr             jsr laddu	; CANGOUP
0015E5r 3  F0 03                beq :+
0015E7r 3  4C rr rr             jmp a00093
0015EAr 3               :
0015EAr 3  A9 01                lda #1
0015ECr 3  A0 06                ldy #6
0015EEr 3  91 rr                sta (z80_ix),y
0015F0r 3  A9 00                lda #0		; ANIMATE
0015F2r 3  20 rr rr             jsr animsp
0015F5r 3  A0 08                ldy #8 		; SPRITEUP
0015F7r 3  B1 rr                lda (z80_ix),y
0015F9r 3  38                   sec
0015FAr 3  E9 02                sbc #2
0015FCr 3  91 rr                sta (z80_ix),y
0015FEr 3  A5 rr        a00093: lda joyval	; KEY
001600r 3  29 04                and #4
001602r 3  F0 03                beq :+
001604r 3  4C rr rr             jmp a00180
001607r 3               :
001607r 3  20 rr rr             jsr laddd	; LADDERBELOW
00160Ar 3  F0 03                beq :+
00160Cr 3  4C rr rr             jmp a00180
00160Fr 3               :
00160Fr 3  A9 01                lda #1
001611r 3  A0 06                ldy #6
001613r 3  91 rr                sta (z80_ix),y
001615r 3  A9 00                lda #0		; ANIMATE
001617r 3  20 rr rr             jsr animsp
00161Ar 3  A0 08                ldy #8 		; SPRITEDOWN
00161Cr 3  B1 rr                lda (z80_ix),y
00161Er 3  18                   clc
00161Fr 3  69 02                adc #2
001621r 3  91 rr                sta (z80_ix),y
001623r 3  A5 rr        a00180: lda joyval	; KEY
001625r 3  29 01                and #1
001627r 3  F0 03                beq :+
001629r 3  4C rr rr             jmp a00273
00162Cr 3               :
00162Cr 3  20 rr rr             jsr cangr	; CANGORIGHT
00162Fr 3  F0 03                beq :+
001631r 3  4C rr rr             jmp a00273
001634r 3               :
001634r 3  20 rr rr             jsr vapour	; TRAIL
001637r 3  A9 00                lda #0
001639r 3  A0 06                ldy #6
00163Br 3  91 rr                sta (z80_ix),y
00163Dr 3  A9 00                lda #0		; ANIMATE
00163Fr 3  20 rr rr             jsr animsp
001642r 3  A0 09                ldy #9 		; SPRITERIGHT
001644r 3  B1 rr                lda (z80_ix),y
001646r 3  18                   clc
001647r 3  69 02                adc #2
001649r 3  91 rr                sta (z80_ix),y
00164Br 3  A5 rr        a00273: lda joyval	; KEY
00164Dr 3  29 02                and #2
00164Fr 3  F0 03                beq :+
001651r 3  4C rr rr             jmp a00365
001654r 3               :
001654r 3  20 rr rr             jsr cangl	; CANGOLEFT
001657r 3  F0 03                beq :+
001659r 3  4C rr rr             jmp a00365
00165Cr 3               :
00165Cr 3  20 rr rr             jsr vapour	; TRAIL
00165Fr 3  A9 00                lda #0
001661r 3  A0 06                ldy #6
001663r 3  91 rr                sta (z80_ix),y
001665r 3  A9 00                lda #0		; ANIMATE
001667r 3  20 rr rr             jsr animsp
00166Ar 3  A0 09                ldy #9 		; SPRITELEFT
00166Cr 3  B1 rr                lda (z80_ix),y
00166Er 3  38                   sec
00166Fr 3  E9 02                sbc #2
001671r 3  91 rr                sta (z80_ix),y
001673r 3               a00365: ; SPRITEINK command
001673r 3  60                   rts
001674r 3               evnt01:
001674r 3  A9 00                lda #0
001676r 3  A0 0A                ldy #10
001678r 3  D1 rr                cmp (z80_ix),y
00167Ar 3  F0 03                beq *+5
00167Cr 3  4C rr rr             jmp b00153
00167Fr 3  20 rr rr             jsr laddu	; CANGOUP
001682r 3  F0 03                beq :+
001684r 3  4C rr rr             jmp b00070
001687r 3               :
001687r 3  A0 08                ldy #8 		; SPRITEUP
001689r 3  B1 rr                lda (z80_ix),y
00168Br 3  38                   sec
00168Cr 3  E9 02                sbc #2
00168Er 3  91 rr                sta (z80_ix),y
001690r 3  4C rr rr             jmp b00153
001693r 3  A9 02        b00070: lda #2
001695r 3  85 rr                sta z80_d	; GETRANDOM
001697r 3  20 rr rr             jsr random
00169Ar 3  85 rr                sta z80_h
00169Cr 3  20 rr rr             jsr imul
00169Fr 3  A5 rr                lda z80_h
0016A1r 3  85 rr                sta varrnd
0016A3r 3  A9 00                lda #0
0016A5r 3  C5 rr                cmp varrnd
0016A7r 3  F0 03                beq *+5
0016A9r 3  4C rr rr             jmp b00139
0016ACr 3  A9 02                lda #2
0016AEr 3  A0 0A                ldy #10
0016B0r 3  91 rr                sta (z80_ix),y
0016B2r 3  4C rr rr             jmp b00153
0016B5r 3  A9 03        b00139: lda #3
0016B7r 3  A0 0A                ldy #10
0016B9r 3  91 rr                sta (z80_ix),y
0016BBr 3  A9 01        b00153: lda #1
0016BDr 3  A0 0A                ldy #10
0016BFr 3  D1 rr                cmp (z80_ix),y
0016C1r 3  F0 03                beq *+5
0016C3r 3  4C rr rr             jmp b00306
0016C6r 3  20 rr rr             jsr laddd	; LADDERBELOW
0016C9r 3  F0 03                beq :+
0016CBr 3  4C rr rr             jmp b00223
0016CEr 3               :
0016CEr 3  A0 08                ldy #8 		; SPRITEDOWN
0016D0r 3  B1 rr                lda (z80_ix),y
0016D2r 3  18                   clc
0016D3r 3  69 02                adc #2
0016D5r 3  91 rr                sta (z80_ix),y
0016D7r 3  4C rr rr             jmp b00306
0016DAr 3  A9 02        b00223: lda #2
0016DCr 3  85 rr                sta z80_d	; GETRANDOM
0016DEr 3  20 rr rr             jsr random
0016E1r 3  85 rr                sta z80_h
0016E3r 3  20 rr rr             jsr imul
0016E6r 3  A5 rr                lda z80_h
0016E8r 3  85 rr                sta varrnd
0016EAr 3  A9 00                lda #0
0016ECr 3  C5 rr                cmp varrnd
0016EEr 3  F0 03                beq *+5
0016F0r 3  4C rr rr             jmp b00292
0016F3r 3  A9 02                lda #2
0016F5r 3  A0 0A                ldy #10
0016F7r 3  91 rr                sta (z80_ix),y
0016F9r 3  4C rr rr             jmp b00306
0016FCr 3  A9 03        b00292: lda #3
0016FEr 3  A0 0A                ldy #10
001700r 3  91 rr                sta (z80_ix),y
001702r 3  A9 02        b00306: lda #2
001704r 3  A0 0A                ldy #10
001706r 3  D1 rr                cmp (z80_ix),y
001708r 3  F0 03                beq *+5
00170Ar 3  4C rr rr             jmp b00518
00170Dr 3  20 rr rr             jsr cangl	; CANGOLEFT
001710r 3  F0 03                beq :+
001712r 3  4C rr rr             jmp b00388
001715r 3               :
001715r 3  A0 09                ldy #9 		; SPRITELEFT
001717r 3  B1 rr                lda (z80_ix),y
001719r 3  38                   sec
00171Ar 3  E9 02                sbc #2
00171Cr 3  91 rr                sta (z80_ix),y
00171Er 3  A9 00                lda #0
001720r 3  A0 07                ldy #7
001722r 3  91 rr                sta (z80_ix),y
001724r 3  4C rr rr             jmp b00402
001727r 3  A9 03        b00388: lda #3
001729r 3  A0 0A                ldy #10
00172Br 3  91 rr                sta (z80_ix),y
00172Dr 3  A9 04        b00402: lda #4
00172Fr 3  85 rr                sta z80_d	; GETRANDOM
001731r 3  20 rr rr             jsr random
001734r 3  85 rr                sta z80_h
001736r 3  20 rr rr             jsr imul
001739r 3  A5 rr                lda z80_h
00173Br 3  85 rr                sta varrnd
00173Dr 3  A9 00                lda #0
00173Fr 3  C5 rr                cmp varrnd
001741r 3  F0 03                beq *+5
001743r 3  4C rr rr             jmp b00518
001746r 3  20 rr rr             jsr laddu	; CANGOUP
001749r 3  F0 03                beq :+
00174Br 3  4C rr rr             jmp b00487
00174Er 3               :
00174Er 3  A9 00                lda #0
001750r 3  A0 0A                ldy #10
001752r 3  91 rr                sta (z80_ix),y
001754r 3  4C rr rr             jmp b00518
001757r 3  20 rr rr     b00487: jsr laddd	; LADDERBELOW
00175Ar 3  F0 03                beq :+
00175Cr 3  4C rr rr             jmp b00518
00175Fr 3               :
00175Fr 3  A9 01                lda #1
001761r 3  A0 0A                ldy #10
001763r 3  91 rr                sta (z80_ix),y
001765r 3  A9 03        b00518: lda #3
001767r 3  A0 0A                ldy #10
001769r 3  D1 rr                cmp (z80_ix),y
00176Br 3  F0 03                beq *+5
00176Dr 3  4C rr rr             jmp b00730
001770r 3  20 rr rr             jsr cangr	; CANGORIGHT
001773r 3  F0 03                beq :+
001775r 3  4C rr rr             jmp b00601
001778r 3               :
001778r 3  A0 09                ldy #9 		; SPRITERIGHT
00177Ar 3  B1 rr                lda (z80_ix),y
00177Cr 3  18                   clc
00177Dr 3  69 02                adc #2
00177Fr 3  91 rr                sta (z80_ix),y
001781r 3  A9 01                lda #1
001783r 3  A0 07                ldy #7
001785r 3  91 rr                sta (z80_ix),y
001787r 3  4C rr rr             jmp b00614
00178Ar 3  A9 02        b00601: lda #2
00178Cr 3  A0 0A                ldy #10
00178Er 3  91 rr                sta (z80_ix),y
001790r 3  A9 04        b00614: lda #4
001792r 3  85 rr                sta z80_d	; GETRANDOM
001794r 3  20 rr rr             jsr random
001797r 3  85 rr                sta z80_h
001799r 3  20 rr rr             jsr imul
00179Cr 3  A5 rr                lda z80_h
00179Er 3  85 rr                sta varrnd
0017A0r 3  A9 00                lda #0
0017A2r 3  C5 rr                cmp varrnd
0017A4r 3  F0 03                beq *+5
0017A6r 3  4C rr rr             jmp b00730
0017A9r 3  20 rr rr             jsr laddu	; CANGOUP
0017ACr 3  F0 03                beq :+
0017AEr 3  4C rr rr             jmp b00700
0017B1r 3               :
0017B1r 3  A9 00                lda #0
0017B3r 3  A0 0A                ldy #10
0017B5r 3  91 rr                sta (z80_ix),y
0017B7r 3  4C rr rr             jmp b00730
0017BAr 3  20 rr rr     b00700: jsr laddd	; LADDERBELOW
0017BDr 3  F0 03                beq :+
0017BFr 3  4C rr rr             jmp b00730
0017C2r 3               :
0017C2r 3  A9 01                lda #1
0017C4r 3  A0 0A                ldy #10
0017C6r 3  91 rr                sta (z80_ix),y
0017C8r 3  A9 00        b00730: lda #0 	; COLLISION
0017CAr 3  85 rr                sta z80_b
0017CCr 3  20 rr rr             jsr sktyp
0017CFr 3  B0 03                bcs :+
0017D1r 3  4C rr rr             jmp b00766
0017D4r 3               :
0017D4r 3  A9 01                lda #1 		; KILL
0017D6r 3  85 rr                sta deadf
0017D8r 3  60           b00766: rts
0017D9r 3               evnt02:
0017D9r 3  A9 00                lda #0
0017DBr 3  A0 0B                ldy #11
0017DDr 3  D1 rr                cmp (z80_ix),y
0017DFr 3  F0 03                beq *+5
0017E1r 3  4C rr rr             jmp c00096
0017E4r 3  A9 42                lda #66
0017E6r 3  A0 0C                ldy #12
0017E8r 3  D1 rr                cmp (z80_ix),y
0017EAr 3  F0 03                beq *+5
0017ECr 3  4C rr rr             jmp c00065
0017EFr 3  A9 01                lda #1
0017F1r 3  A0 0B                ldy #11
0017F3r 3  91 rr                sta (z80_ix),y
0017F5r 3  4C rr rr             jmp c00091
0017F8r 3  A0 0C        c00065: ldy #12
0017FAr 3  B1 rr                lda (z80_ix),y
0017FCr 3  38                   sec
0017FDr 3  E9 01                sbc #1
0017FFr 3  A0 0C                ldy #12
001801r 3  91 rr                sta (z80_ix),y
001803r 3  4C rr rr     c00091: jmp c00163
001806r 3  A9 46        c00096: lda #70
001808r 3  A0 0C                ldy #12
00180Ar 3  D1 rr                cmp (z80_ix),y
00180Cr 3  F0 03                beq *+5
00180Er 3  4C rr rr             jmp c00136
001811r 3  A9 00                lda #0
001813r 3  A0 0B                ldy #11
001815r 3  91 rr                sta (z80_ix),y
001817r 3  4C rr rr             jmp c00163
00181Ar 3  A0 0C        c00136: ldy #12
00181Cr 3  B1 rr                lda (z80_ix),y
00181Er 3  18                   clc
00181Fr 3  69 01                adc #1
001821r 3  A0 0C                ldy #12
001823r 3  91 rr                sta (z80_ix),y
001825r 3               c00163: ; SPRITEINK command
001825r 3  A9 00                lda #0 	; COLLISION
001827r 3  85 rr                sta z80_b
001829r 3  20 rr rr             jsr sktyp
00182Cr 3  B0 03                bcs :+
00182Er 3  4C rr rr             jmp c00339
001831r 3               :
001831r 3  A9 FF                lda #255	; REMOVE
001833r 3  A0 05                ldy #5
001835r 3  91 rr                sta (z80_ix),y
001837r 3  A9 19                lda #25	; EXPLODE
001839r 3  20 rr rr             jsr explod
00183Cr 3  A5 rr                lda vara
00183Er 3  38                   sec
00183Fr 3  E9 01                sbc #1
001841r 3  85 rr                sta vara
001843r 3  A9 00                lda #0
001845r 3  C5 rr                cmp vara
001847r 3  F0 03                beq *+5
001849r 3  4C rr rr             jmp c00265
00184Cr 3  A9 01                lda #1	; NEXTLEVEL
00184Er 3  85 rr                sta nexlev
001850r 3               c00265: ; SPRITEINK command
001850r 3  A9 64                lda #<100		; SCORE
001852r 3  85 rr                sta z80_l
001854r 3  A9 00                lda #>100
001856r 3  85 rr                sta z80_h
001858r 3  20 rr rr             jsr addsc
00185Br 3                       ; SOUND command
00185Br 3  A9 00                lda #0
00185Dr 3  85 rr                sta chary
00185Fr 3  A9 01                lda #1
001861r 3  85 rr                sta charx
001863r 3  A0 00                ldy #0		; SHOWSCORE
001865r 3  A9 06                lda #6
001867r 3  85 rr                sta z80_b
001869r 3  20 rr rr             jsr dscor
00186Cr 3  60           c00339: rts
00186Dr 3               evnt03:
00186Dr 3  60                   rts
00186Er 3               evnt04:
00186Er 3  60                   rts
00186Fr 3               evnt05:
00186Fr 3  60                   rts
001870r 3               evnt06:
001870r 3  60                   rts
001871r 3               evnt07:
001871r 3  60                   rts
001872r 3               evnt08:
001872r 3  60                   rts
001873r 3               evnt09:
001873r 3  A9 02                lda #2
001875r 3  A0 05                ldy #5
001877r 3  D1 rr                cmp (z80_ix),y
001879r 3  F0 03                beq *+5
00187Br 3  4C rr rr             jmp j00066
00187Er 3  A5 rr                lda vara
001880r 3  18                   clc
001881r 3  69 01                adc #1
001883r 3  85 rr                sta vara
001885r 3  A9 00                lda #0
001887r 3  A0 0B                ldy #11
001889r 3  91 rr                sta (z80_ix),y
00188Br 3  A9 45                lda #69
00188Dr 3  A0 0C                ldy #12
00188Fr 3  91 rr                sta (z80_ix),y
001891r 3  60           j00066: rts
001892r 3               evnt10:
001892r 3  60                   rts
001893r 3               evnt11:
001893r 3  60                   rts
001894r 3               evnt12:
001894r 3  60                   rts
001895r 3               evnt13:
001895r 3  A9 03                lda #3
001897r 3  85 rr                sta numlif
001899r 3  A9 00                lda #0
00189Br 3  85 rr                sta scno
00189Dr 3  20 rr rr             jsr nwscr
0018A0r 3  A9 17                lda #23
0018A2r 3                       ; COLOUR command
0018A2r 3                       ; sta colour_byte
0018A2r 3  A9 02                lda #2
0018A4r 3                       ; BORDER command
0018A4r 3                       ; sta colour_byte
0018A4r 3  20 rr rr             jsr cls		; CLS
0018A7r 3  A9 02                lda #2
0018A9r 3  85 rr                sta chary
0018ABr 3  A9 12                lda #18
0018ADr 3  85 rr                sta charx
0018AFr 3  A9 02                lda #2  	; MESSAGE
0018B1r 3  20 rr rr             jsr dmsg
0018B4r 3  A9 05                lda #5
0018B6r 3  85 rr                sta chary
0018B8r 3  A9 12                lda #18
0018BAr 3  85 rr                sta charx
0018BCr 3  A9 03                lda #3  	; MESSAGE
0018BEr 3  20 rr rr             jsr dmsg
0018C1r 3  A9 00                lda #0
0018C3r 3  85 rr                sta chary
0018C5r 3  A9 09                lda #9
0018C7r 3  85 rr                sta charx
0018C9r 3  A9 30                lda #48
0018CBr 3                       ; COLOUR command
0018CBr 3                       ; sta colour_byte
0018CBr 3  A9 01                lda #1  	; MESSAGE
0018CDr 3  20 rr rr             jsr dmsg
0018D0r 3  A9 03                lda #3
0018D2r 3  85 rr                sta chary
0018D4r 3  A9 12                lda #18
0018D6r 3  85 rr                sta charx
0018D8r 3  A0 00                ldy #0		; SHOWSCORE
0018DAr 3  A9 06                lda #6
0018DCr 3  85 rr                sta z80_b
0018DEr 3  20 rr rr             jsr dscor
0018E1r 3  60                   rts
0018E2r 3               evnt14:
0018E2r 3  A9 00                lda #0
0018E4r 3  85 rr                sta vara
0018E6r 3  A9 06                lda #6
0018E8r 3  85 rr                sta chary
0018EAr 3  A9 14                lda #20
0018ECr 3  85 rr                sta charx
0018EEr 3  A5 rr                lda numlif	; DISPLAY
0018F0r 3  20 rr rr             jsr disply
0018F3r 3  60                   rts
0018F4r 3               evnt15:
0018F4r 3  A9 00                lda #0
0018F6r 3  A0 05                ldy #5
0018F8r 3  D1 rr                cmp (z80_ix),y
0018FAr 3  F0 03                beq *+5
0018FCr 3  4C rr rr             jmp p00034
0018FFr 3  A9 01                lda #1 		; KILL
001901r 3  85 rr                sta deadf
001903r 3  60           p00034: rts
001904r 3               evnt16:
001904r 3                       ; SOUND command
001904r 3  A5 rr                lda numlif
001906r 3  38                   sec
001907r 3  E9 01                sbc #1
001909r 3  85 rr                sta numlif
00190Br 3  60                   rts
00190Cr 3               evnt17:
00190Cr 3  A9 32                lda #50 	; DELAY
00190Er 3  20 rr rr             jsr delay
001911r 3  60                   rts
001912r 3               evnt18:
001912r 3  A9 32                lda #50 	; DELAY
001914r 3  20 rr rr             jsr delay
001917r 3  60                   rts
001918r 3               evnt19:
001918r 3  60                   rts
001919r 3  60           ptcusr: rts
00191Ar 3               data_start:
00191Ar 3               msgdat:
00191Ar 3  47 41 4D 45          .byte "GAME OVER",141
00191Er 3  20 4F 56 45  
001922r 3  52 8D        
001924r 3  44 49 41 4D          .byte "DIAMOND GEEZER",141
001928r 3  4F 4E 44 20  
00192Cr 3  47 45 45 5A  
001933r 3  53 43 4F 52          .byte "SCORE",141
001937r 3  45 8D        
001939r 3  4C 49 56 45          .byte "LIVES",141
00193Dr 3  53 8D        
00193Fr 3  31 2E 20 4B          .byte "1. KEYBOARD",141
001943r 3  45 59 42 4F  
001947r 3  41 52 44 8D  
00194Br 3  32 2E 20 4B          .byte "2. KEMPSTON",141
00194Fr 3  45 4D 50 53  
001953r 3  54 4F 4E 8D  
001957r 3  33 2E 20 53          .byte "3. SINCLAIR",141
00195Br 3  49 4E 43 4C  
00195Fr 3  41 49 52 8D  
001963r 3  20 20 57 65          .byte "  Welcome to Diamond Geezer...",13
001967r 3  6C 63 6F 6D  
00196Br 3  65 20 74 6F  
001982r 3  4D 6F 76 65          .byte "Move around the levels",13
001986r 3  20 61 72 6F  
00198Ar 3  75 6E 64 20  
001999r 3  63 6F 6C 6C          .byte "collecting diamonds and",13
00199Dr 3  65 63 74 69  
0019A1r 3  6E 67 20 64  
0019B1r 3  61 76 6F 69          .byte "avoiding the deadly",13
0019B5r 3  64 69 6E 67  
0019B9r 3  20 74 68 65  
0019C5r 3  73 6B 75 6C          .byte "skulls   +",13
0019C9r 3  6C 73 20 20  
0019CDr 3  20 2B 0D     
0019D0r 3  8D                   .byte 141
0019D1r 3               nummsg:
0019D1r 3  08                   .byte 8
0019D2r 3               chgfx:
0019D2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0019D6r 3  00 00 00 00  
0019DAr 3  FE FE FE 00          .byte 254,254,254,0,239,239,239,0
0019DEr 3  EF EF EF 00  
0019E2r 3  00 00 FF 00          .byte 0,0,255,0,0,0,255,0
0019E6r 3  00 00 FF 00  
0019EAr 3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
0019EEr 3  AA 55 AA 55  
0019F2r 3               bprop:
0019F2r 3  00                   .byte 0
0019F3r 3  02                   .byte 2
0019F4r 3  03                   .byte 3
0019F5r 3  04                   .byte 4
0019F6r 3               sprgfx:
0019F6r 3  43 80 37 C5          .byte 67,128,55,197,103,226,39,229,19,228,15,248,1,240,1,240,3,240,3,224,7,224,15,224,23,208,19,144,56,24,120,60
0019FAr 3  67 E2 27 E5  
0019FEr 3  13 E4 0F F8  
001A16r 3  10 E0 4D F1          .byte 16,224,77,241,153,248,73,249,4,249,3,254,0,124,0,124,0,252,0,248,1,248,3,248,5,244,4,228,14,6,30,15
001A1Ar 3  99 F8 49 F9  
001A1Er 3  04 F9 03 FE  
001A36r 3  04 38 53 7C          .byte 4,56,83,124,38,126,82,126,65,62,128,255,0,31,0,31,0,63,0,62,0,126,0,254,1,125,1,57,131,129,199,131
001A3Ar 3  26 7E 52 7E  
001A3Er 3  41 3E 80 FF  
001A56r 3  01 0E 14 DF          .byte 1,14,20,223,137,159,148,159,144,79,224,63,192,7,192,7,192,15,128,15,128,31,128,63,64,95,64,78,96,224,241,224
001A5Ar 3  89 9F 94 9F  
001A5Er 3  90 4F E0 3F  
001A76r 3  00 00 03 80          .byte 0,0,3,128,7,192,87,229,39,226,83,237,15,241,1,240,1,240,3,240,3,224,7,224,15,240,23,200,227,134,224,15
001A7Ar 3  07 C0 57 E5  
001A7Er 3  27 E2 53 ED  
001A96r 3  00 00 00 E0          .byte 0,0,0,224,1,240,85,249,137,248,84,251,67,252,0,124,0,124,0,252,0,248,1,248,3,252,5,242,184,225,248,3
001A9Ar 3  01 F0 55 F9  
001A9Er 3  89 F8 54 FB  
001AB6r 3  00 00 00 38          .byte 0,0,0,56,0,124,85,126,34,126,213,62,16,255,0,31,0,31,0,63,0,62,0,126,0,255,129,124,110,56,254,0
001ABAr 3  00 7C 55 7E  
001ABEr 3  22 7E D5 3E  
001AD6r 3  00 00 00 0E          .byte 0,0,0,14,0,31,149,95,136,159,181,79,196,63,192,7,192,7,192,15,128,15,128,31,192,63,32,95,27,142,63,128
001ADAr 3  00 1F 95 5F  
001ADEr 3  88 9F B5 4F  
001AF6r 3  03 80 07 C0          .byte 3,128,7,192,7,224,7,224,67,224,35,241,253,250,33,247,3,242,3,225,7,224,15,224,23,208,19,144,56,24,120,60
001AFAr 3  07 E0 07 E0  
001AFEr 3  43 E0 23 F1  
001B16r 3  00 E0 01 F0          .byte 0,224,1,240,1,248,1,248,16,248,72,252,191,126,200,125,128,252,64,248,1,248,3,248,5,244,4,228,14,6,30,15
001B1Ar 3  01 F8 01 F8  
001B1Er 3  10 F8 48 FC  
001B36r 3  00 38 00 7C          .byte 0,56,0,124,0,126,0,126,4,62,18,63,175,223,114,31,32,63,16,62,0,126,0,254,1,125,1,57,131,129,199,131
001B3Ar 3  00 7E 00 7E  
001B3Er 3  04 3E 12 3F  
001B56r 3  00 0E 00 1F          .byte 0,14,0,31,128,31,128,31,129,15,196,143,235,247,220,135,200,15,132,15,128,31,128,63,64,95,64,78,96,224,241,224
001B5Ar 3  80 1F 80 1F  
001B5Er 3  81 0F C4 8F  
001B76r 3  03 80 07 C0          .byte 3,128,7,192,7,224,87,229,35,226,83,253,13,241,1,240,3,240,3,224,7,224,7,224,7,224,3,160,15,112,15,112
001B7Ar 3  07 E0 57 E5  
001B7Er 3  23 E2 53 FD  
001B96r 3  00 E0 01 F0          .byte 0,224,1,240,1,248,85,249,136,248,84,255,67,124,0,124,0,252,0,248,1,248,1,248,1,248,0,232,3,220,3,220
001B9Ar 3  01 F8 55 F9  
001B9Er 3  88 F8 54 FF  
001BB6r 3  00 38 00 7C          .byte 0,56,0,124,0,126,85,126,34,62,213,63,16,223,0,31,0,63,0,62,0,126,0,126,0,126,0,58,0,247,0,247
001BBAr 3  00 7E 55 7E  
001BBEr 3  22 3E D5 3F  
001BD6r 3  00 0E 00 1F          .byte 0,14,0,31,128,31,149,95,136,143,245,79,196,55,192,7,192,15,128,15,128,31,128,31,128,31,128,14,192,61,192,61
001BDAr 3  80 1F 95 5F  
001BDEr 3  88 8F F5 4F  
001BF6r 3  01 C0 C3 E0          .byte 1,192,195,224,199,224,39,224,47,192,31,243,15,143,15,128,15,192,7,216,7,246,7,247,59,224,33,192,224,0,224,0
001BFAr 3  C7 E0 27 E0  
001BFEr 3  2F C0 1F F3  
001C16r 3  00 70 30 F8          .byte 0,112,48,248,49,248,9,248,11,240,199,252,195,227,3,224,3,240,1,246,129,253,193,253,14,248,8,112,56,0,56,0
001C1Ar 3  31 F8 09 F8  
001C1Er 3  0B F0 C7 FC  
001C36r 3  00 1C 0C 3E          .byte 0,28,12,62,12,126,2,126,2,252,49,255,240,248,0,248,0,252,128,125,96,127,112,127,3,190,2,28,14,0,14,0
001C3Ar 3  0C 7E 02 7E  
001C3Er 3  02 FC 31 FF  
001C56r 3  00 07 83 0F          .byte 0,7,131,15,131,31,128,159,0,191,204,127,60,62,0,62,0,63,96,31,216,31,220,31,128,239,0,135,3,128,3,128
001C5Ar 3  83 1F 80 9F  
001C5Er 3  00 BF CC 7F  
001C76r 3  01 C0 03 E0          .byte 1,192,3,224,7,224,199,227,207,207,63,240,15,128,15,128,15,192,7,192,55,232,47,244,227,231,225,199,0,0,0,0
001C7Ar 3  07 E0 C7 E3  
001C7Er 3  CF CF 3F F0  
001C96r 3  00 70 00 F8          .byte 0,112,0,248,1,248,241,248,243,243,15,252,3,224,3,224,3,240,1,240,13,250,11,253,248,249,248,113,0,0,0,0
001C9Ar 3  01 F8 F1 F8  
001C9Er 3  F3 F3 0F FC  
001CB6r 3  00 1C 00 3E          .byte 0,28,0,62,0,126,60,126,252,252,3,255,0,248,0,248,0,252,0,124,131,126,66,255,126,62,126,28,0,0,0,0
001CBAr 3  00 7E 3C 7E  
001CBEr 3  FC FC 03 FF  
001CD6r 3  00 07 80 0F          .byte 0,7,128,15,128,31,143,31,63,63,192,255,0,62,0,62,0,63,0,31,160,223,208,191,159,143,31,135,0,0,0,0
001CDAr 3  80 1F 8F 1F  
001CDEr 3  3F 3F C0 FF  
001CF6r 3  01 C0 03 E3          .byte 1,192,3,227,7,227,7,228,15,200,207,240,223,128,47,128,15,192,63,192,231,224,231,240,3,232,1,196,0,7,0,7
001CFAr 3  07 E3 07 E4  
001CFEr 3  0F C8 CF F0  
001D16r 3  00 70 C0 F8          .byte 0,112,192,248,193,248,1,249,3,242,51,252,55,224,11,224,3,240,15,240,57,248,57,252,0,250,0,113,192,1,192,1
001D1Ar 3  C1 F8 01 F9  
001D1Er 3  03 F2 33 FC  
001D36r 3  00 1C 30 3E          .byte 0,28,48,62,48,126,64,126,128,252,12,255,13,248,2,248,0,252,3,252,14,126,14,127,128,62,64,28,112,0,112,0
001D3Ar 3  30 7E 40 7E  
001D3Er 3  80 FC 0C FF  
001D56r 3  00 07 8C 0F          .byte 0,7,140,15,140,31,144,31,32,63,195,63,3,126,0,190,0,63,0,255,131,159,195,159,160,15,16,7,28,0,28,0
001D5Ar 3  8C 1F 90 1F  
001D5Er 3  20 3F C3 3F  
001D76r 3  01 C0 03 E0          .byte 1,192,3,224,7,224,199,227,207,207,63,240,15,128,15,128,15,192,7,192,55,232,47,244,227,231,225,199,0,0,0,0
001D7Ar 3  07 E0 C7 E3  
001D7Er 3  CF CF 3F F0  
001D96r 3  00 70 00 F8          .byte 0,112,0,248,1,248,241,248,243,243,15,252,3,224,3,224,3,240,1,240,13,250,11,253,248,249,248,113,0,0,0,0
001D9Ar 3  01 F8 F1 F8  
001D9Er 3  F3 F3 0F FC  
001DB6r 3  00 1C 00 3E          .byte 0,28,0,62,0,126,60,126,252,252,3,255,0,248,0,248,0,252,0,124,131,126,66,255,126,62,126,28,0,0,0,0
001DBAr 3  00 7E 3C 7E  
001DBEr 3  FC FC 03 FF  
001DD6r 3  00 07 80 0F          .byte 0,7,128,15,128,31,143,31,63,63,192,255,0,62,0,62,0,63,0,31,160,223,208,191,159,143,31,135,0,0,0,0
001DDAr 3  80 1F 8F 1F  
001DDEr 3  3F 3F C0 FF  
001DF6r 3  1F F0 3F FC          .byte 31,240,63,252,95,254,79,62,110,31,76,159,253,127,215,255,83,255,127,223,47,30,138,184,160,96,234,224,255,224,127,192
001DFAr 3  5F FE 4F 3E  
001DFEr 3  6E 1F 4C 9F  
001E16r 3  07 FC 0F FF          .byte 7,252,15,255,151,255,147,207,219,135,211,39,255,95,245,255,212,255,223,247,139,199,34,174,40,24,58,184,63,248,31,240
001E1Ar 3  97 FF 93 CF  
001E1Er 3  DB 87 D3 27  
001E36r 3  01 FF C3 FF          .byte 1,255,195,255,229,255,228,243,246,225,244,201,255,215,253,127,245,63,247,253,226,241,136,171,10,6,14,174,15,254,7,252
001E3Ar 3  E5 FF E4 F3  
001E3Er 3  F6 E1 F4 C9  
001E56r 3  C0 7F F0 FF          .byte 192,127,240,255,249,127,249,60,125,184,125,50,255,245,255,95,253,79,125,255,120,188,226,42,130,129,131,171,131,255,1,255
001E5Ar 3  F9 7F F9 3C  
001E5Er 3  7D B8 7D 32  
001E76r 3  0F F8 3F FC          .byte 15,248,63,252,127,250,124,242,248,118,249,50,254,191,255,235,255,202,251,254,120,244,29,81,6,5,7,87,7,255,3,254
001E7Ar 3  7F FA 7C F2  
001E7Er 3  F8 76 F9 32  
001E96r 3  03 FE 0F FF          .byte 3,254,15,255,159,254,159,60,190,29,190,76,255,175,255,250,191,242,190,255,30,61,71,84,65,129,193,213,193,255,128,255
001E9Ar 3  9F FE 9F 3C  
001E9Er 3  BE 1D BE 4C  
001EB6r 3  80 FF C3 FF          .byte 128,255,195,255,167,255,39,207,111,135,47,147,255,235,191,254,175,252,239,191,71,143,17,213,80,96,112,117,240,127,224,63
001EBAr 3  A7 FF 27 CF  
001EBEr 3  6F 87 2F 93  
001ED6r 3  E0 3F F0 FF          .byte 224,63,240,255,233,255,201,243,219,225,203,228,255,250,175,255,43,255,251,239,209,227,68,117,20,24,92,29,252,31,248,15
001EDAr 3  E9 FF C9 F3  
001EDEr 3  DB E1 CB E4  
001EF6r 3  01 80 07 E0          .byte 1,128,7,224,27,56,103,142,159,195,224,63,159,193,159,193,207,195,103,134,51,140,27,24,13,48,6,96,3,192,1,128
001EFAr 3  1B 38 67 8E  
001EFEr 3  9F C3 E0 3F  
001F16r 3  00 60 01 F8          .byte 0,96,1,248,6,206,153,227,231,240,248,15,103,240,103,240,243,240,153,225,12,227,6,198,3,76,1,152,0,240,0,96
001F1Ar 3  06 CE 99 E3  
001F1Er 3  E7 F0 F8 0F  
001F36r 3  00 18 00 7E          .byte 0,24,0,126,129,179,230,120,57,252,254,3,25,252,25,252,60,252,102,120,195,56,129,177,0,211,0,102,0,60,0,24
001F3Ar 3  81 B3 E6 78  
001F3Er 3  39 FC FE 03  
001F56r 3  00 06 80 1F          .byte 0,6,128,31,224,108,57,158,14,127,255,128,6,127,6,127,15,63,25,158,48,206,96,108,192,52,128,25,0,15,0,6
001F5Ar 3  E0 6C 39 9E  
001F5Er 3  0E 7F FF 80  
001F76r 3               frmlst:
001F76r 3  00 04                .byte 0,4
001F78r 3  04 04                .byte 4,4
001F7Ar 3  08 02                .byte 8,2
001F7Cr 3  0A 01 0B 00          .byte 10,1,11,0
001F80r 3               scdat:
001F80r 3  D3 00 CE 00          .word 211,206,259,248
001F84r 3  03 01 F8 00  
001F88r 3  01 FF 00 14          .byte 1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,8,2,2,255,1,10,2,2
001F8Cr 3  01 01 FF 00  
001F90r 3  14 01 01 FF  
001FAAr 3  01 01 FF 00          .byte 1,1,255,0,6,2,2,255,0,10,2,2,1,1,255,0,6,2,2,255,0,10,2,2,1,1,2,2,255,1,11,2,2
001FAEr 3  06 02 02 FF  
001FB2r 3  00 0A 02 02  
001FCBr 3  FF 01 07 02          .byte 255,1,7,2,2,255,0,11,2,2,255,0,5,1,1,2,2,255,0,11,2,2,255,0,5,255,1,4,2,2,255,1,13
001FCFr 3  02 FF 00 0B  
001FD3r 3  02 02 FF 00  
001FECr 3  02 02 01 01          .byte 2,2,1,1,1,0,0,2,2,255,0,13,2,2,0,1,1,0,0,2,2,255,0,13,2,2,0,255,1,6,2,2,255,1,6
001FF0r 3  01 00 00 02  
001FF4r 3  02 FF 00 0D  
00200Fr 3  02 02 FF 01          .byte 2,2,255,1,8,255,0,4,2,2,255,0,6,2,2,255,0,6,1,1,255,0,4,2,2,255,0,6,2,2,255,0,6
002013r 3  08 FF 00 04  
002017r 3  02 02 FF 00  
002030r 3  FF 01 0A 02          .byte 255,1,10,2,2,255,1,7,2,2,1,1,1,255,0,8,2,2,255,0,7,2,2,0,1,1,255,0,8,2,2,255,0,7
002034r 3  02 FF 01 07  
002038r 3  02 02 01 01  
002052r 3  02 02 00 FF          .byte 2,2,0,255,1,23,255,0,22
002056r 3  01 17 FF 00  
00205Ar 3  16           
00205Br 3  01 FF 00 14          .byte 1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,2,2,255,1,16,2,2
00205Fr 3  01 01 FF 00  
002063r 3  14 01 01 FF  
00207Cr 3  01 01 02 02          .byte 1,1,2,2,255,0,16,2,2,1,1,2,2,255,0,16,2,2,255,1,11,2,2,255,1,11,255,0,9,2,2,1,1,1
002080r 3  FF 00 10 02  
002084r 3  02 01 01 02  
00209Er 3  FF 00 06 01          .byte 255,0,6,1,1,255,0,9,2,2,1,1,1,255,0,6,255,1,9,2,2,255,1,7,2,2,255,1,4,255,0,7,2,2
0020A2r 3  01 FF 00 09  
0020A6r 3  02 02 01 01  
0020C0r 3  FF 00 07 02          .byte 255,0,7,2,2,0,0,1,1,255,0,7,2,2,255,0,7,2,2,0,0,255,1,5,2,2,255,1,7,2,2,255,1,8
0020C4r 3  02 00 00 01  
0020C8r 3  01 FF 00 07  
0020E2r 3  00 00 00 02          .byte 0,0,0,2,2,255,0,7,2,2,255,0,6,1,1,0,0,0,2,2,255,0,7,2,2,255,0,6,255,1,8,2,2
0020E6r 3  02 FF 00 07  
0020EAr 3  02 02 FF 00  
002103r 3  FF 01 09 02          .byte 255,1,9,2,2,1,1,1,255,0,6,2,2,255,0,9,2,2,0,1,1,255,0,6,2,2,255,0,9,2,2,0,255,1,23
002107r 3  02 01 01 01  
00210Br 3  FF 00 06 02  
002126r 3  FF 00 16             .byte 255,0,22
002129r 3  FF 01 04 FF          .byte 255,1,4,255,0,10,1,255,0,6,255,1,5,255,0,10,1,255,0,6,255,1,5,255,0,10,1,255,0,6,255,1,9
00212Dr 3  00 0A 01 FF  
002131r 3  00 06 FF 01  
00214Ar 3  02 02 FF 01          .byte 2,2,255,1,9,2,2,1,1,255,0,7,2,2,255,0,8,1,2,2,1,1,255,0,7,2,2,255,0,8,1,2,2
00214Er 3  09 02 02 01  
002152r 3  01 FF 00 07  
00216Br 3  FF 01 04 02          .byte 255,1,4,2,2,255,1,8,2,2,255,1,4,2,2,1,1,0,0,2,2,255,0,8,2,2,255,0,4,2,2,1,1
00216Fr 3  02 FF 01 08  
002173r 3  02 02 FF 01  
00218Cr 3  00 00 02 02          .byte 0,0,2,2,255,0,8,2,2,255,0,4,2,2,255,1,8,2,2,255,1,14,255,0,6,2,2,255,0,12,1,1,255,0,6
002190r 3  FF 00 08 02  
002194r 3  02 FF 00 04  
0021AFr 3  02 02 FF 00          .byte 2,2,255,0,12,255,1,5,2,2,255,1,9,2,2,255,1,6,0,0,0,2,2,255,0,9,2,2,255,0,4,1,1
0021B3r 3  0C FF 01 05  
0021B7r 3  02 02 FF 01  
0021D0r 3  00 00 00 02          .byte 0,0,0,2,2,255,0,9,2,2,255,0,4,1,1,2,2,255,1,16,2,2,1,1,2,2,255,0,16,2,2,1,1
0021D4r 3  02 FF 00 09  
0021D8r 3  02 02 FF 00  
0021F1r 3  02 02 FF 00          .byte 2,2,255,0,16,2,2,255,1,6,2,2,255,1,8,2,2,255,1,6,255,0,4,2,2,255,0,4,1,0,0,0,2,2
0021F5r 3  10 02 02 FF  
0021F9r 3  01 06 02 02  
002213r 3  FF 00 04 01          .byte 255,0,4,1,1,255,0,4,2,2,255,0,4,1,0,0,0,2,2,255,0,4,255,1,23
002217r 3  01 FF 00 04  
00221Br 3  02 02 FF 00  
00222Cr 3  FF 01 0B FF          .byte 255,1,11,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,12,2,2,1,2,2,255,1,7,255,0,10,2,2,1
002230r 3  00 14 01 01  
002234r 3  FF 00 14 01  
00224Dr 3  02 02 FF 00          .byte 2,2,255,0,5,1,1,255,0,10,2,2,1,2,2,255,0,5,255,1,6,2,2,255,1,10,2,2,255,1,4,255,0,4
002251r 3  05 01 01 FF  
002255r 3  00 0A 02 02  
00226Fr 3  02 02 FF 00          .byte 2,2,255,0,10,2,2,0,0,1,1,255,0,4,2,2,255,0,10,2,2,0,0,255,1,15,2,2,255,1,7,255,0,6
002273r 3  0A 02 02 00  
002277r 3  00 01 01 FF  
002291r 3  01 FF 00 06          .byte 1,255,0,6,2,2,255,0,5,1,1,255,0,6,1,255,0,6,2,2,255,0,5,255,1,6,2,2,1,1,2,2,255,1,8
002295r 3  02 02 FF 00  
002299r 3  05 01 01 FF  
0022B4r 3  02 02 01 01          .byte 2,2,1,1,255,0,4,2,2,0,0,2,2,255,0,8,2,2,1,1,255,0,4,2,2,0,0,2,2,255,0,8,2,2
0022B8r 3  FF 00 04 02  
0022BCr 3  02 00 00 02  
0022D6r 3  01 01 02 02          .byte 1,1,2,2,255,1,11,2,2,255,1,7,2,2,255,0,11,2,2,1,255,0,4,1,1,2,2,255,0,11,2,2,1
0022DAr 3  FF 01 0B 02  
0022DEr 3  02 FF 01 07  
0022F7r 3  FF 00 04 FF          .byte 255,0,4,255,1,5,2,2,255,1,11,2,2,255,1,4,0,0,0,2,2,255,0,11,2,2,0,0,1,1,0,0,0
0022FBr 3  01 05 02 02  
0022FFr 3  FF 01 0B 02  
002318r 3  02 02 FF 00          .byte 2,2,255,0,11,2,2,0,0,255,1,13
00231Cr 3  0B 02 02 00  
002320r 3  00 FF 01 0D  
002324r 3               numsc:
002324r 3  04                   .byte 4
002325r 3               nmedat:
002325r 3  00 00 60 78          .byte 0,0,96,120,1,2,120,16,2,3,144,16,2,3,48,80,2,3,72,152,2,3,24,16,255
002329r 3  01 02 78 10  
00232Dr 3  02 03 90 10  
00233Er 3  00 00 48 40          .byte 0,0,72,64,1,2,120,16,1,2,24,16,2,3,24,80,2,3,48,112,2,3,72,128,2,3,120,88,255
002342r 3  01 02 78 10  
002346r 3  01 02 18 10  
00235Br 3  00 00 38 88          .byte 0,0,56,136,1,2,32,56,1,2,104,64,2,3,8,40,2,3,8,128,2,3,80,152,2,3,124,88,2,3,152,16,2,3,152,160,255
00235Fr 3  01 02 20 38  
002363r 3  01 02 68 40  
002380r 3  00 00 98 10          .byte 0,0,152,16,1,2,8,104,1,2,56,80,1,2,104,112,2,3,8,16,2,3,80,16,2,3,124,160,2,3,8,152,2,3,56,24,255
002384r 3  01 02 08 68  
002388r 3  01 02 38 50  
0023A5r 3               NUMOBJ = 1
0023A5r 3               objdta:
0023A5r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,56,120,254,56,120
0023A9r 3  00 00 00 00  
0023ADr 3  00 00 00 00  
0023CBr 3               font:
0023CBr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0023CFr 3  00 00 00 00  
0023D3r 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
0023D7r 3  30 00 30 00  
0023DBr 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
0023DFr 3  00 00 00 00  
0023E3r 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
0023E7r 3  6C FE 6C 00  
0023EBr 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
0023EFr 3  7E 1E 7E 18  
0023F3r 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0023F7r 3  30 6E CE 00  
0023FBr 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0023FFr 3  7E CC 7E 00  
002403r 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
002407r 3  00 00 00 00  
00240Br 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
00240Fr 3  18 18 0C 00  
002413r 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
002417r 3  30 30 60 00  
00241Br 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
00241Fr 3  7E 18 3C 00  
002423r 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
002427r 3  7E 18 18 00  
00242Br 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
00242Fr 3  00 18 18 30  
002433r 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
002437r 3  7E 00 00 00  
00243Br 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
00243Fr 3  00 38 38 00  
002443r 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
002447r 3  18 30 60 00  
00244Br 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
00244Fr 3  F6 E6 7C 00  
002453r 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
002457r 3  18 18 7E 00  
00245Br 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
00245Fr 3  7C C0 FE 00  
002463r 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
002467r 3  06 C6 7C 00  
00246Br 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
00246Fr 3  D8 FE 18 00  
002473r 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
002477r 3  06 C6 7C 00  
00247Br 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
00247Fr 3  C6 C6 7C 00  
002483r 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
002487r 3  18 30 30 00  
00248Br 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
00248Fr 3  C6 C6 7C 00  
002493r 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
002497r 3  7E 06 7C 00  
00249Br 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
00249Fr 3  00 00 30 00  
0024A3r 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
0024A7r 3  00 30 30 60  
0024ABr 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
0024AFr 3  30 18 0C 00  
0024B3r 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
0024B7r 3  00 7E 00 00  
0024BBr 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
0024BFr 3  0C 18 30 00  
0024C3r 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
0024C7r 3  18 00 18 00  
0024CBr 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
0024CFr 3  FE C0 7C 00  
0024D3r 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
0024D7r 3  FE C6 C6 00  
0024DBr 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
0024DFr 3  C6 C6 FC 00  
0024E3r 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
0024E7r 3  C0 C6 7C 00  
0024EBr 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
0024EFr 3  C6 CC F8 00  
0024F3r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0024F7r 3  C0 C0 FE 00  
0024FBr 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0024FFr 3  C0 C0 C0 00  
002503r 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
002507r 3  DE C6 7C 00  
00250Br 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
00250Fr 3  C6 C6 C6 00  
002513r 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
002517r 3  18 18 7E 00  
00251Br 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
00251Fr 3  C6 C6 7C 00  
002523r 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
002527r 3  D8 CC C6 00  
00252Br 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
00252Fr 3  C0 C0 FE 00  
002533r 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
002537r 3  C6 C6 C6 00  
00253Br 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
00253Fr 3  DE CE C6 00  
002543r 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
002547r 3  C6 C6 7C 00  
00254Br 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
00254Fr 3  FC C0 C0 00  
002553r 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
002557r 3  F6 DE 7C 00  
00255Br 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
00255Fr 3  FC CC C6 00  
002563r 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
002567r 3  06 C6 7C 00  
00256Br 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
00256Fr 3  30 30 30 00  
002573r 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
002577r 3  C6 C6 7C 00  
00257Br 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
00257Fr 3  C6 6C 38 00  
002583r 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
002587r 3  C6 FE 6C 00  
00258Br 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
00258Fr 3  38 6C C6 00  
002593r 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
002597r 3  30 30 30 00  
00259Br 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
00259Fr 3  30 60 FE 00  
0025A3r 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
0025A7r 3  18 18 1E 00  
0025ABr 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
0025AFr 3  30 18 0C 00  
0025B3r 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
0025B7r 3  30 30 F0 00  
0025BBr 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
0025BFr 3  30 30 30 00  
0025C3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0025C7r 3  00 00 00 FF  
0025CBr 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
0025CFr 3  60 60 FE 00  
0025D3r 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
0025D7r 3  7C CC 7C 00  
0025DBr 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
0025DFr 3  66 66 7C 00  
0025E3r 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
0025E7r 3  60 60 3C 00  
0025EBr 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
0025EFr 3  CC CC 7C 00  
0025F3r 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0025F7r 3  F8 C0 7C 00  
0025FBr 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0025FFr 3  30 30 30 00  
002603r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
002607r 3  CC 7C 0C 78  
00260Br 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
00260Fr 3  CC CC CC 00  
002613r 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
002617r 3  30 30 78 00  
00261Br 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00261Fr 3  0C 0C 6C 38  
002623r 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
002627r 3  70 78 6C 00  
00262Br 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00262Fr 3  30 30 1C 00  
002633r 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
002637r 3  FC FC FC 00  
00263Br 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00263Fr 3  CC CC CC 00  
002643r 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
002647r 3  CC CC 78 00  
00264Br 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00264Fr 3  CC F8 C0 C0  
002653r 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
002657r 3  CC 7C 0C 0E  
00265Br 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00265Fr 3  60 60 60 00  
002663r 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
002667r 3  78 0C F8 00  
00266Br 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00266Fr 3  30 30 1C 00  
002673r 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
002677r 3  CC CC 78 00  
00267Br 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00267Fr 3  78 78 30 00  
002683r 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
002687r 3  FC FC 78 00  
00268Br 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00268Fr 3  30 78 CC 00  
002693r 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
002697r 3  CC 7C 0C 78  
00269Br 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00269Fr 3  30 60 FC 00  
0026A3r 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
0026A7r 3  18 18 1E 00  
0026ABr 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
0026AFr 3  18 18 18 00  
0026B3r 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
0026B7r 3  30 30 F0 00  
0026BBr 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0026BFr 3  00 00 00 00  
0026C3r 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0026C7r 3  E3 BB C6 7C  
0026CBr 3               jtab:
0026CBr 3  63                   .byte 99
0026CCr 3  65 14 51 10  keys:   .byte 101,20,81,16,48,68,52,112,0,113,1
0026D0r 3  30 44 34 70  
0026D4r 3  00 71 01     
0026D7r 3               
0026D7r 2               
0026D7r 1               	.include "lib.inc"
0026D7r 2               ;----------------------------------------------------------------------
0026D7r 2               ; VIC20 Platform Specific functions
0026D7r 2               ;----------------------------------------------------------------------
0026D7r 2               
0026D7r 2               ;============================================================
0026D7r 2               ; PLATFORM VARIABLES
0026D7r 2               ;============================================================
0026D7r 2               ;
0026D7r 2               ; Memory map:
0026D7r 2               ;
0026D7r 2               ;	$0000-$01ff	 0.5kB	CPU WS
0026D7r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
0026D7r 2               ;	$0400-$0fff	 3,0kB	RAM
0026D7r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
0026D7r 2               ;	$2000-$7fff	24,0kB	RAM
0026D7r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
0026D7r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
0026D7r 2               ;	$9400-$97ff	 1,0kB	COLOUR RAM
0026D7r 2               ;	$9800-$9fff	 2,0kB	I/O
0026D7r 2               ;	$a000-$bfff	 8,0kB	RAM
0026D7r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
0026D7r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
0026D7r 2               ;
0026D7r 2               ; Keyboard matrix:
0026D7r 2               ;                          	  $9121
0026D7r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
0026D7r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
0026D7r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
0026D7r 2               ;                 VIC   07  06  05  04  03  02  01  00
0026D7r 2               ;
0026D7r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
0026D7r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
0026D7r 2               ;                 VIC   17  16  15  14  13  12  11  10
0026D7r 2               ;
0026D7r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
0026D7r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
0026D7r 2               ;                 VIC   27  26  25  24  23  22  21  20
0026D7r 2               ;
0026D7r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
0026D7r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
0026D7r 2               ;                 VIC   37  36  35  34  33  32  31  30
0026D7r 2               ;
0026D7r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
0026D7r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
0026D7r 2               ;                 VIC   47  46  45  44  43  42  41  40
0026D7r 2               ;
0026D7r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
0026D7r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
0026D7r 2               ;                 VIC   57  56  55  54  53  52  51  50
0026D7r 2               ;
0026D7r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
0026D7r 2               ;               ASCII   13  42  80  73  89  82  87
0026D7r 2               ;                 VIC   67  66  65  64  63  62  61  60
0026D7r 2               ;
0026D7r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
0026D7r 2               ;               ASCII   08  ??  43  57  55  53  51  49
0026D7r 2               ;                 VIC   77  76  75  74  73  72  71  70
0026D7r 2               ;
0026D7r 2               ;	 P =$65,O=$14,A=$51,Q=$10
0026D7r 2               ;	SPC=$30,N=$44,M=$34
0026D7r 2               ;	 1 =$70,2=$00,3=$71,4=$01
0026D7r 2               ;
0026D7r 2               ; Joysticks:
0026D7r 2               ;
0026D7r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
0026D7r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
0026D7r 2               ;	$9120	Right -     -     -     -     -     -     -
0026D7r 2               ;
0026D7r 2               ;	$9122	DDRB = Data Direction Register port $9120
0026D7r 2               ;               0 = input, 1 = output
0026D7r 2               ;		Bit7 should be 0 to read joystick $9120
0026D7r 2               ;
0026D7r 2               ; Video registers:
0026D7r 2               ;
0026D7r 2               ;	$9000	horizontal centering
0026D7r 2               ;		bits 0-6 horizontal centering
0026D7r 2               ;		bit  7 sets interlace scan
0026D7r 2               ;	$9001	vertical centering
0026D7r 2               ;	$9002	set # of columns
0026D7r 2               ;		bits 0-6 set # of columns
0026D7r 2               ;		bit 7 is part of video matrix address
0026D7r 2               ;	$9003	set # of rows
0026D7r 2               ;		bit 0 sets 8x8 or 16x8 chars
0026D7r 2               ;		bits 1-6 set # of rows
0026D7r 2               ;	$9005	start of character memory
0026D7r 2               ;		bits 0-3 start of character memory (default = 0)
0026D7r 2               ;		bits 4-7 is rest of video address (default= F)
0026D7r 2               ;		BITS 3,2,1,0 CM startinq address
0026D7r 2               ;			     HEX   DEC
0026D7r 2               ;		0000   ROM   8000  32768
0026D7r 2               ;		0001	     8400  33792
0026D7r 2               ;		0010	     8800  34816
0026D7r 2               ;		0011	     8C00  35840
0026D7r 2               ;		1000   RAM   0000  0000
0026D7r 2               ;		1001  xxxx
0026D7r 2               ;		1010  xxxx   unavail.
0026D7r 2               ;		1011  xxxx
0026D7r 2               ;		1100	     1000  4096
0026D7r 2               ;		1101	     1400  5120
0026D7r 2               ;		1110	     1800  6144
0026D7r 2               ;		1111	     1C00  7168
0026D7r 2               ;	$900f	Screen and border color register
0026D7r 2               ;		bits 4-7 select background color
0026D7r 2               ;		bits 0-2 select border color
0026D7r 2               ;		bit 3 selects inverted or normal mode
0026D7r 2               ;
0026D7r 2               
0026D7r 2               ; VIC constants
0026D7r 2               
0026D7r 2               	OBJCHAR 	= 178			; first char nr for objects
0026D7r 2               	scrchar 	= 22			; char/line
0026D7r 2               	scrline		= 22			; lines/screen
0026D7r 2               	ScreenSize	= scrchar*scrline * 8	; Screen size bytes
0026D7r 2               	ScreenRowBytes	= scrchar * 16		; bytes/line
0026D7r 2               	SpriteMaxY	= 161			; maxlines - 16 + 1
0026D7r 2               
0026D7r 2               ; VIC variables:
0026D7r 2               
0026D7r 2  00           	fontcol:	.byte 0		; Frontcolour text
0026D8r 2               
0026D8r 2               ; Addresses
0026D8r 2               
0026D8r 2               	MapAddr		= $400		; RAM
0026D8r 2               	ScreenAddr	= $0200		; VIDEO RAM
0026D8r 2               	CharAddress	= $1000		; CHAR RAM
0026D8r 2               	Reg0		= $9000		; Horizontal centering
0026D8r 2               	Reg1		= $9001		; Vertical centering
0026D8r 2               	Reg2		= $9002		; Set # of columns
0026D8r 2               	Reg3		= $9003		; Set # of rows
0026D8r 2               	Reg5		= $9005		; Start of character memory
0026D8r 2               	RegF		= $900f		; Screen and border color register
0026D8r 2               	JoyAddr1	= $9111		; Joystick address 1
0026D8r 2               	KeyColAddr	= $9120		; Keyboard column (write)
0026D8r 2               	JoyAddr2	= $9120		; Joystick address 2
0026D8r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
0026D8r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
0026D8r 2               	Timer1_Low  	= $9114		; Timer 1 low byte
0026D8r 2               	Timer1_High 	= $9115		; Timer 1 high byte
0026D8r 2               	Timer2_Low  	= $9118		; Timer 2 low byte
0026D8r 2               	Timer2_High 	= $9119		; Timer 2 high byte
0026D8r 2               	AUX		= $911b		; Auxiliary control register
0026D8r 2               	IFR		= $911d		; Interrupt Flag Register
0026D8r 2               	IER		= $911e		; Interrupt Enable Register
0026D8r 2               	ColorAttr	= $9600		; Color attributes
0026D8r 2               
0026D8r 2               ;----------------------------------------------------------------------
0026D8r 2               ; VIC20 video hardware fns
0026D8r 2               ;----------------------------------------------------------------------
0026D8r 2               
0026D8r 2               init:
0026D8r 2               
0026D8r 2               ; Disable interrupts
0026D8r 2               
0026D8r 2  A9 7F        	lda #$7f
0026DAr 2  8D 1E 91     	sta $911e
0026DDr 2  8D 2D 91     	sta $912d
0026E0r 2  8D 2E 91     	sta $912e
0026E3r 2               
0026E3r 2               ; Init screen for NTSC
0026E3r 2               ; this sets the background and border color of the screen
0026E3r 2               
0026E3r 2               ; in this case border black and background black
0026E3r 2  A9 18        	lda #%00011000
0026E5r 2  8D 0F 90     	sta RegF
0026E8r 2               
0026E8r 2               ; max num of columns 24
0026E8r 2  AD 02 90     	lda Reg2
0026EBr 2  29 80        	and #%10000000
0026EDr 2  09 16        	ora #ScrWidth
0026EFr 2  8D 02 90     	sta Reg2
0026F2r 2               
0026F2r 2               ; max num of lines (mult by 2 - 24) for 8x8 chars
0026F2r 2               ; no multiply for 8x16 chars
0026F2r 2  AD 03 90     	lda Reg3
0026F5r 2  29 81        	and #%10000001
0026F7r 2  09 16        	ora #ScrWidth		; number of rows multipled by two
0026F9r 2  8D 03 90     	sta Reg3
0026FCr 2               
0026FCr 2               ; horizontal and vertical position must be set for
0026FCr 2               ; non standard screen resolution (standard 22x23)
0026FCr 2               ; same games even allow the user to change them
0026FCr 2               ; these values are for PAL for NTSC should be different
0026FCr 2               
0026FCr 2               ; move horizontal position in the screen
0026FCr 2  AD 00 90     	lda Reg0
0026FFr 2  29 80        	and #%10000000
002701r 2  09 04        	ora #CentreX
002703r 2  8D 00 90     	sta Reg0
002706r 2               
002706r 2               ; move vertical position in the screen
002706r 2  A9 1B        	lda #CentreY
002708r 2  8D 01 90     	sta Reg1
00270Br 2               
00270Br 2               ; Set screem memory to $200
00270Br 2               ; bit 7 on $9002 has to be set
00270Br 2  AD 02 90     	lda Reg2
00270Er 2  09 80        	ora #%10000000
002710r 2  8D 02 90     	sta Reg2
002713r 2               
002713r 2               ; Set character data pointer to CHAR RAM at $1000
002713r 2               ; bit 7 on $9005 has always to be set
002713r 2               ; (based on compute - mapping the vic book)
002713r 2               ; color ram goes to 9600
002713r 2  AD 05 90     	lda Reg5
002716r 2  29 0C        	and #%00001100
002718r 2  09 8C        	ora #%10001100
00271Ar 2  8D 05 90     	sta Reg5
00271Dr 2               
00271Dr 2               ; This set the char size to 8x16
00271Dr 2  AD 03 90     	lda Reg3
002720r 2  09 01        	ora #%00000001
002722r 2  8D 03 90     	sta Reg3
002725r 2               
002725r 2               ; Init screencharacters
002725r 2               ; Fill screen with characters from left to right, up to down
002725r 2  A2 00        	ldx #0
002727r 2               scrinit:
002727r 2  8A           	txa
002728r 2  9D 00 02     	sta ScreenAddr,x
00272Br 2  E8           	inx
00272Cr 2  E0 F2        	cpx#242
00272Er 2  D0 F7        	bne scrinit
002730r 2               
002730r 2               
002730r 2               ; Reset fontcolor
002730r 2  A9 00        	lda #0		; Black
002732r 2  8D rr rr     	sta fontcol
002735r 2               
002735r 2               ; Init VIA timer for timeout 1/25 sec
002735r 2               
002735r 2  A9 E0        	lda #$e0		; T1 continuous
002737r 2  8D 1B 91     	sta AUX
00273Ar 2  A9 7F        	lda #$7f		; No int
00273Cr 2  8D 1E 91     	sta IER
00273Fr 2  A9 00        	lda #0
002741r 2  8D 1D 91     	sta IFR			; Clear interrupt flags
002744r 2  A9 A8        	lda #<timervalue	; Timer 1/25 sec
002746r 2  8D 14 91     	sta Timer1_Low
002749r 2  A9 61        	lda #>timervalue
00274Br 2  8D 15 91     	sta Timer1_High
00274Er 2               
00274Er 2  60           	rts
00274Fr 2               
00274Fr 2               
00274Fr 2               
00274Fr 2               
00274Fr 2               
00274Fr 2               ;--------------------------------------------------------
00274Fr 2               ; Keys
00274Fr 2               ;
00274Fr 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
00274Fr 2               ;             ||||||||
00274Fr 2               ;             |||||||+> Right    KEY 0  - X
00274Fr 2               ;             ||||||+-> Left     KEY 1  - Z
00274Fr 2               ;             |||||+--> Down     KEY 2  - .
00274Fr 2               ;             ||||+---> Up       KEY 3  - ;
00274Fr 2               ;             |||+----> Fire1    KEY 4  - SPC
00274Fr 2               ;             ||+-----> Fire2    KEY 5  - Q
00274Fr 2               ;             |+------> Fire3    KEY 6  - P
00274Fr 2               ;             +-------> Not used
00274Fr 2               ;
00274Fr 2               ;                       Option1  KEY 7  - 1
00274Fr 2               ;                       Option2  KEY 8  - 2
00274Fr 2               ;                       Option3  KEY 9  - 3
00274Fr 2               ;                       Option4  KEY 10 - 4
00274Fr 2               ;--------------------------------------------------------
00274Fr 2               
00274Fr 2  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
002753r 2  62 10 37     
002756r 2  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
00275Ar 2               
00275Ar 2               ;----------------------------------------------------
00275Ar 2               ; Wait for keypress.
00275Ar 2               ;----------------------------------------------------
00275Ar 2               
00275Ar 2               prskey:
00275Ar 2  98           	tya
00275Br 2  48           	pha
00275Cr 2               prsloop:
00275Cr 2  20 rr rr     	jsr vsync
00275Fr 2  20 rr rr     	jsr READKEY
002762r 2  C0 FF        	cpy #255
002764r 2  F0 F6        	beq prsloop			; wait until key pressed
002766r 2               
002766r 2               prsrelease:
002766r 2  20 rr rr     	jsr vsync
002769r 2  20 rr rr     	jsr READKEY
00276Cr 2  C0 FF        	cpy #255
00276Er 2  D0 F6        	bne prsrelease			; wait until key pressed
002770r 2               
002770r 2  20 rr rr     	jsr joykey
002773r 2  68           	pla
002774r 2  A8           	tay
002775r 2  60           	rts
002776r 2               
002776r 2               bbcinit:
002776r 2               ;	sei
002776r 2               ;	lda EVENTV
002776r 2               ;	sta old_eventv
002776r 2               ;	lda EVENTV+1
002776r 2               ;	sta old_eventv+1
002776r 2               
002776r 2               ;	lda #<event_handler
002776r 2               ;	sta EVENTV
002776r 2               ;	lda #>event_handler
002776r 2               ;	sta EVENTV+1
002776r 2               ;	cli
002776r 2               
002776r 2               	; Enable VSYNC event.
002776r 2               ;	lda #14
002776r 2               ;	ldx #4
002776r 2               ;	jmp OSBYTE
002776r 2               
002776r 2  60           	rts
002777r 2               
002777r 2               bbckill:
002777r 2               ;	sei
002777r 2               ;	lda old_eventv
002777r 2               ;	sta EVENTV
002777r 2               ;	lda old_eventv+1
002777r 2               ;	sta EVENTV+1
002777r 2               ;	cli
002777r 2               
002777r 2               	; Disable VSYNC event.
002777r 2               ;	lda #13
002777r 2               ;	ldx #4
002777r 2               ;	jmp OSBYTE
002777r 2               
002777r 2  60           	rts
002778r 2               
002778r 2               old_eventv:
002778r 2  xx xx        	.res 2
00277Ar 2               
00277Ar 2               event_handler:
00277Ar 2  08           	php
00277Br 2  C9 04        	cmp #4
00277Dr 2  D0 02        	bne not_vsync
00277Fr 2               
00277Fr 2  E6 rr        	inc vsync_count
002781r 2               
002781r 2               not_vsync:
002781r 2  28           	plp
002782r 2  6C rr rr     	jmp (old_eventv)
002785r 2               
002785r 2               bbcsync:
002785r 2  A5 rr        	lda vsync_count
002787r 2  C9 02        	cmp #2
002789r 2  90 FA        	bcc bbcsync
00278Br 2  A9 00        	lda #0
00278Dr 2  85 rr        	sta vsync_count
00278Fr 2  60           	rts
002790r 2               
002790r 2               ;-------------------------------------------------------------
002790r 2               ; KTEST, scan key and return in carry if key pressed
002790r 2               ;
002790r 2               ; Keyboard test routine.
002790r 2               ;
002790r 2               ; Input:
002790r 2               ;  A = key to read, high nibble=row and low nibble=col
002790r 2               ;
002790r 2               ; Output:
002790r 2               ;  carry clr = key pressed
002790r 2               ;  carry set = key not pressed
002790r 2               ;--------------------------------------------------------
002790r 2               
002790r 2               ktest:
002790r 2  85 rr        	sta z80_a		; save key
002792r 2               
002792r 2  4A           	lsr a			; set row
002793r 2  4A           	lsr a
002794r 2  4A           	lsr a
002795r 2  4A           	lsr a
002796r 2  AA           	tax
002797r 2  BD rr rr     	lda colmask,x
00279Ar 2  8D 20 91     	sta KeyColAddr
00279Dr 2               
00279Dr 2  A5 rr        	lda z80_a
00279Fr 2  29 0F        	and #$0f
0027A1r 2  AA           	tax
0027A2r 2               
0027A2r 2  AD 21 91     	lda KeyRowAddr		; read column
0027A5r 2  3D rr rr     	and keymask,x		; check key pressed
0027A8r 2  F0 02        	beq pressed
0027AAr 2  38           	sec			; key not pressed
0027ABr 2  60           	rts
0027ACr 2               pressed:
0027ACr 2  18           	clc			; key pressed
0027ADr 2  60           	rts
0027AEr 2               
0027AEr 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
0027B2r 2  F7 FB FD FE  
0027B6r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
0027BAr 2  10 20 40 80  
0027BEr 2               
0027BEr 2               ;---------------------------------------------------------------
0027BEr 2               ; Getkey in column,row format
0027BEr 2               ;
0027BEr 2               ; Output:
0027BEr 2               ;  A = high nibble=row and low nibble=col key in matrix
0027BEr 2               ;---------------------------------------------------------------
0027BEr 2               kget:
0027BEr 2  86 rr        	stx xtmp		; Save x-reg
0027C0r 2               kget0:
0027C0r 2  A2 00        	ldx #0			; reset row
0027C2r 2               kget1:
0027C2r 2  BD rr rr     	lda colmask,x		; Get mask
0027C5r 2  8D 20 91     	sta KeyColAddr		; Set row
0027C8r 2  AD 21 91     	lda KeyRowAddr		; Read columns
0027CBr 2  85 rr        	sta tmp			; Save colums
0027CDr 2  C9 FF        	cmp #$ff		; Key pressed?
0027CFr 2  D0 08        	bne kget2		; Yes, skip
0027D1r 2  E8           	inx			; Next row
0027D2r 2  E0 08        	cpx #8			; All rows scanned?
0027D4r 2  D0 EC        	bne kget1		; No, repeat
0027D6r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
0027D9r 2               kget2:
0027D9r 2  A0 00        	ldy #0			; Reset column
0027DBr 2               kget3:
0027DBr 2  46 rr        	lsr tmp			; Test bit
0027DDr 2  90 04        	bcc kget4		; If clear, key pressed
0027DFr 2  C8           	iny			; Next column
0027E0r 2  4C rr rr     	jmp kget3		; Repeat
0027E3r 2               kget4:
0027E3r 2  86 rr        	stx tmp			; Get row
0027E5r 2  06 rr        	asl tmp			; Make high nibble
0027E7r 2  06 rr        	asl tmp
0027E9r 2  06 rr        	asl tmp
0027EBr 2  06 rr        	asl tmp
0027EDr 2  98           	tya			; Get column
0027EEr 2  18           	clc
0027EFr 2  65 rr        	adc tmp			; Add row as low nibble
0027F1r 2  85 rr        	sta tmp
0027F3r 2               kget5:
0027F3r 2  AD 21 91     	lda KeyRowAddr		; Read columns
0027F6r 2  C9 FF        	cmp #$ff
0027F8r 2  D0 F9        	bne kget5
0027FAr 2               
0027FAr 2  A5 rr        	lda tmp			; Return keycode
0027FCr 2  A6 rr        	ldx xtmp		; Restore X-reg
0027FEr 2  60           	rts			; Return
0027FFr 2               
0027FFr 2               ;-------------------------------------------------------------
0027FFr 2               ; JOY1SCAN, scan joystick1 and return key in z80_e
0027FFr 2               ;-------------------------------------------------------------
0027FFr 2               
0027FFr 2               joy1scan:
0027FFr 2  A9 FF        	lda #$ff
002801r 2  85 rr        	sta z80_e
002803r 2               
002803r 2  AD 11 91     	lda JoyAddr1
002806r 2  4A           	lsr a
002807r 2  4A           	lsr a
002808r 2               
002808r 2  4A           	lsr a
002809r 2  26 rr        	rol z80_e	; Up
00280Br 2  4A           	lsr a
00280Cr 2  26 rr        	rol z80_e	; Down
00280Er 2  4A           	lsr a
00280Fr 2  26 rr        	rol z80_e	; Left
002811r 2               
002811r 2  A9 7F        	lda #%01111111
002813r 2  8D 22 91     	sta DDRB	; Bit7 = input joystick b7
002816r 2  AD 20 91     	lda JoyAddr2
002819r 2  0A           	asl a
00281Ar 2  26 rr        	rol z80_e	; Right
00281Cr 2  A9 FF        	lda #%11111111
00281Er 2  8D 22 91     	sta DDRB	; Reset
002821r 2               
002821r 2  AD 11 91     	lda JoyAddr1
002824r 2  29 20        	and #%00100000
002826r 2  D0 06        	bne :+
002828r 2  A5 rr        	lda z80_e
00282Ar 2  29 EF        	and #%11101111	; Fire
00282Cr 2  85 rr        	sta z80_e
00282Er 2               :
00282Er 2  AD rr rr     	lda keys+6	; Fire3
002831r 2  20 rr rr     	jsr ktest
002834r 2  B0 06        	bcs :+
002836r 2  A5 rr        	lda z80_e
002838r 2  29 BF        	and #%10111111
00283Ar 2  85 rr        	sta z80_e
00283Cr 2               :
00283Cr 2  AD rr rr     	lda keys+5	; Fire2
00283Fr 2  20 rr rr     	jsr ktest
002842r 2  B0 06        	bcs :+
002844r 2  A5 rr        	lda z80_e
002846r 2  29 DF        	and #%11011111
002848r 2  85 rr        	sta z80_e
00284Ar 2               :
00284Ar 2               
00284Ar 2  60           	rts
00284Br 2               
00284Br 2               ;-------------------------------------------------------------
00284Br 2               ; JOY2SCAN, scan joystick2 and return key in z80_e
00284Br 2               ;-------------------------------------------------------------
00284Br 2               
00284Br 2               joy2scan:
00284Br 2  60           	rts
00284Cr 2               
00284Cr 2               joyinit:
00284Cr 2  60           	rts
00284Dr 2               
00284Dr 2               ;-------------------------------------------------------------
00284Dr 2               ; READKEY, Wait for keypress and then wait for release
00284Dr 2               ;-------------------------------------------------------------
00284Dr 2               
00284Dr 2               READKEY:
00284Dr 2  A9 FF        	lda #$ff
00284Fr 2  85 rr        	sta tmp
002851r 2  A2 07        	ldx #7
002853r 2               scanrow:
002853r 2  BD rr rr     	lda colmask,x
002856r 2  8D 20 91     	sta KeyColAddr
002859r 2  AD 21 91     	lda KeyRowAddr		; read column
00285Cr 2  25 rr        	and tmp
00285Er 2  85 rr        	sta tmp
002860r 2  CA           	dex
002861r 2  10 F0        	bpl scanrow
002863r 2  A5 rr        	lda tmp
002865r 2  A8           	tay
002866r 2  60           	rts
002867r 2               
002867r 2               ;----------------------------------------------------
002867r 2               ; Delay routine 1/50 sec
002867r 2               ;
002867r 2               ; Wait 1/60 sec = 16666 usec
002867r 2               ; Wait 208 x 16 =  3328 usec
002867r 2               ;                 19994 usec
002867r 2               ; rts           =     6 usec
002867r 2               ; Total         = 20000 usec
002867r 2               ;----------------------------------------------------
002867r 2               
002867r 2               delay:
002867r 2  85 rr        	sta xtmp
002869r 2               del_loop:
002869r 2  AD 04 90     	lda $9004
00286Cr 2  D0 FB        	bne del_loop			; wait for flyback (1/60 sec)
00286Er 2               
00286Er 2  A0 D0        	ldy #208			; wait 208 x 16 = 3328 usec
002870r 2               delay1:
002870r 2  61 80        	adc ($80,x)			;	 6 usec
002872r 2  61 80        	adc ($80,x)			;	 6 usec
002874r 2  88           	dey				;	 2 usec
002875r 2  D0 F9        	bne delay1			;	 2 usec
002877r 2  EA           	nop				; 2 usec
002878r 2  EA           	nop				; 2 usec
002879r 2               					; tot: 20000 usec
002879r 2  C6 rr        	dec xtmp
00287Br 2  D0 EC        	bne del_loop
00287Dr 2  60           	rts
00287Er 2               
00287Er 2               ;-------------------------------------------------------------
00287Er 2               ; VSYNC, synchronize to 25 frames/sec
00287Er 2               ;
00287Er 2               ;  - read joystick/keyboard
00287Er 2               ;  - handle sound
00287Er 2               ;  - sync framerate with timer 25Hz
00287Er 2               ;  - handle shrapnel every even frame
00287Er 2               ;-------------------------------------------------------------
00287Er 2               
00287Er 2               vsync:
00287Er 2  48           	pha
00287Fr 2  98           	tya
002880r 2  48           	pha
002881r 2  8A           	txa
002882r 2  48           	pha
002883r 2  20 rr rr     	jsr joykey		; read joystick/keyboard.
002886r 2               
002886r 2  A9 40        	lda #$40		; Set Timer1 expired bit
002888r 2               vsync1:
002888r 2  2C 1D 91     	bit IFR			; Check Interrupt Flag Register
00288Br 2  F0 FB        	beq vsync1
00288Dr 2  AD 14 91     	lda Timer1_Low		; Clear Timer interrupt
002890r 2               
002890r 2  A5 rr        	lda clock
002892r 2  29 01        	and #1
002894r 2  D0 03        	bne:+
002896r 2  20 rr rr     	jsr proshr		; handle shrapnel every even frame
002899r 2               :
002899r 2  AD rr rr     	lda sndtyp
00289Cr 2  F0 0D        	beq sndskip
00289Er 2               sndloop:
00289Er 2               ;	lda SpeakerBit		; handle sound
00289Er 2  AC rr rr     	ldy sndtyp
0028A1r 2               sndwait:
0028A1r 2  88           	dey
0028A2r 2  D0 FD        	bne sndwait
0028A4r 2  49 04        	eor #4
0028A6r 2               ;	sta SpeakerBit
0028A6r 2  CE rr rr     	dec sndtyp
0028A9r 2  D0 F3        	bne sndloop
0028ABr 2               sndskip:
0028ABr 2               
0028ABr 2  68           	pla
0028ACr 2  AA           	tax
0028ADr 2  68           	pla
0028AEr 2  A8           	tay
0028AFr 2  68           	pla
0028B0r 2  60           	rts
0028B1r 2               
0028B1r 2  00           sndtyp:		.byte 0
0028B2r 2               
0028B2r 2               ;----------------------------------------------------
0028B2r 2               ; Draw sprite
0028B2r 2               ;----------------------------------------------------
0028B2r 2               .if oflag
0028B2r 2               sprite:
0028B2r 2               	stx xtmp		; Save X-reg
0028B2r 2               	jsr scadd 		; get screen address in scraddr.
0028B2r 2               
0028B2r 2               	lda dispx 		; x position.
0028B2r 2               	and #7 			; position straddling cells.
0028B2r 2               	sta z80_b		; store in b register.
0028B2r 2               
0028B2r 2               	lda z80_l		; store sprite graphic address.
0028B2r 2               	sta sprit1+1
0028B2r 2               	sta sprit2+1
0028B2r 2               	lda z80_h
0028B2r 2               	sta sprit1+2
0028B2r 2               	sta sprit2+2
0028B2r 2               
0028B2r 2               	ldx #0			; pixel height.
0028B2r 2               	ldy #0
0028B2r 2               sprit1:
0028B2r 2               	lda objdta,x		; fetch first byte.
0028B2r 2               	sta spr
0028B2r 2               	inx
0028B2r 2               sprit2:
0028B2r 2               	lda objdta,x
0028B2r 2               	sta spr+1
0028B2r 2               
0028B2r 2               	lda #0
0028B2r 2               	sta spr+2
0028B2r 2               	jsr sprit7		; shift sprite
0028B2r 2               
0028B2r 2               	lda spr			; fetch graphic.
0028B2r 2               	ldy #0			; _BEEB
0028B2r 2               	eor (scraddr),y		; merge with screen image.
0028B2r 2               	sta (scraddr),y		; write to screen.
0028B2r 2               
0028B2r 2               	lda spr+1		; fetch graphic.
0028B2r 2               	ldy #16			; _BEEB
0028B2r 2               	eor (scraddr),y		; merge with screen image.
0028B2r 2               	sta (scraddr),y		; write to screen.
0028B2r 2               
0028B2r 2               	lda spr+2		; fetch graphic.
0028B2r 2               	ldy #32			; _BEEB
0028B2r 2               	eor (scraddr),y		; merge with screen image.
0028B2r 2               	sta (scraddr),y		; write to screen.
0028B2r 2               
0028B2r 2               	jsr nline
0028B2r 2               
0028B2r 2               	inx			; next source byte.
0028B2r 2               	cpx #32
0028B2r 2               	bne sprit1		; repeat
0028B2r 2               
0028B2r 2               	ldx xtmp		; retreive X-reg
0028B2r 2               	rts
0028B2r 2               
0028B2r 2               ;spr:	.byte 0,0,0
0028B2r 2               .endif
0028B2r 2               ;------------------------------------------------------------------
0028B2r 2               ; This routine returns a screen address for (dispx, dispy) in scraddr.
0028B2r 2               ;------------------------------------------------------------------
0028B2r 2               
0028B2r 2               scadd:
0028B2r 2  A5 rr        	lda dispx
0028B4r 2  29 F8        	and #$f8
0028B6r 2  85 rr        	sta scraddr
0028B8r 2  A9 00        	lda #0
0028BAr 2  85 rr        	sta scraddr+1
0028BCr 2  06 rr        	asl scraddr
0028BEr 2  26 rr        	rol scraddr+1
0028C0r 2               
0028C0r 2  A6 rr        	ldx dispy
0028C2r 2  18           	clc
0028C3r 2  A5 rr        	lda scraddr
0028C5r 2  7D 00 07     	adc SCADTB_lb,x
0028C8r 2  85 rr        	sta scraddr
0028CAr 2  A5 rr        	lda scraddr+1
0028CCr 2  7D 00 08     	adc SCADTB_hb,x
0028CFr 2  85 rr        	sta scraddr+1
0028D1r 2               
0028D1r 2               
0028D1r 2  60           	rts
0028D2r 2               
0028D2r 2               ;-----------------------------------------------------------------
0028D2r 2               ; These are the sprite routines.
0028D2r 2               ; sspria = single sprite, old (ix).
0028D2r 2               ; ssprib = single sprite, new (ix+5).
0028D2r 2               ; sspric = both sprites, old (ix) and new (ix+5).
0028D2r 2               ;-----------------------------------------------------------------
0028D2r 2               
0028D2r 2               sspria:
0028D2r 2  20 rr rr     	jsr gsprad		; get old sprite address.
0028D5r 2               sspri2:
0028D5r 2               .if rflag
0028D5r 2               	lda z80_e				; 3c
0028D5r 2               	sta dline_spraddr1+1	; 4c
0028D5r 2               	sta dline_spraddr2+1	; 4c
0028D5r 2               	lda z80_d				; 3c
0028D5r 2               	sta dline_spraddr1+2	; 4c
0028D5r 2               	sta dline_spraddr2+2	; 4c
0028D5r 2               
0028D5r 2               	ldx sprshft
0028D5r 2               	lda shift_table,x
0028D5r 2               	sta dline_shift1+1
0028D5r 2               	sta dline_shift2+1
0028D5r 2               	lda shift_table+1,x
0028D5r 2               	sta dline_shift1+2
0028D5r 2               	sta dline_shift2+2
0028D5r 2               
0028D5r 2               	ldx #0			; vertical lines.
0028D5r 2               sspri0:
0028D5r 2               	jsr dline		; draw a line.
0028D5r 2                 .if bflag
0028D5r 2               	cpx #48
0028D5r 2                 .else
0028D5r 2               	cpx #32
0028D5r 2                 .endif
0028D5r 2               	bne sspri0		; repeat 16 times x 2 bytes
0028D5r 2               	rts
0028D5r 2               .else
0028D5r 2                 .if bflag
0028D5r 2               	lda #24
0028D5r 2                 .else
0028D5r 2  A9 10        	lda #16			; vertical lines.
0028D7r 2                 .endif
0028D7r 2  8D rr rr     	sta acnt
0028DAr 2               sspri0:
0028DAr 2  20 rr rr     	jsr dline		; draw a line.
0028DDr 2  CE rr rr     	dec acnt
0028E0r 2  D0 F8        	bne sspri0		; repeat 16 times
0028E2r 2  60           	rts
0028E3r 2               
0028E3r 2  00           acnt:	.byte 0
0028E4r 2               .endif
0028E4r 2               
0028E4r 2               ;-----------------------------------------------------------------
0028E4r 2               
0028E4r 2               ssprib:
0028E4r 2  20 rr rr     	jsr gspran 		; get new sprite address.
0028E7r 2  4C rr rr     	jmp sspri2
0028EAr 2               
0028EAr 2               ;-----------------------------------------------------------------
0028EAr 2               
0028EAr 2               sspric:
0028EAr 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0028EAr 2               .if rflag
0028EAr 2               	jsr gsprad 		; get old sprite address.
0028EAr 2               
0028EAr 2               	lda z80_e				; 3c
0028EAr 2               	sta ddline_spraddr3+1	; 4c
0028EAr 2               	sta ddline_spraddr4+1	; 4c
0028EAr 2               
0028EAr 2               	lda z80_d				; 3c
0028EAr 2               	sta ddline_spraddr3+2	; 4c
0028EAr 2               	sta ddline_spraddr4+2	; 4c
0028EAr 2               
0028EAr 2               	ldx sprshft
0028EAr 2               	lda shift_table,x
0028EAr 2               	sta ddline_shift3+1
0028EAr 2               	sta ddline_shift4+1
0028EAr 2               	lda shift_table+1,x
0028EAr 2               	sta ddline_shift3+2
0028EAr 2               	sta ddline_shift4+2
0028EAr 2               
0028EAr 2               	jsr exx  		; store addresses.
0028EAr 2               	jsr gspran 		; get new sprite addresses.
0028EAr 2               
0028EAr 2               	lda z80_e				; 3c
0028EAr 2               	sta ddline_spraddr1+1	; 4c
0028EAr 2               	sta ddline_spraddr2+1	; 4c
0028EAr 2               
0028EAr 2               	lda z80_d				; 3c
0028EAr 2               	sta ddline_spraddr1+2	; 4c
0028EAr 2               	sta ddline_spraddr2+2	; 4c
0028EAr 2               
0028EAr 2               	ldx sprshft
0028EAr 2               	lda shift_table,x
0028EAr 2               	sta ddline_shift1+1
0028EAr 2               	sta ddline_shift2+1
0028EAr 2               	lda shift_table+1,x
0028EAr 2               	sta ddline_shift1+2
0028EAr 2               	sta ddline_shift2+2
0028EAr 2               
0028EAr 2               	ldx #0
0028EAr 2               lloop:
0028EAr 2               	jsr ddline 		; draw a line.
0028EAr 2                 .if bflag
0028EAr 2               	cpx #48
0028EAr 2                 .else
0028EAr 2               	cpx #32
0028EAr 2                 .endif
0028EAr 2               	bne lloop
0028EAr 2               	rts
0028EAr 2               
0028EAr 2               shift_table:
0028EAr 2               .word shift0
0028EAr 2               .word shift2
0028EAr 2               .word shift4
0028EAr 2               .word shift6
0028EAr 2               
0028EAr 2               ;-------------------------------------------------------------
0028EAr 2               ; Drop through.
0028EAr 2               ; Line drawn, now work out next target address.
0028EAr 2               ;
0028EAr 2               ; Input:
0028EAr 2               ;  B  = right mask
0028EAr 2               ;  C  = left mask
0028EAr 2               ;  DE = spriteaddress
0028EAr 2               ;  scraddr = screen address
0028EAr 2               ;-------------------------------------------------------------
0028EAr 2               
0028EAr 2               dline:
0028EAr 2               
0028EAr 2               ; first screen byte
0028EAr 2               
0028EAr 2               dline_spraddr1:
0028EAr 2               	ldy $ffff,x 		; graphic data.
0028EAr 2               dline_shift1:
0028EAr 2               	lda $ffff,y
0028EAr 2               	sta sprtmp
0028EAr 2               	and z80_c 		; mask away what's not needed.
0028EAr 2               
0028EAr 2               	ldy #0
0028EAr 2               	eor (scraddr),y 	; XOR with what's there.
0028EAr 2               	sta (scraddr),y 	; bung it in.
0028EAr 2               
0028EAr 2               ; carry to next screen byte
0028EAr 2               
0028EAr 2               	lda sprtmp		; fetch data.
0028EAr 2               	and z80_b 		; mask away unwanted
0028EAr 2               	sta sprtmp
0028EAr 2               
0028EAr 2               ; middle screen byte
0028EAr 2               
0028EAr 2               	inx
0028EAr 2               dline_spraddr2:
0028EAr 2               	ldy $ffff,x 		; second bit of data.
0028EAr 2               dline_shift2:
0028EAr 2               	lda $ffff,y
0028EAr 2               	sta sprtmp2
0028EAr 2               	and z80_c 		; mask away what's not needed.
0028EAr 2               	ora sprtmp
0028EAr 2               	ldy #16
0028EAr 2               	eor (scraddr),y 	; XOR with what's there.
0028EAr 2               	sta (scraddr),y 	; bung it in.
0028EAr 2               
0028EAr 2               ; carry to last screen byte
0028EAr 2               
0028EAr 2               	lda sprtmp2
0028EAr 2               	and z80_b 		; mask away unwanted
0028EAr 2               
0028EAr 2               	ldy #32
0028EAr 2               	eor (scraddr),y 	; XOR with what's there.
0028EAr 2               	sta (scraddr),y 	; bung it in.
0028EAr 2               
0028EAr 2               	inx
0028EAr 2               .else
0028EAr 2               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0028EAr 2  20 rr rr     	jsr gsprad 		; get old sprite address.
0028EDr 2  20 rr rr     	jsr exx  		; store addresses.
0028F0r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
0028F3r 2               
0028F3r 2               .if bflag
0028F3r 2               	lda #23
0028F3r 2               .else
0028F3r 2  A9 0F        	lda #15
0028F5r 2               .endif
0028F5r 2  85 rr        	sta ccnt
0028F7r 2               lloop:
0028F7r 2  20 rr rr     	jsr dline 		; draw a line.
0028FAr 2  20 rr rr     	jsr exx  		; restore old addresses.
0028FDr 2  20 rr rr     	jsr dline 		; delete a line.
002900r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
002903r 2  C6 rr        	dec ccnt
002905r 2  D0 F0        	bne lloop
002907r 2               
002907r 2  20 rr rr     	jsr dline		; draw a line.
00290Ar 2  20 rr rr     	jsr exx 		; restore old addresses.
00290Dr 2               
00290Dr 2               ;-------------------------------------------------------------
00290Dr 2               ; Drop through.
00290Dr 2               ; Line drawn, now work out next target address.
00290Dr 2               ;
00290Dr 2               ; Input:
00290Dr 2               ;  B  = right mask
00290Dr 2               ;  C  = left mask
00290Dr 2               ;  DE = spriteaddress
00290Dr 2               ;  scraddr = screen address
00290Dr 2               ;-------------------------------------------------------------
00290Dr 2               
00290Dr 2               dline:
00290Dr 2  A0 00        	ldy #0
00290Fr 2  B1 rr        	lda (z80_de),y 		; graphic data.
002911r 2  48           	pha
002912r 2  25 rr        	and z80_c 		; mask away what's not needed.
002914r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002916r 2  91 rr        	sta (scraddr),y 	; left byte on screen.
002918r 2               
002918r 2  68           	pla
002919r 2  25 rr        	and z80_b 		; mask away unwanted bits.
00291Br 2  A0 20        	ldy #32
00291Dr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00291Fr 2  91 rr        	sta (scraddr),y 	; right byte on screen
002921r 2               
002921r 2  E6 rr        	inc z80_e 		; next graphic.
002923r 2  D0 02        	bne :+
002925r 2  E6 rr        	inc z80_d
002927r 2               :
002927r 2               ; _BEEB screen arrangement
002927r 2               ;	sec
002927r 2               ;	lda scraddr 		; one character cell to the left.
002927r 2               ;	sbc #8
002927r 2               ;	sta scraddr
002927r 2               ;	lda scraddr+1
002927r 2               ;	sbc #0
002927r 2               ;	sta scraddr+1
002927r 2               
002927r 2  A0 00        	ldy #0
002929r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
00292Br 2  A0 10        	ldy #16
00292Dr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00292Fr 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
002931r 2               
002931r 2  E6 rr        	inc z80_e 		; point to next line of data.
002933r 2  D0 02        	bne :+
002935r 2  E6 rr        	inc z80_d
002937r 2               :
002937r 2               ; _BEEB screen arrangement
002937r 2               ;	sec
002937r 2               ;	lda scraddr 		; another char left.
002937r 2               ;	sbc #8
002937r 2               ;	sta scraddr
002937r 2               ;	lda scraddr+1
002937r 2               ;	sbc #0
002937r 2               ;	sta scraddr+1
002937r 2               .endif
002937r 2               
002937r 2               ;----------------------------------------------------------------------
002937r 2               ; Line drawn, now work out next target address.
002937r 2               ;----------------------------------------------------------------------
002937r 2               
002937r 2               ; _BEEB screen arrangement
002937r 2               
002937r 2               nline:
002937r 2  A5 rr        	lda scraddr 			; get low byte of address.
002939r 2  29 0F        	and #15
00293Br 2  C9 0F        	cmp #15				; is this last line of row?
00293Dr 2  F0 03        	beq beeb_next_row
00293Fr 2               
00293Fr 2               	; within same row
00293Fr 2  E6 rr        	inc scraddr			; new low byte of address.
002941r 2  60           	rts
002942r 2               
002942r 2               beeb_next_row:
002942r 2  18           	clc
002943r 2  A5 rr        	lda scraddr
002945r 2  69 51        	adc #<(ScreenRowBytes-15)
002947r 2  85 rr        	sta scraddr			; new low byte of address.
002949r 2  A5 rr        	lda scraddr+1
00294Br 2  69 01        	adc #>(ScreenRowBytes-15)
00294Dr 2  85 rr        	sta scraddr+1			; new high byte of address.
00294Fr 2  60           	rts
002950r 2               
002950r 2               .if rflag
002950r 2               ;-------------------------------------------------------------
002950r 2               ; Drop through.
002950r 2               ; Line drawn, now work out next target address.
002950r 2               ;
002950r 2               ; Input:
002950r 2               ;  B  = right mask
002950r 2               ;  C  = left mask
002950r 2               ;  DE = spriteaddress
002950r 2               ;  scraddr = screen address
002950r 2               ;-------------------------------------------------------------
002950r 2               
002950r 2               ddline:
002950r 2               
002950r 2               ; NEW SPRITE
002950r 2               
002950r 2               ; first screen byte
002950r 2               
002950r 2               ddline_spraddr1:
002950r 2               	ldy $ffff,x 		; graphic data.
002950r 2               ddline_shift1:
002950r 2               	lda $ffff,y
002950r 2               	sta sprtmp
002950r 2               	and z80_c 			; mask away what's not needed.
002950r 2               
002950r 2               	ldy #0
002950r 2               	eor (scraddr),y 	; XOR with what's there.
002950r 2               	sta (scraddr),y 	; bung it in.
002950r 2               
002950r 2               ; carry to next screen byte
002950r 2               
002950r 2               	lda sprtmp			; fetch data.
002950r 2               	and z80_b 			; mask away unwanted
002950r 2               	sta sprtmp
002950r 2               
002950r 2               ; middle screen byte
002950r 2               
002950r 2               	inx
002950r 2               ddline_spraddr2:
002950r 2               	ldy $ffff,x 		; second bit of data.
002950r 2               ddline_shift2:
002950r 2               	lda $ffff,y
002950r 2               	sta sprtmp2
002950r 2               	and z80_c 			; mask away what's not needed.
002950r 2               	ora sprtmp
002950r 2               
002950r 2               	ldy #16
002950r 2               	eor (scraddr),y 	; XOR with what's there.
002950r 2               	sta (scraddr),y 	; bung it in.
002950r 2               
002950r 2               ; carry to last screen byte
002950r 2               
002950r 2               	lda sprtmp2
002950r 2               	and z80_b 			; mask away unwanted
002950r 2               
002950r 2               	ldy #32
002950r 2               	eor (scraddr),y 	; XOR with what's there.
002950r 2               	sta (scraddr),y 	; bung it in.
002950r 2               
002950r 2               ; _BEEB next row
002950r 2               
002950r 2               	lda scraddr 		; get low byte of address.
002950r 2               	and #15
002950r 2               	cmp #15				; is this last line of row?
002950r 2               	beq :+
002950r 2               
002950r 2               	; within same row can't increment page
002950r 2               	inc scraddr			; new low byte of address.
002950r 2               	bne ddline2
002950r 2               
002950r 2               :
002950r 2               	clc
002950r 2               	lda scraddr
002950r 2               	adc #<(ScreenRowBytes-15)
002950r 2               	sta scraddr			; new low byte of address.
002950r 2               	lda scraddr+1
002950r 2               	adc #>(ScreenRowBytes-15)
002950r 2               	sta scraddr+1		; new high byte of address.
002950r 2               
002950r 2               ; OLD SPRITE
002950r 2               
002950r 2               ddline2:
002950r 2               
002950r 2               ; still first row but different data!
002950r 2               
002950r 2               	dex
002950r 2               
002950r 2               ; first screen byte
002950r 2               
002950r 2               ddline_spraddr3:
002950r 2               	ldy $ffff,x			; graphic data.
002950r 2               ddline_shift3:
002950r 2               	lda $ffff,y
002950r 2               	sta sprtmp
002950r 2               	and z80_cp 			; mask away what's not needed.
002950r 2               
002950r 2               	ldy #0
002950r 2               	eor (z80_hlp),y 	; XOR with what's there.
002950r 2               	sta (z80_hlp),y 	; bung it in.
002950r 2               
002950r 2               ; carry to next screen byte
002950r 2               
002950r 2               	lda sprtmp			; fetch data.
002950r 2               	and z80_bp 			; mask away unwanted
002950r 2               	sta sprtmp
002950r 2               
002950r 2               ; middle screen byte
002950r 2               
002950r 2               	inx
002950r 2               ddline_spraddr4:
002950r 2               	ldy $ffff,x 		; second bit of data.
002950r 2               ddline_shift4:
002950r 2               	lda $ffff,y
002950r 2               	sta sprtmp2
002950r 2               	and z80_cp 			; mask away what's not needed.
002950r 2               	ora sprtmp
002950r 2               
002950r 2               	ldy #16
002950r 2               	eor (z80_hlp),y 	; XOR with what's there.
002950r 2               	sta (z80_hlp),y 	; bung it in.
002950r 2               
002950r 2               ; last screen byte
002950r 2               
002950r 2               	lda sprtmp2			; fetch data.
002950r 2               	and z80_bp 			; mask away unwanted
002950r 2               
002950r 2               	ldy #32
002950r 2               	eor (z80_hlp),y 	; XOR with what's there.
002950r 2               	sta (z80_hlp),y 	; bung it in.
002950r 2               
002950r 2               ; next row of sprite data
002950r 2               
002950r 2               	inx
002950r 2               
002950r 2               ; _BEEB screen arrangement
002950r 2               
002950r 2               	lda z80_lp 			; get low byte of address.
002950r 2               	and #15
002950r 2               	cmp #15				; is this last line of row?
002950r 2               	beq :+
002950r 2               
002950r 2               	; within same row can't increment page
002950r 2               	inc z80_lp			; new low byte of address.
002950r 2               	rts
002950r 2               
002950r 2               :
002950r 2               	clc
002950r 2               	lda z80_lp
002950r 2               	adc #<(ScreenRowBytes-15)
002950r 2               	sta z80_lp			; new low byte of address.
002950r 2               	lda z80_lp+1
002950r 2               	adc #>(ScreenRowBytes-15)
002950r 2               	sta z80_lp+1		; new high byte of address.
002950r 2               	rts
002950r 2               .endif
002950r 2               
002950r 2               ;----------------------------------------------------
002950r 2               ; Display character in A at dispx,dispy.
002950r 2               ;
002950r 2               ; Input:
002950r 2               ;  A 	   = character to print
002950r 2               ;----------------------------------------------------
002950r 2               
002950r 2               pchar:
002950r 2  85 rr        	sta fntaddr
002952r 2  A9 00        	lda #0
002954r 2  85 rr        	sta fntaddr+1
002956r 2  06 rr        	asl fntaddr  		; multiply char by 8.
002958r 2  26 rr        	rol fntaddr+1
00295Ar 2  06 rr        	asl fntaddr
00295Cr 2  26 rr        	rol fntaddr+1
00295Er 2  06 rr        	asl fntaddr
002960r 2  26 rr        	rol fntaddr+1
002962r 2               
002962r 2  A5 rr        	lda fntaddr
002964r 2  18           	clc
002965r 2  69 rr        	adc #<(FONT-256)
002967r 2  85 rr        	sta fntaddr		; that's the low byte.
002969r 2  A5 rr        	lda fntaddr+1
00296Br 2  69 rr        	adc #>(FONT-256)
00296Dr 2  85 rr        	sta fntaddr+1		; add displacement.
00296Fr 2               pchark:
00296Fr 2  20 rr rr     	jsr gprad		; get screen address.
002972r 2  A2 07        	ldx #7			; lines to write.
002974r 2               pchar0:
002974r 2  A0 00        	ldy #0
002976r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
002978r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
00297Br 2               .if iflag
00297Br 2               	eor #TxtInvert		; Invert
00297Br 2               .endif
00297Br 2  91 rr        	sta (scraddr),y 	; copy to screen.
00297Dr 2  E6 rr        	inc fntaddr		; next image byte.
00297Fr 2  D0 02        	bne :+
002981r 2  E6 rr        	inc fntaddr+1
002983r 2               :
002983r 2  CA           	dex			; next screen row down.
002984r 2  10 EE        	bpl pchar0		; repeat.
002986r 2  60           	rts
002987r 2               
002987r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
00298Br 2  03 02 01 00  
00298Fr 2               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
00298Fr 2               
00298Fr 2               .if rflag
00298Fr 2               ;----------------------------------------------------
00298Fr 2               ; Shift tables
00298Fr 2               ;----------------------------------------------------
00298Fr 2               
00298Fr 2               .align 256
00298Fr 2               shift0:
00298Fr 2               .repeat 256, i
00298Fr 2               	.byte i
00298Fr 2               .endrep
00298Fr 2               
00298Fr 2               shift2:
00298Fr 2               .repeat 256, i
00298Fr 2               	.byte (i >> 2) | (i << 6) & $c0
00298Fr 2               .endrep
00298Fr 2               
00298Fr 2               shift4:
00298Fr 2               .repeat 256, i
00298Fr 2               	.byte (i >> 4) | ((i << 4) & $f0)
00298Fr 2               .endrep
00298Fr 2               
00298Fr 2               shift6:
00298Fr 2               .repeat 256, i
00298Fr 2               	.byte (i >> 6) | ((i << 2) & $fc)
00298Fr 2               .endrep
00298Fr 2               .endif
00298Fr 2               
00298Fr 1               	.include "z80.asm"
00298Fr 2               ;------------------------------------------------------
00298Fr 2               ; z80.asm
00298Fr 2               ; spectrum stuff
00298Fr 2               ; adresses
00298Fr 2               
00298Fr 2               ;ws	 = $60
00298Fr 2               
00298Fr 2               ;z80_f	 = ws+$00
00298Fr 2               ;z80_a	 = ws+$01
00298Fr 2               ;z80_af	 = z80_f
00298Fr 2               
00298Fr 2               ;z80_c	 = ws+$02
00298Fr 2               ;z80_b	 = ws+$03
00298Fr 2               ;z80_bc	 = z80_c
00298Fr 2               
00298Fr 2               ;z80_e	 = ws+$04
00298Fr 2               ;z80_d	 = ws+$05
00298Fr 2               ;z80_de	 = z80_e
00298Fr 2               
00298Fr 2               ;z80_l	 = ws+$06
00298Fr 2               ;z80_h	 = ws+$07
00298Fr 2               ;z80_hl	 = z80_l
00298Fr 2               
00298Fr 2               ;z80_x    = ws+$08
00298Fr 2               ;z80_i    = ws+$09
00298Fr 2               ;z80_ix	 = z80_x
00298Fr 2               
00298Fr 2               ;z80_iy	 = ws+$0a
00298Fr 2               
00298Fr 2               ;z80_fp	 = ws+$0c
00298Fr 2               ;z80_ap	 = ws+$0d
00298Fr 2               
00298Fr 2               ;z80_cp	 = ws+$0e
00298Fr 2               ;z80_bp	 = ws+$0f
00298Fr 2               ;z80_bcp = z80_cp
00298Fr 2               
00298Fr 2               ;z80_ep	 = ws+$10
00298Fr 2               ;z80_dp	 = ws+$11
00298Fr 2               ;z80_dep = z80_ep
00298Fr 2               
00298Fr 2               ;z80_lp	 = ws+$12
00298Fr 2               ;z80_hp	 = ws+$13
00298Fr 2               ;z80_hlp = z80_lp
00298Fr 2               
00298Fr 2               ;z80_sp   = ws+$14
00298Fr 2               
00298Fr 2               ;z80_reg0 = ws+$16
00298Fr 2               ;z80_reg1 = ws+$17
00298Fr 2               ;z80_reg2 = ws+$18
00298Fr 2               ;z80_reg3 = ws+$19
00298Fr 2               
00298Fr 2               ;z80_r	 = ws+$1a
00298Fr 2               
00298Fr 2               ; Contains seperatly 1 bit set
00298Fr 2               ; _BEEB this is not safe memory to use as required by MOS
00298Fr 2               
00298Fr 2               _bitmem0	= $f8
00298Fr 2               _bitmem1	= $f9
00298Fr 2               _bitmem2	= $fa
00298Fr 2               _bitmem3	= $fb
00298Fr 2               _bitmem4	= $fc
00298Fr 2               _bitmem5	= $fd
00298Fr 2               _bitmem6	= $fe
00298Fr 2               _bitmem7	= $ff
00298Fr 2               
00298Fr 2               ; constants
00298Fr 2               _bitvalue0	= $01
00298Fr 2               _bitvalue1	= $02
00298Fr 2               _bitvalue2	= $04
00298Fr 2               _bitvalue3	= $08
00298Fr 2               _bitvalue4	= $10
00298Fr 2               _bitvalue5	= $20
00298Fr 2               _bitvalue6	= $40
00298Fr 2               _bitvalue7	= $80
00298Fr 2               
00298Fr 2               _notbitvalue0	= $fe
00298Fr 2               _notbitvalue1	= $fd
00298Fr 2               _notbitvalue2	= $fb
00298Fr 2               _notbitvalue3	= $f7
00298Fr 2               _notbitvalue4	= $ef
00298Fr 2               _notbitvalue5	= $df
00298Fr 2               _notbitvalue6	= $bf
00298Fr 2               _notbitvalue7	= $7f
00298Fr 2               
00298Fr 2               
00298Fr 2               ;add_hl_bc:
00298Fr 2               ;		lda z80_l
00298Fr 2               ;		clc
00298Fr 2               ;		adc z80_c
00298Fr 2               ;		sta z80_l
00298Fr 2               ;		lda z80_h
00298Fr 2               ;		adc z80_b
00298Fr 2               ;		sta z80_h
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;add_ix_de:
00298Fr 2               ;		lda z80_ix
00298Fr 2               ;		clc
00298Fr 2               ;		adc z80_e
00298Fr 2               ;		sta z80_ix
00298Fr 2               ;		lda z80_ix+1
00298Fr 2               ;		adc z80_d
00298Fr 2               ;		sta z80_ix+1
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;add_iy_de:
00298Fr 2               ;		lda z80_iy
00298Fr 2               ;		clc
00298Fr 2               ;		adc z80_e
00298Fr 2               ;		sta z80_iy
00298Fr 2               ;		lda z80_iy+1
00298Fr 2               ;		adc z80_d
00298Fr 2               ;		sta z80_iy+1
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;add_hl_de:
00298Fr 2               ;		lda z80_l
00298Fr 2               ;		clc
00298Fr 2               ;		adc z80_e
00298Fr 2               ;		sta z80_l
00298Fr 2               ;		lda z80_h
00298Fr 2               ;		adc z80_d
00298Fr 2               ;		sta z80_h
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;add_ix_bc:
00298Fr 2               ;		lda z80_ix
00298Fr 2               ;		clc
00298Fr 2               ;		adc z80_c
00298Fr 2               ;		sta z80_ix
00298Fr 2               ;		lda z80_ix+1
00298Fr 2               ;		adc z80_b
00298Fr 2               ;		sta z80_ix+1
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;add_iy_bc:
00298Fr 2               ;		lda z80_iy
00298Fr 2               ;		clc
00298Fr 2               ;		adc z80_c
00298Fr 2               ;		sta z80_iy
00298Fr 2               ;		lda z80_iy+1
00298Fr 2               ;		adc z80_b
00298Fr 2               ;		sta z80_iy+1
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;sbc_hl_de:
00298Fr 2               ;		lda z80_l
00298Fr 2               ;		sbc z80_e
00298Fr 2               ;		sta z80_l
00298Fr 2               ;		lda z80_h
00298Fr 2               ;		sbc z80_d
00298Fr 2               ;		sta z80_h
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;sbc_hl_bc:
00298Fr 2               ;		lda z80_l
00298Fr 2               ;		sbc z80_c
00298Fr 2               ;		sta z80_l
00298Fr 2               ;		lda z80_h
00298Fr 2               ;		sbc z80_b
00298Fr 2               ;		sta z80_h
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;cmp_hl_bc:
00298Fr 2               ;		lda z80_l
00298Fr 2               ;		cmp z80_c
00298Fr 2               ;		bne cmp_hl_bc_end
00298Fr 2               ;		lda z80_h
00298Fr 2               ;		cmp z80_b
00298Fr 2               ;cmp_hl_bc_end:
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;cmp_iy_ix:
00298Fr 2               ;		lda z80_iy
00298Fr 2               ;		cmp z80_ix
00298Fr 2               ;		bne cmp_iy_ix_end
00298Fr 2               ;		lda z80_iy+1
00298Fr 2               ;		cmp z80_ix+1
00298Fr 2               ;cmp_iy_ix_end:
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;dec_hl:
00298Fr 2               ;		lda z80_l
00298Fr 2               ;		bne dec_hl_no_dec_h
00298Fr 2               ;		dec z80_h
00298Fr 2               ;dec_hl_no_dec_h:
00298Fr 2               ;		dec z80_l
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;dec_ix:
00298Fr 2               ;		lda z80_ix
00298Fr 2               ;		bne dec_ix_no_dec_h
00298Fr 2               ;		dec z80_ix+1
00298Fr 2               ;dec_ix_no_dec_h:
00298Fr 2               ;		dec z80_ix
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;dec_bc:
00298Fr 2               ;		lda z80_c
00298Fr 2               ;		bne dec_bc_no_dec_b
00298Fr 2               ;		dec z80_b
00298Fr 2               ;dec_bc_no_dec_b:
00298Fr 2               ;		dec z80_c
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;dec_de:
00298Fr 2               ;		lda z80_e
00298Fr 2               ;		bne dec_de_no_dec_d
00298Fr 2               ;		dec z80_d
00298Fr 2               ;dec_de_no_dec_d:
00298Fr 2               ;		dec z80_e
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               ;ex_af_afs:
00298Fr 2               ;	rts
00298Fr 2               ;ex_de_hl:
00298Fr 2               ;		lda z80_e
00298Fr 2               ;		ldx z80_l
00298Fr 2               ;		stx z80_e
00298Fr 2               ;		sta z80_l
00298Fr 2               ;		lda z80_d
00298Fr 2               ;		ldx z80_h
00298Fr 2               ;		stx z80_d
00298Fr 2               ;		sta z80_h
00298Fr 2               ;		rts
00298Fr 2               ;
00298Fr 2               exx:
00298Fr 2  A5 rr        		lda z80_c
002991r 2  A4 rr        		ldy z80_cp
002993r 2  84 rr        		sty z80_c
002995r 2  85 rr        		sta z80_cp
002997r 2  A5 rr        		lda z80_b
002999r 2  A4 rr        		ldy z80_bp
00299Br 2  84 rr        		sty z80_b
00299Dr 2  85 rr        		sta z80_bp
00299Fr 2  A5 rr        		lda z80_e
0029A1r 2  A4 rr        		ldy z80_ep
0029A3r 2  84 rr        		sty z80_e
0029A5r 2  85 rr        		sta z80_ep
0029A7r 2  A5 rr        		lda z80_d
0029A9r 2  A4 rr        		ldy z80_dp
0029ABr 2  84 rr        		sty z80_d
0029ADr 2  85 rr        		sta z80_dp
0029AFr 2  A5 rr        		lda scraddr
0029B1r 2  A4 rr        		ldy z80_lp
0029B3r 2  84 rr        		sty scraddr
0029B5r 2  85 rr        		sta z80_lp
0029B7r 2  A5 rr        		lda scraddr+1
0029B9r 2  A4 rr        		ldy z80_hp
0029BBr 2  84 rr        		sty scraddr+1
0029BDr 2  85 rr        		sta z80_hp
0029BFr 2  60           		rts
0029C0r 2               
0029C0r 2               ;ex_sp_hl:
0029C0r 2               ;		tsx
0029C0r 2               ;		lda $0103,x
0029C0r 2               ;		ldy z80_h
0029C0r 2               ;		sta z80_h
0029C0r 2               ;		tya
0029C0r 2               ;		sta $0103,x
0029C0r 2               ;		lda $0104,x
0029C0r 2               ;		ldy z80_l
0029C0r 2               ;		sta z80_l
0029C0r 2               ;		tya
0029C0r 2               ;		sta $104,x
0029C0r 2               ;		rts
0029C0r 2               ;
0029C0r 2               ;ldi:
0029C0r 2               ;	rts
0029C0r 2               ;ldir:
0029C0r 2               ;		ldy #$00
0029C0r 2               ;		ldx z80_b
0029C0r 2               ;		beq ldir_last_page
0029C0r 2               ;ldir_loop:
0029C0r 2               ;		lda (z80_hl),y
0029C0r 2               ;		sta (z80_de),y
0029C0r 2               ;		iny
0029C0r 2               ;		bne ldir_loop
0029C0r 2               ;		inc z80_h
0029C0r 2               ;		inc z80_d
0029C0r 2               ;		dex
0029C0r 2               ;		bne ldir_loop
0029C0r 2               ;ldir_last_page:
0029C0r 2               ;		lda z80_c
0029C0r 2               ;		beq ldir_end
0029C0r 2               ;ldir_last_page_loop:
0029C0r 2               ;		lda (z80_hl),y
0029C0r 2               ;		sta (z80_de),y
0029C0r 2               ;		iny
0029C0r 2               ;		cpy z80_c
0029C0r 2               ;		bne ldir_last_page_loop
0029C0r 2               ;ldir_end:
0029C0r 2               ;		stx z80_c
0029C0r 2               ;		stx z80_b
0029C0r 2               ;		tya
0029C0r 2               ;		clc
0029C0r 2               ;		adc z80_l
0029C0r 2               ;		sta z80_l
0029C0r 2               ;		bcc *+4
0029C0r 2               ;		inc z80_h
0029C0r 2               ;		tya
0029C0r 2               ;		clc
0029C0r 2               ;		adc z80_e
0029C0r 2               ;		sta z80_e
0029C0r 2               ;		bcc *+4
0029C0r 2               ;		inc z80_d
0029C0r 2               ;		rts
0029C0r 2               ;
0029C0r 2               ;lddr:		ldy #$00
0029C0r 2               ;lddr_loop:
0029C0r 2               ;		lda (z80_hl),y
0029C0r 2               ;		sta (z80_de),y
0029C0r 2               ;		jsr dec_hl
0029C0r 2               ;		jsr dec_de
0029C0r 2               ;		jsr dec_bc
0029C0r 2               ;		lda z80_b
0029C0r 2               ;		ora z80_c
0029C0r 2               ;		bne lddr_loop
0029C0r 2               ;		rts
0029C0r 2               ;ei:
0029C0r 2               ;		rts
0029C0r 2               ;di:
0029C0r 2               ;		rts
0029C0r 2               
0029C0r 2               ;-------------------------------------------------------------
0029C0r 2               ; Set bits in bitmem
0029C0r 2               ;-------------------------------------------------------------
0029C0r 2               
0029C0r 2               .if 0
0029C0r 2               z80_init:
0029C0r 2               	ldx #$00
0029C0r 2               	lda #$01
0029C0r 2               z80_init_loop:
0029C0r 2               	sta _bitmem0,x
0029C0r 2               	inx
0029C0r 2               	asl a
0029C0r 2               	bne z80_init_loop
0029C0r 2               	rts
0029C0r 2               .endif
0029C0r 2               
0029C0r 2               push_af:
0029C0r 2               push_bc:
0029C0r 2               push_de:
0029C0r 2               push_hl:
0029C0r 2               
0029C0r 2               pop_af:
0029C0r 2               pop_bc:
0029C0r 2               pop_de:
0029C0r 2               pop_ix:
0029C0r 2               pop_hl:
0029C0r 2               
0029C0r 2               add_hl_hl:
0029C0r 2               
0029C0r 2               inc_bc:
0029C0r 2               inc_de:
0029C0r 2               inc_hl:
0029C0r 2               inc_ix:
0029C0r 2               inc_sp:
0029C0r 2               
0029C0r 2               cpir:
0029C0r 2               
0029C0r 2               ex_af_af:
0029C0r 2               ;	rts
0029C0r 2               
0029C0r 1               eind_asm:
0029C0r 1               eop:					; End Of Program
0029C0r 1               
0029C0r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(35840-eind_asm + main))
0029C0r 1               
