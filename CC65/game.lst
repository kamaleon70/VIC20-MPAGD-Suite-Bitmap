ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:		.res 1
00002Br 2  xx           loopb:		.res 1
00002Cr 2  xx           loopc:		.res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      ; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      ; not a ptr
000051r 2  xx           tmproom:	.res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000057r 2  xx           vsync_count:.res 1
000058r 2  xx           colpatt:	.res 1
000059r 2  xx           sprtmp:     .res 1
00005Ar 2  xx           sprtmp2:    .res 1
00005Br 2  xx           sprshft:    .res 1
00005Cr 2               
00005Cr 2  xx           spriteink:  .res 1
00005Dr 2  xx           colour_byte:.res 1
00005Er 2  xx           colour_xor: .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:	.res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:	.res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 1               	.include "z80-zp.inc"
000061r 2               ;ws	 = $60
000061r 2               
000061r 2  xx           z80_f: .res 1;	 = ws+$00
000062r 2  xx           z80_a: .res 1;	 = ws+$01
000063r 2               z80_af	 = z80_f
000063r 2               
000063r 2  xx           z80_c: .res 1;	 = ws+$02
000064r 2  xx           z80_b: .res 1;	 = ws+$03
000065r 2               z80_bc	 = z80_c
000065r 2               
000065r 2  xx           z80_e: .res 1;	 = ws+$04
000066r 2  xx           z80_d: .res 1;	 = ws+$05
000067r 2               z80_de	 = z80_e
000067r 2               
000067r 2  xx           z80_l: .res 1;	 = ws+$06
000068r 2  xx           z80_h: .res 1;	 = ws+$07
000069r 2               z80_hl	 = z80_l
000069r 2               
000069r 2  xx           z80_x: .res 1;    = ws+$08
00006Ar 2  xx           z80_i: .res 1;    = ws+$09
00006Br 2               z80_ix	 = z80_x
00006Br 2               
00006Br 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Dr 2               
00006Dr 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Er 2  xx           z80_ap: .res 1;	 = ws+$0d
00006Fr 2               
00006Fr 2  xx           z80_cp: .res 1;	 = ws+$0e
000070r 2  xx           z80_bp: .res 1;	 = ws+$0f
000071r 2               z80_bcp	 = z80_cp
000071r 2               
000071r 2  xx           z80_ep: .res 1;	 = ws+$10
000072r 2  xx           z80_dp: .res 1;	 = ws+$11
000073r 2               z80_dep	 = z80_ep
000073r 2               
000073r 2  xx           z80_lp: .res 1;	 = ws+$12
000074r 2  xx           z80_hp: .res 1;	 = ws+$13
000075r 2               z80_hlp	 = z80_lp
000075r 2               
000075r 2  xx xx        z80_sp: .res 2;   = ws+$14
000077r 2               
000077r 2  xx           z80_reg0: .res 1; = ws+$16
000078r 2  xx           z80_reg1: .res 1; = ws+$17
000079r 2  xx           z80_reg2: .res 1; = ws+$18
00007Ar 2  xx           z80_reg3: .res 1; = ws+$19
00007Br 2               
00007Br 2               ;z80_r: .res 1;	 = ws+$1a
00007Br 2               
00007Br 1               
00007Br 1               ;----------------------------------------------
00007Br 1               ; BASIC header
00007Br 1               ;----------------------------------------------
00007Br 1               
00007Br 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "mozart1.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving sprites enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metablocks 16x6"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 43450	; = 40000 * 1,108/1,02
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 25000
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3  20 rr rr     	jsr game	 		; start the game.
000003r 3  60           	rts
000004r 3               
000004r 3               ; Don't change the order of these four.
000004r 3               ; Menu routine relies on winlft following wintop.
000004r 3               
000004r 3  00           wintop:	.byte WINDOWTOP		; top of window.
000005r 3  00           winlft:	.byte WINDOWLFT		; left edge.
000006r 3  15           winhgt:	.byte WINDOWHGT		; window height.
000007r 3  16           winwid:	.byte WINDOWWID		; window width.
000008r 3  0C           numob:	.byte NUMOBJ		; number of objects in game.
000009r 3               
000009r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000009r 3               
000009r 3  00           wntopx:	.byte (8 * WINDOWTOP)
00000Ar 3  00           wnlftx:	.byte (8 * WINDOWLFT)
00000Br 3  98           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00000Cr 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00000Dr 3               
00000Dr 3               ; Make sure pointers are arranged in the same order as the data itself.
00000Dr 3               
00000Dr 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
00000Fr 3               
00000Fr 3               ; Assorted game routines which can go in contended memory.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for inventory.
00000Fr 3               ; called by the INV command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with objects seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of INV menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               .if mflag
00000Fr 3               minve:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	asl a
00000Fr 3               	sta winhgt
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	asl a
00000Fr 3               	sta winwid
00000Fr 3               .endif
00000Fr 3               	lda #<(invdis)		; routine address.
00000Fr 3               	sta mod0+1		; set up menu routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(invdis)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               	lda #<(fopt)		; find option from available objects.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fopt)
00000Fr 3               	sta mod1+1+1
00000Fr 3               	jmp dbox		; do menu routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for menu.
00000Fr 3               ; called by the MENU command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with menu items seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of MENU menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               mmenu:
00000Fr 3               	lda #<(always)		; routine address.
00000Fr 3               	sta mod0+1		; set up routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(always)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               
00000Fr 3               	lda #<(fstd)		; standard option selection.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fstd)
00000Fr 3               	sta mod1+2
00000Fr 3               
00000Fr 3               ; Drop through into box routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Work out size of box for message or menu.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox:
00000Fr 3               	lda #<msgdat		; pointer to messages.
00000Fr 3               	sta z80_l
00000Fr 3               	lda #>msgdat
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	jsr getwrd		; get message number.
00000Fr 3               
00000Fr 3               	lda z80_h		; store pointer to message.
00000Fr 3               	sta TmpAddr
00000Fr 3               	lda z80_l
00000Fr 3               	sta TmpAddr+1
00000Fr 3               
00000Fr 3               	lda #1			; height.
00000Fr 3               	sta z80_d
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               	sta z80_e		; maximum width.
00000Fr 3               dbox5:
00000Fr 3               	lda #0			; this line"s width.
00000Fr 3               	sta z80_b
00000Fr 3               mod2:
00000Fr 3               	jsr always		; item in player"s possession?
00000Fr 3               	cmp #255
00000Fr 3               	bne dbox6		; not in inventory, skip this line.
00000Fr 3               	inc z80_d		; add to tally.
00000Fr 3               dbox6:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a		; reached end of line?
00000Fr 3               	cmp #','
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	cmp #ASCII_NEWLINE
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	inc z80_b		; add to this line"s width.
00000Fr 3               	lda z80_a
00000Fr 3               	bmi dbox4		; end of message? yes, end count.
00000Fr 3               	jmp dbox6		; repeat until we find the end.
00000Fr 3               dbox3:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox5		; no, carry on looking.
00000Fr 3               	lda z80_b		; make this the widest so far.
00000Fr 3               	sta z80_e
00000Fr 3               	jmp dbox5		; keep looking.
00000Fr 3               dbox4:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox8		; no, carry on looking.
00000Fr 3               	lda z80_b		; final line is the longest so far.
00000Fr 3               	sta z80_e
00000Fr 3               dbox8:
00000Fr 3               	dec z80_d		; decrement items found.
00000Fr 3               	bne :+			; total was zero.
00000Fr 3               	lda #255
00000Fr 3               	sta varopt
00000Fr 3               	jmp dbox15
00000Fr 3               :
00000Fr 3               	lda z80_e		; longest line.
00000Fr 3               	bne :+			; was it zero?
00000Fr 3               	jmp dbox15		; total was zero.
00000Fr 3               :
00000Fr 3               	sta bwid		; set up size.
00000Fr 3               	lda z80_d
00000Fr 3               	sta blen
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; That's set up our box size.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               	lda winhgt		; window height in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_d		; subtract height of box.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc wintop		; add top edge of window.
00000Fr 3               	sta btop		; set up box top.
00000Fr 3               
00000Fr 3               	lda winwid		; window width in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_e		; subtract box width.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc winlft		; add left edge of window.
00000Fr 3               	sta blft		; box left.
00000Fr 3               
00000Fr 3               	lda #<(FONT-256)		; font.
00000Fr 3               	sta grbase		; set up for text display.
00000Fr 3               	lda #>(FONT-256)
00000Fr 3               	sta grbase+1
00000Fr 3               
00000Fr 3               	lda TmpAddr+1		; restore message pointer.
00000Fr 3               	sta z80_l
00000Fr 3               	lda TmpAddr
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set display coordinate.
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               dbox2:
00000Fr 3               	lda combyt		; get object number.
00000Fr 3               	sta z80_a
00000Fr 3               mod0:
00000Fr 3               	jsr always		; check inventory for display.
00000Fr 3               	cmp #255
00000Fr 3               	beq :+
00000Fr 3               	jmp dbox13		; not in inventory, skip this line.
00000Fr 3               :
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set left display position.
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_b		; store width.
00000Fr 3               dbox0:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	cmp #','		; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               	cmp #ASCII_NEWLINE			; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               
00000Fr 3               	cmp #141			; end of line?
00000Fr 3               	bne :+
00000Fr 3               	dec bwid
00000Fr 3               	jmp dbox7		; yes, next one.
00000Fr 3               :
00000Fr 3               	dec z80_b		; one less to display.
00000Fr 3               	and #127		; remove terminator.
00000Fr 3               
00000Fr 3               	jsr pchr		; display on screen.
00000Fr 3               
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bmi :+
00000Fr 3               	jmp dbox7		; yes, job done.
00000Fr 3               :
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	beq :+			; are any left?
00000Fr 3               	jmp dbox0		; yes, continue.
00000Fr 3               :
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Reached limit of characters per line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dbox9:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bcs :+
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox9
00000Fr 3               
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Fill box to end of line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dboxf:
00000Fr 3               	lda #32			; space character.
00000Fr 3               	jsr pchr		; display character.
00000Fr 3               	dec z80_b
00000Fr 3               	beq :+
00000Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00000Fr 3               :
00000Fr 3               	rts
00000Fr 3               dbox1:
00000Fr 3               	inc z80_l		; skip character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill box out to right side.
00000Fr 3               dbox10:
00000Fr 3               	inc dispy		; y coordinate down a line next position.
00000Fr 3               	jmp dbox2		; next line.
00000Fr 3               dbox7:
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	bne :+			; are any left?
00000Fr 3               	jmp dbox11		; no, nothing to draw.
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill message to line.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Drawn the box menu, now select option.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox11:
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set bar position.
00000Fr 3               dbox14:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	bne dbox14		; yes, debounce it.
00000Fr 3               	jsr dbar		; draw bar.
00000Fr 3               dbox12:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	beq dbox12		; no, nothing.
00000Fr 3               	and #16			; fire button pressed?
00000Fr 3               	bne :+
00000Fr 3               mod1:
00000Fr 3               	jmp fstd		; yes, job done.
00000Fr 3               :
00000Fr 3               	jsr dbar		; delete bar.
00000Fr 3               
00000Fr 3               	lda joyval		; joystick reading.
00000Fr 3               	and #8			; going up?
00000Fr 3               	beq dboxu		; yes, go up.
00000Fr 3               
00000Fr 3               	ldx dispy		; vertical position of bar.
00000Fr 3               	inx			; look down.
00000Fr 3               	txa
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find distance from top.
00000Fr 3               	cmp blen		; top of box.
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	inc dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               dboxu:
00000Fr 3               	lda dispy		; vertical position of bar.
00000Fr 3               	cmp btop		; are we at the top?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	dec dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               fstd:
00000Fr 3               	lda dispy		; bar position.
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Option not available.  Skip this line.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox13:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               
00000Fr 3               	bpl :+			; end of message?
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox13
00000Fr 3               dbox15:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	sta winwid
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	sta winhgt
00000Fr 3               .endif
00000Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00000Fr 3               	sta z80_h
00000Fr 3               	lda TmpAddr+1
00000Fr 3               	sta z80_l
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Invert bar
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbar:
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set display coordinate.
00000Fr 3               	jsr gprad		; get printing address.
00000Fr 3               
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_c		; loop counter in c.
00000Fr 3               	lda z80_h
00000Fr 3               	sta z80_d		; store screen address high byte.
00000Fr 3               dbar1:
00000Fr 3               	ldx #7			; pixel height in b.
00000Fr 3               dbar0:
00000Fr 3               	ldy scrtab,x
00000Fr 3               	lda (scraddr),y		; get screen byte.
00000Fr 3               	eor #255		; reverse all bits.
00000Fr 3               	sta (scraddr),y		; write back to screen.
00000Fr 3               	dex			; next line down.
00000Fr 3               	bpl dbar0		; draw rest of character.
00000Fr 3               
00000Fr 3               	lda scraddr
00000Fr 3               	adc #8
00000Fr 3               	sta scraddr
00000Fr 3               	bcc :+
00000Fr 3               	inc scraddr+1
00000Fr 3               :
00000Fr 3               	dec z80_c		; decrement character counter.
00000Fr 3               	bne dbar1		; repeat for whole line.
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Point to object
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  A = object number, A=255 if already in possession
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               invdis:
00000Fr 3               	lda z80_l		; store message text pointer.
00000Fr 3               	pha
00000Fr 3               	lda z80_h
00000Fr 3               	pha
00000Fr 3               	lda combyt		; object number.
00000Fr 3               	inc combyt		; ready for next one.
00000Fr 3               	jsr gotob		; check if we have object.
00000Fr 3               	tay
00000Fr 3               	pla
00000Fr 3               	sta z80_h
00000Fr 3               	pla
00000Fr 3               	sta z80_l
00000Fr 3               	tya
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Find option selected.
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected object
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               fopt:
00000Fr 3               	lda dispy
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta tmp+2		; option selected in b register.
00000Fr 3               	inc tmp+2
00000Fr 3               
00000Fr 3               	lda #0			; set to first item.
00000Fr 3               	sta combyt		; object number.
00000Fr 3               fopt0:
00000Fr 3               	jsr fobj		; find next object in inventory.
00000Fr 3               	dec tmp+2
00000Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00000Fr 3               
00000Fr 3               	lda combyt		; get option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	dec varopt		; one less, due to where we increment combyt.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               fobj:
00000Fr 3               	ldy combyt		; object number.
00000Fr 3               	inc combyt		; ready for next item.
00000Fr 3               	tya
00000Fr 3               	jsr gotob		; do we have this item?
00000Fr 3               	cmp #255
00000Fr 3               	bne :+
00000Fr 3               	rts
00000Fr 3               :
00000Fr 3               	jmp fobj		; yes, it's on the list.
00000Fr 3               .endif
00000Fr 3               
00000Fr 3               ;----------------------------------------------------
00000Fr 3               ; Clear sprite table.
00000Fr 3               ;
00000Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00000Fr 3               ;----------------------------------------------------
00000Fr 3               
00000Fr 3               xspr:
00000Fr 3  A9 FF        	lda #255		; clear byte.
000011r 3  A2 00        	ldx #0			; length of table.
000013r 3               xspr0:
000013r 3  9D rr rr     	sta sprtab,x		; sprite table.
000016r 3  E8           	inx			; move to next byte.
000017r 3  E0 CC        	cpx #SPRBUF
000019r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00001Br 3  60           	rts
00001Cr 3               
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               ; Initialise all objects.
00001Cr 3               ;
00001Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               
00001Cr 3               .if oflag
00001Cr 3               iniob:
00001Cr 3  A9 rr        	lda #<objdta		; objects table.
00001Er 3  85 rr        	sta z80_x
000020r 3  A9 rr        	lda #>objdta
000022r 3  85 rr        	sta z80_i
000024r 3               
000024r 3  AE rr rr     	ldx numob 		; number of objects in the game.
000027r 3               iniob0:
000027r 3  A0 23        	ldy #35
000029r 3  B1 rr        	lda (z80_ix),y 		; start screen.
00002Br 3  A0 20        	ldy #32
00002Dr 3  91 rr        	sta (z80_ix),y 		; set start screen.
00002Fr 3               
00002Fr 3  A0 24        	ldy #36
000031r 3  B1 rr        	lda (z80_ix),y 		; find start y.
000033r 3  A0 21        	ldy #33
000035r 3  91 rr        	sta (z80_ix),y 		; set start y.
000037r 3               
000037r 3  A0 25        	ldy #37
000039r 3  B1 rr        	lda (z80_ix),y 		; get initial x.
00003Br 3  A0 22        	ldy #34
00003Dr 3  91 rr        	sta (z80_ix),y 		; set x coord.
00003Fr 3               
00003Fr 3  18           	clc 			; point to next object.
000040r 3  A5 rr        	lda z80_x
000042r 3  69 26        	adc #38			; distance between objects.
000044r 3  85 rr        	sta z80_x
000046r 3  90 02        	bcc :+
000048r 3  E6 rr        	inc z80_i
00004Ar 3               :
00004Ar 3  CA           	dex 			; repeat.
00004Br 3  D0 DA        	bne iniob0
00004Dr 3               
00004Dr 3  60           	rts
00004Er 3               .endif
00004Er 3               
00004Er 3               ;-----------------------------------------------
00004Er 3               ; Redraw the screen.
00004Er 3               ;
00004Er 3               ; Remove old copy of all sprites for redraw.
00004Er 3               ;-----------------------------------------------
00004Er 3               
00004Er 3               redraw:
00004Er 3               .if xflag
00004Er 3               	lda #WINDOWWID
00004Er 3               	sta winwid
00004Er 3               	lda #WINDOWHGT
00004Er 3               	sta winhgt
00004Er 3               .endif
00004Er 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000050r 3  48           	pha
000051r 3  A5 rr        	lda z80_x
000053r 3  48           	pha
000054r 3               
000054r 3  20 rr rr     	jsr droom		; show screen layout.
000057r 3               .if oflag
000057r 3  20 rr rr     	jsr shwob		; draw objects.
00005Ar 3               .endif
00005Ar 3               numsp0:
00005Ar 3  A9 0C        	lda #NUMSPR		; sprites to draw.
00005Cr 3  85 rr        	sta tmp
00005Er 3               
00005Er 3  A9 rr        	lda #<sprtab		; sprite table.
000060r 3  85 rr        	sta z80_x
000062r 3  A9 rr        	lda #>sprtab
000064r 3  85 rr        	sta z80_i
000066r 3               redrw0:
000066r 3  A0 00        	ldy #0
000068r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00006Ar 3  C9 FF        	cmp #255		; is it enabled?
00006Cr 3  F0 0B        	beq redrw1 		; no, find next one.
00006Er 3               
00006Er 3  A0 03        	ldy #var_Y
000070r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000072r 3  C9 B1        	cmp #177		; beyond maximum?
000074r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000076r 3               
000076r 3  20 rr rr     	jsr sspria		; show single sprite.
000079r 3               
000079r 3               redrw1:
000079r 3  18           	clc			; next sprite.
00007Ar 3  A5 rr        	lda z80_x
00007Cr 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00007Er 3  85 rr        	sta z80_x
000080r 3  90 02        	bcc :+
000082r 3  E6 rr        	inc z80_i
000084r 3               :
000084r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000086r 3  D0 DE        	bne redrw0
000088r 3               
000088r 3               rpblc1:
000088r 3               ;	jsr dshrp		; redraw shrapnel.
000088r 3               
000088r 3               .if aflag
000088r 3               	jsr rbloc		; draw blocks for this screen
000088r 3               .endif
000088r 3  68           	pla			; retrieve sprite pointer.
000089r 3  85 rr        	sta z80_x
00008Br 3  68           	pla
00008Cr 3  85 rr        	sta z80_i
00008Er 3               
00008Er 3  60           	rts
00008Fr 3               
00008Fr 3               ;----------------------------------------------------------------------
00008Fr 3               ; Clear screen routine.
00008Fr 3               ;
00008Fr 3               ; Fill screenmem $8000-$97ff with ScrFillByte
00008Fr 3               ;----------------------------------------------------------------------
00008Fr 3               
00008Fr 3               cls:
00008Fr 3  A9 10        	lda #>CharAddress	; Character RAM address.
000091r 3  8D rr rr     	sta clsloop+2
000094r 3               
000094r 3  A9 00        	lda #ScrFillByte	; Clear screen
000096r 3  A0 00        	ldy #0
000098r 3  A2 10        	ldx #16
00009Ar 3               clsloop:
00009Ar 3  99 00 10     	sta CharAddress,y
00009Dr 3  C8           	iny
00009Er 3  D0 FA        	bne clsloop
0000A0r 3  EE rr rr     	inc clsloop+2
0000A3r 3  CA           	dex
0000A4r 3  D0 F4        	bne clsloop
0000A6r 3  60           	rts
0000A7r 3               
0000A7r 3               ;----------------------------------------------------------------------
0000A7r 3               ; Clear colour attributes
0000A7r 3               ;
0000A7r 3               ; Reset colour attributes to fontcol
0000A7r 3               ;----------------------------------------------------------------------
0000A7r 3               
0000A7r 3               clrcol:
0000A7r 3  AD rr rr     	lda fontcol		; Clear colour attributes
0000AAr 3  A2 00        	ldx #0
0000ACr 3               clscol:
0000ACr 3  9D 00 96     	sta ColorAttr,x
0000AFr 3  E8           	inx
0000B0r 3  E0 F2        	cpx #242
0000B2r 3  D0 F8        	bne clscol
0000B4r 3               
0000B4r 3  60           	rts
0000B5r 3               
0000B5r 3               ;----------------------------------------------------------------------
0000B5r 3               ; FODDER check
0000B5r 3               ;----------------------------------------------------------------------
0000B5r 3               
0000B5r 3               .if pflag .or dflag
0000B5r 3               fdchk:
0000B5r 3               	cmp #FODDER 		; is it fodder?
0000B5r 3               	beq :+
0000B5r 3               	rts 			; no.
0000B5r 3               :
0000B5r 3               	lda #0			; wipe fodder in MAP
0000B5r 3               	ldy #0
0000B5r 3               	sta (bufaddr),y 	; rewrite block type.
0000B5r 3               
0000B5r 3               	lda dispx		; x=x/8
0000B5r 3               	pha
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	sta dispx
0000B5r 3               
0000B5r 3               	lda dispy		; y=y/8
0000B5r 3               	pha
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	sta dispy
0000B5r 3               
0000B5r 3               	lda #0 			; block to write.
0000B5r 3               	jsr pattr 		; write block.
0000B5r 3               
0000B5r 3               	pla
0000B5r 3               	sta dispy
0000B5r 3               	pla
0000B5r 3               	sta dispx
0000B5r 3               	rts
0000B5r 3               .endif
0000B5r 3               
0000B5r 3               ;----------------------------------------------------
0000B5r 3               ; Scrolly text and puzzle variables.
0000B5r 3               ;----------------------------------------------------
0000B5r 3               
0000B5r 3               .if sflag
0000B5r 3               txtbit:	.byte 128		; bit to write.
0000B5r 3               txtwid:	.byte 16		; width of ticker message.
0000B5r 3               txtpos:	.word msgdat
0000B5r 3               txtini:	.word msgdat
0000B5r 3               txtscr:	.word ScreenAddr
0000B5r 3               .endif
0000B5r 3               
0000B5r 3               ;----------------------------------------------------
0000B5r 3               ; Specialist routines.
0000B5r 3               ; Process shrapnel.
0000B5r 3               ;----------------------------------------------------
0000B5r 3               proshr:
0000B5r 3               .if pflag
0000B5r 3               	lda #<SHRAPN		; table.
0000B5r 3               	sta z80_x
0000B5r 3               	lda #>SHRAPN
0000B5r 3               	sta z80_i
0000B5r 3               
0000B5r 3               	lda #NUMSHR		; shrapnel pieces to process.
0000B5r 3               	sta shrctr
0000B5r 3               prosh0:
0000B5r 3               	ldy #0
0000B5r 3               	lda (z80_ix),y		; on/off marker.
0000B5r 3               	asl a
0000B5r 3               proshx:
0000B5r 3               	bcs :+
0000B5r 3               	jsr prosh1 		; on, so process it.
0000B5r 3               :
0000B5r 3               	clc
0000B5r 3               	lda z80_x
0000B5r 3               	adc #SHRSIZ
0000B5r 3               	sta z80_x
0000B5r 3               	bcc :+
0000B5r 3               	inc z80_i
0000B5r 3               :
0000B5r 3               	dec shrctr		; round again.
0000B5r 3               	bne prosh0
0000B5r 3               .endif
0000B5r 3               .if sflag
0000B5r 3               	jsr scrly
0000B5r 3               .endif
0000B5r 3  60           	rts
0000B6r 3               
0000B6r 3               .if pflag
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Proces shrapnel piece
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               prosh1:
0000B6r 3               	jsr plot 		; delete the pixel.
0000B6r 3               
0000B6r 3               	lda #<shrptr		; shrapnel routine pointers.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>shrptr
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y		; restore shrapnel type.
0000B6r 3               	jsr prosh2 		; run the routine.
0000B6r 3               	jsr chkxy		; check x and y are good before we redisplay.
0000B6r 3               
0000B6r 3               	lda #<SHRSIZ 		; distance to next.
0000B6r 3               	sta z80_e
0000B6r 3               	lda #>SHRSIZ
0000B6r 3               	sta z80_d
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Run the routine
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               prosh2:
0000B6r 3               	asl a 			; 2 bytes per address.
0000B6r 3               	tay
0000B6r 3               	lda shrptr,y
0000B6r 3               	sta z80_l
0000B6r 3               	lda shrptr+1,y 		; fetch high byte from table.
0000B6r 3               	sta z80_h
0000B6r 3               	jmp (z80_hl) 		; jump to routine.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Paricle routine table
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shrptr:	.word laser		; laser.
0000B6r 3               	.word trail		; vapour trail.
0000B6r 3               	.word shrap		; shrapnel from explosion.
0000B6r 3               	.word dotl		; horizontal starfield left.
0000B6r 3               	.word dotr		; horizontal starfield right.
0000B6r 3               	.word dotu		; vertical starfield up.
0000B6r 3               	.word dotd		; vertical starfield down.
0000B6r 3               	.word ptcusr		; user particle.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Explosion shrapnel.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shrap:
0000B6r 3               	ldy #1
0000B6r 3               	lda (z80_ix),y 		; get the angle.
0000B6r 3               	clc
0000B6r 3               	adc #<shrsin		; shrapnel sine table.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>shrsin
0000B6r 3               	adc #0
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; fetch value from table.
0000B6r 3               	sta z80_e
0000B6r 3               	inc z80_l 		; next byte of table.
0000B6r 3               	bne :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y		; fetch value from table.
0000B6r 3               	sta z80_d
0000B6r 3               	inc z80_l		; next byte of table.
0000B6r 3               	bne :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; fetch value from table.
0000B6r 3               	sta z80_c
0000B6r 3               	inc z80_l 		; next byte of table.
0000B6r 3               	bne :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; fetch value from table.
0000B6r 3               	sta z80_b
0000B6r 3               
0000B6r 3               	ldy #2
0000B6r 3               	lda (z80_ix),y 		; x coordinate in hl.
0000B6r 3               	clc
0000B6r 3               	adc z80_e		; add sine lb
0000B6r 3               	sta (z80_ix),y		; store new coordinate lb.
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	adc z80_d		; add sine hb
0000B6r 3               	sta (z80_ix),y		; store new coordinate hb.
0000B6r 3               
0000B6r 3               	ldy #4
0000B6r 3               	lda (z80_ix),y	 	; y coordinate in hl.
0000B6r 3               	clc
0000B6r 3               	adc z80_c		; add cosine lb
0000B6r 3               	sta (z80_ix),y		; store new coordinate lb.
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	adc z80_b		; add cosine lb
0000B6r 3               	sta (z80_ix),y		; store new coordinate hb.
0000B6r 3               
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Move dots
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               dotl:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1		 	; move left.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               dotr:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1		 	; move left.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               dotu:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1		 	; move up.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               dotd:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1			; move down.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Check if coordinates are ok before redrawing at new position.
0000B6r 3               ;
0000B6r 3               ; left:   X>L		X=L	Ok
0000B6r 3               ; right:  R+15>X	X=R	Ok
0000B6r 3               ; top:    Y>T		Y=T	Ok
0000B6r 3               ; bottom: B+15>Y	Y=B	Ok
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               chkxy:
0000B6r 3               
0000B6r 3               ; top:    Y>T		Y=T	Ok
0000B6r 3               
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	cmp wntopx		; window top.
0000B6r 3               	bcs :+			; compare with top window limit.
0000B6r 3               	jmp kilshr		; out of window, kill shrapnel.
0000B6r 3               :
0000B6r 3               ; left:   X>L		X=L	Ok
0000B6r 3               
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	cmp wnlftx		; left edge.
0000B6r 3               	bcs :+			; compare with left window limit.
0000B6r 3               	jmp kilshr		; out of window, kill shrapnel.
0000B6r 3               :
0000B6r 3               ; bottom: B+15>Y	Y=B	Ok
0000B6r 3               
0000B6r 3               	lda wnbotx		; point to bottom.
0000B6r 3               	clc
0000B6r 3               	adc #15
0000B6r 3               	ldy #3
0000B6r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	bcs :+			; compare with shrapnel x coordinate.
0000B6r 3               	jmp kilshr		; off screen, kill shrapnel..
0000B6r 3               :
0000B6r 3               ; right:  R+15>X	X=R	Ok
0000B6r 3               
0000B6r 3               	lda wnrgtx		; point to right edge.
0000B6r 3               	clc
0000B6r 3               	adc #15
0000B6r 3               	ldy #5
0000B6r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	bcs :+			; compare with window limit.
0000B6r 3               	jmp kilshr		; off screen, kill shrapnel.
0000B6r 3               :
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Drop through.
0000B6r 3               ; Display shrapnel.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               plot:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y		; y integer.
0000B6r 3               	sta dispy	 	; workspace coordinates.
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y	 	; x integer.
0000B6r 3               	sta dispx 		; workspace coordinates.
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y 		; type.
0000B6r 3               	bne :+			; is it a laser?
0000B6r 3               	jmp plot1 		; yes, draw laser instead.
0000B6r 3               :
0000B6r 3               plot0:
0000B6r 3               	lda dispx		; which pixel within byte do we
0000B6r 3               	and #7			; want to set first?
0000B6r 3               	tay
0000B6r 3               	lda dots,y 		; table of small pixel positions.
0000B6r 3               	sta z80_e 		; get value.
0000B6r 3               
0000B6r 3               	jsr scadd 		; screen address.
0000B6r 3               	ldy #0
0000B6r 3               	lda (scraddr),y		; see what's already there.
0000B6r 3               	eor z80_e
0000B6r 3               	sta (scraddr),y 	; put back on screen.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               plot1:
0000B6r 3               	jsr scadd 		; screen address.
0000B6r 3               	ldy #0
0000B6r 3               	lda (scraddr),y 	; fetch byte there.
0000B6r 3               	eor #255 		; toggle all bits.
0000B6r 3               	sta (scraddr),y 	; new byte.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Switch off shrapnel
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               kilshr:
0000B6r 3               	lda #128
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y	; switch off shrapnel.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Sine/cosine table
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
0000B6r 3               	.word 1024,0,946,65144,724,64811,391,64589
0000B6r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0000B6r 3               	.word 64512,0,64589,391,64811,724,65144,946
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create trail
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               trail:
0000B6r 3               	ldy #1
0000B6r 3               	lda (z80_ix),y 	; time remaining.
0000B6r 3               	sec
0000B6r 3               	sbc #1
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	bne :+
0000B6r 3               	jmp trailk		; time to switch it off.
0000B6r 3               :
0000B6r 3               	jsr qrand		; get a random number.
0000B6r 3               	lsr a 			; x or y axis?
0000B6r 3               	bcc :+
0000B6r 3               	jmp trailv		; use y.
0000B6r 3               :
0000B6r 3               ; Trail horizontal
0000B6r 3               
0000B6r 3               	lsr a 			; which direction?
0000B6r 3               	bcc :+
0000B6r 3               	jmp traill		; go left.
0000B6r 3               :
0000B6r 3               ; Trail right
0000B6r 3               
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1	 		; go right.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Trail left
0000B6r 3               
0000B6r 3               traill:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1 			; go left.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Trail vertical
0000B6r 3               
0000B6r 3               trailv:
0000B6r 3               	lsr a		 	; which direction?
0000B6r 3               	bcc :+
0000B6r 3               	jmp trailu		; go up.
0000B6r 3               :
0000B6r 3               ; Trail down
0000B6r 3               
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1 			; go down.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Trail up
0000B6r 3               
0000B6r 3               trailu:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1 			; go up.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Kill trail
0000B6r 3               
0000B6r 3               trailk:
0000B6r 3               	lda #200		; set off-screen to kill vapour trail.
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create laser beam
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               laser:
0000B6r 3               	ldy #1
0000B6r 3               	lda (z80_ix),y 		; direction.
0000B6r 3               	ror a 			; left or right?
0000B6r 3               	bcs :+
0000B6r 3               	jmp laserl		; move left.
0000B6r 3               :
0000B6r 3               ; Laser right
0000B6r 3               
0000B6r 3               	lda #8			; distance to travel.
0000B6r 3               	sta z80_b
0000B6r 3               	jmp laserm		; move laser.
0000B6r 3               
0000B6r 3               ; Laser left
0000B6r 3               
0000B6r 3               laserl:
0000B6r 3               	lda #248		; distance to travel.
0000B6r 3               	sta z80_b
0000B6r 3               laserm:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y		; x position.
0000B6r 3               	clc
0000B6r 3               	adc z80_b		; add distance.
0000B6r 3               	sta (z80_ix),y		; set new x coordinate.
0000B6r 3               
0000B6r 3               ; Test new block.
0000B6r 3               
0000B6r 3               	sta dispx 		; set x for block collision detection purposes.
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y 		; get y.
0000B6r 3               	sta dispy		; set coordinate for collision test.
0000B6r 3               	jsr tstbl 		; get block type there.
0000B6r 3               	cmp #WALL		; is it solid?
0000B6r 3               	bne :+
0000B6r 3               	jmp trailk		; yes, it cannot pass.
0000B6r 3               :
0000B6r 3               .if pflag .or dflag
0000B6r 3                       cmp #FODDER             ; is it fodder?
0000B6r 3                       bne :+
0000B6r 3                       jsr fdchk               ; remove fodder block.
0000B6r 3                       jmp trailk              ; destroy laser.
0000B6r 3               :
0000B6r 3               .endif
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Dots mask
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               dots:	.byte 128,64,32,16,8,4,2,1
0000B6r 3               
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Plot, preserving de.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               plotde:
0000B6r 3               	lda z80_d 		; put de on stack.
0000B6r 3               	pha
0000B6r 3               	lda z80_e
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	jsr plot 		; plot pixel.
0000B6r 3               
0000B6r 3               	pla			; restore de from stack.
0000B6r 3               	sta z80_e
0000B6r 3               	pla
0000B6r 3               	sta z80_d
0000B6r 3               
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Shoot a laser.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shoot:
0000B6r 3               	sta z80_c		; store direction in c register.
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	clc
0000B6r 3               shoot1:
0000B6r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0000B6r 3               	sta z80_l 		; puty y coordinate in l.
0000B6r 3               
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y 		; x coordinate in h.
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	lda z80_i		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcs :+
0000B6r 3               	jmp vapou2		; failed, restore ix.
0000B6r 3               :
0000B6r 3               	lda #0
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y 		; set up a laser.
0000B6r 3               
0000B6r 3               	lda z80_c
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y 		; set the direction.
0000B6r 3               
0000B6r 3               	lda z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; set y coordinate.
0000B6r 3               
0000B6r 3               	ror z80_c		; check direction we want.
0000B6r 3               	bcc :+
0000B6r 3               	jmp shootr		; shoot right.
0000B6r 3               :
0000B6r 3               	lda z80_h		; X position.
0000B6r 3               shoot0:
0000B6r 3               	and #248		; align on character boundary.
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; set x coordinate.
0000B6r 3               	jmp vapou0 		; draw first image.
0000B6r 3               shootr:
0000B6r 3               	lda z80_h		; x position.
0000B6r 3               	clc
0000B6r 3               	adc #15			; look right.
0000B6r 3               	jmp shoot0		; align and continue.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create a bit of vapour trail.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               vapour:
0000B6r 3               	lda z80_i		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	clc
0000B6r 3               vapou3:
0000B6r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0000B6r 3               	sta z80_l
0000B6r 3               
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y 		; x coordinate.
0000B6r 3               	adc #7
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcc :+
0000B6r 3               	jmp vapou1		; no, we can use it.
0000B6r 3               :
0000B6r 3               vapou2:
0000B6r 3               	pla
0000B6r 3               	sta z80_x
0000B6r 3               	pla
0000B6r 3               	sta z80_i
0000B6r 3               	rts
0000B6r 3               vapou1:
0000B6r 3               	lda z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; set up y.
0000B6r 3               
0000B6r 3               	lda z80_h
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y 		; set up x coordinate.
0000B6r 3               
0000B6r 3               	jsr qrand		; get quick random number.
0000B6r 3               	and #15			; random time.
0000B6r 3               	clc
0000B6r 3               	adc #15			; minimum time on screen.
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y		; set time on screen.
0000B6r 3               
0000B6r 3               	lda #1
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; define particle as vapour trail.
0000B6r 3               vapou0:
0000B6r 3               	jsr chkxy		; plot first position.
0000B6r 3               	jmp vapou2
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create a user particle.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               ptusr:
0000B6r 3               	sta z80_f		; store timer.
0000B6r 3               
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	clc
0000B6r 3               	adc #7			; mid-point of sprite.
0000B6r 3               	sta z80_l
0000B6r 3               
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y 		; x coordinate.
0000B6r 3               	clc
0000B6r 3               	adc #7			; mid-point of sprite.
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcs ptusr1
0000B6r 3               	rts 			; out of slots, can't generate anything.
0000B6r 3               ptusr1:
0000B6r 3               	lda z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y 		; set up y.
0000B6r 3               
0000B6r 3               	lda z80_h
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; set up x coordinate.
0000B6r 3               
0000B6r 3               	lda z80_f 		; restore timer.
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y		; set time on screen.
0000B6r 3               
0000B6r 3               	lda #7
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; define particle as user particle.
0000B6r 3               
0000B6r 3               	jmp chkxy		; plot first position.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create a vertical or horizontal star.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               star:
0000B6r 3               	lda z80_i		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcs star7		; found one we can use.
0000B6r 3               star0:
0000B6r 3               	pla 			; restore sprite pointer.
0000B6r 3               	sta z80_x
0000B6r 3               	pla
0000B6r 3               	sta z80_i
0000B6r 3               	rts 			; out of slots, can't generate anything.
0000B6r 3               star7:
0000B6r 3               	lda z80_c		; direction.
0000B6r 3               	and #3 			; is it left?
0000B6r 3               	bne :+
0000B6r 3               	jmp star1 		; yes, it's left.
0000B6r 3               :
0000B6r 3               	cmp #1 			; is it right?
0000B6r 3               	bne :+
0000B6r 3               	jmp star2 		; yes, it's right.
0000B6r 3               :
0000B6r 3               	cmp #2 			; is it up?
0000B6r 3               	bne :+
0000B6r 3               	jmp star3 		; yes, it's up.
0000B6r 3               :
0000B6r 3               	ldy wntopx 		; get edge of screen.
0000B6r 3               	iny			; down one pixel.
0000B6r 3               	tya
0000B6r 3               star8:
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y 		; set y coord.
0000B6r 3               	jsr qrand 		; get quick random number.
0000B6r 3               star9:
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; set x position.
0000B6r 3               
0000B6r 3               	lda z80_c		; direction.
0000B6r 3               	and #3			; zero to three.
0000B6r 3               	clc
0000B6r 3               	adc #3			; 3 to 6 for starfield.
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; define particle as star.
0000B6r 3               	jsr chkxy		; plot first position.
0000B6r 3               	jmp star0
0000B6r 3               star1:
0000B6r 3               	jsr qrand		; get quick random number.
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y 		; set y coord.
0000B6r 3               
0000B6r 3               	lda wnrgtx 		; get edge of screen.
0000B6r 3               	clc
0000B6r 3               	adc #15			; add width of sprite minus 1.
0000B6r 3               	jmp star9
0000B6r 3               star2:
0000B6r 3               	jsr qrand 		; get quick random number.
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; set y coord.
0000B6r 3               
0000B6r 3               	lda wnlftx		; get edge of screen.
0000B6r 3               	jmp star9
0000B6r 3               star3:
0000B6r 3               	lda wnbotx 		; get edge of screen.
0000B6r 3               	clc
0000B6r 3               	adc #15 		; height of sprite minus one pixel.
0000B6r 3               	jmp star8
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Find particle slot for lasers or vapour trail.
0000B6r 3               ; can't use alternate accumulator.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               fpslot:
0000B6r 3               	lda #<SHRAPN 		; shrapnel table.
0000B6r 3               	sta z80_x
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_i
0000B6r 3               
0000B6r 3               	lda #NUMSHR		; number of pieces in table.
0000B6r 3               	sta z80_b
0000B6r 3               fpslt0:
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y		; get type.
0000B6r 3               	asl a  			; is this slot in use?
0000B6r 3               	bcc :+
0000B6r 3               	rts			; no, we can use it.
0000B6r 3               :
0000B6r 3               	clc			; point to more shrapnel.
0000B6r 3               	lda z80_x
0000B6r 3               	adc #SHRSIZ
0000B6r 3               	sta z80_x
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_i
0000B6r 3               :
0000B6r 3               	dec z80_b		; repeat for all shrapnel.
0000B6r 3               	bne fpslt0
0000B6r 3               
0000B6r 3               	clc
0000B6r 3               	rts 			; out of slots, can't generate anything.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create an explosion at sprite position.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               explod:
0000B6r 3               	sta z80_c 		; particles to create.
0000B6r 3               
0000B6r 3               	lda z80_i 		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	sta z80_l
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y		; x coordinate.
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	lda #<SHRAPN		; shrapnel table.
0000B6r 3               	sta z80_x
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_i
0000B6r 3               
0000B6r 3               	lda #NUMSHR		; number of pieces in table.
0000B6r 3               	sta explcnt
0000B6r 3               expld0:
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y		; get type.
0000B6r 3               	asl a 			; is this slot in use?
0000B6r 3               	bcs expld1		; no, we can use it.
0000B6r 3               expld2:
0000B6r 3               	clc
0000B6r 3               	lda z80_x
0000B6r 3               	adc #SHRSIZ
0000B6r 3               	sta z80_x
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_i
0000B6r 3               :
0000B6r 3               	dec explcnt		; repeat for all shrapnel.
0000B6r 3               	bne expld0
0000B6r 3               expld3:
0000B6r 3               	pla			; restore sprite pointer.
0000B6r 3               	sta z80_x
0000B6r 3               	pla
0000B6r 3               	sta z80_i
0000B6r 3               	rts 			; out of slots, can't generate any more.
0000B6r 3               
0000B6r 3               expld1:
0000B6r 3               	lda z80_c		; shrapnel counter.
0000B6r 3               	and #15			; 0 to 15.
0000B6r 3               	clc			; add to x.
0000B6r 3               	adc z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; y coord.
0000B6r 3               
0000B6r 3               	lda seed3 		; crap random number.
0000B6r 3               	and #15			; 0 to 15.
0000B6r 3               	clc 			; add to y.
0000B6r 3               	adc z80_h
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; x coord.
0000B6r 3               
0000B6r 3               	lda #2
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; switch it on.
0000B6r 3               
0000B6r 3               	jsr chkxy		; plot first position.
0000B6r 3               	jsr qrand		; quick random angle.
0000B6r 3               	and #60 		; keep within range.
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y		; angle.
0000B6r 3               
0000B6r 3               	dec z80_c		; one less piece of shrapnel to generate.
0000B6r 3               	bne expld2 		; back to main explosion loop.
0000B6r 3               	jmp expld3 		; restore sprite pointer and exit.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Quick random
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               qrand:
0000B6r 3               	jsr random		; r register.
0000B6r 3               	eor seed3		; combine with seed.
0000B6r 3               	sta seed3 		; new seed.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Display all shrapnel.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               dshrp:
0000B6r 3               	lda #<plotde		; display routine.
0000B6r 3               	sta proshx+1
0000B6r 3               	lda #>plotde
0000B6r 3               	sta proshx+2
0000B6r 3               	jsr proshr		; process shrapnel.
0000B6r 3               
0000B6r 3               	lda #<prosh1		; processing routine.
0000B6r 3               	sta proshx+1
0000B6r 3               	lda #>prosh1
0000B6r 3               	sta proshx+2
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;------------------------------------------------------
0000B6r 3               ; Particle engine.
0000B6r 3               ;
0000B6r 3               ; Init particle data for 55 particles in SHRAPN table.
0000B6r 3               ; Every particle has 6 bytes.
0000B6r 3               ;
0000B6r 3               ; global:	-
0000B6r 3               ; local:	x,y,hl
0000B6r 3               ; calls:	-
0000B6r 3               ;------------------------------------------------------
0000B6r 3               
0000B6r 3               inishr:
0000B6r 3               	lda #<SHRAPN 		; table.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	ldx #NUMSHR		; shrapnel pieces to process.
0000B6r 3               inish0:
0000B6r 3               	lda #255 		; kill the shrapnel.
0000B6r 3               	sta (z80_hl),y
0000B6r 3               
0000B6r 3               	clc 			; point there.
0000B6r 3               	lda z80_l
0000B6r 3               	adc #SHRSIZ		; distance to next.
0000B6r 3               	sta z80_l
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	dex
0000B6r 3               	bne inish0 		; round again.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;------------------------------------------------------
0000B6r 3               ; Check for collision between laser and sprite.
0000B6r 3               ;------------------------------------------------------
0000B6r 3               
0000B6r 3               lcol:
0000B6r 3               	lda #<SHRAPN		; shrapnel table.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	lda #NUMSHR		; number of pieces in table.
0000B6r 3               	sta z80_b
0000B6r 3               lcol0:
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; get type.
0000B6r 3               	beq lcol1		; yes, check collision.
0000B6r 3               lcol3:
0000B6r 3               	clc			; point to more shrapnel.
0000B6r 3               	lda z80_l
0000B6r 3               	adc #SHRSIZ
0000B6r 3               	sta z80_l
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	dec z80_b		; repeat for all shrapnel.
0000B6r 3               	bne lcol0
0000B6r 3               	clc
0000B6r 3               	rts 			; no collision, carry not set.
0000B6r 3               lcol1:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_hl),y		; get y.
0000B6r 3               	sec
0000B6r 3               	ldy #8
0000B6r 3               	sbc (z80_ix),y		; subtract sprite y.
0000B6r 3               lcolh:
0000B6r 3               	cmp #SPR_HGT 		; within range?
0000B6r 3               	bcc :+
0000B6r 3               	jmp lcol2		; no, missed.
0000B6r 3               :
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_hl),y 		; get x.
0000B6r 3               	sec
0000B6r 3               	ldy #9
0000B6r 3               	sbc (z80_ix),y 		; subtract sprite y.
0000B6r 3               	cmp #16			; within range?
0000B6r 3               	bcs :+
0000B6r 3               	jmp lcol4 		; yes, collision occurred.
0000B6r 3               :
0000B6r 3               lcol2:
0000B6r 3               	jmp lcol3
0000B6r 3               lcol4:
0000B6r 3               	sec
0000B6r 3               	rts 			; return with carry set for collision.
0000B6r 3               .endif
0000B6r 3               
0000B6r 3               ;------------------------------------------------------
0000B6r 3               ; Main game engine code starts here.
0000B6r 3               ; After initialisation, mloop is the main loop
0000B6r 3               ;------------------------------------------------------
0000B6r 3               
0000B6r 3               game:
0000B6r 3               
0000B6r 3               ; Set up screen address table.
0000B6r 3               
0000B6r 3               setsat:
0000B6r 3  A9 00        	lda #<CharAddress	; start of screen.
0000B8r 3  85 rr        	sta scraddr
0000BAr 3  A9 10        	lda #>CharAddress
0000BCr 3  85 rr        	sta scraddr+1
0000BEr 3               
0000BEr 3  A0 00        	ldy #0			; vertical lines on screen.
0000C0r 3               setsa0:
0000C0r 3  A5 rr        	lda scraddr
0000C2r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000C5r 3  A5 rr        	lda scraddr+1
0000C7r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000CAr 3  20 rr rr     	jsr nline		; next line down.
0000CDr 3  C8           	iny			; next position in table.
0000CEr 3  D0 F0        	bne setsa0
0000D0r 3               
0000D0r 3               ; Set up colour address table
0000D0r 3               
0000D0r 3               setsof:
0000D0r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000D2r 3  85 rr        	sta bufaddr
0000D4r 3  A9 96        	lda #>ColorAttr
0000D6r 3  85 rr        	sta bufaddr+1
0000D8r 3               
0000D8r 3  A0 00        	ldy #0			; vertical lines on screen.
0000DAr 3               setof0:
0000DAr 3  A5 rr        	lda bufaddr
0000DCr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000DFr 3  A5 rr        	lda bufaddr+1
0000E1r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000E4r 3  18           	clc			; next line down.
0000E5r 3  A5 rr        	lda bufaddr
0000E7r 3  69 16        	adc #ScrWidth
0000E9r 3  85 rr        	sta bufaddr
0000EBr 3  90 02        	bcc :+
0000EDr 3  E6 rr        	inc bufaddr+1
0000EFr 3               :
0000EFr 3  C8           	iny			; next position in table.
0000F0r 3  C0 0B        	cpy #ScrHeight/2
0000F2r 3  D0 E6        	bne setof0
0000F4r 3               
0000F4r 3               ; Init graphics mode
0000F4r 3               
0000F4r 3  20 rr rr     	jsr init
0000F7r 3               
0000F7r 3               ; Init joysticks
0000F7r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0000FAr 3               
0000FAr 3               rpblc2:
0000FAr 3               .if pflag
0000FAr 3               	jsr inishr 		; initialise particle engine.
0000FAr 3               .endif
0000FAr 3               evintr:
0000FAr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0000FDr 3               
0000FDr 3  A9 02        	lda #WALL 		; write default property.
0000FFr 3  A2 00        	ldx #0
000101r 3               clrmap:
000101r 3  9D 00 04     	sta MAP,x 		; block properties.
000104r 3  9D 00 05     	sta MAP+256,x
000107r 3  E8           	inx
000108r 3  D0 F7        	bne clrmap
00010Ar 3               
00010Ar 3               .if oflag
00010Ar 3  20 rr rr     	jsr iniob 		; initialise objects.
00010Dr 3               .endif
00010Dr 3  A9 00        	lda #0			; put zero in accumulator.
00010Fr 3  85 rr        	sta gamwon		; reset game won flag.
000111r 3               
000111r 3  20 rr rr     	jsr inisc 		; init the score.
000114r 3               mapst:
000114r 3  AD rr rr     	lda stmap 		; start position on map.
000117r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
00011Ar 3               
00011Ar 3               inipbl:
00011Ar 3               .if aflag
00011Ar 3               	lda #<eop		; reset blockpointer
00011Ar 3               	sta pbptr
00011Ar 3               	lda #>eop
00011Ar 3               	sta pbptr+1
00011Ar 3               .endif
00011Ar 3  20 rr rr     	jsr initsc 		; set up first screen.
00011Dr 3               
00011Dr 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
00011Fr 3  85 rr        	sta z80_x
000121r 3  A9 rr        	lda #>ssprit
000123r 3  85 rr        	sta z80_i
000125r 3               evini:
000125r 3  20 rr rr     	jsr evnt13 		; initialisation.
000128r 3               
000128r 3               ; Two restarts.
000128r 3               ; First restart - clear all sprites and initialise everything.
000128r 3               
000128r 3               rstrt:
000128r 3  20 rr rr     	jsr rsevt 		; restart events.
00012Br 3  20 rr rr     	jsr xspr 		; clear sprite table.
00012Er 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000131r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000134r 3  4C rr rr     	jmp rstrt0
000137r 3               
000137r 3               ; Second restart - clear all but player, and don't initialise him.
000137r 3               
000137r 3               rstrtn:
000137r 3  20 rr rr     	jsr rsevt		; restart events.
00013Ar 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
00013Dr 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000140r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000143r 3               
000143r 3               ; Set up the player and/or enemy sprites.
000143r 3               
000143r 3               rstrt0:
000143r 3  A9 00        	lda #0 			; zero in accumulator.
000145r 3  85 rr        	sta nexlev 		; reset next level flag.
000147r 3  85 rr        	sta restfl 		; reset restart flag.
000149r 3  85 rr        	sta deadf 		; reset dead flag.
00014Br 3               
00014Br 3  20 rr rr     	jsr droom 		; show screen layout.
00014Er 3               rpblc0:
00014Er 3               .if pflag
00014Er 3               	jsr inishr 		; initialise particle engine.
00014Er 3               .endif
00014Er 3               .if aflag
00014Er 3               	jsr rbloc		; draw blocks for this screen
00014Er 3               .endif
00014Er 3               .if oflag
00014Er 3  20 rr rr     	jsr shwob		; draw objects.
000151r 3               .endif
000151r 3               
000151r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000153r 3  85 rr        	sta z80_x
000155r 3  A9 rr        	lda #>sprtab
000157r 3  85 rr        	sta z80_i
000159r 3  20 rr rr     	jsr dspr 		; display sprites.
00015Cr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00015Er 3  85 rr        	sta z80_x
000160r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000162r 3  85 rr        	sta z80_i
000164r 3  20 rr rr     	jsr dspr 		; display sprites.
000167r 3               mloop:
000167r 3  20 rr rr     	jsr vsync 		; synchronise with display.
00016Ar 3               
00016Ar 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00016Cr 3  85 rr        	sta z80_x
00016Er 3  A9 rr        	lda #>sprtab
000170r 3  85 rr        	sta z80_i
000172r 3  20 rr rr     	jsr dspr 		; display even sprites.
000175r 3               
000175r 3               ;	jsr plsnd 		; play sounds.
000175r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000178r 3  20 rr rr     	jsr proshr
00017Br 3               
00017Br 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00017Dr 3  85 rr        	sta z80_x
00017Fr 3  A9 rr        	lda #>(sprtab+TABSIZ)
000181r 3  85 rr        	sta z80_i
000183r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000186r 3               
000186r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000188r 3  85 rr        	sta z80_x
00018Ar 3  A9 rr        	lda #>(ssprit)
00018Cr 3  85 rr        	sta z80_i
00018Er 3               evlp1:
00018Er 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000191r 3  20 rr rr     	jsr pspr 		; process sprites.
000194r 3               
000194r 3               ; Main loop events.
000194r 3               
000194r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000196r 3  85 rr        	sta z80_x
000198r 3  A9 rr        	lda #>ssprit
00019Ar 3  85 rr        	sta z80_i
00019Cr 3               evlp2:
00019Cr 3  20 rr rr     	jsr evnt11 		; called once per main loop.
00019Fr 3               bsortx:
00019Fr 3  20 rr rr     	jsr bsort 		; sort sprites.
0001A2r 3               
0001A2r 3  A5 rr        	lda nexlev		; finished level flag.
0001A4r 3  D0 1F        	bne newlev		; is set, go to next level.
0001A6r 3  A5 rr        	lda gamwon		; finished game flag.
0001A8r 3  D0 2A        	bne evwon		; is set, finish the game.
0001AAr 3  A5 rr        	lda restfl 		; finished level flag.
0001ACr 3  C9 01        	cmp #1			; has it been set?
0001AEr 3  D0 03        	bne :+
0001B0r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
0001B3r 3               :
0001B3r 3  C9 02        	cmp #2			; has it been set?
0001B5r 3  D0 03        	bne :+
0001B7r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
0001BAr 3               :
0001BAr 3  A5 rr        	lda deadf 		; dead flag.
0001BCr 3  D0 1C        	bne pdead		; yes, player dead.
0001BEr 3               
0001BEr 3               ; back to start of main loop.
0001BEr 3               
0001BEr 3  E6 rr        	inc frmno
0001C0r 3  E6 rr        	inc clock
0001C2r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
0001C5r 3               
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               ; Read blocks from list and update screen accordingly.
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               
0001C5r 3               .if aflag
0001C5r 3               rbloc:
0001C5r 3               	lda #<eop		; reset blockpointer
0001C5r 3               	sta pbbuf
0001C5r 3               	lda #>eop
0001C5r 3               	sta pbbuf+1
0001C5r 3               
0001C5r 3               rbloc2:
0001C5r 3               	lda pbbuf			; check for last block
0001C5r 3               	cmp pbptr
0001C5r 3               	bne rbloc1
0001C5r 3               	lda pbbuf+1
0001C5r 3               	cmp pbptr+1
0001C5r 3               	bne rbloc1
0001C5r 3               	rts
0001C5r 3               rbloc1:
0001C5r 3               	ldy #0
0001C5r 3               	lda (pbbuf),y		; check if block for this scno
0001C5r 3               	cmp scno
0001C5r 3               	bne rbloc0		; if not, skip
0001C5r 3               	iny
0001C5r 3               	lda (pbbuf),y		; get y
0001C5r 3               	sta dispy
0001C5r 3               	iny
0001C5r 3               	lda (pbbuf),y		; get x
0001C5r 3               	sta dispx
0001C5r 3               	iny
0001C5r 3               	lda (pbbuf),y		; get blocknr
0001C5r 3               	jsr pattr2		; draw block
0001C5r 3               rbloc0:
0001C5r 3               	clc			; point to next block
0001C5r 3               	lda pbbuf
0001C5r 3               	adc #4
0001C5r 3               	sta pbbuf
0001C5r 3               	bcc rbloc2
0001C5r 3               	inc pbbuf+1
0001C5r 3               	jmp rbloc2
0001C5r 3               .endif
0001C5r 3               
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               ; New level
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               
0001C5r 3               newlev:
0001C5r 3  A5 rr        	lda scno 			; current screen.
0001C7r 3  18           	clc
0001C8r 3  69 01        	adc #1				; next screen.
0001CAr 3  CD rr rr     	cmp numsc 			; total number of screens.
0001CDr 3  B0 05        	bcs evwon			; yes, game finished.
0001CFr 3  85 rr        	sta scno			; set new level number.
0001D1r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001D4r 3               
0001D4r 3               evwon:
0001D4r 3  20 rr rr     	jsr evnt18		 	; game completed.
0001D7r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001DAr 3               
0001DAr 3               ;----------------------------------------------------------
0001DAr 3               ; Player dead.
0001DAr 3               ;----------------------------------------------------------
0001DAr 3               
0001DAr 3               pdead:
0001DAr 3  A9 00        	lda #0				; zeroise accumulator.
0001DCr 3  85 rr        	sta deadf			; reset dead flag.
0001DEr 3               evdie:
0001DEr 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001E1r 3  A5 rr        	lda numlif			; number of lives.
0001E3r 3  F0 03        	beq :+
0001E5r 3  4C rr rr     	jmp rstrt 			; restart game.
0001E8r 3               :
0001E8r 3               evfail:
0001E8r 3  20 rr rr     	jsr evnt17 			; failure event.
0001EBr 3  4C rr rr     	jmp game			; restart game
0001EEr 3               
0001EEr 3               ;----------------------------------------------------------
0001EEr 3               ; Tidy things up
0001EEr 3               ;----------------------------------------------------------
0001EEr 3               
0001EEr 3               tidyup:
0001EEr 3  A0 00        	ldy #0				; digits to check.
0001F0r 3               tidyu2:
0001F0r 3  B9 rr rr     	lda score,y 			; get score digit.
0001F3r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001F6r 3  90 07        	bcc tidyu0			; high score is bigger.
0001F8r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001FAr 3  C8           	iny				; next digit of high score.
0001FBr 3  C0 06        	cpy #6
0001FDr 3  D0 F1        	bne tidyu2			; repeat for all digits
0001FFr 3               tidyu0:
0001FFr 3  A9 rr        	lda #<score			; return pointing to score.
000201r 3  85 rr        	sta z80_c
000203r 3  A9 rr        	lda #>score
000205r 3  85 rr        	sta z80_b
000207r 3  60           	rts
000208r 3               tidyu1:
000208r 3  A0 05        	ldy #5
00020Ar 3               tidyu3:
00020Ar 3  B9 rr rr     	lda score,y			; score.
00020Dr 3  99 rr rr     	sta hiscor,y			; high score.
000210r 3  88           	dey
000211r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000213r 3               evnewh:
000213r 3  20 rr rr     	jsr evnt19			; new high score event.
000216r 3  4C rr rr     	jmp tidyu0			; tidy up.
000219r 3               
000219r 3               ;--------------------------------------------------
000219r 3               ; Restart event.
000219r 3               ;--------------------------------------------------
000219r 3               
000219r 3               rsevt:
000219r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00021Br 3  85 rr        	sta z80_x
00021Dr 3  A9 rr        	lda #>ssprit
00021Fr 3  85 rr        	sta z80_i
000221r 3               
000221r 3               evrs:
000221r 3  4C rr rr     	jmp evnt14	 		; call restart event.
000224r 3               
000224r 3               ;------------------------------------------------------------------
000224r 3               ; Copy number passed in a to string position bc, right-justified.
000224r 3               ;
000224r 3               ; Input:
000224r 3               ;  A  = number
000224r 3               ;  BC = string address
000224r 3               ;
000224r 3               ; Output:
000224r 3               ;  BC = string with number
000224r 3               ;-----------------------------------------------------------------
000224r 3               
000224r 3               num2ch:
000224r 3  85 rr        	sta z80_d		; Save number
000226r 3               
000226r 3  A9 00        	lda #0
000228r 3  85 rr        	sta flag
00022Ar 3               numdg3:
00022Ar 3  A2 64        	ldx #100		; hundreds column.
00022Cr 3  86 rr        	stx z80_e
00022Er 3  20 rr rr     	jsr numdg		; show digit.
000231r 3               numdg2:
000231r 3  A2 0A        	ldx #10			; tens column.
000233r 3  86 rr        	stx z80_e
000235r 3  20 rr rr     	jsr numdg		; show digit.
000238r 3               
000238r 3  E6 rr        	inc flag
00023Ar 3  A2 01        	ldx #1			; units column.
00023Cr 3  86 rr        	stx z80_e
00023Er 3               numdg:
00023Er 3  A9 30        	lda #48			; clear digit.
000240r 3  85 rr        	sta z80_a
000242r 3               numdg1:
000242r 3  A5 rr        	lda z80_d
000244r 3  C5 rr        	cmp z80_e
000246r 3  90 0E        	bcc numdg0		; nothing to show.
000248r 3  38           	sec
000249r 3  A5 rr        	lda z80_d
00024Br 3  E5 rr        	sbc z80_e		; subtract from column.
00024Dr 3  85 rr        	sta z80_d
00024Fr 3  E6 rr        	inc z80_a		; increment digit.
000251r 3  E6 rr        	inc flag
000253r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
000256r 3               numdg0:
000256r 3  A0 00        	ldy #0
000258r 3  A5 rr        	lda z80_a
00025Ar 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
00025Cr 3  A5 rr        	lda flag
00025Er 3  F0 06        	beq :+
000260r 3  E6 rr        	inc z80_c		; next buffer position.
000262r 3  D0 02        	bne :+
000264r 3  E6 rr        	inc z80_b
000266r 3               :
000266r 3  60           	rts
000267r 3               num2dd:
000267r 3  85 rr        	sta z80_d		; Save number
000269r 3               
000269r 3  A9 01        	lda #1
00026Br 3  85 rr        	sta flag
00026Dr 3               
00026Dr 3  4C rr rr     	jmp numdg2
000270r 3               num2td:
000270r 3  85 rr        	sta z80_d		; Save number
000272r 3               
000272r 3  A9 01        	lda #1
000274r 3  85 rr        	sta flag
000276r 3  4C rr rr     	jmp numdg3
000279r 3               
000279r 3               ;---------------------------------------------------------
000279r 3               ; Reset score to "000000"
000279r 3               ;---------------------------------------------------------
000279r 3               
000279r 3               inisc:
000279r 3  A9 30        	lda #'0'
00027Br 3  A2 05        	ldx #5			; digits to initialise.
00027Dr 3               inisc0:
00027Dr 3  9D rr rr     	sta score,x 		; write zero digit.
000280r 3  CA           	dex			; next column.
000281r 3  10 FA        	bpl inisc0		; repeat for all digits.
000283r 3               
000283r 3  60           	rts
000284r 3               
000284r 3               ;-----------------------------------------------------
000284r 3               ; Multiply h by d and return in hl.
000284r 3               ;
000284r 3               ; Input:
000284r 3               ;  H = first number
000284r 3               ;  D = second number
000284r 3               ;
000284r 3               ; Output:
000284r 3               ;  HL = result H x D
000284r 3               ;-----------------------------------------------------
000284r 3               
000284r 3               imul:
000284r 3  A5 rr        	lda z80_d		; HL = H * D
000286r 3  85 rr        	sta z80_e
000288r 3  A5 rr        	lda z80_h
00028Ar 3  85 rr        	sta z80_c		; make c first multiplier.
00028Cr 3               imul0:
00028Cr 3  A9 00        	lda #0			; zeroise total.
00028Er 3  85 rr        	sta z80_l
000290r 3  85 rr        	sta z80_h
000292r 3               
000292r 3  A5 rr        	lda z80_h
000294r 3  85 rr        	sta z80_d		; zeroise high byte.
000296r 3               
000296r 3  A9 08        	lda #8			; repeat 8 times.
000298r 3  85 rr        	sta z80_b
00029Ar 3               imul1:
00029Ar 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
00029Cr 3  90 0E        	bcc imul2		; wasn't set.
00029Er 3  18           	clc			; bit was set, so add de.
00029Fr 3  A5 rr        	lda z80_l
0002A1r 3  65 rr        	adc z80_e
0002A3r 3  85 rr        	sta z80_l
0002A5r 3  A5 rr        	lda z80_h
0002A7r 3  65 rr        	adc z80_d
0002A9r 3  85 rr        	sta z80_h
0002ABr 3  18           	clc 			; reset carry.
0002ACr 3               imul2:
0002ACr 3  06 rr        	asl z80_e 		; shift de 1 bit left.
0002AEr 3  26 rr        	rol z80_d
0002B0r 3  C6 rr        	dec z80_b
0002B2r 3  D0 E6        	bne imul1		; repeat 8 times.
0002B4r 3               
0002B4r 3  60           	rts
0002B5r 3               
0002B5r 3               ;-----------------------------------------------
0002B5r 3               ; Divide d by e and return in d, remainder in a.
0002B5r 3               ;
0002B5r 3               ; Input:
0002B5r 3               ;  D = first number
0002B5r 3               ;  E = second number
0002B5r 3               ;
0002B5r 3               ; Output:
0002B5r 3               ;  D = result D/E
0002B5r 3               ;  A = remainder
0002B5r 3               ;-----------------------------------------------
0002B5r 3               
0002B5r 3               idiv:
0002B5r 3  A9 00        	lda #0
0002B7r 3  A0 08        	ldy #8		 	; bits to shift.
0002B9r 3  06 rr        	asl z80_d
0002BBr 3               idiv0:
0002BBr 3  2A           	rol a 			; multiply d by 2.
0002BCr 3  C5 rr        	cmp z80_e 		; test if e is smaller.
0002BEr 3  90 02        	bcc idiv1		; e is greater, no division this time.
0002C0r 3  E5 rr        	sbc z80_e		; subtract it.
0002C2r 3               idiv1:
0002C2r 3  26 rr        	rol z80_d		; rotate into d.
0002C4r 3  88           	dey
0002C5r 3  D0 F4        	bne idiv0		; repeat
0002C7r 3  60           	rts
0002C8r 3               
0002C8r 3               ;---------------------------------------------------
0002C8r 3               ; Play AY sound effect
0002C8r 3               ;---------------------------------------------------
0002C8r 3               
0002C8r 3               plsnd:
0002C8r 3  60           	rts
0002C9r 3               
0002C9r 3               ;---------------------------------------------------
0002C9r 3               ; Objects handling.
0002C9r 3               ; 32 bytes for image
0002C9r 3               ; 3 for room, y and x
0002C9r 3               ; 3 for starting room, y and x.
0002C9r 3               ; 254 = disabled.
0002C9r 3               ; 255 = object in player"s pockets.
0002C9r 3               ;---------------------------------------------------
0002C9r 3               
0002C9r 3               ;---------------------------------------------------
0002C9r 3               ; Show items present.
0002C9r 3               ;---------------------------------------------------
0002C9r 3               
0002C9r 3               .if oflag
0002C9r 3               shwob:
0002C9r 3  A9 rr        	lda #<objdta			; objects table.
0002CBr 3  85 rr        	sta z80_l
0002CDr 3  A9 rr        	lda #>objdta
0002CFr 3  85 rr        	sta z80_h
0002D1r 3  AD rr rr     	lda numob 			; number of objects in the game.
0002D4r 3  85 rr        	sta sprcnt
0002D6r 3               shwob0:
0002D6r 3  A0 20        	ldy #32 			; distance to room number.
0002D8r 3  B1 rr        	lda (z80_hl),y 			; same as an item?
0002DAr 3  C5 rr        	cmp scno 			; current location.
0002DCr 3  D0 03        	bne :+
0002DEr 3  20 rr rr     	jsr dobj 			; yes, display object.
0002E1r 3               :
0002E1r 3  18           	clc
0002E2r 3  A5 rr        	lda z80_l
0002E4r 3  69 26        	adc #38 			; distance to next item.
0002E6r 3  85 rr        	sta z80_l
0002E8r 3  A5 rr        	lda z80_h
0002EAr 3  69 00        	adc #0
0002ECr 3  85 rr        	sta z80_h	 		; point to it.
0002EEr 3  C6 rr        	dec sprcnt
0002F0r 3  D0 E4        	bne shwob0 			; repeat for others.
0002F2r 3  60           	rts
0002F3r 3               
0002F3r 3               ;---------------------------------------------------
0002F3r 3               ; Display object.
0002F3r 3               ; hl must point to object's start address.
0002F3r 3               ;
0002F3r 3               ; Input:
0002F3r 3               ;  HL = object address
0002F3r 3               ;---------------------------------------------------
0002F3r 3               
0002F3r 3               dobj:
0002F3r 3  A0 21        	ldy #33
0002F5r 3  B1 rr        	lda (z80_hl),y 			; point to y.
0002F7r 3  85 rr        	sta dispy
0002F9r 3  C8           	iny
0002FAr 3  B1 rr        	lda (z80_hl),y 			; point to x.
0002FCr 3  85 rr        	sta dispx
0002FEr 3               dobj1:
0002FEr 3  4C rr rr     	jmp sprite 			; draw this sprite.
000301r 3               
000301r 3               ;--------------------------------------
000301r 3               ; Remove an object.
000301r 3               ;
000301r 3               ; Input:
000301r 3               ;  A = object number
000301r 3               ;--------------------------------------
000301r 3               
000301r 3               remob:
000301r 3  CD rr rr     	cmp numob			; number of objects in game.
000304r 3  90 01        	bcc :+				; are we checking past the end?
000306r 3  60           	rts				; yes, can't get non-existent item.
000307r 3               :
000307r 3  48           	pha				; remember object.
000308r 3  20 rr rr     	jsr getob			; pick it up if we haven't already got it.
00030Br 3  68           	pla				; retrieve object number.
00030Cr 3  20 rr rr     	jsr gotob			; get its address.
00030Fr 3  A9 FE        	lda #254
000311r 3  A0 20        	ldy #32
000313r 3  91 rr        	sta (z80_hl),y			; remove it.
000315r 3  60           	rts
000316r 3               
000316r 3               ;---------------------------------------------------
000316r 3               ; Pick up object number held in the accumulator.
000316r 3               ;
000316r 3               ; Input:
000316r 3               ;  A = object number
000316r 3               ;---------------------------------------------------
000316r 3               
000316r 3               getob:
000316r 3  CD rr rr     	cmp numob 		; number of objects in game.
000319r 3  90 01        	bcc :+			; are we checking past the end?
00031Br 3  60           	rts			; yes, can't get non-existent item.
00031Cr 3               :
00031Cr 3  20 rr rr     	jsr gotob 		; check if we already have it.
00031Fr 3  C9 FF        	cmp #255
000321r 3  D0 01        	bne :+
000323r 3  60           	rts			; we already do.
000324r 3               :
000324r 3  A0 20        	ldy #32
000326r 3  B1 rr        	lda (z80_hl),y		; is it on this screen?
000328r 3  C5 rr        	cmp scno 		; current screen.
00032Ar 3  D0 14        	bne getob0		; not on screen, so nothing to delete.
00032Cr 3               
00032Cr 3  A9 FF        	lda #255
00032Er 3  91 rr        	sta (z80_hl),y		; pick it up.
000330r 3  C8           	iny 			; point to y coord.
000331r 3               getob1:
000331r 3  A0 21        	ldy #33
000333r 3  B1 rr        	lda (z80_hl),y		; y coord.
000335r 3  85 rr        	sta dispy
000337r 3  A0 22        	ldy #34
000339r 3  B1 rr        	lda (z80_hl),y 		; x coord.
00033Br 3  85 rr        	sta dispx
00033Dr 3  4C rr rr     	jmp dobj1 		; delete object sprite.
000340r 3               getob0:
000340r 3  A9 FF        	lda #255
000342r 3  91 rr        	sta (z80_hl),y 		; pick it up.
000344r 3  60           	rts
000345r 3               .endif
000345r 3               
000345r 3               ;-----------------------------------------------------------------
000345r 3               ; Got object check.
000345r 3               ; Call with object in accumulator, returns zero set if in pockets.
000345r 3               ;
000345r 3               ; Input:
000345r 3               ;  A = object number
000345r 3               ;-----------------------------------------------------------------
000345r 3               .if oflag .or mflag
000345r 3               gotob:
000345r 3  CD rr rr     	cmp numob 		; number of objects in game.
000348r 3  90 03        	bcc :+ 			; are we checking past the end?
00034Ar 3  4C rr rr     	jmp gotob0 		; yes, we can't have a non-existent object.
00034Dr 3               :
00034Dr 3  20 rr rr     	jsr findob		; find the object.
000350r 3               gotob1:
000350r 3  60           	rts
000351r 3               
000351r 3               gotob0:
000351r 3  A9 FE        	lda #254 		; missing.
000353r 3  4C rr rr     	jmp gotob1
000356r 3               
000356r 3               findob:
000356r 3  48           	pha			; save object number
000357r 3  A9 rr        	lda #<objdta 		; objects.
000359r 3  85 rr        	sta z80_l
00035Br 3  A9 rr        	lda #>objdta
00035Dr 3  85 rr        	sta z80_h
00035Fr 3  68           	pla			; retreive object number
000360r 3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000362r 3  AA           	tax 			; loop counter
000363r 3               fndob2:
000363r 3  18           	clc
000364r 3  A5 rr        	lda z80_l
000366r 3  69 26        	adc #38 		; size of each object.
000368r 3  85 rr        	sta z80_l
00036Ar 3  90 02        	bcc :+
00036Cr 3  E6 rr        	inc z80_h
00036Er 3               :
00036Er 3  CA           	dex 			; repeat until we find address.
00036Fr 3  D0 F2        	bne fndob2
000371r 3               fndob1:
000371r 3  A0 20        	ldy #32			; distance to room it's in.
000373r 3  B1 rr        	lda (z80_hl),y		; fetch status.
000375r 3  60           	rts
000376r 3               .endif
000376r 3               
000376r 3               ;---------------------------------------------
000376r 3               ; Drop object number at (dispx, dispy).
000376r 3               ;
000376r 3               ; Input:
000376r 3               ;  A = object number
000376r 3               ;---------------------------------------------
000376r 3               
000376r 3               .if oflag
000376r 3               drpob:
000376r 3  CD rr rr     	cmp numob 		; are we checking past the end?
000379r 3  90 01        	bcc :+
00037Br 3  60           	rts			; yes, can't drop non-existent item.
00037Cr 3               :
00037Cr 3  20 rr rr     	jsr gotob		; make sure object is in inventory.
00037Fr 3  C5 rr        	cmp scno		; already on this screen?
000381r 3  D0 01        	bne :+
000383r 3  60           	rts			; yes, nothing to do.
000384r 3               :
000384r 3  A0 20        	ldy #32
000386r 3  A5 rr        	lda scno
000388r 3  91 rr        	sta (z80_hl),y		; bring onto screen.
00038Ar 3  A5 rr        	lda dispy		; sprite y coordinate.
00038Cr 3  C8           	iny
00038Dr 3  91 rr        	sta (z80_hl),y		; point to object y.
00038Fr 3  A5 rr        	lda dispx 		; sprite x coordinate.
000391r 3  C8           	iny
000392r 3  91 rr        	sta (z80_hl),y 		; point to object x
000394r 3  4C rr rr     	jmp dobj		; draw the object sprite.
000397r 3               
000397r 3               ;-----------------------------------------------
000397r 3               ; Seek objects at sprite position.
000397r 3               ;
000397r 3               ; Output:
000397r 3               ;  A = object number, if not found A=255
000397r 3               ;-----------------------------------------------
000397r 3               
000397r 3               skobj:
000397r 3  A9 rr        	lda #<objdta 		; pointer to objects.
000399r 3  85 rr        	sta z80_l
00039Br 3  A9 rr        	lda #>objdta
00039Dr 3  85 rr        	sta z80_h
00039Fr 3               
00039Fr 3  AD rr rr     	lda numob 		; number of objects in game.
0003A2r 3  85 rr        	sta z80_b 		; set up the loop counter.
0003A4r 3               skobj0:
0003A4r 3  A5 rr        	lda scno		; current room number.
0003A6r 3  A0 20        	ldy #32
0003A8r 3  D1 rr        	cmp (z80_hl),y		; is object in here?
0003AAr 3  D0 03        	bne :+
0003ACr 3  20 rr rr     	jsr skobj1		; yes, check coordinates.
0003AFr 3               :
0003AFr 3  18           	clc			; point to next object in table.
0003B0r 3  A5 rr        	lda z80_l
0003B2r 3  69 26        	adc #38			; size of each object.
0003B4r 3  85 rr        	sta z80_l
0003B6r 3  90 02        	bcc :+
0003B8r 3  E6 rr        	inc z80_h
0003BAr 3               :
0003BAr 3  C6 rr        	dec z80_b
0003BCr 3  D0 E6        	bne skobj0		; repeat for all objects.
0003BEr 3               
0003BEr 3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0003C0r 3  60           	rts
0003C1r 3               
0003C1r 3               skobj1:
0003C1r 3  A0 21        	ldy #33			; point to y coordinate.
0003C3r 3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
0003C5r 3  38           	sec
0003C6r 3  A0 08        	ldy #var_newY
0003C8r 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
0003CAr 3  18           	clc
0003CBr 3  69 0F        	adc #15			; add sprite height minus one.
0003CDr 3  C9 1F        	cmp #31			; within range?
0003CFr 3  B0 18        	bcs skobj2		; no, ignore object.
0003D1r 3               
0003D1r 3  A0 22        	ldy #34			; point to x coordinate now.
0003D3r 3  B1 rr        	lda (z80_hl),y 		; get coordinate.
0003D5r 3  38           	sec
0003D6r 3  A0 09        	ldy #var_newX
0003D8r 3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
0003DAr 3  18           	clc			; add sprite width minus one.
0003DBr 3  69 0F        	adc #15
0003DDr 3  C9 1F        	cmp #31			; within range?
0003DFr 3  B0 08        	bcs skobj2		; no, ignore object.
0003E1r 3               
0003E1r 3  68           	pla			; remove return address from stack.
0003E2r 3  68           	pla
0003E3r 3               
0003E3r 3  AD rr rr     	lda numob 		; objects in game.
0003E6r 3  38           	sec
0003E7r 3  E5 rr        	sbc z80_b		; subtract loop counter.
0003E9r 3               skobj2:
0003E9r 3  60           	rts			; accumulator now points to object.
0003EAr 3               .endif
0003EAr 3               
0003EAr 3               ;---------------------------------------------------------------------
0003EAr 3               ; Spawn a new sprite.
0003EAr 3               ;---------------------------------------------------------------------
0003EAr 3               
0003EAr 3               spawn:
0003EAr 3  A9 rr        	lda #<sprtab		; sprite table.
0003ECr 3  85 rr        	sta z80_l
0003EEr 3  A9 rr        	lda #>sprtab
0003F0r 3  85 rr        	sta z80_h
0003F2r 3               numsp1:
0003F2r 3  A9 0C        	lda #NUMSPR		; number of sprites.
0003F4r 3  85 rr        	sta spcnt
0003F6r 3               spaw0:
0003F6r 3  A0 00        	ldy #var_Type
0003F8r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0003FAr 3  C9 FF        	cmp #255		; is it an unused slot?
0003FCr 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0003FEr 3               
0003FEr 3  18           	clc 			; point to next sprite in table.
0003FFr 3  A5 rr        	lda z80_l
000401r 3  69 11        	adc #TABSIZ		; size of each entry.
000403r 3  85 rr        	sta z80_l
000405r 3  90 02        	bcc :+
000407r 3  E6 rr        	inc z80_h
000409r 3               :
000409r 3  C6 rr        	dec spcnt		; one less iteration.
00040Br 3  D0 E9        	bne spaw0		; keep going until we find a slot.
00040Dr 3               
00040Dr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
00040Dr 3               
00040Dr 3               spaw1:
00040Dr 3  A5 rr        	lda z80_i		; address of original sprite.
00040Fr 3  48           	pha
000410r 3  A5 rr        	lda z80_x
000412r 3  48           	pha
000413r 3               
000413r 3  A5 rr        	lda z80_l		; store spawned sprite address.
000415r 3  85 rr        	sta spptr
000417r 3  A5 rr        	lda z80_h
000419r 3  85 rr        	sta spptr+1
00041Br 3               
00041Br 3  A5 rr        	lda z80_c
00041Dr 3  A0 00        	ldy #var_Type
00041Fr 3  91 rr        	sta (z80_hl),y 		; set the type.
000421r 3  A0 05        	ldy #var_newType
000423r 3  91 rr        	sta (z80_hl),y		; copy
000425r 3               
000425r 3  A5 rr        	lda z80_b
000427r 3  A0 01        	ldy #var_Image
000429r 3  91 rr        	sta (z80_hl),y		; set the image.
00042Br 3  A0 06        	ldy #var_newImage
00042Dr 3  91 rr        	sta (z80_hl),y		; copy
00042Fr 3               
00042Fr 3  A9 00        	lda #0 				; frame zero.
000431r 3  A0 02        	ldy #var_Frame
000433r 3  91 rr        	sta (z80_hl),y		; set frame.
000435r 3  A0 07        	ldy #var_newFrame
000437r 3  91 rr        	sta (z80_hl),y		; copy
000439r 3               
000439r 3  A0 08        	ldy #8
00043Br 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00043Dr 3  A0 03        	ldy #3
00043Fr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000441r 3  A0 08        	ldy #8
000443r 3  91 rr        	sta (z80_hl),y		; copy
000445r 3               
000445r 3  A0 09        	ldy #9
000447r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000449r 3  A0 04        	ldy #4
00044Br 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
00044Dr 3  A0 09        	ldy #9
00044Fr 3  91 rr        	sta (z80_hl),y		; copy
000451r 3               
000451r 3  A0 0A        	ldy #10				; direction of original.
000453r 3  B1 rr        	lda (z80_ix),y
000455r 3  91 rr        	sta (z80_hl),y		; direction
000457r 3               
000457r 3  A9 00        	lda #0
000459r 3  A0 0D        	ldy #var_jumpLo
00045Br 3  91 rr        	sta (z80_hl),y		; reset parameter.
00045Dr 3  C8           	iny
00045Er 3  91 rr        	sta (z80_hl),y		; reset parameter.
000460r 3  C8           	iny
000461r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000463r 3  C8           	iny
000464r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000466r 3               rtssp:
000466r 3  A5 rr        	lda spptr			; address of new sprite.
000468r 3  85 rr        	sta z80_x
00046Ar 3  A5 rr        	lda spptr+1
00046Cr 3  85 rr        	sta z80_i
00046Er 3               evis1:
00046Er 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
000471r 3               
000471r 3  A5 rr        	lda spptr 			; address of new sprite.
000473r 3  85 rr        	sta z80_x
000475r 3  A5 rr        	lda spptr+1
000477r 3  85 rr        	sta z80_i
000479r 3               
000479r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000479r 3  A0 03        	ldy #var_Y
00047Br 3  B1 rr        	lda (z80_hl), y		; old x coord
00047Dr 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
00047Fr 3  B0 03        	bcs :+				; yes, don't draw it.
000481r 3               
000481r 3  20 rr rr     	jsr sspria 			; display the new sprite.
000484r 3               :
000484r 3  68           	pla					; address of original sprite.
000485r 3  85 rr        	sta z80_x
000487r 3  68           	pla
000488r 3  85 rr        	sta z80_i
00048Ar 3               
00048Ar 3  60           	rts
00048Br 3               
00048Br 3  30 30 30 30  score:	.byte "000000"		; player"s score.
00048Fr 3  30 30        
000491r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
000495r 3  30 30        
000497r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
00049Br 3  30 30        
00049Dr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
00049Fr 3               
00049Fr 3               ;----------------------------------------------------
00049Fr 3               ; Check y-pos
00049Fr 3               ;----------------------------------------------------
00049Fr 3               
00049Fr 3               checkx:
00049Fr 3  A5 rr        	lda dispy		; y position.
0004A1r 3  C9 18        	cmp #24			; off screen?
0004A3r 3  B0 01        	bcs :+
0004A5r 3  60           	rts			; no, it's okay.
0004A6r 3               :
0004A6r 3  68           	pla			; remove return address from stack.
0004A7r 3  85 rr        	sta z80_l
0004A9r 3  68           	pla
0004AAr 3  85 rr        	sta z80_h
0004ACr 3  60           	rts
0004ADr 3               
0004ADr 3               ;-----------------------------------------------
0004ADr 3               ; Displays the current high score.
0004ADr 3               ;-----------------------------------------------
0004ADr 3               
0004ADr 3               dhisc:
0004ADr 3  A9 rr        	lda #<hiscor 		; high score text.
0004AFr 3  8D rr rr     	sta dscor3+1
0004B2r 3  8D rr rr     	sta bscor3+1
0004B5r 3  A9 rr        	lda #>hiscor
0004B7r 3  8D rr rr     	sta dscor3+2
0004BAr 3  8D rr rr     	sta bscor3+2
0004BDr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
0004C0r 3               
0004C0r 3               ;------------------------------------------------------
0004C0r 3               ; Displays the current score.
0004C0r 3               ;------------------------------------------------------
0004C0r 3               
0004C0r 3               dscor:
0004C0r 3  A9 rr        	lda #<score		; score text.
0004C2r 3  8D rr rr     	sta dscor3+1
0004C5r 3  8D rr rr     	sta bscor3+1
0004C8r 3  A9 rr        	lda #>score
0004CAr 3  8D rr rr     	sta dscor3+2
0004CDr 3  8D rr rr     	sta bscor3+2
0004D0r 3               dscor1:
0004D0r 3  8C rr rr     	sty tmpscr
0004D3r 3  20 rr rr     	jsr preprt		; set up font and print position.
0004D6r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
0004D9r 3               
0004D9r 3               ;	lda #6			; digits to display.
0004D9r 3               ;	sta z80_b
0004D9r 3  A5 rr        	lda prtmod		; get print mode.
0004DBr 3  F0 03        	beq :+			; standard size text?
0004DDr 3  4C rr rr     	jmp bscor0		; no, show double-height.
0004E0r 3               :
0004E0r 3               dscor0:
0004E0r 3               ;	ldy #0
0004E0r 3               ;	lda (z80_hl),y 		; fetch character.
0004E0r 3  AC rr rr     	ldy tmpscr
0004E3r 3               dscor3:
0004E3r 3  B9 rr rr     	lda score,y
0004E6r 3  20 rr rr     	jsr pchar 		; display character.
0004E9r 3  E6 rr        	inc dispx		; move along x coordinate
0004EBr 3               
0004EBr 3               ;	inc z80_l		; next score column.
0004EBr 3               ;	bne :+
0004EBr 3               ;	inc z80_h
0004EBr 3               ;:
0004EBr 3  EE rr rr     	inc tmpscr
0004EEr 3  C6 rr        	dec z80_b
0004F0r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0004F2r 3               dscor2:
0004F2r 3  A5 rr        	lda dispx 		; set up display coordinates.
0004F4r 3  85 rr        	sta charx
0004F6r 3  A5 rr        	lda dispy
0004F8r 3  85 rr        	sta chary
0004FAr 3  60           	rts
0004FBr 3               
0004FBr 3  00           tmpscr:	.byte 0
0004FCr 3               ;------------------------------------------------------
0004FCr 3               ; Displays the current score in double-height characters.
0004FCr 3               ;
0004FCr 3               ; Input:
0004FCr 3               ;  B  = digit number
0004FCr 3               ;  HL = score string
0004FCr 3               ;------------------------------------------------------
0004FCr 3               
0004FCr 3               bscor0:
0004FCr 3               ;	ldy #0
0004FCr 3               
0004FCr 3               ;	lda (z80_hl),y 		; fetch character.
0004FCr 3  A4 rr        	ldy tmp
0004FEr 3               bscor3:
0004FEr 3  B9 rr rr     	lda score,y
000501r 3  20 rr rr     	jsr bchar 		; display big char.
000504r 3               
000504r 3               ;	inc z80_l 		; next score column.
000504r 3               ;	bne :+
000504r 3               ;	inc z80_h
000504r 3               ;:
000504r 3  E6 rr        	inc tmp
000506r 3  C6 rr        	dec z80_b
000508r 3  F0 03        	beq :+
00050Ar 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
00050Dr 3               :
00050Dr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
000510r 3               
000510r 3               ;-----------------------------------------------------
000510r 3               ; Adds number in the hl pair to the score.
000510r 3               ;-----------------------------------------------------
000510r 3               
000510r 3               addsc:
000510r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000512r 3  85 rr        	sta z80_e
000514r 3  A9 rr        	lda #>(score+1)
000516r 3  85 rr        	sta z80_d
000518r 3  A9 10        	lda #<10000		; amount to add each time.
00051Ar 3  85 rr        	sta z80_c
00051Cr 3  A9 27        	lda #>10000
00051Er 3  85 rr        	sta z80_b
000520r 3  20 rr rr     	jsr incsc		; add to score.
000523r 3               
000523r 3  E6 rr        	inc z80_e		; thousands column.
000525r 3  D0 02        	bne :+
000527r 3  E6 rr        	inc z80_d
000529r 3               :
000529r 3  A9 E8        	lda #<1000		; amount to add each time.
00052Br 3  85 rr        	sta z80_c
00052Dr 3  A9 03        	lda #>1000
00052Fr 3  85 rr        	sta z80_b
000531r 3  20 rr rr     	jsr incsc 		; add to score.
000534r 3               
000534r 3  E6 rr        	inc z80_e		; hundreds column.
000536r 3  D0 02        	bne :+
000538r 3  E6 rr        	inc z80_d
00053Ar 3               :
00053Ar 3  A9 64        	lda #<100		; amount to add each time.
00053Cr 3  85 rr        	sta z80_c
00053Er 3  A9 00        	lda #>100
000540r 3  85 rr        	sta z80_b
000542r 3  20 rr rr     	jsr incsc		; add to score.
000545r 3               
000545r 3  E6 rr        	inc z80_e 		; tens column.
000547r 3  D0 02        	bne :+
000549r 3  E6 rr        	inc z80_d
00054Br 3               :
00054Br 3  A9 0A        	lda #<10		; amount to add each time.
00054Dr 3  85 rr        	sta z80_c
00054Fr 3  A9 00        	lda #>10
000551r 3  85 rr        	sta z80_b
000553r 3  20 rr rr     	jsr incsc 		; add to score.
000556r 3               
000556r 3  E6 rr        	inc z80_e		; units column.
000558r 3  D0 02        	bne :+
00055Ar 3  E6 rr        	inc z80_d
00055Cr 3               :
00055Cr 3  A9 01        	lda #<1			; units.
00055Er 3  85 rr        	sta z80_c
000560r 3  A9 00        	lda #>1
000562r 3  85 rr        	sta z80_b
000564r 3               incsc:
000564r 3  A5 rr        	lda z80_h		; store amount to add.
000566r 3  48           	pha
000567r 3  A5 rr        	lda z80_l
000569r 3  48           	pha
00056Ar 3               
00056Ar 3  38           	sec			; subtract from amount to add.
00056Br 3  A5 rr        	lda z80_l
00056Dr 3  E5 rr        	sbc z80_c
00056Fr 3  85 rr        	sta z80_l
000571r 3  A5 rr        	lda z80_h
000573r 3  E5 rr        	sbc z80_b
000575r 3  85 rr        	sta z80_h
000577r 3  90 14        	bcc incsc0		; too much, restore value.
000579r 3               
000579r 3  68           	pla			; delete the previous amount from the stack.
00057Ar 3  68           	pla
00057Br 3               
00057Br 3  A5 rr        	lda z80_d 		; store column position.
00057Dr 3  48           	pha
00057Er 3  A5 rr        	lda z80_e
000580r 3  48           	pha
000581r 3  20 rr rr     	jsr incsc2		; do the increment.
000584r 3               
000584r 3  68           	pla			; restore column.
000585r 3  85 rr        	sta z80_e
000587r 3  68           	pla
000588r 3  85 rr        	sta z80_d
00058Ar 3  4C rr rr     	jmp incsc		; repeat until all added.
00058Dr 3               
00058Dr 3               incsc0:
00058Dr 3  68           	pla			; restore previous value.
00058Er 3  85 rr        	sta z80_l
000590r 3  68           	pla
000591r 3  85 rr        	sta z80_h
000593r 3  60           	rts
000594r 3               incsc2:
000594r 3  A0 00        	ldy #0
000596r 3  B1 rr        	lda (z80_de),y 		; get amount.
000598r 3  18           	clc
000599r 3  69 01        	adc #1			; add one to column.
00059Br 3  91 rr        	sta (z80_de),y		; write new column total.
00059Dr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
00059Fr 3  B0 01        	bcs :+
0005A1r 3  60           	rts			; no, carry on.
0005A2r 3               :
0005A2r 3  A9 30        	lda #'0'		; make it zero.
0005A4r 3  91 rr        	sta (z80_de),y		; write new column total.
0005A6r 3  C6 rr        	dec z80_e		; back one column.
0005A8r 3  D0 02        	bne :+
0005AAr 3  C6 rr        	dec z80_d
0005ACr 3               :
0005ACr 3  4C rr rr     	jmp incsc2
0005AFr 3               
0005AFr 3               ;------------------------------------
0005AFr 3               ; Add bonus to score and reset bonus
0005AFr 3               ;------------------------------------
0005AFr 3               
0005AFr 3               addbo:
0005AFr 3  A2 05        	ldx #5			; last digit.
0005B1r 3  18           	clc
0005B2r 3               addbo0:
0005B2r 3  BD rr rr     	lda score,x		; get score.
0005B5r 3  7D rr rr     	adc bonus,x		; add bonus.
0005B8r 3  38           	sec			; 0 to 18.
0005B9r 3  E9 30        	sbc #48
0005BBr 3  48           	pha
0005BCr 3  A9 30        	lda #'0'
0005BEr 3  9D rr rr     	sta bonus,x
0005C1r 3  68           	pla
0005C2r 3  C9 3A        	cmp #58
0005C4r 3  90 03        	bcc addbo1
0005C6r 3  38           	sec
0005C7r 3  E9 0A        	sbc #10
0005C9r 3               addbo1:
0005C9r 3  9D rr rr     	sta score,x		; zeroise bonus.
0005CCr 3  CA           	dex			; next digit.
0005CDr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0005CFr 3  60           	rts
0005D0r 3               
0005D0r 3               ;------------------------------------
0005D0r 3               ; Swap score and bonus.
0005D0r 3               ;------------------------------------
0005D0r 3               
0005D0r 3               swpsb:
0005D0r 3  A2 05        	ldx #5			; digits to add.
0005D2r 3               swpsb0:
0005D2r 3  BD rr rr     	lda score,x 		; get score digits.
0005D5r 3  48           	pha			; save digit
0005D6r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
0005D9r 3  9D rr rr     	sta score,x		; switch score-bonus
0005DCr 3  68           	pla
0005DDr 3  9D rr rr     	sta bonus,x
0005E0r 3  CA           	dex 			; repeat for all 6 digits.
0005E1r 3  10 EF        	bpl swpsb0
0005E3r 3  60           	rts
0005E4r 3               
0005E4r 3               ;----------------------------------------------------
0005E4r 3               ; Get print address.
0005E4r 3               ;----------------------------------------------------
0005E4r 3               
0005E4r 3               gprad:
0005E4r 3  98           	tya
0005E5r 3  48           	pha
0005E6r 3               
0005E6r 3  A5 rr        	lda dispx 		; x coordinate.
0005E8r 3  85 rr        	sta scraddr
0005EAr 3  A9 00        	lda #0
0005ECr 3  85 rr        	sta scraddr+1
0005EEr 3  06 rr        	asl scraddr  		; multiply char by 16
0005F0r 3  26 rr        	rol scraddr+1
0005F2r 3  06 rr        	asl scraddr
0005F4r 3  26 rr        	rol scraddr+1
0005F6r 3  06 rr        	asl scraddr
0005F8r 3  26 rr        	rol scraddr+1
0005FAr 3  06 rr        	asl scraddr
0005FCr 3  26 rr        	rol scraddr+1
0005FEr 3               
0005FEr 3  A5 rr        	lda dispy		; y coordinate.
000600r 3  0A           	asl a
000601r 3  0A           	asl a
000602r 3  0A           	asl a			; multiply char by 8
000603r 3  A8           	tay
000604r 3               
000604r 3  18           	clc
000605r 3  A5 rr        	lda scraddr
000607r 3  79 00 07     	adc SCADTB_lb,y
00060Ar 3  85 rr        	sta scraddr
00060Cr 3  A5 rr        	lda scraddr+1
00060Er 3  79 00 08     	adc SCADTB_hb,y
000611r 3  85 rr        	sta scraddr+1
000613r 3               
000613r 3               
000613r 3               
000613r 3  A5 rr        	lda prtmod		; Double line if bigtxt
000615r 3  F0 08        	beq noskip
000617r 3  A5 rr        	lda dispx
000619r 3  29 E0        	and #$e0
00061Br 3  F0 02        	beq noskip
00061Dr 3  E6 rr        	inc scraddr+1
00061Fr 3               noskip:
00061Fr 3               
00061Fr 3  68           	pla
000620r 3  A8           	tay
000621r 3  60           	rts
000622r 3               ;--------------------------------------------------------------
000622r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000622r 3               ;
000622r 3               ; Output:
000622r 3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
000622r 3               ;--------------------------------------------------------------
000622r 3               
000622r 3               pradd:
000622r 3  A5 rr        	lda dispy 		; y coordinate.
000624r 3  85 rr        	sta bufaddr
000626r 3  A9 00        	lda #0
000628r 3  85 rr        	sta bufaddr+1
00062Ar 3  06 rr        	asl bufaddr  		; multiply char by 32
00062Cr 3  26 rr        	rol bufaddr+1
00062Er 3  06 rr        	asl bufaddr
000630r 3  26 rr        	rol bufaddr+1
000632r 3  06 rr        	asl bufaddr
000634r 3  26 rr        	rol bufaddr+1
000636r 3  06 rr        	asl bufaddr
000638r 3  26 rr        	rol bufaddr+1
00063Ar 3  06 rr        	asl bufaddr
00063Cr 3  26 rr        	rol bufaddr+1
00063Er 3  18           	clc			; add address of MAP graphics.
00063Fr 3  A5 rr        	lda bufaddr
000641r 3  65 rr        	adc dispx
000643r 3  69 00        	adc #<MAP
000645r 3  85 rr        	sta bufaddr
000647r 3  A5 rr        	lda bufaddr+1
000649r 3  69 04        	adc #>MAP
00064Br 3  85 rr        	sta bufaddr+1
00064Dr 3  60           	rts
00064Er 3               
00064Er 3               ;--------------------------------------------------------------
00064Er 3               ; Get attribute address at (dispx, dispy).
00064Er 3               ;
00064Er 3               ; Output:
00064Er 3               ;  bufaddr = COLOR + dispy*22 + dispx
00064Er 3               ;--------------------------------------------------------------
00064Er 3               
00064Er 3               gaadd:
00064Er 3  A5 rr        	lda dispy
000650r 3  4A           	lsr a
000651r 3  A8           	tay
000652r 3  B9 55 0A     	lda COLATTTB_hb,y
000655r 3  85 rr        	sta bufaddr+1
000657r 3  B9 4A 0A     	lda COLATTTB_lb,y
00065Ar 3  18           	clc
00065Br 3  65 rr        	adc dispx
00065Dr 3  85 rr        	sta bufaddr
00065Fr 3  60           	rts
000660r 3               
000660r 3               ;----------------------------------------------
000660r 3               ; Print attributes, properties and pixels.
000660r 3               ;
000660r 3               ; Input:
000660r 3               ;  A	= tile number
000660r 3               ;----------------------------------------------
000660r 3               
000660r 3               pbpattr:			; entry PUTBLOCK command
000660r 3  A4 rr        	ldy charx
000662r 3  84 rr        	sty dispx
000664r 3  A4 rr        	ldy chary
000666r 3  84 rr        	sty dispy
000668r 3               pattr:
000668r 3               .if aflag
000668r 3               	pha
000668r 3               	jsr wbloc		; save blockinfo
000668r 3               	pla
000668r 3               .endif
000668r 3               
000668r 3               pattr2:
000668r 3  85 rr        	sta z80_b		; store cell in b register for now.
00066Ar 3  AA           	tax
00066Br 3  BD rr rr     	lda bprop,x 		; block properties.
00066Er 3  85 rr        	sta z80_c
000670r 3  C9 08        	cmp #COLECT
000672r 3  D0 04        	bne :+
000674r 3  A5 rr        	lda z80_b
000676r 3  85 rr        	sta colpatt
000678r 3               :
000678r 3  20 rr rr     	jsr pradd 		; get property buffer address.
00067Br 3  A5 rr        	lda z80_c
00067Dr 3  A0 00        	ldy #0
00067Fr 3  91 rr        	sta (bufaddr),y 	; write property.
000681r 3  A5 rr        	lda z80_b 		; restore cell.
000683r 3  4C rr rr     	jmp panp
000686r 3               ; Print attributes, no properties.
000686r 3               
000686r 3               ;colpatt:	.byte 0
000686r 3               
000686r 3               panp:
000686r 3  85 rr        	sta z80_e		; displacement in e.
000688r 3  A9 00        	lda #0
00068Ar 3  85 rr        	sta z80_d		; no high byte.
00068Cr 3  06 rr        	asl z80_e  		; multiply char by 8.
00068Er 3  26 rr        	rol z80_d
000690r 3  06 rr        	asl z80_e
000692r 3  26 rr        	rol z80_d
000694r 3  06 rr        	asl z80_e
000696r 3  26 rr        	rol z80_d
000698r 3  18           	clc
000699r 3  A5 rr        	lda z80_e
00069Br 3  69 rr        	adc #<chgfx 		; address of graphics.
00069Dr 3  85 rr        	sta tileaddr
00069Fr 3  A5 rr        	lda z80_d
0006A1r 3  69 rr        	adc #>chgfx
0006A3r 3  85 rr        	sta tileaddr+1
0006A5r 3               
0006A5r 3  A6 rr        	ldx z80_b		; set colour attribute
0006A7r 3  BD rr rr     	lda bCol,x
0006AAr 3  48           	pha
0006ABr 3  20 rr rr     	jsr gaadd
0006AEr 3  A0 00        	ldy #0
0006B0r 3  68           	pla
0006B1r 3  91 rr        	sta (bufaddr),y
0006B3r 3               
0006B3r 3  20 rr rr     	jsr gprad 		; get screen address.
0006B6r 3  A2 07        	ldx #7			; number of pixel rows to write.
0006B8r 3               panp0:
0006B8r 3  A0 00        	ldy #0
0006BAr 3  B1 rr        	lda (tileaddr),y 	; get image byte.
0006BCr 3               .if iflag
0006BCr 3               	eor #$ff		; Invert
0006BCr 3               .endif
0006BCr 3  BC rr rr     	ldy scrtab,x
0006BFr 3  91 rr        	sta (scraddr),y 	; copy to screen.
0006C1r 3  E6 rr        	inc tileaddr 		; next image byte.
0006C3r 3  D0 02        	bne :+
0006C5r 3  E6 rr        	inc tileaddr+1
0006C7r 3               :
0006C7r 3  CA           	dex	 		; repeat for 8 pixel rows.
0006C8r 3  10 EE        	bpl panp0
0006CAr 3  E6 rr        	inc dispx 		; move along one.
0006CCr 3  E6 rr        	inc charx
0006CEr 3  60           	rts
0006CFr 3               
0006CFr 3               ;----------------------------------------------
0006CFr 3               ; Write block
0006CFr 3               ;----------------------------------------------
0006CFr 3               
0006CFr 3               .if aflag
0006CFr 3               wbloc:
0006CFr 3               	ldy #3
0006CFr 3               	sta (pbptr),y		; store block number
0006CFr 3               	dey
0006CFr 3               	lda dispx
0006CFr 3               	sta (pbptr),y		; write x position of block.
0006CFr 3               	dey
0006CFr 3               	lda dispy
0006CFr 3               	sta (pbptr),y		; write y position of block.
0006CFr 3               	dey
0006CFr 3               	lda scno
0006CFr 3               	sta (pbptr),y		; write screen.
0006CFr 3               	clc			; point to next free location
0006CFr 3               	lda pbptr
0006CFr 3               	adc #4
0006CFr 3               	sta pbptr
0006CFr 3               	bcc :+
0006CFr 3               	inc pbptr+1
0006CFr 3               :
0006CFr 3               	rts
0006CFr 3               .endif
0006CFr 3               
0006CFr 3               ;.if kflag
0006CFr 3               ;panp:
0006CFr 3               ;.endif
0006CFr 3               
0006CFr 3               ;----------------------------------------------
0006CFr 3               ; Print character pixels, no more.
0006CFr 3               ;
0006CFr 3               ; Input:
0006CFr 3               ;  A	= character to print
0006CFr 3               ;----------------------------------------------
0006CFr 3               
0006CFr 3               pchr:
0006CFr 3  20 rr rr     	jsr pchar 		; show character in accumulator.
0006D2r 3  E6 rr        	inc dispx		; move along one.
0006D4r 3  60           	rts
0006D5r 3               
0006D5r 3               ;----------------------------------------------------
0006D5r 3               ; Shifter sprite routine for objects.
0006D5r 3               ;----------------------------------------------------
0006D5r 3               
0006D5r 3               .if oflag
0006D5r 3               sprit7:
0006D5r 3  A5 rr        	lda z80_b
0006D7r 3  F0 0C        	beq sprit0
0006D9r 3  85 rr        	sta z80_a
0006DBr 3               sprit3:
0006DBr 3  46 rr        	lsr spr			; shift into position.
0006DDr 3  66 rr        	ror spr+1
0006DFr 3  66 rr        	ror spr+2
0006E1r 3  C6 rr        	dec z80_a		; one less iteration.
0006E3r 3  D0 F6        	bne sprit3
0006E5r 3               sprit0:
0006E5r 3  60           	rts 			; now apply to screen.
0006E6r 3               .endif
0006E6r 3               
0006E6r 3               ;-----------------------------------------------------------
0006E6r 3               ; Get room address.
0006E6r 3               ;-----------------------------------------------------------
0006E6r 3               
0006E6r 3               groom:
0006E6r 3  A6 rr        	ldx scno 		; screen number.
0006E8r 3  A0 00        	ldy #0
0006EAr 3               groomx:
0006EAr 3  A9 rr        	lda #<scdat 		; pointer to screens.
0006ECr 3  85 rr        	sta z80_l
0006EEr 3  A9 rr        	lda #>scdat
0006F0r 3  85 rr        	sta z80_h
0006F2r 3               groom1:
0006F2r 3  E0 00        	cpx #0			; is it the first one?
0006F4r 3  F0 15        	beq groom0 		; no more screens to skip.
0006F6r 3               
0006F6r 3  18           	clc
0006F7r 3  A5 rr        	lda z80_l
0006F9r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0006FCr 3  85 rr        	sta z80_l
0006FEr 3  C8           	iny			; point to high byte.
0006FFr 3  A5 rr        	lda z80_h
000701r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000704r 3  85 rr        	sta z80_h
000706r 3  C8           	iny			; next address.
000707r 3               
000707r 3  CA           	dex 			; one less iteration.
000708r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
00070Br 3               groom0:
00070Br 3  AD rr rr     	lda numsc		; add displacement.
00070Er 3  0A           	asl a
00070Fr 3  18           	clc			; add double displacement to address.
000710r 3  65 rr        	adc z80_l
000712r 3  85 rr        	sta z80_l
000714r 3  A5 rr        	lda z80_h
000716r 3  69 00        	adc #0
000718r 3  85 rr        	sta z80_h
00071Ar 3  60           	rts
00071Br 3               
00071Br 3               ;-----------------------------------------------------------
00071Br 3               ; Draw present room.
00071Br 3               ;-----------------------------------------------------------
00071Br 3               
00071Br 3               droom:
00071Br 3  AD rr rr     	lda wintop 		; window top.
00071Er 3  85 rr        	sta dispy		; set cursor y position.
000720r 3               droom2:
000720r 3  20 rr rr     	jsr groom 		; get address of current room.
000723r 3  A9 00        	lda #0	 		; zero in accumulator.
000725r 3  85 rr        	sta comcnt 		; reset compression counter.
000727r 3  AD rr rr     	lda winhgt 		; height of window.
00072Ar 3  85 rr        	sta rrow		; set row counter
00072Cr 3               droom0:
00072Cr 3  AD rr rr     	lda winlft 		; window left edge.
00072Fr 3  85 rr        	sta dispx 		; set cursor x position.
000731r 3  AD rr rr     	lda winwid 		; width of window.
000734r 3  85 rr        	sta rcol		; set column counter
000736r 3               droom1:
000736r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000739r 3               .if xflag
000739r 3               	jsr drwmeta
000739r 3               .else
000739r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
00073Cr 3               .endif
00073Cr 3  C6 rr        	dec rcol		; one less column.
00073Er 3  D0 F6        	bne droom1 		; repeat for entire line.
000740r 3  E6 rr        	inc dispy		; move down one line.
000742r 3               .if xflag
000742r 3               	inc dispy		; move down one line.
000742r 3               .endif
000742r 3  C6 rr        	dec rrow 		; one less row.
000744r 3  D0 E6        	bne droom0 		; repeat for all rows.
000746r 3  60           	rts
000747r 3               
000747r 3               ;----------------------------------------------
000747r 3               ; Decompress bytes on-the-fly.
000747r 3               ;----------------------------------------------
000747r 3               
000747r 3               flbyt:
000747r 3  A5 rr        	lda comcnt 		; compression counter.
000749r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
00074Br 3               
00074Br 3  A0 00        	ldy #0
00074Dr 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
00074Fr 3  E6 rr        	inc z80_l 		; point to next cell.
000751r 3  D0 02        	bne :+
000753r 3  E6 rr        	inc z80_h
000755r 3               :
000755r 3  C9 FF        	cmp #255 		; is this byte a control code?
000757r 3  F0 01        	beq :+
000759r 3  60           	rts 			; no, this byte is uncompressed.
00075Ar 3               :
00075Ar 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
00075Cr 3  85 rr        	sta combyt 		; set up the type.
00075Er 3  E6 rr        	inc z80_l 		; point to quantity.
000760r 3  D0 02        	bne :+
000762r 3  E6 rr        	inc z80_h
000764r 3               :
000764r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000766r 3  E6 rr        	inc z80_l 		; point to next byte.
000768r 3  D0 02        	bne :+
00076Ar 3  E6 rr        	inc z80_h
00076Cr 3               :
00076Cr 3               flbyt1:
00076Cr 3  85 rr        	sta comcnt 		; store new quantity.
00076Er 3  C6 rr        	dec comcnt		; one less.
000770r 3  A5 rr        	lda combyt 		; byte to expand.
000772r 3  60           	rts
000773r 3               
000773r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000773r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000773r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000773r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000773r 3               .if xflag
000773r 3               drwmeta:
000773r 3               	sta tmpblk
000773r 3               	jsr pattr2
000773r 3               
000773r 3               	inc dispy
000773r 3               	dec dispx
000773r 3               	ldx tmpblk
000773r 3               	beq :+
000773r 3               	inx
000773r 3               :
000773r 3               	txa
000773r 3               	jsr pattr2
000773r 3               
000773r 3               	ldx tmpblk
000773r 3               	beq :+
000773r 3               	inx
000773r 3               	inx
000773r 3               	inx
000773r 3               :
000773r 3               	txa
000773r 3               	jsr pattr2
000773r 3               
000773r 3               	dec dispy
000773r 3               	dec dispx
000773r 3               	ldx tmpblk
000773r 3               	beq :+
000773r 3               	inx
000773r 3               	inx
000773r 3               :
000773r 3               	txa
000773r 3               	jsr pattr2
000773r 3               	rts
000773r 3               
000773r 3               tmpblk:	.byte 0
000773r 3               
000773r 3               .endif
000773r 3               
000773r 3               ;------------------------------------------
000773r 3               ; Ladder down check.
000773r 3               ;
000773r 3               ; Input:
000773r 3               ;  IX = sprite pointer
000773r 3               ;------------------------------------------
000773r 3               
000773r 3               .if lflag
000773r 3               laddd:
000773r 3  A0 09        	ldy #9
000775r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000777r 3  85 rr        	sta dispx
000779r 3               
000779r 3  A0 08        	ldy #8
00077Br 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00077Dr 3  29 FE        	and #254		; make it even.
00077Fr 3  91 rr        	sta (z80_ix),y 		; reset it.
000781r 3  18           	clc 			; look down 16 pixels.
000782r 3               numsp5:
000782r 3  69 10        	adc #SPR_HGT
000784r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000786r 3  4C rr rr     	jmp laddv
000789r 3               
000789r 3               ;------------------------------------------
000789r 3               ; Ladder up check.
000789r 3               ;
000789r 3               ; Input:
000789r 3               ;  IX = sprite pointer
000789r 3               ;
000789r 3               ; Output:
000789r 3               ;  A  = 0 is ok, A <>0 is not ok
000789r 3               ;------------------------------------------
000789r 3               
000789r 3               laddu:
000789r 3  A0 09        	ldy #9
00078Br 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00078Dr 3  85 rr        	sta dispx
00078Fr 3               
00078Fr 3  A0 08        	ldy #8
000791r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000793r 3  29 FE        	and #254 		; make it even.
000795r 3  91 rr        	sta (z80_ix),y		; reset it.
000797r 3  18           	clc 			; look 2 pixels above feet.
000798r 3               numsp6:
000798r 3  69 0E        	adc #SPR_HGT-2
00079Ar 3  85 rr        	sta dispy		; coords in dispx,dispy.
00079Cr 3               laddv:
00079Cr 3  20 rr rr     	jsr tstbl 		; get map address.
00079Fr 3  20 rr rr     	jsr ldchk 		; standard ladder check.
0007A2r 3  F0 01        	beq :+
0007A4r 3  60           	rts 			; no way through.
0007A5r 3               :
0007A5r 3  E6 rr        	inc bufaddr 		; look right one cell.
0007A7r 3  D0 02        	bne :+
0007A9r 3  E6 rr        	inc bufaddr+1
0007ABr 3               :
0007ABr 3  20 rr rr     	jsr ldchk 		; do the check.
0007AEr 3  F0 01        	beq :+
0007B0r 3  60           	rts 			; impassable.
0007B1r 3               :
0007B1r 3  A5 rr        	lda dispx 		; y coordinate.
0007B3r 3  29 07        	and #7 			; position straddling block cells.
0007B5r 3  D0 01        	bne :+
0007B7r 3  60           	rts 			; no more checks needed.
0007B8r 3               :
0007B8r 3  E6 rr        	inc bufaddr 		; look to third cell.
0007BAr 3  D0 02        	bne :+
0007BCr 3  E6 rr        	inc bufaddr+1
0007BEr 3               :
0007BEr 3  20 rr rr     	jsr ldchk 		; do the check.
0007C1r 3  60           	rts  			; return with zero flag set accordingly.
0007C2r 3               .endif
0007C2r 3               
0007C2r 3               ;---------------------------------------------------------
0007C2r 3               ; Can go up check.
0007C2r 3               ;
0007C2r 3               ; Input:
0007C2r 3               ;  IX = sprite pointer
0007C2r 3               ;
0007C2r 3               ; Output:
0007C2r 3               ;  A  = 0 is ok, A <>0 is not ok
0007C2r 3               ;---------------------------------------------------------
0007C2r 3               
0007C2r 3               cangu:
0007C2r 3  A0 09        	ldy #9
0007C4r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0007C6r 3  85 rr        	sta dispx
0007C8r 3  A0 08        	ldy #8
0007CAr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0007CCr 3  38           	sec
0007CDr 3  E9 02        	sbc #2
0007CFr 3  85 rr        	sta dispy		; coords in dispx,dispy.
0007D1r 3  20 rr rr     	jsr tstbl 		; get map address.
0007D4r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
0007D7r 3  F0 01        	beq :+
0007D9r 3  60           	rts			; no way through.
0007DAr 3               :
0007DAr 3  E6 rr        	inc bufaddr		; look right one cell.
0007DCr 3  D0 02        	bne :+
0007DEr 3  E6 rr        	inc bufaddr+1
0007E0r 3               :
0007E0r 3  20 rr rr     	jsr lrchk 		; do the check.
0007E3r 3  F0 01        	beq :+
0007E5r 3  60           	rts			; impassable.
0007E6r 3               :
0007E6r 3  A5 rr        	lda dispx		; x coordinate.
0007E8r 3  29 07        	and #7			; position straddling block cells.
0007EAr 3  D0 01        	bne :+
0007ECr 3  60           	rts			; no more checks needed.
0007EDr 3               :
0007EDr 3  E6 rr        	inc bufaddr		; look to third cell.
0007EFr 3  D0 02        	bne :+
0007F1r 3  E6 rr        	inc bufaddr+1
0007F3r 3               :
0007F3r 3  20 rr rr     	jsr lrchk		; do the check.
0007F6r 3  60           	rts 			; return with zero flag set accordingly.
0007F7r 3               
0007F7r 3               ;---------------------------------------------------------
0007F7r 3               ; Can go down check.
0007F7r 3               ;
0007F7r 3               ; Input:
0007F7r 3               ;  IX = sprite pointer
0007F7r 3               ;
0007F7r 3               ; Output:
0007F7r 3               ;  A  = 0 is ok, A <>0 is not ok
0007F7r 3               ;---------------------------------------------------------
0007F7r 3               
0007F7r 3               cangd:
0007F7r 3  A0 09        	ldy #9
0007F9r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0007FBr 3  85 rr        	sta dispx
0007FDr 3  A0 08        	ldy #8
0007FFr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000801r 3  18           	clc
000802r 3               numsp3:
000802r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000804r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000806r 3  20 rr rr     	jsr tstbl 		; get map address.
000809r 3  20 rr rr     	jsr plchk 		; block, platform check.
00080Cr 3  F0 01        	beq :+
00080Er 3  60           	rts			; no way through.
00080Fr 3               :
00080Fr 3  E6 rr        	inc bufaddr		; look right one cell.
000811r 3  D0 02        	bne :+
000813r 3  E6 rr        	inc bufaddr+1
000815r 3               :
000815r 3  20 rr rr     	jsr plchk		; block, platform check.
000818r 3  F0 01        	beq :+
00081Ar 3  60           	rts			; impassable.
00081Br 3               :
00081Br 3  A5 rr        	lda dispx		; x coordinate.
00081Dr 3  29 07        	and #7			; position straddling block cells.
00081Fr 3  D0 01        	bne :+
000821r 3  60           	rts			; no more checks needed.
000822r 3               :
000822r 3  E6 rr        	inc bufaddr		; look to third cell.
000824r 3  D0 02        	bne :+
000826r 3  E6 rr        	inc bufaddr+1
000828r 3               :
000828r 3  20 rr rr     	jsr plchk		; block, platform check.
00082Br 3  60           	rts			; return with zero flag set accordingly.
00082Cr 3               
00082Cr 3               ;---------------------------------------------------------
00082Cr 3               ; Can go left check.
00082Cr 3               ;
00082Cr 3               ; Input:
00082Cr 3               ;  IX = sprite pointer
00082Cr 3               ;
00082Cr 3               ; Output:
00082Cr 3               ;  A  = 0 is ok, A <>0 is not ok
00082Cr 3               ;---------------------------------------------------------
00082Cr 3               
00082Cr 3               cangl:
00082Cr 3  A0 08        	ldy #8
00082Er 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000830r 3  85 rr        	sta dispy
000832r 3  A0 09        	ldy #9
000834r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000836r 3  38           	sec
000837r 3  E9 02        	sbc #2			; look left 2 pixels.
000839r 3  85 rr        	sta dispx		; coords in dispx,dispy.
00083Br 3  4C rr rr     	jmp cangh		; test if we can go there.
00083Er 3               
00083Er 3               ;---------------------------------------------------------
00083Er 3               ; Can go right check.
00083Er 3               ;
00083Er 3               ; Input:
00083Er 3               ;  IX = sprite pointer
00083Er 3               ;
00083Er 3               ; Output:
00083Er 3               ;  A  = 0 is ok, A <>0 is not ok
00083Er 3               ;---------------------------------------------------------
00083Er 3               
00083Er 3               cangr:
00083Er 3  A0 08        	ldy #8
000840r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000842r 3  85 rr        	sta dispy
000844r 3  A0 09        	ldy #9
000846r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000848r 3  18           	clc
000849r 3  69 10        	adc #16			; look right 16 pixels.
00084Br 3  85 rr        	sta dispx		; coords in dispx,dispy.
00084Dr 3               cangh:
00084Dr 3               cangh2:
00084Dr 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
00084Fr 3  85 rr        	sta z80_b
000851r 3  A5 rr        	lda dispy		; y position.
000853r 3  29 07        	and #7			; does x straddle cells?
000855r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000857r 3  C6 rr        	dec z80_b		; one less row to write.
000859r 3               cangh0:
000859r 3  20 rr rr     	jsr tstbl		; get map address.
00085Cr 3               cangh1:
00085Cr 3  20 rr rr     	jsr lrchk		; standard left/right check.
00085Fr 3  F0 01        	beq :+
000861r 3  60           	rts			; no way through.
000862r 3               :
000862r 3  48           	pha
000863r 3  18           	clc
000864r 3  A5 rr        	lda bufaddr
000866r 3  69 20        	adc #32			; look down.
000868r 3  85 rr        	sta bufaddr
00086Ar 3  90 02        	bcc :+
00086Cr 3  E6 rr        	inc bufaddr+1
00086Er 3               :
00086Er 3  68           	pla
00086Fr 3               
00086Fr 3  C6 rr        	dec z80_b
000871r 3  D0 E9        	bne cangh1
000873r 3  60           	rts
000874r 3               
000874r 3               ;-------------------------------------
000874r 3               ; Check left/right movement is okay.
000874r 3               ;
000874r 3               ; Input:
000874r 3               ;  bufaddr = MAP + x/8 + y/8*32
000874r 3               ;
000874r 3               ; Output:
000874r 3               ;  A  = 0 is ok, A <>0 is not ok
000874r 3               ;-------------------------------------
000874r 3               
000874r 3               lrchk:
000874r 3  A0 00        	ldy #0
000876r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000878r 3  C9 02        	cmp #WALL 		; is it passable?
00087Ar 3  F0 0A        	beq lrchkx		; no.
00087Cr 3               
00087Cr 3  C9 04        	cmp #FODDER		; fodder has to be dug.
00087Er 3  F0 06        	beq lrchkx		; not passable.
000880r 3  A9 00        	lda #0
000882r 3  60           	rts
000883r 3               
000883r 3               ;--------------------------------------------------------------
000883r 3               ; Called by mmenu
000883r 3               ;--------------------------------------------------------------
000883r 3               
000883r 3               always:
000883r 3  A9 FF        	lda #255		; report it as okay.
000885r 3  60           	rts
000886r 3               
000886r 3               lrchkx:
000886r 3  A9 01        	lda #1 			; reset all bits.
000888r 3  60           	rts
000889r 3               
000889r 3               
000889r 3               ;--------------------------------------------------------------
000889r 3               ; Check platform or solid item is not in way.
000889r 3               ;
000889r 3               ; Input:
000889r 3               ;  bufaddr = MAP + x/8 + y/8*32
000889r 3               ;
000889r 3               ; Output:
000889r 3               ;  A  = 0 is ok, A <>0 is not ok
000889r 3               ;--------------------------------------------------------------
000889r 3               
000889r 3               plchk:
000889r 3  A0 00        	ldy #0
00088Br 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
00088Dr 3  C9 02        	cmp #WALL 		; is it passable?
00088Fr 3  F0 F5        	beq lrchkx		; no.
000891r 3               .if pflag .or dflag
000891r 3               	cmp #FODDER		; fodder has to be dug.
000891r 3               	beq lrchkx		; not passable.
000891r 3               .endif
000891r 3  C9 01        	cmp #PLATFM		; platform is solid.
000893r 3  F0 07        	beq plchkx		; not passable.
000895r 3               .if lflag
000895r 3  C9 03        	cmp #LADDER		; is it a ladder?
000897r 3  F0 ED        	beq lrchkx		; on ladder, deny movement.
000899r 3               .endif
000899r 3               plchk0:
000899r 3  A9 00        	lda #0			; report as ok
00089Br 3  60           	rts
00089Cr 3               plchkx:
00089Cr 3  A5 rr        	lda dispy		; x coordinate.
00089Er 3  29 07        	and #7			; position straddling blocks.
0008A0r 3  F0 E4        	beq lrchkx		; on platform, deny movement.
0008A2r 3  4C rr rr     	jmp plchk0
0008A5r 3               
0008A5r 3               ;--------------------------------------------------------------
0008A5r 3               ; Check ladder is available.
0008A5r 3               ;
0008A5r 3               ; Input:
0008A5r 3               ;  bufaddr = MAP + x/8 + y/8*32
0008A5r 3               ;
0008A5r 3               ; Output:
0008A5r 3               ;  A  = 0 is ok, A <>0 is not ok
0008A5r 3               ;--------------------------------------------------------------
0008A5r 3               
0008A5r 3               .if lflag
0008A5r 3               ldchk:
0008A5r 3  A0 00        	ldy #0
0008A7r 3  B1 rr        	lda (bufaddr),y 	; fetch cell.
0008A9r 3  C9 03        	cmp #LADDER 		; is it a ladder?
0008ABr 3  F0 03        	beq ldchk1
0008ADr 3  A9 01        	lda #1
0008AFr 3  60           	rts  			; return with zero flag set accordingly.
0008B0r 3               ldchk1:
0008B0r 3  A9 00        	lda #0
0008B2r 3  60           	rts
0008B3r 3               .endif
0008B3r 3               
0008B3r 3               ;--------------------------------------------------------------
0008B3r 3               ; Get collectables.
0008B3r 3               ;--------------------------------------------------------------
0008B3r 3               
0008B3r 3               .if cflag
0008B3r 3               getcol:
0008B3r 3                       lda #COLECT             ; collectable blocks.
0008B3r 3                       sta z80_b
0008B3r 3                       jsr tded                ; test for collectable blocks.
0008B3r 3                       cmp z80_b               ; did we find one?
0008B3r 3                       beq :+
0008B3r 3                       rts                     ; none were found, job done.
0008B3r 3               :
0008B3r 3                       jsr gtblk               ; get block.
0008B3r 3                       jsr evnt20              ; collected block event.
0008B3r 3                       jmp getcol              ; repeat until none left.
0008B3r 3               
0008B3r 3               ; Get collectable block.
0008B3r 3               
0008B3r 3               gtblk:
0008B3r 3               	ldy #0
0008B3r 3               	lda (bufaddr),y
0008B3r 3               	sta z80_a
0008B3r 3                       lda #0
0008B3r 3                       sta (bufaddr),y		; make it empty now.
0008B3r 3               
0008B3r 3               	lda bufaddr		; set dispx
0008B3r 3               	and #31
0008B3r 3               	sta dispx
0008B3r 3               
0008B3r 3               	lda bufaddr+1		; Set dispy
0008B3r 3               	sec
0008B3r 3               	sbc #>MAP
0008B3r 3               	sta bufaddr+1
0008B3r 3               	asl bufaddr
0008B3r 3               	rol bufaddr+1
0008B3r 3               	asl bufaddr
0008B3r 3               	rol bufaddr+1
0008B3r 3               	asl bufaddr
0008B3r 3               	rol bufaddr+1
0008B3r 3               	lda bufaddr+1
0008B3r 3               	sta dispy
0008B3r 3               
0008B3r 3               	lda colpatt		; get blocknr
0008B3r 3               	sta z80_e		; displacement in e.
0008B3r 3               	lda #0
0008B3r 3               	sta z80_d		; no high byte.
0008B3r 3               	asl z80_e  		; multiply char by 8.
0008B3r 3               	rol z80_d
0008B3r 3               	asl z80_e
0008B3r 3               	rol z80_d
0008B3r 3               	asl z80_e
0008B3r 3               	rol z80_d
0008B3r 3               	clc
0008B3r 3               	lda z80_e
0008B3r 3               	adc #<chgfx 		; address of graphics.
0008B3r 3               	sta tileaddr
0008B3r 3               	lda z80_d
0008B3r 3               	adc #>chgfx
0008B3r 3               	sta tileaddr+1
0008B3r 3               	jsr gprad 		; get screen address.
0008B3r 3               	ldx #7			; number of pixel rows to write.
0008B3r 3               gtblk0:
0008B3r 3               	ldy #0
0008B3r 3               	lda (tileaddr),y 	; get image byte.
0008B3r 3               	ldy scrtab,x
0008B3r 3               	eor (scraddr),y 	; XOR tile on screen
0008B3r 3               	sta (scraddr),y 	; copy to screen.
0008B3r 3               	inc tileaddr 		; next image byte.
0008B3r 3               	bne :+
0008B3r 3               	inc tileaddr+1
0008B3r 3               :
0008B3r 3               	dex	 		; repeat for 8 pixel rows.
0008B3r 3               	bpl gtblk0
0008B3r 3               	rts
0008B3r 3               .endif
0008B3r 3               
0008B3r 3               ;--------------------------------------------------------------
0008B3r 3               ; Touched deadly block check.
0008B3r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0008B3r 3               ;
0008B3r 3               ; Input:
0008B3r 3               ;  IX = sprite address
0008B3r 3               ;
0008B3r 3               ; Output:
0008B3r 3               ;  A  = 0 is ok, A=5 is not ok
0008B3r 3               ;--------------------------------------------------------------
0008B3r 3               
0008B3r 3               tded:
0008B3r 3  A0 08        	ldy #8
0008B5r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0008B7r 3  85 rr        	sta dispy
0008B9r 3  C8           	iny
0008BAr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0008BCr 3  85 rr        	sta dispx		; coords in dispx,dispy.
0008BEr 3  20 rr rr     	jsr tstbl		; get map address.
0008C1r 3  48           	pha
0008C2r 3  A9 1F        	lda #31			; default distance to next line down.
0008C4r 3  85 rr        	sta z80_e
0008C6r 3  68           	pla
0008C7r 3  C5 rr        	cmp z80_b		; is this the required block?
0008C9r 3  D0 01        	bne :+
0008CBr 3  60           	rts			; yes.
0008CCr 3               :
0008CCr 3  E6 rr        	inc bufaddr 		; next cell.
0008CEr 3  D0 02        	bne :+
0008D0r 3  E6 rr        	inc bufaddr+1
0008D2r 3               :
0008D2r 3  A0 00        	ldy #0
0008D4r 3  B1 rr        	lda (bufaddr),y		; fetch type.
0008D6r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
0008D8r 3  D0 01        	bne :+
0008DAr 3  60           	rts			; yes.
0008DBr 3               :
0008DBr 3  A5 rr        	lda dispx		; horizontal position.
0008DDr 3  85 rr        	sta z80_c 		; store column in c register.
0008DFr 3  29 07        	and #7			; is it straddling cells?
0008E1r 3  D0 03        	bne :+
0008E3r 3  4C rr rr     	jmp tded0		; no.
0008E6r 3               :
0008E6r 3  E6 rr        	inc bufaddr 		; last cell.
0008E8r 3  D0 02        	bne :+
0008EAr 3  E6 rr        	inc bufaddr+1
0008ECr 3               :
0008ECr 3  A0 00        	ldy #0
0008EEr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0008F0r 3  C5 rr        	cmp z80_b		; is this the block?
0008F2r 3  D0 01        	bne :+
0008F4r 3  60           	rts			; yes.
0008F5r 3               :
0008F5r 3  C6 rr        	dec z80_e		; one less cell to next row down.
0008F7r 3               tded0:
0008F7r 3  18           	clc 			; point to next row.
0008F8r 3  A5 rr        	lda bufaddr
0008FAr 3  65 rr        	adc z80_e
0008FCr 3  85 rr        	sta bufaddr
0008FEr 3  90 02        	bcc :+
000900r 3  E6 rr        	inc bufaddr+1
000902r 3               :
000902r 3  A0 00        	ldy #0
000904r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000906r 3  C5 rr        	cmp z80_b		; is this fatal?
000908r 3  D0 01        	bne :+
00090Ar 3  60           	rts			; yes.
00090Br 3               :
00090Br 3  E6 rr        	inc bufaddr 		; next cell.
00090Dr 3  D0 02        	bne :+
00090Fr 3  E6 rr        	inc bufaddr+1
000911r 3               :
000911r 3  A0 00        	ldy #0
000913r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000915r 3  C5 rr        	cmp z80_b		; is this fatal?
000917r 3  D0 01        	bne :+
000919r 3  60           	rts			; yes.
00091Ar 3               :
00091Ar 3  A5 rr        	lda z80_c		; horizontal position.
00091Cr 3  29 07        	and #7			; is it straddling cells?
00091Er 3  D0 03        	bne :+
000920r 3  4C rr rr     	jmp tded1 		; no.
000923r 3               :
000923r 3  E6 rr        	inc bufaddr		; last cell.
000925r 3  D0 02        	bne :+
000927r 3  E6 rr        	inc bufaddr+1
000929r 3               :
000929r 3  A0 00        	ldy #0
00092Br 3  B1 rr        	lda (bufaddr),y		; fetch type.
00092Dr 3  C5 rr        	cmp z80_b		; is this fatal?
00092Fr 3  D0 01        	bne :+
000931r 3  60           	rts			; yes.
000932r 3               :
000932r 3               tded1:
000932r 3  A5 rr        	lda dispy		; vertical position.
000934r 3  29 07        	and #7 			; is it straddling cells?
000936r 3  D0 01        	bne :+
000938r 3  60           	rts			; no, job done.
000939r 3               :
000939r 3  18           	clc			; point to next row.
00093Ar 3  A5 rr        	lda bufaddr
00093Cr 3  65 rr        	adc z80_e
00093Er 3  85 rr        	sta bufaddr
000940r 3  90 02        	bcc :+
000942r 3  E6 rr        	inc bufaddr+1
000944r 3               :
000944r 3  A0 00        	ldy #0
000946r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000948r 3  C5 rr        	cmp z80_b		; is this fatal?
00094Ar 3  D0 01        	bne :+
00094Cr 3  60           	rts			; yes.
00094Dr 3               :
00094Dr 3  E6 rr        	inc bufaddr		; next cell.
00094Fr 3  D0 02        	bne :+
000951r 3  E6 rr        	inc bufaddr+1
000953r 3               :
000953r 3  A0 00        	ldy #0
000955r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000957r 3  C5 rr        	cmp z80_b		; is this fatal?
000959r 3  D0 01        	bne :+
00095Br 3  60           	rts			; yes.
00095Cr 3               :
00095Cr 3  A5 rr        	lda z80_c		; horizontal position.
00095Er 3  29 07        	and #7			; is it straddling cells?
000960r 3  D0 01        	bne :+
000962r 3  60           	rts			; no.
000963r 3               :
000963r 3  E6 rr        	inc bufaddr		; last cell.
000965r 3  D0 02        	bne :+
000967r 3  E6 rr        	inc bufaddr+1
000969r 3               :
000969r 3  A0 00        	ldy #0
00096Br 3  B1 rr        	lda (bufaddr),y		; fetch final type.
00096Dr 3  60           	rts 			; return with final type in accumulator.
00096Er 3               
00096Er 3               ;---------------------------------------------------
00096Er 3               ; Fetch block type at (dispx, dispy).
00096Er 3               ;
00096Er 3               ; Output:
00096Er 3               ;  A = block type
00096Er 3               ;---------------------------------------------------
00096Er 3               
00096Er 3               tstbl:
00096Er 3  A5 rr        	lda dispy 		; fetch y coord.
000970r 3  4A           	lsr a			; bufaddr = y/8
000971r 3  4A           	lsr a
000972r 3  4A           	lsr a
000973r 3               ;	sta chary
000973r 3               
000973r 3  85 rr        	sta bufaddr
000975r 3  A9 00        	lda #0
000977r 3  85 rr        	sta bufaddr+1
000979r 3               
000979r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
00097Br 3  26 rr        	rol bufaddr+1
00097Dr 3  06 rr        	asl bufaddr
00097Fr 3  26 rr        	rol bufaddr+1
000981r 3  06 rr        	asl bufaddr
000983r 3  26 rr        	rol bufaddr+1
000985r 3  06 rr        	asl bufaddr
000987r 3  26 rr        	rol bufaddr+1
000989r 3  06 rr        	asl bufaddr
00098Br 3  26 rr        	rol bufaddr+1
00098Dr 3               
00098Dr 3  A5 rr        	lda dispx		; x/8
00098Fr 3  4A           	lsr a
000990r 3  4A           	lsr a
000991r 3  4A           	lsr a
000992r 3               ;	sta charx
000992r 3               
000992r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000993r 3  65 rr        	adc bufaddr
000995r 3  69 00        	adc #<MAP
000997r 3  85 rr        	sta bufaddr
000999r 3  A5 rr        	lda bufaddr+1
00099Br 3  69 04        	adc #>MAP
00099Dr 3  85 rr        	sta bufaddr+1
00099Fr 3               
00099Fr 3  A0 00        	ldy #0
0009A1r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0009A3r 3  60           	rts
0009A4r 3               
0009A4r 3               ;-------------------------------------------------------------------
0009A4r 3               ; Jump - if we can.
0009A4r 3               ; Requires initial speed to be set up in accumulator prior to call.
0009A4r 3               ;
0009A4r 3               ; Input:
0009A4r 3               ;  IX = sprite address
0009A4r 3               ;-------------------------------------------------------------------
0009A4r 3               
0009A4r 3               jump:
0009A4r 3  A0 0D        	ldy #var_jumpLo
0009A6r 3  B1 rr        	lda (z80_ix),y		; jump table low.
0009A8r 3  A0 0E        	ldy #var_jumpHi
0009AAr 3  11 rr        	ora (z80_ix),y		; jump table high.
0009ACr 3  F0 01        	beq :+
0009AEr 3  60           	rts			; already in the air.
0009AFr 3               :
0009AFr 3  A9 rr        	lda #>jtab
0009B1r 3  A0 0E        	ldy #var_jumpHi
0009B3r 3  91 rr        	sta (z80_ix),y		; set jump high.
0009B5r 3  A9 rr        	lda #<jtab		; jump table start.
0009B7r 3  A0 0D        	ldy #var_jumpLo
0009B9r 3  91 rr        	sta (z80_ix),y		; set jump low.
0009BBr 3  60           	rts
0009BCr 3               
0009BCr 3               ; Jump table.
0009BCr 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
0009BCr 3               ;.align 32
0009BCr 3               ;jtab:
0009BCr 3               ;	.byte 248,250,252
0009BCr 3               ;	.byte 254,254,255
0009BCr 3               ;	.byte 255,255,0,0
0009BCr 3               ;	.byte 0,1,1,1,2,2
0009BCr 3               ;	.byte 4,6,8,8,8,99
0009BCr 3               
0009BCr 3               ;------------------------------------------------
0009BCr 3               ; Random numbers code.
0009BCr 3               ; Pseudo-random number generator, 8-bit.
0009BCr 3               ;
0009BCr 3               ; Output:
0009BCr 3               ;  RND = random number
0009BCr 3               ;------------------------------------------------
0009BCr 3               
0009BCr 3               random:
0009BCr 3  A5 rr        	lda seed
0009BEr 3  F0 05        	beq doEor
0009C0r 3  0A           	asl a
0009C1r 3  F0 04        	beq noEor
0009C3r 3  90 02        	bcc noEor
0009C5r 3  49 1D        doEor:	eor #$1d
0009C7r 3  85 rr        noEor:	sta seed
0009C9r 3  60           	rts
0009CAr 3               
0009CAr 3  A5 rr        	lda seed		; get last random number.
0009CCr 3  0A           	asl a
0009CDr 3  0A           	asl a
0009CEr 3  18           	clc
0009CFr 3  65 rr        	adc seed
0009D1r 3  18           	clc
0009D2r 3  69 45        	adc #$45
0009D4r 3  85 rr        	sta seed		; store new seed.
0009D6r 3  85 rr        	sta varrnd		; return number in variable.
0009D8r 3  60           	rts
0009D9r 3               
0009D9r 3               ;-------------------------------------------------------
0009D9r 3               ; Joystick and keyboard reading routines.
0009D9r 3               ;
0009D9r 3               ; contrl = 0, Keyboard
0009D9r 3               ;          1, JoyKeyb
0009D9r 3               ;          2, JoyMMC
0009D9r 3               ;
0009D9r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
0009D9r 3               ;             ||||||||
0009D9r 3               ;             |||||||+> Right    KEY 0  - X
0009D9r 3               ;             ||||||+-> Left     KEY 1  - Z
0009D9r 3               ;             |||||+--> Down     KEY 2  - .
0009D9r 3               ;             ||||+---> Up       KEY 3  - ;
0009D9r 3               ;             |||+----> Fire1    KEY 4  - SPC
0009D9r 3               ;             ||+-----> Fire2    KEY 5  - Q
0009D9r 3               ;             |+------> Fire3    KEY 6  - P
0009D9r 3               ;             +-------> Not used
0009D9r 3               ;
0009D9r 3               ;                       Option1  KEY 7  - 1
0009D9r 3               ;                       Option2  KEY 8  - 2
0009D9r 3               ;                       Option3  KEY 9  - 3
0009D9r 3               ;                       Option4  KEY 10 - 4
0009D9r 3               ;-------------------------------------------------------
0009D9r 3               
0009D9r 3               joykey:
0009D9r 3  A5 rr        	lda contrl 		; control flag.
0009DBr 3  C9 01        	cmp #1
0009DDr 3  F0 1A        	beq joy1 		; scan joystick1
0009DFr 3  C9 02        	cmp #2
0009E1r 3  F0 1C        	beq joy2 		; scan joystick2
0009E3r 3               
0009E3r 3               ; Scan keyboard
0009E3r 3               
0009E3r 3  A9 00        	lda #0		 	; zero reading.
0009E5r 3  85 rr        	sta z80_e
0009E7r 3               
0009E7r 3  A0 06        	ldy #6	 		; address of last key.
0009E9r 3               joyke0:
0009E9r 3  B9 rr rr     	lda keys,y 		; get key from table.
0009ECr 3  20 rr rr     	jsr ktest		; being pressed?
0009EFr 3  26 rr        	rol z80_e 		; rotate into reading.
0009F1r 3               
0009F1r 3  88           	dey		 	; next key.
0009F2r 3  10 F5        	bpl joyke0 		; repeat for all keys.
0009F4r 3               joyret:
0009F4r 3  A5 rr        	lda z80_e
0009F6r 3  85 rr        	sta joyval
0009F8r 3  60           	rts
0009F9r 3               
0009F9r 3               ; Scan joystick 1
0009F9r 3               
0009F9r 3               joy1:
0009F9r 3  20 rr rr     	jsr joy1scan
0009FCr 3  4C rr rr     	jmp joyret 		; store the value.
0009FFr 3               
0009FFr 3               ; Scan joystick 2
0009FFr 3               
0009FFr 3               joy2:
0009FFr 3  20 rr rr     	jsr joy2scan
000A02r 3  4C rr rr     	jmp joyret 		; store the value.
000A05r 3               
000A05r 3               ;---------------------------------------------------------------
000A05r 3               ; Display message.
000A05r 3               ;
000A05r 3               ; Input:
000A05r 3               ;  A = message number
000A05r 3               ;---------------------------------------------------------------
000A05r 3               
000A05r 3               dmsg:
000A05r 3  AA           	tax
000A06r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000A08r 3  85 rr        	sta z80_l
000A0Ar 3  A9 rr        	lda #>msgdat
000A0Cr 3  85 rr        	sta z80_h
000A0Er 3  20 rr rr     	jsr getwrd		; get message number.
000A11r 3               dmsg3:
000A11r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000A14r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000A17r 3  A5 rr        	lda prtmod		; print mode.
000A19r 3  D0 47        	bne bmsg1		; no, double-height text.
000A1Br 3               dmsg0:
000A1Br 3  A5 rr        	lda z80_h		; store string pointer.
000A1Dr 3  48           	pha
000A1Er 3  A5 rr        	lda z80_l
000A20r 3  48           	pha
000A21r 3               
000A21r 3  A0 00        	ldy #0
000A23r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000A25r 3  29 7F        	and #127		; remove any end marker.
000A27r 3  C9 0D        	cmp #ASCII_NEWLINE
000A29r 3  F0 24        	beq dmsg1
000A2Br 3  20 rr rr     	jsr pchar		; display character.
000A2Er 3  20 rr rr     	jsr nexpos 		; display position.
000A31r 3  D0 03        	bne dmsg2		; not on a new line.
000A33r 3  20 rr rr     	jsr nexlin		; next line down.
000A36r 3               dmsg2:
000A36r 3  68           	pla			; retrieve string pointer
000A37r 3  85 rr        	sta z80_l
000A39r 3  68           	pla
000A3Ar 3  85 rr        	sta z80_h
000A3Cr 3               
000A3Cr 3  A0 00        	ldy #0
000A3Er 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000A40r 3  0A           	asl a  			; was it the end?
000A41r 3  90 03        	bcc :+
000A43r 3  4C rr rr     	jmp dscor2		; yes, job done.
000A46r 3               :
000A46r 3  E6 rr        	inc z80_l		; next character to display.
000A48r 3  D0 02        	bne :+
000A4Ar 3  E6 rr        	inc z80_h
000A4Cr 3               :
000A4Cr 3  4C rr rr     	jmp dmsg0
000A4Fr 3               dmsg1:
000A4Fr 3  E6 rr        	inc dispy
000A51r 3  A5 rr        	lda dispy
000A53r 3  C9 18        	cmp #24
000A55r 3  90 04        	bcc dmsg4
000A57r 3  A9 00        	lda #0
000A59r 3  85 rr        	sta dispy
000A5Br 3               dmsg4:
000A5Br 3  A9 00        	lda #0
000A5Dr 3  85 rr        	sta dispx
000A5Fr 3  4C rr rr     	jmp dmsg2
000A62r 3               
000A62r 3               
000A62r 3               ;----------------------------------------------------------
000A62r 3               ; Display message in big text.
000A62r 3               ;
000A62r 3               ; Input:
000A62r 3               ;  HL = string pointer
000A62r 3               ;----------------------------------------------------------
000A62r 3               
000A62r 3               bmsg1:
000A62r 3  A0 00        	ldy #0
000A64r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000A66r 3  29 7F        	and #127		; only want 7 bits.
000A68r 3  C9 0D        	cmp #ASCII_NEWLINE
000A6Ar 3  F0 13        	beq bmsg2
000A6Cr 3  20 rr rr     	jsr bchar 		; display big char.
000A6Fr 3               bmsg3:
000A6Fr 3  A0 00        	ldy #0
000A71r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000A73r 3  48           	pha
000A74r 3  E6 rr        	inc z80_l 		; next character in list.
000A76r 3  D0 02        	bne :+
000A78r 3  E6 rr        	inc z80_h
000A7Ar 3               :
000A7Ar 3  68           	pla
000A7Br 3  0A           	asl a  			; was terminator flag set?
000A7Cr 3  90 E4        	bcc bmsg1		; no, keep going.
000A7Er 3               
000A7Er 3  60           	rts
000A7Fr 3               bmsg2:
000A7Fr 3  A9 00        	lda #0
000A81r 3  85 rr        	sta dispx
000A83r 3  E6 rr        	inc dispy
000A85r 3  E6 rr        	inc dispy
000A87r 3  A5 rr        	lda dispy
000A89r 3  C9 17        	cmp #23
000A8Br 3  90 E2        	bcc bmsg3
000A8Dr 3  A9 00        	lda #0
000A8Fr 3  85 rr        	sta dispy
000A91r 3  4C rr rr     	jmp bmsg3
000A94r 3               
000A94r 3               ;----------------------------------------------------------
000A94r 3               ; Big character display.
000A94r 3               ;
000A94r 3               ; Input:
000A94r 3               ;  A = character
000A94r 3               ;----------------------------------------------------------
000A94r 3               
000A94r 3               bchar:
000A94r 3  85 rr        	sta z80_e		; save char in lb
000A96r 3  A9 00        	lda #0
000A98r 3  85 rr        	sta z80_d		; reset hb
000A9Ar 3               
000A9Ar 3  06 rr        	asl z80_e 		; multiply char by 8.
000A9Cr 3  26 rr        	rol z80_d
000A9Er 3  06 rr        	asl z80_e
000AA0r 3  26 rr        	rol z80_d
000AA2r 3  06 rr        	asl z80_e
000AA4r 3  26 rr        	rol z80_d		; de = a*8
000AA6r 3               
000AA6r 3  18           	clc			; de = #<(FONT-256) + a*8
000AA7r 3  A5 rr        	lda z80_e
000AA9r 3  69 rr        	adc #<(FONT-256) 		; address of font.
000AABr 3  85 rr        	sta z80_e
000AADr 3  A5 rr        	lda z80_d
000AAFr 3  69 rr        	adc #>(FONT-256)
000AB1r 3  85 rr        	sta z80_d
000AB3r 3               
000AB3r 3  20 rr rr     	jsr gprad 		; get screen address.
000AB6r 3               
000AB6r 3  A2 00        	ldx #0			; height of character in font.
000AB8r 3               bchar0:
000AB8r 3  A0 00        	ldy #0
000ABAr 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000ABCr 3               
000ABCr 3               .if iflag
000ABCr 3               	eor #$ff
000ABCr 3               .endif
000ABCr 3               
000ABCr 3  91 rr        	sta (scraddr),y
000ABEr 3  48           	pha
000ABFr 3  20 rr rr     	jsr nline 		; next line down.
000AC2r 3  68           	pla
000AC3r 3  91 rr        	sta (scraddr),y
000AC5r 3  20 rr rr     	jsr nline 		; next line down.
000AC8r 3               
000AC8r 3  18           	clc
000AC9r 3  E6 rr        	inc z80_e 		; next line of font.
000ACBr 3  D0 02        	bne :+
000ACDr 3  E6 rr        	inc z80_d
000ACFr 3               :
000ACFr 3  E8           	inx
000AD0r 3  E0 08        	cpx #8
000AD2r 3  D0 E4        	bne bchar0
000AD4r 3               
000AD4r 3  20 rr rr     	jsr nexpos		; display position.
000AD7r 3  D0 05        	bne bchar2 		; not on a new line.
000AD9r 3               bchar3:
000AD9r 3  E6 rr        	inc dispy
000ADBr 3  20 rr rr     	jsr nexlin 		; next line check.
000ADEr 3               bchar2:
000ADEr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000AE1r 3               
000AE1r 3               
000AE1r 3               ;-------------------------------------------------
000AE1r 3               ; Display a character.
000AE1r 3               ;
000AE1r 3               ; Input:
000AE1r 3               ;  A = character
000AE1r 3               ;-------------------------------------------------
000AE1r 3               
000AE1r 3               achar:
000AE1r 3  85 rr        	sta z80_b 		; copy to b.
000AE3r 3  20 rr rr     	jsr preprt 		; get ready to print.
000AE6r 3  A5 rr        	lda z80_b		; character in accumulator.
000AE8r 3  A6 rr        	ldx prtmod 		; print mode.
000AEAr 3  F0 03        	beq :+
000AECr 3  4C rr rr     	jmp bchar 		; no, double-height text.
000AEFr 3               :
000AEFr 3  20 rr rr     	jsr pchar 		; display character.
000AF2r 3  20 rr rr     	jsr nexpos 		; display position.
000AF5r 3  F0 E2        	beq bchar3		; next line down.
000AF7r 3  4C rr rr     	jmp bchar2 		; tidy up.
000AFAr 3               
000AFAr 3               
000AFAr 3               ;-------------------------------------------------
000AFAr 3               ; Get next print column position.
000AFAr 3               ;-------------------------------------------------
000AFAr 3               
000AFAr 3               nexpos:
000AFAr 3  E6 rr        	inc dispx		; move along one position.
000AFCr 3  A5 rr        	lda dispx 		; get coordinate.
000AFEr 3               ;	and #31
000AFEr 3  60           	rts 			; return with status in zero flag.
000AFFr 3               
000AFFr 3               ;-------------------------------------------------
000AFFr 3               ; Get next print line position.
000AFFr 3               ;-------------------------------------------------
000AFFr 3               
000AFFr 3               nexlin:
000AFFr 3  E6 rr        	inc dispy 		; newline.
000B01r 3  A5 rr        	lda dispy		; vertical position.
000B03r 3  C9 18        	cmp #24			; past screen edge?
000B05r 3  B0 01        	bcs :+
000B07r 3  60           	rts			; no, still okay.
000B08r 3               :
000B08r 3  A9 00        	lda #0			; restart at top.
000B0Ar 3  85 rr        	sta dispy
000B0Cr 3  60           	rts
000B0Dr 3               
000B0Dr 3               ;--------------------------------------------------------
000B0Dr 3               ; Pre-print preliminaries.
000B0Dr 3               ;--------------------------------------------------------
000B0Dr 3               
000B0Dr 3               preprt:
000B0Dr 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000B0Fr 3  8D rr rr     	sta grbase		; set up graphics base.
000B12r 3  A9 rr        	lda #>(FONT-256)
000B14r 3  8D rr rr     	sta grbase+1
000B17r 3               prescr:
000B17r 3  A5 rr        	lda charx 		; display coordinates.
000B19r 3  85 rr        	sta dispx		; set up general coordinates.
000B1Br 3  A5 rr        	lda chary
000B1Dr 3  85 rr        	sta dispy
000B1Fr 3  60           	rts
000B20r 3               
000B20r 3               ;--------------------------------------------------------------
000B20r 3               ; Get messagenr x in hl
000B20r 3               ;
000B20r 3               ; Input:
000B20r 3               ;  HL = pointer to message list
000B20r 3               ;  X  = message number.
000B20r 3               ;--------------------------------------------------------------
000B20r 3               
000B20r 3               getwrd:
000B20r 3  E0 00        	cpx #0
000B22r 3  D0 01        	bne:+ 			; first word in list?
000B24r 3  60           	rts 			; yep, don't search.
000B25r 3               :
000B25r 3  A0 00        	ldy #0
000B27r 3               getwd0:
000B27r 3  B1 rr        	lda (z80_hl),y
000B29r 3  48           	pha
000B2Ar 3  E6 rr        	inc z80_l
000B2Cr 3  D0 02        	bne :+
000B2Er 3  E6 rr        	inc z80_h
000B30r 3               :
000B30r 3  68           	pla
000B31r 3  C9 80        	cmp #128		; found end?
000B33r 3  30 F2        	bmi getwd0		; no, carry on.
000B35r 3  CA           	dex			; until we have right number.
000B36r 3  D0 EF        	bne getwd0
000B38r 3  60           	rts
000B39r 3               
000B39r 3               ;-----------------------------------------------------------
000B39r 3               ; Bubble sort.
000B39r 3               ;-----------------------------------------------------------
000B39r 3               
000B39r 3               bsort:
000B39r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000B3Br 3  85 rr        	sta qscnt
000B3Dr 3               
000B3Dr 3  A9 rr        	lda #<sprtab 		; sprite table.
000B3Fr 3  85 rr        	sta z80_x
000B41r 3  A9 rr        	lda #>sprtab
000B43r 3  85 rr        	sta z80_i
000B45r 3               bsort0:
000B45r 3  A0 00        	ldy #0
000B47r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000B49r 3  C9 FF        	cmp #255 		; is it switched off?
000B4Br 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000B4Dr 3               
000B4Dr 3  A0 11        	ldy #TABSIZ
000B4Fr 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000B51r 3  C9 FF        	cmp #255 		; is it enabled?
000B53r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000B55r 3               
000B55r 3  A0 14        	ldy #TABSIZ+3
000B57r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000B59r 3  A0 03        	ldy #3
000B5Br 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000B5Dr 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000B5Fr 3               bsort2:
000B5Fr 3  18           	clc
000B60r 3  A5 rr        	lda z80_x
000B62r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000B64r 3  85 rr        	sta z80_x
000B66r 3  90 02        	bcc :+
000B68r 3  E6 rr        	inc z80_i
000B6Ar 3               :
000B6Ar 3  C6 rr        	dec qscnt
000B6Cr 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000B6Er 3  60           	rts
000B6Fr 3               
000B6Fr 3               bsort1:
000B6Fr 3  A0 11        	ldy #TABSIZ
000B71r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000B73r 3  C9 FF        	cmp #255		; is it enabled?
000B75r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000B77r 3  20 rr rr     	jsr swspr		; swap positions.
000B7Ar 3  4C rr rr     	jmp bsort2
000B7Dr 3               swemp:
000B7Dr 3  A0 11        	ldy #TABSIZ
000B7Fr 3  B1 rr        	lda (z80_ix),y		; next table entry.
000B81r 3  C9 FF        	cmp #255		; is that one on?
000B83r 3  F0 DA        	beq bsort2		; no, nothing to swap.
000B85r 3  20 rr rr     	jsr swspr		; swap positions.
000B88r 3  4C rr rr     	jmp bsort2
000B8Br 3               
000B8Br 3               ; Swap sprites.
000B8Br 3               
000B8Br 3               swspr:
000B8Br 3  A5 rr        	lda z80_x		; table address
000B8Dr 3  85 rr        	sta z80_e		; copy to de pair.
000B8Fr 3  85 rr        	sta z80_l		; copy to hl pair.
000B91r 3  A5 rr        	lda z80_i
000B93r 3  85 rr        	sta z80_h
000B95r 3  85 rr        	sta z80_d
000B97r 3               
000B97r 3  18           	clc
000B98r 3  A5 rr        	lda z80_l
000B9Ar 3  69 11        	adc #TABSIZ		; distance to second entry.
000B9Cr 3  85 rr        	sta z80_l
000B9Er 3  90 02        	bcc :+
000BA0r 3  E6 rr        	inc z80_h
000BA2r 3               :
000BA2r 3  A9 11        	lda #TABSIZ		; bytes to swap.
000BA4r 3  85 rr        	sta z80_b
000BA6r 3  A0 00        	ldy #0
000BA8r 3               swspr0:
000BA8r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000BAAr 3  48           	pha
000BABr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000BADr 3  91 rr        	sta (z80_hl),y 		; copy to second.
000BAFr 3  68           	pla
000BB0r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000BB2r 3               
000BB2r 3  E6 rr        	inc z80_e 		; next byte.
000BB4r 3  D0 02        	bne :+
000BB6r 3  E6 rr        	inc z80_d
000BB8r 3               :
000BB8r 3  E6 rr        	inc z80_l 		; next byte.
000BBAr 3  D0 02        	bne :+
000BBCr 3  E6 rr        	inc z80_h
000BBEr 3               :
000BBEr 3  C6 rr        	dec z80_b
000BC0r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000BC2r 3  60           	rts
000BC3r 3               
000BC3r 3               ;----------------------------------------------------
000BC3r 3               ; Process sprites.
000BC3r 3               ;----------------------------------------------------
000BC3r 3               
000BC3r 3               pspr:
000BC3r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000BC5r 3  85 rr        	sta sprptr
000BC7r 3               
000BC7r 3  A9 rr        	lda #<sprtab 		; sprite table.
000BC9r 3  85 rr        	sta z80_x
000BCBr 3  A9 rr        	lda #>sprtab
000BCDr 3  85 rr        	sta z80_i
000BCFr 3               pspr1:
000BCFr 3  A0 00        	ldy #0
000BD1r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000BD3r 3  C9 09        	cmp #9 			; within range of sprite types?
000BD5r 3  B0 03        	bcs :+
000BD7r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000BDAr 3               :
000BDAr 3  18           	clc
000BDBr 3  A5 rr        	lda z80_x
000BDDr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000BDFr 3  85 rr        	sta z80_x
000BE1r 3  90 02        	bcc :+
000BE3r 3  E6 rr        	inc z80_i		; next sprite.
000BE5r 3               :
000BE5r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000BE7r 3  D0 E6        	bne pspr1
000BE9r 3  60           	rts
000BEAr 3               
000BEAr 3               pspr2:
000BEAr 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000BECr 3  85 rr        	sta ogptr
000BEEr 3  A5 rr        	lda z80_i
000BF0r 3  85 rr        	sta ogptr+1
000BF2r 3  20 rr rr     	jsr pspr3		; do the routine.
000BF5r 3               rtorg:
000BF5r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000BF7r 3  85 rr        	sta z80_x
000BF9r 3  A5 rr        	lda ogptr+1
000BFBr 3  85 rr        	sta z80_i
000BFDr 3               rtorg0:
000BFDr 3  60           	rts
000BFEr 3               
000BFEr 3               pspr3:
000BFEr 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000C00r 3  85 rr        	sta z80_l
000C02r 3  A9 rr        	lda #>evtyp0
000C04r 3  85 rr        	sta z80_h
000C06r 3               pspr4:
000C06r 3  B1 rr        	lda (z80_ix),y
000C08r 3  0A           	asl a			; double accumulator.
000C09r 3  18           	clc
000C0Ar 3  65 rr        	adc z80_l
000C0Cr 3  85 rr        	sta z80_l
000C0Er 3  90 02        	bcc :+
000C10r 3  E6 rr        	inc z80_h
000C12r 3               :
000C12r 3  B1 rr        	lda (z80_hl),y
000C14r 3  85 rr        	sta z80_e 		; copy to de.
000C16r 3  48           	pha
000C17r 3               
000C17r 3  E6 rr        	inc z80_l 		; next byte of address.
000C19r 3  D0 02        	bne :+
000C1Br 3  E6 rr        	inc z80_h
000C1Dr 3               :
000C1Dr 3  B1 rr        	lda (z80_hl),y 		; address high.
000C1Fr 3  85 rr        	sta z80_d
000C21r 3               
000C21r 3  48           	pha	 		; swap address into hl.
000C22r 3  A5 rr        	lda z80_h
000C24r 3  85 rr        	sta z80_d
000C26r 3  68           	pla
000C27r 3  85 rr        	sta z80_h
000C29r 3  68           	pla
000C2Ar 3  85 rr        	sta z80_l
000C2Cr 3  A5 rr        	lda z80_l
000C2Er 3  85 rr        	sta z80_e
000C30r 3               
000C30r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000C33r 3               
000C33r 3               ; Address of each sprite type's routine.
000C33r 3               
000C33r 3  rr rr        evtyp0:	.word evnt00
000C35r 3  rr rr        evtyp1:	.word evnt01
000C37r 3  rr rr        evtyp2:	.word evnt02
000C39r 3  rr rr        evtyp3:	.word evnt03
000C3Br 3  rr rr        evtyp4:	.word evnt04
000C3Dr 3  rr rr        evtyp5:	.word evnt05
000C3Fr 3  rr rr        evtyp6:	.word evnt06
000C41r 3  rr rr        evtyp7:	.word evnt07
000C43r 3  rr rr        evtyp8:	.word evnt08
000C45r 3               
000C45r 3               ;--------------------------------------------------------------
000C45r 3               ; Display sprites.
000C45r 3               ;
000C45r 3               ; Input:
000C45r 3               ;  IX = sprite table
000C45r 3               ;--------------------------------------------------------------
000C45r 3               
000C45r 3               dspr:
000C45r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000C47r 3  85 rr        	sta sprcnt
000C49r 3               
000C49r 3               dspr0:
000C49r 3  A0 00        	ldy #var_Type
000C4Br 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000C4Dr 3  C9 FF        	cmp #255 		; is it enabled?
000C4Fr 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000C51r 3               dspr5:
000C51r 3  A0 05        	ldy #var_newType
000C53r 3  B1 rr        	lda (z80_ix),y 		; new type.
000C55r 3  C9 FF        	cmp #255		; is it enabled?
000C57r 3  F0 03        	beq dspr2
000C59r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000C5Cr 3               dspr2:
000C5Cr 3  A0 05        	ldy #var_newType
000C5Er 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000C60r 3  A0 00        	ldy #var_Type
000C62r 3  91 rr        	sta (z80_ix),y
000C64r 3  A0 06        	ldy #var_newImage
000C66r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000C68r 3  A0 01        	ldy #var_Image
000C6Ar 3  91 rr        	sta (z80_ix),y
000C6Cr 3  A0 07        	ldy #var_newFrame
000C6Er 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000C70r 3  A0 02        	ldy #var_Frame
000C72r 3  91 rr        	sta (z80_ix),y
000C74r 3  A0 08        	ldy #var_newY
000C76r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000C78r 3  A0 03        	ldy #var_Y
000C7Ar 3  91 rr        	sta (z80_ix),y
000C7Cr 3  A0 09        	ldy #var_newX
000C7Er 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000C80r 3  A0 04        	ldy #var_X
000C82r 3  91 rr        	sta (z80_ix),y
000C84r 3               
000C84r 3  18           	clc
000C85r 3  A5 rr        	lda z80_x
000C87r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000C89r 3  85 rr        	sta z80_x
000C8Br 3  A5 rr        	lda z80_i
000C8Dr 3  69 00        	adc #0
000C8Fr 3  85 rr        	sta z80_i 		; next sprite.
000C91r 3  C6 rr        	dec sprcnt
000C93r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000C95r 3  60           	rts
000C96r 3               
000C96r 3               dspr1:
000C96r 3               	; _BEEB clipping code copied from CPC Engine
000C96r 3  A0 03        	ldy #var_Y
000C98r 3  B1 rr        	lda (z80_ix), y		; old x coord
000C9Ar 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000C9Cr 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000C9Er 3               
000C9Er 3  A0 05        	ldy #var_newType
000CA0r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000CA2r 3  C9 FF        	cmp #255		; is this enabled?
000CA4r 3  D0 06        	bne dspr4 		; yes, display both.
000CA6r 3               
000CA6r 3               dspr6:
000CA6r 3  20 rr rr     	jsr sspria 		; show single sprite.
000CA9r 3  4C rr rr     	jmp dspr2
000CACr 3               
000CACr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000CACr 3               
000CACr 3               dspr4:
000CACr 3               	; _BEEB clipping code copied from CPC Engine
000CACr 3  A0 08        	ldy #var_newY
000CAEr 3  B1 rr        	lda (z80_ix), y		; old x coord
000CB0r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000CB2r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000CB4r 3               
000CB4r 3  A0 04        	ldy #var_X
000CB6r 3  B1 rr        	lda (z80_ix),y		; old x.
000CB8r 3  A0 09        	ldy #var_newX
000CBAr 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000CBCr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000CBEr 3               
000CBEr 3  A0 03        	ldy #var_Y
000CC0r 3  B1 rr        	lda (z80_ix),y		; old y.
000CC2r 3  A0 08        	ldy #var_newY
000CC4r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CC6r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000CC8r 3               
000CC8r 3  A0 02        	ldy #var_Frame
000CCAr 3  B1 rr        	lda (z80_ix),y 		; old frame.
000CCCr 3  A0 07        	ldy #var_newFrame
000CCEr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CD0r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000CD2r 3               
000CD2r 3  A0 01        	ldy #var_Image
000CD4r 3  B1 rr        	lda (z80_ix),y 		; old image.
000CD6r 3  A0 06        	ldy #var_newImage
000CD8r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CDAr 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000CDCr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000CDFr 3               dspr7:
000CDFr 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000CE2r 3  4C rr rr     	jmp dspr2
000CE5r 3               dspr3:
000CE5r 3               	; _BEEB clipping code copied from CPC Engine
000CE5r 3  A0 08        	ldy #var_newY
000CE7r 3  B1 rr        	lda (z80_ix), y		; old x coord
000CE9r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000CEBr 3  90 03        	bcc :+			; no, continue
000CEDr 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000CF0r 3               :
000CF0r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000CF3r 3  4C rr rr     	jmp dspr2
000CF6r 3               
000CF6r 3               ;-----------------------------------------
000CF6r 3               ; Get sprite address calculations.
000CF6r 3               ; gspran = new sprite, gsprad = old sprite.
000CF6r 3               ;
000CF6r 3               ; Input:
000CF6r 3               ;  IX = sprite address
000CF6r 3               ;-----------------------------------------
000CF6r 3               
000CF6r 3               gspran:
000CF6r 3  A0 08        	ldy #var_newY
000CF8r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000CFAr 3  85 rr        	sta dispy
000CFCr 3  A0 09        	ldy #var_newX
000CFEr 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000D00r 3  85 rr        	sta dispx
000D02r 3  A0 06        	ldy #var_newImage
000D04r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000D06r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000D09r 3               
000D09r 3  A0 00        	ldy #0
000D0Br 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000D0Dr 3  A0 07        	ldy #var_newFrame
000D0Fr 3  18           	clc
000D10r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000D12r 3  4C rr rr     	jmp gspra0
000D15r 3               
000D15r 3               ;-----------------------------------------
000D15r 3               ; Calculate old sprite address
000D15r 3               ;
000D15r 3               ; Input:
000D15r 3               ;  IX = sprite address
000D15r 3               ;
000D15r 3               ; Output:
000D15r 3               ;  B  = right byte mask
000D15r 3               ;  C  = left byte mask
000D15r 3               ;  DE = spriteframe address
000D15r 3               ;  scraddr = screenaddress(dispx,dispy)
000D15r 3               ;-----------------------------------------
000D15r 3               
000D15r 3               gsprad:
000D15r 3  A0 03        	ldy #var_Y
000D17r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000D19r 3  85 rr        	sta dispy
000D1Br 3  A0 04        	ldy #var_X
000D1Dr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000D1Fr 3  85 rr        	sta dispx
000D21r 3  A0 01        	ldy #var_Image
000D23r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000D25r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000D28r 3               
000D28r 3  A0 00        	ldy #0
000D2Ar 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000D2Cr 3  A0 02        	ldy #var_Frame
000D2Er 3  18           	clc
000D2Fr 3  71 rr        	adc (z80_ix),y 		; add frame number.
000D31r 3               
000D31r 3               gspra0:
000D31r 3               .if rflag
000D31r 3               	sta z80_e		; multiply by 32.
000D31r 3               	lda #0
000D31r 3               	sta z80_d
000D31r 3               
000D31r 3               	asl z80_e
000D31r 3               	rol z80_d
000D31r 3               	asl z80_e
000D31r 3               	rol z80_d
000D31r 3               	asl z80_e
000D31r 3               	rol z80_d
000D31r 3               	asl z80_e
000D31r 3               	rol z80_d
000D31r 3               .if bflag
000D31r 3               	lda z80_e		; multiply by 48
000D31r 3               	sta tmp1
000D31r 3               	lda z80_d
000D31r 3               	sta tmp2
000D31r 3               .endif
000D31r 3               	asl z80_e
000D31r 3               	rol z80_d
000D31r 3               .if bflag
000D31r 3               	clc
000D31r 3               	lda z80_e
000D31r 3               	adc tmp1
000D31r 3               	sta z80_e
000D31r 3               	lda z80_d
000D31r 3               	adc tmp2
000D31r 3               	sta z80_d
000D31r 3               .endif
000D31r 3               .else
000D31r 3  4A           	lsr a	  		; multiply by 128.
000D32r 3  85 rr        	sta z80_d 		; store in d.
000D34r 3  85 rr        	sta tmp1
000D36r 3  A9 00        	lda #0
000D38r 3  6A           	ror a
000D39r 3  85 rr        	sta z80_e 		; got low byte.
000D3Br 3  85 rr        	sta tmp2
000D3Dr 3               .if bflag
000D3Dr 3               	lsr tmp1		; multiply by 192
000D3Dr 3               	ror tmp2
000D3Dr 3               	clc
000D3Dr 3               	lda tmp2
000D3Dr 3               	adc z80_e
000D3Dr 3               	sta z80_e
000D3Dr 3               	lda tmp1
000D3Dr 3               	adc z80_d
000D3Dr 3               	sta z80_d
000D3Dr 3               .endif
000D3Dr 3               .endif
000D3Dr 3  18           	clc 			; address of play sprites.
000D3Er 3  A5 rr        	lda z80_e
000D40r 3  69 rr        	adc #<sprgfx
000D42r 3  85 rr        	sta z80_e
000D44r 3  A5 rr        	lda z80_d
000D46r 3  69 rr        	adc #>sprgfx
000D48r 3  85 rr        	sta z80_d
000D4Ar 3               
000D4Ar 3  A5 rr        	lda dispx 		; y coordinate.
000D4Cr 3  29 06        	and #6 			; position within byte boundary.
000D4Er 3  AA           	tax	 		; low byte of table displacement.
000D4Fr 3               .if rflag
000D4Fr 3               	stx sprshft
000D4Fr 3               .else
000D4Fr 3  0A           	asl a	  		; multiply by 32.
000D50r 3  0A           	asl a  			; already a multiple
000D51r 3  0A           	asl a  			; of 2, so just 4
000D52r 3               .if bflag
000D52r 3               	sta tmp1
000D52r 3               	asl a  			; shifts needed.
000D52r 3               	clc
000D52r 3               	adc tmp1
000D52r 3               .else
000D52r 3  0A           	asl a  			; shifts needed.
000D53r 3               .endif
000D53r 3  18           	clc 			; add to sprite address.
000D54r 3  65 rr        	adc z80_e
000D56r 3  85 rr        	sta z80_e
000D58r 3  90 02        	bcc :+
000D5Ar 3  E6 rr        	inc z80_d
000D5Cr 3               :
000D5Cr 3               .endif
000D5Cr 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000D5Fr 3  85 rr        	sta z80_c 		; left mask.
000D61r 3  BD rr rr     	lda spmask+1,x
000D64r 3  85 rr        	sta z80_b 		; right mask.
000D66r 3               ; Drop into screen address routine.
000D66r 3  4C rr rr     	jmp scadd
000D69r 3               
000D69r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000D6Dr 3  0F F0 03 FC  
000D71r 3               
000D71r 3               
000D71r 3               ;-----------------------------------------------------------
000D71r 3               ; Animates a sprite.
000D71r 3               ;
000D71r 3               ; Input:
000D71r 3               ;  IX = sprite address
000D71r 3               ;  HL = last sprite address
000D71r 3               ;-----------------------------------------------------------
000D71r 3               
000D71r 3               animsp:
000D71r 3  25 rr        	and frmno
000D73r 3  F0 01        	beq :+
000D75r 3  60           	rts
000D76r 3               :
000D76r 3  A0 06        	ldy #var_newImage
000D78r 3  B1 rr        	lda (z80_ix),y		; sprite image
000D7Ar 3  20 rr rr     	jsr gfrm		; get frame data.
000D7Dr 3               
000D7Dr 3  E6 rr        	inc z80_l		; point to frames.
000D7Fr 3  D0 02        	bne :+
000D81r 3  E6 rr        	inc z80_h
000D83r 3               :
000D83r 3  A0 07        	ldy #var_newFrame
000D85r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000D87r 3  18           	clc
000D88r 3  69 01        	adc #1			; next one along.
000D8Ar 3  A0 00        	ldy #0
000D8Cr 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000D8Er 3  90 02        	bcc anims0		; no, not yet.
000D90r 3  A9 00        	lda #0			; start at first frame.
000D92r 3               anims0:
000D92r 3  A0 07        	ldy #var_newFrame
000D94r 3  91 rr        	sta (z80_ix),y		; new frame.
000D96r 3  60           	rts
000D97r 3               
000D97r 3               ;--------------------------------------------------------------
000D97r 3               ; Animate back
000D97r 3               ;
000D97r 3               ; Input:
000D97r 3               ;  IX = sprite address
000D97r 3               ;  HL = last sprite address
000D97r 3               ;--------------------------------------------------------------
000D97r 3               
000D97r 3               animbk:
000D97r 3  25 rr        	and frmno
000D99r 3  F0 01        	beq :+
000D9Br 3  60           	rts
000D9Cr 3               :
000D9Cr 3  A0 06        	ldy #var_newImage
000D9Er 3  B1 rr        	lda (z80_ix),y		; sprite image.
000DA0r 3  20 rr rr     	jsr gfrm		; get frame data.
000DA3r 3               
000DA3r 3  E6 rr        	inc z80_l 		; point to frames.
000DA5r 3  D0 02        	bne :+
000DA7r 3  E6 rr        	inc z80_h
000DA9r 3               :
000DA9r 3  A0 07        	ldy #var_newFrame
000DABr 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000DADr 3  F0 03        	beq :+
000DAFr 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000DB2r 3               :
000DB2r 3  A0 00        	ldy #0
000DB4r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000DB6r 3               rtanb0:
000DB6r 3  38           	sec
000DB7r 3  E9 01        	sbc #1			; next one along.
000DB9r 3  4C rr rr     	jmp anims0		; set new frame.
000DBCr 3               
000DBCr 3               ;--------------------------------------------------------------
000DBCr 3               ; Check for collision with other sprite, strict enforcement.
000DBCr 3               ;
000DBCr 3               ; Input:
000DBCr 3               ;  b		= sprite to test for
000DBCr 3               ;  ix		= current sprite pointer
000DBCr 3               ;
000DBCr 3               ; global:	b
000DBCr 3               ; local:	x,y,hl,de,skptr
000DBCr 3               ; calls:	-
000DBCr 3               ;--------------------------------------------------------------
000DBCr 3               
000DBCr 3               sktyp:
000DBCr 3  A9 rr        	lda #<sprtab				; sprite table.
000DBEr 3  85 rr        	sta z80_l
000DC0r 3  A9 rr        	lda #>sprtab
000DC2r 3  85 rr        	sta z80_h
000DC4r 3               numsp2:
000DC4r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000DC6r 3  85 rr        	sta sktptr
000DC8r 3               sktyp0:
000DC8r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000DCAr 3  85 rr        	sta skptr
000DCCr 3  A5 rr        	lda z80_h
000DCEr 3  85 rr        	sta skptr+1
000DD0r 3               
000DD0r 3  A0 00        	ldy #0
000DD2r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000DD4r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000DD6r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000DD8r 3               sktyp1:
000DD8r 3  18           	clc
000DD9r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000DDBr 3  69 11        	adc #TABSIZ				; size of each entry.
000DDDr 3  85 rr        	sta z80_l
000DDFr 3  A5 rr        	lda skptr+1
000DE1r 3  69 00        	adc #0
000DE3r 3  85 rr        	sta z80_h
000DE5r 3  C6 rr        	dec sktptr					; one less iteration.
000DE7r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000DE9r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000DEBr 3  85 rr        	sta z80_l
000DEDr 3  85 rr        	sta z80_h
000DEFr 3  85 rr        	sta skptr				; store pointer to sprite.
000DF1r 3  85 rr        	sta skptr+1
000DF3r 3               
000DF3r 3  18           	clc					; don't return with zero flag set.
000DF4r 3  60           	rts 					; didn't find one.
000DF5r 3               
000DF5r 3               coltyp:
000DF5r 3  A0 00        	ldy #0
000DF7r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000DF9r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000DFBr 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000DFDr 3               colty0:
000DFDr 3  A0 09        	ldy #9					; distance to x position in table.
000DFFr 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000E01r 3  85 rr        	sta z80_e
000E03r 3  88           	dey
000E04r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000E06r 3  85 rr        	sta z80_d
000E08r 3               
000E08r 3               ; Drop into collision detection.
000E08r 3               
000E08r 3               colc16:
000E08r 3  A0 09        	ldy #9
000E0Ar 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000E0Cr 3  38           	sec					; subtract x.
000E0Dr 3  E5 rr        	sbc z80_e
000E0Fr 3  B0 05        	bcs  colc1a 				; result is positive.
000E11r 3  49 FF        	eor #$ff				; make negative positive.
000E13r 3  18           	clc
000E14r 3  69 01        	adc #1
000E16r 3               colc1a:
000E16r 3  C9 10        	cmp #16 				; within x range?
000E18r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000E1Ar 3  85 rr        	sta z80_c				; store difference.
000E1Cr 3               
000E1Cr 3  A0 08        	ldy #8
000E1Er 3  B1 rr        	lda (z80_ix),y				; y coord.
000E20r 3  38           	sec
000E21r 3  E5 rr        	sbc z80_d				; subtract y.
000E23r 3  B0 05        	bcs colc1b				; result is positive.
000E25r 3  49 FF        	eor #$ff				; make negative positive.
000E27r 3  18           	clc
000E28r 3  69 01        	adc #1
000E2Ar 3               colc1b:
000E2Ar 3  C9 10        	cmp #16					; within y range?
000E2Cr 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000E2Er 3  18           	clc					; add x difference.
000E2Fr 3  65 rr        	adc z80_c
000E31r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000E33r 3  B0 02        	bcs :+
000E35r 3  38           	sec
000E36r 3  60           	rts 					; carry set if there's a collision.
000E37r 3               :
000E37r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000E3Ar 3               colty1:
000E3Ar 3  A5 rr        	lda z80_x  				; compare the two.
000E3Cr 3  C5 rr        	cmp z80_l
000E3Er 3  D0 09        	bne end_col
000E40r 3  A5 rr        	lda z80_i
000E42r 3  C5 rr        	cmp z80_h
000E44r 3  D0 03        	bne end_col
000E46r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000E49r 3               end_col:
000E49r 3  4C rr rr     	jmp colty0
000E4Cr 3               
000E4Cr 3               ;-----------------------------------------------------------
000E4Cr 3               ; Display number, left aligned
000E4Cr 3               ;
000E4Cr 3               ; Input:
000E4Cr 3               ;  a		= number
000E4Cr 3               ;
000E4Cr 3               ; global:	-
000E4Cr 3               ; local:	a,y,bc,hl,displ0
000E4Cr 3               ; calls:	num2ch,dmsg3
000E4Cr 3               ;-----------------------------------------------------------
000E4Cr 3               
000E4Cr 3               disply:
000E4Cr 3  85 rr        	sta z80_a
000E4Er 3  A9 rr        	lda #<displ0				; display workspace.
000E50r 3  85 rr        	sta z80_c
000E52r 3  A9 rr        	lda #>displ0
000E54r 3  85 rr        	sta z80_b
000E56r 3  A5 rr        	lda z80_a
000E58r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000E5Br 3               displ1:
000E5Br 3  C6 rr        	dec z80_c				; back one character.
000E5Dr 3  D0 02        	bne :+
000E5Fr 3  C6 rr        	dec z80_b
000E61r 3               :
000E61r 3  A0 00        	ldy #0
000E63r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000E65r 3  09 80        	ora #128				; insert end marker.
000E67r 3  91 rr        	sta (z80_bc),y				; new value.
000E69r 3               
000E69r 3  A9 rr        	lda #<displ0				; display space.
000E6Br 3  85 rr        	sta z80_l
000E6Dr 3  A9 rr        	lda #>displ0
000E6Fr 3  85 rr        	sta z80_h
000E71r 3  4C rr rr     	jmp dmsg3				; display the string.
000E74r 3               
000E74r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000E78r 3               
000E78r 3               ;----------------------------------------------------------------
000E78r 3               ; Initialise screen.
000E78r 3               ;
000E78r 3               ; global:	roomtb,scno
000E78r 3               ; local:	-
000E78r 3               ; calls:	tstcs
000E78r 3               ;----------------------------------------------------------------
000E78r 3               
000E78r 3               initsc:
000E78r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000E7Br 3  20 rr rr     	jsr tstsc 			; find displacement.
000E7Er 3  C9 FF        	cmp #255 			; is it valid?
000E80r 3  F0 02        	beq init_end 			; no, it's rubbish.
000E82r 3  85 rr        	sta scno			; store new room number.
000E84r 3               init_end:
000E84r 3  60           	rts
000E85r 3               
000E85r 3               ;----------------------------------------------------------------
000E85r 3               ; Test screen.
000E85r 3               ;
000E85r 3               ; global:	-
000E85r 3               ; local:	x
000E85r 3               ; calls:	-
000E85r 3               ;----------------------------------------------------------------
000E85r 3               
000E85r 3               tstsc:
000E85r 3  85 rr        	sta tmproom
000E87r 3  18           	clc
000E88r 3  69 05        	adc #MAPWID 			; add width in case we"re negative.
000E8Ar 3  AA           	tax 				; add displacement to map data.
000E8Br 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000E8Er 3  60           	rts
000E8Fr 3               
000E8Fr 3               ;--------------------------
000E8Fr 3               ; Screen left.
000E8Fr 3               ;--------------------------
000E8Fr 3               
000E8Fr 3               scrl:
000E8Fr 3  AD rr rr     	lda roomtb 			; present room table pointer.
000E92r 3  38           	sec
000E93r 3  E9 01        	sbc #1				; room left.
000E95r 3               scrl0:
000E95r 3  20 rr rr     	jsr tstsc			; test screen.
000E98r 3  C9 FF        	cmp #255			; is there a screen this way?
000E9Ar 3  D0 01        	bne :+
000E9Cr 3  60           	rts				; no, return to loop.
000E9Dr 3               :
000E9Dr 3  A5 rr        	lda tmproom			; restore room displacement.
000E9Fr 3  8D rr rr     	sta roomtb			; new room table position.
000EA2r 3               scrl1:
000EA2r 3  20 rr rr     	jsr initsc 			; set new screen.
000EA5r 3  A9 02        	lda #2
000EA7r 3  85 rr        	sta restfl 			; set it.
000EA9r 3  60           	rts
000EAAr 3               scrr:
000EAAr 3  AD rr rr     	lda roomtb 			; room table pointer.
000EADr 3  18           	clc
000EAEr 3  69 01        	adc #1				; room right.
000EB0r 3  4C rr rr     	jmp scrl0
000EB3r 3               scru:
000EB3r 3  AD rr rr     	lda roomtb 			; room table pointer.
000EB6r 3  38           	sec
000EB7r 3  E9 05        	sbc #MAPWID 			; room up.
000EB9r 3  4C rr rr     	jmp scrl0
000EBCr 3               scrd:
000EBCr 3  AD rr rr     	lda roomtb 			; room table pointer.
000EBFr 3  18           	clc
000EC0r 3  69 05        	adc #MAPWID 			; room down.
000EC2r 3  4C rr rr     	jmp scrl0
000EC5r 3               
000EC5r 3               ;-----------------------------------------
000EC5r 3               ; Jump to new screen.
000EC5r 3               ;-----------------------------------------
000EC5r 3               
000EC5r 3               nwscr:
000EC5r 3  A2 00        	ldx #0				; start of map data.
000EC7r 3               nwscr0:
000EC7r 3  DD rr rr     	cmp mapdat,x
000ECAr 3  F0 06        	beq nwscr1			; have we found a match for screen?
000ECCr 3  E8           	inx 				; next room.
000ECDr 3  E0 50        	cpx #80				; zero room count, 80 to search.
000ECFr 3  D0 F6        	bne nwscr0			; keep looking.
000ED1r 3  60           	rts
000ED2r 3               nwscr1:
000ED2r 3  8E rr rr     	stx roomtb			; set the map position.
000ED5r 3  4C rr rr     	jmp scrl1			; draw new room.
000ED8r 3               
000ED8r 3               
000ED8r 3               ;----------------------------------------------------------
000ED8r 3               ; Gravity processing.
000ED8r 3               ;----------------------------------------------------------
000ED8r 3               
000ED8r 3               grav:
000ED8r 3  A0 0D        	ldy #13
000EDAr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000EDCr 3  85 rr        	sta z80_l
000EDEr 3  A0 0E        	ldy #14
000EE0r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000EE2r 3  85 rr        	sta z80_h
000EE4r 3  05 rr        	ora z80_l			; merge in low byte.
000EE6r 3  D0 01        	bne :+
000EE8r 3  60           	rts				; if neither is set, we're not in the air.
000EE9r 3               :
000EE9r 3  A0 00        	ldy #0
000EEBr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000EEDr 3  85 rr        	sta z80_a
000EEFr 3  C9 63        	cmp #99				; reached the end?
000EF1r 3  D0 0C        	bne grav0			; no, continue.
000EF3r 3               grav2:
000EF3r 3  C6 rr        	dec z80_l			; go back to previous value.
000EF5r 3  C9 FF        	cmp #$ff
000EF7r 3  D0 02        	bne :+
000EF9r 3  C6 rr        	dec z80_h
000EFBr 3               :
000EFBr 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000EFDr 3  85 rr        	sta z80_a
000EFFr 3               grav0:
000EFFr 3  E6 rr        	inc z80_l			; point to next table entry.
000F01r 3  D0 02        	bne :+
000F03r 3  E6 rr        	inc z80_h
000F05r 3               :
000F05r 3  A5 rr        	lda z80_l
000F07r 3  A0 0D        	ldy #13
000F09r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000F0Br 3  A5 rr        	lda z80_h
000F0Dr 3  A0 0E        	ldy #14
000F0Fr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000F11r 3               grav1:
000F11r 3  A5 rr        	lda z80_a
000F13r 3  D0 01        	bne :+				; any movement required?
000F15r 3  60           	rts				; no, not this time.
000F16r 3               :
000F16r 3  A5 rr        	lda z80_a
000F18r 3  C9 80        	cmp #128			; is it up or down?
000F1Ar 3  B0 15        	bcs gravu			; it's up.
000F1Cr 3               gravd:
000F1Cr 3  85 rr        	sta z80_b			; set pixels to move.
000F1Er 3               gravd0:
000F1Er 3  20 rr rr     	jsr cangd			; can we go down?
000F21r 3  D0 28        	bne gravst			; can't move down, so stop.
000F23r 3  A0 08        	ldy #8
000F25r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000F27r 3  18           	clc
000F28r 3  69 01        	adc #1
000F2Ar 3  91 rr        	sta (z80_ix),y
000F2Cr 3  C6 rr        	dec z80_b
000F2Er 3  D0 EE        	bne gravd0
000F30r 3  60           	rts
000F31r 3               gravu:
000F31r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000F33r 3  18           	clc
000F34r 3  69 01        	adc #1
000F36r 3  85 rr        	sta z80_b			; set pixels to move.
000F38r 3               gravu0:
000F38r 3  20 rr rr     	jsr cangu			; can we go up?
000F3Br 3  D0 6E        	bne ifalls			; can't move up, go down next.
000F3Dr 3  A0 08        	ldy #8
000F3Fr 3  B1 rr        	lda (z80_ix),y
000F41r 3  38           	sec
000F42r 3  E9 01        	sbc #1
000F44r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000F46r 3  C6 rr        	dec z80_b
000F48r 3  D0 EE        	bne gravu0
000F4Ar 3  60           	rts
000F4Br 3               gravst:
000F4Br 3  A0 0D        	ldy #var_jumpLo
000F4Dr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000F4Fr 3  85 rr        	sta z80_l
000F51r 3  A0 0E        	ldy #var_jumpHi
000F53r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000F55r 3  85 rr        	sta z80_h
000F57r 3               
000F57r 3  A9 00        	lda #0				; null value in pointer.
000F59r 3  A0 0D        	ldy #var_jumpLo
000F5Br 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000F5Dr 3  C8           	iny
000F5Er 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000F60r 3               
000F60r 3  A0 00        	ldy #0
000F62r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000F64r 3  C9 63        	cmp #99				; is it the end marker?
000F66r 3               evftf:
000F66r 3  F0 01        	beq :+				; yes, fallen too far.
000F68r 3  60           	rts
000F69r 3               :
000F69r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000F6Cr 3               
000F6Cr 3               ;------------------------------------------------
000F6Cr 3               ; Initiate fall check.
000F6Cr 3               ;------------------------------------------------
000F6Cr 3               
000F6Cr 3               ifall:
000F6Cr 3  A0 0D        	ldy #var_jumpLo
000F6Er 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000F70r 3  85 rr        	sta z80_l
000F72r 3  A0 0E        	ldy #var_jumpHi
000F74r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000F76r 3  85 rr        	sta z80_h			; high byte in accumulator.
000F78r 3  05 rr        	ora z80_l			; merge in low byte.
000F7Ar 3  F0 01        	beq :+
000F7Cr 3  60           	rts				; if either is set, we're already in the air.
000F7Dr 3               :
000F7Dr 3  A0 09        	ldy #9
000F7Fr 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000F81r 3  85 rr        	sta dispx
000F83r 3  A0 08        	ldy #8
000F85r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000F87r 3  18           	clc
000F88r 3               numsp7:
000F88r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000F8Ar 3  85 rr        	sta dispy			; set up test coordinates.
000F8Cr 3  20 rr rr     	jsr tstbl			; get map address.
000F8Fr 3  20 rr rr     	jsr plchk			; block, platform check.
000F92r 3  F0 01        	beq :+
000F94r 3  60           	rts				; it's solid, don't fall.
000F95r 3               :
000F95r 3  E6 rr        	inc bufaddr			; look right one cell.
000F97r 3  20 rr rr     	jsr plchk			; block, platform check.
000F9Ar 3  F0 01        	beq :+
000F9Cr 3  60           	rts				; it's solid, don't fall.
000F9Dr 3               :
000F9Dr 3  A5 rr        	lda dispx			; y coordinate.
000F9Fr 3  29 07        	and #7				; position straddling block cells.
000FA1r 3  F0 08        	beq ifalls			; no more checks needed.
000FA3r 3  E6 rr        	inc bufaddr			; look to third cell.
000FA5r 3  20 rr rr     	jsr plchk			; block, platform check.
000FA8r 3  F0 01        	beq :+
000FAAr 3  60           	rts				; it's solid, don't fall.
000FABr 3               :
000FABr 3               ifalls:
000FABr 3  A9 rr        	lda #<jtab			; jump table start.
000FADr 3  85 rr        	sta z80_l
000FAFr 3  A9 rr        	lda #>jtab
000FB1r 3  85 rr        	sta z80_h
000FB3r 3               ifal0:
000FB3r 3  E6 rr        	inc z80_l			; point to next value.
000FB5r 3  D0 02        	bne :+
000FB7r 3  E6 rr        	inc z80_h
000FB9r 3               :
000FB9r 3  A0 00        	ldy #0
000FBBr 3  B1 rr        	lda (z80_hl),y			; fetch value.
000FBDr 3  F0 F4        	beq ifal0			; no, get next value.
000FBFr 3  C9 63        	cmp #99				; reached end of table?
000FC1r 3  D0 01        	bne :+
000FC3r 3  60           	rts				; yes, don't fall.
000FC4r 3               :
000FC4r 3  C9 80        	cmp #128			; is it going up?
000FC6r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000FC8r 3               
000FC8r 3  A0 0D        	ldy #13
000FCAr 3  A5 rr        	lda z80_l
000FCCr 3  91 rr        	sta (z80_ix),y 			; set jump low.
000FCEr 3  A0 0E        	ldy #14
000FD0r 3  A5 rr        	lda z80_h
000FD2r 3  91 rr        	sta (z80_ix),y 			; set jump high.
000FD4r 3  60           	rts
000FD5r 3               
000FD5r 3               
000FD5r 3               ;----------------------------------------------------
000FD5r 3               ; Get frame data for a particular sprite.
000FD5r 3               ; Input:
000FD5r 3               ;  a		= framenumer
000FD5r 3               ; Output:
000FD5r 3               ;  hl		= frame address
000FD5r 3               ;
000FD5r 3               ; global:	hl,frmptr
000FD5r 3               ; local:	-
000FD5r 3               ; calls:	-
000FD5r 3               ;----------------------------------------------------
000FD5r 3               
000FD5r 3               gfrm:
000FD5r 3  0A           	asl a	 		 	; multiple of 2.
000FD6r 3  18           	clc
000FD7r 3  6D rr rr     	adc frmptr 			; frames used by game.
000FDAr 3  85 rr        	sta z80_l
000FDCr 3  AD rr rr     	lda frmptr+1
000FDFr 3  69 00        	adc #0
000FE1r 3  85 rr        	sta z80_h 			; point to frame start.
000FE3r 3  60           	rts
000FE4r 3               
000FE4r 3               ;----------------------------------------------------
000FE4r 3               ; Find sprite list for current room.
000FE4r 3               ;
000FE4r 3               ; global:	hl
000FE4r 3               ; local:	x,y
000FE4r 3               ; calls:	-
000FE4r 3               ;----------------------------------------------------
000FE4r 3               
000FE4r 3               sprlst:
000FE4r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000FE6r 3  85 rr        	sta z80_l
000FE8r 3  A9 rr        	lda #>nmedat
000FEAr 3  85 rr        	sta z80_h
000FECr 3  A6 rr        	ldx scno 			; screen number.
000FEEr 3  D0 01        	bne sprls2 			; is it the first screen?
000FF0r 3  60           	rts 				; yes, don't need to search data.
000FF1r 3               sprls2:
000FF1r 3  A0 00        	ldy #0
000FF3r 3               sprls1:
000FF3r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000FF5r 3  C9 FF        	cmp #255			; is it an end marker?
000FF7r 3  F0 0E        	beq sprls0 			; yes, end of this room.
000FF9r 3               
000FF9r 3  18           	clc 				; point to next sprite in list.
000FFAr 3  A5 rr        	lda z80_l
000FFCr 3  69 04        	adc #NMESIZ
000FFEr 3  85 rr        	sta z80_l
001000r 3  90 02        	bcc :+
001002r 3  E6 rr        	inc z80_h
001004r 3               :
001004r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
001007r 3               sprls0:
001007r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
001009r 3  D0 02        	bne :+
00100Br 3  E6 rr        	inc z80_h
00100Dr 3               :
00100Dr 3  CA           	dex
00100Er 3  D0 E3        	bne sprls1 			; continue until room found.
001010r 3  60           	rts
001011r 3               
001011r 3               
001011r 3               ;----------------------------------------------------
001011r 3               ; Clear all but a single player sprite.
001011r 3               ;
001011r 3               ; global:	-
001011r 3               ; local:	x,y,ix
001011r 3               ; calls:	-
001011r 3               ;----------------------------------------------------
001011r 3               
001011r 3               nspr:
001011r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001013r 3  85 rr        	sta sprcnt
001015r 3  A9 rr        	lda #<sprtab 			; sprite table.
001017r 3  85 rr        	sta z80_x
001019r 3  A9 rr        	lda #>sprtab
00101Br 3  85 rr        	sta z80_i
00101Dr 3               nspr0:
00101Dr 3  A0 00        	ldy #0 				; fetch sprite type.
00101Fr 3  B1 rr        	lda (z80_ix),y 			; is it a player?
001021r 3  F0 1A        	beq nspr1 			; yes, keep this one.
001023r 3               
001023r 3  A9 FF        	lda #255
001025r 3  A0 00        	ldy #0 				; fetch sprite type.
001027r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001029r 3  A0 05        	ldy #5
00102Br 3  91 rr        	sta (z80_ix),y 			; remove next type.
00102Dr 3               
00102Dr 3  18           	clc	 			; next sprite.
00102Er 3  A5 rr        	lda z80_x
001030r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001032r 3  85 rr        	sta z80_x
001034r 3  90 02        	bcc :+
001036r 3  E6 rr        	inc z80_i
001038r 3               :
001038r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
00103Ar 3  D0 E1        	bne nspr0
00103Cr 3  60           	rts
00103Dr 3               nspr1:
00103Dr 3  A9 FF        	lda #255
00103Fr 3  A0 00        	ldy #0
001041r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001043r 3               
001043r 3  18           	clc	 			; point to next sprite.
001044r 3  A5 rr        	lda z80_x
001046r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001048r 3  85 rr        	sta z80_x
00104Ar 3  90 02        	bcc :+
00104Cr 3  E6 rr        	inc z80_i
00104Er 3               :
00104Er 3  C6 rr        	dec sprcnt	 			; one less to do.
001050r 3  D0 01        	bne nspr2
001052r 3  60           	rts
001053r 3               nspr2:
001053r 3  A9 FF        	lda #255
001055r 3  A0 00        	ldy #0
001057r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001059r 3  A0 05        	ldy #5
00105Br 3  91 rr        	sta (z80_ix),y 			; remove next type.
00105Dr 3               
00105Dr 3  18           	clc	 			; next sprite.
00105Er 3  A5 rr        	lda z80_x
001060r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001062r 3  85 rr        	sta z80_x
001064r 3  90 02        	bcc :+
001066r 3  E6 rr        	inc z80_i
001068r 3               :
001068r 3  C6 rr        	dec sprcnt	 			; one less space in table.
00106Ar 3  D0 E7        	bne nspr2
00106Cr 3  60           	rts
00106Dr 3               
00106Dr 3               ;----------------------------------------------------------
00106Dr 3               ; Two initialisation routines.
00106Dr 3               ; Initialise sprites - copy everything from list to table.
00106Dr 3               ;
00106Dr 3               ; global:	-
00106Dr 3               ; local:	x,y,ix
00106Dr 3               ; calls:	cpsp
00106Dr 3               ;----------------------------------------------------------
00106Dr 3               
00106Dr 3               ispr:
00106Dr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
00106Fr 3  85 rr        	sta sprcnt
001071r 3  A9 rr        	lda #<sprtab			; sprite table.
001073r 3  85 rr        	sta z80_x
001075r 3  A9 rr        	lda #>sprtab
001077r 3  85 rr        	sta z80_i
001079r 3               ispr2:
001079r 3  A0 00        	ldy #0
00107Br 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
00107Dr 3  C9 FF        	cmp #255 			; is it an end marker?
00107Fr 3  D0 01        	bne :+
001081r 3  60           	rts 				; yes, no more to do.
001082r 3               :
001082r 3               ispr1:
001082r 3  A0 00        	ldy #0
001084r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
001086r 3  C9 FF        	cmp #255 			; is it enabled yet?
001088r 3  D0 08        	bne ispr4			; yes, try another slot.
00108Ar 3               
00108Ar 3  A0 05        	ldy #5
00108Cr 3  B1 rr        	lda (z80_ix),y		 	; next type.
00108Er 3  C9 FF        	cmp #255 			; is it enabled yet?
001090r 3  F0 10        	beq ispr3 			; no, process this one.
001092r 3               ispr4:
001092r 3  18           	clc 				; next sprite.
001093r 3  A5 rr        	lda z80_x
001095r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001097r 3  85 rr        	sta z80_x
001099r 3  90 02        	bcc :+
00109Br 3  E6 rr        	inc z80_i
00109Dr 3               :
00109Dr 3  C6 rr        	dec sprcnt
00109Fr 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0010A1r 3  60           	rts  				; no more room in table.
0010A2r 3               ispr3:
0010A2r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
0010A5r 3  C6 rr        	dec sprcnt			; one less space in the table.
0010A7r 3  D0 D0        	bne ispr2
0010A9r 3  60           	rts
0010AAr 3               
0010AAr 3               
0010AAr 3               ;-----------------------------------------------------------------------
0010AAr 3               ; Initialise sprites - but not player, we're keeping the old one.
0010AAr 3               ;
0010AAr 3               ; global:	-
0010AAr 3               ; local:	x,y,ix
0010AAr 3               ; calls:	cpsp
0010AAr 3               ;-----------------------------------------------------------------------
0010AAr 3               
0010AAr 3               kspr:
0010AAr 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0010ACr 3  A9 rr        	lda #<sprtab 			; sprite table.
0010AEr 3  85 rr        	sta z80_x
0010B0r 3  A9 rr        	lda #>sprtab
0010B2r 3  85 rr        	sta z80_i
0010B4r 3               kspr2:
0010B4r 3  A0 00        	ldy #0
0010B6r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0010B8r 3  C9 FF        	cmp #255 			; is it an end marker?
0010BAr 3  D0 01        	bne :+
0010BCr 3  60           	rts 				; yes, no more to do.
0010BDr 3               :
0010BDr 3  C9 00        	cmp #0
0010BFr 3  D0 0E        	bne kspr1 			; no, add to table as normal.
0010C1r 3               
0010C1r 3  18           	clc 				; next sprite.
0010C2r 3  A5 rr        	lda z80_l
0010C4r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0010C6r 3  85 rr        	sta z80_l
0010C8r 3  90 02        	bcc :+
0010CAr 3  E6 rr        	inc z80_h
0010CCr 3               :
0010CCr 3  4C rr rr     	jmp kspr2
0010CFr 3               kspr1:
0010CFr 3  A0 00        	ldy #0 				; fetch sprite type.
0010D1r 3  B1 rr        	lda (z80_ix),y
0010D3r 3  C9 FF        	cmp #255 			; is it enabled yet?
0010D5r 3  D0 08        	bne kspr4 			; yes, try another slot.
0010D7r 3               
0010D7r 3  A0 05        	ldy #5 				; next type.
0010D9r 3  B1 rr        	lda (z80_ix),y
0010DBr 3  C9 FF        	cmp #255 			; is it enabled yet?
0010DDr 3  F0 0F        	beq kspr3 			; no, process this one.
0010DFr 3               kspr4:
0010DFr 3  18           	clc 				; next sprite.
0010E0r 3  A5 rr        	lda z80_x
0010E2r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0010E4r 3  85 rr        	sta z80_x
0010E6r 3  90 02        	bcc :+
0010E8r 3  E6 rr        	inc z80_i
0010EAr 3               :
0010EAr 3  CA           	dex	 			; repeat for remaining sprites.
0010EBr 3  D0 E2        	bne kspr1
0010EDr 3  60           	rts  				; no more room in table.
0010EEr 3               kspr3:
0010EEr 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
0010F1r 3  CA           	dex	 			; one less space in the table.
0010F2r 3  D0 C0        	bne kspr2
0010F4r 3  60           	rts
0010F5r 3               
0010F5r 3               ;----------------------------------------------
0010F5r 3               ; Copy sprite from list to table.
0010F5r 3               ;
0010F5r 3               ; global:	hl,ix
0010F5r 3               ; local:	y
0010F5r 3               ; calls:	evnt09
0010F5r 3               ;----------------------------------------------
0010F5r 3               
0010F5r 3               cpsp:
0010F5r 3  A0 00        	ldy #0					; fetch byte from table.
0010F7r 3  B1 rr        	lda (z80_hl),y
0010F9r 3               	; y=var_Type
0010F9r 3  91 rr        	sta (z80_ix),y			; set up type.
0010FBr 3  A0 05        	ldy #var_newType
0010FDr 3  91 rr        	sta (z80_ix),y 			; set up type.
0010FFr 3               
0010FFr 3  E6 rr        	inc z80_l 				; move to next byte.
001101r 3  D0 02        	bne :+
001103r 3  E6 rr        	inc z80_h
001105r 3               :
001105r 3  A0 00        	ldy #0 					; fetch byte from table.
001107r 3  B1 rr        	lda (z80_hl),y
001109r 3  A0 06        	ldy #var_newImage
00110Br 3  91 rr        	sta (z80_ix),y			; set up image.
00110Dr 3               
00110Dr 3  E6 rr        	inc z80_l 				; move to next byte.
00110Fr 3  D0 02        	bne :+
001111r 3  E6 rr        	inc z80_h
001113r 3               :
001113r 3  A0 00        	ldy #0
001115r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
001117r 3  A0 08        	ldy #var_newY
001119r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00111Br 3               
00111Br 3  A9 C8        	lda #200 				; set initial coordinate off screen.
00111Dr 3  A0 03        	ldy #var_Y
00111Fr 3  91 rr        	sta (z80_ix),y
001121r 3               
001121r 3  E6 rr        	inc z80_l 				; move to next byte.
001123r 3  D0 02        	bne :+
001125r 3  E6 rr        	inc z80_h
001127r 3               :
001127r 3  A0 00        	ldy #0 					; fetch byte from table.
001129r 3  B1 rr        	lda (z80_hl),y
00112Br 3  A0 09        	ldy #var_newX
00112Dr 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00112Fr 3               
00112Fr 3  E6 rr        	inc z80_l 				; move to next byte.
001131r 3  D0 02        	bne :+
001133r 3  E6 rr        	inc z80_h
001135r 3               :
001135r 3  A9 00        	lda #0					; zeroes in accumulator.
001137r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
001139r 3  91 rr        	sta (z80_ix),y
00113Br 3  A0 0A        	ldy #var_Direction 		; reset direction.
00113Dr 3  91 rr        	sta (z80_ix),y
00113Fr 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
001141r 3  91 rr        	sta (z80_ix),y
001143r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
001145r 3  91 rr        	sta (z80_ix),y
001147r 3               
001147r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
001149r 3  A0 10        	ldy #var_dataHi
00114Br 3  91 rr        	sta (z80_ix),y
00114Dr 3               evis0:
00114Dr 3  A5 rr        	lda z80_i
00114Fr 3  48           	pha
001150r 3  A5 rr        	lda z80_x
001152r 3  48           	pha
001153r 3  A5 rr        	lda z80_h
001155r 3  48           	pha
001156r 3  A5 rr        	lda z80_l
001158r 3  48           	pha
001159r 3               
001159r 3  20 rr rr     	jsr evnt09 				; perform event.
00115Cr 3               
00115Cr 3  68           	pla
00115Dr 3  85 rr        	sta z80_l
00115Fr 3  68           	pla
001160r 3  85 rr        	sta z80_h
001162r 3  68           	pla
001163r 3  85 rr        	sta z80_x
001165r 3  68           	pla
001166r 3  85 rr        	sta z80_i
001168r 3               
001168r 3  18           	clc
001169r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
00116Br 3  69 11        	adc #TABSIZ		 	; next sprite.
00116Dr 3  85 rr        	sta z80_x
00116Fr 3  90 02        	bcc :+
001171r 3  E6 rr        	inc z80_i
001173r 3               :
001173r 3  60           	rts
001174r 3               
001174r 3               
001174r 3               ;-------------------------------------
001174r 3               ; Clear the play area window.
001174r 3               ;-------------------------------------
001174r 3               
001174r 3               clw:
001174r 3  AD rr rr     	lda wintop			; get coordinates of window.
001177r 3  85 rr        	sta dispy			; put into dispx for calculation.
001179r 3  AD rr rr     	lda winlft
00117Cr 3  85 rr        	sta dispx
00117Er 3               
00117Er 3  AD rr rr     	lda winhgt			; height of window.
001181r 3  85 rr        	sta rrow			; copy to b register.
001183r 3               clw3:
001183r 3  AD rr rr     	lda winwid 			; width of window.
001186r 3  85 rr        	sta rcol
001188r 3               clw2:
001188r 3  20 rr rr     	jsr gprad 			; get print address.
00118Br 3  A9 00        	lda #0				; zero byte to write.
00118Dr 3  A2 07        	ldx #7				; pixel height of each cell.
00118Fr 3               clw1:
00118Fr 3  BC rr rr     	ldy scrtab,x
001192r 3  91 rr        	sta (scraddr),y 			; copy to screen.
001194r 3  CA           	dex				; next screen row down.
001195r 3  10 F8        	bpl clw1
001197r 3               
001197r 3  E6 rr        	inc dispx			; next column.
001199r 3  C6 rr        	dec rcol			; one less to do.
00119Br 3  D0 EB        	bne clw2			; repeat for remaining columns.
00119Dr 3               
00119Dr 3  AD rr rr     	lda winlft			; get left edge.
0011A0r 3  85 rr        	sta dispx 			; reset x.
0011A2r 3  E6 rr        	inc dispy 			; next line down.
0011A4r 3               
0011A4r 3  C6 rr        	dec rrow
0011A6r 3  D0 DB        	bne clw3			; repeat down the screen.
0011A8r 3               
0011A8r 3  AD rr rr     	lda wintop			; get coordinates of window.
0011ABr 3  85 rr        	sta chary			; put into display position.
0011ADr 3  AD rr rr     	lda winlft
0011B0r 3  85 rr        	sta charx
0011B2r 3  60           	rts
0011B3r 3               
0011B3r 3               
0011B3r 3               ;----------------------------------------------------------
0011B3r 3               ; Effects code.
0011B3r 3               ; Ticker routine is called 25 times per second.
0011B3r 3               ;
0011B3r 3               ; txtini = text scroller address
0011B3r 3               ; txtscr = left text screen address
0011B3r 3               ; txtwid = scroller width
0011B3r 3               ; txtbit = 128
0011B3r 3               ; X      = message nr
0011B3r 3               ;----------------------------------------------------------
0011B3r 3               
0011B3r 3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
0011B7r 3  20 28 30 38  
0011BBr 3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
0011BFr 3  60 68 70 78  
0011C3r 3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
0011C7r 3  A0 A8 B0 B8  
0011CBr 3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
0011CFr 3  E0 E8 F0 F8  
0011D3r 3               .if sflag
0011D3r 3               scrly:
0011D3r 3               	rts
0011D3r 3               	.word txtscr         	; set scr_l = left screen address.
0011D3r 3               	sta scr_l
0011D3r 3               	sta tmp_byte		; tmp_byte = lb left screen address
0011D3r 3               	lda txtscr+1
0011D3r 3               	sta scr_l+1
0011D3r 3               	sta scr_r+1		; set hb scr_r = hb left screen address
0011D3r 3               
0011D3r 3               	stx xtmp		; save x
0011D3r 3               
0011D3r 3               	ldx txtwid
0011D3r 3               	dex
0011D3r 3               	ldy scrollpos,x
0011D3r 3               	tya
0011D3r 3               	clc
0011D3r 3               	adc scr_l
0011D3r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
0011D3r 3               
0011D3r 3               	lda #8
0011D3r 3               	sta line_cnt
0011D3r 3               scrly1:
0011D3r 3               	ldx txtwid		; set txtwide
0011D3r 3               	dex
0011D3r 3               	clc
0011D3r 3               scrly0:
0011D3r 3               	ldy scrollpos,x
0011D3r 3               	lda (scr_l),y		; scroll 1 line
0011D3r 3               	rol a
0011D3r 3               	sta (scr_l),y
0011D3r 3               	dex
0011D3r 3               	bpl scrly0
0011D3r 3               
0011D3r 3               	inc scr_l
0011D3r 3               	dec line_cnt
0011D3r 3               	bne scrly1		; repeat 8 times
0011D3r 3               
0011D3r 3               	lda txtpos 		; get text pointer.
0011D3r 3               	sta scr_txt
0011D3r 3               	lda txtpos+1
0011D3r 3               	sta scr_txt+1
0011D3r 3               
0011D3r 3               	ldy #0
0011D3r 3               	lda (scr_txt),y 	; find character we're displaying.
0011D3r 3               	and #127 		; remove end marker bit if applicable.
0011D3r 3               	cmp #13			; is it newline?
0011D3r 3               	bne scrly5 		; no, it's okay.
0011D3r 3               	lda #32			; convert to a space instead.
0011D3r 3               scrly5:
0011D3r 3               	sta fntaddr		; calculate char address
0011D3r 3               	lda #0
0011D3r 3               	sta fntaddr+1
0011D3r 3               	asl fntaddr  		; multiply char by 8.
0011D3r 3               	rol fntaddr+1
0011D3r 3               	asl fntaddr
0011D3r 3               	rol fntaddr+1
0011D3r 3               	asl fntaddr
0011D3r 3               	rol fntaddr+1
0011D3r 3               	lda fntaddr
0011D3r 3               	clc
0011D3r 3               	adc #<(FONT-256)
0011D3r 3               	sta scrly3+1		; that's the low byte.
0011D3r 3               	lda fntaddr+1
0011D3r 3               	adc #>(FONT-256)
0011D3r 3               	sta scrly3+2		; add displacement.
0011D3r 3               
0011D3r 3               	ldy #0
0011D3r 3               scrly3:
0011D3r 3               	lda $3333,y		; get image of char line.
0011D3r 3               	and txtbit
0011D3r 3               	beq scrly2		; don't plot pixel
0011D3r 3               ;	ldy scrline,x
0011D3r 3               	lda (scr_r),y
0011D3r 3               	clc
0011D3r 3               	ora #1
0011D3r 3               	sta (scr_r),y		; plot pixel
0011D3r 3               scrly2:
0011D3r 3               	iny			; next line of char.
0011D3r 3               	cpy #8
0011D3r 3               	bne scrly3
0011D3r 3               
0011D3r 3               	lsr txtbit		; bit of text to display.
0011D3r 3               	bcs :+
0011D3r 3               	rts
0011D3r 3               :
0011D3r 3               	ldy #0
0011D3r 3               	lda (scr_txt),y 	; what was the character?
0011D3r 3               	asl a	  		; end of message?
0011D3r 3               	bcs scrly4
0011D3r 3               	inc txtpos
0011D3r 3               	bne :+
0011D3r 3               	inc txtpos+1
0011D3r 3               :
0011D3r 3               	jmp scrly6 		; not yet - continue.
0011D3r 3               scrly4:
0011D3r 3               	lda txtini 		; start of scrolling message.
0011D3r 3               	sta txtpos
0011D3r 3               	lda txtini+1
0011D3r 3               	sta txtpos+1
0011D3r 3               scrly6:
0011D3r 3               	lda #128
0011D3r 3               	sta txtbit
0011D3r 3               	ldx xtmp
0011D3r 3               	rts
0011D3r 3               
0011D3r 3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0011D3r 3               tmp_byte:	.byte 0
0011D3r 3               line_cnt:	.byte 0
0011D3r 3               
0011D3r 3               ;-------------------------------------------------------
0011D3r 3               ; Entry TICKER command
0011D3r 3               ;
0011D3r 3               ; Entry:
0011D3r 3               ;  z80_b = message nr
0011D3r 3               ;  z80_c = width
0011D3r 3               ;-------------------------------------------------------
0011D3r 3               
0011D3r 3               iscrly:
0011D3r 3               	jsr prescr 		; set up display position.
0011D3r 3               	lda #<msgdat 		; text messages.
0011D3r 3               	sta z80_l
0011D3r 3               	lda #>msgdat
0011D3r 3               	sta z80_h
0011D3r 3               	lda z80_c 		; width.
0011D3r 3               	sec
0011D3r 3               	sbc #1			; subtract one.
0011D3r 3               	cmp #32 		; is it between 1 and 32?
0011D3r 3               	bcc :+
0011D3r 3               	lda #$60
0011D3r 3               	jmp iscrl0		; no, disable messages.
0011D3r 3               :
0011D3r 3               	ldx z80_b		; message number.
0011D3r 3               	jsr getwrd 		; find message start.
0011D3r 3               
0011D3r 3               	lda z80_l		; set initial text position.
0011D3r 3               	sta txtini
0011D3r 3               	lda z80_h
0011D3r 3               	sta txtini+1
0011D3r 3               
0011D3r 3               	lda #$ad		; code for lda adrr
0011D3r 3               iscrl0:
0011D3r 3               	sta scrly		; enable/disable scrolling routine.
0011D3r 3               
0011D3r 3               	jsr prescr 		; set up display position.
0011D3r 3               	jsr gprad 		; get print address.
0011D3r 3               
0011D3r 3               	lda scraddr 		; set text screen address.
0011D3r 3               	sta txtscr
0011D3r 3               	lda scraddr+1
0011D3r 3               	sta txtscr+1
0011D3r 3               
0011D3r 3               	lda z80_c		; width.
0011D3r 3               	sta txtwid		; set width in working storage.
0011D3r 3               
0011D3r 3               	lda #128 		; start with leftmost bit.
0011D3r 3               	sta txtbit
0011D3r 3               
0011D3r 3               	jmp scrly4
0011D3r 3               .endif
0011D3r 3               
0011D3r 3               ;------------------------------------------------------------------
0011D3r 3               ; Dig routine, conditional assembly depending on dflag
0011D3r 3               ;------------------------------------------------------------------
0011D3r 3               .if dflag
0011D3r 3               dig:
0011D3r 3               	and #3
0011D3r 3               	beq digr		; dig right
0011D3r 3               	cmp #1
0011D3r 3               	beq digl		; dig left
0011D3r 3               	cmp #2
0011D3r 3               	beq digd		; dig down
0011D3r 3               
0011D3r 3               ; Dig up.
0011D3r 3               
0011D3r 3               digu:				; dig up
0011D3r 3               	ldy #8
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	sec
0011D3r 3               	sbc #2
0011D3r 3               	sta dispy		; set y
0011D3r 3               
0011D3r 3               	iny
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	sta dispx		; set x
0011D3r 3               	jmp digv
0011D3r 3               
0011D3r 3               ; Dig down.
0011D3r 3               
0011D3r 3               digd:
0011D3r 3               	ldy #9
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	sta dispx		; set y
0011D3r 3               
0011D3r 3               	dey
0011D3r 3               	clc
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	adc #16
0011D3r 3               	sta dispy		; set y
0011D3r 3               	jmp digv
0011D3r 3               
0011D3r 3               ; Dig left.
0011D3r 3               
0011D3r 3               digl:
0011D3r 3               	ldy #8
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	sta dispy		; set y
0011D3r 3               
0011D3r 3               	iny
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	sec
0011D3r 3               	sbc #2			; x=x-2
0011D3r 3               	sta dispx		; set x
0011D3r 3               	jmp digh
0011D3r 3               
0011D3r 3               ; Dig right.
0011D3r 3               
0011D3r 3               digr:
0011D3r 3               	ldy #8
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	sta dispy		; set y
0011D3r 3               
0011D3r 3               	iny
0011D3r 3               	lda (z80_ix),y
0011D3r 3               	clc
0011D3r 3               	adc #16
0011D3r 3               	sta dispx		; set x+16
0011D3r 3               	jmp digh
0011D3r 3               
0011D3r 3               ; Vertical digging
0011D3r 3               
0011D3r 3               digv:
0011D3r 3               	jsr tstbl		; check blocktype in MAP
0011D3r 3               	jsr fdchk		; test if FODDER
0011D3r 3               
0011D3r 3               	clc
0011D3r 3               	lda dispx		; look 1 cell down
0011D3r 3               	adc #8
0011D3r 3               	sta dispx
0011D3r 3               	jsr tstbl		; check blocktype in MAP
0011D3r 3               	jsr fdchk
0011D3r 3               	lda dispx
0011D3r 3               	and #7
0011D3r 3               	bne :+
0011D3r 3               	rts
0011D3r 3               :
0011D3r 3               	clc
0011D3r 3               	lda dispx		; look 1 cell down
0011D3r 3               	adc #8
0011D3r 3               	sta dispx
0011D3r 3               	jsr tstbl		; check blocktype in MAP
0011D3r 3               	jmp fdchk
0011D3r 3               
0011D3r 3               ; Horizontal digging
0011D3r 3               
0011D3r 3               digh:
0011D3r 3               	jsr tstbl		; check blocktype in MAP
0011D3r 3               	jsr fdchk		; test if FODDER
0011D3r 3               
0011D3r 3               	clc
0011D3r 3               	lda dispy		; look 1 cell down
0011D3r 3               	adc #8
0011D3r 3               	sta dispy
0011D3r 3               	jsr tstbl		; check blocktype in MAP
0011D3r 3               	jsr fdchk
0011D3r 3               	lda dispy
0011D3r 3               	and #7
0011D3r 3               	bne :+
0011D3r 3               	rts
0011D3r 3               :
0011D3r 3               	clc
0011D3r 3               	lda dispy		; look 1 cell down
0011D3r 3               	adc #8
0011D3r 3               	sta dispy
0011D3r 3               	jsr tstbl		; check blocktype in MAP
0011D3r 3               	jmp fdchk
0011D3r 3               
0011D3r 3               digcnt:	.byte 0
0011D3r 3               
0011D3r 3               .endif
0011D3r 3               
0011D3r 3               ;------------------------------------------------------------------
0011D3r 3               ; Sprite table
0011D3r 3               ;------------------------------------------------------------------
0011D3r 3               
0011D3r 3               
0011D3r 3               ; ix+0  = type.
0011D3r 3               ; ix+1  = sprite image number.
0011D3r 3               ; ix+2  = frame.
0011D3r 3               ; ix+3  = y coord.
0011D3r 3               ; ix+4  = x coord.
0011D3r 3               
0011D3r 3               ; ix+5  = new type.
0011D3r 3               ; ix+6  = new image number.
0011D3r 3               ; ix+7  = new frame.
0011D3r 3               ; ix+8  = new y coord.
0011D3r 3               ; ix+9  = new x coord.
0011D3r 3               
0011D3r 3               ; ix+10 = direction.
0011D3r 3               ; ix+11 = parameter 1.
0011D3r 3               ; ix+12 = parameter 2.
0011D3r 3               ; ix+13 = jump pointer low.
0011D3r 3               ; ix+14 = jump pointer high.
0011D3r 3               ; ix+15 = data pointer low.
0011D3r 3               ; ix+16 = data pointer high.
0011D3r 3               
0011D3r 3               ; block NUMSPR * TABSIZ,255
0011D3r 3               
0011D3r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0011D7r 3  FF FF FF FF  
0011DBr 3  FF FF FF FF  
00129Fr 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0012A3r 3  FF FF FF 00  
0012A7r 3  C0 78 00 00  
0012B0r 3  07           roomtb:	.byte 7                      ; start room map offset.
0012B1r 3               
0012B1r 3               setfgcol:
0012B1r 3               setbgcol:
0012B1r 3  60           	rts
0012B2r 3               
0012B2r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0012B2r 3               ; if USER has an argument it will be passed in the accumulator.
0012B2r 3               
0012B2r 3               user:
0012B2r 3               	.include "user.inc"
0012B2r 4  60           	rts
0012B3r 4               
0012B3r 3               
0012B3r 3               ; Everything below here will be generated by the editors.
0012B3r 3               
0012B3r 3               
0012B3r 3  60                   rts
0012B4r 3               WINDOWTOP = 0
0012B4r 3               WINDOWLFT = 0
0012B4r 3               WINDOWHGT = 21
0012B4r 3               WINDOWWID = 22 ;a
0012B4r 3               MAPWID = 5
0012B4r 3  FF FF FF FF          .byte 255,255,255,255,255
0012B8r 3  FF           
0012B9r 3               mapdat:
0012B9r 3  FF 07 03 05          .byte 255,7,3,5,255,255,6,2,4,255,255,0,1,8,255
0012BDr 3  FF FF 06 02  
0012C1r 3  04 FF FF 00  
0012C8r 3  FF FF FF FF          .byte 255,255,255,255,255
0012CCr 3  FF           
0012CDr 3  0B           stmap:  .byte 11
0012CEr 3               
0012CEr 3               evnt00:
0012CEr 3  A0 08                ldy #8
0012D0r 3  B1 rr                lda (z80_ix),y
0012D2r 3  85 rr                sta varh
0012D4r 3  A0 09                ldy #9
0012D6r 3  B1 rr                lda (z80_ix),y
0012D8r 3  85 rr                sta vari
0012DAr 3  20 rr rr             jsr skobj	; DETECTOBJECT
0012DDr 3  85 rr                sta varobj
0012DFr 3  A9 06                lda #6
0012E1r 3  C5 rr                cmp varobj
0012E3r 3  F0 03                beq *+5
0012E5r 3  4C rr rr             jmp a00140
0012E8r 3  A5 rr                lda varobj	; GET
0012EAr 3  20 rr rr             jsr getob
0012EDr 3  A5 rr                lda varg
0012EFr 3  18                   clc
0012F0r 3  69 01                adc #1
0012F2r 3  85 rr                sta varg
0012F4r 3  A9 15                lda #21
0012F6r 3  85 rr                sta chary
0012F8r 3  A9 14                lda #20
0012FAr 3  85 rr                sta charx
0012FCr 3  A9 04                lda #4 	; INK
0012FEr 3  8D rr rr             sta fontcol
001301r 3  A5 rr                lda varg	; DISPLAY
001303r 3  20 rr rr             jsr disply
001306r 3  A9 01                lda #1
001308r 3  85 rr                sta varb
00130Ar 3  A9 01                lda #1
00130Cr 3  85 rr                sta vars
00130Er 3  A9 00        a00140: lda #0
001310r 3  C5 rr                cmp varobj
001312r 3  F0 03                beq *+5
001314r 3  4C rr rr             jmp a00239
001317r 3  A5 rr                lda varobj	; GET
001319r 3  20 rr rr             jsr getob
00131Cr 3  A5 rr                lda varg
00131Er 3  18                   clc
00131Fr 3  69 01                adc #1
001321r 3  85 rr                sta varg
001323r 3  A9 15                lda #21
001325r 3  85 rr                sta chary
001327r 3  A9 14                lda #20
001329r 3  85 rr                sta charx
00132Br 3  A9 04                lda #4 	; INK
00132Dr 3  8D rr rr             sta fontcol
001330r 3  A5 rr                lda varg	; DISPLAY
001332r 3  20 rr rr             jsr disply
001335r 3  A9 01                lda #1
001337r 3  85 rr                sta vard
001339r 3  A9 01                lda #1
00133Br 3  85 rr                sta vars
00133Dr 3  A9 01        a00239: lda #1
00133Fr 3  C5 rr                cmp varobj
001341r 3  F0 03                beq *+5
001343r 3  4C rr rr             jmp a00337
001346r 3  A5 rr                lda varobj	; GET
001348r 3  20 rr rr             jsr getob
00134Br 3  A5 rr                lda varg
00134Dr 3  18                   clc
00134Er 3  69 01                adc #1
001350r 3  85 rr                sta varg
001352r 3  A9 15                lda #21
001354r 3  85 rr                sta chary
001356r 3  A9 14                lda #20
001358r 3  85 rr                sta charx
00135Ar 3  A9 04                lda #4 	; INK
00135Cr 3  8D rr rr             sta fontcol
00135Fr 3  A5 rr                lda varg	; DISPLAY
001361r 3  20 rr rr             jsr disply
001364r 3  A9 01                lda #1
001366r 3  85 rr                sta vare
001368r 3  A9 01                lda #1
00136Ar 3  85 rr                sta vars
00136Cr 3  A9 02        a00337: lda #2
00136Er 3  C5 rr                cmp varobj
001370r 3  F0 03                beq *+5
001372r 3  4C rr rr             jmp a00435
001375r 3  A5 rr                lda varobj	; GET
001377r 3  20 rr rr             jsr getob
00137Ar 3  A5 rr                lda varg
00137Cr 3  18                   clc
00137Dr 3  69 01                adc #1
00137Fr 3  85 rr                sta varg
001381r 3  A9 15                lda #21
001383r 3  85 rr                sta chary
001385r 3  A9 14                lda #20
001387r 3  85 rr                sta charx
001389r 3  A9 04                lda #4 	; INK
00138Br 3  8D rr rr             sta fontcol
00138Er 3  A5 rr                lda varg	; DISPLAY
001390r 3  20 rr rr             jsr disply
001393r 3  A9 01                lda #1
001395r 3  85 rr                sta varf
001397r 3  A9 01                lda #1
001399r 3  85 rr                sta vars
00139Br 3  A9 04        a00435: lda #4
00139Dr 3  C5 rr                cmp varobj
00139Fr 3  F0 03                beq *+5
0013A1r 3  4C rr rr             jmp a00533
0013A4r 3  A5 rr                lda varobj	; GET
0013A6r 3  20 rr rr             jsr getob
0013A9r 3  A5 rr                lda varg
0013ABr 3  18                   clc
0013ACr 3  69 01                adc #1
0013AEr 3  85 rr                sta varg
0013B0r 3  A9 15                lda #21
0013B2r 3  85 rr                sta chary
0013B4r 3  A9 14                lda #20
0013B6r 3  85 rr                sta charx
0013B8r 3  A9 04                lda #4 	; INK
0013BAr 3  8D rr rr             sta fontcol
0013BDr 3  A5 rr                lda varg	; DISPLAY
0013BFr 3  20 rr rr             jsr disply
0013C2r 3  A9 01                lda #1
0013C4r 3  85 rr                sta varj
0013C6r 3  A9 01                lda #1
0013C8r 3  85 rr                sta vars
0013CAr 3  A9 03        a00533: lda #3
0013CCr 3  C5 rr                cmp varobj
0013CEr 3  F0 03                beq *+5
0013D0r 3  4C rr rr             jmp a00632
0013D3r 3  A5 rr                lda varobj	; GET
0013D5r 3  20 rr rr             jsr getob
0013D8r 3  A5 rr                lda varg
0013DAr 3  18                   clc
0013DBr 3  69 01                adc #1
0013DDr 3  85 rr                sta varg
0013DFr 3  A9 15                lda #21
0013E1r 3  85 rr                sta chary
0013E3r 3  A9 14                lda #20
0013E5r 3  85 rr                sta charx
0013E7r 3  A9 04                lda #4 	; INK
0013E9r 3  8D rr rr             sta fontcol
0013ECr 3  A5 rr                lda varg	; DISPLAY
0013EEr 3  20 rr rr             jsr disply
0013F1r 3  A9 01                lda #1
0013F3r 3  85 rr                sta varl
0013F5r 3  A9 01                lda #1
0013F7r 3  85 rr                sta vars
0013F9r 3  A9 05        a00632: lda #5
0013FBr 3  C5 rr                cmp varobj
0013FDr 3  F0 03                beq *+5
0013FFr 3  4C rr rr             jmp a00730
001402r 3  A5 rr                lda varobj	; GET
001404r 3  20 rr rr             jsr getob
001407r 3  A5 rr                lda varg
001409r 3  18                   clc
00140Ar 3  69 01                adc #1
00140Cr 3  85 rr                sta varg
00140Er 3  A9 15                lda #21
001410r 3  85 rr                sta chary
001412r 3  A9 14                lda #20
001414r 3  85 rr                sta charx
001416r 3  A9 04                lda #4 	; INK
001418r 3  8D rr rr             sta fontcol
00141Br 3  A5 rr                lda varg	; DISPLAY
00141Dr 3  20 rr rr             jsr disply
001420r 3  A9 01                lda #1
001422r 3  85 rr                sta varo
001424r 3  A9 01                lda #1
001426r 3  85 rr                sta vars
001428r 3  A9 07        a00730: lda #7
00142Ar 3  C5 rr                cmp varobj
00142Cr 3  F0 03                beq *+5
00142Er 3  4C rr rr             jmp a00828
001431r 3  A5 rr                lda varobj	; GET
001433r 3  20 rr rr             jsr getob
001436r 3  A5 rr                lda varg
001438r 3  18                   clc
001439r 3  69 01                adc #1
00143Br 3  85 rr                sta varg
00143Dr 3  A9 15                lda #21
00143Fr 3  85 rr                sta chary
001441r 3  A9 14                lda #20
001443r 3  85 rr                sta charx
001445r 3  A9 04                lda #4 	; INK
001447r 3  8D rr rr             sta fontcol
00144Ar 3  A5 rr                lda varg	; DISPLAY
00144Cr 3  20 rr rr             jsr disply
00144Fr 3  A9 01                lda #1
001451r 3  85 rr                sta varn
001453r 3  A9 01                lda #1
001455r 3  85 rr                sta vars
001457r 3  A9 08        a00828: lda #8
001459r 3  C5 rr                cmp varobj
00145Br 3  F0 03                beq *+5
00145Dr 3  4C rr rr             jmp a00857
001460r 3  A9 01                lda #1		; ENDGAME
001462r 3  85 rr                sta gamwon
001464r 3  A9 09        a00857: lda #9
001466r 3  C5 rr                cmp varobj
001468r 3  F0 03                beq *+5
00146Ar 3  4C rr rr             jmp a00955
00146Dr 3  A9 78                lda #120		; BEEP
00146Fr 3  0A                   asl a
001470r 3  8D rr rr             sta sndtyp
001473r 3  A5 rr                lda varobj	; GET
001475r 3  20 rr rr             jsr getob
001478r 3  A5 rr                lda numlif
00147Ar 3  18                   clc
00147Br 3  69 01                adc #1
00147Dr 3  85 rr                sta numlif
00147Fr 3  A9 15                lda #21
001481r 3  85 rr                sta chary
001483r 3  A9 07                lda #7
001485r 3  85 rr                sta charx
001487r 3  A9 02                lda #2 	; INK
001489r 3  8D rr rr             sta fontcol
00148Cr 3  A5 rr                lda numlif	; DISPLAY
00148Er 3  20 rr rr             jsr disply
001491r 3  A9 0A        a00955: lda #10
001493r 3  C5 rr                cmp varobj
001495r 3  F0 03                beq *+5
001497r 3  4C rr rr             jmp a01053
00149Ar 3  A9 78                lda #120		; BEEP
00149Cr 3  0A                   asl a
00149Dr 3  8D rr rr             sta sndtyp
0014A0r 3  A5 rr                lda varobj	; GET
0014A2r 3  20 rr rr             jsr getob
0014A5r 3  A5 rr                lda numlif
0014A7r 3  18                   clc
0014A8r 3  69 01                adc #1
0014AAr 3  85 rr                sta numlif
0014ACr 3  A9 15                lda #21
0014AEr 3  85 rr                sta chary
0014B0r 3  A9 07                lda #7
0014B2r 3  85 rr                sta charx
0014B4r 3  A9 02                lda #2 	; INK
0014B6r 3  8D rr rr             sta fontcol
0014B9r 3  A5 rr                lda numlif	; DISPLAY
0014BBr 3  20 rr rr             jsr disply
0014BEr 3  A9 0B        a01053: lda #11
0014C0r 3  C5 rr                cmp varobj
0014C2r 3  F0 03                beq *+5
0014C4r 3  4C rr rr             jmp a01151
0014C7r 3  A9 78                lda #120		; BEEP
0014C9r 3  0A                   asl a
0014CAr 3  8D rr rr             sta sndtyp
0014CDr 3  A5 rr                lda varobj	; GET
0014CFr 3  20 rr rr             jsr getob
0014D2r 3  A5 rr                lda numlif
0014D4r 3  18                   clc
0014D5r 3  69 01                adc #1
0014D7r 3  85 rr                sta numlif
0014D9r 3  A9 15                lda #21
0014DBr 3  85 rr                sta chary
0014DDr 3  A9 07                lda #7
0014DFr 3  85 rr                sta charx
0014E1r 3  A9 02                lda #2 	; INK
0014E3r 3  8D rr rr             sta fontcol
0014E6r 3  A5 rr                lda numlif	; DISPLAY
0014E8r 3  20 rr rr             jsr disply
0014EBr 3  A9 01        a01151: lda #1
0014EDr 3  C5 rr                cmp vars
0014EFr 3  F0 03                beq *+5
0014F1r 3  4C rr rr             jmp a01190
0014F4r 3  A9 78                lda #120		; BEEP
0014F6r 3  0A                   asl a
0014F7r 3  8D rr rr             sta sndtyp
0014FAr 3  A9 00                lda #0
0014FCr 3  85 rr                sta vars
0014FEr 3  A9 0C        a01190: lda #12
001500r 3  A0 06                ldy #6
001502r 3  91 rr                sta (z80_ix),y
001504r 3  A9 04                lda #4
001506r 3  C5 rr                cmp varc
001508r 3  F0 03                beq *+5
00150Ar 3  4C rr rr             jmp a01232
00150Dr 3  A9 00                lda #0		; ANIMATE
00150Fr 3  20 rr rr             jsr animsp
001512r 3  A5 rr        a01232: lda joyval	; KEY
001514r 3  29 08                and #8
001516r 3  F0 03                beq :+
001518r 3  4C rr rr             jmp a01428
00151Br 3               :
00151Br 3  A9 01                lda #1
00151Dr 3  A0 08                ldy #8
00151Fr 3  D1 rr                cmp (z80_ix),y
001521r 3  B0 03                bcs *+5
001523r 3  4C rr rr             jmp a01310
001526r 3  20 rr rr             jsr laddu	; CANGOUP
001529r 3  F0 03                beq :+
00152Br 3  4C rr rr             jmp a01310
00152Er 3               :
00152Er 3  20 rr rr             jsr scru	; SCREENUP
001531r 3  A9 92                lda #146
001533r 3  A0 08                ldy #8
001535r 3  91 rr                sta (z80_ix),y
001537r 3  20 rr rr     a01310: jsr laddu	; CANGOUP
00153Ar 3  F0 03                beq :+
00153Cr 3  4C rr rr             jmp a01428
00153Fr 3               :
00153Fr 3  A0 08                ldy #8 		; SPRITEUP
001541r 3  B1 rr                lda (z80_ix),y
001543r 3  38                   sec
001544r 3  E9 02                sbc #2
001546r 3  91 rr                sta (z80_ix),y
001548r 3  A9 02                lda #2
00154Ar 3  A0 06                ldy #6
00154Cr 3  91 rr                sta (z80_ix),y
00154Er 3  A9 00                lda #0
001550r 3  C5 rr                cmp varc
001552r 3  F0 03                beq *+5
001554r 3  4C rr rr             jmp a01428
001557r 3  A9 00                lda #0		; ANIMATE
001559r 3  20 rr rr             jsr animsp
00155Cr 3  A9 01                lda #1
00155Er 3  A0 07                ldy #7
001560r 3  D1 rr                cmp (z80_ix),y
001562r 3  F0 03                beq *+5
001564r 3  4C rr rr             jmp a01428
001567r 3  A9 05                lda #5		; BEEP
001569r 3  0A                   asl a
00156Ar 3  8D rr rr             sta sndtyp
00156Dr 3  A5 rr        a01428: lda joyval	; KEY
00156Fr 3  29 04                and #4
001571r 3  F0 03                beq :+
001573r 3  4C rr rr             jmp a01627
001576r 3               :
001576r 3  A9 90                lda #144
001578r 3  A0 08                ldy #8
00157Ar 3  D1 rr                cmp (z80_ix),y
00157Cr 3  90 03                bcc *+5
00157Er 3  4C rr rr             jmp a01507
001581r 3  20 rr rr             jsr laddd	; LADDERBELOW
001584r 3  F0 03                beq :+
001586r 3  4C rr rr             jmp a01507
001589r 3               :
001589r 3  20 rr rr             jsr scrd	; SCREENDOWN
00158Cr 3  A9 00                lda #0
00158Er 3  A0 08                ldy #8
001590r 3  91 rr                sta (z80_ix),y
001592r 3  20 rr rr     a01507: jsr laddd	; LADDERBELOW
001595r 3  F0 03                beq :+
001597r 3  4C rr rr             jmp a01627
00159Ar 3               :
00159Ar 3  A0 08                ldy #8 		; SPRITEDOWN
00159Cr 3  B1 rr                lda (z80_ix),y
00159Er 3  18                   clc
00159Fr 3  69 02                adc #2
0015A1r 3  91 rr                sta (z80_ix),y
0015A3r 3  A9 02                lda #2
0015A5r 3  A0 06                ldy #6
0015A7r 3  91 rr                sta (z80_ix),y
0015A9r 3  A9 00                lda #0
0015ABr 3  C5 rr                cmp varc
0015ADr 3  F0 03                beq *+5
0015AFr 3  4C rr rr             jmp a01627
0015B2r 3  A9 00                lda #0		; ANIMATE
0015B4r 3  20 rr rr             jsr animsp
0015B7r 3  A9 01                lda #1
0015B9r 3  A0 07                ldy #7
0015BBr 3  D1 rr                cmp (z80_ix),y
0015BDr 3  F0 03                beq *+5
0015BFr 3  4C rr rr             jmp a01627
0015C2r 3  A9 05                lda #5		; BEEP
0015C4r 3  0A                   asl a
0015C5r 3  8D rr rr             sta sndtyp
0015C8r 3  A5 rr        a01627: lda joyval	; KEY
0015CAr 3  29 01                and #1
0015CCr 3  F0 03                beq :+
0015CEr 3  4C rr rr             jmp a02002
0015D1r 3               :
0015D1r 3  A9 01                lda #1
0015D3r 3  A0 0A                ldy #10
0015D5r 3  91 rr                sta (z80_ix),y
0015D7r 3  A9 98                lda #152
0015D9r 3  A0 09                ldy #9
0015DBr 3  D1 rr                cmp (z80_ix),y
0015DDr 3  90 03                bcc *+5
0015DFr 3  4C rr rr             jmp a01708
0015E2r 3  20 rr rr             jsr scrr	; SCREENRIGHT
0015E5r 3  A9 04                lda #4
0015E7r 3  A0 09                ldy #9
0015E9r 3  91 rr                sta (z80_ix),y
0015EBr 3  4C rr rr             jmp a02002
0015EEr 3  20 rr rr     a01708: jsr cangr	; CANGORIGHT
0015F1r 3  F0 03                beq :+
0015F3r 3  4C rr rr             jmp a02002
0015F6r 3               :
0015F6r 3  A9 00                lda #0
0015F8r 3  A0 06                ldy #6
0015FAr 3  91 rr                sta (z80_ix),y
0015FCr 3  A5 rr                lda joyval	; KEY
0015FEr 3  29 08                and #8
001600r 3  F0 03                beq :+
001602r 3  4C rr rr             jmp a01899
001605r 3               :
001605r 3  20 rr rr             jsr laddu	; CANGOUP
001608r 3  F0 03                beq :+
00160Ar 3  4C rr rr             jmp a01791
00160Dr 3               :
00160Dr 3  A9 02                lda #2
00160Fr 3  A0 06                ldy #6
001611r 3  91 rr                sta (z80_ix),y
001613r 3  4C rr rr             jmp a01894
001616r 3  A9 00        a01791: lda #0
001618r 3  A0 06                ldy #6
00161Ar 3  91 rr                sta (z80_ix),y
00161Cr 3  A0 09                ldy #9 		; SPRITERIGHT
00161Er 3  B1 rr                lda (z80_ix),y
001620r 3  18                   clc
001621r 3  69 02                adc #2
001623r 3  91 rr                sta (z80_ix),y
001625r 3  A9 00                lda #0
001627r 3  C5 rr                cmp varc
001629r 3  F0 03                beq *+5
00162Br 3  4C rr rr             jmp a01894
00162Er 3  A9 00                lda #0		; ANIMATE
001630r 3  20 rr rr             jsr animsp
001633r 3  A9 01                lda #1
001635r 3  A0 07                ldy #7
001637r 3  D1 rr                cmp (z80_ix),y
001639r 3  F0 03                beq *+5
00163Br 3  4C rr rr             jmp a01894
00163Er 3  A9 05                lda #5		; BEEP
001640r 3  0A                   asl a
001641r 3  8D rr rr             sta sndtyp
001644r 3  4C rr rr     a01894: jmp a02002
001647r 3  A9 00        a01899: lda #0
001649r 3  A0 06                ldy #6
00164Br 3  91 rr                sta (z80_ix),y
00164Dr 3  A0 09                ldy #9 		; SPRITERIGHT
00164Fr 3  B1 rr                lda (z80_ix),y
001651r 3  18                   clc
001652r 3  69 02                adc #2
001654r 3  91 rr                sta (z80_ix),y
001656r 3  A9 00                lda #0
001658r 3  C5 rr                cmp varc
00165Ar 3  F0 03                beq *+5
00165Cr 3  4C rr rr             jmp a02002
00165Fr 3  A9 00                lda #0		; ANIMATE
001661r 3  20 rr rr             jsr animsp
001664r 3  A9 01                lda #1
001666r 3  A0 07                ldy #7
001668r 3  D1 rr                cmp (z80_ix),y
00166Ar 3  F0 03                beq *+5
00166Cr 3  4C rr rr             jmp a02002
00166Fr 3  A9 05                lda #5		; BEEP
001671r 3  0A                   asl a
001672r 3  8D rr rr             sta sndtyp
001675r 3  A5 rr        a02002: lda joyval	; KEY
001677r 3  29 02                and #2
001679r 3  F0 03                beq :+
00167Br 3  4C rr rr             jmp a02376
00167Er 3               :
00167Er 3  A9 00                lda #0
001680r 3  A0 0A                ldy #10
001682r 3  91 rr                sta (z80_ix),y
001684r 3  A9 04                lda #4
001686r 3  A0 09                ldy #9
001688r 3  D1 rr                cmp (z80_ix),y
00168Ar 3  B0 03                bcs *+5
00168Cr 3  4C rr rr             jmp a02083
00168Fr 3  20 rr rr             jsr scrl	; SCREENLEFT
001692r 3  A9 98                lda #152
001694r 3  A0 09                ldy #9
001696r 3  91 rr                sta (z80_ix),y
001698r 3  4C rr rr             jmp a02376
00169Br 3  20 rr rr     a02083: jsr cangl	; CANGOLEFT
00169Er 3  F0 03                beq :+
0016A0r 3  4C rr rr             jmp a02376
0016A3r 3               :
0016A3r 3  A9 01                lda #1
0016A5r 3  A0 06                ldy #6
0016A7r 3  91 rr                sta (z80_ix),y
0016A9r 3  A5 rr                lda joyval	; KEY
0016ABr 3  29 08                and #8
0016ADr 3  F0 03                beq :+
0016AFr 3  4C rr rr             jmp a02273
0016B2r 3               :
0016B2r 3  20 rr rr             jsr laddu	; CANGOUP
0016B5r 3  F0 03                beq :+
0016B7r 3  4C rr rr             jmp a02166
0016BAr 3               :
0016BAr 3  A9 02                lda #2
0016BCr 3  A0 06                ldy #6
0016BEr 3  91 rr                sta (z80_ix),y
0016C0r 3  4C rr rr             jmp a02269
0016C3r 3  A9 01        a02166: lda #1
0016C5r 3  A0 06                ldy #6
0016C7r 3  91 rr                sta (z80_ix),y
0016C9r 3  A0 09                ldy #9 		; SPRITELEFT
0016CBr 3  B1 rr                lda (z80_ix),y
0016CDr 3  38                   sec
0016CEr 3  E9 02                sbc #2
0016D0r 3  91 rr                sta (z80_ix),y
0016D2r 3  A9 00                lda #0
0016D4r 3  C5 rr                cmp varc
0016D6r 3  F0 03                beq *+5
0016D8r 3  4C rr rr             jmp a02269
0016DBr 3  A9 00                lda #0		; ANIMATE
0016DDr 3  20 rr rr             jsr animsp
0016E0r 3  A9 01                lda #1
0016E2r 3  A0 07                ldy #7
0016E4r 3  D1 rr                cmp (z80_ix),y
0016E6r 3  F0 03                beq *+5
0016E8r 3  4C rr rr             jmp a02269
0016EBr 3  A9 05                lda #5		; BEEP
0016EDr 3  0A                   asl a
0016EEr 3  8D rr rr             sta sndtyp
0016F1r 3  4C rr rr     a02269: jmp a02376
0016F4r 3  A9 01        a02273: lda #1
0016F6r 3  A0 06                ldy #6
0016F8r 3  91 rr                sta (z80_ix),y
0016FAr 3  A0 09                ldy #9 		; SPRITELEFT
0016FCr 3  B1 rr                lda (z80_ix),y
0016FEr 3  38                   sec
0016FFr 3  E9 02                sbc #2
001701r 3  91 rr                sta (z80_ix),y
001703r 3  A9 00                lda #0
001705r 3  C5 rr                cmp varc
001707r 3  F0 03                beq *+5
001709r 3  4C rr rr             jmp a02376
00170Cr 3  A9 00                lda #0		; ANIMATE
00170Er 3  20 rr rr             jsr animsp
001711r 3  A9 01                lda #1
001713r 3  A0 07                ldy #7
001715r 3  D1 rr                cmp (z80_ix),y
001717r 3  F0 03                beq *+5
001719r 3  4C rr rr             jmp a02376
00171Cr 3  A9 05                lda #5		; BEEP
00171Er 3  0A                   asl a
00171Fr 3  8D rr rr             sta sndtyp
001722r 3               a02376: ; SPRITEINK command
001722r 3  60                   rts
001723r 3               evnt01:
001723r 3  60                   rts
001724r 3               evnt02:
001724r 3  A9 04                lda #4
001726r 3  C5 rr                cmp varc
001728r 3  F0 03                beq *+5
00172Ar 3  4C rr rr             jmp c00030
00172Dr 3  A9 00                lda #0		; ANIMATE
00172Fr 3  20 rr rr             jsr animsp
001732r 3  A9 06        c00030: lda #CUSTOM	; CUSTOM
001734r 3  85 rr                sta z80_b
001736r 3  20 rr rr             jsr tded
001739r 3  C5 rr                cmp z80_b
00173Br 3  F0 03                beq :+
00173Dr 3  4C rr rr             jmp c00113
001740r 3               :
001740r 3  A9 00                lda #0
001742r 3  A0 0B                ldy #11
001744r 3  D1 rr                cmp (z80_ix),y
001746r 3  F0 03                beq *+5
001748r 3  4C rr rr             jmp c00100
00174Br 3  A9 01                lda #1
00174Dr 3  A0 0B                ldy #11
00174Fr 3  91 rr                sta (z80_ix),y
001751r 3  4C rr rr             jmp c00113
001754r 3  A9 00        c00100: lda #0
001756r 3  A0 0B                ldy #11
001758r 3  91 rr                sta (z80_ix),y
00175Ar 3               c00113: ; SPRITEINK command
00175Ar 3  A9 00                lda #0
00175Cr 3  A0 0B                ldy #11
00175Er 3  D1 rr                cmp (z80_ix),y
001760r 3  F0 03                beq *+5
001762r 3  4C rr rr             jmp c00208
001765r 3  20 rr rr             jsr cangl	; CANGOLEFT
001768r 3  F0 03                beq :+
00176Ar 3  4C rr rr             jmp c00189
00176Dr 3               :
00176Dr 3  A0 09                ldy #9 		; SPRITELEFT
00176Fr 3  B1 rr                lda (z80_ix),y
001771r 3  38                   sec
001772r 3  E9 02                sbc #2
001774r 3  91 rr                sta (z80_ix),y
001776r 3  4C rr rr             jmp c00203
001779r 3  A9 01        c00189: lda #1
00177Br 3  A0 0B                ldy #11
00177Dr 3  91 rr                sta (z80_ix),y
00177Fr 3  4C rr rr     c00203: jmp c00269
001782r 3  20 rr rr     c00208: jsr cangr	; CANGORIGHT
001785r 3  F0 03                beq :+
001787r 3  4C rr rr             jmp c00255
00178Ar 3               :
00178Ar 3  A0 09                ldy #9 		; SPRITERIGHT
00178Cr 3  B1 rr                lda (z80_ix),y
00178Er 3  18                   clc
00178Fr 3  69 02                adc #2
001791r 3  91 rr                sta (z80_ix),y
001793r 3  4C rr rr             jmp c00269
001796r 3  A9 00        c00255: lda #0
001798r 3  A0 0B                ldy #11
00179Ar 3  91 rr                sta (z80_ix),y
00179Cr 3  A9 00        c00269: lda #0 	; COLLISION
00179Er 3  85 rr                sta z80_b
0017A0r 3  20 rr rr             jsr sktyp
0017A3r 3  B0 03                bcs :+
0017A5r 3  4C rr rr             jmp c00304
0017A8r 3               :
0017A8r 3  A9 01                lda #1 		; KILL
0017AAr 3  85 rr                sta deadf
0017ACr 3  A9 07        c00304: lda #7
0017AEr 3  A0 06                ldy #6
0017B0r 3  D1 rr                cmp (z80_ix),y
0017B2r 3  F0 03                beq *+5
0017B4r 3  4C rr rr             jmp c00333
0017B7r 3                       ; SPRITEINK command
0017B7r 3  A9 03        c00333: lda #3
0017B9r 3  A0 06                ldy #6
0017BBr 3  D1 rr                cmp (z80_ix),y
0017BDr 3  F0 03                beq *+5
0017BFr 3  4C rr rr             jmp c00362
0017C2r 3                       ; SPRITEINK command
0017C2r 3  A9 04        c00362: lda #4
0017C4r 3  A0 06                ldy #6
0017C6r 3  D1 rr                cmp (z80_ix),y
0017C8r 3  F0 03                beq *+5
0017CAr 3  4C rr rr             jmp c00391
0017CDr 3                       ; SPRITEINK command
0017CDr 3  A9 05        c00391: lda #5
0017CFr 3  A0 06                ldy #6
0017D1r 3  D1 rr                cmp (z80_ix),y
0017D3r 3  F0 03                beq *+5
0017D5r 3  4C rr rr             jmp c00420
0017D8r 3                       ; SPRITEINK command
0017D8r 3  A9 06        c00420: lda #6
0017DAr 3  A0 06                ldy #6
0017DCr 3  D1 rr                cmp (z80_ix),y
0017DEr 3  F0 03                beq *+5
0017E0r 3  4C rr rr             jmp c00449
0017E3r 3                       ; SPRITEINK command
0017E3r 3  A9 08        c00449: lda #8
0017E5r 3  A0 06                ldy #6
0017E7r 3  D1 rr                cmp (z80_ix),y
0017E9r 3  F0 03                beq *+5
0017EBr 3  4C rr rr             jmp c00478
0017EEr 3                       ; SPRITEINK command
0017EEr 3  A9 0B        c00478: lda #11
0017F0r 3  A0 06                ldy #6
0017F2r 3  D1 rr                cmp (z80_ix),y
0017F4r 3  F0 03                beq *+5
0017F6r 3  4C rr rr             jmp c00507
0017F9r 3                       ; SPRITEINK command
0017F9r 3  60           c00507: rts
0017FAr 3               evnt03:
0017FAr 3  60                   rts
0017FBr 3               evnt04:
0017FBr 3  60                   rts
0017FCr 3               evnt05:
0017FCr 3  A9 00                lda #0
0017FEr 3  85 rr                sta varopt
001800r 3  A9 06                lda #CUSTOM	; CUSTOM
001802r 3  85 rr                sta z80_b
001804r 3  20 rr rr             jsr tded
001807r 3  C5 rr                cmp z80_b
001809r 3  F0 03                beq :+
00180Br 3  4C rr rr             jmp f00094
00180Er 3               :
00180Er 3  A9 02                lda #2
001810r 3  A0 0A                ldy #10
001812r 3  D1 rr                cmp (z80_ix),y
001814r 3  F0 03                beq *+5
001816r 3  4C rr rr             jmp f00080
001819r 3  A9 03                lda #3
00181Br 3  A0 0A                ldy #10
00181Dr 3  91 rr                sta (z80_ix),y
00181Fr 3  4C rr rr             jmp f00094
001822r 3  A9 02        f00080: lda #2
001824r 3  A0 0A                ldy #10
001826r 3  91 rr                sta (z80_ix),y
001828r 3               f00094: ; SPRITEINK command
001828r 3  A0 0A                ldy #10
00182Ar 3  B1 rr                lda (z80_ix),y
00182Cr 3  C9 02                cmp #2
00182Er 3  90 03                bcc *+5
001830r 3  4C rr rr             jmp f00541
001833r 3  A5 rr                lda vari
001835r 3  A0 09                ldy #9
001837r 3  D1 rr                cmp (z80_ix),y
001839r 3  90 03                bcc *+5
00183Br 3  4C rr rr             jmp f00281
00183Er 3  20 rr rr             jsr cangl	; CANGOLEFT
001841r 3  F0 03                beq :+
001843r 3  4C rr rr             jmp f00180
001846r 3               :
001846r 3  A9 03                lda #3
001848r 3  A0 0A                ldy #10
00184Ar 3  91 rr                sta (z80_ix),y
00184Cr 3  4C rr rr             jmp f00277
00184Fr 3  A9 00        f00180: lda #0
001851r 3  A0 0A                ldy #10
001853r 3  D1 rr                cmp (z80_ix),y
001855r 3  F0 03                beq *+5
001857r 3  4C rr rr             jmp f00241
00185Ar 3  20 rr rr             jsr laddu	; CANGOUP
00185Dr 3  F0 03                beq :+
00185Fr 3  4C rr rr             jmp f00223
001862r 3               :
001862r 3  4C rr rr             jmp f00237
001865r 3  A9 01        f00223: lda #1
001867r 3  A0 0A                ldy #10
001869r 3  91 rr                sta (z80_ix),y
00186Br 3  4C rr rr     f00237: jmp f00277
00186Er 3  20 rr rr     f00241: jsr laddd	; LADDERBELOW
001871r 3  F0 03                beq :+
001873r 3  4C rr rr             jmp f00263
001876r 3               :
001876r 3  4C rr rr             jmp f00277
001879r 3  A9 00        f00263: lda #0
00187Br 3  A0 0A                ldy #10
00187Dr 3  91 rr                sta (z80_ix),y
00187Fr 3  4C rr rr     f00277: jmp f00537
001882r 3  A5 rr        f00281: lda vari
001884r 3  A0 09                ldy #9
001886r 3  D1 rr                cmp (z80_ix),y
001888r 3  F0 03                beq *+5
00188Ar 3  4C rr rr             jmp f00405
00188Dr 3  A9 00                lda #0
00188Fr 3  A0 0A                ldy #10
001891r 3  D1 rr                cmp (z80_ix),y
001893r 3  F0 03                beq *+5
001895r 3  4C rr rr             jmp f00365
001898r 3  20 rr rr             jsr laddu	; CANGOUP
00189Br 3  F0 03                beq :+
00189Dr 3  4C rr rr             jmp f00347
0018A0r 3               :
0018A0r 3  4C rr rr             jmp f00360
0018A3r 3  A9 01        f00347: lda #1
0018A5r 3  A0 0A                ldy #10
0018A7r 3  91 rr                sta (z80_ix),y
0018A9r 3  4C rr rr     f00360: jmp f00400
0018ACr 3  20 rr rr     f00365: jsr laddd	; LADDERBELOW
0018AFr 3  F0 03                beq :+
0018B1r 3  4C rr rr             jmp f00387
0018B4r 3               :
0018B4r 3  4C rr rr             jmp f00400
0018B7r 3  A9 00        f00387: lda #0
0018B9r 3  A0 0A                ldy #10
0018BBr 3  91 rr                sta (z80_ix),y
0018BDr 3  4C rr rr     f00400: jmp f00537
0018C0r 3  20 rr rr     f00405: jsr cangr	; CANGORIGHT
0018C3r 3  F0 03                beq :+
0018C5r 3  4C rr rr             jmp f00440
0018C8r 3               :
0018C8r 3  A9 02                lda #2
0018CAr 3  A0 0A                ldy #10
0018CCr 3  91 rr                sta (z80_ix),y
0018CEr 3  4C rr rr             jmp f00537
0018D1r 3  A9 00        f00440: lda #0
0018D3r 3  A0 0A                ldy #10
0018D5r 3  D1 rr                cmp (z80_ix),y
0018D7r 3  F0 03                beq *+5
0018D9r 3  4C rr rr             jmp f00501
0018DCr 3  20 rr rr             jsr laddu	; CANGOUP
0018DFr 3  F0 03                beq :+
0018E1r 3  4C rr rr             jmp f00483
0018E4r 3               :
0018E4r 3  4C rr rr             jmp f00497
0018E7r 3  A9 01        f00483: lda #1
0018E9r 3  A0 0A                ldy #10
0018EBr 3  91 rr                sta (z80_ix),y
0018EDr 3  4C rr rr     f00497: jmp f00537
0018F0r 3  20 rr rr     f00501: jsr laddd	; LADDERBELOW
0018F3r 3  F0 03                beq :+
0018F5r 3  4C rr rr             jmp f00523
0018F8r 3               :
0018F8r 3  4C rr rr             jmp f00537
0018FBr 3  A9 00        f00523: lda #0
0018FDr 3  A0 0A                ldy #10
0018FFr 3  91 rr                sta (z80_ix),y
001901r 3  4C rr rr     f00537: jmp f00956
001904r 3  A0 08        f00541: ldy #8
001906r 3  B1 rr                lda (z80_ix),y
001908r 3  C5 rr                cmp varh
00190Ar 3  90 03                bcc *+5
00190Cr 3  4C rr rr             jmp f00701
00190Fr 3  20 rr rr             jsr laddd	; LADDERBELOW
001912r 3  F0 03                beq :+
001914r 3  4C rr rr             jmp f00599
001917r 3               :
001917r 3  A9 01                lda #1
001919r 3  A0 0A                ldy #10
00191Br 3  91 rr                sta (z80_ix),y
00191Dr 3  4C rr rr             jmp f00696
001920r 3  A9 03        f00599: lda #3
001922r 3  A0 0A                ldy #10
001924r 3  D1 rr                cmp (z80_ix),y
001926r 3  F0 03                beq *+5
001928r 3  4C rr rr             jmp f00661
00192Br 3  20 rr rr             jsr cangl	; CANGOLEFT
00192Er 3  F0 03                beq :+
001930r 3  4C rr rr             jmp f00643
001933r 3               :
001933r 3  4C rr rr             jmp f00656
001936r 3  A9 02        f00643: lda #2
001938r 3  A0 0A                ldy #10
00193Ar 3  91 rr                sta (z80_ix),y
00193Cr 3  4C rr rr     f00656: jmp f00696
00193Fr 3  20 rr rr     f00661: jsr cangr	; CANGORIGHT
001942r 3  F0 03                beq :+
001944r 3  4C rr rr             jmp f00682
001947r 3               :
001947r 3  4C rr rr             jmp f00696
00194Ar 3  A9 03        f00682: lda #3
00194Cr 3  A0 0A                ldy #10
00194Er 3  91 rr                sta (z80_ix),y
001950r 3  4C rr rr     f00696: jmp f00956
001953r 3  A5 rr        f00701: lda varh
001955r 3  A0 08                ldy #8
001957r 3  D1 rr                cmp (z80_ix),y
001959r 3  F0 03                beq *+5
00195Br 3  4C rr rr             jmp f00825
00195Er 3  A9 02                lda #2
001960r 3  A0 0A                ldy #10
001962r 3  D1 rr                cmp (z80_ix),y
001964r 3  F0 03                beq *+5
001966r 3  4C rr rr             jmp f00785
001969r 3  20 rr rr             jsr cangr	; CANGORIGHT
00196Cr 3  F0 03                beq :+
00196Er 3  4C rr rr             jmp f00767
001971r 3               :
001971r 3  4C rr rr             jmp f00780
001974r 3  A9 03        f00767: lda #3
001976r 3  A0 0A                ldy #10
001978r 3  91 rr                sta (z80_ix),y
00197Ar 3  4C rr rr     f00780: jmp f00820
00197Dr 3  20 rr rr     f00785: jsr cangl	; CANGOLEFT
001980r 3  F0 03                beq :+
001982r 3  4C rr rr             jmp f00806
001985r 3               :
001985r 3  4C rr rr             jmp f00820
001988r 3  A9 02        f00806: lda #2
00198Ar 3  A0 0A                ldy #10
00198Cr 3  91 rr                sta (z80_ix),y
00198Er 3  4C rr rr     f00820: jmp f00956
001991r 3  20 rr rr     f00825: jsr laddu	; CANGOUP
001994r 3  F0 03                beq :+
001996r 3  4C rr rr             jmp f00859
001999r 3               :
001999r 3  A9 00                lda #0
00199Br 3  A0 0A                ldy #10
00199Dr 3  91 rr                sta (z80_ix),y
00199Fr 3  4C rr rr             jmp f00956
0019A2r 3  A9 02        f00859: lda #2
0019A4r 3  A0 0A                ldy #10
0019A6r 3  D1 rr                cmp (z80_ix),y
0019A8r 3  F0 03                beq *+5
0019AAr 3  4C rr rr             jmp f00921
0019ADr 3  20 rr rr             jsr cangr	; CANGORIGHT
0019B0r 3  F0 03                beq :+
0019B2r 3  4C rr rr             jmp f00903
0019B5r 3               :
0019B5r 3  4C rr rr             jmp f00916
0019B8r 3  A9 03        f00903: lda #3
0019BAr 3  A0 0A                ldy #10
0019BCr 3  91 rr                sta (z80_ix),y
0019BEr 3  4C rr rr     f00916: jmp f00956
0019C1r 3  20 rr rr     f00921: jsr cangl	; CANGOLEFT
0019C4r 3  F0 03                beq :+
0019C6r 3  4C rr rr             jmp f00942
0019C9r 3               :
0019C9r 3  4C rr rr             jmp f00956
0019CCr 3  A9 02        f00942: lda #2
0019CEr 3  A0 0A                ldy #10
0019D0r 3  91 rr                sta (z80_ix),y
0019D2r 3  A9 00        f00956: lda #0
0019D4r 3  A0 0A                ldy #10
0019D6r 3  D1 rr                cmp (z80_ix),y
0019D8r 3  F0 03                beq *+5
0019DAr 3  4C rr rr             jmp f01003
0019DDr 3  A0 08                ldy #8 		; SPRITEUP
0019DFr 3  B1 rr                lda (z80_ix),y
0019E1r 3  38                   sec
0019E2r 3  E9 02                sbc #2
0019E4r 3  91 rr                sta (z80_ix),y
0019E6r 3  A9 01        f01003: lda #1
0019E8r 3  A0 0A                ldy #10
0019EAr 3  D1 rr                cmp (z80_ix),y
0019ECr 3  F0 03                beq *+5
0019EEr 3  4C rr rr             jmp f01051
0019F1r 3  A0 08                ldy #8 		; SPRITEDOWN
0019F3r 3  B1 rr                lda (z80_ix),y
0019F5r 3  18                   clc
0019F6r 3  69 02                adc #2
0019F8r 3  91 rr                sta (z80_ix),y
0019FAr 3  A9 02        f01051: lda #2
0019FCr 3  A0 0A                ldy #10
0019FEr 3  D1 rr                cmp (z80_ix),y
001A00r 3  F0 03                beq *+5
001A02r 3  4C rr rr             jmp f01113
001A05r 3  A5 rr                lda varr
001A07r 3  A0 06                ldy #6
001A09r 3  91 rr                sta (z80_ix),y
001A0Br 3  A0 09                ldy #9 		; SPRITERIGHT
001A0Dr 3  B1 rr                lda (z80_ix),y
001A0Fr 3  18                   clc
001A10r 3  69 02                adc #2
001A12r 3  91 rr                sta (z80_ix),y
001A14r 3  A9 03        f01113: lda #3
001A16r 3  A0 0A                ldy #10
001A18r 3  D1 rr                cmp (z80_ix),y
001A1Ar 3  F0 03                beq *+5
001A1Cr 3  4C rr rr             jmp f01175
001A1Fr 3  A5 rr                lda varq
001A21r 3  A0 06                ldy #6
001A23r 3  91 rr                sta (z80_ix),y
001A25r 3  A0 09                ldy #9 		; SPRITELEFT
001A27r 3  B1 rr                lda (z80_ix),y
001A29r 3  38                   sec
001A2Ar 3  E9 02                sbc #2
001A2Cr 3  91 rr                sta (z80_ix),y
001A2Er 3  A9 04        f01175: lda #4
001A30r 3  C5 rr                cmp varc
001A32r 3  F0 03                beq *+5
001A34r 3  4C rr rr             jmp f01203
001A37r 3  A9 00                lda #0		; ANIMATE
001A39r 3  20 rr rr             jsr animsp
001A3Cr 3  A9 00        f01203: lda #0 	; COLLISION
001A3Er 3  85 rr                sta z80_b
001A40r 3  20 rr rr             jsr sktyp
001A43r 3  B0 03                bcs :+
001A45r 3  4C rr rr             jmp f01238
001A48r 3               :
001A48r 3  A9 01                lda #1 		; KILL
001A4Ar 3  85 rr                sta deadf
001A4Cr 3               f01238: ; SPRITEINK command
001A4Cr 3  60                   rts
001A4Dr 3               evnt06:
001A4Dr 3  60                   rts
001A4Er 3               evnt07:
001A4Er 3  60                   rts
001A4Fr 3               evnt08:
001A4Fr 3  60                   rts
001A50r 3               evnt09:
001A50r 3  60                   rts
001A51r 3               evnt10:
001A51r 3  A9 00                lda #0
001A53r 3  C5 rr                cmp varm
001A55r 3  F0 03                beq *+5
001A57r 3  4C rr rr             jmp k00018
001A5Ar 3  A9 04        k00018: lda #4
001A5Cr 3  C5 rr                cmp varm
001A5Er 3  F0 03                beq *+5
001A60r 3  4C rr rr             jmp k00048
001A63r 3  A9 00                lda #0
001A65r 3  85 rr                sta varm
001A67r 3  4C rr rr             jmp k00063
001A6Ar 3  A5 rr        k00048: lda varm
001A6Cr 3  18                   clc
001A6Dr 3  69 01                adc #1
001A6Fr 3  85 rr                sta varm
001A71r 3  A9 01        k00063: lda #1
001A73r 3  C5 rr                cmp vara
001A75r 3  F0 03                beq *+5
001A77r 3  4C rr rr             jmp k00093
001A7Ar 3  A9 00                lda #0
001A7Cr 3  85 rr                sta vara
001A7Er 3  4C rr rr             jmp k00108
001A81r 3  A5 rr        k00093: lda vara
001A83r 3  18                   clc
001A84r 3  69 01                adc #1
001A86r 3  85 rr                sta vara
001A88r 3  A9 FF        k00108: lda #255
001A8Ar 3  C5 rr                cmp varb
001A8Cr 3  F0 03                beq *+5
001A8Er 3  4C rr rr             jmp k00231
001A91r 3  A9 03                lda #3
001A93r 3  C5 rr                cmp scno
001A95r 3  F0 03                beq *+5
001A97r 3  4C rr rr             jmp k00223
001A9Ar 3  A9 06                lda #6		; GOT
001A9Cr 3  20 rr rr             jsr gotob
001A9Fr 3  C9 FF                cmp #255
001AA1r 3  F0 03                beq :+
001AA3r 3  4C rr rr             jmp k00223
001AA6r 3               :
001AA6r 3  A9 06                lda #6
001AA8r 3  85 rr                sta chary
001AAAr 3  A9 11                lda #17
001AACr 3  85 rr                sta charx
001AAEr 3  A9 1F                lda #31 		; PUTBLOCK
001AB0r 3  20 rr rr             jsr pbpattr
001AB3r 3  A9 07                lda #7
001AB5r 3  85 rr                sta chary
001AB7r 3  A9 11                lda #17
001AB9r 3  85 rr                sta charx
001ABBr 3  A9 20                lda #32 		; PUTBLOCK
001ABDr 3  20 rr rr             jsr pbpattr
001AC0r 3  A9 00        k00223: lda #0
001AC2r 3  85 rr                sta varb
001AC4r 3  A5 rr        k00231: lda scno
001AC6r 3  C9 04                cmp #4
001AC8r 3  90 03                bcc *+5
001ACAr 3  4C rr rr             jmp k00264
001ACDr 3  A9 09                lda #9
001ACFr 3  85 rr                sta varq
001AD1r 3  A9 0A                lda #10
001AD3r 3  85 rr                sta varr
001AD5r 3  A5 rr        k00264: lda scno
001AD7r 3  C9 06                cmp #6
001AD9r 3  90 03                bcc *+5
001ADBr 3  4C rr rr             jmp k00314
001ADEr 3  A9 03                lda #3
001AE0r 3  C5 rr                cmp scno
001AE2r 3  90 03                bcc *+5
001AE4r 3  4C rr rr             jmp k00314
001AE7r 3  A9 0D                lda #13
001AE9r 3  85 rr                sta varq
001AEBr 3  A9 0E                lda #14
001AEDr 3  85 rr                sta varr
001AEFr 3  A5 rr        k00314: lda scno
001AF1r 3  C9 09                cmp #9
001AF3r 3  90 03                bcc *+5
001AF5r 3  4C rr rr             jmp k00364
001AF8r 3  A9 05                lda #5
001AFAr 3  C5 rr                cmp scno
001AFCr 3  90 03                bcc *+5
001AFEr 3  4C rr rr             jmp k00364
001B01r 3  A9 0F                lda #15
001B03r 3  85 rr                sta varq
001B05r 3  A9 10                lda #16
001B07r 3  85 rr                sta varr
001B09r 3  A9 FF        k00364: lda #255
001B0Br 3  C5 rr                cmp vard
001B0Dr 3  F0 03                beq *+5
001B0Fr 3  4C rr rr             jmp k00487
001B12r 3  A9 01                lda #1
001B14r 3  C5 rr                cmp scno
001B16r 3  F0 03                beq *+5
001B18r 3  4C rr rr             jmp k00479
001B1Br 3  A9 00                lda #0		; GOT
001B1Dr 3  20 rr rr             jsr gotob
001B20r 3  C9 FF                cmp #255
001B22r 3  F0 03                beq :+
001B24r 3  4C rr rr             jmp k00479
001B27r 3               :
001B27r 3  A9 00                lda #0
001B29r 3  85 rr                sta chary
001B2Br 3  A9 11                lda #17
001B2Dr 3  85 rr                sta charx
001B2Fr 3  A9 1F                lda #31 		; PUTBLOCK
001B31r 3  20 rr rr             jsr pbpattr
001B34r 3  A9 01                lda #1
001B36r 3  85 rr                sta chary
001B38r 3  A9 11                lda #17
001B3Ar 3  85 rr                sta charx
001B3Cr 3  A9 20                lda #32 		; PUTBLOCK
001B3Er 3  20 rr rr             jsr pbpattr
001B41r 3  A9 00        k00479: lda #0
001B43r 3  85 rr                sta vard
001B45r 3  A9 FF        k00487: lda #255
001B47r 3  C5 rr                cmp vare
001B49r 3  F0 03                beq *+5
001B4Br 3  4C rr rr             jmp k00611
001B4Er 3  A9 02                lda #2
001B50r 3  C5 rr                cmp scno
001B52r 3  F0 03                beq *+5
001B54r 3  4C rr rr             jmp k00603
001B57r 3  A9 01                lda #1		; GOT
001B59r 3  20 rr rr             jsr gotob
001B5Cr 3  C9 FF                cmp #255
001B5Er 3  F0 03                beq :+
001B60r 3  4C rr rr             jmp k00603
001B63r 3               :
001B63r 3  A9 0C                lda #12
001B65r 3  85 rr                sta chary
001B67r 3  A9 0D                lda #13
001B69r 3  85 rr                sta charx
001B6Br 3  A9 1F                lda #31 		; PUTBLOCK
001B6Dr 3  20 rr rr             jsr pbpattr
001B70r 3  A9 0D                lda #13
001B72r 3  85 rr                sta chary
001B74r 3  A9 0D                lda #13
001B76r 3  85 rr                sta charx
001B78r 3  A9 20                lda #32 		; PUTBLOCK
001B7Ar 3  20 rr rr             jsr pbpattr
001B7Dr 3  A9 00        k00603: lda #0
001B7Fr 3  85 rr                sta vare
001B81r 3  A9 FF        k00611: lda #255
001B83r 3  C5 rr                cmp varf
001B85r 3  F0 03                beq *+5
001B87r 3  4C rr rr             jmp k00734
001B8Ar 3  A9 06                lda #6
001B8Cr 3  C5 rr                cmp scno
001B8Er 3  F0 03                beq *+5
001B90r 3  4C rr rr             jmp k00726
001B93r 3  A9 02                lda #2		; GOT
001B95r 3  20 rr rr             jsr gotob
001B98r 3  C9 FF                cmp #255
001B9Ar 3  F0 03                beq :+
001B9Cr 3  4C rr rr             jmp k00726
001B9Fr 3               :
001B9Fr 3  A9 09                lda #9
001BA1r 3  85 rr                sta chary
001BA3r 3  A9 06                lda #6
001BA5r 3  85 rr                sta charx
001BA7r 3  A9 1F                lda #31 		; PUTBLOCK
001BA9r 3  20 rr rr             jsr pbpattr
001BACr 3  A9 0A                lda #10
001BAEr 3  85 rr                sta chary
001BB0r 3  A9 06                lda #6
001BB2r 3  85 rr                sta charx
001BB4r 3  A9 20                lda #32 		; PUTBLOCK
001BB6r 3  20 rr rr             jsr pbpattr
001BB9r 3  A9 00        k00726: lda #0
001BBBr 3  85 rr                sta varf
001BBDr 3  A9 FF        k00734: lda #255
001BBFr 3  C5 rr                cmp varj
001BC1r 3  F0 03                beq *+5
001BC3r 3  4C rr rr             jmp k00857
001BC6r 3  A9 04                lda #4
001BC8r 3  C5 rr                cmp scno
001BCAr 3  F0 03                beq *+5
001BCCr 3  4C rr rr             jmp k00849
001BCFr 3  A9 04                lda #4		; GOT
001BD1r 3  20 rr rr             jsr gotob
001BD4r 3  C9 FF                cmp #255
001BD6r 3  F0 03                beq :+
001BD8r 3  4C rr rr             jmp k00849
001BDBr 3               :
001BDBr 3  A9 06                lda #6
001BDDr 3  85 rr                sta chary
001BDFr 3  A9 0C                lda #12
001BE1r 3  85 rr                sta charx
001BE3r 3  A9 1F                lda #31 		; PUTBLOCK
001BE5r 3  20 rr rr             jsr pbpattr
001BE8r 3  A9 07                lda #7
001BEAr 3  85 rr                sta chary
001BECr 3  A9 0C                lda #12
001BEEr 3  85 rr                sta charx
001BF0r 3  A9 20                lda #32 		; PUTBLOCK
001BF2r 3  20 rr rr             jsr pbpattr
001BF5r 3  A9 00        k00849: lda #0
001BF7r 3  85 rr                sta varj
001BF9r 3  A9 FF        k00857: lda #255
001BFBr 3  C5 rr                cmp varl
001BFDr 3  F0 03                beq *+5
001BFFr 3  4C rr rr             jmp k00981
001C02r 3  A9 08                lda #8
001C04r 3  C5 rr                cmp scno
001C06r 3  F0 03                beq *+5
001C08r 3  4C rr rr             jmp k00973
001C0Br 3  A9 03                lda #3		; GOT
001C0Dr 3  20 rr rr             jsr gotob
001C10r 3  C9 FF                cmp #255
001C12r 3  F0 03                beq :+
001C14r 3  4C rr rr             jmp k00973
001C17r 3               :
001C17r 3  A9 12                lda #18
001C19r 3  85 rr                sta chary
001C1Br 3  A9 11                lda #17
001C1Dr 3  85 rr                sta charx
001C1Fr 3  A9 1F                lda #31 		; PUTBLOCK
001C21r 3  20 rr rr             jsr pbpattr
001C24r 3  A9 13                lda #19
001C26r 3  85 rr                sta chary
001C28r 3  A9 11                lda #17
001C2Ar 3  85 rr                sta charx
001C2Cr 3  A9 20                lda #32 		; PUTBLOCK
001C2Er 3  20 rr rr             jsr pbpattr
001C31r 3  A9 00        k00973: lda #0
001C33r 3  85 rr                sta varl
001C35r 3  A9 FF        k00981: lda #255
001C37r 3  C5 rr                cmp varo
001C39r 3  F0 03                beq *+5
001C3Br 3  4C rr rr             jmp k01105
001C3Er 3  A9 05                lda #5
001C40r 3  C5 rr                cmp scno
001C42r 3  F0 03                beq *+5
001C44r 3  4C rr rr             jmp k01097
001C47r 3  A9 05                lda #5		; GOT
001C49r 3  20 rr rr             jsr gotob
001C4Cr 3  C9 FF                cmp #255
001C4Er 3  F0 03                beq :+
001C50r 3  4C rr rr             jmp k01097
001C53r 3               :
001C53r 3  A9 0C                lda #12
001C55r 3  85 rr                sta chary
001C57r 3  A9 11                lda #17
001C59r 3  85 rr                sta charx
001C5Br 3  A9 1F                lda #31 		; PUTBLOCK
001C5Dr 3  20 rr rr             jsr pbpattr
001C60r 3  A9 0D                lda #13
001C62r 3  85 rr                sta chary
001C64r 3  A9 11                lda #17
001C66r 3  85 rr                sta charx
001C68r 3  A9 20                lda #32 		; PUTBLOCK
001C6Ar 3  20 rr rr             jsr pbpattr
001C6Dr 3  A9 00        k01097: lda #0
001C6Fr 3  85 rr                sta varo
001C71r 3  A9 FF        k01105: lda #255
001C73r 3  C5 rr                cmp varn
001C75r 3  F0 03                beq *+5
001C77r 3  4C rr rr             jmp k01228
001C7Ar 3  A9 07                lda #7
001C7Cr 3  C5 rr                cmp scno
001C7Er 3  F0 03                beq *+5
001C80r 3  4C rr rr             jmp k01220
001C83r 3  A9 07                lda #7		; GOT
001C85r 3  20 rr rr             jsr gotob
001C88r 3  C9 FF                cmp #255
001C8Ar 3  F0 03                beq :+
001C8Cr 3  4C rr rr             jmp k01220
001C8Fr 3               :
001C8Fr 3  A9 00                lda #0
001C91r 3  85 rr                sta chary
001C93r 3  A9 05                lda #5
001C95r 3  85 rr                sta charx
001C97r 3  A9 1F                lda #31 		; PUTBLOCK
001C99r 3  20 rr rr             jsr pbpattr
001C9Cr 3  A9 01                lda #1
001C9Er 3  85 rr                sta chary
001CA0r 3  A9 05                lda #5
001CA2r 3  85 rr                sta charx
001CA4r 3  A9 20                lda #32 		; PUTBLOCK
001CA6r 3  20 rr rr             jsr pbpattr
001CA9r 3  A9 00        k01220: lda #0
001CABr 3  85 rr                sta varn
001CADr 3  60           k01228: rts
001CAEr 3               evnt11:
001CAEr 3  A9 04                lda #4
001CB0r 3  C5 rr                cmp varc
001CB2r 3  F0 03                beq *+5
001CB4r 3  4C rr rr             jmp l00031
001CB7r 3  A9 00                lda #0
001CB9r 3  85 rr                sta varc
001CBBr 3  4C rr rr             jmp l00046
001CBEr 3  A5 rr        l00031: lda varc
001CC0r 3  18                   clc
001CC1r 3  69 01                adc #1
001CC3r 3  85 rr                sta varc
001CC5r 3  60           l00046: rts
001CC6r 3               evnt12:
001CC6r 3  20 rr rr             jsr prskey	; WAITKEY
001CC9r 3  A9 01                lda #1 	; INK
001CCBr 3  8D rr rr             sta fontcol
001CCEr 3  A9 00                lda #0 	; PAPER
001CD0r 3  0A                   asl a
001CD1r 3  0A                   asl a
001CD2r 3  0A                   asl a
001CD3r 3  0A                   asl a
001CD4r 3  85 rr                sta tmp
001CD6r 3  AD 0F 90             lda RegF
001CD9r 3  29 8F                and #%10001111
001CDBr 3  05 rr                ora tmp
001CDDr 3  8D 0F 90             sta RegF
001CE0r 3  20 rr rr             jsr cls		; CLS
001CE3r 3  A9 01                lda #1
001CE5r 3  85 rr                sta varm
001CE7r 3  A9 01                lda #1
001CE9r 3  85 rr                sta chary
001CEBr 3  A9 00                lda #0
001CEDr 3  85 rr                sta charx
001CEFr 3  A9 02                lda #2 	; INK
001CF1r 3  8D rr rr             sta fontcol
001CF4r 3  A9 03                lda #3  	; MESSAGE
001CF6r 3  20 rr rr             jsr dmsg
001CF9r 3  A9 04                lda #4
001CFBr 3  85 rr                sta chary
001CFDr 3  A9 06                lda #6
001CFFr 3  85 rr                sta charx
001D01r 3  A9 03                lda #3 	; INK
001D03r 3  8D rr rr             sta fontcol
001D06r 3  A9 04                lda #4  	; MESSAGE
001D08r 3  20 rr rr             jsr dmsg
001D0Br 3  A9 06                lda #6
001D0Dr 3  85 rr                sta chary
001D0Fr 3  A9 06                lda #6
001D11r 3  85 rr                sta charx
001D13r 3  A9 04                lda #4 	; INK
001D15r 3  8D rr rr             sta fontcol
001D18r 3  A9 05                lda #5  	; MESSAGE
001D1Ar 3  20 rr rr             jsr dmsg
001D1Dr 3  A9 09                lda #9
001D1Fr 3  85 rr                sta chary
001D21r 3  A9 05                lda #5
001D23r 3  85 rr                sta charx
001D25r 3  A9 05                lda #5 	; INK
001D27r 3  8D rr rr             sta fontcol
001D2Ar 3  A9 06                lda #6  	; MESSAGE
001D2Cr 3  20 rr rr             jsr dmsg
001D2Fr 3  A9 0C                lda #12
001D31r 3  85 rr                sta chary
001D33r 3  A9 01                lda #1
001D35r 3  85 rr                sta charx
001D37r 3  A9 06                lda #6 	; INK
001D39r 3  8D rr rr             sta fontcol
001D3Cr 3  A9 07                lda #7  	; MESSAGE
001D3Er 3  20 rr rr             jsr dmsg
001D41r 3  A9 07                lda #7 	; INK
001D43r 3  8D rr rr             sta fontcol
001D46r 3  A9 0E                lda #14
001D48r 3  85 rr                sta chary
001D4Ar 3  A9 01                lda #1
001D4Cr 3  85 rr                sta charx
001D4Er 3  A9 08                lda #8  	; MESSAGE
001D50r 3  20 rr rr             jsr dmsg
001D53r 3  A9 10                lda #16
001D55r 3  85 rr                sta chary
001D57r 3  A9 01                lda #1
001D59r 3  85 rr                sta charx
001D5Br 3  A9 01                lda #1 	; INK
001D5Dr 3  8D rr rr             sta fontcol
001D60r 3  A9 09                lda #9  	; MESSAGE
001D62r 3  20 rr rr             jsr dmsg
001D65r 3  A9 12                lda #18
001D67r 3  85 rr                sta chary
001D69r 3  A9 01                lda #1
001D6Br 3  85 rr                sta charx
001D6Dr 3  A9 02                lda #2 	; INK
001D6Fr 3  8D rr rr             sta fontcol
001D72r 3  A9 0A                lda #10  	; MESSAGE
001D74r 3  20 rr rr             jsr dmsg
001D77r 3  A9 14                lda #20
001D79r 3  85 rr                sta chary
001D7Br 3  A9 01                lda #1
001D7Dr 3  85 rr                sta charx
001D7Fr 3  A9 03                lda #3 	; INK
001D81r 3  8D rr rr             sta fontcol
001D84r 3  A9 0B                lda #11  	; MESSAGE
001D86r 3  20 rr rr             jsr dmsg
001D89r 3  A9 63                lda #99
001D8Br 3  85 rr                sta contrl
001D8Dr 3  A9 63        m00428: lda #99
001D8Fr 3  C5 rr                cmp contrl
001D91r 3  F0 03                beq *+5
001D93r 3  4C rr rr             jmp m00667
001D96r 3  A0 07                ldy #7 	; KEY
001D98r 3                       .if swrflag
001D98r 3                       lda keys + data_address - data_start,y
001D98r 3                       .else
001D98r 3  B9 rr rr             lda keys,y
001D9Br 3                       .endif
001D9Br 3  20 rr rr             jsr ktest
001D9Er 3  90 03                bcc :+
001DA0r 3  4C rr rr             jmp m00502
001DA3r 3               :
001DA3r 3  A9 00                lda #0
001DA5r 3  85 rr                sta contrl
001DA7r 3  A0 08        m00502: ldy #8 	; KEY
001DA9r 3                       .if swrflag
001DA9r 3                       lda keys + data_address - data_start,y
001DA9r 3                       .else
001DA9r 3  B9 rr rr             lda keys,y
001DACr 3                       .endif
001DACr 3  20 rr rr             jsr ktest
001DAFr 3  90 03                bcc :+
001DB1r 3  4C rr rr             jmp m00558
001DB4r 3               :
001DB4r 3  A9 01                lda #1
001DB6r 3  85 rr                sta contrl
001DB8r 3  A0 09        m00558: ldy #9 	; KEY
001DBAr 3                       .if swrflag
001DBAr 3                       lda keys + data_address - data_start,y
001DBAr 3                       .else
001DBAr 3  B9 rr rr             lda keys,y
001DBDr 3                       .endif
001DBDr 3  20 rr rr             jsr ktest
001DC0r 3  90 03                bcc :+
001DC2r 3  4C rr rr             jmp m00614
001DC5r 3               :
001DC5r 3  A9 02                lda #2
001DC7r 3  85 rr                sta contrl
001DC9r 3  A0 0A        m00614: ldy #10 	; KEY
001DCBr 3                       .if swrflag
001DCBr 3                       lda keys + data_address - data_start,y
001DCBr 3                       .else
001DCBr 3  B9 rr rr             lda keys,y
001DCEr 3                       .endif
001DCEr 3  20 rr rr             jsr ktest
001DD1r 3  90 03                bcc :+
001DD3r 3  4C rr rr             jmp m00662
001DD6r 3               :
001DD6r 3  4C rr rr     m00662: jmp m00428
001DD9r 3  A9 01        m00667: lda #1	; RESTART
001DDBr 3  85 rr                sta restfl
001DDDr 3  60                   rts
001DDEr 3               evnt13:
001DDEr 3  A9 01                lda #1 	; PAPER
001DE0r 3  0A                   asl a
001DE1r 3  0A                   asl a
001DE2r 3  0A                   asl a
001DE3r 3  0A                   asl a
001DE4r 3  85 rr                sta tmp
001DE6r 3  AD 0F 90             lda RegF
001DE9r 3  29 8F                and #%10001111
001DEBr 3  05 rr                ora tmp
001DEDr 3  8D 0F 90             sta RegF
001DF0r 3  A9 03                lda #3
001DF2r 3  85 rr                sta numlif
001DF4r 3  A9 00                lda #0
001DF6r 3  85 rr                sta varg
001DF8r 3  A9 01                lda #1
001DFAr 3  85 rr                sta varm
001DFCr 3  A9 00                lda #0
001DFEr 3  85 rr                sta vars
001E00r 3  A9 00                lda #0
001E02r 3                       ; BORDER command
001E02r 3  29 07                and #7
001E04r 3  85 rr                sta tmp
001E06r 3  AD 0F 90             lda RegF
001E09r 3  29 F8                and #%11111000
001E0Br 3  05 rr                ora tmp
001E0Dr 3  8D 0F 90             sta RegF
001E10r 3  A9 01                lda #1 	; INK
001E12r 3  8D rr rr             sta fontcol
001E15r 3  20 rr rr             jsr cls		; CLS
001E18r 3  A9 00                lda #0
001E1Ar 3  85 rr                sta vara
001E1Cr 3  A9 15                lda #21
001E1Er 3  85 rr                sta chary
001E20r 3  A9 00                lda #0
001E22r 3  85 rr                sta charx
001E24r 3  A9 02                lda #2 	; INK
001E26r 3  8D rr rr             sta fontcol
001E29r 3  A9 01                lda #1  	; MESSAGE
001E2Br 3  20 rr rr             jsr dmsg
001E2Er 3  A9 15                lda #21
001E30r 3  85 rr                sta chary
001E32r 3  A9 07                lda #7
001E34r 3  85 rr                sta charx
001E36r 3  A9 02                lda #2 	; INK
001E38r 3  8D rr rr             sta fontcol
001E3Br 3  A5 rr                lda numlif	; DISPLAY
001E3Dr 3  20 rr rr             jsr disply
001E40r 3  A9 15                lda #21
001E42r 3  85 rr                sta chary
001E44r 3  A9 0A                lda #10
001E46r 3  85 rr                sta charx
001E48r 3  A9 04                lda #4 	; INK
001E4Ar 3  8D rr rr             sta fontcol
001E4Dr 3  A9 02                lda #2  	; MESSAGE
001E4Fr 3  20 rr rr             jsr dmsg
001E52r 3  A9 15                lda #21
001E54r 3  85 rr                sta chary
001E56r 3  A9 14                lda #20
001E58r 3  85 rr                sta charx
001E5Ar 3  A9 04                lda #4 	; INK
001E5Cr 3  8D rr rr             sta fontcol
001E5Fr 3  A5 rr                lda varg	; DISPLAY
001E61r 3  20 rr rr             jsr disply
001E64r 3  60                   rts
001E65r 3               evnt14:
001E65r 3  A9 FF                lda #255
001E67r 3  85 rr                sta varb
001E69r 3  A9 FF                lda #255
001E6Br 3  85 rr                sta vard
001E6Dr 3  A9 FF                lda #255
001E6Fr 3  85 rr                sta vare
001E71r 3  A9 FF                lda #255
001E73r 3  85 rr                sta varf
001E75r 3  A9 FF                lda #255
001E77r 3  85 rr                sta varj
001E79r 3  A9 FF                lda #255
001E7Br 3  85 rr                sta varl
001E7Dr 3  A9 FF                lda #255
001E7Fr 3  85 rr                sta varo
001E81r 3  A9 FF                lda #255
001E83r 3  85 rr                sta varn
001E85r 3  60                   rts
001E86r 3               evnt15:
001E86r 3  60                   rts
001E87r 3               evnt16:
001E87r 3  A9 50                lda #80		; BEEP
001E89r 3  0A                   asl a
001E8Ar 3  8D rr rr             sta sndtyp
001E8Dr 3  A5 rr                lda numlif
001E8Fr 3  38                   sec
001E90r 3  E9 01                sbc #1
001E92r 3  85 rr                sta numlif
001E94r 3  A9 00                lda #0
001E96r 3  85 rr                sta scno
001E98r 3  20 rr rr             jsr nwscr
001E9Br 3  A9 15                lda #21
001E9Dr 3  85 rr                sta chary
001E9Fr 3  A9 07                lda #7
001EA1r 3  85 rr                sta charx
001EA3r 3  A9 02                lda #2 	; INK
001EA5r 3  8D rr rr             sta fontcol
001EA8r 3  A5 rr                lda numlif	; DISPLAY
001EAAr 3  20 rr rr             jsr disply
001EADr 3  A9 00                lda #0
001EAFr 3  C5 rr                cmp numlif
001EB1r 3  F0 03                beq *+5
001EB3r 3  4C rr rr             jmp q00123
001EB6r 3  A9 64                lda #100		; BEEP
001EB8r 3  0A                   asl a
001EB9r 3  8D rr rr             sta sndtyp
001EBCr 3  20 rr rr             jsr prskey	; WAITKEY
001EBFr 3  60           q00123: rts
001EC0r 3               evnt17:
001EC0r 3  20 rr rr             jsr prskey	; WAITKEY
001EC3r 3  60                   rts
001EC4r 3               evnt18:
001EC4r 3  20 rr rr             jsr cls		; CLS
001EC7r 3  20 rr rr             jsr prskey	; WAITKEY
001ECAr 3  60                   rts
001ECBr 3               evnt19:
001ECBr 3  60                   rts
001ECCr 3               evnt20:
001ECCr 3  60                   rts
001ECDr 3  60           ptcusr: rts
001ECEr 3               data_start:
001ECEr 3               msgdat:
001ECEr 3  47 41 4D 45          .byte "GAME OVE",210
001ED2r 3  20 4F 56 45  
001ED6r 3  D2           
001ED7r 3  45 4E 45 52          .byte "ENERG",217
001EDBr 3  47 D9        
001EDDr 3  50 4C 45 43          .byte "PLECTRUM",211
001EE1r 3  54 52 55 4D  
001EE5r 3  D3           
001EE6r 3  4D 49 4B 45          .byte "MIKE,THE GUITAR VIC 2",176
001EEAr 3  2C 54 48 45  
001EEEr 3  20 47 55 49  
001EFCr 3  31 20 4B 45          .byte "1 KEYBOAR",196
001F00r 3  59 42 4F 41  
001F04r 3  52 C4        
001F06r 3  32 20 4A 4F          .byte "2 JOYSTIC",203
001F0Ar 3  59 53 54 49  
001F0Er 3  43 CB        
001F10r 3  54 45 41 4D          .byte "TEAM MORIT",218
001F14r 3  20 4D 4F 52  
001F18r 3  49 54 DA     
001F1Br 3  4D 55 53 49          .byte "MUSIC",186
001F1Fr 3  43 BA        
001F21r 3  4D 50 41 47          .byte "MPAGD: J.CAULDWEL",204
001F25r 3  44 3A 20 4A  
001F29r 3  2E 43 41 55  
001F33r 3  46 4F 4E 54          .byte "FONTS: DAMIEN GUAR",196
001F37r 3  53 3A 20 44  
001F3Br 3  41 4D 49 45  
001F46r 3  4C 4F 41 44          .byte "LOADSCREEN: A.GREE",206
001F4Ar 3  53 43 52 45  
001F4Er 3  45 4E 3A 20  
001F59r 3  43 4F 44 45          .byte "CODE : KEES & MAUR",207
001F5Dr 3  20 3A 20 4B  
001F61r 3  45 45 53 20  
001F6Cr 3               nummsg:
001F6Cr 3  0C                   .byte 12
001F6Dr 3               chgfx:
001F6Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001F71r 3  00 00 00 00  
001F75r 3  1F 14 1F 14          .byte 31,20,31,20,31,20,31,0
001F79r 3  1F 14 1F 00  
001F7Dr 3  00 00 00 00          .byte 0,0,0,0,80,32,80,0
001F81r 3  50 20 50 00  
001F85r 3  EB 0C ED 0A          .byte 235,12,237,10,234,8,187,56
001F89r 3  EA 08 BB 38  
001F8Dr 3  00 00 00 00          .byte 0,0,0,0,10,4,10,0
001F91r 3  0A 04 0A 00  
001F95r 3  FF 00 BB 38          .byte 255,0,187,56,167,32,175,32
001F99r 3  A7 20 AF 20  
001F9Dr 3  20 28 28 30          .byte 32,40,40,48,48,32,0,0
001FA1r 3  30 20 00 00  
001FA5r 3  F2 0E BE 32          .byte 242,14,190,50,162,34,174,46
001FA9r 3  A2 22 AE 2E  
001FADr 3  E0 E0 00 00          .byte 224,224,0,0,0,0,0,0
001FB1r 3  00 00 00 00  
001FB5r 3  EB 0C ED 0A          .byte 235,12,237,10,234,10,185,56
001FB9r 3  EA 0A B9 38  
001FBDr 3  08 38 38 00          .byte 8,56,56,0,0,0,0,0
001FC1r 3  00 00 00 00  
001FC5r 3  FF 00 BB 38          .byte 255,0,187,56,163,40,179,48
001FC9r 3  A3 28 B3 30  
001FCDr 3  20 00 00 00          .byte 32,0,0,0,0,0,0,0
001FD1r 3  00 00 00 00  
001FD5r 3  B7 38 AD 22          .byte 183,56,173,34,170,34,234,226
001FD9r 3  AA 22 EA E2  
001FDDr 3  0E 0E 00 00          .byte 14,14,0,0,0,0,0,0
001FE1r 3  00 00 00 00  
001FE5r 3  FF 08 FF 08          .byte 255,8,255,8,255,8,255,0
001FE9r 3  FF 08 FF 00  
001FEDr 3  00 00 00 28          .byte 0,0,0,40,16,40,0,0
001FF1r 3  10 28 00 00  
001FF5r 3  F9 03 FA 02          .byte 249,3,250,2,250,2,250,1
001FF9r 3  FA 02 FA 01  
001FFDr 3  9F 40 6F 20          .byte 159,64,111,32,55,48,111,192
002001r 3  37 30 6F C0  
002005r 3  03 07 0D 19          .byte 3,7,13,25,51,54,52,52
002009r 3  33 36 34 34  
00200Dr 3  80 00 00 00          .byte 128,0,0,0,224,176,152,152
002011r 3  E0 B0 98 98  
002015r 3  12 08 07 00          .byte 18,8,7,0,12,30,12,7
002019r 3  0C 1E 0C 07  
00201Dr 3  90 A0 C0 80          .byte 144,160,192,128,64,64,128,0
002021r 3  40 40 80 00  
002025r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002029r 3  00 00 00 00  
00202Dr 3  F8 08 F8 08          .byte 248,8,248,8,248,8,248,0
002031r 3  F8 08 F8 00  
002035r 3  00 14 08 14          .byte 0,20,8,20,0,0,0,0
002039r 3  00 00 00 00  
00203Dr 3  00 75 A9 ED          .byte 0,117,169,237,0,231,197,230
002041r 3  00 E7 C5 E6  
002045r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002049r 3  00 00 00 00  
00204Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002051r 3  00 00 00 00  
002055r 3  00 00 00 00          .byte 0,0,0,0,48,74,104,104
002059r 3  30 4A 68 68  
00205Dr 3  0A 08 10 10          .byte 10,8,16,16,96,0,0,0
002061r 3  60 00 00 00  
002065r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002069r 3  00 00 00 00  
00206Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002071r 3  00 00 00 00  
002075r 3               bCol:
002075r 3  00                   .byte 0
002076r 3  00                   .byte 0
002077r 3  00                   .byte 0
002078r 3  00                   .byte 0
002079r 3  00                   .byte 0
00207Ar 3  00                   .byte 0
00207Br 3  00                   .byte 0
00207Cr 3  00                   .byte 0
00207Dr 3  00                   .byte 0
00207Er 3  00                   .byte 0
00207Fr 3  00                   .byte 0
002080r 3  00                   .byte 0
002081r 3  00                   .byte 0
002082r 3  00                   .byte 0
002083r 3  00                   .byte 0
002084r 3  00                   .byte 0
002085r 3  00                   .byte 0
002086r 3  00                   .byte 0
002087r 3  00                   .byte 0
002088r 3  00                   .byte 0
002089r 3  00                   .byte 0
00208Ar 3  00                   .byte 0
00208Br 3  00                   .byte 0
00208Cr 3  00                   .byte 0
00208Dr 3  00                   .byte 0
00208Er 3  00                   .byte 0
00208Fr 3  00                   .byte 0
002090r 3  00                   .byte 0
002091r 3  00                   .byte 0
002092r 3  00                   .byte 0
002093r 3  00                   .byte 0
002094r 3  00                   .byte 0
002095r 3  00                   .byte 0
002096r 3               bprop:
002096r 3  00                   .byte 0
002097r 3  02                   .byte 2
002098r 3  00                   .byte 0
002099r 3  02                   .byte 2
00209Ar 3  00                   .byte 0
00209Br 3  02                   .byte 2
00209Cr 3  00                   .byte 0
00209Dr 3  02                   .byte 2
00209Er 3  00                   .byte 0
00209Fr 3  02                   .byte 2
0020A0r 3  00                   .byte 0
0020A1r 3  02                   .byte 2
0020A2r 3  00                   .byte 0
0020A3r 3  02                   .byte 2
0020A4r 3  00                   .byte 0
0020A5r 3  02                   .byte 2
0020A6r 3  00                   .byte 0
0020A7r 3  03                   .byte 3
0020A8r 3  03                   .byte 3
0020A9r 3  03                   .byte 3
0020AAr 3  03                   .byte 3
0020ABr 3  03                   .byte 3
0020ACr 3  03                   .byte 3
0020ADr 3  02                   .byte 2
0020AEr 3  02                   .byte 2
0020AFr 3  00                   .byte 0
0020B0r 3  02                   .byte 2
0020B1r 3  00                   .byte 0
0020B2r 3  06                   .byte 6
0020B3r 3  02                   .byte 2
0020B4r 3  02                   .byte 2
0020B5r 3  00                   .byte 0
0020B6r 3  00                   .byte 0
0020B7r 3               sprgfx:
0020B7r 3  00 07 00 CA          .byte 0,7,0,202,1,152,1,176,3,96,14,216,27,176,23,96,22,160,9,192,6,128,0,64,7,192,12,128,9,0,3,128
0020BBr 3  01 98 01 B0  
0020BFr 3  03 60 0E D8  
0020D7r 3  C0 01 80 32          .byte 192,1,128,50,0,102,0,108,0,216,3,182,6,236,5,216,5,168,2,112,1,160,0,16,1,240,3,32,2,64,0,224
0020DBr 3  00 66 00 6C  
0020DFr 3  00 D8 03 B6  
0020F7r 3  70 00 A0 0C          .byte 112,0,160,12,128,25,0,27,0,54,128,237,1,187,1,118,1,106,0,156,0,104,0,4,0,124,0,200,0,144,0,56
0020FBr 3  80 19 00 1B  
0020FFr 3  00 36 80 ED  
002117r 3  1C 00 28 03          .byte 28,0,40,3,96,6,192,6,128,13,96,59,192,110,128,93,128,90,0,39,0,26,0,1,0,31,0,50,0,36,0,14
00211Br 3  60 06 C0 06  
00211Fr 3  80 0D 60 3B  
002137r 3  00 07 00 CA          .byte 0,7,0,202,1,152,1,176,51,96,78,216,157,176,219,102,222,230,13,216,7,128,72,50,248,12,128,8,0,0,0,0
00213Br 3  01 98 01 B0  
00213Fr 3  33 60 4E D8  
002157r 3  C0 01 80 32          .byte 192,1,128,50,0,102,0,108,12,216,19,182,39,108,182,217,183,185,3,118,1,224,146,12,62,3,32,2,0,0,0,0
00215Br 3  00 66 00 6C  
00215Fr 3  0C D8 13 B6  
002177r 3  70 00 A0 0C          .byte 112,0,160,12,128,25,0,27,3,54,132,237,9,219,109,182,109,238,128,221,0,120,36,131,207,128,136,0,0,0,0,0
00217Br 3  80 19 00 1B  
00217Fr 3  03 36 84 ED  
002197r 3  1C 00 28 03          .byte 28,0,40,3,96,6,192,6,128,205,97,59,194,118,155,109,155,123,96,55,0,30,201,32,51,224,34,0,0,0,0,0
00219Br 3  60 06 C0 06  
00219Fr 3  80 CD 61 3B  
0021B7r 3  00 07 00 CA          .byte 0,7,0,202,1,152,1,176,3,96,46,216,93,176,123,96,126,236,13,220,7,128,32,32,126,16,64,20,0,24,0,16
0021BBr 3  01 98 01 B0  
0021BFr 3  03 60 2E D8  
0021D7r 3  C0 01 80 32          .byte 192,1,128,50,0,102,0,108,0,216,11,182,23,108,30,216,31,187,3,119,1,224,8,8,31,132,16,5,0,6,0,4
0021DBr 3  00 66 00 6C  
0021DFr 3  00 D8 0B B6  
0021F7r 3  70 00 A0 0C          .byte 112,0,160,12,128,25,0,27,0,54,130,237,5,219,7,182,199,238,192,221,0,120,2,2,7,225,68,1,128,1,0,1
0021FBr 3  80 19 00 1B  
0021FFr 3  00 36 82 ED  
002217r 3  1C 00 28 03          .byte 28,0,40,3,96,6,192,6,128,13,96,187,193,118,129,237,177,251,112,55,0,30,128,128,65,248,81,0,96,0,64,0
00221Br 3  60 06 C0 06  
00221Fr 3  80 0D 60 BB  
002237r 3  E0 00 53 00          .byte 224,0,83,0,25,128,13,128,6,192,27,112,13,216,6,232,5,104,3,144,1,96,2,0,3,224,1,48,0,144,1,192
00223Br 3  19 80 0D 80  
00223Fr 3  06 C0 1B 70  
002257r 3  38 00 14 C0          .byte 56,0,20,192,6,96,3,96,1,176,6,220,3,118,1,186,1,90,0,228,0,88,0,128,0,248,0,76,0,36,0,112
00225Br 3  06 60 03 60  
00225Fr 3  01 B0 06 DC  
002277r 3  0E 00 05 30          .byte 14,0,5,48,1,152,0,216,0,108,1,183,128,221,128,110,128,86,0,57,0,22,0,32,0,62,0,19,0,9,0,28
00227Br 3  01 98 00 D8  
00227Fr 3  00 6C 01 B7  
002297r 3  03 80 01 4C          .byte 3,128,1,76,0,102,0,54,0,27,192,109,96,55,160,27,160,21,64,14,128,5,0,8,128,15,192,4,64,2,0,7
00229Br 3  00 66 00 36  
00229Fr 3  00 1B C0 6D  
0022B7r 3  E0 00 53 00          .byte 224,0,83,0,25,128,13,128,6,204,27,114,13,185,102,219,103,123,27,176,1,224,76,18,48,31,16,1,0,0,0,0
0022BBr 3  19 80 0D 80  
0022BFr 3  06 CC 1B 72  
0022D7r 3  38 00 14 C0          .byte 56,0,20,192,6,96,3,96,1,179,134,220,67,110,217,182,217,222,6,236,0,120,147,4,204,7,68,0,0,0,0,0
0022DBr 3  06 60 03 60  
0022DFr 3  01 B3 86 DC  
0022F7r 3  0E 00 05 30          .byte 14,0,5,48,1,152,0,216,192,108,33,183,144,219,182,109,182,119,1,187,0,30,36,193,243,1,17,0,0,0,0,0
0022FBr 3  01 98 00 D8  
0022FFr 3  C0 6C 21 B7  
002317r 3  03 80 01 4C          .byte 3,128,1,76,0,102,0,54,48,27,200,109,228,54,109,155,237,157,192,110,128,7,73,48,124,192,4,64,0,0,0,0
00231Br 3  00 66 00 36  
00231Fr 3  30 1B C8 6D  
002337r 3  E0 00 53 00          .byte 224,0,83,0,25,128,13,128,6,192,27,116,13,186,6,222,55,126,59,176,1,224,4,4,8,126,40,2,24,0,8,0
00233Br 3  19 80 0D 80  
00233Fr 3  06 C0 1B 74  
002357r 3  38 00 14 C0          .byte 56,0,20,192,6,96,3,96,1,176,6,221,131,110,129,183,141,223,14,236,0,120,1,1,130,31,138,0,6,0,2,0
00235Br 3  06 60 03 60  
00235Fr 3  01 B0 06 DD  
002377r 3  0E 00 05 30          .byte 14,0,5,48,1,152,0,216,0,108,65,183,160,219,224,109,227,119,3,187,0,30,64,64,224,135,34,128,1,128,0,128
00237Br 3  01 98 00 D8  
00237Fr 3  00 6C 41 B7  
002397r 3  03 80 01 4C          .byte 3,128,1,76,0,102,0,54,0,27,208,109,232,54,120,27,248,221,192,238,128,7,16,16,248,33,8,160,0,96,0,32
00239Br 3  00 66 00 36  
00239Fr 3  00 1B D0 6D  
0023B7r 3  01 80 00 00          .byte 1,128,0,0,1,128,4,16,13,176,15,224,15,224,7,192,7,224,15,240,15,240,15,240,7,224,2,64,6,64,0,96
0023BBr 3  01 80 04 10  
0023BFr 3  0D B0 0F E0  
0023D7r 3  00 60 00 00          .byte 0,96,0,0,0,96,1,4,3,108,3,248,3,248,1,240,1,248,3,252,3,252,3,252,1,248,0,144,1,144,0,24
0023DBr 3  00 60 01 04  
0023DFr 3  03 6C 03 F8  
0023F7r 3  00 18 00 00          .byte 0,24,0,0,0,24,0,65,0,219,0,254,0,254,0,124,0,126,0,255,0,255,0,255,0,126,0,36,0,100,0,6
0023FBr 3  00 18 00 41  
0023FFr 3  00 DB 00 FE  
002417r 3  00 06 00 00          .byte 0,6,0,0,0,6,64,16,192,54,128,63,128,63,0,31,128,31,192,63,192,63,192,63,128,31,0,9,0,25,128,1
00241Br 3  00 06 40 10  
00241Fr 3  C0 36 80 3F  
002437r 3  01 80 00 00          .byte 1,128,0,0,1,128,4,16,13,176,15,224,15,224,7,192,7,224,15,240,15,240,15,240,7,224,2,64,2,64,6,96
00243Br 3  01 80 04 10  
00243Fr 3  0D B0 0F E0  
002457r 3  00 60 00 00          .byte 0,96,0,0,0,96,1,4,3,108,3,248,3,248,1,240,1,248,3,252,3,252,3,252,1,248,0,144,0,144,1,152
00245Br 3  00 60 01 04  
00245Fr 3  03 6C 03 F8  
002477r 3  00 18 00 00          .byte 0,24,0,0,0,24,0,65,0,219,0,254,0,254,0,124,0,126,0,255,0,255,0,255,0,126,0,36,0,36,0,102
00247Br 3  00 18 00 41  
00247Fr 3  00 DB 00 FE  
002497r 3  00 06 00 00          .byte 0,6,0,0,0,6,64,16,192,54,128,63,128,63,0,31,128,31,192,63,192,63,192,63,128,31,0,9,0,9,128,25
00249Br 3  00 06 40 10  
00249Fr 3  C0 36 80 3F  
0024B7r 3  01 80 00 00          .byte 1,128,0,0,1,128,4,16,13,176,15,224,15,224,7,192,7,224,15,240,15,240,15,240,7,224,2,64,2,96,6,0
0024BBr 3  01 80 04 10  
0024BFr 3  0D B0 0F E0  
0024D7r 3  00 60 00 00          .byte 0,96,0,0,0,96,1,4,3,108,3,248,3,248,1,240,1,248,3,252,3,252,3,252,1,248,0,144,0,152,1,128
0024DBr 3  00 60 01 04  
0024DFr 3  03 6C 03 F8  
0024F7r 3  00 18 00 00          .byte 0,24,0,0,0,24,0,65,0,219,0,254,0,254,0,124,0,126,0,255,0,255,0,255,0,126,0,36,0,38,0,96
0024FBr 3  00 18 00 41  
0024FFr 3  00 DB 00 FE  
002517r 3  00 06 00 00          .byte 0,6,0,0,0,6,64,16,192,54,128,63,128,63,0,31,128,31,192,63,192,63,192,63,128,31,0,9,128,9,0,24
00251Br 3  00 06 40 10  
00251Fr 3  C0 36 80 3F  
002537r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,1,0,3,138,143,255,255,154,175,42,147,47,209,58,176,31,192,0,0,0,0,0,0,0,0
00253Br 3  00 00 00 01  
00253Fr 3  00 03 8A 8F  
002557r 3  00 00 00 00          .byte 0,0,0,0,0,0,64,0,192,0,226,163,255,255,230,171,202,164,75,244,14,172,7,240,0,0,0,0,0,0,0,0
00255Br 3  00 00 40 00  
00255Fr 3  C0 00 E2 A3  
002577r 3  00 00 00 00          .byte 0,0,0,0,0,0,16,0,48,0,248,168,255,255,249,170,50,169,18,253,3,171,1,252,0,0,0,0,0,0,0,0
00257Br 3  00 00 10 00  
00257Fr 3  30 00 F8 A8  
002597r 3  00 00 00 00          .byte 0,0,0,0,0,0,4,0,12,0,62,42,255,255,190,106,76,170,68,191,192,234,0,127,0,0,0,0,0,0,0,0
00259Br 3  00 00 04 00  
00259Fr 3  0C 00 3E 2A  
0025B7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,1,0,3,130,143,255,255,154,175,42,147,47,209,186,176,31,192,0,0,80,0,0,0,0,0
0025BBr 3  00 00 00 01  
0025BFr 3  00 03 82 8F  
0025D7r 3  00 00 00 00          .byte 0,0,0,0,0,0,64,0,192,0,224,163,255,255,230,171,202,164,75,244,46,172,7,240,0,0,20,0,0,0,0,0
0025DBr 3  00 00 40 00  
0025DFr 3  C0 00 E0 A3  
0025F7r 3  00 00 00 00          .byte 0,0,0,0,0,0,16,0,48,0,248,40,255,255,249,170,50,169,18,253,11,171,1,252,0,0,5,0,0,0,0,0
0025FBr 3  00 00 10 00  
0025FFr 3  30 00 F8 28  
002617r 3  00 00 00 00          .byte 0,0,0,0,0,0,4,0,12,0,62,10,255,255,190,106,76,170,68,191,194,234,0,127,0,0,1,64,0,0,0,0
00261Br 3  00 00 04 00  
00261Fr 3  0C 00 3E 0A  
002637r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,15,224,48,24,66,68,196,150,201,38,226,78,208,22,223,246,117,92,53,88,15,224,0,0
00263Br 3  00 00 00 00  
00263Fr 3  0F E0 30 18  
002657r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,248,12,6,16,145,177,37,178,73,184,147,180,5,183,253,29,87,13,86,3,248,0,0
00265Br 3  00 00 00 00  
00265Fr 3  03 F8 0C 06  
002677r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,254,131,1,68,36,108,73,108,146,238,36,109,1,109,255,199,85,131,85,0,254,0,0
00267Br 3  00 00 00 00  
00267Fr 3  00 FE 83 01  
002697r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,128,63,96,192,17,9,91,18,155,36,59,137,91,64,219,127,113,213,96,213,128,63,0,0
00269Br 3  00 00 00 00  
00269Fr 3  80 3F 60 C0  
0026B7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,15,224,52,24,72,4,208,6,192,6,224,14,208,22,223,246,117,92,53,88,15,224,0,0
0026BBr 3  00 00 00 00  
0026BFr 3  0F E0 34 18  
0026D7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,248,13,6,18,1,180,1,176,1,184,3,180,5,183,253,29,87,13,86,3,248,0,0
0026DBr 3  00 00 00 00  
0026DFr 3  03 F8 0D 06  
0026F7r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,254,131,65,68,128,109,0,108,0,238,0,109,1,109,255,199,85,131,85,0,254,0,0
0026FBr 3  00 00 00 00  
0026FFr 3  00 FE 83 41  
002717r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,128,63,96,208,17,32,27,64,27,0,59,128,91,64,219,127,113,213,96,213,128,63,0,0
00271Br 3  00 00 00 00  
00271Fr 3  80 3F 60 D0  
002737r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,170,175,191,248,191,248,0,0,0,0,0,0
00273Br 3  00 00 00 00  
00273Fr 3  00 00 00 00  
002757r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,171,47,254,47,254,0,0,0,0,0,0
00275Br 3  00 00 00 00  
00275Fr 3  00 00 00 00  
002777r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,170,139,255,139,255,0,0,0,0,0,0
00277Br 3  00 00 00 00  
00277Fr 3  00 00 00 00  
002797r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,190,170,226,255,226,255,0,0,0,0,0,0
00279Br 3  00 00 00 00  
00279Fr 3  00 00 00 00  
0027B7r 3  00 00 00 00          .byte 0,0,0,0,14,0,26,0,22,0,54,0,48,0,0,0,0,0,170,175,191,248,191,248,0,0,0,0,0,0,0,0
0027BBr 3  0E 00 1A 00  
0027BFr 3  16 00 36 00  
0027D7r 3  00 00 00 00          .byte 0,0,0,0,3,128,6,128,5,128,13,128,12,0,0,0,0,0,234,171,47,254,47,254,0,0,0,0,0,0,0,0
0027DBr 3  03 80 06 80  
0027DFr 3  05 80 0D 80  
0027F7r 3  00 00 00 00          .byte 0,0,0,0,0,224,1,160,1,96,3,96,3,0,0,0,0,0,250,170,139,255,139,255,0,0,0,0,0,0,0,0
0027FBr 3  00 E0 01 A0  
0027FFr 3  01 60 03 60  
002817r 3  00 00 00 00          .byte 0,0,0,0,0,56,0,104,0,88,0,216,0,192,0,0,0,0,190,170,226,255,226,255,0,0,0,0,0,0,0,0
00281Br 3  00 38 00 68  
00281Fr 3  00 58 00 D8  
002837r 3  00 00 02 00          .byte 0,0,2,0,2,0,7,0,2,0,2,0,7,6,15,134,26,198,26,198,15,134,31,198,61,230,56,230,31,198,15,128
00283Br 3  02 00 07 00  
00283Fr 3  02 00 02 00  
002857r 3  00 00 00 80          .byte 0,0,0,128,0,128,1,192,0,128,0,128,129,193,131,225,134,177,134,177,131,225,135,241,143,121,142,57,135,241,3,224
00285Br 3  00 80 01 C0  
00285Fr 3  00 80 00 80  
002877r 3  00 00 00 20          .byte 0,0,0,32,0,32,0,112,0,32,0,32,96,112,96,248,97,172,97,172,96,248,97,252,99,222,99,142,97,252,0,248
00287Br 3  00 20 00 70  
00287Fr 3  00 20 00 20  
002897r 3  00 00 00 08          .byte 0,0,0,8,0,8,0,28,0,8,0,8,24,28,24,62,24,107,24,107,24,62,24,127,152,247,152,227,24,127,0,62
00289Br 3  00 08 00 1C  
00289Fr 3  00 08 00 08  
0028B7r 3  00 00 02 00          .byte 0,0,2,0,2,0,7,0,2,6,2,6,7,6,15,134,29,70,29,70,15,134,31,198,56,230,48,96,24,192,15,128
0028BBr 3  02 00 07 00  
0028BFr 3  02 06 02 06  
0028D7r 3  00 00 00 80          .byte 0,0,0,128,0,128,1,192,128,129,128,129,129,193,131,225,135,81,135,81,131,225,135,241,142,57,12,24,6,48,3,224
0028DBr 3  00 80 01 C0  
0028DFr 3  80 81 80 81  
0028F7r 3  00 00 00 20          .byte 0,0,0,32,0,32,0,112,96,32,96,32,96,112,96,248,97,212,97,212,96,248,97,252,99,142,3,6,1,140,0,248
0028FBr 3  00 20 00 70  
0028FFr 3  60 20 60 20  
002917r 3  00 00 00 08          .byte 0,0,0,8,0,8,0,28,24,8,24,8,24,28,24,62,24,117,24,117,24,62,24,127,152,227,128,193,0,99,0,62
00291Br 3  00 08 00 1C  
00291Fr 3  18 08 18 08  
002937r 3  00 F0 01 88          .byte 0,240,1,136,2,136,4,80,8,76,24,34,55,209,106,239,245,111,158,254,103,252,25,228,23,132,16,132,0,128,0,128
00293Br 3  02 88 04 50  
00293Fr 3  08 4C 18 22  
002957r 3  00 3C 00 62          .byte 0,60,0,98,0,162,1,20,2,19,134,8,77,244,218,187,253,91,167,191,25,255,6,121,5,225,4,33,0,32,0,32
00295Br 3  00 A2 01 14  
00295Fr 3  02 13 86 08  
002977r 3  00 0F 80 18          .byte 0,15,128,24,128,40,0,69,192,132,33,130,19,125,246,174,255,86,233,239,198,127,65,158,65,120,65,8,0,8,0,8
00297Br 3  80 28 00 45  
00297Fr 3  C0 84 21 82  
002997r 3  C0 03 20 06          .byte 192,3,32,6,32,10,64,17,48,33,136,96,68,223,189,171,191,213,250,123,241,159,144,103,16,94,16,66,0,2,0,2
00299Br 3  20 0A 40 11  
00299Fr 3  30 21 88 60  
0029B7r 3  00 00 00 00          .byte 0,0,0,0,0,224,3,16,2,140,28,98,55,209,106,239,245,111,254,254,127,252,31,228,23,132,16,130,16,128,0,0
0029BBr 3  00 E0 03 10  
0029BFr 3  02 8C 1C 62  
0029D7r 3  00 00 00 00          .byte 0,0,0,0,0,56,0,196,0,163,135,24,77,244,218,187,253,91,191,191,31,255,7,249,5,225,132,32,4,32,0,0
0029DBr 3  00 38 00 C4  
0029DFr 3  00 A3 87 18  
0029F7r 3  00 00 00 00          .byte 0,0,0,0,0,14,0,49,192,40,33,198,19,125,246,174,255,86,239,239,199,255,65,254,65,120,33,8,1,8,0,0
0029FBr 3  00 0E 00 31  
0029FFr 3  C0 28 21 C6  
002A17r 3  00 00 00 00          .byte 0,0,0,0,128,3,64,12,48,10,136,113,68,223,189,171,191,213,251,251,241,255,144,127,16,94,8,66,0,66,0,0
002A1Br 3  80 03 40 0C  
002A1Fr 3  30 0A 88 71  
002A37r 3  00 3C 00 7C          .byte 0,60,0,124,56,246,127,210,215,83,213,81,117,81,53,81,53,81,29,81,29,83,15,82,15,86,7,220,7,190,3,27
002A3Br 3  38 F6 7F D2  
002A3Fr 3  D7 53 D5 51  
002A57r 3  00 0F 00 1F          .byte 0,15,0,31,142,61,159,244,245,212,117,84,93,84,77,84,77,84,71,84,199,84,131,212,131,213,1,247,129,239,192,198
002A5Br 3  8E 3D 9F F4  
002A5Fr 3  F5 D4 75 54  
002A77r 3  C0 03 C0 07          .byte 192,3,192,7,99,143,39,253,61,117,29,85,23,85,19,85,19,85,17,213,49,213,32,245,96,245,192,125,224,123,176,49
002A7Br 3  63 8F 27 FD  
002A7Fr 3  3D 75 1D 55  
002A97r 3  F0 00 F0 01          .byte 240,0,240,1,216,227,73,255,79,93,71,85,69,213,68,213,68,213,68,117,76,117,72,61,88,61,112,31,248,30,108,12
002A9Br 3  D8 E3 49 FF  
002A9Fr 3  4F 5D 47 55  
002AB7r 3  00 3C 00 7C          .byte 0,60,0,124,56,246,127,210,215,83,213,73,117,41,52,169,52,169,29,41,29,75,15,82,15,86,7,220,7,190,3,27
002ABBr 3  38 F6 7F D2  
002ABFr 3  D7 53 D5 49  
002AD7r 3  00 0F 00 1F          .byte 0,15,0,31,142,61,159,244,245,212,117,82,93,74,77,42,77,42,71,74,199,82,131,212,131,213,1,247,129,239,192,198
002ADBr 3  8E 3D 9F F4  
002ADFr 3  F5 D4 75 52  
002AF7r 3  C0 03 C0 07          .byte 192,3,192,7,99,143,39,253,61,117,157,84,151,82,147,74,147,74,145,210,177,212,32,245,96,245,192,125,224,123,176,49
002AFBr 3  63 8F 27 FD  
002AFFr 3  3D 75 9D 54  
002B17r 3  F0 00 F0 01          .byte 240,0,240,1,216,227,73,255,79,93,39,85,165,212,164,210,164,210,164,116,44,117,72,61,88,61,112,31,248,30,108,12
002B1Br 3  D8 E3 49 FF  
002B1Fr 3  4F 5D 27 55  
002B37r 3  07 60 0A D0          .byte 7,96,10,208,30,184,26,236,39,108,63,122,63,186,19,212,63,62,47,124,31,128,15,104,28,220,11,62,12,254,51,252
002B3Br 3  1E B8 1A EC  
002B3Fr 3  27 6C 3F 7A  
002B57r 3  01 D8 02 B4          .byte 1,216,2,180,7,174,6,187,9,219,143,222,143,238,4,245,143,207,11,223,7,224,3,218,7,55,130,207,131,63,12,255
002B5Br 3  07 AE 06 BB  
002B5Fr 3  09 DB 8F DE  
002B77r 3  00 76 00 AD          .byte 0,118,0,173,129,235,193,174,194,118,163,247,163,251,65,61,227,243,194,247,1,248,128,246,193,205,224,179,224,207,195,63
002B7Br 3  81 EB C1 AE  
002B7Fr 3  C2 76 A3 F7  
002B97r 3  80 1D 40 2B          .byte 128,29,64,43,224,122,176,107,176,157,232,253,232,254,80,79,248,252,240,189,0,126,160,61,112,115,248,44,248,51,240,207
002B9Br 3  E0 7A B0 6B  
002B9Fr 3  B0 9D E8 FD  
002BB7r 3  07 60 0A D0          .byte 7,96,10,208,30,184,26,236,39,108,63,122,63,186,19,212,63,62,47,124,31,128,3,104,28,220,11,62,12,254,51,252
002BBBr 3  1E B8 1A EC  
002BBFr 3  27 6C 3F 7A  
002BD7r 3  01 D8 02 B4          .byte 1,216,2,180,7,174,6,187,9,219,143,222,143,238,4,245,143,207,11,223,7,224,0,218,7,55,130,207,131,63,12,255
002BDBr 3  07 AE 06 BB  
002BDFr 3  09 DB 8F DE  
002BF7r 3  00 76 00 AD          .byte 0,118,0,173,129,235,193,174,194,118,163,247,163,251,65,61,227,243,194,247,1,248,128,54,193,205,224,179,224,207,195,63
002BFBr 3  81 EB C1 AE  
002BFFr 3  C2 76 A3 F7  
002C17r 3  80 1D 40 2B          .byte 128,29,64,43,224,122,176,107,176,157,232,253,232,254,80,79,248,252,240,189,0,126,160,13,112,115,248,44,248,51,240,207
002C1Br 3  E0 7A B0 6B  
002C1Fr 3  B0 9D E8 FD  
002C37r 3  06 E0 0B 50          .byte 6,224,11,80,29,120,55,88,54,228,94,252,93,252,43,200,124,252,62,244,1,248,22,240,59,56,124,208,127,48,63,204
002C3Br 3  1D 78 37 58  
002C3Fr 3  36 E4 5E FC  
002C57r 3  01 B8 02 D4          .byte 1,184,2,212,7,94,13,214,13,185,23,191,23,127,10,242,31,63,15,189,0,126,5,188,14,206,31,52,31,204,15,243
002C5Br 3  07 5E 0D D6  
002C5Fr 3  0D B9 17 BF  
002C77r 3  00 6E 00 B5          .byte 0,110,0,181,129,215,131,117,67,110,197,239,197,223,130,188,199,207,67,239,128,31,1,111,131,179,7,205,7,243,195,252
002C7Br 3  81 D7 83 75  
002C7Fr 3  43 6E C5 EF  
002C97r 3  80 1B 40 2D          .byte 128,27,64,45,224,117,96,221,144,219,241,123,241,119,32,175,241,243,208,251,224,7,192,91,224,236,65,243,193,252,48,255
002C9Br 3  E0 75 60 DD  
002C9Fr 3  90 DB F1 7B  
002CB7r 3  06 E0 0B 50          .byte 6,224,11,80,29,120,55,88,54,228,94,252,93,252,43,200,124,252,62,244,1,248,22,192,59,56,124,208,127,48,63,204
002CBBr 3  1D 78 37 58  
002CBFr 3  36 E4 5E FC  
002CD7r 3  01 B8 02 D4          .byte 1,184,2,212,7,94,13,214,13,185,23,191,23,127,10,242,31,63,15,189,0,126,5,176,14,206,31,52,31,204,15,243
002CDBr 3  07 5E 0D D6  
002CDFr 3  0D B9 17 BF  
002CF7r 3  00 6E 00 B5          .byte 0,110,0,181,129,215,131,117,67,110,197,239,197,223,130,188,199,207,67,239,128,31,1,108,131,179,7,205,7,243,195,252
002CFBr 3  81 D7 83 75  
002CFFr 3  43 6E C5 EF  
002D17r 3  80 1B 40 2D          .byte 128,27,64,45,224,117,96,221,144,219,241,123,241,119,32,175,241,243,208,251,224,7,0,91,224,236,65,243,193,252,48,255
002D1Br 3  E0 75 60 DD  
002D1Fr 3  90 DB F1 7B  
002D37r 3  00 04 00 86          .byte 0,4,0,134,1,70,0,133,0,157,0,156,1,64,2,32,2,32,4,144,8,136,9,8,31,224,2,0,0,0,0,0
002D3Br 3  01 46 00 85  
002D3Fr 3  00 9D 00 9C  
002D57r 3  00 01 80 21          .byte 0,1,128,33,128,81,64,33,64,39,0,39,0,80,0,136,0,136,1,36,2,34,2,66,7,248,0,128,0,0,0,0
002D5Br 3  80 51 40 21  
002D5Fr 3  40 27 00 27  
002D77r 3  40 00 60 08          .byte 64,0,96,8,96,20,80,8,208,9,192,9,0,20,0,34,0,34,0,73,128,136,128,144,1,254,0,32,0,0,0,0
002D7Br 3  60 14 50 08  
002D7Fr 3  D0 09 C0 09  
002D97r 3  10 00 18 02          .byte 16,0,24,2,24,5,20,2,116,2,112,2,0,5,128,8,128,8,64,18,32,34,32,36,128,127,0,8,0,0,0,0
002D9Br 3  18 05 14 02  
002D9Fr 3  74 02 70 02  
002DB7r 3  00 00 00 80          .byte 0,0,0,128,33,64,48,128,48,128,40,128,41,64,226,32,226,32,4,16,8,136,8,136,31,224,1,0,2,0,2,0
002DBBr 3  21 40 30 80  
002DBFr 3  30 80 28 80  
002DD7r 3  00 00 00 20          .byte 0,0,0,32,8,80,12,32,12,32,10,32,10,80,56,136,56,136,1,4,2,34,2,34,7,248,0,64,0,128,0,128
002DDBr 3  08 50 0C 20  
002DDFr 3  0C 20 0A 20  
002DF7r 3  00 00 00 08          .byte 0,0,0,8,2,20,3,8,3,8,2,136,2,148,14,34,14,34,0,65,128,136,128,136,1,254,0,16,0,32,0,32
002DFBr 3  02 14 03 08  
002DFFr 3  03 08 02 88  
002E17r 3  00 00 00 02          .byte 0,0,0,2,0,133,0,194,0,194,0,162,0,165,131,136,131,136,64,16,32,34,32,34,128,127,0,4,0,8,0,8
002E1Br 3  00 85 00 C2  
002E1Fr 3  00 C2 00 A2  
002E37r 3  01 80 00 00          .byte 1,128,0,0,1,128,4,16,13,176,15,224,9,32,5,64,7,224,15,240,13,176,14,112,7,224,2,64,2,96,6,0
002E3Br 3  01 80 04 10  
002E3Fr 3  0D B0 0F E0  
002E57r 3  00 60 00 00          .byte 0,96,0,0,0,96,1,4,3,108,3,248,2,72,1,80,1,248,3,252,3,108,3,156,1,248,0,144,0,152,1,128
002E5Br 3  00 60 01 04  
002E5Fr 3  03 6C 03 F8  
002E77r 3  00 18 00 00          .byte 0,24,0,0,0,24,0,65,0,219,0,254,0,146,0,84,0,126,0,255,0,219,0,231,0,126,0,36,0,38,0,96
002E7Br 3  00 18 00 41  
002E7Fr 3  00 DB 00 FE  
002E97r 3  00 06 00 00          .byte 0,6,0,0,0,6,64,16,192,54,128,63,128,36,0,21,128,31,192,63,192,54,192,57,128,31,0,9,128,9,0,24
002E9Br 3  00 06 40 10  
002E9Fr 3  C0 36 80 3F  
002EB7r 3  01 80 00 00          .byte 1,128,0,0,1,128,4,16,13,176,15,224,9,32,5,64,7,224,15,240,12,48,14,112,7,224,2,64,2,64,6,96
002EBBr 3  01 80 04 10  
002EBFr 3  0D B0 0F E0  
002ED7r 3  00 60 00 00          .byte 0,96,0,0,0,96,1,4,3,108,3,248,2,72,1,80,1,248,3,252,3,12,3,156,1,248,0,144,0,144,1,152
002EDBr 3  00 60 01 04  
002EDFr 3  03 6C 03 F8  
002EF7r 3  00 18 00 00          .byte 0,24,0,0,0,24,0,65,0,219,0,254,0,146,0,84,0,126,0,255,0,195,0,231,0,126,0,36,0,36,0,102
002EFBr 3  00 18 00 41  
002EFFr 3  00 DB 00 FE  
002F17r 3  00 06 00 00          .byte 0,6,0,0,0,6,64,16,192,54,128,63,128,36,0,21,128,31,192,63,192,48,192,57,128,31,0,9,0,9,128,25
002F1Br 3  00 06 40 10  
002F1Fr 3  C0 36 80 3F  
002F37r 3  01 80 00 00          .byte 1,128,0,0,1,128,4,16,13,176,15,224,9,32,5,64,7,224,14,112,12,48,14,112,7,224,2,64,6,64,0,96
002F3Br 3  01 80 04 10  
002F3Fr 3  0D B0 0F E0  
002F57r 3  00 60 00 00          .byte 0,96,0,0,0,96,1,4,3,108,3,248,2,72,1,80,1,248,3,156,3,12,3,156,1,248,0,144,1,144,0,24
002F5Br 3  00 60 01 04  
002F5Fr 3  03 6C 03 F8  
002F77r 3  00 18 00 00          .byte 0,24,0,0,0,24,0,65,0,219,0,254,0,146,0,84,0,126,0,231,0,195,0,231,0,126,0,36,0,100,0,6
002F7Br 3  00 18 00 41  
002F7Fr 3  00 DB 00 FE  
002F97r 3  00 06 00 00          .byte 0,6,0,0,0,6,64,16,192,54,128,63,128,36,0,21,128,31,192,57,192,48,192,57,128,31,0,9,0,25,128,1
002F9Br 3  00 06 40 10  
002F9Fr 3  C0 36 80 3F  
002FB7r 3  0F E0 10 18          .byte 15,224,16,24,32,4,39,226,79,243,159,249,159,249,134,25,139,89,159,249,159,242,92,228,47,200,28,240,24,96,15,192
002FBBr 3  20 04 27 E2  
002FBFr 3  4F F3 9F F9  
002FD7r 3  03 F8 04 06          .byte 3,248,4,6,8,1,137,248,211,252,103,254,103,254,97,134,98,214,103,254,167,252,23,57,11,242,7,60,6,24,3,240
002FDBr 3  08 01 89 F8  
002FDFr 3  D3 FC 67 FE  
002FF7r 3  00 FE 81 01          .byte 0,254,129,1,66,0,34,126,52,255,153,255,153,255,152,97,152,181,153,255,41,255,69,206,130,252,1,207,1,134,0,252
002FFBr 3  42 00 22 7E  
002FFFr 3  34 FF 99 FF  
003017r 3  80 3F 60 40          .byte 128,63,96,64,16,128,136,159,205,63,230,127,230,127,102,24,102,45,230,127,202,127,145,115,32,191,192,115,128,97,0,63
00301Br 3  10 80 88 9F  
00301Fr 3  CD 3F E6 7F  
003037r 3  0F E0 10 18          .byte 15,224,16,24,32,4,39,226,79,243,159,249,159,249,134,25,139,89,159,249,159,242,92,228,47,200,31,240,28,224,15,192
00303Br 3  20 04 27 E2  
00303Fr 3  4F F3 9F F9  
003057r 3  03 F8 04 06          .byte 3,248,4,6,8,1,137,248,211,252,103,254,103,254,97,134,98,214,103,254,167,252,23,57,11,242,7,252,7,56,3,240
00305Br 3  08 01 89 F8  
00305Fr 3  D3 FC 67 FE  
003077r 3  00 FE 81 01          .byte 0,254,129,1,66,0,34,126,52,255,153,255,153,255,152,97,152,181,153,255,41,255,69,206,130,252,1,255,1,206,0,252
00307Br 3  42 00 22 7E  
00307Fr 3  34 FF 99 FF  
003097r 3  80 3F 60 40          .byte 128,63,96,64,16,128,136,159,205,63,230,127,230,127,102,24,102,45,230,127,202,127,145,115,32,191,192,127,128,115,0,63
00309Br 3  10 80 88 9F  
00309Fr 3  CD 3F E6 7F  
0030B7r 3  07 F0 18 08          .byte 7,240,24,8,32,4,71,228,207,242,159,249,159,249,152,97,154,209,159,249,79,249,39,58,19,244,15,56,6,24,3,240
0030BBr 3  20 04 47 E4  
0030BFr 3  CF F2 9F F9  
0030D7r 3  01 FC 06 02          .byte 1,252,6,2,8,1,17,249,179,252,103,254,103,254,102,24,102,180,103,254,83,254,137,206,4,253,3,206,1,134,0,252
0030DBr 3  08 01 11 F9  
0030DFr 3  B3 FC 67 FE  
0030F7r 3  00 7F 81 80          .byte 0,127,129,128,66,0,68,126,44,255,153,255,153,255,25,134,25,173,153,255,148,255,162,115,65,63,128,243,128,97,0,63
0030FBr 3  42 00 44 7E  
0030FFr 3  2C FF 99 FF  
003117r 3  C0 1F 20 60          .byte 192,31,32,96,16,128,145,31,203,63,230,127,230,127,134,97,70,107,230,127,229,63,232,156,208,79,224,60,96,24,192,15
00311Br 3  10 80 91 1F  
00311Fr 3  CB 3F E6 7F  
003137r 3  07 F0 18 08          .byte 7,240,24,8,32,4,71,228,207,242,159,249,159,249,152,97,154,209,159,249,79,249,39,58,19,244,15,248,7,56,3,240
00313Br 3  20 04 47 E4  
00313Fr 3  CF F2 9F F9  
003157r 3  01 FC 06 02          .byte 1,252,6,2,8,1,17,249,179,252,103,254,103,254,102,24,102,180,103,254,83,254,137,206,4,253,3,254,1,206,0,252
00315Br 3  08 01 11 F9  
00315Fr 3  B3 FC 67 FE  
003177r 3  00 7F 81 80          .byte 0,127,129,128,66,0,68,126,44,255,153,255,153,255,25,134,25,173,153,255,148,255,162,115,65,63,128,255,128,115,0,63
00317Br 3  42 00 44 7E  
00317Fr 3  2C FF 99 FF  
003197r 3  C0 1F 20 60          .byte 192,31,32,96,16,128,145,31,203,63,230,127,230,127,134,97,70,107,230,127,229,63,232,156,208,79,224,63,224,28,192,15
00319Br 3  10 80 91 1F  
00319Fr 3  CB 3F E6 7F  
0031B7r 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,63,225,12,119,38,126,127,240,127,216,115,224,127,220,49,190,31,111,14,111,0,255
0031BBr 3  7F FE 80 63  
0031BFr 3  7F 9F 3F E1  
0031D7r 3  03 FE 0F FF          .byte 3,254,15,255,159,255,224,24,223,231,79,248,195,29,137,159,31,252,31,246,28,248,31,247,140,111,199,219,195,155,192,63
0031DBr 3  9F FF E0 18  
0031DFr 3  DF E7 4F F8  
0031F7r 3  80 FF C3 FF          .byte 128,255,195,255,231,255,56,6,247,249,19,254,112,199,226,103,7,255,135,253,7,62,199,253,227,27,241,246,240,230,240,15
0031FBr 3  E7 FF 38 06  
0031FFr 3  F7 F9 13 FE  
003217r 3  E0 3F F0 FF          .byte 224,63,240,255,249,255,142,1,125,254,132,255,220,49,248,153,193,255,97,255,129,207,113,255,248,198,188,125,188,57,252,3
00321Br 3  F9 FF 8E 01  
00321Fr 3  7D FE 84 FF  
003237r 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,63,225,12,119,38,126,127,240,127,216,115,224,127,220,33,190,19,111,14,111,0,255
00323Br 3  7F FE 80 63  
00323Fr 3  7F 9F 3F E1  
003257r 3  03 FE 0F FF          .byte 3,254,15,255,159,255,224,24,223,231,79,248,195,29,137,159,31,252,31,246,28,248,31,247,136,111,196,219,195,155,192,63
00325Br 3  9F FF E0 18  
00325Fr 3  DF E7 4F F8  
003277r 3  80 FF C3 FF          .byte 128,255,195,255,231,255,56,6,247,249,19,254,112,199,226,103,7,255,135,253,7,62,199,253,226,27,241,54,240,230,240,15
00327Br 3  E7 FF 38 06  
00327Fr 3  F7 F9 13 FE  
003297r 3  E0 3F F0 FF          .byte 224,63,240,255,249,255,142,1,125,254,132,255,220,49,248,153,193,255,97,255,129,207,113,255,248,134,188,77,188,57,252,3
00329Br 3  F9 FF 8E 01  
00329Fr 3  7D FE 84 FF  
0032B7r 3  1F F0 3F FC          .byte 31,240,63,252,127,254,198,1,249,254,135,252,238,48,126,100,15,254,27,254,7,206,59,254,125,132,246,248,246,112,255,0
0032BBr 3  7F FE C6 01  
0032BFr 3  F9 FE 87 FC  
0032D7r 3  07 FC 0F FF          .byte 7,252,15,255,159,255,113,128,190,127,33,255,59,140,31,153,131,255,134,255,129,243,142,255,31,97,61,190,61,156,63,192
0032DBr 3  9F FF 71 80  
0032DFr 3  BE 7F 21 FF  
0032F7r 3  01 FF C3 FF          .byte 1,255,195,255,231,255,28,96,239,159,200,127,14,227,71,230,224,255,225,191,224,124,227,191,71,216,143,111,15,103,15,240
0032FBr 3  E7 FF 1C 60  
0032FFr 3  EF 9F C8 7F  
003317r 3  C0 7F F0 FF          .byte 192,127,240,255,249,255,7,24,251,231,242,31,195,184,145,249,248,63,248,111,56,31,248,239,17,246,227,219,195,217,3,252
00331Br 3  F9 FF 07 18  
00331Fr 3  FB E7 F2 1F  
003337r 3  1F F0 3F FC          .byte 31,240,63,252,127,254,198,1,249,254,135,252,238,48,126,100,15,254,27,254,7,206,59,254,125,132,246,200,246,112,255,0
00333Br 3  7F FE C6 01  
00333Fr 3  F9 FE 87 FC  
003357r 3  07 FC 0F FF          .byte 7,252,15,255,159,255,113,128,190,127,33,255,59,140,31,153,131,255,134,255,129,243,142,255,31,97,61,178,61,156,63,192
00335Br 3  9F FF 71 80  
00335Fr 3  BE 7F 21 FF  
003377r 3  01 FF C3 FF          .byte 1,255,195,255,231,255,28,96,239,159,200,127,14,227,71,230,224,255,225,191,224,124,227,191,71,216,143,108,15,103,15,240
00337Br 3  E7 FF 1C 60  
00337Fr 3  EF 9F C8 7F  
003397r 3  C0 7F F0 FF          .byte 192,127,240,255,249,255,7,24,251,231,242,31,195,184,145,249,248,63,248,111,56,31,248,239,17,246,35,219,195,217,3,252
00339Br 3  F9 FF 07 18  
00339Fr 3  FB E7 F2 1F  
0033B7r 3               frmlst:
0033B7r 3  00 03                .byte 0,3
0033B9r 3  03 03                .byte 3,3
0033BBr 3  06 03                .byte 6,3
0033BDr 3  09 02                .byte 9,2
0033BFr 3  0B 02                .byte 11,2
0033C1r 3  0D 02                .byte 13,2
0033C3r 3  0F 02                .byte 15,2
0033C5r 3  11 02                .byte 17,2
0033C7r 3  13 02                .byte 19,2
0033C9r 3  15 02                .byte 21,2
0033CBr 3  17 02                .byte 23,2
0033CDr 3  19 02                .byte 25,2
0033CFr 3  1B 03                .byte 27,3
0033D1r 3  1E 02                .byte 30,2
0033D3r 3  20 02                .byte 32,2
0033D5r 3  22 02                .byte 34,2
0033D7r 3  24 02 26 00          .byte 36,2,38,0
0033DBr 3               scdat:
0033DBr 3  44 01 4C 01          .word 324,332,351,317,379,360,375,325,326
0033DFr 3  5F 01 3D 01  
0033E3r 3  7B 01 68 01  
0033EDr 3  17 00 00 00          .byte 23,0,0,0,19,20,255,0,8,19,20,255,0,6,23,28,0,0,21,22,255,0,8,21,22,255,0,5,28,23,1,255,15,8
0033F1r 3  13 14 FF 00  
0033F5r 3  08 13 14 FF  
00340Fr 3  11 12 FF 0F          .byte 17,18,255,15,7,17,18,15,23,255,0,9,19,20,255,0,7,19,20,0,23,28,255,0,8,21,22,255,0,7,21,22,28
003413r 3  07 11 12 0F  
003417r 3  17 FF 00 09  
003430r 3  17 01 11 12          .byte 23,1,17,18,255,15,12,17,18,255,15,4,23,0,19,20,255,0,12,19,20,255,0,4,23,28,21,22,255,0,12,21,22
003434r 3  FF 0F 0C 11  
003438r 3  12 FF 0F 04  
003451r 3  00 00 00 1C          .byte 0,0,0,28,23,1,15,15,15,17,18,255,15,6,17,18,255,15,7,23,255,0,4,19,20,255,0,6,19,20,255,0,7
003455r 3  17 01 0F 0F  
003459r 3  0F 11 12 FF  
003472r 3  17 1C 00 00          .byte 23,28,0,0,0,21,22,255,0,6,21,22,255,0,6,28,23,1,15,15,15,9,15,11,13,17,18,15,13,15,15,15,13
003476r 3  00 15 16 FF  
00347Ar 3  00 06 15 16  
003493r 3  0F 0B 11 12          .byte 15,11,17,18,15,23,255,0,4,10,0,12,14,19,20,0,14,0,0,0,14,0,12,19,20,0,23,28,255,0,7,21,22
003497r 3  0F 17 FF 00  
00349Br 3  04 0A 00 0C  
0034B4r 3  FF 00 08 15          .byte 255,0,8,21,22,28,23,1,17,18,15,9,15,11,13,15,15,13,17,18,15,15,13,15,11,13,15,15,23,0,19,20,0
0034B8r 3  16 1C 17 01  
0034BCr 3  11 12 0F 09  
0034D5r 3  0A 00 0C 0E          .byte 10,0,12,14,0,0,14,19,20,0,0,14,0,12,14,0,0,23,28,21,22,255,0,8,21,22,255,0,7,28,23,1,5
0034D9r 3  00 00 0E 13  
0034DDr 3  14 00 00 0E  
0034F6r 3  07 09 0B 0D          .byte 7,9,11,13,17,18,13,11,15,15,15,11,11,15,17,18,9,13,15,23,0,6,8,10,12,14,19,20,14,12,0,0,0
0034FAr 3  11 12 0D 0B  
0034FEr 3  0F 0F 0F 0B  
003517r 3  0C 0C 00 13          .byte 12,12,0,19,20,10,14,0,23,28,255,0,5,21,22,255,0,8,21,22,0,0,28,255,23,22
00351Br 3  14 0A 0E 00  
00351Fr 3  17 1C FF 00  
003531r 3  FF 00 07 13          .byte 255,0,7,19,20,255,0,5,19,20,0,29,0,23,29,0,28,255,0,6,21,22,255,0,5,21,22,0,30,0,23,30,0
003535r 3  14 FF 00 05  
003539r 3  13 14 00 1D  
003552r 3  09 0F 11 12          .byte 9,15,17,18,15,9,15,13,15,15,9,17,18,15,9,15,15,11,15,13,15,15,0,0,19,20,0,0,0,14,0,0,0
003556r 3  0F 09 0F 0D  
00355Ar 3  0F 0F 09 11  
003573r 3  13 14 FF 00          .byte 19,20,255,0,4,12,0,14,0,0,28,0,21,22,255,0,7,21,22,255,0,8,28,15,15,15,11,11,15,17,18,15,9
003577r 3  04 0C 00 0E  
00357Br 3  00 00 1C 00  
003594r 3  0F 0F 0F 09          .byte 15,15,15,9,15,17,18,15,11,15,15,15,0,0,0,12,12,0,19,20,255,0,7,19,20,0,12,0,0,0,28,255,0,5
003598r 3  0F 11 12 0F  
00359Cr 3  0B 0F 0F 0F  
0035B6r 3  15 16 FF 00          .byte 21,22,255,0,7,21,22,255,0,4,28,15,15,15,9,255,15,4,7,15,15,11,15,9,255,15,5,17,18,15,255,0,8
0035BAr 3  07 15 16 FF  
0035BEr 3  00 04 1C 0F  
0035D7r 3  08 00 00 0C          .byte 8,0,0,12,255,0,7,19,20,0,28,255,0,18,21,22,28,15,9,7,15,15,15,7,15,17,18,15,3,15,15,3,15
0035DBr 3  FF 00 07 13  
0035DFr 3  14 00 1C FF  
0035F8r 3  07 FF 0F 05          .byte 7,255,15,5,0,0,8,0,0,0,8,0,19,20,255,0,6,8,255,0,5,28,255,0,7,21,22,255,0,11,28,15,15
0035FCr 3  00 00 08 00  
003600r 3  00 00 08 00  
003619r 3  0B 11 12 0F          .byte 11,17,18,15,5,255,15,4,9,15,5,15,15,7,15,17,18,15,5,0,0,12,19,20,0,6,255,0,6,6,0,0,8
00361Dr 3  05 FF 0F 04  
003621r 3  09 0F 05 0F  
00363Ar 3  00 13 14 00          .byte 0,19,20,0,6,28,0,0,21,22,255,0,13,21,22,0,28,15,7,15,15,15,9,15,15,9,15,9,15,7,15,17,18
00363Er 3  06 1C 00 00  
003642r 3  15 16 FF 00  
00365Br 3  0F 09 0F 0F          .byte 15,9,15,15,7,15,0,8,255,0,10,8,0,19,20,0,10,0,0,8,0,28,255,0,13,21,22,255,0,5,28,255,23,22
00365Fr 3  07 0F 00 08  
003663r 3  FF 00 0A 08  
00367Dr 3  FF 00 0C 13          .byte 255,0,12,19,20,255,0,8,28,255,0,11,21,22,255,0,7,28,15,9,17,18,15,9,15,9,15,7,15,5,15,15,15
003681r 3  14 FF 00 08  
003685r 3  1C FF 00 0B  
00369Er 3  0B 0F 11 12          .byte 11,15,17,18,13,15,15,0,0,19,20,255,0,5,8,0,6,0,0,0,12,0,19,20,14,0,0,28,0,21,22,255,0,13
0036A2r 3  0D 0F 0F 00  
0036A6r 3  00 13 14 FF  
0036C0r 3  15 16 00 00          .byte 21,22,0,0,28,15,13,15,15,5,5,3,15,17,18,15,7,15,15,9,15,9,15,15,15,9,15,0,14,0,0,6,6
0036C4r 3  1C 0F 0D 0F  
0036C8r 3  0F 05 05 03  
0036E1r 3  00 00 13 14          .byte 0,0,19,20,0,8,255,0,10,28,255,0,7,21,22,255,0,11,28,13,15,15,13,15,15,13,15,15,13,15,9,17,18
0036E5r 3  00 08 FF 00  
0036E9r 3  0A 1C FF 00  
003702r 3  03 03 0F 0F          .byte 3,3,15,15,13,15,3,15,14,0,0,14,0,0,14,0,0,14,0,0,19,20,255,0,4,14,0,0,0,28,255,0,11
003706r 3  0D 0F 03 0F  
00370Ar 3  0E 00 00 0E  
003723r 3  15 16 FF 00          .byte 21,22,255,0,7,28,15,3,15,15,17,18,15,7,15,15,7,15,15,15,3,15,15,15,3,17,18,15,255,0,4,19,20
003727r 3  07 1C 0F 03  
00372Br 3  0F 0F 11 12  
003744r 3  00 08 00 00          .byte 0,8,0,0,8,0,0,29,0,0,29,0,0,19,20,0,28,0,0,0,21,22,255,0,7,30,0,0,30,0,0,21,22
003748r 3  08 00 00 1D  
00374Cr 3  00 00 1D 00  
003765r 3  1C 0F 11 12          .byte 28,15,17,18,15,3,15,3,15,17,18,7,255,15,7,3,7,15,15,0,19,20,255,0,5,19,20,8,255,0,8,8,0,0
003769r 3  0F 03 0F 03  
00376Dr 3  0F 11 12 07  
003787r 3  1C 15 16 FF          .byte 28,21,22,255,0,5,21,22,255,0,11,28,15,15,15,7,15,3,15,15,7,15,15,17,18,7,15,15,9,15,7,15,3
00378Br 3  00 05 15 16  
00378Fr 3  FF 00 0B 1C  
0037A8r 3  0F 00 00 00          .byte 15,0,0,0,8,255,0,4,8,0,0,19,20,8,255,0,4,8,0,0,0,28,255,0,10,21,22,255,0,8,28,255,15,4
0037ACr 3  08 FF 00 04  
0037B0r 3  08 00 00 13  
0037CAr 3  0B 0F 0F 11          .byte 11,15,15,17,18,15,15,15,3,15,17,18,15,15,15,5,15,15
0037CEr 3  12 0F 0F 0F  
0037D2r 3  03 0F 11 12  
0037DCr 3  FF 00 16 1C          .byte 255,0,22,28,255,0,20,28,15,15,15,11,15,17,18,15,15,9,15,13,15,15,15,9,15,15,17,18,11,15,0,0,0
0037E0r 3  FF 00 14 1C  
0037E4r 3  0F 0F 0F 0B  
0037FDr 3  0C 00 13 14          .byte 12,0,19,20,255,0,4,14,0,0,0,10,0,0,19,20,12,0,28,255,0,4,21,22,255,0,11,21,22,0,28,15,15
003801r 3  FF 00 04 0E  
003805r 3  00 00 00 0A  
00381Er 3  0B 0F 07 0F          .byte 11,15,7,15,15,15,7,15,15,17,18,15,15,15,3,15,15,3,15,15,0,0,12,0,8,0,0,0,8,0,0,19,20
003822r 3  0F 0F 07 0F  
003826r 3  0F 11 12 0F  
00383Fr 3  FF 00 04 1D          .byte 255,0,4,29,0,0,29,0,28,255,0,10,21,22,255,0,4,30,0,0,30,28,15,15,17,18,15,5,15,15,15,3,255,15,5
003843r 3  00 00 1D 00  
003847r 3  1C FF 00 0A  
003862r 3  07 0F 0F 0F          .byte 7,15,15,15,7,15,15,0,0,19,20,0,6,255,0,9,8,0,0,0,8,0,0,28,0,21,22,255,0,17,28,255,15,7
003866r 3  07 0F 0F 00  
00386Ar 3  00 13 14 00  
003884r 3  11 12 FF 0F          .byte 17,18,255,15,5,17,18,255,15,6,255,0,7,19,20,255,0,5,19,20,255,0,6,28,255,0,6,21,22,255,0,5,21
003888r 3  05 11 12 FF  
00388Cr 3  0F 06 FF 00  
0038A5r 3  16 FF 00 05          .byte 22,255,0,5,28,15,15,17,18,15,3,255,15,4,3,255,15,6,7,15,17,18,15,0,0,19,20,255,0,13,8,0,19
0038A9r 3  1C 0F 0F 11  
0038ADr 3  12 0F 03 FF  
0038C6r 3  14 00 1C 00          .byte 20,0,28,0,21,22,255,0,15,21,22,28,15,7,255,15,6,17,18,15,15,7,15,3,15,17,18,7,15,3,15,0,8
0038CAr 3  15 16 FF 00  
0038CEr 3  0F 15 16 1C  
0038E7r 3  FF 00 06 13          .byte 255,0,6,19,20,0,0,8,0,0,0,19,20,8,0,0,0,28,255,0,7,21,22,255,0,6,21,22,0,0,0,28,255,15,4
0038EBr 3  14 00 00 08  
0038EFr 3  00 00 00 13  
00390Ar 3  09 FF 0F 05          .byte 9,255,15,5,9,15,17,18,255,15,4,5,15,15,15
00390Er 3  09 0F 11 12  
003912r 3  FF 0F 04 05  
003919r 3  FF 00 0E 13          .byte 255,0,14,19,20,255,0,5,23,28,255,0,13,21,22,255,0,4,28,23,255,15,4,5,15,15,11,15,15,17,18,15,5
00391Dr 3  14 FF 00 05  
003921r 3  17 1C FF 00  
00393Ar 3  0F 09 FF 0F          .byte 15,9,255,15,4,24,23,255,0,4,6,0,0,12,0,0,19,20,0,6,0,10,255,0,5,23,28,255,0,9,21,22,255,0,8
00393Er 3  04 18 17 FF  
003942r 3  00 04 06 00  
00395Dr 3  1C 17 0F 0F          .byte 28,23,15,15,17,18,15,7,15,3,15,7,255,15,4,3,15,15,17,18,15,24,23,0,0,19,20,0,8,0,0,0,8
003961r 3  11 12 0F 07  
003965r 3  0F 03 0F 07  
00397Er 3  00 00 1D 00          .byte 0,0,29,0,23,29,0,19,20,0,0,23,28,0,21,22,255,0,8,30,0,23,30,0,21,22,0,28,23,15,15,13,15,15
003982r 3  17 1D 00 13  
003986r 3  14 00 00 17  
0039A0r 3  11 12 0F 0D          .byte 17,18,15,13,15,15,11,15,15,9,15,15,15,5,15,24,23,0,0,14,0,0,19,20,0,14,0,0,12,0,0,10,0,0,0
0039A4r 3  0F 0F 0B 0F  
0039A8r 3  0F 09 0F 0F  
0039C3r 3  06 00 00 17          .byte 6,0,0,23,28,255,0,4,21,22,255,0,13,28,23,15,15,13,15,5,15,3,15,17,18,15,15,7,15,9,15,7,15
0039C7r 3  1C FF 00 04  
0039CBr 3  15 16 FF 00  
0039E4r 3  11 12 18 17          .byte 17,18,24,23,0,0,14,0,6,0,0,0,19,20,0,0,8,0,10,0,8,0,19,20,0,23,28,255,0,7,21,22,255,0,8
0039E8r 3  00 00 0E 00  
0039ECr 3  06 00 00 00  
003A07r 3  15 16 1C 17          .byte 21,22,28,23,15,15,15,17,18,13,15,15,13,15,15,11,15,17,18,3,15,7,15,15,24,23,0,0,0,19,20,14,0,0
003A0Br 3  0F 0F 0F 11  
003A0Fr 3  12 0D 0F 0F  
003A29r 3  0E 00 00 0C          .byte 14,0,0,12,0,19,20,0,0,8,0,0,0,23,28,0,0,21,22,255,0,8,21,22,255,0,5,28,23,15,15,7,15
003A2Dr 3  00 13 14 00  
003A31r 3  00 08 00 00  
003A4Ar 3  03 0F 0F 11          .byte 3,15,15,17,18,7,15,15,7,15,15,7,15,3,17,18,24,23,0,0,8,255,0,4,19,20,8,0,0,8,0,0,8
003A4Er 3  12 07 0F 0F  
003A52r 3  07 0F 0F 07  
003A6Br 3  00 00 13 14          .byte 0,0,19,20,0,23,28,255,0,6,21,22,255,0,9,21,22,28,23,15,15,3,17,18,15,15,15,3,15,15,15,5,15,15
003A6Fr 3  00 17 1C FF  
003A73r 3  00 06 15 16  
003A8Dr 3  05 0F 0F 03          .byte 5,15,15,3,15,24,23
003A91r 3  0F 18 17     
003A94r 3  FF 00 16 1C          .byte 255,0,22,28,255,0,19,28,23,15,15,15,17,18,15,3,15,11,15,15,5,15,9,15,15,17,18,15,15,24,23,0,0,0
003A98r 3  FF 00 13 1C  
003A9Cr 3  17 0F 0F 0F  
003AB6r 3  13 14 00 00          .byte 19,20,0,0,0,12,0,0,6,255,0,4,19,20,0,0,0,23,28,0,0,21,22,255,0,11,21,22,0,0,28,23,15
003ABAr 3  00 0C 00 00  
003ABEr 3  06 FF 00 04  
003AD7r 3  09 FF 0F 04          .byte 9,255,15,4,9,15,15,17,18,15,15,7,15,15,15,5,15,15,24,23,255,0,9,19,20,0,0,8,0,0,0,6,0,0,0
003ADBr 3  09 0F 0F 11  
003ADFr 3  12 0F 0F 07  
003AFAr 3  17 1C FF 00          .byte 23,28,255,0,8,21,22,255,0,9,28,23,15,15,7,15,17,18,15,9,15,7,15,15,9,15,7,15,9,15,17,18,24
003AFEr 3  08 15 16 FF  
003B02r 3  00 09 1C 17  
003B1Br 3  17 00 00 08          .byte 23,0,0,8,0,19,20,0,0,0,8,0,0,10,0,8,0,10,0,19,20,0,23,28,0,0,0,21,22,255,0,12,21
003B1Fr 3  00 13 14 00  
003B23r 3  00 00 08 00  
003B3Cr 3  16 1C 17 0F          .byte 22,28,23,15,9,5,15,17,18,15,7,17,18,15,9,15,17,18,15,9,15,15,15,24,23,0,0,6,255,0,4,8,19
003B40r 3  09 05 0F 11  
003B44r 3  12 0F 07 11  
003B5Dr 3  14 00 00 00          .byte 20,0,0,0,19,20,0,0,29,0,0,0,23,28,255,0,7,21,22,0,0,0,21,22,0,0,30,0,0,28,23,15,17
003B61r 3  13 14 00 00  
003B65r 3  1D 00 00 00  
003B7Er 3  12 0F 0F 03          .byte 18,15,15,3,11,15,3,15,11,3,15,11,3,15,17,18,15,3,24,23,0,19,20,0,0,0,12,0,0,0,12,0,0
003B82r 3  0B 0F 03 0F  
003B86r 3  0B 03 0F 0B  
003B9Fr 3  0C 00 00 13          .byte 12,0,0,19,20,0,0,0,23,28,21,22,255,0,13,21,22,0,0,28,23,255,15,4,3,17,18,11,15,3,15,5,15,15
003BA3r 3  14 00 00 00  
003BA7r 3  17 1C 15 16  
003BC1r 3  03 0F 05 0F          .byte 3,15,5,15,15,3,24,23,255,0,5,19,20,12,0,0,0,6,255,0,4,6,255,0,4,23,28,255,0,4,21,22,255,0,13
003BC5r 3  0F 03 18 17  
003BC9r 3  FF 00 05 13  
003BE4r 3  1C 17 0F 0F          .byte 28,23,15,15,3,15,15,15,5,15,3,15,15,15,5,15,17,18,15,5,15,15,24,23
003BE8r 3  03 0F 0F 0F  
003BECr 3  05 0F 03 0F  
003BFCr 3  17 FF 00 0A          .byte 23,255,0,10,19,20,255,0,9,23,28,255,0,9,21,22,255,0,8,28,23,1,15,15,7,15,15,9,15,15,5,15,15,15
003C00r 3  13 14 FF 00  
003C04r 3  09 17 1C FF  
003C1Er 3  07 0F 0F 03          .byte 7,15,15,3,15,17,18,15,23,0,0,0,8,0,0,10,0,0,6,0,0,0,8,255,0,4,19,20,0,23,28,255,0,17
003C22r 3  0F 11 12 0F  
003C26r 3  17 00 00 00  
003C40r 3  15 16 1C 17          .byte 21,22,28,23,1,15,5,15,15,3,15,17,18,15,15,7,15,15,11,15,17,18,15,7,15,23,0,0,6,255,0,4,19
003C44r 3  01 0F 05 0F  
003C48r 3  0F 03 0F 11  
003C61r 3  14 00 00 08          .byte 20,0,0,8,0,0,12,0,19,20,0,8,0,23,28,255,0,6,21,22,255,0,7,21,22,0,0,28,23,1,9,15,17
003C65r 3  00 00 0C 00  
003C69r 3  13 14 00 08  
003C82r 3  12 0F 09 0F          .byte 18,15,9,15,15,15,7,15,17,18,15,9,15,15,15,5,15,23,0,0,0,19,20,29,0,23,29,0,8,0,19,20,0
003C86r 3  0F 0F 07 0F  
003C8Ar 3  11 12 0F 09  
003CA3r 3  0A 00 00 00          .byte 10,0,0,0,6,0,23,28,0,0,21,22,30,0,23,30,0,0,0,21,22,255,0,6,28,23,1,17,18,15,11,15,3
003CA7r 3  06 00 17 1C  
003CABr 3  00 00 15 16  
003CC4r 3  0F 11 11 12          .byte 15,17,17,18,15,7,15,15,9,15,15,9,15,15,23,0,19,20,0,12,255,0,4,19,20,0,8,0,0,10,255,0,5
003CC8r 3  0F 07 0F 0F  
003CCCr 3  09 0F 0F 09  
003CE5r 3  17 1C 15 16          .byte 23,28,21,22,255,0,6,21,22,255,0,9,28,23,1,15,15,7,15,15,5,255,15,4,11,15,7,15,17,18,15,3,15,15
003CE9r 3  FF 00 06 15  
003CEDr 3  16 FF 00 09  
003D07r 3  17 00 00 00          .byte 23,0,0,0,8,0,0,6,255,0,4,12,0,8,0,19,20,255,0,4,23,28,255,0,14,21,22,0,0,0,28,23,1
003D0Br 3  08 00 00 06  
003D0Fr 3  FF 00 04 0C  
003D28r 3  0F 03 0F 0F          .byte 15,3,15,15,5,15,15,17,18,15,7,15,15,15,7,15,17,18,15,15,23,255,0,5,6,0,0,19,20,0,8,0,0,0
003D2Cr 3  05 0F 0F 11  
003D30r 3  12 0F 07 0F  
003D4Ar 3  08 00 13 14          .byte 8,0,19,20,0,0,23,28,255,0,7,21,22,255,0,7,21,22,0,28,23,1,15,9,17,18,5,255,15,4,3,15,15
003D4Er 3  00 00 17 1C  
003D52r 3  FF 00 07 15  
003D6Br 3  11 12 0F 0F          .byte 17,18,15,15,15,5,15,15
003D6Fr 3  0F 05 0F 0F  
003D73r 3  17 00 00 00          .byte 23,0,0,0,28,29,255,0,16,23,0,0,0,28,30,255,0,15,28,23,1,15,3,15,15,5,15,3,15,15,7,15,17
003D77r 3  1C 1D FF 00  
003D7Br 3  10 17 00 00  
003D94r 3  12 0F 03 0F          .byte 18,15,3,15,5,15,15,15,23,255,0,10,8,0,19,20,255,0,7,23,28,255,0,11,21,22,255,0,6,28,23,1,15,15
003D98r 3  05 0F 0F 0F  
003D9Cr 3  17 FF 00 0A  
003DB6r 3  07 0F 0F 11          .byte 7,15,15,17,18,15,9,15,15,3,15,5,15,15,17,18,15,15,23,0,0,0,8,0,0,19,20,0,10,255,0,7,19
003DBAr 3  12 0F 09 0F  
003DBEr 3  0F 03 0F 05  
003DD7r 3  14 00 00 17          .byte 20,0,0,23,28,255,0,5,21,22,255,0,9,21,22,0,28,23,1,255,15,4,3,15,5,15,3,15,17,18,15,7,255,15,6
003DDBr 3  1C FF 00 05  
003DDFr 3  15 16 FF 00  
003DFAr 3  17 FF 00 0B          .byte 23,255,0,11,19,20,0,8,255,0,6,23,28,255,0,10,21,22,255,0,7,28,23,1,15,17,18,15,15,15,3,15,15
003DFEr 3  13 14 00 08  
003E02r 3  FF 00 06 17  
003E1Br 3  05 0F 0F 0F          .byte 5,15,15,15,3,15,17,18,15,15,15,23,0,0,19,20,255,0,12,19,20,0,0,0,23,28,0,21,22,255,0,12,21
003E1Fr 3  03 0F 11 12  
003E23r 3  0F 0F 0F 17  
003E3Cr 3  16 00 00 1C          .byte 22,0,0,28,23,1,15,3,15,15,7,15,5,15,15,3,17,18,15,9,255,15,4,3,15,23,255,0,5,8,255,0,5
003E40r 3  17 01 0F 03  
003E44r 3  0F 0F 07 0F  
003E5Dr 3  13 14 00 0A          .byte 19,20,0,10,255,0,6,23,28,255,0,10,21,22,255,0,7,28,23,1,15,15,17,18,15,9,15,3,15,15,7,15,15
003E61r 3  FF 00 06 17  
003E65r 3  1C FF 00 0A  
003E7Er 3  0B 0F 03 11          .byte 11,15,3,17,18,15,15,23,0,0,0,19,20,0,10,255,0,4,8,0,0,12,0,0,19,20,0,0,23,28,0,0,21
003E82r 3  12 0F 0F 17  
003E86r 3  00 00 00 13  
003E9Fr 3  16 FF 00 0C          .byte 22,255,0,12,21,22,0,28,23,1,255,15,4,3,15,15,5,15,17,18,15,3,255,15,7
003EA3r 3  15 16 00 1C  
003EA7r 3  17 01 FF 0F  
003EB8r 3  00 1D 00 13          .byte 0,29,0,19,20,255,0,16,23,0,30,0,21,22,255,0,15,28,23,15,7,255,15,4,5,15,9,15,17,18,15,5,15,15
003EBCr 3  14 FF 00 10  
003EC0r 3  17 00 1E 00  
003EDAr 3  09 0F 0F 05          .byte 9,15,15,5,24,23,0,8,255,0,4,6,0,0,0,19,20,0,6,255,0,5,6,0,23,28,255,0,9,21,22,255,0,8
003EDEr 3  18 17 00 08  
003EE2r 3  FF 00 04 06  
003EFCr 3  1C 17 0F 0F          .byte 28,23,15,15,5,15,15,7,15,15,5,255,15,4,7,15,5,15,17,18,15,24,23,0,0,6,0,0,8,0,0,6,255,0,4
003F00r 3  05 0F 0F 07  
003F04r 3  0F 0F 05 FF  
003F1Fr 3  08 00 06 00          .byte 8,0,6,0,19,20,0,6,23,28,255,0,16,21,22,0,28,23,3,15,7,15,15,15,9,15,15,7,15,15,17,18,15,15
003F23r 3  13 14 00 06  
003F27r 3  17 1C FF 00  
003F41r 3  09 09 0F 0F          .byte 9,9,15,15,24,23,0,0,8,255,0,6,8,0,0,19,20,255,0,7,23,28,255,0,11,21,22,255,0,6,28,23,15
003F45r 3  18 17 00 00  
003F49r 3  08 FF 00 06  
003F62r 3  03 0F 0F 0F          .byte 3,15,15,15,17,18,15,5,15,5,255,15,4,3,17,18,15,15,24,23,255,0,5,19,20,0,6,0,6,255,0,5,19
003F66r 3  11 12 0F 05  
003F6Ar 3  0F 05 FF 0F  
003F83r 3  14 00 00 00          .byte 20,0,0,0,23,28,255,0,4,21,22,255,0,9,21,22,0,0,28,23,15,15,15,9,255,15,4,5,17,18,15,3,15
003F87r 3  17 1C FF 00  
003F8Br 3  04 15 16 FF  
003FA4r 3  05 0F 0F 05          .byte 5,15,15,5,17,18,24,23,255,0,8,6,19,20,0,0,0,6,0,0,6,19,20,0,23,28,255,0,8,21,22,255,0,7
003FA8r 3  11 12 18 17  
003FACr 3  FF 00 08 06  
003FC6r 3  15 16 1C 17          .byte 21,22,28,23,15,15,9,15,15,5,255,15,4,9,15,5,15,17,18,15,9,15,9,24,23,255,0,5,6,255,0,6,6
003FCAr 3  0F 0F 09 0F  
003FCEr 3  0F 05 FF 0F  
003FE7r 3  00 13 14 00          .byte 0,19,20,0,29,0,0,0,23,28,255,0,13,21,22,0,30,0,0,28,255,23,23
003FEBr 3  1D 00 00 00  
003FEFr 3  17 1C FF 00  
003FFEr 3               numsc:
003FFEr 3  09                   .byte 9
003FFFr 3               nmedat:
003FFFr 3  02 03 30 50          .byte 2,3,48,80,0,0,144,104,2,6,120,72,5,10,96,136,255
004003r 3  00 00 90 68  
004007r 3  02 06 78 48  
004010r 3  02 07 48 78          .byte 2,7,72,120,2,11,120,152,2,3,24,104,255
004014r 3  02 0B 78 98  
004018r 3  02 03 18 68  
00401Dr 3  02 07 00 98          .byte 2,7,0,152,2,5,72,88,2,6,120,144,255
004021r 3  02 05 48 58  
004025r 3  02 06 78 90  
00402Ar 3  02 04 78 80          .byte 2,4,120,128,2,6,96,72,2,11,24,136,5,10,72,120,255
00402Er 3  02 06 60 48  
004032r 3  02 0B 18 88  
00403Br 3  05 0E 18 88          .byte 5,14,24,136,2,4,72,144,2,3,96,120,255
00403Fr 3  02 04 48 90  
004043r 3  02 03 60 78  
004048r 3  02 08 00 80          .byte 2,8,0,128,2,4,96,152,2,7,120,104,255
00404Cr 3  02 04 60 98  
004050r 3  02 07 78 68  
004055r 3  05 10 18 80          .byte 5,16,24,128,2,3,56,184,2,6,120,128,255
004059r 3  02 03 38 B8  
00405Dr 3  02 06 78 80  
004062r 3  02 07 00 68          .byte 2,7,0,104,2,4,24,160,2,5,72,96,2,3,120,48,255
004066r 3  02 04 18 A0  
00406Ar 3  02 05 48 60  
004073r 3  02 08 00 90          .byte 2,8,0,144,2,5,24,88,5,16,48,120,2,6,72,136,2,4,120,128,255
004077r 3  02 05 18 58  
00407Br 3  05 10 30 78  
004088r 3               NUMOBJ = 12
004088r 3               objdta:
004088r 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,3,48,144,3,48,144
00408Cr 3  1F F8 39 9C  
004090r 3  35 AC 71 8E  
0040AEr 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,1,0,144,1,0,144
0040B2r 3  1F F8 39 9C  
0040B6r 3  35 AC 71 8E  
0040D4r 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,2,96,112,2,96,112
0040D8r 3  1F F8 39 9C  
0040DCr 3  35 AC 71 8E  
0040FAr 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,4,48,104,4,48,104
0040FEr 3  1F F8 39 9C  
004102r 3  35 AC 71 8E  
004120r 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,6,72,56,6,72,56
004124r 3  1F F8 39 9C  
004128r 3  35 AC 71 8E  
004146r 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,8,144,144,8,144,144
00414Ar 3  1F F8 39 9C  
00414Er 3  35 AC 71 8E  
00416Cr 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,0,0,16,0,0,16
004170r 3  1F F8 39 9C  
004174r 3  35 AC 71 8E  
004192r 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,27,216,140,49,15,240,7,224,11,208,13,176,12,48,28,56,5,96,144,5,96,144
004196r 3  1F F8 39 9C  
00419Ar 3  35 AC 71 8E  
0041B8r 3  3F F0 7F F8          .byte 63,240,127,248,252,252,251,124,251,124,252,252,255,252,255,252,248,124,247,188,239,220,236,220,236,220,247,188,120,120,63,240,7,0,16,7,0,16
0041BCr 3  FC FC FB 7C  
0041C0r 3  FB 7C FC FC  
0041DEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,127,188,255,190,255,182,227,163,255,183,255,190,255,190,127,188,0,0,0,0,8,48,72,8,48,72
0041E2r 3  00 00 00 00  
0041E6r 3  00 00 00 00  
004204r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,127,188,255,190,255,182,227,163,255,183,255,190,255,190,127,188,0,0,0,0,2,24,112,2,24,112
004208r 3  00 00 00 00  
00420Cr 3  00 00 00 00  
00422Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,127,188,255,190,255,182,227,163,255,183,255,190,255,190,127,188,0,0,0,0,6,96,104,6,96,104
00422Er 3  00 00 00 00  
004232r 3  00 00 00 00  
004250r 3               font:
004250r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004254r 3  00 00 00 00  
004258r 3  38 38 38 38          .byte 56,56,56,56,0,56,56,0
00425Cr 3  00 38 38 00  
004260r 3  77 77 EE 00          .byte 119,119,238,0,0,0,0,0
004264r 3  00 00 00 00  
004268r 3  6C FE 6C FE          .byte 108,254,108,254,254,254,108,0
00426Cr 3  FE FE 6C 00  
004270r 3  18 7E E0 7C          .byte 24,126,224,124,62,254,252,56
004274r 3  3E FE FC 38  
004278r 3  CC DC 38 70          .byte 204,220,56,112,238,238,238,0
00427Cr 3  EE EE EE 00  
004280r 3  78 EC FE 6C          .byte 120,236,254,108,254,254,126,0
004284r 3  FE FE 7E 00  
004288r 3  1C 1C 38 00          .byte 28,28,56,0,0,0,0,0
00428Cr 3  00 00 00 00  
004290r 3  1C 38 38 3C          .byte 28,56,56,60,60,60,28,0
004294r 3  3C 3C 1C 00  
004298r 3  38 1C 1C 3C          .byte 56,28,28,60,60,60,56,0
00429Cr 3  3C 3C 38 00  
0042A0r 3  EE 38 FE 38          .byte 238,56,254,56,254,238,238,0
0042A4r 3  FE EE EE 00  
0042A8r 3  00 38 38 FE          .byte 0,56,56,254,56,56,56,0
0042ACr 3  38 38 38 00  
0042B0r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,112
0042B4r 3  00 38 38 70  
0042B8r 3  00 00 00 7E          .byte 0,0,0,126,126,0,0,0
0042BCr 3  7E 00 00 00  
0042C0r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0042C4r 3  00 38 38 00  
0042C8r 3  00 06 0E 1C          .byte 0,6,14,28,56,112,112,0
0042CCr 3  38 70 70 00  
0042D0r 3  38 6C EE FE          .byte 56,108,238,254,254,124,56,0
0042D4r 3  FE 7C 38 00  
0042D8r 3  78 38 38 38          .byte 120,56,56,56,254,254,254,0
0042DCr 3  FE FE FE 00  
0042E0r 3  FC 0E 7C F0          .byte 252,14,124,240,254,254,254,0
0042E4r 3  FE FE FE 00  
0042E8r 3  FC 0E 3C 0E          .byte 252,14,60,14,254,254,252,0
0042ECr 3  FE FE FC 00  
0042F0r 3  E0 E0 EE FE          .byte 224,224,238,254,254,126,14,0
0042F4r 3  FE 7E 0E 00  
0042F8r 3  FE E0 FC 0E          .byte 254,224,252,14,254,254,252,0
0042FCr 3  FE FE FC 00  
004300r 3  7C E0 FC EE          .byte 124,224,252,238,254,254,124,0
004304r 3  FE FE 7C 00  
004308r 3  FE EE 0E 1C          .byte 254,238,14,28,60,124,124,0
00430Cr 3  3C 7C 7C 00  
004310r 3  7C EE 7C EE          .byte 124,238,124,238,254,254,124,0
004314r 3  FE FE 7C 00  
004318r 3  7C EE 7E 0E          .byte 124,238,126,14,254,254,252,0
00431Cr 3  FE FE FC 00  
004320r 3  00 38 00 00          .byte 0,56,0,0,56,56,56,0
004324r 3  38 38 38 00  
004328r 3  00 38 00 00          .byte 0,56,0,0,56,120,120,112
00432Cr 3  38 78 78 70  
004330r 3  0E 1C 38 78          .byte 14,28,56,120,124,62,31,0
004334r 3  7C 3E 1F 00  
004338r 3  00 7E 00 7E          .byte 0,126,0,126,126,126,0,0
00433Cr 3  7E 7E 00 00  
004340r 3  70 38 1C 1E          .byte 112,56,28,30,62,124,248,0
004344r 3  3E 7C F8 00  
004348r 3  FC 0E 3C 00          .byte 252,14,60,0,56,56,56,0
00434Cr 3  38 38 38 00  
004350r 3  7C EE F6 EE          .byte 124,238,246,238,224,254,254,126
004354r 3  E0 FE FE 7E  
004358r 3  38 7C 6C 7C          .byte 56,124,108,124,238,238,238,0
00435Cr 3  EE EE EE 00  
004360r 3  FC EE FE EC          .byte 252,238,254,236,254,254,252,0
004364r 3  FE FE FC 00  
004368r 3  7C EE E0 EE          .byte 124,238,224,238,254,254,124,0
00436Cr 3  FE FE 7C 00  
004370r 3  F8 FC 76 76          .byte 248,252,118,118,254,252,248,0
004374r 3  FE FC F8 00  
004378r 3  FE F0 7C 70          .byte 254,240,124,112,254,254,254,0
00437Cr 3  FE FE FE 00  
004380r 3  FE F0 7C 70          .byte 254,240,124,112,248,248,248,0
004384r 3  F8 F8 F8 00  
004388r 3  7E E0 EE E6          .byte 126,224,238,230,254,254,126,0
00438Cr 3  FE FE 7E 00  
004390r 3  EE EE FE FE          .byte 238,238,254,254,254,238,238,0
004394r 3  FE EE EE 00  
004398r 3  7C 38 38 38          .byte 124,56,56,56,124,124,124,0
00439Cr 3  7C 7C 7C 00  
0043A0r 3  0E 0E 0E EE          .byte 14,14,14,238,254,254,124,0
0043A4r 3  FE FE 7C 00  
0043A8r 3  EE FC F8 FC          .byte 238,252,248,252,254,254,238,0
0043ACr 3  FE FE EE 00  
0043B0r 3  F8 F0 70 70          .byte 248,240,112,112,254,254,254,0
0043B4r 3  FE FE FE 00  
0043B8r 3  C6 EE FE FE          .byte 198,238,254,254,254,254,238,0
0043BCr 3  FE FE EE 00  
0043C0r 3  CE EE FE FE          .byte 206,238,254,254,254,238,230,0
0043C4r 3  FE EE E6 00  
0043C8r 3  7C EE EE EE          .byte 124,238,238,238,254,254,124,0
0043CCr 3  FE FE 7C 00  
0043D0r 3  FC EE 7C 70          .byte 252,238,124,112,248,248,248,0
0043D4r 3  F8 F8 F8 00  
0043D8r 3  7C FE EE EE          .byte 124,254,238,238,238,252,110,0
0043DCr 3  EE FC 6E 00  
0043E0r 3  FC EE 7E 7C          .byte 252,238,126,124,238,238,238,0
0043E4r 3  EE EE EE 00  
0043E8r 3  7E E0 7C 0E          .byte 126,224,124,14,254,254,252,0
0043ECr 3  FE FE FC 00  
0043F0r 3  FE FE 38 38          .byte 254,254,56,56,124,124,124,0
0043F4r 3  7C 7C 7C 00  
0043F8r 3  EE EE EE EE          .byte 238,238,238,238,254,254,124,0
0043FCr 3  FE FE 7C 00  
004400r 3  EE EE EE EE          .byte 238,238,238,238,254,124,56,0
004404r 3  FE 7C 38 00  
004408r 3  EE EE FE FE          .byte 238,238,254,254,254,254,108,0
00440Cr 3  FE FE 6C 00  
004410r 3  C6 EE 7C 7C          .byte 198,238,124,124,254,238,238,0
004414r 3  FE EE EE 00  
004418r 3  EE EE FE 7C          .byte 238,238,254,124,56,56,56,0
00441Cr 3  38 38 38 00  
004420r 3  7E 0E 1E 3C          .byte 126,14,30,60,126,126,126,0
004424r 3  7E 7E 7E 00  
004428r 3  CD E8 7B 3A          .byte 205,232,123,58,48,125,119,201
00442Cr 3  30 7D 77 C9  
004430r 3  CD E8 7B 7E          .byte 205,232,123,126,50,48,125,201
004434r 3  32 30 7D C9  
004438r 3  06 00 3A 2F          .byte 6,0,58,47,125,79,33,35
00443Cr 3  7D 4F 21 23  
004440r 3  F8 09 C9 FC          .byte 248,9,201,252,48,48,48,0
004444r 3  30 30 30 00  
004448r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00444Cr 3  00 00 00 FF  
004450r 3  3C 70 FC 70          .byte 60,112,252,112,254,254,254,0
004454r 3  FE FE FE 00  
004458r 3  3A 1A 7D 47          .byte 58,26,125,71,42,77,125,17
00445Cr 3  2A 4D 7D 11  
004460r 3  20 00 19 4E          .byte 32,0,25,78,58,27,125,185
004464r 3  3A 1B 7D B9  
004468r 3  20 03 CD 24          .byte 32,3,205,36,124,17,38,0
00446Cr 3  7C 11 26 00  
004470r 3  19 10 F0 C9          .byte 25,16,240,201,229,35,126,31
004474r 3  E5 23 7E 1F  
004478r 3  1F 1F E6 1F          .byte 31,31,230,31,50,49,125,35
00447Cr 3  32 31 7D 23  
004480r 3  7E 1F 1F 1F          .byte 126,31,31,31,230,31,50,50
004484r 3  E6 1F 32 32  
004488r 3  7D CD 55 87          .byte 125,205,85,135,126,87,230,7
00448Cr 3  7E 57 E6 07  
004490r 3  FE 07 20 01          .byte 254,7,32,1,175,60,95,87
004494r 3  AF 3C 5F 57  
004498r 3  E6 F8 C6 48          .byte 230,248,198,72,131,119,35,119
00449Cr 3  83 77 23 77  
0044A0r 3  11 20 00 19          .byte 17,32,0,25,119,43,119,225
0044A4r 3  77 2B 77 E1  
0044A8r 3  C9 60 78 70          .byte 201,96,120,112,112,120,108,0
0044ACr 3  70 78 6C 00  
0044B0r 3  3C 1C 1C 1C          .byte 60,28,28,28,62,62,62,0
0044B4r 3  3E 3E 3E 00  
0044B8r 3  00 6C FE FE          .byte 0,108,254,254,254,254,238,0
0044BCr 3  FE FE EE 00  
0044C0r 3  00 FC FE EE          .byte 0,252,254,238,238,238,238,0
0044C4r 3  EE EE EE 00  
0044C8r 3  00 7C EE EE          .byte 0,124,238,238,254,254,124,0
0044CCr 3  FE FE 7C 00  
0044D0r 3  00 FC EE 7E          .byte 0,252,238,126,126,252,240,240
0044D4r 3  7E FC F0 F0  
0044D8r 3  00 7E EE FC          .byte 0,126,238,252,252,124,30,30
0044DCr 3  FC 7C 1E 1E  
0044E0r 3  00 FC FE 6E          .byte 0,252,254,110,240,240,240,0
0044E4r 3  F0 F0 F0 00  
0044E8r 3  00 7E F0 7C          .byte 0,126,240,124,62,254,252,0
0044ECr 3  3E FE FC 00  
0044F0r 3  70 FC 70 70          .byte 112,252,112,112,126,126,62,0
0044F4r 3  7E 7E 3E 00  
0044F8r 3  00 EE EE EE          .byte 0,238,238,238,254,254,124,0
0044FCr 3  FE FE 7C 00  
004500r 3  00 EE EE EE          .byte 0,238,238,238,254,124,56,0
004504r 3  FE 7C 38 00  
004508r 3  00 EE FE FE          .byte 0,238,254,254,254,254,108,0
00450Cr 3  FE FE 6C 00  
004510r 3  00 EE FE 7C          .byte 0,238,254,124,254,254,238,0
004514r 3  FE FE EE 00  
004518r 3  00 EE EE 7E          .byte 0,238,238,126,14,126,126,124
00451Cr 3  0E 7E 7E 7C  
004520r 3  00 FE 3C 78          .byte 0,254,60,120,254,254,254,0
004524r 3  FE FE FE 00  
004528r 3  0E 1C 1C 7C          .byte 14,28,28,124,30,30,14,0
00452Cr 3  1E 1E 0E 00  
004530r 3  38 38 38 38          .byte 56,56,56,56,56,56,56,0
004534r 3  38 38 38 00  
004538r 3  70 38 38 3E          .byte 112,56,56,62,120,120,112,0
00453Cr 3  78 78 70 00  
004540r 3  00 00 36 7E          .byte 0,0,54,126,108,0,0,0
004544r 3  6C 00 00 00  
004548r 3  3C 66 DB F3          .byte 60,102,219,243,251,219,102,60
00454Cr 3  FB DB 66 3C  
004550r 3               jtab:
004550r 3  63                   .byte 99
004551r 3  65 14 51 10  keys:   .byte 101,20,81,16,52,48,51,112,0,113,1
004555r 3  34 30 33 70  
004559r 3  00 71 01     
00455Cr 3               
00455Cr 2               
00455Cr 1               	.include "lib.inc"
00455Cr 2               ;----------------------------------------------------------------------
00455Cr 2               ; VIC20 Platform Specific functions
00455Cr 2               ;----------------------------------------------------------------------
00455Cr 2               
00455Cr 2               ;============================================================
00455Cr 2               ; PLATFORM VARIABLES
00455Cr 2               ;============================================================
00455Cr 2               ;
00455Cr 2               ; Memory map:
00455Cr 2               ;
00455Cr 2               ;	$0000-$01ff	 0.5kB	CPU WS
00455Cr 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
00455Cr 2               ;	$0400-$0fff	 3,0kB	RAM
00455Cr 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
00455Cr 2               ;	$2000-$7fff	24,0kB	RAM
00455Cr 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
00455Cr 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
00455Cr 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
00455Cr 2               ;	$9800-$9fff	 2,0kB	I/O
00455Cr 2               ;	$a000-$bfff	 8,0kB	RAM
00455Cr 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
00455Cr 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
00455Cr 2               ;
00455Cr 2               ; Keyboard matrix:
00455Cr 2               ;                          	  $9121
00455Cr 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
00455Cr 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
00455Cr 2               ;               ASCII   ??  ??  45  48  56  54  52  50
00455Cr 2               ;                 VIC   07  06  05  04  03  02  01  00
00455Cr 2               ;
00455Cr 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
00455Cr 2               ;               ASCII   ??  ??  64  79  85  84  69  81
00455Cr 2               ;                 VIC   17  16  15  14  13  12  11  10
00455Cr 2               ;
00455Cr 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
00455Cr 2               ;               ASCII   ??  61  58  75  72  70  83  ??
00455Cr 2               ;                 VIC   27  26  25  24  23  22  21  20
00455Cr 2               ;
00455Cr 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
00455Cr 2               ;               ASCII   ??  ??  46  77  66  67  90  32
00455Cr 2               ;                 VIC   37  36  35  34  33  32  31  30
00455Cr 2               ;
00455Cr 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
00455Cr 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
00455Cr 2               ;                 VIC   47  46  45  44  43  42  41  40
00455Cr 2               ;
00455Cr 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
00455Cr 2               ;               ASCII   ??  59  76  74  71  68  65  ??
00455Cr 2               ;                 VIC   57  56  55  54  53  52  51  50
00455Cr 2               ;
00455Cr 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
00455Cr 2               ;               ASCII   13  42  80  73  89  82  87
00455Cr 2               ;                 VIC   67  66  65  64  63  62  61  60
00455Cr 2               ;
00455Cr 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
00455Cr 2               ;               ASCII   08  ??  43  57  55  53  51  49
00455Cr 2               ;                 VIC   77  76  75  74  73  72  71  70
00455Cr 2               ;
00455Cr 2               ;	 P =$65,O=$14,A=$51,Q=$10
00455Cr 2               ;	SPC=$30,N=$44,M=$34
00455Cr 2               ;	 1 =$70,2=$00,3=$71,4=$01
00455Cr 2               ;
00455Cr 2               ; Joysticks:
00455Cr 2               ;
00455Cr 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
00455Cr 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
00455Cr 2               ;	$9120	Right -     -     -     -     -     -     -
00455Cr 2               ;
00455Cr 2               ;	$9122	DDRB = Data Direction Register port $9120
00455Cr 2               ;               0 = input, 1 = output
00455Cr 2               ;		Bit7 should be 0 to read joystick $9120
00455Cr 2               ;
00455Cr 2               ; Video registers:
00455Cr 2               ;
00455Cr 2               ;	$9000	horizontal centering
00455Cr 2               ;		bits 0-6 horizontal centering
00455Cr 2               ;		bit  7 sets interlace scan
00455Cr 2               ;	$9001	vertical centering
00455Cr 2               ;	$9002	set # of columns
00455Cr 2               ;		bits 0-6 set # of columns
00455Cr 2               ;		bit 7 is part of video matrix address
00455Cr 2               ;	$9003	set # of rows
00455Cr 2               ;		bit 0 sets 8x8 or 16x8 chars
00455Cr 2               ;		bits 1-6 set # of rows
00455Cr 2               ;	$9005	start of character memory
00455Cr 2               ;		bits 0-3 start of character memory (default = 0)
00455Cr 2               ;		bits 4-7 is rest of video address (default= F)
00455Cr 2               ;		BITS 3,2,1,0 CM startinq address
00455Cr 2               ;			     HEX   DEC
00455Cr 2               ;		0000   ROM   8000  32768
00455Cr 2               ;		0001	     8400  33792
00455Cr 2               ;		0010	     8800  34816
00455Cr 2               ;		0011	     8C00  35840
00455Cr 2               ;		1000   RAM   0000  0000
00455Cr 2               ;		1001  xxxx
00455Cr 2               ;		1010  xxxx   unavail.
00455Cr 2               ;		1011  xxxx
00455Cr 2               ;		1100	     1000  4096
00455Cr 2               ;		1101	     1400  5120
00455Cr 2               ;		1110	     1800  6144
00455Cr 2               ;		1111	     1C00  7168
00455Cr 2               ;	$900f	Screen and border color register
00455Cr 2               ;		bits 4-7 select background color
00455Cr 2               ;		bits 0-2 select border color
00455Cr 2               ;		bit 3 selects inverted or normal mode
00455Cr 2               ;
00455Cr 2               
00455Cr 2               ; VIC constants
00455Cr 2               
00455Cr 2               	scrchar 	= 22			; char/line
00455Cr 2               	scrline		= 22			; lines/screen
00455Cr 2               	ScreenSize	= scrchar*scrline * 8	; Screen size bytes
00455Cr 2               	ScreenRowBytes	= scrchar * 16		; bytes/line
00455Cr 2               	SpriteMaxY	= 161			; maxlines - 16 + 1
00455Cr 2               
00455Cr 2               ; VIC variables:
00455Cr 2               
00455Cr 2  00           	fontcol:	.byte 0		; Frontcolour text
00455Dr 2               
00455Dr 2               ; Addresses
00455Dr 2               
00455Dr 2               	MapAddr		= $400		; RAM
00455Dr 2               	ScreenAddr	= $0200		; VIDEO RAM
00455Dr 2               	CharAddress	= $1000		; CHAR RAM
00455Dr 2               	Reg0		= $9000		; Horizontal centering
00455Dr 2               	Reg1		= $9001		; Vertical centering
00455Dr 2               	Reg2		= $9002		; Set # of columns
00455Dr 2               	Reg3		= $9003		; Set # of rows
00455Dr 2               	Reg4		= $9004		; Vsync signal
00455Dr 2               	Reg5		= $9005		; Start of character memory
00455Dr 2               	RegF		= $900f		; Screen and border color register
00455Dr 2               	JoyAddr1	= $9111		; Joystick address 1
00455Dr 2               	KeyColAddr	= $9120		; Keyboard column (write)
00455Dr 2               	JoyAddr2	= $9120		; Joystick address 2
00455Dr 2               	KeyRowAddr	= $9121		; Keyboard row (read)
00455Dr 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
00455Dr 2               	Timer1_Low  	= $9114		; Timer 1 low byte
00455Dr 2               	Timer1_High 	= $9115		; Timer 1 high byte
00455Dr 2               	Timer2_Low  	= $9118		; Timer 2 low byte
00455Dr 2               	Timer2_High 	= $9119		; Timer 2 high byte
00455Dr 2               	AUX		= $911b		; Auxiliary control register
00455Dr 2               	IFR		= $911d		; Interrupt Flag Register
00455Dr 2               	IER		= $911e		; Interrupt Enable Register
00455Dr 2               	ColorAttr	= $9600		; Color attributes
00455Dr 2               
00455Dr 2               ;----------------------------------------------------------------------
00455Dr 2               ; VIC20 video hardware fns
00455Dr 2               ;----------------------------------------------------------------------
00455Dr 2               
00455Dr 2               init:
00455Dr 2               
00455Dr 2               ; Disable interrupts
00455Dr 2               
00455Dr 2  A9 7F        	lda #$7f
00455Fr 2  8D 1E 91     	sta $911e
004562r 2  8D 2D 91     	sta $912d
004565r 2  8D 2E 91     	sta $912e
004568r 2               
004568r 2               ; Set audio volume to max
004568r 2  A9 0F        	lda #$0f
00456Ar 2  8D 0E 90     	sta $900e
00456Dr 2               
00456Dr 2               ; Init screen for NTSC
00456Dr 2               ; this sets the background and border color of the screen
00456Dr 2               ; in this case border black and background black
00456Dr 2               
00456Dr 2  A9 18        	lda #%00011000
00456Fr 2  8D 0F 90     	sta RegF
004572r 2               
004572r 2               ; Reset fontcolor
004572r 2  A9 00        	lda #0		; Black
004574r 2  8D rr rr     	sta fontcol
004577r 2               
004577r 2               
004577r 2               ; max num of columns 24
004577r 2               
004577r 2  AD 02 90     	lda Reg2
00457Ar 2  29 80        	and #%10000000
00457Cr 2  09 16        	ora #ScrWidth
00457Er 2  8D 02 90     	sta Reg2
004581r 2               
004581r 2               ; max num of lines (mult by 2 - 24) for 8x8 chars
004581r 2               ; no multiply for 8x16 chars
004581r 2               
004581r 2  AD 03 90     	lda Reg3
004584r 2  29 81        	and #%10000001
004586r 2  09 16        	ora #ScrWidth		; number of rows multipled by two
004588r 2  8D 03 90     	sta Reg3
00458Br 2               
00458Br 2               ; horizontal and vertical position must be set for
00458Br 2               ; non standard screen resolution (standard 22x23)
00458Br 2               ; same games even allow the user to change them
00458Br 2               ; these values are for PAL for NTSC should be different
00458Br 2               ; move horizontal position in the screen
00458Br 2               
00458Br 2  AD 00 90     	lda Reg0
00458Er 2  29 80        	and #%10000000
004590r 2  09 04        	ora #CentreX
004592r 2  8D 00 90     	sta Reg0
004595r 2               
004595r 2               ; move vertical position in the screen
004595r 2               
004595r 2  A9 1B        	lda #CentreY
004597r 2  8D 01 90     	sta Reg1
00459Ar 2               
00459Ar 2               ; Set screem memory to $200
00459Ar 2               ; bit 7 on $9002 has to be set
00459Ar 2               
00459Ar 2  AD 02 90     	lda Reg2
00459Dr 2  09 80        	ora #%10000000
00459Fr 2  8D 02 90     	sta Reg2
0045A2r 2               
0045A2r 2               ; Set character data pointer to CHAR RAM at $1000
0045A2r 2               ; bit 7 on $9005 has always to be set
0045A2r 2               ; (based on compute - mapping the vic book)
0045A2r 2               ; color ram goes to 9600
0045A2r 2               
0045A2r 2  AD 05 90     	lda Reg5
0045A5r 2  29 0C        	and #%00001100
0045A7r 2  09 8C        	ora #%10001100
0045A9r 2  8D 05 90     	sta Reg5
0045ACr 2               
0045ACr 2               ; This set the char size to 8x16
0045ACr 2               
0045ACr 2  AD 03 90     	lda Reg3
0045AFr 2  09 01        	ora #%00000001
0045B1r 2  8D 03 90     	sta Reg3
0045B4r 2               
0045B4r 2               ; Init screencharacters
0045B4r 2               ; Fill screen with characters from left to right, up to down
0045B4r 2               
0045B4r 2  A2 00        	ldx #0
0045B6r 2  A0 00        	ldy #0
0045B8r 2               scrinit:
0045B8r 2  8A           	txa
0045B9r 2  9D 00 02     	sta ScreenAddr,x
0045BCr 2  98           	tya
0045BDr 2  9D 00 96     	sta ColorAttr,x
0045C0r 2  E8           	inx
0045C1r 2  E0 F2        	cpx#242
0045C3r 2  D0 F3        	bne scrinit
0045C5r 2               
0045C5r 2               
0045C5r 2               ; Reset fontcolor
0045C5r 2               
0045C5r 2  A9 00        	lda #0			; Black
0045C7r 2  8D rr rr     	sta fontcol
0045CAr 2               
0045CAr 2               ; Init VIA timer for timeout 1/25 sec
0045CAr 2               
0045CAr 2  A9 E0        	lda #$e0		; T1 continuous
0045CCr 2  8D 1B 91     	sta AUX
0045CFr 2  A9 7F        	lda #$7f		; No int
0045D1r 2  8D 1E 91     	sta IER
0045D4r 2  A9 00        	lda #0
0045D6r 2  8D 1D 91     	sta IFR			; Clear interrupt flags
0045D9r 2  A9 A8        	lda #<timervalue	; Timer 1/25 sec
0045DBr 2  8D 14 91     	sta Timer1_Low
0045DEr 2  A9 61        	lda #>timervalue
0045E0r 2  8D 15 91     	sta Timer1_High
0045E3r 2               
0045E3r 2  60           	rts
0045E4r 2               
0045E4r 2               ;========================================================
0045E4r 2               ; KEY AND JOYSTICK ROUTINES
0045E4r 2               ;--------------------------------------------------------
0045E4r 2               ; Keys
0045E4r 2               ;
0045E4r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
0045E4r 2               ;             ||||||||
0045E4r 2               ;             |||||||+> Right    KEY 0  - X
0045E4r 2               ;             ||||||+-> Left     KEY 1  - Z
0045E4r 2               ;             |||||+--> Down     KEY 2  - .
0045E4r 2               ;             ||||+---> Up       KEY 3  - ;
0045E4r 2               ;             |||+----> Fire1    KEY 4  - SPC
0045E4r 2               ;             ||+-----> Fire2    KEY 5  - Q
0045E4r 2               ;             |+------> Fire3    KEY 6  - P
0045E4r 2               ;             +-------> Not used
0045E4r 2               ;
0045E4r 2               ;                       Option1  KEY 7  - 1
0045E4r 2               ;                       Option2  KEY 8  - 2
0045E4r 2               ;                       Option3  KEY 9  - 3
0045E4r 2               ;                       Option4  KEY 10 - 4
0045E4r 2               ;--------------------------------------------------------
0045E4r 2               
0045E4r 2               ;--------------------------------------------------------
0045E4r 2               ; PRSKEY
0045E4r 2               ;
0045E4r 2               ; Wait for keypress.
0045E4r 2               ;--------------------------------------------------------
0045E4r 2               
0045E4r 2               prskey:
0045E4r 2  98           	tya
0045E5r 2  48           	pha
0045E6r 2               prsloop:
0045E6r 2  20 rr rr     	jsr vsync
0045E9r 2  20 rr rr     	jsr readkey
0045ECr 2  C0 FF        	cpy #255
0045EEr 2  F0 F6        	beq prsloop		; wait until key pressed
0045F0r 2               
0045F0r 2               prsrelease:
0045F0r 2  20 rr rr     	jsr vsync
0045F3r 2  20 rr rr     	jsr readkey
0045F6r 2  C0 FF        	cpy #255
0045F8r 2  D0 F6        	bne prsrelease		; wait until key released
0045FAr 2               
0045FAr 2  20 rr rr     	jsr joykey
0045FDr 2               
0045FDr 2  68           	pla
0045FEr 2  A8           	tay
0045FFr 2  60           	rts
004600r 2               
004600r 2               ;--------------------------------------------------------
004600r 2               ; KTEST
004600r 2               ;
004600r 2               ; Keyboard test routine with key in A.
004600r 2               ; Scan key and clear carry if key pressed
004600r 2               ;--------------------------------------------------------
004600r 2               
004600r 2               ktest:
004600r 2  85 rr        	sta z80_a		; save key
004602r 2               
004602r 2  4A           	lsr a
004603r 2  4A           	lsr a
004604r 2  4A           	lsr a
004605r 2  4A           	lsr a
004606r 2  AA           	tax
004607r 2  BD rr rr     	lda colmask,x
00460Ar 2  8D 20 91     	sta KeyColAddr		; set row
00460Dr 2               
00460Dr 2  A5 rr        	lda z80_a
00460Fr 2  29 0F        	and #$0f
004611r 2  AA           	tax			; get column
004612r 2               
004612r 2  AD 21 91     	lda KeyRowAddr		; read column
004615r 2  3D rr rr     	and keymask,x		; check if key pressed
004618r 2  F0 02        	beq pressed		; Skip if pressed
00461Ar 2  38           	sec			; key not pressed
00461Br 2  60           	rts
00461Cr 2               pressed:
00461Cr 2  18           	clc			; key pressed
00461Dr 2  60           	rts
00461Er 2               
00461Er 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
004622r 2  F7 FB FD FE  
004626r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
00462Ar 2  10 20 40 80  
00462Er 2               
00462Er 2               ;---------------------------------------------------------------
00462Er 2               ; KGET
00462Er 2               ;
00462Er 2               ; Read keyboard matrix if a key is pressed.
00462Er 2               ; Return A = high nibble=row and low nibble=col
00462Er 2               ;---------------------------------------------------------------
00462Er 2               
00462Er 2               kget:
00462Er 2  86 rr        	stx xtmp		; Save x-reg
004630r 2               kget0:
004630r 2  A2 00        	ldx #0			; reset row
004632r 2               kget1:
004632r 2  BD rr rr     	lda colmask,x		; Get mask
004635r 2  8D 20 91     	sta KeyColAddr		; Set row
004638r 2  AD 21 91     	lda KeyRowAddr		; Read columns
00463Br 2  85 rr        	sta tmp			; Save colums
00463Dr 2  C9 FF        	cmp #$ff		; Key pressed?
00463Fr 2  D0 08        	bne kget2		; Yes, skip
004641r 2  E8           	inx			; Next row
004642r 2  E0 08        	cpx #8			; All rows scanned?
004644r 2  D0 EC        	bne kget1		; No, repeat
004646r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
004649r 2               kget2:
004649r 2  A0 00        	ldy #0			; Reset column
00464Br 2               kget3:
00464Br 2  46 rr        	lsr tmp			; Test bit
00464Dr 2  90 04        	bcc kget4		; If clear, key pressed
00464Fr 2  C8           	iny			; Next column
004650r 2  4C rr rr     	jmp kget3		; Repeat
004653r 2               kget4:
004653r 2  86 rr        	stx tmp			; Get row
004655r 2  06 rr        	asl tmp			; Make high nibble
004657r 2  06 rr        	asl tmp
004659r 2  06 rr        	asl tmp
00465Br 2  06 rr        	asl tmp
00465Dr 2  98           	tya			; Get column
00465Er 2  18           	clc
00465Fr 2  65 rr        	adc tmp			; Add row as low nibble
004661r 2  85 rr        	sta tmp
004663r 2               kget5:
004663r 2  AD 21 91     	lda KeyRowAddr		; Read columns
004666r 2  C9 FF        	cmp #$ff
004668r 2  D0 F9        	bne kget5
00466Ar 2               
00466Ar 2  A5 rr        	lda tmp			; Return keycode
00466Cr 2  A6 rr        	ldx xtmp		; Restore X-reg
00466Er 2  60           	rts			; Return
00466Fr 2               
00466Fr 2               ;-------------------------------------------------------------
00466Fr 2               ; READKEY
00466Fr 2               ;
00466Fr 2               ; Check keyboard matrix if a key is pressed
00466Fr 2               ; Return keymask in Y
00466Fr 2               ;-------------------------------------------------------------
00466Fr 2               
00466Fr 2               readkey:
00466Fr 2  A9 FF        	lda #$ff		; Keymask
004671r 2  85 rr        	sta tmp
004673r 2  A2 07        	ldx #7
004675r 2               scanrow:
004675r 2  BD rr rr     	lda colmask,x
004678r 2  8D 20 91     	sta KeyColAddr		; set row
00467Br 2  AD 21 91     	lda KeyRowAddr		; read column
00467Er 2  25 rr        	and tmp			; Reset bit is key pressed
004680r 2  85 rr        	sta tmp
004682r 2  CA           	dex
004683r 2  10 F0        	bpl scanrow
004685r 2  A5 rr        	lda tmp
004687r 2  A8           	tay
004688r 2  60           	rts
004689r 2               
004689r 2               ;-------------------------------------------------------------
004689r 2               ; JOY1SCAN
004689r 2               ;
004689r 2               ; Initializes joystick
004689r 2               ;-------------------------------------------------------------
004689r 2               
004689r 2               joyinit:
004689r 2  60           	rts
00468Ar 2               
00468Ar 2               ;-------------------------------------------------------------
00468Ar 2               ; JOY1SCAN
00468Ar 2               ;
00468Ar 2               ; Scan joystick1 and return key in z80_e
00468Ar 2               ; Up, down, left, right and fire are read from the joystick
00468Ar 2               ; Fire2 and fire3 are read from the keyboard
00468Ar 2               ;-------------------------------------------------------------
00468Ar 2               
00468Ar 2               joy1scan:
00468Ar 2  A9 FF        	lda #$ff
00468Cr 2  85 rr        	sta z80_e
00468Er 2               
00468Er 2  AD 11 91     	lda JoyAddr1		; Read joystick input
004691r 2  4A           	lsr a
004692r 2  4A           	lsr a
004693r 2               
004693r 2  4A           	lsr a
004694r 2  26 rr        	rol z80_e		; Up
004696r 2  4A           	lsr a
004697r 2  26 rr        	rol z80_e		; Down
004699r 2  4A           	lsr a
00469Ar 2  26 rr        	rol z80_e		; Left
00469Cr 2               
00469Cr 2  A9 7F        	lda #%01111111
00469Er 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
0046A1r 2  AD 20 91     	lda JoyAddr2
0046A4r 2  0A           	asl a
0046A5r 2  26 rr        	rol z80_e		; Right
0046A7r 2  A9 FF        	lda #%11111111
0046A9r 2  8D 22 91     	sta DDRB		; Reset
0046ACr 2               
0046ACr 2  AD 11 91     	lda JoyAddr1
0046AFr 2  29 20        	and #%00100000
0046B1r 2  D0 06        	bne :+
0046B3r 2  A5 rr        	lda z80_e
0046B5r 2  29 EF        	and #%11101111		; Fire
0046B7r 2  85 rr        	sta z80_e
0046B9r 2               :
0046B9r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
0046BCr 2  20 rr rr     	jsr ktest
0046BFr 2  B0 06        	bcs :+
0046C1r 2  A5 rr        	lda z80_e
0046C3r 2  29 BF        	and #%10111111
0046C5r 2  85 rr        	sta z80_e
0046C7r 2               :
0046C7r 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
0046CAr 2  20 rr rr     	jsr ktest
0046CDr 2  B0 06        	bcs :+
0046CFr 2  A5 rr        	lda z80_e
0046D1r 2  29 DF        	and #%11011111
0046D3r 2  85 rr        	sta z80_e
0046D5r 2               :
0046D5r 2  60           	rts
0046D6r 2               
0046D6r 2               ;-------------------------------------------------------------
0046D6r 2               ; JOY2SCAN
0046D6r 2               ;
0046D6r 2               ; TODO, Scan joystick2 and return key in z80_e
0046D6r 2               ;-------------------------------------------------------------
0046D6r 2               
0046D6r 2               joy2scan:
0046D6r 2  60           	rts
0046D7r 2               
0046D7r 2               
0046D7r 2               
0046D7r 2               ;========================================================
0046D7r 2               ; HARDWARE DEPENDING ROUTINES
0046D7r 2               ;========================================================
0046D7r 2               
0046D7r 2               ;----------------------------------------------------
0046D7r 2               ; DELAY
0046D7r 2               ;
0046D7r 2               ; Delay routine A * 1/50 sec
0046D7r 2               ;----------------------------------------------------
0046D7r 2               
0046D7r 2               delay:
0046D7r 2  85 rr        	sta xtmp		; set delaycounter
0046D9r 2               del_loop:
0046D9r 2  AD 04 90     	lda Reg4
0046DCr 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
0046DEr 2               
0046DEr 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0046E0r 2               delay1:
0046E0r 2  61 80        	adc ($80,x)		;	 6 usec
0046E2r 2  61 80        	adc ($80,x)		;	 6 usec
0046E4r 2  88           	dey			;	 2 usec
0046E5r 2  D0 F9        	bne delay1		;	 2 usec
0046E7r 2  EA           	nop			; 2 usec
0046E8r 2  EA           	nop			; 2 usec
0046E9r 2               				; tot: 20000 usec
0046E9r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
0046EBr 2  D0 EC        	bne del_loop
0046EDr 2  60           	rts
0046EEr 2               
0046EEr 2               ;-------------------------------------------------------------
0046EEr 2               ; VSYNC
0046EEr 2               ;
0046EEr 2               ; - read joystick/keyboard
0046EEr 2               ; - sync framerate with timer 25Hz
0046EEr 2               ; - handle shrapnel every even frame
0046EEr 2               ; - handle sound
0046EEr 2               ;-------------------------------------------------------------
0046EEr 2               
0046EEr 2               vsync:
0046EEr 2  48           	pha			; save registers
0046EFr 2  98           	tya
0046F0r 2  48           	pha
0046F1r 2  8A           	txa
0046F2r 2  48           	pha
0046F3r 2               
0046F3r 2               ; Read joystick/keyboard.
0046F3r 2               
0046F3r 2  20 rr rr     	jsr joykey
0046F6r 2               
0046F6r 2               ; Sync framerate with timer 25Hz
0046F6r 2               
0046F6r 2  A9 40        	lda #$40		; set Timer1 expired bit
0046F8r 2               vsync1:
0046F8r 2  2C 1D 91     	bit IFR			; check Interrupt Flag Register
0046FBr 2  F0 FB        	beq vsync1		; wait if timer not expired
0046FDr 2  AD 14 91     	lda Timer1_Low		; clear Timer interrupt
004700r 2               
004700r 2               ; Handle shrapnel every even frame
004700r 2               
004700r 2  A5 rr        	lda clock		; get clock
004702r 2  29 01        	and #1			; 2 frames expired
004704r 2  D0 03        	bne:+
004706r 2  20 rr rr     	jsr proshr		; process shrapnel
004709r 2               :
004709r 2               
004709r 2               ; Handle sound
004709r 2               
004709r 2  AD rr rr     	lda sndtyp
00470Cr 2  F0 18        	beq sndskip
00470Er 2               sndloop:
00470Er 2  AC rr rr         ldy sndtyp
004711r 2               sndwait:
004711r 2  88               dey
004712r 2  D0 FD            bne sndwait
004714r 2               
004714r 2                   ; enable sound on channel 2
004714r 2                   ; add 128 because sound is in range 128-255
004714r 2  A9 FF            lda #$ff
004716r 2  38               sec
004717r 2  ED rr rr         sbc sndtyp
00471Ar 2  4A           	lsr a
00471Br 2  18               clc
00471Cr 2  69 80            adc #$80
00471Er 2  8D 0C 90         sta $900c
004721r 2               
004721r 2  CE rr rr         dec sndtyp
004724r 2  D0 E8            bne sndloop
004726r 2               sndskip:
004726r 2                   ; disable sound
004726r 2  A9 00            lda #$00
004728r 2  8D 0C 90         sta $900c
00472Br 2               
00472Br 2  68           	pla			; Restore registers
00472Cr 2  AA           	tax
00472Dr 2  68           	pla
00472Er 2  A8           	tay
00472Fr 2  68           	pla
004730r 2  60           	rts
004731r 2               
004731r 2  00           sndtyp:		.byte 0		; Beep sound parameter
004732r 2               
004732r 2               
004732r 2               
004732r 2               
004732r 2               
004732r 2               
004732r 2               ;========================================================
004732r 2               ; SPRITE HANDLING ROUTINES
004732r 2               ;========================================================
004732r 2               
004732r 2               ;----------------------------------------------------
004732r 2               ; SPRITE
004732r 2               ;
004732r 2               ; Draw object sprite
004732r 2               ;----------------------------------------------------
004732r 2               
004732r 2               .if oflag
004732r 2               sprite:
004732r 2  86 rr        	stx xtmp		; Save X-reg
004734r 2  20 rr rr     	jsr scadd 		; get screen address in scraddr.
004737r 2               
004737r 2  A5 rr        	lda dispx 		; x position.
004739r 2  29 07        	and #7 			; position straddling cells.
00473Br 2  85 rr        	sta z80_b		; store in b register.
00473Dr 2               
00473Dr 2  A5 rr        	lda z80_l		; store sprite graphic address.
00473Fr 2  8D rr rr     	sta sprit1+1
004742r 2  8D rr rr     	sta sprit2+1
004745r 2  A5 rr        	lda z80_h
004747r 2  8D rr rr     	sta sprit1+2
00474Ar 2  8D rr rr     	sta sprit2+2
00474Dr 2               
00474Dr 2  A2 00        	ldx #0			; pixel height.
00474Fr 2  A0 00        	ldy #0
004751r 2               sprit1:
004751r 2  BD rr rr     	lda objdta,x		; fetch first byte.
004754r 2  85 rr        	sta spr
004756r 2  E8           	inx
004757r 2               sprit2:
004757r 2  BD rr rr     	lda objdta,x
00475Ar 2  85 rr        	sta spr+1
00475Cr 2               
00475Cr 2  A9 00        	lda #0
00475Er 2  85 rr        	sta spr+2
004760r 2  20 rr rr     	jsr sprit7		; shift sprite
004763r 2               
004763r 2  A5 rr        	lda spr			; fetch graphic.
004765r 2  A0 00        	ldy #0			; _BEEB
004767r 2  51 rr        	eor (scraddr),y		; merge with screen image.
004769r 2  91 rr        	sta (scraddr),y		; write to screen.
00476Br 2               
00476Br 2  A5 rr        	lda spr+1		; fetch graphic.
00476Dr 2  A0 10        	ldy #16			; _BEEB
00476Fr 2  51 rr        	eor (scraddr),y		; merge with screen image.
004771r 2  91 rr        	sta (scraddr),y		; write to screen.
004773r 2               
004773r 2  A5 rr        	lda spr+2		; fetch graphic.
004775r 2  A0 20        	ldy #32			; _BEEB
004777r 2  51 rr        	eor (scraddr),y		; merge with screen image.
004779r 2  91 rr        	sta (scraddr),y		; write to screen.
00477Br 2               
00477Br 2  20 rr rr     	jsr nline
00477Er 2               
00477Er 2  E8           	inx			; next source byte.
00477Fr 2  E0 20        	cpx #32
004781r 2  D0 CE        	bne sprit1		; repeat
004783r 2               
004783r 2  A6 rr        	ldx xtmp		; retreive X-reg
004785r 2  60           	rts
004786r 2               
004786r 2               .endif
004786r 2               
004786r 2               ;------------------------------------------------------------------
004786r 2               ; SCADD
004786r 2               ;
004786r 2               ; This routine returns a screen address for X,Y in scraddr.
004786r 2               ;------------------------------------------------------------------
004786r 2               
004786r 2               scadd:
004786r 2  A5 rr        	lda dispx		; get x
004788r 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
00478Ar 2  85 rr        	sta scraddr		; set lb scraddr
00478Cr 2  A9 00        	lda #0
00478Er 2  85 rr        	sta scraddr+1		; set hb scraddr
004790r 2  06 rr        	asl scraddr		; multiply X by 2
004792r 2  26 rr        	rol scraddr+1
004794r 2               
004794r 2               ; Add line address Y pos to X
004794r 2               
004794r 2  A6 rr        	ldx dispy		; get row address Y pos
004796r 2  18           	clc
004797r 2  A5 rr        	lda scraddr
004799r 2  7D 00 07     	adc SCADTB_lb,x
00479Cr 2  85 rr        	sta scraddr
00479Er 2  A5 rr        	lda scraddr+1
0047A0r 2  7D 00 08     	adc SCADTB_hb,x
0047A3r 2  85 rr        	sta scraddr+1
0047A5r 2               
0047A5r 2  60           	rts
0047A6r 2               
0047A6r 2               ;------------------------------------------------------------------
0047A6r 2               ; SSPRIA
0047A6r 2               ;
0047A6r 2               ; Erase single sprite, old (ix+0).
0047A6r 2               ;------------------------------------------------------------------
0047A6r 2               
0047A6r 2               sspria:
0047A6r 2  20 rr rr     	jsr gsprad		; get old sprite address.
0047A9r 2               sspri2:
0047A9r 2               .if rflag
0047A9r 2               	lda z80_e		; 3c
0047A9r 2               	sta dline_spraddr1+1	; 4c
0047A9r 2               	sta dline_spraddr2+1	; 4c
0047A9r 2               	lda z80_d		; 3c
0047A9r 2               	sta dline_spraddr1+2	; 4c
0047A9r 2               	sta dline_spraddr2+2	; 4c
0047A9r 2               
0047A9r 2               	ldx sprshft
0047A9r 2               	lda shift_table,x
0047A9r 2               	sta dline_shift1+1
0047A9r 2               	sta dline_shift2+1
0047A9r 2               	lda shift_table+1,x
0047A9r 2               	sta dline_shift1+2
0047A9r 2               	sta dline_shift2+2
0047A9r 2               
0047A9r 2               	ldx #0			; byte counter.
0047A9r 2               sspri0:
0047A9r 2               	jsr dline		; draw a line.
0047A9r 2                 .if bflag
0047A9r 2               	cpx #48			; big sprites have 24 bytes
0047A9r 2                 .else
0047A9r 2               	cpx #32			; normal sprites have 32 bytes
0047A9r 2                 .endif
0047A9r 2               	bne sspri0		; repeat 16 times x 2 bytes
0047A9r 2               	rts
0047A9r 2               .else
0047A9r 2                 .if bflag
0047A9r 2               	lda #24			; big sprites have 24 lines
0047A9r 2                 .else
0047A9r 2  A9 10        	lda #16			; normal sprites have 16 lines.
0047ABr 2                 .endif
0047ABr 2  8D rr rr     	sta acnt
0047AEr 2               sspri0:
0047AEr 2  20 rr rr     	jsr dline		; draw a line.
0047B1r 2  CE rr rr     	dec acnt
0047B4r 2  D0 F8        	bne sspri0		; repeat 16 times
0047B6r 2  60           	rts
0047B7r 2               
0047B7r 2  00           acnt:	.byte 0			; line counter
0047B8r 2               
0047B8r 2               .endif
0047B8r 2               
0047B8r 2               ;------------------------------------------------------------------
0047B8r 2               ; SSPRIB
0047B8r 2               ;
0047B8r 2               ; Display single sprite, new (ix+5).
0047B8r 2               ;------------------------------------------------------------------
0047B8r 2               
0047B8r 2               ssprib:
0047B8r 2  20 rr rr     	jsr gspran 		; get new sprite address.
0047BBr 2  4C rr rr     	jmp sspri2		; Display sprite
0047BEr 2               
0047BEr 2               ;------------------------------------------------------------------
0047BEr 2               ; SSPRIC
0047BEr 2               ;
0047BEr 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
0047BEr 2               ;------------------------------------------------------------------
0047BEr 2               
0047BEr 2               sspric:
0047BEr 2               .if rflag
0047BEr 2               	jsr gsprad 		; get old sprite address.
0047BEr 2               
0047BEr 2               	lda z80_e		; 3c
0047BEr 2               	sta ddline_spraddr3+1	; 4c
0047BEr 2               	sta ddline_spraddr4+1	; 4c
0047BEr 2               
0047BEr 2               	lda z80_d		; 3c
0047BEr 2               	sta ddline_spraddr3+2	; 4c
0047BEr 2               	sta ddline_spraddr4+2	; 4c
0047BEr 2               
0047BEr 2               	ldx sprshft		; set spriteshift table addresses
0047BEr 2               	lda shift_table,x
0047BEr 2               	sta ddline_shift3+1
0047BEr 2               	sta ddline_shift4+1
0047BEr 2               	lda shift_table+1,x
0047BEr 2               	sta ddline_shift3+2
0047BEr 2               	sta ddline_shift4+2
0047BEr 2               
0047BEr 2               	jsr exx  		; store addresses.
0047BEr 2               	jsr gspran 		; get new sprite addresses.
0047BEr 2               
0047BEr 2               	lda z80_e		; 3c
0047BEr 2               	sta ddline_spraddr1+1	; 4c
0047BEr 2               	sta ddline_spraddr2+1	; 4c
0047BEr 2               
0047BEr 2               	lda z80_d		; 3c
0047BEr 2               	sta ddline_spraddr1+2	; 4c
0047BEr 2               	sta ddline_spraddr2+2	; 4c
0047BEr 2               
0047BEr 2               	ldx sprshft
0047BEr 2               	lda shift_table,x
0047BEr 2               	sta ddline_shift1+1
0047BEr 2               	sta ddline_shift2+1
0047BEr 2               	lda shift_table+1,x
0047BEr 2               	sta ddline_shift1+2
0047BEr 2               	sta ddline_shift2+2
0047BEr 2               
0047BEr 2               	ldx #0
0047BEr 2               lloop:
0047BEr 2               	jsr ddline 		; draw a line.
0047BEr 2                 .if bflag
0047BEr 2               	cpx #48
0047BEr 2                 .else
0047BEr 2               	cpx #32
0047BEr 2                 .endif
0047BEr 2               	bne lloop
0047BEr 2               	rts
0047BEr 2               
0047BEr 2               shift_table:
0047BEr 2               	.word shift0
0047BEr 2               	.word shift2
0047BEr 2               	.word shift4
0047BEr 2               	.word shift6
0047BEr 2               
0047BEr 2               ;------------------------------------------------------------------
0047BEr 2               ; DLINE
0047BEr 2               ;
0047BEr 2               ; Draw a sprite line, now work out next target address.
0047BEr 2               ;
0047BEr 2               ; Input:
0047BEr 2               ;  B  = right mask
0047BEr 2               ;  C  = left mask
0047BEr 2               ;  DE = spriteaddress
0047BEr 2               ;  scraddr = screen address
0047BEr 2               ;------------------------------------------------------------------
0047BEr 2               
0047BEr 2               dline:
0047BEr 2               
0047BEr 2               dline_spraddr1:
0047BEr 2               	ldy $ffff,x 		; get graphic data as pointer.
0047BEr 2               dline_shift1:
0047BEr 2               	lda $ffff,y		; get pre-shifted data
0047BEr 2               	sta sprtmp		; save byte
0047BEr 2               	and z80_c 		; mask right for left byte
0047BEr 2               
0047BEr 2               	ldy #0
0047BEr 2               	eor (scraddr),y 	; XOR with what's there.
0047BEr 2               	sta (scraddr),y 	; display left byte
0047BEr 2               
0047BEr 2               ; carry to next screen byte
0047BEr 2               
0047BEr 2               	lda sprtmp		; fetch data.
0047BEr 2               	and z80_b 		; mask for left part
0047BEr 2               	sta sprtmp
0047BEr 2               
0047BEr 2               ; middle screen byte
0047BEr 2               
0047BEr 2               	inx
0047BEr 2               dline_spraddr2:
0047BEr 2               	ldy $ffff,x 		; second bit of data.
0047BEr 2               dline_shift2:
0047BEr 2               	lda $ffff,y
0047BEr 2               	sta sprtmp2
0047BEr 2               	and z80_c 		; mask away what's not needed.
0047BEr 2               	ora sprtmp
0047BEr 2               	ldy #16
0047BEr 2               	eor (scraddr),y 	; XOR with what's there.
0047BEr 2               	sta (scraddr),y 	; display middle bye.
0047BEr 2               
0047BEr 2               ; carry to last screen byte
0047BEr 2               
0047BEr 2               	lda sprtmp2
0047BEr 2               	and z80_b 		; mask away unwanted
0047BEr 2               
0047BEr 2               	ldy #32
0047BEr 2               	eor (scraddr),y 	; XOR with what's there.
0047BEr 2               	sta (scraddr),y 	; display right byte.
0047BEr 2               
0047BEr 2               	inx
0047BEr 2               .else
0047BEr 2               
0047BEr 2  20 rr rr     	jsr gsprad 		; get old sprite address.
0047C1r 2  20 rr rr     	jsr exx  		; store addresses.
0047C4r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
0047C7r 2               
0047C7r 2               .if bflag
0047C7r 2               	lda #23
0047C7r 2               .else
0047C7r 2  A9 0F        	lda #15
0047C9r 2               .endif
0047C9r 2  85 rr        	sta ccnt
0047CBr 2               lloop:
0047CBr 2  20 rr rr     	jsr dline 		; draw a line.
0047CEr 2  20 rr rr     	jsr exx  		; restore old addresses.
0047D1r 2  20 rr rr     	jsr dline 		; delete a line.
0047D4r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
0047D7r 2  C6 rr        	dec ccnt
0047D9r 2  D0 F0        	bne lloop
0047DBr 2               
0047DBr 2  20 rr rr     	jsr dline		; draw a line.
0047DEr 2  20 rr rr     	jsr exx 		; restore old addresses.
0047E1r 2               
0047E1r 2               ;-------------------------------------------------------------
0047E1r 2               ; Drop through.
0047E1r 2               ; Line drawn, now work out next target address.
0047E1r 2               ;
0047E1r 2               ; Input:
0047E1r 2               ;  B  = right mask
0047E1r 2               ;  C  = left mask
0047E1r 2               ;  DE = spriteaddress
0047E1r 2               ;  scraddr = screen address
0047E1r 2               ;-------------------------------------------------------------
0047E1r 2               
0047E1r 2               dline:
0047E1r 2  A0 00        	ldy #0
0047E3r 2  B1 rr        	lda (z80_de),y 		; graphic data.
0047E5r 2  48           	pha
0047E6r 2  25 rr        	and z80_c 		; mask away what's not needed.
0047E8r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0047EAr 2  91 rr        	sta (scraddr),y 	; left byte on screen.
0047ECr 2               
0047ECr 2  68           	pla
0047EDr 2  25 rr        	and z80_b 		; mask away unwanted bits.
0047EFr 2  A0 20        	ldy #32
0047F1r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0047F3r 2  91 rr        	sta (scraddr),y 	; right byte on screen
0047F5r 2               
0047F5r 2  E6 rr        	inc z80_e 		; next graphic.
0047F7r 2  D0 02        	bne :+
0047F9r 2  E6 rr        	inc z80_d
0047FBr 2               :
0047FBr 2               ; _BEEB screen arrangement
0047FBr 2               ;	sec
0047FBr 2               ;	lda scraddr 		; one character cell to the left.
0047FBr 2               ;	sbc #8
0047FBr 2               ;	sta scraddr
0047FBr 2               ;	lda scraddr+1
0047FBr 2               ;	sbc #0
0047FBr 2               ;	sta scraddr+1
0047FBr 2               
0047FBr 2  A0 00        	ldy #0
0047FDr 2  B1 rr        	lda (z80_de),y 		; second bit of data.
0047FFr 2  A0 10        	ldy #16
004801r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
004803r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
004805r 2               
004805r 2  E6 rr        	inc z80_e 		; point to next line of data.
004807r 2  D0 02        	bne :+
004809r 2  E6 rr        	inc z80_d
00480Br 2               :
00480Br 2               ; _BEEB screen arrangement
00480Br 2               ;	sec
00480Br 2               ;	lda scraddr 		; another char left.
00480Br 2               ;	sbc #8
00480Br 2               ;	sta scraddr
00480Br 2               ;	lda scraddr+1
00480Br 2               ;	sbc #0
00480Br 2               ;	sta scraddr+1
00480Br 2               .endif
00480Br 2               
00480Br 2               ;----------------------------------------------------------------------
00480Br 2               ; Line drawn, now work out next target address.
00480Br 2               ;----------------------------------------------------------------------
00480Br 2               
00480Br 2               ; _BEEB screen arrangement
00480Br 2               
00480Br 2               nline:
00480Br 2  A5 rr        	lda scraddr 			; get low byte of address.
00480Dr 2  29 0F        	and #15
00480Fr 2  C9 0F        	cmp #15				; is this last line of row?
004811r 2  F0 03        	beq beeb_next_row
004813r 2               
004813r 2               	; within same row
004813r 2  E6 rr        	inc scraddr			; new low byte of address.
004815r 2  60           	rts
004816r 2               
004816r 2               beeb_next_row:
004816r 2  18           	clc
004817r 2  A5 rr        	lda scraddr
004819r 2  69 51        	adc #<(ScreenRowBytes-15)
00481Br 2  85 rr        	sta scraddr			; new low byte of address.
00481Dr 2  A5 rr        	lda scraddr+1
00481Fr 2  69 01        	adc #>(ScreenRowBytes-15)
004821r 2  85 rr        	sta scraddr+1			; new high byte of address.
004823r 2  60           	rts
004824r 2               
004824r 2               .if rflag
004824r 2               ;-------------------------------------------------------------
004824r 2               ; Drop through.
004824r 2               ; Line drawn, now work out next target address.
004824r 2               ;
004824r 2               ; Input:
004824r 2               ;  B  = right mask
004824r 2               ;  C  = left mask
004824r 2               ;  DE = spriteaddress
004824r 2               ;  scraddr = screen address
004824r 2               ;-------------------------------------------------------------
004824r 2               
004824r 2               ddline:
004824r 2               
004824r 2               ; NEW SPRITE
004824r 2               
004824r 2               ; first screen byte
004824r 2               
004824r 2               ddline_spraddr1:
004824r 2               	ldy $ffff,x 		; graphic data.
004824r 2               ddline_shift1:
004824r 2               	lda $ffff,y
004824r 2               	sta sprtmp
004824r 2               	and z80_c 			; mask away what's not needed.
004824r 2               
004824r 2               	ldy #0
004824r 2               	eor (scraddr),y 	; XOR with what's there.
004824r 2               	sta (scraddr),y 	; bung it in.
004824r 2               
004824r 2               ; carry to next screen byte
004824r 2               
004824r 2               	lda sprtmp			; fetch data.
004824r 2               	and z80_b 			; mask away unwanted
004824r 2               	sta sprtmp
004824r 2               
004824r 2               ; middle screen byte
004824r 2               
004824r 2               	inx
004824r 2               ddline_spraddr2:
004824r 2               	ldy $ffff,x 		; second bit of data.
004824r 2               ddline_shift2:
004824r 2               	lda $ffff,y
004824r 2               	sta sprtmp2
004824r 2               	and z80_c 			; mask away what's not needed.
004824r 2               	ora sprtmp
004824r 2               
004824r 2               	ldy #16
004824r 2               	eor (scraddr),y 	; XOR with what's there.
004824r 2               	sta (scraddr),y 	; bung it in.
004824r 2               
004824r 2               ; carry to last screen byte
004824r 2               
004824r 2               	lda sprtmp2
004824r 2               	and z80_b 			; mask away unwanted
004824r 2               
004824r 2               	ldy #32
004824r 2               	eor (scraddr),y 	; XOR with what's there.
004824r 2               	sta (scraddr),y 	; bung it in.
004824r 2               
004824r 2               ; _BEEB next row
004824r 2               
004824r 2               	lda scraddr 		; get low byte of address.
004824r 2               	and #15
004824r 2               	cmp #15				; is this last line of row?
004824r 2               	beq :+
004824r 2               
004824r 2               	; within same row can't increment page
004824r 2               	inc scraddr			; new low byte of address.
004824r 2               	bne ddline2
004824r 2               
004824r 2               :
004824r 2               	clc
004824r 2               	lda scraddr
004824r 2               	adc #<(ScreenRowBytes-15)
004824r 2               	sta scraddr			; new low byte of address.
004824r 2               	lda scraddr+1
004824r 2               	adc #>(ScreenRowBytes-15)
004824r 2               	sta scraddr+1		; new high byte of address.
004824r 2               
004824r 2               ; OLD SPRITE
004824r 2               
004824r 2               ddline2:
004824r 2               
004824r 2               ; still first row but different data!
004824r 2               
004824r 2               	dex
004824r 2               
004824r 2               ; first screen byte
004824r 2               
004824r 2               ddline_spraddr3:
004824r 2               	ldy $ffff,x			; graphic data.
004824r 2               ddline_shift3:
004824r 2               	lda $ffff,y
004824r 2               	sta sprtmp
004824r 2               	and z80_cp 			; mask away what's not needed.
004824r 2               
004824r 2               	ldy #0
004824r 2               	eor (z80_hlp),y 	; XOR with what's there.
004824r 2               	sta (z80_hlp),y 	; bung it in.
004824r 2               
004824r 2               ; carry to next screen byte
004824r 2               
004824r 2               	lda sprtmp			; fetch data.
004824r 2               	and z80_bp 			; mask away unwanted
004824r 2               	sta sprtmp
004824r 2               
004824r 2               ; middle screen byte
004824r 2               
004824r 2               	inx
004824r 2               ddline_spraddr4:
004824r 2               	ldy $ffff,x 		; second bit of data.
004824r 2               ddline_shift4:
004824r 2               	lda $ffff,y
004824r 2               	sta sprtmp2
004824r 2               	and z80_cp 			; mask away what's not needed.
004824r 2               	ora sprtmp
004824r 2               
004824r 2               	ldy #16
004824r 2               	eor (z80_hlp),y 	; XOR with what's there.
004824r 2               	sta (z80_hlp),y 	; bung it in.
004824r 2               
004824r 2               ; last screen byte
004824r 2               
004824r 2               	lda sprtmp2			; fetch data.
004824r 2               	and z80_bp 			; mask away unwanted
004824r 2               
004824r 2               	ldy #32
004824r 2               	eor (z80_hlp),y 	; XOR with what's there.
004824r 2               	sta (z80_hlp),y 	; bung it in.
004824r 2               
004824r 2               ; next row of sprite data
004824r 2               
004824r 2               	inx
004824r 2               
004824r 2               ; _BEEB screen arrangement
004824r 2               
004824r 2               	lda z80_lp 			; get low byte of address.
004824r 2               	and #15
004824r 2               	cmp #15				; is this last line of row?
004824r 2               	beq :+
004824r 2               
004824r 2               	; within same row can't increment page
004824r 2               	inc z80_lp			; new low byte of address.
004824r 2               	rts
004824r 2               
004824r 2               :
004824r 2               	clc
004824r 2               	lda z80_lp
004824r 2               	adc #<(ScreenRowBytes-15)
004824r 2               	sta z80_lp			; new low byte of address.
004824r 2               	lda z80_lp+1
004824r 2               	adc #>(ScreenRowBytes-15)
004824r 2               	sta z80_lp+1		; new high byte of address.
004824r 2               	rts
004824r 2               .endif
004824r 2               
004824r 2               ;----------------------------------------------------
004824r 2               ; Display character in A at dispx,dispy.
004824r 2               ;
004824r 2               ; Input:
004824r 2               ;  A 	   = character to print
004824r 2               ;----------------------------------------------------
004824r 2               
004824r 2               pchar:
004824r 2  85 rr        	sta fntaddr
004826r 2  A9 00        	lda #0
004828r 2  85 rr        	sta fntaddr+1
00482Ar 2  06 rr        	asl fntaddr  		; multiply char by 8.
00482Cr 2  26 rr        	rol fntaddr+1
00482Er 2  06 rr        	asl fntaddr
004830r 2  26 rr        	rol fntaddr+1
004832r 2  06 rr        	asl fntaddr
004834r 2  26 rr        	rol fntaddr+1
004836r 2               
004836r 2  A5 rr        	lda fntaddr
004838r 2  18           	clc
004839r 2  69 rr        	adc #<(FONT-256)
00483Br 2  85 rr        	sta fntaddr		; that's the low byte.
00483Dr 2  A5 rr        	lda fntaddr+1
00483Fr 2  69 rr        	adc #>(FONT-256)
004841r 2  85 rr        	sta fntaddr+1		; add displacement.
004843r 2               
004843r 2               pchark:
004843r 2  20 rr rr     	jsr gaadd		; set colour attribute
004846r 2  AD rr rr     	lda fontcol
004849r 2  A0 00        	ldy #0
00484Br 2  91 rr        	sta (bufaddr),y
00484Dr 2               
00484Dr 2  20 rr rr     	jsr gprad		; get screen address.
004850r 2  A2 07        	ldx #7			; lines to write.
004852r 2               pchar0:
004852r 2  A0 00        	ldy #0
004854r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
004856r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
004859r 2               .if iflag
004859r 2               	eor #TxtInvert		; Invert
004859r 2               .endif
004859r 2  91 rr        	sta (scraddr),y 	; copy to screen.
00485Br 2  E6 rr        	inc fntaddr		; next image byte.
00485Dr 2  D0 02        	bne :+
00485Fr 2  E6 rr        	inc fntaddr+1
004861r 2               :
004861r 2  CA           	dex			; next screen row down.
004862r 2  10 EE        	bpl pchar0		; repeat.
004864r 2               
004864r 2  60           	rts
004865r 2               
004865r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
004869r 2  03 02 01 00  
00486Dr 2               
00486Dr 2               .if rflag
00486Dr 2               ;----------------------------------------------------
00486Dr 2               ; Shift tables
00486Dr 2               ;----------------------------------------------------
00486Dr 2               
00486Dr 2               .align 256
00486Dr 2               shift0:
00486Dr 2               .repeat 256, i
00486Dr 2               	.byte i
00486Dr 2               .endrep
00486Dr 2               
00486Dr 2               shift2:
00486Dr 2               .repeat 256, i
00486Dr 2               	.byte (i >> 2) | (i << 6) & $c0
00486Dr 2               .endrep
00486Dr 2               
00486Dr 2               shift4:
00486Dr 2               .repeat 256, i
00486Dr 2               	.byte (i >> 4) | ((i << 4) & $f0)
00486Dr 2               .endrep
00486Dr 2               
00486Dr 2               shift6:
00486Dr 2               .repeat 256, i
00486Dr 2               	.byte (i >> 6) | ((i << 2) & $fc)
00486Dr 2               .endrep
00486Dr 2               .endif
00486Dr 2               
00486Dr 1               	.include "z80.asm"
00486Dr 2               ;------------------------------------------------------
00486Dr 2               ; z80.asm
00486Dr 2               ; spectrum stuff
00486Dr 2               ; adresses
00486Dr 2               
00486Dr 2               ;ws	 = $60
00486Dr 2               
00486Dr 2               ;z80_f	 = ws+$00
00486Dr 2               ;z80_a	 = ws+$01
00486Dr 2               ;z80_af	 = z80_f
00486Dr 2               
00486Dr 2               ;z80_c	 = ws+$02
00486Dr 2               ;z80_b	 = ws+$03
00486Dr 2               ;z80_bc	 = z80_c
00486Dr 2               
00486Dr 2               ;z80_e	 = ws+$04
00486Dr 2               ;z80_d	 = ws+$05
00486Dr 2               ;z80_de	 = z80_e
00486Dr 2               
00486Dr 2               ;z80_l	 = ws+$06
00486Dr 2               ;z80_h	 = ws+$07
00486Dr 2               ;z80_hl	 = z80_l
00486Dr 2               
00486Dr 2               ;z80_x    = ws+$08
00486Dr 2               ;z80_i    = ws+$09
00486Dr 2               ;z80_ix	 = z80_x
00486Dr 2               
00486Dr 2               ;z80_iy	 = ws+$0a
00486Dr 2               
00486Dr 2               ;z80_fp	 = ws+$0c
00486Dr 2               ;z80_ap	 = ws+$0d
00486Dr 2               
00486Dr 2               ;z80_cp	 = ws+$0e
00486Dr 2               ;z80_bp	 = ws+$0f
00486Dr 2               ;z80_bcp = z80_cp
00486Dr 2               
00486Dr 2               ;z80_ep	 = ws+$10
00486Dr 2               ;z80_dp	 = ws+$11
00486Dr 2               ;z80_dep = z80_ep
00486Dr 2               
00486Dr 2               ;z80_lp	 = ws+$12
00486Dr 2               ;z80_hp	 = ws+$13
00486Dr 2               ;z80_hlp = z80_lp
00486Dr 2               
00486Dr 2               ;z80_sp   = ws+$14
00486Dr 2               
00486Dr 2               ;z80_reg0 = ws+$16
00486Dr 2               ;z80_reg1 = ws+$17
00486Dr 2               ;z80_reg2 = ws+$18
00486Dr 2               ;z80_reg3 = ws+$19
00486Dr 2               
00486Dr 2               ;z80_r	 = ws+$1a
00486Dr 2               
00486Dr 2               ; Contains seperatly 1 bit set
00486Dr 2               ; _BEEB this is not safe memory to use as required by MOS
00486Dr 2               
00486Dr 2               _bitmem0	= $f8
00486Dr 2               _bitmem1	= $f9
00486Dr 2               _bitmem2	= $fa
00486Dr 2               _bitmem3	= $fb
00486Dr 2               _bitmem4	= $fc
00486Dr 2               _bitmem5	= $fd
00486Dr 2               _bitmem6	= $fe
00486Dr 2               _bitmem7	= $ff
00486Dr 2               
00486Dr 2               ; constants
00486Dr 2               _bitvalue0	= $01
00486Dr 2               _bitvalue1	= $02
00486Dr 2               _bitvalue2	= $04
00486Dr 2               _bitvalue3	= $08
00486Dr 2               _bitvalue4	= $10
00486Dr 2               _bitvalue5	= $20
00486Dr 2               _bitvalue6	= $40
00486Dr 2               _bitvalue7	= $80
00486Dr 2               
00486Dr 2               _notbitvalue0	= $fe
00486Dr 2               _notbitvalue1	= $fd
00486Dr 2               _notbitvalue2	= $fb
00486Dr 2               _notbitvalue3	= $f7
00486Dr 2               _notbitvalue4	= $ef
00486Dr 2               _notbitvalue5	= $df
00486Dr 2               _notbitvalue6	= $bf
00486Dr 2               _notbitvalue7	= $7f
00486Dr 2               
00486Dr 2               
00486Dr 2               ;add_hl_bc:
00486Dr 2               ;		lda z80_l
00486Dr 2               ;		clc
00486Dr 2               ;		adc z80_c
00486Dr 2               ;		sta z80_l
00486Dr 2               ;		lda z80_h
00486Dr 2               ;		adc z80_b
00486Dr 2               ;		sta z80_h
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;add_ix_de:
00486Dr 2               ;		lda z80_ix
00486Dr 2               ;		clc
00486Dr 2               ;		adc z80_e
00486Dr 2               ;		sta z80_ix
00486Dr 2               ;		lda z80_ix+1
00486Dr 2               ;		adc z80_d
00486Dr 2               ;		sta z80_ix+1
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;add_iy_de:
00486Dr 2               ;		lda z80_iy
00486Dr 2               ;		clc
00486Dr 2               ;		adc z80_e
00486Dr 2               ;		sta z80_iy
00486Dr 2               ;		lda z80_iy+1
00486Dr 2               ;		adc z80_d
00486Dr 2               ;		sta z80_iy+1
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;add_hl_de:
00486Dr 2               ;		lda z80_l
00486Dr 2               ;		clc
00486Dr 2               ;		adc z80_e
00486Dr 2               ;		sta z80_l
00486Dr 2               ;		lda z80_h
00486Dr 2               ;		adc z80_d
00486Dr 2               ;		sta z80_h
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;add_ix_bc:
00486Dr 2               ;		lda z80_ix
00486Dr 2               ;		clc
00486Dr 2               ;		adc z80_c
00486Dr 2               ;		sta z80_ix
00486Dr 2               ;		lda z80_ix+1
00486Dr 2               ;		adc z80_b
00486Dr 2               ;		sta z80_ix+1
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;add_iy_bc:
00486Dr 2               ;		lda z80_iy
00486Dr 2               ;		clc
00486Dr 2               ;		adc z80_c
00486Dr 2               ;		sta z80_iy
00486Dr 2               ;		lda z80_iy+1
00486Dr 2               ;		adc z80_b
00486Dr 2               ;		sta z80_iy+1
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;sbc_hl_de:
00486Dr 2               ;		lda z80_l
00486Dr 2               ;		sbc z80_e
00486Dr 2               ;		sta z80_l
00486Dr 2               ;		lda z80_h
00486Dr 2               ;		sbc z80_d
00486Dr 2               ;		sta z80_h
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;sbc_hl_bc:
00486Dr 2               ;		lda z80_l
00486Dr 2               ;		sbc z80_c
00486Dr 2               ;		sta z80_l
00486Dr 2               ;		lda z80_h
00486Dr 2               ;		sbc z80_b
00486Dr 2               ;		sta z80_h
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;cmp_hl_bc:
00486Dr 2               ;		lda z80_l
00486Dr 2               ;		cmp z80_c
00486Dr 2               ;		bne cmp_hl_bc_end
00486Dr 2               ;		lda z80_h
00486Dr 2               ;		cmp z80_b
00486Dr 2               ;cmp_hl_bc_end:
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;cmp_iy_ix:
00486Dr 2               ;		lda z80_iy
00486Dr 2               ;		cmp z80_ix
00486Dr 2               ;		bne cmp_iy_ix_end
00486Dr 2               ;		lda z80_iy+1
00486Dr 2               ;		cmp z80_ix+1
00486Dr 2               ;cmp_iy_ix_end:
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;dec_hl:
00486Dr 2               ;		lda z80_l
00486Dr 2               ;		bne dec_hl_no_dec_h
00486Dr 2               ;		dec z80_h
00486Dr 2               ;dec_hl_no_dec_h:
00486Dr 2               ;		dec z80_l
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;dec_ix:
00486Dr 2               ;		lda z80_ix
00486Dr 2               ;		bne dec_ix_no_dec_h
00486Dr 2               ;		dec z80_ix+1
00486Dr 2               ;dec_ix_no_dec_h:
00486Dr 2               ;		dec z80_ix
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;dec_bc:
00486Dr 2               ;		lda z80_c
00486Dr 2               ;		bne dec_bc_no_dec_b
00486Dr 2               ;		dec z80_b
00486Dr 2               ;dec_bc_no_dec_b:
00486Dr 2               ;		dec z80_c
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;dec_de:
00486Dr 2               ;		lda z80_e
00486Dr 2               ;		bne dec_de_no_dec_d
00486Dr 2               ;		dec z80_d
00486Dr 2               ;dec_de_no_dec_d:
00486Dr 2               ;		dec z80_e
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               ;ex_af_afs:
00486Dr 2               ;	rts
00486Dr 2               ;ex_de_hl:
00486Dr 2               ;		lda z80_e
00486Dr 2               ;		ldx z80_l
00486Dr 2               ;		stx z80_e
00486Dr 2               ;		sta z80_l
00486Dr 2               ;		lda z80_d
00486Dr 2               ;		ldx z80_h
00486Dr 2               ;		stx z80_d
00486Dr 2               ;		sta z80_h
00486Dr 2               ;		rts
00486Dr 2               ;
00486Dr 2               exx:
00486Dr 2  A5 rr        		lda z80_c
00486Fr 2  A4 rr        		ldy z80_cp
004871r 2  84 rr        		sty z80_c
004873r 2  85 rr        		sta z80_cp
004875r 2  A5 rr        		lda z80_b
004877r 2  A4 rr        		ldy z80_bp
004879r 2  84 rr        		sty z80_b
00487Br 2  85 rr        		sta z80_bp
00487Dr 2  A5 rr        		lda z80_e
00487Fr 2  A4 rr        		ldy z80_ep
004881r 2  84 rr        		sty z80_e
004883r 2  85 rr        		sta z80_ep
004885r 2  A5 rr        		lda z80_d
004887r 2  A4 rr        		ldy z80_dp
004889r 2  84 rr        		sty z80_d
00488Br 2  85 rr        		sta z80_dp
00488Dr 2  A5 rr        		lda scraddr
00488Fr 2  A4 rr        		ldy z80_lp
004891r 2  84 rr        		sty scraddr
004893r 2  85 rr        		sta z80_lp
004895r 2  A5 rr        		lda scraddr+1
004897r 2  A4 rr        		ldy z80_hp
004899r 2  84 rr        		sty scraddr+1
00489Br 2  85 rr        		sta z80_hp
00489Dr 2  60           		rts
00489Er 2               
00489Er 2               ;ex_sp_hl:
00489Er 2               ;		tsx
00489Er 2               ;		lda $0103,x
00489Er 2               ;		ldy z80_h
00489Er 2               ;		sta z80_h
00489Er 2               ;		tya
00489Er 2               ;		sta $0103,x
00489Er 2               ;		lda $0104,x
00489Er 2               ;		ldy z80_l
00489Er 2               ;		sta z80_l
00489Er 2               ;		tya
00489Er 2               ;		sta $104,x
00489Er 2               ;		rts
00489Er 2               ;
00489Er 2               ;ldi:
00489Er 2               ;	rts
00489Er 2               ;ldir:
00489Er 2               ;		ldy #$00
00489Er 2               ;		ldx z80_b
00489Er 2               ;		beq ldir_last_page
00489Er 2               ;ldir_loop:
00489Er 2               ;		lda (z80_hl),y
00489Er 2               ;		sta (z80_de),y
00489Er 2               ;		iny
00489Er 2               ;		bne ldir_loop
00489Er 2               ;		inc z80_h
00489Er 2               ;		inc z80_d
00489Er 2               ;		dex
00489Er 2               ;		bne ldir_loop
00489Er 2               ;ldir_last_page:
00489Er 2               ;		lda z80_c
00489Er 2               ;		beq ldir_end
00489Er 2               ;ldir_last_page_loop:
00489Er 2               ;		lda (z80_hl),y
00489Er 2               ;		sta (z80_de),y
00489Er 2               ;		iny
00489Er 2               ;		cpy z80_c
00489Er 2               ;		bne ldir_last_page_loop
00489Er 2               ;ldir_end:
00489Er 2               ;		stx z80_c
00489Er 2               ;		stx z80_b
00489Er 2               ;		tya
00489Er 2               ;		clc
00489Er 2               ;		adc z80_l
00489Er 2               ;		sta z80_l
00489Er 2               ;		bcc *+4
00489Er 2               ;		inc z80_h
00489Er 2               ;		tya
00489Er 2               ;		clc
00489Er 2               ;		adc z80_e
00489Er 2               ;		sta z80_e
00489Er 2               ;		bcc *+4
00489Er 2               ;		inc z80_d
00489Er 2               ;		rts
00489Er 2               ;
00489Er 2               ;lddr:		ldy #$00
00489Er 2               ;lddr_loop:
00489Er 2               ;		lda (z80_hl),y
00489Er 2               ;		sta (z80_de),y
00489Er 2               ;		jsr dec_hl
00489Er 2               ;		jsr dec_de
00489Er 2               ;		jsr dec_bc
00489Er 2               ;		lda z80_b
00489Er 2               ;		ora z80_c
00489Er 2               ;		bne lddr_loop
00489Er 2               ;		rts
00489Er 2               ;ei:
00489Er 2               ;		rts
00489Er 2               ;di:
00489Er 2               ;		rts
00489Er 2               
00489Er 2               ;-------------------------------------------------------------
00489Er 2               ; Set bits in bitmem
00489Er 2               ;-------------------------------------------------------------
00489Er 2               
00489Er 2               .if 0
00489Er 2               z80_init:
00489Er 2               	ldx #$00
00489Er 2               	lda #$01
00489Er 2               z80_init_loop:
00489Er 2               	sta _bitmem0,x
00489Er 2               	inx
00489Er 2               	asl a
00489Er 2               	bne z80_init_loop
00489Er 2               	rts
00489Er 2               .endif
00489Er 2               
00489Er 2               push_af:
00489Er 2               push_bc:
00489Er 2               push_de:
00489Er 2               push_hl:
00489Er 2               
00489Er 2               pop_af:
00489Er 2               pop_bc:
00489Er 2               pop_de:
00489Er 2               pop_ix:
00489Er 2               pop_hl:
00489Er 2               
00489Er 2               add_hl_hl:
00489Er 2               
00489Er 2               inc_bc:
00489Er 2               inc_de:
00489Er 2               inc_hl:
00489Er 2               inc_ix:
00489Er 2               inc_sp:
00489Er 2               
00489Er 2               cpir:
00489Er 2               
00489Er 2               ex_af_af:
00489Er 2               ;	rts
00489Er 2               
00489Er 1               eind_asm:
00489Er 1               eop:					; End Of Program
00489Er 1               
00489Er 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
00489Er 1               
