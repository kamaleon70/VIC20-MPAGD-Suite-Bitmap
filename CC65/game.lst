ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 1 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:	    .res 1
00002Br 2  xx           loopb:	    .res 1
00002Cr 2  xx           loopc:	    .res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2               .if sflag
000039r 2               scr_l:      .res 2
000039r 2               scr_r:      .res 2
000039r 2               scr_txt:    .res 2
000039r 2               scr_tmp:    .res 2
000039r 2               .endif
000039r 2               
000039r 2  xx           xtmp:	    .res 1
00003Ar 2  xx           spcnt:	    .res 1
00003Br 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
00003Dr 2  xx           seed:	    .res 1		; seed for random numbers.
00003Er 2               
00003Er 2  xx           ccnt:       .res 1
00003Fr 2  xx           flag:	    .res 1
000040r 2  xx           rcol:	    .res 1
000041r 2  xx           rrow:	    .res 1
000042r 2               
000042r 2  xx           combyt:	    .res 1		; byte type compressed.
000043r 2  xx           comcnt:	    .res 1		; compression counter.
000044r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
000045r 2  xx           qscnt:	    .res 1
000046r 2               
000046r 2  xx           sprptr:	    .res 1      ; not a ptr
000047r 2  xx           sprcnt:	    .res 1
000048r 2               
000048r 2  xx xx        skptr:	    .res 2		; search pointer.
00004Ar 2  xx           sktptr:	    .res 1      ; not a ptr
00004Br 2  xx           tmproom:    .res 1
00004Cr 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
00004Er 2               
00004Er 2  xx xx xx     spr:	    .res 3      ; static sprite data
000051r 2  xx           vsync_count:.res 1
000052r 2  xx           colpatt:    .res 1
000053r 2  xx           sprtmp:     .res 1
000054r 2  xx           sprtmp2:    .res 1
000055r 2  xx           sprshft:    .res 1
000056r 2               
000056r 2  xx           spriteink:  .res 1
000057r 2  xx           colour_byte:.res 1
000058r 2  xx           colour_xor: .res 1
000059r 2  xx           objcol:	    .res 1
00005Ar 2               
00005Ar 2               .if mflag
00005Ar 2               TmpAddr:    .res 2
00005Ar 2               bwid:	    .res 1     ; box/menu width.
00005Ar 2               blen:	    .res 1     ; box/menu height.
00005Ar 2               btop:	    .res 1     ; box coordinates.
00005Ar 2               blft:	    .res 1
00005Ar 2               .endif
00005Ar 2               
00005Ar 2               .if pflag
00005Ar 2  xx           shrctr:	    .res 1
00005Br 2  xx           explcnt:    .res 1
00005Cr 2  xx           seed3:	    .res 1
00005Dr 2               .endif
00005Dr 2               
00005Dr 2               .if aflag
00005Dr 2               pbbuf:      .res 2
00005Dr 2               pbptr:      .res 2
00005Dr 2               .endif
00005Dr 2               
00005Dr 2  xx           tmp1:       .res 1
00005Er 2  xx           tmp2:       .res 1
00005Fr 2               
00005Fr 2               ;----------------------------------------------------
00005Fr 2               ; Music player variables
00005Fr 2               ;----------------------------------------------------
00005Fr 2               
00005Fr 2  xx           SONG_POS:		.res 1	; = $90
000060r 2  xx           PATTERN_POS:		.res 1	; = $91
000061r 2  xx           FRAME_COUNT:		.res 1	; = $92
000062r 2  xx           FRAME_LENGTH:		.res 1	; = $93
000063r 2  xx           SONG_NEXT_TRUE:		.res 1	; = $94
000064r 2  xx           SONG_END_TRUE:		.res 1	; = $95
000065r 2               
000065r 2               ; 2 byte address of pattern data
000065r 2  xx xx        CH1_PATTERN_POS:	.res 2	; = $96
000067r 2  xx xx        CH2_PATTERN_POS:	.res 2	; = $98
000069r 2  xx xx        CH3_PATTERN_POS:	.res 2	; = $9a
00006Br 2  xx xx        CH4_PATTERN_POS:	.res 2	; = $9c
00006Dr 2               
00006Dr 2               ; #$00 == inactive mode
00006Dr 2  xx           CH1_ACTIVE:		.res 1	; = $a0
00006Er 2  xx           CH2_ACTIVE:		.res 1	; = $a1
00006Fr 2  xx           CH3_ACTIVE:		.res 1	; = $a2
000070r 2  xx           CH4_ACTIVE:		.res 1	; = $a3
000071r 2               
000071r 2  xx           TEMP_GUY:		.res 1	; = $a4
000072r 2  xx           CHAN_NOTE_DATA:		.res 1	; = $a5
000073r 2  xx           CHANS_INACTIVE:		.res 1	; = $a6
000074r 2  xx           FAST_COUNTER:		.res 1	; = $a7
000075r 2  xx           MEGA_COUNTER:		.res 1	; = $a8
000076r 2               
000076r 1               	.include "z80-zp.inc"
000076r 2               ;ws	 = $60
000076r 2               
000076r 2  xx           z80_f: .res 1;	 = ws+$00
000077r 2  xx           z80_a: .res 1;	 = ws+$01
000078r 2               z80_af	 = z80_f
000078r 2               
000078r 2  xx           z80_c: .res 1;	 = ws+$02
000079r 2  xx           z80_b: .res 1;	 = ws+$03
00007Ar 2               z80_bc	 = z80_c
00007Ar 2               
00007Ar 2  xx           z80_e: .res 1;	 = ws+$04
00007Br 2  xx           z80_d: .res 1;	 = ws+$05
00007Cr 2               z80_de	 = z80_e
00007Cr 2               
00007Cr 2  xx           z80_l: .res 1;	 = ws+$06
00007Dr 2  xx           z80_h: .res 1;	 = ws+$07
00007Er 2               z80_hl	 = z80_l
00007Er 2               
00007Er 2  xx           z80_x: .res 1;    = ws+$08
00007Fr 2  xx           z80_i: .res 1;    = ws+$09
000080r 2               z80_ix	 = z80_x
000080r 2               
000080r 2  xx xx        z80_iy: .res 2;	 = ws+$0a
000082r 2               
000082r 2  xx           z80_fp: .res 1;	 = ws+$0c
000083r 2  xx           z80_ap: .res 1;	 = ws+$0d
000084r 2               
000084r 2  xx           z80_cp: .res 1;	 = ws+$0e
000085r 2  xx           z80_bp: .res 1;	 = ws+$0f
000086r 2               z80_bcp	 = z80_cp
000086r 2               
000086r 2  xx           z80_ep: .res 1;	 = ws+$10
000087r 2  xx           z80_dp: .res 1;	 = ws+$11
000088r 2               z80_dep	 = z80_ep
000088r 2               
000088r 2  xx           z80_lp: .res 1;	 = ws+$12
000089r 2  xx           z80_hp: .res 1;	 = ws+$13
00008Ar 2               z80_hlp	 = z80_lp
00008Ar 2               
00008Ar 2  xx xx        z80_sp: .res 2;   = ws+$14
00008Cr 2               
00008Cr 2  xx           z80_reg0: .res 1; = ws+$16
00008Dr 2  xx           z80_reg1: .res 1; = ws+$17
00008Er 2  xx           z80_reg2: .res 1; = ws+$18
00008Fr 2  xx           z80_reg3: .res 1; = ws+$19
000090r 2               
000090r 2               ;z80_r: .res 1;	 = ws+$1a
000090r 2               
000090r 1               
000090r 1               ;----------------------------------------------
000090r 1               ; BASIC header
000090r 1               ;----------------------------------------------
000090r 1               
000090r 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "ladder.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving sprites enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metablocks 16x6"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3  20 rr rr     	jsr game	 		; start the game.
000003r 3  60           	rts
000004r 3               
000004r 3               ; Don't change the order of these four.
000004r 3               ; Menu routine relies on winlft following wintop.
000004r 3               
000004r 3  00           wintop:	.byte WINDOWTOP		; top of window.
000005r 3  00           winlft:	.byte WINDOWLFT		; left edge.
000006r 3  16           winhgt:	.byte WINDOWHGT		; window height.
000007r 3  16           winwid:	.byte WINDOWWID		; window width.
000008r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000009r 3               
000009r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000009r 3               
000009r 3  00           wntopx:	.byte (8 * WINDOWTOP)
00000Ar 3  00           wnlftx:	.byte (8 * WINDOWLFT)
00000Br 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00000Cr 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00000Dr 3               
00000Dr 3               ; Make sure pointers are arranged in the same order as the data itself.
00000Dr 3               
00000Dr 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
00000Fr 3               
00000Fr 3               ; Assorted game routines which can go in contended memory.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for inventory.
00000Fr 3               ; called by the INV command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with objects seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of INV menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               .if mflag
00000Fr 3               minve:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	asl a
00000Fr 3               	sta winhgt
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	asl a
00000Fr 3               	sta winwid
00000Fr 3               .endif
00000Fr 3               	lda #<(invdis)		; routine address.
00000Fr 3               	sta mod0+1		; set up menu routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(invdis)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               	lda #<(fopt)		; find option from available objects.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fopt)
00000Fr 3               	sta mod1+1+1
00000Fr 3               	jmp dbox		; do menu routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for menu.
00000Fr 3               ; called by the MENU command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with menu items seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of MENU menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               mmenu:
00000Fr 3               	lda #<(always)		; routine address.
00000Fr 3               	sta mod0+1		; set up routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(always)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               
00000Fr 3               	lda #<(fstd)		; standard option selection.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fstd)
00000Fr 3               	sta mod1+2
00000Fr 3               
00000Fr 3               ; Drop through into box routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Work out size of box for message or menu.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox:
00000Fr 3               	lda #<msgdat		; pointer to messages.
00000Fr 3               	sta z80_l
00000Fr 3               	lda #>msgdat
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	jsr getwrd		; get message number.
00000Fr 3               
00000Fr 3               	lda z80_h		; store pointer to message.
00000Fr 3               	sta TmpAddr
00000Fr 3               	lda z80_l
00000Fr 3               	sta TmpAddr+1
00000Fr 3               
00000Fr 3               	lda #1			; height.
00000Fr 3               	sta z80_d
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               	sta z80_e		; maximum width.
00000Fr 3               dbox5:
00000Fr 3               	lda #0			; this line"s width.
00000Fr 3               	sta z80_b
00000Fr 3               mod2:
00000Fr 3               	jsr always		; item in player"s possession?
00000Fr 3               	cmp #255
00000Fr 3               	bne dbox6		; not in inventory, skip this line.
00000Fr 3               	inc z80_d		; add to tally.
00000Fr 3               dbox6:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a		; reached end of line?
00000Fr 3               	cmp #','
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	cmp #ASCII_NEWLINE
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	inc z80_b		; add to this line"s width.
00000Fr 3               	lda z80_a
00000Fr 3               	bmi dbox4		; end of message? yes, end count.
00000Fr 3               	jmp dbox6		; repeat until we find the end.
00000Fr 3               dbox3:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox5		; no, carry on looking.
00000Fr 3               	lda z80_b		; make this the widest so far.
00000Fr 3               	sta z80_e
00000Fr 3               	jmp dbox5		; keep looking.
00000Fr 3               dbox4:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox8		; no, carry on looking.
00000Fr 3               	lda z80_b		; final line is the longest so far.
00000Fr 3               	sta z80_e
00000Fr 3               dbox8:
00000Fr 3               	dec z80_d		; decrement items found.
00000Fr 3               	bne :+			; total was zero.
00000Fr 3               	lda #255
00000Fr 3               	sta varopt
00000Fr 3               	jmp dbox15
00000Fr 3               :
00000Fr 3               	lda z80_e		; longest line.
00000Fr 3               	bne :+			; was it zero?
00000Fr 3               	jmp dbox15		; total was zero.
00000Fr 3               :
00000Fr 3               	sta bwid		; set up size.
00000Fr 3               	lda z80_d
00000Fr 3               	sta blen
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; That's set up our box size.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               	lda winhgt		; window height in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_d		; subtract height of box.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc wintop		; add top edge of window.
00000Fr 3               	sta btop		; set up box top.
00000Fr 3               
00000Fr 3               	lda winwid		; window width in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_e		; subtract box width.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc winlft		; add left edge of window.
00000Fr 3               	sta blft		; box left.
00000Fr 3               
00000Fr 3               	lda #<(FONT-256)		; font.
00000Fr 3               	sta grbase		; set up for text display.
00000Fr 3               	lda #>(FONT-256)
00000Fr 3               	sta grbase+1
00000Fr 3               
00000Fr 3               	lda TmpAddr+1		; restore message pointer.
00000Fr 3               	sta z80_l
00000Fr 3               	lda TmpAddr
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set display coordinate.
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               dbox2:
00000Fr 3               	lda combyt		; get object number.
00000Fr 3               	sta z80_a
00000Fr 3               mod0:
00000Fr 3               	jsr always		; check inventory for display.
00000Fr 3               	cmp #255
00000Fr 3               	beq :+
00000Fr 3               	jmp dbox13		; not in inventory, skip this line.
00000Fr 3               :
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set left display position.
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_b		; store width.
00000Fr 3               dbox0:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	cmp #','		; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               	cmp #ASCII_NEWLINE			; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               
00000Fr 3               	cmp #141			; end of line?
00000Fr 3               	bne :+
00000Fr 3               	dec bwid
00000Fr 3               	jmp dbox7		; yes, next one.
00000Fr 3               :
00000Fr 3               	dec z80_b		; one less to display.
00000Fr 3               	and #127		; remove terminator.
00000Fr 3               
00000Fr 3               	jsr pchr		; display on screen.
00000Fr 3               
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bmi :+
00000Fr 3               	jmp dbox7		; yes, job done.
00000Fr 3               :
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	beq :+			; are any left?
00000Fr 3               	jmp dbox0		; yes, continue.
00000Fr 3               :
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Reached limit of characters per line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dbox9:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #ASCII_NEWLINE	; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bcs :+
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox9
00000Fr 3               
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Fill box to end of line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dboxf:
00000Fr 3               	lda #32			; space character.
00000Fr 3               	jsr pchr		; display character.
00000Fr 3               	dec z80_b
00000Fr 3               	beq :+
00000Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00000Fr 3               :
00000Fr 3               	rts
00000Fr 3               dbox1:
00000Fr 3               	inc z80_l		; skip character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill box out to right side.
00000Fr 3               dbox10:
00000Fr 3               	inc dispy		; y coordinate down a line next position.
00000Fr 3               	jmp dbox2		; next line.
00000Fr 3               dbox7:
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	bne :+			; are any left?
00000Fr 3               	jmp dbox11		; no, nothing to draw.
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill message to line.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Drawn the box menu, now select option.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox11:
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set bar position.
00000Fr 3               dbox14:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	bne dbox14		; yes, debounce it.
00000Fr 3               	jsr dbar		; draw bar.
00000Fr 3               dbox12:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	beq dbox12		; no, nothing.
00000Fr 3               	and #16			; fire button pressed?
00000Fr 3               	bne :+
00000Fr 3               mod1:
00000Fr 3               	jmp fstd		; yes, job done.
00000Fr 3               :
00000Fr 3               	jsr dbar		; delete bar.
00000Fr 3               
00000Fr 3               	lda joyval		; joystick reading.
00000Fr 3               	and #8			; going up?
00000Fr 3               	beq dboxu		; yes, go up.
00000Fr 3               
00000Fr 3               	ldx dispy		; vertical position of bar.
00000Fr 3               	inx			; look down.
00000Fr 3               	txa
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find distance from top.
00000Fr 3               	cmp blen		; top of box.
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	inc dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               dboxu:
00000Fr 3               	lda dispy		; vertical position of bar.
00000Fr 3               	cmp btop		; are we at the top?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	dec dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               fstd:
00000Fr 3               	lda dispy		; bar position.
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Option not available.  Skip this line.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox13:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               
00000Fr 3               	bpl :+			; end of message?
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox13
00000Fr 3               dbox15:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	sta winwid
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	sta winhgt
00000Fr 3               .endif
00000Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00000Fr 3               	sta z80_h
00000Fr 3               	lda TmpAddr+1
00000Fr 3               	sta z80_l
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Invert bar
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbar:
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set display coordinate.
00000Fr 3               	jsr gprad		; get printing address.
00000Fr 3               
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_c		; loop counter in c.
00000Fr 3               	lda z80_h
00000Fr 3               	sta z80_d		; store screen address high byte.
00000Fr 3               dbar1:
00000Fr 3               	ldx #7			; pixel height in b.
00000Fr 3               dbar0:
00000Fr 3               	ldy scrtab,x
00000Fr 3               	lda (scraddr),y		; get screen byte.
00000Fr 3               	eor #255		; reverse all bits.
00000Fr 3               	sta (scraddr),y		; write back to screen.
00000Fr 3               	dex			; next line down.
00000Fr 3               	bpl dbar0		; draw rest of character.
00000Fr 3               
00000Fr 3               	lda scraddr
00000Fr 3               	adc #16
00000Fr 3               	sta scraddr
00000Fr 3               	bcc :+
00000Fr 3               	inc scraddr+1
00000Fr 3               :
00000Fr 3               	dec z80_c		; decrement character counter.
00000Fr 3               	bne dbar1		; repeat for whole line.
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Point to object
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  A = object number, A=255 if already in possession
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               invdis:
00000Fr 3               	lda z80_l		; store message text pointer.
00000Fr 3               	pha
00000Fr 3               	lda z80_h
00000Fr 3               	pha
00000Fr 3               	lda combyt		; object number.
00000Fr 3               	inc combyt		; ready for next one.
00000Fr 3               	jsr gotob		; check if we have object.
00000Fr 3               	tay
00000Fr 3               	pla
00000Fr 3               	sta z80_h
00000Fr 3               	pla
00000Fr 3               	sta z80_l
00000Fr 3               	tya
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Find option selected.
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected object
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               fopt:
00000Fr 3               	lda dispy
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta tmp+2		; option selected in b register.
00000Fr 3               	inc tmp+2
00000Fr 3               
00000Fr 3               	lda #0			; set to first item.
00000Fr 3               	sta combyt		; object number.
00000Fr 3               fopt0:
00000Fr 3               	jsr fobj		; find next object in inventory.
00000Fr 3               	dec tmp+2
00000Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00000Fr 3               
00000Fr 3               	lda combyt		; get option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	dec varopt		; one less, due to where we increment combyt.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               fobj:
00000Fr 3               	ldy combyt		; object number.
00000Fr 3               	inc combyt		; ready for next item.
00000Fr 3               	tya
00000Fr 3               	jsr gotob		; do we have this item?
00000Fr 3               	cmp #255
00000Fr 3               	bne :+
00000Fr 3               	rts
00000Fr 3               :
00000Fr 3               	jmp fobj		; yes, it's on the list.
00000Fr 3               .endif
00000Fr 3               
00000Fr 3               ;----------------------------------------------------
00000Fr 3               ; Clear sprite table.
00000Fr 3               ;
00000Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00000Fr 3               ;----------------------------------------------------
00000Fr 3               
00000Fr 3               xspr:
00000Fr 3  A9 FF        	lda #255		; clear byte.
000011r 3  A2 00        	ldx #0			; length of table.
000013r 3               xspr0:
000013r 3  9D rr rr     	sta sprtab,x		; sprite table.
000016r 3  E8           	inx			; move to next byte.
000017r 3  E0 CC        	cpx #SPRBUF
000019r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00001Br 3  60           	rts
00001Cr 3               
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               ; Initialise all objects.
00001Cr 3               ;
00001Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               
00001Cr 3               .if oflag
00001Cr 3               iniob:
00001Cr 3               	lda #<objdta		; objects table.
00001Cr 3               	sta z80_x
00001Cr 3               	lda #>objdta
00001Cr 3               	sta z80_i
00001Cr 3               
00001Cr 3               	ldx numob 		; number of objects in the game.
00001Cr 3               iniob0:
00001Cr 3               	ldy #36
00001Cr 3               	lda (z80_ix),y 		; start screen.
00001Cr 3               	ldy #33
00001Cr 3               	sta (z80_ix),y 		; set start screen.
00001Cr 3               
00001Cr 3               	ldy #37
00001Cr 3               	lda (z80_ix),y 		; find start y.
00001Cr 3               	ldy #34
00001Cr 3               	sta (z80_ix),y 		; set start y.
00001Cr 3               
00001Cr 3               	ldy #38
00001Cr 3               	lda (z80_ix),y 		; get initial x.
00001Cr 3               	ldy #35
00001Cr 3               	sta (z80_ix),y 		; set x coord.
00001Cr 3               
00001Cr 3               	clc 			; point to next object.
00001Cr 3               	lda z80_x
00001Cr 3               	adc #39			; distance between objects.
00001Cr 3               	sta z80_x
00001Cr 3               	bcc :+
00001Cr 3               	inc z80_i
00001Cr 3               :
00001Cr 3               	dex 			; repeat.
00001Cr 3               	bne iniob0
00001Cr 3               
00001Cr 3               	rts
00001Cr 3               .endif
00001Cr 3               
00001Cr 3               ;-----------------------------------------------
00001Cr 3               ; Redraw the screen.
00001Cr 3               ;
00001Cr 3               ; Remove old copy of all sprites for redraw.
00001Cr 3               ;-----------------------------------------------
00001Cr 3               
00001Cr 3               redraw:
00001Cr 3               .if xflag
00001Cr 3               	lda #WINDOWWID
00001Cr 3               	sta winwid
00001Cr 3               	lda #WINDOWHGT
00001Cr 3               	sta winhgt
00001Cr 3               .endif
00001Cr 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00001Er 3  48           	pha
00001Fr 3  A5 rr        	lda z80_x
000021r 3  48           	pha
000022r 3               
000022r 3  20 rr rr     	jsr droom		; show screen layout.
000025r 3               .if oflag
000025r 3               	jsr shwob		; draw objects.
000025r 3               .endif
000025r 3               numsp0:
000025r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000027r 3  85 rr        	sta tmp
000029r 3               
000029r 3  A9 rr        	lda #<sprtab		; sprite table.
00002Br 3  85 rr        	sta z80_x
00002Dr 3  A9 rr        	lda #>sprtab
00002Fr 3  85 rr        	sta z80_i
000031r 3               redrw0:
000031r 3  A0 00        	ldy #0
000033r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
000035r 3  C9 FF        	cmp #255		; is it enabled?
000037r 3  F0 0B        	beq redrw1 		; no, find next one.
000039r 3               
000039r 3  A0 03        	ldy #var_Y
00003Br 3  B1 rr        	lda (z80_ix),y 		; sprite y.
00003Dr 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
00003Fr 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000041r 3               
000041r 3  20 rr rr     	jsr sspria		; show single sprite.
000044r 3               
000044r 3               redrw1:
000044r 3  18           	clc			; next sprite.
000045r 3  A5 rr        	lda z80_x
000047r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000049r 3  85 rr        	sta z80_x
00004Br 3  90 02        	bcc :+
00004Dr 3  E6 rr        	inc z80_i
00004Fr 3               :
00004Fr 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000051r 3  D0 DE        	bne redrw0
000053r 3               
000053r 3               rpblc1:
000053r 3               ;	jsr dshrp		; redraw shrapnel.
000053r 3               
000053r 3               .if aflag
000053r 3               	jsr rbloc		; draw blocks for this screen
000053r 3               .endif
000053r 3  68           	pla			; retrieve sprite pointer.
000054r 3  85 rr        	sta z80_x
000056r 3  68           	pla
000057r 3  85 rr        	sta z80_i
000059r 3               
000059r 3  60           	rts
00005Ar 3               
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               ; Clear screen routine.
00005Ar 3               ;
00005Ar 3               ; Fill screenmem $8000-$97ff with ScrFillByte
00005Ar 3               ;----------------------------------------------------------------------
00005Ar 3               
00005Ar 3               cls:
00005Ar 3  A9 10        	lda #>CharAddress	; Character RAM address.
00005Cr 3  8D rr rr     	sta clsloop+2
00005Fr 3               
00005Fr 3  A9 00        	lda #ScrFillByte	; Clear screen
000061r 3  A0 00        	ldy #0
000063r 3  A2 10        	ldx #16
000065r 3               clsloop:
000065r 3  99 00 10     	sta CharAddress,y
000068r 3  C8           	iny
000069r 3  D0 FA        	bne clsloop
00006Br 3  EE rr rr     	inc clsloop+2
00006Er 3  CA           	dex
00006Fr 3  D0 F4        	bne clsloop
000071r 3  60           	rts
000072r 3               
000072r 3               ;----------------------------------------------------------------------
000072r 3               ; Clear colour attributes
000072r 3               ;
000072r 3               ; Reset colour attributes to fontcol
000072r 3               ;----------------------------------------------------------------------
000072r 3               
000072r 3               clrcol:
000072r 3  AD rr rr     	lda fontcol		; Clear colour attributes
000075r 3  A2 00        	ldx #0
000077r 3               clscol:
000077r 3  9D 00 96     	sta ColorAttr,x
00007Ar 3  E8           	inx
00007Br 3  E0 F2        	cpx #242
00007Dr 3  D0 F8        	bne clscol
00007Fr 3               
00007Fr 3  60           	rts
000080r 3               
000080r 3               ;----------------------------------------------------------------------
000080r 3               ; FODDER check
000080r 3               ;----------------------------------------------------------------------
000080r 3               
000080r 3               .if pflag .or dflag
000080r 3               fdchk:
000080r 3  C9 04        	cmp #FODDER 		; is it fodder?
000082r 3  F0 01        	beq :+
000084r 3  60           	rts 			; no.
000085r 3               :
000085r 3  A9 00        	lda #0			; wipe fodder in MAP
000087r 3  A0 00        	ldy #0
000089r 3  91 rr        	sta (bufaddr),y 	; rewrite block type.
00008Br 3               
00008Br 3  A5 rr        	lda dispx		; x=x/8
00008Dr 3  48           	pha
00008Er 3  4A           	lsr a
00008Fr 3  4A           	lsr a
000090r 3  4A           	lsr a
000091r 3  85 rr        	sta dispx
000093r 3               
000093r 3  A5 rr        	lda dispy		; y=y/8
000095r 3  48           	pha
000096r 3  4A           	lsr a
000097r 3  4A           	lsr a
000098r 3  4A           	lsr a
000099r 3  85 rr        	sta dispy
00009Br 3               
00009Br 3  A9 00        	lda #0 			; block to write.
00009Dr 3  20 rr rr     	jsr pattr 		; write block.
0000A0r 3               
0000A0r 3  68           	pla
0000A1r 3  85 rr        	sta dispy
0000A3r 3  68           	pla
0000A4r 3  85 rr        	sta dispx
0000A6r 3  60           	rts
0000A7r 3               .endif
0000A7r 3               
0000A7r 3               ;----------------------------------------------------
0000A7r 3               ; Scrolly text and puzzle variables.
0000A7r 3               ;----------------------------------------------------
0000A7r 3               
0000A7r 3               .if sflag
0000A7r 3               txtbit:	.byte 128		; bit to write.
0000A7r 3               txtwid:	.byte 16		; width of ticker message.
0000A7r 3               txtpos:	.word msgdat
0000A7r 3               txtini:	.word msgdat
0000A7r 3               txtscr:	.word ScreenAddr
0000A7r 3               .endif
0000A7r 3               
0000A7r 3               ;----------------------------------------------------
0000A7r 3               ; Specialist routines.
0000A7r 3               ; Process shrapnel.
0000A7r 3               ;----------------------------------------------------
0000A7r 3               proshr:
0000A7r 3               .if pflag
0000A7r 3  A9 00        	lda #<SHRAPN		; table.
0000A9r 3  85 rr        	sta z80_x
0000ABr 3  A9 09        	lda #>SHRAPN
0000ADr 3  85 rr        	sta z80_i
0000AFr 3               
0000AFr 3  A9 37        	lda #NUMSHR		; shrapnel pieces to process.
0000B1r 3  85 rr        	sta shrctr
0000B3r 3               prosh0:
0000B3r 3  A0 00        	ldy #0
0000B5r 3  B1 rr        	lda (z80_ix),y		; on/off marker.
0000B7r 3  0A           	asl a
0000B8r 3               proshx:
0000B8r 3  B0 03        	bcs :+
0000BAr 3  20 rr rr     	jsr prosh1 		; on, so process it.
0000BDr 3               :
0000BDr 3  18           	clc
0000BEr 3  A5 rr        	lda z80_x
0000C0r 3  69 06        	adc #SHRSIZ
0000C2r 3  85 rr        	sta z80_x
0000C4r 3  90 02        	bcc :+
0000C6r 3  E6 rr        	inc z80_i
0000C8r 3               :
0000C8r 3  C6 rr        	dec shrctr		; round again.
0000CAr 3  D0 E7        	bne prosh0
0000CCr 3               .endif
0000CCr 3               .if sflag
0000CCr 3               	jsr scrly
0000CCr 3               .endif
0000CCr 3  60           	rts
0000CDr 3               
0000CDr 3               .if pflag
0000CDr 3               ;----------------------------------------------------
0000CDr 3               ; Proces shrapnel piece
0000CDr 3               ;----------------------------------------------------
0000CDr 3               
0000CDr 3               prosh1:
0000CDr 3  20 rr rr     	jsr plot 		; delete the pixel.
0000D0r 3               
0000D0r 3  A9 rr        	lda #<shrptr		; shrapnel routine pointers.
0000D2r 3  85 rr        	sta z80_l
0000D4r 3  A9 rr        	lda #>shrptr
0000D6r 3  85 rr        	sta z80_h
0000D8r 3               
0000D8r 3  A0 00        	ldy #0
0000DAr 3  B1 rr        	lda (z80_ix),y		; restore shrapnel type.
0000DCr 3  20 rr rr     	jsr prosh2 		; run the routine.
0000DFr 3  20 rr rr     	jsr chkxy		; check x and y are good before we redisplay.
0000E2r 3               
0000E2r 3  A9 06        	lda #<SHRSIZ 		; distance to next.
0000E4r 3  85 rr        	sta z80_e
0000E6r 3  A9 00        	lda #>SHRSIZ
0000E8r 3  85 rr        	sta z80_d
0000EAr 3  60           	rts
0000EBr 3               
0000EBr 3               ;----------------------------------------------------
0000EBr 3               ; Run the routine
0000EBr 3               ;----------------------------------------------------
0000EBr 3               
0000EBr 3               prosh2:
0000EBr 3  0A           	asl a 			; 2 bytes per address.
0000ECr 3  A8           	tay
0000EDr 3  B9 rr rr     	lda shrptr,y
0000F0r 3  85 rr        	sta z80_l
0000F2r 3  B9 rr rr     	lda shrptr+1,y 		; fetch high byte from table.
0000F5r 3  85 rr        	sta z80_h
0000F7r 3  6C rr rr     	jmp (z80_hl) 		; jump to routine.
0000FAr 3               
0000FAr 3               ;----------------------------------------------------
0000FAr 3               ; Paricle routine table
0000FAr 3               ;----------------------------------------------------
0000FAr 3               
0000FAr 3  rr rr        shrptr:	.word laser		; laser.
0000FCr 3  rr rr        	.word trail		; vapour trail.
0000FEr 3  rr rr        	.word shrap		; shrapnel from explosion.
000100r 3  rr rr        	.word dotl		; horizontal starfield left.
000102r 3  rr rr        	.word dotr		; horizontal starfield right.
000104r 3  rr rr        	.word dotu		; vertical starfield up.
000106r 3  rr rr        	.word dotd		; vertical starfield down.
000108r 3  rr rr        	.word ptcusr		; user particle.
00010Ar 3               
00010Ar 3               ;----------------------------------------------------
00010Ar 3               ; Explosion shrapnel.
00010Ar 3               ;----------------------------------------------------
00010Ar 3               
00010Ar 3               shrap:
00010Ar 3  A0 01        	ldy #1
00010Cr 3  B1 rr        	lda (z80_ix),y 		; get the angle.
00010Er 3  18           	clc
00010Fr 3  69 rr        	adc #<shrsin		; shrapnel sine table.
000111r 3  85 rr        	sta z80_l
000113r 3  A9 rr        	lda #>shrsin
000115r 3  69 00        	adc #0
000117r 3  85 rr        	sta z80_h
000119r 3               
000119r 3  A0 00        	ldy #0
00011Br 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
00011Dr 3  85 rr        	sta z80_e
00011Fr 3  E6 rr        	inc z80_l 		; next byte of table.
000121r 3  D0 02        	bne :+
000123r 3  E6 rr        	inc z80_h
000125r 3               :
000125r 3  A0 00        	ldy #0
000127r 3  B1 rr        	lda (z80_hl),y		; fetch value from table.
000129r 3  85 rr        	sta z80_d
00012Br 3  E6 rr        	inc z80_l		; next byte of table.
00012Dr 3  D0 02        	bne :+
00012Fr 3  E6 rr        	inc z80_h
000131r 3               :
000131r 3  A0 00        	ldy #0
000133r 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000135r 3  85 rr        	sta z80_c
000137r 3  E6 rr        	inc z80_l 		; next byte of table.
000139r 3  D0 02        	bne :+
00013Br 3  E6 rr        	inc z80_h
00013Dr 3               :
00013Dr 3  A0 00        	ldy #0
00013Fr 3  B1 rr        	lda (z80_hl),y 		; fetch value from table.
000141r 3  85 rr        	sta z80_b
000143r 3               
000143r 3  A0 02        	ldy #2
000145r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in hl.
000147r 3  18           	clc
000148r 3  65 rr        	adc z80_e		; add sine lb
00014Ar 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
00014Cr 3  A0 03        	ldy #3
00014Er 3  B1 rr        	lda (z80_ix),y
000150r 3  65 rr        	adc z80_d		; add sine hb
000152r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
000154r 3               
000154r 3  A0 04        	ldy #4
000156r 3  B1 rr        	lda (z80_ix),y	 	; y coordinate in hl.
000158r 3  18           	clc
000159r 3  65 rr        	adc z80_c		; add cosine lb
00015Br 3  91 rr        	sta (z80_ix),y		; store new coordinate lb.
00015Dr 3  A0 05        	ldy #5
00015Fr 3  B1 rr        	lda (z80_ix),y
000161r 3  65 rr        	adc z80_b		; add cosine lb
000163r 3  91 rr        	sta (z80_ix),y		; store new coordinate hb.
000165r 3               
000165r 3  60           	rts
000166r 3               
000166r 3               ;----------------------------------------------------
000166r 3               ; Move dots
000166r 3               ;----------------------------------------------------
000166r 3               
000166r 3               dotl:
000166r 3  A0 05        	ldy #5
000168r 3  B1 rr        	lda (z80_ix),y
00016Ar 3  38           	sec
00016Br 3  E9 01        	sbc #1		 	; move left.
00016Dr 3  91 rr        	sta (z80_ix),y
00016Fr 3  60           	rts
000170r 3               dotr:
000170r 3  A0 05        	ldy #5
000172r 3  B1 rr        	lda (z80_ix),y
000174r 3  18           	clc
000175r 3  69 01        	adc #1		 	; move left.
000177r 3  91 rr        	sta (z80_ix),y
000179r 3  60           	rts
00017Ar 3               dotu:
00017Ar 3  A0 03        	ldy #3
00017Cr 3  B1 rr        	lda (z80_ix),y
00017Er 3  38           	sec
00017Fr 3  E9 01        	sbc #1		 	; move up.
000181r 3  91 rr        	sta (z80_ix),y
000183r 3  60           	rts
000184r 3               dotd:
000184r 3  A0 03        	ldy #3
000186r 3  B1 rr        	lda (z80_ix),y
000188r 3  18           	clc
000189r 3  69 01        	adc #1			; move down.
00018Br 3  91 rr        	sta (z80_ix),y
00018Dr 3  60           	rts
00018Er 3               
00018Er 3               ;----------------------------------------------------
00018Er 3               ; Check if coordinates are ok before redrawing at new position.
00018Er 3               ;
00018Er 3               ; left:   X>L		X=L	Ok
00018Er 3               ; right:  R+15>X	X=R	Ok
00018Er 3               ; top:    Y>T		Y=T	Ok
00018Er 3               ; bottom: B+15>Y	Y=B	Ok
00018Er 3               ;----------------------------------------------------
00018Er 3               
00018Er 3               chkxy:
00018Er 3               
00018Er 3               ; top:    Y>T		Y=T	Ok
00018Er 3               
00018Er 3  A0 03        	ldy #3
000190r 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
000192r 3  CD rr rr     	cmp wntopx		; window top.
000195r 3  B0 03        	bcs :+			; compare with top window limit.
000197r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
00019Ar 3               :
00019Ar 3               ; left:   X>L		X=L	Ok
00019Ar 3               
00019Ar 3  A0 05        	ldy #5
00019Cr 3  B1 rr        	lda (z80_ix),y	 	; fetch shrapnel coordinate.
00019Er 3  CD rr rr     	cmp wnlftx		; left edge.
0001A1r 3  B0 03        	bcs :+			; compare with left window limit.
0001A3r 3  4C rr rr     	jmp kilshr		; out of window, kill shrapnel.
0001A6r 3               :
0001A6r 3               ; bottom: B+15>Y	Y=B	Ok
0001A6r 3               
0001A6r 3  AD rr rr     	lda wnbotx		; point to bottom.
0001A9r 3  18           	clc
0001AAr 3  69 0F        	adc #15
0001ACr 3  A0 03        	ldy #3
0001AEr 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001B0r 3  B0 03        	bcs :+			; compare with shrapnel x coordinate.
0001B2r 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel..
0001B5r 3               :
0001B5r 3               ; right:  R+15>X	X=R	Ok
0001B5r 3               
0001B5r 3  AD rr rr     	lda wnrgtx		; point to right edge.
0001B8r 3  18           	clc
0001B9r 3  69 0F        	adc #15
0001BBr 3  A0 05        	ldy #5
0001BDr 3  D1 rr        	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0001BFr 3  B0 03        	bcs :+			; compare with window limit.
0001C1r 3  4C rr rr     	jmp kilshr		; off screen, kill shrapnel.
0001C4r 3               :
0001C4r 3               
0001C4r 3               ;----------------------------------------------------
0001C4r 3               ; Drop through.
0001C4r 3               ; Display shrapnel.
0001C4r 3               ;----------------------------------------------------
0001C4r 3               
0001C4r 3               plot:
0001C4r 3  A0 03        	ldy #3
0001C6r 3  B1 rr        	lda (z80_ix),y		; y integer.
0001C8r 3  85 rr        	sta dispy	 	; workspace coordinates.
0001CAr 3  A0 05        	ldy #5
0001CCr 3  B1 rr        	lda (z80_ix),y	 	; x integer.
0001CEr 3  85 rr        	sta dispx 		; workspace coordinates.
0001D0r 3               
0001D0r 3  A0 00        	ldy #0
0001D2r 3  B1 rr        	lda (z80_ix),y 		; type.
0001D4r 3  D0 03        	bne :+			; is it a laser?
0001D6r 3  4C rr rr     	jmp plot1 		; yes, draw laser instead.
0001D9r 3               :
0001D9r 3               plot0:
0001D9r 3  A5 rr        	lda dispx		; which pixel within byte do we
0001DBr 3  29 07        	and #7			; want to set first?
0001DDr 3  A8           	tay
0001DEr 3  B9 rr rr     	lda dots,y 		; table of small pixel positions.
0001E1r 3  85 rr        	sta z80_e 		; get value.
0001E3r 3               
0001E3r 3  20 rr rr     	jsr scadd 		; screen address.
0001E6r 3  A0 00        	ldy #0
0001E8r 3  B1 rr        	lda (scraddr),y		; see what's already there.
0001EAr 3  45 rr        	eor z80_e
0001ECr 3  91 rr        	sta (scraddr),y 	; put back on screen.
0001EEr 3  60           	rts
0001EFr 3               
0001EFr 3               plot1:
0001EFr 3  20 rr rr     	jsr scadd 		; screen address.
0001F2r 3  A0 00        	ldy #0
0001F4r 3  B1 rr        	lda (scraddr),y 	; fetch byte there.
0001F6r 3  49 FF        	eor #255 		; toggle all bits.
0001F8r 3  91 rr        	sta (scraddr),y 	; new byte.
0001FAr 3  60           	rts
0001FBr 3               
0001FBr 3               ;----------------------------------------------------
0001FBr 3               ; Switch off shrapnel
0001FBr 3               ;----------------------------------------------------
0001FBr 3               
0001FBr 3               kilshr:
0001FBr 3  A9 80        	lda #128
0001FDr 3  A0 00        	ldy #0
0001FFr 3  91 rr        	sta (z80_ix),y	; switch off shrapnel.
000201r 3  60           	rts
000202r 3               
000202r 3               ;----------------------------------------------------
000202r 3               ; Sine/cosine table
000202r 3               ;----------------------------------------------------
000202r 3               
000202r 3  00 00 00 04  shrsin:	.word 0,1024,391,946,724,724,946,391
000206r 3  87 01 B2 03  
00020Ar 3  D4 02 D4 02  
000212r 3  00 04 00 00  	.word 1024,0,946,65144,724,64811,391,64589
000216r 3  B2 03 78 FE  
00021Ar 3  D4 02 2B FD  
000222r 3  00 00 00 FC  	.word 0,64512,65144,64589,64811,64811,64589,65144
000226r 3  78 FE 4D FC  
00022Ar 3  2B FD 2B FD  
000232r 3  00 FC 00 00  	.word 64512,0,64589,391,64811,724,65144,946
000236r 3  4D FC 87 01  
00023Ar 3  2B FD D4 02  
000242r 3               
000242r 3               ;----------------------------------------------------
000242r 3               ; Create trail
000242r 3               ;----------------------------------------------------
000242r 3               
000242r 3               trail:
000242r 3  A0 01        	ldy #1
000244r 3  B1 rr        	lda (z80_ix),y 	; time remaining.
000246r 3  38           	sec
000247r 3  E9 01        	sbc #1
000249r 3  91 rr        	sta (z80_ix),y
00024Br 3  D0 03        	bne :+
00024Dr 3  4C rr rr     	jmp trailk		; time to switch it off.
000250r 3               :
000250r 3  20 rr rr     	jsr qrand		; get a random number.
000253r 3  4A           	lsr a 			; x or y axis?
000254r 3  90 03        	bcc :+
000256r 3  4C rr rr     	jmp trailv		; use y.
000259r 3               :
000259r 3               ; Trail horizontal
000259r 3               
000259r 3  4A           	lsr a 			; which direction?
00025Ar 3  90 03        	bcc :+
00025Cr 3  4C rr rr     	jmp traill		; go left.
00025Fr 3               :
00025Fr 3               ; Trail right
00025Fr 3               
00025Fr 3  A0 05        	ldy #5
000261r 3  B1 rr        	lda (z80_ix),y
000263r 3  18           	clc
000264r 3  69 01        	adc #1	 		; go right.
000266r 3  91 rr        	sta (z80_ix),y
000268r 3  60           	rts
000269r 3               
000269r 3               ; Trail left
000269r 3               
000269r 3               traill:
000269r 3  A0 05        	ldy #5
00026Br 3  B1 rr        	lda (z80_ix),y
00026Dr 3  38           	sec
00026Er 3  E9 01        	sbc #1 			; go left.
000270r 3  91 rr        	sta (z80_ix),y
000272r 3  60           	rts
000273r 3               
000273r 3               ; Trail vertical
000273r 3               
000273r 3               trailv:
000273r 3  4A           	lsr a		 	; which direction?
000274r 3  90 03        	bcc :+
000276r 3  4C rr rr     	jmp trailu		; go up.
000279r 3               :
000279r 3               ; Trail down
000279r 3               
000279r 3  A0 03        	ldy #3
00027Br 3  B1 rr        	lda (z80_ix),y
00027Dr 3  18           	clc
00027Er 3  69 01        	adc #1 			; go down.
000280r 3  91 rr        	sta (z80_ix),y
000282r 3  60           	rts
000283r 3               
000283r 3               ; Trail up
000283r 3               
000283r 3               trailu:
000283r 3  A0 03        	ldy #3
000285r 3  B1 rr        	lda (z80_ix),y
000287r 3  38           	sec
000288r 3  E9 01        	sbc #1 			; go up.
00028Ar 3  91 rr        	sta (z80_ix),y
00028Cr 3  60           	rts
00028Dr 3               
00028Dr 3               ; Kill trail
00028Dr 3               
00028Dr 3               trailk:
00028Dr 3  A9 C8        	lda #200		; set off-screen to kill vapour trail.
00028Fr 3  A0 03        	ldy #3
000291r 3  91 rr        	sta (z80_ix),y
000293r 3  60           	rts
000294r 3               
000294r 3               ;----------------------------------------------------
000294r 3               ; Create laser beam
000294r 3               ;----------------------------------------------------
000294r 3               
000294r 3               laser:
000294r 3  A0 01        	ldy #1
000296r 3  B1 rr        	lda (z80_ix),y 		; direction.
000298r 3  6A           	ror a 			; left or right?
000299r 3  B0 03        	bcs :+
00029Br 3  4C rr rr     	jmp laserl		; move left.
00029Er 3               :
00029Er 3               ; Laser right
00029Er 3               
00029Er 3  A9 08        	lda #8			; distance to travel.
0002A0r 3  85 rr        	sta z80_b
0002A2r 3  4C rr rr     	jmp laserm		; move laser.
0002A5r 3               
0002A5r 3               ; Laser left
0002A5r 3               
0002A5r 3               laserl:
0002A5r 3  A9 F8        	lda #248		; distance to travel.
0002A7r 3  85 rr        	sta z80_b
0002A9r 3               laserm:
0002A9r 3  A0 05        	ldy #5
0002ABr 3  B1 rr        	lda (z80_ix),y		; x position.
0002ADr 3  18           	clc
0002AEr 3  65 rr        	adc z80_b		; add distance.
0002B0r 3  91 rr        	sta (z80_ix),y		; set new x coordinate.
0002B2r 3               
0002B2r 3               ; Test new block.
0002B2r 3               
0002B2r 3  85 rr        	sta dispx 		; set x for block collision detection purposes.
0002B4r 3  A0 03        	ldy #3
0002B6r 3  B1 rr        	lda (z80_ix),y 		; get y.
0002B8r 3  85 rr        	sta dispy		; set coordinate for collision test.
0002BAr 3  20 rr rr     	jsr tstbl 		; get block type there.
0002BDr 3  C9 02        	cmp #WALL		; is it solid?
0002BFr 3  D0 03        	bne :+
0002C1r 3  4C rr rr     	jmp trailk		; yes, it cannot pass.
0002C4r 3               :
0002C4r 3               .if pflag .or dflag
0002C4r 3  C9 04                cmp #FODDER             ; is it fodder?
0002C6r 3  D0 06                bne :+
0002C8r 3  20 rr rr             jsr fdchk               ; remove fodder block.
0002CBr 3  4C rr rr             jmp trailk              ; destroy laser.
0002CEr 3               :
0002CEr 3               .endif
0002CEr 3  60           	rts
0002CFr 3               
0002CFr 3               ;----------------------------------------------------
0002CFr 3               ; Dots mask
0002CFr 3               ;----------------------------------------------------
0002CFr 3               
0002CFr 3  80 40 20 10  dots:	.byte 128,64,32,16,8,4,2,1
0002D3r 3  08 04 02 01  
0002D7r 3               
0002D7r 3               
0002D7r 3               ;----------------------------------------------------
0002D7r 3               ; Plot, preserving de.
0002D7r 3               ;----------------------------------------------------
0002D7r 3               
0002D7r 3               plotde:
0002D7r 3  A5 rr        	lda z80_d 		; put de on stack.
0002D9r 3  48           	pha
0002DAr 3  A5 rr        	lda z80_e
0002DCr 3  48           	pha
0002DDr 3               
0002DDr 3  20 rr rr     	jsr plot 		; plot pixel.
0002E0r 3               
0002E0r 3  68           	pla			; restore de from stack.
0002E1r 3  85 rr        	sta z80_e
0002E3r 3  68           	pla
0002E4r 3  85 rr        	sta z80_d
0002E6r 3               
0002E6r 3  60           	rts
0002E7r 3               
0002E7r 3               ;----------------------------------------------------
0002E7r 3               ; Shoot a laser.
0002E7r 3               ;----------------------------------------------------
0002E7r 3               
0002E7r 3               shoot:
0002E7r 3  85 rr        	sta z80_c		; store direction in c register.
0002E9r 3  A0 08        	ldy #8
0002EBr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0002EDr 3  18           	clc
0002EEr 3               shoot1:
0002EEr 3  69 07        	adc #(SPR_HGT/2-1)	; down 7 pixels.
0002F0r 3  85 rr        	sta z80_l 		; puty y coordinate in l.
0002F2r 3               
0002F2r 3  A0 09        	ldy #9
0002F4r 3  B1 rr        	lda (z80_ix),y 		; x coordinate in h.
0002F6r 3  85 rr        	sta z80_h
0002F8r 3               
0002F8r 3  A5 rr        	lda z80_i		; store pointer to sprite.
0002FAr 3  48           	pha
0002FBr 3  A5 rr        	lda z80_x
0002FDr 3  48           	pha
0002FEr 3               
0002FEr 3  20 rr rr     	jsr fpslot 		; find particle slot.
000301r 3  B0 03        	bcs :+
000303r 3  4C rr rr     	jmp vapou2		; failed, restore ix.
000306r 3               :
000306r 3  A9 00        	lda #0
000308r 3  A0 00        	ldy #0
00030Ar 3  91 rr        	sta (z80_ix),y 		; set up a laser.
00030Cr 3               
00030Cr 3  A5 rr        	lda z80_c
00030Er 3  A0 01        	ldy #1
000310r 3  91 rr        	sta (z80_ix),y 		; set the direction.
000312r 3               
000312r 3  A5 rr        	lda z80_l
000314r 3  A0 03        	ldy #3
000316r 3  91 rr        	sta (z80_ix),y		; set y coordinate.
000318r 3               
000318r 3  66 rr        	ror z80_c		; check direction we want.
00031Ar 3  90 03        	bcc :+
00031Cr 3  4C rr rr     	jmp shootr		; shoot right.
00031Fr 3               :
00031Fr 3  A5 rr        	lda z80_h		; X position.
000321r 3               shoot0:
000321r 3  29 F8        	and #248		; align on character boundary.
000323r 3  A0 05        	ldy #5
000325r 3  91 rr        	sta (z80_ix),y		; set x coordinate.
000327r 3  4C rr rr     	jmp vapou0 		; draw first image.
00032Ar 3               shootr:
00032Ar 3  A5 rr        	lda z80_h		; x position.
00032Cr 3  18           	clc
00032Dr 3  69 0F        	adc #15			; look right.
00032Fr 3  4C rr rr     	jmp shoot0		; align and continue.
000332r 3               
000332r 3               ;----------------------------------------------------
000332r 3               ; Create a bit of vapour trail.
000332r 3               ;----------------------------------------------------
000332r 3               
000332r 3               vapour:
000332r 3  A5 rr        	lda z80_i		; store pointer to sprite.
000334r 3  48           	pha
000335r 3  A5 rr        	lda z80_x
000337r 3  48           	pha
000338r 3               
000338r 3  A0 08        	ldy #8
00033Ar 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00033Cr 3  18           	clc
00033Dr 3               vapou3:
00033Dr 3  69 07        	adc #(SPR_HGT/2-1)	; mid-point of sprite.
00033Fr 3  85 rr        	sta z80_l
000341r 3               
000341r 3  A0 09        	ldy #9
000343r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000345r 3  69 07        	adc #7
000347r 3  85 rr        	sta z80_h
000349r 3               
000349r 3  20 rr rr     	jsr fpslot 		; find particle slot.
00034Cr 3  90 03        	bcc :+
00034Er 3  4C rr rr     	jmp vapou1		; no, we can use it.
000351r 3               :
000351r 3               vapou2:
000351r 3  68           	pla
000352r 3  85 rr        	sta z80_x
000354r 3  68           	pla
000355r 3  85 rr        	sta z80_i
000357r 3  60           	rts
000358r 3               vapou1:
000358r 3  A5 rr        	lda z80_l
00035Ar 3  A0 03        	ldy #3
00035Cr 3  91 rr        	sta (z80_ix),y		; set up y.
00035Er 3               
00035Er 3  A5 rr        	lda z80_h
000360r 3  A0 05        	ldy #5
000362r 3  91 rr        	sta (z80_ix),y 		; set up x coordinate.
000364r 3               
000364r 3  20 rr rr     	jsr qrand		; get quick random number.
000367r 3  29 0F        	and #15			; random time.
000369r 3  18           	clc
00036Ar 3  69 0F        	adc #15			; minimum time on screen.
00036Cr 3  A0 01        	ldy #1
00036Er 3  91 rr        	sta (z80_ix),y		; set time on screen.
000370r 3               
000370r 3  A9 01        	lda #1
000372r 3  A0 00        	ldy #0
000374r 3  91 rr        	sta (z80_ix),y		; define particle as vapour trail.
000376r 3               vapou0:
000376r 3  20 rr rr     	jsr chkxy		; plot first position.
000379r 3  4C rr rr     	jmp vapou2
00037Cr 3               
00037Cr 3               ;----------------------------------------------------
00037Cr 3               ; Create a user particle.
00037Cr 3               ;----------------------------------------------------
00037Cr 3               
00037Cr 3               ptusr:
00037Cr 3  85 rr        	sta z80_f		; store timer.
00037Er 3               
00037Er 3  A0 08        	ldy #8
000380r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000382r 3  18           	clc
000383r 3  69 07        	adc #7			; mid-point of sprite.
000385r 3  85 rr        	sta z80_l
000387r 3               
000387r 3  A0 09        	ldy #9
000389r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00038Br 3  18           	clc
00038Cr 3  69 07        	adc #7			; mid-point of sprite.
00038Er 3  85 rr        	sta z80_h
000390r 3               
000390r 3  20 rr rr     	jsr fpslot 		; find particle slot.
000393r 3  B0 01        	bcs ptusr1
000395r 3  60           	rts 			; out of slots, can't generate anything.
000396r 3               ptusr1:
000396r 3  A5 rr        	lda z80_l
000398r 3  A0 03        	ldy #3
00039Ar 3  91 rr        	sta (z80_ix),y 		; set up y.
00039Cr 3               
00039Cr 3  A5 rr        	lda z80_h
00039Er 3  A0 05        	ldy #5
0003A0r 3  91 rr        	sta (z80_ix),y		; set up x coordinate.
0003A2r 3               
0003A2r 3  A5 rr        	lda z80_f 		; restore timer.
0003A4r 3  A0 01        	ldy #1
0003A6r 3  91 rr        	sta (z80_ix),y		; set time on screen.
0003A8r 3               
0003A8r 3  A9 07        	lda #7
0003AAr 3  A0 00        	ldy #0
0003ACr 3  91 rr        	sta (z80_ix),y		; define particle as user particle.
0003AEr 3               
0003AEr 3  4C rr rr     	jmp chkxy		; plot first position.
0003B1r 3               
0003B1r 3               ;----------------------------------------------------
0003B1r 3               ; Create a vertical or horizontal star.
0003B1r 3               ;----------------------------------------------------
0003B1r 3               
0003B1r 3               star:
0003B1r 3  A5 rr        	lda z80_i		; store pointer to sprite.
0003B3r 3  48           	pha
0003B4r 3  A5 rr        	lda z80_x
0003B6r 3  48           	pha
0003B7r 3               
0003B7r 3  20 rr rr     	jsr fpslot 		; find particle slot.
0003BAr 3  B0 07        	bcs star7		; found one we can use.
0003BCr 3               star0:
0003BCr 3  68           	pla 			; restore sprite pointer.
0003BDr 3  85 rr        	sta z80_x
0003BFr 3  68           	pla
0003C0r 3  85 rr        	sta z80_i
0003C2r 3  60           	rts 			; out of slots, can't generate anything.
0003C3r 3               star7:
0003C3r 3  A5 rr        	lda z80_c		; direction.
0003C5r 3  29 03        	and #3 			; is it left?
0003C7r 3  D0 03        	bne :+
0003C9r 3  4C rr rr     	jmp star1 		; yes, it's left.
0003CCr 3               :
0003CCr 3  C9 01        	cmp #1 			; is it right?
0003CEr 3  D0 03        	bne :+
0003D0r 3  4C rr rr     	jmp star2 		; yes, it's right.
0003D3r 3               :
0003D3r 3  C9 02        	cmp #2 			; is it up?
0003D5r 3  D0 03        	bne :+
0003D7r 3  4C rr rr     	jmp star3 		; yes, it's up.
0003DAr 3               :
0003DAr 3  AC rr rr     	ldy wntopx 		; get edge of screen.
0003DDr 3  C8           	iny			; down one pixel.
0003DEr 3  98           	tya
0003DFr 3               star8:
0003DFr 3  A0 03        	ldy #3
0003E1r 3  91 rr        	sta (z80_ix),y 		; set y coord.
0003E3r 3  20 rr rr     	jsr qrand 		; get quick random number.
0003E6r 3               star9:
0003E6r 3  A0 05        	ldy #5
0003E8r 3  91 rr        	sta (z80_ix),y		; set x position.
0003EAr 3               
0003EAr 3  A5 rr        	lda z80_c		; direction.
0003ECr 3  29 03        	and #3			; zero to three.
0003EEr 3  18           	clc
0003EFr 3  69 03        	adc #3			; 3 to 6 for starfield.
0003F1r 3  A0 00        	ldy #0
0003F3r 3  91 rr        	sta (z80_ix),y		; define particle as star.
0003F5r 3  20 rr rr     	jsr chkxy		; plot first position.
0003F8r 3  4C rr rr     	jmp star0
0003FBr 3               star1:
0003FBr 3  20 rr rr     	jsr qrand		; get quick random number.
0003FEr 3  A0 03        	ldy #3
000400r 3  91 rr        	sta (z80_ix),y 		; set y coord.
000402r 3               
000402r 3  AD rr rr     	lda wnrgtx 		; get edge of screen.
000405r 3  18           	clc
000406r 3  69 0F        	adc #15			; add width of sprite minus 1.
000408r 3  4C rr rr     	jmp star9
00040Br 3               star2:
00040Br 3  20 rr rr     	jsr qrand 		; get quick random number.
00040Er 3  A0 03        	ldy #3
000410r 3  91 rr        	sta (z80_ix),y		; set y coord.
000412r 3               
000412r 3  AD rr rr     	lda wnlftx		; get edge of screen.
000415r 3  4C rr rr     	jmp star9
000418r 3               star3:
000418r 3  AD rr rr     	lda wnbotx 		; get edge of screen.
00041Br 3  18           	clc
00041Cr 3  69 0F        	adc #15 		; height of sprite minus one pixel.
00041Er 3  4C rr rr     	jmp star8
000421r 3               
000421r 3               ;----------------------------------------------------
000421r 3               ; Find particle slot for lasers or vapour trail.
000421r 3               ; can't use alternate accumulator.
000421r 3               ;----------------------------------------------------
000421r 3               
000421r 3               fpslot:
000421r 3  A9 00        	lda #<SHRAPN 		; shrapnel table.
000423r 3  85 rr        	sta z80_x
000425r 3  A9 09        	lda #>SHRAPN
000427r 3  85 rr        	sta z80_i
000429r 3               
000429r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
00042Br 3  85 rr        	sta z80_b
00042Dr 3               fpslt0:
00042Dr 3  A0 00        	ldy #0
00042Fr 3  B1 rr        	lda (z80_ix),y		; get type.
000431r 3  0A           	asl a  			; is this slot in use?
000432r 3  90 01        	bcc :+
000434r 3  60           	rts			; no, we can use it.
000435r 3               :
000435r 3  18           	clc			; point to more shrapnel.
000436r 3  A5 rr        	lda z80_x
000438r 3  69 06        	adc #SHRSIZ
00043Ar 3  85 rr        	sta z80_x
00043Cr 3  90 02        	bcc :+
00043Er 3  E6 rr        	inc z80_i
000440r 3               :
000440r 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
000442r 3  D0 E9        	bne fpslt0
000444r 3               
000444r 3  18           	clc
000445r 3  60           	rts 			; out of slots, can't generate anything.
000446r 3               
000446r 3               ;----------------------------------------------------
000446r 3               ; Create an explosion at sprite position.
000446r 3               ;----------------------------------------------------
000446r 3               
000446r 3               explod:
000446r 3  85 rr        	sta z80_c 		; particles to create.
000448r 3               
000448r 3  A5 rr        	lda z80_i 		; store pointer to sprite.
00044Ar 3  48           	pha
00044Br 3  A5 rr        	lda z80_x
00044Dr 3  48           	pha
00044Er 3               
00044Er 3  A0 08        	ldy #8
000450r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000452r 3  85 rr        	sta z80_l
000454r 3  A0 09        	ldy #9
000456r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000458r 3  85 rr        	sta z80_h
00045Ar 3               
00045Ar 3  A9 00        	lda #<SHRAPN		; shrapnel table.
00045Cr 3  85 rr        	sta z80_x
00045Er 3  A9 09        	lda #>SHRAPN
000460r 3  85 rr        	sta z80_i
000462r 3               
000462r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
000464r 3  85 rr        	sta explcnt
000466r 3               expld0:
000466r 3  A0 00        	ldy #0
000468r 3  B1 rr        	lda (z80_ix),y		; get type.
00046Ar 3  0A           	asl a 			; is this slot in use?
00046Br 3  B0 16        	bcs expld1		; no, we can use it.
00046Dr 3               expld2:
00046Dr 3  18           	clc
00046Er 3  A5 rr        	lda z80_x
000470r 3  69 06        	adc #SHRSIZ
000472r 3  85 rr        	sta z80_x
000474r 3  90 02        	bcc :+
000476r 3  E6 rr        	inc z80_i
000478r 3               :
000478r 3  C6 rr        	dec explcnt		; repeat for all shrapnel.
00047Ar 3  D0 EA        	bne expld0
00047Cr 3               expld3:
00047Cr 3  68           	pla			; restore sprite pointer.
00047Dr 3  85 rr        	sta z80_x
00047Fr 3  68           	pla
000480r 3  85 rr        	sta z80_i
000482r 3  60           	rts 			; out of slots, can't generate any more.
000483r 3               
000483r 3               expld1:
000483r 3  A5 rr        	lda z80_c		; shrapnel counter.
000485r 3  29 0F        	and #15			; 0 to 15.
000487r 3  18           	clc			; add to x.
000488r 3  65 rr        	adc z80_l
00048Ar 3  A0 03        	ldy #3
00048Cr 3  91 rr        	sta (z80_ix),y		; y coord.
00048Er 3               
00048Er 3  A5 rr        	lda seed3 		; crap random number.
000490r 3  29 0F        	and #15			; 0 to 15.
000492r 3  18           	clc 			; add to y.
000493r 3  65 rr        	adc z80_h
000495r 3  A0 05        	ldy #5
000497r 3  91 rr        	sta (z80_ix),y		; x coord.
000499r 3               
000499r 3  A9 02        	lda #2
00049Br 3  A0 00        	ldy #0
00049Dr 3  91 rr        	sta (z80_ix),y		; switch it on.
00049Fr 3               
00049Fr 3  20 rr rr     	jsr chkxy		; plot first position.
0004A2r 3  20 rr rr     	jsr qrand		; quick random angle.
0004A5r 3  29 3C        	and #60 		; keep within range.
0004A7r 3  A0 01        	ldy #1
0004A9r 3  91 rr        	sta (z80_ix),y		; angle.
0004ABr 3               
0004ABr 3  C6 rr        	dec z80_c		; one less piece of shrapnel to generate.
0004ADr 3  D0 BE        	bne expld2 		; back to main explosion loop.
0004AFr 3  4C rr rr     	jmp expld3 		; restore sprite pointer and exit.
0004B2r 3               
0004B2r 3               ;----------------------------------------------------
0004B2r 3               ; Quick random
0004B2r 3               ;----------------------------------------------------
0004B2r 3               
0004B2r 3               qrand:
0004B2r 3  20 rr rr     	jsr random		; r register.
0004B5r 3  45 rr        	eor seed3		; combine with seed.
0004B7r 3  85 rr        	sta seed3 		; new seed.
0004B9r 3  60           	rts
0004BAr 3               
0004BAr 3               ;----------------------------------------------------
0004BAr 3               ; Display all shrapnel.
0004BAr 3               ;----------------------------------------------------
0004BAr 3               
0004BAr 3               dshrp:
0004BAr 3  A9 rr        	lda #<plotde		; display routine.
0004BCr 3  8D rr rr     	sta proshx+1
0004BFr 3  A9 rr        	lda #>plotde
0004C1r 3  8D rr rr     	sta proshx+2
0004C4r 3  20 rr rr     	jsr proshr		; process shrapnel.
0004C7r 3               
0004C7r 3  A9 rr        	lda #<prosh1		; processing routine.
0004C9r 3  8D rr rr     	sta proshx+1
0004CCr 3  A9 rr        	lda #>prosh1
0004CEr 3  8D rr rr     	sta proshx+2
0004D1r 3  60           	rts
0004D2r 3               
0004D2r 3               ;------------------------------------------------------
0004D2r 3               ; Particle engine.
0004D2r 3               ;
0004D2r 3               ; Init particle data for 55 particles in SHRAPN table.
0004D2r 3               ; Every particle has 6 bytes.
0004D2r 3               ;
0004D2r 3               ; global:	-
0004D2r 3               ; local:	x,y,hl
0004D2r 3               ; calls:	-
0004D2r 3               ;------------------------------------------------------
0004D2r 3               
0004D2r 3               inishr:
0004D2r 3  A9 00        	lda #<SHRAPN 		; table.
0004D4r 3  85 rr        	sta z80_l
0004D6r 3  A9 09        	lda #>SHRAPN
0004D8r 3  85 rr        	sta z80_h
0004DAr 3               
0004DAr 3  A0 00        	ldy #0
0004DCr 3  A2 37        	ldx #NUMSHR		; shrapnel pieces to process.
0004DEr 3               inish0:
0004DEr 3  A9 FF        	lda #255 		; kill the shrapnel.
0004E0r 3  91 rr        	sta (z80_hl),y
0004E2r 3               
0004E2r 3  18           	clc 			; point there.
0004E3r 3  A5 rr        	lda z80_l
0004E5r 3  69 06        	adc #SHRSIZ		; distance to next.
0004E7r 3  85 rr        	sta z80_l
0004E9r 3  90 02        	bcc :+
0004EBr 3  E6 rr        	inc z80_h
0004EDr 3               :
0004EDr 3  CA           	dex
0004EEr 3  D0 EE        	bne inish0 		; round again.
0004F0r 3  60           	rts
0004F1r 3               
0004F1r 3               ;------------------------------------------------------
0004F1r 3               ; Check for collision between laser and sprite.
0004F1r 3               ;------------------------------------------------------
0004F1r 3               
0004F1r 3               lcol:
0004F1r 3  A9 00        	lda #<SHRAPN		; shrapnel table.
0004F3r 3  85 rr        	sta z80_l
0004F5r 3  A9 09        	lda #>SHRAPN
0004F7r 3  85 rr        	sta z80_h
0004F9r 3               
0004F9r 3  A9 37        	lda #NUMSHR		; number of pieces in table.
0004FBr 3  85 rr        	sta z80_b
0004FDr 3               lcol0:
0004FDr 3  A0 00        	ldy #0
0004FFr 3  B1 rr        	lda (z80_hl),y 		; get type.
000501r 3  F0 11        	beq lcol1		; yes, check collision.
000503r 3               lcol3:
000503r 3  18           	clc			; point to more shrapnel.
000504r 3  A5 rr        	lda z80_l
000506r 3  69 06        	adc #SHRSIZ
000508r 3  85 rr        	sta z80_l
00050Ar 3  90 02        	bcc :+
00050Cr 3  E6 rr        	inc z80_h
00050Er 3               :
00050Er 3  C6 rr        	dec z80_b		; repeat for all shrapnel.
000510r 3  D0 EB        	bne lcol0
000512r 3  18           	clc
000513r 3  60           	rts 			; no collision, carry not set.
000514r 3               lcol1:
000514r 3  A0 03        	ldy #3
000516r 3  B1 rr        	lda (z80_hl),y		; get y.
000518r 3  38           	sec
000519r 3  A0 08        	ldy #8
00051Br 3  F1 rr        	sbc (z80_ix),y		; subtract sprite y.
00051Dr 3               lcolh:
00051Dr 3  C9 10        	cmp #SPR_HGT 		; within range?
00051Fr 3  90 03        	bcc :+
000521r 3  4C rr rr     	jmp lcol2		; no, missed.
000524r 3               :
000524r 3  A0 05        	ldy #5
000526r 3  B1 rr        	lda (z80_hl),y 		; get x.
000528r 3  38           	sec
000529r 3  A0 09        	ldy #9
00052Br 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
00052Dr 3  C9 10        	cmp #16			; within range?
00052Fr 3  B0 03        	bcs :+
000531r 3  4C rr rr     	jmp lcol4 		; yes, collision occurred.
000534r 3               :
000534r 3               lcol2:
000534r 3  4C rr rr     	jmp lcol3
000537r 3               lcol4:
000537r 3  38           	sec
000538r 3  60           	rts 			; return with carry set for collision.
000539r 3               .endif
000539r 3               
000539r 3               ;------------------------------------------------------
000539r 3               ; Main game engine code starts here.
000539r 3               ; After initialisation, mloop is the main loop
000539r 3               ;------------------------------------------------------
000539r 3               
000539r 3               game:
000539r 3               
000539r 3               ; Set up screen address table.
000539r 3               
000539r 3               setsat:
000539r 3  A9 00        	lda #<CharAddress	; start of screen.
00053Br 3  85 rr        	sta scraddr
00053Dr 3  A9 10        	lda #>CharAddress
00053Fr 3  85 rr        	sta scraddr+1
000541r 3               
000541r 3  A0 00        	ldy #0			; vertical lines on screen.
000543r 3               setsa0:
000543r 3  A5 rr        	lda scraddr
000545r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
000548r 3  A5 rr        	lda scraddr+1
00054Ar 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
00054Dr 3  20 rr rr     	jsr nline		; next line down.
000550r 3  C8           	iny			; next position in table.
000551r 3  D0 F0        	bne setsa0
000553r 3               
000553r 3               ; Set up colour address table
000553r 3               
000553r 3               setsof:
000553r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
000555r 3  85 rr        	sta bufaddr
000557r 3  A9 96        	lda #>ColorAttr
000559r 3  85 rr        	sta bufaddr+1
00055Br 3               
00055Br 3  A0 00        	ldy #0			; vertical lines on screen.
00055Dr 3               setof0:
00055Dr 3  A5 rr        	lda bufaddr
00055Fr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
000562r 3  A5 rr        	lda bufaddr+1
000564r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
000567r 3  18           	clc			; next line down.
000568r 3  A5 rr        	lda bufaddr
00056Ar 3  69 16        	adc #ScrWidth
00056Cr 3  85 rr        	sta bufaddr
00056Er 3  90 02        	bcc :+
000570r 3  E6 rr        	inc bufaddr+1
000572r 3               :
000572r 3  C8           	iny			; next position in table.
000573r 3  C0 0B        	cpy #ScrHeight/2
000575r 3  D0 E6        	bne setof0
000577r 3               
000577r 3               ; Init graphics mode
000577r 3               
000577r 3  20 rr rr     	jsr init
00057Ar 3               
00057Ar 3               ; Init joysticks
00057Ar 3  20 rr rr     	jsr joyinit		; VIC20 joystick
00057Dr 3               
00057Dr 3               rpblc2:
00057Dr 3               .if pflag
00057Dr 3  20 rr rr     	jsr inishr 		; initialise particle engine.
000580r 3               .endif
000580r 3               evintr:
000580r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000583r 3               
000583r 3  A9 02        	lda #WALL 		; write default property.
000585r 3  A2 00        	ldx #0
000587r 3               clrmap:
000587r 3  9D 00 04     	sta MAP,x 		; block properties.
00058Ar 3  9D 00 05     	sta MAP+256,x
00058Dr 3  E8           	inx
00058Er 3  D0 F7        	bne clrmap
000590r 3               
000590r 3               .if oflag
000590r 3               	jsr iniob 		; initialise objects.
000590r 3               .endif
000590r 3  A9 00        	lda #0			; put zero in accumulator.
000592r 3  85 rr        	sta gamwon		; reset game won flag.
000594r 3               
000594r 3  20 rr rr     	jsr inisc 		; init the score.
000597r 3               mapst:
000597r 3  AD rr rr     	lda stmap 		; start position on map.
00059Ar 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
00059Dr 3               
00059Dr 3               inipbl:
00059Dr 3               .if aflag
00059Dr 3               	lda #<eop		; reset blockpointer
00059Dr 3               	sta pbptr
00059Dr 3               	lda #>eop
00059Dr 3               	sta pbptr+1
00059Dr 3               .endif
00059Dr 3  20 rr rr     	jsr initsc 		; set up first screen.
0005A0r 3               
0005A0r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
0005A2r 3  85 rr        	sta z80_x
0005A4r 3  A9 rr        	lda #>ssprit
0005A6r 3  85 rr        	sta z80_i
0005A8r 3               evini:
0005A8r 3  20 rr rr     	jsr evnt13 		; initialisation.
0005ABr 3               
0005ABr 3               ; Two restarts.
0005ABr 3               ; First restart - clear all sprites and initialise everything.
0005ABr 3               
0005ABr 3               rstrt:
0005ABr 3  20 rr rr     	jsr rsevt 		; restart events.
0005AEr 3  20 rr rr     	jsr xspr 		; clear sprite table.
0005B1r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0005B4r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
0005B7r 3  4C rr rr     	jmp rstrt0
0005BAr 3               
0005BAr 3               ; Second restart - clear all but player, and don't initialise him.
0005BAr 3               
0005BAr 3               rstrtn:
0005BAr 3  20 rr rr     	jsr rsevt		; restart events.
0005BDr 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
0005C0r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
0005C3r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
0005C6r 3               
0005C6r 3               ; Set up the player and/or enemy sprites.
0005C6r 3               
0005C6r 3               rstrt0:
0005C6r 3  A9 00        	lda #0 			; zero in accumulator.
0005C8r 3  85 rr        	sta nexlev 		; reset next level flag.
0005CAr 3  85 rr        	sta restfl 		; reset restart flag.
0005CCr 3  85 rr        	sta deadf 		; reset dead flag.
0005CEr 3               
0005CEr 3  20 rr rr     	jsr droom 		; show screen layout.
0005D1r 3               rpblc0:
0005D1r 3               .if pflag
0005D1r 3  20 rr rr     	jsr inishr 		; initialise particle engine.
0005D4r 3               .endif
0005D4r 3               .if aflag
0005D4r 3               	jsr rbloc		; draw blocks for this screen
0005D4r 3               .endif
0005D4r 3               .if oflag
0005D4r 3               	jsr shwob		; draw objects.
0005D4r 3               .endif
0005D4r 3               
0005D4r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0005D6r 3  85 rr        	sta z80_x
0005D8r 3  A9 rr        	lda #>sprtab
0005DAr 3  85 rr        	sta z80_i
0005DCr 3  20 rr rr     	jsr dspr 		; display sprites.
0005DFr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
0005E1r 3  85 rr        	sta z80_x
0005E3r 3  A9 rr        	lda #>(sprtab+TABSIZ)
0005E5r 3  85 rr        	sta z80_i
0005E7r 3  20 rr rr     	jsr dspr 		; display sprites.
0005EAr 3               mloop:
0005EAr 3  20 rr rr     	jsr vsync 		; synchronise with display.
0005EDr 3               
0005EDr 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
0005EFr 3  85 rr        	sta z80_x
0005F1r 3  A9 rr        	lda #>sprtab
0005F3r 3  85 rr        	sta z80_i
0005F5r 3  20 rr rr     	jsr dspr 		; display even sprites.
0005F8r 3               
0005F8r 3               ;	jsr plsnd 		; play sounds.
0005F8r 3  20 rr rr     	jsr vsync 		; synchronise with display.
0005FBr 3  20 rr rr     	jsr proshr
0005FEr 3               
0005FEr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000600r 3  85 rr        	sta z80_x
000602r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000604r 3  85 rr        	sta z80_i
000606r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000609r 3               
000609r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00060Br 3  85 rr        	sta z80_x
00060Dr 3  A9 rr        	lda #>(ssprit)
00060Fr 3  85 rr        	sta z80_i
000611r 3               evlp1:
000611r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000614r 3  20 rr rr     	jsr pspr 		; process sprites.
000617r 3               
000617r 3               ; Main loop events.
000617r 3               
000617r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000619r 3  85 rr        	sta z80_x
00061Br 3  A9 rr        	lda #>ssprit
00061Dr 3  85 rr        	sta z80_i
00061Fr 3               evlp2:
00061Fr 3  20 rr rr     	jsr evnt11 		; called once per main loop.
000622r 3               bsortx:
000622r 3  20 rr rr     	jsr bsort 		; sort sprites.
000625r 3               
000625r 3  A5 rr        	lda nexlev		; finished level flag.
000627r 3  D0 1F        	bne newlev		; is set, go to next level.
000629r 3  A5 rr        	lda gamwon		; finished game flag.
00062Br 3  D0 2A        	bne evwon		; is set, finish the game.
00062Dr 3  A5 rr        	lda restfl 		; finished level flag.
00062Fr 3  C9 01        	cmp #1			; has it been set?
000631r 3  D0 03        	bne :+
000633r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
000636r 3               :
000636r 3  C9 02        	cmp #2			; has it been set?
000638r 3  D0 03        	bne :+
00063Ar 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
00063Dr 3               :
00063Dr 3  A5 rr        	lda deadf 		; dead flag.
00063Fr 3  D0 1C        	bne pdead		; yes, player dead.
000641r 3               
000641r 3               ; back to start of main loop.
000641r 3               
000641r 3  E6 rr        	inc frmno
000643r 3  E6 rr        	inc clock
000645r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
000648r 3               
000648r 3               ;----------------------------------------------------------
000648r 3               ; Read blocks from list and update screen accordingly.
000648r 3               ;----------------------------------------------------------
000648r 3               
000648r 3               .if aflag
000648r 3               rbloc:
000648r 3               	lda #<eop		; reset blockpointer
000648r 3               	sta pbbuf
000648r 3               	lda #>eop
000648r 3               	sta pbbuf+1
000648r 3               
000648r 3               rbloc2:
000648r 3               	lda pbbuf			; check for last block
000648r 3               	cmp pbptr
000648r 3               	bne rbloc1
000648r 3               	lda pbbuf+1
000648r 3               	cmp pbptr+1
000648r 3               	bne rbloc1
000648r 3               	rts
000648r 3               rbloc1:
000648r 3               	ldy #0
000648r 3               	lda (pbbuf),y		; check if block for this scno
000648r 3               	cmp scno
000648r 3               	bne rbloc0		; if not, skip
000648r 3               	iny
000648r 3               	lda (pbbuf),y		; get y
000648r 3               	sta dispy
000648r 3               	iny
000648r 3               	lda (pbbuf),y		; get x
000648r 3               	sta dispx
000648r 3               	iny
000648r 3               	lda (pbbuf),y		; get blocknr
000648r 3               	jsr pattr2		; draw block
000648r 3               rbloc0:
000648r 3               	clc			; point to next block
000648r 3               	lda pbbuf
000648r 3               	adc #4
000648r 3               	sta pbbuf
000648r 3               	bcc rbloc2
000648r 3               	inc pbbuf+1
000648r 3               	jmp rbloc2
000648r 3               .endif
000648r 3               
000648r 3               ;----------------------------------------------------------
000648r 3               ; New level
000648r 3               ;----------------------------------------------------------
000648r 3               
000648r 3               newlev:
000648r 3  A5 rr        	lda scno 			; current screen.
00064Ar 3  18           	clc
00064Br 3  69 01        	adc #1				; next screen.
00064Dr 3  CD rr rr     	cmp numsc 			; total number of screens.
000650r 3  B0 05        	bcs evwon			; yes, game finished.
000652r 3  85 rr        	sta scno			; set new level number.
000654r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
000657r 3               
000657r 3               evwon:
000657r 3  20 rr rr     	jsr evnt18		 	; game completed.
00065Ar 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
00065Dr 3               
00065Dr 3               ;----------------------------------------------------------
00065Dr 3               ; Player dead.
00065Dr 3               ;----------------------------------------------------------
00065Dr 3               
00065Dr 3               pdead:
00065Dr 3  A9 00        	lda #0				; zeroise accumulator.
00065Fr 3  85 rr        	sta deadf			; reset dead flag.
000661r 3               evdie:
000661r 3  20 rr rr     	jsr evnt16 			; death subroutine.
000664r 3  A5 rr        	lda numlif			; number of lives.
000666r 3  F0 03        	beq :+
000668r 3  4C rr rr     	jmp rstrt 			; restart game.
00066Br 3               :
00066Br 3               evfail:
00066Br 3  20 rr rr     	jsr evnt17 			; failure event.
00066Er 3  4C rr rr     	jmp game			; restart game
000671r 3               
000671r 3               ;----------------------------------------------------------
000671r 3               ; Tidy things up
000671r 3               ;----------------------------------------------------------
000671r 3               
000671r 3               tidyup:
000671r 3  A0 00        	ldy #0				; digits to check.
000673r 3               tidyu2:
000673r 3  B9 rr rr     	lda score,y 			; get score digit.
000676r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
000679r 3  90 07        	bcc tidyu0			; high score is bigger.
00067Br 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
00067Dr 3  C8           	iny				; next digit of high score.
00067Er 3  C0 06        	cpy #6
000680r 3  D0 F1        	bne tidyu2			; repeat for all digits
000682r 3               tidyu0:
000682r 3  A9 rr        	lda #<score			; return pointing to score.
000684r 3  85 rr        	sta z80_c
000686r 3  A9 rr        	lda #>score
000688r 3  85 rr        	sta z80_b
00068Ar 3  60           	rts
00068Br 3               tidyu1:
00068Br 3  A0 05        	ldy #5
00068Dr 3               tidyu3:
00068Dr 3  B9 rr rr     	lda score,y			; score.
000690r 3  99 rr rr     	sta hiscor,y			; high score.
000693r 3  88           	dey
000694r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000696r 3               evnewh:
000696r 3  20 rr rr     	jsr evnt19			; new high score event.
000699r 3  4C rr rr     	jmp tidyu0			; tidy up.
00069Cr 3               
00069Cr 3               ;--------------------------------------------------
00069Cr 3               ; Restart event.
00069Cr 3               ;--------------------------------------------------
00069Cr 3               
00069Cr 3               rsevt:
00069Cr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00069Er 3  85 rr        	sta z80_x
0006A0r 3  A9 rr        	lda #>ssprit
0006A2r 3  85 rr        	sta z80_i
0006A4r 3               
0006A4r 3               evrs:
0006A4r 3  4C rr rr     	jmp evnt14	 		; call restart event.
0006A7r 3               
0006A7r 3               ;------------------------------------------------------------------
0006A7r 3               ; Copy number passed in a to string position bc, right-justified.
0006A7r 3               ;
0006A7r 3               ; Input:
0006A7r 3               ;  A  = number
0006A7r 3               ;  BC = string address
0006A7r 3               ;
0006A7r 3               ; Output:
0006A7r 3               ;  BC = string with number
0006A7r 3               ;-----------------------------------------------------------------
0006A7r 3               
0006A7r 3               num2ch:
0006A7r 3  85 rr        	sta z80_d		; Save number
0006A9r 3               
0006A9r 3  A9 00        	lda #0
0006ABr 3  85 rr        	sta flag
0006ADr 3               numdg3:
0006ADr 3  A2 64        	ldx #100		; hundreds column.
0006AFr 3  86 rr        	stx z80_e
0006B1r 3  20 rr rr     	jsr numdg		; show digit.
0006B4r 3               numdg2:
0006B4r 3  A2 0A        	ldx #10			; tens column.
0006B6r 3  86 rr        	stx z80_e
0006B8r 3  20 rr rr     	jsr numdg		; show digit.
0006BBr 3               
0006BBr 3  E6 rr        	inc flag
0006BDr 3  A2 01        	ldx #1			; units column.
0006BFr 3  86 rr        	stx z80_e
0006C1r 3               numdg:
0006C1r 3  A9 30        	lda #48			; clear digit.
0006C3r 3  85 rr        	sta z80_a
0006C5r 3               numdg1:
0006C5r 3  A5 rr        	lda z80_d
0006C7r 3  C5 rr        	cmp z80_e
0006C9r 3  90 0E        	bcc numdg0		; nothing to show.
0006CBr 3  38           	sec
0006CCr 3  A5 rr        	lda z80_d
0006CEr 3  E5 rr        	sbc z80_e		; subtract from column.
0006D0r 3  85 rr        	sta z80_d
0006D2r 3  E6 rr        	inc z80_a		; increment digit.
0006D4r 3  E6 rr        	inc flag
0006D6r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
0006D9r 3               numdg0:
0006D9r 3  A0 00        	ldy #0
0006DBr 3  A5 rr        	lda z80_a
0006DDr 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
0006DFr 3  A5 rr        	lda flag
0006E1r 3  F0 06        	beq :+
0006E3r 3  E6 rr        	inc z80_c		; next buffer position.
0006E5r 3  D0 02        	bne :+
0006E7r 3  E6 rr        	inc z80_b
0006E9r 3               :
0006E9r 3  60           	rts
0006EAr 3               num2dd:
0006EAr 3  85 rr        	sta z80_d		; Save number
0006ECr 3               
0006ECr 3  A9 01        	lda #1
0006EEr 3  85 rr        	sta flag
0006F0r 3               
0006F0r 3  4C rr rr     	jmp numdg2
0006F3r 3               num2td:
0006F3r 3  85 rr        	sta z80_d		; Save number
0006F5r 3               
0006F5r 3  A9 01        	lda #1
0006F7r 3  85 rr        	sta flag
0006F9r 3  4C rr rr     	jmp numdg3
0006FCr 3               
0006FCr 3               ;---------------------------------------------------------
0006FCr 3               ; Reset score to "000000"
0006FCr 3               ;---------------------------------------------------------
0006FCr 3               
0006FCr 3               inisc:
0006FCr 3  A9 30        	lda #'0'
0006FEr 3  A2 05        	ldx #5			; digits to initialise.
000700r 3               inisc0:
000700r 3  9D rr rr     	sta score,x 		; write zero digit.
000703r 3  CA           	dex			; next column.
000704r 3  10 FA        	bpl inisc0		; repeat for all digits.
000706r 3               
000706r 3  60           	rts
000707r 3               
000707r 3               ;-----------------------------------------------------
000707r 3               ; Multiply h by d and return in hl.
000707r 3               ;
000707r 3               ; Input:
000707r 3               ;  H = first number
000707r 3               ;  D = second number
000707r 3               ;
000707r 3               ; Output:
000707r 3               ;  HL = result H x D
000707r 3               ;-----------------------------------------------------
000707r 3               
000707r 3               imul:
000707r 3  A5 rr        	lda z80_d		; HL = H * D
000709r 3  85 rr        	sta z80_e
00070Br 3  A5 rr        	lda z80_h
00070Dr 3  85 rr        	sta z80_c		; make c first multiplier.
00070Fr 3               imul0:
00070Fr 3  A9 00        	lda #0			; zeroise total.
000711r 3  85 rr        	sta z80_l
000713r 3  85 rr        	sta z80_h
000715r 3               
000715r 3  A5 rr        	lda z80_h
000717r 3  85 rr        	sta z80_d		; zeroise high byte.
000719r 3               
000719r 3  A9 08        	lda #8			; repeat 8 times.
00071Br 3  85 rr        	sta z80_b
00071Dr 3               imul1:
00071Dr 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
00071Fr 3  90 0E        	bcc imul2		; wasn't set.
000721r 3  18           	clc			; bit was set, so add de.
000722r 3  A5 rr        	lda z80_l
000724r 3  65 rr        	adc z80_e
000726r 3  85 rr        	sta z80_l
000728r 3  A5 rr        	lda z80_h
00072Ar 3  65 rr        	adc z80_d
00072Cr 3  85 rr        	sta z80_h
00072Er 3  18           	clc 			; reset carry.
00072Fr 3               imul2:
00072Fr 3  06 rr        	asl z80_e 		; shift de 1 bit left.
000731r 3  26 rr        	rol z80_d
000733r 3  C6 rr        	dec z80_b
000735r 3  D0 E6        	bne imul1		; repeat 8 times.
000737r 3               
000737r 3  60           	rts
000738r 3               
000738r 3               ;-----------------------------------------------
000738r 3               ; Divide d by e and return in d, remainder in a.
000738r 3               ;
000738r 3               ; Input:
000738r 3               ;  D = first number
000738r 3               ;  E = second number
000738r 3               ;
000738r 3               ; Output:
000738r 3               ;  D = result D/E
000738r 3               ;  A = remainder
000738r 3               ;-----------------------------------------------
000738r 3               
000738r 3               idiv:
000738r 3  A9 00        	lda #0
00073Ar 3  A0 08        	ldy #8		 	; bits to shift.
00073Cr 3  06 rr        	asl z80_d
00073Er 3               idiv0:
00073Er 3  2A           	rol a 			; multiply d by 2.
00073Fr 3  C5 rr        	cmp z80_e 		; test if e is smaller.
000741r 3  90 02        	bcc idiv1		; e is greater, no division this time.
000743r 3  E5 rr        	sbc z80_e		; subtract it.
000745r 3               idiv1:
000745r 3  26 rr        	rol z80_d		; rotate into d.
000747r 3  88           	dey
000748r 3  D0 F4        	bne idiv0		; repeat
00074Ar 3  60           	rts
00074Br 3               
00074Br 3               ;---------------------------------------------------
00074Br 3               ; Play AY sound effect
00074Br 3               ;---------------------------------------------------
00074Br 3               
00074Br 3               plsnd:
00074Br 3  60           	rts
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Objects handling.
00074Cr 3               ; 32 bytes for image
00074Cr 3               ; 1 for colour
00074Cr 3               ; 3 for room, y and x
00074Cr 3               ; 3 for starting room, y and x.
00074Cr 3               ; 254 = disabled.
00074Cr 3               ; 255 = object in player"s pockets.
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Show items present.
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               .if oflag
00074Cr 3               shwob:
00074Cr 3               	lda #<objdta			; objects table.
00074Cr 3               	sta z80_l
00074Cr 3               	lda #>objdta
00074Cr 3               	sta z80_h
00074Cr 3               	lda numob 			; number of objects in the game.
00074Cr 3               	sta sprcnt
00074Cr 3               shwob0:
00074Cr 3               	ldy #33 			; distance to room number.
00074Cr 3               	lda (z80_hl),y 			; same as an item?
00074Cr 3               	cmp scno 			; current location.
00074Cr 3               	bne :+
00074Cr 3               	jsr dobj 			; yes, display object.
00074Cr 3               :
00074Cr 3               	clc
00074Cr 3               	lda z80_l
00074Cr 3               	adc #39 			; distance to next item.
00074Cr 3               	sta z80_l
00074Cr 3               	lda z80_h
00074Cr 3               	adc #0
00074Cr 3               	sta z80_h	 		; point to it.
00074Cr 3               	dec sprcnt
00074Cr 3               	bne shwob0 			; repeat for others.
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Display object.
00074Cr 3               ; hl must point to object's start address.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  HL = object address
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               dobj:
00074Cr 3               	ldy #32
00074Cr 3               	lda (z80_hl),y 			; point to y.
00074Cr 3               	sta objcol
00074Cr 3               	ldy #34
00074Cr 3               	lda (z80_hl),y 			; point to y.
00074Cr 3               	sta dispy
00074Cr 3               	iny
00074Cr 3               	lda (z80_hl),y 			; point to x.
00074Cr 3               	sta dispx
00074Cr 3               dobj1:
00074Cr 3               	jmp sprite 			; draw this sprite.
00074Cr 3               
00074Cr 3               ;--------------------------------------
00074Cr 3               ; Remove an object.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;--------------------------------------
00074Cr 3               
00074Cr 3               remob:
00074Cr 3               	cmp numob			; number of objects in game.
00074Cr 3               	bcc :+				; are we checking past the end?
00074Cr 3               	rts				; yes, can't get non-existent item.
00074Cr 3               :
00074Cr 3               	pha				; remember object.
00074Cr 3               	jsr getob			; pick it up if we haven't already got it.
00074Cr 3               	pla				; retrieve object number.
00074Cr 3               	jsr gotob			; get its address.
00074Cr 3               	lda #254
00074Cr 3               	ldy #33
00074Cr 3               	sta (z80_hl),y			; remove it.
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               ;---------------------------------------------------
00074Cr 3               ; Pick up object number held in the accumulator.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;---------------------------------------------------
00074Cr 3               
00074Cr 3               getob:
00074Cr 3               	cmp numob 		; number of objects in game.
00074Cr 3               	bcc :+			; are we checking past the end?
00074Cr 3               	rts			; yes, can't get non-existent item.
00074Cr 3               :
00074Cr 3               	jsr gotob 		; check if we already have it.
00074Cr 3               	cmp #255
00074Cr 3               	bne :+
00074Cr 3               	rts			; we already do.
00074Cr 3               :
00074Cr 3               	ldy #33
00074Cr 3               	lda (z80_hl),y		; is it on this screen?
00074Cr 3               	cmp scno 		; current screen.
00074Cr 3               	bne getob0		; not on screen, so nothing to delete.
00074Cr 3               
00074Cr 3               	lda #255
00074Cr 3               	sta (z80_hl),y		; pick it up.
00074Cr 3               	iny 			; point to y coord.
00074Cr 3               getob1:
00074Cr 3               	ldy #34
00074Cr 3               	lda (z80_hl),y		; y coord.
00074Cr 3               	sta dispy
00074Cr 3               	ldy #35
00074Cr 3               	lda (z80_hl),y 		; x coord.
00074Cr 3               	sta dispx
00074Cr 3               	jmp dobj1 		; delete object sprite.
00074Cr 3               getob0:
00074Cr 3               	lda #255
00074Cr 3               	sta (z80_hl),y 		; pick it up.
00074Cr 3               	rts
00074Cr 3               .endif
00074Cr 3               
00074Cr 3               ;-----------------------------------------------------------------
00074Cr 3               ; Got object check.
00074Cr 3               ; Call with object in accumulator, returns zero set if in pockets.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;-----------------------------------------------------------------
00074Cr 3               .if oflag .or mflag
00074Cr 3               gotob:
00074Cr 3               	cmp numob 		; number of objects in game.
00074Cr 3               	bcc :+ 			; are we checking past the end?
00074Cr 3               	jmp gotob0 		; yes, we can't have a non-existent object.
00074Cr 3               :
00074Cr 3               	jsr findob		; find the object.
00074Cr 3               gotob1:
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               gotob0:
00074Cr 3               	lda #254 		; missing.
00074Cr 3               	jmp gotob1
00074Cr 3               
00074Cr 3               findob:
00074Cr 3               	pha			; save object number
00074Cr 3               	lda #<objdta 		; objects.
00074Cr 3               	sta z80_l
00074Cr 3               	lda #>objdta
00074Cr 3               	sta z80_h
00074Cr 3               	pla			; retreive object number
00074Cr 3               	beq fndob1 		; is it zero? yes, skip loop.
00074Cr 3               	tax 			; loop counter
00074Cr 3               fndob2:
00074Cr 3               	clc
00074Cr 3               	lda z80_l
00074Cr 3               	adc #39 		; size of each object.
00074Cr 3               	sta z80_l
00074Cr 3               	bcc :+
00074Cr 3               	inc z80_h
00074Cr 3               :
00074Cr 3               	dex 			; repeat until we find address.
00074Cr 3               	bne fndob2
00074Cr 3               fndob1:
00074Cr 3               	ldy #33			; distance to room it's in.
00074Cr 3               	lda (z80_hl),y		; fetch status.
00074Cr 3               	rts
00074Cr 3               .endif
00074Cr 3               
00074Cr 3               ;---------------------------------------------
00074Cr 3               ; Drop object number at (dispx, dispy).
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  A = object number
00074Cr 3               ;---------------------------------------------
00074Cr 3               
00074Cr 3               .if oflag
00074Cr 3               drpob:
00074Cr 3               	cmp numob 		; are we checking past the end?
00074Cr 3               	bcc :+
00074Cr 3               	rts			; yes, can't drop non-existent item.
00074Cr 3               :
00074Cr 3               	jsr gotob		; make sure object is in inventory.
00074Cr 3               	cmp scno		; already on this screen?
00074Cr 3               	bne :+
00074Cr 3               	rts			; yes, nothing to do.
00074Cr 3               :
00074Cr 3               	ldy #33
00074Cr 3               	lda scno
00074Cr 3               	sta (z80_hl),y		; bring onto screen.
00074Cr 3               	lda dispy		; sprite y coordinate.
00074Cr 3               	iny
00074Cr 3               	sta (z80_hl),y		; point to object y.
00074Cr 3               	lda dispx 		; sprite x coordinate.
00074Cr 3               	iny
00074Cr 3               	sta (z80_hl),y 		; point to object x
00074Cr 3               	jmp dobj		; draw the object sprite.
00074Cr 3               
00074Cr 3               ;-----------------------------------------------
00074Cr 3               ; Seek objects at sprite position.
00074Cr 3               ;
00074Cr 3               ; Output:
00074Cr 3               ;  A = object number, if not found A=255
00074Cr 3               ;-----------------------------------------------
00074Cr 3               
00074Cr 3               skobj:
00074Cr 3               	lda #<objdta 		; pointer to objects.
00074Cr 3               	sta z80_l
00074Cr 3               	lda #>objdta
00074Cr 3               	sta z80_h
00074Cr 3               
00074Cr 3               	lda numob 		; number of objects in game.
00074Cr 3               	sta z80_b 		; set up the loop counter.
00074Cr 3               skobj0:
00074Cr 3               	lda scno		; current room number.
00074Cr 3               	ldy #33
00074Cr 3               	cmp (z80_hl),y		; is object in here?
00074Cr 3               	bne :+
00074Cr 3               	jsr skobj1		; yes, check coordinates.
00074Cr 3               :
00074Cr 3               	clc			; point to next object in table.
00074Cr 3               	lda z80_l
00074Cr 3               	adc #39			; size of each object.
00074Cr 3               	sta z80_l
00074Cr 3               	bcc :+
00074Cr 3               	inc z80_h
00074Cr 3               :
00074Cr 3               	dec z80_b
00074Cr 3               	bne skobj0		; repeat for all objects.
00074Cr 3               
00074Cr 3               	lda #255		; end of list and nothing found, return 255.
00074Cr 3               	rts
00074Cr 3               
00074Cr 3               skobj1:
00074Cr 3               	ldy #34			; point to y coordinate.
00074Cr 3               	lda (z80_hl),y		; point to y coordinate.
00074Cr 3               	sec
00074Cr 3               	ldy #var_newY
00074Cr 3               	sbc (z80_ix),y 		; subtract sprite y.
00074Cr 3               	clc
00074Cr 3               	adc #15			; add sprite height minus one.
00074Cr 3               	cmp #31			; within range?
00074Cr 3               	bcs skobj2		; no, ignore object.
00074Cr 3               
00074Cr 3               	ldy #35			; point to x coordinate now.
00074Cr 3               	lda (z80_hl),y 		; get coordinate.
00074Cr 3               	sec
00074Cr 3               	ldy #var_newX
00074Cr 3               	sbc (z80_ix),y 		; subtract the sprite x.
00074Cr 3               	clc			; add sprite width minus one.
00074Cr 3               	adc #15
00074Cr 3               	cmp #31			; within range?
00074Cr 3               	bcs skobj2		; no, ignore object.
00074Cr 3               
00074Cr 3               	pla			; remove return address from stack.
00074Cr 3               	pla
00074Cr 3               
00074Cr 3               	lda numob 		; objects in game.
00074Cr 3               	sec
00074Cr 3               	sbc z80_b		; subtract loop counter.
00074Cr 3               skobj2:
00074Cr 3               	rts			; accumulator now points to object.
00074Cr 3               .endif
00074Cr 3               
00074Cr 3               ;---------------------------------------------------------------------
00074Cr 3               ; Spawn a new sprite.
00074Cr 3               ;---------------------------------------------------------------------
00074Cr 3               
00074Cr 3               spawn:
00074Cr 3  A9 rr        	lda #<sprtab		; sprite table.
00074Er 3  85 rr        	sta z80_l
000750r 3  A9 rr        	lda #>sprtab
000752r 3  85 rr        	sta z80_h
000754r 3               numsp1:
000754r 3  A9 0C        	lda #NUMSPR		; number of sprites.
000756r 3  85 rr        	sta spcnt
000758r 3               spaw0:
000758r 3  A0 00        	ldy #var_Type
00075Ar 3  B1 rr        	lda (z80_hl),y		; get sprite type.
00075Cr 3  C9 FF        	cmp #255		; is it an unused slot?
00075Er 3  F0 0F        	beq spaw1 		; yes, we can use this one.
000760r 3               
000760r 3  18           	clc 			; point to next sprite in table.
000761r 3  A5 rr        	lda z80_l
000763r 3  69 11        	adc #TABSIZ		; size of each entry.
000765r 3  85 rr        	sta z80_l
000767r 3  90 02        	bcc :+
000769r 3  E6 rr        	inc z80_h
00076Br 3               :
00076Br 3  C6 rr        	dec spcnt		; one less iteration.
00076Dr 3  D0 E9        	bne spaw0		; keep going until we find a slot.
00076Fr 3               
00076Fr 3               ; Didn't find one but drop through and set up a dummy sprite instead.
00076Fr 3               
00076Fr 3               spaw1:
00076Fr 3  A5 rr        	lda z80_i		; address of original sprite.
000771r 3  48           	pha
000772r 3  A5 rr        	lda z80_x
000774r 3  48           	pha
000775r 3               
000775r 3  A5 rr        	lda z80_l		; store spawned sprite address.
000777r 3  85 rr        	sta spptr
000779r 3  A5 rr        	lda z80_h
00077Br 3  85 rr        	sta spptr+1
00077Dr 3               
00077Dr 3  A5 rr        	lda z80_c
00077Fr 3  A0 00        	ldy #var_Type
000781r 3  91 rr        	sta (z80_hl),y 		; set the type.
000783r 3  A0 05        	ldy #var_newType
000785r 3  91 rr        	sta (z80_hl),y		; copy
000787r 3               
000787r 3  A5 rr        	lda z80_b
000789r 3  A0 01        	ldy #var_Image
00078Br 3  91 rr        	sta (z80_hl),y		; set the image.
00078Dr 3  A0 06        	ldy #var_newImage
00078Fr 3  91 rr        	sta (z80_hl),y		; copy
000791r 3               
000791r 3  A9 00        	lda #0 				; frame zero.
000793r 3  A0 02        	ldy #var_Frame
000795r 3  91 rr        	sta (z80_hl),y		; set frame.
000797r 3  A0 07        	ldy #var_newFrame
000799r 3  91 rr        	sta (z80_hl),y		; copy
00079Br 3               
00079Br 3  A0 08        	ldy #8
00079Dr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00079Fr 3  A0 03        	ldy #3
0007A1r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0007A3r 3  A0 08        	ldy #8
0007A5r 3  91 rr        	sta (z80_hl),y		; copy
0007A7r 3               
0007A7r 3  A0 09        	ldy #9
0007A9r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0007ABr 3  A0 04        	ldy #4
0007ADr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
0007AFr 3  A0 09        	ldy #9
0007B1r 3  91 rr        	sta (z80_hl),y		; copy
0007B3r 3               
0007B3r 3  A0 0A        	ldy #10				; direction of original.
0007B5r 3  B1 rr        	lda (z80_ix),y
0007B7r 3  91 rr        	sta (z80_hl),y		; direction
0007B9r 3               
0007B9r 3  A9 00        	lda #0
0007BBr 3  A0 0D        	ldy #var_jumpLo
0007BDr 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007BFr 3  C8           	iny
0007C0r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007C2r 3  C8           	iny
0007C3r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007C5r 3  C8           	iny
0007C6r 3  91 rr        	sta (z80_hl),y		; reset parameter.
0007C8r 3               rtssp:
0007C8r 3  A5 rr        	lda spptr			; address of new sprite.
0007CAr 3  85 rr        	sta z80_x
0007CCr 3  A5 rr        	lda spptr+1
0007CEr 3  85 rr        	sta z80_i
0007D0r 3               evis1:
0007D0r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
0007D3r 3               
0007D3r 3  A5 rr        	lda spptr 			; address of new sprite.
0007D5r 3  85 rr        	sta z80_x
0007D7r 3  A5 rr        	lda spptr+1
0007D9r 3  85 rr        	sta z80_i
0007DBr 3               
0007DBr 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
0007DBr 3  A0 03        	ldy #var_Y
0007DDr 3  B1 rr        	lda (z80_hl), y		; old x coord
0007DFr 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
0007E1r 3  B0 03        	bcs :+				; yes, don't draw it.
0007E3r 3               
0007E3r 3  20 rr rr     	jsr sspria 			; display the new sprite.
0007E6r 3               :
0007E6r 3  68           	pla					; address of original sprite.
0007E7r 3  85 rr        	sta z80_x
0007E9r 3  68           	pla
0007EAr 3  85 rr        	sta z80_i
0007ECr 3               
0007ECr 3  60           	rts
0007EDr 3               
0007EDr 3  30 30 30 30  score:	.byte "000000"		; player"s score.
0007F1r 3  30 30        
0007F3r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0007F7r 3  30 30        
0007F9r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0007FDr 3  30 30        
0007FFr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000801r 3               
000801r 3               ;----------------------------------------------------
000801r 3               ; Check y-pos
000801r 3               ;----------------------------------------------------
000801r 3               
000801r 3               checkx:
000801r 3  A5 rr        	lda dispy		; y position.
000803r 3  C9 16        	cmp #22			; off screen?
000805r 3  B0 01        	bcs :+
000807r 3  60           	rts			; no, it's okay.
000808r 3               :
000808r 3  68           	pla			; remove return address from stack.
000809r 3  85 rr        	sta z80_l
00080Br 3  68           	pla
00080Cr 3  85 rr        	sta z80_h
00080Er 3  60           	rts
00080Fr 3               
00080Fr 3               ;-----------------------------------------------
00080Fr 3               ; Displays the current high score.
00080Fr 3               ;-----------------------------------------------
00080Fr 3               
00080Fr 3               dhisc:
00080Fr 3  A9 rr        	lda #<hiscor 		; high score text.
000811r 3  8D rr rr     	sta dscor3+1
000814r 3  8D rr rr     	sta bscor3+1
000817r 3  A9 rr        	lda #>hiscor
000819r 3  8D rr rr     	sta dscor3+2
00081Cr 3  8D rr rr     	sta bscor3+2
00081Fr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
000822r 3               
000822r 3               ;------------------------------------------------------
000822r 3               ; Displays the current score.
000822r 3               ;------------------------------------------------------
000822r 3               
000822r 3               dscor:
000822r 3  A9 rr        	lda #<score		; score text.
000824r 3  8D rr rr     	sta dscor3+1
000827r 3  8D rr rr     	sta bscor3+1
00082Ar 3  A9 rr        	lda #>score
00082Cr 3  8D rr rr     	sta dscor3+2
00082Fr 3  8D rr rr     	sta bscor3+2
000832r 3               dscor1:
000832r 3  8C rr rr     	sty tmpscr
000835r 3  20 rr rr     	jsr preprt		; set up font and print position.
000838r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
00083Br 3               
00083Br 3               ;	lda #6			; digits to display.
00083Br 3               ;	sta z80_b
00083Br 3  A5 rr        	lda prtmod		; get print mode.
00083Dr 3  F0 03        	beq :+			; standard size text?
00083Fr 3  4C rr rr     	jmp bscor0		; no, show double-height.
000842r 3               :
000842r 3               dscor0:
000842r 3               ;	ldy #0
000842r 3               ;	lda (z80_hl),y 		; fetch character.
000842r 3  AC rr rr     	ldy tmpscr
000845r 3               dscor3:
000845r 3  B9 rr rr     	lda score,y
000848r 3  20 rr rr     	jsr pchar 		; display character.
00084Br 3  E6 rr        	inc dispx		; move along x coordinate
00084Dr 3               
00084Dr 3               ;	inc z80_l		; next score column.
00084Dr 3               ;	bne :+
00084Dr 3               ;	inc z80_h
00084Dr 3               ;:
00084Dr 3  EE rr rr     	inc tmpscr
000850r 3  C6 rr        	dec z80_b
000852r 3  D0 EE        	bne dscor0 		; repeat for all digits.
000854r 3               dscor2:
000854r 3  A5 rr        	lda dispx 		; set up display coordinates.
000856r 3  85 rr        	sta charx
000858r 3  A5 rr        	lda dispy
00085Ar 3  85 rr        	sta chary
00085Cr 3  60           	rts
00085Dr 3               
00085Dr 3  00           tmpscr:	.byte 0
00085Er 3               ;------------------------------------------------------
00085Er 3               ; Displays the current score in double-height characters.
00085Er 3               ;
00085Er 3               ; Input:
00085Er 3               ;  B  = digit number
00085Er 3               ;  HL = score string
00085Er 3               ;------------------------------------------------------
00085Er 3               
00085Er 3               bscor0:
00085Er 3               ;	ldy #0
00085Er 3               
00085Er 3               ;	lda (z80_hl),y 		; fetch character.
00085Er 3  A4 rr        	ldy tmp
000860r 3               bscor3:
000860r 3  B9 rr rr     	lda score,y
000863r 3  20 rr rr     	jsr bchar 		; display big char.
000866r 3               
000866r 3               ;	inc z80_l 		; next score column.
000866r 3               ;	bne :+
000866r 3               ;	inc z80_h
000866r 3               ;:
000866r 3  E6 rr        	inc tmp
000868r 3  C6 rr        	dec z80_b
00086Ar 3  F0 03        	beq :+
00086Cr 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
00086Fr 3               :
00086Fr 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
000872r 3               
000872r 3               ;-----------------------------------------------------
000872r 3               ; Adds number in the hl pair to the score.
000872r 3               ;-----------------------------------------------------
000872r 3               
000872r 3               addsc:
000872r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000874r 3  85 rr        	sta z80_e
000876r 3  A9 rr        	lda #>(score+1)
000878r 3  85 rr        	sta z80_d
00087Ar 3  A9 10        	lda #<10000		; amount to add each time.
00087Cr 3  85 rr        	sta z80_c
00087Er 3  A9 27        	lda #>10000
000880r 3  85 rr        	sta z80_b
000882r 3  20 rr rr     	jsr incsc		; add to score.
000885r 3               
000885r 3  E6 rr        	inc z80_e		; thousands column.
000887r 3  D0 02        	bne :+
000889r 3  E6 rr        	inc z80_d
00088Br 3               :
00088Br 3  A9 E8        	lda #<1000		; amount to add each time.
00088Dr 3  85 rr        	sta z80_c
00088Fr 3  A9 03        	lda #>1000
000891r 3  85 rr        	sta z80_b
000893r 3  20 rr rr     	jsr incsc 		; add to score.
000896r 3               
000896r 3  E6 rr        	inc z80_e		; hundreds column.
000898r 3  D0 02        	bne :+
00089Ar 3  E6 rr        	inc z80_d
00089Cr 3               :
00089Cr 3  A9 64        	lda #<100		; amount to add each time.
00089Er 3  85 rr        	sta z80_c
0008A0r 3  A9 00        	lda #>100
0008A2r 3  85 rr        	sta z80_b
0008A4r 3  20 rr rr     	jsr incsc		; add to score.
0008A7r 3               
0008A7r 3  E6 rr        	inc z80_e 		; tens column.
0008A9r 3  D0 02        	bne :+
0008ABr 3  E6 rr        	inc z80_d
0008ADr 3               :
0008ADr 3  A9 0A        	lda #<10		; amount to add each time.
0008AFr 3  85 rr        	sta z80_c
0008B1r 3  A9 00        	lda #>10
0008B3r 3  85 rr        	sta z80_b
0008B5r 3  20 rr rr     	jsr incsc 		; add to score.
0008B8r 3               
0008B8r 3  E6 rr        	inc z80_e		; units column.
0008BAr 3  D0 02        	bne :+
0008BCr 3  E6 rr        	inc z80_d
0008BEr 3               :
0008BEr 3  A9 01        	lda #<1			; units.
0008C0r 3  85 rr        	sta z80_c
0008C2r 3  A9 00        	lda #>1
0008C4r 3  85 rr        	sta z80_b
0008C6r 3               incsc:
0008C6r 3  A5 rr        	lda z80_h		; store amount to add.
0008C8r 3  48           	pha
0008C9r 3  A5 rr        	lda z80_l
0008CBr 3  48           	pha
0008CCr 3               
0008CCr 3  38           	sec			; subtract from amount to add.
0008CDr 3  A5 rr        	lda z80_l
0008CFr 3  E5 rr        	sbc z80_c
0008D1r 3  85 rr        	sta z80_l
0008D3r 3  A5 rr        	lda z80_h
0008D5r 3  E5 rr        	sbc z80_b
0008D7r 3  85 rr        	sta z80_h
0008D9r 3  90 14        	bcc incsc0		; too much, restore value.
0008DBr 3               
0008DBr 3  68           	pla			; delete the previous amount from the stack.
0008DCr 3  68           	pla
0008DDr 3               
0008DDr 3  A5 rr        	lda z80_d 		; store column position.
0008DFr 3  48           	pha
0008E0r 3  A5 rr        	lda z80_e
0008E2r 3  48           	pha
0008E3r 3  20 rr rr     	jsr incsc2		; do the increment.
0008E6r 3               
0008E6r 3  68           	pla			; restore column.
0008E7r 3  85 rr        	sta z80_e
0008E9r 3  68           	pla
0008EAr 3  85 rr        	sta z80_d
0008ECr 3  4C rr rr     	jmp incsc		; repeat until all added.
0008EFr 3               
0008EFr 3               incsc0:
0008EFr 3  68           	pla			; restore previous value.
0008F0r 3  85 rr        	sta z80_l
0008F2r 3  68           	pla
0008F3r 3  85 rr        	sta z80_h
0008F5r 3  60           	rts
0008F6r 3               incsc2:
0008F6r 3  A0 00        	ldy #0
0008F8r 3  B1 rr        	lda (z80_de),y 		; get amount.
0008FAr 3  18           	clc
0008FBr 3  69 01        	adc #1			; add one to column.
0008FDr 3  91 rr        	sta (z80_de),y		; write new column total.
0008FFr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000901r 3  B0 01        	bcs :+
000903r 3  60           	rts			; no, carry on.
000904r 3               :
000904r 3  A9 30        	lda #'0'		; make it zero.
000906r 3  91 rr        	sta (z80_de),y		; write new column total.
000908r 3  C6 rr        	dec z80_e		; back one column.
00090Ar 3  D0 02        	bne :+
00090Cr 3  C6 rr        	dec z80_d
00090Er 3               :
00090Er 3  4C rr rr     	jmp incsc2
000911r 3               
000911r 3               ;------------------------------------
000911r 3               ; Add bonus to score and reset bonus
000911r 3               ;------------------------------------
000911r 3               
000911r 3               addbo:
000911r 3  A2 05        	ldx #5			; last digit.
000913r 3  18           	clc
000914r 3               addbo0:
000914r 3  BD rr rr     	lda score,x		; get score.
000917r 3  7D rr rr     	adc bonus,x		; add bonus.
00091Ar 3  38           	sec			; 0 to 18.
00091Br 3  E9 30        	sbc #48
00091Dr 3  48           	pha
00091Er 3  A9 30        	lda #'0'
000920r 3  9D rr rr     	sta bonus,x
000923r 3  68           	pla
000924r 3  C9 3A        	cmp #58
000926r 3  90 03        	bcc addbo1
000928r 3  38           	sec
000929r 3  E9 0A        	sbc #10
00092Br 3               addbo1:
00092Br 3  9D rr rr     	sta score,x		; zeroise bonus.
00092Er 3  CA           	dex			; next digit.
00092Fr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
000931r 3  60           	rts
000932r 3               
000932r 3               ;------------------------------------
000932r 3               ; Swap score and bonus.
000932r 3               ;------------------------------------
000932r 3               
000932r 3               swpsb:
000932r 3  A2 05        	ldx #5			; digits to add.
000934r 3               swpsb0:
000934r 3  BD rr rr     	lda score,x 		; get score digits.
000937r 3  48           	pha			; save digit
000938r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
00093Br 3  9D rr rr     	sta score,x		; switch score-bonus
00093Er 3  68           	pla
00093Fr 3  9D rr rr     	sta bonus,x
000942r 3  CA           	dex 			; repeat for all 6 digits.
000943r 3  10 EF        	bpl swpsb0
000945r 3  60           	rts
000946r 3               
000946r 3               ;----------------------------------------------------
000946r 3               ; Get print address.
000946r 3               ;----------------------------------------------------
000946r 3               
000946r 3               gprad:
000946r 3  98           	tya
000947r 3  48           	pha
000948r 3               
000948r 3  A5 rr        	lda dispx 		; x coordinate.
00094Ar 3  85 rr        	sta scraddr
00094Cr 3  A9 00        	lda #0
00094Er 3  85 rr        	sta scraddr+1
000950r 3  06 rr        	asl scraddr  		; multiply char by 16
000952r 3  26 rr        	rol scraddr+1
000954r 3  06 rr        	asl scraddr
000956r 3  26 rr        	rol scraddr+1
000958r 3  06 rr        	asl scraddr
00095Ar 3  26 rr        	rol scraddr+1
00095Cr 3  06 rr        	asl scraddr
00095Er 3  26 rr        	rol scraddr+1
000960r 3               
000960r 3  A5 rr        	lda dispy		; y coordinate.
000962r 3  0A           	asl a
000963r 3  0A           	asl a
000964r 3  0A           	asl a			; multiply char by 8
000965r 3  A8           	tay
000966r 3               
000966r 3  18           	clc
000967r 3  A5 rr        	lda scraddr
000969r 3  79 00 07     	adc SCADTB_lb,y
00096Cr 3  85 rr        	sta scraddr
00096Er 3  A5 rr        	lda scraddr+1
000970r 3  79 00 08     	adc SCADTB_hb,y
000973r 3  85 rr        	sta scraddr+1
000975r 3               
000975r 3  A5 rr        	lda prtmod		; Double line if bigtxt
000977r 3  F0 08        	beq noskip
000979r 3  A5 rr        	lda dispx
00097Br 3  29 E0        	and #$e0
00097Dr 3  F0 02        	beq noskip
00097Fr 3  E6 rr        	inc scraddr+1
000981r 3               noskip:
000981r 3               
000981r 3  68           	pla
000982r 3  A8           	tay
000983r 3  60           	rts
000984r 3               ;--------------------------------------------------------------
000984r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000984r 3               ;
000984r 3               ; Output:
000984r 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
000984r 3               ;--------------------------------------------------------------
000984r 3               
000984r 3               pradd:
000984r 3  A5 rr        	lda dispy 		; y coordinate.
000986r 3  85 rr        	sta bufaddr
000988r 3  A9 00        	lda #0
00098Ar 3  85 rr        	sta bufaddr+1
00098Cr 3  06 rr        	asl bufaddr  		; multiply char by 32
00098Er 3  26 rr        	rol bufaddr+1
000990r 3  06 rr        	asl bufaddr
000992r 3  26 rr        	rol bufaddr+1
000994r 3  06 rr        	asl bufaddr
000996r 3  26 rr        	rol bufaddr+1
000998r 3  06 rr        	asl bufaddr
00099Ar 3  26 rr        	rol bufaddr+1
00099Cr 3  06 rr        	asl bufaddr
00099Er 3  26 rr        	rol bufaddr+1
0009A0r 3  18           	clc			; add address of MAP graphics.
0009A1r 3  A5 rr        	lda bufaddr
0009A3r 3  65 rr        	adc dispx
0009A5r 3  69 00        	adc #<MAP
0009A7r 3  85 rr        	sta bufaddr
0009A9r 3  A5 rr        	lda bufaddr+1
0009ABr 3  69 04        	adc #>MAP
0009ADr 3  85 rr        	sta bufaddr+1
0009AFr 3  60           	rts
0009B0r 3               
0009B0r 3               ;--------------------------------------------------------------
0009B0r 3               ; Get attribute address at (dispx, dispy).
0009B0r 3               ;
0009B0r 3               ; Output:
0009B0r 3               ;  bufaddr = COLOR + dispy*22 + dispx
0009B0r 3               ;--------------------------------------------------------------
0009B0r 3               
0009B0r 3               gaadd:
0009B0r 3  A5 rr        	lda dispy
0009B2r 3  4A           	lsr a
0009B3r 3  A8           	tay
0009B4r 3  B9 55 0A     	lda COLATTTB_hb,y
0009B7r 3  85 rr        	sta bufaddr+1
0009B9r 3  B9 4A 0A     	lda COLATTTB_lb,y
0009BCr 3  18           	clc
0009BDr 3  65 rr        	adc dispx
0009BFr 3  85 rr        	sta bufaddr
0009C1r 3  60           	rts
0009C2r 3               
0009C2r 3               ;----------------------------------------------
0009C2r 3               ; Print attributes, properties and pixels.
0009C2r 3               ;
0009C2r 3               ; Input:
0009C2r 3               ;  A	= tile number
0009C2r 3               ;----------------------------------------------
0009C2r 3               
0009C2r 3               pbpattr:			; entry PUTBLOCK command
0009C2r 3  A4 rr        	ldy charx
0009C4r 3  84 rr        	sty dispx
0009C6r 3  A4 rr        	ldy chary
0009C8r 3  84 rr        	sty dispy
0009CAr 3               pattr:
0009CAr 3               .if aflag
0009CAr 3               	pha
0009CAr 3               	jsr wbloc		; save blockinfo
0009CAr 3               	pla
0009CAr 3               .endif
0009CAr 3               
0009CAr 3               pattr2:
0009CAr 3  85 rr        	sta z80_b		; store cell in b register for now.
0009CCr 3  AA           	tax
0009CDr 3  BD rr rr     	lda bprop,x 		; block properties.
0009D0r 3  85 rr        	sta z80_c
0009D2r 3  C9 08        	cmp #COLECT
0009D4r 3  D0 04        	bne :+
0009D6r 3  A5 rr        	lda z80_b
0009D8r 3  85 rr        	sta colpatt
0009DAr 3               :
0009DAr 3  20 rr rr     	jsr pradd 		; get property buffer address.
0009DDr 3  A5 rr        	lda z80_c
0009DFr 3  A0 00        	ldy #0
0009E1r 3  91 rr        	sta (bufaddr),y 	; write property.
0009E3r 3  A5 rr        	lda z80_b 		; restore cell.
0009E5r 3  4C rr rr     	jmp panp
0009E8r 3               ; Print attributes, no properties.
0009E8r 3               
0009E8r 3               ;colpatt:	.byte 0
0009E8r 3               
0009E8r 3               panp:
0009E8r 3  85 rr        	sta z80_e		; displacement in e.
0009EAr 3  A9 00        	lda #0
0009ECr 3  85 rr        	sta z80_d		; no high byte.
0009EEr 3  06 rr        	asl z80_e  		; multiply char by 8.
0009F0r 3  26 rr        	rol z80_d
0009F2r 3  06 rr        	asl z80_e
0009F4r 3  26 rr        	rol z80_d
0009F6r 3  06 rr        	asl z80_e
0009F8r 3  26 rr        	rol z80_d
0009FAr 3  18           	clc
0009FBr 3  A5 rr        	lda z80_e
0009FDr 3  69 rr        	adc #<chgfx 		; address of graphics.
0009FFr 3  85 rr        	sta tileaddr
000A01r 3  A5 rr        	lda z80_d
000A03r 3  69 rr        	adc #>chgfx
000A05r 3  85 rr        	sta tileaddr+1
000A07r 3               
000A07r 3  A6 rr        	ldx z80_b		; set colour attribute
000A09r 3  BD rr rr     	lda bCol,x
000A0Cr 3  48           	pha
000A0Dr 3  20 rr rr     	jsr gaadd
000A10r 3  A0 00        	ldy #0
000A12r 3  68           	pla
000A13r 3  91 rr        	sta (bufaddr),y
000A15r 3               
000A15r 3  20 rr rr     	jsr gprad 		; get screen address.
000A18r 3  A2 07        	ldx #7			; number of pixel rows to write.
000A1Ar 3               panp0:
000A1Ar 3  A0 00        	ldy #0
000A1Cr 3  B1 rr        	lda (tileaddr),y 	; get image byte.
000A1Er 3               .if iflag
000A1Er 3               	eor #$ff		; Invert
000A1Er 3               .endif
000A1Er 3  BC rr rr     	ldy scrtab,x
000A21r 3  91 rr        	sta (scraddr),y 	; copy to screen.
000A23r 3  E6 rr        	inc tileaddr 		; next image byte.
000A25r 3  D0 02        	bne :+
000A27r 3  E6 rr        	inc tileaddr+1
000A29r 3               :
000A29r 3  CA           	dex	 		; repeat for 8 pixel rows.
000A2Ar 3  10 EE        	bpl panp0
000A2Cr 3  E6 rr        	inc dispx 		; move along one.
000A2Er 3  E6 rr        	inc charx
000A30r 3  60           	rts
000A31r 3               
000A31r 3               ;----------------------------------------------
000A31r 3               ; Write block
000A31r 3               ;----------------------------------------------
000A31r 3               
000A31r 3               .if aflag
000A31r 3               wbloc:
000A31r 3               	ldy #3
000A31r 3               	sta (pbptr),y		; store block number
000A31r 3               	dey
000A31r 3               	lda dispx
000A31r 3               	sta (pbptr),y		; write x position of block.
000A31r 3               	dey
000A31r 3               	lda dispy
000A31r 3               	sta (pbptr),y		; write y position of block.
000A31r 3               	dey
000A31r 3               	lda scno
000A31r 3               	sta (pbptr),y		; write screen.
000A31r 3               	clc			; point to next free location
000A31r 3               	lda pbptr
000A31r 3               	adc #4
000A31r 3               	sta pbptr
000A31r 3               	bcc :+
000A31r 3               	inc pbptr+1
000A31r 3               :
000A31r 3               	rts
000A31r 3               .endif
000A31r 3               
000A31r 3               ;.if kflag
000A31r 3               ;panp:
000A31r 3               ;.endif
000A31r 3               
000A31r 3               ;----------------------------------------------
000A31r 3               ; Print character pixels, no more.
000A31r 3               ;
000A31r 3               ; Input:
000A31r 3               ;  A	= character to print
000A31r 3               ;----------------------------------------------
000A31r 3               
000A31r 3               pchr:
000A31r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
000A34r 3  E6 rr        	inc dispx		; move along one.
000A36r 3  60           	rts
000A37r 3               
000A37r 3               ;----------------------------------------------------
000A37r 3               ; Shifter sprite routine for objects.
000A37r 3               ;----------------------------------------------------
000A37r 3               
000A37r 3               .if oflag
000A37r 3               sprit7:
000A37r 3               	lda z80_b
000A37r 3               	beq sprit0
000A37r 3               	sta z80_a
000A37r 3               sprit3:
000A37r 3               	lsr spr			; shift into position.
000A37r 3               	ror spr+1
000A37r 3               	ror spr+2
000A37r 3               	dec z80_a		; one less iteration.
000A37r 3               	bne sprit3
000A37r 3               sprit0:
000A37r 3               	rts 			; now apply to screen.
000A37r 3               .endif
000A37r 3               
000A37r 3               ;-----------------------------------------------------------
000A37r 3               ; Get room address.
000A37r 3               ;-----------------------------------------------------------
000A37r 3               
000A37r 3               groom:
000A37r 3  A6 rr        	ldx scno 		; screen number.
000A39r 3  A0 00        	ldy #0
000A3Br 3               groomx:
000A3Br 3  A9 rr        	lda #<scdat 		; pointer to screens.
000A3Dr 3  85 rr        	sta z80_l
000A3Fr 3  A9 rr        	lda #>scdat
000A41r 3  85 rr        	sta z80_h
000A43r 3               groom1:
000A43r 3  E0 00        	cpx #0			; is it the first one?
000A45r 3  F0 15        	beq groom0 		; no more screens to skip.
000A47r 3               
000A47r 3  18           	clc
000A48r 3  A5 rr        	lda z80_l
000A4Ar 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
000A4Dr 3  85 rr        	sta z80_l
000A4Fr 3  C8           	iny			; point to high byte.
000A50r 3  A5 rr        	lda z80_h
000A52r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000A55r 3  85 rr        	sta z80_h
000A57r 3  C8           	iny			; next address.
000A58r 3               
000A58r 3  CA           	dex 			; one less iteration.
000A59r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000A5Cr 3               groom0:
000A5Cr 3  AD rr rr     	lda numsc		; add displacement.
000A5Fr 3  0A           	asl a
000A60r 3  18           	clc			; add double displacement to address.
000A61r 3  65 rr        	adc z80_l
000A63r 3  85 rr        	sta z80_l
000A65r 3  A5 rr        	lda z80_h
000A67r 3  69 00        	adc #0
000A69r 3  85 rr        	sta z80_h
000A6Br 3  60           	rts
000A6Cr 3               
000A6Cr 3               ;-----------------------------------------------------------
000A6Cr 3               ; Draw present room.
000A6Cr 3               ;-----------------------------------------------------------
000A6Cr 3               
000A6Cr 3               droom:
000A6Cr 3  AD rr rr     	lda wintop 		; window top.
000A6Fr 3  85 rr        	sta dispy		; set cursor y position.
000A71r 3               droom2:
000A71r 3  20 rr rr     	jsr groom 		; get address of current room.
000A74r 3  A9 00        	lda #0	 		; zero in accumulator.
000A76r 3  85 rr        	sta comcnt 		; reset compression counter.
000A78r 3  AD rr rr     	lda winhgt 		; height of window.
000A7Br 3  85 rr        	sta rrow		; set row counter
000A7Dr 3               droom0:
000A7Dr 3  AD rr rr     	lda winlft 		; window left edge.
000A80r 3  85 rr        	sta dispx 		; set cursor x position.
000A82r 3  AD rr rr     	lda winwid 		; width of window.
000A85r 3  85 rr        	sta rcol		; set column counter
000A87r 3               droom1:
000A87r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000A8Ar 3               .if xflag
000A8Ar 3               	jsr drwmeta
000A8Ar 3               .else
000A8Ar 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000A8Dr 3               .endif
000A8Dr 3  C6 rr        	dec rcol		; one less column.
000A8Fr 3  D0 F6        	bne droom1 		; repeat for entire line.
000A91r 3  E6 rr        	inc dispy		; move down one line.
000A93r 3               .if xflag
000A93r 3               	inc dispy		; move down one line.
000A93r 3               .endif
000A93r 3  C6 rr        	dec rrow 		; one less row.
000A95r 3  D0 E6        	bne droom0 		; repeat for all rows.
000A97r 3  60           	rts
000A98r 3               
000A98r 3               ;----------------------------------------------
000A98r 3               ; Decompress bytes on-the-fly.
000A98r 3               ;----------------------------------------------
000A98r 3               
000A98r 3               flbyt:
000A98r 3  A5 rr        	lda comcnt 		; compression counter.
000A9Ar 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000A9Cr 3               
000A9Cr 3  A0 00        	ldy #0
000A9Er 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000AA0r 3  E6 rr        	inc z80_l 		; point to next cell.
000AA2r 3  D0 02        	bne :+
000AA4r 3  E6 rr        	inc z80_h
000AA6r 3               :
000AA6r 3  C9 FF        	cmp #255 		; is this byte a control code?
000AA8r 3  F0 01        	beq :+
000AAAr 3  60           	rts 			; no, this byte is uncompressed.
000AABr 3               :
000AABr 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000AADr 3  85 rr        	sta combyt 		; set up the type.
000AAFr 3  E6 rr        	inc z80_l 		; point to quantity.
000AB1r 3  D0 02        	bne :+
000AB3r 3  E6 rr        	inc z80_h
000AB5r 3               :
000AB5r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000AB7r 3  E6 rr        	inc z80_l 		; point to next byte.
000AB9r 3  D0 02        	bne :+
000ABBr 3  E6 rr        	inc z80_h
000ABDr 3               :
000ABDr 3               flbyt1:
000ABDr 3  85 rr        	sta comcnt 		; store new quantity.
000ABFr 3  C6 rr        	dec comcnt		; one less.
000AC1r 3  A5 rr        	lda combyt 		; byte to expand.
000AC3r 3  60           	rts
000AC4r 3               
000AC4r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000AC4r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000AC4r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000AC4r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000AC4r 3               .if xflag
000AC4r 3               drwmeta:
000AC4r 3               	sta tmpblk
000AC4r 3               	jsr pattr2
000AC4r 3               
000AC4r 3               	inc dispy
000AC4r 3               	dec dispx
000AC4r 3               	ldx tmpblk
000AC4r 3               	beq :+
000AC4r 3               	inx
000AC4r 3               :
000AC4r 3               	txa
000AC4r 3               	jsr pattr2
000AC4r 3               
000AC4r 3               	ldx tmpblk
000AC4r 3               	beq :+
000AC4r 3               	inx
000AC4r 3               	inx
000AC4r 3               	inx
000AC4r 3               :
000AC4r 3               	txa
000AC4r 3               	jsr pattr2
000AC4r 3               
000AC4r 3               	dec dispy
000AC4r 3               	dec dispx
000AC4r 3               	ldx tmpblk
000AC4r 3               	beq :+
000AC4r 3               	inx
000AC4r 3               	inx
000AC4r 3               :
000AC4r 3               	txa
000AC4r 3               	jsr pattr2
000AC4r 3               	rts
000AC4r 3               
000AC4r 3               tmpblk:	.byte 0
000AC4r 3               
000AC4r 3               .endif
000AC4r 3               
000AC4r 3               ;------------------------------------------
000AC4r 3               ; Ladder down check.
000AC4r 3               ;
000AC4r 3               ; Input:
000AC4r 3               ;  IX = sprite pointer
000AC4r 3               ;------------------------------------------
000AC4r 3               
000AC4r 3               .if lflag
000AC4r 3               laddd:
000AC4r 3  A0 09        	ldy #9
000AC6r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000AC8r 3  85 rr        	sta dispx
000ACAr 3               
000ACAr 3  A0 08        	ldy #8
000ACCr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000ACEr 3  29 FE        	and #254		; make it even.
000AD0r 3  91 rr        	sta (z80_ix),y 		; reset it.
000AD2r 3  18           	clc 			; look down 16 pixels.
000AD3r 3               numsp5:
000AD3r 3  69 10        	adc #SPR_HGT
000AD5r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000AD7r 3  4C rr rr     	jmp laddv
000ADAr 3               
000ADAr 3               ;------------------------------------------
000ADAr 3               ; Ladder up check.
000ADAr 3               ;
000ADAr 3               ; Input:
000ADAr 3               ;  IX = sprite pointer
000ADAr 3               ;
000ADAr 3               ; Output:
000ADAr 3               ;  A  = 0 is ok, A <>0 is not ok
000ADAr 3               ;------------------------------------------
000ADAr 3               
000ADAr 3               laddu:
000ADAr 3  A0 09        	ldy #9
000ADCr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000ADEr 3  85 rr        	sta dispx
000AE0r 3               
000AE0r 3  A0 08        	ldy #8
000AE2r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000AE4r 3  29 FE        	and #254 		; make it even.
000AE6r 3  91 rr        	sta (z80_ix),y		; reset it.
000AE8r 3  18           	clc 			; look 2 pixels above feet.
000AE9r 3               numsp6:
000AE9r 3  69 0E        	adc #SPR_HGT-2
000AEBr 3  85 rr        	sta dispy		; coords in dispx,dispy.
000AEDr 3               laddv:
000AEDr 3  20 rr rr     	jsr tstbl 		; get map address.
000AF0r 3  20 rr rr     	jsr ldchk 		; standard ladder check.
000AF3r 3  F0 01        	beq :+
000AF5r 3  60           	rts 			; no way through.
000AF6r 3               :
000AF6r 3  E6 rr        	inc bufaddr 		; look right one cell.
000AF8r 3  D0 02        	bne :+
000AFAr 3  E6 rr        	inc bufaddr+1
000AFCr 3               :
000AFCr 3  20 rr rr     	jsr ldchk 		; do the check.
000AFFr 3  F0 01        	beq :+
000B01r 3  60           	rts 			; impassable.
000B02r 3               :
000B02r 3  A5 rr        	lda dispx 		; y coordinate.
000B04r 3  29 07        	and #7 			; position straddling block cells.
000B06r 3  D0 01        	bne :+
000B08r 3  60           	rts 			; no more checks needed.
000B09r 3               :
000B09r 3  E6 rr        	inc bufaddr 		; look to third cell.
000B0Br 3  D0 02        	bne :+
000B0Dr 3  E6 rr        	inc bufaddr+1
000B0Fr 3               :
000B0Fr 3  20 rr rr     	jsr ldchk 		; do the check.
000B12r 3  60           	rts  			; return with zero flag set accordingly.
000B13r 3               .endif
000B13r 3               
000B13r 3               ;---------------------------------------------------------
000B13r 3               ; Can go up check.
000B13r 3               ;
000B13r 3               ; Input:
000B13r 3               ;  IX = sprite pointer
000B13r 3               ;
000B13r 3               ; Output:
000B13r 3               ;  A  = 0 is ok, A <>0 is not ok
000B13r 3               ;---------------------------------------------------------
000B13r 3               
000B13r 3               cangu:
000B13r 3  A0 09        	ldy #9
000B15r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B17r 3  85 rr        	sta dispx
000B19r 3  A0 08        	ldy #8
000B1Br 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000B1Dr 3  38           	sec
000B1Er 3  E9 02        	sbc #2
000B20r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000B22r 3  20 rr rr     	jsr tstbl 		; get map address.
000B25r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000B28r 3  F0 01        	beq :+
000B2Ar 3  60           	rts			; no way through.
000B2Br 3               :
000B2Br 3  E6 rr        	inc bufaddr		; look right one cell.
000B2Dr 3  D0 02        	bne :+
000B2Fr 3  E6 rr        	inc bufaddr+1
000B31r 3               :
000B31r 3  20 rr rr     	jsr lrchk 		; do the check.
000B34r 3  F0 01        	beq :+
000B36r 3  60           	rts			; impassable.
000B37r 3               :
000B37r 3  A5 rr        	lda dispx		; x coordinate.
000B39r 3  29 07        	and #7			; position straddling block cells.
000B3Br 3  D0 01        	bne :+
000B3Dr 3  60           	rts			; no more checks needed.
000B3Er 3               :
000B3Er 3  E6 rr        	inc bufaddr		; look to third cell.
000B40r 3  D0 02        	bne :+
000B42r 3  E6 rr        	inc bufaddr+1
000B44r 3               :
000B44r 3  20 rr rr     	jsr lrchk		; do the check.
000B47r 3  60           	rts 			; return with zero flag set accordingly.
000B48r 3               
000B48r 3               ;---------------------------------------------------------
000B48r 3               ; Can go down check.
000B48r 3               ;
000B48r 3               ; Input:
000B48r 3               ;  IX = sprite pointer
000B48r 3               ;
000B48r 3               ; Output:
000B48r 3               ;  A  = 0 is ok, A <>0 is not ok
000B48r 3               ;---------------------------------------------------------
000B48r 3               
000B48r 3               cangd:
000B48r 3  A0 09        	ldy #9
000B4Ar 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000B4Cr 3  85 rr        	sta dispx
000B4Er 3  A0 08        	ldy #8
000B50r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B52r 3  18           	clc
000B53r 3               numsp3:
000B53r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000B55r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000B57r 3  20 rr rr     	jsr tstbl 		; get map address.
000B5Ar 3  20 rr rr     	jsr plchk 		; block, platform check.
000B5Dr 3  F0 01        	beq :+
000B5Fr 3  60           	rts			; no way through.
000B60r 3               :
000B60r 3  E6 rr        	inc bufaddr		; look right one cell.
000B62r 3  D0 02        	bne :+
000B64r 3  E6 rr        	inc bufaddr+1
000B66r 3               :
000B66r 3  20 rr rr     	jsr plchk		; block, platform check.
000B69r 3  F0 01        	beq :+
000B6Br 3  60           	rts			; impassable.
000B6Cr 3               :
000B6Cr 3  A5 rr        	lda dispx		; x coordinate.
000B6Er 3  29 07        	and #7			; position straddling block cells.
000B70r 3  D0 01        	bne :+
000B72r 3  60           	rts			; no more checks needed.
000B73r 3               :
000B73r 3  E6 rr        	inc bufaddr		; look to third cell.
000B75r 3  D0 02        	bne :+
000B77r 3  E6 rr        	inc bufaddr+1
000B79r 3               :
000B79r 3  20 rr rr     	jsr plchk		; block, platform check.
000B7Cr 3  60           	rts			; return with zero flag set accordingly.
000B7Dr 3               
000B7Dr 3               ;---------------------------------------------------------
000B7Dr 3               ; Can go left check.
000B7Dr 3               ;
000B7Dr 3               ; Input:
000B7Dr 3               ;  IX = sprite pointer
000B7Dr 3               ;
000B7Dr 3               ; Output:
000B7Dr 3               ;  A  = 0 is ok, A <>0 is not ok
000B7Dr 3               ;---------------------------------------------------------
000B7Dr 3               
000B7Dr 3               cangl:
000B7Dr 3  A0 08        	ldy #8
000B7Fr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000B81r 3  85 rr        	sta dispy
000B83r 3  A0 09        	ldy #9
000B85r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000B87r 3  38           	sec
000B88r 3  E9 02        	sbc #2			; look left 2 pixels.
000B8Ar 3  85 rr        	sta dispx		; coords in dispx,dispy.
000B8Cr 3  4C rr rr     	jmp cangh		; test if we can go there.
000B8Fr 3               
000B8Fr 3               ;---------------------------------------------------------
000B8Fr 3               ; Can go right check.
000B8Fr 3               ;
000B8Fr 3               ; Input:
000B8Fr 3               ;  IX = sprite pointer
000B8Fr 3               ;
000B8Fr 3               ; Output:
000B8Fr 3               ;  A  = 0 is ok, A <>0 is not ok
000B8Fr 3               ;---------------------------------------------------------
000B8Fr 3               
000B8Fr 3               cangr:
000B8Fr 3  A0 08        	ldy #8
000B91r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000B93r 3  85 rr        	sta dispy
000B95r 3  A0 09        	ldy #9
000B97r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000B99r 3  18           	clc
000B9Ar 3  69 10        	adc #16			; look right 16 pixels.
000B9Cr 3  85 rr        	sta dispx		; coords in dispx,dispy.
000B9Er 3               cangh:
000B9Er 3               cangh2:
000B9Er 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000BA0r 3  85 rr        	sta z80_b
000BA2r 3  A5 rr        	lda dispy		; y position.
000BA4r 3  29 07        	and #7			; does x straddle cells?
000BA6r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000BA8r 3  C6 rr        	dec z80_b		; one less row to write.
000BAAr 3               cangh0:
000BAAr 3  20 rr rr     	jsr tstbl		; get map address.
000BADr 3               cangh1:
000BADr 3  20 rr rr     	jsr lrchk		; standard left/right check.
000BB0r 3  F0 01        	beq :+
000BB2r 3  60           	rts			; no way through.
000BB3r 3               :
000BB3r 3  48           	pha
000BB4r 3  18           	clc
000BB5r 3  A5 rr        	lda bufaddr
000BB7r 3  69 20        	adc #32		; look down.
000BB9r 3  85 rr        	sta bufaddr
000BBBr 3  90 02        	bcc :+
000BBDr 3  E6 rr        	inc bufaddr+1
000BBFr 3               :
000BBFr 3  68           	pla
000BC0r 3               
000BC0r 3  C6 rr        	dec z80_b
000BC2r 3  D0 E9        	bne cangh1
000BC4r 3  60           	rts
000BC5r 3               
000BC5r 3               ;-------------------------------------
000BC5r 3               ; Check left/right movement is okay.
000BC5r 3               ;
000BC5r 3               ; Input:
000BC5r 3               ;  bufaddr = MAP + x/8 + y/8*32
000BC5r 3               ;
000BC5r 3               ; Output:
000BC5r 3               ;  A  = 0 is ok, A <>0 is not ok
000BC5r 3               ;-------------------------------------
000BC5r 3               
000BC5r 3               lrchk:
000BC5r 3  A0 00        	ldy #0
000BC7r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000BC9r 3  C9 02        	cmp #WALL 		; is it passable?
000BCBr 3  F0 0A        	beq lrchkx		; no.
000BCDr 3               
000BCDr 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000BCFr 3  F0 06        	beq lrchkx		; not passable.
000BD1r 3  A9 00        	lda #0
000BD3r 3  60           	rts
000BD4r 3               
000BD4r 3               ;--------------------------------------------------------------
000BD4r 3               ; Called by mmenu
000BD4r 3               ;--------------------------------------------------------------
000BD4r 3               
000BD4r 3               always:
000BD4r 3  A9 FF        	lda #255		; report it as okay.
000BD6r 3  60           	rts
000BD7r 3               
000BD7r 3               lrchkx:
000BD7r 3  A9 01        	lda #1 			; reset all bits.
000BD9r 3  60           	rts
000BDAr 3               
000BDAr 3               
000BDAr 3               ;--------------------------------------------------------------
000BDAr 3               ; Check platform or solid item is not in way.
000BDAr 3               ;
000BDAr 3               ; Input:
000BDAr 3               ;  bufaddr = MAP + x/8 + y/8*32
000BDAr 3               ;
000BDAr 3               ; Output:
000BDAr 3               ;  A  = 0 is ok, A <>0 is not ok
000BDAr 3               ;--------------------------------------------------------------
000BDAr 3               
000BDAr 3               plchk:
000BDAr 3  A0 00        	ldy #0
000BDCr 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000BDEr 3  C9 02        	cmp #WALL 		; is it passable?
000BE0r 3  F0 F5        	beq lrchkx		; no.
000BE2r 3               .if pflag .or dflag
000BE2r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000BE4r 3  F0 F1        	beq lrchkx		; not passable.
000BE6r 3               .endif
000BE6r 3  C9 01        	cmp #PLATFM		; platform is solid.
000BE8r 3  F0 07        	beq plchkx		; not passable.
000BEAr 3               .if lflag
000BEAr 3  C9 03        	cmp #LADDER		; is it a ladder?
000BECr 3  F0 E9        	beq lrchkx		; on ladder, deny movement.
000BEEr 3               .endif
000BEEr 3               plchk0:
000BEEr 3  A9 00        	lda #0			; report as ok
000BF0r 3  60           	rts
000BF1r 3               plchkx:
000BF1r 3  A5 rr        	lda dispy		; x coordinate.
000BF3r 3  29 07        	and #7			; position straddling blocks.
000BF5r 3  F0 E0        	beq lrchkx		; on platform, deny movement.
000BF7r 3  4C rr rr     	jmp plchk0
000BFAr 3               
000BFAr 3               ;--------------------------------------------------------------
000BFAr 3               ; Check ladder is available.
000BFAr 3               ;
000BFAr 3               ; Input:
000BFAr 3               ;  bufaddr = MAP + x/8 + y/8*32
000BFAr 3               ;
000BFAr 3               ; Output:
000BFAr 3               ;  A  = 0 is ok, A <>0 is not ok
000BFAr 3               ;--------------------------------------------------------------
000BFAr 3               
000BFAr 3               .if lflag
000BFAr 3               ldchk:
000BFAr 3  A0 00        	ldy #0
000BFCr 3  B1 rr        	lda (bufaddr),y 	; fetch cell.
000BFEr 3  C9 03        	cmp #LADDER 		; is it a ladder?
000C00r 3  F0 03        	beq ldchk1
000C02r 3  A9 01        	lda #1
000C04r 3  60           	rts  			; return with zero flag set accordingly.
000C05r 3               ldchk1:
000C05r 3  A9 00        	lda #0
000C07r 3  60           	rts
000C08r 3               .endif
000C08r 3               
000C08r 3               ;--------------------------------------------------------------
000C08r 3               ; Get collectables.
000C08r 3               ;--------------------------------------------------------------
000C08r 3               
000C08r 3               .if cflag
000C08r 3               getcol:
000C08r 3                       lda #COLECT             ; collectable blocks.
000C08r 3                       sta z80_b
000C08r 3                       jsr tded                ; test for collectable blocks.
000C08r 3                       cmp z80_b               ; did we find one?
000C08r 3                       beq :+
000C08r 3                       rts                     ; none were found, job done.
000C08r 3               :
000C08r 3                       jsr gtblk               ; get block.
000C08r 3                       jsr evnt20              ; collected block event.
000C08r 3                       jmp getcol              ; repeat until none left.
000C08r 3               
000C08r 3               ; Get collectable block.
000C08r 3               
000C08r 3               gtblk:
000C08r 3               	ldy #0
000C08r 3               	lda (bufaddr),y
000C08r 3               	sta z80_a
000C08r 3                       lda #0
000C08r 3                       sta (bufaddr),y		; make it empty now.
000C08r 3               
000C08r 3               	lda bufaddr		; set dispx
000C08r 3               	and #31
000C08r 3               	sta dispx
000C08r 3               
000C08r 3               	lda bufaddr+1		; Set dispy
000C08r 3               	sec
000C08r 3               	sbc #>MAP
000C08r 3               	sta bufaddr+1
000C08r 3               	asl bufaddr
000C08r 3               	rol bufaddr+1
000C08r 3               	asl bufaddr
000C08r 3               	rol bufaddr+1
000C08r 3               	asl bufaddr
000C08r 3               	rol bufaddr+1
000C08r 3               	lda bufaddr+1
000C08r 3               	sta dispy
000C08r 3               
000C08r 3               	lda colpatt		; get blocknr
000C08r 3               	sta z80_e		; displacement in e.
000C08r 3               	lda #0
000C08r 3               	sta z80_d		; no high byte.
000C08r 3               	asl z80_e  		; multiply char by 8.
000C08r 3               	rol z80_d
000C08r 3               	asl z80_e
000C08r 3               	rol z80_d
000C08r 3               	asl z80_e
000C08r 3               	rol z80_d
000C08r 3               	clc
000C08r 3               	lda z80_e
000C08r 3               	adc #<chgfx 		; address of graphics.
000C08r 3               	sta tileaddr
000C08r 3               	lda z80_d
000C08r 3               	adc #>chgfx
000C08r 3               	sta tileaddr+1
000C08r 3               
000C08r 3               	jsr gprad 		; get screen address.
000C08r 3               	ldx #7			; number of pixel rows to write.
000C08r 3               gtblk0:
000C08r 3               	ldy #0
000C08r 3               	lda (tileaddr),y 	; get image byte.
000C08r 3               	ldy scrtab,x
000C08r 3               	eor (scraddr),y 	; XOR tile on screen
000C08r 3               	sta (scraddr),y 	; copy to screen.
000C08r 3               	inc tileaddr 		; next image byte.
000C08r 3               	bne :+
000C08r 3               	inc tileaddr+1
000C08r 3               :
000C08r 3               	dex	 		; repeat for 8 pixel rows.
000C08r 3               	bpl gtblk0
000C08r 3               	rts
000C08r 3               .endif
000C08r 3               
000C08r 3               ;--------------------------------------------------------------
000C08r 3               ; Touched deadly block check.
000C08r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
000C08r 3               ;
000C08r 3               ; Input:
000C08r 3               ;  IX = sprite address
000C08r 3               ;
000C08r 3               ; Output:
000C08r 3               ;  A  = 0 is ok, A=5 is not ok
000C08r 3               ;--------------------------------------------------------------
000C08r 3               
000C08r 3               tded:
000C08r 3  A0 08        	ldy #8
000C0Ar 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000C0Cr 3  85 rr        	sta dispy
000C0Er 3  C8           	iny
000C0Fr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000C11r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000C13r 3  20 rr rr     	jsr tstbl		; get map address.
000C16r 3  48           	pha
000C17r 3  A9 1F        	lda #31			; default distance to next line down.
000C19r 3  85 rr        	sta z80_e
000C1Br 3  68           	pla
000C1Cr 3  C5 rr        	cmp z80_b		; is this the required block?
000C1Er 3  D0 01        	bne :+
000C20r 3  60           	rts			; yes.
000C21r 3               :
000C21r 3  E6 rr        	inc bufaddr 		; next cell.
000C23r 3  D0 02        	bne :+
000C25r 3  E6 rr        	inc bufaddr+1
000C27r 3               :
000C27r 3  A0 00        	ldy #0
000C29r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000C2Br 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000C2Dr 3  D0 01        	bne :+
000C2Fr 3  60           	rts			; yes.
000C30r 3               :
000C30r 3  A5 rr        	lda dispx		; horizontal position.
000C32r 3  85 rr        	sta z80_c 		; store column in c register.
000C34r 3  29 07        	and #7			; is it straddling cells?
000C36r 3  D0 03        	bne :+
000C38r 3  4C rr rr     	jmp tded0		; no.
000C3Br 3               :
000C3Br 3  E6 rr        	inc bufaddr 		; last cell.
000C3Dr 3  D0 02        	bne :+
000C3Fr 3  E6 rr        	inc bufaddr+1
000C41r 3               :
000C41r 3  A0 00        	ldy #0
000C43r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C45r 3  C5 rr        	cmp z80_b		; is this the block?
000C47r 3  D0 01        	bne :+
000C49r 3  60           	rts			; yes.
000C4Ar 3               :
000C4Ar 3  C6 rr        	dec z80_e		; one less cell to next row down.
000C4Cr 3               tded0:
000C4Cr 3  18           	clc 			; point to next row.
000C4Dr 3  A5 rr        	lda bufaddr
000C4Fr 3  65 rr        	adc z80_e
000C51r 3  85 rr        	sta bufaddr
000C53r 3  90 02        	bcc :+
000C55r 3  E6 rr        	inc bufaddr+1
000C57r 3               :
000C57r 3  A0 00        	ldy #0
000C59r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000C5Br 3  C5 rr        	cmp z80_b		; is this fatal?
000C5Dr 3  D0 01        	bne :+
000C5Fr 3  60           	rts			; yes.
000C60r 3               :
000C60r 3  E6 rr        	inc bufaddr 		; next cell.
000C62r 3  D0 02        	bne :+
000C64r 3  E6 rr        	inc bufaddr+1
000C66r 3               :
000C66r 3  A0 00        	ldy #0
000C68r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000C6Ar 3  C5 rr        	cmp z80_b		; is this fatal?
000C6Cr 3  D0 01        	bne :+
000C6Er 3  60           	rts			; yes.
000C6Fr 3               :
000C6Fr 3  A5 rr        	lda z80_c		; horizontal position.
000C71r 3  29 07        	and #7			; is it straddling cells?
000C73r 3  D0 03        	bne :+
000C75r 3  4C rr rr     	jmp tded1 		; no.
000C78r 3               :
000C78r 3  E6 rr        	inc bufaddr		; last cell.
000C7Ar 3  D0 02        	bne :+
000C7Cr 3  E6 rr        	inc bufaddr+1
000C7Er 3               :
000C7Er 3  A0 00        	ldy #0
000C80r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000C82r 3  C5 rr        	cmp z80_b		; is this fatal?
000C84r 3  D0 01        	bne :+
000C86r 3  60           	rts			; yes.
000C87r 3               :
000C87r 3               tded1:
000C87r 3  A5 rr        	lda dispy		; vertical position.
000C89r 3  29 07        	and #7 			; is it straddling cells?
000C8Br 3  D0 01        	bne :+
000C8Dr 3  60           	rts			; no, job done.
000C8Er 3               :
000C8Er 3  18           	clc			; point to next row.
000C8Fr 3  A5 rr        	lda bufaddr
000C91r 3  65 rr        	adc z80_e
000C93r 3  85 rr        	sta bufaddr
000C95r 3  90 02        	bcc :+
000C97r 3  E6 rr        	inc bufaddr+1
000C99r 3               :
000C99r 3  A0 00        	ldy #0
000C9Br 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000C9Dr 3  C5 rr        	cmp z80_b		; is this fatal?
000C9Fr 3  D0 01        	bne :+
000CA1r 3  60           	rts			; yes.
000CA2r 3               :
000CA2r 3  E6 rr        	inc bufaddr		; next cell.
000CA4r 3  D0 02        	bne :+
000CA6r 3  E6 rr        	inc bufaddr+1
000CA8r 3               :
000CA8r 3  A0 00        	ldy #0
000CAAr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000CACr 3  C5 rr        	cmp z80_b		; is this fatal?
000CAEr 3  D0 01        	bne :+
000CB0r 3  60           	rts			; yes.
000CB1r 3               :
000CB1r 3  A5 rr        	lda z80_c		; horizontal position.
000CB3r 3  29 07        	and #7			; is it straddling cells?
000CB5r 3  D0 01        	bne :+
000CB7r 3  60           	rts			; no.
000CB8r 3               :
000CB8r 3  E6 rr        	inc bufaddr		; last cell.
000CBAr 3  D0 02        	bne :+
000CBCr 3  E6 rr        	inc bufaddr+1
000CBEr 3               :
000CBEr 3  A0 00        	ldy #0
000CC0r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000CC2r 3  60           	rts 			; return with final type in accumulator.
000CC3r 3               
000CC3r 3               ;---------------------------------------------------
000CC3r 3               ; Fetch block type at (dispx, dispy).
000CC3r 3               ;
000CC3r 3               ; Output:
000CC3r 3               ;  A = block type
000CC3r 3               ;---------------------------------------------------
000CC3r 3               
000CC3r 3               tstbl:
000CC3r 3  A5 rr        	lda dispy 		; fetch y coord.
000CC5r 3  4A           	lsr a			; bufaddr = y/8
000CC6r 3  4A           	lsr a
000CC7r 3  4A           	lsr a
000CC8r 3               ;	sta chary
000CC8r 3               
000CC8r 3  85 rr        	sta bufaddr
000CCAr 3  A9 00        	lda #0
000CCCr 3  85 rr        	sta bufaddr+1
000CCEr 3               
000CCEr 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000CD0r 3  26 rr        	rol bufaddr+1
000CD2r 3  06 rr        	asl bufaddr
000CD4r 3  26 rr        	rol bufaddr+1
000CD6r 3  06 rr        	asl bufaddr
000CD8r 3  26 rr        	rol bufaddr+1
000CDAr 3  06 rr        	asl bufaddr
000CDCr 3  26 rr        	rol bufaddr+1
000CDEr 3  06 rr        	asl bufaddr
000CE0r 3  26 rr        	rol bufaddr+1
000CE2r 3               
000CE2r 3  A5 rr        	lda dispx		; x/8
000CE4r 3  4A           	lsr a
000CE5r 3  4A           	lsr a
000CE6r 3  4A           	lsr a
000CE7r 3               ;	sta charx
000CE7r 3               
000CE7r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000CE8r 3  65 rr        	adc bufaddr
000CEAr 3  69 00        	adc #<MAP
000CECr 3  85 rr        	sta bufaddr
000CEEr 3  A5 rr        	lda bufaddr+1
000CF0r 3  69 04        	adc #>MAP
000CF2r 3  85 rr        	sta bufaddr+1
000CF4r 3               
000CF4r 3  A0 00        	ldy #0
000CF6r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
000CF8r 3  60           	rts
000CF9r 3               
000CF9r 3               ;-------------------------------------------------------------------
000CF9r 3               ; Jump - if we can.
000CF9r 3               ; Requires initial speed to be set up in accumulator prior to call.
000CF9r 3               ;
000CF9r 3               ; Input:
000CF9r 3               ;  IX = sprite address
000CF9r 3               ;-------------------------------------------------------------------
000CF9r 3               
000CF9r 3               jump:
000CF9r 3  A0 0D        	ldy #var_jumpLo
000CFBr 3  B1 rr        	lda (z80_ix),y		; jump table low.
000CFDr 3  A0 0E        	ldy #var_jumpHi
000CFFr 3  11 rr        	ora (z80_ix),y		; jump table high.
000D01r 3  F0 01        	beq :+
000D03r 3  60           	rts			; already in the air.
000D04r 3               :
000D04r 3  A9 rr        	lda #>jtab
000D06r 3  A0 0E        	ldy #var_jumpHi
000D08r 3  91 rr        	sta (z80_ix),y		; set jump high.
000D0Ar 3  A9 rr        	lda #<jtab		; jump table start.
000D0Cr 3  A0 0D        	ldy #var_jumpLo
000D0Er 3  91 rr        	sta (z80_ix),y		; set jump low.
000D10r 3  60           	rts
000D11r 3               
000D11r 3               ; Jump table.
000D11r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000D11r 3               ;.align 32
000D11r 3               ;jtab:
000D11r 3               ;	.byte 248,250,252
000D11r 3               ;	.byte 254,254,255
000D11r 3               ;	.byte 255,255,0,0
000D11r 3               ;	.byte 0,1,1,1,2,2
000D11r 3               ;	.byte 4,6,8,8,8,99
000D11r 3               
000D11r 3               ;------------------------------------------------
000D11r 3               ; Random numbers code.
000D11r 3               ; Pseudo-random number generator, 8-bit.
000D11r 3               ;
000D11r 3               ; Output:
000D11r 3               ;  RND = random number
000D11r 3               ;------------------------------------------------
000D11r 3               
000D11r 3               random:
000D11r 3  A5 rr        	lda seed
000D13r 3  F0 05        	beq doEor
000D15r 3  0A           	asl a
000D16r 3  F0 04        	beq noEor
000D18r 3  90 02        	bcc noEor
000D1Ar 3  49 1D        doEor:	eor #$1d
000D1Cr 3  85 rr        noEor:	sta seed
000D1Er 3  60           	rts
000D1Fr 3               
000D1Fr 3  A5 rr        	lda seed		; get last random number.
000D21r 3  0A           	asl a
000D22r 3  0A           	asl a
000D23r 3  18           	clc
000D24r 3  65 rr        	adc seed
000D26r 3  18           	clc
000D27r 3  69 45        	adc #$45
000D29r 3  85 rr        	sta seed		; store new seed.
000D2Br 3  85 rr        	sta varrnd		; return number in variable.
000D2Dr 3  60           	rts
000D2Er 3               
000D2Er 3               ;-------------------------------------------------------
000D2Er 3               ; Joystick and keyboard reading routines.
000D2Er 3               ;
000D2Er 3               ; contrl = 0, Keyboard
000D2Er 3               ;          1, JoyKeyb
000D2Er 3               ;          2, JoyMMC
000D2Er 3               ;
000D2Er 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000D2Er 3               ;             ||||||||
000D2Er 3               ;             |||||||+> Right    KEY 0  - X
000D2Er 3               ;             ||||||+-> Left     KEY 1  - Z
000D2Er 3               ;             |||||+--> Down     KEY 2  - .
000D2Er 3               ;             ||||+---> Up       KEY 3  - ;
000D2Er 3               ;             |||+----> Fire1    KEY 4  - SPC
000D2Er 3               ;             ||+-----> Fire2    KEY 5  - Q
000D2Er 3               ;             |+------> Fire3    KEY 6  - P
000D2Er 3               ;             +-------> Not used
000D2Er 3               ;
000D2Er 3               ;                       Option1  KEY 7  - 1
000D2Er 3               ;                       Option2  KEY 8  - 2
000D2Er 3               ;                       Option3  KEY 9  - 3
000D2Er 3               ;                       Option4  KEY 10 - 4
000D2Er 3               ;-------------------------------------------------------
000D2Er 3               
000D2Er 3               joykey:
000D2Er 3  A5 rr        	lda contrl 		; control flag.
000D30r 3  C9 01        	cmp #1
000D32r 3  F0 1A        	beq joy1 		; scan joystick1
000D34r 3  C9 02        	cmp #2
000D36r 3  F0 1C        	beq joy2 		; scan joystick2
000D38r 3               
000D38r 3               ; Scan keyboard
000D38r 3               
000D38r 3  A9 00        	lda #0		 	; zero reading.
000D3Ar 3  85 rr        	sta z80_e
000D3Cr 3               
000D3Cr 3  A0 06        	ldy #6	 		; address of last key.
000D3Er 3               joyke0:
000D3Er 3  B9 rr rr     	lda keys,y 		; get key from table.
000D41r 3  20 rr rr     	jsr ktest		; being pressed?
000D44r 3  26 rr        	rol z80_e 		; rotate into reading.
000D46r 3               
000D46r 3  88           	dey		 	; next key.
000D47r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000D49r 3               joyret:
000D49r 3  A5 rr        	lda z80_e
000D4Br 3  85 rr        	sta joyval
000D4Dr 3  60           	rts
000D4Er 3               
000D4Er 3               ; Scan joystick 1
000D4Er 3               
000D4Er 3               joy1:
000D4Er 3  20 rr rr     	jsr joy1scan
000D51r 3  4C rr rr     	jmp joyret 		; store the value.
000D54r 3               
000D54r 3               ; Scan joystick 2
000D54r 3               
000D54r 3               joy2:
000D54r 3  20 rr rr     	jsr joy2scan
000D57r 3  4C rr rr     	jmp joyret 		; store the value.
000D5Ar 3               
000D5Ar 3               ;---------------------------------------------------------------
000D5Ar 3               ; Display message.
000D5Ar 3               ;
000D5Ar 3               ; Input:
000D5Ar 3               ;  A = message number
000D5Ar 3               ;---------------------------------------------------------------
000D5Ar 3               
000D5Ar 3               dmsg:
000D5Ar 3  AA           	tax
000D5Br 3  A9 rr        	lda #<msgdat		; pointer to messages.
000D5Dr 3  85 rr        	sta z80_l
000D5Fr 3  A9 rr        	lda #>msgdat
000D61r 3  85 rr        	sta z80_h
000D63r 3  20 rr rr     	jsr getwrd		; get message number.
000D66r 3               dmsg3:
000D66r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000D69r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000D6Cr 3  A5 rr        	lda prtmod		; print mode.
000D6Er 3  D0 47        	bne bmsg1		; no, double-height text.
000D70r 3               dmsg0:
000D70r 3  A5 rr        	lda z80_h		; store string pointer.
000D72r 3  48           	pha
000D73r 3  A5 rr        	lda z80_l
000D75r 3  48           	pha
000D76r 3               
000D76r 3  A0 00        	ldy #0
000D78r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000D7Ar 3  29 7F        	and #127		; remove any end marker.
000D7Cr 3  C9 0D        	cmp #ASCII_NEWLINE
000D7Er 3  F0 24        	beq dmsg1
000D80r 3  20 rr rr     	jsr pchar		; display character.
000D83r 3  20 rr rr     	jsr nexpos 		; display position.
000D86r 3  D0 03        	bne dmsg2		; not on a new line.
000D88r 3  20 rr rr     	jsr nexlin		; next line down.
000D8Br 3               dmsg2:
000D8Br 3  68           	pla			; retrieve string pointer
000D8Cr 3  85 rr        	sta z80_l
000D8Er 3  68           	pla
000D8Fr 3  85 rr        	sta z80_h
000D91r 3               
000D91r 3  A0 00        	ldy #0
000D93r 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000D95r 3  0A           	asl a  			; was it the end?
000D96r 3  90 03        	bcc :+
000D98r 3  4C rr rr     	jmp dscor2		; yes, job done.
000D9Br 3               :
000D9Br 3  E6 rr        	inc z80_l		; next character to display.
000D9Dr 3  D0 02        	bne :+
000D9Fr 3  E6 rr        	inc z80_h
000DA1r 3               :
000DA1r 3  4C rr rr     	jmp dmsg0
000DA4r 3               dmsg1:
000DA4r 3  E6 rr        	inc dispy
000DA6r 3  A5 rr        	lda dispy
000DA8r 3  C9 18        	cmp #24
000DAAr 3  90 04        	bcc dmsg4
000DACr 3  A9 00        	lda #0
000DAEr 3  85 rr        	sta dispy
000DB0r 3               dmsg4:
000DB0r 3  A9 00        	lda #0
000DB2r 3  85 rr        	sta dispx
000DB4r 3  4C rr rr     	jmp dmsg2
000DB7r 3               
000DB7r 3               
000DB7r 3               ;----------------------------------------------------------
000DB7r 3               ; Display message in big text.
000DB7r 3               ;
000DB7r 3               ; Input:
000DB7r 3               ;  HL = string pointer
000DB7r 3               ;----------------------------------------------------------
000DB7r 3               
000DB7r 3               bmsg1:
000DB7r 3  A0 00        	ldy #0
000DB9r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000DBBr 3  29 7F        	and #127		; only want 7 bits.
000DBDr 3  C9 0D        	cmp #ASCII_NEWLINE
000DBFr 3  F0 13        	beq bmsg2
000DC1r 3  20 rr rr     	jsr bchar 		; display big char.
000DC4r 3               bmsg3:
000DC4r 3  A0 00        	ldy #0
000DC6r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000DC8r 3  48           	pha
000DC9r 3  E6 rr        	inc z80_l 		; next character in list.
000DCBr 3  D0 02        	bne :+
000DCDr 3  E6 rr        	inc z80_h
000DCFr 3               :
000DCFr 3  68           	pla
000DD0r 3  0A           	asl a  			; was terminator flag set?
000DD1r 3  90 E4        	bcc bmsg1		; no, keep going.
000DD3r 3               
000DD3r 3  60           	rts
000DD4r 3               bmsg2:
000DD4r 3  A9 00        	lda #0
000DD6r 3  85 rr        	sta dispx
000DD8r 3  E6 rr        	inc dispy
000DDAr 3  E6 rr        	inc dispy
000DDCr 3  A5 rr        	lda dispy
000DDEr 3  C9 17        	cmp #23
000DE0r 3  90 E2        	bcc bmsg3
000DE2r 3  A9 00        	lda #0
000DE4r 3  85 rr        	sta dispy
000DE6r 3  4C rr rr     	jmp bmsg3
000DE9r 3               
000DE9r 3               ;----------------------------------------------------------
000DE9r 3               ; Big character display.
000DE9r 3               ;
000DE9r 3               ; Input:
000DE9r 3               ;  A = character
000DE9r 3               ;----------------------------------------------------------
000DE9r 3               
000DE9r 3               bchar:
000DE9r 3  85 rr        	sta z80_e		; save char in lb
000DEBr 3  A9 00        	lda #0
000DEDr 3  85 rr        	sta z80_d		; reset hb
000DEFr 3               
000DEFr 3  06 rr        	asl z80_e 		; multiply char by 8.
000DF1r 3  26 rr        	rol z80_d
000DF3r 3  06 rr        	asl z80_e
000DF5r 3  26 rr        	rol z80_d
000DF7r 3  06 rr        	asl z80_e
000DF9r 3  26 rr        	rol z80_d		; de = a*8
000DFBr 3               
000DFBr 3  18           	clc			; de = #<(FONT-256) + a*8
000DFCr 3  A5 rr        	lda z80_e
000DFEr 3  69 rr        	adc #<(FONT-256) 		; address of font.
000E00r 3  85 rr        	sta z80_e
000E02r 3  A5 rr        	lda z80_d
000E04r 3  69 rr        	adc #>(FONT-256)
000E06r 3  85 rr        	sta z80_d
000E08r 3               
000E08r 3  20 rr rr     	jsr gaadd		; set colour attribute
000E0Br 3  AD rr rr     	lda fontcol
000E0Er 3  A0 00        	ldy #0
000E10r 3  91 rr        	sta (bufaddr),y
000E12r 3               
000E12r 3  20 rr rr     	jsr gprad 		; get screen address.
000E15r 3               
000E15r 3  A2 00        	ldx #0			; height of character in font.
000E17r 3               bchar0:
000E17r 3  A0 00        	ldy #0
000E19r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000E1Br 3               
000E1Br 3               .if iflag
000E1Br 3               	eor #$ff
000E1Br 3               .endif
000E1Br 3               
000E1Br 3  91 rr        	sta (scraddr),y
000E1Dr 3  48           	pha
000E1Er 3  20 rr rr     	jsr nline 		; next line down.
000E21r 3  68           	pla
000E22r 3  91 rr        	sta (scraddr),y
000E24r 3  20 rr rr     	jsr nline 		; next line down.
000E27r 3               
000E27r 3  18           	clc
000E28r 3  E6 rr        	inc z80_e 		; next line of font.
000E2Ar 3  D0 02        	bne :+
000E2Cr 3  E6 rr        	inc z80_d
000E2Er 3               :
000E2Er 3  E8           	inx
000E2Fr 3  E0 08        	cpx #8
000E31r 3  D0 E4        	bne bchar0
000E33r 3               
000E33r 3  20 rr rr     	jsr nexpos		; display position.
000E36r 3  D0 05        	bne bchar2 		; not on a new line.
000E38r 3               bchar3:
000E38r 3  E6 rr        	inc dispy
000E3Ar 3  20 rr rr     	jsr nexlin 		; next line check.
000E3Dr 3               bchar2:
000E3Dr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000E40r 3               
000E40r 3               
000E40r 3               ;-------------------------------------------------
000E40r 3               ; Display a character.
000E40r 3               ;
000E40r 3               ; Input:
000E40r 3               ;  A = character
000E40r 3               ;-------------------------------------------------
000E40r 3               
000E40r 3               achar:
000E40r 3  85 rr        	sta z80_b 		; copy to b.
000E42r 3  20 rr rr     	jsr preprt 		; get ready to print.
000E45r 3  A5 rr        	lda z80_b		; character in accumulator.
000E47r 3  A6 rr        	ldx prtmod 		; print mode.
000E49r 3  F0 03        	beq :+
000E4Br 3  4C rr rr     	jmp bchar 		; no, double-height text.
000E4Er 3               :
000E4Er 3  20 rr rr     	jsr pchar 		; display character.
000E51r 3  20 rr rr     	jsr nexpos 		; display position.
000E54r 3  F0 E2        	beq bchar3		; next line down.
000E56r 3  4C rr rr     	jmp bchar2 		; tidy up.
000E59r 3               
000E59r 3               
000E59r 3               ;-------------------------------------------------
000E59r 3               ; Get next print column position.
000E59r 3               ;-------------------------------------------------
000E59r 3               
000E59r 3               nexpos:
000E59r 3  E6 rr        	inc dispx		; move along one position.
000E5Br 3  A5 rr        	lda dispx 		; get coordinate.
000E5Dr 3  C9 16        	cmp #22
000E5Fr 3  D0 0E        	bne :+
000E61r 3  A9 00        	lda #0
000E63r 3  85 rr        	sta dispx
000E65r 3  A5 rr        	lda prtmod
000E67r 3  F0 06        	beq :+
000E69r 3  20 rr rr     	jsr nexlin
000E6Cr 3  4C rr rr     	jmp nexlin
000E6Fr 3               :
000E6Fr 3  60           	rts
000E70r 3               
000E70r 3               ;-------------------------------------------------
000E70r 3               ; Get next print line position.
000E70r 3               ;-------------------------------------------------
000E70r 3               
000E70r 3               nexlin:
000E70r 3  E6 rr        	inc dispy 		; newline.
000E72r 3  A5 rr        	lda dispy		; vertical position.
000E74r 3  C9 16        	cmp #22			; past screen edge?
000E76r 3  B0 01        	bcs :+
000E78r 3  60           	rts			; no, still okay.
000E79r 3               :
000E79r 3  A9 00        	lda #0			; restart at top.
000E7Br 3  85 rr        	sta dispy
000E7Dr 3  60           	rts
000E7Er 3               
000E7Er 3               ;--------------------------------------------------------
000E7Er 3               ; Pre-print preliminaries.
000E7Er 3               ;--------------------------------------------------------
000E7Er 3               
000E7Er 3               preprt:
000E7Er 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000E80r 3  8D rr rr     	sta grbase		; set up graphics base.
000E83r 3  A9 rr        	lda #>(FONT-256)
000E85r 3  8D rr rr     	sta grbase+1
000E88r 3               prescr:
000E88r 3  A5 rr        	lda charx 		; display coordinates.
000E8Ar 3  85 rr        	sta dispx		; set up general coordinates.
000E8Cr 3  A5 rr        	lda chary
000E8Er 3  85 rr        	sta dispy
000E90r 3  60           	rts
000E91r 3               
000E91r 3               ;--------------------------------------------------------------
000E91r 3               ; Get messagenr x in hl
000E91r 3               ;
000E91r 3               ; Input:
000E91r 3               ;  HL = pointer to message list
000E91r 3               ;  X  = message number.
000E91r 3               ;--------------------------------------------------------------
000E91r 3               
000E91r 3               getwrd:
000E91r 3  E0 00        	cpx #0
000E93r 3  D0 01        	bne:+ 			; first word in list?
000E95r 3  60           	rts 			; yep, don't search.
000E96r 3               :
000E96r 3  A0 00        	ldy #0
000E98r 3               getwd0:
000E98r 3  B1 rr        	lda (z80_hl),y
000E9Ar 3  48           	pha
000E9Br 3  E6 rr        	inc z80_l
000E9Dr 3  D0 02        	bne :+
000E9Fr 3  E6 rr        	inc z80_h
000EA1r 3               :
000EA1r 3  68           	pla
000EA2r 3  C9 80        	cmp #128		; found end?
000EA4r 3  30 F2        	bmi getwd0		; no, carry on.
000EA6r 3  CA           	dex			; until we have right number.
000EA7r 3  D0 EF        	bne getwd0
000EA9r 3  60           	rts
000EAAr 3               
000EAAr 3               ;-----------------------------------------------------------
000EAAr 3               ; Bubble sort.
000EAAr 3               ;-----------------------------------------------------------
000EAAr 3               
000EAAr 3               bsort:
000EAAr 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000EACr 3  85 rr        	sta qscnt
000EAEr 3               
000EAEr 3  A9 rr        	lda #<sprtab 		; sprite table.
000EB0r 3  85 rr        	sta z80_x
000EB2r 3  A9 rr        	lda #>sprtab
000EB4r 3  85 rr        	sta z80_i
000EB6r 3               bsort0:
000EB6r 3  A0 00        	ldy #0
000EB8r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000EBAr 3  C9 FF        	cmp #255 		; is it switched off?
000EBCr 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000EBEr 3               
000EBEr 3  A0 11        	ldy #TABSIZ
000EC0r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000EC2r 3  C9 FF        	cmp #255 		; is it enabled?
000EC4r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000EC6r 3               
000EC6r 3  A0 14        	ldy #TABSIZ+3
000EC8r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000ECAr 3  A0 03        	ldy #3
000ECCr 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000ECEr 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000ED0r 3               bsort2:
000ED0r 3  18           	clc
000ED1r 3  A5 rr        	lda z80_x
000ED3r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000ED5r 3  85 rr        	sta z80_x
000ED7r 3  90 02        	bcc :+
000ED9r 3  E6 rr        	inc z80_i
000EDBr 3               :
000EDBr 3  C6 rr        	dec qscnt
000EDDr 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000EDFr 3  60           	rts
000EE0r 3               
000EE0r 3               bsort1:
000EE0r 3  A0 11        	ldy #TABSIZ
000EE2r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000EE4r 3  C9 FF        	cmp #255		; is it enabled?
000EE6r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000EE8r 3  20 rr rr     	jsr swspr		; swap positions.
000EEBr 3  4C rr rr     	jmp bsort2
000EEEr 3               swemp:
000EEEr 3  A0 11        	ldy #TABSIZ
000EF0r 3  B1 rr        	lda (z80_ix),y		; next table entry.
000EF2r 3  C9 FF        	cmp #255		; is that one on?
000EF4r 3  F0 DA        	beq bsort2		; no, nothing to swap.
000EF6r 3  20 rr rr     	jsr swspr		; swap positions.
000EF9r 3  4C rr rr     	jmp bsort2
000EFCr 3               
000EFCr 3               ; Swap sprites.
000EFCr 3               
000EFCr 3               swspr:
000EFCr 3  A5 rr        	lda z80_x		; table address
000EFEr 3  85 rr        	sta z80_e		; copy to de pair.
000F00r 3  85 rr        	sta z80_l		; copy to hl pair.
000F02r 3  A5 rr        	lda z80_i
000F04r 3  85 rr        	sta z80_h
000F06r 3  85 rr        	sta z80_d
000F08r 3               
000F08r 3  18           	clc
000F09r 3  A5 rr        	lda z80_l
000F0Br 3  69 11        	adc #TABSIZ		; distance to second entry.
000F0Dr 3  85 rr        	sta z80_l
000F0Fr 3  90 02        	bcc :+
000F11r 3  E6 rr        	inc z80_h
000F13r 3               :
000F13r 3  A9 11        	lda #TABSIZ		; bytes to swap.
000F15r 3  85 rr        	sta z80_b
000F17r 3  A0 00        	ldy #0
000F19r 3               swspr0:
000F19r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000F1Br 3  48           	pha
000F1Cr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000F1Er 3  91 rr        	sta (z80_hl),y 		; copy to second.
000F20r 3  68           	pla
000F21r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000F23r 3               
000F23r 3  E6 rr        	inc z80_e 		; next byte.
000F25r 3  D0 02        	bne :+
000F27r 3  E6 rr        	inc z80_d
000F29r 3               :
000F29r 3  E6 rr        	inc z80_l 		; next byte.
000F2Br 3  D0 02        	bne :+
000F2Dr 3  E6 rr        	inc z80_h
000F2Fr 3               :
000F2Fr 3  C6 rr        	dec z80_b
000F31r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000F33r 3  60           	rts
000F34r 3               
000F34r 3               ;----------------------------------------------------
000F34r 3               ; Process sprites.
000F34r 3               ;----------------------------------------------------
000F34r 3               
000F34r 3               pspr:
000F34r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000F36r 3  85 rr        	sta sprptr
000F38r 3               
000F38r 3  A9 rr        	lda #<sprtab 		; sprite table.
000F3Ar 3  85 rr        	sta z80_x
000F3Cr 3  A9 rr        	lda #>sprtab
000F3Er 3  85 rr        	sta z80_i
000F40r 3               pspr1:
000F40r 3  A0 00        	ldy #0
000F42r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000F44r 3  C9 09        	cmp #9 			; within range of sprite types?
000F46r 3  B0 03        	bcs :+
000F48r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000F4Br 3               :
000F4Br 3  18           	clc
000F4Cr 3  A5 rr        	lda z80_x
000F4Er 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000F50r 3  85 rr        	sta z80_x
000F52r 3  90 02        	bcc :+
000F54r 3  E6 rr        	inc z80_i		; next sprite.
000F56r 3               :
000F56r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000F58r 3  D0 E6        	bne pspr1
000F5Ar 3  60           	rts
000F5Br 3               
000F5Br 3               pspr2:
000F5Br 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000F5Dr 3  85 rr        	sta ogptr
000F5Fr 3  A5 rr        	lda z80_i
000F61r 3  85 rr        	sta ogptr+1
000F63r 3  20 rr rr     	jsr pspr3		; do the routine.
000F66r 3               rtorg:
000F66r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000F68r 3  85 rr        	sta z80_x
000F6Ar 3  A5 rr        	lda ogptr+1
000F6Cr 3  85 rr        	sta z80_i
000F6Er 3               rtorg0:
000F6Er 3  60           	rts
000F6Fr 3               
000F6Fr 3               pspr3:
000F6Fr 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000F71r 3  85 rr        	sta z80_l
000F73r 3  A9 rr        	lda #>evtyp0
000F75r 3  85 rr        	sta z80_h
000F77r 3               pspr4:
000F77r 3  B1 rr        	lda (z80_ix),y
000F79r 3  0A           	asl a			; double accumulator.
000F7Ar 3  18           	clc
000F7Br 3  65 rr        	adc z80_l
000F7Dr 3  85 rr        	sta z80_l
000F7Fr 3  90 02        	bcc :+
000F81r 3  E6 rr        	inc z80_h
000F83r 3               :
000F83r 3  B1 rr        	lda (z80_hl),y
000F85r 3  85 rr        	sta z80_e 		; copy to de.
000F87r 3  48           	pha
000F88r 3               
000F88r 3  E6 rr        	inc z80_l 		; next byte of address.
000F8Ar 3  D0 02        	bne :+
000F8Cr 3  E6 rr        	inc z80_h
000F8Er 3               :
000F8Er 3  B1 rr        	lda (z80_hl),y 		; address high.
000F90r 3  85 rr        	sta z80_d
000F92r 3               
000F92r 3  48           	pha	 		; swap address into hl.
000F93r 3  A5 rr        	lda z80_h
000F95r 3  85 rr        	sta z80_d
000F97r 3  68           	pla
000F98r 3  85 rr        	sta z80_h
000F9Ar 3  68           	pla
000F9Br 3  85 rr        	sta z80_l
000F9Dr 3  A5 rr        	lda z80_l
000F9Fr 3  85 rr        	sta z80_e
000FA1r 3               
000FA1r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000FA4r 3               
000FA4r 3               ; Address of each sprite type's routine.
000FA4r 3               
000FA4r 3  rr rr        evtyp0:	.word evnt00
000FA6r 3  rr rr        evtyp1:	.word evnt01
000FA8r 3  rr rr        evtyp2:	.word evnt02
000FAAr 3  rr rr        evtyp3:	.word evnt03
000FACr 3  rr rr        evtyp4:	.word evnt04
000FAEr 3  rr rr        evtyp5:	.word evnt05
000FB0r 3  rr rr        evtyp6:	.word evnt06
000FB2r 3  rr rr        evtyp7:	.word evnt07
000FB4r 3  rr rr        evtyp8:	.word evnt08
000FB6r 3               
000FB6r 3               ;--------------------------------------------------------------
000FB6r 3               ; Display sprites.
000FB6r 3               ;
000FB6r 3               ; Input:
000FB6r 3               ;  IX = sprite table
000FB6r 3               ;--------------------------------------------------------------
000FB6r 3               
000FB6r 3               dspr:
000FB6r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000FB8r 3  85 rr        	sta sprcnt
000FBAr 3               
000FBAr 3               dspr0:
000FBAr 3  A0 00        	ldy #var_Type
000FBCr 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000FBEr 3  C9 FF        	cmp #255 		; is it enabled?
000FC0r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000FC2r 3               dspr5:
000FC2r 3  A0 05        	ldy #var_newType
000FC4r 3  B1 rr        	lda (z80_ix),y 		; new type.
000FC6r 3  C9 FF        	cmp #255		; is it enabled?
000FC8r 3  F0 03        	beq dspr2
000FCAr 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000FCDr 3               dspr2:
000FCDr 3  A0 05        	ldy #var_newType
000FCFr 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000FD1r 3  A0 00        	ldy #var_Type
000FD3r 3  91 rr        	sta (z80_ix),y
000FD5r 3  A0 06        	ldy #var_newImage
000FD7r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000FD9r 3  A0 01        	ldy #var_Image
000FDBr 3  91 rr        	sta (z80_ix),y
000FDDr 3  A0 07        	ldy #var_newFrame
000FDFr 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000FE1r 3  A0 02        	ldy #var_Frame
000FE3r 3  91 rr        	sta (z80_ix),y
000FE5r 3  A0 08        	ldy #var_newY
000FE7r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000FE9r 3  A0 03        	ldy #var_Y
000FEBr 3  91 rr        	sta (z80_ix),y
000FEDr 3  A0 09        	ldy #var_newX
000FEFr 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000FF1r 3  A0 04        	ldy #var_X
000FF3r 3  91 rr        	sta (z80_ix),y
000FF5r 3               
000FF5r 3  18           	clc
000FF6r 3  A5 rr        	lda z80_x
000FF8r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000FFAr 3  85 rr        	sta z80_x
000FFCr 3  A5 rr        	lda z80_i
000FFEr 3  69 00        	adc #0
001000r 3  85 rr        	sta z80_i 		; next sprite.
001002r 3  C6 rr        	dec sprcnt
001004r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
001006r 3  60           	rts
001007r 3               
001007r 3               dspr1:
001007r 3               	; _BEEB clipping code copied from CPC Engine
001007r 3  A0 03        	ldy #var_Y
001009r 3  B1 rr        	lda (z80_ix), y		; old x coord
00100Br 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
00100Dr 3  B0 B3        	bcs dspr5		; yes, don't delete it.
00100Fr 3               
00100Fr 3  A0 05        	ldy #var_newType
001011r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
001013r 3  C9 FF        	cmp #255		; is this enabled?
001015r 3  D0 06        	bne dspr4 		; yes, display both.
001017r 3               
001017r 3               dspr6:
001017r 3  20 rr rr     	jsr sspria 		; show single sprite.
00101Ar 3  4C rr rr     	jmp dspr2
00101Dr 3               
00101Dr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
00101Dr 3               
00101Dr 3               dspr4:
00101Dr 3               	; _BEEB clipping code copied from CPC Engine
00101Dr 3  A0 08        	ldy #var_newY
00101Fr 3  B1 rr        	lda (z80_ix), y		; old x coord
001021r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
001023r 3  B0 F2        	bcs dspr6		; yes, don't display it.
001025r 3               
001025r 3  A0 04        	ldy #var_X
001027r 3  B1 rr        	lda (z80_ix),y		; old x.
001029r 3  A0 09        	ldy #var_newX
00102Br 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
00102Dr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
00102Fr 3               
00102Fr 3  A0 03        	ldy #var_Y
001031r 3  B1 rr        	lda (z80_ix),y		; old y.
001033r 3  A0 08        	ldy #var_newY
001035r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001037r 3  D0 17        	bne dspr7		; they differ, need to redraw.
001039r 3               
001039r 3  A0 02        	ldy #var_Frame
00103Br 3  B1 rr        	lda (z80_ix),y 		; old frame.
00103Dr 3  A0 07        	ldy #var_newFrame
00103Fr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
001041r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
001043r 3               
001043r 3  A0 01        	ldy #var_Image
001045r 3  B1 rr        	lda (z80_ix),y 		; old image.
001047r 3  A0 06        	ldy #var_newImage
001049r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
00104Br 3  D0 03        	bne dspr7 		; they differ, need to redraw.
00104Dr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
001050r 3               dspr7:
001050r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
001053r 3  4C rr rr     	jmp dspr2
001056r 3               dspr3:
001056r 3               	; _BEEB clipping code copied from CPC Engine
001056r 3  A0 08        	ldy #var_newY
001058r 3  B1 rr        	lda (z80_ix), y		; old x coord
00105Ar 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
00105Cr 3  90 03        	bcc :+			; no, continue
00105Er 3  4C rr rr     	jmp dspr2		; yes, don't display it.
001061r 3               :
001061r 3  20 rr rr     	jsr ssprib 		; show single sprite.
001064r 3  4C rr rr     	jmp dspr2
001067r 3               
001067r 3               ;-----------------------------------------
001067r 3               ; Get sprite address calculations.
001067r 3               ; gspran = new sprite, gsprad = old sprite.
001067r 3               ;
001067r 3               ; Input:
001067r 3               ;  IX = sprite address
001067r 3               ;-----------------------------------------
001067r 3               
001067r 3               gspran:
001067r 3  A0 08        	ldy #var_newY
001069r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
00106Br 3  85 rr        	sta dispy
00106Dr 3  A0 09        	ldy #var_newX
00106Fr 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
001071r 3  85 rr        	sta dispx
001073r 3  A0 06        	ldy #var_newImage
001075r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
001077r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
00107Ar 3               
00107Ar 3  A0 00        	ldy #0
00107Cr 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
00107Er 3  A0 07        	ldy #var_newFrame
001080r 3  18           	clc
001081r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
001083r 3  4C rr rr     	jmp gspra0
001086r 3               
001086r 3               ;-----------------------------------------
001086r 3               ; Calculate old sprite address
001086r 3               ;
001086r 3               ; Input:
001086r 3               ;  IX = sprite address
001086r 3               ;
001086r 3               ; Output:
001086r 3               ;  B  = right byte mask
001086r 3               ;  C  = left byte mask
001086r 3               ;  DE = spriteframe address
001086r 3               ;  scraddr = screenaddress(dispx,dispy)
001086r 3               ;-----------------------------------------
001086r 3               
001086r 3               gsprad:
001086r 3  A0 03        	ldy #var_Y
001088r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00108Ar 3  85 rr        	sta dispy
00108Cr 3  A0 04        	ldy #var_X
00108Er 3  B1 rr        	lda (z80_ix),y		; x coordinate.
001090r 3  85 rr        	sta dispx
001092r 3  A0 01        	ldy #var_Image
001094r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
001096r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
001099r 3               
001099r 3  A0 00        	ldy #0
00109Br 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
00109Dr 3  A0 02        	ldy #var_Frame
00109Fr 3  18           	clc
0010A0r 3  71 rr        	adc (z80_ix),y 		; add frame number.
0010A2r 3               
0010A2r 3               gspra0:
0010A2r 3               .if rflag
0010A2r 3               	sta z80_e		; multiply by 32.
0010A2r 3               	lda #0
0010A2r 3               	sta z80_d
0010A2r 3               
0010A2r 3               	asl z80_e
0010A2r 3               	rol z80_d
0010A2r 3               	asl z80_e
0010A2r 3               	rol z80_d
0010A2r 3               	asl z80_e
0010A2r 3               	rol z80_d
0010A2r 3               	asl z80_e
0010A2r 3               	rol z80_d
0010A2r 3               .if bflag
0010A2r 3               	lda z80_e		; multiply by 48
0010A2r 3               	sta tmp1
0010A2r 3               	lda z80_d
0010A2r 3               	sta tmp2
0010A2r 3               .endif
0010A2r 3               	asl z80_e
0010A2r 3               	rol z80_d
0010A2r 3               .if bflag
0010A2r 3               	clc
0010A2r 3               	lda z80_e
0010A2r 3               	adc tmp1
0010A2r 3               	sta z80_e
0010A2r 3               	lda z80_d
0010A2r 3               	adc tmp2
0010A2r 3               	sta z80_d
0010A2r 3               .endif
0010A2r 3               .else
0010A2r 3  4A           	lsr a	  		; multiply by 128.
0010A3r 3  85 rr        	sta z80_d 		; store in d.
0010A5r 3  85 rr        	sta tmp1
0010A7r 3  A9 00        	lda #0
0010A9r 3  6A           	ror a
0010AAr 3  85 rr        	sta z80_e 		; got low byte.
0010ACr 3  85 rr        	sta tmp2
0010AEr 3               .if bflag
0010AEr 3               	lsr tmp1		; multiply by 192
0010AEr 3               	ror tmp2
0010AEr 3               	clc
0010AEr 3               	lda tmp2
0010AEr 3               	adc z80_e
0010AEr 3               	sta z80_e
0010AEr 3               	lda tmp1
0010AEr 3               	adc z80_d
0010AEr 3               	sta z80_d
0010AEr 3               .endif
0010AEr 3               .endif
0010AEr 3  18           	clc 			; address of play sprites.
0010AFr 3  A5 rr        	lda z80_e
0010B1r 3  69 rr        	adc #<sprgfx
0010B3r 3  85 rr        	sta z80_e
0010B5r 3  A5 rr        	lda z80_d
0010B7r 3  69 rr        	adc #>sprgfx
0010B9r 3  85 rr        	sta z80_d
0010BBr 3               
0010BBr 3  A5 rr        	lda dispx 		; y coordinate.
0010BDr 3  29 06        	and #6 			; position within byte boundary.
0010BFr 3  AA           	tax	 		; low byte of table displacement.
0010C0r 3               .if rflag
0010C0r 3               	stx sprshft
0010C0r 3               .else
0010C0r 3  0A           	asl a	  		; multiply by 32.
0010C1r 3  0A           	asl a  			; already a multiple
0010C2r 3  0A           	asl a  			; of 2, so just 4
0010C3r 3               .if bflag
0010C3r 3               	sta tmp1
0010C3r 3               	asl a  			; shifts needed.
0010C3r 3               	clc
0010C3r 3               	adc tmp1
0010C3r 3               .else
0010C3r 3  0A           	asl a  			; shifts needed.
0010C4r 3               .endif
0010C4r 3  18           	clc 			; add to sprite address.
0010C5r 3  65 rr        	adc z80_e
0010C7r 3  85 rr        	sta z80_e
0010C9r 3  90 02        	bcc :+
0010CBr 3  E6 rr        	inc z80_d
0010CDr 3               :
0010CDr 3               .endif
0010CDr 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
0010D0r 3  85 rr        	sta z80_c 		; left mask.
0010D2r 3  BD rr rr     	lda spmask+1,x
0010D5r 3  85 rr        	sta z80_b 		; right mask.
0010D7r 3               ; Drop into screen address routine.
0010D7r 3  4C rr rr     	jmp scadd
0010DAr 3               
0010DAr 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
0010DEr 3  0F F0 03 FC  
0010E2r 3               
0010E2r 3               
0010E2r 3               ;-----------------------------------------------------------
0010E2r 3               ; Animates a sprite.
0010E2r 3               ;
0010E2r 3               ; Input:
0010E2r 3               ;  IX = sprite address
0010E2r 3               ;  HL = last sprite address
0010E2r 3               ;-----------------------------------------------------------
0010E2r 3               
0010E2r 3               animsp:
0010E2r 3  25 rr        	and frmno
0010E4r 3  F0 01        	beq :+
0010E6r 3  60           	rts
0010E7r 3               :
0010E7r 3  A0 06        	ldy #var_newImage
0010E9r 3  B1 rr        	lda (z80_ix),y		; sprite image
0010EBr 3  20 rr rr     	jsr gfrm		; get frame data.
0010EEr 3               
0010EEr 3  E6 rr        	inc z80_l		; point to frames.
0010F0r 3  D0 02        	bne :+
0010F2r 3  E6 rr        	inc z80_h
0010F4r 3               :
0010F4r 3  A0 07        	ldy #var_newFrame
0010F6r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
0010F8r 3  18           	clc
0010F9r 3  69 01        	adc #1			; next one along.
0010FBr 3  A0 00        	ldy #0
0010FDr 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
0010FFr 3  90 02        	bcc anims0		; no, not yet.
001101r 3  A9 00        	lda #0			; start at first frame.
001103r 3               anims0:
001103r 3  A0 07        	ldy #var_newFrame
001105r 3  91 rr        	sta (z80_ix),y		; new frame.
001107r 3  60           	rts
001108r 3               
001108r 3               ;--------------------------------------------------------------
001108r 3               ; Animate back
001108r 3               ;
001108r 3               ; Input:
001108r 3               ;  IX = sprite address
001108r 3               ;  HL = last sprite address
001108r 3               ;--------------------------------------------------------------
001108r 3               
001108r 3               animbk:
001108r 3  25 rr        	and frmno
00110Ar 3  F0 01        	beq :+
00110Cr 3  60           	rts
00110Dr 3               :
00110Dr 3  A0 06        	ldy #var_newImage
00110Fr 3  B1 rr        	lda (z80_ix),y		; sprite image.
001111r 3  20 rr rr     	jsr gfrm		; get frame data.
001114r 3               
001114r 3  E6 rr        	inc z80_l 		; point to frames.
001116r 3  D0 02        	bne :+
001118r 3  E6 rr        	inc z80_h
00111Ar 3               :
00111Ar 3  A0 07        	ldy #var_newFrame
00111Cr 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
00111Er 3  F0 03        	beq :+
001120r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
001123r 3               :
001123r 3  A0 00        	ldy #0
001125r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
001127r 3               rtanb0:
001127r 3  38           	sec
001128r 3  E9 01        	sbc #1			; next one along.
00112Ar 3  4C rr rr     	jmp anims0		; set new frame.
00112Dr 3               
00112Dr 3               ;--------------------------------------------------------------
00112Dr 3               ; Check for collision with other sprite, strict enforcement.
00112Dr 3               ;
00112Dr 3               ; Input:
00112Dr 3               ;  b		= sprite to test for
00112Dr 3               ;  ix		= current sprite pointer
00112Dr 3               ;
00112Dr 3               ; global:	b
00112Dr 3               ; local:	x,y,hl,de,skptr
00112Dr 3               ; calls:	-
00112Dr 3               ;--------------------------------------------------------------
00112Dr 3               
00112Dr 3               sktyp:
00112Dr 3  A9 rr        	lda #<sprtab				; sprite table.
00112Fr 3  85 rr        	sta z80_l
001131r 3  A9 rr        	lda #>sprtab
001133r 3  85 rr        	sta z80_h
001135r 3               numsp2:
001135r 3  A9 0C        	lda #NUMSPR				; number of sprites.
001137r 3  85 rr        	sta sktptr
001139r 3               sktyp0:
001139r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
00113Br 3  85 rr        	sta skptr
00113Dr 3  A5 rr        	lda z80_h
00113Fr 3  85 rr        	sta skptr+1
001141r 3               
001141r 3  A0 00        	ldy #0
001143r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
001145r 3  C5 rr        	cmp z80_b				; is it the type we seek?
001147r 3  F0 1D        	beq coltyp				; yes, we can use this one.
001149r 3               sktyp1:
001149r 3  18           	clc
00114Ar 3  A5 rr        	lda skptr				; retrieve sprite pointer.
00114Cr 3  69 11        	adc #TABSIZ				; size of each entry.
00114Er 3  85 rr        	sta z80_l
001150r 3  A5 rr        	lda skptr+1
001152r 3  69 00        	adc #0
001154r 3  85 rr        	sta z80_h
001156r 3  C6 rr        	dec sktptr					; one less iteration.
001158r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
00115Ar 3  A9 00        	lda #0					; default to ROM address - no sprite.
00115Cr 3  85 rr        	sta z80_l
00115Er 3  85 rr        	sta z80_h
001160r 3  85 rr        	sta skptr				; store pointer to sprite.
001162r 3  85 rr        	sta skptr+1
001164r 3               
001164r 3  18           	clc					; don't return with zero flag set.
001165r 3  60           	rts 					; didn't find one.
001166r 3               
001166r 3               coltyp:
001166r 3  A0 00        	ldy #0
001168r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
00116Ar 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
00116Cr 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
00116Er 3               colty0:
00116Er 3  A0 09        	ldy #9					; distance to x position in table.
001170r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
001172r 3  85 rr        	sta z80_e
001174r 3  88           	dey
001175r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
001177r 3  85 rr        	sta z80_d
001179r 3               
001179r 3               ; Drop into collision detection.
001179r 3               
001179r 3               colc16:
001179r 3  A0 09        	ldy #9
00117Br 3  B1 rr        	lda (z80_ix),y			 	; x coord.
00117Dr 3  38           	sec					; subtract x.
00117Er 3  E5 rr        	sbc z80_e
001180r 3  B0 05        	bcs  colc1a 				; result is positive.
001182r 3  49 FF        	eor #$ff				; make negative positive.
001184r 3  18           	clc
001185r 3  69 01        	adc #1
001187r 3               colc1a:
001187r 3  C9 10        	cmp #16 				; within x range?
001189r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
00118Br 3  85 rr        	sta z80_c				; store difference.
00118Dr 3               
00118Dr 3  A0 08        	ldy #8
00118Fr 3  B1 rr        	lda (z80_ix),y				; y coord.
001191r 3  38           	sec
001192r 3  E5 rr        	sbc z80_d				; subtract y.
001194r 3  B0 05        	bcs colc1b				; result is positive.
001196r 3  49 FF        	eor #$ff				; make negative positive.
001198r 3  18           	clc
001199r 3  69 01        	adc #1
00119Br 3               colc1b:
00119Br 3  C9 10        	cmp #16					; within y range?
00119Dr 3  B0 AA        	bcs sktyp1 				; no - they've missed.
00119Fr 3  18           	clc					; add x difference.
0011A0r 3  65 rr        	adc z80_c
0011A2r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0011A4r 3  B0 02        	bcs :+
0011A6r 3  38           	sec
0011A7r 3  60           	rts 					; carry set if there's a collision.
0011A8r 3               :
0011A8r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
0011ABr 3               colty1:
0011ABr 3  A5 rr        	lda z80_x  				; compare the two.
0011ADr 3  C5 rr        	cmp z80_l
0011AFr 3  D0 09        	bne end_col
0011B1r 3  A5 rr        	lda z80_i
0011B3r 3  C5 rr        	cmp z80_h
0011B5r 3  D0 03        	bne end_col
0011B7r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
0011BAr 3               end_col:
0011BAr 3  4C rr rr     	jmp colty0
0011BDr 3               
0011BDr 3               ;-----------------------------------------------------------
0011BDr 3               ; Display number, left aligned
0011BDr 3               ;
0011BDr 3               ; Input:
0011BDr 3               ;  a		= number
0011BDr 3               ;
0011BDr 3               ; global:	-
0011BDr 3               ; local:	a,y,bc,hl,displ0
0011BDr 3               ; calls:	num2ch,dmsg3
0011BDr 3               ;-----------------------------------------------------------
0011BDr 3               
0011BDr 3               disply:
0011BDr 3  85 rr        	sta z80_a
0011BFr 3  A9 rr        	lda #<displ0				; display workspace.
0011C1r 3  85 rr        	sta z80_c
0011C3r 3  A9 rr        	lda #>displ0
0011C5r 3  85 rr        	sta z80_b
0011C7r 3  A5 rr        	lda z80_a
0011C9r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
0011CCr 3               displ1:
0011CCr 3  C6 rr        	dec z80_c				; back one character.
0011CEr 3  D0 02        	bne :+
0011D0r 3  C6 rr        	dec z80_b
0011D2r 3               :
0011D2r 3  A0 00        	ldy #0
0011D4r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
0011D6r 3  09 80        	ora #128				; insert end marker.
0011D8r 3  91 rr        	sta (z80_bc),y				; new value.
0011DAr 3               
0011DAr 3  A9 rr        	lda #<displ0				; display space.
0011DCr 3  85 rr        	sta z80_l
0011DEr 3  A9 rr        	lda #>displ0
0011E0r 3  85 rr        	sta z80_h
0011E2r 3  4C rr rr     	jmp dmsg3				; display the string.
0011E5r 3               
0011E5r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
0011E9r 3               
0011E9r 3               ;----------------------------------------------------------------
0011E9r 3               ; Initialise screen.
0011E9r 3               ;
0011E9r 3               ; global:	roomtb,scno
0011E9r 3               ; local:	-
0011E9r 3               ; calls:	tstcs
0011E9r 3               ;----------------------------------------------------------------
0011E9r 3               
0011E9r 3               initsc:
0011E9r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
0011ECr 3  20 rr rr     	jsr tstsc 			; find displacement.
0011EFr 3  C9 FF        	cmp #255 			; is it valid?
0011F1r 3  F0 02        	beq init_end 			; no, it's rubbish.
0011F3r 3  85 rr        	sta scno			; store new room number.
0011F5r 3               init_end:
0011F5r 3  60           	rts
0011F6r 3               
0011F6r 3               ;----------------------------------------------------------------
0011F6r 3               ; Test screen.
0011F6r 3               ;
0011F6r 3               ; global:	-
0011F6r 3               ; local:	x
0011F6r 3               ; calls:	-
0011F6r 3               ;----------------------------------------------------------------
0011F6r 3               
0011F6r 3               tstsc:
0011F6r 3  85 rr        	sta tmproom
0011F8r 3  18           	clc
0011F9r 3  69 0B        	adc #MAPWID 			; add width in case we"re negative.
0011FBr 3  AA           	tax 				; add displacement to map data.
0011FCr 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
0011FFr 3  60           	rts
001200r 3               
001200r 3               ;--------------------------
001200r 3               ; Screen left.
001200r 3               ;--------------------------
001200r 3               
001200r 3               scrl:
001200r 3  AD rr rr     	lda roomtb 			; present room table pointer.
001203r 3  38           	sec
001204r 3  E9 01        	sbc #1				; room left.
001206r 3               scrl0:
001206r 3  20 rr rr     	jsr tstsc			; test screen.
001209r 3  C9 FF        	cmp #255			; is there a screen this way?
00120Br 3  D0 01        	bne :+
00120Dr 3  60           	rts				; no, return to loop.
00120Er 3               :
00120Er 3  A5 rr        	lda tmproom			; restore room displacement.
001210r 3  8D rr rr     	sta roomtb			; new room table position.
001213r 3               scrl1:
001213r 3  20 rr rr     	jsr initsc 			; set new screen.
001216r 3  A9 02        	lda #2
001218r 3  85 rr        	sta restfl 			; set it.
00121Ar 3  60           	rts
00121Br 3               scrr:
00121Br 3  AD rr rr     	lda roomtb 			; room table pointer.
00121Er 3  18           	clc
00121Fr 3  69 01        	adc #1				; room right.
001221r 3  4C rr rr     	jmp scrl0
001224r 3               scru:
001224r 3  AD rr rr     	lda roomtb 			; room table pointer.
001227r 3  38           	sec
001228r 3  E9 0B        	sbc #MAPWID 			; room up.
00122Ar 3  4C rr rr     	jmp scrl0
00122Dr 3               scrd:
00122Dr 3  AD rr rr     	lda roomtb 			; room table pointer.
001230r 3  18           	clc
001231r 3  69 0B        	adc #MAPWID 			; room down.
001233r 3  4C rr rr     	jmp scrl0
001236r 3               
001236r 3               ;-----------------------------------------
001236r 3               ; Jump to new screen.
001236r 3               ;-----------------------------------------
001236r 3               
001236r 3               nwscr:
001236r 3  A2 00        	ldx #0				; start of map data.
001238r 3               nwscr0:
001238r 3  DD rr rr     	cmp mapdat,x
00123Br 3  F0 06        	beq nwscr1			; have we found a match for screen?
00123Dr 3  E8           	inx 				; next room.
00123Er 3  E0 50        	cpx #80				; zero room count, 80 to search.
001240r 3  D0 F6        	bne nwscr0			; keep looking.
001242r 3  60           	rts
001243r 3               nwscr1:
001243r 3  8E rr rr     	stx roomtb			; set the map position.
001246r 3  4C rr rr     	jmp scrl1			; draw new room.
001249r 3               
001249r 3               
001249r 3               ;----------------------------------------------------------
001249r 3               ; Gravity processing.
001249r 3               ;----------------------------------------------------------
001249r 3               
001249r 3               grav:
001249r 3  A0 0D        	ldy #13
00124Br 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
00124Dr 3  85 rr        	sta z80_l
00124Fr 3  A0 0E        	ldy #14
001251r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
001253r 3  85 rr        	sta z80_h
001255r 3  05 rr        	ora z80_l			; merge in low byte.
001257r 3  D0 01        	bne :+
001259r 3  60           	rts				; if neither is set, we're not in the air.
00125Ar 3               :
00125Ar 3  A0 00        	ldy #0
00125Cr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
00125Er 3  85 rr        	sta z80_a
001260r 3  C9 63        	cmp #99				; reached the end?
001262r 3  D0 0C        	bne grav0			; no, continue.
001264r 3               grav2:
001264r 3  C6 rr        	dec z80_l			; go back to previous value.
001266r 3  C9 FF        	cmp #$ff
001268r 3  D0 02        	bne :+
00126Ar 3  C6 rr        	dec z80_h
00126Cr 3               :
00126Cr 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
00126Er 3  85 rr        	sta z80_a
001270r 3               grav0:
001270r 3  E6 rr        	inc z80_l			; point to next table entry.
001272r 3  D0 02        	bne :+
001274r 3  E6 rr        	inc z80_h
001276r 3               :
001276r 3  A5 rr        	lda z80_l
001278r 3  A0 0D        	ldy #13
00127Ar 3  91 rr        	sta (z80_ix),y			; store new pointer low.
00127Cr 3  A5 rr        	lda z80_h
00127Er 3  A0 0E        	ldy #14
001280r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
001282r 3               grav1:
001282r 3  A5 rr        	lda z80_a
001284r 3  D0 01        	bne :+				; any movement required?
001286r 3  60           	rts				; no, not this time.
001287r 3               :
001287r 3  A5 rr        	lda z80_a
001289r 3  C9 80        	cmp #128			; is it up or down?
00128Br 3  B0 15        	bcs gravu			; it's up.
00128Dr 3               gravd:
00128Dr 3  85 rr        	sta z80_b			; set pixels to move.
00128Fr 3               gravd0:
00128Fr 3  20 rr rr     	jsr cangd			; can we go down?
001292r 3  D0 28        	bne gravst			; can't move down, so stop.
001294r 3  A0 08        	ldy #8
001296r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
001298r 3  18           	clc
001299r 3  69 01        	adc #1
00129Br 3  91 rr        	sta (z80_ix),y
00129Dr 3  C6 rr        	dec z80_b
00129Fr 3  D0 EE        	bne gravd0
0012A1r 3  60           	rts
0012A2r 3               gravu:
0012A2r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
0012A4r 3  18           	clc
0012A5r 3  69 01        	adc #1
0012A7r 3  85 rr        	sta z80_b			; set pixels to move.
0012A9r 3               gravu0:
0012A9r 3  20 rr rr     	jsr cangu			; can we go up?
0012ACr 3  D0 6E        	bne ifalls			; can't move up, go down next.
0012AEr 3  A0 08        	ldy #8
0012B0r 3  B1 rr        	lda (z80_ix),y
0012B2r 3  38           	sec
0012B3r 3  E9 01        	sbc #1
0012B5r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
0012B7r 3  C6 rr        	dec z80_b
0012B9r 3  D0 EE        	bne gravu0
0012BBr 3  60           	rts
0012BCr 3               gravst:
0012BCr 3  A0 0D        	ldy #var_jumpLo
0012BEr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
0012C0r 3  85 rr        	sta z80_l
0012C2r 3  A0 0E        	ldy #var_jumpHi
0012C4r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
0012C6r 3  85 rr        	sta z80_h
0012C8r 3               
0012C8r 3  A9 00        	lda #0				; null value in pointer.
0012CAr 3  A0 0D        	ldy #var_jumpLo
0012CCr 3  91 rr        	sta (z80_ix),y			; store new pointer low.
0012CEr 3  C8           	iny
0012CFr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
0012D1r 3               
0012D1r 3  A0 00        	ldy #0
0012D3r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
0012D5r 3  C9 63        	cmp #99				; is it the end marker?
0012D7r 3               evftf:
0012D7r 3  F0 01        	beq :+				; yes, fallen too far.
0012D9r 3  60           	rts
0012DAr 3               :
0012DAr 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
0012DDr 3               
0012DDr 3               ;------------------------------------------------
0012DDr 3               ; Initiate fall check.
0012DDr 3               ;------------------------------------------------
0012DDr 3               
0012DDr 3               ifall:
0012DDr 3  A0 0D        	ldy #var_jumpLo
0012DFr 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
0012E1r 3  85 rr        	sta z80_l
0012E3r 3  A0 0E        	ldy #var_jumpHi
0012E5r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
0012E7r 3  85 rr        	sta z80_h			; high byte in accumulator.
0012E9r 3  05 rr        	ora z80_l			; merge in low byte.
0012EBr 3  F0 01        	beq :+
0012EDr 3  60           	rts				; if either is set, we're already in the air.
0012EEr 3               :
0012EEr 3  A0 09        	ldy #9
0012F0r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
0012F2r 3  85 rr        	sta dispx
0012F4r 3  A0 08        	ldy #8
0012F6r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
0012F8r 3  18           	clc
0012F9r 3               numsp7:
0012F9r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
0012FBr 3  85 rr        	sta dispy			; set up test coordinates.
0012FDr 3  20 rr rr     	jsr tstbl			; get map address.
001300r 3  20 rr rr     	jsr plchk			; block, platform check.
001303r 3  F0 01        	beq :+
001305r 3  60           	rts				; it's solid, don't fall.
001306r 3               :
001306r 3  E6 rr        	inc bufaddr			; look right one cell.
001308r 3  20 rr rr     	jsr plchk			; block, platform check.
00130Br 3  F0 01        	beq :+
00130Dr 3  60           	rts				; it's solid, don't fall.
00130Er 3               :
00130Er 3  A5 rr        	lda dispx			; y coordinate.
001310r 3  29 07        	and #7				; position straddling block cells.
001312r 3  F0 08        	beq ifalls			; no more checks needed.
001314r 3  E6 rr        	inc bufaddr			; look to third cell.
001316r 3  20 rr rr     	jsr plchk			; block, platform check.
001319r 3  F0 01        	beq :+
00131Br 3  60           	rts				; it's solid, don't fall.
00131Cr 3               :
00131Cr 3               ifalls:
00131Cr 3  A9 rr        	lda #<jtab			; jump table start.
00131Er 3  85 rr        	sta z80_l
001320r 3  A9 rr        	lda #>jtab
001322r 3  85 rr        	sta z80_h
001324r 3               ifal0:
001324r 3  E6 rr        	inc z80_l			; point to next value.
001326r 3  D0 02        	bne :+
001328r 3  E6 rr        	inc z80_h
00132Ar 3               :
00132Ar 3  A0 00        	ldy #0
00132Cr 3  B1 rr        	lda (z80_hl),y			; fetch value.
00132Er 3  F0 F4        	beq ifal0			; no, get next value.
001330r 3  C9 63        	cmp #99				; reached end of table?
001332r 3  D0 01        	bne :+
001334r 3  60           	rts				; yes, don't fall.
001335r 3               :
001335r 3  C9 80        	cmp #128			; is it going up?
001337r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
001339r 3               
001339r 3  A0 0D        	ldy #13
00133Br 3  A5 rr        	lda z80_l
00133Dr 3  91 rr        	sta (z80_ix),y 			; set jump low.
00133Fr 3  A0 0E        	ldy #14
001341r 3  A5 rr        	lda z80_h
001343r 3  91 rr        	sta (z80_ix),y 			; set jump high.
001345r 3  60           	rts
001346r 3               
001346r 3               
001346r 3               ;----------------------------------------------------
001346r 3               ; Get frame data for a particular sprite.
001346r 3               ; Input:
001346r 3               ;  a		= framenumer
001346r 3               ; Output:
001346r 3               ;  hl		= frame address
001346r 3               ;
001346r 3               ; global:	hl,frmptr
001346r 3               ; local:	-
001346r 3               ; calls:	-
001346r 3               ;----------------------------------------------------
001346r 3               
001346r 3               gfrm:
001346r 3  0A           	asl a	 		 	; multiple of 2.
001347r 3  18           	clc
001348r 3  6D rr rr     	adc frmptr 			; frames used by game.
00134Br 3  85 rr        	sta z80_l
00134Dr 3  AD rr rr     	lda frmptr+1
001350r 3  69 00        	adc #0
001352r 3  85 rr        	sta z80_h 			; point to frame start.
001354r 3  60           	rts
001355r 3               
001355r 3               ;----------------------------------------------------
001355r 3               ; Find sprite list for current room.
001355r 3               ;
001355r 3               ; global:	hl
001355r 3               ; local:	x,y
001355r 3               ; calls:	-
001355r 3               ;----------------------------------------------------
001355r 3               
001355r 3               sprlst:
001355r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
001357r 3  85 rr        	sta z80_l
001359r 3  A9 rr        	lda #>nmedat
00135Br 3  85 rr        	sta z80_h
00135Dr 3  A6 rr        	ldx scno 			; screen number.
00135Fr 3  D0 01        	bne sprls2 			; is it the first screen?
001361r 3  60           	rts 				; yes, don't need to search data.
001362r 3               sprls2:
001362r 3  A0 00        	ldy #0
001364r 3               sprls1:
001364r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
001366r 3  C9 FF        	cmp #255			; is it an end marker?
001368r 3  F0 0E        	beq sprls0 			; yes, end of this room.
00136Ar 3               
00136Ar 3  18           	clc 				; point to next sprite in list.
00136Br 3  A5 rr        	lda z80_l
00136Dr 3  69 04        	adc #NMESIZ
00136Fr 3  85 rr        	sta z80_l
001371r 3  90 02        	bcc :+
001373r 3  E6 rr        	inc z80_h
001375r 3               :
001375r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
001378r 3               sprls0:
001378r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
00137Ar 3  D0 02        	bne :+
00137Cr 3  E6 rr        	inc z80_h
00137Er 3               :
00137Er 3  CA           	dex
00137Fr 3  D0 E3        	bne sprls1 			; continue until room found.
001381r 3  60           	rts
001382r 3               
001382r 3               
001382r 3               ;----------------------------------------------------
001382r 3               ; Clear all but a single player sprite.
001382r 3               ;
001382r 3               ; global:	-
001382r 3               ; local:	x,y,ix
001382r 3               ; calls:	-
001382r 3               ;----------------------------------------------------
001382r 3               
001382r 3               nspr:
001382r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001384r 3  85 rr        	sta sprcnt
001386r 3  A9 rr        	lda #<sprtab 			; sprite table.
001388r 3  85 rr        	sta z80_x
00138Ar 3  A9 rr        	lda #>sprtab
00138Cr 3  85 rr        	sta z80_i
00138Er 3               nspr0:
00138Er 3  A0 00        	ldy #0 				; fetch sprite type.
001390r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
001392r 3  F0 1A        	beq nspr1 			; yes, keep this one.
001394r 3               
001394r 3  A9 FF        	lda #255
001396r 3  A0 00        	ldy #0 				; fetch sprite type.
001398r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00139Ar 3  A0 05        	ldy #5
00139Cr 3  91 rr        	sta (z80_ix),y 			; remove next type.
00139Er 3               
00139Er 3  18           	clc	 			; next sprite.
00139Fr 3  A5 rr        	lda z80_x
0013A1r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0013A3r 3  85 rr        	sta z80_x
0013A5r 3  90 02        	bcc :+
0013A7r 3  E6 rr        	inc z80_i
0013A9r 3               :
0013A9r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
0013ABr 3  D0 E1        	bne nspr0
0013ADr 3  60           	rts
0013AEr 3               nspr1:
0013AEr 3  A9 FF        	lda #255
0013B0r 3  A0 00        	ldy #0
0013B2r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
0013B4r 3               
0013B4r 3  18           	clc	 			; point to next sprite.
0013B5r 3  A5 rr        	lda z80_x
0013B7r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0013B9r 3  85 rr        	sta z80_x
0013BBr 3  90 02        	bcc :+
0013BDr 3  E6 rr        	inc z80_i
0013BFr 3               :
0013BFr 3  C6 rr        	dec sprcnt	 			; one less to do.
0013C1r 3  D0 01        	bne nspr2
0013C3r 3  60           	rts
0013C4r 3               nspr2:
0013C4r 3  A9 FF        	lda #255
0013C6r 3  A0 00        	ldy #0
0013C8r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
0013CAr 3  A0 05        	ldy #5
0013CCr 3  91 rr        	sta (z80_ix),y 			; remove next type.
0013CEr 3               
0013CEr 3  18           	clc	 			; next sprite.
0013CFr 3  A5 rr        	lda z80_x
0013D1r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0013D3r 3  85 rr        	sta z80_x
0013D5r 3  90 02        	bcc :+
0013D7r 3  E6 rr        	inc z80_i
0013D9r 3               :
0013D9r 3  C6 rr        	dec sprcnt	 			; one less space in table.
0013DBr 3  D0 E7        	bne nspr2
0013DDr 3  60           	rts
0013DEr 3               
0013DEr 3               ;----------------------------------------------------------
0013DEr 3               ; Two initialisation routines.
0013DEr 3               ; Initialise sprites - copy everything from list to table.
0013DEr 3               ;
0013DEr 3               ; global:	-
0013DEr 3               ; local:	x,y,ix
0013DEr 3               ; calls:	cpsp
0013DEr 3               ;----------------------------------------------------------
0013DEr 3               
0013DEr 3               ispr:
0013DEr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0013E0r 3  85 rr        	sta sprcnt
0013E2r 3  A9 rr        	lda #<sprtab			; sprite table.
0013E4r 3  85 rr        	sta z80_x
0013E6r 3  A9 rr        	lda #>sprtab
0013E8r 3  85 rr        	sta z80_i
0013EAr 3               ispr2:
0013EAr 3  A0 00        	ldy #0
0013ECr 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0013EEr 3  C9 FF        	cmp #255 			; is it an end marker?
0013F0r 3  D0 01        	bne :+
0013F2r 3  60           	rts 				; yes, no more to do.
0013F3r 3               :
0013F3r 3               ispr1:
0013F3r 3  A0 00        	ldy #0
0013F5r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
0013F7r 3  C9 FF        	cmp #255 			; is it enabled yet?
0013F9r 3  D0 08        	bne ispr4			; yes, try another slot.
0013FBr 3               
0013FBr 3  A0 05        	ldy #5
0013FDr 3  B1 rr        	lda (z80_ix),y		 	; next type.
0013FFr 3  C9 FF        	cmp #255 			; is it enabled yet?
001401r 3  F0 10        	beq ispr3 			; no, process this one.
001403r 3               ispr4:
001403r 3  18           	clc 				; next sprite.
001404r 3  A5 rr        	lda z80_x
001406r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001408r 3  85 rr        	sta z80_x
00140Ar 3  90 02        	bcc :+
00140Cr 3  E6 rr        	inc z80_i
00140Er 3               :
00140Er 3  C6 rr        	dec sprcnt
001410r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
001412r 3  60           	rts  				; no more room in table.
001413r 3               ispr3:
001413r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
001416r 3  C6 rr        	dec sprcnt			; one less space in the table.
001418r 3  D0 D0        	bne ispr2
00141Ar 3  60           	rts
00141Br 3               
00141Br 3               
00141Br 3               ;-----------------------------------------------------------------------
00141Br 3               ; Initialise sprites - but not player, we're keeping the old one.
00141Br 3               ;
00141Br 3               ; global:	-
00141Br 3               ; local:	x,y,ix
00141Br 3               ; calls:	cpsp
00141Br 3               ;-----------------------------------------------------------------------
00141Br 3               
00141Br 3               kspr:
00141Br 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
00141Dr 3  A9 rr        	lda #<sprtab 			; sprite table.
00141Fr 3  85 rr        	sta z80_x
001421r 3  A9 rr        	lda #>sprtab
001423r 3  85 rr        	sta z80_i
001425r 3               kspr2:
001425r 3  A0 00        	ldy #0
001427r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
001429r 3  C9 FF        	cmp #255 			; is it an end marker?
00142Br 3  D0 01        	bne :+
00142Dr 3  60           	rts 				; yes, no more to do.
00142Er 3               :
00142Er 3  C9 00        	cmp #0
001430r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
001432r 3               
001432r 3  18           	clc 				; next sprite.
001433r 3  A5 rr        	lda z80_l
001435r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
001437r 3  85 rr        	sta z80_l
001439r 3  90 02        	bcc :+
00143Br 3  E6 rr        	inc z80_h
00143Dr 3               :
00143Dr 3  4C rr rr     	jmp kspr2
001440r 3               kspr1:
001440r 3  A0 00        	ldy #0 				; fetch sprite type.
001442r 3  B1 rr        	lda (z80_ix),y
001444r 3  C9 FF        	cmp #255 			; is it enabled yet?
001446r 3  D0 08        	bne kspr4 			; yes, try another slot.
001448r 3               
001448r 3  A0 05        	ldy #5 				; next type.
00144Ar 3  B1 rr        	lda (z80_ix),y
00144Cr 3  C9 FF        	cmp #255 			; is it enabled yet?
00144Er 3  F0 0F        	beq kspr3 			; no, process this one.
001450r 3               kspr4:
001450r 3  18           	clc 				; next sprite.
001451r 3  A5 rr        	lda z80_x
001453r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001455r 3  85 rr        	sta z80_x
001457r 3  90 02        	bcc :+
001459r 3  E6 rr        	inc z80_i
00145Br 3               :
00145Br 3  CA           	dex	 			; repeat for remaining sprites.
00145Cr 3  D0 E2        	bne kspr1
00145Er 3  60           	rts  				; no more room in table.
00145Fr 3               kspr3:
00145Fr 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
001462r 3  CA           	dex	 			; one less space in the table.
001463r 3  D0 C0        	bne kspr2
001465r 3  60           	rts
001466r 3               
001466r 3               ;----------------------------------------------
001466r 3               ; Copy sprite from list to table.
001466r 3               ;
001466r 3               ; global:	hl,ix
001466r 3               ; local:	y
001466r 3               ; calls:	evnt09
001466r 3               ;----------------------------------------------
001466r 3               
001466r 3               cpsp:
001466r 3  A0 00        	ldy #0					; fetch byte from table.
001468r 3  B1 rr        	lda (z80_hl),y
00146Ar 3               	; y=var_Type
00146Ar 3  91 rr        	sta (z80_ix),y			; set up type.
00146Cr 3  A0 05        	ldy #var_newType
00146Er 3  91 rr        	sta (z80_ix),y 			; set up type.
001470r 3               
001470r 3  E6 rr        	inc z80_l 				; move to next byte.
001472r 3  D0 02        	bne :+
001474r 3  E6 rr        	inc z80_h
001476r 3               :
001476r 3  A0 00        	ldy #0 					; fetch byte from table.
001478r 3  B1 rr        	lda (z80_hl),y
00147Ar 3  A0 06        	ldy #var_newImage
00147Cr 3  91 rr        	sta (z80_ix),y			; set up image.
00147Er 3               
00147Er 3  E6 rr        	inc z80_l 				; move to next byte.
001480r 3  D0 02        	bne :+
001482r 3  E6 rr        	inc z80_h
001484r 3               :
001484r 3  A0 00        	ldy #0
001486r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
001488r 3  A0 08        	ldy #var_newY
00148Ar 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00148Cr 3               
00148Cr 3  A9 C8        	lda #200 				; set initial coordinate off screen.
00148Er 3  A0 03        	ldy #var_Y
001490r 3  91 rr        	sta (z80_ix),y
001492r 3               
001492r 3  E6 rr        	inc z80_l 				; move to next byte.
001494r 3  D0 02        	bne :+
001496r 3  E6 rr        	inc z80_h
001498r 3               :
001498r 3  A0 00        	ldy #0 					; fetch byte from table.
00149Ar 3  B1 rr        	lda (z80_hl),y
00149Cr 3  A0 09        	ldy #var_newX
00149Er 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0014A0r 3               
0014A0r 3  E6 rr        	inc z80_l 				; move to next byte.
0014A2r 3  D0 02        	bne :+
0014A4r 3  E6 rr        	inc z80_h
0014A6r 3               :
0014A6r 3  A9 00        	lda #0					; zeroes in accumulator.
0014A8r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
0014AAr 3  91 rr        	sta (z80_ix),y
0014ACr 3  A0 0A        	ldy #var_Direction 		; reset direction.
0014AEr 3  91 rr        	sta (z80_ix),y
0014B0r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
0014B2r 3  91 rr        	sta (z80_ix),y
0014B4r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
0014B6r 3  91 rr        	sta (z80_ix),y
0014B8r 3               
0014B8r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
0014BAr 3  A0 10        	ldy #var_dataHi
0014BCr 3  91 rr        	sta (z80_ix),y
0014BEr 3               evis0:
0014BEr 3  A5 rr        	lda z80_i
0014C0r 3  48           	pha
0014C1r 3  A5 rr        	lda z80_x
0014C3r 3  48           	pha
0014C4r 3  A5 rr        	lda z80_h
0014C6r 3  48           	pha
0014C7r 3  A5 rr        	lda z80_l
0014C9r 3  48           	pha
0014CAr 3               
0014CAr 3  20 rr rr     	jsr evnt09 				; perform event.
0014CDr 3               
0014CDr 3  68           	pla
0014CEr 3  85 rr        	sta z80_l
0014D0r 3  68           	pla
0014D1r 3  85 rr        	sta z80_h
0014D3r 3  68           	pla
0014D4r 3  85 rr        	sta z80_x
0014D6r 3  68           	pla
0014D7r 3  85 rr        	sta z80_i
0014D9r 3               
0014D9r 3  18           	clc
0014DAr 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
0014DCr 3  69 11        	adc #TABSIZ		 	; next sprite.
0014DEr 3  85 rr        	sta z80_x
0014E0r 3  90 02        	bcc :+
0014E2r 3  E6 rr        	inc z80_i
0014E4r 3               :
0014E4r 3  60           	rts
0014E5r 3               
0014E5r 3               
0014E5r 3               ;-------------------------------------
0014E5r 3               ; Clear the play area window.
0014E5r 3               ;-------------------------------------
0014E5r 3               
0014E5r 3               clw:
0014E5r 3  AD rr rr     	lda wintop			; get coordinates of window.
0014E8r 3  85 rr        	sta dispy			; put into dispx for calculation.
0014EAr 3  AD rr rr     	lda winlft
0014EDr 3  85 rr        	sta dispx
0014EFr 3               
0014EFr 3  AD rr rr     	lda winhgt			; height of window.
0014F2r 3  85 rr        	sta rrow			; copy to b register.
0014F4r 3               clw3:
0014F4r 3  AD rr rr     	lda winwid 			; width of window.
0014F7r 3  85 rr        	sta rcol
0014F9r 3               clw2:
0014F9r 3  20 rr rr     	jsr gprad 			; get print address.
0014FCr 3  A9 20        	lda #32
0014FEr 3  20 rr rr     	jsr pchar
001501r 3  E6 rr        	inc dispx			; next column.
001503r 3  C6 rr        	dec rcol			; one less to do.
001505r 3  D0 F2        	bne clw2			; repeat for remaining columns.
001507r 3               
001507r 3  AD rr rr     	lda winlft			; get left edge.
00150Ar 3  85 rr        	sta dispx 			; reset x.
00150Cr 3  E6 rr        	inc dispy 			; next line down.
00150Er 3               
00150Er 3  C6 rr        	dec rrow
001510r 3  D0 E2        	bne clw3			; repeat down the screen.
001512r 3               
001512r 3  AD rr rr     	lda wintop			; get coordinates of window.
001515r 3  85 rr        	sta chary			; put into display position.
001517r 3  AD rr rr     	lda winlft
00151Ar 3  85 rr        	sta charx
00151Cr 3  60           	rts
00151Dr 3               
00151Dr 3               
00151Dr 3               ;----------------------------------------------------------
00151Dr 3               ; Effects code.
00151Dr 3               ; Ticker routine is called 25 times per second.
00151Dr 3               ;
00151Dr 3               ; txtini = text scroller address
00151Dr 3               ; txtscr = left text screen address
00151Dr 3               ; txtwid = scroller width
00151Dr 3               ; txtbit = 128
00151Dr 3               ; X      = message nr
00151Dr 3               ;----------------------------------------------------------
00151Dr 3               
00151Dr 3               .if sflag
00151Dr 3               
00151Dr 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
00151Dr 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
00151Dr 3               		.byte $00,$10,$20,$30,$40,$50
00151Dr 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
00151Dr 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
00151Dr 3               		.byte $01,$01,$01,$01,$01,$01
00151Dr 3               
00151Dr 3               scrly:
00151Dr 3               
00151Dr 3               ; Set scr_l = txtscr
00151Dr 3               
00151Dr 3               	rts
00151Dr 3               	.word txtscr         	; set scr_l = left screen address.
00151Dr 3               	sta scr_l
00151Dr 3               	sta scr_r
00151Dr 3               	lda txtscr+1
00151Dr 3               	sta scr_l+1
00151Dr 3               	sta scr_r+1
00151Dr 3               
00151Dr 3               	stx xtmp		; save x
00151Dr 3               
00151Dr 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
00151Dr 3               
00151Dr 3               	ldx txtwid
00151Dr 3               	dex
00151Dr 3               	lda scrollpos_lb,x
00151Dr 3               	clc
00151Dr 3               	adc scr_r
00151Dr 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
00151Dr 3               	bcc :+
00151Dr 3               	inc scr_r+1
00151Dr 3               :
00151Dr 3               	clc
00151Dr 3               	lda scrollpos_hb,x
00151Dr 3               	adc scr_r+1
00151Dr 3               	sta scr_r+1
00151Dr 3               
00151Dr 3               ; Scroll string
00151Dr 3               
00151Dr 3               	lda #0
00151Dr 3               	sta line_cnt		; Set line counter
00151Dr 3               scrly1:
00151Dr 3               	clc
00151Dr 3               	lda scr_r
00151Dr 3               	adc line_cnt
00151Dr 3               	sta scr_tmp
00151Dr 3               	lda scr_r+1
00151Dr 3               	sta scr_tmp+1
00151Dr 3               
00151Dr 3               	ldx txtwid		; set column counter
00151Dr 3               	dex
00151Dr 3               	ldy #0
00151Dr 3               	clc			; Reset pixel to be shifted in
00151Dr 3               scrly0:
00151Dr 3               	lda (scr_tmp),y
00151Dr 3               	rol a			; Shift screenbyte
00151Dr 3               	sta (scr_tmp),y		; store screenbyte
00151Dr 3               	php			; save carry
00151Dr 3               
00151Dr 3               	sec			; subtract 16 form screenaddress
00151Dr 3               	lda scr_tmp
00151Dr 3               	sbc #$10
00151Dr 3               	sta scr_tmp
00151Dr 3               	bcs :+
00151Dr 3               	dec scr_tmp+1
00151Dr 3               :
00151Dr 3               	plp			; restore carry
00151Dr 3               	dex			; previous column
00151Dr 3               	bpl scrly0		; repeat for all columns
00151Dr 3               
00151Dr 3               	inc line_cnt		; next line
00151Dr 3               	lda line_cnt
00151Dr 3               	cmp #8
00151Dr 3               	bne scrly1		; repeat for 8 lines
00151Dr 3               
00151Dr 3               ; Get next character in string
00151Dr 3               
00151Dr 3               	lda txtpos 		; get text pointer.
00151Dr 3               	sta scr_txt
00151Dr 3               	lda txtpos+1
00151Dr 3               	sta scr_txt+1
00151Dr 3               
00151Dr 3               	ldy #0
00151Dr 3               	lda (scr_txt),y 	; find character we're displaying.
00151Dr 3               	and #127 		; remove end marker bit if applicable.
00151Dr 3               	cmp #13			; is it newline?
00151Dr 3               	bne scrly5 		; no, it's okay.
00151Dr 3               	lda #32			; convert to a space instead.
00151Dr 3               scrly5:
00151Dr 3               	sta fntaddr		; calculate char address
00151Dr 3               	lda #0
00151Dr 3               	sta fntaddr+1
00151Dr 3               	asl fntaddr  		; multiply char by 8.
00151Dr 3               	rol fntaddr+1
00151Dr 3               	asl fntaddr
00151Dr 3               	rol fntaddr+1
00151Dr 3               	asl fntaddr
00151Dr 3               	rol fntaddr+1
00151Dr 3               	lda fntaddr
00151Dr 3               	clc
00151Dr 3               	adc #<(FONT-256)
00151Dr 3               	sta scrly3+1		; that's the low byte.
00151Dr 3               	lda fntaddr+1
00151Dr 3               	adc #>(FONT-256)
00151Dr 3               	sta scrly3+2		; add displacement.
00151Dr 3               
00151Dr 3               	ldy #0
00151Dr 3               scrly3:
00151Dr 3               	lda $3333,y		; get image of char line.
00151Dr 3               	and txtbit
00151Dr 3               	beq scrly2		; don't plot pixel
00151Dr 3               	lda (scr_r),y
00151Dr 3               	clc
00151Dr 3               	ora #1
00151Dr 3               	sta (scr_r),y		; plot pixel
00151Dr 3               scrly2:
00151Dr 3               	iny			; next line of char.
00151Dr 3               	cpy #8
00151Dr 3               	bne scrly3
00151Dr 3               
00151Dr 3               	lsr txtbit		; bit of text to display.
00151Dr 3               	bcs :+
00151Dr 3               	rts
00151Dr 3               :
00151Dr 3               	ldy #0
00151Dr 3               	lda (scr_txt),y 	; what was the character?
00151Dr 3               	asl a	  		; end of message?
00151Dr 3               	bcs scrly4
00151Dr 3               	inc txtpos
00151Dr 3               	bne :+
00151Dr 3               	inc txtpos+1
00151Dr 3               :
00151Dr 3               	jmp scrly6 		; not yet - continue.
00151Dr 3               scrly4:
00151Dr 3               	lda txtini 		; start of scrolling message.
00151Dr 3               	sta txtpos
00151Dr 3               	lda txtini+1
00151Dr 3               	sta txtpos+1
00151Dr 3               scrly6:
00151Dr 3               	lda #128
00151Dr 3               	sta txtbit
00151Dr 3               	ldx xtmp
00151Dr 3               	rts
00151Dr 3               
00151Dr 3               tmp_byte:	.byte 0
00151Dr 3               line_cnt:	.byte 0
00151Dr 3               
00151Dr 3               ;-------------------------------------------------------
00151Dr 3               ; Entry TICKER command
00151Dr 3               ;
00151Dr 3               ; Entry:
00151Dr 3               ;  z80_b = message nr
00151Dr 3               ;  z80_c = width
00151Dr 3               ;-------------------------------------------------------
00151Dr 3               
00151Dr 3               iscrly:
00151Dr 3               	jsr prescr 		; set up display position.
00151Dr 3               	lda #<msgdat 		; text messages.
00151Dr 3               	sta z80_l
00151Dr 3               	lda #>msgdat
00151Dr 3               	sta z80_h
00151Dr 3               	lda z80_c 		; width.
00151Dr 3               	sec
00151Dr 3               	sbc #1			; subtract one.
00151Dr 3               	cmp #32 		; is it between 1 and 32?
00151Dr 3               	bcc :+
00151Dr 3               	lda #$60
00151Dr 3               	jmp iscrl0		; no, disable messages.
00151Dr 3               :
00151Dr 3               	ldx z80_b		; message number.
00151Dr 3               	jsr getwrd 		; find message start.
00151Dr 3               
00151Dr 3               	lda z80_l		; set initial text position.
00151Dr 3               	sta txtini
00151Dr 3               	lda z80_h
00151Dr 3               	sta txtini+1
00151Dr 3               
00151Dr 3               	lda #$ad		; code for lda adrr
00151Dr 3               iscrl0:
00151Dr 3               	sta scrly		; enable/disable scrolling routine.
00151Dr 3               
00151Dr 3               	jsr prescr 		; set up display position.
00151Dr 3               	jsr gprad 		; get print address.
00151Dr 3               
00151Dr 3               	lda scraddr 		; set text screen address.
00151Dr 3               	sta txtscr
00151Dr 3               	lda scraddr+1
00151Dr 3               	sta txtscr+1
00151Dr 3               
00151Dr 3               	lda z80_c		; width.
00151Dr 3               	sta txtwid		; set width in working storage.
00151Dr 3               
00151Dr 3               	lda #128 		; start with leftmost bit.
00151Dr 3               	sta txtbit
00151Dr 3               
00151Dr 3               	jmp scrly4
00151Dr 3               .endif
00151Dr 3               
00151Dr 3               ;------------------------------------------------------------------
00151Dr 3               ; Dig routine, conditional assembly depending on dflag
00151Dr 3               ;------------------------------------------------------------------
00151Dr 3               .if dflag
00151Dr 3               dig:
00151Dr 3               	and #3
00151Dr 3               	beq digr		; dig right
00151Dr 3               	cmp #1
00151Dr 3               	beq digl		; dig left
00151Dr 3               	cmp #2
00151Dr 3               	beq digd		; dig down
00151Dr 3               
00151Dr 3               ; Dig up.
00151Dr 3               
00151Dr 3               digu:				; dig up
00151Dr 3               	ldy #8
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	sec
00151Dr 3               	sbc #2
00151Dr 3               	sta dispy		; set y
00151Dr 3               
00151Dr 3               	iny
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	sta dispx		; set x
00151Dr 3               	jmp digv
00151Dr 3               
00151Dr 3               ; Dig down.
00151Dr 3               
00151Dr 3               digd:
00151Dr 3               	ldy #9
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	sta dispx		; set y
00151Dr 3               
00151Dr 3               	dey
00151Dr 3               	clc
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	adc #16
00151Dr 3               	sta dispy		; set y
00151Dr 3               	jmp digv
00151Dr 3               
00151Dr 3               ; Dig left.
00151Dr 3               
00151Dr 3               digl:
00151Dr 3               	ldy #8
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	sta dispy		; set y
00151Dr 3               
00151Dr 3               	iny
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	sec
00151Dr 3               	sbc #2			; x=x-2
00151Dr 3               	sta dispx		; set x
00151Dr 3               	jmp digh
00151Dr 3               
00151Dr 3               ; Dig right.
00151Dr 3               
00151Dr 3               digr:
00151Dr 3               	ldy #8
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	sta dispy		; set y
00151Dr 3               
00151Dr 3               	iny
00151Dr 3               	lda (z80_ix),y
00151Dr 3               	clc
00151Dr 3               	adc #16
00151Dr 3               	sta dispx		; set x+16
00151Dr 3               	jmp digh
00151Dr 3               
00151Dr 3               ; Vertical digging
00151Dr 3               
00151Dr 3               digv:
00151Dr 3               	jsr tstbl		; check blocktype in MAP
00151Dr 3               	jsr fdchk		; test if FODDER
00151Dr 3               
00151Dr 3               	clc
00151Dr 3               	lda dispx		; look 1 cell down
00151Dr 3               	adc #8
00151Dr 3               	sta dispx
00151Dr 3               	jsr tstbl		; check blocktype in MAP
00151Dr 3               	jsr fdchk
00151Dr 3               	lda dispx
00151Dr 3               	and #7
00151Dr 3               	bne :+
00151Dr 3               	rts
00151Dr 3               :
00151Dr 3               	clc
00151Dr 3               	lda dispx		; look 1 cell down
00151Dr 3               	adc #8
00151Dr 3               	sta dispx
00151Dr 3               	jsr tstbl		; check blocktype in MAP
00151Dr 3               	jmp fdchk
00151Dr 3               
00151Dr 3               ; Horizontal digging
00151Dr 3               
00151Dr 3               digh:
00151Dr 3               	jsr tstbl		; check blocktype in MAP
00151Dr 3               	jsr fdchk		; test if FODDER
00151Dr 3               
00151Dr 3               	clc
00151Dr 3               	lda dispy		; look 1 cell down
00151Dr 3               	adc #8
00151Dr 3               	sta dispy
00151Dr 3               	jsr tstbl		; check blocktype in MAP
00151Dr 3               	jsr fdchk
00151Dr 3               	lda dispy
00151Dr 3               	and #7
00151Dr 3               	bne :+
00151Dr 3               	rts
00151Dr 3               :
00151Dr 3               	clc
00151Dr 3               	lda dispy		; look 1 cell down
00151Dr 3               	adc #8
00151Dr 3               	sta dispy
00151Dr 3               	jsr tstbl		; check blocktype in MAP
00151Dr 3               	jmp fdchk
00151Dr 3               
00151Dr 3               digcnt:	.byte 0
00151Dr 3               
00151Dr 3               .endif
00151Dr 3               
00151Dr 3               ;------------------------------------------------------------------
00151Dr 3               ; Sprite table
00151Dr 3               ;------------------------------------------------------------------
00151Dr 3               
00151Dr 3               
00151Dr 3               ; ix+0  = type.
00151Dr 3               ; ix+1  = sprite image number.
00151Dr 3               ; ix+2  = frame.
00151Dr 3               ; ix+3  = y coord.
00151Dr 3               ; ix+4  = x coord.
00151Dr 3               
00151Dr 3               ; ix+5  = new type.
00151Dr 3               ; ix+6  = new image number.
00151Dr 3               ; ix+7  = new frame.
00151Dr 3               ; ix+8  = new y coord.
00151Dr 3               ; ix+9  = new x coord.
00151Dr 3               
00151Dr 3               ; ix+10 = direction.
00151Dr 3               ; ix+11 = parameter 1.
00151Dr 3               ; ix+12 = parameter 2.
00151Dr 3               ; ix+13 = jump pointer low.
00151Dr 3               ; ix+14 = jump pointer high.
00151Dr 3               ; ix+15 = data pointer low.
00151Dr 3               ; ix+16 = data pointer high.
00151Dr 3               
00151Dr 3               ; block NUMSPR * TABSIZ,255
00151Dr 3               
00151Dr 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001521r 3  FF FF FF FF  
001525r 3  FF FF FF FF  
0015E9r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0015EDr 3  FF FF FF 00  
0015F1r 3  C0 78 00 00  
0015FAr 3  07           roomtb:	.byte 7                      ; start room map offset.
0015FBr 3               
0015FBr 3               setfgcol:
0015FBr 3               setbgcol:
0015FBr 3  60           	rts
0015FCr 3               
0015FCr 3               ; User routine.  Put your own code in here to be called with USER instruction.
0015FCr 3               ; if USER has an argument it will be passed in the accumulator.
0015FCr 3               
0015FCr 3               user:
0015FCr 3               	.include "user.inc"
0015FCr 4               ;---------------------------------------------------------------
0015FCr 4               ; Zeropage variables
0015FCr 4               ;---------------------------------------------------------------
0015FCr 4               
0015FCr 4               ;	SONG_POS          = $90
0015FCr 4               ;	PATTERN_POS       = $91
0015FCr 4               ;	FRAME_COUNT       = $92
0015FCr 4               ;	FRAME_LENGTH      = $93
0015FCr 4               ;	SONG_NEXT_TRUE    = $94
0015FCr 4               ;	SONG_END_TRUE     = $95
0015FCr 4               ;
0015FCr 4               ;	; 2 byte address of pattern data
0015FCr 4               ;	CH1_PATTERN_POS   = $96
0015FCr 4               ;	CH2_PATTERN_POS   = $98
0015FCr 4               ;	CH3_PATTERN_POS   = $9a
0015FCr 4               ;	CH4_PATTERN_POS   = $9c
0015FCr 4               ;	; #$00 == inactive mode
0015FCr 4               ;	CH1_ACTIVE        = $a0
0015FCr 4               ;	CH2_ACTIVE        = $a1
0015FCr 4               ;	CH3_ACTIVE        = $a2
0015FCr 4               ;	CH4_ACTIVE        = $a3
0015FCr 4               ;
0015FCr 4               ;	TEMP_GUY          = $a4
0015FCr 4               ;	CHAN_NOTE_DATA    = $a5
0015FCr 4               ;	CHANS_INACTIVE    = $a6
0015FCr 4               ;	FAST_COUNTER      = $a7
0015FCr 4               ;	MEGA_COUNTER      = $a8
0015FCr 4               
0015FCr 4               
0015FCr 4               ;---------------------------------------------------------------
0015FCr 4               ; Constants
0015FCr 4               ;---------------------------------------------------------------
0015FCr 4               
0015FCr 4               	TEXT_TITLE        = songpos
0015FCr 4               	TEXT_ARTIST       = songpos+$10
0015FCr 4               	TEXT_COPY         = songpos+$20
0015FCr 4               	TABLE_SPEED       = songpos+$30
0015FCr 4               	TABLE_VOLUME      = songpos+$40
0015FCr 4               	PATTERNS          = songpos+$50
0015FCr 4               	SONG_PAGE_1       = songpos+$850
0015FCr 4               	SONG_PAGE_2       = songpos+$950
0015FCr 4               
0015FCr 4               ; VIC-I chip audio registers
0015FCr 4               	VIC_CHAN_1        = $900a
0015FCr 4               	VIC_CHAN_2        = $900b
0015FCr 4               	VIC_CHAN_3        = $900c
0015FCr 4               	VIC_CHAN_4        = $900d
0015FCr 4               	VIC_VOLUME        = $900e
0015FCr 4               
0015FCr 4               
0015FCr 4               ; bit masks for pattern data / effects
0015FCr 4               	NOTE_IS           = %10000000
0015FCr 4               	NOTE_OFF          = %00000001
0015FCr 4               	NOTE_NEXT         = %00000010
0015FCr 4               	NOTE_END          = %00000011
0015FCr 4               	NOTE_NOTHING      = %00000000
0015FCr 4               
0015FCr 4               ;---------------------------------------------------------------
0015FCr 4               ; API calls, entry with A = API call
0015FCr 4               ;---------------------------------------------------------------
0015FCr 4               
0015FCr 4               api:
0015FCr 4  C9 00        	cmp #0
0015FEr 4  D0 03        	bne api1
001600r 4  4C rr rr     	jmp int_init
001603r 4               api1:
001603r 4  C9 01        	cmp #1
001605r 4  D0 03        	bne api2
001607r 4  4C rr rr     	jmp music_on
00160Ar 4               api2:
00160Ar 4  C9 02        	cmp #2
00160Cr 4  D0 03        	bne api3
00160Er 4  4C rr rr     	jmp music_off
001611r 4               api3:
001611r 4  C9 03        	cmp #3
001613r 4  D0 03        	bne api4
001615r 4  4C rr rr     	jmp musicinit
001618r 4               api4:
001618r 4  C9 04        	cmp #4
00161Ar 4  D0 03        	bne api_end
00161Cr 4  4C rr rr     	jmp musicplay
00161Fr 4               api_end:
00161Fr 4  60           	rts
001620r 4               
001620r 4               ;---------------------------------------------------------------
001620r 4               ; Init VIA2 timer21 for IRQ 1/50 sec
001620r 4               ;---------------------------------------------------------------
001620r 4               
001620r 4               int_init:
001620r 4  78           	sei			; disable interrupt
001621r 4  A9 C0        	lda #$c0		; T1 continuous
001623r 4  8D 2B 91     	sta AUX2
001626r 4  A9 C0        	lda #$c0		; int timer1
001628r 4  8D 2E 91     	sta IER2
00162Br 4  A9 20        	lda #<timerint		; timer 1/50 sec
00162Dr 4  8D 24 91     	sta Timer21_Low
001630r 4  A9 4E        	lda #>timerint
001632r 4  8D 25 91     	sta Timer21_High
001635r 4  A9 rr        	lda #<int_service	; set new IRQ vector
001637r 4  8D 14 03     	sta $0314
00163Ar 4  A9 rr        	lda #>int_service
00163Cr 4  8D 15 03     	sta $0315
00163Fr 4  60           	rts
001640r 4               
001640r 4               ;---------------------------------------------------------------
001640r 4               ; INTERRUPT SERVICE ROUTINE
001640r 4               ;---------------------------------------------------------------
001640r 4               
001640r 4               int_service:
001640r 4  AD 24 91     	lda Timer21_Low		; Clear timer1 flag
001643r 4               
001643r 4               ; Insert interrupt code here
001643r 4               
001643r 4  20 rr rr     	jsr musicplay		; Cycle color topleft char
001646r 4               
001646r 4               ; End of interrupt code
001646r 4               
001646r 4  68           	pla			; Restore resgisters
001647r 4  A8           	tay
001648r 4  68           	pla
001649r 4  AA           	tax
00164Ar 4  68           	pla
00164Br 4               
00164Br 4  40           	rti			; Return from interrupt
00164Cr 4               
00164Cr 4               ;---------------------------------------------------------------
00164Cr 4               ; Music_on, enable interrupt and play music
00164Cr 4               ;---------------------------------------------------------------
00164Cr 4               
00164Cr 4               music_on:
00164Cr 4  A9 C0        	lda #$c0		; int timer1
00164Er 4  8D 2E 91     	sta IER2
001651r 4  A9 0F        	lda #$0f
001653r 4  8D 0E 90     	sta $900e
001656r 4  58           	cli			; enable interrupts
001657r 4  60           	rts
001658r 4               
001658r 4               ;---------------------------------------------------------------
001658r 4               ; Music_off, disable interrrupt and stop music
001658r 4               ;---------------------------------------------------------------
001658r 4               
001658r 4               music_off:
001658r 4  78           	sei			; enable interrupts
001659r 4  A9 7F        	lda #$7f		; int timer1
00165Br 4  8D 2D 91     	sta IFR2
00165Er 4  8D 2E 91     	sta IER2
001661r 4  A9 00        	lda #$00
001663r 4  8D 0E 90     	sta $900e
001666r 4  60           	rts
001667r 4               
001667r 4               ;---------------------------------------------------------------
001667r 4               ; Initialisation routine
001667r 4               ;---------------------------------------------------------------
001667r 4               
001667r 4               musicinit:
001667r 4  A9 00        	lda #$00
001669r 4  85 rr        	sta SONG_POS
00166Br 4  85 rr        	sta PATTERN_POS
00166Dr 4  85 rr        	sta SONG_NEXT_TRUE
00166Fr 4  85 rr        	sta SONG_END_TRUE
001671r 4  85 rr        	sta FRAME_COUNT
001673r 4  85 rr        	sta MEGA_COUNTER
001675r 4               
001675r 4               ; load first frame length
001675r 4  A9 01        	lda #$01
001677r 4  85 rr        	sta FRAME_LENGTH
001679r 4  60           	rts
00167Ar 4               
00167Ar 4               ;---------------------------------------------------------------
00167Ar 4               ; Mainloop
00167Ar 4               ;---------------------------------------------------------------
00167Ar 4               
00167Ar 4               musicplay:
00167Ar 4               main_loop_skip_raster:
00167Ar 4               
00167Ar 4               ; load them patterns
00167Ar 4               ; resets song position if 4 empty patterns
00167Ar 4  20 rr rr     	jsr SONG_POS_UPDATE
00167Dr 4               
00167Dr 4               ; update song stuff
00167Dr 4  20 rr rr     	jsr AUDIO_UPDATE
001680r 4               
001680r 4               ; check if NeXT was called
001680r 4  A5 rr        	lda SONG_NEXT_TRUE
001682r 4  C9 00        	cmp #$00
001684r 4  F0 11        	beq not_next_effect_called
001686r 4  A9 00        	lda #$00
001688r 4  85 rr        	sta PATTERN_POS
00168Ar 4  85 rr        	sta SONG_NEXT_TRUE
00168Cr 4  E6 rr        	inc SONG_POS
00168Er 4  20 rr rr     	jsr SONG_POS_UPDATE
001691r 4  20 rr rr     	jsr AUDIO_PROCESS_CHANNEL
001694r 4  4C rr rr     	jmp main_loop_skip_raster
001697r 4               
001697r 4               ; ready for next music frame?
001697r 4               not_next_effect_called:
001697r 4  E6 rr        	inc FRAME_COUNT
001699r 4  A5 rr        	lda FRAME_COUNT
00169Br 4  C5 rr        	cmp FRAME_LENGTH
00169Dr 4  D0 18        	bne endmusicplayfunc
00169Fr 4               
00169Fr 4               ; reset frame counter
00169Fr 4  A9 00        	lda #$00
0016A1r 4  85 rr        	sta FRAME_COUNT
0016A3r 4               
0016A3r 4               ; increase pattern position
0016A3r 4  E6 rr        	inc PATTERN_POS
0016A5r 4  A5 rr        	lda PATTERN_POS
0016A7r 4  C9 10        	cmp #$10
0016A9r 4  D0 08        	bne not_next_pattern
0016ABr 4               
0016ABr 4               next_pattern:
0016ABr 4  A9 00        	lda #$00
0016ADr 4  85 rr        	sta PATTERN_POS
0016AFr 4  E6 rr        	inc SONG_POS
0016B1r 4  A5 rr        	lda SONG_POS
0016B3r 4               
0016B3r 4               not_next_pattern:
0016B3r 4               
0016B3r 4               ; done
0016B3r 4  E6 rr        	inc MEGA_COUNTER
0016B5r 4  A5 rr        	lda MEGA_COUNTER
0016B7r 4               
0016B7r 4               endmusicplayfunc:
0016B7r 4  60           	rts
0016B8r 4               
0016B8r 4               ;---------------------------------------------------------------
0016B8r 4               ;---------------------------------------------------------------
0016B8r 4               
0016B8r 4               ; grab current playback data and push to VIC
0016B8r 4               
0016B8r 4               AUDIO_UPDATE:
0016B8r 4               
0016B8r 4               ; y = pattern position
0016B8r 4  A4 rr        	ldy PATTERN_POS
0016BAr 4  B9 rr rr     	lda TABLE_SPEED,y
0016BDr 4  85 rr        	sta FRAME_LENGTH
0016BFr 4  B9 rr rr     	lda TABLE_VOLUME,y
0016C2r 4  8D 0E 90     	sta VIC_VOLUME
0016C5r 4               
0016C5r 4               ; x = channel counter
0016C5r 4  A2 00        	ldx #$00
0016C7r 4               
0016C7r 4               ; CHANNEL 1
0016C7r 4  A5 rr        	lda CH1_ACTIVE
0016C9r 4  C9 00        	cmp #$00
0016CBr 4  D0 05        	bne channel1_active
0016CDr 4               
0016CDr 4  A9 20        	lda #$20
0016CFr 4  4C rr rr     	jmp channel1_done
0016D2r 4               
0016D2r 4               channel1_active:
0016D2r 4  B1 rr        	lda (CH1_PATTERN_POS),y
0016D4r 4  20 rr rr     	jsr AUDIO_PROCESS_CHANNEL
0016D7r 4  69 20        	adc #$20
0016D9r 4               
0016D9r 4               channel1_done:
0016D9r 4               
0016D9r 4               ; CHANNEL 2
0016D9r 4  E8           	inx
0016DAr 4  A5 rr        	lda CH2_ACTIVE
0016DCr 4  C9 00        	cmp #$00
0016DEr 4  D0 05        	bne channel2_active
0016E0r 4               
0016E0r 4  A9 20        	lda #$20
0016E2r 4  4C rr rr     	jmp channel2_done
0016E5r 4               
0016E5r 4               channel2_active:
0016E5r 4  B1 rr        	lda (CH2_PATTERN_POS),y
0016E7r 4  20 rr rr     	jsr AUDIO_PROCESS_CHANNEL
0016EAr 4  69 20        	adc #$20
0016ECr 4               
0016ECr 4               channel2_done:
0016ECr 4               
0016ECr 4               ; CHANNEL 3
0016ECr 4  E8           	inx
0016EDr 4  A5 rr        	lda CH3_ACTIVE
0016EFr 4  C9 00        	cmp #$00
0016F1r 4  D0 05        	bne channel3_active
0016F3r 4  A9 20        	lda #$20
0016F5r 4  4C rr rr     	jmp channel3_done
0016F8r 4               
0016F8r 4               channel3_active:
0016F8r 4  B1 rr        	lda (CH3_PATTERN_POS),y
0016FAr 4  20 rr rr     	jsr AUDIO_PROCESS_CHANNEL
0016FDr 4  69 20        	adc #$20
0016FFr 4               
0016FFr 4               channel3_done:
0016FFr 4               
0016FFr 4               ; CHANNEL 4
0016FFr 4  E8           	inx
001700r 4  A5 rr        	lda CH4_ACTIVE
001702r 4  C9 00        	cmp #$00
001704r 4  D0 05        	bne channel4_active
001706r 4               
001706r 4  A9 20        	lda #$20
001708r 4  4C rr rr     	jmp channel4_done
00170Br 4               
00170Br 4               channel4_active:
00170Br 4  B1 rr        	lda (CH4_PATTERN_POS),y
00170Dr 4  20 rr rr     	jsr AUDIO_PROCESS_CHANNEL
001710r 4  69 20        	adc #$20
001712r 4               
001712r 4               channel4_done:
001712r 4  60           	rts
001713r 4               
001713r 4               ;---------------------------------------------------------------
001713r 4               ;---------------------------------------------------------------
001713r 4               
001713r 4               AUDIO_PROCESS_CHANNEL:
001713r 4  85 rr        	sta CHAN_NOTE_DATA
001715r 4  29 80        	and #%10000000
001717r 4  C9 80        	cmp #%10000000
001719r 4  D0 06        	bne not_note
00171Br 4               
00171Br 4               is_note:
00171Br 4  A5 rr        	lda CHAN_NOTE_DATA
00171Dr 4  9D 0A 90     	sta VIC_CHAN_1,x
001720r 4  60           	rts
001721r 4               
001721r 4               not_note:
001721r 4  A5 rr        	lda CHAN_NOTE_DATA
001723r 4  C9 01        	cmp #%00000001
001725r 4  D0 06        	bne not_note_off
001727r 4               
001727r 4  A9 00        	lda #$00
001729r 4  9D 0A 90     	sta VIC_CHAN_1,x
00172Cr 4  60           	rts
00172Dr 4               
00172Dr 4               not_note_off:
00172Dr 4  A5 rr        	lda CHAN_NOTE_DATA
00172Fr 4  C9 02        	cmp #%00000010
001731r 4  D0 03        	bne not_note_next
001733r 4               
001733r 4               ; move song to next song row
001733r 4  E6 rr        	inc SONG_NEXT_TRUE
001735r 4               
001735r 4               ; XXX do what here?
001735r 4               ; will update correctly on next frame
001735r 4               ; if we move where this subroutine gets called
001735r 4               
001735r 4               ;	lda #$00
001735r 4  60           	rts
001736r 4               
001736r 4               not_note_next:
001736r 4  A5 rr        	lda CHAN_NOTE_DATA
001738r 4  C9 03        	cmp #NOTE_END
00173Ar 4  D0 05        	bne not_end_of_song
00173Cr 4               
00173Cr 4               ; turn the sound off cheaply :D/
00173Cr 4  A9 00        	lda #$00
00173Er 4  8D 0E 90     	sta VIC_VOLUME
001741r 4               
001741r 4               ;-----BUG----------
001741r 4               ; soft reset the machine!
001741r 4               ; solution from https://www.c64-wiki.com/wiki/Reset_(Process)
001741r 4               ;	jmp $fd22
001741r 4               ;-----BUG----------
001741r 4               
001741r 4               not_end_of_song:
001741r 4  60           	rts
001742r 4               
001742r 4               ;---------------------------------------------------------------
001742r 4               ;---------------------------------------------------------------
001742r 4               
001742r 4               ; put pattern addresses in zero page
001742r 4               ; SONG_POS should be set before calling
001742r 4               
001742r 4               SONG_POS_UPDATE:
001742r 4               
001742r 4               ; x = channel pattern position offset
001742r 4  A2 00        	ldx #$00
001744r 4  86 rr        	stx CHANS_INACTIVE
001746r 4  A9 FF        	lda #$ff
001748r 4  85 rr        	sta CH1_ACTIVE
00174Ar 4  85 rr        	sta CH2_ACTIVE
00174Cr 4  85 rr        	sta CH3_ACTIVE
00174Er 4  85 rr        	sta CH4_ACTIVE
001750r 4               
001750r 4               song_pos_loop:
001750r 4  A5 rr        	lda SONG_POS
001752r 4  38           	sec
001753r 4  E9 40        	sbc #$40
001755r 4  10 10        	bpl song_page_2
001757r 4               
001757r 4               song_page_1:
001757r 4  0A           	asl
001758r 4  0A           	asl
001759r 4  85 rr        	sta TEMP_GUY
00175Br 4  8A           	txa
00175Cr 4  4A           	lsr
00175Dr 4  18           	clc
00175Er 4  65 rr        	adc TEMP_GUY
001760r 4  A8           	tay
001761r 4  B9 rr rr     	lda SONG_PAGE_1,y
001764r 4  4C rr rr     	jmp pattern_found
001767r 4               
001767r 4               song_page_2:
001767r 4  0A           	asl
001768r 4  0A           	asl
001769r 4  85 rr        	sta TEMP_GUY
00176Br 4  8A           	txa
00176Cr 4  4A           	lsr
00176Dr 4  18           	clc
00176Er 4  65 rr        	adc TEMP_GUY
001770r 4  A8           	tay
001771r 4  B9 rr rr     	lda SONG_PAGE_2,y
001774r 4               
001774r 4               pattern_found:
001774r 4  85 rr        	sta TEMP_GUY
001776r 4               
001776r 4               ; lets make sure its not an empty pattern
001776r 4  C9 FF        	cmp #$ff
001778r 4  D0 17        	bne dont_reset
00177Ar 4               
00177Ar 4               ; set channel to inactive mode
00177Ar 4  8A           	txa
00177Br 4  4A           	lsr
00177Cr 4  A8           	tay
00177Dr 4  A9 00        	lda #$00
00177Fr 4  99 rr rr     	sta CH1_ACTIVE,y
001782r 4               
001782r 4               ; reset song if there are 4 empty patterns
001782r 4  E6 rr        	inc CHANS_INACTIVE
001784r 4  A5 rr        	lda CHANS_INACTIVE
001786r 4  C9 04        	cmp #$04
001788r 4  D0 07        	bne dont_reset
00178Ar 4               
00178Ar 4               song_reset:
00178Ar 4  A9 00        	lda #$00
00178Cr 4  85 rr        	sta SONG_POS
00178Er 4  4C rr rr     	jmp SONG_POS_UPDATE
001791r 4               
001791r 4               dont_reset:
001791r 4  A5 rr        	lda TEMP_GUY
001793r 4               
001793r 4               ; LSB
001793r 4  0A           	asl
001794r 4  0A           	asl
001795r 4  0A           	asl
001796r 4  0A           	asl
001797r 4  18           	clc
001798r 4  69 50        	adc #$50
00179Ar 4  95 rr        	sta CH1_PATTERN_POS,x
00179Cr 4  E8           	inx
00179Dr 4               
00179Dr 4               ; MSB
00179Dr 4  A5 rr        	lda TEMP_GUY
00179Fr 4  4A           	lsr
0017A0r 4  4A           	lsr
0017A1r 4  4A           	lsr
0017A2r 4  4A           	lsr
0017A3r 4  69 rr        	adc #>PATTERNS
0017A5r 4  95 rr        	sta CH1_PATTERN_POS,x
0017A7r 4  E8           	inx
0017A8r 4  E0 08        	cpx #$08
0017AAr 4  D0 A4        	bne song_pos_loop
0017ACr 4  60           	rts
0017ADr 4               
0017ADr 4  xx xx xx xx  	.align $100
0017B1r 4  xx xx xx xx  
0017B5r 4  xx xx xx xx  
001800r 4               songpos:
001800r 4  34 4B 2D 49  	.incbin "songdata_jonah.bin"
001804r 4  0E 14 12 0F  
001808r 4  20 20 20 20  
002250r 4               
002250r 3               
002250r 3               ; Everything below here will be generated by the editors.
002250r 3               
002250r 3               
002250r 3  60                   rts
002251r 3               WINDOWTOP = 0
002251r 3               WINDOWLFT = 0
002251r 3               WINDOWHGT = 22
002251r 3               WINDOWWID = 22 ;a
002251r 3               MAPWID = 11
002251r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
002255r 3  FF FF FF FF  
002259r 3  FF FF FF     
00225Cr 3               mapdat:
00225Cr 3  FF FF FF 00          .byte 255,255,255,0,1,2,255,255,255,255,255
002260r 3  01 02 FF FF  
002264r 3  FF FF FF     
002267r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255
00226Br 3  FF FF FF FF  
00226Fr 3  FF FF FF     
002272r 3  0A           stmap:  .byte 10
002273r 3               
002273r 3               evnt00:
002273r 3                       ; SPRITEINK command
002273r 3  A5 rr                lda joyval	; KEY
002275r 3  29 08                and #8
002277r 3  F0 03                beq :+
002279r 3  4C rr rr             jmp a00093
00227Cr 3               :
00227Cr 3  20 rr rr             jsr laddu	; CANGOUP
00227Fr 3  F0 03                beq :+
002281r 3  4C rr rr             jmp a00093
002284r 3               :
002284r 3  A9 01                lda #1
002286r 3  A0 06                ldy #6
002288r 3  91 rr                sta (z80_ix),y
00228Ar 3  A9 00                lda #0		; ANIMATE
00228Cr 3  20 rr rr             jsr animsp
00228Fr 3  A0 08                ldy #8 		; SPRITEUP
002291r 3  B1 rr                lda (z80_ix),y
002293r 3  38                   sec
002294r 3  E9 02                sbc #2
002296r 3  91 rr                sta (z80_ix),y
002298r 3  A5 rr        a00093: lda joyval	; KEY
00229Ar 3  29 04                and #4
00229Cr 3  F0 03                beq :+
00229Er 3  4C rr rr             jmp a00180
0022A1r 3               :
0022A1r 3  20 rr rr             jsr laddd	; LADDERBELOW
0022A4r 3  F0 03                beq :+
0022A6r 3  4C rr rr             jmp a00180
0022A9r 3               :
0022A9r 3  A9 01                lda #1
0022ABr 3  A0 06                ldy #6
0022ADr 3  91 rr                sta (z80_ix),y
0022AFr 3  A9 00                lda #0		; ANIMATE
0022B1r 3  20 rr rr             jsr animsp
0022B4r 3  A0 08                ldy #8 		; SPRITEDOWN
0022B6r 3  B1 rr                lda (z80_ix),y
0022B8r 3  18                   clc
0022B9r 3  69 02                adc #2
0022BBr 3  91 rr                sta (z80_ix),y
0022BDr 3  A5 rr        a00180: lda joyval	; KEY
0022BFr 3  29 01                and #1
0022C1r 3  F0 03                beq :+
0022C3r 3  4C rr rr             jmp a00273
0022C6r 3               :
0022C6r 3  20 rr rr             jsr cangr	; CANGORIGHT
0022C9r 3  F0 03                beq :+
0022CBr 3  4C rr rr             jmp a00273
0022CEr 3               :
0022CEr 3  20 rr rr             jsr vapour	; TRAIL
0022D1r 3  A9 00                lda #0
0022D3r 3  A0 06                ldy #6
0022D5r 3  91 rr                sta (z80_ix),y
0022D7r 3  A9 00                lda #0		; ANIMATE
0022D9r 3  20 rr rr             jsr animsp
0022DCr 3  A0 09                ldy #9 		; SPRITERIGHT
0022DEr 3  B1 rr                lda (z80_ix),y
0022E0r 3  18                   clc
0022E1r 3  69 02                adc #2
0022E3r 3  91 rr                sta (z80_ix),y
0022E5r 3  A5 rr        a00273: lda joyval	; KEY
0022E7r 3  29 02                and #2
0022E9r 3  F0 03                beq :+
0022EBr 3  4C rr rr             jmp a00365
0022EEr 3               :
0022EEr 3  20 rr rr             jsr cangl	; CANGOLEFT
0022F1r 3  F0 03                beq :+
0022F3r 3  4C rr rr             jmp a00365
0022F6r 3               :
0022F6r 3  20 rr rr             jsr vapour	; TRAIL
0022F9r 3  A9 00                lda #0
0022FBr 3  A0 06                ldy #6
0022FDr 3  91 rr                sta (z80_ix),y
0022FFr 3  A9 00                lda #0		; ANIMATE
002301r 3  20 rr rr             jsr animsp
002304r 3  A0 09                ldy #9 		; SPRITELEFT
002306r 3  B1 rr                lda (z80_ix),y
002308r 3  38                   sec
002309r 3  E9 02                sbc #2
00230Br 3  91 rr                sta (z80_ix),y
00230Dr 3               a00365: ; SPRITEINK command
00230Dr 3  60                   rts
00230Er 3               evnt01:
00230Er 3  A9 00                lda #0
002310r 3  A0 0A                ldy #10
002312r 3  D1 rr                cmp (z80_ix),y
002314r 3  F0 03                beq *+5
002316r 3  4C rr rr             jmp b00153
002319r 3  20 rr rr             jsr laddu	; CANGOUP
00231Cr 3  F0 03                beq :+
00231Er 3  4C rr rr             jmp b00070
002321r 3               :
002321r 3  A0 08                ldy #8 		; SPRITEUP
002323r 3  B1 rr                lda (z80_ix),y
002325r 3  38                   sec
002326r 3  E9 02                sbc #2
002328r 3  91 rr                sta (z80_ix),y
00232Ar 3  4C rr rr             jmp b00153
00232Dr 3  A9 02        b00070: lda #2
00232Fr 3  85 rr                sta z80_d	; GETRANDOM
002331r 3  20 rr rr             jsr random
002334r 3  85 rr                sta z80_h
002336r 3  20 rr rr             jsr imul
002339r 3  A5 rr                lda z80_h
00233Br 3  85 rr                sta varrnd
00233Dr 3  A9 00                lda #0
00233Fr 3  C5 rr                cmp varrnd
002341r 3  F0 03                beq *+5
002343r 3  4C rr rr             jmp b00139
002346r 3  A9 02                lda #2
002348r 3  A0 0A                ldy #10
00234Ar 3  91 rr                sta (z80_ix),y
00234Cr 3  4C rr rr             jmp b00153
00234Fr 3  A9 03        b00139: lda #3
002351r 3  A0 0A                ldy #10
002353r 3  91 rr                sta (z80_ix),y
002355r 3  A9 01        b00153: lda #1
002357r 3  A0 0A                ldy #10
002359r 3  D1 rr                cmp (z80_ix),y
00235Br 3  F0 03                beq *+5
00235Dr 3  4C rr rr             jmp b00306
002360r 3  20 rr rr             jsr laddd	; LADDERBELOW
002363r 3  F0 03                beq :+
002365r 3  4C rr rr             jmp b00223
002368r 3               :
002368r 3  A0 08                ldy #8 		; SPRITEDOWN
00236Ar 3  B1 rr                lda (z80_ix),y
00236Cr 3  18                   clc
00236Dr 3  69 02                adc #2
00236Fr 3  91 rr                sta (z80_ix),y
002371r 3  4C rr rr             jmp b00306
002374r 3  A9 02        b00223: lda #2
002376r 3  85 rr                sta z80_d	; GETRANDOM
002378r 3  20 rr rr             jsr random
00237Br 3  85 rr                sta z80_h
00237Dr 3  20 rr rr             jsr imul
002380r 3  A5 rr                lda z80_h
002382r 3  85 rr                sta varrnd
002384r 3  A9 00                lda #0
002386r 3  C5 rr                cmp varrnd
002388r 3  F0 03                beq *+5
00238Ar 3  4C rr rr             jmp b00292
00238Dr 3  A9 02                lda #2
00238Fr 3  A0 0A                ldy #10
002391r 3  91 rr                sta (z80_ix),y
002393r 3  4C rr rr             jmp b00306
002396r 3  A9 03        b00292: lda #3
002398r 3  A0 0A                ldy #10
00239Ar 3  91 rr                sta (z80_ix),y
00239Cr 3  A9 02        b00306: lda #2
00239Er 3  A0 0A                ldy #10
0023A0r 3  D1 rr                cmp (z80_ix),y
0023A2r 3  F0 03                beq *+5
0023A4r 3  4C rr rr             jmp b00518
0023A7r 3  20 rr rr             jsr cangl	; CANGOLEFT
0023AAr 3  F0 03                beq :+
0023ACr 3  4C rr rr             jmp b00388
0023AFr 3               :
0023AFr 3  A0 09                ldy #9 		; SPRITELEFT
0023B1r 3  B1 rr                lda (z80_ix),y
0023B3r 3  38                   sec
0023B4r 3  E9 02                sbc #2
0023B6r 3  91 rr                sta (z80_ix),y
0023B8r 3  A9 00                lda #0
0023BAr 3  A0 07                ldy #7
0023BCr 3  91 rr                sta (z80_ix),y
0023BEr 3  4C rr rr             jmp b00402
0023C1r 3  A9 03        b00388: lda #3
0023C3r 3  A0 0A                ldy #10
0023C5r 3  91 rr                sta (z80_ix),y
0023C7r 3  A9 04        b00402: lda #4
0023C9r 3  85 rr                sta z80_d	; GETRANDOM
0023CBr 3  20 rr rr             jsr random
0023CEr 3  85 rr                sta z80_h
0023D0r 3  20 rr rr             jsr imul
0023D3r 3  A5 rr                lda z80_h
0023D5r 3  85 rr                sta varrnd
0023D7r 3  A9 00                lda #0
0023D9r 3  C5 rr                cmp varrnd
0023DBr 3  F0 03                beq *+5
0023DDr 3  4C rr rr             jmp b00518
0023E0r 3  20 rr rr             jsr laddu	; CANGOUP
0023E3r 3  F0 03                beq :+
0023E5r 3  4C rr rr             jmp b00487
0023E8r 3               :
0023E8r 3  A9 00                lda #0
0023EAr 3  A0 0A                ldy #10
0023ECr 3  91 rr                sta (z80_ix),y
0023EEr 3  4C rr rr             jmp b00518
0023F1r 3  20 rr rr     b00487: jsr laddd	; LADDERBELOW
0023F4r 3  F0 03                beq :+
0023F6r 3  4C rr rr             jmp b00518
0023F9r 3               :
0023F9r 3  A9 01                lda #1
0023FBr 3  A0 0A                ldy #10
0023FDr 3  91 rr                sta (z80_ix),y
0023FFr 3  A9 03        b00518: lda #3
002401r 3  A0 0A                ldy #10
002403r 3  D1 rr                cmp (z80_ix),y
002405r 3  F0 03                beq *+5
002407r 3  4C rr rr             jmp b00730
00240Ar 3  20 rr rr             jsr cangr	; CANGORIGHT
00240Dr 3  F0 03                beq :+
00240Fr 3  4C rr rr             jmp b00601
002412r 3               :
002412r 3  A0 09                ldy #9 		; SPRITERIGHT
002414r 3  B1 rr                lda (z80_ix),y
002416r 3  18                   clc
002417r 3  69 02                adc #2
002419r 3  91 rr                sta (z80_ix),y
00241Br 3  A9 01                lda #1
00241Dr 3  A0 07                ldy #7
00241Fr 3  91 rr                sta (z80_ix),y
002421r 3  4C rr rr             jmp b00614
002424r 3  A9 02        b00601: lda #2
002426r 3  A0 0A                ldy #10
002428r 3  91 rr                sta (z80_ix),y
00242Ar 3  A9 04        b00614: lda #4
00242Cr 3  85 rr                sta z80_d	; GETRANDOM
00242Er 3  20 rr rr             jsr random
002431r 3  85 rr                sta z80_h
002433r 3  20 rr rr             jsr imul
002436r 3  A5 rr                lda z80_h
002438r 3  85 rr                sta varrnd
00243Ar 3  A9 00                lda #0
00243Cr 3  C5 rr                cmp varrnd
00243Er 3  F0 03                beq *+5
002440r 3  4C rr rr             jmp b00730
002443r 3  20 rr rr             jsr laddu	; CANGOUP
002446r 3  F0 03                beq :+
002448r 3  4C rr rr             jmp b00700
00244Br 3               :
00244Br 3  A9 00                lda #0
00244Dr 3  A0 0A                ldy #10
00244Fr 3  91 rr                sta (z80_ix),y
002451r 3  4C rr rr             jmp b00730
002454r 3  20 rr rr     b00700: jsr laddd	; LADDERBELOW
002457r 3  F0 03                beq :+
002459r 3  4C rr rr             jmp b00730
00245Cr 3               :
00245Cr 3  A9 01                lda #1
00245Er 3  A0 0A                ldy #10
002460r 3  91 rr                sta (z80_ix),y
002462r 3  A9 00        b00730: lda #0 	; COLLISION
002464r 3  85 rr                sta z80_b
002466r 3  20 rr rr             jsr sktyp
002469r 3  B0 03                bcs :+
00246Br 3  4C rr rr             jmp b00766
00246Er 3               :
00246Er 3  A9 01                lda #1 		; KILL
002470r 3  85 rr                sta deadf
002472r 3  60           b00766: rts
002473r 3               evnt02:
002473r 3  A9 00                lda #0
002475r 3  A0 0B                ldy #11
002477r 3  D1 rr                cmp (z80_ix),y
002479r 3  F0 03                beq *+5
00247Br 3  4C rr rr             jmp c00096
00247Er 3  A9 42                lda #66
002480r 3  A0 0C                ldy #12
002482r 3  D1 rr                cmp (z80_ix),y
002484r 3  F0 03                beq *+5
002486r 3  4C rr rr             jmp c00065
002489r 3  A9 01                lda #1
00248Br 3  A0 0B                ldy #11
00248Dr 3  91 rr                sta (z80_ix),y
00248Fr 3  4C rr rr             jmp c00091
002492r 3  A0 0C        c00065: ldy #12
002494r 3  B1 rr                lda (z80_ix),y
002496r 3  38                   sec
002497r 3  E9 01                sbc #1
002499r 3  A0 0C                ldy #12
00249Br 3  91 rr                sta (z80_ix),y
00249Dr 3  4C rr rr     c00091: jmp c00163
0024A0r 3  A9 46        c00096: lda #70
0024A2r 3  A0 0C                ldy #12
0024A4r 3  D1 rr                cmp (z80_ix),y
0024A6r 3  F0 03                beq *+5
0024A8r 3  4C rr rr             jmp c00136
0024ABr 3  A9 00                lda #0
0024ADr 3  A0 0B                ldy #11
0024AFr 3  91 rr                sta (z80_ix),y
0024B1r 3  4C rr rr             jmp c00163
0024B4r 3  A0 0C        c00136: ldy #12
0024B6r 3  B1 rr                lda (z80_ix),y
0024B8r 3  18                   clc
0024B9r 3  69 01                adc #1
0024BBr 3  A0 0C                ldy #12
0024BDr 3  91 rr                sta (z80_ix),y
0024BFr 3               c00163: ; SPRITEINK command
0024BFr 3  A9 00                lda #0 	; COLLISION
0024C1r 3  85 rr                sta z80_b
0024C3r 3  20 rr rr             jsr sktyp
0024C6r 3  B0 03                bcs :+
0024C8r 3  4C rr rr             jmp c00339
0024CBr 3               :
0024CBr 3  A9 FF                lda #255	; REMOVE
0024CDr 3  A0 05                ldy #5
0024CFr 3  91 rr                sta (z80_ix),y
0024D1r 3  A9 19                lda #25	; EXPLODE
0024D3r 3  20 rr rr             jsr explod
0024D6r 3  A5 rr                lda vara
0024D8r 3  38                   sec
0024D9r 3  E9 01                sbc #1
0024DBr 3  85 rr                sta vara
0024DDr 3  A9 00                lda #0
0024DFr 3  C5 rr                cmp vara
0024E1r 3  F0 03                beq *+5
0024E3r 3  4C rr rr             jmp c00265
0024E6r 3  A9 01                lda #1	; NEXTLEVEL
0024E8r 3  85 rr                sta nexlev
0024EAr 3               c00265: ; SPRITEINK command
0024EAr 3  A9 64                lda #<100		; SCORE
0024ECr 3  85 rr                sta z80_l
0024EEr 3  A9 00                lda #>100
0024F0r 3  85 rr                sta z80_h
0024F2r 3  20 rr rr             jsr addsc
0024F5r 3                       ; SOUND command
0024F5r 3  A9 00                lda #0
0024F7r 3  85 rr                sta chary
0024F9r 3  A9 01                lda #1
0024FBr 3  85 rr                sta charx
0024FDr 3  A0 00                ldy #0		; SHOWSCORE
0024FFr 3  A9 06                lda #6
002501r 3  85 rr                sta z80_b
002503r 3  20 rr rr             jsr dscor
002506r 3  60           c00339: rts
002507r 3               evnt03:
002507r 3  60                   rts
002508r 3               evnt04:
002508r 3  60                   rts
002509r 3               evnt05:
002509r 3  60                   rts
00250Ar 3               evnt06:
00250Ar 3  60                   rts
00250Br 3               evnt07:
00250Br 3  60                   rts
00250Cr 3               evnt08:
00250Cr 3  60                   rts
00250Dr 3               evnt09:
00250Dr 3  A9 02                lda #2
00250Fr 3  A0 05                ldy #5
002511r 3  D1 rr                cmp (z80_ix),y
002513r 3  F0 03                beq *+5
002515r 3  4C rr rr             jmp j00066
002518r 3  A5 rr                lda vara
00251Ar 3  18                   clc
00251Br 3  69 01                adc #1
00251Dr 3  85 rr                sta vara
00251Fr 3  A9 00                lda #0
002521r 3  A0 0B                ldy #11
002523r 3  91 rr                sta (z80_ix),y
002525r 3  A9 45                lda #69
002527r 3  A0 0C                ldy #12
002529r 3  91 rr                sta (z80_ix),y
00252Br 3  60           j00066: rts
00252Cr 3               evnt10:
00252Cr 3  60                   rts
00252Dr 3               evnt11:
00252Dr 3  60                   rts
00252Er 3               evnt12:
00252Er 3  60                   rts
00252Fr 3               evnt13:
00252Fr 3  A9 03                lda #3
002531r 3  85 rr                sta numlif
002533r 3  A9 00                lda #0
002535r 3  85 rr                sta scno
002537r 3  20 rr rr             jsr nwscr
00253Ar 3                       ; COLOUR command
00253Ar 3  A9 02                lda #2
00253Cr 3                       ; BORDER command
00253Cr 3  29 07                and #7
00253Er 3  85 rr                sta tmp
002540r 3  AD 0F 90             lda RegF
002543r 3  29 F8                and #%11111000
002545r 3  05 rr                ora tmp
002547r 3  8D 0F 90             sta RegF
00254Ar 3  20 rr rr             jsr cls		; CLS
00254Dr 3  A9 02                lda #2
00254Fr 3  85 rr                sta chary
002551r 3  A9 12                lda #18
002553r 3  85 rr                sta charx
002555r 3  A9 02                lda #2  	; MESSAGE
002557r 3  20 rr rr             jsr dmsg
00255Ar 3  A9 05                lda #5
00255Cr 3  85 rr                sta chary
00255Er 3  A9 12                lda #18
002560r 3  85 rr                sta charx
002562r 3  A9 03                lda #3  	; MESSAGE
002564r 3  20 rr rr             jsr dmsg
002567r 3  A9 00                lda #0
002569r 3  85 rr                sta chary
00256Br 3  A9 09                lda #9
00256Dr 3  85 rr                sta charx
00256Fr 3                       ; COLOUR command
00256Fr 3  A9 01                lda #1  	; MESSAGE
002571r 3  20 rr rr             jsr dmsg
002574r 3  A9 03                lda #3
002576r 3  85 rr                sta chary
002578r 3  A9 12                lda #18
00257Ar 3  85 rr                sta charx
00257Cr 3  A0 00                ldy #0		; SHOWSCORE
00257Er 3  A9 06                lda #6
002580r 3  85 rr                sta z80_b
002582r 3  20 rr rr             jsr dscor
002585r 3  60                   rts
002586r 3               evnt14:
002586r 3  A9 00                lda #0
002588r 3  85 rr                sta vara
00258Ar 3  A9 06                lda #6
00258Cr 3  85 rr                sta chary
00258Er 3  A9 14                lda #20
002590r 3  85 rr                sta charx
002592r 3  A5 rr                lda numlif	; DISPLAY
002594r 3  20 rr rr             jsr disply
002597r 3  60                   rts
002598r 3               evnt15:
002598r 3  A9 00                lda #0
00259Ar 3  A0 05                ldy #5
00259Cr 3  D1 rr                cmp (z80_ix),y
00259Er 3  F0 03                beq *+5
0025A0r 3  4C rr rr             jmp p00034
0025A3r 3  A9 01                lda #1 		; KILL
0025A5r 3  85 rr                sta deadf
0025A7r 3  60           p00034: rts
0025A8r 3               evnt16:
0025A8r 3                       ; SOUND command
0025A8r 3  A5 rr                lda numlif
0025AAr 3  38                   sec
0025ABr 3  E9 01                sbc #1
0025ADr 3  85 rr                sta numlif
0025AFr 3  60                   rts
0025B0r 3               evnt17:
0025B0r 3  A9 32                lda #50 	; DELAY
0025B2r 3  20 rr rr             jsr delay
0025B5r 3  60                   rts
0025B6r 3               evnt18:
0025B6r 3  A9 32                lda #50 	; DELAY
0025B8r 3  20 rr rr             jsr delay
0025BBr 3  60                   rts
0025BCr 3               evnt19:
0025BCr 3  60                   rts
0025BDr 3  60           ptcusr: rts
0025BEr 3               data_start:
0025BEr 3               msgdat:
0025BEr 3  47 41 4D 45          .byte "GAME OVER",141
0025C2r 3  20 4F 56 45  
0025C6r 3  52 8D        
0025C8r 3  44 49 41 4D          .byte "DIAMOND GEEZER",141
0025CCr 3  4F 4E 44 20  
0025D0r 3  47 45 45 5A  
0025D7r 3  53 43 4F 52          .byte "SCORE",141
0025DBr 3  45 8D        
0025DDr 3  4C 49 56 45          .byte "LIVES",141
0025E1r 3  53 8D        
0025E3r 3  31 2E 20 4B          .byte "1. KEYBOARD",141
0025E7r 3  45 59 42 4F  
0025EBr 3  41 52 44 8D  
0025EFr 3  32 2E 20 4B          .byte "2. KEMPSTON",141
0025F3r 3  45 4D 50 53  
0025F7r 3  54 4F 4E 8D  
0025FBr 3  33 2E 20 53          .byte "3. SINCLAIR",141
0025FFr 3  49 4E 43 4C  
002603r 3  41 49 52 8D  
002607r 3  20 20 57 65          .byte "  Welcome to Diamond Geezer...",13
00260Br 3  6C 63 6F 6D  
00260Fr 3  65 20 74 6F  
002626r 3  4D 6F 76 65          .byte "Move around the levels",13
00262Ar 3  20 61 72 6F  
00262Er 3  75 6E 64 20  
00263Dr 3  63 6F 6C 6C          .byte "collecting diamonds and",13
002641r 3  65 63 74 69  
002645r 3  6E 67 20 64  
002655r 3  61 76 6F 69          .byte "avoiding the deadly",13
002659r 3  64 69 6E 67  
00265Dr 3  20 74 68 65  
002669r 3  73 6B 75 6C          .byte "skulls   +",13
00266Dr 3  6C 73 20 20  
002671r 3  20 2B 0D     
002674r 3  8D                   .byte 141
002675r 3               nummsg:
002675r 3  08                   .byte 8
002676r 3               chgfx:
002676r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00267Ar 3  00 00 00 00  
00267Er 3  FE FE FE 00          .byte 254,254,254,0,239,239,239,0
002682r 3  EF EF EF 00  
002686r 3  00 00 FF 00          .byte 0,0,255,0,0,0,255,0
00268Ar 3  00 00 FF 00  
00268Er 3  AA 55 AA 55          .byte 170,85,170,85,170,85,170,85
002692r 3  AA 55 AA 55  
002696r 3               bCol:
002696r 3  47                   .byte 71
002697r 3  42                   .byte 66
002698r 3  47                   .byte 71
002699r 3  44                   .byte 68
00269Ar 3               bprop:
00269Ar 3  00                   .byte 0
00269Br 3  02                   .byte 2
00269Cr 3  03                   .byte 3
00269Dr 3  04                   .byte 4
00269Er 3               sprgfx:
00269Er 3  43 80 37 C5          .byte 67,128,55,197,103,226,39,229,19,228,15,248,1,240,1,240,3,240,3,224,7,224,15,224,23,208,19,144,56,24,120,60
0026A2r 3  67 E2 27 E5  
0026A6r 3  13 E4 0F F8  
0026BEr 3  10 E0 4D F1          .byte 16,224,77,241,153,248,73,249,4,249,3,254,0,124,0,124,0,252,0,248,1,248,3,248,5,244,4,228,14,6,30,15
0026C2r 3  99 F8 49 F9  
0026C6r 3  04 F9 03 FE  
0026DEr 3  04 38 53 7C          .byte 4,56,83,124,38,126,82,126,65,62,128,255,0,31,0,31,0,63,0,62,0,126,0,254,1,125,1,57,131,129,199,131
0026E2r 3  26 7E 52 7E  
0026E6r 3  41 3E 80 FF  
0026FEr 3  01 0E 14 DF          .byte 1,14,20,223,137,159,148,159,144,79,224,63,192,7,192,7,192,15,128,15,128,31,128,63,64,95,64,78,96,224,241,224
002702r 3  89 9F 94 9F  
002706r 3  90 4F E0 3F  
00271Er 3  00 00 03 80          .byte 0,0,3,128,7,192,87,229,39,226,83,237,15,241,1,240,1,240,3,240,3,224,7,224,15,240,23,200,227,134,224,15
002722r 3  07 C0 57 E5  
002726r 3  27 E2 53 ED  
00273Er 3  00 00 00 E0          .byte 0,0,0,224,1,240,85,249,137,248,84,251,67,252,0,124,0,124,0,252,0,248,1,248,3,252,5,242,184,225,248,3
002742r 3  01 F0 55 F9  
002746r 3  89 F8 54 FB  
00275Er 3  00 00 00 38          .byte 0,0,0,56,0,124,85,126,34,126,213,62,16,255,0,31,0,31,0,63,0,62,0,126,0,255,129,124,110,56,254,0
002762r 3  00 7C 55 7E  
002766r 3  22 7E D5 3E  
00277Er 3  00 00 00 0E          .byte 0,0,0,14,0,31,149,95,136,159,181,79,196,63,192,7,192,7,192,15,128,15,128,31,192,63,32,95,27,142,63,128
002782r 3  00 1F 95 5F  
002786r 3  88 9F B5 4F  
00279Er 3  03 80 07 C0          .byte 3,128,7,192,7,224,7,224,67,224,35,241,253,250,33,247,3,242,3,225,7,224,15,224,23,208,19,144,56,24,120,60
0027A2r 3  07 E0 07 E0  
0027A6r 3  43 E0 23 F1  
0027BEr 3  00 E0 01 F0          .byte 0,224,1,240,1,248,1,248,16,248,72,252,191,126,200,125,128,252,64,248,1,248,3,248,5,244,4,228,14,6,30,15
0027C2r 3  01 F8 01 F8  
0027C6r 3  10 F8 48 FC  
0027DEr 3  00 38 00 7C          .byte 0,56,0,124,0,126,0,126,4,62,18,63,175,223,114,31,32,63,16,62,0,126,0,254,1,125,1,57,131,129,199,131
0027E2r 3  00 7E 00 7E  
0027E6r 3  04 3E 12 3F  
0027FEr 3  00 0E 00 1F          .byte 0,14,0,31,128,31,128,31,129,15,196,143,235,247,220,135,200,15,132,15,128,31,128,63,64,95,64,78,96,224,241,224
002802r 3  80 1F 80 1F  
002806r 3  81 0F C4 8F  
00281Er 3  03 80 07 C0          .byte 3,128,7,192,7,224,87,229,35,226,83,253,13,241,1,240,3,240,3,224,7,224,7,224,7,224,3,160,15,112,15,112
002822r 3  07 E0 57 E5  
002826r 3  23 E2 53 FD  
00283Er 3  00 E0 01 F0          .byte 0,224,1,240,1,248,85,249,136,248,84,255,67,124,0,124,0,252,0,248,1,248,1,248,1,248,0,232,3,220,3,220
002842r 3  01 F8 55 F9  
002846r 3  88 F8 54 FF  
00285Er 3  00 38 00 7C          .byte 0,56,0,124,0,126,85,126,34,62,213,63,16,223,0,31,0,63,0,62,0,126,0,126,0,126,0,58,0,247,0,247
002862r 3  00 7E 55 7E  
002866r 3  22 3E D5 3F  
00287Er 3  00 0E 00 1F          .byte 0,14,0,31,128,31,149,95,136,143,245,79,196,55,192,7,192,15,128,15,128,31,128,31,128,31,128,14,192,61,192,61
002882r 3  80 1F 95 5F  
002886r 3  88 8F F5 4F  
00289Er 3  01 C0 C3 E0          .byte 1,192,195,224,199,224,39,224,47,192,31,243,15,143,15,128,15,192,7,216,7,246,7,247,59,224,33,192,224,0,224,0
0028A2r 3  C7 E0 27 E0  
0028A6r 3  2F C0 1F F3  
0028BEr 3  00 70 30 F8          .byte 0,112,48,248,49,248,9,248,11,240,199,252,195,227,3,224,3,240,1,246,129,253,193,253,14,248,8,112,56,0,56,0
0028C2r 3  31 F8 09 F8  
0028C6r 3  0B F0 C7 FC  
0028DEr 3  00 1C 0C 3E          .byte 0,28,12,62,12,126,2,126,2,252,49,255,240,248,0,248,0,252,128,125,96,127,112,127,3,190,2,28,14,0,14,0
0028E2r 3  0C 7E 02 7E  
0028E6r 3  02 FC 31 FF  
0028FEr 3  00 07 83 0F          .byte 0,7,131,15,131,31,128,159,0,191,204,127,60,62,0,62,0,63,96,31,216,31,220,31,128,239,0,135,3,128,3,128
002902r 3  83 1F 80 9F  
002906r 3  00 BF CC 7F  
00291Er 3  01 C0 03 E0          .byte 1,192,3,224,7,224,199,227,207,207,63,240,15,128,15,128,15,192,7,192,55,232,47,244,227,231,225,199,0,0,0,0
002922r 3  07 E0 C7 E3  
002926r 3  CF CF 3F F0  
00293Er 3  00 70 00 F8          .byte 0,112,0,248,1,248,241,248,243,243,15,252,3,224,3,224,3,240,1,240,13,250,11,253,248,249,248,113,0,0,0,0
002942r 3  01 F8 F1 F8  
002946r 3  F3 F3 0F FC  
00295Er 3  00 1C 00 3E          .byte 0,28,0,62,0,126,60,126,252,252,3,255,0,248,0,248,0,252,0,124,131,126,66,255,126,62,126,28,0,0,0,0
002962r 3  00 7E 3C 7E  
002966r 3  FC FC 03 FF  
00297Er 3  00 07 80 0F          .byte 0,7,128,15,128,31,143,31,63,63,192,255,0,62,0,62,0,63,0,31,160,223,208,191,159,143,31,135,0,0,0,0
002982r 3  80 1F 8F 1F  
002986r 3  3F 3F C0 FF  
00299Er 3  01 C0 03 E3          .byte 1,192,3,227,7,227,7,228,15,200,207,240,223,128,47,128,15,192,63,192,231,224,231,240,3,232,1,196,0,7,0,7
0029A2r 3  07 E3 07 E4  
0029A6r 3  0F C8 CF F0  
0029BEr 3  00 70 C0 F8          .byte 0,112,192,248,193,248,1,249,3,242,51,252,55,224,11,224,3,240,15,240,57,248,57,252,0,250,0,113,192,1,192,1
0029C2r 3  C1 F8 01 F9  
0029C6r 3  03 F2 33 FC  
0029DEr 3  00 1C 30 3E          .byte 0,28,48,62,48,126,64,126,128,252,12,255,13,248,2,248,0,252,3,252,14,126,14,127,128,62,64,28,112,0,112,0
0029E2r 3  30 7E 40 7E  
0029E6r 3  80 FC 0C FF  
0029FEr 3  00 07 8C 0F          .byte 0,7,140,15,140,31,144,31,32,63,195,63,3,126,0,190,0,63,0,255,131,159,195,159,160,15,16,7,28,0,28,0
002A02r 3  8C 1F 90 1F  
002A06r 3  20 3F C3 3F  
002A1Er 3  01 C0 03 E0          .byte 1,192,3,224,7,224,199,227,207,207,63,240,15,128,15,128,15,192,7,192,55,232,47,244,227,231,225,199,0,0,0,0
002A22r 3  07 E0 C7 E3  
002A26r 3  CF CF 3F F0  
002A3Er 3  00 70 00 F8          .byte 0,112,0,248,1,248,241,248,243,243,15,252,3,224,3,224,3,240,1,240,13,250,11,253,248,249,248,113,0,0,0,0
002A42r 3  01 F8 F1 F8  
002A46r 3  F3 F3 0F FC  
002A5Er 3  00 1C 00 3E          .byte 0,28,0,62,0,126,60,126,252,252,3,255,0,248,0,248,0,252,0,124,131,126,66,255,126,62,126,28,0,0,0,0
002A62r 3  00 7E 3C 7E  
002A66r 3  FC FC 03 FF  
002A7Er 3  00 07 80 0F          .byte 0,7,128,15,128,31,143,31,63,63,192,255,0,62,0,62,0,63,0,31,160,223,208,191,159,143,31,135,0,0,0,0
002A82r 3  80 1F 8F 1F  
002A86r 3  3F 3F C0 FF  
002A9Er 3  1F F0 3F FC          .byte 31,240,63,252,95,254,79,62,110,31,76,159,253,127,215,255,83,255,127,223,47,30,138,184,160,96,234,224,255,224,127,192
002AA2r 3  5F FE 4F 3E  
002AA6r 3  6E 1F 4C 9F  
002ABEr 3  07 FC 0F FF          .byte 7,252,15,255,151,255,147,207,219,135,211,39,255,95,245,255,212,255,223,247,139,199,34,174,40,24,58,184,63,248,31,240
002AC2r 3  97 FF 93 CF  
002AC6r 3  DB 87 D3 27  
002ADEr 3  01 FF C3 FF          .byte 1,255,195,255,229,255,228,243,246,225,244,201,255,215,253,127,245,63,247,253,226,241,136,171,10,6,14,174,15,254,7,252
002AE2r 3  E5 FF E4 F3  
002AE6r 3  F6 E1 F4 C9  
002AFEr 3  C0 7F F0 FF          .byte 192,127,240,255,249,127,249,60,125,184,125,50,255,245,255,95,253,79,125,255,120,188,226,42,130,129,131,171,131,255,1,255
002B02r 3  F9 7F F9 3C  
002B06r 3  7D B8 7D 32  
002B1Er 3  0F F8 3F FC          .byte 15,248,63,252,127,250,124,242,248,118,249,50,254,191,255,235,255,202,251,254,120,244,29,81,6,5,7,87,7,255,3,254
002B22r 3  7F FA 7C F2  
002B26r 3  F8 76 F9 32  
002B3Er 3  03 FE 0F FF          .byte 3,254,15,255,159,254,159,60,190,29,190,76,255,175,255,250,191,242,190,255,30,61,71,84,65,129,193,213,193,255,128,255
002B42r 3  9F FE 9F 3C  
002B46r 3  BE 1D BE 4C  
002B5Er 3  80 FF C3 FF          .byte 128,255,195,255,167,255,39,207,111,135,47,147,255,235,191,254,175,252,239,191,71,143,17,213,80,96,112,117,240,127,224,63
002B62r 3  A7 FF 27 CF  
002B66r 3  6F 87 2F 93  
002B7Er 3  E0 3F F0 FF          .byte 224,63,240,255,233,255,201,243,219,225,203,228,255,250,175,255,43,255,251,239,209,227,68,117,20,24,92,29,252,31,248,15
002B82r 3  E9 FF C9 F3  
002B86r 3  DB E1 CB E4  
002B9Er 3  01 80 07 E0          .byte 1,128,7,224,27,56,103,142,159,195,224,63,159,193,159,193,207,195,103,134,51,140,27,24,13,48,6,96,3,192,1,128
002BA2r 3  1B 38 67 8E  
002BA6r 3  9F C3 E0 3F  
002BBEr 3  00 60 01 F8          .byte 0,96,1,248,6,206,153,227,231,240,248,15,103,240,103,240,243,240,153,225,12,227,6,198,3,76,1,152,0,240,0,96
002BC2r 3  06 CE 99 E3  
002BC6r 3  E7 F0 F8 0F  
002BDEr 3  00 18 00 7E          .byte 0,24,0,126,129,179,230,120,57,252,254,3,25,252,25,252,60,252,102,120,195,56,129,177,0,211,0,102,0,60,0,24
002BE2r 3  81 B3 E6 78  
002BE6r 3  39 FC FE 03  
002BFEr 3  00 06 80 1F          .byte 0,6,128,31,224,108,57,158,14,127,255,128,6,127,6,127,15,63,25,158,48,206,96,108,192,52,128,25,0,15,0,6
002C02r 3  E0 6C 39 9E  
002C06r 3  0E 7F FF 80  
002C1Er 3               frmlst:
002C1Er 3  00 04                .byte 0,4
002C20r 3  04 04                .byte 4,4
002C22r 3  08 02                .byte 8,2
002C24r 3  0A 01 0B 00          .byte 10,1,11,0
002C28r 3               scdat:
002C28r 3  D3 00 CE 00          .word 211,206,259,248
002C2Cr 3  03 01 F8 00  
002C30r 3  01 FF 00 14          .byte 1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,8,2,2,255,1,10,2,2
002C34r 3  01 01 FF 00  
002C38r 3  14 01 01 FF  
002C52r 3  01 01 FF 00          .byte 1,1,255,0,6,2,2,255,0,10,2,2,1,1,255,0,6,2,2,255,0,10,2,2,1,1,2,2,255,1,11,2,2
002C56r 3  06 02 02 FF  
002C5Ar 3  00 0A 02 02  
002C73r 3  FF 01 07 02          .byte 255,1,7,2,2,255,0,11,2,2,255,0,5,1,1,2,2,255,0,11,2,2,255,0,5,255,1,4,2,2,255,1,13
002C77r 3  02 FF 00 0B  
002C7Br 3  02 02 FF 00  
002C94r 3  02 02 01 01          .byte 2,2,1,1,1,0,0,2,2,255,0,13,2,2,0,1,1,0,0,2,2,255,0,13,2,2,0,255,1,6,2,2,255,1,6
002C98r 3  01 00 00 02  
002C9Cr 3  02 FF 00 0D  
002CB7r 3  02 02 FF 01          .byte 2,2,255,1,8,255,0,4,2,2,255,0,6,2,2,255,0,6,1,1,255,0,4,2,2,255,0,6,2,2,255,0,6
002CBBr 3  08 FF 00 04  
002CBFr 3  02 02 FF 00  
002CD8r 3  FF 01 0A 02          .byte 255,1,10,2,2,255,1,7,2,2,1,1,1,255,0,8,2,2,255,0,7,2,2,0,1,1,255,0,8,2,2,255,0,7
002CDCr 3  02 FF 01 07  
002CE0r 3  02 02 01 01  
002CFAr 3  02 02 00 FF          .byte 2,2,0,255,1,23,255,0,22
002CFEr 3  01 17 FF 00  
002D02r 3  16           
002D03r 3  01 FF 00 14          .byte 1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,255,0,20,1,1,2,2,255,1,16,2,2
002D07r 3  01 01 FF 00  
002D0Br 3  14 01 01 FF  
002D24r 3  01 01 02 02          .byte 1,1,2,2,255,0,16,2,2,1,1,2,2,255,0,16,2,2,255,1,11,2,2,255,1,11,255,0,9,2,2,1,1,1
002D28r 3  FF 00 10 02  
002D2Cr 3  02 01 01 02  
002D46r 3  FF 00 06 01          .byte 255,0,6,1,1,255,0,9,2,2,1,1,1,255,0,6,255,1,9,2,2,255,1,7,2,2,255,1,4,255,0,7,2,2
002D4Ar 3  01 FF 00 09  
002D4Er 3  02 02 01 01  
002D68r 3  FF 00 07 02          .byte 255,0,7,2,2,0,0,1,1,255,0,7,2,2,255,0,7,2,2,0,0,255,1,5,2,2,255,1,7,2,2,255,1,8
002D6Cr 3  02 00 00 01  
002D70r 3  01 FF 00 07  
002D8Ar 3  00 00 00 02          .byte 0,0,0,2,2,255,0,7,2,2,255,0,6,1,1,0,0,0,2,2,255,0,7,2,2,255,0,6,255,1,8,2,2
002D8Er 3  02 FF 00 07  
002D92r 3  02 02 FF 00  
002DABr 3  FF 01 09 02          .byte 255,1,9,2,2,1,1,1,255,0,6,2,2,255,0,9,2,2,0,1,1,255,0,6,2,2,255,0,9,2,2,0,255,1,23
002DAFr 3  02 01 01 01  
002DB3r 3  FF 00 06 02  
002DCEr 3  FF 00 16             .byte 255,0,22
002DD1r 3  FF 01 04 FF          .byte 255,1,4,255,0,10,1,255,0,6,255,1,5,255,0,10,1,255,0,6,255,1,5,255,0,10,1,255,0,6,255,1,9
002DD5r 3  00 0A 01 FF  
002DD9r 3  00 06 FF 01  
002DF2r 3  02 02 FF 01          .byte 2,2,255,1,9,2,2,1,1,255,0,7,2,2,255,0,8,1,2,2,1,1,255,0,7,2,2,255,0,8,1,2,2
002DF6r 3  09 02 02 01  
002DFAr 3  01 FF 00 07  
002E13r 3  FF 01 04 02          .byte 255,1,4,2,2,255,1,8,2,2,255,1,4,2,2,1,1,0,0,2,2,255,0,8,2,2,255,0,4,2,2,1,1
002E17r 3  02 FF 01 08  
002E1Br 3  02 02 FF 01  
002E34r 3  00 00 02 02          .byte 0,0,2,2,255,0,8,2,2,255,0,4,2,2,255,1,8,2,2,255,1,14,255,0,6,2,2,255,0,12,1,1,255,0,6
002E38r 3  FF 00 08 02  
002E3Cr 3  02 FF 00 04  
002E57r 3  02 02 FF 00          .byte 2,2,255,0,12,255,1,5,2,2,255,1,9,2,2,255,1,6,0,0,0,2,2,255,0,9,2,2,255,0,4,1,1
002E5Br 3  0C FF 01 05  
002E5Fr 3  02 02 FF 01  
002E78r 3  00 00 00 02          .byte 0,0,0,2,2,255,0,9,2,2,255,0,4,1,1,2,2,255,1,16,2,2,1,1,2,2,255,0,16,2,2,1,1
002E7Cr 3  02 FF 00 09  
002E80r 3  02 02 FF 00  
002E99r 3  02 02 FF 00          .byte 2,2,255,0,16,2,2,255,1,6,2,2,255,1,8,2,2,255,1,6,255,0,4,2,2,255,0,4,1,0,0,0,2,2
002E9Dr 3  10 02 02 FF  
002EA1r 3  01 06 02 02  
002EBBr 3  FF 00 04 01          .byte 255,0,4,1,1,255,0,4,2,2,255,0,4,1,0,0,0,2,2,255,0,4,255,1,23
002EBFr 3  01 FF 00 04  
002EC3r 3  02 02 FF 00  
002ED4r 3  FF 01 0B FF          .byte 255,1,11,255,0,20,1,1,255,0,20,1,1,255,0,20,255,1,12,2,2,1,2,2,255,1,7,255,0,10,2,2,1
002ED8r 3  00 14 01 01  
002EDCr 3  FF 00 14 01  
002EF5r 3  02 02 FF 00          .byte 2,2,255,0,5,1,1,255,0,10,2,2,1,2,2,255,0,5,255,1,6,2,2,255,1,10,2,2,255,1,4,255,0,4
002EF9r 3  05 01 01 FF  
002EFDr 3  00 0A 02 02  
002F17r 3  02 02 FF 00          .byte 2,2,255,0,10,2,2,0,0,1,1,255,0,4,2,2,255,0,10,2,2,0,0,255,1,15,2,2,255,1,7,255,0,6
002F1Br 3  0A 02 02 00  
002F1Fr 3  00 01 01 FF  
002F39r 3  01 FF 00 06          .byte 1,255,0,6,2,2,255,0,5,1,1,255,0,6,1,255,0,6,2,2,255,0,5,255,1,6,2,2,1,1,2,2,255,1,8
002F3Dr 3  02 02 FF 00  
002F41r 3  05 01 01 FF  
002F5Cr 3  02 02 01 01          .byte 2,2,1,1,255,0,4,2,2,0,0,2,2,255,0,8,2,2,1,1,255,0,4,2,2,0,0,2,2,255,0,8,2,2
002F60r 3  FF 00 04 02  
002F64r 3  02 00 00 02  
002F7Er 3  01 01 02 02          .byte 1,1,2,2,255,1,11,2,2,255,1,7,2,2,255,0,11,2,2,1,255,0,4,1,1,2,2,255,0,11,2,2,1
002F82r 3  FF 01 0B 02  
002F86r 3  02 FF 01 07  
002F9Fr 3  FF 00 04 FF          .byte 255,0,4,255,1,5,2,2,255,1,11,2,2,255,1,4,0,0,0,2,2,255,0,11,2,2,0,0,1,1,0,0,0
002FA3r 3  01 05 02 02  
002FA7r 3  FF 01 0B 02  
002FC0r 3  02 02 FF 00          .byte 2,2,255,0,11,2,2,0,0,255,1,13
002FC4r 3  0B 02 02 00  
002FC8r 3  00 FF 01 0D  
002FCCr 3               numsc:
002FCCr 3  04                   .byte 4
002FCDr 3               nmedat:
002FCDr 3  00 00 60 78          .byte 0,0,96,120,1,2,120,16,2,3,144,16,2,3,48,80,2,3,72,152,2,3,24,16,255
002FD1r 3  01 02 78 10  
002FD5r 3  02 03 90 10  
002FE6r 3  00 00 48 40          .byte 0,0,72,64,1,2,120,16,1,2,24,16,2,3,24,80,2,3,48,112,2,3,72,128,2,3,120,88,255
002FEAr 3  01 02 78 10  
002FEEr 3  01 02 18 10  
003003r 3  00 00 38 88          .byte 0,0,56,136,1,2,32,56,1,2,104,64,2,3,8,40,2,3,8,128,2,3,80,152,2,3,124,88,2,3,152,16,2,3,152,160,255
003007r 3  01 02 20 38  
00300Br 3  01 02 68 40  
003028r 3  00 00 98 10          .byte 0,0,152,16,1,2,8,104,1,2,56,80,1,2,104,112,2,3,8,16,2,3,80,16,2,3,124,160,2,3,8,152,2,3,56,24,255
00302Cr 3  01 02 08 68  
003030r 3  01 02 38 50  
00304Dr 3               NUMOBJ = 1
00304Dr 3               objdta:
00304Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,254,56,120,254,56,120
003051r 3  00 00 00 00  
003055r 3  00 00 00 00  
003074r 3               font:
003074r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
003078r 3  00 00 00 00  
00307Cr 3  00 30 30 30          .byte 0,48,48,48,48,0,48,0
003080r 3  30 00 30 00  
003084r 3  00 6C 6C 00          .byte 0,108,108,0,0,0,0,0
003088r 3  00 00 00 00  
00308Cr 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
003090r 3  6C FE 6C 00  
003094r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
003098r 3  7E 1E 7E 18  
00309Cr 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
0030A0r 3  30 6E CE 00  
0030A4r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
0030A8r 3  7E CC 7E 00  
0030ACr 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
0030B0r 3  00 00 00 00  
0030B4r 3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
0030B8r 3  18 18 0C 00  
0030BCr 3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
0030C0r 3  30 30 60 00  
0030C4r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
0030C8r 3  7E 18 3C 00  
0030CCr 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
0030D0r 3  7E 18 18 00  
0030D4r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
0030D8r 3  00 18 18 30  
0030DCr 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
0030E0r 3  7E 00 00 00  
0030E4r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
0030E8r 3  00 38 38 00  
0030ECr 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
0030F0r 3  18 30 60 00  
0030F4r 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
0030F8r 3  F6 E6 7C 00  
0030FCr 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
003100r 3  18 18 7E 00  
003104r 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
003108r 3  7C C0 FE 00  
00310Cr 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
003110r 3  06 C6 7C 00  
003114r 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
003118r 3  D8 FE 18 00  
00311Cr 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
003120r 3  06 C6 7C 00  
003124r 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
003128r 3  C6 C6 7C 00  
00312Cr 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
003130r 3  18 30 30 00  
003134r 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
003138r 3  C6 C6 7C 00  
00313Cr 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
003140r 3  7E 06 7C 00  
003144r 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
003148r 3  00 00 30 00  
00314Cr 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
003150r 3  00 30 30 60  
003154r 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
003158r 3  30 18 0C 00  
00315Cr 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
003160r 3  00 7E 00 00  
003164r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
003168r 3  0C 18 30 00  
00316Cr 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
003170r 3  18 00 18 00  
003174r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
003178r 3  FE C0 7C 00  
00317Cr 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
003180r 3  FE C6 C6 00  
003184r 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
003188r 3  C6 C6 FC 00  
00318Cr 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
003190r 3  C0 C6 7C 00  
003194r 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
003198r 3  C6 CC F8 00  
00319Cr 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
0031A0r 3  C0 C0 FE 00  
0031A4r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
0031A8r 3  C0 C0 C0 00  
0031ACr 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
0031B0r 3  DE C6 7C 00  
0031B4r 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
0031B8r 3  C6 C6 C6 00  
0031BCr 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
0031C0r 3  18 18 7E 00  
0031C4r 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
0031C8r 3  C6 C6 7C 00  
0031CCr 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
0031D0r 3  D8 CC C6 00  
0031D4r 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
0031D8r 3  C0 C0 FE 00  
0031DCr 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
0031E0r 3  C6 C6 C6 00  
0031E4r 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
0031E8r 3  DE CE C6 00  
0031ECr 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
0031F0r 3  C6 C6 7C 00  
0031F4r 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
0031F8r 3  FC C0 C0 00  
0031FCr 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
003200r 3  F6 DE 7C 00  
003204r 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
003208r 3  FC CC C6 00  
00320Cr 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
003210r 3  06 C6 7C 00  
003214r 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
003218r 3  30 30 30 00  
00321Cr 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
003220r 3  C6 C6 7C 00  
003224r 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
003228r 3  C6 6C 38 00  
00322Cr 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
003230r 3  C6 FE 6C 00  
003234r 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
003238r 3  38 6C C6 00  
00323Cr 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
003240r 3  30 30 30 00  
003244r 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
003248r 3  30 60 FE 00  
00324Cr 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
003250r 3  18 18 1E 00  
003254r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
003258r 3  30 18 0C 00  
00325Cr 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
003260r 3  30 30 F0 00  
003264r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
003268r 3  30 30 30 00  
00326Cr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
003270r 3  00 00 00 FF  
003274r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
003278r 3  60 60 FE 00  
00327Cr 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
003280r 3  7C CC 7C 00  
003284r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
003288r 3  66 66 7C 00  
00328Cr 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
003290r 3  60 60 3C 00  
003294r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
003298r 3  CC CC 7C 00  
00329Cr 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
0032A0r 3  F8 C0 7C 00  
0032A4r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
0032A8r 3  30 30 30 00  
0032ACr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
0032B0r 3  CC 7C 0C 78  
0032B4r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
0032B8r 3  CC CC CC 00  
0032BCr 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
0032C0r 3  30 30 78 00  
0032C4r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
0032C8r 3  0C 0C 6C 38  
0032CCr 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
0032D0r 3  70 78 6C 00  
0032D4r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
0032D8r 3  30 30 1C 00  
0032DCr 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
0032E0r 3  FC FC FC 00  
0032E4r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
0032E8r 3  CC CC CC 00  
0032ECr 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
0032F0r 3  CC CC 78 00  
0032F4r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
0032F8r 3  CC F8 C0 C0  
0032FCr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
003300r 3  CC 7C 0C 0E  
003304r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
003308r 3  60 60 60 00  
00330Cr 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
003310r 3  78 0C F8 00  
003314r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
003318r 3  30 30 1C 00  
00331Cr 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
003320r 3  CC CC 78 00  
003324r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
003328r 3  78 78 30 00  
00332Cr 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
003330r 3  FC FC 78 00  
003334r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
003338r 3  30 78 CC 00  
00333Cr 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
003340r 3  CC 7C 0C 78  
003344r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
003348r 3  30 60 FC 00  
00334Cr 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
003350r 3  18 18 1E 00  
003354r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
003358r 3  18 18 18 00  
00335Cr 3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
003360r 3  30 30 F0 00  
003364r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
003368r 3  00 00 00 00  
00336Cr 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
003370r 3  E3 BB C6 7C  
003374r 3               jtab:
003374r 3  63                   .byte 99
003375r 3  65 14 51 10  keys:   .byte 101,20,81,16,48,68,52,112,0,113,1
003379r 3  30 44 34 70  
00337Dr 3  00 71 01     
003380r 3               
003380r 2               
003380r 1               	.include "lib.inc"
003380r 2               ;----------------------------------------------------------------------
003380r 2               ; VIC20 Platform Specific functions
003380r 2               ;----------------------------------------------------------------------
003380r 2               
003380r 2               ;============================================================
003380r 2               ; PLATFORM VARIABLES
003380r 2               ;============================================================
003380r 2               ;
003380r 2               ; Memory map:
003380r 2               ;
003380r 2               ;	$0000-$01ff	 0.5kB	CPU WS
003380r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
003380r 2               ;	$0400-$0fff	 3,0kB	RAM
003380r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
003380r 2               ;	$2000-$7fff	24,0kB	RAM
003380r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
003380r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
003380r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
003380r 2               ;	$9800-$9fff	 2,0kB	I/O
003380r 2               ;	$a000-$bfff	 8,0kB	RAM
003380r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
003380r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
003380r 2               ;
003380r 2               ; Keyboard matrix:
003380r 2               ;                          	  $9121
003380r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
003380r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
003380r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
003380r 2               ;                 VIC   07  06  05  04  03  02  01  00
003380r 2               ;
003380r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
003380r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
003380r 2               ;                 VIC   17  16  15  14  13  12  11  10
003380r 2               ;
003380r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
003380r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
003380r 2               ;                 VIC   27  26  25  24  23  22  21  20
003380r 2               ;
003380r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
003380r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
003380r 2               ;                 VIC   37  36  35  34  33  32  31  30
003380r 2               ;
003380r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
003380r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
003380r 2               ;                 VIC   47  46  45  44  43  42  41  40
003380r 2               ;
003380r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
003380r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
003380r 2               ;                 VIC   57  56  55  54  53  52  51  50
003380r 2               ;
003380r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
003380r 2               ;               ASCII   13  42  80  73  89  82  87
003380r 2               ;                 VIC   67  66  65  64  63  62  61  60
003380r 2               ;
003380r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
003380r 2               ;               ASCII   08  ??  43  57  55  53  51  49
003380r 2               ;                 VIC   77  76  75  74  73  72  71  70
003380r 2               ;
003380r 2               ;	 P =$65,O=$14,A=$51,Q=$10
003380r 2               ;	SPC=$30,N=$44,M=$34
003380r 2               ;	 1 =$70,2=$00,3=$71,4=$01
003380r 2               ;
003380r 2               ; Joysticks:
003380r 2               ;
003380r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
003380r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
003380r 2               ;	$9120	Right -     -     -     -     -     -     -
003380r 2               ;
003380r 2               ;	$9122	DDRB = Data Direction Register port $9120
003380r 2               ;               0 = input, 1 = output
003380r 2               ;		Bit7 should be 0 to read joystick $9120
003380r 2               ;
003380r 2               ; Video registers:
003380r 2               ;
003380r 2               ;	$9000	horizontal centering
003380r 2               ;		bits 0-6 horizontal centering
003380r 2               ;		bit  7 sets interlace scan
003380r 2               ;	$9001	vertical centering
003380r 2               ;	$9002	set # of columns
003380r 2               ;		bits 0-6 set # of columns
003380r 2               ;		bit 7 is part of video matrix address
003380r 2               ;	$9003	set # of rows
003380r 2               ;		bit 0 sets 8x8 or 16x8 chars
003380r 2               ;		bits 1-6 set # of rows
003380r 2               ;	$9005	start of character memory
003380r 2               ;		bits 0-3 start of character memory (default = 0)
003380r 2               ;		bits 4-7 is rest of video address (default= F)
003380r 2               ;		BITS 3,2,1,0 CM startinq address
003380r 2               ;			     HEX   DEC
003380r 2               ;		0000   ROM   8000  32768
003380r 2               ;		0001	     8400  33792
003380r 2               ;		0010	     8800  34816
003380r 2               ;		0011	     8C00  35840
003380r 2               ;		1000   RAM   0000  0000
003380r 2               ;		1001  xxxx
003380r 2               ;		1010  xxxx   unavail.
003380r 2               ;		1011  xxxx
003380r 2               ;		1100	     1000  4096
003380r 2               ;		1101	     1400  5120
003380r 2               ;		1110	     1800  6144
003380r 2               ;		1111	     1C00  7168
003380r 2               ;	$900f	Screen and border color register
003380r 2               ;		bits 4-7 select background color
003380r 2               ;		bits 0-2 select border color
003380r 2               ;		bit 3 selects inverted or normal mode
003380r 2               ;
003380r 2               ; $9110-$911F 6522 VIA#1
003380r 2               ; $9120-$912F 6522 VIA#2
003380r 2               ;
003380r 2               ;	$9110,$9120 	Port B output register
003380r 2               ;	$9111,$9121 	Port A output register
003380r 2               ;			(PA0) Bit 0=Serial CLK IN
003380r 2               ;			(PA1) Bit 1=Serial DATA IN
003380r 2               ;			(PA2) Bit 2=Joy 0
003380r 2               ;			(PA3) Bit 3=Joy 1
003380r 2               ;			(PA4) Bit 4=Joy 2
003380r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
003380r 2               ;			(PA6) Bit 6=Cassette switch sense
003380r 2               ;			(PA7) Bit 7=Serial ATN out
003380r 2               ;	$9112,$9122	Data direction register B
003380r 2               ;	$9113,$9123	Data direction register A
003380r 2               ;	$9114,$9124	Timer 1 low byte
003380r 2               ;	$9115,$9125	Timer 1 high byte & counter
003380r 2               ;	$9116,$9126	Timer 1 low byte
003380r 2               ;	$9117,$9127	Timer 1 high byte
003380r 2               ;	$9118,$9128	Timer 2 low byte
003380r 2               ;	$9119,$9129	Timer 2 high byte
003380r 2               ;	$911A,$912A	Shift register
003380r 2               ;	$911B,$912B	Auxiliary control register
003380r 2               ;	$911C,$912C	Peripheral control register
003380r 2               ;			(CA1, CA2, CB1, CB2)
003380r 2               ;			CA1 = restore key (Bit 0)
003380r 2               ;			CA2 = cassette motor control (Bits 1-3)
003380r 2               ;			CB1 = interrupt signal for received
003380r 2               ;			RS-232 data (Bit 4)
003380r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
003380r 2               ;	$911D,$912D	Interrupt flag register
003380r 2               ;	$911E,$912E	Interrupt enable register
003380r 2               ;	$911F,$912F	Port A (Sense cassette switch)
003380r 2               
003380r 2               ; VIC constants
003380r 2               
003380r 2               ;	scrchar 	= 22				; char/line
003380r 2               ;	scrline		= 22				; lines/screen
003380r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
003380r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
003380r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
003380r 2               
003380r 2               ; VIC variables:
003380r 2               
003380r 2  00           	fontcol:	.byte 0		; Frontcolour text
003381r 2               
003381r 2               ; Addresses
003381r 2               
003381r 2               	MapAddr		= $400		; RAM
003381r 2               	ScreenAddr	= $0200		; VIDEO RAM
003381r 2               	CharAddress	= $1000		; CHAR RAM
003381r 2               	Reg0		= $9000		; Horizontal centering
003381r 2               	Reg1		= $9001		; Vertical centering
003381r 2               	Reg2		= $9002		; Set # of columns
003381r 2               	Reg3		= $9003		; Set # of rows
003381r 2               	Reg4		= $9004		; Vsync signal
003381r 2               	Reg5		= $9005		; Start of character memory
003381r 2               	RegE		= $900e		; Colour and auxcolour register
003381r 2               	RegF		= $900f		; Screen and border color register
003381r 2               
003381r 2               	JoyAddr1	= $9111		; Joystick address 1
003381r 2               	Timer11_Low  	= $9114		; Timer 1 low byte
003381r 2               	Timer11_High 	= $9115		; Timer 1 high byte
003381r 2               	Timer12_Low  	= $9118		; Timer 2 low byte
003381r 2               	Timer12_High 	= $9119		; Timer 2 high byte
003381r 2               	AUX1		= $911b		; Auxiliary control register
003381r 2               	IFR1		= $911d		; Interrupt Flag Register
003381r 2               	IER1		= $911e		; Interrupt Enable Register
003381r 2               
003381r 2               	KeyColAddr	= $9120		; Keyboard column (write)
003381r 2               	JoyAddr2	= $9120		; Joystick address 2
003381r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
003381r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
003381r 2               	Timer21_Low  	= $9124		; Timer 1 low byte
003381r 2               	Timer21_High 	= $9125		; Timer 1 high byte
003381r 2               	AUX2		= $912b		; Auxiliary control register
003381r 2               	IFR2		= $912d		; Interrupt Flag Register
003381r 2               	IER2		= $912e		; Interrupt Enable Register
003381r 2               
003381r 2               	ColorAttr	= $9600		; Color attributes
003381r 2               	HiRAM		= $a000		; Hi RAM 8kB
003381r 2               
003381r 2               ;----------------------------------------------------------------------
003381r 2               ; VIC20 video hardware fns
003381r 2               ;----------------------------------------------------------------------
003381r 2               
003381r 2               init:
003381r 2               
003381r 2               ; Disable interrupts
003381r 2               
003381r 2  A9 7F        	lda #$7f
003383r 2  8D 1E 91     	sta $911e
003386r 2  8D 2D 91     	sta $912d
003389r 2  8D 2E 91     	sta $912e
00338Cr 2               
00338Cr 2               ; Set audio volume to max
00338Cr 2  A9 0F        	lda #$0f
00338Er 2  8D 0E 90     	sta $900e
003391r 2               
003391r 2               ; Init screen for NTSC
003391r 2               ; this sets the background and border color of the screen
003391r 2               ; in this case border black and background black
003391r 2               
003391r 2  A9 18        	lda #%00011000
003393r 2  8D 0F 90     	sta RegF
003396r 2               
003396r 2               ; Reset fontcolor
003396r 2  A9 00        	lda #0		; Black
003398r 2  8D rr rr     	sta fontcol
00339Br 2               
00339Br 2               
00339Br 2               ; max num of columns 22
00339Br 2               
00339Br 2  AD 02 90     	lda Reg2
00339Er 2  29 80        	and #%10000000
0033A0r 2  09 16        	ora #ScrWidth
0033A2r 2  8D 02 90     	sta Reg2
0033A5r 2               
0033A5r 2               ; max num of lines (mult by 2 - 22) for 8x8 chars
0033A5r 2               ; no multiply for 8x16 chars
0033A5r 2               
0033A5r 2  AD 03 90     	lda Reg3
0033A8r 2  29 81        	and #%10000001
0033AAr 2  09 16        	ora #ScrWidth		; number of rows multipled by two
0033ACr 2  8D 03 90     	sta Reg3
0033AFr 2               
0033AFr 2               ; horizontal and vertical position must be set for
0033AFr 2               ; non standard screen resolution (standard 22x23)
0033AFr 2               ; same games even allow the user to change them
0033AFr 2               ; these values are for PAL for NTSC should be different
0033AFr 2               ; move horizontal position in the screen
0033AFr 2               
0033AFr 2  AD 00 90     	lda Reg0
0033B2r 2  29 80        	and #%10000000
0033B4r 2  09 04        	ora #CentreX
0033B6r 2  8D 00 90     	sta Reg0
0033B9r 2               
0033B9r 2               ; move vertical position in the screen
0033B9r 2               
0033B9r 2  A9 1B        	lda #CentreY
0033BBr 2  8D 01 90     	sta Reg1
0033BEr 2               
0033BEr 2               ; Set screem memory to $200
0033BEr 2               ; bit 7 on $9002 has to be set
0033BEr 2               
0033BEr 2  AD 02 90     	lda Reg2
0033C1r 2  09 80        	ora #%10000000
0033C3r 2  8D 02 90     	sta Reg2
0033C6r 2               
0033C6r 2               ; Set character data pointer to CHAR RAM at $1000
0033C6r 2               ; bit 7 on $9005 has always to be set
0033C6r 2               ; (based on compute - mapping the vic book)
0033C6r 2               ; color ram goes to 9600
0033C6r 2               
0033C6r 2  AD 05 90     	lda Reg5
0033C9r 2  29 0C        	and #%00001100
0033CBr 2  09 8C        	ora #%10001100
0033CDr 2  8D 05 90     	sta Reg5
0033D0r 2               
0033D0r 2               ; This set the char size to 8x16
0033D0r 2               
0033D0r 2  AD 03 90     	lda Reg3
0033D3r 2  09 01        	ora #%00000001
0033D5r 2  8D 03 90     	sta Reg3
0033D8r 2               
0033D8r 2               ; Init screencharacters
0033D8r 2               ; Fill screen with characters from left to right, up to down
0033D8r 2               
0033D8r 2  A2 00        	ldx #0
0033DAr 2  A0 00        	ldy #0
0033DCr 2               scrinit:
0033DCr 2  8A           	txa
0033DDr 2  9D 00 02     	sta ScreenAddr,x
0033E0r 2  98           	tya
0033E1r 2  9D 00 96     	sta ColorAttr,x
0033E4r 2  E8           	inx
0033E5r 2  E0 F2        	cpx#242
0033E7r 2  D0 F3        	bne scrinit
0033E9r 2               
0033E9r 2               ; Reset fontcolor
0033E9r 2               
0033E9r 2  A9 00        	lda #0			; Black
0033EBr 2  8D rr rr     	sta fontcol
0033EEr 2               
0033EEr 2               ; Init music
0033EEr 2               
0033EEr 2               ;	jsr initmusic
0033EEr 2               
0033EEr 2               ; Init VIA1 timer11 for timeout 1/25 sec
0033EEr 2               
0033EEr 2  A9 E0        	lda #$e0		; T1 continuous
0033F0r 2  8D 1B 91     	sta AUX1
0033F3r 2  A9 7F        	lda #$7f		; No int
0033F5r 2  8D 1E 91     	sta IER1
0033F8r 2  A9 00        	lda #0
0033FAr 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
0033FDr 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
0033FFr 2  8D 14 91     	sta Timer11_Low
003402r 2  A9 4E        	lda #>timervalue
003404r 2  8D 15 91     	sta Timer11_High
003407r 2               
003407r 2               ; Pre-shifted byte tables if parameter 'r' given
003407r 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
003407r 2               ; The bits are shifted to the right and overflow bits are
003407r 2               ; inserted to the left. So 1 byte contains a left and right part
003407r 2               
003407r 2               .if rflag
003407r 2               shift0 = HiRAM
003407r 2               shift2 = HiRAM+256
003407r 2               shift4 = HiRAM+512
003407r 2               shift6 = HiRAM+768
003407r 2               
003407r 2               ; Pre-shifted table 0 pixels
003407r 2               
003407r 2               	ldx #0
003407r 2               shf0:
003407r 2               	txa
003407r 2               	sta shift0,x
003407r 2               	inx
003407r 2               	bne shf0
003407r 2               
003407r 2               ; Pre-shifted table 2 pixels
003407r 2               
003407r 2               	ldx #0
003407r 2               shf2:
003407r 2               	ldy #2
003407r 2               	txa
003407r 2               shf2loop:
003407r 2               	lsr a
003407r 2               	bcc :+
003407r 2               	ora #$80
003407r 2               :
003407r 2               	dey
003407r 2               	bne shf2loop
003407r 2               	sta shift2,x
003407r 2               	inx
003407r 2               	bne shf2
003407r 2               
003407r 2               ; Pre-shifted table 4 pixels
003407r 2               
003407r 2               	ldx #0
003407r 2               shf4:
003407r 2               	ldy #4
003407r 2               	txa
003407r 2               shf4loop:
003407r 2               	lsr a
003407r 2               	bcc :+
003407r 2               	ora #$80
003407r 2               :
003407r 2               	dey
003407r 2               	bne shf4loop
003407r 2               	sta shift4,x
003407r 2               	inx
003407r 2               	bne shf4
003407r 2               
003407r 2               ; Pre-shifted table 6 pixels
003407r 2               
003407r 2               	ldx #0
003407r 2               shf6:
003407r 2               	ldy #6
003407r 2               	txa
003407r 2               shf6loop:
003407r 2               	lsr a
003407r 2               	bcc :+
003407r 2               	ora #$80
003407r 2               :
003407r 2               	dey
003407r 2               	bne shf6loop
003407r 2               	sta shift6,x
003407r 2               	inx
003407r 2               	bne shf6
003407r 2               .endif
003407r 2               
003407r 2  60           	rts
003408r 2               
003408r 2               ;========================================================
003408r 2               ; KEY AND JOYSTICK ROUTINES
003408r 2               ;--------------------------------------------------------
003408r 2               ; Keys
003408r 2               ;
003408r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003408r 2               ;             ||||||||
003408r 2               ;             |||||||+> Right    KEY 0  - X
003408r 2               ;             ||||||+-> Left     KEY 1  - Z
003408r 2               ;             |||||+--> Down     KEY 2  - .
003408r 2               ;             ||||+---> Up       KEY 3  - ;
003408r 2               ;             |||+----> Fire1    KEY 4  - SPC
003408r 2               ;             ||+-----> Fire2    KEY 5  - Q
003408r 2               ;             |+------> Fire3    KEY 6  - P
003408r 2               ;             +-------> Not used
003408r 2               ;
003408r 2               ;                       Option1  KEY 7  - 1
003408r 2               ;                       Option2  KEY 8  - 2
003408r 2               ;                       Option3  KEY 9  - 3
003408r 2               ;                       Option4  KEY 10 - 4
003408r 2               ;--------------------------------------------------------
003408r 2               
003408r 2               ;----------------------------------------------------
003408r 2               ; Interrupt service
003408r 2               ;----------------------------------------------------
003408r 2               
003408r 2               intserv:
003408r 2  EE 01 96     	inc $9601	; scroll colour char topleft
00340Br 2  68           	pla
00340Cr 2  A8           	tay
00340Dr 2  68           	pla
00340Er 2  AA           	tax
00340Fr 2  68           	pla
003410r 2  40           	rti
003411r 2               
003411r 2               ;--------------------------------------------------------
003411r 2               ; PRSKEY
003411r 2               ;
003411r 2               ; Wait for keypress.
003411r 2               ;--------------------------------------------------------
003411r 2               
003411r 2               prskey:
003411r 2  98           	tya
003412r 2  48           	pha
003413r 2               prsloop:
003413r 2  20 rr rr     	jsr vsync
003416r 2  20 rr rr     	jsr readkey
003419r 2  C0 FF        	cpy #255
00341Br 2  F0 F6        	beq prsloop		; wait until key pressed
00341Dr 2               
00341Dr 2               prsrelease:
00341Dr 2  20 rr rr     	jsr vsync
003420r 2  20 rr rr     	jsr readkey
003423r 2  C0 FF        	cpy #255
003425r 2  D0 F6        	bne prsrelease		; wait until key released
003427r 2               
003427r 2  20 rr rr     	jsr joykey
00342Ar 2               
00342Ar 2  68           	pla
00342Br 2  A8           	tay
00342Cr 2  60           	rts
00342Dr 2               
00342Dr 2               ;--------------------------------------------------------
00342Dr 2               ; KTEST
00342Dr 2               ;
00342Dr 2               ; Keyboard test routine with key in A.
00342Dr 2               ; Scan key and clear carry if key pressed
00342Dr 2               ;--------------------------------------------------------
00342Dr 2               
00342Dr 2               ktest:
00342Dr 2  85 rr        	sta z80_a		; save key
00342Fr 2               
00342Fr 2  4A           	lsr a
003430r 2  4A           	lsr a
003431r 2  4A           	lsr a
003432r 2  4A           	lsr a
003433r 2  AA           	tax
003434r 2  BD rr rr     	lda colmask,x
003437r 2  8D 20 91     	sta KeyColAddr		; set row
00343Ar 2               
00343Ar 2  A5 rr        	lda z80_a
00343Cr 2  29 0F        	and #$0f
00343Er 2  AA           	tax			; get column
00343Fr 2               
00343Fr 2  AD 21 91     	lda KeyRowAddr		; read column
003442r 2  3D rr rr     	and keymask,x		; check if key pressed
003445r 2  F0 02        	beq pressed		; Skip if pressed
003447r 2  38           	sec			; key not pressed
003448r 2  60           	rts
003449r 2               pressed:
003449r 2  18           	clc			; key pressed
00344Ar 2  60           	rts
00344Br 2               
00344Br 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
00344Fr 2  F7 FB FD FE  
003453r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
003457r 2  10 20 40 80  
00345Br 2               
00345Br 2               ;---------------------------------------------------------------
00345Br 2               ; KGET
00345Br 2               ;
00345Br 2               ; Read keyboard matrix if a key is pressed.
00345Br 2               ; Return A = high nibble=row and low nibble=col
00345Br 2               ;---------------------------------------------------------------
00345Br 2               
00345Br 2               kget:
00345Br 2  86 rr        	stx xtmp		; Save x-reg
00345Dr 2               kget0:
00345Dr 2  A2 00        	ldx #0			; reset row
00345Fr 2               kget1:
00345Fr 2  BD rr rr     	lda colmask,x		; Get mask
003462r 2  8D 20 91     	sta KeyColAddr		; Set row
003465r 2  AD 21 91     	lda KeyRowAddr		; Read columns
003468r 2  85 rr        	sta tmp			; Save colums
00346Ar 2  C9 FF        	cmp #$ff		; Key pressed?
00346Cr 2  D0 08        	bne kget2		; Yes, skip
00346Er 2  E8           	inx			; Next row
00346Fr 2  E0 08        	cpx #8			; All rows scanned?
003471r 2  D0 EC        	bne kget1		; No, repeat
003473r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
003476r 2               kget2:
003476r 2  A0 00        	ldy #0			; Reset column
003478r 2               kget3:
003478r 2  46 rr        	lsr tmp			; Test bit
00347Ar 2  90 04        	bcc kget4		; If clear, key pressed
00347Cr 2  C8           	iny			; Next column
00347Dr 2  4C rr rr     	jmp kget3		; Repeat
003480r 2               kget4:
003480r 2  86 rr        	stx tmp			; Get row
003482r 2  06 rr        	asl tmp			; Make high nibble
003484r 2  06 rr        	asl tmp
003486r 2  06 rr        	asl tmp
003488r 2  06 rr        	asl tmp
00348Ar 2  98           	tya			; Get column
00348Br 2  18           	clc
00348Cr 2  65 rr        	adc tmp			; Add row as low nibble
00348Er 2  85 rr        	sta tmp
003490r 2               kget5:
003490r 2  AD 21 91     	lda KeyRowAddr		; Read columns
003493r 2  C9 FF        	cmp #$ff
003495r 2  D0 F9        	bne kget5
003497r 2               
003497r 2  A5 rr        	lda tmp			; Return keycode
003499r 2  A6 rr        	ldx xtmp		; Restore X-reg
00349Br 2  60           	rts			; Return
00349Cr 2               
00349Cr 2               ;-------------------------------------------------------------
00349Cr 2               ; READKEY
00349Cr 2               ;
00349Cr 2               ; Check keyboard matrix if a key is pressed
00349Cr 2               ; Return keymask in Y
00349Cr 2               ;-------------------------------------------------------------
00349Cr 2               
00349Cr 2               readkey:
00349Cr 2  A9 FF        	lda #$ff		; Keymask
00349Er 2  85 rr        	sta tmp
0034A0r 2  A2 07        	ldx #7
0034A2r 2               scanrow:
0034A2r 2  BD rr rr     	lda colmask,x
0034A5r 2  8D 20 91     	sta KeyColAddr		; set row
0034A8r 2  AD 21 91     	lda KeyRowAddr		; read column
0034ABr 2  25 rr        	and tmp			; Reset bit is key pressed
0034ADr 2  85 rr        	sta tmp
0034AFr 2  CA           	dex
0034B0r 2  10 F0        	bpl scanrow
0034B2r 2  A5 rr        	lda tmp
0034B4r 2  A8           	tay
0034B5r 2  60           	rts
0034B6r 2               
0034B6r 2               ;-------------------------------------------------------------
0034B6r 2               ; JOY1SCAN
0034B6r 2               ;
0034B6r 2               ; Initializes joystick
0034B6r 2               ;-------------------------------------------------------------
0034B6r 2               
0034B6r 2               joyinit:
0034B6r 2  60           	rts
0034B7r 2               
0034B7r 2               ;-------------------------------------------------------------
0034B7r 2               ; JOY1SCAN
0034B7r 2               ;
0034B7r 2               ; Scan joystick1 and return key in z80_e
0034B7r 2               ; Up, down, left, right and fire are read from the joystick
0034B7r 2               ; Fire2 and fire3 are read from the keyboard
0034B7r 2               ;-------------------------------------------------------------
0034B7r 2               
0034B7r 2               joy1scan:
0034B7r 2  A9 FF        	lda #$ff
0034B9r 2  85 rr        	sta z80_e
0034BBr 2               
0034BBr 2  AD 11 91     	lda JoyAddr1		; Read joystick input
0034BEr 2  4A           	lsr a
0034BFr 2  4A           	lsr a
0034C0r 2               
0034C0r 2  4A           	lsr a
0034C1r 2  26 rr        	rol z80_e		; Up
0034C3r 2  4A           	lsr a
0034C4r 2  26 rr        	rol z80_e		; Down
0034C6r 2  4A           	lsr a
0034C7r 2  26 rr        	rol z80_e		; Left
0034C9r 2               
0034C9r 2  A9 7F        	lda #%01111111
0034CBr 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
0034CEr 2  AD 20 91     	lda JoyAddr2
0034D1r 2  0A           	asl a
0034D2r 2  26 rr        	rol z80_e		; Right
0034D4r 2  A9 FF        	lda #%11111111
0034D6r 2  8D 22 91     	sta DDRB		; Reset
0034D9r 2               
0034D9r 2  AD 11 91     	lda JoyAddr1
0034DCr 2  29 20        	and #%00100000
0034DEr 2  D0 06        	bne :+
0034E0r 2  A5 rr        	lda z80_e
0034E2r 2  29 EF        	and #%11101111		; Fire
0034E4r 2  85 rr        	sta z80_e
0034E6r 2               :
0034E6r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
0034E9r 2  20 rr rr     	jsr ktest
0034ECr 2  B0 06        	bcs :+
0034EEr 2  A5 rr        	lda z80_e
0034F0r 2  29 BF        	and #%10111111
0034F2r 2  85 rr        	sta z80_e
0034F4r 2               :
0034F4r 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
0034F7r 2  20 rr rr     	jsr ktest
0034FAr 2  B0 06        	bcs :+
0034FCr 2  A5 rr        	lda z80_e
0034FEr 2  29 DF        	and #%11011111
003500r 2  85 rr        	sta z80_e
003502r 2               :
003502r 2  60           	rts
003503r 2               
003503r 2               ;-------------------------------------------------------------
003503r 2               ; JOY2SCAN
003503r 2               ;
003503r 2               ; TODO, Scan joystick2 and return key in z80_e
003503r 2               ;-------------------------------------------------------------
003503r 2               
003503r 2               joy2scan:
003503r 2  60           	rts
003504r 2               
003504r 2               
003504r 2               
003504r 2               ;========================================================
003504r 2               ; HARDWARE DEPENDING ROUTINES
003504r 2               ;========================================================
003504r 2               
003504r 2               ;----------------------------------------------------
003504r 2               ; DELAY
003504r 2               ;
003504r 2               ; Delay routine A * 1/50 sec
003504r 2               ;----------------------------------------------------
003504r 2               
003504r 2               delay:
003504r 2  85 rr        	sta xtmp		; set delaycounter
003506r 2               del_loop:
003506r 2  AD 04 90     	lda Reg4
003509r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
00350Br 2               
00350Br 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
00350Dr 2               delay1:
00350Dr 2  61 80        	adc ($80,x)		;	 6 usec
00350Fr 2  61 80        	adc ($80,x)		;	 6 usec
003511r 2  88           	dey			;	 2 usec
003512r 2  D0 F9        	bne delay1		;	 2 usec
003514r 2  EA           	nop			; 2 usec
003515r 2  EA           	nop			; 2 usec
003516r 2               				; tot: 20000 usec
003516r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
003518r 2  D0 EC        	bne del_loop
00351Ar 2  60           	rts
00351Br 2               
00351Br 2               ;-------------------------------------------------------------
00351Br 2               ; VSYNC
00351Br 2               ;
00351Br 2               ; - read joystick/keyboard
00351Br 2               ; - sync framerate with timer 25Hz
00351Br 2               ; - handle shrapnel every even frame
00351Br 2               ; - handle sound
00351Br 2               ;-------------------------------------------------------------
00351Br 2               
00351Br 2               vsync:
00351Br 2  48           	pha			; save registers
00351Cr 2  98           	tya
00351Dr 2  48           	pha
00351Er 2  8A           	txa
00351Fr 2  48           	pha
003520r 2               
003520r 2               ; Read joystick/keyboard.
003520r 2               
003520r 2  20 rr rr     	jsr joykey
003523r 2               
003523r 2               ; Sync framerate with timer 25Hz
003523r 2               
003523r 2  A9 40        	lda #$40		; set Timer1 expired bit
003525r 2               vsync1:
003525r 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
003528r 2  F0 FB        	beq vsync1		; wait if timer not expired
00352Ar 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
00352Dr 2               
00352Dr 2               ; Handle shrapnel every even frame
00352Dr 2               
00352Dr 2  A5 rr        	lda clock		; get clock
00352Fr 2  29 01        	and #1			; 2 frames expired
003531r 2  D0 03        	bne:+
003533r 2  20 rr rr     	jsr proshr		; process shrapnel
003536r 2               :
003536r 2               
003536r 2               ; Handle sound
003536r 2               
003536r 2  AD rr rr         lda sndtyp
003539r 2  F0 33            beq sndskip
00353Br 2               
00353Br 2               sndloop:
00353Br 2  AC rr rr         ldy sndtyp
00353Er 2               sndwait:
00353Er 2  88               dey
00353Fr 2  D0 FD            bne sndwait
003541r 2               
003541r 2  AD rr rr         lda sndtyp
003544r 2  30 11            bmi crashaudio
003546r 2               
003546r 2               
003546r 2               beepaudio:
003546r 2                   ; enable sound on channel 2
003546r 2                   ; add 128 because sound is in range 128-255
003546r 2  4A               lsr
003547r 2  A9 FF            lda #$ff
003549r 2  38               sec
00354Ar 2  ED rr rr         sbc sndtyp
00354Dr 2  4A               lsr
00354Er 2  4A               lsr
00354Fr 2  09 C0            ora #%11000000
003551r 2  8D 0C 90         sta $900c
003554r 2               
003554r 2  4C rr rr         jmp endaudiotype
003557r 2               crashaudio:
003557r 2  A9 FF            lda #$ff
003559r 2  38               sec
00355Ar 2  ED rr rr         sbc sndtyp
00355Dr 2  09 80            ora #%10000000
00355Fr 2  8D 0D 90         sta $900d
003562r 2               
003562r 2               endaudiotype:
003562r 2               
003562r 2  CE rr rr         dec sndtyp
003565r 2  F0 07            beq sndskip
003567r 2  C9 80            cmp #128
003569r 2  F0 03            beq sndskip
00356Br 2  4C rr rr         jmp sndloop
00356Er 2               sndskip:
00356Er 2                   ; disable sound
00356Er 2  A9 00            lda #$00
003570r 2  8D 0C 90         sta $900c
003573r 2  8D 0D 90         sta $900d
003576r 2               
003576r 2  68               pla
003577r 2  AA               tax
003578r 2  68               pla
003579r 2  A8               tay
00357Ar 2  68               pla
00357Br 2  60               rts
00357Cr 2  00           sndtyp:		.byte 0		; Beep sound parameter
00357Dr 2               
00357Dr 2               
00357Dr 2               
00357Dr 2               
00357Dr 2               
00357Dr 2               
00357Dr 2               ;========================================================
00357Dr 2               ; SPRITE HANDLING ROUTINES
00357Dr 2               ;========================================================
00357Dr 2               
00357Dr 2               ;----------------------------------------------------
00357Dr 2               ; SPRITE
00357Dr 2               ;
00357Dr 2               ; Draw object sprite
00357Dr 2               ;----------------------------------------------------
00357Dr 2               
00357Dr 2               .if oflag
00357Dr 2               sprite:
00357Dr 2               	stx xtmp		; Save X-reg
00357Dr 2               	jsr scadd 		; get screen address in scraddr.
00357Dr 2               
00357Dr 2               	lda dispx 		; x position.
00357Dr 2               	and #7 			; position straddling cells.
00357Dr 2               	sta z80_b		; store in b register.
00357Dr 2               
00357Dr 2               	lda z80_l		; store sprite graphic address.
00357Dr 2               	sta sprit1+1
00357Dr 2               	sta sprit2+1
00357Dr 2               	lda z80_h
00357Dr 2               	sta sprit1+2
00357Dr 2               	sta sprit2+2
00357Dr 2               
00357Dr 2               	ldx #0			; pixel height.
00357Dr 2               	ldy #0
00357Dr 2               sprit1:
00357Dr 2               	lda objdta,x		; fetch first byte.
00357Dr 2               	sta spr
00357Dr 2               	inx
00357Dr 2               sprit2:
00357Dr 2               	lda objdta,x
00357Dr 2               	sta spr+1
00357Dr 2               
00357Dr 2               	lda #0
00357Dr 2               	sta spr+2
00357Dr 2               	jsr sprit7		; shift sprite
00357Dr 2               
00357Dr 2               	lda spr			; fetch graphic.
00357Dr 2               	ldy #0			; _BEEB
00357Dr 2               	eor (scraddr),y		; merge with screen image.
00357Dr 2               	sta (scraddr),y		; write to screen.
00357Dr 2               
00357Dr 2               	lda spr+1		; fetch graphic.
00357Dr 2               	ldy #16			; _BEEB
00357Dr 2               	eor (scraddr),y		; merge with screen image.
00357Dr 2               	sta (scraddr),y		; write to screen.
00357Dr 2               
00357Dr 2               	lda spr+2		; fetch graphic.
00357Dr 2               	ldy #32			; _BEEB
00357Dr 2               	eor (scraddr),y		; merge with screen image.
00357Dr 2               	sta (scraddr),y		; write to screen.
00357Dr 2               
00357Dr 2               	jsr nline
00357Dr 2               
00357Dr 2               	inx			; next source byte.
00357Dr 2               	cpx #32
00357Dr 2               	bne sprit1		; repeat
00357Dr 2               
00357Dr 2               	ldx xtmp		; retreive X-reg
00357Dr 2               	rts
00357Dr 2               
00357Dr 2               .endif
00357Dr 2               
00357Dr 2               ;------------------------------------------------------------------
00357Dr 2               ; SCADD
00357Dr 2               ;
00357Dr 2               ; This routine returns a screen address for X,Y in scraddr.
00357Dr 2               ;------------------------------------------------------------------
00357Dr 2               
00357Dr 2               scadd:
00357Dr 2  A5 rr        	lda dispx		; get x
00357Fr 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
003581r 2  85 rr        	sta scraddr		; set lb scraddr
003583r 2  A9 00        	lda #0
003585r 2  85 rr        	sta scraddr+1		; set hb scraddr
003587r 2  06 rr        	asl scraddr		; multiply X by 2
003589r 2  26 rr        	rol scraddr+1
00358Br 2               
00358Br 2               ; Add line address Y pos to X
00358Br 2               
00358Br 2  A6 rr        	ldx dispy		; get row address Y pos
00358Dr 2  18           	clc
00358Er 2  A5 rr        	lda scraddr
003590r 2  7D 00 07     	adc SCADTB_lb,x
003593r 2  85 rr        	sta scraddr
003595r 2  A5 rr        	lda scraddr+1
003597r 2  7D 00 08     	adc SCADTB_hb,x
00359Ar 2  85 rr        	sta scraddr+1
00359Cr 2               
00359Cr 2  60           	rts
00359Dr 2               
00359Dr 2               ;------------------------------------------------------------------
00359Dr 2               ; SSPRIA
00359Dr 2               ;
00359Dr 2               ; Erase single sprite, old (ix+0).
00359Dr 2               ;------------------------------------------------------------------
00359Dr 2               
00359Dr 2               sspria:
00359Dr 2  20 rr rr     	jsr gsprad		; get old sprite address.
0035A0r 2               sspri2:
0035A0r 2               .if rflag
0035A0r 2               	lda z80_e		; 3c
0035A0r 2               	sta dline_spraddr1+1	; 4c
0035A0r 2               	sta dline_spraddr2+1	; 4c
0035A0r 2               	lda z80_d		; 3c
0035A0r 2               	sta dline_spraddr1+2	; 4c
0035A0r 2               	sta dline_spraddr2+2	; 4c
0035A0r 2               
0035A0r 2               	ldx sprshft
0035A0r 2               	lda shift_table,x
0035A0r 2               	sta dline_shift1+1
0035A0r 2               	sta dline_shift2+1
0035A0r 2               	lda shift_table+1,x
0035A0r 2               	sta dline_shift1+2
0035A0r 2               	sta dline_shift2+2
0035A0r 2               
0035A0r 2               	ldx #0			; byte counter.
0035A0r 2               sspri0:
0035A0r 2               	jsr dline		; draw a line.
0035A0r 2                 .if bflag
0035A0r 2               	cpx #48			; big sprites have 24 bytes
0035A0r 2                 .else
0035A0r 2               	cpx #32			; normal sprites have 32 bytes
0035A0r 2                 .endif
0035A0r 2               	bne sspri0		; repeat 16 times x 2 bytes
0035A0r 2               	rts
0035A0r 2               .else
0035A0r 2                 .if bflag
0035A0r 2               	lda #24			; big sprites have 24 lines
0035A0r 2                 .else
0035A0r 2  A9 10        	lda #16			; normal sprites have 16 lines.
0035A2r 2                 .endif
0035A2r 2  8D rr rr     	sta acnt
0035A5r 2               sspri0:
0035A5r 2  20 rr rr     	jsr dline		; draw a line.
0035A8r 2  CE rr rr     	dec acnt
0035ABr 2  D0 F8        	bne sspri0		; repeat 16 times
0035ADr 2  60           	rts
0035AEr 2               
0035AEr 2  00           acnt:	.byte 0			; line counter
0035AFr 2               
0035AFr 2               .endif
0035AFr 2               
0035AFr 2               ;------------------------------------------------------------------
0035AFr 2               ; SSPRIB
0035AFr 2               ;
0035AFr 2               ; Display single sprite, new (ix+5).
0035AFr 2               ;------------------------------------------------------------------
0035AFr 2               
0035AFr 2               ssprib:
0035AFr 2  20 rr rr     	jsr gspran 		; get new sprite address.
0035B2r 2  4C rr rr     	jmp sspri2		; Display sprite
0035B5r 2               
0035B5r 2               ;------------------------------------------------------------------
0035B5r 2               ; SSPRIC
0035B5r 2               ;
0035B5r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
0035B5r 2               ;------------------------------------------------------------------
0035B5r 2               
0035B5r 2               sspric:
0035B5r 2               .if rflag
0035B5r 2               	jsr gsprad 		; get old sprite address.
0035B5r 2               
0035B5r 2               	lda z80_e		; 3c
0035B5r 2               	sta ddline_spraddr3+1	; 4c
0035B5r 2               	sta ddline_spraddr4+1	; 4c
0035B5r 2               
0035B5r 2               	lda z80_d		; 3c
0035B5r 2               	sta ddline_spraddr3+2	; 4c
0035B5r 2               	sta ddline_spraddr4+2	; 4c
0035B5r 2               
0035B5r 2               	ldx sprshft		; set spriteshift table addresses
0035B5r 2               	lda shift_table,x
0035B5r 2               	sta ddline_shift3+1
0035B5r 2               	sta ddline_shift4+1
0035B5r 2               	lda shift_table+1,x
0035B5r 2               	sta ddline_shift3+2
0035B5r 2               	sta ddline_shift4+2
0035B5r 2               
0035B5r 2               	jsr exx  		; store addresses.
0035B5r 2               	jsr gspran 		; get new sprite addresses.
0035B5r 2               
0035B5r 2               	lda z80_e		; 3c
0035B5r 2               	sta ddline_spraddr1+1	; 4c
0035B5r 2               	sta ddline_spraddr2+1	; 4c
0035B5r 2               
0035B5r 2               	lda z80_d		; 3c
0035B5r 2               	sta ddline_spraddr1+2	; 4c
0035B5r 2               	sta ddline_spraddr2+2	; 4c
0035B5r 2               
0035B5r 2               	ldx sprshft
0035B5r 2               	lda shift_table,x
0035B5r 2               	sta ddline_shift1+1
0035B5r 2               	sta ddline_shift2+1
0035B5r 2               	lda shift_table+1,x
0035B5r 2               	sta ddline_shift1+2
0035B5r 2               	sta ddline_shift2+2
0035B5r 2               
0035B5r 2               	ldx #0
0035B5r 2               lloop:
0035B5r 2               	jsr ddline 		; draw a line.
0035B5r 2                 .if bflag
0035B5r 2               	cpx #48
0035B5r 2                 .else
0035B5r 2               	cpx #32
0035B5r 2                 .endif
0035B5r 2               	bne lloop
0035B5r 2               	rts
0035B5r 2               
0035B5r 2               shift_table:
0035B5r 2               	.word shift0
0035B5r 2               	.word shift2
0035B5r 2               	.word shift4
0035B5r 2               	.word shift6
0035B5r 2               
0035B5r 2               ;------------------------------------------------------------------
0035B5r 2               ; DLINE
0035B5r 2               ;
0035B5r 2               ; Draw a sprite line, now work out next target address.
0035B5r 2               ;
0035B5r 2               ; Input:
0035B5r 2               ;  B  = right mask
0035B5r 2               ;  C  = left mask
0035B5r 2               ;  DE = spriteaddress
0035B5r 2               ;  scraddr = screen address
0035B5r 2               ;------------------------------------------------------------------
0035B5r 2               
0035B5r 2               dline:
0035B5r 2               
0035B5r 2               dline_spraddr1:
0035B5r 2               	ldy $ffff,x 		; get graphic data as pointer.
0035B5r 2               dline_shift1:
0035B5r 2               	lda $ffff,y		; get pre-shifted data
0035B5r 2               	sta sprtmp		; save byte
0035B5r 2               	and z80_c 		; mask right for left byte
0035B5r 2               
0035B5r 2               	ldy #0
0035B5r 2               	eor (scraddr),y 	; XOR with what's there.
0035B5r 2               	sta (scraddr),y 	; display left byte
0035B5r 2               
0035B5r 2               ; carry to next screen byte
0035B5r 2               
0035B5r 2               	lda sprtmp		; fetch data.
0035B5r 2               	and z80_b 		; mask for left part
0035B5r 2               	sta sprtmp
0035B5r 2               
0035B5r 2               ; middle screen byte
0035B5r 2               
0035B5r 2               	inx
0035B5r 2               dline_spraddr2:
0035B5r 2               	ldy $ffff,x 		; second bit of data.
0035B5r 2               dline_shift2:
0035B5r 2               	lda $ffff,y
0035B5r 2               	sta sprtmp2
0035B5r 2               	and z80_c 		; mask away what's not needed.
0035B5r 2               	ora sprtmp
0035B5r 2               	ldy #16
0035B5r 2               	eor (scraddr),y 	; XOR with what's there.
0035B5r 2               	sta (scraddr),y 	; display middle bye.
0035B5r 2               
0035B5r 2               ; carry to last screen byte
0035B5r 2               
0035B5r 2               	lda sprtmp2
0035B5r 2               	and z80_b 		; mask away unwanted
0035B5r 2               
0035B5r 2               	ldy #32
0035B5r 2               	eor (scraddr),y 	; XOR with what's there.
0035B5r 2               	sta (scraddr),y 	; display right byte.
0035B5r 2               
0035B5r 2               	inx
0035B5r 2               .else
0035B5r 2               
0035B5r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
0035B8r 2  20 rr rr     	jsr exx  		; store addresses.
0035BBr 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
0035BEr 2               
0035BEr 2               .if bflag
0035BEr 2               	lda #23
0035BEr 2               .else
0035BEr 2  A9 0F        	lda #15
0035C0r 2               .endif
0035C0r 2  85 rr        	sta ccnt
0035C2r 2               lloop:
0035C2r 2  20 rr rr     	jsr dline 		; draw a line.
0035C5r 2  20 rr rr     	jsr exx  		; restore old addresses.
0035C8r 2  20 rr rr     	jsr dline 		; delete a line.
0035CBr 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
0035CEr 2  C6 rr        	dec ccnt
0035D0r 2  D0 F0        	bne lloop
0035D2r 2               
0035D2r 2  20 rr rr     	jsr dline		; draw a line.
0035D5r 2  20 rr rr     	jsr exx 		; restore old addresses.
0035D8r 2               
0035D8r 2               ;-------------------------------------------------------------
0035D8r 2               ; Drop through.
0035D8r 2               ; Line drawn, now work out next target address.
0035D8r 2               ;
0035D8r 2               ; Input:
0035D8r 2               ;  B  = right mask
0035D8r 2               ;  C  = left mask
0035D8r 2               ;  DE = spriteaddress
0035D8r 2               ;  scraddr = screen address
0035D8r 2               ;-------------------------------------------------------------
0035D8r 2               
0035D8r 2               dline:
0035D8r 2  A0 00        	ldy #0
0035DAr 2  B1 rr        	lda (z80_de),y 		; graphic data.
0035DCr 2  48           	pha
0035DDr 2  25 rr        	and z80_c 		; mask away what's not needed.
0035DFr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0035E1r 2  91 rr        	sta (scraddr),y 	; left byte on screen.
0035E3r 2               
0035E3r 2  68           	pla
0035E4r 2  25 rr        	and z80_b 		; mask away unwanted bits.
0035E6r 2  A0 20        	ldy #32
0035E8r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0035EAr 2  91 rr        	sta (scraddr),y 	; right byte on screen
0035ECr 2               
0035ECr 2  E6 rr        	inc z80_e 		; next graphic.
0035EEr 2  D0 02        	bne :+
0035F0r 2  E6 rr        	inc z80_d
0035F2r 2               :
0035F2r 2               ; _BEEB screen arrangement
0035F2r 2               ;	sec
0035F2r 2               ;	lda scraddr 		; one character cell to the left.
0035F2r 2               ;	sbc #8
0035F2r 2               ;	sta scraddr
0035F2r 2               ;	lda scraddr+1
0035F2r 2               ;	sbc #0
0035F2r 2               ;	sta scraddr+1
0035F2r 2  A0 00        	ldy #0
0035F4r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
0035F6r 2  A0 10        	ldy #16
0035F8r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0035FAr 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
0035FCr 2               
0035FCr 2  E6 rr        	inc z80_e 		; point to next line of data.
0035FEr 2  D0 02        	bne :+
003600r 2  E6 rr        	inc z80_d
003602r 2               :
003602r 2               ; _BEEB screen arrangement
003602r 2               ;	sec
003602r 2               ;	lda scraddr 		; another char left.
003602r 2               ;	sbc #8
003602r 2               ;	sta scraddr
003602r 2               ;	lda scraddr+1
003602r 2               ;	sbc #0
003602r 2               ;	sta scraddr+1
003602r 2               .endif
003602r 2               
003602r 2               ;----------------------------------------------------------------------
003602r 2               ; Line drawn, now work out next target address.
003602r 2               ;----------------------------------------------------------------------
003602r 2               
003602r 2               ; _BEEB screen arrangement
003602r 2               
003602r 2               nline:
003602r 2  A5 rr        	lda scraddr 			; get low byte of address.
003604r 2  29 0F        	and #15
003606r 2  C9 0F        	cmp #15				; is this last line of row?
003608r 2  F0 03        	beq beeb_next_row
00360Ar 2               
00360Ar 2               	; within same row
00360Ar 2  E6 rr        	inc scraddr			; new low byte of address.
00360Cr 2  60           	rts
00360Dr 2               
00360Dr 2               beeb_next_row:
00360Dr 2  18           	clc
00360Er 2  A5 rr        	lda scraddr
003610r 2  69 51        	adc #<(ScreenRowBytes-15)
003612r 2  85 rr        	sta scraddr			; new low byte of address.
003614r 2  A5 rr        	lda scraddr+1
003616r 2  69 01        	adc #>(ScreenRowBytes-15)
003618r 2  85 rr        	sta scraddr+1			; new high byte of address.
00361Ar 2  60           	rts
00361Br 2               
00361Br 2               .if rflag
00361Br 2               ;-------------------------------------------------------------
00361Br 2               ; Drop through.
00361Br 2               ; Line drawn, now work out next target address.
00361Br 2               ;
00361Br 2               ; Input:
00361Br 2               ;  B  = right mask
00361Br 2               ;  C  = left mask
00361Br 2               ;  DE = spriteaddress
00361Br 2               ;  scraddr = screen address
00361Br 2               ;-------------------------------------------------------------
00361Br 2               
00361Br 2               ddline:
00361Br 2               
00361Br 2               ; NEW SPRITE
00361Br 2               
00361Br 2               ; first screen byte
00361Br 2               
00361Br 2               ddline_spraddr1:
00361Br 2               	ldy $ffff,x 		; graphic data.
00361Br 2               ddline_shift1:
00361Br 2               	lda $ffff,y
00361Br 2               	sta sprtmp
00361Br 2               	and z80_c 			; mask away what's not needed.
00361Br 2               
00361Br 2               	ldy #0
00361Br 2               	eor (scraddr),y 	; XOR with what's there.
00361Br 2               	sta (scraddr),y 	; bung it in.
00361Br 2               
00361Br 2               ; carry to next screen byte
00361Br 2               
00361Br 2               	lda sprtmp			; fetch data.
00361Br 2               	and z80_b 			; mask away unwanted
00361Br 2               	sta sprtmp
00361Br 2               
00361Br 2               ; middle screen byte
00361Br 2               
00361Br 2               	inx
00361Br 2               ddline_spraddr2:
00361Br 2               	ldy $ffff,x 		; second bit of data.
00361Br 2               ddline_shift2:
00361Br 2               	lda $ffff,y
00361Br 2               	sta sprtmp2
00361Br 2               	and z80_c 			; mask away what's not needed.
00361Br 2               	ora sprtmp
00361Br 2               
00361Br 2               	ldy #16
00361Br 2               	eor (scraddr),y 	; XOR with what's there.
00361Br 2               	sta (scraddr),y 	; bung it in.
00361Br 2               
00361Br 2               ; carry to last screen byte
00361Br 2               
00361Br 2               	lda sprtmp2
00361Br 2               	and z80_b 			; mask away unwanted
00361Br 2               
00361Br 2               	ldy #32
00361Br 2               	eor (scraddr),y 	; XOR with what's there.
00361Br 2               	sta (scraddr),y 	; bung it in.
00361Br 2               
00361Br 2               ; _BEEB next row
00361Br 2               
00361Br 2               	lda scraddr 		; get low byte of address.
00361Br 2               	and #15
00361Br 2               	cmp #15				; is this last line of row?
00361Br 2               	beq :+
00361Br 2               
00361Br 2               	; within same row can't increment page
00361Br 2               	inc scraddr			; new low byte of address.
00361Br 2               	bne ddline2
00361Br 2               
00361Br 2               :
00361Br 2               	clc
00361Br 2               	lda scraddr
00361Br 2               	adc #<(ScreenRowBytes-15)
00361Br 2               	sta scraddr			; new low byte of address.
00361Br 2               	lda scraddr+1
00361Br 2               	adc #>(ScreenRowBytes-15)
00361Br 2               	sta scraddr+1		; new high byte of address.
00361Br 2               
00361Br 2               ; OLD SPRITE
00361Br 2               
00361Br 2               ddline2:
00361Br 2               
00361Br 2               ; still first row but different data!
00361Br 2               
00361Br 2               	dex
00361Br 2               
00361Br 2               ; first screen byte
00361Br 2               
00361Br 2               ddline_spraddr3:
00361Br 2               	ldy $ffff,x			; graphic data.
00361Br 2               ddline_shift3:
00361Br 2               	lda $ffff,y
00361Br 2               	sta sprtmp
00361Br 2               	and z80_cp 			; mask away what's not needed.
00361Br 2               
00361Br 2               	ldy #0
00361Br 2               	eor (z80_hlp),y 	; XOR with what's there.
00361Br 2               	sta (z80_hlp),y 	; bung it in.
00361Br 2               
00361Br 2               ; carry to next screen byte
00361Br 2               
00361Br 2               	lda sprtmp			; fetch data.
00361Br 2               	and z80_bp 			; mask away unwanted
00361Br 2               	sta sprtmp
00361Br 2               
00361Br 2               ; middle screen byte
00361Br 2               
00361Br 2               	inx
00361Br 2               ddline_spraddr4:
00361Br 2               	ldy $ffff,x 		; second bit of data.
00361Br 2               ddline_shift4:
00361Br 2               	lda $ffff,y
00361Br 2               	sta sprtmp2
00361Br 2               	and z80_cp 			; mask away what's not needed.
00361Br 2               	ora sprtmp
00361Br 2               
00361Br 2               	ldy #16
00361Br 2               	eor (z80_hlp),y 	; XOR with what's there.
00361Br 2               	sta (z80_hlp),y 	; bung it in.
00361Br 2               
00361Br 2               ; last screen byte
00361Br 2               
00361Br 2               	lda sprtmp2			; fetch data.
00361Br 2               	and z80_bp 			; mask away unwanted
00361Br 2               
00361Br 2               	ldy #32
00361Br 2               	eor (z80_hlp),y 	; XOR with what's there.
00361Br 2               	sta (z80_hlp),y 	; bung it in.
00361Br 2               
00361Br 2               ; next row of sprite data
00361Br 2               
00361Br 2               	inx
00361Br 2               
00361Br 2               ; _BEEB screen arrangement
00361Br 2               
00361Br 2               	lda z80_lp 			; get low byte of address.
00361Br 2               	and #15
00361Br 2               	cmp #15				; is this last line of row?
00361Br 2               	beq :+
00361Br 2               
00361Br 2               	; within same row can't increment page
00361Br 2               	inc z80_lp			; new low byte of address.
00361Br 2               	rts
00361Br 2               
00361Br 2               :
00361Br 2               	clc
00361Br 2               	lda z80_lp
00361Br 2               	adc #<(ScreenRowBytes-15)
00361Br 2               	sta z80_lp			; new low byte of address.
00361Br 2               	lda z80_lp+1
00361Br 2               	adc #>(ScreenRowBytes-15)
00361Br 2               	sta z80_lp+1		; new high byte of address.
00361Br 2               	rts
00361Br 2               .endif
00361Br 2               
00361Br 2               ;----------------------------------------------------
00361Br 2               ; Display character in A at dispx,dispy.
00361Br 2               ;
00361Br 2               ; Input:
00361Br 2               ;  A 	   = character to print
00361Br 2               ;----------------------------------------------------
00361Br 2               
00361Br 2               pchar:
00361Br 2  85 rr        	sta fntaddr
00361Dr 2  A9 00        	lda #0
00361Fr 2  85 rr        	sta fntaddr+1
003621r 2  06 rr        	asl fntaddr  		; multiply char by 8.
003623r 2  26 rr        	rol fntaddr+1
003625r 2  06 rr        	asl fntaddr
003627r 2  26 rr        	rol fntaddr+1
003629r 2  06 rr        	asl fntaddr
00362Br 2  26 rr        	rol fntaddr+1
00362Dr 2               
00362Dr 2  A5 rr        	lda fntaddr
00362Fr 2  18           	clc
003630r 2  69 rr        	adc #<(FONT-256)
003632r 2  85 rr        	sta fntaddr		; that's the low byte.
003634r 2  A5 rr        	lda fntaddr+1
003636r 2  69 rr        	adc #>(FONT-256)
003638r 2  85 rr        	sta fntaddr+1		; add displacement.
00363Ar 2               
00363Ar 2               pchark:
00363Ar 2  20 rr rr     	jsr gaadd		; set colour attribute
00363Dr 2  AD rr rr     	lda fontcol
003640r 2  A0 00        	ldy #0
003642r 2  91 rr        	sta (bufaddr),y
003644r 2               
003644r 2  20 rr rr     	jsr gprad		; get screen address.
003647r 2  A2 07        	ldx #7			; lines to write.
003649r 2               pchar0:
003649r 2  A0 00        	ldy #0
00364Br 2  B1 rr        	lda (fntaddr),y 	; get image byte.
00364Dr 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
003650r 2               .if iflag
003650r 2               	eor #TxtInvert		; Invert
003650r 2               .endif
003650r 2  91 rr        	sta (scraddr),y 	; copy to screen.
003652r 2  E6 rr        	inc fntaddr		; next image byte.
003654r 2  D0 02        	bne :+
003656r 2  E6 rr        	inc fntaddr+1
003658r 2               :
003658r 2  CA           	dex			; next screen row down.
003659r 2  10 EE        	bpl pchar0		; repeat.
00365Br 2               
00365Br 2  60           	rts
00365Cr 2               
00365Cr 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
003660r 2  03 02 01 00  
003664r 2               
003664r 2               ;----------------------------------------------------
003664r 2               ; LoadFile
003664r 2               ;----------------------------------------------------
003664r 2               
003664r 2               loadfile:
003664r 2  AA           	tax
003665r 2  A9 rr        	lda #<msgdat		; pointer to messages.
003667r 2  85 rr        	sta z80_l
003669r 2  A9 rr        	lda #>msgdat
00366Br 2  85 rr        	sta z80_h
00366Dr 2  20 rr rr     	jsr getwrd		; get message number.
003670r 2               
003670r 2               ; Init screen for NTSC
003670r 2               ; this sets the background and border color of the screen
003670r 2               ; in this case border black and background black
003670r 2               
003670r 2  A9 08        	lda #%00001000
003672r 2  8D 0F 90     	sta RegF
003675r 2               
003675r 2               ; z80_hl should point to the textstring now.
003675r 2               ; Read filename +length into buffer
003675r 2               
003675r 2  A0 00        	ldy #0
003677r 2               nameloop:
003677r 2  B1 rr        	lda (z80_hl),y
003679r 2  30 07        	bmi lastchar
00367Br 2  99 rr rr     	sta filename,y
00367Er 2  C8           	iny
00367Fr 2  4C rr rr     	jmp nameloop
003682r 2               lastchar:
003682r 2  29 7F        	and #$7f
003684r 2  99 rr rr     	sta filename,y
003687r 2  C8           	iny
003688r 2  8C rr rr     	sty filelen
00368Br 2               
00368Br 2               ; Load the file name (in accumulator the size of the string
00368Br 2               ;                      containing the name, x low address for FileName,
00368Br 2               ;                      y high address for FileName)
00368Br 2  AD rr rr     	lda filelen
00368Er 2  A2 rr        	ldx #<filename
003690r 2  A0 rr        	ldy #>filename
003692r 2  20 BD FF     	jsr $ffbd
003695r 2               
003695r 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
003695r 2               ;                       usually the first drive, and y set to 1 reads from the header
003695r 2               ;                       of the file the location where to save it)
003695r 2  A9 01        	lda #1
003697r 2  A2 08        	ldx #8		; Disk device
003699r 2  A0 01        	ldy #1
00369Br 2  20 BA FF     	jsr $ffba
00369Er 2               
00369Er 2               ; load from disk to ram
00369Er 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
0036A0r 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
0036A2r 2  A0 00        	ldy #>$ff	; target location high (got from header)
0036A4r 2  20 D5 FF     	jsr $ffd5
0036A7r 2               
0036A7r 2               
0036A7r 2  60           	rts
0036A8r 2               
0036A8r 2               filename:
0036A8r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0036ACr 2  00 00 00 00  
0036B0r 2  00 00 00 00  
0036B8r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0036BCr 2  00 00 00 00  
0036C0r 2  00 00 00 00  
0036C8r 2               filelen:
0036C8r 2  00           	.byte 0
0036C9r 2               
0036C9r 1               ;	.include "music.inc"
0036C9r 1               	.include "z80.asm"
0036C9r 2               ;------------------------------------------------------
0036C9r 2               ; z80.asm
0036C9r 2               ; spectrum stuff
0036C9r 2               ; adresses
0036C9r 2               
0036C9r 2               ;ws	 = $60
0036C9r 2               
0036C9r 2               ;z80_f	 = ws+$00
0036C9r 2               ;z80_a	 = ws+$01
0036C9r 2               ;z80_af	 = z80_f
0036C9r 2               
0036C9r 2               ;z80_c	 = ws+$02
0036C9r 2               ;z80_b	 = ws+$03
0036C9r 2               ;z80_bc	 = z80_c
0036C9r 2               
0036C9r 2               ;z80_e	 = ws+$04
0036C9r 2               ;z80_d	 = ws+$05
0036C9r 2               ;z80_de	 = z80_e
0036C9r 2               
0036C9r 2               ;z80_l	 = ws+$06
0036C9r 2               ;z80_h	 = ws+$07
0036C9r 2               ;z80_hl	 = z80_l
0036C9r 2               
0036C9r 2               ;z80_x    = ws+$08
0036C9r 2               ;z80_i    = ws+$09
0036C9r 2               ;z80_ix	 = z80_x
0036C9r 2               
0036C9r 2               ;z80_iy	 = ws+$0a
0036C9r 2               
0036C9r 2               ;z80_fp	 = ws+$0c
0036C9r 2               ;z80_ap	 = ws+$0d
0036C9r 2               
0036C9r 2               ;z80_cp	 = ws+$0e
0036C9r 2               ;z80_bp	 = ws+$0f
0036C9r 2               ;z80_bcp = z80_cp
0036C9r 2               
0036C9r 2               ;z80_ep	 = ws+$10
0036C9r 2               ;z80_dp	 = ws+$11
0036C9r 2               ;z80_dep = z80_ep
0036C9r 2               
0036C9r 2               ;z80_lp	 = ws+$12
0036C9r 2               ;z80_hp	 = ws+$13
0036C9r 2               ;z80_hlp = z80_lp
0036C9r 2               
0036C9r 2               ;z80_sp   = ws+$14
0036C9r 2               
0036C9r 2               ;z80_reg0 = ws+$16
0036C9r 2               ;z80_reg1 = ws+$17
0036C9r 2               ;z80_reg2 = ws+$18
0036C9r 2               ;z80_reg3 = ws+$19
0036C9r 2               
0036C9r 2               ;z80_r	 = ws+$1a
0036C9r 2               
0036C9r 2               ; Contains seperatly 1 bit set
0036C9r 2               ; _BEEB this is not safe memory to use as required by MOS
0036C9r 2               
0036C9r 2               _bitmem0	= $f8
0036C9r 2               _bitmem1	= $f9
0036C9r 2               _bitmem2	= $fa
0036C9r 2               _bitmem3	= $fb
0036C9r 2               _bitmem4	= $fc
0036C9r 2               _bitmem5	= $fd
0036C9r 2               _bitmem6	= $fe
0036C9r 2               _bitmem7	= $ff
0036C9r 2               
0036C9r 2               ; constants
0036C9r 2               _bitvalue0	= $01
0036C9r 2               _bitvalue1	= $02
0036C9r 2               _bitvalue2	= $04
0036C9r 2               _bitvalue3	= $08
0036C9r 2               _bitvalue4	= $10
0036C9r 2               _bitvalue5	= $20
0036C9r 2               _bitvalue6	= $40
0036C9r 2               _bitvalue7	= $80
0036C9r 2               
0036C9r 2               _notbitvalue0	= $fe
0036C9r 2               _notbitvalue1	= $fd
0036C9r 2               _notbitvalue2	= $fb
0036C9r 2               _notbitvalue3	= $f7
0036C9r 2               _notbitvalue4	= $ef
0036C9r 2               _notbitvalue5	= $df
0036C9r 2               _notbitvalue6	= $bf
0036C9r 2               _notbitvalue7	= $7f
0036C9r 2               
0036C9r 2               
0036C9r 2               ;add_hl_bc:
0036C9r 2               ;		lda z80_l
0036C9r 2               ;		clc
0036C9r 2               ;		adc z80_c
0036C9r 2               ;		sta z80_l
0036C9r 2               ;		lda z80_h
0036C9r 2               ;		adc z80_b
0036C9r 2               ;		sta z80_h
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;add_ix_de:
0036C9r 2               ;		lda z80_ix
0036C9r 2               ;		clc
0036C9r 2               ;		adc z80_e
0036C9r 2               ;		sta z80_ix
0036C9r 2               ;		lda z80_ix+1
0036C9r 2               ;		adc z80_d
0036C9r 2               ;		sta z80_ix+1
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;add_iy_de:
0036C9r 2               ;		lda z80_iy
0036C9r 2               ;		clc
0036C9r 2               ;		adc z80_e
0036C9r 2               ;		sta z80_iy
0036C9r 2               ;		lda z80_iy+1
0036C9r 2               ;		adc z80_d
0036C9r 2               ;		sta z80_iy+1
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;add_hl_de:
0036C9r 2               ;		lda z80_l
0036C9r 2               ;		clc
0036C9r 2               ;		adc z80_e
0036C9r 2               ;		sta z80_l
0036C9r 2               ;		lda z80_h
0036C9r 2               ;		adc z80_d
0036C9r 2               ;		sta z80_h
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;add_ix_bc:
0036C9r 2               ;		lda z80_ix
0036C9r 2               ;		clc
0036C9r 2               ;		adc z80_c
0036C9r 2               ;		sta z80_ix
0036C9r 2               ;		lda z80_ix+1
0036C9r 2               ;		adc z80_b
0036C9r 2               ;		sta z80_ix+1
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;add_iy_bc:
0036C9r 2               ;		lda z80_iy
0036C9r 2               ;		clc
0036C9r 2               ;		adc z80_c
0036C9r 2               ;		sta z80_iy
0036C9r 2               ;		lda z80_iy+1
0036C9r 2               ;		adc z80_b
0036C9r 2               ;		sta z80_iy+1
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;sbc_hl_de:
0036C9r 2               ;		lda z80_l
0036C9r 2               ;		sbc z80_e
0036C9r 2               ;		sta z80_l
0036C9r 2               ;		lda z80_h
0036C9r 2               ;		sbc z80_d
0036C9r 2               ;		sta z80_h
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;sbc_hl_bc:
0036C9r 2               ;		lda z80_l
0036C9r 2               ;		sbc z80_c
0036C9r 2               ;		sta z80_l
0036C9r 2               ;		lda z80_h
0036C9r 2               ;		sbc z80_b
0036C9r 2               ;		sta z80_h
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;cmp_hl_bc:
0036C9r 2               ;		lda z80_l
0036C9r 2               ;		cmp z80_c
0036C9r 2               ;		bne cmp_hl_bc_end
0036C9r 2               ;		lda z80_h
0036C9r 2               ;		cmp z80_b
0036C9r 2               ;cmp_hl_bc_end:
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;cmp_iy_ix:
0036C9r 2               ;		lda z80_iy
0036C9r 2               ;		cmp z80_ix
0036C9r 2               ;		bne cmp_iy_ix_end
0036C9r 2               ;		lda z80_iy+1
0036C9r 2               ;		cmp z80_ix+1
0036C9r 2               ;cmp_iy_ix_end:
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;dec_hl:
0036C9r 2               ;		lda z80_l
0036C9r 2               ;		bne dec_hl_no_dec_h
0036C9r 2               ;		dec z80_h
0036C9r 2               ;dec_hl_no_dec_h:
0036C9r 2               ;		dec z80_l
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;dec_ix:
0036C9r 2               ;		lda z80_ix
0036C9r 2               ;		bne dec_ix_no_dec_h
0036C9r 2               ;		dec z80_ix+1
0036C9r 2               ;dec_ix_no_dec_h:
0036C9r 2               ;		dec z80_ix
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;dec_bc:
0036C9r 2               ;		lda z80_c
0036C9r 2               ;		bne dec_bc_no_dec_b
0036C9r 2               ;		dec z80_b
0036C9r 2               ;dec_bc_no_dec_b:
0036C9r 2               ;		dec z80_c
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;dec_de:
0036C9r 2               ;		lda z80_e
0036C9r 2               ;		bne dec_de_no_dec_d
0036C9r 2               ;		dec z80_d
0036C9r 2               ;dec_de_no_dec_d:
0036C9r 2               ;		dec z80_e
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               ;ex_af_afs:
0036C9r 2               ;	rts
0036C9r 2               ;ex_de_hl:
0036C9r 2               ;		lda z80_e
0036C9r 2               ;		ldx z80_l
0036C9r 2               ;		stx z80_e
0036C9r 2               ;		sta z80_l
0036C9r 2               ;		lda z80_d
0036C9r 2               ;		ldx z80_h
0036C9r 2               ;		stx z80_d
0036C9r 2               ;		sta z80_h
0036C9r 2               ;		rts
0036C9r 2               ;
0036C9r 2               exx:
0036C9r 2  A5 rr        		lda z80_c
0036CBr 2  A4 rr        		ldy z80_cp
0036CDr 2  84 rr        		sty z80_c
0036CFr 2  85 rr        		sta z80_cp
0036D1r 2  A5 rr        		lda z80_b
0036D3r 2  A4 rr        		ldy z80_bp
0036D5r 2  84 rr        		sty z80_b
0036D7r 2  85 rr        		sta z80_bp
0036D9r 2  A5 rr        		lda z80_e
0036DBr 2  A4 rr        		ldy z80_ep
0036DDr 2  84 rr        		sty z80_e
0036DFr 2  85 rr        		sta z80_ep
0036E1r 2  A5 rr        		lda z80_d
0036E3r 2  A4 rr        		ldy z80_dp
0036E5r 2  84 rr        		sty z80_d
0036E7r 2  85 rr        		sta z80_dp
0036E9r 2  A5 rr        		lda scraddr
0036EBr 2  A4 rr        		ldy z80_lp
0036EDr 2  84 rr        		sty scraddr
0036EFr 2  85 rr        		sta z80_lp
0036F1r 2  A5 rr        		lda scraddr+1
0036F3r 2  A4 rr        		ldy z80_hp
0036F5r 2  84 rr        		sty scraddr+1
0036F7r 2  85 rr        		sta z80_hp
0036F9r 2  60           		rts
0036FAr 2               
0036FAr 2               ;ex_sp_hl:
0036FAr 2               ;		tsx
0036FAr 2               ;		lda $0103,x
0036FAr 2               ;		ldy z80_h
0036FAr 2               ;		sta z80_h
0036FAr 2               ;		tya
0036FAr 2               ;		sta $0103,x
0036FAr 2               ;		lda $0104,x
0036FAr 2               ;		ldy z80_l
0036FAr 2               ;		sta z80_l
0036FAr 2               ;		tya
0036FAr 2               ;		sta $104,x
0036FAr 2               ;		rts
0036FAr 2               ;
0036FAr 2               ;ldi:
0036FAr 2               ;	rts
0036FAr 2               ;ldir:
0036FAr 2               ;		ldy #$00
0036FAr 2               ;		ldx z80_b
0036FAr 2               ;		beq ldir_last_page
0036FAr 2               ;ldir_loop:
0036FAr 2               ;		lda (z80_hl),y
0036FAr 2               ;		sta (z80_de),y
0036FAr 2               ;		iny
0036FAr 2               ;		bne ldir_loop
0036FAr 2               ;		inc z80_h
0036FAr 2               ;		inc z80_d
0036FAr 2               ;		dex
0036FAr 2               ;		bne ldir_loop
0036FAr 2               ;ldir_last_page:
0036FAr 2               ;		lda z80_c
0036FAr 2               ;		beq ldir_end
0036FAr 2               ;ldir_last_page_loop:
0036FAr 2               ;		lda (z80_hl),y
0036FAr 2               ;		sta (z80_de),y
0036FAr 2               ;		iny
0036FAr 2               ;		cpy z80_c
0036FAr 2               ;		bne ldir_last_page_loop
0036FAr 2               ;ldir_end:
0036FAr 2               ;		stx z80_c
0036FAr 2               ;		stx z80_b
0036FAr 2               ;		tya
0036FAr 2               ;		clc
0036FAr 2               ;		adc z80_l
0036FAr 2               ;		sta z80_l
0036FAr 2               ;		bcc *+4
0036FAr 2               ;		inc z80_h
0036FAr 2               ;		tya
0036FAr 2               ;		clc
0036FAr 2               ;		adc z80_e
0036FAr 2               ;		sta z80_e
0036FAr 2               ;		bcc *+4
0036FAr 2               ;		inc z80_d
0036FAr 2               ;		rts
0036FAr 2               ;
0036FAr 2               ;lddr:		ldy #$00
0036FAr 2               ;lddr_loop:
0036FAr 2               ;		lda (z80_hl),y
0036FAr 2               ;		sta (z80_de),y
0036FAr 2               ;		jsr dec_hl
0036FAr 2               ;		jsr dec_de
0036FAr 2               ;		jsr dec_bc
0036FAr 2               ;		lda z80_b
0036FAr 2               ;		ora z80_c
0036FAr 2               ;		bne lddr_loop
0036FAr 2               ;		rts
0036FAr 2               ;ei:
0036FAr 2               ;		rts
0036FAr 2               ;di:
0036FAr 2               ;		rts
0036FAr 2               
0036FAr 2               ;-------------------------------------------------------------
0036FAr 2               ; Set bits in bitmem
0036FAr 2               ;-------------------------------------------------------------
0036FAr 2               
0036FAr 2               .if 0
0036FAr 2               z80_init:
0036FAr 2               	ldx #$00
0036FAr 2               	lda #$01
0036FAr 2               z80_init_loop:
0036FAr 2               	sta _bitmem0,x
0036FAr 2               	inx
0036FAr 2               	asl a
0036FAr 2               	bne z80_init_loop
0036FAr 2               	rts
0036FAr 2               .endif
0036FAr 2               
0036FAr 2               push_af:
0036FAr 2               push_bc:
0036FAr 2               push_de:
0036FAr 2               push_hl:
0036FAr 2               
0036FAr 2               pop_af:
0036FAr 2               pop_bc:
0036FAr 2               pop_de:
0036FAr 2               pop_ix:
0036FAr 2               pop_hl:
0036FAr 2               
0036FAr 2               add_hl_hl:
0036FAr 2               
0036FAr 2               inc_bc:
0036FAr 2               inc_de:
0036FAr 2               inc_hl:
0036FAr 2               inc_ix:
0036FAr 2               inc_sp:
0036FAr 2               
0036FAr 2               cpir:
0036FAr 2               
0036FAr 2               ex_af_af:
0036FAr 2               ;	rts
0036FAr 2               
0036FAr 1               
0036FAr 1               eind_asm:
0036FAr 1               eop:					; End Of Program
0036FAr 1               
0036FAr 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
0036FAr 1               
