ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 1 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 0 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "fungus2-22.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 12
000000r 3               	CentreY		= 38
000000r 3               	CentreXMP   = 14
000000r 3               	CentreYMP   = 36
000000r 3               	timervalue	= 24000
000000r 3               	timerint	= 24000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	CentreXMP   = 6
000000r 3               	CentreYMP   = 24
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 18			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               	var_colour = 17		; sprite colour
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  00           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  16           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  00           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  A0           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 D8        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3               	lda #<objdta		; objects table.
000026r 3               	sta z80_x
000026r 3               	lda #>objdta
000026r 3               	sta z80_i
000026r 3               
000026r 3               	ldx numob 		; number of objects in the game.
000026r 3               iniob0:
000026r 3               	ldy #36
000026r 3               	lda (z80_ix),y 		; start screen.
000026r 3               	ldy #33
000026r 3               	sta (z80_ix),y 		; set start screen.
000026r 3               
000026r 3               	ldy #37
000026r 3               	lda (z80_ix),y 		; find start y.
000026r 3               	ldy #34
000026r 3               	sta (z80_ix),y 		; set start y.
000026r 3               
000026r 3               	ldy #38
000026r 3               	lda (z80_ix),y 		; get initial x.
000026r 3               	ldy #35
000026r 3               	sta (z80_ix),y 		; set x coord.
000026r 3               
000026r 3               	clc 			; point to next object.
000026r 3               	lda z80_x
000026r 3               	adc #39			; distance between objects.
000026r 3               	sta z80_x
000026r 3               	bcc :+
000026r 3               	inc z80_i
000026r 3               :
000026r 3               	dex 			; repeat.
000026r 3               	bne iniob0
000026r 3               
000026r 3               	rts
000026r 3               .endif
000026r 3               
000026r 3               ;-----------------------------------------------
000026r 3               ; Redraw the screen.
000026r 3               ;
000026r 3               ; Remove old copy of all sprites for redraw.
000026r 3               ;-----------------------------------------------
000026r 3               
000026r 3               redraw:
000026r 3               .if xflag
000026r 3               	lda #WINDOWWID
000026r 3               	sta winwid
000026r 3               	lda #WINDOWHGT
000026r 3               	sta winhgt
000026r 3               .endif
000026r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000028r 3  48           	pha
000029r 3  A5 rr        	lda z80_x
00002Br 3  48           	pha
00002Cr 3               
00002Cr 3  20 rr rr     	jsr droom		; show screen layout.
00002Fr 3               .if oflag
00002Fr 3               	jsr shwob		; draw objects.
00002Fr 3               .endif
00002Fr 3               numsp0:
00002Fr 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000031r 3  85 rr        	sta tmp
000033r 3               
000033r 3  A9 rr        	lda #<sprtab		; sprite table.
000035r 3  85 rr        	sta z80_x
000037r 3  A9 rr        	lda #>sprtab
000039r 3  85 rr        	sta z80_i
00003Br 3               redrw0:
00003Br 3  A0 00        	ldy #0
00003Dr 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00003Fr 3  C9 FF        	cmp #255		; is it enabled?
000041r 3  F0 0B        	beq redrw1 		; no, find next one.
000043r 3               
000043r 3  A0 03        	ldy #var_Y
000045r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000047r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000049r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
00004Br 3               
00004Br 3  20 rr rr     	jsr sspria		; show single sprite.
00004Er 3               
00004Er 3               redrw1:
00004Er 3  18           	clc			; next sprite.
00004Fr 3  A5 rr        	lda z80_x
000051r 3  69 12        	adc #TABSIZ		; distance to next odd/even entry.
000053r 3  85 rr        	sta z80_x
000055r 3  90 02        	bcc :+
000057r 3  E6 rr        	inc z80_i
000059r 3               :
000059r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
00005Br 3  D0 DE        	bne redrw0
00005Dr 3               
00005Dr 3               rpblc1:
00005Dr 3               ;	jsr dshrp		; redraw shrapnel.
00005Dr 3               
00005Dr 3               .if aflag
00005Dr 3               	jsr rbloc		; draw blocks for this screen
00005Dr 3               .endif
00005Dr 3  68           	pla			; retrieve sprite pointer.
00005Er 3  85 rr        	sta z80_x
000060r 3  68           	pla
000061r 3  85 rr        	sta z80_i
000063r 3               
000063r 3  60           	rts
000064r 3               
000064r 3               ;----------------------------------------------------------------------
000064r 3               ; Clear screen routine.
000064r 3               ;
000064r 3               ; Fill screenmem $9400-$97ff with ScrFillByte
000064r 3               ;----------------------------------------------------------------------
000064r 3               
000064r 3               cls:
000064r 3  A9 10        	lda #>CharAddress	; Character RAM address.
000066r 3  8D rr rr     	sta clrdata+2
000069r 3               
000069r 3               ; Clear bitmap data
000069r 3               
000069r 3  A9 00        	lda #ScrFillByte	; Clear screen
00006Br 3  A0 00        	ldy #0
00006Dr 3  A2 10        	ldx #16
00006Fr 3               clrdata:
00006Fr 3  99 00 10     	sta CharAddress,y
000072r 3  C8           	iny
000073r 3  D0 FA        	bne clrdata
000075r 3  EE rr rr     	inc clrdata+2
000078r 3  CA           	dex
000079r 3  D0 F4        	bne clrdata
00007Br 3               
00007Br 3               ; Clear colour attributes
00007Br 3               
00007Br 3  AD rr rr     	lda fontcol
00007Er 3  A2 00        	ldx #0
000080r 3               clrcolour:
000080r 3  9D 00 94     	sta ColorAttr-$200,x
000083r 3  9D 00 96     	sta ColorAttr,x
000086r 3  E8           	inx
000087r 3  D0 F7        	bne clrcolour
000089r 3  60           	rts
00008Ar 3               
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               ; Clear colour attributes
00008Ar 3               ;
00008Ar 3               ; Reset colour attributes to fontcol
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               
00008Ar 3               clrcol:
00008Ar 3  AD rr rr     	lda fontcol		; Clear colour attributes
00008Dr 3  A2 00        	ldx #0
00008Fr 3               clscol:
00008Fr 3  9D 00 96     	sta ColorAttr,x
000092r 3  E8           	inx
000093r 3  E0 F2        	cpx #242
000095r 3  D0 F8        	bne clscol
000097r 3               
000097r 3  60           	rts
000098r 3               
000098r 3               ;----------------------------------------------------------------------
000098r 3               ; FODDER check
000098r 3               ;----------------------------------------------------------------------
000098r 3               
000098r 3               .if pflag .or dflag
000098r 3               fdchk:
000098r 3  C9 04        	cmp #FODDER 		; is it fodder?
00009Ar 3  F0 01        	beq :+
00009Cr 3  60           	rts 			; no.
00009Dr 3               :
00009Dr 3  A9 00        	lda #0			; wipe fodder in MAP
00009Fr 3  A0 00        	ldy #0
0000A1r 3  91 rr        	sta (bufaddr),y 	; rewrite block type.
0000A3r 3               
0000A3r 3  A5 rr        	lda dispx		; x=x/8
0000A5r 3  48           	pha
0000A6r 3  4A           	lsr a
0000A7r 3  4A           	lsr a
0000A8r 3  4A           	lsr a
0000A9r 3  85 rr        	sta dispx
0000ABr 3               
0000ABr 3  A5 rr        	lda dispy		; y=y/8
0000ADr 3  48           	pha
0000AEr 3  4A           	lsr a
0000AFr 3  4A           	lsr a
0000B0r 3  4A           	lsr a
0000B1r 3  85 rr        	sta dispy
0000B3r 3               
0000B3r 3  A9 00        	lda #0 			; block to write.
0000B5r 3  20 rr rr     	jsr pattr 		; write block.
0000B8r 3               
0000B8r 3  68           	pla
0000B9r 3  85 rr        	sta dispy
0000BBr 3  68           	pla
0000BCr 3  85 rr        	sta dispx
0000BEr 3  60           	rts
0000BFr 3               .endif
0000BFr 3               
0000BFr 3               ;----------------------------------------------------
0000BFr 3               ; Scrolly text and puzzle variables.
0000BFr 3               ;----------------------------------------------------
0000BFr 3               
0000BFr 3               .if sflag
0000BFr 3               txtbit:	.byte 128		; bit to write.
0000BFr 3               txtwid:	.byte 16		; width of ticker message.
0000BFr 3               txtpos:	.word msgdat
0000BFr 3               txtini:	.word msgdat
0000BFr 3               txtscr:	.word ScreenAddr
0000BFr 3               .endif
0000BFr 3               
0000BFr 3               ;----------------------------------------------------
0000BFr 3               ; Specialist routines.
0000BFr 3               ; Process shrapnel.
0000BFr 3               ;----------------------------------------------------
0000BFr 3               proshr:
0000BFr 3               .if pflag
0000BFr 3               	lda #<SHRAPN		; table.
0000BFr 3               	sta z80_x
0000BFr 3               	lda #>SHRAPN
0000BFr 3               	sta z80_i
0000BFr 3               
0000BFr 3               	lda #NUMSHR		; shrapnel pieces to process.
0000BFr 3               	sta shrctr
0000BFr 3               prosh0:
0000BFr 3               	ldy #0
0000BFr 3               	lda (z80_ix),y		; on/off marker.
0000BFr 3               	asl a
0000BFr 3               proshx:
0000BFr 3               	bcs :+
0000BFr 3               	jsr prosh1 		; on, so process it.
0000BFr 3               :
0000BFr 3               	clc
0000BFr 3               	lda z80_x
0000BFr 3               	adc #SHRSIZ
0000BFr 3               	sta z80_x
0000BFr 3               	bcc :+
0000BFr 3               	inc z80_i
0000BFr 3               :
0000BFr 3               	dec shrctr		; round again.
0000BFr 3               	bne prosh0
0000BFr 3               .endif
0000BFr 3               .if sflag
0000BFr 3               	jsr scrly
0000BFr 3               .endif
0000BFr 3  60           	rts
0000C0r 3               
0000C0r 3               .if pflag
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Proces shrapnel piece
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               prosh1:
0000C0r 3               	jsr plot 		; delete the pixel.
0000C0r 3               
0000C0r 3               	lda #<shrptr		; shrapnel routine pointers.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>shrptr
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y		; restore shrapnel type.
0000C0r 3               	jsr prosh2 		; run the routine.
0000C0r 3               	jsr chkxy		; check x and y are good before we redisplay.
0000C0r 3               
0000C0r 3               	lda #<SHRSIZ 		; distance to next.
0000C0r 3               	sta z80_e
0000C0r 3               	lda #>SHRSIZ
0000C0r 3               	sta z80_d
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Run the routine
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               prosh2:
0000C0r 3               	asl a 			; 2 bytes per address.
0000C0r 3               	tay
0000C0r 3               	lda shrptr,y
0000C0r 3               	sta z80_l
0000C0r 3               	lda shrptr+1,y 		; fetch high byte from table.
0000C0r 3               	sta z80_h
0000C0r 3               	jmp (z80_hl) 		; jump to routine.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Paricle routine table
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shrptr:	.word laser		; laser.
0000C0r 3               	.word trail		; vapour trail.
0000C0r 3               	.word shrap		; shrapnel from explosion.
0000C0r 3               	.word dotl		; horizontal starfield left.
0000C0r 3               	.word dotr		; horizontal starfield right.
0000C0r 3               	.word dotu		; vertical starfield up.
0000C0r 3               	.word dotd		; vertical starfield down.
0000C0r 3               	.word ptcusr		; user particle.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Explosion shrapnel.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shrap:
0000C0r 3               	ldy #1
0000C0r 3               	lda (z80_ix),y 		; get the angle.
0000C0r 3               	clc
0000C0r 3               	adc #<shrsin		; shrapnel sine table.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>shrsin
0000C0r 3               	adc #0
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; fetch value from table.
0000C0r 3               	sta z80_e
0000C0r 3               	inc z80_l 		; next byte of table.
0000C0r 3               	bne :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y		; fetch value from table.
0000C0r 3               	sta z80_d
0000C0r 3               	inc z80_l		; next byte of table.
0000C0r 3               	bne :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; fetch value from table.
0000C0r 3               	sta z80_c
0000C0r 3               	inc z80_l 		; next byte of table.
0000C0r 3               	bne :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; fetch value from table.
0000C0r 3               	sta z80_b
0000C0r 3               
0000C0r 3               	ldy #2
0000C0r 3               	lda (z80_ix),y 		; x coordinate in hl.
0000C0r 3               	clc
0000C0r 3               	adc z80_e		; add sine lb
0000C0r 3               	sta (z80_ix),y		; store new coordinate lb.
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	adc z80_d		; add sine hb
0000C0r 3               	sta (z80_ix),y		; store new coordinate hb.
0000C0r 3               
0000C0r 3               	ldy #4
0000C0r 3               	lda (z80_ix),y	 	; y coordinate in hl.
0000C0r 3               	clc
0000C0r 3               	adc z80_c		; add cosine lb
0000C0r 3               	sta (z80_ix),y		; store new coordinate lb.
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	adc z80_b		; add cosine lb
0000C0r 3               	sta (z80_ix),y		; store new coordinate hb.
0000C0r 3               
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Move dots
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               dotl:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1		 	; move left.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               dotr:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1		 	; move left.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               dotu:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1		 	; move up.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               dotd:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1			; move down.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Check if coordinates are ok before redrawing at new position.
0000C0r 3               ;
0000C0r 3               ; left:   X>L		X=L	Ok
0000C0r 3               ; right:  R+15>X	X=R	Ok
0000C0r 3               ; top:    Y>T		Y=T	Ok
0000C0r 3               ; bottom: B+15>Y	Y=B	Ok
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               chkxy:
0000C0r 3               
0000C0r 3               ; top:    Y>T		Y=T	Ok
0000C0r 3               
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	cmp wntopx		; window top.
0000C0r 3               	bcs :+			; compare with top window limit.
0000C0r 3               	jmp kilshr		; out of window, kill shrapnel.
0000C0r 3               :
0000C0r 3               ; left:   X>L		X=L	Ok
0000C0r 3               
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	cmp wnlftx		; left edge.
0000C0r 3               	bcs :+			; compare with left window limit.
0000C0r 3               	jmp kilshr		; out of window, kill shrapnel.
0000C0r 3               :
0000C0r 3               ; bottom: B+15>Y	Y=B	Ok
0000C0r 3               
0000C0r 3               	lda wnbotx		; point to bottom.
0000C0r 3               	clc
0000C0r 3               	adc #15
0000C0r 3               	ldy #3
0000C0r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	bcs :+			; compare with shrapnel x coordinate.
0000C0r 3               	jmp kilshr		; off screen, kill shrapnel..
0000C0r 3               :
0000C0r 3               ; right:  R+15>X	X=R	Ok
0000C0r 3               
0000C0r 3               	lda wnrgtx		; point to right edge.
0000C0r 3               	clc
0000C0r 3               	adc #15
0000C0r 3               	ldy #5
0000C0r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	bcs :+			; compare with window limit.
0000C0r 3               	jmp kilshr		; off screen, kill shrapnel.
0000C0r 3               :
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Drop through.
0000C0r 3               ; Display shrapnel.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               plot:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y		; y integer.
0000C0r 3               	sta dispy	 	; workspace coordinates.
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y	 	; x integer.
0000C0r 3               	sta dispx 		; workspace coordinates.
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y 		; type.
0000C0r 3               	bne :+			; is it a laser?
0000C0r 3               	jmp plot1 		; yes, draw laser instead.
0000C0r 3               :
0000C0r 3               plot0:
0000C0r 3               	lda dispx		; which pixel within byte do we
0000C0r 3               	and #7			; want to set first?
0000C0r 3               	tay
0000C0r 3               	lda dots,y 		; table of small pixel positions.
0000C0r 3               	sta z80_e 		; get value.
0000C0r 3               
0000C0r 3               	jsr scadd 		; screen address.
0000C0r 3               	ldy #0
0000C0r 3               	lda (scraddr),y		; see what's already there.
0000C0r 3               	eor z80_e
0000C0r 3               	sta (scraddr),y 	; put back on screen.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               plot1:
0000C0r 3               	jsr scadd 		; screen address.
0000C0r 3               	ldy #0
0000C0r 3               	lda (scraddr),y 	; fetch byte there.
0000C0r 3               	eor #255 		; toggle all bits.
0000C0r 3               	sta (scraddr),y 	; new byte.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Switch off shrapnel
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               kilshr:
0000C0r 3               	lda #128
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y	; switch off shrapnel.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Sine/cosine table
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
0000C0r 3               	.word 1024,0,946,65144,724,64811,391,64589
0000C0r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0000C0r 3               	.word 64512,0,64589,391,64811,724,65144,946
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create trail
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               trail:
0000C0r 3               	ldy #1
0000C0r 3               	lda (z80_ix),y 	; time remaining.
0000C0r 3               	sec
0000C0r 3               	sbc #1
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	bne :+
0000C0r 3               	jmp trailk		; time to switch it off.
0000C0r 3               :
0000C0r 3               	jsr qrand		; get a random number.
0000C0r 3               	lsr a 			; x or y axis?
0000C0r 3               	bcc :+
0000C0r 3               	jmp trailv		; use y.
0000C0r 3               :
0000C0r 3               ; Trail horizontal
0000C0r 3               
0000C0r 3               	lsr a 			; which direction?
0000C0r 3               	bcc :+
0000C0r 3               	jmp traill		; go left.
0000C0r 3               :
0000C0r 3               ; Trail right
0000C0r 3               
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1	 		; go right.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Trail left
0000C0r 3               
0000C0r 3               traill:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1 			; go left.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Trail vertical
0000C0r 3               
0000C0r 3               trailv:
0000C0r 3               	lsr a		 	; which direction?
0000C0r 3               	bcc :+
0000C0r 3               	jmp trailu		; go up.
0000C0r 3               :
0000C0r 3               ; Trail down
0000C0r 3               
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1 			; go down.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Trail up
0000C0r 3               
0000C0r 3               trailu:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1 			; go up.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Kill trail
0000C0r 3               
0000C0r 3               trailk:
0000C0r 3               	lda #200		; set off-screen to kill vapour trail.
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create laser beam
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               laser:
0000C0r 3               	ldy #1
0000C0r 3               	lda (z80_ix),y 		; direction.
0000C0r 3               	ror a 			; left or right?
0000C0r 3               	bcs :+
0000C0r 3               	jmp laserl		; move left.
0000C0r 3               :
0000C0r 3               ; Laser right
0000C0r 3               
0000C0r 3               	lda #8			; distance to travel.
0000C0r 3               	sta z80_b
0000C0r 3               	jmp laserm		; move laser.
0000C0r 3               
0000C0r 3               ; Laser left
0000C0r 3               
0000C0r 3               laserl:
0000C0r 3               	lda #248		; distance to travel.
0000C0r 3               	sta z80_b
0000C0r 3               laserm:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y		; x position.
0000C0r 3               	clc
0000C0r 3               	adc z80_b		; add distance.
0000C0r 3               	sta (z80_ix),y		; set new x coordinate.
0000C0r 3               
0000C0r 3               ; Test new block.
0000C0r 3               
0000C0r 3               	sta dispx 		; set x for block collision detection purposes.
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y 		; get y.
0000C0r 3               	sta dispy		; set coordinate for collision test.
0000C0r 3               	jsr tstbl 		; get block type there.
0000C0r 3               	cmp #WALL		; is it solid?
0000C0r 3               	bne :+
0000C0r 3               	jmp trailk		; yes, it cannot pass.
0000C0r 3               :
0000C0r 3               .if pflag .or dflag
0000C0r 3                       cmp #FODDER             ; is it fodder?
0000C0r 3                       bne :+
0000C0r 3                       jsr fdchk               ; remove fodder block.
0000C0r 3                       jmp trailk              ; destroy laser.
0000C0r 3               :
0000C0r 3               .endif
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Dots mask
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               dots:	.byte 128,64,32,16,8,4,2,1
0000C0r 3               
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Plot, preserving de.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               plotde:
0000C0r 3               	lda z80_d 		; put de on stack.
0000C0r 3               	pha
0000C0r 3               	lda z80_e
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	jsr plot 		; plot pixel.
0000C0r 3               
0000C0r 3               	pla			; restore de from stack.
0000C0r 3               	sta z80_e
0000C0r 3               	pla
0000C0r 3               	sta z80_d
0000C0r 3               
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Shoot a laser.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shoot:
0000C0r 3               	sta z80_c		; store direction in c register.
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	clc
0000C0r 3               shoot1:
0000C0r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0000C0r 3               	sta z80_l 		; puty y coordinate in l.
0000C0r 3               
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y 		; x coordinate in h.
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	lda z80_i		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcs :+
0000C0r 3               	jmp vapou2		; failed, restore ix.
0000C0r 3               :
0000C0r 3               	lda #0
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y 		; set up a laser.
0000C0r 3               
0000C0r 3               	lda z80_c
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y 		; set the direction.
0000C0r 3               
0000C0r 3               	lda z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; set y coordinate.
0000C0r 3               
0000C0r 3               	ror z80_c		; check direction we want.
0000C0r 3               	bcc :+
0000C0r 3               	jmp shootr		; shoot right.
0000C0r 3               :
0000C0r 3               	lda z80_h		; X position.
0000C0r 3               shoot0:
0000C0r 3               	and #248		; align on character boundary.
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; set x coordinate.
0000C0r 3               	jmp vapou0 		; draw first image.
0000C0r 3               shootr:
0000C0r 3               	lda z80_h		; x position.
0000C0r 3               	clc
0000C0r 3               	adc #15			; look right.
0000C0r 3               	jmp shoot0		; align and continue.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create a bit of vapour trail.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               vapour:
0000C0r 3               	lda z80_i		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	clc
0000C0r 3               vapou3:
0000C0r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0000C0r 3               	sta z80_l
0000C0r 3               
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y 		; x coordinate.
0000C0r 3               	adc #7
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcc :+
0000C0r 3               	jmp vapou1		; no, we can use it.
0000C0r 3               :
0000C0r 3               vapou2:
0000C0r 3               	pla
0000C0r 3               	sta z80_x
0000C0r 3               	pla
0000C0r 3               	sta z80_i
0000C0r 3               	rts
0000C0r 3               vapou1:
0000C0r 3               	lda z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; set up y.
0000C0r 3               
0000C0r 3               	lda z80_h
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y 		; set up x coordinate.
0000C0r 3               
0000C0r 3               	jsr qrand		; get quick random number.
0000C0r 3               	and #15			; random time.
0000C0r 3               	clc
0000C0r 3               	adc #15			; minimum time on screen.
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y		; set time on screen.
0000C0r 3               
0000C0r 3               	lda #1
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; define particle as vapour trail.
0000C0r 3               vapou0:
0000C0r 3               	jsr chkxy		; plot first position.
0000C0r 3               	jmp vapou2
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create a user particle.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               ptusr:
0000C0r 3               	sta z80_f		; store timer.
0000C0r 3               
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	clc
0000C0r 3               	adc #7			; mid-point of sprite.
0000C0r 3               	sta z80_l
0000C0r 3               
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y 		; x coordinate.
0000C0r 3               	clc
0000C0r 3               	adc #7			; mid-point of sprite.
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcs ptusr1
0000C0r 3               	rts 			; out of slots, can't generate anything.
0000C0r 3               ptusr1:
0000C0r 3               	lda z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y 		; set up y.
0000C0r 3               
0000C0r 3               	lda z80_h
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; set up x coordinate.
0000C0r 3               
0000C0r 3               	lda z80_f 		; restore timer.
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y		; set time on screen.
0000C0r 3               
0000C0r 3               	lda #7
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; define particle as user particle.
0000C0r 3               
0000C0r 3               	jmp chkxy		; plot first position.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create a vertical or horizontal star.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               star:
0000C0r 3               	lda z80_i		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcs star7		; found one we can use.
0000C0r 3               star0:
0000C0r 3               	pla 			; restore sprite pointer.
0000C0r 3               	sta z80_x
0000C0r 3               	pla
0000C0r 3               	sta z80_i
0000C0r 3               	rts 			; out of slots, can't generate anything.
0000C0r 3               star7:
0000C0r 3               	lda z80_c		; direction.
0000C0r 3               	and #3 			; is it left?
0000C0r 3               	bne :+
0000C0r 3               	jmp star1 		; yes, it's left.
0000C0r 3               :
0000C0r 3               	cmp #1 			; is it right?
0000C0r 3               	bne :+
0000C0r 3               	jmp star2 		; yes, it's right.
0000C0r 3               :
0000C0r 3               	cmp #2 			; is it up?
0000C0r 3               	bne :+
0000C0r 3               	jmp star3 		; yes, it's up.
0000C0r 3               :
0000C0r 3               	ldy wntopx 		; get edge of screen.
0000C0r 3               	iny			; down one pixel.
0000C0r 3               	tya
0000C0r 3               star8:
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y 		; set y coord.
0000C0r 3               	jsr qrand 		; get quick random number.
0000C0r 3               star9:
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; set x position.
0000C0r 3               
0000C0r 3               	lda z80_c		; direction.
0000C0r 3               	and #3			; zero to three.
0000C0r 3               	clc
0000C0r 3               	adc #3			; 3 to 6 for starfield.
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; define particle as star.
0000C0r 3               	jsr chkxy		; plot first position.
0000C0r 3               	jmp star0
0000C0r 3               star1:
0000C0r 3               	jsr qrand		; get quick random number.
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y 		; set y coord.
0000C0r 3               
0000C0r 3               	lda wnrgtx 		; get edge of screen.
0000C0r 3               	clc
0000C0r 3               	adc #15			; add width of sprite minus 1.
0000C0r 3               	jmp star9
0000C0r 3               star2:
0000C0r 3               	jsr qrand 		; get quick random number.
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; set y coord.
0000C0r 3               
0000C0r 3               	lda wnlftx		; get edge of screen.
0000C0r 3               	jmp star9
0000C0r 3               star3:
0000C0r 3               	lda wnbotx 		; get edge of screen.
0000C0r 3               	clc
0000C0r 3               	adc #15 		; height of sprite minus one pixel.
0000C0r 3               	jmp star8
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Find particle slot for lasers or vapour trail.
0000C0r 3               ; can't use alternate accumulator.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               fpslot:
0000C0r 3               	lda #<SHRAPN 		; shrapnel table.
0000C0r 3               	sta z80_x
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_i
0000C0r 3               
0000C0r 3               	lda #NUMSHR		; number of pieces in table.
0000C0r 3               	sta z80_b
0000C0r 3               fpslt0:
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y		; get type.
0000C0r 3               	asl a  			; is this slot in use?
0000C0r 3               	bcc :+
0000C0r 3               	rts			; no, we can use it.
0000C0r 3               :
0000C0r 3               	clc			; point to more shrapnel.
0000C0r 3               	lda z80_x
0000C0r 3               	adc #SHRSIZ
0000C0r 3               	sta z80_x
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_i
0000C0r 3               :
0000C0r 3               	dec z80_b		; repeat for all shrapnel.
0000C0r 3               	bne fpslt0
0000C0r 3               
0000C0r 3               	clc
0000C0r 3               	rts 			; out of slots, can't generate anything.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create an explosion at sprite position.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               explod:
0000C0r 3               	sta z80_c 		; particles to create.
0000C0r 3               
0000C0r 3               	lda z80_i 		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	sta z80_l
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y		; x coordinate.
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	lda #<SHRAPN		; shrapnel table.
0000C0r 3               	sta z80_x
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_i
0000C0r 3               
0000C0r 3               	lda #NUMSHR		; number of pieces in table.
0000C0r 3               	sta explcnt
0000C0r 3               expld0:
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y		; get type.
0000C0r 3               	asl a 			; is this slot in use?
0000C0r 3               	bcs expld1		; no, we can use it.
0000C0r 3               expld2:
0000C0r 3               	clc
0000C0r 3               	lda z80_x
0000C0r 3               	adc #SHRSIZ
0000C0r 3               	sta z80_x
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_i
0000C0r 3               :
0000C0r 3               	dec explcnt		; repeat for all shrapnel.
0000C0r 3               	bne expld0
0000C0r 3               expld3:
0000C0r 3               	pla			; restore sprite pointer.
0000C0r 3               	sta z80_x
0000C0r 3               	pla
0000C0r 3               	sta z80_i
0000C0r 3               	rts 			; out of slots, can't generate any more.
0000C0r 3               
0000C0r 3               expld1:
0000C0r 3               	lda z80_c		; shrapnel counter.
0000C0r 3               	and #15			; 0 to 15.
0000C0r 3               	clc			; add to x.
0000C0r 3               	adc z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; y coord.
0000C0r 3               
0000C0r 3               	lda seed3 		; crap random number.
0000C0r 3               	and #15			; 0 to 15.
0000C0r 3               	clc 			; add to y.
0000C0r 3               	adc z80_h
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; x coord.
0000C0r 3               
0000C0r 3               	lda #2
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; switch it on.
0000C0r 3               
0000C0r 3               	jsr chkxy		; plot first position.
0000C0r 3               	jsr qrand		; quick random angle.
0000C0r 3               	and #60 		; keep within range.
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y		; angle.
0000C0r 3               
0000C0r 3               	dec z80_c		; one less piece of shrapnel to generate.
0000C0r 3               	bne expld2 		; back to main explosion loop.
0000C0r 3               	jmp expld3 		; restore sprite pointer and exit.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Quick random
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               qrand:
0000C0r 3               	jsr random		; r register.
0000C0r 3               	eor seed3		; combine with seed.
0000C0r 3               	sta seed3 		; new seed.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Display all shrapnel.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               dshrp:
0000C0r 3               	lda #<plotde		; display routine.
0000C0r 3               	sta proshx+1
0000C0r 3               	lda #>plotde
0000C0r 3               	sta proshx+2
0000C0r 3               	jsr proshr		; process shrapnel.
0000C0r 3               
0000C0r 3               	lda #<prosh1		; processing routine.
0000C0r 3               	sta proshx+1
0000C0r 3               	lda #>prosh1
0000C0r 3               	sta proshx+2
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;------------------------------------------------------
0000C0r 3               ; Particle engine.
0000C0r 3               ;
0000C0r 3               ; Init particle data for 55 particles in SHRAPN table.
0000C0r 3               ; Every particle has 6 bytes.
0000C0r 3               ;
0000C0r 3               ; global:	-
0000C0r 3               ; local:	x,y,hl
0000C0r 3               ; calls:	-
0000C0r 3               ;------------------------------------------------------
0000C0r 3               
0000C0r 3               inishr:
0000C0r 3               	lda #<SHRAPN 		; table.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	ldx #NUMSHR		; shrapnel pieces to process.
0000C0r 3               inish0:
0000C0r 3               	lda #255 		; kill the shrapnel.
0000C0r 3               	sta (z80_hl),y
0000C0r 3               
0000C0r 3               	clc 			; point there.
0000C0r 3               	lda z80_l
0000C0r 3               	adc #SHRSIZ		; distance to next.
0000C0r 3               	sta z80_l
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	dex
0000C0r 3               	bne inish0 		; round again.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;------------------------------------------------------
0000C0r 3               ; Check for collision between laser and sprite.
0000C0r 3               ;------------------------------------------------------
0000C0r 3               
0000C0r 3               lcol:
0000C0r 3               	lda #<SHRAPN		; shrapnel table.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	lda #NUMSHR		; number of pieces in table.
0000C0r 3               	sta z80_b
0000C0r 3               lcol0:
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; get type.
0000C0r 3               	beq lcol1		; yes, check collision.
0000C0r 3               lcol3:
0000C0r 3               	clc			; point to more shrapnel.
0000C0r 3               	lda z80_l
0000C0r 3               	adc #SHRSIZ
0000C0r 3               	sta z80_l
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	dec z80_b		; repeat for all shrapnel.
0000C0r 3               	bne lcol0
0000C0r 3               	clc
0000C0r 3               	rts 			; no collision, carry not set.
0000C0r 3               lcol1:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_hl),y		; get y.
0000C0r 3               	sec
0000C0r 3               	ldy #8
0000C0r 3               	sbc (z80_ix),y		; subtract sprite y.
0000C0r 3               lcolh:
0000C0r 3               	cmp #SPR_HGT 		; within range?
0000C0r 3               	bcc :+
0000C0r 3               	jmp lcol2		; no, missed.
0000C0r 3               :
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_hl),y 		; get x.
0000C0r 3               	sec
0000C0r 3               	ldy #9
0000C0r 3               	sbc (z80_ix),y 		; subtract sprite y.
0000C0r 3               	cmp #16			; within range?
0000C0r 3               	bcs :+
0000C0r 3               	jmp lcol4 		; yes, collision occurred.
0000C0r 3               :
0000C0r 3               lcol2:
0000C0r 3               	jmp lcol3
0000C0r 3               lcol4:
0000C0r 3               	sec
0000C0r 3               	rts 			; return with carry set for collision.
0000C0r 3               .endif
0000C0r 3               
0000C0r 3               ;------------------------------------------------------
0000C0r 3               ; Main game engine code starts here.
0000C0r 3               ; After initialisation, mloop is the main loop
0000C0r 3               ;------------------------------------------------------
0000C0r 3               
0000C0r 3               game:
0000C0r 3               
0000C0r 3               ; Set up screen address table.
0000C0r 3               
0000C0r 3               setsat:
0000C0r 3  A9 00        	lda #<CharAddress	; start of screen.
0000C2r 3  85 rr        	sta scraddr
0000C4r 3  A9 10        	lda #>CharAddress
0000C6r 3  85 rr        	sta scraddr+1
0000C8r 3               
0000C8r 3  A0 00        	ldy #0			; vertical lines on screen.
0000CAr 3               setsa0:
0000CAr 3  A5 rr        	lda scraddr
0000CCr 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000CFr 3  A5 rr        	lda scraddr+1
0000D1r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000D4r 3  20 rr rr     	jsr nline		; next line down.
0000D7r 3  C8           	iny			; next position in table.
0000D8r 3  D0 F0        	bne setsa0
0000DAr 3               
0000DAr 3               ; Set up colour address table
0000DAr 3               
0000DAr 3               setsof:
0000DAr 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000DCr 3  85 rr        	sta bufaddr
0000DEr 3  A9 96        	lda #>ColorAttr
0000E0r 3  85 rr        	sta bufaddr+1
0000E2r 3               
0000E2r 3  A0 00        	ldy #0			; vertical lines on screen.
0000E4r 3               setof0:
0000E4r 3  A5 rr        	lda bufaddr
0000E6r 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000E9r 3  A5 rr        	lda bufaddr+1
0000EBr 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000EEr 3  18           	clc			; next line down.
0000EFr 3  A5 rr        	lda bufaddr
0000F1r 3  69 16        	adc #ScrWidth
0000F3r 3  85 rr        	sta bufaddr
0000F5r 3  90 02        	bcc :+
0000F7r 3  E6 rr        	inc bufaddr+1
0000F9r 3               :
0000F9r 3  C8           	iny			; next position in table.
0000FAr 3  C0 0B        	cpy #ScrHeight/2
0000FCr 3  D0 E6        	bne setof0
0000FEr 3               
0000FEr 3               ; Init graphics mode
0000FEr 3               
0000FEr 3  20 rr rr     	jsr init
000101r 3               
000101r 3               ; Init joysticks
000101r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
000104r 3               
000104r 3               rpblc2:
000104r 3               .if pflag
000104r 3               	jsr inishr 		; initialise particle engine.
000104r 3               .endif
000104r 3               evintr:
000104r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000107r 3               
000107r 3  A9 02        	lda #WALL 		; write default property.
000109r 3  A2 00        	ldx #0
00010Br 3               clrmap:
00010Br 3  9D 00 04     	sta MAP,x 		; block properties.
00010Er 3  9D 00 05     	sta MAP+256,x
000111r 3  E8           	inx
000112r 3  D0 F7        	bne clrmap
000114r 3               
000114r 3               .if oflag
000114r 3               	jsr iniob 		; initialise objects.
000114r 3               .endif
000114r 3  A9 00        	lda #0			; put zero in accumulator.
000116r 3  85 rr        	sta gamwon		; reset game won flag.
000118r 3               
000118r 3  20 rr rr     	jsr inisc 		; init the score.
00011Br 3               mapst:
00011Br 3  AD rr rr     	lda stmap 		; start position on map.
00011Er 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
000121r 3               
000121r 3               inipbl:
000121r 3               .if aflag
000121r 3               	lda #<eop		; reset blockpointer
000121r 3               	sta pbptr
000121r 3               	lda #>eop
000121r 3               	sta pbptr+1
000121r 3               .endif
000121r 3  20 rr rr     	jsr initsc 		; set up first screen.
000124r 3               
000124r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
000126r 3  85 rr        	sta z80_x
000128r 3  A9 rr        	lda #>ssprit
00012Ar 3  85 rr        	sta z80_i
00012Cr 3               evini:
00012Cr 3  20 rr rr     	jsr evnt13 		; initialisation.
00012Fr 3               
00012Fr 3               ; Two restarts.
00012Fr 3               ; First restart - clear all sprites and initialise everything.
00012Fr 3               
00012Fr 3               rstrt:
00012Fr 3  20 rr rr     	jsr rsevt 		; restart events.
000132r 3  20 rr rr     	jsr xspr 		; clear sprite table.
000135r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000138r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
00013Br 3  4C rr rr     	jmp rstrt0
00013Er 3               
00013Er 3               ; Second restart - clear all but player, and don't initialise him.
00013Er 3               
00013Er 3               rstrtn:
00013Er 3  20 rr rr     	jsr rsevt		; restart events.
000141r 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
000144r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000147r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
00014Ar 3               
00014Ar 3               ; Set up the player and/or enemy sprites.
00014Ar 3               
00014Ar 3               rstrt0:
00014Ar 3  A9 00        	lda #0 			; zero in accumulator.
00014Cr 3  85 rr        	sta nexlev 		; reset next level flag.
00014Er 3  85 rr        	sta restfl 		; reset restart flag.
000150r 3  85 rr        	sta deadf 		; reset dead flag.
000152r 3               
000152r 3  20 rr rr     	jsr droom 		; show screen layout.
000155r 3               rpblc0:
000155r 3               .if pflag
000155r 3               	jsr inishr 		; initialise particle engine.
000155r 3               .endif
000155r 3               .if aflag
000155r 3               	jsr rbloc		; draw blocks for this screen
000155r 3               .endif
000155r 3               .if oflag
000155r 3               	jsr shwob		; draw objects.
000155r 3               .endif
000155r 3               
000155r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000157r 3  85 rr        	sta z80_x
000159r 3  A9 rr        	lda #>sprtab
00015Br 3  85 rr        	sta z80_i
00015Dr 3  20 rr rr     	jsr dspr 		; display sprites.
000160r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000162r 3  85 rr        	sta z80_x
000164r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000166r 3  85 rr        	sta z80_i
000168r 3  20 rr rr     	jsr dspr 		; display sprites.
00016Br 3               mloop:
00016Br 3  20 rr rr     	jsr vsync 		; synchronise with display.
00016Er 3               
00016Er 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000170r 3  85 rr        	sta z80_x
000172r 3  A9 rr        	lda #>sprtab
000174r 3  85 rr        	sta z80_i
000176r 3  20 rr rr     	jsr dspr 		; display even sprites.
000179r 3               
000179r 3               ;	jsr plsnd 		; play sounds.
000179r 3  20 rr rr     	jsr vsync 		; synchronise with display.
00017Cr 3  20 rr rr     	jsr proshr
00017Fr 3               
00017Fr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000181r 3  85 rr        	sta z80_x
000183r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000185r 3  85 rr        	sta z80_i
000187r 3  20 rr rr     	jsr dspr 		; display odd sprites.
00018Ar 3               
00018Ar 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00018Cr 3  85 rr        	sta z80_x
00018Er 3  A9 rr        	lda #>(ssprit)
000190r 3  85 rr        	sta z80_i
000192r 3               evlp1:
000192r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000195r 3  20 rr rr     	jsr pspr 		; process sprites.
000198r 3               
000198r 3               ; Main loop events.
000198r 3               
000198r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00019Ar 3  85 rr        	sta z80_x
00019Cr 3  A9 rr        	lda #>ssprit
00019Er 3  85 rr        	sta z80_i
0001A0r 3               evlp2:
0001A0r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
0001A3r 3               bsortx:
0001A3r 3  20 rr rr     	jsr bsort 		; sort sprites.
0001A6r 3               
0001A6r 3  A5 rr        	lda nexlev		; finished level flag.
0001A8r 3  D0 1F        	bne newlev		; is set, go to next level.
0001AAr 3  A5 rr        	lda gamwon		; finished game flag.
0001ACr 3  D0 2A        	bne evwon		; is set, finish the game.
0001AEr 3  A5 rr        	lda restfl 		; finished level flag.
0001B0r 3  C9 01        	cmp #1			; has it been set?
0001B2r 3  D0 03        	bne :+
0001B4r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
0001B7r 3               :
0001B7r 3  C9 02        	cmp #2			; has it been set?
0001B9r 3  D0 03        	bne :+
0001BBr 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
0001BEr 3               :
0001BEr 3  A5 rr        	lda deadf 		; dead flag.
0001C0r 3  D0 1C        	bne pdead		; yes, player dead.
0001C2r 3               
0001C2r 3               ; back to start of main loop.
0001C2r 3               
0001C2r 3  E6 rr        	inc frmno
0001C4r 3  E6 rr        	inc clock
0001C6r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
0001C9r 3               
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               ; Read blocks from list and update screen accordingly.
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               
0001C9r 3               .if aflag
0001C9r 3               rbloc:
0001C9r 3               	lda #<eop		; reset blockpointer
0001C9r 3               	sta pbbuf
0001C9r 3               	lda #>eop
0001C9r 3               	sta pbbuf+1
0001C9r 3               
0001C9r 3               rbloc2:
0001C9r 3               	lda pbbuf			; check for last block
0001C9r 3               	cmp pbptr
0001C9r 3               	bne rbloc1
0001C9r 3               	lda pbbuf+1
0001C9r 3               	cmp pbptr+1
0001C9r 3               	bne rbloc1
0001C9r 3               	rts
0001C9r 3               rbloc1:
0001C9r 3               	ldy #0
0001C9r 3               	lda (pbbuf),y		; check if block for this scno
0001C9r 3               	cmp scno
0001C9r 3               	bne rbloc0		; if not, skip
0001C9r 3               	iny
0001C9r 3               	lda (pbbuf),y		; get y
0001C9r 3               	sta dispy
0001C9r 3               	iny
0001C9r 3               	lda (pbbuf),y		; get x
0001C9r 3               	sta dispx
0001C9r 3               	iny
0001C9r 3               	lda (pbbuf),y		; get blocknr
0001C9r 3               	jsr pattr2		; draw block
0001C9r 3               rbloc0:
0001C9r 3               	clc			; point to next block
0001C9r 3               	lda pbbuf
0001C9r 3               	adc #4
0001C9r 3               	sta pbbuf
0001C9r 3               	bcc rbloc2
0001C9r 3               	inc pbbuf+1
0001C9r 3               	jmp rbloc2
0001C9r 3               .endif
0001C9r 3               
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               ; New level
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               
0001C9r 3               newlev:
0001C9r 3  A5 rr        	lda scno 			; current screen.
0001CBr 3  18           	clc
0001CCr 3  69 01        	adc #1				; next screen.
0001CEr 3  CD rr rr     	cmp numsc 			; total number of screens.
0001D1r 3  B0 05        	bcs evwon			; yes, game finished.
0001D3r 3  85 rr        	sta scno			; set new level number.
0001D5r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001D8r 3               
0001D8r 3               evwon:
0001D8r 3  20 rr rr     	jsr evnt18		 	; game completed.
0001DBr 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001DEr 3               
0001DEr 3               ;----------------------------------------------------------
0001DEr 3               ; Player dead.
0001DEr 3               ;----------------------------------------------------------
0001DEr 3               
0001DEr 3               pdead:
0001DEr 3  A9 00        	lda #0				; zeroise accumulator.
0001E0r 3  85 rr        	sta deadf			; reset dead flag.
0001E2r 3               evdie:
0001E2r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001E5r 3  A5 rr        	lda numlif			; number of lives.
0001E7r 3  F0 03        	beq :+
0001E9r 3  4C rr rr     	jmp rstrt 			; restart game.
0001ECr 3               :
0001ECr 3               evfail:
0001ECr 3  20 rr rr     	jsr evnt17 			; failure event.
0001EFr 3  4C rr rr     	jmp game			; restart game
0001F2r 3               
0001F2r 3               ;----------------------------------------------------------
0001F2r 3               ; Tidy things up
0001F2r 3               ;----------------------------------------------------------
0001F2r 3               
0001F2r 3               tidyup:
0001F2r 3  A0 00        	ldy #0				; digits to check.
0001F4r 3               tidyu2:
0001F4r 3  B9 rr rr     	lda score,y 			; get score digit.
0001F7r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001FAr 3  90 07        	bcc tidyu0			; high score is bigger.
0001FCr 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001FEr 3  C8           	iny				; next digit of high score.
0001FFr 3  C0 06        	cpy #6
000201r 3  D0 F1        	bne tidyu2			; repeat for all digits
000203r 3               tidyu0:
000203r 3  A9 rr        	lda #<score			; return pointing to score.
000205r 3  85 rr        	sta z80_c
000207r 3  A9 rr        	lda #>score
000209r 3  85 rr        	sta z80_b
00020Br 3  60           	rts
00020Cr 3               tidyu1:
00020Cr 3  A0 05        	ldy #5
00020Er 3               tidyu3:
00020Er 3  B9 rr rr     	lda score,y			; score.
000211r 3  99 rr rr     	sta hiscor,y			; high score.
000214r 3  88           	dey
000215r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000217r 3               evnewh:
000217r 3  20 rr rr     	jsr evnt19			; new high score event.
00021Ar 3  4C rr rr     	jmp tidyu0			; tidy up.
00021Dr 3               
00021Dr 3               ;--------------------------------------------------
00021Dr 3               ; Restart event.
00021Dr 3               ;--------------------------------------------------
00021Dr 3               
00021Dr 3               rsevt:
00021Dr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00021Fr 3  85 rr        	sta z80_x
000221r 3  A9 rr        	lda #>ssprit
000223r 3  85 rr        	sta z80_i
000225r 3               
000225r 3               evrs:
000225r 3  4C rr rr     	jmp evnt14	 		; call restart event.
000228r 3               
000228r 3               ;------------------------------------------------------------------
000228r 3               ; Copy number passed in a to string position bc, right-justified.
000228r 3               ;
000228r 3               ; Input:
000228r 3               ;  A  = number
000228r 3               ;  BC = string address
000228r 3               ;
000228r 3               ; Output:
000228r 3               ;  BC = string with number
000228r 3               ;-----------------------------------------------------------------
000228r 3               
000228r 3               num2ch:
000228r 3  85 rr        	sta z80_d		; Save number
00022Ar 3               
00022Ar 3  A9 00        	lda #0
00022Cr 3  85 rr        	sta flag
00022Er 3               numdg3:
00022Er 3  A2 64        	ldx #100		; hundreds column.
000230r 3  86 rr        	stx z80_e
000232r 3  20 rr rr     	jsr numdg		; show digit.
000235r 3               numdg2:
000235r 3  A2 0A        	ldx #10			; tens column.
000237r 3  86 rr        	stx z80_e
000239r 3  20 rr rr     	jsr numdg		; show digit.
00023Cr 3               
00023Cr 3  E6 rr        	inc flag
00023Er 3  A2 01        	ldx #1			; units column.
000240r 3  86 rr        	stx z80_e
000242r 3               numdg:
000242r 3  A9 30        	lda #48			; clear digit.
000244r 3  85 rr        	sta z80_a
000246r 3               numdg1:
000246r 3  A5 rr        	lda z80_d
000248r 3  C5 rr        	cmp z80_e
00024Ar 3  90 0E        	bcc numdg0		; nothing to show.
00024Cr 3  38           	sec
00024Dr 3  A5 rr        	lda z80_d
00024Fr 3  E5 rr        	sbc z80_e		; subtract from column.
000251r 3  85 rr        	sta z80_d
000253r 3  E6 rr        	inc z80_a		; increment digit.
000255r 3  E6 rr        	inc flag
000257r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
00025Ar 3               numdg0:
00025Ar 3  A0 00        	ldy #0
00025Cr 3  A5 rr        	lda z80_a
00025Er 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000260r 3  A5 rr        	lda flag
000262r 3  F0 06        	beq :+
000264r 3  E6 rr        	inc z80_c		; next buffer position.
000266r 3  D0 02        	bne :+
000268r 3  E6 rr        	inc z80_b
00026Ar 3               :
00026Ar 3  60           	rts
00026Br 3               num2dd:
00026Br 3  85 rr        	sta z80_d		; Save number
00026Dr 3               
00026Dr 3  A9 01        	lda #1
00026Fr 3  85 rr        	sta flag
000271r 3               
000271r 3  4C rr rr     	jmp numdg2
000274r 3               num2td:
000274r 3  85 rr        	sta z80_d		; Save number
000276r 3               
000276r 3  A9 01        	lda #1
000278r 3  85 rr        	sta flag
00027Ar 3  4C rr rr     	jmp numdg3
00027Dr 3               
00027Dr 3               ;---------------------------------------------------------
00027Dr 3               ; Reset score to "000000"
00027Dr 3               ;---------------------------------------------------------
00027Dr 3               
00027Dr 3               inisc:
00027Dr 3  A9 30        	lda #'0'
00027Fr 3  A2 05        	ldx #5			; digits to initialise.
000281r 3               inisc0:
000281r 3  9D rr rr     	sta score,x 		; write zero digit.
000284r 3  CA           	dex			; next column.
000285r 3  10 FA        	bpl inisc0		; repeat for all digits.
000287r 3               
000287r 3  60           	rts
000288r 3               
000288r 3               ;-----------------------------------------------------
000288r 3               ; Multiply h by d and return in hl.
000288r 3               ;
000288r 3               ; Input:
000288r 3               ;  H = first number
000288r 3               ;  D = second number
000288r 3               ;
000288r 3               ; Output:
000288r 3               ;  HL = result H x D
000288r 3               ;-----------------------------------------------------
000288r 3               
000288r 3               imul:
000288r 3  A5 rr        	lda z80_d		; HL = H * D
00028Ar 3  85 rr        	sta z80_e
00028Cr 3  A5 rr        	lda z80_h
00028Er 3  85 rr        	sta z80_c		; make c first multiplier.
000290r 3               imul0:
000290r 3  A9 00        	lda #0			; zeroise total.
000292r 3  85 rr        	sta z80_l
000294r 3  85 rr        	sta z80_h
000296r 3               
000296r 3  A5 rr        	lda z80_h
000298r 3  85 rr        	sta z80_d		; zeroise high byte.
00029Ar 3               
00029Ar 3  A9 08        	lda #8			; repeat 8 times.
00029Cr 3  85 rr        	sta z80_b
00029Er 3               imul1:
00029Er 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
0002A0r 3  90 0E        	bcc imul2		; wasn't set.
0002A2r 3  18           	clc			; bit was set, so add de.
0002A3r 3  A5 rr        	lda z80_l
0002A5r 3  65 rr        	adc z80_e
0002A7r 3  85 rr        	sta z80_l
0002A9r 3  A5 rr        	lda z80_h
0002ABr 3  65 rr        	adc z80_d
0002ADr 3  85 rr        	sta z80_h
0002AFr 3  18           	clc 			; reset carry.
0002B0r 3               imul2:
0002B0r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
0002B2r 3  26 rr        	rol z80_d
0002B4r 3  C6 rr        	dec z80_b
0002B6r 3  D0 E6        	bne imul1		; repeat 8 times.
0002B8r 3               
0002B8r 3  60           	rts
0002B9r 3               
0002B9r 3               ;-----------------------------------------------
0002B9r 3               ; Divide d by e and return in d, remainder in a.
0002B9r 3               ;
0002B9r 3               ; Input:
0002B9r 3               ;  D = first number
0002B9r 3               ;  E = second number
0002B9r 3               ;
0002B9r 3               ; Output:
0002B9r 3               ;  D = result D/E
0002B9r 3               ;  A = remainder
0002B9r 3               ;-----------------------------------------------
0002B9r 3               
0002B9r 3               idiv:
0002B9r 3  A9 00        	lda #0
0002BBr 3  A0 08        	ldy #8		 	; bits to shift.
0002BDr 3  06 rr        	asl z80_d
0002BFr 3               idiv0:
0002BFr 3  2A           	rol a 			; multiply d by 2.
0002C0r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
0002C2r 3  90 02        	bcc idiv1		; e is greater, no division this time.
0002C4r 3  E5 rr        	sbc z80_e		; subtract it.
0002C6r 3               idiv1:
0002C6r 3  26 rr        	rol z80_d		; rotate into d.
0002C8r 3  88           	dey
0002C9r 3  D0 F4        	bne idiv0		; repeat
0002CBr 3  60           	rts
0002CCr 3               
0002CCr 3               ;---------------------------------------------------
0002CCr 3               ; Play AY sound effect
0002CCr 3               ;---------------------------------------------------
0002CCr 3               
0002CCr 3               plsnd:
0002CCr 3  60           	rts
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Objects handling.
0002CDr 3               ; 32 bytes for image
0002CDr 3               ; 1 for colour
0002CDr 3               ; 3 for room, y and x
0002CDr 3               ; 3 for starting room, y and x.
0002CDr 3               ; 254 = disabled.
0002CDr 3               ; 255 = object in player"s pockets.
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Show items present.
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               .if oflag
0002CDr 3               shwob:
0002CDr 3               	lda #<objdta			; objects table.
0002CDr 3               	sta z80_l
0002CDr 3               	lda #>objdta
0002CDr 3               	sta z80_h
0002CDr 3               	lda numob 			; number of objects in the game.
0002CDr 3               	sta sprcnt
0002CDr 3               shwob0:
0002CDr 3               	ldy #33 			; distance to room number.
0002CDr 3               	lda (z80_hl),y 			; same as an item?
0002CDr 3               	cmp scno 			; current location.
0002CDr 3               	bne :+
0002CDr 3               	jsr dobj 			; yes, display object.
0002CDr 3               :
0002CDr 3               	clc
0002CDr 3               	lda z80_l
0002CDr 3               	adc #39 			; distance to next item.
0002CDr 3               	sta z80_l
0002CDr 3               	lda z80_h
0002CDr 3               	adc #0
0002CDr 3               	sta z80_h	 		; point to it.
0002CDr 3               	dec sprcnt
0002CDr 3               	bne shwob0 			; repeat for others.
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Display object.
0002CDr 3               ; hl must point to object's start address.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  HL = object address
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               dobj:
0002CDr 3               	ldy #32
0002CDr 3               	lda (z80_hl),y 			; point to y.
0002CDr 3               	sta objcol
0002CDr 3               	ldy #34
0002CDr 3               	lda (z80_hl),y 			; point to y.
0002CDr 3               	sta dispy
0002CDr 3               	iny
0002CDr 3               	lda (z80_hl),y 			; point to x.
0002CDr 3               	sta dispx
0002CDr 3               dobj1:
0002CDr 3               	jmp sprite 			; draw this sprite.
0002CDr 3               
0002CDr 3               ;--------------------------------------
0002CDr 3               ; Remove an object.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;--------------------------------------
0002CDr 3               
0002CDr 3               remob:
0002CDr 3               	cmp numob			; number of objects in game.
0002CDr 3               	bcc :+				; are we checking past the end?
0002CDr 3               	rts				; yes, can't get non-existent item.
0002CDr 3               :
0002CDr 3               	pha				; remember object.
0002CDr 3               	jsr getob			; pick it up if we haven't already got it.
0002CDr 3               	pla				; retrieve object number.
0002CDr 3               	jsr gotob			; get its address.
0002CDr 3               	lda #254
0002CDr 3               	ldy #33
0002CDr 3               	sta (z80_hl),y			; remove it.
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Pick up object number held in the accumulator.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               getob:
0002CDr 3               	cmp numob 		; number of objects in game.
0002CDr 3               	bcc :+			; are we checking past the end?
0002CDr 3               	rts			; yes, can't get non-existent item.
0002CDr 3               :
0002CDr 3               	jsr gotob 		; check if we already have it.
0002CDr 3               	cmp #255
0002CDr 3               	bne :+
0002CDr 3               	rts			; we already do.
0002CDr 3               :
0002CDr 3               	ldy #33
0002CDr 3               	lda (z80_hl),y		; is it on this screen?
0002CDr 3               	cmp scno 		; current screen.
0002CDr 3               	bne getob0		; not on screen, so nothing to delete.
0002CDr 3               
0002CDr 3               	lda #255
0002CDr 3               	sta (z80_hl),y		; pick it up.
0002CDr 3               	iny 			; point to y coord.
0002CDr 3               getob1:
0002CDr 3               	ldy #34
0002CDr 3               	lda (z80_hl),y		; y coord.
0002CDr 3               	sta dispy
0002CDr 3               	ldy #35
0002CDr 3               	lda (z80_hl),y 		; x coord.
0002CDr 3               	sta dispx
0002CDr 3               	jmp dobj1 		; delete object sprite.
0002CDr 3               getob0:
0002CDr 3               	lda #255
0002CDr 3               	sta (z80_hl),y 		; pick it up.
0002CDr 3               	rts
0002CDr 3               .endif
0002CDr 3               
0002CDr 3               ;-----------------------------------------------------------------
0002CDr 3               ; Got object check.
0002CDr 3               ; Call with object in accumulator, returns zero set if in pockets.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;-----------------------------------------------------------------
0002CDr 3               .if oflag .or mflag
0002CDr 3               gotob:
0002CDr 3               	cmp numob 		; number of objects in game.
0002CDr 3               	bcc :+ 			; are we checking past the end?
0002CDr 3               	jmp gotob0 		; yes, we can't have a non-existent object.
0002CDr 3               :
0002CDr 3               	jsr findob		; find the object.
0002CDr 3               gotob1:
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               gotob0:
0002CDr 3               	lda #254 		; missing.
0002CDr 3               	jmp gotob1
0002CDr 3               
0002CDr 3               findob:
0002CDr 3               	pha			; save object number
0002CDr 3               	lda #<objdta 		; objects.
0002CDr 3               	sta z80_l
0002CDr 3               	lda #>objdta
0002CDr 3               	sta z80_h
0002CDr 3               	pla			; retreive object number
0002CDr 3               	beq fndob1 		; is it zero? yes, skip loop.
0002CDr 3               	tax 			; loop counter
0002CDr 3               fndob2:
0002CDr 3               	clc
0002CDr 3               	lda z80_l
0002CDr 3               	adc #39 		; size of each object.
0002CDr 3               	sta z80_l
0002CDr 3               	bcc :+
0002CDr 3               	inc z80_h
0002CDr 3               :
0002CDr 3               	dex 			; repeat until we find address.
0002CDr 3               	bne fndob2
0002CDr 3               fndob1:
0002CDr 3               	ldy #33			; distance to room it's in.
0002CDr 3               	lda (z80_hl),y		; fetch status.
0002CDr 3               	rts
0002CDr 3               .endif
0002CDr 3               
0002CDr 3               ;---------------------------------------------
0002CDr 3               ; Drop object number at (dispx, dispy).
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;---------------------------------------------
0002CDr 3               
0002CDr 3               .if oflag
0002CDr 3               drpob:
0002CDr 3               	cmp numob 		; are we checking past the end?
0002CDr 3               	bcc :+
0002CDr 3               	rts			; yes, can't drop non-existent item.
0002CDr 3               :
0002CDr 3               	jsr gotob		; make sure object is in inventory.
0002CDr 3               	cmp scno		; already on this screen?
0002CDr 3               	bne :+
0002CDr 3               	rts			; yes, nothing to do.
0002CDr 3               :
0002CDr 3               	ldy #33
0002CDr 3               	lda scno
0002CDr 3               	sta (z80_hl),y		; bring onto screen.
0002CDr 3               	lda dispy		; sprite y coordinate.
0002CDr 3               	iny
0002CDr 3               	sta (z80_hl),y		; point to object y.
0002CDr 3               	lda dispx 		; sprite x coordinate.
0002CDr 3               	iny
0002CDr 3               	sta (z80_hl),y 		; point to object x
0002CDr 3               	jmp dobj		; draw the object sprite.
0002CDr 3               
0002CDr 3               ;-----------------------------------------------
0002CDr 3               ; Seek objects at sprite position.
0002CDr 3               ;
0002CDr 3               ; Output:
0002CDr 3               ;  A = object number, if not found A=255
0002CDr 3               ;-----------------------------------------------
0002CDr 3               
0002CDr 3               skobj:
0002CDr 3               	lda #<objdta 		; pointer to objects.
0002CDr 3               	sta z80_l
0002CDr 3               	lda #>objdta
0002CDr 3               	sta z80_h
0002CDr 3               
0002CDr 3               	lda numob 		; number of objects in game.
0002CDr 3               	sta z80_b 		; set up the loop counter.
0002CDr 3               skobj0:
0002CDr 3               	lda scno		; current room number.
0002CDr 3               	ldy #33
0002CDr 3               	cmp (z80_hl),y		; is object in here?
0002CDr 3               	bne :+
0002CDr 3               	jsr skobj1		; yes, check coordinates.
0002CDr 3               :
0002CDr 3               	clc			; point to next object in table.
0002CDr 3               	lda z80_l
0002CDr 3               	adc #39			; size of each object.
0002CDr 3               	sta z80_l
0002CDr 3               	bcc :+
0002CDr 3               	inc z80_h
0002CDr 3               :
0002CDr 3               	dec z80_b
0002CDr 3               	bne skobj0		; repeat for all objects.
0002CDr 3               
0002CDr 3               	lda #255		; end of list and nothing found, return 255.
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               skobj1:
0002CDr 3               	ldy #34			; point to y coordinate.
0002CDr 3               	lda (z80_hl),y		; point to y coordinate.
0002CDr 3               	sec
0002CDr 3               	ldy #var_newY
0002CDr 3               	sbc (z80_ix),y 		; subtract sprite y.
0002CDr 3               	clc
0002CDr 3               	adc #15			; add sprite height minus one.
0002CDr 3               	cmp #31			; within range?
0002CDr 3               	bcs skobj2		; no, ignore object.
0002CDr 3               
0002CDr 3               	ldy #35			; point to x coordinate now.
0002CDr 3               	lda (z80_hl),y 		; get coordinate.
0002CDr 3               	sec
0002CDr 3               	ldy #var_newX
0002CDr 3               	sbc (z80_ix),y 		; subtract the sprite x.
0002CDr 3               	clc			; add sprite width minus one.
0002CDr 3               	adc #15
0002CDr 3               	cmp #31			; within range?
0002CDr 3               	bcs skobj2		; no, ignore object.
0002CDr 3               
0002CDr 3               	pla			; remove return address from stack.
0002CDr 3               	pla
0002CDr 3               
0002CDr 3               	lda numob 		; objects in game.
0002CDr 3               	sec
0002CDr 3               	sbc z80_b		; subtract loop counter.
0002CDr 3               skobj2:
0002CDr 3               	rts			; accumulator now points to object.
0002CDr 3               .endif
0002CDr 3               
0002CDr 3               ;---------------------------------------------------------------------
0002CDr 3               ; Spawn a new sprite.
0002CDr 3               ;---------------------------------------------------------------------
0002CDr 3               
0002CDr 3               spawn:
0002CDr 3  A9 rr        	lda #<sprtab		; sprite table.
0002CFr 3  85 rr        	sta z80_l
0002D1r 3  A9 rr        	lda #>sprtab
0002D3r 3  85 rr        	sta z80_h
0002D5r 3               numsp1:
0002D5r 3  A9 0C        	lda #NUMSPR		; number of sprites.
0002D7r 3  85 rr        	sta spcnt
0002D9r 3               spaw0:
0002D9r 3  A0 00        	ldy #var_Type
0002DBr 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0002DDr 3  C9 FF        	cmp #255		; is it an unused slot?
0002DFr 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0002E1r 3               
0002E1r 3  18           	clc 			; point to next sprite in table.
0002E2r 3  A5 rr        	lda z80_l
0002E4r 3  69 12        	adc #TABSIZ		; size of each entry.
0002E6r 3  85 rr        	sta z80_l
0002E8r 3  90 02        	bcc :+
0002EAr 3  E6 rr        	inc z80_h
0002ECr 3               :
0002ECr 3  C6 rr        	dec spcnt		; one less iteration.
0002EEr 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0002F0r 3               
0002F0r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0002F0r 3               
0002F0r 3               spaw1:
0002F0r 3  A5 rr        	lda z80_i		; address of original sprite.
0002F2r 3  48           	pha
0002F3r 3  A5 rr        	lda z80_x
0002F5r 3  48           	pha
0002F6r 3               
0002F6r 3  A5 rr        	lda z80_l		; store spawned sprite address.
0002F8r 3  85 rr        	sta spptr
0002FAr 3  A5 rr        	lda z80_h
0002FCr 3  85 rr        	sta spptr+1
0002FEr 3               
0002FEr 3  A5 rr        	lda z80_c
000300r 3  A0 00        	ldy #var_Type
000302r 3  91 rr        	sta (z80_hl),y 		; set the type.
000304r 3  A0 05        	ldy #var_newType
000306r 3  91 rr        	sta (z80_hl),y		; copy
000308r 3               
000308r 3  A5 rr        	lda z80_b
00030Ar 3  A0 01        	ldy #var_Image
00030Cr 3  91 rr        	sta (z80_hl),y		; set the image.
00030Er 3  A0 06        	ldy #var_newImage
000310r 3  91 rr        	sta (z80_hl),y		; copy
000312r 3               
000312r 3  A9 00        	lda #0 				; frame zero.
000314r 3  A0 02        	ldy #var_Frame
000316r 3  91 rr        	sta (z80_hl),y		; set frame.
000318r 3  A0 07        	ldy #var_newFrame
00031Ar 3  91 rr        	sta (z80_hl),y		; copy
00031Cr 3               
00031Cr 3  A0 08        	ldy #8
00031Er 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000320r 3  A0 03        	ldy #3
000322r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000324r 3  A0 08        	ldy #8
000326r 3  91 rr        	sta (z80_hl),y		; copy
000328r 3               
000328r 3  A0 09        	ldy #9
00032Ar 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00032Cr 3  A0 04        	ldy #4
00032Er 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000330r 3  A0 09        	ldy #9
000332r 3  91 rr        	sta (z80_hl),y		; copy
000334r 3               
000334r 3  A0 0A        	ldy #10				; direction of original.
000336r 3  B1 rr        	lda (z80_ix),y
000338r 3  91 rr        	sta (z80_hl),y		; direction
00033Ar 3               
00033Ar 3  A9 00        	lda #0
00033Cr 3  A0 0D        	ldy #var_jumpLo
00033Er 3  91 rr        	sta (z80_hl),y		; reset parameter.
000340r 3  C8           	iny
000341r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000343r 3  C8           	iny
000344r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000346r 3  C8           	iny
000347r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000349r 3  C8           	iny
00034Ar 3  AD rr rr     	lda fontcol
00034Dr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00034Fr 3               rtssp:
00034Fr 3  A5 rr        	lda spptr			; address of new sprite.
000351r 3  85 rr        	sta z80_x
000353r 3  A5 rr        	lda spptr+1
000355r 3  85 rr        	sta z80_i
000357r 3               evis1:
000357r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
00035Ar 3               
00035Ar 3  A5 rr        	lda spptr 			; address of new sprite.
00035Cr 3  85 rr        	sta z80_x
00035Er 3  A5 rr        	lda spptr+1
000360r 3  85 rr        	sta z80_i
000362r 3               
000362r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000362r 3  A0 03        	ldy #var_Y
000364r 3  B1 rr        	lda (z80_hl), y		; old x coord
000366r 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
000368r 3  B0 03        	bcs :+				; yes, don't draw it.
00036Ar 3               
00036Ar 3  20 rr rr     	jsr sspria 			; display the new sprite.
00036Dr 3               :
00036Dr 3  68           	pla					; address of original sprite.
00036Er 3  85 rr        	sta z80_x
000370r 3  68           	pla
000371r 3  85 rr        	sta z80_i
000373r 3               
000373r 3  60           	rts
000374r 3               
000374r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000378r 3  30 30        
00037Ar 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00037Er 3  30 30        
000380r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000384r 3  30 30        
000386r 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000388r 3               
000388r 3               ;----------------------------------------------------
000388r 3               ; Check y-pos
000388r 3               ;----------------------------------------------------
000388r 3               
000388r 3               checkx:
000388r 3  A5 rr        	lda dispy		; y position.
00038Ar 3  C9 16        	cmp #22			; off screen?
00038Cr 3  B0 01        	bcs :+
00038Er 3  60           	rts			; no, it's okay.
00038Fr 3               :
00038Fr 3  68           	pla			; remove return address from stack.
000390r 3  85 rr        	sta z80_l
000392r 3  68           	pla
000393r 3  85 rr        	sta z80_h
000395r 3  60           	rts
000396r 3               
000396r 3               ;-----------------------------------------------
000396r 3               ; Displays the current high score.
000396r 3               ;-----------------------------------------------
000396r 3               
000396r 3               dhisc:
000396r 3  A9 rr        	lda #<hiscor 		; high score text.
000398r 3  8D rr rr     	sta dscor3+1
00039Br 3  8D rr rr     	sta bscor3+1
00039Er 3  A9 rr        	lda #>hiscor
0003A0r 3  8D rr rr     	sta dscor3+2
0003A3r 3  8D rr rr     	sta bscor3+2
0003A6r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
0003A9r 3               
0003A9r 3               ;------------------------------------------------------
0003A9r 3               ; Displays the current score.
0003A9r 3               ;------------------------------------------------------
0003A9r 3               
0003A9r 3               dscor:
0003A9r 3  A9 rr        	lda #<score		; score text.
0003ABr 3  8D rr rr     	sta dscor3+1
0003AEr 3  8D rr rr     	sta bscor3+1
0003B1r 3  A9 rr        	lda #>score
0003B3r 3  8D rr rr     	sta dscor3+2
0003B6r 3  8D rr rr     	sta bscor3+2
0003B9r 3               dscor1:
0003B9r 3  8C rr rr     	sty tmpscr
0003BCr 3  20 rr rr     	jsr preprt		; set up font and print position.
0003BFr 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
0003C2r 3               
0003C2r 3               ;	lda #6			; digits to display.
0003C2r 3               ;	sta z80_b
0003C2r 3  A5 rr        	lda prtmod		; get print mode.
0003C4r 3  F0 03        	beq :+			; standard size text?
0003C6r 3  4C rr rr     	jmp bscor0		; no, show double-height.
0003C9r 3               :
0003C9r 3               dscor0:
0003C9r 3               ;	ldy #0
0003C9r 3               ;	lda (z80_hl),y 		; fetch character.
0003C9r 3  AC rr rr     	ldy tmpscr
0003CCr 3               dscor3:
0003CCr 3  B9 rr rr     	lda score,y
0003CFr 3  20 rr rr     	jsr pchar 		; display character.
0003D2r 3  E6 rr        	inc dispx		; move along x coordinate
0003D4r 3               
0003D4r 3               ;	inc z80_l		; next score column.
0003D4r 3               ;	bne :+
0003D4r 3               ;	inc z80_h
0003D4r 3               ;:
0003D4r 3  EE rr rr     	inc tmpscr
0003D7r 3  C6 rr        	dec z80_b
0003D9r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0003DBr 3               dscor2:
0003DBr 3  A5 rr        	lda dispx 		; set up display coordinates.
0003DDr 3  85 rr        	sta charx
0003DFr 3  A5 rr        	lda dispy
0003E1r 3  85 rr        	sta chary
0003E3r 3  60           	rts
0003E4r 3               
0003E4r 3  00           tmpscr:	.byte 0
0003E5r 3               ;------------------------------------------------------
0003E5r 3               ; Displays the current score in double-height characters.
0003E5r 3               ;
0003E5r 3               ; Input:
0003E5r 3               ;  B  = digit number
0003E5r 3               ;  HL = score string
0003E5r 3               ;------------------------------------------------------
0003E5r 3               
0003E5r 3               bscor0:
0003E5r 3               ;	ldy #0
0003E5r 3               
0003E5r 3               ;	lda (z80_hl),y 		; fetch character.
0003E5r 3  A4 rr        	ldy tmp
0003E7r 3               bscor3:
0003E7r 3  B9 rr rr     	lda score,y
0003EAr 3  20 rr rr     	jsr bchar 		; display big char.
0003EDr 3               
0003EDr 3               ;	inc z80_l 		; next score column.
0003EDr 3               ;	bne :+
0003EDr 3               ;	inc z80_h
0003EDr 3               ;:
0003EDr 3  E6 rr        	inc tmp
0003EFr 3  C6 rr        	dec z80_b
0003F1r 3  F0 03        	beq :+
0003F3r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0003F6r 3               :
0003F6r 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0003F9r 3               
0003F9r 3               ;-----------------------------------------------------
0003F9r 3               ; Adds number in the hl pair to the score.
0003F9r 3               ;-----------------------------------------------------
0003F9r 3               
0003F9r 3               addsc:
0003F9r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0003FBr 3  85 rr        	sta z80_e
0003FDr 3  A9 rr        	lda #>(score+1)
0003FFr 3  85 rr        	sta z80_d
000401r 3  A9 10        	lda #<10000		; amount to add each time.
000403r 3  85 rr        	sta z80_c
000405r 3  A9 27        	lda #>10000
000407r 3  85 rr        	sta z80_b
000409r 3  20 rr rr     	jsr incsc		; add to score.
00040Cr 3               
00040Cr 3  E6 rr        	inc z80_e		; thousands column.
00040Er 3  D0 02        	bne :+
000410r 3  E6 rr        	inc z80_d
000412r 3               :
000412r 3  A9 E8        	lda #<1000		; amount to add each time.
000414r 3  85 rr        	sta z80_c
000416r 3  A9 03        	lda #>1000
000418r 3  85 rr        	sta z80_b
00041Ar 3  20 rr rr     	jsr incsc 		; add to score.
00041Dr 3               
00041Dr 3  E6 rr        	inc z80_e		; hundreds column.
00041Fr 3  D0 02        	bne :+
000421r 3  E6 rr        	inc z80_d
000423r 3               :
000423r 3  A9 64        	lda #<100		; amount to add each time.
000425r 3  85 rr        	sta z80_c
000427r 3  A9 00        	lda #>100
000429r 3  85 rr        	sta z80_b
00042Br 3  20 rr rr     	jsr incsc		; add to score.
00042Er 3               
00042Er 3  E6 rr        	inc z80_e 		; tens column.
000430r 3  D0 02        	bne :+
000432r 3  E6 rr        	inc z80_d
000434r 3               :
000434r 3  A9 0A        	lda #<10		; amount to add each time.
000436r 3  85 rr        	sta z80_c
000438r 3  A9 00        	lda #>10
00043Ar 3  85 rr        	sta z80_b
00043Cr 3  20 rr rr     	jsr incsc 		; add to score.
00043Fr 3               
00043Fr 3  E6 rr        	inc z80_e		; units column.
000441r 3  D0 02        	bne :+
000443r 3  E6 rr        	inc z80_d
000445r 3               :
000445r 3  A9 01        	lda #<1			; units.
000447r 3  85 rr        	sta z80_c
000449r 3  A9 00        	lda #>1
00044Br 3  85 rr        	sta z80_b
00044Dr 3               incsc:
00044Dr 3  A5 rr        	lda z80_h		; store amount to add.
00044Fr 3  48           	pha
000450r 3  A5 rr        	lda z80_l
000452r 3  48           	pha
000453r 3               
000453r 3  38           	sec			; subtract from amount to add.
000454r 3  A5 rr        	lda z80_l
000456r 3  E5 rr        	sbc z80_c
000458r 3  85 rr        	sta z80_l
00045Ar 3  A5 rr        	lda z80_h
00045Cr 3  E5 rr        	sbc z80_b
00045Er 3  85 rr        	sta z80_h
000460r 3  90 14        	bcc incsc0		; too much, restore value.
000462r 3               
000462r 3  68           	pla			; delete the previous amount from the stack.
000463r 3  68           	pla
000464r 3               
000464r 3  A5 rr        	lda z80_d 		; store column position.
000466r 3  48           	pha
000467r 3  A5 rr        	lda z80_e
000469r 3  48           	pha
00046Ar 3  20 rr rr     	jsr incsc2		; do the increment.
00046Dr 3               
00046Dr 3  68           	pla			; restore column.
00046Er 3  85 rr        	sta z80_e
000470r 3  68           	pla
000471r 3  85 rr        	sta z80_d
000473r 3  4C rr rr     	jmp incsc		; repeat until all added.
000476r 3               
000476r 3               incsc0:
000476r 3  68           	pla			; restore previous value.
000477r 3  85 rr        	sta z80_l
000479r 3  68           	pla
00047Ar 3  85 rr        	sta z80_h
00047Cr 3  60           	rts
00047Dr 3               incsc2:
00047Dr 3  A0 00        	ldy #0
00047Fr 3  B1 rr        	lda (z80_de),y 		; get amount.
000481r 3  18           	clc
000482r 3  69 01        	adc #1			; add one to column.
000484r 3  91 rr        	sta (z80_de),y		; write new column total.
000486r 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000488r 3  B0 01        	bcs :+
00048Ar 3  60           	rts			; no, carry on.
00048Br 3               :
00048Br 3  A9 30        	lda #'0'		; make it zero.
00048Dr 3  91 rr        	sta (z80_de),y		; write new column total.
00048Fr 3  C6 rr        	dec z80_e		; back one column.
000491r 3  D0 02        	bne :+
000493r 3  C6 rr        	dec z80_d
000495r 3               :
000495r 3  4C rr rr     	jmp incsc2
000498r 3               
000498r 3               ;------------------------------------
000498r 3               ; Add bonus to score and reset bonus
000498r 3               ;------------------------------------
000498r 3               
000498r 3               addbo:
000498r 3  A2 05        	ldx #5			; last digit.
00049Ar 3  18           	clc
00049Br 3               addbo0:
00049Br 3  BD rr rr     	lda score,x		; get score.
00049Er 3  7D rr rr     	adc bonus,x		; add bonus.
0004A1r 3  38           	sec			; 0 to 18.
0004A2r 3  E9 30        	sbc #48
0004A4r 3  48           	pha
0004A5r 3  A9 30        	lda #'0'
0004A7r 3  9D rr rr     	sta bonus,x
0004AAr 3  68           	pla
0004ABr 3  C9 3A        	cmp #58
0004ADr 3  90 03        	bcc addbo1
0004AFr 3  38           	sec
0004B0r 3  E9 0A        	sbc #10
0004B2r 3               addbo1:
0004B2r 3  9D rr rr     	sta score,x		; zeroise bonus.
0004B5r 3  CA           	dex			; next digit.
0004B6r 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0004B8r 3  60           	rts
0004B9r 3               
0004B9r 3               ;------------------------------------
0004B9r 3               ; Swap score and bonus.
0004B9r 3               ;------------------------------------
0004B9r 3               
0004B9r 3               swpsb:
0004B9r 3  A2 05        	ldx #5			; digits to add.
0004BBr 3               swpsb0:
0004BBr 3  BD rr rr     	lda score,x 		; get score digits.
0004BEr 3  48           	pha			; save digit
0004BFr 3  BD rr rr     	lda bonus,x 		; get bonus digits.
0004C2r 3  9D rr rr     	sta score,x		; switch score-bonus
0004C5r 3  68           	pla
0004C6r 3  9D rr rr     	sta bonus,x
0004C9r 3  CA           	dex 			; repeat for all 6 digits.
0004CAr 3  10 EF        	bpl swpsb0
0004CCr 3  60           	rts
0004CDr 3               
0004CDr 3               ;----------------------------------------------------
0004CDr 3               ; Get print address.
0004CDr 3               ;----------------------------------------------------
0004CDr 3               
0004CDr 3               gprad:
0004CDr 3  98           	tya
0004CEr 3  48           	pha
0004CFr 3               
0004CFr 3  A5 rr        	lda dispx 		; x coordinate.
0004D1r 3  85 rr        	sta scraddr
0004D3r 3  A9 00        	lda #0
0004D5r 3  85 rr        	sta scraddr+1
0004D7r 3  06 rr        	asl scraddr  		; multiply char by 16
0004D9r 3  26 rr        	rol scraddr+1
0004DBr 3  06 rr        	asl scraddr
0004DDr 3  26 rr        	rol scraddr+1
0004DFr 3  06 rr        	asl scraddr
0004E1r 3  26 rr        	rol scraddr+1
0004E3r 3  06 rr        	asl scraddr
0004E5r 3  26 rr        	rol scraddr+1
0004E7r 3               
0004E7r 3  A5 rr        	lda dispy		; y coordinate.
0004E9r 3  0A           	asl a
0004EAr 3  0A           	asl a
0004EBr 3  0A           	asl a			; multiply char by 8
0004ECr 3  A8           	tay
0004EDr 3               
0004EDr 3  18           	clc
0004EEr 3  A5 rr        	lda scraddr
0004F0r 3  79 00 07     	adc SCADTB_lb,y
0004F3r 3  85 rr        	sta scraddr
0004F5r 3  A5 rr        	lda scraddr+1
0004F7r 3  79 00 08     	adc SCADTB_hb,y
0004FAr 3  85 rr        	sta scraddr+1
0004FCr 3               
0004FCr 3  A5 rr        	lda prtmod		; Double line if bigtxt
0004FEr 3  F0 08        	beq noskip
000500r 3  A5 rr        	lda dispx
000502r 3  29 E0        	and #$e0
000504r 3  F0 02        	beq noskip
000506r 3  E6 rr        	inc scraddr+1
000508r 3               noskip:
000508r 3               
000508r 3  68           	pla
000509r 3  A8           	tay
00050Ar 3  60           	rts
00050Br 3               ;--------------------------------------------------------------
00050Br 3               ; Get property buffer address of char at (dispx, dispy) in hl.
00050Br 3               ;
00050Br 3               ; Output:
00050Br 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
00050Br 3               ;--------------------------------------------------------------
00050Br 3               
00050Br 3               pradd:
00050Br 3  A5 rr        	lda dispy 		; y coordinate.
00050Dr 3  85 rr        	sta bufaddr
00050Fr 3  A9 00        	lda #0
000511r 3  85 rr        	sta bufaddr+1
000513r 3  06 rr        	asl bufaddr  		; multiply char by 32
000515r 3  26 rr        	rol bufaddr+1
000517r 3  06 rr        	asl bufaddr
000519r 3  26 rr        	rol bufaddr+1
00051Br 3  06 rr        	asl bufaddr
00051Dr 3  26 rr        	rol bufaddr+1
00051Fr 3  06 rr        	asl bufaddr
000521r 3  26 rr        	rol bufaddr+1
000523r 3  06 rr        	asl bufaddr
000525r 3  26 rr        	rol bufaddr+1
000527r 3  18           	clc			; add address of MAP graphics.
000528r 3  A5 rr        	lda bufaddr
00052Ar 3  65 rr        	adc dispx
00052Cr 3  69 00        	adc #<MAP
00052Er 3  85 rr        	sta bufaddr
000530r 3  A5 rr        	lda bufaddr+1
000532r 3  69 04        	adc #>MAP
000534r 3  85 rr        	sta bufaddr+1
000536r 3  60           	rts
000537r 3               
000537r 3               ;--------------------------------------------------------------
000537r 3               ; Get attribute address at (dispx, dispy).
000537r 3               ;
000537r 3               ; Output:
000537r 3               ;  bufaddr = COLOR + dispy*22 + dispx
000537r 3               ;--------------------------------------------------------------
000537r 3               
000537r 3               gaadd:
000537r 3  A5 rr        	lda dispy
000539r 3  4A           	lsr a
00053Ar 3  A8           	tay
00053Br 3  B9 55 0A     	lda COLATTTB_hb,y
00053Er 3  85 rr        	sta bufaddr+1
000540r 3  B9 4A 0A     	lda COLATTTB_lb,y
000543r 3  18           	clc
000544r 3  65 rr        	adc dispx
000546r 3  85 rr        	sta bufaddr
000548r 3  60           	rts
000549r 3               
000549r 3               ;----------------------------------------------
000549r 3               ; Print attributes, properties and pixels.
000549r 3               ;
000549r 3               ; Input:
000549r 3               ;  A	= tile number
000549r 3               ;----------------------------------------------
000549r 3               
000549r 3               pbpattr:			; entry PUTBLOCK command
000549r 3  A4 rr        	ldy charx
00054Br 3  84 rr        	sty dispx
00054Dr 3  A4 rr        	ldy chary
00054Fr 3  84 rr        	sty dispy
000551r 3               pattr:
000551r 3               .if aflag
000551r 3               	pha
000551r 3               	jsr wbloc		; save blockinfo
000551r 3               	pla
000551r 3               .endif
000551r 3               
000551r 3               pattr2:
000551r 3  85 rr        	sta z80_b		; store cell in b register for now.
000553r 3  AA           	tax
000554r 3  BD rr rr     	lda bprop,x 		; block properties.
000557r 3  85 rr        	sta z80_c
000559r 3  C9 08        	cmp #COLECT
00055Br 3  D0 04        	bne :+
00055Dr 3  A5 rr        	lda z80_b
00055Fr 3  85 rr        	sta colpatt
000561r 3               :
000561r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000564r 3  A5 rr        	lda z80_c
000566r 3  A0 00        	ldy #0
000568r 3  91 rr        	sta (bufaddr),y 	; write property.
00056Ar 3  A5 rr        	lda z80_b 		; restore cell.
00056Cr 3  4C rr rr     	jmp panp
00056Fr 3               ; Print attributes, no properties.
00056Fr 3               
00056Fr 3               ;colpatt:	.byte 0
00056Fr 3               
00056Fr 3               panp:
00056Fr 3  85 rr        	sta z80_e		; displacement in e.
000571r 3  A9 00        	lda #0
000573r 3  85 rr        	sta z80_d		; no high byte.
000575r 3  06 rr        	asl z80_e  		; multiply char by 8.
000577r 3  26 rr        	rol z80_d
000579r 3  06 rr        	asl z80_e
00057Br 3  26 rr        	rol z80_d
00057Dr 3  06 rr        	asl z80_e
00057Fr 3  26 rr        	rol z80_d
000581r 3  18           	clc
000582r 3  A5 rr        	lda z80_e
000584r 3  69 rr        	adc #<chgfx 		; address of graphics.
000586r 3  85 rr        	sta tileaddr
000588r 3  A5 rr        	lda z80_d
00058Ar 3  69 rr        	adc #>chgfx
00058Cr 3  85 rr        	sta tileaddr+1
00058Er 3               
00058Er 3  A6 rr        	ldx z80_b		; set colour attribute
000590r 3  BD rr rr     	lda bCol,x
000593r 3  48           	pha
000594r 3  20 rr rr     	jsr gaadd
000597r 3  A0 00        	ldy #0
000599r 3  68           	pla
00059Ar 3  91 rr        	sta (bufaddr),y
00059Cr 3               
00059Cr 3  20 rr rr     	jsr gprad 		; get screen address.
00059Fr 3  A2 07        	ldx #7			; number of pixel rows to write.
0005A1r 3               panp0:
0005A1r 3  A0 00        	ldy #0
0005A3r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
0005A5r 3               .if iflag
0005A5r 3               	eor #$ff		; Invert
0005A5r 3               .endif
0005A5r 3  BC rr rr     	ldy scrtab,x
0005A8r 3  91 rr        	sta (scraddr),y 	; copy to screen.
0005AAr 3  E6 rr        	inc tileaddr 		; next image byte.
0005ACr 3  D0 02        	bne :+
0005AEr 3  E6 rr        	inc tileaddr+1
0005B0r 3               :
0005B0r 3  CA           	dex	 		; repeat for 8 pixel rows.
0005B1r 3  10 EE        	bpl panp0
0005B3r 3  E6 rr        	inc dispx 		; move along one.
0005B5r 3  E6 rr        	inc charx
0005B7r 3  60           	rts
0005B8r 3               
0005B8r 3               ;----------------------------------------------
0005B8r 3               ; Write block
0005B8r 3               ;----------------------------------------------
0005B8r 3               
0005B8r 3               .if aflag
0005B8r 3               wbloc:
0005B8r 3               	ldy #3
0005B8r 3               	sta (pbptr),y		; store block number
0005B8r 3               	dey
0005B8r 3               	lda dispx
0005B8r 3               	sta (pbptr),y		; write x position of block.
0005B8r 3               	dey
0005B8r 3               	lda dispy
0005B8r 3               	sta (pbptr),y		; write y position of block.
0005B8r 3               	dey
0005B8r 3               	lda scno
0005B8r 3               	sta (pbptr),y		; write screen.
0005B8r 3               	clc			; point to next free location
0005B8r 3               	lda pbptr
0005B8r 3               	adc #4
0005B8r 3               	sta pbptr
0005B8r 3               	bcc :+
0005B8r 3               	inc pbptr+1
0005B8r 3               :
0005B8r 3               	rts
0005B8r 3               .endif
0005B8r 3               
0005B8r 3               ;.if kflag
0005B8r 3               ;panp:
0005B8r 3               ;.endif
0005B8r 3               
0005B8r 3               ;----------------------------------------------
0005B8r 3               ; Print character pixels, no more.
0005B8r 3               ;
0005B8r 3               ; Input:
0005B8r 3               ;  A	= character to print
0005B8r 3               ;----------------------------------------------
0005B8r 3               
0005B8r 3               pchr:
0005B8r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
0005BBr 3  E6 rr        	inc dispx		; move along one.
0005BDr 3  60           	rts
0005BEr 3               
0005BEr 3               ;----------------------------------------------------
0005BEr 3               ; Shifter sprite routine for objects.
0005BEr 3               ;----------------------------------------------------
0005BEr 3               
0005BEr 3               .if oflag
0005BEr 3               sprit7:
0005BEr 3               	lda z80_b
0005BEr 3               	beq sprit0
0005BEr 3               	sta z80_a
0005BEr 3               sprit3:
0005BEr 3               	lsr spr			; shift into position.
0005BEr 3               	ror spr+1
0005BEr 3               	ror spr+2
0005BEr 3               	dec z80_a		; one less iteration.
0005BEr 3               	bne sprit3
0005BEr 3               sprit0:
0005BEr 3               	rts 			; now apply to screen.
0005BEr 3               .endif
0005BEr 3               
0005BEr 3               ;-----------------------------------------------------------
0005BEr 3               ; Get room address.
0005BEr 3               ;-----------------------------------------------------------
0005BEr 3               
0005BEr 3               groom:
0005BEr 3  A6 rr        	ldx scno 		; screen number.
0005C0r 3  A0 00        	ldy #0
0005C2r 3               groomx:
0005C2r 3  A9 rr        	lda #<scdat 		; pointer to screens.
0005C4r 3  85 rr        	sta z80_l
0005C6r 3  A9 rr        	lda #>scdat
0005C8r 3  85 rr        	sta z80_h
0005CAr 3               groom1:
0005CAr 3  E0 00        	cpx #0			; is it the first one?
0005CCr 3  F0 15        	beq groom0 		; no more screens to skip.
0005CEr 3               
0005CEr 3  18           	clc
0005CFr 3  A5 rr        	lda z80_l
0005D1r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0005D4r 3  85 rr        	sta z80_l
0005D6r 3  C8           	iny			; point to high byte.
0005D7r 3  A5 rr        	lda z80_h
0005D9r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
0005DCr 3  85 rr        	sta z80_h
0005DEr 3  C8           	iny			; next address.
0005DFr 3               
0005DFr 3  CA           	dex 			; one less iteration.
0005E0r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
0005E3r 3               groom0:
0005E3r 3  AD rr rr     	lda numsc		; add displacement.
0005E6r 3  0A           	asl a
0005E7r 3  18           	clc			; add double displacement to address.
0005E8r 3  65 rr        	adc z80_l
0005EAr 3  85 rr        	sta z80_l
0005ECr 3  A5 rr        	lda z80_h
0005EEr 3  69 00        	adc #0
0005F0r 3  85 rr        	sta z80_h
0005F2r 3  60           	rts
0005F3r 3               
0005F3r 3               ;-----------------------------------------------------------
0005F3r 3               ; Draw present room.
0005F3r 3               ;-----------------------------------------------------------
0005F3r 3               
0005F3r 3               droom:
0005F3r 3  AD rr rr     	lda wintop 		; window top.
0005F6r 3  85 rr        	sta dispy		; set cursor y position.
0005F8r 3               droom2:
0005F8r 3  20 rr rr     	jsr groom 		; get address of current room.
0005FBr 3  A9 00        	lda #0	 		; zero in accumulator.
0005FDr 3  85 rr        	sta comcnt 		; reset compression counter.
0005FFr 3  AD rr rr     	lda winhgt 		; height of window.
000602r 3  85 rr        	sta rrow		; set row counter
000604r 3               droom0:
000604r 3  AD rr rr     	lda winlft 		; window left edge.
000607r 3  85 rr        	sta dispx 		; set cursor x position.
000609r 3  AD rr rr     	lda winwid 		; width of window.
00060Cr 3  85 rr        	sta rcol		; set column counter
00060Er 3               droom1:
00060Er 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000611r 3               .if xflag
000611r 3               	jsr drwmeta
000611r 3               .else
000611r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000614r 3               .endif
000614r 3  C6 rr        	dec rcol		; one less column.
000616r 3  D0 F6        	bne droom1 		; repeat for entire line.
000618r 3  E6 rr        	inc dispy		; move down one line.
00061Ar 3               .if xflag
00061Ar 3               	inc dispy		; move down one line.
00061Ar 3               .endif
00061Ar 3  C6 rr        	dec rrow 		; one less row.
00061Cr 3  D0 E6        	bne droom0 		; repeat for all rows.
00061Er 3  60           	rts
00061Fr 3               
00061Fr 3               ;----------------------------------------------
00061Fr 3               ; Decompress bytes on-the-fly.
00061Fr 3               ;----------------------------------------------
00061Fr 3               
00061Fr 3               flbyt:
00061Fr 3  A5 rr        	lda comcnt 		; compression counter.
000621r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000623r 3               
000623r 3  A0 00        	ldy #0
000625r 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000627r 3  E6 rr        	inc z80_l 		; point to next cell.
000629r 3  D0 02        	bne :+
00062Br 3  E6 rr        	inc z80_h
00062Dr 3               :
00062Dr 3  C9 FF        	cmp #255 		; is this byte a control code?
00062Fr 3  F0 01        	beq :+
000631r 3  60           	rts 			; no, this byte is uncompressed.
000632r 3               :
000632r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000634r 3  85 rr        	sta combyt 		; set up the type.
000636r 3  E6 rr        	inc z80_l 		; point to quantity.
000638r 3  D0 02        	bne :+
00063Ar 3  E6 rr        	inc z80_h
00063Cr 3               :
00063Cr 3  B1 rr        	lda (z80_hl),y 		; get quantity.
00063Er 3  E6 rr        	inc z80_l 		; point to next byte.
000640r 3  D0 02        	bne :+
000642r 3  E6 rr        	inc z80_h
000644r 3               :
000644r 3               flbyt1:
000644r 3  85 rr        	sta comcnt 		; store new quantity.
000646r 3  C6 rr        	dec comcnt		; one less.
000648r 3  A5 rr        	lda combyt 		; byte to expand.
00064Ar 3  60           	rts
00064Br 3               
00064Br 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00064Br 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
00064Br 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
00064Br 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00064Br 3               .if xflag
00064Br 3               drwmeta:
00064Br 3               	sta tmpblk
00064Br 3               	jsr pattr2
00064Br 3               
00064Br 3               	inc dispy
00064Br 3               	dec dispx
00064Br 3               	ldx tmpblk
00064Br 3               	beq :+
00064Br 3               	inx
00064Br 3               :
00064Br 3               	txa
00064Br 3               	jsr pattr2
00064Br 3               
00064Br 3               	ldx tmpblk
00064Br 3               	beq :+
00064Br 3               	inx
00064Br 3               	inx
00064Br 3               	inx
00064Br 3               :
00064Br 3               	txa
00064Br 3               	jsr pattr2
00064Br 3               
00064Br 3               	dec dispy
00064Br 3               	dec dispx
00064Br 3               	ldx tmpblk
00064Br 3               	beq :+
00064Br 3               	inx
00064Br 3               	inx
00064Br 3               :
00064Br 3               	txa
00064Br 3               	jsr pattr2
00064Br 3               	rts
00064Br 3               
00064Br 3               tmpblk:	.byte 0
00064Br 3               
00064Br 3               .endif
00064Br 3               
00064Br 3               ;------------------------------------------
00064Br 3               ; Ladder down check.
00064Br 3               ;
00064Br 3               ; Input:
00064Br 3               ;  IX = sprite pointer
00064Br 3               ;------------------------------------------
00064Br 3               
00064Br 3               .if lflag
00064Br 3               laddd:
00064Br 3               	ldy #9
00064Br 3               	lda (z80_ix),y		; x coordinate.
00064Br 3               	sta dispx
00064Br 3               
00064Br 3               	ldy #8
00064Br 3               	lda (z80_ix),y		; y coordinate.
00064Br 3               	and #254		; make it even.
00064Br 3               	sta (z80_ix),y 		; reset it.
00064Br 3               	clc 			; look down 16 pixels.
00064Br 3               numsp5:
00064Br 3               	adc #SPR_HGT
00064Br 3               	sta dispy		; coords in dispx,dispy.
00064Br 3               	jmp laddv
00064Br 3               
00064Br 3               ;------------------------------------------
00064Br 3               ; Ladder up check.
00064Br 3               ;
00064Br 3               ; Input:
00064Br 3               ;  IX = sprite pointer
00064Br 3               ;
00064Br 3               ; Output:
00064Br 3               ;  A  = 0 is ok, A <>0 is not ok
00064Br 3               ;------------------------------------------
00064Br 3               
00064Br 3               laddu:
00064Br 3               	ldy #9
00064Br 3               	lda (z80_ix),y		; x coordinate.
00064Br 3               	sta dispx
00064Br 3               
00064Br 3               	ldy #8
00064Br 3               	lda (z80_ix),y		; y coordinate.
00064Br 3               	and #254 		; make it even.
00064Br 3               	sta (z80_ix),y		; reset it.
00064Br 3               	clc 			; look 2 pixels above feet.
00064Br 3               numsp6:
00064Br 3               	adc #SPR_HGT-2
00064Br 3               	sta dispy		; coords in dispx,dispy.
00064Br 3               laddv:
00064Br 3               	jsr tstbl 		; get map address.
00064Br 3               	jsr ldchk 		; standard ladder check.
00064Br 3               	beq :+
00064Br 3               	rts 			; no way through.
00064Br 3               :
00064Br 3               	inc bufaddr 		; look right one cell.
00064Br 3               	bne :+
00064Br 3               	inc bufaddr+1
00064Br 3               :
00064Br 3               	jsr ldchk 		; do the check.
00064Br 3               	beq :+
00064Br 3               	rts 			; impassable.
00064Br 3               :
00064Br 3               	lda dispx 		; y coordinate.
00064Br 3               	and #7 			; position straddling block cells.
00064Br 3               	bne :+
00064Br 3               	rts 			; no more checks needed.
00064Br 3               :
00064Br 3               	inc bufaddr 		; look to third cell.
00064Br 3               	bne :+
00064Br 3               	inc bufaddr+1
00064Br 3               :
00064Br 3               	jsr ldchk 		; do the check.
00064Br 3               	rts  			; return with zero flag set accordingly.
00064Br 3               .endif
00064Br 3               
00064Br 3               ;---------------------------------------------------------
00064Br 3               ; Can go up check.
00064Br 3               ;
00064Br 3               ; Input:
00064Br 3               ;  IX = sprite pointer
00064Br 3               ;
00064Br 3               ; Output:
00064Br 3               ;  A  = 0 is ok, A <>0 is not ok
00064Br 3               ;---------------------------------------------------------
00064Br 3               
00064Br 3               cangu:
00064Br 3  A0 09        	ldy #9
00064Dr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00064Fr 3  85 rr        	sta dispx
000651r 3  A0 08        	ldy #8
000653r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000655r 3  38           	sec
000656r 3  E9 02        	sbc #2
000658r 3  85 rr        	sta dispy		; coords in dispx,dispy.
00065Ar 3  20 rr rr     	jsr tstbl 		; get map address.
00065Dr 3  20 rr rr     	jsr lrchk 		; standard left/right check.
000660r 3  F0 01        	beq :+
000662r 3  60           	rts			; no way through.
000663r 3               :
000663r 3  E6 rr        	inc bufaddr		; look right one cell.
000665r 3  D0 02        	bne :+
000667r 3  E6 rr        	inc bufaddr+1
000669r 3               :
000669r 3  20 rr rr     	jsr lrchk 		; do the check.
00066Cr 3  F0 01        	beq :+
00066Er 3  60           	rts			; impassable.
00066Fr 3               :
00066Fr 3  A5 rr        	lda dispx		; x coordinate.
000671r 3  29 07        	and #7			; position straddling block cells.
000673r 3  D0 01        	bne :+
000675r 3  60           	rts			; no more checks needed.
000676r 3               :
000676r 3  E6 rr        	inc bufaddr		; look to third cell.
000678r 3  D0 02        	bne :+
00067Ar 3  E6 rr        	inc bufaddr+1
00067Cr 3               :
00067Cr 3  20 rr rr     	jsr lrchk		; do the check.
00067Fr 3  60           	rts 			; return with zero flag set accordingly.
000680r 3               
000680r 3               ;---------------------------------------------------------
000680r 3               ; Can go down check.
000680r 3               ;
000680r 3               ; Input:
000680r 3               ;  IX = sprite pointer
000680r 3               ;
000680r 3               ; Output:
000680r 3               ;  A  = 0 is ok, A <>0 is not ok
000680r 3               ;---------------------------------------------------------
000680r 3               
000680r 3               cangd:
000680r 3  A0 09        	ldy #9
000682r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000684r 3  85 rr        	sta dispx
000686r 3  A0 08        	ldy #8
000688r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00068Ar 3  18           	clc
00068Br 3               numsp3:
00068Br 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
00068Dr 3  85 rr        	sta dispy		; coords in dispx,dispy.
00068Fr 3  20 rr rr     	jsr tstbl 		; get map address.
000692r 3  20 rr rr     	jsr plchk 		; block, platform check.
000695r 3  F0 01        	beq :+
000697r 3  60           	rts			; no way through.
000698r 3               :
000698r 3  E6 rr        	inc bufaddr		; look right one cell.
00069Ar 3  D0 02        	bne :+
00069Cr 3  E6 rr        	inc bufaddr+1
00069Er 3               :
00069Er 3  20 rr rr     	jsr plchk		; block, platform check.
0006A1r 3  F0 01        	beq :+
0006A3r 3  60           	rts			; impassable.
0006A4r 3               :
0006A4r 3  A5 rr        	lda dispx		; x coordinate.
0006A6r 3  29 07        	and #7			; position straddling block cells.
0006A8r 3  D0 01        	bne :+
0006AAr 3  60           	rts			; no more checks needed.
0006ABr 3               :
0006ABr 3  E6 rr        	inc bufaddr		; look to third cell.
0006ADr 3  D0 02        	bne :+
0006AFr 3  E6 rr        	inc bufaddr+1
0006B1r 3               :
0006B1r 3  20 rr rr     	jsr plchk		; block, platform check.
0006B4r 3  60           	rts			; return with zero flag set accordingly.
0006B5r 3               
0006B5r 3               ;---------------------------------------------------------
0006B5r 3               ; Can go left check.
0006B5r 3               ;
0006B5r 3               ; Input:
0006B5r 3               ;  IX = sprite pointer
0006B5r 3               ;
0006B5r 3               ; Output:
0006B5r 3               ;  A  = 0 is ok, A <>0 is not ok
0006B5r 3               ;---------------------------------------------------------
0006B5r 3               
0006B5r 3               cangl:
0006B5r 3  A0 08        	ldy #8
0006B7r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0006B9r 3  85 rr        	sta dispy
0006BBr 3  A0 09        	ldy #9
0006BDr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0006BFr 3  38           	sec
0006C0r 3  E9 02        	sbc #2			; look left 2 pixels.
0006C2r 3  85 rr        	sta dispx		; coords in dispx,dispy.
0006C4r 3  4C rr rr     	jmp cangh		; test if we can go there.
0006C7r 3               
0006C7r 3               ;---------------------------------------------------------
0006C7r 3               ; Can go right check.
0006C7r 3               ;
0006C7r 3               ; Input:
0006C7r 3               ;  IX = sprite pointer
0006C7r 3               ;
0006C7r 3               ; Output:
0006C7r 3               ;  A  = 0 is ok, A <>0 is not ok
0006C7r 3               ;---------------------------------------------------------
0006C7r 3               
0006C7r 3               cangr:
0006C7r 3  A0 08        	ldy #8
0006C9r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
0006CBr 3  85 rr        	sta dispy
0006CDr 3  A0 09        	ldy #9
0006CFr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0006D1r 3  18           	clc
0006D2r 3  69 10        	adc #16			; look right 16 pixels.
0006D4r 3  85 rr        	sta dispx		; coords in dispx,dispy.
0006D6r 3               cangh:
0006D6r 3               cangh2:
0006D6r 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0006D8r 3  85 rr        	sta z80_b
0006DAr 3  A5 rr        	lda dispy		; y position.
0006DCr 3  29 07        	and #7			; does x straddle cells?
0006DEr 3  D0 02        	bne cangh0		; yes, loop counter is good.
0006E0r 3  C6 rr        	dec z80_b		; one less row to write.
0006E2r 3               cangh0:
0006E2r 3  20 rr rr     	jsr tstbl		; get map address.
0006E5r 3               cangh1:
0006E5r 3  20 rr rr     	jsr lrchk		; standard left/right check.
0006E8r 3  F0 01        	beq :+
0006EAr 3  60           	rts			; no way through.
0006EBr 3               :
0006EBr 3  48           	pha
0006ECr 3  18           	clc
0006EDr 3  A5 rr        	lda bufaddr
0006EFr 3  69 20        	adc #32		; look down.
0006F1r 3  85 rr        	sta bufaddr
0006F3r 3  90 02        	bcc :+
0006F5r 3  E6 rr        	inc bufaddr+1
0006F7r 3               :
0006F7r 3  68           	pla
0006F8r 3               
0006F8r 3  C6 rr        	dec z80_b
0006FAr 3  D0 E9        	bne cangh1
0006FCr 3  60           	rts
0006FDr 3               
0006FDr 3               ;-------------------------------------
0006FDr 3               ; Check left/right movement is okay.
0006FDr 3               ;
0006FDr 3               ; Input:
0006FDr 3               ;  bufaddr = MAP + x/8 + y/8*32
0006FDr 3               ;
0006FDr 3               ; Output:
0006FDr 3               ;  A  = 0 is ok, A <>0 is not ok
0006FDr 3               ;-------------------------------------
0006FDr 3               
0006FDr 3               lrchk:
0006FDr 3  A0 00        	ldy #0
0006FFr 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000701r 3  C9 02        	cmp #WALL 		; is it passable?
000703r 3  F0 0A        	beq lrchkx		; no.
000705r 3               
000705r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000707r 3  F0 06        	beq lrchkx		; not passable.
000709r 3  A9 00        	lda #0
00070Br 3  60           	rts
00070Cr 3               
00070Cr 3               ;--------------------------------------------------------------
00070Cr 3               ; Called by mmenu
00070Cr 3               ;--------------------------------------------------------------
00070Cr 3               
00070Cr 3               always:
00070Cr 3  A9 FF        	lda #255		; report it as okay.
00070Er 3  60           	rts
00070Fr 3               
00070Fr 3               lrchkx:
00070Fr 3  A9 01        	lda #1 			; reset all bits.
000711r 3  60           	rts
000712r 3               
000712r 3               
000712r 3               ;--------------------------------------------------------------
000712r 3               ; Check platform or solid item is not in way.
000712r 3               ;
000712r 3               ; Input:
000712r 3               ;  bufaddr = MAP + x/8 + y/8*32
000712r 3               ;
000712r 3               ; Output:
000712r 3               ;  A  = 0 is ok, A <>0 is not ok
000712r 3               ;--------------------------------------------------------------
000712r 3               
000712r 3               plchk:
000712r 3  A0 00        	ldy #0
000714r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000716r 3  C9 02        	cmp #WALL 		; is it passable?
000718r 3  F0 F5        	beq lrchkx		; no.
00071Ar 3               .if pflag .or dflag
00071Ar 3  C9 04        	cmp #FODDER		; fodder has to be dug.
00071Cr 3  F0 F1        	beq lrchkx		; not passable.
00071Er 3               .endif
00071Er 3  C9 01        	cmp #PLATFM		; platform is solid.
000720r 3  F0 03        	beq plchkx		; not passable.
000722r 3               .if lflag
000722r 3               	cmp #LADDER		; is it a ladder?
000722r 3               	beq lrchkx		; on ladder, deny movement.
000722r 3               .endif
000722r 3               plchk0:
000722r 3  A9 00        	lda #0			; report as ok
000724r 3  60           	rts
000725r 3               plchkx:
000725r 3  A5 rr        	lda dispy		; x coordinate.
000727r 3  29 07        	and #7			; position straddling blocks.
000729r 3  F0 E4        	beq lrchkx		; on platform, deny movement.
00072Br 3  4C rr rr     	jmp plchk0
00072Er 3               
00072Er 3               ;--------------------------------------------------------------
00072Er 3               ; Check ladder is available.
00072Er 3               ;
00072Er 3               ; Input:
00072Er 3               ;  bufaddr = MAP + x/8 + y/8*32
00072Er 3               ;
00072Er 3               ; Output:
00072Er 3               ;  A  = 0 is ok, A <>0 is not ok
00072Er 3               ;--------------------------------------------------------------
00072Er 3               
00072Er 3               .if lflag
00072Er 3               ldchk:
00072Er 3               	ldy #0
00072Er 3               	lda (bufaddr),y 	; fetch cell.
00072Er 3               	cmp #LADDER 		; is it a ladder?
00072Er 3               	beq ldchk1
00072Er 3               	lda #1
00072Er 3               	rts  			; return with zero flag set accordingly.
00072Er 3               ldchk1:
00072Er 3               	lda #0
00072Er 3               	rts
00072Er 3               .endif
00072Er 3               
00072Er 3               ;--------------------------------------------------------------
00072Er 3               ; Get collectables.
00072Er 3               ;--------------------------------------------------------------
00072Er 3               
00072Er 3               .if cflag
00072Er 3               getcol:
00072Er 3                       lda #COLECT             ; collectable blocks.
00072Er 3                       sta z80_b
00072Er 3                       jsr tded                ; test for collectable blocks.
00072Er 3                       cmp z80_b               ; did we find one?
00072Er 3                       beq :+
00072Er 3                       rts                     ; none were found, job done.
00072Er 3               :
00072Er 3                       jsr gtblk               ; get block.
00072Er 3                       jsr evnt20              ; collected block event.
00072Er 3                       jmp getcol              ; repeat until none left.
00072Er 3               
00072Er 3               ; Get collectable block.
00072Er 3               
00072Er 3               gtblk:
00072Er 3               	ldy #0
00072Er 3               	lda (bufaddr),y
00072Er 3               	sta z80_a
00072Er 3                       lda #0
00072Er 3                       sta (bufaddr),y		; make it empty now.
00072Er 3               
00072Er 3               	lda bufaddr		; set dispx
00072Er 3               	and #31
00072Er 3               	sta dispx
00072Er 3               
00072Er 3               	lda bufaddr+1		; Set dispy
00072Er 3               	sec
00072Er 3               	sbc #>MAP
00072Er 3               	sta bufaddr+1
00072Er 3               	asl bufaddr
00072Er 3               	rol bufaddr+1
00072Er 3               	asl bufaddr
00072Er 3               	rol bufaddr+1
00072Er 3               	asl bufaddr
00072Er 3               	rol bufaddr+1
00072Er 3               	lda bufaddr+1
00072Er 3               	sta dispy
00072Er 3               
00072Er 3               	lda colpatt		; get blocknr
00072Er 3               	sta z80_e		; displacement in e.
00072Er 3               	lda #0
00072Er 3               	sta z80_d		; no high byte.
00072Er 3               	asl z80_e  		; multiply char by 8.
00072Er 3               	rol z80_d
00072Er 3               	asl z80_e
00072Er 3               	rol z80_d
00072Er 3               	asl z80_e
00072Er 3               	rol z80_d
00072Er 3               	clc
00072Er 3               	lda z80_e
00072Er 3               	adc #<chgfx 		; address of graphics.
00072Er 3               	sta tileaddr
00072Er 3               	lda z80_d
00072Er 3               	adc #>chgfx
00072Er 3               	sta tileaddr+1
00072Er 3               
00072Er 3               	jsr gprad 		; get screen address.
00072Er 3               	ldx #7			; number of pixel rows to write.
00072Er 3               gtblk0:
00072Er 3               	ldy #0
00072Er 3               	lda (tileaddr),y 	; get image byte.
00072Er 3               	ldy scrtab,x
00072Er 3               	eor (scraddr),y 	; XOR tile on screen
00072Er 3               	sta (scraddr),y 	; copy to screen.
00072Er 3               	inc tileaddr 		; next image byte.
00072Er 3               	bne :+
00072Er 3               	inc tileaddr+1
00072Er 3               :
00072Er 3               	dex	 		; repeat for 8 pixel rows.
00072Er 3               	bpl gtblk0
00072Er 3               	rts
00072Er 3               .endif
00072Er 3               
00072Er 3               ;--------------------------------------------------------------
00072Er 3               ; Touched deadly block check.
00072Er 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
00072Er 3               ;
00072Er 3               ; Input:
00072Er 3               ;  IX = sprite address
00072Er 3               ;
00072Er 3               ; Output:
00072Er 3               ;  A  = 0 is ok, A=5 is not ok
00072Er 3               ;--------------------------------------------------------------
00072Er 3               
00072Er 3               tded:
00072Er 3  A0 08        	ldy #8
000730r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000732r 3  85 rr        	sta dispy
000734r 3  C8           	iny
000735r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000737r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000739r 3  20 rr rr     	jsr tstbl		; get map address.
00073Cr 3  48           	pha
00073Dr 3  A9 1F        	lda #31			; default distance to next line down.
00073Fr 3  85 rr        	sta z80_e
000741r 3  68           	pla
000742r 3  C5 rr        	cmp z80_b		; is this the required block?
000744r 3  D0 01        	bne :+
000746r 3  60           	rts			; yes.
000747r 3               :
000747r 3  E6 rr        	inc bufaddr 		; next cell.
000749r 3  D0 02        	bne :+
00074Br 3  E6 rr        	inc bufaddr+1
00074Dr 3               :
00074Dr 3  A0 00        	ldy #0
00074Fr 3  B1 rr        	lda (bufaddr),y		; fetch type.
000751r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
000753r 3  D0 01        	bne :+
000755r 3  60           	rts			; yes.
000756r 3               :
000756r 3  A5 rr        	lda dispx		; horizontal position.
000758r 3  85 rr        	sta z80_c 		; store column in c register.
00075Ar 3  29 07        	and #7			; is it straddling cells?
00075Cr 3  D0 03        	bne :+
00075Er 3  4C rr rr     	jmp tded0		; no.
000761r 3               :
000761r 3  E6 rr        	inc bufaddr 		; last cell.
000763r 3  D0 02        	bne :+
000765r 3  E6 rr        	inc bufaddr+1
000767r 3               :
000767r 3  A0 00        	ldy #0
000769r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00076Br 3  C5 rr        	cmp z80_b		; is this the block?
00076Dr 3  D0 01        	bne :+
00076Fr 3  60           	rts			; yes.
000770r 3               :
000770r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000772r 3               tded0:
000772r 3  18           	clc 			; point to next row.
000773r 3  A5 rr        	lda bufaddr
000775r 3  65 rr        	adc z80_e
000777r 3  85 rr        	sta bufaddr
000779r 3  90 02        	bcc :+
00077Br 3  E6 rr        	inc bufaddr+1
00077Dr 3               :
00077Dr 3  A0 00        	ldy #0
00077Fr 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000781r 3  C5 rr        	cmp z80_b		; is this fatal?
000783r 3  D0 01        	bne :+
000785r 3  60           	rts			; yes.
000786r 3               :
000786r 3  E6 rr        	inc bufaddr 		; next cell.
000788r 3  D0 02        	bne :+
00078Ar 3  E6 rr        	inc bufaddr+1
00078Cr 3               :
00078Cr 3  A0 00        	ldy #0
00078Er 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000790r 3  C5 rr        	cmp z80_b		; is this fatal?
000792r 3  D0 01        	bne :+
000794r 3  60           	rts			; yes.
000795r 3               :
000795r 3  A5 rr        	lda z80_c		; horizontal position.
000797r 3  29 07        	and #7			; is it straddling cells?
000799r 3  D0 03        	bne :+
00079Br 3  4C rr rr     	jmp tded1 		; no.
00079Er 3               :
00079Er 3  E6 rr        	inc bufaddr		; last cell.
0007A0r 3  D0 02        	bne :+
0007A2r 3  E6 rr        	inc bufaddr+1
0007A4r 3               :
0007A4r 3  A0 00        	ldy #0
0007A6r 3  B1 rr        	lda (bufaddr),y		; fetch type.
0007A8r 3  C5 rr        	cmp z80_b		; is this fatal?
0007AAr 3  D0 01        	bne :+
0007ACr 3  60           	rts			; yes.
0007ADr 3               :
0007ADr 3               tded1:
0007ADr 3  A5 rr        	lda dispy		; vertical position.
0007AFr 3  29 07        	and #7 			; is it straddling cells?
0007B1r 3  D0 01        	bne :+
0007B3r 3  60           	rts			; no, job done.
0007B4r 3               :
0007B4r 3  18           	clc			; point to next row.
0007B5r 3  A5 rr        	lda bufaddr
0007B7r 3  65 rr        	adc z80_e
0007B9r 3  85 rr        	sta bufaddr
0007BBr 3  90 02        	bcc :+
0007BDr 3  E6 rr        	inc bufaddr+1
0007BFr 3               :
0007BFr 3  A0 00        	ldy #0
0007C1r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0007C3r 3  C5 rr        	cmp z80_b		; is this fatal?
0007C5r 3  D0 01        	bne :+
0007C7r 3  60           	rts			; yes.
0007C8r 3               :
0007C8r 3  E6 rr        	inc bufaddr		; next cell.
0007CAr 3  D0 02        	bne :+
0007CCr 3  E6 rr        	inc bufaddr+1
0007CEr 3               :
0007CEr 3  A0 00        	ldy #0
0007D0r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0007D2r 3  C5 rr        	cmp z80_b		; is this fatal?
0007D4r 3  D0 01        	bne :+
0007D6r 3  60           	rts			; yes.
0007D7r 3               :
0007D7r 3  A5 rr        	lda z80_c		; horizontal position.
0007D9r 3  29 07        	and #7			; is it straddling cells?
0007DBr 3  D0 01        	bne :+
0007DDr 3  60           	rts			; no.
0007DEr 3               :
0007DEr 3  E6 rr        	inc bufaddr		; last cell.
0007E0r 3  D0 02        	bne :+
0007E2r 3  E6 rr        	inc bufaddr+1
0007E4r 3               :
0007E4r 3  A0 00        	ldy #0
0007E6r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
0007E8r 3  60           	rts 			; return with final type in accumulator.
0007E9r 3               
0007E9r 3               ;---------------------------------------------------
0007E9r 3               ; Fetch block type at (dispx, dispy).
0007E9r 3               ;
0007E9r 3               ; Output:
0007E9r 3               ;  A = block type
0007E9r 3               ;---------------------------------------------------
0007E9r 3               
0007E9r 3               tstbl:
0007E9r 3  A5 rr        	lda dispy 		; fetch y coord.
0007EBr 3  4A           	lsr a			; bufaddr = y/8
0007ECr 3  4A           	lsr a
0007EDr 3  4A           	lsr a
0007EEr 3               ;	sta chary
0007EEr 3               
0007EEr 3  85 rr        	sta bufaddr
0007F0r 3  A9 00        	lda #0
0007F2r 3  85 rr        	sta bufaddr+1
0007F4r 3               
0007F4r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
0007F6r 3  26 rr        	rol bufaddr+1
0007F8r 3  06 rr        	asl bufaddr
0007FAr 3  26 rr        	rol bufaddr+1
0007FCr 3  06 rr        	asl bufaddr
0007FEr 3  26 rr        	rol bufaddr+1
000800r 3  06 rr        	asl bufaddr
000802r 3  26 rr        	rol bufaddr+1
000804r 3  06 rr        	asl bufaddr
000806r 3  26 rr        	rol bufaddr+1
000808r 3               
000808r 3  A5 rr        	lda dispx		; x/8
00080Ar 3  4A           	lsr a
00080Br 3  4A           	lsr a
00080Cr 3  4A           	lsr a
00080Dr 3               ;	sta charx
00080Dr 3               
00080Dr 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00080Er 3  65 rr        	adc bufaddr
000810r 3  69 00        	adc #<MAP
000812r 3  85 rr        	sta bufaddr
000814r 3  A5 rr        	lda bufaddr+1
000816r 3  69 04        	adc #>MAP
000818r 3  85 rr        	sta bufaddr+1
00081Ar 3               
00081Ar 3  A0 00        	ldy #0
00081Cr 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00081Er 3  60           	rts
00081Fr 3               
00081Fr 3               ;-------------------------------------------------------------------
00081Fr 3               ; Jump - if we can.
00081Fr 3               ; Requires initial speed to be set up in accumulator prior to call.
00081Fr 3               ;
00081Fr 3               ; Input:
00081Fr 3               ;  IX = sprite address
00081Fr 3               ;-------------------------------------------------------------------
00081Fr 3               
00081Fr 3               jump:
00081Fr 3  A0 0D        	ldy #var_jumpLo
000821r 3  B1 rr        	lda (z80_ix),y		; jump table low.
000823r 3  A0 0E        	ldy #var_jumpHi
000825r 3  11 rr        	ora (z80_ix),y		; jump table high.
000827r 3  F0 01        	beq :+
000829r 3  60           	rts			; already in the air.
00082Ar 3               :
00082Ar 3  A9 rr        	lda #>jtab
00082Cr 3  A0 0E        	ldy #var_jumpHi
00082Er 3  91 rr        	sta (z80_ix),y		; set jump high.
000830r 3  A9 rr        	lda #<jtab		; jump table start.
000832r 3  A0 0D        	ldy #var_jumpLo
000834r 3  91 rr        	sta (z80_ix),y		; set jump low.
000836r 3  60           	rts
000837r 3               
000837r 3               ; Jump table.
000837r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000837r 3               ;.align 32
000837r 3               ;jtab:
000837r 3               ;	.byte 248,250,252
000837r 3               ;	.byte 254,254,255
000837r 3               ;	.byte 255,255,0,0
000837r 3               ;	.byte 0,1,1,1,2,2
000837r 3               ;	.byte 4,6,8,8,8,99
000837r 3               
000837r 3               ;------------------------------------------------
000837r 3               ; Random numbers code.
000837r 3               ; Pseudo-random number generator, 8-bit.
000837r 3               ;
000837r 3               ; Output:
000837r 3               ;  RND = random number
000837r 3               ;------------------------------------------------
000837r 3               
000837r 3               random:
000837r 3  A5 rr        	lda seed
000839r 3  F0 05        	beq doEor
00083Br 3  0A           	asl a
00083Cr 3  F0 04        	beq noEor
00083Er 3  90 02        	bcc noEor
000840r 3  49 1D        doEor:	eor #$1d
000842r 3  85 rr        noEor:	sta seed
000844r 3  60           	rts
000845r 3               
000845r 3               ;	lda seed		; get last random number.
000845r 3               ;	asl a
000845r 3               ;	asl a
000845r 3               ;	clc
000845r 3               ;	adc seed
000845r 3               ;	clc
000845r 3               ;	adc #$45
000845r 3               ;	sta seed		; store new seed.
000845r 3               ;	sta varrnd		; return number in variable.
000845r 3               ;	rts
000845r 3               
000845r 3               ;-------------------------------------------------------
000845r 3               ; Joystick and keyboard reading routines.
000845r 3               ;
000845r 3               ; contrl = 0, Keyboard
000845r 3               ;          1, JoyKeyb
000845r 3               ;          2, JoyMMC
000845r 3               ;
000845r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
000845r 3               ;             ||||||||
000845r 3               ;             |||||||+> Right    KEY 0  - X
000845r 3               ;             ||||||+-> Left     KEY 1  - Z
000845r 3               ;             |||||+--> Down     KEY 2  - .
000845r 3               ;             ||||+---> Up       KEY 3  - ;
000845r 3               ;             |||+----> Fire1    KEY 4  - SPC
000845r 3               ;             ||+-----> Fire2    KEY 5  - Q
000845r 3               ;             |+------> Fire3    KEY 6  - P
000845r 3               ;             +-------> Not used
000845r 3               ;
000845r 3               ;                       Option1  KEY 7  - 1
000845r 3               ;                       Option2  KEY 8  - 2
000845r 3               ;                       Option3  KEY 9  - 3
000845r 3               ;                       Option4  KEY 10 - 4
000845r 3               ;-------------------------------------------------------
000845r 3               
000845r 3               joykey:
000845r 3  A5 rr        	lda contrl 		; control flag.
000847r 3  C9 01        	cmp #1
000849r 3  F0 1A        	beq joy1 		; scan joystick1
00084Br 3  C9 02        	cmp #2
00084Dr 3  F0 1C        	beq joy2 		; scan joystick2
00084Fr 3               
00084Fr 3               ; Scan keyboard
00084Fr 3               
00084Fr 3  A9 00        	lda #0		 	; zero reading.
000851r 3  85 rr        	sta z80_e
000853r 3               
000853r 3  A0 06        	ldy #6	 		; address of last key.
000855r 3               joyke0:
000855r 3  B9 rr rr     	lda keys,y 		; get key from table.
000858r 3  20 rr rr     	jsr ktest		; being pressed?
00085Br 3  26 rr        	rol z80_e 		; rotate into reading.
00085Dr 3               
00085Dr 3  88           	dey		 	; next key.
00085Er 3  10 F5        	bpl joyke0 		; repeat for all keys.
000860r 3               joyret:
000860r 3  A5 rr        	lda z80_e
000862r 3  85 rr        	sta joyval
000864r 3  60           	rts
000865r 3               
000865r 3               ; Scan joystick 1
000865r 3               
000865r 3               joy1:
000865r 3  20 rr rr     	jsr joy1scan
000868r 3  4C rr rr     	jmp joyret 		; store the value.
00086Br 3               
00086Br 3               ; Scan joystick 2
00086Br 3               
00086Br 3               joy2:
00086Br 3  20 rr rr     	jsr joy2scan
00086Er 3  4C rr rr     	jmp joyret 		; store the value.
000871r 3               
000871r 3               ;---------------------------------------------------------------
000871r 3               ; Display message.
000871r 3               ;
000871r 3               ; Input:
000871r 3               ;  A = message number
000871r 3               ;---------------------------------------------------------------
000871r 3               
000871r 3               dmsg:
000871r 3  AA           	tax
000872r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000874r 3  85 rr        	sta z80_l
000876r 3  A9 rr        	lda #>msgdat
000878r 3  85 rr        	sta z80_h
00087Ar 3  20 rr rr     	jsr getwrd		; get message number.
00087Dr 3               dmsg3:
00087Dr 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000880r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000883r 3  A5 rr        	lda prtmod		; print mode.
000885r 3  D0 47        	bne bmsg1		; no, double-height text.
000887r 3               dmsg0:
000887r 3  A5 rr        	lda z80_h		; store string pointer.
000889r 3  48           	pha
00088Ar 3  A5 rr        	lda z80_l
00088Cr 3  48           	pha
00088Dr 3               
00088Dr 3  A0 00        	ldy #0
00088Fr 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000891r 3  29 7F        	and #127		; remove any end marker.
000893r 3  C9 0D        	cmp #ASCII_NEWLINE
000895r 3  F0 24        	beq dmsg1
000897r 3  20 rr rr     	jsr pchar		; display character.
00089Ar 3  20 rr rr     	jsr nexpos 		; display position.
00089Dr 3  D0 03        	bne dmsg2		; not on a new line.
00089Fr 3  20 rr rr     	jsr nexlin		; next line down.
0008A2r 3               dmsg2:
0008A2r 3  68           	pla			; retrieve string pointer
0008A3r 3  85 rr        	sta z80_l
0008A5r 3  68           	pla
0008A6r 3  85 rr        	sta z80_h
0008A8r 3               
0008A8r 3  A0 00        	ldy #0
0008AAr 3  B1 rr        	lda (z80_hl),y		; fetch last character.
0008ACr 3  0A           	asl a  			; was it the end?
0008ADr 3  90 03        	bcc :+
0008AFr 3  4C rr rr     	jmp dscor2		; yes, job done.
0008B2r 3               :
0008B2r 3  E6 rr        	inc z80_l		; next character to display.
0008B4r 3  D0 02        	bne :+
0008B6r 3  E6 rr        	inc z80_h
0008B8r 3               :
0008B8r 3  4C rr rr     	jmp dmsg0
0008BBr 3               dmsg1:
0008BBr 3  E6 rr        	inc dispy
0008BDr 3  A5 rr        	lda dispy
0008BFr 3  C9 18        	cmp #24
0008C1r 3  90 04        	bcc dmsg4
0008C3r 3  A9 00        	lda #0
0008C5r 3  85 rr        	sta dispy
0008C7r 3               dmsg4:
0008C7r 3  A9 00        	lda #0
0008C9r 3  85 rr        	sta dispx
0008CBr 3  4C rr rr     	jmp dmsg2
0008CEr 3               
0008CEr 3               
0008CEr 3               ;----------------------------------------------------------
0008CEr 3               ; Display message in big text.
0008CEr 3               ;
0008CEr 3               ; Input:
0008CEr 3               ;  HL = string pointer
0008CEr 3               ;----------------------------------------------------------
0008CEr 3               
0008CEr 3               bmsg1:
0008CEr 3  A0 00        	ldy #0
0008D0r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
0008D2r 3  29 7F        	and #127		; only want 7 bits.
0008D4r 3  C9 0D        	cmp #ASCII_NEWLINE
0008D6r 3  F0 13        	beq bmsg2
0008D8r 3  20 rr rr     	jsr bchar 		; display big char.
0008DBr 3               bmsg3:
0008DBr 3  A0 00        	ldy #0
0008DDr 3  B1 rr        	lda (z80_hl),y 		; look at last character.
0008DFr 3  48           	pha
0008E0r 3  E6 rr        	inc z80_l 		; next character in list.
0008E2r 3  D0 02        	bne :+
0008E4r 3  E6 rr        	inc z80_h
0008E6r 3               :
0008E6r 3  68           	pla
0008E7r 3  0A           	asl a  			; was terminator flag set?
0008E8r 3  90 E4        	bcc bmsg1		; no, keep going.
0008EAr 3               
0008EAr 3  60           	rts
0008EBr 3               bmsg2:
0008EBr 3  A9 00        	lda #0
0008EDr 3  85 rr        	sta dispx
0008EFr 3  E6 rr        	inc dispy
0008F1r 3  E6 rr        	inc dispy
0008F3r 3  A5 rr        	lda dispy
0008F5r 3  C9 17        	cmp #23
0008F7r 3  90 E2        	bcc bmsg3
0008F9r 3  A9 00        	lda #0
0008FBr 3  85 rr        	sta dispy
0008FDr 3  4C rr rr     	jmp bmsg3
000900r 3               
000900r 3               ;----------------------------------------------------------
000900r 3               ; Big character display.
000900r 3               ;
000900r 3               ; Input:
000900r 3               ;  A = character
000900r 3               ;----------------------------------------------------------
000900r 3               
000900r 3               bchar:
000900r 3  85 rr        	sta z80_e		; save char in lb
000902r 3  A9 00        	lda #0
000904r 3  85 rr        	sta z80_d		; reset hb
000906r 3               
000906r 3  06 rr        	asl z80_e 		; multiply char by 8.
000908r 3  26 rr        	rol z80_d
00090Ar 3  06 rr        	asl z80_e
00090Cr 3  26 rr        	rol z80_d
00090Er 3  06 rr        	asl z80_e
000910r 3  26 rr        	rol z80_d		; de = a*8
000912r 3               
000912r 3  18           	clc			; de = #<(FONT-256) + a*8
000913r 3  A5 rr        	lda z80_e
000915r 3  69 rr        	adc #<(FONT-256) 		; address of font.
000917r 3  85 rr        	sta z80_e
000919r 3  A5 rr        	lda z80_d
00091Br 3  69 rr        	adc #>(FONT-256)
00091Dr 3  85 rr        	sta z80_d
00091Fr 3               
00091Fr 3  20 rr rr     	jsr gaadd		; set colour attribute
000922r 3  AD rr rr     	lda fontcol
000925r 3  A0 00        	ldy #0
000927r 3  91 rr        	sta (bufaddr),y
000929r 3               
000929r 3  20 rr rr     	jsr gprad 		; get screen address.
00092Cr 3               
00092Cr 3  A2 00        	ldx #0			; height of character in font.
00092Er 3               bchar0:
00092Er 3  A0 00        	ldy #0
000930r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000932r 3               
000932r 3               .if iflag
000932r 3               	eor #$ff
000932r 3               .endif
000932r 3               
000932r 3  91 rr        	sta (scraddr),y
000934r 3  48           	pha
000935r 3  20 rr rr     	jsr nline 		; next line down.
000938r 3  68           	pla
000939r 3  91 rr        	sta (scraddr),y
00093Br 3  20 rr rr     	jsr nline 		; next line down.
00093Er 3               
00093Er 3  18           	clc
00093Fr 3  E6 rr        	inc z80_e 		; next line of font.
000941r 3  D0 02        	bne :+
000943r 3  E6 rr        	inc z80_d
000945r 3               :
000945r 3  E8           	inx
000946r 3  E0 08        	cpx #8
000948r 3  D0 E4        	bne bchar0
00094Ar 3               
00094Ar 3  20 rr rr     	jsr nexpos		; display position.
00094Dr 3  D0 05        	bne bchar2 		; not on a new line.
00094Fr 3               bchar3:
00094Fr 3  E6 rr        	inc dispy
000951r 3  20 rr rr     	jsr nexlin 		; next line check.
000954r 3               bchar2:
000954r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000957r 3               
000957r 3               
000957r 3               ;-------------------------------------------------
000957r 3               ; Display a character.
000957r 3               ;
000957r 3               ; Input:
000957r 3               ;  A = character
000957r 3               ;-------------------------------------------------
000957r 3               
000957r 3               achar:
000957r 3  85 rr        	sta z80_b 		; copy to b.
000959r 3  20 rr rr     	jsr preprt 		; get ready to print.
00095Cr 3  A5 rr        	lda z80_b		; character in accumulator.
00095Er 3  A6 rr        	ldx prtmod 		; print mode.
000960r 3  F0 03        	beq :+
000962r 3  4C rr rr     	jmp bchar 		; no, double-height text.
000965r 3               :
000965r 3  20 rr rr     	jsr pchar 		; display character.
000968r 3  20 rr rr     	jsr nexpos 		; display position.
00096Br 3  F0 E2        	beq bchar3		; next line down.
00096Dr 3  4C rr rr     	jmp bchar2 		; tidy up.
000970r 3               
000970r 3               
000970r 3               ;-------------------------------------------------
000970r 3               ; Get next print column position.
000970r 3               ;-------------------------------------------------
000970r 3               
000970r 3               nexpos:
000970r 3  E6 rr        	inc dispx		; move along one position.
000972r 3  A5 rr        	lda dispx 		; get coordinate.
000974r 3  C9 16        	cmp #22
000976r 3  D0 0E        	bne :+
000978r 3  A9 00        	lda #0
00097Ar 3  85 rr        	sta dispx
00097Cr 3  A5 rr        	lda prtmod
00097Er 3  F0 06        	beq :+
000980r 3  20 rr rr     	jsr nexlin
000983r 3  4C rr rr     	jmp nexlin
000986r 3               :
000986r 3  60           	rts
000987r 3               
000987r 3               ;-------------------------------------------------
000987r 3               ; Get next print line position.
000987r 3               ;-------------------------------------------------
000987r 3               
000987r 3               nexlin:
000987r 3  E6 rr        	inc dispy 		; newline.
000989r 3  A5 rr        	lda dispy		; vertical position.
00098Br 3  C9 16        	cmp #22			; past screen edge?
00098Dr 3  B0 01        	bcs :+
00098Fr 3  60           	rts			; no, still okay.
000990r 3               :
000990r 3  A9 00        	lda #0			; restart at top.
000992r 3  85 rr        	sta dispy
000994r 3  60           	rts
000995r 3               
000995r 3               ;--------------------------------------------------------
000995r 3               ; Pre-print preliminaries.
000995r 3               ;--------------------------------------------------------
000995r 3               
000995r 3               preprt:
000995r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000997r 3  8D rr rr     	sta grbase		; set up graphics base.
00099Ar 3  A9 rr        	lda #>(FONT-256)
00099Cr 3  8D rr rr     	sta grbase+1
00099Fr 3               prescr:
00099Fr 3  A5 rr        	lda charx 		; display coordinates.
0009A1r 3  85 rr        	sta dispx		; set up general coordinates.
0009A3r 3  A5 rr        	lda chary
0009A5r 3  85 rr        	sta dispy
0009A7r 3  60           	rts
0009A8r 3               
0009A8r 3               ;--------------------------------------------------------------
0009A8r 3               ; Get messagenr x in hl
0009A8r 3               ;
0009A8r 3               ; Input:
0009A8r 3               ;  HL = pointer to message list
0009A8r 3               ;  X  = message number.
0009A8r 3               ;--------------------------------------------------------------
0009A8r 3               
0009A8r 3               getwrd:
0009A8r 3  E0 00        	cpx #0
0009AAr 3  D0 01        	bne:+ 			; first word in list?
0009ACr 3  60           	rts 			; yep, don't search.
0009ADr 3               :
0009ADr 3  A0 00        	ldy #0
0009AFr 3               getwd0:
0009AFr 3  B1 rr        	lda (z80_hl),y
0009B1r 3  48           	pha
0009B2r 3  E6 rr        	inc z80_l
0009B4r 3  D0 02        	bne :+
0009B6r 3  E6 rr        	inc z80_h
0009B8r 3               :
0009B8r 3  68           	pla
0009B9r 3  C9 80        	cmp #128		; found end?
0009BBr 3  30 F2        	bmi getwd0		; no, carry on.
0009BDr 3  CA           	dex			; until we have right number.
0009BEr 3  D0 EF        	bne getwd0
0009C0r 3  60           	rts
0009C1r 3               
0009C1r 3               ;-----------------------------------------------------------
0009C1r 3               ; Bubble sort.
0009C1r 3               ;-----------------------------------------------------------
0009C1r 3               
0009C1r 3               bsort:
0009C1r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0009C3r 3  85 rr        	sta qscnt
0009C5r 3               
0009C5r 3  A9 rr        	lda #<sprtab 		; sprite table.
0009C7r 3  85 rr        	sta z80_x
0009C9r 3  A9 rr        	lda #>sprtab
0009CBr 3  85 rr        	sta z80_i
0009CDr 3               bsort0:
0009CDr 3  A0 00        	ldy #0
0009CFr 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
0009D1r 3  C9 FF        	cmp #255 		; is it switched off?
0009D3r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
0009D5r 3               
0009D5r 3  A0 12        	ldy #TABSIZ
0009D7r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
0009D9r 3  C9 FF        	cmp #255 		; is it enabled?
0009DBr 3  F0 0A        	beq bsort2 		; no, nothing to swap.
0009DDr 3               
0009DDr 3  A0 15        	ldy #TABSIZ+3
0009DFr 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
0009E1r 3  A0 03        	ldy #3
0009E3r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
0009E5r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
0009E7r 3               bsort2:
0009E7r 3  18           	clc
0009E8r 3  A5 rr        	lda z80_x
0009EAr 3  69 12        	adc #TABSIZ 		; distance to next odd/even entry.
0009ECr 3  85 rr        	sta z80_x
0009EEr 3  90 02        	bcc :+
0009F0r 3  E6 rr        	inc z80_i
0009F2r 3               :
0009F2r 3  C6 rr        	dec qscnt
0009F4r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
0009F6r 3  60           	rts
0009F7r 3               
0009F7r 3               bsort1:
0009F7r 3  A0 12        	ldy #TABSIZ
0009F9r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
0009FBr 3  C9 FF        	cmp #255		; is it enabled?
0009FDr 3  F0 E8        	beq bsort2		; no, nothing to swap.
0009FFr 3  20 rr rr     	jsr swspr		; swap positions.
000A02r 3  4C rr rr     	jmp bsort2
000A05r 3               swemp:
000A05r 3  A0 12        	ldy #TABSIZ
000A07r 3  B1 rr        	lda (z80_ix),y		; next table entry.
000A09r 3  C9 FF        	cmp #255		; is that one on?
000A0Br 3  F0 DA        	beq bsort2		; no, nothing to swap.
000A0Dr 3  20 rr rr     	jsr swspr		; swap positions.
000A10r 3  4C rr rr     	jmp bsort2
000A13r 3               
000A13r 3               ; Swap sprites.
000A13r 3               
000A13r 3               swspr:
000A13r 3  A5 rr        	lda z80_x		; table address
000A15r 3  85 rr        	sta z80_e		; copy to de pair.
000A17r 3  85 rr        	sta z80_l		; copy to hl pair.
000A19r 3  A5 rr        	lda z80_i
000A1Br 3  85 rr        	sta z80_h
000A1Dr 3  85 rr        	sta z80_d
000A1Fr 3               
000A1Fr 3  18           	clc
000A20r 3  A5 rr        	lda z80_l
000A22r 3  69 12        	adc #TABSIZ		; distance to second entry.
000A24r 3  85 rr        	sta z80_l
000A26r 3  90 02        	bcc :+
000A28r 3  E6 rr        	inc z80_h
000A2Ar 3               :
000A2Ar 3  A9 12        	lda #TABSIZ		; bytes to swap.
000A2Cr 3  85 rr        	sta z80_b
000A2Er 3  A0 00        	ldy #0
000A30r 3               swspr0:
000A30r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000A32r 3  48           	pha
000A33r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000A35r 3  91 rr        	sta (z80_hl),y 		; copy to second.
000A37r 3  68           	pla
000A38r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000A3Ar 3               
000A3Ar 3  E6 rr        	inc z80_e 		; next byte.
000A3Cr 3  D0 02        	bne :+
000A3Er 3  E6 rr        	inc z80_d
000A40r 3               :
000A40r 3  E6 rr        	inc z80_l 		; next byte.
000A42r 3  D0 02        	bne :+
000A44r 3  E6 rr        	inc z80_h
000A46r 3               :
000A46r 3  C6 rr        	dec z80_b
000A48r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000A4Ar 3  60           	rts
000A4Br 3               
000A4Br 3               ;----------------------------------------------------
000A4Br 3               ; Process sprites.
000A4Br 3               ;----------------------------------------------------
000A4Br 3               
000A4Br 3               pspr:
000A4Br 3  A9 0C        	lda #NUMSPR		; sprites to process.
000A4Dr 3  85 rr        	sta sprptr
000A4Fr 3               
000A4Fr 3  A9 rr        	lda #<sprtab 		; sprite table.
000A51r 3  85 rr        	sta z80_x
000A53r 3  A9 rr        	lda #>sprtab
000A55r 3  85 rr        	sta z80_i
000A57r 3               pspr1:
000A57r 3  A0 00        	ldy #0
000A59r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000A5Br 3  C9 09        	cmp #9 			; within range of sprite types?
000A5Dr 3  B0 03        	bcs :+
000A5Fr 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000A62r 3               :
000A62r 3  18           	clc
000A63r 3  A5 rr        	lda z80_x
000A65r 3  69 12        	adc #TABSIZ 		; distance to next odd/even entry.
000A67r 3  85 rr        	sta z80_x
000A69r 3  90 02        	bcc :+
000A6Br 3  E6 rr        	inc z80_i		; next sprite.
000A6Dr 3               :
000A6Dr 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000A6Fr 3  D0 E6        	bne pspr1
000A71r 3  60           	rts
000A72r 3               
000A72r 3               pspr2:
000A72r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000A74r 3  85 rr        	sta ogptr
000A76r 3  A5 rr        	lda z80_i
000A78r 3  85 rr        	sta ogptr+1
000A7Ar 3  20 rr rr     	jsr pspr3		; do the routine.
000A7Dr 3               rtorg:
000A7Dr 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000A7Fr 3  85 rr        	sta z80_x
000A81r 3  A5 rr        	lda ogptr+1
000A83r 3  85 rr        	sta z80_i
000A85r 3               rtorg0:
000A85r 3  60           	rts
000A86r 3               
000A86r 3               pspr3:
000A86r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000A88r 3  85 rr        	sta z80_l
000A8Ar 3  A9 rr        	lda #>evtyp0
000A8Cr 3  85 rr        	sta z80_h
000A8Er 3               pspr4:
000A8Er 3  B1 rr        	lda (z80_ix),y
000A90r 3  0A           	asl a			; double accumulator.
000A91r 3  18           	clc
000A92r 3  65 rr        	adc z80_l
000A94r 3  85 rr        	sta z80_l
000A96r 3  90 02        	bcc :+
000A98r 3  E6 rr        	inc z80_h
000A9Ar 3               :
000A9Ar 3  B1 rr        	lda (z80_hl),y
000A9Cr 3  85 rr        	sta z80_e 		; copy to de.
000A9Er 3  48           	pha
000A9Fr 3               
000A9Fr 3  E6 rr        	inc z80_l 		; next byte of address.
000AA1r 3  D0 02        	bne :+
000AA3r 3  E6 rr        	inc z80_h
000AA5r 3               :
000AA5r 3  B1 rr        	lda (z80_hl),y 		; address high.
000AA7r 3  85 rr        	sta z80_d
000AA9r 3               
000AA9r 3  48           	pha	 		; swap address into hl.
000AAAr 3  A5 rr        	lda z80_h
000AACr 3  85 rr        	sta z80_d
000AAEr 3  68           	pla
000AAFr 3  85 rr        	sta z80_h
000AB1r 3  68           	pla
000AB2r 3  85 rr        	sta z80_l
000AB4r 3  A5 rr        	lda z80_l
000AB6r 3  85 rr        	sta z80_e
000AB8r 3               
000AB8r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000ABBr 3               
000ABBr 3               ; Address of each sprite type's routine.
000ABBr 3               
000ABBr 3  rr rr        evtyp0:	.word evnt00
000ABDr 3  rr rr        evtyp1:	.word evnt01
000ABFr 3  rr rr        evtyp2:	.word evnt02
000AC1r 3  rr rr        evtyp3:	.word evnt03
000AC3r 3  rr rr        evtyp4:	.word evnt04
000AC5r 3  rr rr        evtyp5:	.word evnt05
000AC7r 3  rr rr        evtyp6:	.word evnt06
000AC9r 3  rr rr        evtyp7:	.word evnt07
000ACBr 3  rr rr        evtyp8:	.word evnt08
000ACDr 3               
000ACDr 3               ;--------------------------------------------------------------
000ACDr 3               ; Display sprites.
000ACDr 3               ;
000ACDr 3               ; Input:
000ACDr 3               ;  IX = sprite table
000ACDr 3               ;--------------------------------------------------------------
000ACDr 3               
000ACDr 3               dspr:
000ACDr 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000ACFr 3  85 rr        	sta sprcnt
000AD1r 3               
000AD1r 3               dspr0:
000AD1r 3  A0 00        	ldy #var_Type
000AD3r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000AD5r 3  C9 FF        	cmp #255 		; is it enabled?
000AD7r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000AD9r 3               dspr5:
000AD9r 3  A0 05        	ldy #var_newType
000ADBr 3  B1 rr        	lda (z80_ix),y 		; new type.
000ADDr 3  C9 FF        	cmp #255		; is it enabled?
000ADFr 3  F0 03        	beq dspr2
000AE1r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000AE4r 3               dspr2:
000AE4r 3  A0 05        	ldy #var_newType
000AE6r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000AE8r 3  A0 00        	ldy #var_Type
000AEAr 3  91 rr        	sta (z80_ix),y
000AECr 3  A0 06        	ldy #var_newImage
000AEEr 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000AF0r 3  A0 01        	ldy #var_Image
000AF2r 3  91 rr        	sta (z80_ix),y
000AF4r 3  A0 07        	ldy #var_newFrame
000AF6r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000AF8r 3  A0 02        	ldy #var_Frame
000AFAr 3  91 rr        	sta (z80_ix),y
000AFCr 3  A0 08        	ldy #var_newY
000AFEr 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000B00r 3  A0 03        	ldy #var_Y
000B02r 3  91 rr        	sta (z80_ix),y
000B04r 3  A0 09        	ldy #var_newX
000B06r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000B08r 3  A0 04        	ldy #var_X
000B0Ar 3  91 rr        	sta (z80_ix),y
000B0Cr 3               
000B0Cr 3  18           	clc
000B0Dr 3  A5 rr        	lda z80_x
000B0Fr 3  69 24        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000B11r 3  85 rr        	sta z80_x
000B13r 3  A5 rr        	lda z80_i
000B15r 3  69 00        	adc #0
000B17r 3  85 rr        	sta z80_i 		; next sprite.
000B19r 3  C6 rr        	dec sprcnt
000B1Br 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000B1Dr 3  60           	rts
000B1Er 3               
000B1Er 3               dspr1:
000B1Er 3               	; _BEEB clipping code copied from CPC Engine
000B1Er 3  A0 03        	ldy #var_Y
000B20r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B22r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B24r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000B26r 3               
000B26r 3  A0 05        	ldy #var_newType
000B28r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000B2Ar 3  C9 FF        	cmp #255		; is this enabled?
000B2Cr 3  D0 06        	bne dspr4 		; yes, display both.
000B2Er 3               
000B2Er 3               dspr6:
000B2Er 3  20 rr rr     	jsr sspria 		; show single sprite.
000B31r 3  4C rr rr     	jmp dspr2
000B34r 3               
000B34r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000B34r 3               
000B34r 3               dspr4:
000B34r 3               	; _BEEB clipping code copied from CPC Engine
000B34r 3  A0 08        	ldy #var_newY
000B36r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B38r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B3Ar 3  B0 F2        	bcs dspr6		; yes, don't display it.
000B3Cr 3               
000B3Cr 3  A0 04        	ldy #var_X
000B3Er 3  B1 rr        	lda (z80_ix),y		; old x.
000B40r 3  A0 09        	ldy #var_newX
000B42r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000B44r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000B46r 3               
000B46r 3  A0 03        	ldy #var_Y
000B48r 3  B1 rr        	lda (z80_ix),y		; old y.
000B4Ar 3  A0 08        	ldy #var_newY
000B4Cr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B4Er 3  D0 17        	bne dspr7		; they differ, need to redraw.
000B50r 3               
000B50r 3  A0 02        	ldy #var_Frame
000B52r 3  B1 rr        	lda (z80_ix),y 		; old frame.
000B54r 3  A0 07        	ldy #var_newFrame
000B56r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B58r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000B5Ar 3               
000B5Ar 3  A0 01        	ldy #var_Image
000B5Cr 3  B1 rr        	lda (z80_ix),y 		; old image.
000B5Er 3  A0 06        	ldy #var_newImage
000B60r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000B62r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000B64r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000B67r 3               dspr7:
000B67r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000B6Ar 3  4C rr rr     	jmp dspr2
000B6Dr 3               dspr3:
000B6Dr 3               	; _BEEB clipping code copied from CPC Engine
000B6Dr 3  A0 08        	ldy #var_newY
000B6Fr 3  B1 rr        	lda (z80_ix), y		; old x coord
000B71r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B73r 3  90 03        	bcc :+			; no, continue
000B75r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000B78r 3               :
000B78r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000B7Br 3  4C rr rr     	jmp dspr2
000B7Er 3               
000B7Er 3               ;-----------------------------------------
000B7Er 3               ; Get sprite address calculations.
000B7Er 3               ; gspran = new sprite, gsprad = old sprite.
000B7Er 3               ;
000B7Er 3               ; Input:
000B7Er 3               ;  IX = sprite address
000B7Er 3               ;-----------------------------------------
000B7Er 3               
000B7Er 3               gspran:
000B7Er 3  A0 08        	ldy #var_newY
000B80r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000B82r 3  85 rr        	sta dispy
000B84r 3  A0 09        	ldy #var_newX
000B86r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000B88r 3  85 rr        	sta dispx
000B8Ar 3  A0 06        	ldy #var_newImage
000B8Cr 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000B8Er 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000B91r 3               
000B91r 3  A0 00        	ldy #0
000B93r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000B95r 3  A0 07        	ldy #var_newFrame
000B97r 3  18           	clc
000B98r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000B9Ar 3  4C rr rr     	jmp gspra0
000B9Dr 3               
000B9Dr 3               ;-----------------------------------------
000B9Dr 3               ; Calculate old sprite address
000B9Dr 3               ;
000B9Dr 3               ; Input:
000B9Dr 3               ;  IX = sprite address
000B9Dr 3               ;
000B9Dr 3               ; Output:
000B9Dr 3               ;  B  = right byte mask
000B9Dr 3               ;  C  = left byte mask
000B9Dr 3               ;  DE = spriteframe address
000B9Dr 3               ;  scraddr = screenaddress(dispx,dispy)
000B9Dr 3               ;-----------------------------------------
000B9Dr 3               
000B9Dr 3               gsprad:
000B9Dr 3  A0 03        	ldy #var_Y
000B9Fr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000BA1r 3  85 rr        	sta dispy
000BA3r 3  A0 04        	ldy #var_X
000BA5r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000BA7r 3  85 rr        	sta dispx
000BA9r 3  A0 01        	ldy #var_Image
000BABr 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000BADr 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000BB0r 3               
000BB0r 3  A0 00        	ldy #0
000BB2r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000BB4r 3  A0 02        	ldy #var_Frame
000BB6r 3  18           	clc
000BB7r 3  71 rr        	adc (z80_ix),y 		; add frame number.
000BB9r 3               
000BB9r 3               gspra0:
000BB9r 3               .if rflag
000BB9r 3               	sta z80_e		; multiply by 32.
000BB9r 3               	lda #0
000BB9r 3               	sta z80_d
000BB9r 3               
000BB9r 3               	asl z80_e
000BB9r 3               	rol z80_d
000BB9r 3               	asl z80_e
000BB9r 3               	rol z80_d
000BB9r 3               	asl z80_e
000BB9r 3               	rol z80_d
000BB9r 3               	asl z80_e
000BB9r 3               	rol z80_d
000BB9r 3               .if bflag
000BB9r 3               	lda z80_e		; multiply by 48
000BB9r 3               	sta tmp1
000BB9r 3               	lda z80_d
000BB9r 3               	sta tmp2
000BB9r 3               .endif
000BB9r 3               	asl z80_e
000BB9r 3               	rol z80_d
000BB9r 3               .if bflag
000BB9r 3               	clc
000BB9r 3               	lda z80_e
000BB9r 3               	adc tmp1
000BB9r 3               	sta z80_e
000BB9r 3               	lda z80_d
000BB9r 3               	adc tmp2
000BB9r 3               	sta z80_d
000BB9r 3               .endif
000BB9r 3               .else
000BB9r 3  4A           	lsr a	  		; multiply by 128.
000BBAr 3  85 rr        	sta z80_d 		; store in d.
000BBCr 3  85 rr        	sta tmp1
000BBEr 3  A9 00        	lda #0
000BC0r 3  6A           	ror a
000BC1r 3  85 rr        	sta z80_e 		; got low byte.
000BC3r 3  85 rr        	sta tmp2
000BC5r 3               .if bflag
000BC5r 3               	lsr tmp1		; multiply by 192
000BC5r 3               	ror tmp2
000BC5r 3               	clc
000BC5r 3               	lda tmp2
000BC5r 3               	adc z80_e
000BC5r 3               	sta z80_e
000BC5r 3               	lda tmp1
000BC5r 3               	adc z80_d
000BC5r 3               	sta z80_d
000BC5r 3               .endif
000BC5r 3               .endif
000BC5r 3  18           	clc 			; address of play sprites.
000BC6r 3  A5 rr        	lda z80_e
000BC8r 3  69 rr        	adc #<sprgfx
000BCAr 3  85 rr        	sta z80_e
000BCCr 3  A5 rr        	lda z80_d
000BCEr 3  69 rr        	adc #>sprgfx
000BD0r 3  85 rr        	sta z80_d
000BD2r 3               
000BD2r 3  A5 rr        	lda dispx 		; y coordinate.
000BD4r 3  29 06        	and #6 			; position within byte boundary.
000BD6r 3  AA           	tax	 		; low byte of table displacement.
000BD7r 3               .if rflag
000BD7r 3               	stx sprshft
000BD7r 3               .else
000BD7r 3  0A           	asl a	  		; multiply by 32.
000BD8r 3  0A           	asl a  			; already a multiple
000BD9r 3  0A           	asl a  			; of 2, so just 4
000BDAr 3               .if bflag
000BDAr 3               	sta tmp1
000BDAr 3               	asl a  			; shifts needed.
000BDAr 3               	clc
000BDAr 3               	adc tmp1
000BDAr 3               .else
000BDAr 3  0A           	asl a  			; shifts needed.
000BDBr 3               .endif
000BDBr 3  18           	clc 			; add to sprite address.
000BDCr 3  65 rr        	adc z80_e
000BDEr 3  85 rr        	sta z80_e
000BE0r 3  90 02        	bcc :+
000BE2r 3  E6 rr        	inc z80_d
000BE4r 3               :
000BE4r 3               .endif
000BE4r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000BE7r 3  85 rr        	sta z80_c 		; left mask.
000BE9r 3  BD rr rr     	lda spmask+1,x
000BECr 3  85 rr        	sta z80_b 		; right mask.
000BEEr 3               ; Drop into screen address routine.
000BEEr 3  4C rr rr     	jmp scadd
000BF1r 3               
000BF1r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000BF5r 3  0F F0 03 FC  
000BF9r 3               
000BF9r 3               
000BF9r 3               ;-----------------------------------------------------------
000BF9r 3               ; Animates a sprite.
000BF9r 3               ;
000BF9r 3               ; Input:
000BF9r 3               ;  IX = sprite address
000BF9r 3               ;  HL = last sprite address
000BF9r 3               ;-----------------------------------------------------------
000BF9r 3               
000BF9r 3               animsp:
000BF9r 3  25 rr        	and frmno
000BFBr 3  F0 01        	beq :+
000BFDr 3  60           	rts
000BFEr 3               :
000BFEr 3  A0 06        	ldy #var_newImage
000C00r 3  B1 rr        	lda (z80_ix),y		; sprite image
000C02r 3  20 rr rr     	jsr gfrm		; get frame data.
000C05r 3               
000C05r 3  E6 rr        	inc z80_l		; point to frames.
000C07r 3  D0 02        	bne :+
000C09r 3  E6 rr        	inc z80_h
000C0Br 3               :
000C0Br 3  A0 07        	ldy #var_newFrame
000C0Dr 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000C0Fr 3  18           	clc
000C10r 3  69 01        	adc #1			; next one along.
000C12r 3  A0 00        	ldy #0
000C14r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000C16r 3  90 02        	bcc anims0		; no, not yet.
000C18r 3  A9 00        	lda #0			; start at first frame.
000C1Ar 3               anims0:
000C1Ar 3  A0 07        	ldy #var_newFrame
000C1Cr 3  91 rr        	sta (z80_ix),y		; new frame.
000C1Er 3  60           	rts
000C1Fr 3               
000C1Fr 3               ;--------------------------------------------------------------
000C1Fr 3               ; Animate back
000C1Fr 3               ;
000C1Fr 3               ; Input:
000C1Fr 3               ;  IX = sprite address
000C1Fr 3               ;  HL = last sprite address
000C1Fr 3               ;--------------------------------------------------------------
000C1Fr 3               
000C1Fr 3               animbk:
000C1Fr 3  25 rr        	and frmno
000C21r 3  F0 01        	beq :+
000C23r 3  60           	rts
000C24r 3               :
000C24r 3  A0 06        	ldy #var_newImage
000C26r 3  B1 rr        	lda (z80_ix),y		; sprite image.
000C28r 3  20 rr rr     	jsr gfrm		; get frame data.
000C2Br 3               
000C2Br 3  E6 rr        	inc z80_l 		; point to frames.
000C2Dr 3  D0 02        	bne :+
000C2Fr 3  E6 rr        	inc z80_h
000C31r 3               :
000C31r 3  A0 07        	ldy #var_newFrame
000C33r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000C35r 3  F0 03        	beq :+
000C37r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000C3Ar 3               :
000C3Ar 3  A0 00        	ldy #0
000C3Cr 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000C3Er 3               rtanb0:
000C3Er 3  38           	sec
000C3Fr 3  E9 01        	sbc #1			; next one along.
000C41r 3  4C rr rr     	jmp anims0		; set new frame.
000C44r 3               
000C44r 3               ;--------------------------------------------------------------
000C44r 3               ; Check for collision with other sprite, strict enforcement.
000C44r 3               ;
000C44r 3               ; Input:
000C44r 3               ;  b		= sprite to test for
000C44r 3               ;  ix		= current sprite pointer
000C44r 3               ;
000C44r 3               ; global:	b
000C44r 3               ; local:	x,y,hl,de,skptr
000C44r 3               ; calls:	-
000C44r 3               ;--------------------------------------------------------------
000C44r 3               
000C44r 3               sktyp:
000C44r 3  A9 rr        	lda #<sprtab				; sprite table.
000C46r 3  85 rr        	sta z80_l
000C48r 3  A9 rr        	lda #>sprtab
000C4Ar 3  85 rr        	sta z80_h
000C4Cr 3               numsp2:
000C4Cr 3  A9 0C        	lda #NUMSPR				; number of sprites.
000C4Er 3  85 rr        	sta sktptr
000C50r 3               sktyp0:
000C50r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000C52r 3  85 rr        	sta skptr
000C54r 3  A5 rr        	lda z80_h
000C56r 3  85 rr        	sta skptr+1
000C58r 3               
000C58r 3  A0 00        	ldy #0
000C5Ar 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000C5Cr 3  C5 rr        	cmp z80_b				; is it the type we seek?
000C5Er 3  F0 1D        	beq coltyp				; yes, we can use this one.
000C60r 3               sktyp1:
000C60r 3  18           	clc
000C61r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000C63r 3  69 12        	adc #TABSIZ				; size of each entry.
000C65r 3  85 rr        	sta z80_l
000C67r 3  A5 rr        	lda skptr+1
000C69r 3  69 00        	adc #0
000C6Br 3  85 rr        	sta z80_h
000C6Dr 3  C6 rr        	dec sktptr					; one less iteration.
000C6Fr 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000C71r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000C73r 3  85 rr        	sta z80_l
000C75r 3  85 rr        	sta z80_h
000C77r 3  85 rr        	sta skptr				; store pointer to sprite.
000C79r 3  85 rr        	sta skptr+1
000C7Br 3               
000C7Br 3  18           	clc					; don't return with zero flag set.
000C7Cr 3  60           	rts 					; didn't find one.
000C7Dr 3               
000C7Dr 3               coltyp:
000C7Dr 3  A0 00        	ldy #0
000C7Fr 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000C81r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000C83r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000C85r 3               colty0:
000C85r 3  A0 09        	ldy #9					; distance to x position in table.
000C87r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000C89r 3  85 rr        	sta z80_e
000C8Br 3  88           	dey
000C8Cr 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000C8Er 3  85 rr        	sta z80_d
000C90r 3               
000C90r 3               ; Drop into collision detection.
000C90r 3               
000C90r 3               colc16:
000C90r 3  A0 09        	ldy #9
000C92r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000C94r 3  38           	sec					; subtract x.
000C95r 3  E5 rr        	sbc z80_e
000C97r 3  B0 05        	bcs  colc1a 				; result is positive.
000C99r 3  49 FF        	eor #$ff				; make negative positive.
000C9Br 3  18           	clc
000C9Cr 3  69 01        	adc #1
000C9Er 3               colc1a:
000C9Er 3  C9 10        	cmp #16 				; within x range?
000CA0r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000CA2r 3  85 rr        	sta z80_c				; store difference.
000CA4r 3               
000CA4r 3  A0 08        	ldy #8
000CA6r 3  B1 rr        	lda (z80_ix),y				; y coord.
000CA8r 3  38           	sec
000CA9r 3  E5 rr        	sbc z80_d				; subtract y.
000CABr 3  B0 05        	bcs colc1b				; result is positive.
000CADr 3  49 FF        	eor #$ff				; make negative positive.
000CAFr 3  18           	clc
000CB0r 3  69 01        	adc #1
000CB2r 3               colc1b:
000CB2r 3  C9 10        	cmp #16					; within y range?
000CB4r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000CB6r 3  18           	clc					; add x difference.
000CB7r 3  65 rr        	adc z80_c
000CB9r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000CBBr 3  B0 02        	bcs :+
000CBDr 3  38           	sec
000CBEr 3  60           	rts 					; carry set if there's a collision.
000CBFr 3               :
000CBFr 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000CC2r 3               colty1:
000CC2r 3  A5 rr        	lda z80_x  				; compare the two.
000CC4r 3  C5 rr        	cmp z80_l
000CC6r 3  D0 09        	bne end_col
000CC8r 3  A5 rr        	lda z80_i
000CCAr 3  C5 rr        	cmp z80_h
000CCCr 3  D0 03        	bne end_col
000CCEr 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000CD1r 3               end_col:
000CD1r 3  4C rr rr     	jmp colty0
000CD4r 3               
000CD4r 3               ;-----------------------------------------------------------
000CD4r 3               ; Display number, left aligned
000CD4r 3               ;
000CD4r 3               ; Input:
000CD4r 3               ;  a		= number
000CD4r 3               ;
000CD4r 3               ; global:	-
000CD4r 3               ; local:	a,y,bc,hl,displ0
000CD4r 3               ; calls:	num2ch,dmsg3
000CD4r 3               ;-----------------------------------------------------------
000CD4r 3               
000CD4r 3               disply:
000CD4r 3  85 rr        	sta z80_a
000CD6r 3  A9 rr        	lda #<displ0				; display workspace.
000CD8r 3  85 rr        	sta z80_c
000CDAr 3  A9 rr        	lda #>displ0
000CDCr 3  85 rr        	sta z80_b
000CDEr 3  A5 rr        	lda z80_a
000CE0r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000CE3r 3               displ1:
000CE3r 3  C6 rr        	dec z80_c				; back one character.
000CE5r 3  A5 rr        	lda z80_c
000CE7r 3  C9 FF        	cmp #$ff
000CE9r 3  D0 02        	bne :+
000CEBr 3  C6 rr        	dec z80_b
000CEDr 3               :
000CEDr 3  A0 00        	ldy #0
000CEFr 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000CF1r 3  09 80        	ora #128				; insert end marker.
000CF3r 3  91 rr        	sta (z80_bc),y				; new value.
000CF5r 3               
000CF5r 3  A9 rr        	lda #<displ0				; display space.
000CF7r 3  85 rr        	sta z80_l
000CF9r 3  A9 rr        	lda #>displ0
000CFBr 3  85 rr        	sta z80_h
000CFDr 3  4C rr rr     	jmp dmsg3				; display the string.
000D00r 3               
000D00r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000D04r 3               
000D04r 3               ;----------------------------------------------------------------
000D04r 3               ; Initialise screen.
000D04r 3               ;
000D04r 3               ; global:	roomtb,scno
000D04r 3               ; local:	-
000D04r 3               ; calls:	tstcs
000D04r 3               ;----------------------------------------------------------------
000D04r 3               
000D04r 3               initsc:
000D04r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000D07r 3  20 rr rr     	jsr tstsc 			; find displacement.
000D0Ar 3  C9 FF        	cmp #255 			; is it valid?
000D0Cr 3  F0 02        	beq init_end 			; no, it's rubbish.
000D0Er 3  85 rr        	sta scno			; store new room number.
000D10r 3               init_end:
000D10r 3  60           	rts
000D11r 3               
000D11r 3               ;----------------------------------------------------------------
000D11r 3               ; Test screen.
000D11r 3               ;
000D11r 3               ; global:	-
000D11r 3               ; local:	x
000D11r 3               ; calls:	-
000D11r 3               ;----------------------------------------------------------------
000D11r 3               
000D11r 3               tstsc:
000D11r 3  85 rr        	sta tmproom
000D13r 3  18           	clc
000D14r 3  69 03        	adc #MAPWID 			; add width in case we"re negative.
000D16r 3  AA           	tax 				; add displacement to map data.
000D17r 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000D1Ar 3  60           	rts
000D1Br 3               
000D1Br 3               ;--------------------------
000D1Br 3               ; Screen left.
000D1Br 3               ;--------------------------
000D1Br 3               
000D1Br 3               scrl:
000D1Br 3  AD rr rr     	lda roomtb 			; present room table pointer.
000D1Er 3  38           	sec
000D1Fr 3  E9 01        	sbc #1				; room left.
000D21r 3               scrl0:
000D21r 3  20 rr rr     	jsr tstsc			; test screen.
000D24r 3  C9 FF        	cmp #255			; is there a screen this way?
000D26r 3  D0 01        	bne :+
000D28r 3  60           	rts				; no, return to loop.
000D29r 3               :
000D29r 3  A5 rr        	lda tmproom			; restore room displacement.
000D2Br 3  8D rr rr     	sta roomtb			; new room table position.
000D2Er 3               scrl1:
000D2Er 3  20 rr rr     	jsr initsc 			; set new screen.
000D31r 3  A9 02        	lda #2
000D33r 3  85 rr        	sta restfl 			; set it.
000D35r 3  60           	rts
000D36r 3               scrr:
000D36r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D39r 3  18           	clc
000D3Ar 3  69 01        	adc #1				; room right.
000D3Cr 3  4C rr rr     	jmp scrl0
000D3Fr 3               scru:
000D3Fr 3  AD rr rr     	lda roomtb 			; room table pointer.
000D42r 3  38           	sec
000D43r 3  E9 03        	sbc #MAPWID 			; room up.
000D45r 3  4C rr rr     	jmp scrl0
000D48r 3               scrd:
000D48r 3  AD rr rr     	lda roomtb 			; room table pointer.
000D4Br 3  18           	clc
000D4Cr 3  69 03        	adc #MAPWID 			; room down.
000D4Er 3  4C rr rr     	jmp scrl0
000D51r 3               
000D51r 3               ;-----------------------------------------
000D51r 3               ; Jump to new screen.
000D51r 3               ;-----------------------------------------
000D51r 3               
000D51r 3               nwscr:
000D51r 3  A2 00        	ldx #0				; start of map data.
000D53r 3               nwscr0:
000D53r 3  DD rr rr     	cmp mapdat,x
000D56r 3  F0 06        	beq nwscr1			; have we found a match for screen?
000D58r 3  E8           	inx 				; next room.
000D59r 3  E0 50        	cpx #80				; zero room count, 80 to search.
000D5Br 3  D0 F6        	bne nwscr0			; keep looking.
000D5Dr 3  60           	rts
000D5Er 3               nwscr1:
000D5Er 3  8E rr rr     	stx roomtb			; set the map position.
000D61r 3  4C rr rr     	jmp scrl1			; draw new room.
000D64r 3               
000D64r 3               
000D64r 3               ;----------------------------------------------------------
000D64r 3               ; Gravity processing.
000D64r 3               ;----------------------------------------------------------
000D64r 3               
000D64r 3               grav:
000D64r 3  A0 0D        	ldy #13
000D66r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000D68r 3  85 rr        	sta z80_l
000D6Ar 3  A0 0E        	ldy #14
000D6Cr 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000D6Er 3  85 rr        	sta z80_h
000D70r 3  05 rr        	ora z80_l			; merge in low byte.
000D72r 3  D0 01        	bne :+
000D74r 3  60           	rts				; if neither is set, we're not in the air.
000D75r 3               :
000D75r 3  A0 00        	ldy #0
000D77r 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000D79r 3  85 rr        	sta z80_a
000D7Br 3  C9 63        	cmp #99				; reached the end?
000D7Dr 3  D0 0C        	bne grav0			; no, continue.
000D7Fr 3               grav2:
000D7Fr 3  C6 rr        	dec z80_l			; go back to previous value.
000D81r 3  C9 FF        	cmp #$ff
000D83r 3  D0 02        	bne :+
000D85r 3  C6 rr        	dec z80_h
000D87r 3               :
000D87r 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000D89r 3  85 rr        	sta z80_a
000D8Br 3               grav0:
000D8Br 3  E6 rr        	inc z80_l			; point to next table entry.
000D8Dr 3  D0 02        	bne :+
000D8Fr 3  E6 rr        	inc z80_h
000D91r 3               :
000D91r 3  A5 rr        	lda z80_l
000D93r 3  A0 0D        	ldy #13
000D95r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000D97r 3  A5 rr        	lda z80_h
000D99r 3  A0 0E        	ldy #14
000D9Br 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000D9Dr 3               grav1:
000D9Dr 3  A5 rr        	lda z80_a
000D9Fr 3  D0 01        	bne :+				; any movement required?
000DA1r 3  60           	rts				; no, not this time.
000DA2r 3               :
000DA2r 3  A5 rr        	lda z80_a
000DA4r 3  C9 80        	cmp #128			; is it up or down?
000DA6r 3  B0 15        	bcs gravu			; it's up.
000DA8r 3               gravd:
000DA8r 3  85 rr        	sta z80_b			; set pixels to move.
000DAAr 3               gravd0:
000DAAr 3  20 rr rr     	jsr cangd			; can we go down?
000DADr 3  D0 28        	bne gravst			; can't move down, so stop.
000DAFr 3  A0 08        	ldy #8
000DB1r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000DB3r 3  18           	clc
000DB4r 3  69 01        	adc #1
000DB6r 3  91 rr        	sta (z80_ix),y
000DB8r 3  C6 rr        	dec z80_b
000DBAr 3  D0 EE        	bne gravd0
000DBCr 3  60           	rts
000DBDr 3               gravu:
000DBDr 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000DBFr 3  18           	clc
000DC0r 3  69 01        	adc #1
000DC2r 3  85 rr        	sta z80_b			; set pixels to move.
000DC4r 3               gravu0:
000DC4r 3  20 rr rr     	jsr cangu			; can we go up?
000DC7r 3  D0 6E        	bne ifalls			; can't move up, go down next.
000DC9r 3  A0 08        	ldy #8
000DCBr 3  B1 rr        	lda (z80_ix),y
000DCDr 3  38           	sec
000DCEr 3  E9 01        	sbc #1
000DD0r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000DD2r 3  C6 rr        	dec z80_b
000DD4r 3  D0 EE        	bne gravu0
000DD6r 3  60           	rts
000DD7r 3               gravst:
000DD7r 3  A0 0D        	ldy #var_jumpLo
000DD9r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000DDBr 3  85 rr        	sta z80_l
000DDDr 3  A0 0E        	ldy #var_jumpHi
000DDFr 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000DE1r 3  85 rr        	sta z80_h
000DE3r 3               
000DE3r 3  A9 00        	lda #0				; null value in pointer.
000DE5r 3  A0 0D        	ldy #var_jumpLo
000DE7r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000DE9r 3  C8           	iny
000DEAr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000DECr 3               
000DECr 3  A0 00        	ldy #0
000DEEr 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000DF0r 3  C9 63        	cmp #99				; is it the end marker?
000DF2r 3               evftf:
000DF2r 3  F0 01        	beq :+				; yes, fallen too far.
000DF4r 3  60           	rts
000DF5r 3               :
000DF5r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000DF8r 3               
000DF8r 3               ;------------------------------------------------
000DF8r 3               ; Initiate fall check.
000DF8r 3               ;------------------------------------------------
000DF8r 3               
000DF8r 3               ifall:
000DF8r 3  A0 0D        	ldy #var_jumpLo
000DFAr 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000DFCr 3  85 rr        	sta z80_l
000DFEr 3  A0 0E        	ldy #var_jumpHi
000E00r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000E02r 3  85 rr        	sta z80_h			; high byte in accumulator.
000E04r 3  05 rr        	ora z80_l			; merge in low byte.
000E06r 3  F0 01        	beq :+
000E08r 3  60           	rts				; if either is set, we're already in the air.
000E09r 3               :
000E09r 3  A0 09        	ldy #9
000E0Br 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000E0Dr 3  85 rr        	sta dispx
000E0Fr 3  A0 08        	ldy #8
000E11r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000E13r 3  18           	clc
000E14r 3               numsp7:
000E14r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000E16r 3  85 rr        	sta dispy			; set up test coordinates.
000E18r 3  20 rr rr     	jsr tstbl			; get map address.
000E1Br 3  20 rr rr     	jsr plchk			; block, platform check.
000E1Er 3  F0 01        	beq :+
000E20r 3  60           	rts				; it's solid, don't fall.
000E21r 3               :
000E21r 3  E6 rr        	inc bufaddr			; look right one cell.
000E23r 3  20 rr rr     	jsr plchk			; block, platform check.
000E26r 3  F0 01        	beq :+
000E28r 3  60           	rts				; it's solid, don't fall.
000E29r 3               :
000E29r 3  A5 rr        	lda dispx			; y coordinate.
000E2Br 3  29 07        	and #7				; position straddling block cells.
000E2Dr 3  F0 08        	beq ifalls			; no more checks needed.
000E2Fr 3  E6 rr        	inc bufaddr			; look to third cell.
000E31r 3  20 rr rr     	jsr plchk			; block, platform check.
000E34r 3  F0 01        	beq :+
000E36r 3  60           	rts				; it's solid, don't fall.
000E37r 3               :
000E37r 3               ifalls:
000E37r 3  A9 rr        	lda #<jtab			; jump table start.
000E39r 3  85 rr        	sta z80_l
000E3Br 3  A9 rr        	lda #>jtab
000E3Dr 3  85 rr        	sta z80_h
000E3Fr 3               ifal0:
000E3Fr 3  E6 rr        	inc z80_l			; point to next value.
000E41r 3  D0 02        	bne :+
000E43r 3  E6 rr        	inc z80_h
000E45r 3               :
000E45r 3  A0 00        	ldy #0
000E47r 3  B1 rr        	lda (z80_hl),y			; fetch value.
000E49r 3  F0 F4        	beq ifal0			; no, get next value.
000E4Br 3  C9 63        	cmp #99				; reached end of table?
000E4Dr 3  D0 01        	bne :+
000E4Fr 3  60           	rts				; yes, don't fall.
000E50r 3               :
000E50r 3  C9 80        	cmp #128			; is it going up?
000E52r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000E54r 3               
000E54r 3  A0 0D        	ldy #13
000E56r 3  A5 rr        	lda z80_l
000E58r 3  91 rr        	sta (z80_ix),y 			; set jump low.
000E5Ar 3  A0 0E        	ldy #14
000E5Cr 3  A5 rr        	lda z80_h
000E5Er 3  91 rr        	sta (z80_ix),y 			; set jump high.
000E60r 3  60           	rts
000E61r 3               
000E61r 3               
000E61r 3               ;----------------------------------------------------
000E61r 3               ; Get frame data for a particular sprite.
000E61r 3               ; Input:
000E61r 3               ;  a		= framenumer
000E61r 3               ; Output:
000E61r 3               ;  hl		= frame address
000E61r 3               ;
000E61r 3               ; global:	hl,frmptr
000E61r 3               ; local:	-
000E61r 3               ; calls:	-
000E61r 3               ;----------------------------------------------------
000E61r 3               
000E61r 3               gfrm:
000E61r 3  0A           	asl a	 		 	; multiple of 2.
000E62r 3  18           	clc
000E63r 3  6D rr rr     	adc frmptr 			; frames used by game.
000E66r 3  85 rr        	sta z80_l
000E68r 3  AD rr rr     	lda frmptr+1
000E6Br 3  69 00        	adc #0
000E6Dr 3  85 rr        	sta z80_h 			; point to frame start.
000E6Fr 3  60           	rts
000E70r 3               
000E70r 3               ;----------------------------------------------------
000E70r 3               ; Find sprite list for current room.
000E70r 3               ;
000E70r 3               ; global:	hl
000E70r 3               ; local:	x,y
000E70r 3               ; calls:	-
000E70r 3               ;----------------------------------------------------
000E70r 3               
000E70r 3               sprlst:
000E70r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000E72r 3  85 rr        	sta z80_l
000E74r 3  A9 rr        	lda #>nmedat
000E76r 3  85 rr        	sta z80_h
000E78r 3  A6 rr        	ldx scno 			; screen number.
000E7Ar 3  D0 01        	bne sprls2 			; is it the first screen?
000E7Cr 3  60           	rts 				; yes, don't need to search data.
000E7Dr 3               sprls2:
000E7Dr 3  A0 00        	ldy #0
000E7Fr 3               sprls1:
000E7Fr 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000E81r 3  C9 FF        	cmp #255			; is it an end marker?
000E83r 3  F0 0E        	beq sprls0 			; yes, end of this room.
000E85r 3               
000E85r 3  18           	clc 				; point to next sprite in list.
000E86r 3  A5 rr        	lda z80_l
000E88r 3  69 04        	adc #NMESIZ
000E8Ar 3  85 rr        	sta z80_l
000E8Cr 3  90 02        	bcc :+
000E8Er 3  E6 rr        	inc z80_h
000E90r 3               :
000E90r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000E93r 3               sprls0:
000E93r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000E95r 3  D0 02        	bne :+
000E97r 3  E6 rr        	inc z80_h
000E99r 3               :
000E99r 3  CA           	dex
000E9Ar 3  D0 E3        	bne sprls1 			; continue until room found.
000E9Cr 3  60           	rts
000E9Dr 3               
000E9Dr 3               
000E9Dr 3               ;----------------------------------------------------
000E9Dr 3               ; Clear all but a single player sprite.
000E9Dr 3               ;
000E9Dr 3               ; global:	-
000E9Dr 3               ; local:	x,y,ix
000E9Dr 3               ; calls:	-
000E9Dr 3               ;----------------------------------------------------
000E9Dr 3               
000E9Dr 3               nspr:
000E9Dr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000E9Fr 3  85 rr        	sta sprcnt
000EA1r 3  A9 rr        	lda #<sprtab 			; sprite table.
000EA3r 3  85 rr        	sta z80_x
000EA5r 3  A9 rr        	lda #>sprtab
000EA7r 3  85 rr        	sta z80_i
000EA9r 3               nspr0:
000EA9r 3  A0 00        	ldy #0 				; fetch sprite type.
000EABr 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000EADr 3  F0 1A        	beq nspr1 			; yes, keep this one.
000EAFr 3               
000EAFr 3  A9 FF        	lda #255
000EB1r 3  A0 00        	ldy #0 				; fetch sprite type.
000EB3r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EB5r 3  A0 05        	ldy #5
000EB7r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000EB9r 3               
000EB9r 3  18           	clc	 			; next sprite.
000EBAr 3  A5 rr        	lda z80_x
000EBCr 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000EBEr 3  85 rr        	sta z80_x
000EC0r 3  90 02        	bcc :+
000EC2r 3  E6 rr        	inc z80_i
000EC4r 3               :
000EC4r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000EC6r 3  D0 E1        	bne nspr0
000EC8r 3  60           	rts
000EC9r 3               nspr1:
000EC9r 3  A9 FF        	lda #255
000ECBr 3  A0 00        	ldy #0
000ECDr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000ECFr 3               
000ECFr 3  18           	clc	 			; point to next sprite.
000ED0r 3  A5 rr        	lda z80_x
000ED2r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000ED4r 3  85 rr        	sta z80_x
000ED6r 3  90 02        	bcc :+
000ED8r 3  E6 rr        	inc z80_i
000EDAr 3               :
000EDAr 3  C6 rr        	dec sprcnt	 			; one less to do.
000EDCr 3  D0 01        	bne nspr2
000EDEr 3  60           	rts
000EDFr 3               nspr2:
000EDFr 3  A9 FF        	lda #255
000EE1r 3  A0 00        	ldy #0
000EE3r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000EE5r 3  A0 05        	ldy #5
000EE7r 3  91 rr        	sta (z80_ix),y 			; remove next type.
000EE9r 3               
000EE9r 3  18           	clc	 			; next sprite.
000EEAr 3  A5 rr        	lda z80_x
000EECr 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000EEEr 3  85 rr        	sta z80_x
000EF0r 3  90 02        	bcc :+
000EF2r 3  E6 rr        	inc z80_i
000EF4r 3               :
000EF4r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000EF6r 3  D0 E7        	bne nspr2
000EF8r 3  60           	rts
000EF9r 3               
000EF9r 3               ;----------------------------------------------------------
000EF9r 3               ; Two initialisation routines.
000EF9r 3               ; Initialise sprites - copy everything from list to table.
000EF9r 3               ;
000EF9r 3               ; global:	-
000EF9r 3               ; local:	x,y,ix
000EF9r 3               ; calls:	cpsp
000EF9r 3               ;----------------------------------------------------------
000EF9r 3               
000EF9r 3               ispr:
000EF9r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000EFBr 3  85 rr        	sta sprcnt
000EFDr 3  A9 rr        	lda #<sprtab			; sprite table.
000EFFr 3  85 rr        	sta z80_x
000F01r 3  A9 rr        	lda #>sprtab
000F03r 3  85 rr        	sta z80_i
000F05r 3               ispr2:
000F05r 3  A0 00        	ldy #0
000F07r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F09r 3  C9 FF        	cmp #255 			; is it an end marker?
000F0Br 3  D0 01        	bne :+
000F0Dr 3  60           	rts 				; yes, no more to do.
000F0Er 3               :
000F0Er 3               ispr1:
000F0Er 3  A0 00        	ldy #0
000F10r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000F12r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F14r 3  D0 08        	bne ispr4			; yes, try another slot.
000F16r 3               
000F16r 3  A0 05        	ldy #5
000F18r 3  B1 rr        	lda (z80_ix),y		 	; next type.
000F1Ar 3  C9 FF        	cmp #255 			; is it enabled yet?
000F1Cr 3  F0 10        	beq ispr3 			; no, process this one.
000F1Er 3               ispr4:
000F1Er 3  18           	clc 				; next sprite.
000F1Fr 3  A5 rr        	lda z80_x
000F21r 3  69 12        	adc #TABSIZ		 	; distance to next odd/even entry.
000F23r 3  85 rr        	sta z80_x
000F25r 3  90 02        	bcc :+
000F27r 3  E6 rr        	inc z80_i
000F29r 3               :
000F29r 3  C6 rr        	dec sprcnt
000F2Br 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000F2Dr 3  60           	rts  				; no more room in table.
000F2Er 3               ispr3:
000F2Er 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000F31r 3  C6 rr        	dec sprcnt			; one less space in the table.
000F33r 3  D0 D0        	bne ispr2
000F35r 3  60           	rts
000F36r 3               
000F36r 3               
000F36r 3               ;-----------------------------------------------------------------------
000F36r 3               ; Initialise sprites - but not player, we're keeping the old one.
000F36r 3               ;
000F36r 3               ; global:	-
000F36r 3               ; local:	x,y,ix
000F36r 3               ; calls:	cpsp
000F36r 3               ;-----------------------------------------------------------------------
000F36r 3               
000F36r 3               kspr:
000F36r 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000F38r 3  A9 rr        	lda #<sprtab 			; sprite table.
000F3Ar 3  85 rr        	sta z80_x
000F3Cr 3  A9 rr        	lda #>sprtab
000F3Er 3  85 rr        	sta z80_i
000F40r 3               kspr2:
000F40r 3  A0 00        	ldy #0
000F42r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F44r 3  C9 FF        	cmp #255 			; is it an end marker?
000F46r 3  D0 01        	bne :+
000F48r 3  60           	rts 				; yes, no more to do.
000F49r 3               :
000F49r 3  C9 00        	cmp #0
000F4Br 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000F4Dr 3               
000F4Dr 3  18           	clc 				; next sprite.
000F4Er 3  A5 rr        	lda z80_l
000F50r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000F52r 3  85 rr        	sta z80_l
000F54r 3  90 02        	bcc :+
000F56r 3  E6 rr        	inc z80_h
000F58r 3               :
000F58r 3  4C rr rr     	jmp kspr2
000F5Br 3               kspr1:
000F5Br 3  A0 00        	ldy #0 				; fetch sprite type.
000F5Dr 3  B1 rr        	lda (z80_ix),y
000F5Fr 3  C9 FF        	cmp #255 			; is it enabled yet?
000F61r 3  D0 08        	bne kspr4 			; yes, try another slot.
000F63r 3               
000F63r 3  A0 05        	ldy #5 				; next type.
000F65r 3  B1 rr        	lda (z80_ix),y
000F67r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F69r 3  F0 0F        	beq kspr3 			; no, process this one.
000F6Br 3               kspr4:
000F6Br 3  18           	clc 				; next sprite.
000F6Cr 3  A5 rr        	lda z80_x
000F6Er 3  69 12        	adc #TABSIZ		 	; distance to next odd/even entry.
000F70r 3  85 rr        	sta z80_x
000F72r 3  90 02        	bcc :+
000F74r 3  E6 rr        	inc z80_i
000F76r 3               :
000F76r 3  CA           	dex	 			; repeat for remaining sprites.
000F77r 3  D0 E2        	bne kspr1
000F79r 3  60           	rts  				; no more room in table.
000F7Ar 3               kspr3:
000F7Ar 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000F7Dr 3  CA           	dex	 			; one less space in the table.
000F7Er 3  D0 C0        	bne kspr2
000F80r 3  60           	rts
000F81r 3               
000F81r 3               ;----------------------------------------------
000F81r 3               ; Copy sprite from list to table.
000F81r 3               ;
000F81r 3               ; global:	hl,ix
000F81r 3               ; local:	y
000F81r 3               ; calls:	evnt09
000F81r 3               ;----------------------------------------------
000F81r 3               
000F81r 3               cpsp:
000F81r 3  A0 00        	ldy #0				; fetch byte from table.
000F83r 3  B1 rr        	lda (z80_hl),y
000F85r 3               	; y=var_Type
000F85r 3  91 rr        	sta (z80_ix),y			; set up type.
000F87r 3  A0 05        	ldy #var_newType
000F89r 3  91 rr        	sta (z80_ix),y 			; set up type.
000F8Br 3               
000F8Br 3  E6 rr        	inc z80_l 			; move to next byte.
000F8Dr 3  D0 02        	bne :+
000F8Fr 3  E6 rr        	inc z80_h
000F91r 3               :
000F91r 3  A0 00        	ldy #0 				; fetch byte from table.
000F93r 3  B1 rr        	lda (z80_hl),y
000F95r 3  A0 06        	ldy #var_newImage
000F97r 3  91 rr        	sta (z80_ix),y			; set up image.
000F99r 3               
000F99r 3  E6 rr        	inc z80_l 			; move to next byte.
000F9Br 3  D0 02        	bne :+
000F9Dr 3  E6 rr        	inc z80_h
000F9Fr 3               :
000F9Fr 3  A0 00        	ldy #0
000FA1r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
000FA3r 3  A0 08        	ldy #var_newY
000FA5r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000FA7r 3               
000FA7r 3  A9 C8        	lda #200 			; set initial coordinate off screen.
000FA9r 3  A0 03        	ldy #var_Y
000FABr 3  91 rr        	sta (z80_ix),y
000FADr 3               
000FADr 3  E6 rr        	inc z80_l 			; move to next byte.
000FAFr 3  D0 02        	bne :+
000FB1r 3  E6 rr        	inc z80_h
000FB3r 3               :
000FB3r 3  A0 00        	ldy #0 				; fetch byte from table.
000FB5r 3  B1 rr        	lda (z80_hl),y
000FB7r 3  A0 09        	ldy #var_newX
000FB9r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
000FBBr 3               
000FBBr 3  E6 rr        	inc z80_l 			; move to next byte.
000FBDr 3  D0 02        	bne :+
000FBFr 3  E6 rr        	inc z80_h
000FC1r 3               :
000FC1r 3  A9 00        	lda #0				; zeroes in accumulator.
000FC3r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
000FC5r 3  91 rr        	sta (z80_ix),y
000FC7r 3  A0 0A        	ldy #var_Direction 		; reset direction.
000FC9r 3  91 rr        	sta (z80_ix),y
000FCBr 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
000FCDr 3  91 rr        	sta (z80_ix),y
000FCFr 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
000FD1r 3  91 rr        	sta (z80_ix),y
000FD3r 3               
000FD3r 3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
000FD5r 3  A0 10        	ldy #var_dataHi
000FD7r 3  91 rr        	sta (z80_ix),y
000FD9r 3               
000FD9r 3  AD rr rr     	lda fontcol			; set background INK
000FDCr 3  A0 11        	ldy #var_colour
000FDEr 3  91 rr        	sta (z80_ix),y
000FE0r 3               
000FE0r 3               evis0:
000FE0r 3  A5 rr        	lda z80_i
000FE2r 3  48           	pha
000FE3r 3  A5 rr        	lda z80_x
000FE5r 3  48           	pha
000FE6r 3  A5 rr        	lda z80_h
000FE8r 3  48           	pha
000FE9r 3  A5 rr        	lda z80_l
000FEBr 3  48           	pha
000FECr 3               
000FECr 3  20 rr rr     	jsr evnt09 				; perform event.
000FEFr 3               
000FEFr 3  68           	pla
000FF0r 3  85 rr        	sta z80_l
000FF2r 3  68           	pla
000FF3r 3  85 rr        	sta z80_h
000FF5r 3  68           	pla
000FF6r 3  85 rr        	sta z80_x
000FF8r 3  68           	pla
000FF9r 3  85 rr        	sta z80_i
000FFBr 3               
000FFBr 3  18           	clc
000FFCr 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
000FFEr 3  69 12        	adc #TABSIZ		 	; next sprite.
001000r 3  85 rr        	sta z80_x
001002r 3  90 02        	bcc :+
001004r 3  E6 rr        	inc z80_i
001006r 3               :
001006r 3  60           	rts
001007r 3               
001007r 3               
001007r 3               ;-------------------------------------
001007r 3               ; Clear the play area window.
001007r 3               ;-------------------------------------
001007r 3               
001007r 3               clw:
001007r 3  AD rr rr     	lda wintop			; get coordinates of window.
00100Ar 3  85 rr        	sta dispy			; put into dispx for calculation.
00100Cr 3  AD rr rr     	lda winlft
00100Fr 3  85 rr        	sta dispx
001011r 3               
001011r 3  AD rr rr     	lda winhgt			; height of window.
001014r 3  85 rr        	sta rrow			; copy to b register.
001016r 3               clw3:
001016r 3  AD rr rr     	lda winwid 			; width of window.
001019r 3  85 rr        	sta rcol
00101Br 3               clw2:
00101Br 3  20 rr rr     	jsr gprad 			; get print address.
00101Er 3  A9 20        	lda #32
001020r 3  20 rr rr     	jsr pchar
001023r 3  E6 rr        	inc dispx			; next column.
001025r 3  C6 rr        	dec rcol			; one less to do.
001027r 3  D0 F2        	bne clw2			; repeat for remaining columns.
001029r 3               
001029r 3  AD rr rr     	lda winlft			; get left edge.
00102Cr 3  85 rr        	sta dispx 			; reset x.
00102Er 3  E6 rr        	inc dispy 			; next line down.
001030r 3               
001030r 3  C6 rr        	dec rrow
001032r 3  D0 E2        	bne clw3			; repeat down the screen.
001034r 3               
001034r 3  AD rr rr     	lda wintop			; get coordinates of window.
001037r 3  85 rr        	sta chary			; put into display position.
001039r 3  AD rr rr     	lda winlft
00103Cr 3  85 rr        	sta charx
00103Er 3  60           	rts
00103Fr 3               
00103Fr 3               
00103Fr 3               ;----------------------------------------------------------
00103Fr 3               ; Effects code.
00103Fr 3               ; Ticker routine is called 25 times per second.
00103Fr 3               ;
00103Fr 3               ; txtini = text scroller address
00103Fr 3               ; txtscr = left text screen address
00103Fr 3               ; txtwid = scroller width
00103Fr 3               ; txtbit = 128
00103Fr 3               ; X      = message nr
00103Fr 3               ;----------------------------------------------------------
00103Fr 3               
00103Fr 3               .if sflag
00103Fr 3               
00103Fr 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
00103Fr 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
00103Fr 3               		.byte $00,$10,$20,$30,$40,$50
00103Fr 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
00103Fr 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
00103Fr 3               		.byte $01,$01,$01,$01,$01,$01
00103Fr 3               
00103Fr 3               scrly:
00103Fr 3               
00103Fr 3               ; Set scr_l = txtscr
00103Fr 3               
00103Fr 3               	rts
00103Fr 3               	.word txtscr         	; set scr_l = left screen address.
00103Fr 3               	sta scr_l
00103Fr 3               	sta scr_r
00103Fr 3               	lda txtscr+1
00103Fr 3               	sta scr_l+1
00103Fr 3               	sta scr_r+1
00103Fr 3               
00103Fr 3               	stx xtmp		; save x
00103Fr 3               
00103Fr 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
00103Fr 3               
00103Fr 3               	ldx txtwid
00103Fr 3               	dex
00103Fr 3               	lda scrollpos_lb,x
00103Fr 3               	clc
00103Fr 3               	adc scr_r
00103Fr 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
00103Fr 3               	bcc :+
00103Fr 3               	inc scr_r+1
00103Fr 3               :
00103Fr 3               	clc
00103Fr 3               	lda scrollpos_hb,x
00103Fr 3               	adc scr_r+1
00103Fr 3               	sta scr_r+1
00103Fr 3               
00103Fr 3               ; Scroll string
00103Fr 3               
00103Fr 3               	lda #0
00103Fr 3               	sta line_cnt		; Set line counter
00103Fr 3               scrly1:
00103Fr 3               	clc
00103Fr 3               	lda scr_r
00103Fr 3               	adc line_cnt
00103Fr 3               	sta scr_tmp
00103Fr 3               	lda scr_r+1
00103Fr 3               	sta scr_tmp+1
00103Fr 3               
00103Fr 3               	ldx txtwid		; set column counter
00103Fr 3               	dex
00103Fr 3               	ldy #0
00103Fr 3               	clc			; Reset pixel to be shifted in
00103Fr 3               scrly0:
00103Fr 3               	lda (scr_tmp),y
00103Fr 3               	rol a			; Shift screenbyte
00103Fr 3               	sta (scr_tmp),y		; store screenbyte
00103Fr 3               	php			; save carry
00103Fr 3               
00103Fr 3               	sec			; subtract 16 form screenaddress
00103Fr 3               	lda scr_tmp
00103Fr 3               	sbc #$10
00103Fr 3               	sta scr_tmp
00103Fr 3               	bcs :+
00103Fr 3               	dec scr_tmp+1
00103Fr 3               :
00103Fr 3               	plp			; restore carry
00103Fr 3               	dex			; previous column
00103Fr 3               	bpl scrly0		; repeat for all columns
00103Fr 3               
00103Fr 3               	inc line_cnt		; next line
00103Fr 3               	lda line_cnt
00103Fr 3               	cmp #8
00103Fr 3               	bne scrly1		; repeat for 8 lines
00103Fr 3               
00103Fr 3               ; Get next character in string
00103Fr 3               
00103Fr 3               	lda txtpos 		; get text pointer.
00103Fr 3               	sta scr_txt
00103Fr 3               	lda txtpos+1
00103Fr 3               	sta scr_txt+1
00103Fr 3               
00103Fr 3               	ldy #0
00103Fr 3               	lda (scr_txt),y 	; find character we're displaying.
00103Fr 3               	and #127 		; remove end marker bit if applicable.
00103Fr 3               	cmp #13			; is it newline?
00103Fr 3               	bne scrly5 		; no, it's okay.
00103Fr 3               	lda #32			; convert to a space instead.
00103Fr 3               scrly5:
00103Fr 3               	sta fntaddr		; calculate char address
00103Fr 3               	lda #0
00103Fr 3               	sta fntaddr+1
00103Fr 3               	asl fntaddr  		; multiply char by 8.
00103Fr 3               	rol fntaddr+1
00103Fr 3               	asl fntaddr
00103Fr 3               	rol fntaddr+1
00103Fr 3               	asl fntaddr
00103Fr 3               	rol fntaddr+1
00103Fr 3               	lda fntaddr
00103Fr 3               	clc
00103Fr 3               	adc #<(FONT-256)
00103Fr 3               	sta scrly3+1		; that's the low byte.
00103Fr 3               	lda fntaddr+1
00103Fr 3               	adc #>(FONT-256)
00103Fr 3               	sta scrly3+2		; add displacement.
00103Fr 3               
00103Fr 3               	ldy #0
00103Fr 3               scrly3:
00103Fr 3               	lda $3333,y		; get image of char line.
00103Fr 3               	and txtbit
00103Fr 3               	beq scrly2		; don't plot pixel
00103Fr 3               	lda (scr_r),y
00103Fr 3               	clc
00103Fr 3               	ora #1
00103Fr 3               	sta (scr_r),y		; plot pixel
00103Fr 3               scrly2:
00103Fr 3               	iny			; next line of char.
00103Fr 3               	cpy #8
00103Fr 3               	bne scrly3
00103Fr 3               
00103Fr 3               	lsr txtbit		; bit of text to display.
00103Fr 3               	bcs :+
00103Fr 3               	rts
00103Fr 3               :
00103Fr 3               	ldy #0
00103Fr 3               	lda (scr_txt),y 	; what was the character?
00103Fr 3               	asl a	  		; end of message?
00103Fr 3               	bcs scrly4
00103Fr 3               	inc txtpos
00103Fr 3               	bne :+
00103Fr 3               	inc txtpos+1
00103Fr 3               :
00103Fr 3               	jmp scrly6 		; not yet - continue.
00103Fr 3               scrly4:
00103Fr 3               	lda txtini 		; start of scrolling message.
00103Fr 3               	sta txtpos
00103Fr 3               	lda txtini+1
00103Fr 3               	sta txtpos+1
00103Fr 3               scrly6:
00103Fr 3               	lda #128
00103Fr 3               	sta txtbit
00103Fr 3               	ldx xtmp
00103Fr 3               	rts
00103Fr 3               
00103Fr 3               tmp_byte:	.byte 0
00103Fr 3               line_cnt:	.byte 0
00103Fr 3               
00103Fr 3               ;-------------------------------------------------------
00103Fr 3               ; Entry TICKER command
00103Fr 3               ;
00103Fr 3               ; Entry:
00103Fr 3               ;  z80_b = message nr
00103Fr 3               ;  z80_c = width
00103Fr 3               ;-------------------------------------------------------
00103Fr 3               
00103Fr 3               iscrly:
00103Fr 3               	jsr prescr 		; set up display position.
00103Fr 3               	lda #<msgdat 		; text messages.
00103Fr 3               	sta z80_l
00103Fr 3               	lda #>msgdat
00103Fr 3               	sta z80_h
00103Fr 3               	lda z80_c 		; width.
00103Fr 3               	sec
00103Fr 3               	sbc #1			; subtract one.
00103Fr 3               	cmp #32 		; is it between 1 and 32?
00103Fr 3               	bcc :+
00103Fr 3               	lda #$60
00103Fr 3               	jmp iscrl0		; no, disable messages.
00103Fr 3               :
00103Fr 3               	ldx z80_b		; message number.
00103Fr 3               	jsr getwrd 		; find message start.
00103Fr 3               
00103Fr 3               	lda z80_l		; set initial text position.
00103Fr 3               	sta txtini
00103Fr 3               	lda z80_h
00103Fr 3               	sta txtini+1
00103Fr 3               
00103Fr 3               	lda #$ad		; code for lda adrr
00103Fr 3               iscrl0:
00103Fr 3               	sta scrly		; enable/disable scrolling routine.
00103Fr 3               
00103Fr 3               	jsr prescr 		; set up display position.
00103Fr 3               	jsr gprad 		; get print address.
00103Fr 3               
00103Fr 3               	lda scraddr 		; set text screen address.
00103Fr 3               	sta txtscr
00103Fr 3               	lda scraddr+1
00103Fr 3               	sta txtscr+1
00103Fr 3               
00103Fr 3               	lda z80_c		; width.
00103Fr 3               	sta txtwid		; set width in working storage.
00103Fr 3               
00103Fr 3               	lda #128 		; start with leftmost bit.
00103Fr 3               	sta txtbit
00103Fr 3               
00103Fr 3               	jmp scrly4
00103Fr 3               .endif
00103Fr 3               
00103Fr 3               ;------------------------------------------------------------------
00103Fr 3               ; Dig routine, conditional assembly depending on dflag
00103Fr 3               ;------------------------------------------------------------------
00103Fr 3               .if dflag
00103Fr 3               dig:
00103Fr 3  29 03        	and #3
001041r 3  F0 3B        	beq digr		; dig right
001043r 3  C9 01        	cmp #1
001045r 3  F0 26        	beq digl		; dig left
001047r 3  C9 02        	cmp #2
001049r 3  F0 11        	beq digd		; dig down
00104Br 3               
00104Br 3               ; Dig up.
00104Br 3               
00104Br 3               digu:				; dig up
00104Br 3  A0 08        	ldy #8
00104Dr 3  B1 rr        	lda (z80_ix),y
00104Fr 3  38           	sec
001050r 3  E9 02        	sbc #2
001052r 3  85 rr        	sta dispy		; set y
001054r 3               
001054r 3  C8           	iny
001055r 3  B1 rr        	lda (z80_ix),y
001057r 3  85 rr        	sta dispx		; set x
001059r 3  4C rr rr     	jmp digv
00105Cr 3               
00105Cr 3               ; Dig down.
00105Cr 3               
00105Cr 3               digd:
00105Cr 3  A0 09        	ldy #9
00105Er 3  B1 rr        	lda (z80_ix),y
001060r 3  85 rr        	sta dispx		; set y
001062r 3               
001062r 3  88           	dey
001063r 3  18           	clc
001064r 3  B1 rr        	lda (z80_ix),y
001066r 3  69 10        	adc #16
001068r 3  85 rr        	sta dispy		; set y
00106Ar 3  4C rr rr     	jmp digv
00106Dr 3               
00106Dr 3               ; Dig left.
00106Dr 3               
00106Dr 3               digl:
00106Dr 3  A0 08        	ldy #8
00106Fr 3  B1 rr        	lda (z80_ix),y
001071r 3  85 rr        	sta dispy		; set y
001073r 3               
001073r 3  C8           	iny
001074r 3  B1 rr        	lda (z80_ix),y
001076r 3  38           	sec
001077r 3  E9 02        	sbc #2			; x=x-2
001079r 3  85 rr        	sta dispx		; set x
00107Br 3  4C rr rr     	jmp digh
00107Er 3               
00107Er 3               ; Dig right.
00107Er 3               
00107Er 3               digr:
00107Er 3  A0 08        	ldy #8
001080r 3  B1 rr        	lda (z80_ix),y
001082r 3  85 rr        	sta dispy		; set y
001084r 3               
001084r 3  C8           	iny
001085r 3  B1 rr        	lda (z80_ix),y
001087r 3  18           	clc
001088r 3  69 10        	adc #16
00108Ar 3  85 rr        	sta dispx		; set x+16
00108Cr 3  4C rr rr     	jmp digh
00108Fr 3               
00108Fr 3               ; Vertical digging
00108Fr 3               
00108Fr 3               digv:
00108Fr 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
001092r 3  20 rr rr     	jsr fdchk		; test if FODDER
001095r 3               
001095r 3  18           	clc
001096r 3  A5 rr        	lda dispx		; look 1 cell down
001098r 3  69 08        	adc #8
00109Ar 3  85 rr        	sta dispx
00109Cr 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
00109Fr 3  20 rr rr     	jsr fdchk
0010A2r 3  A5 rr        	lda dispx
0010A4r 3  29 07        	and #7
0010A6r 3  D0 01        	bne :+
0010A8r 3  60           	rts
0010A9r 3               :
0010A9r 3  18           	clc
0010AAr 3  A5 rr        	lda dispx		; look 1 cell down
0010ACr 3  69 08        	adc #8
0010AEr 3  85 rr        	sta dispx
0010B0r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
0010B3r 3  4C rr rr     	jmp fdchk
0010B6r 3               
0010B6r 3               ; Horizontal digging
0010B6r 3               
0010B6r 3               digh:
0010B6r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
0010B9r 3  20 rr rr     	jsr fdchk		; test if FODDER
0010BCr 3               
0010BCr 3  18           	clc
0010BDr 3  A5 rr        	lda dispy		; look 1 cell down
0010BFr 3  69 08        	adc #8
0010C1r 3  85 rr        	sta dispy
0010C3r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
0010C6r 3  20 rr rr     	jsr fdchk
0010C9r 3  A5 rr        	lda dispy
0010CBr 3  29 07        	and #7
0010CDr 3  D0 01        	bne :+
0010CFr 3  60           	rts
0010D0r 3               :
0010D0r 3  18           	clc
0010D1r 3  A5 rr        	lda dispy		; look 1 cell down
0010D3r 3  69 08        	adc #8
0010D5r 3  85 rr        	sta dispy
0010D7r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
0010DAr 3  4C rr rr     	jmp fdchk
0010DDr 3               
0010DDr 3  00           digcnt:	.byte 0
0010DEr 3               
0010DEr 3               .endif
0010DEr 3               
0010DEr 3               ;------------------------------------------------------------------
0010DEr 3               ; Sprite table
0010DEr 3               ;------------------------------------------------------------------
0010DEr 3               
0010DEr 3               
0010DEr 3               ; ix+0  = type.
0010DEr 3               ; ix+1  = sprite image number.
0010DEr 3               ; ix+2  = frame.
0010DEr 3               ; ix+3  = y coord.
0010DEr 3               ; ix+4  = x coord.
0010DEr 3               
0010DEr 3               ; ix+5  = new type.
0010DEr 3               ; ix+6  = new image number.
0010DEr 3               ; ix+7  = new frame.
0010DEr 3               ; ix+8  = new y coord.
0010DEr 3               ; ix+9  = new x coord.
0010DEr 3               
0010DEr 3               ; ix+10 = direction.
0010DEr 3               ; ix+11 = parameter 1.
0010DEr 3               ; ix+12 = parameter 2.
0010DEr 3               ; ix+13 = jump pointer low.
0010DEr 3               ; ix+14 = jump pointer high.
0010DEr 3               ; ix+15 = data pointer low.
0010DEr 3               ; ix+16 = data pointer high.
0010DEr 3               
0010DEr 3               ; block NUMSPR * TABSIZ,255
0010DEr 3               
0010DEr 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0010E2r 3  FF FF FF FF  
0010E6r 3  FF FF FF FF  
0011B6r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0011BAr 3  FF FF FF 00  
0011BEr 3  C0 78 00 00  
0011C7r 3  07           roomtb:	.byte 7                      ; start room map offset.
0011C8r 3               
0011C8r 3               setfgcol:
0011C8r 3               setbgcol:
0011C8r 3  60           	rts
0011C9r 3               
0011C9r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0011C9r 3               ; if USER has an argument it will be passed in the accumulator.
0011C9r 3               
0011C9r 3               user:
0011C9r 3               	.include "user.inc"
0011C9r 4  60           	rts
0011CAr 4               
0011CAr 3               
0011CAr 3               ; Everything below here will be generated by the editors.
0011CAr 3               
0011CAr 3               
0011CAr 3  60                   rts
0011CBr 3               WINDOWTOP = 0
0011CBr 3               WINDOWLFT = 0
0011CBr 3               WINDOWHGT = 22
0011CBr 3               WINDOWWID = 22 ;a
0011CBr 3               MAPWID = 3
0011CBr 3  FF FF FF             .byte 255,255,255
0011CEr 3               mapdat:
0011CEr 3  FF 00 FF             .byte 255,0,255
0011D1r 3  FF FF FF             .byte 255,255,255
0011D4r 3  01           stmap:  .byte 1
0011D5r 3               
0011D5r 3               evnt00:
0011D5r 3  A9 06                lda #CUSTOM	; CUSTOM
0011D7r 3  85 rr                sta z80_b
0011D9r 3  20 rr rr             jsr tded
0011DCr 3  C5 rr                cmp z80_b
0011DEr 3  F0 03                beq :+
0011E0r 3  4C rr rr             jmp a00148
0011E3r 3               :
0011E3r 3  A9 01                lda #1
0011E5r 3  C5 rr                cmp scno
0011E7r 3  F0 03                beq *+5
0011E9r 3  4C rr rr             jmp a00106
0011ECr 3  20 rr rr             jsr gravst	; STOPFALL
0011EFr 3  A0 08                ldy #8 		; SPRITEUP
0011F1r 3  B1 rr                lda (z80_ix),y
0011F3r 3  38                   sec
0011F4r 3  E9 02                sbc #2
0011F6r 3  91 rr                sta (z80_ix),y
0011F8r 3  A0 08                ldy #8 		; SPRITEUP
0011FAr 3  B1 rr                lda (z80_ix),y
0011FCr 3  38                   sec
0011FDr 3  E9 02                sbc #2
0011FFr 3  91 rr                sta (z80_ix),y
001201r 3  A9 07        a00106: lda #7
001203r 3  C5 rr                cmp scno
001205r 3  F0 03                beq *+5
001207r 3  4C rr rr             jmp a00148
00120Ar 3  A0 09                ldy #9 		; SPRITELEFT
00120Cr 3  B1 rr                lda (z80_ix),y
00120Er 3  38                   sec
00120Fr 3  E9 02                sbc #2
001211r 3  91 rr                sta (z80_ix),y
001213r 3  A9 02        a00148: lda #2	; DIG
001215r 3  20 rr rr             jsr dig
001218r 3  A9 00                lda #0
00121Ar 3  C5 rr                cmp varc
00121Cr 3  F0 03                beq *+5
00121Er 3  4C rr rr             jmp a00182
001221r 3  A9 01                lda #1
001223r 3  85 rr                sta varp
001225r 3  A5 rr        a00182: lda joyval	; KEY
001227r 3  29 01                and #1
001229r 3  F0 03                beq :+
00122Br 3  4C rr rr             jmp a00299
00122Er 3               :
00122Er 3  20 rr rr             jsr cangr	; CANGORIGHT
001231r 3  F0 03                beq :+
001233r 3  4C rr rr             jmp a00299
001236r 3               :
001236r 3  A9 00                lda #0
001238r 3  A0 06                ldy #6
00123Ar 3  91 rr                sta (z80_ix),y
00123Cr 3  A9 00                lda #0
00123Er 3  A0 0A                ldy #10
001240r 3  91 rr                sta (z80_ix),y
001242r 3  A9 00                lda #0
001244r 3  C5 rr                cmp vara
001246r 3  F0 03                beq *+5
001248r 3  4C rr rr             jmp a00273
00124Br 3  A9 00                lda #0		; ANIMATE
00124Dr 3  20 rr rr             jsr animsp
001250r 3  A0 09        a00273: ldy #9 		; SPRITERIGHT
001252r 3  B1 rr                lda (z80_ix),y
001254r 3  18                   clc
001255r 3  69 02                adc #2
001257r 3  91 rr                sta (z80_ix),y
001259r 3  A5 rr        a00299: lda joyval	; KEY
00125Br 3  29 02                and #2
00125Dr 3  F0 03                beq :+
00125Fr 3  4C rr rr             jmp a00415
001262r 3               :
001262r 3  20 rr rr             jsr cangl	; CANGOLEFT
001265r 3  F0 03                beq :+
001267r 3  4C rr rr             jmp a00415
00126Ar 3               :
00126Ar 3  A9 01                lda #1
00126Cr 3  A0 06                ldy #6
00126Er 3  91 rr                sta (z80_ix),y
001270r 3  A9 01                lda #1
001272r 3  A0 0A                ldy #10
001274r 3  91 rr                sta (z80_ix),y
001276r 3  A9 00                lda #0
001278r 3  C5 rr                cmp vara
00127Ar 3  F0 03                beq *+5
00127Cr 3  4C rr rr             jmp a00389
00127Fr 3  A9 00                lda #0		; ANIMATE
001281r 3  20 rr rr             jsr animsp
001284r 3  A0 09        a00389: ldy #9 		; SPRITELEFT
001286r 3  B1 rr                lda (z80_ix),y
001288r 3  38                   sec
001289r 3  E9 02                sbc #2
00128Br 3  91 rr                sta (z80_ix),y
00128Dr 3  A5 rr        a00415: lda joyval	; KEY
00128Fr 3  29 08                and #8
001291r 3  F0 03                beq :+
001293r 3  4C rr rr             jmp a00505
001296r 3               :
001296r 3  A9 00                lda #0
001298r 3  C5 rr                cmp vare
00129Ar 3  F0 03                beq *+5
00129Cr 3  4C rr rr             jmp a00500
00129Fr 3  20 rr rr             jsr jump	; TABLEJUMP
0012A2r 3  A9 07                lda #7
0012A4r 3  85 rr                sta z80_d	; GETRANDOM
0012A6r 3  20 rr rr             jsr random
0012A9r 3  85 rr                sta z80_h
0012ABr 3  20 rr rr             jsr imul
0012AEr 3  A5 rr                lda z80_h
0012B0r 3  85 rr                sta varrnd
0012B2r 3  A9 01                lda #1
0012B4r 3  85 rr                sta vare
0012B6r 3  4C rr rr     a00500: jmp a00513
0012B9r 3  A9 00        a00505: lda #0
0012BBr 3  85 rr                sta vare
0012BDr 3  20 rr rr     a00513: jsr cangd	; CANGODOWN
0012C0r 3  F0 03                beq :+
0012C2r 3  4C rr rr             jmp a00580
0012C5r 3               :
0012C5r 3  20 rr rr             jsr ifall	; TABLEFALL
0012C8r 3  A9 01                lda #1
0012CAr 3  85 rr                sta vare
0012CCr 3  A9 94                lda #148
0012CEr 3  A0 08                ldy #8
0012D0r 3  D1 rr                cmp (z80_ix),y
0012D2r 3  90 03                bcc *+5
0012D4r 3  4C rr rr             jmp a00580
0012D7r 3  A9 08                lda #8
0012D9r 3  A0 08                ldy #8
0012DBr 3  91 rr                sta (z80_ix),y
0012DDr 3  A5 rr        a00580: lda joyval	; KEY
0012DFr 3  29 10                and #16
0012E1r 3  F0 03                beq :+
0012E3r 3  4C rr rr             jmp a00850
0012E6r 3               :
0012E6r 3  A9 00                lda #0
0012E8r 3  C5 rr                cmp vard
0012EAr 3  90 03                bcc *+5
0012ECr 3  4C rr rr             jmp a00845
0012EFr 3  A9 00                lda #0
0012F1r 3  C5 rr                cmp varb
0012F3r 3  F0 03                beq *+5
0012F5r 3  4C rr rr             jmp a00845
0012F8r 3  A9 00                lda #0
0012FAr 3  A0 0A                ldy #10
0012FCr 3  D1 rr                cmp (z80_ix),y
0012FEr 3  F0 03                beq *+5
001300r 3  4C rr rr             jmp a00753
001303r 3  A9 06                lda #6
001305r 3  85 rr                sta z80_c
001307r 3  A0 09                ldy #9
001309r 3  B1 rr                lda (z80_ix),y
00130Br 3  18                   clc
00130Cr 3  65 rr                adc z80_c
00130Er 3  A0 09                ldy #9
001310r 3  91 rr                sta (z80_ix),y
001312r 3  A9 01                lda #1	; SPAWN
001314r 3  85 rr                sta z80_c
001316r 3  A9 09                lda #9
001318r 3  85 rr                sta z80_b
00131Ar 3  20 rr rr             jsr spawn
00131Dr 3  A9 06                lda #6
00131Fr 3  85 rr                sta z80_c
001321r 3  A0 09                ldy #9
001323r 3  B1 rr                lda (z80_ix),y
001325r 3  38                   sec
001326r 3  E5 rr                sbc z80_c
001328r 3  A0 09                ldy #9
00132Ar 3  91 rr                sta (z80_ix),y
00132Cr 3  4C rr rr             jmp a00845
00132Fr 3  A9 06        a00753: lda #6
001331r 3  85 rr                sta z80_c
001333r 3  A0 09                ldy #9
001335r 3  B1 rr                lda (z80_ix),y
001337r 3  38                   sec
001338r 3  E5 rr                sbc z80_c
00133Ar 3  A0 09                ldy #9
00133Cr 3  91 rr                sta (z80_ix),y
00133Er 3  A9 01                lda #1	; SPAWN
001340r 3  85 rr                sta z80_c
001342r 3  A9 09                lda #9
001344r 3  85 rr                sta z80_b
001346r 3  20 rr rr             jsr spawn
001349r 3  A9 06                lda #6
00134Br 3  85 rr                sta z80_c
00134Dr 3  A0 09                ldy #9
00134Fr 3  B1 rr                lda (z80_ix),y
001351r 3  18                   clc
001352r 3  65 rr                adc z80_c
001354r 3  A0 09                ldy #9
001356r 3  91 rr                sta (z80_ix),y
001358r 3  4C rr rr     a00845: jmp a00858
00135Br 3  A9 00        a00850: lda #0
00135Dr 3  85 rr                sta varb
00135Fr 3  A9 01        a00858: lda #1
001361r 3  C5 rr                cmp varp
001363r 3  F0 03                beq *+5
001365r 3  4C rr rr             jmp a00946
001368r 3  A9 50                lda #80		; BEEP
00136Ar 3  8D rr rr             sta sndtyp
00136Dr 3  A9 07                lda #7	; SPAWN
00136Fr 3  85 rr                sta z80_c
001371r 3  A9 04                lda #4
001373r 3  85 rr                sta z80_b
001375r 3  20 rr rr             jsr spawn
001378r 3  A5 rr                lda ogptr	; ENDSPRITE
00137Ar 3  85 rr                sta z80_x
00137Cr 3  A5 rr                lda ogptr+1
00137Er 3  85 rr                sta z80_i
001380r 3  A9 FF                lda #255	; REMOVE
001382r 3  A0 05                ldy #5
001384r 3  91 rr                sta (z80_ix),y
001386r 3  A5 rr        a00946: lda joyval	; KEY
001388r 3  29 20                and #32
00138Ar 3  F0 03                beq :+
00138Cr 3  4C rr rr             jmp a00972
00138Fr 3               :
00138Fr 3  20 rr rr             jsr prskey	; WAITKEY
001392r 3  A0 08        a00972: ldy #8
001394r 3  B1 rr                lda (z80_ix),y
001396r 3  85 rr                sta vars
001398r 3  A0 09                ldy #9
00139Ar 3  B1 rr                lda (z80_ix),y
00139Cr 3  85 rr                sta vart
00139Er 3  4C rr rr             jmp grav
0013A1r 3               evnt01:
0013A1r 3  A9 01                lda #1
0013A3r 3  85 rr                sta varb
0013A5r 3  A9 00                lda #0
0013A7r 3  A0 0A                ldy #10
0013A9r 3  D1 rr                cmp (z80_ix),y
0013ABr 3  F0 03                beq *+5
0013ADr 3  4C rr rr             jmp b00133
0013B0r 3  20 rr rr             jsr cangr	; CANGORIGHT
0013B3r 3  F0 03                beq :+
0013B5r 3  4C rr rr             jmp b00117
0013B8r 3               :
0013B8r 3  A9 00                lda #0		; ANIMATE
0013BAr 3  20 rr rr             jsr animsp
0013BDr 3  A0 09                ldy #9 		; SPRITERIGHT
0013BFr 3  B1 rr                lda (z80_ix),y
0013C1r 3  18                   clc
0013C2r 3  69 02                adc #2
0013C4r 3  91 rr                sta (z80_ix),y
0013C6r 3  A0 09                ldy #9 		; SPRITERIGHT
0013C8r 3  B1 rr                lda (z80_ix),y
0013CAr 3  18                   clc
0013CBr 3  69 02                adc #2
0013CDr 3  91 rr                sta (z80_ix),y
0013CFr 3  4C rr rr             jmp b00133
0013D2r 3  A9 FF        b00117: lda #255	; REMOVE
0013D4r 3  A0 05                ldy #5
0013D6r 3  91 rr                sta (z80_ix),y
0013D8r 3  A9 01        b00133: lda #1
0013DAr 3  A0 0A                ldy #10
0013DCr 3  D1 rr                cmp (z80_ix),y
0013DEr 3  F0 03                beq *+5
0013E0r 3  4C rr rr             jmp b00263
0013E3r 3  20 rr rr             jsr cangl	; CANGOLEFT
0013E6r 3  F0 03                beq :+
0013E8r 3  4C rr rr             jmp b00247
0013EBr 3               :
0013EBr 3  A9 00                lda #0		; ANIMATE
0013EDr 3  20 rr rr             jsr animsp
0013F0r 3  A0 09                ldy #9 		; SPRITELEFT
0013F2r 3  B1 rr                lda (z80_ix),y
0013F4r 3  38                   sec
0013F5r 3  E9 02                sbc #2
0013F7r 3  91 rr                sta (z80_ix),y
0013F9r 3  A0 09                ldy #9 		; SPRITELEFT
0013FBr 3  B1 rr                lda (z80_ix),y
0013FDr 3  38                   sec
0013FEr 3  E9 02                sbc #2
001400r 3  91 rr                sta (z80_ix),y
001402r 3  A9 01                lda #1
001404r 3  85 rr                sta varb
001406r 3  4C rr rr             jmp b00263
001409r 3  A9 FF        b00247: lda #255	; REMOVE
00140Br 3  A0 05                ldy #5
00140Dr 3  91 rr                sta (z80_ix),y
00140Fr 3  A0 0B        b00263: ldy #11
001411r 3  B1 rr                lda (z80_ix),y
001413r 3  18                   clc
001414r 3  69 01                adc #1
001416r 3  A0 0B                ldy #11
001418r 3  91 rr                sta (z80_ix),y
00141Ar 3  A9 01                lda #1
00141Cr 3  C5 rr                cmp vard
00141Er 3  F0 03                beq *+5
001420r 3  4C rr rr             jmp b00344
001423r 3  A9 10                lda #16
001425r 3  A0 0B                ldy #11
001427r 3  D1 rr                cmp (z80_ix),y
001429r 3  F0 03                beq *+5
00142Br 3  4C rr rr             jmp b00344
00142Er 3  A9 FF                lda #255	; REMOVE
001430r 3  A0 05                ldy #5
001432r 3  91 rr                sta (z80_ix),y
001434r 3  60           b00344: rts
001435r 3               evnt02:
001435r 3  A9 00                lda #0 	; COLLISION
001437r 3  85 rr                sta z80_b
001439r 3  20 rr rr             jsr sktyp
00143Cr 3  B0 03                bcs :+
00143Er 3  4C rr rr             jmp c00035
001441r 3               :
001441r 3  A9 01                lda #1
001443r 3  85 rr                sta varp
001445r 3  A9 01        c00035: lda #1 	; COLLISION
001447r 3  85 rr                sta z80_b
001449r 3  20 rr rr             jsr sktyp
00144Cr 3  B0 03                bcs :+
00144Er 3  4C rr rr             jmp c00518
001451r 3               :
001451r 3  A9 05                lda #<5		; SCORE
001453r 3  85 rr                sta z80_l
001455r 3  A9 00                lda #>5
001457r 3  85 rr                sta z80_h
001459r 3  20 rr rr             jsr addsc
00145Cr 3  A5 rr                lda skptr	; OTHER
00145Er 3  85 rr                sta z80_x
001460r 3  A5 rr                lda skptr+1
001462r 3  85 rr                sta z80_i
001464r 3  A9 FF                lda #255	; REMOVE
001466r 3  A0 05                ldy #5
001468r 3  91 rr                sta (z80_ix),y
00146Ar 3  A5 rr                lda ogptr	; ENDSPRITE
00146Cr 3  85 rr                sta z80_x
00146Er 3  A5 rr                lda ogptr+1
001470r 3  85 rr                sta z80_i
001472r 3  A9 03                lda #3
001474r 3  C5 rr                cmp varh
001476r 3  B0 03                bcs *+5
001478r 3  4C rr rr             jmp c00194
00147Br 3  A9 1E                lda #30		; BEEP
00147Dr 3  8D rr rr             sta sndtyp
001480r 3  A5 rr                lda vard
001482r 3  85 rr                sta z80_c
001484r 3  A5 rr                lda varh
001486r 3  18                   clc
001487r 3  65 rr                adc z80_c
001489r 3  85 rr                sta varh
00148Br 3  A9 03        c00194: lda #3
00148Dr 3  C5 rr                cmp varh
00148Fr 3  90 03                bcc *+5
001491r 3  4C rr rr             jmp c00518
001494r 3  A9 28                lda #<40		; SCORE
001496r 3  85 rr                sta z80_l
001498r 3  A9 00                lda #>40
00149Ar 3  85 rr                sta z80_h
00149Cr 3  20 rr rr             jsr addsc
00149Fr 3  A5 rr                lda varg
0014A1r 3  38                   sec
0014A2r 3  E9 01                sbc #1
0014A4r 3  85 rr                sta varg
0014A6r 3  A9 00                lda #0
0014A8r 3  C5 rr                cmp varg
0014AAr 3  90 03                bcc *+5
0014ACr 3  4C rr rr             jmp c00502
0014AFr 3  A9 07                lda #7
0014B1r 3  85 rr                sta z80_d	; GETRANDOM
0014B3r 3  20 rr rr             jsr random
0014B6r 3  85 rr                sta z80_h
0014B8r 3  20 rr rr             jsr imul
0014BBr 3  A5 rr                lda z80_h
0014BDr 3  85 rr                sta varrnd
0014BFr 3  A9 00                lda #0
0014C1r 3  C5 rr                cmp varrnd
0014C3r 3  F0 03                beq *+5
0014C5r 3  4C rr rr             jmp c00341
0014C8r 3  A9 07                lda #7	; SPAWN
0014CAr 3  85 rr                sta z80_c
0014CCr 3  A9 05                lda #5
0014CEr 3  85 rr                sta z80_b
0014D0r 3  20 rr rr             jsr spawn
0014D3r 3  A9 01        c00341: lda #1
0014D5r 3  C5 rr                cmp varrnd
0014D7r 3  F0 03                beq *+5
0014D9r 3  4C rr rr             jmp c00381
0014DCr 3  A9 07                lda #7	; SPAWN
0014DEr 3  85 rr                sta z80_c
0014E0r 3  A9 06                lda #6
0014E2r 3  85 rr                sta z80_b
0014E4r 3  20 rr rr             jsr spawn
0014E7r 3  A9 02        c00381: lda #2
0014E9r 3  C5 rr                cmp varrnd
0014EBr 3  F0 03                beq *+5
0014EDr 3  4C rr rr             jmp c00421
0014F0r 3  A9 07                lda #7	; SPAWN
0014F2r 3  85 rr                sta z80_c
0014F4r 3  A9 07                lda #7
0014F6r 3  85 rr                sta z80_b
0014F8r 3  20 rr rr             jsr spawn
0014FBr 3  A9 03        c00421: lda #3
0014FDr 3  C5 rr                cmp varrnd
0014FFr 3  F0 03                beq *+5
001501r 3  4C rr rr             jmp c00462
001504r 3  A9 07                lda #7	; SPAWN
001506r 3  85 rr                sta z80_c
001508r 3  A9 08                lda #8
00150Ar 3  85 rr                sta z80_b
00150Cr 3  20 rr rr             jsr spawn
00150Fr 3  A9 03        c00462: lda #3
001511r 3  C5 rr                cmp varrnd
001513r 3  90 03                bcc *+5
001515r 3  4C rr rr             jmp c00502
001518r 3  A9 07                lda #7	; SPAWN
00151Ar 3  85 rr                sta z80_c
00151Cr 3  A9 03                lda #3
00151Er 3  85 rr                sta z80_b
001520r 3  20 rr rr             jsr spawn
001523r 3  A9 FF        c00502: lda #255	; REMOVE
001525r 3  A0 05                ldy #5
001527r 3  91 rr                sta (z80_ix),y
001529r 3  A9 00        c00518: lda #0
00152Br 3  A0 0B                ldy #11
00152Dr 3  D1 rr                cmp (z80_ix),y
00152Fr 3  F0 03                beq *+5
001531r 3  4C rr rr             jmp c00719
001534r 3  20 rr rr             jsr cangl	; CANGOLEFT
001537r 3  F0 03                beq :+
001539r 3  4C rr rr             jmp c00701
00153Cr 3               :
00153Cr 3  A9 0B                lda #11
00153Er 3  A0 06                ldy #6
001540r 3  91 rr                sta (z80_ix),y
001542r 3  A0 09                ldy #9 		; SPRITELEFT
001544r 3  B1 rr                lda (z80_ix),y
001546r 3  38                   sec
001547r 3  E9 02                sbc #2
001549r 3  91 rr                sta (z80_ix),y
00154Br 3  A9 10                lda #16
00154Dr 3  85 rr                sta z80_c
00154Fr 3  A0 09                ldy #9
001551r 3  B1 rr                lda (z80_ix),y
001553r 3  38                   sec
001554r 3  E5 rr                sbc z80_c
001556r 3  A0 09                ldy #9
001558r 3  91 rr                sta (z80_ix),y
00155Ar 3  20 rr rr             jsr cangd	; CANGODOWN
00155Dr 3  F0 03                beq :+
00155Fr 3  4C rr rr             jmp c00661
001562r 3               :
001562r 3  A9 01                lda #1
001564r 3  A0 0B                ldy #11
001566r 3  91 rr                sta (z80_ix),y
001568r 3  A9 10        c00661: lda #16
00156Ar 3  85 rr                sta z80_c
00156Cr 3  A0 09                ldy #9
00156Er 3  B1 rr                lda (z80_ix),y
001570r 3  18                   clc
001571r 3  65 rr                adc z80_c
001573r 3  A0 09                ldy #9
001575r 3  91 rr                sta (z80_ix),y
001577r 3  4C rr rr             jmp c00714
00157Ar 3  A9 01        c00701: lda #1
00157Cr 3  A0 0B                ldy #11
00157Er 3  91 rr                sta (z80_ix),y
001580r 3  4C rr rr     c00714: jmp c00893
001583r 3  20 rr rr     c00719: jsr cangr	; CANGORIGHT
001586r 3  F0 03                beq :+
001588r 3  4C rr rr             jmp c00880
00158Br 3               :
00158Br 3  A9 0A                lda #10
00158Dr 3  A0 06                ldy #6
00158Fr 3  91 rr                sta (z80_ix),y
001591r 3  A0 09                ldy #9 		; SPRITERIGHT
001593r 3  B1 rr                lda (z80_ix),y
001595r 3  18                   clc
001596r 3  69 02                adc #2
001598r 3  91 rr                sta (z80_ix),y
00159Ar 3  A9 10                lda #16
00159Cr 3  85 rr                sta z80_c
00159Er 3  A0 09                ldy #9
0015A0r 3  B1 rr                lda (z80_ix),y
0015A2r 3  18                   clc
0015A3r 3  65 rr                adc z80_c
0015A5r 3  A0 09                ldy #9
0015A7r 3  91 rr                sta (z80_ix),y
0015A9r 3  20 rr rr             jsr cangd	; CANGODOWN
0015ACr 3  F0 03                beq :+
0015AEr 3  4C rr rr             jmp c00840
0015B1r 3               :
0015B1r 3  A9 00                lda #0
0015B3r 3  A0 0B                ldy #11
0015B5r 3  91 rr                sta (z80_ix),y
0015B7r 3  A9 10        c00840: lda #16
0015B9r 3  85 rr                sta z80_c
0015BBr 3  A0 09                ldy #9
0015BDr 3  B1 rr                lda (z80_ix),y
0015BFr 3  38                   sec
0015C0r 3  E5 rr                sbc z80_c
0015C2r 3  A0 09                ldy #9
0015C4r 3  91 rr                sta (z80_ix),y
0015C6r 3  4C rr rr             jmp c00893
0015C9r 3  A9 00        c00880: lda #0
0015CBr 3  A0 0B                ldy #11
0015CDr 3  91 rr                sta (z80_ix),y
0015CFr 3  A9 00        c00893: lda #0
0015D1r 3  C5 rr                cmp vara
0015D3r 3  F0 03                beq *+5
0015D5r 3  4C rr rr             jmp c00921
0015D8r 3  A9 00                lda #0		; ANIMATE
0015DAr 3  20 rr rr             jsr animsp
0015DDr 3  60           c00921: rts
0015DEr 3               evnt03:
0015DEr 3  A9 00                lda #0 	; COLLISION
0015E0r 3  85 rr                sta z80_b
0015E2r 3  20 rr rr             jsr sktyp
0015E5r 3  B0 03                bcs :+
0015E7r 3  4C rr rr             jmp d00035
0015EAr 3               :
0015EAr 3  A9 01                lda #1
0015ECr 3  85 rr                sta varp
0015EEr 3  A9 01        d00035: lda #1 	; COLLISION
0015F0r 3  85 rr                sta z80_b
0015F2r 3  20 rr rr             jsr sktyp
0015F5r 3  B0 03                bcs :+
0015F7r 3  4C rr rr             jmp d00518
0015FAr 3               :
0015FAr 3  A9 05                lda #<5		; SCORE
0015FCr 3  85 rr                sta z80_l
0015FEr 3  A9 00                lda #>5
001600r 3  85 rr                sta z80_h
001602r 3  20 rr rr             jsr addsc
001605r 3  A5 rr                lda skptr	; OTHER
001607r 3  85 rr                sta z80_x
001609r 3  A5 rr                lda skptr+1
00160Br 3  85 rr                sta z80_i
00160Dr 3  A9 FF                lda #255	; REMOVE
00160Fr 3  A0 05                ldy #5
001611r 3  91 rr                sta (z80_ix),y
001613r 3  A5 rr                lda ogptr	; ENDSPRITE
001615r 3  85 rr                sta z80_x
001617r 3  A5 rr                lda ogptr+1
001619r 3  85 rr                sta z80_i
00161Br 3  A9 03                lda #3
00161Dr 3  C5 rr                cmp vari
00161Fr 3  B0 03                bcs *+5
001621r 3  4C rr rr             jmp d00194
001624r 3  A9 1E                lda #30		; BEEP
001626r 3  8D rr rr             sta sndtyp
001629r 3  A5 rr                lda vard
00162Br 3  85 rr                sta z80_c
00162Dr 3  A5 rr                lda vari
00162Fr 3  18                   clc
001630r 3  65 rr                adc z80_c
001632r 3  85 rr                sta vari
001634r 3  A9 03        d00194: lda #3
001636r 3  C5 rr                cmp vari
001638r 3  90 03                bcc *+5
00163Ar 3  4C rr rr             jmp d00518
00163Dr 3  A9 37                lda #<55		; SCORE
00163Fr 3  85 rr                sta z80_l
001641r 3  A9 00                lda #>55
001643r 3  85 rr                sta z80_h
001645r 3  20 rr rr             jsr addsc
001648r 3  A5 rr                lda varg
00164Ar 3  38                   sec
00164Br 3  E9 01                sbc #1
00164Dr 3  85 rr                sta varg
00164Fr 3  A9 00                lda #0
001651r 3  C5 rr                cmp varg
001653r 3  90 03                bcc *+5
001655r 3  4C rr rr             jmp d00502
001658r 3  A9 07                lda #7
00165Ar 3  85 rr                sta z80_d	; GETRANDOM
00165Cr 3  20 rr rr             jsr random
00165Fr 3  85 rr                sta z80_h
001661r 3  20 rr rr             jsr imul
001664r 3  A5 rr                lda z80_h
001666r 3  85 rr                sta varrnd
001668r 3  A9 00                lda #0
00166Ar 3  C5 rr                cmp varrnd
00166Cr 3  F0 03                beq *+5
00166Er 3  4C rr rr             jmp d00341
001671r 3  A9 07                lda #7	; SPAWN
001673r 3  85 rr                sta z80_c
001675r 3  A9 05                lda #5
001677r 3  85 rr                sta z80_b
001679r 3  20 rr rr             jsr spawn
00167Cr 3  A9 01        d00341: lda #1
00167Er 3  C5 rr                cmp varrnd
001680r 3  F0 03                beq *+5
001682r 3  4C rr rr             jmp d00381
001685r 3  A9 07                lda #7	; SPAWN
001687r 3  85 rr                sta z80_c
001689r 3  A9 06                lda #6
00168Br 3  85 rr                sta z80_b
00168Dr 3  20 rr rr             jsr spawn
001690r 3  A9 02        d00381: lda #2
001692r 3  C5 rr                cmp varrnd
001694r 3  F0 03                beq *+5
001696r 3  4C rr rr             jmp d00421
001699r 3  A9 07                lda #7	; SPAWN
00169Br 3  85 rr                sta z80_c
00169Dr 3  A9 07                lda #7
00169Fr 3  85 rr                sta z80_b
0016A1r 3  20 rr rr             jsr spawn
0016A4r 3  A9 03        d00421: lda #3
0016A6r 3  C5 rr                cmp varrnd
0016A8r 3  F0 03                beq *+5
0016AAr 3  4C rr rr             jmp d00462
0016ADr 3  A9 07                lda #7	; SPAWN
0016AFr 3  85 rr                sta z80_c
0016B1r 3  A9 08                lda #8
0016B3r 3  85 rr                sta z80_b
0016B5r 3  20 rr rr             jsr spawn
0016B8r 3  A9 03        d00462: lda #3
0016BAr 3  C5 rr                cmp varrnd
0016BCr 3  90 03                bcc *+5
0016BEr 3  4C rr rr             jmp d00502
0016C1r 3  A9 07                lda #7	; SPAWN
0016C3r 3  85 rr                sta z80_c
0016C5r 3  A9 03                lda #3
0016C7r 3  85 rr                sta z80_b
0016C9r 3  20 rr rr             jsr spawn
0016CCr 3  A9 FF        d00502: lda #255	; REMOVE
0016CEr 3  A0 05                ldy #5
0016D0r 3  91 rr                sta (z80_ix),y
0016D2r 3  A9 00        d00518: lda #0
0016D4r 3  A0 0B                ldy #11
0016D6r 3  D1 rr                cmp (z80_ix),y
0016D8r 3  F0 03                beq *+5
0016DAr 3  4C rr rr             jmp d00619
0016DDr 3  20 rr rr             jsr cangl	; CANGOLEFT
0016E0r 3  F0 03                beq :+
0016E2r 3  4C rr rr             jmp d00601
0016E5r 3               :
0016E5r 3  A9 11                lda #17
0016E7r 3  A0 06                ldy #6
0016E9r 3  91 rr                sta (z80_ix),y
0016EBr 3  A0 09                ldy #9 		; SPRITELEFT
0016EDr 3  B1 rr                lda (z80_ix),y
0016EFr 3  38                   sec
0016F0r 3  E9 02                sbc #2
0016F2r 3  91 rr                sta (z80_ix),y
0016F4r 3  4C rr rr             jmp d00614
0016F7r 3  A9 01        d00601: lda #1
0016F9r 3  A0 0B                ldy #11
0016FBr 3  91 rr                sta (z80_ix),y
0016FDr 3  4C rr rr     d00614: jmp d00693
001700r 3  20 rr rr     d00619: jsr cangr	; CANGORIGHT
001703r 3  F0 03                beq :+
001705r 3  4C rr rr             jmp d00680
001708r 3               :
001708r 3  A9 10                lda #16
00170Ar 3  A0 06                ldy #6
00170Cr 3  91 rr                sta (z80_ix),y
00170Er 3  A0 09                ldy #9 		; SPRITERIGHT
001710r 3  B1 rr                lda (z80_ix),y
001712r 3  18                   clc
001713r 3  69 02                adc #2
001715r 3  91 rr                sta (z80_ix),y
001717r 3  4C rr rr             jmp d00693
00171Ar 3  A9 00        d00680: lda #0
00171Cr 3  A0 0B                ldy #11
00171Er 3  91 rr                sta (z80_ix),y
001720r 3  20 rr rr     d00693: jsr cangu	; CANGOUP
001723r 3  F0 03                beq :+
001725r 3  4C rr rr             jmp d00717
001728r 3               :
001728r 3  20 rr rr             jsr jump	; TABLEJUMP
00172Br 3  20 rr rr     d00717: jsr cangd	; CANGODOWN
00172Er 3  F0 03                beq :+
001730r 3  4C rr rr             jmp d00741
001733r 3               :
001733r 3  20 rr rr             jsr ifall	; TABLEFALL
001736r 3  A9 00        d00741: lda #0
001738r 3  C5 rr                cmp vara
00173Ar 3  F0 03                beq *+5
00173Cr 3  4C rr rr             jmp d00769
00173Fr 3  A9 00                lda #0		; ANIMATE
001741r 3  20 rr rr             jsr animsp
001744r 3  4C rr rr     d00769: jmp grav
001747r 3               evnt04:
001747r 3  A9 00                lda #0 	; COLLISION
001749r 3  85 rr                sta z80_b
00174Br 3  20 rr rr             jsr sktyp
00174Er 3  B0 03                bcs :+
001750r 3  4C rr rr             jmp e00035
001753r 3               :
001753r 3  A9 01                lda #1
001755r 3  85 rr                sta varp
001757r 3  A0 08        e00035: ldy #8
001759r 3  B1 rr                lda (z80_ix),y
00175Br 3  C5 rr                cmp vars
00175Dr 3  F0 03                beq *+5
00175Fr 3  4C rr rr             jmp e00349
001762r 3  A9 00                lda #0
001764r 3  C5 rr                cmp varr
001766r 3  F0 03                beq *+5
001768r 3  4C rr rr             jmp e00349
00176Br 3  A5 rr                lda vart
00176Dr 3  A0 09                ldy #9
00176Fr 3  D1 rr                cmp (z80_ix),y
001771r 3  B0 03                bcs *+5
001773r 3  4C rr rr             jmp e00211
001776r 3  A9 00                lda #0
001778r 3  A0 0A                ldy #10
00177Ar 3  D1 rr                cmp (z80_ix),y
00177Cr 3  F0 03                beq *+5
00177Er 3  4C rr rr             jmp e00211
001781r 3  A9 06                lda #6
001783r 3  85 rr                sta z80_c
001785r 3  A0 09                ldy #9
001787r 3  B1 rr                lda (z80_ix),y
001789r 3  18                   clc
00178Ar 3  65 rr                adc z80_c
00178Cr 3  A0 09                ldy #9
00178Er 3  91 rr                sta (z80_ix),y
001790r 3  A9 08                lda #8	; SPAWN
001792r 3  85 rr                sta z80_c
001794r 3  A9 0F                lda #15
001796r 3  85 rr                sta z80_b
001798r 3  20 rr rr             jsr spawn
00179Br 3  A9 06                lda #6
00179Dr 3  85 rr                sta z80_c
00179Fr 3  A0 09                ldy #9
0017A1r 3  B1 rr                lda (z80_ix),y
0017A3r 3  38                   sec
0017A4r 3  E5 rr                sbc z80_c
0017A6r 3  A0 09                ldy #9
0017A8r 3  91 rr                sta (z80_ix),y
0017AAr 3  A5 rr        e00211: lda vart
0017ACr 3  A0 09                ldy #9
0017AEr 3  D1 rr                cmp (z80_ix),y
0017B0r 3  90 03                bcc *+5
0017B2r 3  4C rr rr             jmp e00349
0017B5r 3  A9 01                lda #1
0017B7r 3  A0 0A                ldy #10
0017B9r 3  D1 rr                cmp (z80_ix),y
0017BBr 3  F0 03                beq *+5
0017BDr 3  4C rr rr             jmp e00349
0017C0r 3  A9 06                lda #6
0017C2r 3  85 rr                sta z80_c
0017C4r 3  A0 09                ldy #9
0017C6r 3  B1 rr                lda (z80_ix),y
0017C8r 3  38                   sec
0017C9r 3  E5 rr                sbc z80_c
0017CBr 3  A0 09                ldy #9
0017CDr 3  91 rr                sta (z80_ix),y
0017CFr 3  A9 08                lda #8	; SPAWN
0017D1r 3  85 rr                sta z80_c
0017D3r 3  A9 0F                lda #15
0017D5r 3  85 rr                sta z80_b
0017D7r 3  20 rr rr             jsr spawn
0017DAr 3  A9 06                lda #6
0017DCr 3  85 rr                sta z80_c
0017DEr 3  A0 09                ldy #9
0017E0r 3  B1 rr                lda (z80_ix),y
0017E2r 3  18                   clc
0017E3r 3  65 rr                adc z80_c
0017E5r 3  A0 09                ldy #9
0017E7r 3  91 rr                sta (z80_ix),y
0017E9r 3  A9 01        e00349: lda #1 	; COLLISION
0017EBr 3  85 rr                sta z80_b
0017EDr 3  20 rr rr             jsr sktyp
0017F0r 3  B0 03                bcs :+
0017F2r 3  4C rr rr             jmp e00832
0017F5r 3               :
0017F5r 3  A9 05                lda #<5		; SCORE
0017F7r 3  85 rr                sta z80_l
0017F9r 3  A9 00                lda #>5
0017FBr 3  85 rr                sta z80_h
0017FDr 3  20 rr rr             jsr addsc
001800r 3  A5 rr                lda skptr	; OTHER
001802r 3  85 rr                sta z80_x
001804r 3  A5 rr                lda skptr+1
001806r 3  85 rr                sta z80_i
001808r 3  A9 FF                lda #255	; REMOVE
00180Ar 3  A0 05                ldy #5
00180Cr 3  91 rr                sta (z80_ix),y
00180Er 3  A5 rr                lda ogptr	; ENDSPRITE
001810r 3  85 rr                sta z80_x
001812r 3  A5 rr                lda ogptr+1
001814r 3  85 rr                sta z80_i
001816r 3  A9 04                lda #4
001818r 3  C5 rr                cmp varj
00181Ar 3  B0 03                bcs *+5
00181Cr 3  4C rr rr             jmp e00508
00181Fr 3  A9 1E                lda #30		; BEEP
001821r 3  8D rr rr             sta sndtyp
001824r 3  A5 rr                lda vard
001826r 3  85 rr                sta z80_c
001828r 3  A5 rr                lda varj
00182Ar 3  18                   clc
00182Br 3  65 rr                adc z80_c
00182Dr 3  85 rr                sta varj
00182Fr 3  A9 04        e00508: lda #4
001831r 3  C5 rr                cmp varj
001833r 3  90 03                bcc *+5
001835r 3  4C rr rr             jmp e00832
001838r 3  A9 41                lda #<65		; SCORE
00183Ar 3  85 rr                sta z80_l
00183Cr 3  A9 00                lda #>65
00183Er 3  85 rr                sta z80_h
001840r 3  20 rr rr             jsr addsc
001843r 3  A5 rr                lda varg
001845r 3  38                   sec
001846r 3  E9 01                sbc #1
001848r 3  85 rr                sta varg
00184Ar 3  A9 00                lda #0
00184Cr 3  C5 rr                cmp varg
00184Er 3  90 03                bcc *+5
001850r 3  4C rr rr             jmp e00816
001853r 3  A9 07                lda #7
001855r 3  85 rr                sta z80_d	; GETRANDOM
001857r 3  20 rr rr             jsr random
00185Ar 3  85 rr                sta z80_h
00185Cr 3  20 rr rr             jsr imul
00185Fr 3  A5 rr                lda z80_h
001861r 3  85 rr                sta varrnd
001863r 3  A9 00                lda #0
001865r 3  C5 rr                cmp varrnd
001867r 3  F0 03                beq *+5
001869r 3  4C rr rr             jmp e00655
00186Cr 3  A9 07                lda #7	; SPAWN
00186Er 3  85 rr                sta z80_c
001870r 3  A9 05                lda #5
001872r 3  85 rr                sta z80_b
001874r 3  20 rr rr             jsr spawn
001877r 3  A9 01        e00655: lda #1
001879r 3  C5 rr                cmp varrnd
00187Br 3  F0 03                beq *+5
00187Dr 3  4C rr rr             jmp e00695
001880r 3  A9 07                lda #7	; SPAWN
001882r 3  85 rr                sta z80_c
001884r 3  A9 06                lda #6
001886r 3  85 rr                sta z80_b
001888r 3  20 rr rr             jsr spawn
00188Br 3  A9 02        e00695: lda #2
00188Dr 3  C5 rr                cmp varrnd
00188Fr 3  F0 03                beq *+5
001891r 3  4C rr rr             jmp e00736
001894r 3  A9 07                lda #7	; SPAWN
001896r 3  85 rr                sta z80_c
001898r 3  A9 07                lda #7
00189Ar 3  85 rr                sta z80_b
00189Cr 3  20 rr rr             jsr spawn
00189Fr 3  A9 03        e00736: lda #3
0018A1r 3  C5 rr                cmp varrnd
0018A3r 3  F0 03                beq *+5
0018A5r 3  4C rr rr             jmp e00776
0018A8r 3  A9 07                lda #7	; SPAWN
0018AAr 3  85 rr                sta z80_c
0018ACr 3  A9 08                lda #8
0018AEr 3  85 rr                sta z80_b
0018B0r 3  20 rr rr             jsr spawn
0018B3r 3  A9 03        e00776: lda #3
0018B5r 3  C5 rr                cmp varrnd
0018B7r 3  90 03                bcc *+5
0018B9r 3  4C rr rr             jmp e00816
0018BCr 3  A9 07                lda #7	; SPAWN
0018BEr 3  85 rr                sta z80_c
0018C0r 3  A9 03                lda #3
0018C2r 3  85 rr                sta z80_b
0018C4r 3  20 rr rr             jsr spawn
0018C7r 3  A9 FF        e00816: lda #255	; REMOVE
0018C9r 3  A0 05                ldy #5
0018CBr 3  91 rr                sta (z80_ix),y
0018CDr 3  A9 00        e00832: lda #0
0018CFr 3  A0 0B                ldy #11
0018D1r 3  D1 rr                cmp (z80_ix),y
0018D3r 3  F0 03                beq *+5
0018D5r 3  4C rr rr             jmp e01047
0018D8r 3  20 rr rr             jsr cangl	; CANGOLEFT
0018DBr 3  F0 03                beq :+
0018DDr 3  4C rr rr             jmp e01028
0018E0r 3               :
0018E0r 3  A9 0E                lda #14
0018E2r 3  A0 06                ldy #6
0018E4r 3  91 rr                sta (z80_ix),y
0018E6r 3  A9 01                lda #1
0018E8r 3  A0 0A                ldy #10
0018EAr 3  91 rr                sta (z80_ix),y
0018ECr 3  A0 09                ldy #9 		; SPRITELEFT
0018EEr 3  B1 rr                lda (z80_ix),y
0018F0r 3  38                   sec
0018F1r 3  E9 02                sbc #2
0018F3r 3  91 rr                sta (z80_ix),y
0018F5r 3  A9 10                lda #16
0018F7r 3  85 rr                sta z80_c
0018F9r 3  A0 09                ldy #9
0018FBr 3  B1 rr                lda (z80_ix),y
0018FDr 3  38                   sec
0018FEr 3  E5 rr                sbc z80_c
001900r 3  A0 09                ldy #9
001902r 3  91 rr                sta (z80_ix),y
001904r 3  20 rr rr             jsr cangd	; CANGODOWN
001907r 3  F0 03                beq :+
001909r 3  4C rr rr             jmp e00989
00190Cr 3               :
00190Cr 3  A9 01                lda #1
00190Er 3  A0 0B                ldy #11
001910r 3  91 rr                sta (z80_ix),y
001912r 3  A9 10        e00989: lda #16
001914r 3  85 rr                sta z80_c
001916r 3  A0 09                ldy #9
001918r 3  B1 rr                lda (z80_ix),y
00191Ar 3  18                   clc
00191Br 3  65 rr                adc z80_c
00191Dr 3  A0 09                ldy #9
00191Fr 3  91 rr                sta (z80_ix),y
001921r 3  4C rr rr             jmp e01042
001924r 3  A9 01        e01028: lda #1
001926r 3  A0 0B                ldy #11
001928r 3  91 rr                sta (z80_ix),y
00192Ar 3  4C rr rr     e01042: jmp e01235
00192Dr 3  20 rr rr     e01047: jsr cangr	; CANGORIGHT
001930r 3  F0 03                beq :+
001932r 3  4C rr rr             jmp e01221
001935r 3               :
001935r 3  A9 0D                lda #13
001937r 3  A0 06                ldy #6
001939r 3  91 rr                sta (z80_ix),y
00193Br 3  A9 00                lda #0
00193Dr 3  A0 0A                ldy #10
00193Fr 3  91 rr                sta (z80_ix),y
001941r 3  A0 09                ldy #9 		; SPRITERIGHT
001943r 3  B1 rr                lda (z80_ix),y
001945r 3  18                   clc
001946r 3  69 02                adc #2
001948r 3  91 rr                sta (z80_ix),y
00194Ar 3  A9 10                lda #16
00194Cr 3  85 rr                sta z80_c
00194Er 3  A0 09                ldy #9
001950r 3  B1 rr                lda (z80_ix),y
001952r 3  18                   clc
001953r 3  65 rr                adc z80_c
001955r 3  A0 09                ldy #9
001957r 3  91 rr                sta (z80_ix),y
001959r 3  20 rr rr             jsr cangd	; CANGODOWN
00195Cr 3  F0 03                beq :+
00195Er 3  4C rr rr             jmp e01181
001961r 3               :
001961r 3  A9 00                lda #0
001963r 3  A0 0B                ldy #11
001965r 3  91 rr                sta (z80_ix),y
001967r 3  A9 10        e01181: lda #16
001969r 3  85 rr                sta z80_c
00196Br 3  A0 09                ldy #9
00196Dr 3  B1 rr                lda (z80_ix),y
00196Fr 3  38                   sec
001970r 3  E5 rr                sbc z80_c
001972r 3  A0 09                ldy #9
001974r 3  91 rr                sta (z80_ix),y
001976r 3  4C rr rr             jmp e01235
001979r 3  A9 00        e01221: lda #0
00197Br 3  A0 0B                ldy #11
00197Dr 3  91 rr                sta (z80_ix),y
00197Fr 3  A9 00        e01235: lda #0
001981r 3  C5 rr                cmp vara
001983r 3  F0 03                beq *+5
001985r 3  4C rr rr             jmp e01263
001988r 3  A9 00                lda #0		; ANIMATE
00198Ar 3  20 rr rr             jsr animsp
00198Dr 3  60           e01263: rts
00198Er 3               evnt05:
00198Er 3  A9 00                lda #0 	; COLLISION
001990r 3  85 rr                sta z80_b
001992r 3  20 rr rr             jsr sktyp
001995r 3  B0 03                bcs :+
001997r 3  4C rr rr             jmp f00035
00199Ar 3               :
00199Ar 3  A9 01                lda #1
00199Cr 3  85 rr                sta varp
00199Er 3  A9 01        f00035: lda #1 	; COLLISION
0019A0r 3  85 rr                sta z80_b
0019A2r 3  20 rr rr             jsr sktyp
0019A5r 3  B0 03                bcs :+
0019A7r 3  4C rr rr             jmp f00518
0019AAr 3               :
0019AAr 3  A9 05                lda #<5		; SCORE
0019ACr 3  85 rr                sta z80_l
0019AEr 3  A9 00                lda #>5
0019B0r 3  85 rr                sta z80_h
0019B2r 3  20 rr rr             jsr addsc
0019B5r 3  A5 rr                lda skptr	; OTHER
0019B7r 3  85 rr                sta z80_x
0019B9r 3  A5 rr                lda skptr+1
0019BBr 3  85 rr                sta z80_i
0019BDr 3  A9 FF                lda #255	; REMOVE
0019BFr 3  A0 05                ldy #5
0019C1r 3  91 rr                sta (z80_ix),y
0019C3r 3  A5 rr                lda ogptr	; ENDSPRITE
0019C5r 3  85 rr                sta z80_x
0019C7r 3  A5 rr                lda ogptr+1
0019C9r 3  85 rr                sta z80_i
0019CBr 3  A9 03                lda #3
0019CDr 3  C5 rr                cmp vark
0019CFr 3  B0 03                bcs *+5
0019D1r 3  4C rr rr             jmp f00194
0019D4r 3  A9 1E                lda #30		; BEEP
0019D6r 3  8D rr rr             sta sndtyp
0019D9r 3  A5 rr                lda vard
0019DBr 3  85 rr                sta z80_c
0019DDr 3  A5 rr                lda vark
0019DFr 3  18                   clc
0019E0r 3  65 rr                adc z80_c
0019E2r 3  85 rr                sta vark
0019E4r 3  A9 03        f00194: lda #3
0019E6r 3  C5 rr                cmp vark
0019E8r 3  90 03                bcc *+5
0019EAr 3  4C rr rr             jmp f00518
0019EDr 3  A9 1E                lda #<30		; SCORE
0019EFr 3  85 rr                sta z80_l
0019F1r 3  A9 00                lda #>30
0019F3r 3  85 rr                sta z80_h
0019F5r 3  20 rr rr             jsr addsc
0019F8r 3  A5 rr                lda varg
0019FAr 3  38                   sec
0019FBr 3  E9 01                sbc #1
0019FDr 3  85 rr                sta varg
0019FFr 3  A9 00                lda #0
001A01r 3  C5 rr                cmp varg
001A03r 3  90 03                bcc *+5
001A05r 3  4C rr rr             jmp f00502
001A08r 3  A9 07                lda #7
001A0Ar 3  85 rr                sta z80_d	; GETRANDOM
001A0Cr 3  20 rr rr             jsr random
001A0Fr 3  85 rr                sta z80_h
001A11r 3  20 rr rr             jsr imul
001A14r 3  A5 rr                lda z80_h
001A16r 3  85 rr                sta varrnd
001A18r 3  A9 00                lda #0
001A1Ar 3  C5 rr                cmp varrnd
001A1Cr 3  F0 03                beq *+5
001A1Er 3  4C rr rr             jmp f00341
001A21r 3  A9 07                lda #7	; SPAWN
001A23r 3  85 rr                sta z80_c
001A25r 3  A9 05                lda #5
001A27r 3  85 rr                sta z80_b
001A29r 3  20 rr rr             jsr spawn
001A2Cr 3  A9 01        f00341: lda #1
001A2Er 3  C5 rr                cmp varrnd
001A30r 3  F0 03                beq *+5
001A32r 3  4C rr rr             jmp f00381
001A35r 3  A9 07                lda #7	; SPAWN
001A37r 3  85 rr                sta z80_c
001A39r 3  A9 06                lda #6
001A3Br 3  85 rr                sta z80_b
001A3Dr 3  20 rr rr             jsr spawn
001A40r 3  A9 02        f00381: lda #2
001A42r 3  C5 rr                cmp varrnd
001A44r 3  F0 03                beq *+5
001A46r 3  4C rr rr             jmp f00421
001A49r 3  A9 07                lda #7	; SPAWN
001A4Br 3  85 rr                sta z80_c
001A4Dr 3  A9 07                lda #7
001A4Fr 3  85 rr                sta z80_b
001A51r 3  20 rr rr             jsr spawn
001A54r 3  A9 03        f00421: lda #3
001A56r 3  C5 rr                cmp varrnd
001A58r 3  F0 03                beq *+5
001A5Ar 3  4C rr rr             jmp f00462
001A5Dr 3  A9 07                lda #7	; SPAWN
001A5Fr 3  85 rr                sta z80_c
001A61r 3  A9 08                lda #8
001A63r 3  85 rr                sta z80_b
001A65r 3  20 rr rr             jsr spawn
001A68r 3  A9 03        f00462: lda #3
001A6Ar 3  C5 rr                cmp varrnd
001A6Cr 3  90 03                bcc *+5
001A6Er 3  4C rr rr             jmp f00502
001A71r 3  A9 07                lda #7	; SPAWN
001A73r 3  85 rr                sta z80_c
001A75r 3  A9 03                lda #3
001A77r 3  85 rr                sta z80_b
001A79r 3  20 rr rr             jsr spawn
001A7Cr 3  A9 FF        f00502: lda #255	; REMOVE
001A7Er 3  A0 05                ldy #5
001A80r 3  91 rr                sta (z80_ix),y
001A82r 3  A9 00        f00518: lda #0
001A84r 3  A0 0B                ldy #11
001A86r 3  D1 rr                cmp (z80_ix),y
001A88r 3  F0 03                beq *+5
001A8Ar 3  4C rr rr             jmp f00604
001A8Dr 3  20 rr rr             jsr cangu	; CANGOUP
001A90r 3  F0 03                beq :+
001A92r 3  4C rr rr             jmp f00586
001A95r 3               :
001A95r 3  A0 08                ldy #8 		; SPRITEUP
001A97r 3  B1 rr                lda (z80_ix),y
001A99r 3  38                   sec
001A9Ar 3  E9 02                sbc #2
001A9Cr 3  91 rr                sta (z80_ix),y
001A9Er 3  4C rr rr             jmp f00600
001AA1r 3  A9 01        f00586: lda #1
001AA3r 3  A0 0B                ldy #11
001AA5r 3  91 rr                sta (z80_ix),y
001AA7r 3  4C rr rr     f00600: jmp f00665
001AAAr 3  20 rr rr     f00604: jsr cangd	; CANGODOWN
001AADr 3  F0 03                beq :+
001AAFr 3  4C rr rr             jmp f00651
001AB2r 3               :
001AB2r 3  A0 08                ldy #8 		; SPRITEDOWN
001AB4r 3  B1 rr                lda (z80_ix),y
001AB6r 3  18                   clc
001AB7r 3  69 02                adc #2
001AB9r 3  91 rr                sta (z80_ix),y
001ABBr 3  4C rr rr             jmp f00665
001ABEr 3  A9 00        f00651: lda #0
001AC0r 3  A0 0B                ldy #11
001AC2r 3  91 rr                sta (z80_ix),y
001AC4r 3  A9 00        f00665: lda #0
001AC6r 3  C5 rr                cmp vara
001AC8r 3  F0 03                beq *+5
001ACAr 3  4C rr rr             jmp f00693
001ACDr 3  A9 00                lda #0		; ANIMATE
001ACFr 3  20 rr rr             jsr animsp
001AD2r 3  60           f00693: rts
001AD3r 3               evnt06:
001AD3r 3  A9 00                lda #0 	; COLLISION
001AD5r 3  85 rr                sta z80_b
001AD7r 3  20 rr rr             jsr sktyp
001ADAr 3  B0 03                bcs :+
001ADCr 3  4C rr rr             jmp g00035
001ADFr 3               :
001ADFr 3  A9 01                lda #1
001AE1r 3  85 rr                sta varp
001AE3r 3  A9 01        g00035: lda #1 	; COLLISION
001AE5r 3  85 rr                sta z80_b
001AE7r 3  20 rr rr             jsr sktyp
001AEAr 3  B0 03                bcs :+
001AECr 3  4C rr rr             jmp g00518
001AEFr 3               :
001AEFr 3  A9 05                lda #<5		; SCORE
001AF1r 3  85 rr                sta z80_l
001AF3r 3  A9 00                lda #>5
001AF5r 3  85 rr                sta z80_h
001AF7r 3  20 rr rr             jsr addsc
001AFAr 3  A5 rr                lda skptr	; OTHER
001AFCr 3  85 rr                sta z80_x
001AFEr 3  A5 rr                lda skptr+1
001B00r 3  85 rr                sta z80_i
001B02r 3  A9 FF                lda #255	; REMOVE
001B04r 3  A0 05                ldy #5
001B06r 3  91 rr                sta (z80_ix),y
001B08r 3  A5 rr                lda ogptr	; ENDSPRITE
001B0Ar 3  85 rr                sta z80_x
001B0Cr 3  A5 rr                lda ogptr+1
001B0Er 3  85 rr                sta z80_i
001B10r 3  A9 03                lda #3
001B12r 3  C5 rr                cmp varl
001B14r 3  B0 03                bcs *+5
001B16r 3  4C rr rr             jmp g00194
001B19r 3  A9 1E                lda #30		; BEEP
001B1Br 3  8D rr rr             sta sndtyp
001B1Er 3  A5 rr                lda vard
001B20r 3  85 rr                sta z80_c
001B22r 3  A5 rr                lda varl
001B24r 3  18                   clc
001B25r 3  65 rr                adc z80_c
001B27r 3  85 rr                sta varl
001B29r 3  A9 03        g00194: lda #3
001B2Br 3  C5 rr                cmp varl
001B2Dr 3  90 03                bcc *+5
001B2Fr 3  4C rr rr             jmp g00518
001B32r 3  A9 1E                lda #<30		; SCORE
001B34r 3  85 rr                sta z80_l
001B36r 3  A9 00                lda #>30
001B38r 3  85 rr                sta z80_h
001B3Ar 3  20 rr rr             jsr addsc
001B3Dr 3  A5 rr                lda varg
001B3Fr 3  38                   sec
001B40r 3  E9 01                sbc #1
001B42r 3  85 rr                sta varg
001B44r 3  A9 00                lda #0
001B46r 3  C5 rr                cmp varg
001B48r 3  90 03                bcc *+5
001B4Ar 3  4C rr rr             jmp g00502
001B4Dr 3  A9 07                lda #7
001B4Fr 3  85 rr                sta z80_d	; GETRANDOM
001B51r 3  20 rr rr             jsr random
001B54r 3  85 rr                sta z80_h
001B56r 3  20 rr rr             jsr imul
001B59r 3  A5 rr                lda z80_h
001B5Br 3  85 rr                sta varrnd
001B5Dr 3  A9 00                lda #0
001B5Fr 3  C5 rr                cmp varrnd
001B61r 3  F0 03                beq *+5
001B63r 3  4C rr rr             jmp g00341
001B66r 3  A9 07                lda #7	; SPAWN
001B68r 3  85 rr                sta z80_c
001B6Ar 3  A9 05                lda #5
001B6Cr 3  85 rr                sta z80_b
001B6Er 3  20 rr rr             jsr spawn
001B71r 3  A9 01        g00341: lda #1
001B73r 3  C5 rr                cmp varrnd
001B75r 3  F0 03                beq *+5
001B77r 3  4C rr rr             jmp g00381
001B7Ar 3  A9 07                lda #7	; SPAWN
001B7Cr 3  85 rr                sta z80_c
001B7Er 3  A9 06                lda #6
001B80r 3  85 rr                sta z80_b
001B82r 3  20 rr rr             jsr spawn
001B85r 3  A9 02        g00381: lda #2
001B87r 3  C5 rr                cmp varrnd
001B89r 3  F0 03                beq *+5
001B8Br 3  4C rr rr             jmp g00421
001B8Er 3  A9 07                lda #7	; SPAWN
001B90r 3  85 rr                sta z80_c
001B92r 3  A9 07                lda #7
001B94r 3  85 rr                sta z80_b
001B96r 3  20 rr rr             jsr spawn
001B99r 3  A9 03        g00421: lda #3
001B9Br 3  C5 rr                cmp varrnd
001B9Dr 3  F0 03                beq *+5
001B9Fr 3  4C rr rr             jmp g00462
001BA2r 3  A9 07                lda #7	; SPAWN
001BA4r 3  85 rr                sta z80_c
001BA6r 3  A9 08                lda #8
001BA8r 3  85 rr                sta z80_b
001BAAr 3  20 rr rr             jsr spawn
001BADr 3  A9 03        g00462: lda #3
001BAFr 3  C5 rr                cmp varrnd
001BB1r 3  90 03                bcc *+5
001BB3r 3  4C rr rr             jmp g00502
001BB6r 3  A9 07                lda #7	; SPAWN
001BB8r 3  85 rr                sta z80_c
001BBAr 3  A9 03                lda #3
001BBCr 3  85 rr                sta z80_b
001BBEr 3  20 rr rr             jsr spawn
001BC1r 3  A9 FF        g00502: lda #255	; REMOVE
001BC3r 3  A0 05                ldy #5
001BC5r 3  91 rr                sta (z80_ix),y
001BC7r 3  A9 00        g00518: lda #0
001BC9r 3  A0 0B                ldy #11
001BCBr 3  D1 rr                cmp (z80_ix),y
001BCDr 3  F0 03                beq *+5
001BCFr 3  4C rr rr             jmp g00604
001BD2r 3  20 rr rr             jsr cangu	; CANGOUP
001BD5r 3  F0 03                beq :+
001BD7r 3  4C rr rr             jmp g00586
001BDAr 3               :
001BDAr 3  A0 08                ldy #8 		; SPRITEUP
001BDCr 3  B1 rr                lda (z80_ix),y
001BDEr 3  38                   sec
001BDFr 3  E9 02                sbc #2
001BE1r 3  91 rr                sta (z80_ix),y
001BE3r 3  4C rr rr             jmp g00600
001BE6r 3  A9 01        g00586: lda #1
001BE8r 3  A0 0B                ldy #11
001BEAr 3  91 rr                sta (z80_ix),y
001BECr 3  4C rr rr     g00600: jmp g00665
001BEFr 3  20 rr rr     g00604: jsr cangd	; CANGODOWN
001BF2r 3  F0 03                beq :+
001BF4r 3  4C rr rr             jmp g00651
001BF7r 3               :
001BF7r 3  A0 08                ldy #8 		; SPRITEDOWN
001BF9r 3  B1 rr                lda (z80_ix),y
001BFBr 3  18                   clc
001BFCr 3  69 02                adc #2
001BFEr 3  91 rr                sta (z80_ix),y
001C00r 3  4C rr rr             jmp g00665
001C03r 3  A9 00        g00651: lda #0
001C05r 3  A0 0B                ldy #11
001C07r 3  91 rr                sta (z80_ix),y
001C09r 3  A9 00        g00665: lda #0
001C0Br 3  C5 rr                cmp vara
001C0Dr 3  F0 03                beq *+5
001C0Fr 3  4C rr rr             jmp g00693
001C12r 3  A9 00                lda #0		; ANIMATE
001C14r 3  20 rr rr             jsr animsp
001C17r 3  60           g00693: rts
001C18r 3               evnt07:
001C18r 3  A9 00                lda #0
001C1Ar 3  C5 rr                cmp vara
001C1Cr 3  F0 03                beq *+5
001C1Er 3  4C rr rr             jmp h00030
001C21r 3  A9 00                lda #0		; ANIMATE
001C23r 3  20 rr rr             jsr animsp
001C26r 3  A9 04        h00030: lda #4
001C28r 3  A0 06                ldy #6
001C2Ar 3  D1 rr                cmp (z80_ix),y
001C2Cr 3  90 03                bcc *+5
001C2Er 3  4C rr rr             jmp h00113
001C31r 3  A9 64                lda #100
001C33r 3  C5 rr                cmp varm
001C35r 3  F0 03                beq *+5
001C37r 3  4C rr rr             jmp h00098
001C3Ar 3  A9 FF                lda #255	; REMOVE
001C3Cr 3  A0 05                ldy #5
001C3Er 3  91 rr                sta (z80_ix),y
001C40r 3  A9 00                lda #0
001C42r 3  85 rr                sta varm
001C44r 3  4C rr rr             jmp h00113
001C47r 3  A5 rr        h00098: lda varm
001C49r 3  18                   clc
001C4Ar 3  69 01                adc #1
001C4Cr 3  85 rr                sta varm
001C4Er 3  A9 02        h00113: lda #2
001C50r 3  A0 06                ldy #6
001C52r 3  D1 rr                cmp (z80_ix),y
001C54r 3  F0 03                beq *+5
001C56r 3  4C rr rr             jmp h00208
001C59r 3  A9 00                lda #0 	; COLLISION
001C5Br 3  85 rr                sta z80_b
001C5Dr 3  20 rr rr             jsr sktyp
001C60r 3  B0 03                bcs :+
001C62r 3  4C rr rr             jmp h00208
001C65r 3               :
001C65r 3  A9 FF                lda #255	; REMOVE
001C67r 3  A0 05                ldy #5
001C69r 3  91 rr                sta (z80_ix),y
001C6Br 3  A9 19                lda #<25		; SCORE
001C6Dr 3  85 rr                sta z80_l
001C6Fr 3  A9 00                lda #>25
001C71r 3  85 rr                sta z80_h
001C73r 3  20 rr rr             jsr addsc
001C76r 3  A9 01                lda #1
001C78r 3  85 rr                sta vard
001C7Ar 3  A9 03        h00208: lda #3
001C7Cr 3  A0 06                ldy #6
001C7Er 3  D1 rr                cmp (z80_ix),y
001C80r 3  F0 03                beq *+5
001C82r 3  4C rr rr             jmp h00291
001C85r 3  A9 32                lda #50
001C87r 3  C5 rr                cmp varm
001C89r 3  F0 03                beq *+5
001C8Br 3  4C rr rr             jmp h00276
001C8Er 3  A9 FF                lda #255	; REMOVE
001C90r 3  A0 05                ldy #5
001C92r 3  91 rr                sta (z80_ix),y
001C94r 3  A9 00                lda #0
001C96r 3  85 rr                sta varm
001C98r 3  4C rr rr             jmp h00291
001C9Br 3  A5 rr        h00276: lda varm
001C9Dr 3  18                   clc
001C9Er 3  69 01                adc #1
001CA0r 3  85 rr                sta varm
001CA2r 3  A9 04        h00291: lda #4
001CA4r 3  A0 06                ldy #6
001CA6r 3  D1 rr                cmp (z80_ix),y
001CA8r 3  F0 03                beq *+5
001CAAr 3  4C rr rr             jmp h00380
001CADr 3  A5 rr                lda varp
001CAFr 3  18                   clc
001CB0r 3  69 01                adc #1
001CB2r 3  85 rr                sta varp
001CB4r 3  A9 32                lda #50
001CB6r 3  C5 rr                cmp varp
001CB8r 3  90 03                bcc *+5
001CBAr 3  4C rr rr             jmp h00380
001CBDr 3  A9 FF                lda #255	; REMOVE
001CBFr 3  A0 05                ldy #5
001CC1r 3  91 rr                sta (z80_ix),y
001CC3r 3  A9 00                lda #0
001CC5r 3  85 rr                sta varp
001CC7r 3  A9 01                lda #1 		; KILL
001CC9r 3  85 rr                sta deadf
001CCBr 3  A9 05        h00380: lda #5
001CCDr 3  A0 06                ldy #6
001CCFr 3  D1 rr                cmp (z80_ix),y
001CD1r 3  F0 03                beq *+5
001CD3r 3  4C rr rr             jmp h00500
001CD6r 3  20 rr rr             jsr cangu	; CANGOUP
001CD9r 3  F0 03                beq :+
001CDBr 3  4C rr rr             jmp h00443
001CDEr 3               :
001CDEr 3  A0 08                ldy #8 		; SPRITEUP
001CE0r 3  B1 rr                lda (z80_ix),y
001CE2r 3  38                   sec
001CE3r 3  E9 02                sbc #2
001CE5r 3  91 rr                sta (z80_ix),y
001CE7r 3  A9 00        h00443: lda #0 	; COLLISION
001CE9r 3  85 rr                sta z80_b
001CEBr 3  20 rr rr             jsr sktyp
001CEEr 3  B0 03                bcs :+
001CF0r 3  4C rr rr             jmp h00500
001CF3r 3               :
001CF3r 3  A9 02                lda #2
001CF5r 3  85 rr                sta vard
001CF7r 3  A9 00                lda #0
001CF9r 3  85 rr                sta varm
001CFBr 3  A9 FF                lda #255	; REMOVE
001CFDr 3  A0 05                ldy #5
001CFFr 3  91 rr                sta (z80_ix),y
001D01r 3  A9 06        h00500: lda #6
001D03r 3  A0 06                ldy #6
001D05r 3  D1 rr                cmp (z80_ix),y
001D07r 3  F0 03                beq *+5
001D09r 3  4C rr rr             jmp h00603
001D0Cr 3  20 rr rr             jsr cangd	; CANGODOWN
001D0Fr 3  F0 03                beq :+
001D11r 3  4C rr rr             jmp h00546
001D14r 3               :
001D14r 3  20 rr rr             jsr ifall	; TABLEFALL
001D17r 3  A9 00        h00546: lda #0 	; COLLISION
001D19r 3  85 rr                sta z80_b
001D1Br 3  20 rr rr             jsr sktyp
001D1Er 3  B0 03                bcs :+
001D20r 3  4C rr rr             jmp h00603
001D23r 3               :
001D23r 3  A9 63                lda #99
001D25r 3  85 rr                sta varc
001D27r 3  A9 00                lda #0
001D29r 3  85 rr                sta varm
001D2Br 3  A9 FF                lda #255	; REMOVE
001D2Dr 3  A0 05                ldy #5
001D2Fr 3  91 rr                sta (z80_ix),y
001D31r 3  A9 07        h00603: lda #7
001D33r 3  A0 06                ldy #6
001D35r 3  D1 rr                cmp (z80_ix),y
001D37r 3  F0 03                beq *+5
001D39r 3  4C rr rr             jmp h00761
001D3Cr 3  20 rr rr             jsr cangd	; CANGODOWN
001D3Fr 3  F0 03                beq :+
001D41r 3  4C rr rr             jmp h00649
001D44r 3               :
001D44r 3  20 rr rr             jsr ifall	; TABLEFALL
001D47r 3  A9 00        h00649: lda #0 	; COLLISION
001D49r 3  85 rr                sta z80_b
001D4Br 3  20 rr rr             jsr sktyp
001D4Er 3  B0 03                bcs :+
001D50r 3  4C rr rr             jmp h00761
001D53r 3               :
001D53r 3  A9 08                lda #8
001D55r 3  C5 rr                cmp numlif
001D57r 3  B0 03                bcs *+5
001D59r 3  4C rr rr             jmp h00737
001D5Cr 3  A5 rr                lda numlif
001D5Er 3  18                   clc
001D5Fr 3  69 01                adc #1
001D61r 3  85 rr                sta numlif
001D63r 3  A9 0F                lda #15
001D65r 3  85 rr                sta chary
001D67r 3  A9 19                lda #25
001D69r 3  85 rr                sta charx
001D6Br 3  A5 rr                lda numlif	; DISPLAY
001D6Dr 3  20 rr rr             jsr disply
001D70r 3  A9 00        h00737: lda #0
001D72r 3  85 rr                sta varm
001D74r 3  A9 FF                lda #255	; REMOVE
001D76r 3  A0 05                ldy #5
001D78r 3  91 rr                sta (z80_ix),y
001D7Ar 3  A9 08        h00761: lda #8
001D7Cr 3  A0 06                ldy #6
001D7Er 3  D1 rr                cmp (z80_ix),y
001D80r 3  F0 03                beq *+5
001D82r 3  4C rr rr             jmp h00832
001D85r 3  A9 00                lda #0 	; COLLISION
001D87r 3  85 rr                sta z80_b
001D89r 3  20 rr rr             jsr sktyp
001D8Cr 3  B0 03                bcs :+
001D8Er 3  4C rr rr             jmp h00832
001D91r 3               :
001D91r 3  A9 00                lda #0
001D93r 3  85 rr                sta varc
001D95r 3  A9 FF                lda #255	; REMOVE
001D97r 3  A0 05                ldy #5
001D99r 3  91 rr                sta (z80_ix),y
001D9Br 3  4C rr rr     h00832: jmp grav
001D9Er 3               evnt08:
001D9Er 3  A9 01                lda #1
001DA0r 3  85 rr                sta varr
001DA2r 3  A9 00                lda #0 	; COLLISION
001DA4r 3  85 rr                sta z80_b
001DA6r 3  20 rr rr             jsr sktyp
001DA9r 3  B0 03                bcs :+
001DABr 3  4C rr rr             jmp i00043
001DAEr 3               :
001DAEr 3  A9 01                lda #1
001DB0r 3  85 rr                sta varp
001DB2r 3  A9 00        i00043: lda #0
001DB4r 3  A0 0A                ldy #10
001DB6r 3  D1 rr                cmp (z80_ix),y
001DB8r 3  F0 03                beq *+5
001DBAr 3  4C rr rr             jmp i00178
001DBDr 3  20 rr rr             jsr cangr	; CANGORIGHT
001DC0r 3  F0 03                beq :+
001DC2r 3  4C rr rr             jmp i00150
001DC5r 3               :
001DC5r 3  A9 00                lda #0		; ANIMATE
001DC7r 3  20 rr rr             jsr animsp
001DCAr 3  A0 09                ldy #9 		; SPRITERIGHT
001DCCr 3  B1 rr                lda (z80_ix),y
001DCEr 3  18                   clc
001DCFr 3  69 02                adc #2
001DD1r 3  91 rr                sta (z80_ix),y
001DD3r 3  A0 09                ldy #9 		; SPRITERIGHT
001DD5r 3  B1 rr                lda (z80_ix),y
001DD7r 3  18                   clc
001DD8r 3  69 02                adc #2
001DDAr 3  91 rr                sta (z80_ix),y
001DDCr 3  4C rr rr             jmp i00174
001DDFr 3  A9 00        i00150: lda #0
001DE1r 3  85 rr                sta varr
001DE3r 3  A9 FF                lda #255	; REMOVE
001DE5r 3  A0 05                ldy #5
001DE7r 3  91 rr                sta (z80_ix),y
001DE9r 3  4C rr rr     i00174: jmp i00286
001DECr 3  20 rr rr     i00178: jsr cangl	; CANGOLEFT
001DEFr 3  F0 03                beq :+
001DF1r 3  4C rr rr             jmp i00262
001DF4r 3               :
001DF4r 3  A9 00                lda #0		; ANIMATE
001DF6r 3  20 rr rr             jsr animsp
001DF9r 3  A0 09                ldy #9 		; SPRITELEFT
001DFBr 3  B1 rr                lda (z80_ix),y
001DFDr 3  38                   sec
001DFEr 3  E9 02                sbc #2
001E00r 3  91 rr                sta (z80_ix),y
001E02r 3  A0 09                ldy #9 		; SPRITELEFT
001E04r 3  B1 rr                lda (z80_ix),y
001E06r 3  38                   sec
001E07r 3  E9 02                sbc #2
001E09r 3  91 rr                sta (z80_ix),y
001E0Br 3  4C rr rr             jmp i00286
001E0Er 3  A9 00        i00262: lda #0
001E10r 3  85 rr                sta varr
001E12r 3  A9 FF                lda #255	; REMOVE
001E14r 3  A0 05                ldy #5
001E16r 3  91 rr                sta (z80_ix),y
001E18r 3  60           i00286: rts
001E19r 3               evnt09:
001E19r 3  A9 02                lda #2
001E1Br 3  A0 05                ldy #5
001E1Dr 3  D1 rr                cmp (z80_ix),y
001E1Fr 3  F0 03                beq *+5
001E21r 3  4C rr rr             jmp j00039
001E24r 3  A5 rr                lda varg
001E26r 3  18                   clc
001E27r 3  69 01                adc #1
001E29r 3  85 rr                sta varg
001E2Br 3  A9 03        j00039: lda #3
001E2Dr 3  A0 05                ldy #5
001E2Fr 3  D1 rr                cmp (z80_ix),y
001E31r 3  F0 03                beq *+5
001E33r 3  4C rr rr             jmp j00076
001E36r 3  A5 rr                lda varg
001E38r 3  18                   clc
001E39r 3  69 01                adc #1
001E3Br 3  85 rr                sta varg
001E3Dr 3  A9 04        j00076: lda #4
001E3Fr 3  A0 05                ldy #5
001E41r 3  D1 rr                cmp (z80_ix),y
001E43r 3  F0 03                beq *+5
001E45r 3  4C rr rr             jmp j00113
001E48r 3  A5 rr                lda varg
001E4Ar 3  18                   clc
001E4Br 3  69 01                adc #1
001E4Dr 3  85 rr                sta varg
001E4Fr 3  A9 05        j00113: lda #5
001E51r 3  A0 05                ldy #5
001E53r 3  D1 rr                cmp (z80_ix),y
001E55r 3  F0 03                beq *+5
001E57r 3  4C rr rr             jmp j00151
001E5Ar 3  A5 rr                lda varg
001E5Cr 3  18                   clc
001E5Dr 3  69 01                adc #1
001E5Fr 3  85 rr                sta varg
001E61r 3  A9 06        j00151: lda #6
001E63r 3  A0 05                ldy #5
001E65r 3  D1 rr                cmp (z80_ix),y
001E67r 3  F0 03                beq *+5
001E69r 3  4C rr rr             jmp j00188
001E6Cr 3  A5 rr                lda varg
001E6Er 3  18                   clc
001E6Fr 3  69 01                adc #1
001E71r 3  85 rr                sta varg
001E73r 3  60           j00188: rts
001E74r 3               evnt10:
001E74r 3  A9 04                lda #4
001E76r 3  C5 rr                cmp vara
001E78r 3  F0 03                beq *+5
001E7Ar 3  4C rr rr             jmp k00031
001E7Dr 3  A9 00                lda #0
001E7Fr 3  85 rr                sta vara
001E81r 3  4C rr rr             jmp k00046
001E84r 3  A5 rr        k00031: lda vara
001E86r 3  18                   clc
001E87r 3  69 01                adc #1
001E89r 3  85 rr                sta vara
001E8Br 3  A9 10        k00046: lda #16
001E8Dr 3  C5 rr                cmp varf
001E8Fr 3  F0 03                beq *+5
001E91r 3  4C rr rr             jmp k00108
001E94r 3  A9 00                lda #0
001E96r 3  C5 rr                cmp varc
001E98r 3  90 03                bcc *+5
001E9Ar 3  4C rr rr             jmp k00095
001E9Dr 3  A5 rr                lda varc
001E9Fr 3  38                   sec
001EA0r 3  E9 01                sbc #1
001EA2r 3  85 rr                sta varc
001EA4r 3  A9 01        k00095: lda #1
001EA6r 3  85 rr                sta varf
001EA8r 3  4C rr rr             jmp k00123
001EABr 3  A5 rr        k00108: lda varf
001EADr 3  18                   clc
001EAEr 3  69 01                adc #1
001EB0r 3  85 rr                sta varf
001EB2r 3  A9 0F        k00123: lda #15
001EB4r 3  85 rr                sta chary
001EB6r 3  A9 1D                lda #29
001EB8r 3  85 rr                sta charx
001EBAr 3  A9 09                lda #9
001EBCr 3  C5 rr                cmp varc
001EBEr 3  B0 03                bcs *+5
001EC0r 3  4C rr rr             jmp k00201
001EC3r 3  A9 00                lda #0  	; MESSAGE
001EC5r 3  20 rr rr             jsr dmsg
001EC8r 3  A9 0F                lda #15
001ECAr 3  85 rr                sta chary
001ECCr 3  A9 1E                lda #30
001ECEr 3  85 rr                sta charx
001ED0r 3  A5 rr                lda varc	; DISPLAY
001ED2r 3  20 rr rr             jsr disply
001ED5r 3  4C rr rr             jmp k00213
001ED8r 3  A5 rr        k00201: lda varc	; DISPLAY
001EDAr 3  20 rr rr             jsr disply
001EDDr 3  A9 12        k00213: lda #18
001EDFr 3  85 rr                sta chary
001EE1r 3  A9 19                lda #25
001EE3r 3  85 rr                sta charx
001EE5r 3  A0 00                ldy #0		; SHOWSCORE
001EE7r 3  A9 06                lda #6
001EE9r 3  85 rr                sta z80_b
001EEBr 3  20 rr rr             jsr dscor
001EEEr 3  A9 00                lda #0
001EF0r 3  C5 rr                cmp varg
001EF2r 3  F0 03                beq *+5
001EF4r 3  4C rr rr             jmp k00404
001EF7r 3  A5 rr                lda varc
001EF9r 3  18                   clc
001EFAr 3  69 01                adc #1
001EFCr 3  85 rr                sta varc
001EFEr 3  A9 0A                lda #10 	; REPEAT
001F00r 3  85 rr                sta loopa
001F02r 3  A9 0A        k00293: lda #<10		; SCORE
001F04r 3  85 rr                sta z80_l
001F06r 3  A9 00                lda #>10
001F08r 3  85 rr                sta z80_h
001F0Ar 3  20 rr rr             jsr addsc
001F0Dr 3  C6 rr                dec loopa	; ENDREPEAT
001F0Fr 3  F0 03                beq :+
001F11r 3  4C rr rr             jmp k00293
001F14r 3               :
001F14r 3  A9 14                lda #20 	; DELAY
001F16r 3  20 rr rr             jsr delay
001F19r 3  A5 rr                lda varn
001F1Br 3  18                   clc
001F1Cr 3  69 01                adc #1
001F1Er 3  85 rr                sta varn
001F20r 3  A9 0D                lda #13
001F22r 3  C5 rr                cmp varn
001F24r 3  D0 03                bne *+5
001F26r 3  4C rr rr             jmp k00393
001F29r 3  A9 01                lda #1	; NEXTLEVEL
001F2Br 3  85 rr                sta nexlev
001F2Dr 3  4C rr rr             jmp k00404
001F30r 3  A9 01        k00393: lda #1		; ENDGAME
001F32r 3  85 rr                sta gamwon
001F34r 3  60           k00404: rts
001F35r 3               evnt11:
001F35r 3  60                   rts
001F36r 3               evnt12:
001F36r 3  A9 00                lda #0 	; PAPER
001F38r 3  0A                   asl a
001F39r 3  0A                   asl a
001F3Ar 3  0A                   asl a
001F3Br 3  0A                   asl a
001F3Cr 3  85 rr                sta tmp
001F3Er 3  AD 0F 90             lda RegF
001F41r 3  29 0F                and #%00001111
001F43r 3  05 rr                ora tmp
001F45r 3  8D 0F 90             sta RegF
001F48r 3  A9 01                lda #1 	; INK
001F4Ar 3  8D rr rr             sta fontcol
001F4Dr 3  20 rr rr             jsr cls		; CLS
001F50r 3  A9 05                lda #5
001F52r 3  85 rr                sta numlif
001F54r 3  A9 01                lda #1
001F56r 3  85 rr                sta varn
001F58r 3  A9 05                lda #5		; AT
001F5Ar 3  85 rr                sta chary
001F5Cr 3  A9 01                lda #1
001F5Er 3  85 rr                sta charx
001F60r 3  A9 02                lda #2		; PRINT
001F62r 3  20 rr rr             jsr dmsg
001F65r 3  A9 07                lda #7		; AT
001F67r 3  85 rr                sta chary
001F69r 3  A9 09                lda #9
001F6Br 3  85 rr                sta charx
001F6Dr 3  A9 03                lda #3		; PRINT
001F6Fr 3  20 rr rr             jsr dmsg
001F72r 3  A9 0A                lda #10		; AT
001F74r 3  85 rr                sta chary
001F76r 3  A9 02                lda #2
001F78r 3  85 rr                sta charx
001F7Ar 3  A9 04                lda #4		; PRINT
001F7Cr 3  20 rr rr             jsr dmsg
001F7Fr 3  A9 0C                lda #12		; AT
001F81r 3  85 rr                sta chary
001F83r 3  A9 02                lda #2
001F85r 3  85 rr                sta charx
001F87r 3  A9 05                lda #5		; PRINT
001F89r 3  20 rr rr             jsr dmsg
001F8Cr 3  A9 0E                lda #14		; AT
001F8Er 3  85 rr                sta chary
001F90r 3  A9 02                lda #2
001F92r 3  85 rr                sta charx
001F94r 3  A9 06                lda #6		; PRINT
001F96r 3  20 rr rr             jsr dmsg
001F99r 3               
001F99r 3               rtcon:			; CONTROLMENU
001F99r 3  20 rr rr             jsr vsync
001F9Cr 3  A9 00                lda #0
001F9Er 3  85 rr                sta contrl
001FA0r 3  AD rr rr             lda keys+7
001FA3r 3  20 rr rr             jsr ktest
001FA6r 3  90 0C                bcc rtcon1
001FA8r 3  A9 01                lda #1
001FAAr 3  85 rr                sta contrl
001FACr 3  AD rr rr             lda keys+8
001FAFr 3  20 rr rr             jsr ktest
001FB2r 3  B0 E5                bcs rtcon
001FB4r 3                       rtcon1:
001FB4r 3  60                   rts
001FB5r 3               evnt13:
001FB5r 3  A5 rr                lda varo
001FB7r 3  85 rr                sta scno
001FB9r 3  20 rr rr             jsr nwscr
001FBCr 3  A9 01                lda #1
001FBEr 3  85 rr                sta varn
001FC0r 3  60                   rts
001FC1r 3               evnt14:
001FC1r 3  A9 00                lda #0
001FC3r 3  85 rr                sta vara
001FC5r 3  A9 00                lda #0
001FC7r 3  85 rr                sta varb
001FC9r 3  A9 63                lda #99
001FCBr 3  85 rr                sta varc
001FCDr 3  A9 00                lda #0
001FCFr 3  85 rr                sta vard
001FD1r 3  A9 01                lda #1
001FD3r 3  85 rr                sta vare
001FD5r 3  A9 01                lda #1
001FD7r 3  85 rr                sta varf
001FD9r 3  A9 00                lda #0
001FDBr 3  85 rr                sta varg
001FDDr 3  A9 00                lda #0
001FDFr 3  85 rr                sta varh
001FE1r 3  A9 00                lda #0
001FE3r 3  85 rr                sta vari
001FE5r 3  A9 00                lda #0
001FE7r 3  85 rr                sta varj
001FE9r 3  A9 00                lda #0
001FEBr 3  85 rr                sta vark
001FEDr 3  A9 00                lda #0
001FEFr 3  85 rr                sta varl
001FF1r 3  A9 00                lda #0
001FF3r 3  85 rr                sta varm
001FF5r 3  A9 00                lda #0
001FF7r 3  85 rr                sta varp
001FF9r 3  A9 00                lda #0
001FFBr 3  85 rr                sta varr
001FFDr 3  A9 0B                lda #11
001FFFr 3  85 rr                sta chary
002001r 3  A9 1A                lda #26
002003r 3  85 rr                sta charx
002005r 3  A9 01                lda #1  	; MESSAGE
002007r 3  20 rr rr             jsr dmsg
00200Ar 3  A9 0B                lda #11
00200Cr 3  85 rr                sta chary
00200Er 3  A9 1C                lda #28
002010r 3  85 rr                sta charx
002012r 3  A5 rr                lda varn	; DISPLAY
002014r 3  20 rr rr             jsr disply
002017r 3  A9 0F                lda #15
002019r 3  85 rr                sta chary
00201Br 3  A9 19                lda #25
00201Dr 3  85 rr                sta charx
00201Fr 3  A5 rr                lda numlif	; DISPLAY
002021r 3  20 rr rr             jsr disply
002024r 3  A9 00                lda #0
002026r 3  C5 rr                cmp scno
002028r 3  F0 03                beq *+5
00202Ar 3  4C rr rr             jmp o00232
00202Dr 3  A9 06                lda #6
00202Fr 3  85 rr                sta varq
002031r 3  A9 01        o00232: lda #1
002033r 3  C5 rr                cmp scno
002035r 3  F0 03                beq *+5
002037r 3  4C rr rr             jmp o00257
00203Ar 3  A9 00                lda #0
00203Cr 3  85 rr                sta varq
00203Er 3  A9 02        o00257: lda #2
002040r 3  C5 rr                cmp scno
002042r 3  F0 03                beq *+5
002044r 3  4C rr rr             jmp o00282
002047r 3  A9 05                lda #5
002049r 3  85 rr                sta varq
00204Br 3  A9 03        o00282: lda #3
00204Dr 3  C5 rr                cmp scno
00204Fr 3  F0 03                beq *+5
002051r 3  4C rr rr             jmp o00306
002054r 3  A9 01                lda #1
002056r 3  85 rr                sta varq
002058r 3  A9 04        o00306: lda #4
00205Ar 3  C5 rr                cmp scno
00205Cr 3  F0 03                beq *+5
00205Er 3  4C rr rr             jmp o00331
002061r 3  A9 00                lda #0
002063r 3  85 rr                sta varq
002065r 3  A9 05        o00331: lda #5
002067r 3  C5 rr                cmp scno
002069r 3  F0 03                beq *+5
00206Br 3  4C rr rr             jmp o00356
00206Er 3  A9 07                lda #7
002070r 3  85 rr                sta varq
002072r 3  A9 06        o00356: lda #6
002074r 3  C5 rr                cmp scno
002076r 3  F0 03                beq *+5
002078r 3  4C rr rr             jmp o00381
00207Br 3  A9 00                lda #0
00207Dr 3  85 rr                sta varq
00207Fr 3  A9 07        o00381: lda #7
002081r 3  C5 rr                cmp scno
002083r 3  F0 03                beq *+5
002085r 3  4C rr rr             jmp o00405
002088r 3  A9 00                lda #0
00208Ar 3  85 rr                sta varq
00208Cr 3  A9 08        o00405: lda #8
00208Er 3  C5 rr                cmp scno
002090r 3  F0 03                beq *+5
002092r 3  4C rr rr             jmp o00430
002095r 3  A9 07                lda #7
002097r 3  85 rr                sta varq
002099r 3  A9 09        o00430: lda #9
00209Br 3  C5 rr                cmp scno
00209Dr 3  F0 03                beq *+5
00209Fr 3  4C rr rr             jmp o00455
0020A2r 3  A9 07                lda #7
0020A4r 3  85 rr                sta varq
0020A6r 3  A9 0A        o00455: lda #10
0020A8r 3  C5 rr                cmp scno
0020AAr 3  F0 03                beq *+5
0020ACr 3  4C rr rr             jmp o00480
0020AFr 3  A9 07                lda #7
0020B1r 3  85 rr                sta varq
0020B3r 3  A9 0B        o00480: lda #11
0020B5r 3  C5 rr                cmp scno
0020B7r 3  F0 03                beq *+5
0020B9r 3  4C rr rr             jmp o00505
0020BCr 3  A9 07                lda #7
0020BEr 3  85 rr                sta varq
0020C0r 3  60           o00505: rts
0020C1r 3               evnt15:
0020C1r 3  60                   rts
0020C2r 3               evnt16:
0020C2r 3  A9 14                lda #20 	; DELAY
0020C4r 3  20 rr rr             jsr delay
0020C7r 3  A5 rr                lda numlif
0020C9r 3  38                   sec
0020CAr 3  E9 01                sbc #1
0020CCr 3  85 rr                sta numlif
0020CEr 3  60                   rts
0020CFr 3               evnt17:
0020CFr 3  60                   rts
0020D0r 3               evnt18:
0020D0r 3  A9 00                lda #0
0020D2r 3  C5 rr                cmp varz
0020D4r 3  F0 03                beq *+5
0020D6r 3  4C rr rr             jmp s00312
0020D9r 3  20 rr rr             jsr cls		; CLS
0020DCr 3  A9 FA                lda #<250		; SCORE
0020DEr 3  85 rr                sta z80_l
0020E0r 3  A9 00                lda #>250
0020E2r 3  85 rr                sta z80_h
0020E4r 3  20 rr rr             jsr addsc
0020E7r 3  A9 FA                lda #<250		; SCORE
0020E9r 3  85 rr                sta z80_l
0020EBr 3  A9 00                lda #>250
0020EDr 3  85 rr                sta z80_h
0020EFr 3  20 rr rr             jsr addsc
0020F2r 3  A9 FA                lda #<250		; SCORE
0020F4r 3  85 rr                sta z80_l
0020F6r 3  A9 00                lda #>250
0020F8r 3  85 rr                sta z80_h
0020FAr 3  20 rr rr             jsr addsc
0020FDr 3  A9 FA                lda #<250		; SCORE
0020FFr 3  85 rr                sta z80_l
002101r 3  A9 00                lda #>250
002103r 3  85 rr                sta z80_h
002105r 3  20 rr rr             jsr addsc
002108r 3  A9 12                lda #18
00210Ar 3  85 rr                sta chary
00210Cr 3  A9 19                lda #25
00210Er 3  85 rr                sta charx
002110r 3  A0 00                ldy #0		; SHOWSCORE
002112r 3  A9 06                lda #6
002114r 3  85 rr                sta z80_b
002116r 3  20 rr rr             jsr dscor
002119r 3  A9 08                lda #8		; AT
00211Br 3  85 rr                sta chary
00211Dr 3  A9 01                lda #1
00211Fr 3  85 rr                sta charx
002121r 3  A9 07                lda #7		; PRINT
002123r 3  20 rr rr             jsr dmsg
002126r 3  A9 0A                lda #10		; AT
002128r 3  85 rr                sta chary
00212Ar 3  A9 01                lda #1
00212Cr 3  85 rr                sta charx
00212Er 3  A9 08                lda #8		; PRINT
002130r 3  20 rr rr             jsr dmsg
002133r 3  A9 0C                lda #12		; AT
002135r 3  85 rr                sta chary
002137r 3  A9 01                lda #1
002139r 3  85 rr                sta charx
00213Br 3  A9 09                lda #9		; PRINT
00213Dr 3  20 rr rr             jsr dmsg
002140r 3  A9 0E                lda #14		; AT
002142r 3  85 rr                sta chary
002144r 3  A9 01                lda #1
002146r 3  85 rr                sta charx
002148r 3  A9 0A                lda #10		; PRINT
00214Ar 3  20 rr rr             jsr dmsg
00214Dr 3  A0 00                ldy #0		; SHOWSCORE
00214Fr 3  A9 06                lda #6
002151r 3  85 rr                sta z80_b
002153r 3  20 rr rr             jsr dscor
002156r 3  20 rr rr             jsr prskey	; WAITKEY
002159r 3  A9 01                lda #1		; ENDGAME
00215Br 3  85 rr                sta gamwon
00215Dr 3  60           s00312: rts
00215Er 3               evnt19:
00215Er 3  60                   rts
00215Fr 3               evnt20:
00215Fr 3  60                   rts
002160r 3  60           ptcusr: rts
002161r 3               data_start:
002161r 3               msgdat:
002161r 3  23 8A                .byte "#",138
002163r 3  32 2D 8A             .byte "2-",138
002166r 3  46 75 6E 6B          .byte "Funky Fungus Reloade",228
00216Ar 3  79 20 46 75  
00216Er 3  6E 67 75 73  
00217Br 3  57 6F 72 6C          .byte "World ",178
00217Fr 3  64 20 B2     
002182r 3  31 20 2D 20          .byte "1 - KEYBOAR",196
002186r 3  4B 45 59 42  
00218Ar 3  4F 41 52 C4  
00218Er 3  32 20 2D 20          .byte "2 - JOYKE",217
002192r 3  4A 4F 59 4B  
002196r 3  45 D9        
002198r 3  32 20 2D 20          .byte "2 - JOYMM",195
00219Cr 3  4A 4F 59 4D  
0021A0r 3  4D C3        
0021A2r 3  4F 4B 21 20          .byte "OK! YOU ENDED WORLD",178
0021A6r 3  59 4F 55 20  
0021AAr 3  45 4E 44 45  
0021B6r 3  4E 4F 57 20          .byte "NOW YOU CAN TR",217
0021BAr 3  59 4F 55 20  
0021BEr 3  43 41 4E 20  
0021C5r 3  54 4F 20 50          .byte "TO PLAY WORLD ",179
0021C9r 3  4C 41 59 20  
0021CDr 3  57 4F 52 4C  
0021D4r 3  46 49 4E 41          .byte "FINAL SCORE:",160
0021D8r 3  4C 20 53 43  
0021DCr 3  4F 52 45 3A  
0021E1r 3               nummsg:
0021E1r 3  0B                   .byte 11
0021E2r 3               chgfx:
0021E2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0021E6r 3  00 00 00 00  
0021EAr 3  C3 87 0F 1E          .byte 195,135,15,30,60,120,240,225
0021EEr 3  3C 78 F0 E1  
0021F2r 3  00 FF 55 AA          .byte 0,255,85,170,0,0,255,0
0021F6r 3  00 00 FF 00  
0021FAr 3  00 E4 52 A2          .byte 0,228,82,162,82,98,82,98
0021FEr 3  52 62 52 62  
002202r 3  52 62 52 62          .byte 82,98,82,98,82,98,82,98
002206r 3  52 62 52 62  
00220Ar 3  52 E2 52 A2          .byte 82,226,82,162,2,4,248,0
00220Er 3  02 04 F8 00  
002212r 3  50 6F 55 6A          .byte 80,111,85,106,64,32,31,0
002216r 3  40 20 1F 00  
00221Ar 3  00 1F 35 6A          .byte 0,31,53,106,80,96,81,98
00221Er 3  50 60 51 62  
002222r 3  B0 B0 B0 B0          .byte 176,176,176,176,79,79,79,79
002226r 3  4F 4F 4F 4F  
00222Ar 3  F0 F0 F0 F0          .byte 240,240,240,240,15,15,15,15
00222Er 3  0F 0F 0F 0F  
002232r 3  F2 F2 F2 F2          .byte 242,242,242,242,13,13,13,13
002236r 3  0D 0D 0D 0D  
00223Ar 3  A5 5A A5 42          .byte 165,90,165,66,66,165,90,165
00223Er 3  42 A5 5A A5  
002242r 3  A5 5A A5 42          .byte 165,90,165,66,66,165,90,165
002246r 3  42 A5 5A A5  
00224Ar 3  A5 5A A5 42          .byte 165,90,165,66,66,165,90,165
00224Er 3  42 A5 5A A5  
002252r 3  A5 5A A5 42          .byte 165,90,165,66,66,165,90,165
002256r 3  42 A5 5A A5  
00225Ar 3  00 FF 00 55          .byte 0,255,0,85,170,85,255,0
00225Er 3  AA 55 FF 00  
002262r 3  00 55 57 10          .byte 0,85,87,16,87,82,16,87
002266r 3  57 52 10 57  
00226Ar 3  00 4A AA 08          .byte 0,74,170,8,74,170,8,106
00226Er 3  4A AA 08 6A  
002272r 3  00 55 2A 55          .byte 0,85,42,85,42,85,42,0
002276r 3  2A 55 2A 00  
00227Ar 3  00 54 AA 54          .byte 0,84,170,84,170,84,170,0
00227Er 3  AA 54 AA 00  
002282r 3  00 55 57 10          .byte 0,85,87,16,87,82,16,87
002286r 3  57 52 10 57  
00228Ar 3  00 4A AA 08          .byte 0,74,170,8,74,170,8,106
00228Er 3  4A AA 08 6A  
002292r 3  00 55 2A 55          .byte 0,85,42,85,42,85,42,0
002296r 3  2A 55 2A 00  
00229Ar 3  00 54 AA 54          .byte 0,84,170,84,170,84,170,0
00229Er 3  AA 54 AA 00  
0022A2r 3  FF 82 20 00          .byte 255,130,32,0,1,128,5,170
0022A6r 3  01 80 05 AA  
0022AAr 3  FF 2B 45 0B          .byte 255,43,69,11,5,11,85,171
0022AEr 3  05 0B 55 AB  
0022B2r 3  FF 85 22 05          .byte 255,133,34,5,18,5,170,85
0022B6r 3  12 05 AA 55  
0022BAr 3  00 3C 7A 6C          .byte 0,60,122,108,58,124,42,20
0022BEr 3  3A 7C 2A 14  
0022C2r 3  FF 55 AA 14          .byte 255,85,170,20,34,8,64,18
0022C6r 3  22 08 40 12  
0022CAr 3  1C 38 CA 85          .byte 28,56,202,133,163,91,38,30
0022CEr 3  A3 5B 26 1E  
0022D2r 3  16 29 D0 22          .byte 22,41,208,34,237,18,76,172
0022D6r 3  ED 12 4C AC  
0022DAr 3  3F 40 9C A2          .byte 63,64,156,162,170,154,66,60
0022DEr 3  AA 9A 42 3C  
0022E2r 3  FF 00 00 FF          .byte 255,0,0,255,170,85,0,255
0022E6r 3  AA 55 00 FF  
0022EAr 3  FC 02 39 45          .byte 252,2,57,69,85,89,66,60
0022EEr 3  55 59 42 3C  
0022F2r 3  FF 80 91 AA          .byte 255,128,145,170,170,170,170,170
0022F6r 3  AA AA AA AA  
0022FAr 3  FF 03 15 AB          .byte 255,3,21,171,173,171,173,171
0022FEr 3  AD AB AD AB  
002302r 3  55 55 55 55          .byte 85,85,85,85,85,85,85,85
002306r 3  55 55 55 55  
00230Ar 3  AD AB AD AB          .byte 173,171,173,171,173,171,173,171
00230Er 3  AD AB AD AB  
002312r 3  00 FF 00 7F          .byte 0,255,0,127,245,106,0,255
002316r 3  F5 6A 00 FF  
00231Ar 3  00 FF 00 FF          .byte 0,255,0,255,85,170,0,255
00231Er 3  55 AA 00 FF  
002322r 3  00 FF 00 FE          .byte 0,255,0,254,85,170,0,255
002326r 3  55 AA 00 FF  
00232Ar 3  1F 6F BF FD          .byte 31,111,191,253,234,85,40,0
00232Er 3  EA 55 28 00  
002332r 3  70 FB D7 FF          .byte 112,251,215,255,234,85,42,0
002336r 3  EA 55 2A 00  
00233Ar 3  3C DF F7 FF          .byte 60,223,247,255,234,85,160,0
00233Er 3  EA 55 A0 00  
002342r 3  30 FE EF FB          .byte 48,254,239,251,84,168,80,0
002346r 3  54 A8 50 00  
00234Ar 3  FF FF C0 DF          .byte 255,255,192,223,208,208,208,208
00234Er 3  D0 D0 D0 D0  
002352r 3  FF FF 03 FB          .byte 255,255,3,251,11,11,11,11
002356r 3  0B 0B 0B 0B  
00235Ar 3  D0 D0 D0 D0          .byte 208,208,208,208,223,192,255,255
00235Er 3  DF C0 FF FF  
002362r 3  0B 0B 0B 0B          .byte 11,11,11,11,251,3,255,255
002366r 3  FB 03 FF FF  
00236Ar 3  FE D4 A8 00          .byte 254,212,168,0,239,77,138,0
00236Er 3  EF 4D 8A 00  
002372r 3  7F 01 01 00          .byte 127,1,1,0,247,16,16,0
002376r 3  F7 10 10 00  
00237Ar 3  80 3F 60 4A          .byte 128,63,96,74,85,106,63,128
00237Er 3  55 6A 3F 80  
002382r 3  00 FF 00 AA          .byte 0,255,0,170,85,170,255,0
002386r 3  55 AA FF 00  
00238Ar 3  01 FC 06 AA          .byte 1,252,6,170,86,174,252,1
00238Er 3  56 AE FC 01  
002392r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002396r 3  00 00 00 00  
00239Ar 3  00 7F 44 58          .byte 0,127,68,88,80,96,64,64
00239Er 3  50 60 40 40  
0023A2r 3  FF 01 DD 25          .byte 255,1,221,37,21,9,5,5
0023A6r 3  15 09 05 05  
0023AAr 3  A0 A0 90 A8          .byte 160,160,144,168,164,187,128,255
0023AEr 3  A4 BB 80 FF  
0023B2r 3  02 02 06 0A          .byte 2,2,6,10,26,34,254,0
0023B6r 3  1A 22 FE 00  
0023BAr 3  C0 84 06 06          .byte 192,132,6,6,6,122,60,0
0023BEr 3  06 7A 3C 00  
0023C2r 3  03 21 60 60          .byte 3,33,96,96,96,94,60,0
0023C6r 3  60 5E 3C 00  
0023CAr 3  00 3C 7A 06          .byte 0,60,122,6,6,6,132,192
0023CEr 3  06 06 84 C0  
0023D2r 3  00 3C 5E 60          .byte 0,60,94,96,96,96,33,3
0023D6r 3  60 60 21 03  
0023DAr 3  00 BD 42 B9          .byte 0,189,66,185,33,66,189,0
0023DEr 3  21 42 BD 00  
0023E2r 3  00 10 3C 7C          .byte 0,16,60,124,60,16,0,0
0023E6r 3  3C 10 00 00  
0023EAr 3  00 10 38 7C          .byte 0,16,56,124,56,56,0,0
0023EEr 3  38 38 00 00  
0023F2r 3  00 FF FF AA          .byte 0,255,255,170,85,170,0,0
0023F6r 3  55 AA 00 00  
0023FAr 3  00 FF FF AA          .byte 0,255,255,170,85,170,0,0
0023FEr 3  55 AA 00 00  
002402r 3  00 7F 40 54          .byte 0,127,64,84,74,84,74,64
002406r 3  4A 54 4A 40  
00240Ar 3  00 7F 40 54          .byte 0,127,64,84,74,84,74,64
00240Er 3  4A 54 4A 40  
002412r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002416r 3  00 00 00 00  
00241Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00241Er 3  00 00 00 00  
002422r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002426r 3  00 00 00 00  
00242Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00242Er 3  00 00 00 00  
002432r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002436r 3  00 00 00 00  
00243Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00243Er 3  00 00 00 00  
002442r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002446r 3  00 00 00 00  
00244Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00244Er 3  00 00 00 00  
002452r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002456r 3  00 00 00 00  
00245Ar 3  CC 66 33 99          .byte 204,102,51,153,204,102,51,153
00245Er 3  CC 66 33 99  
002462r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002466r 3  00 00 00 00  
00246Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00246Er 3  00 00 00 00  
002472r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002476r 3  00 00 00 00  
00247Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00247Er 3  00 00 00 00  
002482r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002486r 3  00 00 00 00  
00248Ar 3  FF 00 FF 00          .byte 255,0,255,0,170,85,170,255
00248Er 3  AA 55 AA FF  
002492r 3  00 7F 6A 55          .byte 0,127,106,85,106,85,106,0
002496r 3  6A 55 6A 00  
00249Ar 3  00 FF AA 55          .byte 0,255,170,85,170,85,170,0
00249Er 3  AA 55 AA 00  
0024A2r 3  00 D4 A0 40          .byte 0,212,160,64,160,64,160,0
0024A6r 3  A0 40 A0 00  
0024AAr 3  00 FF 00 55          .byte 0,255,0,85,170,85,255,0
0024AEr 3  AA 55 FF 00  
0024B2r 3  00 FF 00 FF          .byte 0,255,0,255,85,170,85,0
0024B6r 3  55 AA 55 00  
0024BAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0024BEr 3  00 00 00 00  
0024C2r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0024C6r 3  00 00 00 00  
0024CAr 3  FE D4 A8 00          .byte 254,212,168,0,239,77,138,0
0024CEr 3  EF 4D 8A 00  
0024D2r 3  00 3C 34 34          .byte 0,60,52,52,114,52,24,0
0024D6r 3  72 34 18 00  
0024DAr 3  00 7F 62 5D          .byte 0,127,98,93,82,84,105,82
0024DEr 3  52 54 69 52  
0024E2r 3  00 FE 46 BA          .byte 0,254,70,186,74,42,150,74
0024E6r 3  4A 2A 96 4A  
0024EAr 3  52 69 54 52          .byte 82,105,84,82,93,98,127,0
0024EEr 3  5D 62 7F 00  
0024F2r 3  4A 96 2A 4A          .byte 74,150,42,74,186,70,254,0
0024F6r 3  BA 46 FE 00  
0024FAr 3  00 FF 00 FF          .byte 0,255,0,255,85,170,85,0
0024FEr 3  55 AA 55 00  
002502r 3  F7 10 10 00          .byte 247,16,16,0,127,1,1,0
002506r 3  7F 01 01 00  
00250Ar 3               bCol:
00250Ar 3  01                   .byte 1
00250Br 3  01                   .byte 1
00250Cr 3  01                   .byte 1
00250Dr 3  01                   .byte 1
00250Er 3  01                   .byte 1
00250Fr 3  01                   .byte 1
002510r 3  01                   .byte 1
002511r 3  01                   .byte 1
002512r 3  01                   .byte 1
002513r 3  01                   .byte 1
002514r 3  01                   .byte 1
002515r 3  01                   .byte 1
002516r 3  01                   .byte 1
002517r 3  01                   .byte 1
002518r 3  01                   .byte 1
002519r 3  01                   .byte 1
00251Ar 3  01                   .byte 1
00251Br 3  01                   .byte 1
00251Cr 3  01                   .byte 1
00251Dr 3  01                   .byte 1
00251Er 3  01                   .byte 1
00251Fr 3  01                   .byte 1
002520r 3  01                   .byte 1
002521r 3  01                   .byte 1
002522r 3  01                   .byte 1
002523r 3  01                   .byte 1
002524r 3  01                   .byte 1
002525r 3  01                   .byte 1
002526r 3  01                   .byte 1
002527r 3  01                   .byte 1
002528r 3  01                   .byte 1
002529r 3  01                   .byte 1
00252Ar 3  01                   .byte 1
00252Br 3  01                   .byte 1
00252Cr 3  01                   .byte 1
00252Dr 3  01                   .byte 1
00252Er 3  01                   .byte 1
00252Fr 3  01                   .byte 1
002530r 3  01                   .byte 1
002531r 3  01                   .byte 1
002532r 3  01                   .byte 1
002533r 3  01                   .byte 1
002534r 3  01                   .byte 1
002535r 3  01                   .byte 1
002536r 3  01                   .byte 1
002537r 3  01                   .byte 1
002538r 3  01                   .byte 1
002539r 3  01                   .byte 1
00253Ar 3  01                   .byte 1
00253Br 3  01                   .byte 1
00253Cr 3  01                   .byte 1
00253Dr 3  01                   .byte 1
00253Er 3  01                   .byte 1
00253Fr 3  01                   .byte 1
002540r 3  01                   .byte 1
002541r 3  01                   .byte 1
002542r 3  01                   .byte 1
002543r 3  01                   .byte 1
002544r 3  01                   .byte 1
002545r 3  01                   .byte 1
002546r 3  01                   .byte 1
002547r 3  01                   .byte 1
002548r 3  01                   .byte 1
002549r 3  01                   .byte 1
00254Ar 3  01                   .byte 1
00254Br 3  01                   .byte 1
00254Cr 3  01                   .byte 1
00254Dr 3  01                   .byte 1
00254Er 3  01                   .byte 1
00254Fr 3  01                   .byte 1
002550r 3  01                   .byte 1
002551r 3  01                   .byte 1
002552r 3  01                   .byte 1
002553r 3  01                   .byte 1
002554r 3  01                   .byte 1
002555r 3  01                   .byte 1
002556r 3  01                   .byte 1
002557r 3  01                   .byte 1
002558r 3  01                   .byte 1
002559r 3  01                   .byte 1
00255Ar 3  01                   .byte 1
00255Br 3  01                   .byte 1
00255Cr 3  01                   .byte 1
00255Dr 3  01                   .byte 1
00255Er 3  01                   .byte 1
00255Fr 3  01                   .byte 1
002560r 3  01                   .byte 1
002561r 3  01                   .byte 1
002562r 3  01                   .byte 1
002563r 3  01                   .byte 1
002564r 3  01                   .byte 1
002565r 3  01                   .byte 1
002566r 3  01                   .byte 1
002567r 3  01                   .byte 1
002568r 3  01                   .byte 1
002569r 3  01                   .byte 1
00256Ar 3  01                   .byte 1
00256Br 3  01                   .byte 1
00256Cr 3  01                   .byte 1
00256Dr 3  01                   .byte 1
00256Er 3  01                   .byte 1
00256Fr 3               bprop:
00256Fr 3  00                   .byte 0
002570r 3  02                   .byte 2
002571r 3  02                   .byte 2
002572r 3  02                   .byte 2
002573r 3  02                   .byte 2
002574r 3  02                   .byte 2
002575r 3  02                   .byte 2
002576r 3  02                   .byte 2
002577r 3  02                   .byte 2
002578r 3  02                   .byte 2
002579r 3  02                   .byte 2
00257Ar 3  02                   .byte 2
00257Br 3  02                   .byte 2
00257Cr 3  02                   .byte 2
00257Dr 3  02                   .byte 2
00257Er 3  01                   .byte 1
00257Fr 3  02                   .byte 2
002580r 3  02                   .byte 2
002581r 3  02                   .byte 2
002582r 3  02                   .byte 2
002583r 3  02                   .byte 2
002584r 3  02                   .byte 2
002585r 3  02                   .byte 2
002586r 3  02                   .byte 2
002587r 3  02                   .byte 2
002588r 3  02                   .byte 2
002589r 3  02                   .byte 2
00258Ar 3  02                   .byte 2
00258Br 3  02                   .byte 2
00258Cr 3  02                   .byte 2
00258Dr 3  02                   .byte 2
00258Er 3  02                   .byte 2
00258Fr 3  02                   .byte 2
002590r 3  02                   .byte 2
002591r 3  02                   .byte 2
002592r 3  02                   .byte 2
002593r 3  02                   .byte 2
002594r 3  02                   .byte 2
002595r 3  01                   .byte 1
002596r 3  01                   .byte 1
002597r 3  01                   .byte 1
002598r 3  02                   .byte 2
002599r 3  02                   .byte 2
00259Ar 3  02                   .byte 2
00259Br 3  02                   .byte 2
00259Cr 3  02                   .byte 2
00259Dr 3  02                   .byte 2
00259Er 3  02                   .byte 2
00259Fr 3  02                   .byte 2
0025A0r 3  02                   .byte 2
0025A1r 3  02                   .byte 2
0025A2r 3  02                   .byte 2
0025A3r 3  02                   .byte 2
0025A4r 3  02                   .byte 2
0025A5r 3  06                   .byte 6
0025A6r 3  02                   .byte 2
0025A7r 3  02                   .byte 2
0025A8r 3  02                   .byte 2
0025A9r 3  02                   .byte 2
0025AAr 3  02                   .byte 2
0025ABr 3  02                   .byte 2
0025ACr 3  02                   .byte 2
0025ADr 3  02                   .byte 2
0025AEr 3  02                   .byte 2
0025AFr 3  02                   .byte 2
0025B0r 3  02                   .byte 2
0025B1r 3  02                   .byte 2
0025B2r 3  02                   .byte 2
0025B3r 3  02                   .byte 2
0025B4r 3  02                   .byte 2
0025B5r 3  00                   .byte 0
0025B6r 3  00                   .byte 0
0025B7r 3  00                   .byte 0
0025B8r 3  00                   .byte 0
0025B9r 3  00                   .byte 0
0025BAr 3  00                   .byte 0
0025BBr 3  00                   .byte 0
0025BCr 3  00                   .byte 0
0025BDr 3  00                   .byte 0
0025BEr 3  02                   .byte 2
0025BFr 3  06                   .byte 6
0025C0r 3  00                   .byte 0
0025C1r 3  00                   .byte 0
0025C2r 3  00                   .byte 0
0025C3r 3  00                   .byte 0
0025C4r 3  01                   .byte 1
0025C5r 3  01                   .byte 1
0025C6r 3  01                   .byte 1
0025C7r 3  01                   .byte 1
0025C8r 3  01                   .byte 1
0025C9r 3  01                   .byte 1
0025CAr 3  00                   .byte 0
0025CBr 3  00                   .byte 0
0025CCr 3  02                   .byte 2
0025CDr 3  04                   .byte 4
0025CEr 3  02                   .byte 2
0025CFr 3  02                   .byte 2
0025D0r 3  02                   .byte 2
0025D1r 3  02                   .byte 2
0025D2r 3  01                   .byte 1
0025D3r 3  02                   .byte 2
0025D4r 3               sprgfx:
0025D4r 3  03 C0 0C 70          .byte 3,192,12,112,51,252,111,254,88,30,4,128,3,192,5,64,5,192,5,192,2,192,1,192,1,128,0,0,3,96,3,176
0025D8r 3  33 FC 6F FE  
0025DCr 3  58 1E 04 80  
0025F4r 3  00 F0 03 1C          .byte 0,240,3,28,12,255,155,255,150,7,1,32,0,240,1,80,1,112,1,112,0,176,0,112,0,96,0,0,0,216,0,236
0025F8r 3  0C FF 9B FF  
0025FCr 3  96 07 01 20  
002614r 3  00 3C 00 C7          .byte 0,60,0,199,195,63,230,255,229,129,0,72,0,60,0,84,0,92,0,92,0,44,0,28,0,24,0,0,0,54,0,59
002618r 3  C3 3F E6 FF  
00261Cr 3  E5 81 00 48  
002634r 3  00 0F C0 31          .byte 0,15,192,49,240,207,249,191,121,96,0,18,0,15,0,21,0,23,0,23,0,11,0,7,0,6,0,0,128,13,192,14
002638r 3  F0 CF F9 BF  
00263Cr 3  79 60 00 12  
002654r 3  03 C0 0C 70          .byte 3,192,12,112,51,252,111,254,88,30,4,128,3,192,3,64,27,216,51,220,35,192,3,192,1,132,24,28,24,24,12,0
002658r 3  33 FC 6F FE  
00265Cr 3  58 1E 04 80  
002674r 3  00 F0 03 1C          .byte 0,240,3,28,12,255,155,255,150,7,1,32,0,240,0,208,6,246,12,247,8,240,0,240,0,97,6,7,6,6,3,0
002678r 3  0C FF 9B FF  
00267Cr 3  96 07 01 20  
002694r 3  00 3C 00 C7          .byte 0,60,0,199,195,63,230,255,229,129,0,72,0,60,0,52,129,189,195,61,2,60,0,60,64,24,193,129,129,129,0,192
002698r 3  C3 3F E6 FF  
00269Cr 3  E5 81 00 48  
0026B4r 3  00 0F C0 31          .byte 0,15,192,49,240,207,249,191,121,96,0,18,0,15,0,13,96,111,112,207,0,143,0,15,16,6,112,96,96,96,0,48
0026B8r 3  F0 CF F9 BF  
0026BCr 3  79 60 00 12  
0026D4r 3  00 00 03 C0          .byte 0,0,3,192,12,112,51,252,111,254,88,30,4,128,3,192,5,80,13,216,11,192,3,192,25,128,24,0,16,112,0,56
0026D8r 3  0C 70 33 FC  
0026DCr 3  6F FE 58 1E  
0026F4r 3  00 00 00 F0          .byte 0,0,0,240,3,28,12,255,155,255,150,7,1,32,0,240,1,84,3,118,2,240,0,240,6,96,6,0,4,28,0,14
0026F8r 3  03 1C 0C FF  
0026FCr 3  9B FF 96 07  
002714r 3  00 00 00 3C          .byte 0,0,0,60,0,199,195,63,230,255,229,129,0,72,0,60,0,85,128,221,0,188,0,60,1,152,1,128,1,7,128,3
002718r 3  00 C7 C3 3F  
00271Cr 3  E6 FF E5 81  
002734r 3  00 00 00 0F          .byte 0,0,0,15,192,49,240,207,249,191,121,96,0,18,0,15,64,21,96,55,0,47,0,15,0,102,0,96,192,65,224,0
002738r 3  C0 31 F0 CF  
00273Cr 3  F9 BF 79 60  
002754r 3  03 C0 0E 30          .byte 3,192,14,48,63,204,127,246,120,26,1,32,3,192,2,160,3,160,3,160,3,64,3,128,1,128,0,0,6,192,13,192
002758r 3  3F CC 7F F6  
00275Cr 3  78 1A 01 20  
002774r 3  00 F0 03 8C          .byte 0,240,3,140,15,243,159,253,158,6,0,72,0,240,0,168,0,232,0,232,0,208,0,224,0,96,0,0,1,176,3,112
002778r 3  0F F3 9F FD  
00277Cr 3  9E 06 00 48  
002794r 3  00 3C 00 E3          .byte 0,60,0,227,195,252,103,255,167,129,0,18,0,60,0,42,0,58,0,58,0,52,0,56,0,24,0,0,0,108,0,220
002798r 3  C3 FC 67 FF  
00279Cr 3  A7 81 00 12  
0027B4r 3  00 0F C0 38          .byte 0,15,192,56,48,255,217,255,105,224,128,4,0,15,128,10,128,14,128,14,0,13,0,14,0,6,0,0,0,27,0,55
0027B8r 3  30 FF D9 FF  
0027BCr 3  69 E0 80 04  
0027D4r 3  03 C0 0E 30          .byte 3,192,14,48,63,204,127,246,120,26,1,32,3,192,2,192,27,216,59,204,3,196,3,192,33,128,56,24,24,24,0,48
0027D8r 3  3F CC 7F F6  
0027DCr 3  78 1A 01 20  
0027F4r 3  00 F0 03 8C          .byte 0,240,3,140,15,243,159,253,158,6,0,72,0,240,0,176,6,246,14,243,0,241,0,240,8,96,14,6,6,6,0,12
0027F8r 3  0F F3 9F FD  
0027FCr 3  9E 06 00 48  
002814r 3  00 3C 00 E3          .byte 0,60,0,227,195,252,103,255,167,129,0,18,0,60,0,44,129,189,195,188,64,60,0,60,2,24,131,129,129,129,0,3
002818r 3  C3 FC 67 FF  
00281Cr 3  A7 81 00 12  
002834r 3  00 0F C0 38          .byte 0,15,192,56,48,255,217,255,105,224,128,4,0,15,0,11,96,111,48,239,16,15,0,15,0,134,96,224,96,96,192,0
002838r 3  30 FF D9 FF  
00283Cr 3  69 E0 80 04  
002854r 3  00 00 03 C0          .byte 0,0,3,192,14,48,63,204,127,246,120,26,1,32,3,192,10,160,27,176,3,208,3,192,1,152,0,24,14,8,28,0
002858r 3  0E 30 3F CC  
00285Cr 3  7F F6 78 1A  
002874r 3  00 00 00 F0          .byte 0,0,0,240,3,140,15,243,159,253,158,6,0,72,0,240,2,168,6,236,0,244,0,240,0,102,0,6,3,130,7,0
002878r 3  03 8C 0F F3  
00287Cr 3  9F FD 9E 06  
002894r 3  00 00 00 3C          .byte 0,0,0,60,0,227,195,252,103,255,167,129,0,18,0,60,0,170,1,187,0,61,0,60,128,25,128,1,128,224,1,192
002898r 3  00 E3 C3 FC  
00289Cr 3  67 FF A7 81  
0028B4r 3  00 00 00 0F          .byte 0,0,0,15,192,56,48,255,217,255,105,224,128,4,0,15,128,42,192,110,64,15,0,15,96,6,96,0,32,56,0,112
0028B8r 3  C0 38 30 FF  
0028BCr 3  D9 FF 69 E0  
0028D4r 3  01 00 02 80          .byte 1,0,2,128,2,128,5,192,5,192,255,254,143,254,103,252,23,240,11,224,27,240,39,248,44,120,88,60,80,28,96,12
0028D8r 3  02 80 05 C0  
0028DCr 3  05 C0 FF FE  
0028F4r 3  00 40 00 A0          .byte 0,64,0,160,0,160,1,112,1,112,191,255,163,255,25,255,5,252,2,248,6,252,9,254,11,30,22,15,20,7,24,3
0028F8r 3  00 A0 01 70  
0028FCr 3  01 70 BF FF  
002914r 3  00 10 00 28          .byte 0,16,0,40,0,40,0,92,0,92,239,255,232,255,198,127,1,127,0,190,1,191,130,127,130,199,197,131,197,1,198,0
002918r 3  00 28 00 5C  
00291Cr 3  00 5C EF FF  
002934r 3  00 04 00 0A          .byte 0,4,0,10,0,10,0,23,0,23,251,255,250,63,241,159,192,95,128,47,192,111,224,159,224,177,241,96,113,64,49,128
002938r 3  00 0A 00 17  
00293Cr 3  00 17 FB FF  
002954r 3  01 00 02 80          .byte 1,0,2,128,2,128,2,128,2,128,31,240,19,240,27,240,11,224,5,192,5,192,11,224,10,160,10,160,10,160,12,96
002958r 3  02 80 02 80  
00295Cr 3  02 80 1F F0  
002974r 3  00 40 00 A0          .byte 0,64,0,160,0,160,0,160,0,160,7,252,4,252,6,252,2,248,1,112,1,112,2,248,2,168,2,168,2,168,3,24
002978r 3  00 A0 00 A0  
00297Cr 3  00 A0 07 FC  
002994r 3  00 10 00 28          .byte 0,16,0,40,0,40,0,40,0,40,1,255,1,63,1,191,0,190,0,92,0,92,0,190,0,170,0,170,0,170,0,198
002998r 3  00 28 00 28  
00299Cr 3  00 28 01 FF  
0029B4r 3  00 04 00 0A          .byte 0,4,0,10,0,10,0,10,0,10,192,127,192,79,192,111,128,47,0,23,0,23,128,47,128,42,128,42,128,42,128,49
0029B8r 3  00 0A 00 0A  
0029BCr 3  00 0A C0 7F  
0029D4r 3  01 00 02 80          .byte 1,0,2,128,2,128,2,128,2,128,7,96,7,96,7,96,2,192,2,128,2,128,3,64,3,64,3,64,3,64,3,64
0029D8r 3  02 80 02 80  
0029DCr 3  02 80 07 60  
0029F4r 3  00 40 00 A0          .byte 0,64,0,160,0,160,0,160,0,160,1,216,1,216,1,216,0,176,0,160,0,160,0,208,0,208,0,208,0,208,0,208
0029F8r 3  00 A0 00 A0  
0029FCr 3  00 A0 01 D8  
002A14r 3  00 10 00 28          .byte 0,16,0,40,0,40,0,40,0,40,0,118,0,118,0,118,0,44,0,40,0,40,0,52,0,52,0,52,0,52,0,52
002A18r 3  00 28 00 28  
002A1Cr 3  00 28 00 76  
002A34r 3  00 04 00 0A          .byte 0,4,0,10,0,10,0,10,0,10,128,29,128,29,128,29,0,11,0,10,0,10,0,13,0,13,0,13,0,13,0,13
002A38r 3  00 0A 00 0A  
002A3Cr 3  00 0A 80 1D  
002A54r 3  00 00 00 00          .byte 0,0,0,0,32,8,0,20,5,8,2,0,5,0,0,0,0,0,0,0,16,32,56,0,16,0,0,0,0,0,0,0
002A58r 3  20 08 00 14  
002A5Cr 3  05 08 02 00  
002A74r 3  00 00 00 00          .byte 0,0,0,0,8,2,0,5,1,66,0,128,1,64,0,0,0,0,0,0,4,8,14,0,4,0,0,0,0,0,0,0
002A78r 3  08 02 00 05  
002A7Cr 3  01 42 00 80  
002A94r 3  00 00 00 00          .byte 0,0,0,0,130,0,64,1,128,80,0,32,0,80,0,0,0,0,0,0,1,2,3,128,1,0,0,0,0,0,0,0
002A98r 3  82 00 40 01  
002A9Cr 3  80 50 00 20  
002AB4r 3  00 00 00 00          .byte 0,0,0,0,32,128,80,0,32,20,0,8,0,20,0,0,0,0,0,0,128,64,0,224,0,64,0,0,0,0,0,0
002AB8r 3  20 80 50 00  
002ABCr 3  20 14 00 08  
002AD4r 3  00 00 20 00          .byte 0,0,32,0,112,0,32,8,2,0,5,0,2,0,0,0,0,0,0,32,40,112,16,32,40,0,0,0,0,0,0,0
002AD8r 3  70 00 20 08  
002ADCr 3  02 00 05 00  
002AF4r 3  00 00 08 00          .byte 0,0,8,0,28,0,8,2,0,128,1,64,0,128,0,0,0,0,0,8,10,28,4,8,10,0,0,0,0,0,0,0
002AF8r 3  1C 00 08 02  
002AFCr 3  00 80 01 40  
002B14r 3  00 00 02 00          .byte 0,0,2,0,7,0,130,0,0,32,0,80,0,32,0,0,0,0,0,2,2,135,1,2,2,128,0,0,0,0,0,0
002B18r 3  07 00 82 00  
002B1Cr 3  00 20 00 50  
002B34r 3  00 00 00 80          .byte 0,0,0,128,1,192,32,128,0,8,0,20,0,8,0,0,0,0,128,0,192,161,128,64,0,160,0,0,0,0,0,0
002B38r 3  01 C0 20 80  
002B3Cr 3  00 08 00 14  
002B54r 3  00 00 50 00          .byte 0,0,80,0,32,0,80,0,0,0,2,0,0,0,0,0,0,0,0,80,0,32,16,80,0,0,0,0,0,0,0,0
002B58r 3  20 00 50 00  
002B5Cr 3  00 00 02 00  
002B74r 3  00 00 14 00          .byte 0,0,20,0,8,0,20,0,0,0,0,128,0,0,0,0,0,0,0,20,0,8,4,20,0,0,0,0,0,0,0,0
002B78r 3  08 00 14 00  
002B7Cr 3  00 00 00 80  
002B94r 3  00 00 05 00          .byte 0,0,5,0,2,0,5,0,0,0,0,32,0,0,0,0,0,0,0,5,0,2,1,5,0,0,0,0,0,0,0,0
002B98r 3  02 00 05 00  
002B9Cr 3  00 00 00 20  
002BB4r 3  00 00 01 40          .byte 0,0,1,64,0,128,1,64,0,0,0,8,0,0,0,0,0,0,64,1,128,0,64,65,0,0,0,0,0,0,0,0
002BB8r 3  00 80 01 40  
002BBCr 3  00 00 00 08  
002BD4r 3  03 C0 0C 30          .byte 3,192,12,48,51,204,127,254,120,30,9,144,3,192,2,64,58,92,27,216,3,192,3,192,33,132,56,28,24,24,0,0
002BD8r 3  33 CC 7F FE  
002BDCr 3  78 1E 09 90  
002BF4r 3  00 F0 03 0C          .byte 0,240,3,12,12,243,159,255,158,7,2,100,0,240,0,144,14,151,6,246,0,240,0,240,8,97,14,7,6,6,0,0
002BF8r 3  0C F3 9F FF  
002BFCr 3  9E 07 02 64  
002C14r 3  00 3C 00 C3          .byte 0,60,0,195,195,60,231,255,231,129,0,153,0,60,0,36,195,165,129,189,0,60,0,60,66,24,195,129,129,129,0,0
002C18r 3  C3 3C E7 FF  
002C1Cr 3  E7 81 00 99  
002C34r 3  00 0F C0 30          .byte 0,15,192,48,48,207,249,255,121,224,64,38,0,15,0,9,112,233,96,111,0,15,0,15,16,134,112,224,96,96,0,0
002C38r 3  30 CF F9 FF  
002C3Cr 3  79 E0 40 26  
002C54r 3  03 C0 0C 70          .byte 3,192,12,112,51,252,111,254,88,30,4,128,3,192,29,24,13,16,3,192,3,192,1,192,8,144,12,48,6,96,0,0
002C58r 3  33 FC 6F FE  
002C5Cr 3  58 1E 04 80  
002C74r 3  00 F0 03 1C          .byte 0,240,3,28,12,255,155,255,150,7,1,32,0,240,7,70,3,68,0,240,0,240,0,112,2,36,3,12,1,152,0,0
002C78r 3  0C FF 9B FF  
002C7Cr 3  96 07 01 20  
002C94r 3  00 3C 00 C7          .byte 0,60,0,199,195,63,230,255,229,129,0,72,0,60,129,209,0,209,0,60,0,60,0,28,0,137,0,195,0,102,0,0
002C98r 3  C3 3F E6 FF  
002C9Cr 3  E5 81 00 48  
002CB4r 3  00 0F C0 31          .byte 0,15,192,49,240,207,249,191,121,96,0,18,0,15,96,116,64,52,0,15,0,15,0,7,64,34,192,48,128,25,0,0
002CB8r 3  F0 CF F9 BF  
002CBCr 3  79 60 00 12  
002CD4r 3  03 C0 0E 30          .byte 3,192,14,48,63,204,127,246,120,26,1,32,3,192,24,184,8,176,3,192,3,192,3,128,9,16,12,48,6,96,0,0
002CD8r 3  3F CC 7F F6  
002CDCr 3  78 1A 01 20  
002CF4r 3  00 F0 03 8C          .byte 0,240,3,140,15,243,159,253,158,6,0,72,0,240,6,46,2,44,0,240,0,240,0,224,2,68,3,12,1,152,0,0
002CF8r 3  0F F3 9F FD  
002CFCr 3  9E 06 00 48  
002D14r 3  00 3C 00 E3          .byte 0,60,0,227,195,252,103,255,167,129,0,18,0,60,129,139,0,139,0,60,0,60,0,56,0,145,0,195,0,102,0,0
002D18r 3  C3 FC 67 FF  
002D1Cr 3  A7 81 00 12  
002D34r 3  00 0F C0 38          .byte 0,15,192,56,48,255,217,255,105,224,128,4,0,15,224,98,192,34,0,15,0,15,0,14,64,36,192,48,128,25,0,0
002D38r 3  30 FF D9 FF  
002D3Cr 3  69 E0 80 04  
002D54r 3  07 C0 18 30          .byte 7,192,24,48,32,200,64,116,64,52,129,2,129,2,143,226,131,130,130,130,68,68,64,4,32,8,24,48,7,192,0,0
002D58r 3  20 C8 40 74  
002D5Cr 3  40 34 81 02  
002D74r 3  01 F0 06 0C          .byte 1,240,6,12,8,50,16,29,16,13,160,64,160,64,163,248,160,224,160,160,17,17,16,1,8,2,6,12,1,240,0,0
002D78r 3  08 32 10 1D  
002D7Cr 3  10 0D A0 40  
002D94r 3  00 7C 01 83          .byte 0,124,1,131,130,12,68,7,68,3,40,16,40,16,40,254,40,56,40,40,68,68,68,0,130,0,1,131,0,124,0,0
002D98r 3  82 0C 44 07  
002D9Cr 3  44 03 28 10  
002DB4r 3  00 1F C0 60          .byte 0,31,192,96,32,131,209,1,209,0,10,4,10,4,138,63,10,14,10,10,17,17,17,0,32,128,192,96,0,31,0,0
002DB8r 3  20 83 D1 01  
002DBCr 3  D1 00 0A 04  
002DD4r 3  00 00 03 80          .byte 0,0,3,128,28,112,32,8,64,116,129,26,129,2,143,226,131,130,130,130,68,68,32,8,28,112,3,128,0,0,0,0
002DD8r 3  1C 70 20 08  
002DDCr 3  40 74 81 1A  
002DF4r 3  00 00 00 E0          .byte 0,0,0,224,7,28,8,2,16,29,160,70,160,64,163,248,160,224,160,160,17,17,8,2,7,28,0,224,0,0,0,0
002DF8r 3  07 1C 08 02  
002DFCr 3  10 1D A0 46  
002E14r 3  00 00 00 38          .byte 0,0,0,56,1,199,130,0,68,7,168,17,40,16,40,254,40,56,40,40,68,68,130,0,1,199,0,56,0,0,0,0
002E18r 3  01 C7 82 00  
002E1Cr 3  44 07 A8 11  
002E34r 3  00 00 00 0E          .byte 0,0,0,14,192,113,32,128,209,1,106,4,10,4,138,63,10,14,10,10,17,17,32,128,192,113,0,14,0,0,0,0
002E38r 3  C0 71 20 80  
002E3Cr 3  D1 01 6A 04  
002E54r 3  07 C0 08 20          .byte 7,192,8,32,16,208,32,104,32,40,33,40,65,4,79,228,67,132,34,136,36,72,32,8,16,16,8,32,7,192,0,0
002E58r 3  10 D0 20 68  
002E5Cr 3  20 28 21 28  
002E74r 3  01 F0 02 08          .byte 1,240,2,8,4,52,8,26,8,10,8,74,16,65,19,249,16,225,8,162,9,18,8,2,4,4,2,8,1,240,0,0
002E78r 3  04 34 08 1A  
002E7Cr 3  08 0A 08 4A  
002E94r 3  00 7C 00 82          .byte 0,124,0,130,1,13,130,6,130,2,130,18,68,16,68,254,68,56,130,40,130,68,130,0,1,1,0,130,0,124,0,0
002E98r 3  01 0D 82 06  
002E9Cr 3  82 02 82 12  
002EB4r 3  00 1F 80 20          .byte 0,31,128,32,64,67,160,129,160,128,160,132,17,4,145,63,17,14,32,138,32,145,32,128,64,64,128,32,0,31,0,0
002EB8r 3  40 43 A0 81  
002EBCr 3  A0 80 A0 84  
002ED4r 3  3F FC 10 08          .byte 63,252,16,8,23,168,23,72,11,144,11,80,5,160,2,64,2,64,4,32,8,144,8,80,16,72,16,104,16,8,63,252
002ED8r 3  17 A8 17 48  
002EDCr 3  0B 90 0B 50  
002EF4r 3  0F FF 04 02          .byte 15,255,4,2,5,234,5,210,2,228,2,212,1,104,0,144,0,144,1,8,2,36,2,20,4,18,4,26,4,2,15,255
002EF8r 3  05 EA 05 D2  
002EFCr 3  02 E4 02 D4  
002F14r 3  C3 FF 81 00          .byte 195,255,129,0,129,122,129,116,0,185,0,181,0,90,0,36,0,36,0,66,0,137,0,133,129,4,129,6,129,0,195,255
002F18r 3  81 7A 81 74  
002F1Cr 3  00 B9 00 B5  
002F34r 3  F0 FF 20 40          .byte 240,255,32,64,160,94,32,93,64,46,64,45,128,22,0,9,0,9,128,16,64,34,64,33,32,65,160,65,32,64,240,255
002F38r 3  A0 5E 20 5D  
002F3Cr 3  40 2E 40 2D  
002F54r 3  3F FC 10 08          .byte 63,252,16,8,16,40,16,40,11,144,11,80,5,160,2,64,2,64,4,32,8,16,9,144,19,72,23,168,16,8,63,252
002F58r 3  10 28 10 28  
002F5Cr 3  0B 90 0B 50  
002F74r 3  0F FF 04 02          .byte 15,255,4,2,4,10,4,10,2,228,2,212,1,104,0,144,0,144,1,8,2,4,2,100,4,210,5,234,4,2,15,255
002F78r 3  04 0A 04 0A  
002F7Cr 3  02 E4 02 D4  
002F94r 3  C3 FF 81 00          .byte 195,255,129,0,129,2,129,2,0,185,0,181,0,90,0,36,0,36,0,66,0,129,0,153,129,52,129,122,129,0,195,255
002F98r 3  81 02 81 02  
002F9Cr 3  00 B9 00 B5  
002FB4r 3  F0 FF 20 40          .byte 240,255,32,64,160,64,160,64,64,46,64,45,128,22,0,9,0,9,128,16,64,32,64,38,32,77,160,94,32,64,240,255
002FB8r 3  A0 40 A0 40  
002FBCr 3  40 2E 40 2D  
002FD4r 3  3F FC 10 08          .byte 63,252,16,8,16,104,16,72,8,80,8,144,4,32,2,64,2,64,5,160,11,80,11,144,23,72,23,168,16,8,63,252
002FD8r 3  10 68 10 48  
002FDCr 3  08 50 08 90  
002FF4r 3  0F FF 04 02          .byte 15,255,4,2,4,26,4,18,2,20,2,36,1,8,0,144,0,144,1,104,2,212,2,228,5,210,5,234,4,2,15,255
002FF8r 3  04 1A 04 12  
002FFCr 3  02 14 02 24  
003014r 3  C3 FF 81 00          .byte 195,255,129,0,129,6,129,4,0,133,0,137,0,66,0,36,0,36,0,90,0,181,0,185,129,116,129,122,129,0,195,255
003018r 3  81 06 81 04  
00301Cr 3  00 85 00 89  
003034r 3  F0 FF 20 40          .byte 240,255,32,64,160,65,32,65,64,33,64,34,128,16,0,9,0,9,128,22,64,45,64,46,32,93,160,94,32,64,240,255
003038r 3  A0 41 20 41  
00303Cr 3  40 21 40 22  
003054r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,3,192,12,32,31,208,63,232,48,56,3,0,3,128,1,64,1,128,3,64,3,128,0,0
003058r 3  00 00 00 00  
00305Cr 3  03 C0 0C 20  
003074r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,240,3,8,7,244,15,250,12,14,0,192,0,224,0,80,0,96,0,208,0,224,0,0
003078r 3  00 00 00 00  
00307Cr 3  00 F0 03 08  
003094r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,60,0,194,1,253,131,254,131,3,0,48,0,56,0,20,0,24,0,52,0,56,0,0
003098r 3  00 00 00 00  
00309Cr 3  00 3C 00 C2  
0030B4r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,15,128,48,64,127,160,255,224,192,0,12,0,14,0,5,0,6,0,13,0,14,0,0
0030B8r 3  00 00 00 00  
0030BCr 3  00 0F 80 30  
0030D4r 3  00 00 00 00          .byte 0,0,0,0,3,192,12,32,31,208,63,232,48,56,3,0,3,128,1,64,1,128,3,64,3,128,0,0,0,0,0,0
0030D8r 3  03 C0 0C 20  
0030DCr 3  1F D0 3F E8  
0030F4r 3  00 00 00 00          .byte 0,0,0,0,0,240,3,8,7,244,15,250,12,14,0,192,0,224,0,80,0,96,0,208,0,224,0,0,0,0,0,0
0030F8r 3  00 F0 03 08  
0030FCr 3  07 F4 0F FA  
003114r 3  00 00 00 00          .byte 0,0,0,0,0,60,0,194,1,253,131,254,131,3,0,48,0,56,0,20,0,24,0,52,0,56,0,0,0,0,0,0
003118r 3  00 3C 00 C2  
00311Cr 3  01 FD 83 FE  
003134r 3  00 00 00 00          .byte 0,0,0,0,0,15,128,48,64,127,160,255,224,192,0,12,0,14,0,5,0,6,0,13,0,14,0,0,0,0,0,0
003138r 3  00 0F 80 30  
00313Cr 3  40 7F A0 FF  
003154r 3  1F D0 3F EC          .byte 31,208,63,236,95,250,79,125,174,58,141,61,252,126,215,253,211,250,127,220,191,184,213,112,255,224,127,192,63,0,0,0
003158r 3  5F FA 4F 7D  
00315Cr 3  AE 3A 8D 3D  
003174r 3  07 F4 0F FB          .byte 7,244,15,251,151,254,83,223,171,142,99,79,191,31,117,255,180,254,31,247,47,238,53,92,63,248,31,240,15,192,0,0
003178r 3  97 FE 53 DF  
00317Cr 3  AB 8E 63 4F  
003194r 3  01 FD C3 FE          .byte 1,253,195,254,165,255,212,247,170,227,216,211,239,199,221,127,173,63,199,253,139,251,13,87,15,254,7,252,3,240,0,0
003198r 3  A5 FF D4 F7  
00319Cr 3  AA E3 D8 D3  
0031B4r 3  40 7F B0 FF          .byte 64,127,176,255,233,127,245,61,234,184,246,52,251,241,247,95,235,79,113,255,226,254,195,85,131,255,1,255,0,252,0,0
0031B8r 3  E9 7F F5 3D  
0031BCr 3  EA B8 F6 34  
0031D4r 3  0B F8 37 FC          .byte 11,248,55,252,95,250,190,242,92,117,188,177,126,63,191,235,95,203,59,254,25,252,12,169,6,3,7,87,3,254,1,252
0031D8r 3  5F FA BE F2  
0031DCr 3  5C 75 BC B1  
0031F4r 3  02 FE 0D FF          .byte 2,254,13,255,151,254,175,188,87,29,111,44,223,143,239,250,215,242,142,255,6,127,67,42,193,128,193,213,128,255,0,127
0031F8r 3  97 FE AF BC  
0031FCr 3  57 1D 6F 2C  
003214r 3  80 BF C3 7F          .byte 128,191,195,127,165,255,43,239,85,199,27,203,247,227,187,254,181,252,227,191,193,159,144,202,48,96,112,117,224,63,192,31
003218r 3  A5 FF 2B EF  
00321Cr 3  55 C7 1B CB  
003234r 3  E0 2F F0 DF          .byte 224,47,240,223,233,127,202,251,213,113,198,242,253,248,174,255,45,127,248,239,240,103,164,50,12,24,92,29,248,15,240,7
003238r 3  E9 7F CA FB  
00323Cr 3  D5 71 C6 F2  
003254r 3  00 00 00 20          .byte 0,0,0,32,32,96,56,160,52,160,11,32,12,88,7,230,7,254,15,248,15,224,60,224,56,224,32,96,0,32,0,0
003258r 3  20 60 38 A0  
00325Cr 3  34 A0 0B 20  
003274r 3  00 00 00 08          .byte 0,0,0,8,8,24,14,40,13,40,2,200,3,22,129,249,129,255,3,254,3,248,15,56,14,56,8,24,0,8,0,0
003278r 3  08 18 0E 28  
00327Cr 3  0D 28 02 C8  
003294r 3  00 00 00 02          .byte 0,0,0,2,2,6,3,138,3,74,0,178,128,197,96,126,224,127,128,255,0,254,3,206,3,142,2,6,0,2,0,0
003298r 3  02 06 03 8A  
00329Cr 3  03 4A 00 B2  
0032B4r 3  00 00 80 00          .byte 0,0,128,0,128,129,128,226,128,210,128,44,96,49,152,31,248,31,224,63,128,63,128,243,128,227,128,129,128,0,0,0
0032B8r 3  80 81 80 E2  
0032BCr 3  80 D2 80 2C  
0032D4r 3  00 00 00 00          .byte 0,0,0,0,56,28,24,24,30,104,15,208,7,160,7,160,31,152,63,196,127,190,3,64,3,64,1,128,1,128,0,0
0032D8r 3  38 1C 18 18  
0032DCr 3  1E 68 0F D0  
0032F4r 3  00 00 00 00          .byte 0,0,0,0,14,7,6,6,7,154,3,244,1,232,1,232,7,230,15,241,159,239,0,208,0,208,0,96,0,96,0,0
0032F8r 3  0E 07 06 06  
0032FCr 3  07 9A 03 F4  
003314r 3  00 00 00 00          .byte 0,0,0,0,195,129,129,129,129,230,0,253,0,122,0,122,129,249,67,252,231,251,0,52,0,52,0,24,0,24,0,0
003318r 3  C3 81 81 81  
00331Cr 3  81 E6 00 FD  
003334r 3  00 00 00 00          .byte 0,0,0,0,112,224,96,96,160,121,64,63,128,30,128,30,96,126,16,255,249,254,0,13,0,13,0,6,0,6,0,0
003338r 3  70 E0 60 60  
00333Cr 3  A0 79 40 3F  
003354r 3  00 00 04 00          .byte 0,0,4,0,6,4,7,28,7,60,7,240,31,240,127,224,103,224,26,48,4,208,5,44,5,28,6,4,4,0,0,0
003358r 3  06 04 07 1C  
00335Cr 3  07 3C 07 F0  
003374r 3  00 00 01 00          .byte 0,0,1,0,1,129,1,199,1,207,1,252,7,252,31,248,25,248,6,140,1,52,1,75,1,71,1,129,1,0,0,0
003378r 3  01 81 01 C7  
00337Cr 3  01 CF 01 FC  
003394r 3  00 00 00 40          .byte 0,0,0,64,64,96,192,113,192,115,0,127,1,255,7,254,6,126,1,163,0,77,192,82,192,81,64,96,0,64,0,0
003398r 3  40 60 C0 71  
00339Cr 3  C0 73 00 7F  
0033B4r 3  00 00 00 10          .byte 0,0,0,16,16,24,112,28,240,28,192,31,192,127,129,255,129,159,192,104,64,19,176,20,112,20,16,24,0,16,0,0
0033B8r 3  10 18 70 1C  
0033BCr 3  F0 1C C0 1F  
0033D4r 3  07 C0 1E 20          .byte 7,192,30,32,125,80,252,16,6,32,0,0,15,224,31,214,27,213,12,101,0,2,14,192,29,224,251,240,127,240,31,224
0033D8r 3  7D 50 FC 10  
0033DCr 3  06 20 00 00  
0033F4r 3  01 F0 07 88          .byte 1,240,7,136,31,84,63,4,1,136,0,0,3,248,135,245,70,245,67,25,128,0,3,176,7,120,62,252,31,252,7,248
0033F8r 3  1F 54 3F 04  
0033FCr 3  01 88 00 00  
003414r 3  00 7C 01 E2          .byte 0,124,1,226,7,213,15,193,0,98,0,0,0,254,97,253,81,189,80,198,32,0,0,236,1,222,15,191,7,255,1,254
003418r 3  07 D5 0F C1  
00341Cr 3  00 62 00 00  
003434r 3  00 1F 80 78          .byte 0,31,128,120,65,245,67,240,128,24,0,0,128,63,88,127,84,111,148,49,8,0,0,59,128,119,195,239,193,255,128,127
003438r 3  41 F5 43 F0  
00343Cr 3  80 18 00 00  
003454r 3  07 C0 0E 20          .byte 7,192,14,32,29,80,60,16,118,32,65,206,12,29,31,237,23,210,11,208,0,32,30,128,13,224,61,240,251,224,127,128
003458r 3  1D 50 3C 10  
00345Cr 3  76 20 41 CE  
003474r 3  01 F0 03 88          .byte 1,240,3,136,7,84,15,4,29,136,144,115,67,7,71,251,133,244,2,244,0,8,7,160,3,120,15,124,62,248,31,224
003478r 3  07 54 0F 04  
00347Cr 3  1D 88 90 73  
003494r 3  00 7C 00 E2          .byte 0,124,0,226,1,213,3,193,7,98,228,28,208,193,209,254,33,125,0,189,0,2,1,232,0,222,3,223,15,190,7,248
003498r 3  01 D5 03 C1  
00349Cr 3  07 62 E4 1C  
0034B4r 3  00 1F 80 38          .byte 0,31,128,56,64,117,64,240,129,216,57,7,116,48,180,127,72,95,64,47,128,0,0,122,128,55,192,247,131,239,1,254
0034B8r 3  40 75 40 F0  
0034BCr 3  81 D8 39 07  
0034D4r 3  03 E0 04 78          .byte 3,224,4,120,10,190,8,63,4,96,0,0,7,240,107,248,171,216,166,48,64,0,3,112,7,184,15,223,15,254,7,248
0034D8r 3  0A BE 08 3F  
0034DCr 3  04 60 00 00  
0034F4r 3  00 F8 01 1E          .byte 0,248,1,30,130,175,194,15,1,24,0,0,1,252,26,254,42,246,41,140,16,0,0,220,1,238,195,247,131,255,1,254
0034F8r 3  82 AF C2 0F  
0034FCr 3  01 18 00 00  
003514r 3  00 3E 80 47          .byte 0,62,128,71,224,171,240,131,0,70,0,0,0,127,134,191,138,189,10,99,4,0,0,55,128,123,240,253,224,255,128,127
003518r 3  E0 AB F0 83  
00351Cr 3  00 46 00 00  
003534r 3  80 0F E0 11          .byte 128,15,224,17,248,42,252,32,128,17,0,0,192,31,225,175,98,175,194,152,1,0,192,13,224,30,124,63,248,63,224,31
003538r 3  F8 2A FC 20  
00353Cr 3  80 11 00 00  
003554r 3  03 E0 04 70          .byte 3,224,4,112,10,184,8,60,4,110,115,130,184,48,183,248,75,232,11,208,4,0,1,120,7,176,15,188,7,223,1,254
003558r 3  0A B8 08 3C  
00355Cr 3  04 6E 73 82  
003574r 3  00 F8 01 1C          .byte 0,248,1,28,2,174,2,15,129,27,156,224,46,12,45,254,18,250,2,244,1,0,0,94,1,236,3,239,193,247,128,127
003578r 3  02 AE 02 0F  
00357Cr 3  81 1B 9C E0  
003594r 3  00 3E 00 47          .byte 0,62,0,71,128,171,192,131,224,70,39,56,11,131,139,127,132,190,0,189,0,64,128,23,0,123,192,251,240,125,224,31
003598r 3  80 AB C0 83  
00359Cr 3  E0 46 27 38  
0035B4r 3  80 0F C0 11          .byte 128,15,192,17,224,42,240,32,184,17,9,206,194,224,226,223,161,47,64,47,0,16,224,5,192,30,240,62,124,31,248,7
0035B8r 3  E0 2A F0 20  
0035BCr 3  B8 11 09 CE  
0035D4r 3  01 80 01 80          .byte 1,128,1,128,3,192,99,192,194,64,133,32,182,108,231,230,79,243,8,33,23,83,22,170,12,0,24,128,1,128,1,192
0035D8r 3  03 C0 63 C0  
0035DCr 3  C2 40 85 20  
0035F4r 3  00 60 00 60          .byte 0,96,0,96,0,240,24,240,48,144,33,72,45,155,185,249,211,252,66,8,197,212,133,170,3,0,6,32,0,96,0,112
0035F8r 3  00 F0 18 F0  
0035FCr 3  30 90 21 48  
003614r 3  00 18 00 18          .byte 0,24,0,24,0,60,6,60,12,36,8,82,203,102,110,126,52,255,16,130,49,117,161,106,0,192,1,136,0,24,0,28
003618r 3  00 3C 06 3C  
00361Cr 3  0C 24 08 52  
003634r 3  00 06 00 06          .byte 0,6,0,6,0,15,1,143,3,9,130,20,178,217,155,159,205,63,132,32,76,93,168,90,0,48,0,98,0,6,0,7
003638r 3  00 0F 01 8F  
00363Cr 3  03 09 82 14  
003654r 3  01 80 01 80          .byte 1,128,1,128,3,192,3,193,0,195,4,230,49,238,103,236,207,208,128,96,134,208,13,168,24,0,1,0,1,128,1,128
003658r 3  03 C0 03 C1  
00365Cr 3  00 C3 04 E6  
003674r 3  00 60 00 60          .byte 0,96,0,96,0,240,64,240,192,48,129,57,140,123,25,251,51,244,32,24,33,180,3,106,6,0,0,64,0,96,0,96
003678r 3  00 F0 40 F0  
00367Cr 3  C0 30 81 39  
003694r 3  00 18 00 18          .byte 0,24,0,24,0,60,16,60,48,12,96,78,227,30,198,126,12,253,8,6,8,109,128,218,1,128,0,16,0,24,0,24
003698r 3  00 3C 10 3C  
00369Cr 3  30 0C 60 4E  
0036B4r 3  00 06 00 06          .byte 0,6,0,6,0,15,4,15,12,3,152,19,184,199,177,159,67,63,130,1,66,27,160,54,0,96,0,4,0,6,0,6
0036B8r 3  00 0F 04 0F  
0036BCr 3  0C 03 98 13  
0036D4r 3  01 80 01 80          .byte 1,128,1,128,3,192,3,192,3,128,193,32,125,140,27,230,2,243,14,1,11,112,21,156,0,6,1,0,1,128,3,128
0036D8r 3  03 C0 03 C0  
0036DCr 3  03 80 C1 20  
0036F4r 3  00 60 00 60          .byte 0,96,0,96,0,240,0,240,0,224,48,72,31,99,134,249,192,188,67,128,2,220,5,103,128,1,0,64,0,96,0,224
0036F8r 3  00 F0 00 F0  
0036FCr 3  00 E0 30 48  
003714r 3  00 18 00 18          .byte 0,24,0,24,0,60,0,60,0,56,12,18,199,216,97,190,48,47,16,224,0,183,193,89,96,0,0,16,0,24,0,56
003718r 3  00 3C 00 3C  
00371Cr 3  00 38 0C 12  
003734r 3  00 06 00 06          .byte 0,6,0,6,0,15,0,15,0,14,131,4,49,246,152,111,204,11,4,56,192,45,112,86,24,0,0,4,0,6,0,14
003738r 3  00 0F 00 0F  
00373Cr 3  00 0E 83 04  
003754r 3  00 00 00 E0          .byte 0,0,0,224,3,112,12,248,19,204,47,228,127,252,117,254,236,230,222,0,151,128,43,240,53,96,64,0,112,120,56,60
003758r 3  03 70 0C F8  
00375Cr 3  13 CC 2F E4  
003774r 3  00 00 00 38          .byte 0,0,0,56,0,220,3,62,4,243,11,249,31,255,157,127,187,57,55,128,37,224,10,252,13,88,16,0,28,30,14,15
003778r 3  00 DC 03 3E  
00377Cr 3  04 F3 0B F9  
003794r 3  00 00 00 0E          .byte 0,0,0,14,0,55,128,207,193,60,66,254,199,255,231,95,110,206,13,224,9,120,2,191,3,86,4,0,135,7,195,131
003798r 3  00 37 80 CF  
00379Cr 3  C1 3C 42 FE  
0037B4r 3  00 00 80 03          .byte 0,0,128,3,192,13,224,51,48,79,144,191,241,255,249,215,155,179,3,120,2,94,192,175,128,213,1,0,225,193,240,224
0037B8r 3  C0 0D E0 33  
0037BCr 3  30 4F 90 BF  
0037D4r 3  00 00 00 00          .byte 0,0,0,0,0,224,3,112,12,248,19,204,47,228,87,252,125,254,118,230,55,0,27,240,43,240,21,96,0,0,15,64
0037D8r 3  00 E0 03 70  
0037DCr 3  0C F8 13 CC  
0037F4r 3  00 00 00 00          .byte 0,0,0,0,0,56,0,220,3,62,4,243,11,249,21,255,159,127,157,185,13,192,6,252,10,252,5,88,0,0,3,208
0037F8r 3  00 38 00 DC  
0037FCr 3  03 3E 04 F3  
003814r 3  00 00 00 00          .byte 0,0,0,0,0,14,0,55,128,207,193,60,66,254,197,127,231,223,103,110,3,112,1,191,2,191,1,86,0,0,0,244
003818r 3  00 0E 00 37  
00381Cr 3  80 CF C1 3C  
003834r 3  00 00 00 00          .byte 0,0,0,0,128,3,192,13,224,51,48,79,144,191,241,95,249,247,153,219,0,220,192,111,192,175,128,85,0,0,0,61
003838r 3  80 03 C0 0D  
00383Cr 3  E0 33 30 4F  
003854r 3  00 00 00 E0          .byte 0,0,0,224,3,112,12,248,19,204,47,228,127,252,119,254,122,230,93,0,45,240,19,240,10,160,5,0,24,224,30,112
003858r 3  03 70 0C F8  
00385Cr 3  13 CC 2F E4  
003874r 3  00 00 00 38          .byte 0,0,0,56,0,220,3,62,4,243,11,249,31,255,157,255,158,185,23,64,11,124,4,252,2,168,1,64,6,56,7,156
003878r 3  00 DC 03 3E  
00387Cr 3  04 F3 0B F9  
003894r 3  00 00 00 0E          .byte 0,0,0,14,0,55,128,207,193,60,66,254,199,255,231,127,103,174,5,208,2,223,1,63,0,170,0,80,1,142,1,231
003898r 3  00 37 80 CF  
00389Cr 3  C1 3C 42 FE  
0038B4r 3  00 00 80 03          .byte 0,0,128,3,192,13,224,51,48,79,144,191,241,255,249,223,153,235,1,116,192,183,192,79,128,42,0,20,128,99,192,121
0038B8r 3  C0 0D E0 33  
0038BCr 3  30 4F 90 BF  
0038D4r 3  00 00 07 00          .byte 0,0,7,0,14,192,31,48,51,200,39,244,63,254,127,174,103,55,0,123,1,233,15,212,6,172,0,2,30,14,60,28
0038D8r 3  0E C0 1F 30  
0038DCr 3  33 C8 27 F4  
0038F4r 3  00 00 01 C0          .byte 0,0,1,192,3,176,7,204,12,242,9,253,143,255,159,235,217,205,192,30,64,122,3,245,1,171,128,0,135,131,15,7
0038F8r 3  03 B0 07 CC  
0038FCr 3  0C F2 09 FD  
003914r 3  00 00 00 70          .byte 0,0,0,112,0,236,1,243,131,60,66,127,227,255,231,250,118,115,176,7,144,30,64,253,192,106,32,0,225,224,195,193
003918r 3  00 EC 01 F3  
00391Cr 3  83 3C 42 7F  
003934r 3  00 00 00 1C          .byte 0,0,0,28,0,59,192,124,32,207,208,159,248,255,185,254,221,156,236,1,164,7,80,63,176,26,8,0,56,120,112,240
003938r 3  00 3B C0 7C  
00393Cr 3  20 CF D0 9F  
003954r 3  00 00 00 00          .byte 0,0,0,0,7,0,14,192,31,48,51,200,39,244,63,234,127,190,103,110,0,236,15,216,15,212,6,168,0,0,2,240
003958r 3  07 00 0E C0  
00395Cr 3  1F 30 33 C8  
003974r 3  00 00 00 00          .byte 0,0,0,0,1,192,3,176,7,204,12,242,9,253,143,250,159,239,153,219,0,59,3,246,3,245,1,170,0,0,0,188
003978r 3  01 C0 03 B0  
00397Cr 3  07 CC 0C F2  
003994r 3  00 00 00 00          .byte 0,0,0,0,0,112,0,236,1,243,131,60,66,127,163,254,231,251,230,118,192,14,128,253,64,253,128,106,0,0,0,47
003998r 3  00 70 00 EC  
00399Cr 3  01 F3 83 3C  
0039B4r 3  00 00 00 00          .byte 0,0,0,0,0,28,0,59,192,124,32,207,208,159,168,255,249,254,185,157,176,3,96,63,80,63,160,26,0,0,192,11
0039B8r 3  00 1C 00 3B  
0039BCr 3  C0 7C 20 CF  
0039D4r 3  00 00 07 00          .byte 0,0,7,0,14,192,31,48,51,200,39,244,63,254,127,238,103,94,0,186,15,180,15,200,5,80,0,160,7,24,14,120
0039D8r 3  0E C0 1F 30  
0039DCr 3  33 C8 27 F4  
0039F4r 3  00 00 01 C0          .byte 0,0,1,192,3,176,7,204,12,242,9,253,143,255,159,251,153,215,128,46,3,237,3,242,1,84,0,40,1,198,3,158
0039F8r 3  03 B0 07 CC  
0039FCr 3  0C F2 09 FD  
003A14r 3  00 00 00 70          .byte 0,0,0,112,0,236,1,243,131,60,66,127,227,255,231,254,230,117,160,11,64,251,128,252,0,85,0,10,128,113,128,231
003A18r 3  00 EC 01 F3  
003A1Cr 3  83 3C 42 7F  
003A34r 3  00 00 00 1C          .byte 0,0,0,28,0,59,192,124,32,207,208,159,248,255,185,255,121,157,232,2,208,62,32,63,64,21,128,2,96,28,224,57
003A38r 3  00 3B C0 7C  
003A3Cr 3  20 CF D0 9F  
003A54r 3  00 00 03 C0          .byte 0,0,3,192,6,64,13,144,11,168,11,112,12,230,1,218,2,186,7,52,14,76,28,120,56,0,112,0,32,0,0,0
003A58r 3  06 40 0D 90  
003A5Cr 3  0B A8 0B 70  
003A74r 3  00 00 00 F0          .byte 0,0,0,240,1,144,3,100,2,234,2,220,131,57,128,118,128,174,1,205,3,147,7,30,14,0,28,0,8,0,0,0
003A78r 3  01 90 03 64  
003A7Cr 3  02 EA 02 DC  
003A94r 3  00 00 00 3C          .byte 0,0,0,60,0,100,0,217,128,186,0,183,96,206,160,29,160,43,64,115,192,228,129,199,3,128,7,0,2,0,0,0
003A98r 3  00 64 00 D9  
003A9Cr 3  80 BA 00 B7  
003AB4r 3  00 00 00 0F          .byte 0,0,0,15,0,25,64,54,160,46,192,45,152,51,104,7,232,10,208,28,48,57,224,113,0,224,1,192,0,128,0,0
003AB8r 3  00 19 40 36  
003ABCr 3  A0 2E C0 2D  
003AD4r 3  00 00 01 80          .byte 0,0,1,128,1,128,1,128,1,128,1,128,1,128,9,144,24,24,45,180,45,180,45,180,45,180,24,24,9,144,0,0
003AD8r 3  01 80 01 80  
003ADCr 3  01 80 01 80  
003AF4r 3  00 00 00 60          .byte 0,0,0,96,0,96,0,96,0,96,0,96,0,96,2,100,6,6,11,109,11,109,11,109,11,109,6,6,2,100,0,0
003AF8r 3  00 60 00 60  
003AFCr 3  00 60 00 60  
003B14r 3  00 00 00 18          .byte 0,0,0,24,0,24,0,24,0,24,0,24,0,24,0,153,129,129,66,219,66,219,66,219,66,219,129,129,0,153,0,0
003B18r 3  00 18 00 18  
003B1Cr 3  00 18 00 18  
003B34r 3  00 00 00 06          .byte 0,0,0,6,0,6,0,6,0,6,0,6,0,6,64,38,96,96,208,182,208,182,208,182,208,182,96,96,64,38,0,0
003B38r 3  00 06 00 06  
003B3Cr 3  00 06 00 06  
003B54r 3  00 00 03 C0          .byte 0,0,3,192,2,96,9,176,21,208,14,208,103,48,91,128,93,64,44,224,50,112,30,56,0,28,0,14,0,4,0,0
003B58r 3  02 60 09 B0  
003B5Cr 3  15 D0 0E D0  
003B74r 3  00 00 00 F0          .byte 0,0,0,240,0,152,2,108,5,116,3,180,25,204,22,224,23,80,11,56,12,156,7,142,0,7,128,3,0,1,0,0
003B78r 3  00 98 02 6C  
003B7Cr 3  05 74 03 B4  
003B94r 3  00 00 00 3C          .byte 0,0,0,60,0,38,0,155,1,93,0,237,6,115,5,184,5,212,2,206,3,39,129,227,192,1,224,0,64,0,0,0
003B98r 3  00 26 00 9B  
003B9Cr 3  01 5D 00 ED  
003BB4r 3  00 00 00 0F          .byte 0,0,0,15,128,9,192,38,64,87,64,59,193,156,1,110,1,117,128,179,192,201,224,120,112,0,56,0,16,0,0,0
003BB8r 3  80 09 C0 26  
003BBCr 3  40 57 40 3B  
003BD4r 3  00 00 00 00          .byte 0,0,0,0,3,224,15,16,30,160,18,68,1,28,14,192,26,16,25,72,26,168,1,68,26,12,3,0,1,128,7,0
003BD8r 3  03 E0 0F 10  
003BDCr 3  1E A0 12 44  
003BF4r 3  00 00 00 00          .byte 0,0,0,0,0,248,3,196,7,168,4,145,0,71,3,176,6,132,6,82,6,170,0,81,6,131,0,192,0,96,1,192
003BF8r 3  00 F8 03 C4  
003BFCr 3  07 A8 04 91  
003C14r 3  00 00 00 00          .byte 0,0,0,0,0,62,0,241,1,234,65,36,192,17,0,236,1,161,129,148,129,170,64,20,193,160,0,48,0,24,0,112
003C18r 3  00 3E 00 F1  
003C1Cr 3  01 EA 41 24  
003C34r 3  00 00 00 00          .byte 0,0,0,0,128,15,64,60,128,122,16,73,112,4,0,59,64,104,32,101,160,106,16,5,48,104,0,12,0,6,0,28
003C38r 3  80 0F 40 3C  
003C3Cr 3  80 7A 10 49  
003C54r 3  00 00 03 E0          .byte 0,0,3,224,31,16,14,160,2,68,1,28,6,192,14,40,25,76,2,166,48,80,1,128,3,0,0,0,14,0,0,0
003C58r 3  1F 10 0E A0  
003C5Cr 3  02 44 01 1C  
003C74r 3  00 00 00 F8          .byte 0,0,0,248,7,196,3,168,0,145,0,71,1,176,3,138,6,83,128,169,12,20,0,96,0,192,0,0,3,128,0,0
003C78r 3  07 C4 03 A8  
003C7Cr 3  00 91 00 47  
003C94r 3  00 00 00 3E          .byte 0,0,0,62,1,241,0,234,64,36,192,17,0,108,128,226,193,148,96,42,3,5,0,24,0,48,0,0,0,224,0,0
003C98r 3  01 F1 00 EA  
003C9Cr 3  40 24 C0 11  
003CB4r 3  00 00 80 0F          .byte 0,0,128,15,64,124,128,58,16,9,112,4,0,27,160,56,48,101,152,10,64,193,0,6,0,12,0,0,0,56,0,0
003CB8r 3  40 7C 80 3A  
003CBCr 3  10 09 70 04  
003CD4r 3  19 E0 0F 10          .byte 25,224,15,16,102,160,2,69,49,29,28,194,12,28,1,72,2,160,5,64,0,160,3,0,3,0,1,0,6,0,14,0
003CD8r 3  66 A0 02 45  
003CDCr 3  31 1D 1C C2  
003CF4r 3  06 78 03 C4          .byte 6,120,3,196,25,168,64,145,76,71,135,48,3,7,0,82,0,168,1,80,0,40,0,192,0,192,0,64,1,128,3,128
003CF8r 3  19 A8 40 91  
003CFCr 3  4C 47 87 30  
003D14r 3  01 9E 00 F1          .byte 1,158,0,241,6,106,80,36,211,17,33,204,192,193,128,20,0,42,0,84,0,10,0,48,0,48,0,16,0,96,0,224
003D18r 3  06 6A 50 24  
003D1Cr 3  D3 11 21 CC  
003D34r 3  80 67 40 3C          .byte 128,103,64,60,129,154,20,9,116,196,8,115,112,48,32,5,128,10,0,21,128,2,0,12,0,12,0,4,0,24,0,56
003D38r 3  81 9A 14 09  
003D3Cr 3  74 C4 08 73  
003D54r 3  00 00 00 00          .byte 0,0,0,0,7,192,8,240,5,120,34,72,56,128,3,112,8,88,18,152,21,88,34,128,48,88,0,192,1,128,0,224
003D58r 3  07 C0 08 F0  
003D5Cr 3  05 78 22 48  
003D74r 3  00 00 00 00          .byte 0,0,0,0,1,240,2,60,1,94,8,146,14,32,0,220,2,22,4,166,5,86,8,160,12,22,0,48,0,96,0,56
003D78r 3  01 F0 02 3C  
003D7Cr 3  01 5E 08 92  
003D94r 3  00 00 00 00          .byte 0,0,0,0,0,124,0,143,128,87,130,36,3,136,0,55,128,133,129,41,129,85,2,40,131,5,0,12,0,24,0,14
003D98r 3  00 7C 00 8F  
003D9Cr 3  80 57 82 24  
003DB4r 3  00 00 00 00          .byte 0,0,0,0,0,31,192,35,224,21,32,137,0,226,192,13,96,33,96,74,96,85,0,138,96,193,0,3,0,6,128,3
003DB8r 3  00 1F C0 23  
003DBCr 3  E0 15 20 89  
003DD4r 3  00 00 07 C0          .byte 0,0,7,192,8,248,5,112,34,64,56,128,3,96,20,112,50,152,101,64,10,12,1,128,0,192,0,0,0,112,0,0
003DD8r 3  08 F8 05 70  
003DDCr 3  22 40 38 80  
003DF4r 3  00 00 01 F0          .byte 0,0,1,240,2,62,1,92,8,144,14,32,0,216,5,28,12,166,25,80,2,131,0,96,0,48,0,0,0,28,0,0
003DF8r 3  02 3E 01 5C  
003DFCr 3  08 90 0E 20  
003E14r 3  00 00 00 7C          .byte 0,0,0,124,128,143,0,87,2,36,3,136,0,54,1,71,131,41,6,84,192,160,0,24,0,12,0,0,0,7,0,0
003E18r 3  80 8F 00 57  
003E1Cr 3  02 24 03 88  
003E34r 3  00 00 00 1F          .byte 0,0,0,31,224,35,192,21,0,137,0,226,128,13,192,81,96,202,1,149,48,40,0,6,0,3,0,0,192,1,0,0
003E38r 3  E0 23 C0 15  
003E3Cr 3  00 89 00 E2  
003E54r 3  07 98 08 F0          .byte 7,152,8,240,5,102,162,64,184,140,67,56,56,48,18,128,5,64,2,160,5,0,0,192,0,192,0,128,0,96,0,112
003E58r 3  05 66 A2 40  
003E5Cr 3  B8 8C 43 38  
003E74r 3  01 E6 02 3C          .byte 1,230,2,60,129,89,40,144,46,35,16,206,14,12,4,160,1,80,0,168,1,64,0,48,0,48,0,32,0,24,0,28
003E78r 3  81 59 28 90  
003E7Cr 3  2E 23 10 CE  
003E94r 3  80 79 00 8F          .byte 128,121,0,143,96,86,10,36,203,136,132,51,3,131,1,40,0,84,0,42,0,80,0,12,0,12,0,8,0,6,0,7
003E98r 3  60 56 0A 24  
003E9Cr 3  CB 88 84 33  
003EB4r 3  60 1E C0 23          .byte 96,30,192,35,152,21,2,137,50,226,225,12,192,224,0,74,0,21,128,10,0,20,0,3,0,3,0,2,128,1,192,1
003EB8r 3  98 15 02 89  
003EBCr 3  32 E2 E1 0C  
003ED4r 3               frmlst:
003ED4r 3  00 03                .byte 0,3
003ED6r 3  03 03                .byte 3,3
003ED8r 3  06 03                .byte 6,3
003EDAr 3  09 03                .byte 9,3
003EDCr 3  0C 03                .byte 12,3
003EDEr 3  0F 03                .byte 15,3
003EE0r 3  12 03                .byte 18,3
003EE2r 3  15 02                .byte 21,2
003EE4r 3  17 02                .byte 23,2
003EE6r 3  19 03                .byte 25,3
003EE8r 3  1C 02                .byte 28,2
003EEAr 3  1E 02                .byte 30,2
003EECr 3  20 03                .byte 32,3
003EEEr 3  23 03                .byte 35,3
003EF0r 3  26 03                .byte 38,3
003EF2r 3  29 03                .byte 41,3
003EF4r 3  2C 03                .byte 44,3
003EF6r 3  2F 03 32 00          .byte 47,3,50,0
003EFAr 3               scdat:
003EFAr 3  ED 00 99 00          .word 237,153,171,289,281,188,293,297,295,213,359,257
003EFEr 3  AB 00 21 01  
003F02r 3  19 01 BC 00  
003F12r 3  FF 00 45 2D          .byte 255,0,69,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,255,0,6,47,48,47,48,47,48,47,48,47,48,47
003F16r 3  2E 2D 2E 2D  
003F1Ar 3  2E 2D 2E 2D  
003F33r 3  30 2F 30 2F          .byte 48,47,48,47,48,255,0,6,45,46,255,76,12,45,46,255,0,6,47,48,76,255,75,11,47,48,255,0,6,45,46,76,255,75,11
003F37r 3  30 FF 00 06  
003F3Br 3  2D 2E FF 4C  
003F56r 3  2D 2E FF 00          .byte 45,46,255,0,6,47,48,76,75,32,32,32,255,75,7,47,48,255,0,6,45,46,76,75,75,76,76,76,255,75,6,45,46
003F5Ar 3  06 2F 30 4C  
003F5Er 3  4B 20 20 20  
003F77r 3  FF 00 06 2F          .byte 255,0,6,47,48,76,255,75,11,47,48,255,0,6,45,46,76,255,75,6,90,90,90,75,75,45,46,255,0,6,47,48,76
003F7Br 3  30 4C FF 4B  
003F7Fr 3  0B 2F 30 FF  
003F98r 3  FF 4B 07 4C          .byte 255,75,7,76,76,76,75,47,48,255,0,6,45,46,76,255,75,11,45,46,255,0,6,47,48,76,75,90,90,90,255,75,7
003F9Cr 3  4C 4C 4B 2F  
003FA0r 3  30 FF 00 06  
003FB9r 3  2F 30 FF 00          .byte 47,48,255,0,6,45,46,76,75,75,76,76,76,255,75,6,45,46,255,0,6,47,48,76,255,75,11,47,48,255,0,6,45
003FBDr 3  06 2D 2E 4C  
003FC1r 3  4B 4B 4C 4C  
003FDAr 3  2E 2D 2E 2D          .byte 46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,255,0,6,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47
003FDEr 3  2E 2D 2E 2D  
003FE2r 3  2E 2D 2E 2D  
003FFBr 3  30 FF 00 45          .byte 48,255,0,69
003FFFr 3  FF 00 43 FF          .byte 255,0,67,255,49,20,0,0,49,255,78,18,49,0,0,49,78,255,77,17,49,0,0,49,78,255,77,17,49,0,0,49,78
004003r 3  31 14 00 00  
004007r 3  31 FF 4E 12  
004020r 3  FF 4D 11 31          .byte 255,77,17,49,0,0,49,78,255,77,17,49,0,0,49,78,54,77,77,255,79,8,77,77,77,8,10,77,49,0,0,49,78
004024r 3  00 00 31 4E  
004028r 3  FF 4D 11 31  
004041r 3  36 4D 4D 4D          .byte 54,77,77,77,255,78,8,77,77,77,78,78,49,0,0,49,78,54,255,77,16,49,0,0,49,78,54,255,77,16,49,0,0
004045r 3  FF 4E 08 4D  
004049r 3  4D 4D 4E 4E  
004062r 3  31 4E 36 FF          .byte 49,78,54,255,77,10,1,1,1,77,77,77,49,0,0,49,78,54,255,77,11,78,78,78,77,77,49,0,0,49,65,65,255,77,16
004066r 3  4D 0A 01 01  
00406Ar 3  01 4D 4D 4D  
004085r 3  31 00 00 31          .byte 49,0,0,49,49,49,78,255,77,15,49,0,0,255,49,20,255,0,89
004089r 3  31 31 4E FF  
00408Dr 3  4D 0F 31 00  
004098r 3  FF 48 2C 29          .byte 255,72,44,41,42,43,44,255,72,101,31,32,32,33,255,72,19,34,35,72,72,26,255,72,8,41,42,43,41,42,43,44,72,72
00409Cr 3  2A 2B 2C FF  
0040A0r 3  48 65 1F 20  
0040BAr 3  24 25 48 48          .byte 36,37,72,72,25,255,72,17,36,37,72,72,26,255,72,4,38,39,40,255,72,10,36,37,72,72,25,255,72,17,36,37,72,72
0040BEr 3  19 FF 48 11  
0040C2r 3  24 25 48 48  
0040DCr 3  18 19 FF 48          .byte 24,25,255,72,16,36,37,72,72,25,255,72,17,36,37,72,72,26,72,72,72,39,255,72,13,36,37,72,72,25,255,72,17
0040E0r 3  10 24 25 48  
0040E4r 3  48 19 FF 48  
0040FDr 3  24 25 48 48          .byte 36,37,72,72,26,255,72,17,38,40,72,72,25,24,25,26,255,72,10,27,24,25,24,25,24,25,24,24,25,24,25,255,72,10
004101r 3  1A FF 48 11  
004105r 3  26 28 48 48  
00411Fr 3  18 19 18 19          .byte 24,25,24,25,24,25,24,25,255,28,22,29,30,29,30,29,30,29,30,29,30,29,30,29,30,29,30,29,30,29,30,29,30
004123r 3  18 19 18 19  
004127r 3  FF 1C 16 1D  
004140r 3  FF 48 16             .byte 255,72,22
004143r 3  FF 00 16 FF          .byte 255,0,22,255,1,23,7,2,2,3,1,7,2,2,3,1,1,7,2,2,3,1,7,2,2,3,1,1,4,71,71,4,1
004147r 3  01 17 07 02  
00414Br 3  02 03 01 07  
004164r 3  04 47 47 04          .byte 4,71,71,4,1,1,4,71,71,4,1,4,71,71,4,1,1,4,71,70,4,1,4,71,70,4,1,1,4,71,70,4,1
004168r 3  01 01 04 47  
00416Cr 3  47 04 01 04  
004185r 3  04 47 46 04          .byte 4,71,70,4,1,1,6,2,2,5,1,4,71,70,6,2,2,5,71,70,4,1,6,2,2,5,255,1,7,4,71,70,70
004189r 3  01 01 06 02  
00418Dr 3  02 05 01 04  
0041A6r 3  FF 47 04 46          .byte 255,71,4,70,4,255,1,6,7,255,2,5,5,71,255,70,7,6,255,2,5,3,4,255,71,7,255,70,8,255,71,5,4,4
0041AAr 3  04 FF 01 06  
0041AEr 3  07 FF 02 05  
0041C8r 3  47 FF 46 13          .byte 71,255,70,19,4,4,71,255,70,19,4,4,71,255,70,8,8,10,255,70,9,4,4,71,255,70,9,71,71,255,70,8,4,4
0041CCr 3  04 04 47 FF  
0041D0r 3  46 13 04 04  
0041EAr 3  47 FF 46 13          .byte 71,255,70,19,4,6,255,2,5,3,255,70,8,7,255,2,5,5,255,1,6,4,71,255,70,7,4,255,1,7,7,2,2
0041EEr 3  04 06 FF 02  
0041F2r 3  05 03 FF 46  
00420Br 3  03 01 04 47          .byte 3,1,4,71,70,7,2,2,3,70,70,4,1,7,2,2,3,1,1,4,71,71,4,1,4,71,70,4,1,1,4,71,70
00420Fr 3  46 07 02 02  
004213r 3  03 46 46 04  
00422Cr 3  04 01 04 47          .byte 4,1,4,71,71,4,1,1,4,71,70,4,1,4,71,70,4,1,1,4,71,70,4,1,4,71,70,4,1,1,6,2,2
004230r 3  47 04 01 01  
004234r 3  04 47 46 04  
00424Dr 3  05 01 06 02          .byte 5,1,6,2,2,5,1,1,6,2,2,5,1,6,2,2,5,255,1,23,255,0,22
004251r 3  02 05 01 01  
004255r 3  06 02 02 05  
004264r 3  00 00 44 45          .byte 0,0,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,255,0,5,69,84,84,68,255,84,8,69,68,69,68
004268r 3  44 45 44 45  
00426Cr 3  44 45 44 45  
004285r 3  45 FF 00 05          .byte 69,255,0,5,68,84,83,69,84,255,83,8,84,84,84,68,255,0,5,69,84,83,68,84,255,83,11,69,255,0,5,68,84
004289r 3  44 54 53 45  
00428Dr 3  54 FF 53 08  
0042A6r 3  53 53 54 FF          .byte 83,83,84,255,83,11,68,255,0,5,69,84,255,83,14,69,255,0,5,68,69,68,69,68,69,68,69,68,69,255,83,6,68
0042AAr 3  53 0B 44 FF  
0042AEr 3  00 05 45 54  
0042C7r 3  FF 00 05 45          .byte 255,0,5,69,255,84,10,83,85,85,83,83,69,255,0,5,68,84,255,83,11,84,84,83,68,255,0,5,69,84,255,83,14
0042CBr 3  FF 54 0A 53  
0042CFr 3  55 55 53 53  
0042E8r 3  45 FF 00 05          .byte 69,255,0,5,68,84,255,83,12,85,85,68,255,0,5,69,84,255,83,13,84,69,255,0,5,68,84,255,83,14,68,255,0,5
0042ECr 3  44 54 FF 53  
0042F0r 3  0C 55 55 44  
00430Ar 3  45 54 FF 53          .byte 69,84,255,83,4,69,68,69,68,69,68,69,68,69,68,69,255,0,5,68,84,255,83,5,255,84,8,69,68,255,0,5,69
00430Er 3  04 45 44 45  
004312r 3  44 45 44 45  
00432Br 3  55 55 FF 53          .byte 85,85,255,83,12,68,69,255,0,5,68,84,84,84,255,83,11,69,68,255,0,5,69,84,83,83,83,85,85,255,83,8,68
00432Fr 3  0C 44 45 FF  
004333r 3  00 05 44 54  
00434Cr 3  45 FF 00 05          .byte 69,255,0,5,68,84,255,83,4,84,84,255,83,7,69,68,255,0,5,69,84,255,83,13,68,69,255,0,5,68,69,68,69
004350r 3  44 54 FF 53  
004354r 3  04 54 54 FF  
00436Dr 3  44 45 44 45          .byte 68,69,68,69,68,69,68,69,68,69,68,69,68,255,0,25
004371r 3  44 45 44 45  
004375r 3  44 45 44 45  
00437Dr 3  FF 32 17 FF          .byte 255,50,23,255,92,20,50,50,92,255,91,19,50,50,92,255,91,19,50,50,92,255,91,19,50,50,92,255,91,19,50,50,92
004381r 3  5C 14 32 32  
004385r 3  5C FF 5B 13  
00439Er 3  FF 5B 05 33          .byte 255,91,5,51,255,52,7,53,255,91,5,50,50,92,255,91,6,255,92,9,255,91,4,50,50,92,255,91,15,8,9,10,91
0043A2r 3  FF 34 07 35  
0043A6r 3  FF 5B 05 32  
0043BFr 3  32 32 5C 33          .byte 50,50,92,51,52,53,255,91,13,92,92,92,50,50,92,91,92,92,92,255,91,15,50,50,92,255,91,19,50,50,92,91,91,91
0043C3r 3  34 35 FF 5B  
0043C7r 3  0D 5C 5C 5C  
0043E1r 3  33 FF 34 07          .byte 51,255,52,7,53,255,91,7,50,50,92,255,91,4,255,92,9,255,91,6,50,50,92,255,91,19,50,50,92,255,91,14,51
0043E5r 3  35 FF 5B 07  
0043E9r 3  32 32 5C FF  
004402r 3  34 35 5B 5B          .byte 52,53,91,91,50,50,92,255,91,15,92,92,92,91,50,50,92,255,91,19,50,50,92,255,91,5,51,255,52,7,53,255,91,5
004406r 3  32 32 5C FF  
00440Ar 3  5B 0F 5C 5C  
004424r 3  32 32 5C FF          .byte 50,50,92,255,91,6,255,92,9,255,91,4,50,50,92,255,91,19,255,50,23
004428r 3  5B 06 FF 5C  
00442Cr 3  09 FF 5B 04  
004439r 3  FF 00 18 37          .byte 255,0,24,55,56,82,81,55,56,55,56,55,56,55,56,55,56,55,56,55,56,255,0,4,57,58,82,81,57,58,57,58,57
00443Dr 3  38 52 51 37  
004441r 3  38 37 38 37  
00445Ar 3  3A 39 3A 39          .byte 58,57,58,57,58,57,58,57,58,255,0,4,55,56,82,81,81,255,82,11,55,56,255,0,4,57,58,82,255,81,13,57,58
00445Er 3  3A 39 3A 39  
004462r 3  3A FF 00 04  
00447Br 3  FF 00 04 37          .byte 255,0,4,55,56,55,56,255,81,12,55,56,255,0,4,57,58,57,58,82,255,81,11,57,58,255,0,4,55,56,82,82,82
00447Fr 3  38 37 38 FF  
004483r 3  51 0C 37 38  
00449Cr 3  FF 51 0B 37          .byte 255,81,11,55,56,255,0,4,57,58,82,81,38,255,39,8,40,81,81,57,58,255,0,4,55,56,82,81,81,255,82,10,81
0044A0r 3  38 FF 00 04  
0044A4r 3  39 3A 52 51  
0044BDr 3  37 38 FF 00          .byte 55,56,255,0,4,57,58,82,255,81,13,57,58,255,0,4,55,56,82,255,81,13,55,56,255,0,4,57,58,82,255,81,13
0044C1r 3  04 39 3A 52  
0044C5r 3  FF 51 0D 39  
0044DEr 3  39 3A FF 00          .byte 57,58,255,0,4,55,56,82,81,81,38,255,39,9,40,55,56,255,0,4,57,58,82,81,81,81,255,82,10,57,58,255,0,4
0044E2r 3  04 37 38 52  
0044E6r 3  51 51 26 FF  
004500r 3  37 38 52 FF          .byte 55,56,82,255,81,13,55,56,255,0,4,57,58,38,40,255,81,12,57,58,255,0,4,55,56,82,82,82,255,81,8,8,10
004504r 3  51 0D 37 38  
004508r 3  FF 00 04 39  
004521r 3  51 37 38 FF          .byte 81,55,56,255,0,4,57,58,82,255,81,11,82,82,57,58,255,0,4,55,56,82,81,55,56,55,56,55,56,55,56,55,56
004525r 3  00 04 39 3A  
004529r 3  52 FF 51 0B  
004542r 3  37 38 37 38          .byte 55,56,55,56,255,0,4,57,58,82,81,57,58,57,58,57,58,57,58,57,58,57,58,57,58,255,0,24
004546r 3  FF 00 04 39  
00454Ar 3  3A 52 51 39  
00455Er 3  3B 3C 3B 3C          .byte 59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,59,60,61,62,61,62,61,62,61,62,61,62,61
004562r 3  3B 3C 3B 3C  
004566r 3  3B 3C 3B 3C  
00457Fr 3  3E 3D 3E 3D          .byte 62,61,62,61,62,61,62,61,62,61,62,59,60,255,71,18,59,60,61,62,71,255,70,17,61,62,59,60,71,255,70,17,59
004583r 3  3E 3D 3E 3D  
004587r 3  3E 3D 3E 3B  
0045A0r 3  3C 3D 3E 47          .byte 60,61,62,71,255,70,17,61,62,59,60,71,255,70,15,59,60,59,60,61,62,71,70,70,70,255,80,10,70,70,61,62,61
0045A4r 3  FF 46 11 3D  
0045A8r 3  3E 3B 3C 47  
0045C1r 3  3E 3B 3C 47          .byte 62,59,60,71,70,70,70,255,64,10,70,70,59,60,59,60,61,62,71,255,70,4,255,71,10,70,61,62,61,62,59,60,59
0045C5r 3  46 46 46 FF  
0045C9r 3  40 0A 46 46  
0045E2r 3  3C FF 46 0F          .byte 60,255,70,15,71,59,60,61,62,61,62,71,255,70,15,61,62,59,60,59,60,59,60,255,70,14,59,60,61,62,61,62,61
0045E6r 3  47 3B 3C 3D  
0045EAr 3  3E 3D 3E 47  
004603r 3  3E 47 46 3F          .byte 62,71,70,63,63,63,70,70,63,63,63,255,70,4,61,62,59,60,255,71,5,70,70,71,71,71,70,70,71,71,71,70,70,70
004607r 3  3F 3F 46 46  
00460Br 3  3F 3F 3F FF  
004625r 3  3B 3C 3D 3E          .byte 59,60,61,62,71,255,70,17,61,62,59,60,71,255,70,15,59,60,59,60,61,62,71,255,70,15,61,62,61,62,59,60,71
004629r 3  47 FF 46 11  
00462Dr 3  3D 3E 3B 3C  
004646r 3  FF 46 0D 3B          .byte 255,70,13,59,60,59,60,59,60,61,62,71,255,70,13,61,62,61,62,61,62,59,60,59,60,59,60,59,60,59,60,59,60
00464Ar 3  3C 3B 3C 3B  
00464Er 3  3C 3D 3E 47  
004667r 3  3B 3C 3B 3C          .byte 59,60,59,60,59,60,59,60,59,60,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62
00466Br 3  3B 3C 3B 3C  
00466Fr 3  3B 3C 3D 3E  
004687r 3  00 0E 0B 0C          .byte 0,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,0,0,11,12,13,14,11,12,13,14,11,12
00468Br 3  0D 0E 0B 0C  
00468Fr 3  0D 0E 0B 0C  
0046A8r 3  0D 0E 0B 0C          .byte 13,14,11,12,13,14,11,12,13,14,0,0,12,13,255,74,16,14,11,0,0,13,14,74,255,73,15,11,12,0,0,14,11
0046ACr 3  0D 0E 0B 0C  
0046B0r 3  0D 0E 00 00  
0046C9r 3  4A FF 49 0F          .byte 74,255,73,15,12,13,0,0,11,12,74,255,73,5,86,87,87,88,255,73,6,13,14,0,0,12,13,74,255,73,6,255,74,4
0046CDr 3  0C 0D 00 00  
0046D1r 3  0B 0C 4A FF  
0046EBr 3  FF 49 05 0E          .byte 255,73,5,14,11,0,0,13,14,74,255,73,15,11,12,0,0,14,11,74,255,73,15,12,13,0,0,11,12,74,73,73,255,15,10
0046EFr 3  0B 00 00 0D  
0046F3r 3  0E 4A FF 49  
00470Er 3  49 49 49 0D          .byte 73,73,73,13,14,0,0,12,13,74,73,73,73,255,74,10,73,73,14,11,0,0,13,14,74,255,73,15,11,12,0,0,14
004712r 3  0E 00 00 0C  
004716r 3  0D 4A 49 49  
00472Fr 3  0B 4A 49 49          .byte 11,74,73,73,255,89,10,73,73,73,12,13,0,0,11,12,74,73,73,73,255,74,10,73,73,13,14,0,0,12,13,74,255,73,15
004733r 3  FF 59 0A 49  
004737r 3  49 49 0C 0D  
004752r 3  0E 0B 00 00          .byte 14,11,0,0,13,14,74,255,73,5,8,9,9,10,255,73,6,11,12,0,0,14,11,74,255,73,6,255,74,4,255,73,5
004756r 3  0D 0E 4A FF  
00475Ar 3  49 05 08 09  
004773r 3  0C 0D 00 00          .byte 12,13,0,0,11,12,74,255,73,15,13,14,0,0,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14
004777r 3  0B 0C 4A FF  
00477Br 3  49 0F 0D 0E  
004794r 3  0B 00 00 0D          .byte 11,0,0,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,13,14,11,12,255,0,45
004798r 3  0E 0B 0C 0D  
00479Cr 3  0E 0B 0C 0D  
0047AEr 3  FF 00 42 42          .byte 255,0,66,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,67,255,0,9,67,66,255,0,9
0047B2r 3  43 42 43 42  
0047B6r 3  43 42 43 42  
0047D0r 3  42 42 FF 00          .byte 66,66,255,0,9,66,67,255,0,9,67,67,255,0,9,67,66,255,0,9,66,66,255,0,7,66,67,66,67,66,67,255,0,7
0047D4r 3  09 42 43 FF  
0047D8r 3  00 09 43 43  
0047F2r 3  43 43 FF 00          .byte 67,67,255,0,7,67,255,0,4,66,255,0,7,66,66,255,0,5,66,67,66,255,0,4,67,66,67,255,0,5,67,67,255,0,20
0047F6r 3  07 43 FF 00  
0047FAr 3  04 42 FF 00  
004815r 3  42 42 FF 00          .byte 66,66,255,0,20,67,67,1,1,255,0,16,1,1,66,66,67,66,255,0,16,67,66,67,67,66,67,255,0,16,66,67,66,66
004819r 3  14 43 43 01  
00481Dr 3  01 FF 00 10  
004837r 3  10 11 14 15          .byte 16,17,20,21,255,0,12,16,17,20,21,67,67,18,19,22,23,255,0,12,18,19,22,23,66,66,20,21,16,17,255,0,12
00483Br 3  FF 00 0C 10  
00483Fr 3  11 14 15 43  
004858r 3  14 15 10 11          .byte 20,21,16,17,67,67,22,23,18,19,255,1,12,22,23,18,19,66,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66
00485Cr 3  43 43 16 17  
004860r 3  12 13 FF 01  
004879r 3  43 42 43 42          .byte 67,66,67,66,67,66,67,255,0,44
00487Dr 3  43 42 43 FF  
004881r 3  00 2C        
004883r 3  5F 60 5F 60          .byte 95,96,95,96,95,96,95,96,95,96,95,96,95,96,95,96,95,96,95,96,0,0,97,98,97,98,97,98,97,98,97,98,97
004887r 3  5F 60 5F 60  
00488Br 3  5F 60 5F 60  
0048A4r 3  62 61 62 61          .byte 98,97,98,97,98,97,98,97,98,0,0,95,96,255,76,16,95,96,0,0,97,98,76,255,75,15,97,98,0,0,95,96,76
0048A8r 3  62 61 62 61  
0048ACr 3  62 00 00 5F  
0048C5r 3  FF 4B 0F 5F          .byte 255,75,15,95,96,0,0,97,98,99,99,75,75,255,100,6,94,94,255,100,4,97,98,0,0,95,96,76,76,76,75,100,255,76,6
0048C9r 3  60 00 00 61  
0048CDr 3  62 63 63 4B  
0048E8r 3  4B FF 64 04          .byte 75,255,100,4,95,96,0,0,97,98,76,75,75,75,100,76,255,75,6,255,100,4,97,98,0,0,95,96,99,99,75,75,100
0048ECr 3  5F 60 00 00  
0048F0r 3  61 62 4C 4B  
004909r 3  5E 5E FF 63          .byte 94,94,255,99,5,255,100,4,95,96,0,0,97,98,76,76,76,75,100,76,75,75,255,76,8,97,98,0,0,95,96,76,75,75,75
00490Dr 3  05 FF 64 04  
004911r 3  5F 60 00 00  
00492Cr 3  64 4C FF 4B          .byte 100,76,255,75,10,95,96,0,0,97,98,255,99,4,100,76,75,99,99,99,255,75,6,97,98,0,0,95,96,76,76,100,100,100
004930r 3  0A 5F 60 00  
004934r 3  00 61 62 FF  
00494Er 3  4C 4B 4B 4C          .byte 76,75,75,76,76,76,255,75,5,95,96,0,0,97,98,76,75,100,100,100,76,255,75,10,97,98,0,0,95,96,99,99,255,100,12
004952r 3  4C 4C FF 4B  
004956r 3  05 5F 60 00  
004971r 3  4B 4B 5F 60          .byte 75,75,95,96,0,0,97,98,76,76,100,255,76,10,100,76,75,97,98,0,0,95,96,76,75,100,76,255,75,9,100,76,75
004975r 3  00 00 61 62  
004979r 3  4C 4C 64 FF  
004992r 3  5F 60 00 00          .byte 95,96,0,0,97,98,99,99,100,76,255,75,9,100,76,75,97,98,0,0,95,96,255,76,4,255,75,10,76,75,95,96,0,0
004996r 3  61 62 63 63  
00499Ar 3  64 4C FF 4B  
0049B4r 3  61 62 4C FF          .byte 97,98,76,255,75,15,97,98,0,0,95,96,95,96,95,96,95,96,95,96,95,96,95,96,95,96,95,96,95,96,0,0,97
0049B8r 3  4B 0F 61 62  
0049BCr 3  00 00 5F 60  
0049D5r 3  62 61 62 61          .byte 98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,0,0
0049D9r 3  62 61 62 61  
0049DDr 3  62 61 62 61  
0049EAr 3  FF 5D 17 FF          .byte 255,93,23,255,74,20,93,93,74,255,73,19,93,93,74,255,73,19,93,93,74,73,73,73,93,93,93,255,73,10,255,93,5
0049EEr 3  4A 14 5D 5D  
0049F2r 3  4A FF 49 13  
004A0Br 3  4A FF 49 04          .byte 74,255,73,4,74,93,74,255,73,9,93,74,74,93,93,74,255,73,5,255,93,12,74,73,93,93,90,90,255,73,4,93,255,74,12
004A0Fr 3  4A 5D 4A FF  
004A13r 3  49 09 5D 4A  
004A2Er 3  49 5D 5D 4A          .byte 73,93,93,74,74,74,73,73,73,93,74,255,73,12,93,93,74,73,73,73,90,90,93,74,255,73,12,93,93,74,255,73,4
004A32r 3  4A 4A 49 49  
004A36r 3  49 5D 4A FF  
004A4Fr 3  4A 5D 4A FF          .byte 74,93,74,255,73,6,90,90,73,73,90,90,93,93,90,90,255,73,4,93,74,255,73,7,74,74,73,73,74,93,93,74,74,74
004A53r 3  49 06 5A 5A  
004A57r 3  49 49 5A 5A  
004A71r 3  49 49 49 5D          .byte 73,73,73,93,74,73,90,90,255,73,9,93,93,74,73,73,73,90,90,93,74,73,73,74,74,255,73,8,93,93,74,255,73,4
004A75r 3  4A 49 5A 5A  
004A79r 3  FF 49 09 5D  
004A93r 3  4A 5D 4A FF          .byte 74,93,74,255,73,12,93,93,90,90,255,73,4,93,74,73,255,93,9,90,90,93,93,74,74,74,73,73,73,93,74,73,73
004A97r 3  49 0C 5D 5D  
004A9Br 3  5A 5A FF 49  
004AB4r 3  FF 4A 07 5D          .byte 255,74,7,93,74,74,93,93,74,255,73,5,93,74,255,73,9,93,74,73,255,93,6,73,73,93,74,255,73,9,93,90,90
004AB8r 3  4A 4A 5D 5D  
004ABCr 3  4A FF 49 05  
004AD5r 3  FF 5D 06 4A          .byte 255,93,6,74,73,73,74,255,73,10,74,74,255,93,6,74,255,73,15,255,93,23
004AD9r 3  49 49 4A FF  
004ADDr 3  49 0A 4A 4A  
004AEBr 3               numsc:
004AEBr 3  0C                   .byte 12
004AECr 3               nmedat:
004AECr 3  00 01 78 78          .byte 0,1,120,120,7,2,48,56,3,17,120,40,255
004AF0r 3  07 02 30 38  
004AF4r 3  03 11 78 28  
004AF9r 3  00 01 58 78          .byte 0,1,88,120,7,2,56,136,2,10,56,48,4,13,120,32,255
004AFDr 3  07 02 38 88  
004B01r 3  02 0A 38 30  
004B0Ar 3  00 01 78 80          .byte 0,1,120,128,7,2,32,144,5,12,24,16,2,10,48,72,4,14,136,96,255
004B0Er 3  07 02 20 90  
004B12r 3  05 0C 18 10  
004B1Fr 3  00 00 70 50          .byte 0,0,112,80,7,2,72,80,4,14,96,152,2,10,96,8,5,12,24,56,6,12,136,104,255
004B23r 3  07 02 48 50  
004B27r 3  04 0E 60 98  
004B38r 3  00 01 90 78          .byte 0,1,144,120,7,2,8,24,4,14,88,128,2,10,144,24,5,12,88,96,255
004B3Cr 3  07 02 08 18  
004B40r 3  04 0E 58 80  
004B4Dr 3  00 00 98 10          .byte 0,0,152,16,7,2,48,144,2,11,32,112,4,13,80,40,3,17,128,56,255
004B51r 3  07 02 30 90  
004B55r 3  02 0B 20 70  
004B62r 3  00 00 18 20          .byte 0,0,24,32,7,2,120,120,3,17,48,88,2,11,88,128,4,14,136,104,255
004B66r 3  07 02 78 78  
004B6Ar 3  03 11 30 58  
004B77r 3  00 00 90 10          .byte 0,0,144,16,7,2,32,144,3,17,144,72,5,12,72,88,2,10,48,48,255
004B7Br 3  07 02 20 90  
004B7Fr 3  03 11 90 48  
004B8Cr 3  00 00 18 50          .byte 0,0,24,80,7,2,104,80,2,10,80,112,5,12,128,24,6,12,16,136,4,13,56,48,255
004B90r 3  07 02 68 50  
004B94r 3  02 0A 50 70  
004BA5r 3  00 00 28 60          .byte 0,0,40,96,7,2,40,64,6,12,32,24,5,12,104,136,3,16,128,40,255
004BA9r 3  07 02 28 40  
004BADr 3  06 0C 20 18  
004BBAr 3  00 00 48 48          .byte 0,0,72,72,4,13,96,56,5,12,16,32,2,10,24,48,3,16,144,40,7,2,48,56,255
004BBEr 3  04 0D 60 38  
004BC2r 3  05 0C 10 20  
004BD3r 3  00 01 10 98          .byte 0,1,16,152,7,2,40,152,4,13,32,64,5,12,40,24,2,10,104,88,3,16,152,64,255
004BD7r 3  07 02 28 98  
004BDBr 3  04 0D 20 40  
004BECr 3               NUMOBJ = 1
004BECr 3               objdta:
004BECr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,254,48,112,254,48,112
004BF0r 3  00 00 00 00  
004BF4r 3  00 00 00 00  
004C13r 3               font:
004C13r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004C17r 3  00 00 00 00  
004C1Br 3  38 38 38 38          .byte 56,56,56,56,0,56,56,0
004C1Fr 3  00 38 38 00  
004C23r 3  77 77 EE 00          .byte 119,119,238,0,0,0,0,0
004C27r 3  00 00 00 00  
004C2Br 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004C2Fr 3  00 00 00 00  
004C33r 3  00 00 00 00          .byte 0,0,0,0,0,96,48,0
004C37r 3  00 60 30 00  
004C3Br 3  00 00 00 00          .byte 0,0,0,0,0,24,48,0
004C3Fr 3  00 18 30 00  
004C43r 3  00 00 00 00          .byte 0,0,0,0,0,52,88,0
004C47r 3  00 34 58 00  
004C4Br 3  1C 1C 38 00          .byte 28,28,56,0,0,0,0,0
004C4Fr 3  00 00 00 00  
004C53r 3  1C 38 38 3C          .byte 28,56,56,60,60,60,28,0
004C57r 3  3C 3C 1C 00  
004C5Br 3  38 1C 1C 3C          .byte 56,28,28,60,60,60,56,0
004C5Fr 3  3C 3C 38 00  
004C63r 3  00 00 00 00          .byte 0,0,0,0,8,28,54,0
004C67r 3  08 1C 36 00  
004C6Br 3  00 38 38 FE          .byte 0,56,56,254,56,56,56,0
004C6Fr 3  38 38 38 00  
004C73r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,112
004C77r 3  00 38 38 70  
004C7Br 3  00 00 00 7E          .byte 0,0,0,126,126,0,0,0
004C7Fr 3  7E 00 00 00  
004C83r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
004C87r 3  00 38 38 00  
004C8Br 3  00 06 0E 1C          .byte 0,6,14,28,56,112,112,0
004C8Fr 3  38 70 70 00  
004C93r 3  38 6C EE FE          .byte 56,108,238,254,254,124,56,0
004C97r 3  FE 7C 38 00  
004C9Br 3  78 38 38 38          .byte 120,56,56,56,254,254,254,0
004C9Fr 3  FE FE FE 00  
004CA3r 3  FC 0E 7C F0          .byte 252,14,124,240,254,254,254,0
004CA7r 3  FE FE FE 00  
004CABr 3  FC 0E 3C 0E          .byte 252,14,60,14,254,254,252,0
004CAFr 3  FE FE FC 00  
004CB3r 3  E0 E0 EE FE          .byte 224,224,238,254,254,126,14,0
004CB7r 3  FE 7E 0E 00  
004CBBr 3  FE E0 FC 0E          .byte 254,224,252,14,254,254,252,0
004CBFr 3  FE FE FC 00  
004CC3r 3  7C E0 FC EE          .byte 124,224,252,238,254,254,124,0
004CC7r 3  FE FE 7C 00  
004CCBr 3  FE EE 1E 1C          .byte 254,238,30,28,60,124,124,0
004CCFr 3  3C 7C 7C 00  
004CD3r 3  7C EE 7C EE          .byte 124,238,124,238,254,254,124,0
004CD7r 3  FE FE 7C 00  
004CDBr 3  7C EE 7E 0E          .byte 124,238,126,14,254,254,252,0
004CDFr 3  FE FE FC 00  
004CE3r 3  00 38 00 00          .byte 0,56,0,0,56,56,56,0
004CE7r 3  38 38 38 00  
004CEBr 3  00 38 00 00          .byte 0,56,0,0,56,120,120,112
004CEFr 3  38 78 78 70  
004CF3r 3  0E 1C 38 78          .byte 14,28,56,120,124,62,31,0
004CF7r 3  7C 3E 1F 00  
004CFBr 3  00 7E 00 7E          .byte 0,126,0,126,126,126,0,0
004CFFr 3  7E 7E 00 00  
004D03r 3  70 38 1C 1E          .byte 112,56,28,30,62,124,248,0
004D07r 3  3E 7C F8 00  
004D0Br 3  FC 0E 3C 00          .byte 252,14,60,0,56,56,56,0
004D0Fr 3  38 38 38 00  
004D13r 3  38 38 00 38          .byte 56,56,0,56,56,56,56,0
004D17r 3  38 38 38 00  
004D1Br 3  38 7C 6C 7C          .byte 56,124,108,124,238,238,238,0
004D1Fr 3  EE EE EE 00  
004D23r 3  FC EE FE EC          .byte 252,238,254,236,254,254,252,0
004D27r 3  FE FE FC 00  
004D2Br 3  7C EE E0 EE          .byte 124,238,224,238,254,254,124,0
004D2Fr 3  FE FE 7C 00  
004D33r 3  F8 FC 76 76          .byte 248,252,118,118,254,252,248,0
004D37r 3  FE FC F8 00  
004D3Br 3  FE F0 7C 70          .byte 254,240,124,112,254,254,254,0
004D3Fr 3  FE FE FE 00  
004D43r 3  FE 70 7C 70          .byte 254,112,124,112,248,248,248,0
004D47r 3  F8 F8 F8 00  
004D4Br 3  7E E0 EE E6          .byte 126,224,238,230,254,254,126,0
004D4Fr 3  FE FE 7E 00  
004D53r 3  EE EE 7C 7C          .byte 238,238,124,124,254,238,238,0
004D57r 3  FE EE EE 00  
004D5Br 3  7C 38 38 38          .byte 124,56,56,56,124,124,124,0
004D5Fr 3  7C 7C 7C 00  
004D63r 3  0E 0E 0E EE          .byte 14,14,14,238,254,254,124,0
004D67r 3  FE FE 7C 00  
004D6Br 3  EE FC F8 FC          .byte 238,252,248,252,254,254,238,0
004D6Fr 3  FE FE EE 00  
004D73r 3  F8 70 70 70          .byte 248,112,112,112,254,254,254,0
004D77r 3  FE FE FE 00  
004D7Br 3  C6 EE FE FE          .byte 198,238,254,254,254,254,238,0
004D7Fr 3  FE FE EE 00  
004D83r 3  CE EE FE FE          .byte 206,238,254,254,254,238,230,0
004D87r 3  FE EE E6 00  
004D8Br 3  7C EE EE EE          .byte 124,238,238,238,254,254,124,0
004D8Fr 3  FE FE 7C 00  
004D93r 3  FC EE 7C 70          .byte 252,238,124,112,248,248,248,0
004D97r 3  F8 F8 F8 00  
004D9Br 3  7C FE EE EE          .byte 124,254,238,238,238,252,110,0
004D9Fr 3  EE FC 6E 00  
004DA3r 3  FC EE 7E 7C          .byte 252,238,126,124,238,238,238,0
004DA7r 3  EE EE EE 00  
004DABr 3  7E E0 7C 0E          .byte 126,224,124,14,254,254,252,0
004DAFr 3  FE FE FC 00  
004DB3r 3  FE FE 38 38          .byte 254,254,56,56,124,124,124,0
004DB7r 3  7C 7C 7C 00  
004DBBr 3  EE EE EE EE          .byte 238,238,238,238,254,254,124,0
004DBFr 3  FE FE 7C 00  
004DC3r 3  EE EE EE EE          .byte 238,238,238,238,254,124,56,0
004DC7r 3  FE 7C 38 00  
004DCBr 3  EE EE FE FE          .byte 238,238,254,254,254,254,108,0
004DCFr 3  FE FE 6C 00  
004DD3r 3  C6 EE 7C 7C          .byte 198,238,124,124,254,238,238,0
004DD7r 3  FE EE EE 00  
004DDBr 3  EE EE FE 7C          .byte 238,238,254,124,56,56,56,0
004DDFr 3  38 38 38 00  
004DE3r 3  7E 0E 1E 3C          .byte 126,14,30,60,126,126,126,0
004DE7r 3  7E 7E 7E 00  
004DEBr 3  7C 70 70 70          .byte 124,112,112,112,124,124,124,0
004DEFr 3  7C 7C 7C 00  
004DF3r 3  00 60 70 38          .byte 0,96,112,56,28,14,14,0
004DF7r 3  1C 0E 0E 00  
004DFBr 3  7C 1C 1C 1C          .byte 124,28,28,28,124,124,124,0
004DFFr 3  7C 7C 7C 00  
004E03r 3  10 38 7C 38          .byte 16,56,124,56,124,124,124,0
004E07r 3  7C 7C 7C 00  
004E0Br 3  00 00 00 00          .byte 0,0,0,0,0,0,108,0
004E0Fr 3  00 00 6C 00  
004E13r 3  00 00 14 08          .byte 0,0,20,8,62,8,20,0
004E17r 3  3E 08 14 00  
004E1Br 3  00 7C 1E 6E          .byte 0,124,30,110,254,254,126,0
004E1Fr 3  FE FE 7E 00  
004E23r 3  E0 E0 FC EE          .byte 224,224,252,238,254,254,252,0
004E27r 3  FE FE FC 00  
004E2Br 3  00 7E E0 E0          .byte 0,126,224,224,254,254,126,0
004E2Fr 3  FE FE 7E 00  
004E33r 3  0E 0E 7E EE          .byte 14,14,126,238,254,254,126,0
004E37r 3  FE FE 7E 00  
004E3Br 3  00 7C EE FC          .byte 0,124,238,252,254,254,126,0
004E3Fr 3  FE FE 7E 00  
004E43r 3  1E 38 7E 38          .byte 30,56,126,56,124,124,124,0
004E47r 3  7C 7C 7C 00  
004E4Br 3  00 00 7C EE          .byte 0,0,124,238,62,254,254,252
004E4Fr 3  3E FE FE FC  
004E53r 3  E0 E0 FC FE          .byte 224,224,252,254,254,238,238,0
004E57r 3  FE EE EE 00  
004E5Br 3  38 00 78 38          .byte 56,0,120,56,124,124,124,0
004E5Fr 3  7C 7C 7C 00  
004E63r 3  0E 00 0E 0E          .byte 14,0,14,14,238,254,254,124
004E67r 3  EE FE FE 7C  
004E6Br 3  E0 EE FE FC          .byte 224,238,254,252,252,238,230,0
004E6Fr 3  FC EE E6 00  
004E73r 3  3C 1C 1C 1C          .byte 60,28,28,28,62,62,62,0
004E77r 3  3E 3E 3E 00  
004E7Br 3  00 6C FE FE          .byte 0,108,254,254,254,254,238,0
004E7Fr 3  FE FE EE 00  
004E83r 3  00 FC FE EE          .byte 0,252,254,238,238,238,238,0
004E87r 3  EE EE EE 00  
004E8Br 3  00 7C EE EE          .byte 0,124,238,238,254,254,124,0
004E8Fr 3  FE FE 7C 00  
004E93r 3  00 FC EE 7E          .byte 0,252,238,126,126,252,240,240
004E97r 3  7E FC F0 F0  
004E9Br 3  00 7E EE FC          .byte 0,126,238,252,252,124,30,30
004E9Fr 3  FC 7C 1E 1E  
004EA3r 3  00 FC FE 6E          .byte 0,252,254,110,240,240,240,0
004EA7r 3  F0 F0 F0 00  
004EABr 3  00 7E F0 7C          .byte 0,126,240,124,62,254,252,0
004EAFr 3  3E FE FC 00  
004EB3r 3  70 FC 70 70          .byte 112,252,112,112,126,126,62,0
004EB7r 3  7E 7E 3E 00  
004EBBr 3  00 EE EE EE          .byte 0,238,238,238,254,254,124,0
004EBFr 3  FE FE 7C 00  
004EC3r 3  00 EE EE EE          .byte 0,238,238,238,254,124,56,0
004EC7r 3  FE 7C 38 00  
004ECBr 3  00 EE FE FE          .byte 0,238,254,254,254,254,108,0
004ECFr 3  FE FE 6C 00  
004ED3r 3  00 EE FE 7C          .byte 0,238,254,124,254,254,238,0
004ED7r 3  FE FE EE 00  
004EDBr 3  00 EE EE 7E          .byte 0,238,238,126,14,126,126,124
004EDFr 3  0E 7E 7E 7C  
004EE3r 3  00 FE 3C 78          .byte 0,254,60,120,254,254,254,0
004EE7r 3  FE FE FE 00  
004EEBr 3  0E 1C 1C 7C          .byte 14,28,28,124,30,30,14,0
004EEFr 3  1E 1E 0E 00  
004EF3r 3  38 38 38 38          .byte 56,56,56,56,56,56,56,0
004EF7r 3  38 38 38 00  
004EFBr 3  70 38 38 3E          .byte 112,56,56,62,120,120,112,0
004EFFr 3  78 78 70 00  
004F03r 3  00 00 36 7E          .byte 0,0,54,126,108,0,0,0
004F07r 3  6C 00 00 00  
004F0Br 3  3C 66 DB F3          .byte 60,102,219,243,251,219,102,60
004F0Fr 3  FB DB 66 3C  
004F13r 3               jtab:
004F13r 3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
004F17r 3  FE FF FF FF  
004F1Br 3  00 00 00 01  
004F29r 3  65 14 51 10  keys:   .byte 101,20,81,16,52,35,66,112,0,113,1
004F2Dr 3  34 23 42 70  
004F31r 3  00 71 01     
004F34r 3               
004F34r 2               
004F34r 1               	.include "lib.inc"
004F34r 2               ;----------------------------------------------------------------------
004F34r 2               ; VIC20 Platform Specific functions
004F34r 2               ;----------------------------------------------------------------------
004F34r 2               
004F34r 2               ;============================================================
004F34r 2               ; PLATFORM VARIABLES
004F34r 2               ;============================================================
004F34r 2               ;
004F34r 2               ; Memory map:
004F34r 2               ;
004F34r 2               ;	$0000-$01ff	 0.5kB	CPU WS
004F34r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
004F34r 2               ;	$0400-$0fff	 3,0kB	RAM
004F34r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
004F34r 2               ;	$2000-$7fff	24,0kB	RAM
004F34r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
004F34r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
004F34r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
004F34r 2               ;	$9800-$9fff	 2,0kB	I/O
004F34r 2               ;	$a000-$bfff	 8,0kB	RAM
004F34r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
004F34r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
004F34r 2               ;
004F34r 2               ; Keyboard matrix:
004F34r 2               ;                          	  $9121
004F34r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
004F34r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
004F34r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
004F34r 2               ;                 VIC   07  06  05  04  03  02  01  00
004F34r 2               ;
004F34r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
004F34r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
004F34r 2               ;                 VIC   17  16  15  14  13  12  11  10
004F34r 2               ;
004F34r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
004F34r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
004F34r 2               ;                 VIC   27  26  25  24  23  22  21  20
004F34r 2               ;
004F34r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
004F34r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
004F34r 2               ;                 VIC   37  36  35  34  33  32  31  30
004F34r 2               ;
004F34r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
004F34r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
004F34r 2               ;                 VIC   47  46  45  44  43  42  41  40
004F34r 2               ;
004F34r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
004F34r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
004F34r 2               ;                 VIC   57  56  55  54  53  52  51  50
004F34r 2               ;
004F34r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
004F34r 2               ;               ASCII   13  42  80  73  89  82  87
004F34r 2               ;                 VIC   67  66  65  64  63  62  61  60
004F34r 2               ;
004F34r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
004F34r 2               ;               ASCII   08  ??  43  57  55  53  51  49
004F34r 2               ;                 VIC   77  76  75  74  73  72  71  70
004F34r 2               ;
004F34r 2               ;	 P =$65,O=$14,A=$51,Q=$10
004F34r 2               ;	SPC=$30,N=$44,M=$34
004F34r 2               ;	 1 =$70,2=$00,3=$71,4=$01
004F34r 2               ;
004F34r 2               ; Joysticks:
004F34r 2               ;
004F34r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
004F34r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
004F34r 2               ;	$9120	Right -     -     -     -     -     -     -
004F34r 2               ;
004F34r 2               ;	$9122	DDRB = Data Direction Register port $9120
004F34r 2               ;               0 = input, 1 = output
004F34r 2               ;		Bit7 should be 0 to read joystick $9120
004F34r 2               ;
004F34r 2               ; Video registers:
004F34r 2               ;
004F34r 2               ;	$9000	horizontal centering
004F34r 2               ;		bits 0-6 horizontal centering
004F34r 2               ;		bit  7 sets interlace scan
004F34r 2               ;	$9001	vertical centering
004F34r 2               ;	$9002	set # of columns
004F34r 2               ;		bits 0-6 set # of columns
004F34r 2               ;		bit 7 is part of video matrix address
004F34r 2               ;	$9003	set # of rows
004F34r 2               ;		bit 0 sets 8x8 or 16x8 chars
004F34r 2               ;		bits 1-6 set # of rows
004F34r 2               ;	$9004	TV raster beam line
004F34r 2               ;	$9005	start of character memory
004F34r 2               ;		bits 0-3 start of character memory (default = 0)
004F34r 2               ;		bits 4-7 is rest of video address (default= F)
004F34r 2               ;		BITS 3,2,1,0 CM startinq address
004F34r 2               ;			     HEX   DEC
004F34r 2               ;		0000   ROM   8000  32768
004F34r 2               ;		0001	     8400  33792
004F34r 2               ;		0010	     8800  34816
004F34r 2               ;		0011	     8C00  35840
004F34r 2               ;		1000   RAM   0000  0000
004F34r 2               ;		1001  xxxx
004F34r 2               ;		1010  xxxx   unavail.
004F34r 2               ;		1011  xxxx
004F34r 2               ;		1100	     1000  4096
004F34r 2               ;		1101	     1400  5120
004F34r 2               ;		1110	     1800  6144
004F34r 2               ;		1111	     1C00  7168
004F34r 2               ;
004F34r 2               ; Sound registers:
004F34r 2               ;
004F34r 2               ;	$900a	Frequency for oscillator 1 (low)
004F34r 2               ;		(on: 128-255)
004F34r 2               ;	$900b	Frequency for oscillator 2 (medium)
004F34r 2               ;		(on: 128-255)
004F34r 2               ;	$900c	Frequency for oscillator 3 (high)
004F34r 2               ;		(on: 128-255)
004F34r 2               ;	$900d	Frequency of noise source
004F34r 2               ;	$900e	bit 0-3 sets volume of all sound
004F34r 2               ;		bits 4-7 are auxiliary color information
004F34r 2               ;	$900f	Screen and border color register
004F34r 2               ;		bits 4-7 select background color
004F34r 2               ;		bits 0-2 select border color
004F34r 2               ;		bit 3 selects inverted or normal mode
004F34r 2               ;
004F34r 2               ; I/O:
004F34r 2               ;	VIA1 -VIA2
004F34r 2               ;-----------------------------------------------------------
004F34r 2               ;	$9110,$9120 	Port B output register
004F34r 2               ;	$9111,$9121 	Port A output register
004F34r 2               ;			(PA0) Bit 0=Serial CLK IN
004F34r 2               ;			(PA1) Bit 1=Serial DATA IN
004F34r 2               ;			(PA2) Bit 2=Joy 0
004F34r 2               ;			(PA3) Bit 3=Joy 1
004F34r 2               ;			(PA4) Bit 4=Joy 2
004F34r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
004F34r 2               ;			(PA6) Bit 6=Cassette switch sense
004F34r 2               ;			(PA7) Bit 7=Serial ATN out
004F34r 2               ;	$9112,$9122	Data direction register B
004F34r 2               ;	$9113,$9123	Data direction register A
004F34r 2               ;	$9114,$9124	Timer 1 low byte
004F34r 2               ;	$9115,$9125	Timer 1 high byte & counter
004F34r 2               ;	$9116,$9126	Timer 1 low byte
004F34r 2               ;	$9117,$9127	Timer 1 high byte
004F34r 2               ;	$9118,$9128	Timer 2 low byte
004F34r 2               ;	$9119,$9129	Timer 2 high byte
004F34r 2               ;	$911A,$912A	Shift register
004F34r 2               ;	$911B,$912B	Auxiliary control register
004F34r 2               ;	$911C,$912C	Peripheral control register
004F34r 2               ;			(CA1, CA2, CB1, CB2)
004F34r 2               ;			CA1 = restore key (Bit 0)
004F34r 2               ;			CA2 = cassette motor control (Bits 1-3)
004F34r 2               ;			CB1 = interrupt signal for received
004F34r 2               ;			RS-232 data (Bit 4)
004F34r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
004F34r 2               ;	$911D,$912D	Interrupt flag register
004F34r 2               ;	$911E,$912E	Interrupt enable register
004F34r 2               ;	$911F,$912F	Port A (Sense cassette switch)
004F34r 2               
004F34r 2               ; VIC constants
004F34r 2               
004F34r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
004F34r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
004F34r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
004F34r 2               
004F34r 2               ; VIC variables:
004F34r 2               
004F34r 2  00           	fontcol:	.byte 0		; Frontcolour text
004F35r 2  00           	mode:		.byte 0		; 0=MPAGD, 1=MiniPaint
004F36r 2               .if modelflag				; Set crtflag to identify machine, NTSC or PAL
004F36r 2               	crtflag:	.byte 1		; PAL
004F36r 2               .else
004F36r 2  00           	crtflag:	.byte 0		; NTSC
004F37r 2               .endif
004F37r 2               
004F37r 2               ; Addresses
004F37r 2               
004F37r 2               	ScreenAddr	= $0200		; VIDEO RAM
004F37r 2               	MapAddr		= $0400		; RAM
004F37r 2               	CharAddress	= $1000		; CHAR RAM
004F37r 2               	Reg0		= $9000		; Horizontal centering
004F37r 2               	Reg1		= $9001		; Vertical centering
004F37r 2               	Reg2		= $9002		; Set # of columns
004F37r 2               	Reg3		= $9003		; Set # of rows
004F37r 2               	Reg4		= $9004		; Vsync signal
004F37r 2               	Reg5		= $9005		; Start of character memory
004F37r 2               	RegA		= $900a		; Colour and auxcolour register
004F37r 2               	RegB		= $900b		; Colour and auxcolour register
004F37r 2               	RegC		= $900c		; Colour and auxcolour register
004F37r 2               	RegD		= $900d		; Colour and auxcolour register
004F37r 2               	RegE		= $900e		; Colour and auxcolour register
004F37r 2               	RegF		= $900f		; Screen and border color register
004F37r 2               
004F37r 2               	JoyAddr1	= $9111		; Joystick address 1
004F37r 2               	Timer11_Low  	= $9114		; Timer 1 low byte
004F37r 2               	Timer11_High 	= $9115		; Timer 1 high byte
004F37r 2               	Timer12_Low  	= $9118		; Timer 2 low byte
004F37r 2               	Timer12_High 	= $9119		; Timer 2 high byte
004F37r 2               	AUX1		= $911b		; Auxiliary control register
004F37r 2               	IFR1		= $911d		; Interrupt Flag Register
004F37r 2               	IER1		= $911e		; Interrupt Enable Register
004F37r 2               
004F37r 2               	KeyColAddr	= $9120		; Keyboard column (write)
004F37r 2               	JoyAddr2	= $9120		; Joystick address 2
004F37r 2               	KeyRowAddr	= $9121		; Keyboard row (read)
004F37r 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
004F37r 2               	Timer21_Low  	= $9124		; Timer 1 low byte
004F37r 2               	Timer21_High 	= $9125		; Timer 1 high byte
004F37r 2               	AUX2		= $912b		; Auxiliary control register
004F37r 2               	IFR2		= $912d		; Interrupt Flag Register
004F37r 2               	IER2		= $912e		; Interrupt Enable Register
004F37r 2               
004F37r 2               	ColorAttr	= $9600		; Color attributes
004F37r 2               	HiRAM		= $a000		; Hi RAM 8kB
004F37r 2               
004F37r 2               ;----------------------------------------------------------------------
004F37r 2               ; VIC20 video hardware fns
004F37r 2               ;----------------------------------------------------------------------
004F37r 2               
004F37r 2               init:
004F37r 2               
004F37r 2               ; Disable interrupts
004F37r 2               
004F37r 2  A9 7F        	lda #$7f
004F39r 2  8D 1E 91     	sta IER1
004F3Cr 2  8D 2D 91     	sta IFR2
004F3Fr 2  8D 2E 91     	sta IER2
004F42r 2               
004F42r 2               ; Set audio volume and flag to 0 to check when disabling
004F42r 2               ; beep and crash
004F42r 2               
004F42r 2  A9 00        	lda #0
004F44r 2  8D 0A 90     	sta RegA
004F47r 2  8D 0B 90     	sta RegB
004F4Ar 2  8D 0C 90     	sta RegC
004F4Dr 2  8D 0D 90     	sta RegD
004F50r 2  A9 00        	lda #$00
004F52r 2  85 rr        	sta SOUNDS_STATUS
004F54r 2               
004F54r 2  AD 0E 90     	lda RegE
004F57r 2  09 0F        	ora #$0f		; Set volume max
004F59r 2  8D 0E 90     	sta RegE
004F5Cr 2               
004F5Cr 2               ; Init screen for NTSC
004F5Cr 2               ; this sets the background and border color of the screen
004F5Cr 2               ; in this case border black and background black
004F5Cr 2               
004F5Cr 2  A9 18        	lda #%00011000
004F5Er 2  8D 0F 90     	sta RegF
004F61r 2               
004F61r 2               ; Reset fontcolor
004F61r 2  A9 00        	lda #0		; Black
004F63r 2  8D rr rr     	sta fontcol
004F66r 2               
004F66r 2               
004F66r 2  A9 00        	lda #0		; Mode 0 = MPAGD
004F68r 2  20 rr rr     	jsr SetReg
004F6Br 2               
004F6Br 2               ; Init screencharacters
004F6Br 2               ; Fill screen with characters from left to right, up to down
004F6Br 2               
004F6Br 2  A2 00        	ldx #0
004F6Dr 2  A0 00        	ldy #0
004F6Fr 2               scrinit:
004F6Fr 2  8A           	txa
004F70r 2  9D 00 02     	sta ScreenAddr,x
004F73r 2  98           	tya
004F74r 2  9D 00 96     	sta ColorAttr,x
004F77r 2  E8           	inx
004F78r 2  E0 F2        	cpx#242
004F7Ar 2  D0 F3        	bne scrinit
004F7Cr 2               
004F7Cr 2               ; Reset fontcolor
004F7Cr 2               
004F7Cr 2  A9 00        	lda #0			; Black
004F7Er 2  8D rr rr     	sta fontcol
004F81r 2               
004F81r 2               ; Init music
004F81r 2               
004F81r 2               ;	jsr initmusic
004F81r 2               
004F81r 2               ; Init VIA1 timer11 for timeout 1/25 sec
004F81r 2               
004F81r 2  A9 E0        	lda #$e0		; T1 continuous
004F83r 2  8D 1B 91     	sta AUX1
004F86r 2  A9 7F        	lda #$7f		; No int
004F88r 2  8D 1E 91     	sta IER1
004F8Br 2  A9 00        	lda #0
004F8Dr 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
004F90r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
004F92r 2  8D 14 91     	sta Timer11_Low
004F95r 2  A9 4E        	lda #>timervalue
004F97r 2  8D 15 91     	sta Timer11_High
004F9Ar 2               
004F9Ar 2               ; Pre-shifted byte tables if parameter 'r' given
004F9Ar 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
004F9Ar 2               ; The bits are shifted to the right and overflow bits are
004F9Ar 2               ; inserted to the left. So 1 byte contains a left and right part
004F9Ar 2               
004F9Ar 2               .if rflag
004F9Ar 2               shift0 = HiRAM
004F9Ar 2               shift2 = HiRAM+256
004F9Ar 2               shift4 = HiRAM+512
004F9Ar 2               shift6 = HiRAM+768
004F9Ar 2               
004F9Ar 2               ; Pre-shifted table 0 pixels
004F9Ar 2               
004F9Ar 2               	ldx #0
004F9Ar 2               shf0:
004F9Ar 2               	txa
004F9Ar 2               	sta shift0,x
004F9Ar 2               	inx
004F9Ar 2               	bne shf0
004F9Ar 2               
004F9Ar 2               ; Pre-shifted table 2 pixels
004F9Ar 2               
004F9Ar 2               	ldx #0
004F9Ar 2               shf2:
004F9Ar 2               	ldy #2
004F9Ar 2               	txa
004F9Ar 2               shf2loop:
004F9Ar 2               	lsr a
004F9Ar 2               	bcc :+
004F9Ar 2               	ora #$80
004F9Ar 2               :
004F9Ar 2               	dey
004F9Ar 2               	bne shf2loop
004F9Ar 2               	sta shift2,x
004F9Ar 2               	inx
004F9Ar 2               	bne shf2
004F9Ar 2               
004F9Ar 2               ; Pre-shifted table 4 pixels
004F9Ar 2               
004F9Ar 2               	ldx #0
004F9Ar 2               shf4:
004F9Ar 2               	ldy #4
004F9Ar 2               	txa
004F9Ar 2               shf4loop:
004F9Ar 2               	lsr a
004F9Ar 2               	bcc :+
004F9Ar 2               	ora #$80
004F9Ar 2               :
004F9Ar 2               	dey
004F9Ar 2               	bne shf4loop
004F9Ar 2               	sta shift4,x
004F9Ar 2               	inx
004F9Ar 2               	bne shf4
004F9Ar 2               
004F9Ar 2               ; Pre-shifted table 6 pixels
004F9Ar 2               
004F9Ar 2               	ldx #0
004F9Ar 2               shf6:
004F9Ar 2               	ldy #6
004F9Ar 2               	txa
004F9Ar 2               shf6loop:
004F9Ar 2               	lsr a
004F9Ar 2               	bcc :+
004F9Ar 2               	ora #$80
004F9Ar 2               :
004F9Ar 2               	dey
004F9Ar 2               	bne shf6loop
004F9Ar 2               	sta shift6,x
004F9Ar 2               	inx
004F9Ar 2               	bne shf6
004F9Ar 2               .endif
004F9Ar 2               
004F9Ar 2  60           	rts
004F9Br 2               
004F9Br 2               ;========================================================
004F9Br 2               ; KEY AND JOYSTICK ROUTINES
004F9Br 2               ;--------------------------------------------------------
004F9Br 2               ; Keys
004F9Br 2               ;
004F9Br 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
004F9Br 2               ;             ||||||||
004F9Br 2               ;             |||||||+> Right    KEY 0  - X
004F9Br 2               ;             ||||||+-> Left     KEY 1  - Z
004F9Br 2               ;             |||||+--> Down     KEY 2  - .
004F9Br 2               ;             ||||+---> Up       KEY 3  - ;
004F9Br 2               ;             |||+----> Fire1    KEY 4  - SPC
004F9Br 2               ;             ||+-----> Fire2    KEY 5  - Q
004F9Br 2               ;             |+------> Fire3    KEY 6  - P
004F9Br 2               ;             +-------> Not used
004F9Br 2               ;
004F9Br 2               ;                       Option1  KEY 7  - 1
004F9Br 2               ;                       Option2  KEY 8  - 2
004F9Br 2               ;                       Option3  KEY 9  - 3
004F9Br 2               ;                       Option4  KEY 10 - 4
004F9Br 2               ;--------------------------------------------------------
004F9Br 2               
004F9Br 2               ;----------------------------------------------------
004F9Br 2               ; Interrupt service
004F9Br 2               ;----------------------------------------------------
004F9Br 2               
004F9Br 2               intserv:
004F9Br 2  EE 01 96     	inc $9601	; scroll colour char topleft
004F9Er 2  68           	pla
004F9Fr 2  A8           	tay
004FA0r 2  68           	pla
004FA1r 2  AA           	tax
004FA2r 2  68           	pla
004FA3r 2  40           	rti
004FA4r 2               
004FA4r 2               ;--------------------------------------------------------
004FA4r 2               ; PRSKEY
004FA4r 2               ;
004FA4r 2               ; Wait for keypress.
004FA4r 2               ;--------------------------------------------------------
004FA4r 2               
004FA4r 2               prskey:
004FA4r 2  98           	tya
004FA5r 2  48           	pha
004FA6r 2               prsloop:
004FA6r 2  20 rr rr     	jsr vsync
004FA9r 2  20 rr rr     	jsr joykey
004FACr 2  09 80        	ora #$80
004FAEr 2  C9 FF        	cmp #$ff
004FB0r 2  D0 07        	bne :+
004FB2r 2  20 rr rr     	jsr readkey
004FB5r 2  C9 FF        	cmp #255
004FB7r 2  F0 ED        	beq prsloop		; wait until key pressed
004FB9r 2               :
004FB9r 2               prsrelease:
004FB9r 2  20 rr rr     	jsr vsync
004FBCr 2  20 rr rr     	jsr joykey
004FBFr 2  09 80        	ora #$80
004FC1r 2  C9 FF        	cmp #$ff
004FC3r 2  F0 07        	beq :+
004FC5r 2  20 rr rr     	jsr readkey
004FC8r 2  C9 FF        	cmp #255
004FCAr 2  D0 ED        	bne prsrelease		; wait until key released
004FCCr 2               :
004FCCr 2  68           	pla
004FCDr 2  A8           	tay
004FCEr 2  60           	rts
004FCFr 2               
004FCFr 2               ;--------------------------------------------------------
004FCFr 2               ; KTEST
004FCFr 2               ;
004FCFr 2               ; Keyboard test routine with key in A.
004FCFr 2               ; Scan key and clear carry if key pressed
004FCFr 2               ;--------------------------------------------------------
004FCFr 2               
004FCFr 2               ktest:
004FCFr 2  85 rr        	sta z80_a		; save key
004FD1r 2               
004FD1r 2  4A           	lsr a
004FD2r 2  4A           	lsr a
004FD3r 2  4A           	lsr a
004FD4r 2  4A           	lsr a
004FD5r 2  AA           	tax
004FD6r 2  BD rr rr     	lda colmask,x
004FD9r 2  8D 20 91     	sta KeyColAddr		; set row
004FDCr 2               
004FDCr 2  A5 rr        	lda z80_a
004FDEr 2  29 0F        	and #$0f
004FE0r 2  AA           	tax			; get column
004FE1r 2               
004FE1r 2  AD 21 91     	lda KeyRowAddr		; read column
004FE4r 2  3D rr rr     	and keymask,x		; check if key pressed
004FE7r 2  F0 02        	beq pressed		; Skip if pressed
004FE9r 2  38           	sec			; key not pressed
004FEAr 2  60           	rts
004FEBr 2               pressed:
004FEBr 2  18           	clc			; key pressed
004FECr 2  60           	rts
004FEDr 2               
004FEDr 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
004FF1r 2  F7 FB FD FE  
004FF5r 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
004FF9r 2  10 20 40 80  
004FFDr 2               
004FFDr 2               ;---------------------------------------------------------------
004FFDr 2               ; KGET
004FFDr 2               ;
004FFDr 2               ; Read keyboard matrix if a key is pressed.
004FFDr 2               ; Return A = high nibble=row and low nibble=col
004FFDr 2               ;---------------------------------------------------------------
004FFDr 2               
004FFDr 2               kget:
004FFDr 2  86 rr        	stx xtmp		; Save x-reg
004FFFr 2               kget0:
004FFFr 2  A2 00        	ldx #0			; reset row
005001r 2               kget1:
005001r 2  BD rr rr     	lda colmask,x		; Get mask
005004r 2  8D 20 91     	sta KeyColAddr		; Set row
005007r 2  AD 21 91     	lda KeyRowAddr		; Read columns
00500Ar 2  85 rr        	sta tmp			; Save colums
00500Cr 2  C9 FF        	cmp #$ff		; Key pressed?
00500Er 2  D0 08        	bne kget2		; Yes, skip
005010r 2  E8           	inx			; Next row
005011r 2  E0 08        	cpx #8			; All rows scanned?
005013r 2  D0 EC        	bne kget1		; No, repeat
005015r 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
005018r 2               kget2:
005018r 2  A0 00        	ldy #0			; Reset column
00501Ar 2               kget3:
00501Ar 2  46 rr        	lsr tmp			; Test bit
00501Cr 2  90 04        	bcc kget4		; If clear, key pressed
00501Er 2  C8           	iny			; Next column
00501Fr 2  4C rr rr     	jmp kget3		; Repeat
005022r 2               kget4:
005022r 2  86 rr        	stx tmp			; Get row
005024r 2  06 rr        	asl tmp			; Make high nibble
005026r 2  06 rr        	asl tmp
005028r 2  06 rr        	asl tmp
00502Ar 2  06 rr        	asl tmp
00502Cr 2  98           	tya			; Get column
00502Dr 2  18           	clc
00502Er 2  65 rr        	adc tmp			; Add row as low nibble
005030r 2  85 rr        	sta tmp
005032r 2               kget5:
005032r 2  AD 21 91     	lda KeyRowAddr		; Read columns
005035r 2  C9 FF        	cmp #$ff
005037r 2  D0 F9        	bne kget5
005039r 2               
005039r 2  A5 rr        	lda tmp			; Return keycode
00503Br 2  A6 rr        	ldx xtmp		; Restore X-reg
00503Dr 2  60           	rts			; Return
00503Er 2               
00503Er 2               ;-------------------------------------------------------------
00503Er 2               ; READKEY
00503Er 2               ;
00503Er 2               ; Check keyboard matrix if a key is pressed
00503Er 2               ; Return keymask in Y
00503Er 2               ;-------------------------------------------------------------
00503Er 2               
00503Er 2               readkey:
00503Er 2  A9 FF        	lda #$ff		; Keymask
005040r 2  85 rr        	sta tmp
005042r 2  A2 07        	ldx #7
005044r 2               scanrow:
005044r 2  BD rr rr     	lda colmask,x
005047r 2  8D 20 91     	sta KeyColAddr		; set row
00504Ar 2  AD 21 91     	lda KeyRowAddr		; read column
00504Dr 2  25 rr        	and tmp			; Reset bit is key pressed
00504Fr 2  85 rr        	sta tmp
005051r 2  CA           	dex
005052r 2  10 F0        	bpl scanrow
005054r 2  A5 rr        	lda tmp
005056r 2  A8           	tay
005057r 2  60           	rts
005058r 2               
005058r 2               ;-------------------------------------------------------------
005058r 2               ; JOY1SCAN
005058r 2               ;
005058r 2               ; Initializes joystick
005058r 2               ;-------------------------------------------------------------
005058r 2               
005058r 2               joyinit:
005058r 2  60           	rts
005059r 2               
005059r 2               ;-------------------------------------------------------------
005059r 2               ; JOY1SCAN
005059r 2               ;
005059r 2               ; Scan joystick1 and return key in z80_e
005059r 2               ; Up, down, left, right and fire are read from the joystick
005059r 2               ; Fire2 and fire3 are read from the keyboard
005059r 2               ;-------------------------------------------------------------
005059r 2               
005059r 2               joy1scan:
005059r 2  A9 FF        	lda #$ff
00505Br 2  85 rr        	sta z80_e
00505Dr 2               
00505Dr 2  AD 11 91     	lda JoyAddr1		; Read joystick input
005060r 2  4A           	lsr a
005061r 2  4A           	lsr a
005062r 2               
005062r 2  4A           	lsr a
005063r 2  26 rr        	rol z80_e		; Up
005065r 2  4A           	lsr a
005066r 2  26 rr        	rol z80_e		; Down
005068r 2  4A           	lsr a
005069r 2  26 rr        	rol z80_e		; Left
00506Br 2               
00506Br 2  A9 7F        	lda #%01111111
00506Dr 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
005070r 2  AD 20 91     	lda JoyAddr2
005073r 2  0A           	asl a
005074r 2  26 rr        	rol z80_e		; Right
005076r 2  A9 FF        	lda #%11111111
005078r 2  8D 22 91     	sta DDRB		; Reset
00507Br 2               
00507Br 2  AD 11 91     	lda JoyAddr1
00507Er 2  29 20        	and #%00100000
005080r 2  D0 06        	bne :+
005082r 2  A5 rr        	lda z80_e
005084r 2  29 EF        	and #%11101111		; Fire
005086r 2  85 rr        	sta z80_e
005088r 2               :
005088r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
00508Br 2  20 rr rr     	jsr ktest
00508Er 2  B0 06        	bcs :+
005090r 2  A5 rr        	lda z80_e
005092r 2  29 BF        	and #%10111111
005094r 2  85 rr        	sta z80_e
005096r 2               :
005096r 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
005099r 2  20 rr rr     	jsr ktest
00509Cr 2  B0 06        	bcs :+
00509Er 2  A5 rr        	lda z80_e
0050A0r 2  29 DF        	and #%11011111
0050A2r 2  85 rr        	sta z80_e
0050A4r 2               :
0050A4r 2  60           	rts
0050A5r 2               
0050A5r 2               ;-------------------------------------------------------------
0050A5r 2               ; JOY2SCAN
0050A5r 2               ;
0050A5r 2               ; TODO, Scan joystick2 and return key in z80_e
0050A5r 2               ;-------------------------------------------------------------
0050A5r 2               
0050A5r 2               joy2scan:
0050A5r 2  60           	rts
0050A6r 2               
0050A6r 2               
0050A6r 2               
0050A6r 2               ;========================================================
0050A6r 2               ; HARDWARE DEPENDING ROUTINES
0050A6r 2               ;========================================================
0050A6r 2               
0050A6r 2               ;----------------------------------------------------
0050A6r 2               ; DELAY
0050A6r 2               ;
0050A6r 2               ; Delay routine A * 1/50 sec
0050A6r 2               ;----------------------------------------------------
0050A6r 2               
0050A6r 2               delay:
0050A6r 2  85 rr        	sta xtmp		; set delaycounter
0050A8r 2               del_loop:
0050A8r 2  AD 04 90     	lda Reg4
0050ABr 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
0050ADr 2               
0050ADr 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0050AFr 2               delay1:
0050AFr 2  61 80        	adc ($80,x)		;	 6 usec
0050B1r 2  61 80        	adc ($80,x)		;	 6 usec
0050B3r 2  88           	dey			;	 2 usec
0050B4r 2  D0 F9        	bne delay1		;	 2 usec
0050B6r 2  EA           	nop			; 2 usec
0050B7r 2  EA           	nop			; 2 usec
0050B8r 2               				; tot: 20000 usec
0050B8r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
0050BAr 2  D0 EC        	bne del_loop
0050BCr 2  60           	rts
0050BDr 2               
0050BDr 2               ;-------------------------------------------------------------
0050BDr 2               ; VSYNC
0050BDr 2               ;
0050BDr 2               ; - read joystick/keyboard
0050BDr 2               ; - sync framerate with timer 25Hz
0050BDr 2               ; - handle shrapnel every even frame
0050BDr 2               ; - handle sound
0050BDr 2               ;-------------------------------------------------------------
0050BDr 2               
0050BDr 2               vsync:
0050BDr 2  48           	pha			; save registers
0050BEr 2  98           	tya
0050BFr 2  48           	pha
0050C0r 2  8A           	txa
0050C1r 2  48           	pha
0050C2r 2               
0050C2r 2               ;-------------------------------------------------------------
0050C2r 2               ; Read joystick/keyboard.
0050C2r 2               ;-------------------------------------------------------------
0050C2r 2               
0050C2r 2  20 rr rr     	jsr joykey
0050C5r 2               
0050C5r 2               ;-------------------------------------------------------------
0050C5r 2               ; Sync framerate with timer 25Hz
0050C5r 2               ;-------------------------------------------------------------
0050C5r 2               
0050C5r 2  A9 40        	lda #$40		; set Timer1 expired bit
0050C7r 2               vsync1:
0050C7r 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
0050CAr 2  F0 FB        	beq vsync1		; wait if timer not expired
0050CCr 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
0050CFr 2               
0050CFr 2               rasterwait:
0050CFr 2  AD 04 90     	lda Reg4
0050D2r 2  D0 FB        	bne rasterwait
0050D4r 2               
0050D4r 2               ;-------------------------------------------------------------
0050D4r 2               ; Handle sound command
0050D4r 2               ;-------------------------------------------------------------
0050D4r 2               
0050D4r 2  20 rr rr     	jsr make_sound2
0050D7r 2               
0050D7r 2               ;-------------------------------------------------------------
0050D7r 2               ; Handle shrapnel every even frame
0050D7r 2               ;-------------------------------------------------------------
0050D7r 2               
0050D7r 2  A5 rr        	lda clock		; get clock
0050D9r 2  29 01        	and #1			; 2 frames expired
0050DBr 2  D0 03        	bne:+
0050DDr 2  20 rr rr     	jsr proshr		; process shrapnel
0050E0r 2               :
0050E0r 2               
0050E0r 2               ;-------------------------------------------------------------
0050E0r 2               ; Handle sound BEEP and CRASH
0050E0r 2               ;-------------------------------------------------------------
0050E0r 2               
0050E0r 2  AD rr rr     	lda sndtyp
0050E3r 2  F0 4E        	beq sndskip
0050E5r 2               
0050E5r 2               sndloop:
0050E5r 2  AC rr rr     	ldy sndtyp
0050E8r 2               sndwait:
0050E8r 2  88           	dey
0050E9r 2  D0 FD        	bne sndwait
0050EBr 2               
0050EBr 2  AD rr rr     	lda sndtyp
0050EEr 2  30 1E        	bmi crashaudio
0050F0r 2               
0050F0r 2               ; BEEP command:
0050F0r 2               ; enable sound on channel 2
0050F0r 2               ; range 0-127
0050F0r 2               
0050F0r 2               beepaudio:
0050F0r 2  AD 0E 90     	lda RegE
0050F3r 2  09 0F        	ora #$0f
0050F5r 2  8D 0E 90     	sta RegE
0050F8r 2               
0050F8r 2  A5 rr        	lda SOUNDS_STATUS
0050FAr 2  09 40        	ora #%01000000
0050FCr 2  85 rr        	sta SOUNDS_STATUS
0050FEr 2  A9 FF        	lda #$ff
005100r 2  38           	sec
005101r 2  ED rr rr     	sbc sndtyp
005104r 2  4A           	lsr
005105r 2  4A           	lsr
005106r 2  09 C0        	ora #%11000000
005108r 2  8D 0C 90     	sta RegC
00510Br 2  4C rr rr     	jmp endaudiotype
00510Er 2               
00510Er 2               ; CRASH command:
00510Er 2               ; enable sound on channel 3
00510Er 2               ; range 128-255
00510Er 2               
00510Er 2               crashaudio:
00510Er 2  AD 0E 90     	lda RegE
005111r 2  09 0F        	ora #$0f
005113r 2  8D 0E 90     	sta RegE
005116r 2  A5 rr        	lda SOUNDS_STATUS
005118r 2  09 80        	ora #%10000000
00511Ar 2  85 rr        	sta SOUNDS_STATUS
00511Cr 2  A9 FF        	lda #$ff
00511Er 2  38           	sec
00511Fr 2  ED rr rr     	sbc sndtyp
005122r 2  09 80        	ora #%10000000
005124r 2  8D 0D 90     	sta RegD
005127r 2               
005127r 2               endaudiotype:
005127r 2  CE rr rr     	dec sndtyp
00512Ar 2  F0 07        	beq sndskip
00512Cr 2  C9 80        	cmp #128
00512Er 2  F0 03        	beq sndskip
005130r 2  4C rr rr     	jmp sndloop
005133r 2               
005133r 2               ; disable sound
005133r 2               
005133r 2               sndskip:
005133r 2  24 rr        	bit SOUNDS_STATUS
005135r 2  50 0B        	bvc :+
005137r 2  A5 rr        	lda SOUNDS_STATUS
005139r 2  29 BF        	and #%10111111
00513Br 2  85 rr        	sta SOUNDS_STATUS
00513Dr 2  A9 00        	lda #$00
00513Fr 2  8D 0C 90     	sta RegC
005142r 2               :
005142r 2  24 rr        	bit SOUNDS_STATUS
005144r 2  10 0B        	bpl :+
005146r 2               
005146r 2  A5 rr        	lda SOUNDS_STATUS
005148r 2  29 7F        	and #%01111111
00514Ar 2  85 rr        	sta SOUNDS_STATUS
00514Cr 2  A9 00        	lda #$00
00514Er 2  8D 0D 90     	sta RegD
005151r 2               :
005151r 2  68           	pla
005152r 2  AA           	tax
005153r 2  68           	pla
005154r 2  A8           	tay
005155r 2  68           	pla
005156r 2  60           	rts
005157r 2               
005157r 2  00           sndtyp:		.byte 0		; Beep sound parameter
005158r 2               
005158r 2               ;========================================================
005158r 2               ; SPRITE HANDLING ROUTINES
005158r 2               ;========================================================
005158r 2               
005158r 2               ;----------------------------------------------------
005158r 2               ; SPRITE
005158r 2               ;
005158r 2               ; Draw object sprite
005158r 2               ;----------------------------------------------------
005158r 2               
005158r 2               .if oflag
005158r 2               sprite:
005158r 2               	stx xtmp		; Save X-reg
005158r 2               	jsr scadd 		; get screen address in scraddr.
005158r 2               
005158r 2               	lda dispx 		; x position.
005158r 2               	and #7 			; position straddling cells.
005158r 2               	sta z80_b		; store in b register.
005158r 2               
005158r 2               	lda z80_l		; store sprite graphic address.
005158r 2               	sta sprit1+1
005158r 2               	sta sprit2+1
005158r 2               	lda z80_h
005158r 2               	sta sprit1+2
005158r 2               	sta sprit2+2
005158r 2               
005158r 2               	ldx #0			; pixel height.
005158r 2               	ldy #0
005158r 2               sprit1:
005158r 2               	lda objdta,x		; fetch first byte.
005158r 2               	sta spr
005158r 2               	inx
005158r 2               sprit2:
005158r 2               	lda objdta,x
005158r 2               	sta spr+1
005158r 2               
005158r 2               	lda #0
005158r 2               	sta spr+2
005158r 2               	jsr sprit7		; shift sprite
005158r 2               
005158r 2               	lda spr			; fetch graphic.
005158r 2               	ldy #0			; _BEEB
005158r 2               	eor (scraddr),y		; merge with screen image.
005158r 2               	sta (scraddr),y		; write to screen.
005158r 2               
005158r 2               	lda spr+1		; fetch graphic.
005158r 2               	ldy #16			; _BEEB
005158r 2               	eor (scraddr),y		; merge with screen image.
005158r 2               	sta (scraddr),y		; write to screen.
005158r 2               
005158r 2               	lda spr+2		; fetch graphic.
005158r 2               	ldy #32			; _BEEB
005158r 2               	eor (scraddr),y		; merge with screen image.
005158r 2               	sta (scraddr),y		; write to screen.
005158r 2               
005158r 2               	jsr nline
005158r 2               
005158r 2               	inx			; next source byte.
005158r 2               	cpx #32
005158r 2               	bne sprit1		; repeat
005158r 2               
005158r 2               	ldx xtmp		; retreive X-reg
005158r 2               	rts
005158r 2               
005158r 2               .endif
005158r 2               
005158r 2               ;------------------------------------------------------------------
005158r 2               ; SCADD
005158r 2               ;
005158r 2               ; This routine returns a screen address for X,Y in scraddr.
005158r 2               ;------------------------------------------------------------------
005158r 2               
005158r 2               scadd:
005158r 2  A5 rr        	lda dispx		; get x
00515Ar 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
00515Cr 2  85 rr        	sta scraddr		; set lb scraddr
00515Er 2  A9 00        	lda #0
005160r 2  85 rr        	sta scraddr+1		; set hb scraddr
005162r 2  06 rr        	asl scraddr		; multiply X by 2
005164r 2  26 rr        	rol scraddr+1
005166r 2               
005166r 2               ; Add line address Y pos to X
005166r 2               
005166r 2  A6 rr        	ldx dispy		; get row address Y pos
005168r 2  18           	clc
005169r 2  A5 rr        	lda scraddr
00516Br 2  7D 00 07     	adc SCADTB_lb,x
00516Er 2  85 rr        	sta scraddr
005170r 2  A5 rr        	lda scraddr+1
005172r 2  7D 00 08     	adc SCADTB_hb,x
005175r 2  85 rr        	sta scraddr+1
005177r 2               
005177r 2  60           	rts
005178r 2               
005178r 2               ;------------------------------------------------------------------
005178r 2               ; SSPRIA
005178r 2               ;
005178r 2               ; Erase single sprite, old (ix+0).
005178r 2               ;------------------------------------------------------------------
005178r 2               
005178r 2               sspria:
005178r 2  20 rr rr     	jsr gsprad		; get old sprite address.
00517Br 2               sspri2:
00517Br 2               .if rflag
00517Br 2               	lda z80_e		; 3c
00517Br 2               	sta dline_spraddr1+1	; 4c
00517Br 2               	sta dline_spraddr2+1	; 4c
00517Br 2               	lda z80_d		; 3c
00517Br 2               	sta dline_spraddr1+2	; 4c
00517Br 2               	sta dline_spraddr2+2	; 4c
00517Br 2               
00517Br 2               	ldx sprshft
00517Br 2               	lda shift_table,x
00517Br 2               	sta dline_shift1+1
00517Br 2               	sta dline_shift2+1
00517Br 2               	lda shift_table+1,x
00517Br 2               	sta dline_shift1+2
00517Br 2               	sta dline_shift2+2
00517Br 2               
00517Br 2               	ldx #0			; byte counter.
00517Br 2               sspri0:
00517Br 2               	jsr dline		; draw a line.
00517Br 2                 .if bflag
00517Br 2               	cpx #48			; big sprites have 24 bytes
00517Br 2                 .else
00517Br 2               	cpx #32			; normal sprites have 32 bytes
00517Br 2                 .endif
00517Br 2               	bne sspri0		; repeat 16 times x 2 bytes
00517Br 2               	rts
00517Br 2               .else
00517Br 2                 .if bflag
00517Br 2               	lda #24			; big sprites have 24 lines
00517Br 2                 .else
00517Br 2  A9 10        	lda #16			; normal sprites have 16 lines.
00517Dr 2                 .endif
00517Dr 2  8D rr rr     	sta acnt
005180r 2               sspri0:
005180r 2  20 rr rr     	jsr dline		; draw a line.
005183r 2  CE rr rr     	dec acnt
005186r 2  D0 F8        	bne sspri0		; repeat 16 times
005188r 2  60           	rts
005189r 2               
005189r 2  00           acnt:	.byte 0			; line counter
00518Ar 2               
00518Ar 2               .endif
00518Ar 2               
00518Ar 2               ;------------------------------------------------------------------
00518Ar 2               ; SSPRIB
00518Ar 2               ;
00518Ar 2               ; Display single sprite, new (ix+5).
00518Ar 2               ;------------------------------------------------------------------
00518Ar 2               
00518Ar 2               ssprib:
00518Ar 2  20 rr rr     	jsr gspran 		; get new sprite address.
00518Dr 2  4C rr rr     	jmp sspri2		; Display sprite
005190r 2               
005190r 2               ;------------------------------------------------------------------
005190r 2               ; SSPRIC
005190r 2               ;
005190r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
005190r 2               ;------------------------------------------------------------------
005190r 2               
005190r 2               sspric:
005190r 2  AD rr rr     	lda fontcol			; Background colour
005193r 2  85 rr        	sta z80_c
005195r 2  20 rr rr     	jsr cspr_old
005198r 2               
005198r 2  A0 11        	ldy #17
00519Ar 2  B1 rr        	lda (z80_ix),y
00519Cr 2  85 rr        	sta z80_c
00519Er 2  20 rr rr     	jsr cspr_new
0051A1r 2               
0051A1r 2               .if rflag
0051A1r 2               	jsr gsprad 		; get old sprite address.
0051A1r 2               
0051A1r 2               	lda z80_e		; 3c
0051A1r 2               	sta ddline_spraddr3+1	; 4c
0051A1r 2               	sta ddline_spraddr4+1	; 4c
0051A1r 2               
0051A1r 2               	lda z80_d		; 3c
0051A1r 2               	sta ddline_spraddr3+2	; 4c
0051A1r 2               	sta ddline_spraddr4+2	; 4c
0051A1r 2               
0051A1r 2               	ldx sprshft		; set spriteshift table addresses
0051A1r 2               	lda shift_table,x
0051A1r 2               	sta ddline_shift3+1
0051A1r 2               	sta ddline_shift4+1
0051A1r 2               	lda shift_table+1,x
0051A1r 2               	sta ddline_shift3+2
0051A1r 2               	sta ddline_shift4+2
0051A1r 2               
0051A1r 2               	jsr exx  		; store addresses.
0051A1r 2               	jsr gspran 		; get new sprite addresses.
0051A1r 2               
0051A1r 2               	lda z80_e		; 3c
0051A1r 2               	sta ddline_spraddr1+1	; 4c
0051A1r 2               	sta ddline_spraddr2+1	; 4c
0051A1r 2               
0051A1r 2               	lda z80_d		; 3c
0051A1r 2               	sta ddline_spraddr1+2	; 4c
0051A1r 2               	sta ddline_spraddr2+2	; 4c
0051A1r 2               
0051A1r 2               	ldx sprshft
0051A1r 2               	lda shift_table,x
0051A1r 2               	sta ddline_shift1+1
0051A1r 2               	sta ddline_shift2+1
0051A1r 2               	lda shift_table+1,x
0051A1r 2               	sta ddline_shift1+2
0051A1r 2               	sta ddline_shift2+2
0051A1r 2               
0051A1r 2               	ldx #0
0051A1r 2               lloop:
0051A1r 2               	jsr ddline 		; draw a line.
0051A1r 2                 .if bflag
0051A1r 2               	cpx #48
0051A1r 2                 .else
0051A1r 2               	cpx #32
0051A1r 2                 .endif
0051A1r 2               	bne lloop
0051A1r 2               	rts
0051A1r 2               
0051A1r 2               shift_table:
0051A1r 2               	.word shift0
0051A1r 2               	.word shift2
0051A1r 2               	.word shift4
0051A1r 2               	.word shift6
0051A1r 2               
0051A1r 2               ;------------------------------------------------------------------
0051A1r 2               ; DLINE
0051A1r 2               ;
0051A1r 2               ; Draw a sprite line, now work out next target address.
0051A1r 2               ;
0051A1r 2               ; Input:
0051A1r 2               ;  B  = right mask
0051A1r 2               ;  C  = left mask
0051A1r 2               ;  DE = spriteaddress
0051A1r 2               ;  scraddr = screen address
0051A1r 2               ;------------------------------------------------------------------
0051A1r 2               
0051A1r 2               dline:
0051A1r 2               
0051A1r 2               dline_spraddr1:
0051A1r 2               	ldy $ffff,x 		; get graphic data as pointer.
0051A1r 2               dline_shift1:
0051A1r 2               	lda $ffff,y		; get pre-shifted data
0051A1r 2               	sta sprtmp		; save byte
0051A1r 2               	and z80_c 		; mask right for left byte
0051A1r 2               
0051A1r 2               	ldy #0
0051A1r 2               	eor (scraddr),y 	; XOR with what's there.
0051A1r 2               	sta (scraddr),y 	; display left byte
0051A1r 2               
0051A1r 2               ; carry to next screen byte
0051A1r 2               
0051A1r 2               	lda sprtmp		; fetch data.
0051A1r 2               	and z80_b 		; mask for left part
0051A1r 2               	sta sprtmp
0051A1r 2               
0051A1r 2               ; middle screen byte
0051A1r 2               
0051A1r 2               	inx
0051A1r 2               dline_spraddr2:
0051A1r 2               	ldy $ffff,x 		; second bit of data.
0051A1r 2               dline_shift2:
0051A1r 2               	lda $ffff,y
0051A1r 2               	sta sprtmp2
0051A1r 2               	and z80_c 		; mask away what's not needed.
0051A1r 2               	ora sprtmp
0051A1r 2               	ldy #16
0051A1r 2               	eor (scraddr),y 	; XOR with what's there.
0051A1r 2               	sta (scraddr),y 	; display middle bye.
0051A1r 2               
0051A1r 2               ; carry to last screen byte
0051A1r 2               
0051A1r 2               	lda sprtmp2
0051A1r 2               	and z80_b 		; mask away unwanted
0051A1r 2               
0051A1r 2               	ldy #32
0051A1r 2               	eor (scraddr),y 	; XOR with what's there.
0051A1r 2               	sta (scraddr),y 	; display right byte.
0051A1r 2               
0051A1r 2               	inx
0051A1r 2               .else
0051A1r 2               
0051A1r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
0051A4r 2  20 rr rr     	jsr exx  		; store addresses.
0051A7r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
0051AAr 2               
0051AAr 2               .if bflag
0051AAr 2               	lda #23
0051AAr 2               .else
0051AAr 2  A9 0F        	lda #15
0051ACr 2               .endif
0051ACr 2  85 rr        	sta ccnt
0051AEr 2               lloop:
0051AEr 2  20 rr rr     	jsr dline 		; draw a line.
0051B1r 2  20 rr rr     	jsr exx  		; restore old addresses.
0051B4r 2  20 rr rr     	jsr dline 		; delete a line.
0051B7r 2  20 rr rr     	jsr exx  		; flip to new sprite addresses.
0051BAr 2  C6 rr        	dec ccnt
0051BCr 2  D0 F0        	bne lloop
0051BEr 2               
0051BEr 2  20 rr rr     	jsr dline		; draw a line.
0051C1r 2  20 rr rr     	jsr exx 		; restore old addresses.
0051C4r 2               
0051C4r 2               ;-------------------------------------------------------------
0051C4r 2               ; Drop through.
0051C4r 2               ; Line drawn, now work out next target address.
0051C4r 2               ;
0051C4r 2               ; Input:
0051C4r 2               ;  B  = right mask
0051C4r 2               ;  C  = left mask
0051C4r 2               ;  DE = spriteaddress
0051C4r 2               ;  scraddr = screen address
0051C4r 2               ;-------------------------------------------------------------
0051C4r 2               
0051C4r 2               dline:
0051C4r 2  A0 00        	ldy #0
0051C6r 2  B1 rr        	lda (z80_de),y 		; graphic data.
0051C8r 2  48           	pha
0051C9r 2  25 rr        	and z80_c 		; mask away what's not needed.
0051CBr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0051CDr 2  91 rr        	sta (scraddr),y 	; left byte on screen.
0051CFr 2               
0051CFr 2  68           	pla
0051D0r 2  25 rr        	and z80_b 		; mask away unwanted bits.
0051D2r 2  A0 20        	ldy #32
0051D4r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0051D6r 2  91 rr        	sta (scraddr),y 	; right byte on screen
0051D8r 2               
0051D8r 2  E6 rr        	inc z80_e 		; next graphic.
0051DAr 2  D0 02        	bne :+
0051DCr 2  E6 rr        	inc z80_d
0051DEr 2               :
0051DEr 2               ; _BEEB screen arrangement
0051DEr 2               ;	sec
0051DEr 2               ;	lda scraddr 		; one character cell to the left.
0051DEr 2               ;	sbc #8
0051DEr 2               ;	sta scraddr
0051DEr 2               ;	lda scraddr+1
0051DEr 2               ;	sbc #0
0051DEr 2               ;	sta scraddr+1
0051DEr 2  A0 00        	ldy #0
0051E0r 2  B1 rr        	lda (z80_de),y 		; second bit of data.
0051E2r 2  A0 10        	ldy #16
0051E4r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
0051E6r 2  91 rr        	sta (scraddr),y 	; middle byte on screen.
0051E8r 2               
0051E8r 2  E6 rr        	inc z80_e 		; point to next line of data.
0051EAr 2  D0 02        	bne :+
0051ECr 2  E6 rr        	inc z80_d
0051EEr 2               :
0051EEr 2               ; _BEEB screen arrangement
0051EEr 2               ;	sec
0051EEr 2               ;	lda scraddr 		; another char left.
0051EEr 2               ;	sbc #8
0051EEr 2               ;	sta scraddr
0051EEr 2               ;	lda scraddr+1
0051EEr 2               ;	sbc #0
0051EEr 2               ;	sta scraddr+1
0051EEr 2               .endif
0051EEr 2               
0051EEr 2               ;----------------------------------------------------------------------
0051EEr 2               ; Line drawn, now work out next target address.
0051EEr 2               ;----------------------------------------------------------------------
0051EEr 2               
0051EEr 2               ; _BEEB screen arrangement
0051EEr 2               
0051EEr 2               nline:
0051EEr 2  A5 rr        	lda scraddr 			; get low byte of address.
0051F0r 2  29 0F        	and #15
0051F2r 2  C9 0F        	cmp #15				; is this last line of row?
0051F4r 2  F0 03        	beq beeb_next_row
0051F6r 2               
0051F6r 2               	; within same row
0051F6r 2  E6 rr        	inc scraddr			; new low byte of address.
0051F8r 2  60           	rts
0051F9r 2               
0051F9r 2               beeb_next_row:
0051F9r 2  18           	clc
0051FAr 2  A5 rr        	lda scraddr
0051FCr 2  69 51        	adc #<(ScreenRowBytes-15)
0051FEr 2  85 rr        	sta scraddr			; new low byte of address.
005200r 2  A5 rr        	lda scraddr+1
005202r 2  69 01        	adc #>(ScreenRowBytes-15)
005204r 2  85 rr        	sta scraddr+1			; new high byte of address.
005206r 2  60           	rts
005207r 2               
005207r 2               .if rflag
005207r 2               ;-------------------------------------------------------------
005207r 2               ; Drop through.
005207r 2               ; Line drawn, now work out next target address.
005207r 2               ;
005207r 2               ; Input:
005207r 2               ;  B  = right mask
005207r 2               ;  C  = left mask
005207r 2               ;  DE = spriteaddress
005207r 2               ;  scraddr = screen address
005207r 2               ;-------------------------------------------------------------
005207r 2               
005207r 2               ddline:
005207r 2               
005207r 2               ; NEW SPRITE
005207r 2               
005207r 2               ; first screen byte
005207r 2               
005207r 2               ddline_spraddr1:
005207r 2               	ldy $ffff,x 		; graphic data.
005207r 2               ddline_shift1:
005207r 2               	lda $ffff,y
005207r 2               	sta sprtmp
005207r 2               	and z80_c 			; mask away what's not needed.
005207r 2               
005207r 2               	ldy #0
005207r 2               	eor (scraddr),y 	; XOR with what's there.
005207r 2               	sta (scraddr),y 	; bung it in.
005207r 2               
005207r 2               ; carry to next screen byte
005207r 2               
005207r 2               	lda sprtmp			; fetch data.
005207r 2               	and z80_b 			; mask away unwanted
005207r 2               	sta sprtmp
005207r 2               
005207r 2               ; middle screen byte
005207r 2               
005207r 2               	inx
005207r 2               ddline_spraddr2:
005207r 2               	ldy $ffff,x 		; second bit of data.
005207r 2               ddline_shift2:
005207r 2               	lda $ffff,y
005207r 2               	sta sprtmp2
005207r 2               	and z80_c 			; mask away what's not needed.
005207r 2               	ora sprtmp
005207r 2               
005207r 2               	ldy #16
005207r 2               	eor (scraddr),y 	; XOR with what's there.
005207r 2               	sta (scraddr),y 	; bung it in.
005207r 2               
005207r 2               ; carry to last screen byte
005207r 2               
005207r 2               	lda sprtmp2
005207r 2               	and z80_b 			; mask away unwanted
005207r 2               
005207r 2               	ldy #32
005207r 2               	eor (scraddr),y 	; XOR with what's there.
005207r 2               	sta (scraddr),y 	; bung it in.
005207r 2               
005207r 2               ; _BEEB next row
005207r 2               
005207r 2               	lda scraddr 		; get low byte of address.
005207r 2               	and #15
005207r 2               	cmp #15				; is this last line of row?
005207r 2               	beq :+
005207r 2               
005207r 2               	; within same row can't increment page
005207r 2               	inc scraddr			; new low byte of address.
005207r 2               	bne ddline2
005207r 2               
005207r 2               :
005207r 2               	clc
005207r 2               	lda scraddr
005207r 2               	adc #<(ScreenRowBytes-15)
005207r 2               	sta scraddr			; new low byte of address.
005207r 2               	lda scraddr+1
005207r 2               	adc #>(ScreenRowBytes-15)
005207r 2               	sta scraddr+1		; new high byte of address.
005207r 2               
005207r 2               ; OLD SPRITE
005207r 2               
005207r 2               ddline2:
005207r 2               
005207r 2               ; still first row but different data!
005207r 2               
005207r 2               	dex
005207r 2               
005207r 2               ; first screen byte
005207r 2               
005207r 2               ddline_spraddr3:
005207r 2               	ldy $ffff,x			; graphic data.
005207r 2               ddline_shift3:
005207r 2               	lda $ffff,y
005207r 2               	sta sprtmp
005207r 2               	and z80_cp 			; mask away what's not needed.
005207r 2               
005207r 2               	ldy #0
005207r 2               	eor (z80_hlp),y 	; XOR with what's there.
005207r 2               	sta (z80_hlp),y 	; bung it in.
005207r 2               
005207r 2               ; carry to next screen byte
005207r 2               
005207r 2               	lda sprtmp			; fetch data.
005207r 2               	and z80_bp 			; mask away unwanted
005207r 2               	sta sprtmp
005207r 2               
005207r 2               ; middle screen byte
005207r 2               
005207r 2               	inx
005207r 2               ddline_spraddr4:
005207r 2               	ldy $ffff,x 		; second bit of data.
005207r 2               ddline_shift4:
005207r 2               	lda $ffff,y
005207r 2               	sta sprtmp2
005207r 2               	and z80_cp 			; mask away what's not needed.
005207r 2               	ora sprtmp
005207r 2               
005207r 2               	ldy #16
005207r 2               	eor (z80_hlp),y 	; XOR with what's there.
005207r 2               	sta (z80_hlp),y 	; bung it in.
005207r 2               
005207r 2               ; last screen byte
005207r 2               
005207r 2               	lda sprtmp2			; fetch data.
005207r 2               	and z80_bp 			; mask away unwanted
005207r 2               
005207r 2               	ldy #32
005207r 2               	eor (z80_hlp),y 	; XOR with what's there.
005207r 2               	sta (z80_hlp),y 	; bung it in.
005207r 2               
005207r 2               ; next row of sprite data
005207r 2               
005207r 2               	inx
005207r 2               
005207r 2               ; _BEEB screen arrangement
005207r 2               
005207r 2               	lda z80_lp 			; get low byte of address.
005207r 2               	and #15
005207r 2               	cmp #15				; is this last line of row?
005207r 2               	beq :+
005207r 2               
005207r 2               	; within same row can't increment page
005207r 2               	inc z80_lp			; new low byte of address.
005207r 2               	rts
005207r 2               
005207r 2               :
005207r 2               	clc
005207r 2               	lda z80_lp
005207r 2               	adc #<(ScreenRowBytes-15)
005207r 2               	sta z80_lp			; new low byte of address.
005207r 2               	lda z80_lp+1
005207r 2               	adc #>(ScreenRowBytes-15)
005207r 2               	sta z80_lp+1		; new high byte of address.
005207r 2               	rts
005207r 2               .endif
005207r 2               
005207r 2               ;----------------------------------------------------
005207r 2               ; SPRINTEINK
005207r 2               ;----------------------------------------------------
005207r 2               
005207r 2               cspr:
005207r 2  A5 rr        	lda z80_c
005209r 2  A0 11        	ldy #17
00520Br 2  91 rr        	sta (z80_ix),y
00520Dr 2  20 rr rr     	jsr cspr_new
005210r 2  60           	rts
005211r 2               
005211r 2               cspr_new:
005211r 2  A0 08        	ldy #8
005213r 2  B1 rr        	lda (z80_ix),y			; Get sprite y
005215r 2  4C rr rr     	jmp cspr_go
005218r 2               cspr_old:
005218r 2  A0 03        	ldy #3
00521Ar 2  B1 rr        	lda(z80_ix),y
00521Cr 2               cspr_go:
00521Cr 2  85 rr        	sta dispy
00521Er 2  C9 B1        	cmp #8*ScrHeight+1		; Check if on screen
005220r 2  90 01        	bcc :+
005222r 2  60           	rts
005223r 2               :
005223r 2  C8           	iny
005224r 2  B1 rr        	lda (z80_ix),y			; Get sprite x
005226r 2  85 rr        	sta dispx
005228r 2               
005228r 2               ; Calculate colour attribte address in scraddr
005228r 2               
005228r 2  20 rr rr     	jsr coladdr
00522Br 2               
00522Br 2               ; Set number of rows
00522Br 2               
00522Br 2  A9 02        	lda #2
00522Dr 2  85 rr        	sta z80_b
00522Fr 2  A5 rr        	lda dispy
005231r 2  29 0F        	and #15
005233r 2  D0 02        	bne :+
005235r 2  C6 rr        	dec z80_b
005237r 2               :
005237r 2               ; Loop to colour row blocks
005237r 2               
005237r 2               cspr0:
005237r 2  A0 00        	ldy #0
005239r 2  A5 rr        	lda z80_c
00523Br 2  91 rr        	sta (scraddr),y
00523Dr 2               cspr6:
00523Dr 2  A0 01        	ldy #1
00523Fr 2  91 rr        	sta (scraddr),y
005241r 2               cspr7:
005241r 2  A5 rr        	lda dispx
005243r 2  29 07        	and #7
005245r 2  F0 06        	beq cspr1
005247r 2               
005247r 2  A0 02        	ldy #2
005249r 2  A5 rr        	lda z80_c
00524Br 2  91 rr        	sta (scraddr),y
00524Dr 2               cspr1:
00524Dr 2  A5 rr        	lda scraddr
00524Fr 2  18           	clc
005250r 2  69 16        	adc #22
005252r 2  85 rr        	sta scraddr
005254r 2  90 02        	bcc :+
005256r 2  E6 rr        	inc scraddr+1
005258r 2               :
005258r 2  C6 rr        	dec z80_b
00525Ar 2  D0 DB        	bne cspr0
00525Cr 2  60           	rts
00525Dr 2               
00525Dr 2               ; Calculate colour attribte address
00525Dr 2               ; scraddr = COLOR + dispy/16 + dispx/8
00525Dr 2               
00525Dr 2               coladdr:
00525Dr 2  A5 rr        	lda dispy
00525Fr 2  4A           	lsr a
005260r 2  4A           	lsr a
005261r 2  4A           	lsr a
005262r 2  4A           	lsr a
005263r 2  A8           	tay
005264r 2  B9 55 0A     	lda COLATTTB_hb,y
005267r 2  85 rr        	sta scraddr+1
005269r 2  B9 4A 0A     	lda COLATTTB_lb,y
00526Cr 2  85 rr        	sta scraddr
00526Er 2  A5 rr        	lda dispx
005270r 2  4A           	lsr a
005271r 2  4A           	lsr a
005272r 2  4A           	lsr a
005273r 2  18           	clc
005274r 2  65 rr        	adc scraddr
005276r 2  85 rr        	sta scraddr
005278r 2  90 02        	bcc :+
00527Ar 2  E6 rr        	inc scraddr+1
00527Cr 2               :
00527Cr 2  60           	rts
00527Dr 2               
00527Dr 2               ;----------------------------------------------------
00527Dr 2               ; Display character in A at dispx,dispy.
00527Dr 2               ;
00527Dr 2               ; Input:
00527Dr 2               ;  A 	   = character to print
00527Dr 2               ;----------------------------------------------------
00527Dr 2               
00527Dr 2               pchar:
00527Dr 2  85 rr        	sta fntaddr
00527Fr 2  A9 00        	lda #0
005281r 2  85 rr        	sta fntaddr+1
005283r 2  06 rr        	asl fntaddr  		; multiply char by 8.
005285r 2  26 rr        	rol fntaddr+1
005287r 2  06 rr        	asl fntaddr
005289r 2  26 rr        	rol fntaddr+1
00528Br 2  06 rr        	asl fntaddr
00528Dr 2  26 rr        	rol fntaddr+1
00528Fr 2               
00528Fr 2  A5 rr        	lda fntaddr
005291r 2  18           	clc
005292r 2  69 rr        	adc #<(FONT-256)
005294r 2  85 rr        	sta fntaddr		; that's the low byte.
005296r 2  A5 rr        	lda fntaddr+1
005298r 2  69 rr        	adc #>(FONT-256)
00529Ar 2  85 rr        	sta fntaddr+1		; add displacement.
00529Cr 2               
00529Cr 2               pchark:
00529Cr 2  20 rr rr     	jsr gaadd		; set colour attribute
00529Fr 2  AD rr rr     	lda fontcol
0052A2r 2  A0 00        	ldy #0
0052A4r 2  91 rr        	sta (bufaddr),y
0052A6r 2               
0052A6r 2  20 rr rr     	jsr gprad		; get screen address.
0052A9r 2  A2 07        	ldx #7			; lines to write.
0052ABr 2               pchar0:
0052ABr 2  A0 00        	ldy #0
0052ADr 2  B1 rr        	lda (fntaddr),y 	; get image byte.
0052AFr 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
0052B2r 2               .if iflag
0052B2r 2               	eor #TxtInvert		; Invert
0052B2r 2               .endif
0052B2r 2  91 rr        	sta (scraddr),y 	; copy to screen.
0052B4r 2  E6 rr        	inc fntaddr		; next image byte.
0052B6r 2  D0 02        	bne :+
0052B8r 2  E6 rr        	inc fntaddr+1
0052BAr 2               :
0052BAr 2  CA           	dex			; next screen row down.
0052BBr 2  10 EE        	bpl pchar0		; repeat.
0052BDr 2               
0052BDr 2  60           	rts
0052BEr 2               
0052BEr 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
0052C2r 2  03 02 01 00  
0052C6r 2               
0052C6r 2               ;----------------------------------------------------
0052C6r 2               ; LoadFile
0052C6r 2               ;----------------------------------------------------
0052C6r 2               
0052C6r 2               loadfile:
0052C6r 2  AA           	tax
0052C7r 2  A9 rr        	lda #<msgdat		; pointer to messages.
0052C9r 2  85 rr        	sta z80_l
0052CBr 2  A9 rr        	lda #>msgdat
0052CDr 2  85 rr        	sta z80_h
0052CFr 2  20 rr rr     	jsr getwrd		; get message number.
0052D2r 2               
0052D2r 2               ; Init screen for NTSC
0052D2r 2               ; this sets the background and border color of the screen
0052D2r 2               ; in this case border black and background black
0052D2r 2               
0052D2r 2  A9 08        	lda #%00001000
0052D4r 2  8D 0F 90     	sta RegF
0052D7r 2               
0052D7r 2               ; z80_hl should point to the textstring now.
0052D7r 2               ; Read filename +length into buffer
0052D7r 2               
0052D7r 2  A0 00        	ldy #0
0052D9r 2               nameloop:
0052D9r 2  B1 rr        	lda (z80_hl),y
0052DBr 2  30 07        	bmi lastchar
0052DDr 2  99 rr rr     	sta filename,y
0052E0r 2  C8           	iny
0052E1r 2  4C rr rr     	jmp nameloop
0052E4r 2               lastchar:
0052E4r 2  29 7F        	and #$7f
0052E6r 2  99 rr rr     	sta filename,y
0052E9r 2  C8           	iny
0052EAr 2  8C rr rr     	sty filelen
0052EDr 2               
0052EDr 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
0052EDr 2               ;                       usually the first drive, and y set to 1 reads from the header
0052EDr 2               ;                       of the file the location where to save it)
0052EDr 2  A9 01        	lda #1
0052EFr 2  A2 08        	ldx #8		; Disk device
0052F1r 2  A0 01        	ldy #1
0052F3r 2  20 BA FF     	jsr $ffba
0052F6r 2               
0052F6r 2               ; Load the file name (in accumulator the size of the string
0052F6r 2               ;                      containing the name, x low address for FileName,
0052F6r 2               ;                      y high address for FileName)
0052F6r 2  AD rr rr     	lda filelen
0052F9r 2  A2 rr        	ldx #<filename
0052FBr 2  A0 rr        	ldy #>filename
0052FDr 2  20 BD FF     	jsr $ffbd
005300r 2               
005300r 2               ; load from disk to ram
005300r 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
005302r 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
005304r 2  A0 00        	ldy #>$ff	; target location high (got from header)
005306r 2  20 D5 FF     	jsr $ffd5
005309r 2               
005309r 2  60           	rts
00530Ar 2               
00530Ar 2               filename:
00530Ar 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00530Er 2  00 00 00 00  
005312r 2  00 00 00 00  
00531Ar 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00531Er 2  00 00 00 00  
005322r 2  00 00 00 00  
00532Ar 2               filelen:
00532Ar 2  00           	.byte 0
00532Br 2               
00532Br 2               ;----------------------------------------------------
00532Br 2               ; Sound
00532Br 2               ;----------------------------------------------------
00532Br 2               
00532Br 2               ; Actual memory locations
00532Br 2               
00532Br 2               CHANNEL1_ENABLED  = $ea
00532Br 2               CHANNEL2_ENABLED  = $eb
00532Br 2               CHANNEL3_ENABLED  = $ec
00532Br 2               CHANNEL4_ENABLED  = $ed
00532Br 2               MUSIC_ON		  = $ee
00532Br 2               
00532Br 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
00532Fr 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
005333r 2  DE           SetSoundTone: 		.byte $de
005334r 2               
005334r 2               ;--------------------------------------------
005334r 2               ;                      SOUND    0   1   2   3
005334r 2               ;--------------------------------------------
005334r 2  C8 C8 DE DC  SndTone:		.byte 200,200,222,220
005338r 2  01 00 03 01  SndChannel:		.byte   1,  0,  3,  1
00533Cr 2  3C 3C 3C 28  SndDuration:		.byte  60, 60, 60, 40
005340r 2               
005340r 2               ;--------------------------------------------
005340r 2               ; Called by SOUND with parameter in A
005340r 2               ;--------------------------------------------
005340r 2               
005340r 2               playsound:
005340r 2  A8           	tay
005341r 2  B9 rr rr     	lda SndTone,y		; lda $a0
005344r 2  8D rr rr     	sta SetSoundTone	; sta SetSoundTone
005347r 2  B9 rr rr     	lda SndDuration,y	; lda $a2
00534Ar 2  BE rr rr     	ldx SndChannel,y	; ldx $a1
00534Dr 2  9D rr rr     	sta SetSoundDuration,x	; sta SetSoundDuration,x
005350r 2  B9 rr rr     	lda SndTone,y		; lda $a0
005353r 2  9D rr rr     	sta SetSoundVars,x	; sta SetSoundVars,x
005356r 2  60           	rts
005357r 2               
005357r 2               ;--------------------------------------------
005357r 2               ; Make sound
005357r 2               ; Called by vsync every frame
005357r 2               ;--------------------------------------------
005357r 2               
005357r 2               make_sound2:
005357r 2  A0 00        	ldy #$00
005359r 2  AE rr rr     	ldx SetSoundTone
00535Cr 2  AD rr rr     	lda SetSoundVars
00535Fr 2  CD rr rr     	cmp SetSoundDuration
005362r 2  B0 1C        	bcs l0366
005364r 2               
005364r 2  AD rr rr     	lda SetSoundVars
005367r 2  CD rr rr     	cmp SetSoundDuration
00536Ar 2  D0 07        	bne :+
00536Cr 2  A5 EE        	lda MUSIC_ON
00536Er 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
005370r 2  4C rr rr     	jmp l0374
005373r 2               :
005373r 2               
005373r 2  A9 00        	lda #$0
005375r 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
005377r 2  EE rr rr     	inc SetSoundVars
00537Ar 2  EE 0A 90     	inc RegA
00537Dr 2  4C rr rr     	jmp l0374
005380r 2               
005380r 2  8C 0A 90     l0366:	sty RegA
005383r 2  EC rr rr     	cpx SetSoundVars
005386r 2  D0 06        	bne l0374
005388r 2  8C rr rr     	sty SetSoundVars
00538Br 2  8E 0A 90     	stx RegA
00538Er 2               
00538Er 2  AD rr rr     l0374:	lda SetSoundVars+1
005391r 2  CD rr rr     	cmp SetSoundDuration+1
005394r 2  D0 07        	bne :+
005396r 2  A5 EE        	lda MUSIC_ON
005398r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 1
00539Ar 2  4C rr rr     	jmp l0392
00539Dr 2               :
00539Dr 2  A9 00        	lda #$0
00539Fr 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 2
0053A1r 2  AD rr rr     	lda SetSoundVars+1
0053A4r 2  CD rr rr     	cmp SetSoundDuration+1
0053A7r 2  B0 09        	bcs l0384
0053A9r 2  EE rr rr     	inc SetSoundVars+1
0053ACr 2  EE 0B 90     	inc RegB
0053AFr 2  4C rr rr     	jmp l0392
0053B2r 2               
0053B2r 2  8C 0B 90     l0384:	sty RegB
0053B5r 2  EC rr rr     	cpx SetSoundVars+1
0053B8r 2  D0 06        	bne l0392
0053BAr 2  8C rr rr     	sty SetSoundVars+1
0053BDr 2  8E 0B 90     	stx RegB
0053C0r 2               
0053C0r 2  AD rr rr     l0392:	lda SetSoundVars+2
0053C3r 2  CD rr rr     	cmp SetSoundDuration+2
0053C6r 2  D0 07        	bne :+
0053C8r 2  A5 EE        	lda MUSIC_ON
0053CAr 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 1
0053CCr 2  4C rr rr     	jmp l03b0
0053CFr 2               :
0053CFr 2  A9 00        	lda #$0
0053D1r 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 3
0053D3r 2  AD rr rr     	lda SetSoundVars+2
0053D6r 2  CD rr rr     	cmp SetSoundDuration+2
0053D9r 2  B0 09        	bcs l03a2
0053DBr 2  EE rr rr     	inc SetSoundVars+2
0053DEr 2  CE 0C 90     	dec RegC
0053E1r 2  4C rr rr     	jmp l03b0
0053E4r 2               
0053E4r 2  8C 0C 90     l03a2:	sty RegC
0053E7r 2  EC rr rr     	cpx SetSoundVars+2
0053EAr 2  D0 06        	bne l03b0
0053ECr 2  8C rr rr     	sty SetSoundVars+2
0053EFr 2  8E 0C 90     	stx RegC
0053F2r 2               
0053F2r 2  AD rr rr     l03b0:	lda SetSoundVars+3
0053F5r 2  CD rr rr     	cmp SetSoundDuration+3
0053F8r 2  D0 07        	bne :+
0053FAr 2  A5 EE        	lda MUSIC_ON
0053FCr 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 1
0053FEr 2  4C rr rr     	jmp l03d3
005401r 2               :
005401r 2               
005401r 2               	; lda SetSoundVars+3
005401r 2               	; cmp SetSoundDuration+3
005401r 2               	; beq l03e1
005401r 2               
005401r 2  A9 00        	lda #$0
005403r 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 4
005405r 2               
005405r 2  AD rr rr     	lda SetSoundVars+3
005408r 2  CD rr rr         cmp SetSoundDuration+3 ; $03b3 $03b4
00540Br 2  B0 1C            bcs l03d3
00540Dr 2               
00540Dr 2  EE rr rr     	inc SetSoundVars+3
005410r 2  AD rr rr     	lda SetSoundVars+3
005413r 2  C9 16        	cmp #$16
005415r 2  D0 07        	bne l03c8
005417r 2  A9 B0        	lda #$b0
005419r 2  8D 0D 90     	sta RegD
00541Cr 2  F0 19        	beq l03e1
00541Er 2  C9 2B        l03c8:	cmp #$2b
005420r 2  D0 15        	bne l03e1
005422r 2  A9 A0        	lda #$a0
005424r 2  8D 0D 90     	sta RegD
005427r 2  F0 0E        	beq l03e1
005429r 2  8C 0D 90     l03d3:	sty RegD
00542Cr 2  EC rr rr     	cpx SetSoundVars+3
00542Fr 2  D0 06        	bne l03e1
005431r 2  8C rr rr     	sty SetSoundVars+3
005434r 2  8E 0D 90     	stx RegD
005437r 2               
005437r 2  60           l03e1:	rts
005438r 2               
005438r 2               ;----------------------------------------------------
005438r 2               ; Set video registers
005438r 2               ;----------------------------------------------------
005438r 2               
005438r 2               SetReg:
005438r 2  8D rr rr     	sta mode
00543Br 2  0A           	asl a
00543Cr 2  18           	clc
00543Dr 2  6D rr rr     	adc crtflag
005440r 2  AA           	tax
005441r 2  BD rr rr     	lda centreX,x
005444r 2  8D 00 90     	sta Reg0
005447r 2  BD rr rr     	lda centreY,x
00544Ar 2  8D 01 90     	sta Reg1
00544Dr 2  BD rr rr     	lda scrW,x
005450r 2  8D 02 90     	sta Reg2
005453r 2  BD rr rr     	lda scrH,x
005456r 2  8D 03 90     	sta Reg3
005459r 2  BD rr rr     	lda RAMset,x
00545Cr 2  8D 05 90     	sta Reg5
00545Fr 2  60           	rts
005460r 2               
005460r 2  04 0C 06 0E  centreX:	.byte $04,$0c,$06,$0e
005464r 2  1B 26 18 24  centreY:	.byte $1b,$26,$18,$24
005468r 2  96 96 14 14  scrW:		.byte $96,$96,$14,$14
00546Cr 2  17 17 19 19  scrH:		.byte $17,$17,$19,$19
005470r 2  8C 8C CC CC  RAMset:		.byte $8c,$8c,$cc,$cc
005474r 2  84 A0 84 A0  BottomScr:	.byte $84,$a0,$84,$a0
005478r 2               
005478r 2               ;----------------------------------------------------
005478r 2               ; Display functions
005478r 2               ;
005478r 2               ; DISPLAYON   resets CentreY
005478r 2               ; DISPLAYOFF  locates screen below bottom
005478r 2               ; DISPLAYUP   scrolls screen up until default CentreY
005478r 2               ; DISPLAYDOWN scrolls screen down until below bottom
005478r 2               ;----------------------------------------------------
005478r 2               
005478r 2               dispon:
005478r 2  AD rr rr     	lda mode
00547Br 2  0A           	asl a
00547Cr 2  18           	clc
00547Dr 2  6D rr rr     	adc crtflag
005480r 2  AA           	tax
005481r 2  BD rr rr     	lda centreY,x
005484r 2  8D 01 90     	sta Reg1
005487r 2  60           	rts
005488r 2               
005488r 2               dispoff:
005488r 2  AD rr rr     	lda mode
00548Br 2  0A           	asl a
00548Cr 2  18           	clc
00548Dr 2  6D rr rr     	adc crtflag
005490r 2  AA           	tax
005491r 2  BD rr rr     	lda BottomScr,x
005494r 2  8D 01 90     	sta Reg1
005497r 2  60           	rts
005498r 2               
005498r 2               dispup:
005498r 2  AD rr rr     	lda mode
00549Br 2  0A           	asl a
00549Cr 2  18           	clc
00549Dr 2  6D rr rr     	adc crtflag
0054A0r 2  AA           	tax
0054A1r 2  BD rr rr     	lda centreY,x
0054A4r 2  85 rr        	sta tmp
0054A6r 2               scr_down_loop:
0054A6r 2  A9 01        	lda #1
0054A8r 2  20 rr rr     	jsr delay
0054ABr 2  CE 01 90     	dec Reg1
0054AEr 2  AD 01 90     	lda Reg1
0054B1r 2  C5 rr        	cmp tmp
0054B3r 2  D0 F1        	bne scr_down_loop
0054B5r 2  60           	rts
0054B6r 2               
0054B6r 2               dispdown:
0054B6r 2  AD rr rr     	lda mode
0054B9r 2  0A           	asl a
0054BAr 2  18           	clc
0054BBr 2  6D rr rr     	adc crtflag
0054BEr 2  AA           	tax
0054BFr 2  A9 01        	lda #1
0054C1r 2  20 rr rr     	jsr delay
0054C4r 2  EE 01 90     	inc Reg1
0054C7r 2  AD 01 90     	lda Reg1
0054CAr 2  DD rr rr     	cmp BottomScr,x
0054CDr 2  D0 E7        	bne dispdown
0054CFr 2  60           	rts
0054D0r 2               
0054D0r 1               ;	.include "music.inc"
0054D0r 1               ;colscr:	.incbin "..\pictures\slasher3c"
0054D0r 1               ;datscr:	.incbin "..\pictures\slasher3d"
0054D0r 1               
0054D0r 1               	.include "z80.asm"
0054D0r 2               ;------------------------------------------------------
0054D0r 2               ; z80.asm
0054D0r 2               ; spectrum stuff
0054D0r 2               ; adresses
0054D0r 2               
0054D0r 2               ;ws	 = $60
0054D0r 2               
0054D0r 2               ;z80_f	 = ws+$00
0054D0r 2               ;z80_a	 = ws+$01
0054D0r 2               ;z80_af	 = z80_f
0054D0r 2               
0054D0r 2               ;z80_c	 = ws+$02
0054D0r 2               ;z80_b	 = ws+$03
0054D0r 2               ;z80_bc	 = z80_c
0054D0r 2               
0054D0r 2               ;z80_e	 = ws+$04
0054D0r 2               ;z80_d	 = ws+$05
0054D0r 2               ;z80_de	 = z80_e
0054D0r 2               
0054D0r 2               ;z80_l	 = ws+$06
0054D0r 2               ;z80_h	 = ws+$07
0054D0r 2               ;z80_hl	 = z80_l
0054D0r 2               
0054D0r 2               ;z80_x    = ws+$08
0054D0r 2               ;z80_i    = ws+$09
0054D0r 2               ;z80_ix	 = z80_x
0054D0r 2               
0054D0r 2               ;z80_iy	 = ws+$0a
0054D0r 2               
0054D0r 2               ;z80_fp	 = ws+$0c
0054D0r 2               ;z80_ap	 = ws+$0d
0054D0r 2               
0054D0r 2               ;z80_cp	 = ws+$0e
0054D0r 2               ;z80_bp	 = ws+$0f
0054D0r 2               ;z80_bcp = z80_cp
0054D0r 2               
0054D0r 2               ;z80_ep	 = ws+$10
0054D0r 2               ;z80_dp	 = ws+$11
0054D0r 2               ;z80_dep = z80_ep
0054D0r 2               
0054D0r 2               ;z80_lp	 = ws+$12
0054D0r 2               ;z80_hp	 = ws+$13
0054D0r 2               ;z80_hlp = z80_lp
0054D0r 2               
0054D0r 2               ;z80_sp   = ws+$14
0054D0r 2               
0054D0r 2               ;z80_reg0 = ws+$16
0054D0r 2               ;z80_reg1 = ws+$17
0054D0r 2               ;z80_reg2 = ws+$18
0054D0r 2               ;z80_reg3 = ws+$19
0054D0r 2               
0054D0r 2               ;z80_r	 = ws+$1a
0054D0r 2               
0054D0r 2               ; Contains seperatly 1 bit set
0054D0r 2               ; _BEEB this is not safe memory to use as required by MOS
0054D0r 2               
0054D0r 2               _bitmem0	= $f8
0054D0r 2               _bitmem1	= $f9
0054D0r 2               _bitmem2	= $fa
0054D0r 2               _bitmem3	= $fb
0054D0r 2               _bitmem4	= $fc
0054D0r 2               _bitmem5	= $fd
0054D0r 2               _bitmem6	= $fe
0054D0r 2               _bitmem7	= $ff
0054D0r 2               
0054D0r 2               ; constants
0054D0r 2               _bitvalue0	= $01
0054D0r 2               _bitvalue1	= $02
0054D0r 2               _bitvalue2	= $04
0054D0r 2               _bitvalue3	= $08
0054D0r 2               _bitvalue4	= $10
0054D0r 2               _bitvalue5	= $20
0054D0r 2               _bitvalue6	= $40
0054D0r 2               _bitvalue7	= $80
0054D0r 2               
0054D0r 2               _notbitvalue0	= $fe
0054D0r 2               _notbitvalue1	= $fd
0054D0r 2               _notbitvalue2	= $fb
0054D0r 2               _notbitvalue3	= $f7
0054D0r 2               _notbitvalue4	= $ef
0054D0r 2               _notbitvalue5	= $df
0054D0r 2               _notbitvalue6	= $bf
0054D0r 2               _notbitvalue7	= $7f
0054D0r 2               
0054D0r 2               
0054D0r 2               ;add_hl_bc:
0054D0r 2               ;		lda z80_l
0054D0r 2               ;		clc
0054D0r 2               ;		adc z80_c
0054D0r 2               ;		sta z80_l
0054D0r 2               ;		lda z80_h
0054D0r 2               ;		adc z80_b
0054D0r 2               ;		sta z80_h
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;add_ix_de:
0054D0r 2               ;		lda z80_ix
0054D0r 2               ;		clc
0054D0r 2               ;		adc z80_e
0054D0r 2               ;		sta z80_ix
0054D0r 2               ;		lda z80_ix+1
0054D0r 2               ;		adc z80_d
0054D0r 2               ;		sta z80_ix+1
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;add_iy_de:
0054D0r 2               ;		lda z80_iy
0054D0r 2               ;		clc
0054D0r 2               ;		adc z80_e
0054D0r 2               ;		sta z80_iy
0054D0r 2               ;		lda z80_iy+1
0054D0r 2               ;		adc z80_d
0054D0r 2               ;		sta z80_iy+1
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;add_hl_de:
0054D0r 2               ;		lda z80_l
0054D0r 2               ;		clc
0054D0r 2               ;		adc z80_e
0054D0r 2               ;		sta z80_l
0054D0r 2               ;		lda z80_h
0054D0r 2               ;		adc z80_d
0054D0r 2               ;		sta z80_h
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;add_ix_bc:
0054D0r 2               ;		lda z80_ix
0054D0r 2               ;		clc
0054D0r 2               ;		adc z80_c
0054D0r 2               ;		sta z80_ix
0054D0r 2               ;		lda z80_ix+1
0054D0r 2               ;		adc z80_b
0054D0r 2               ;		sta z80_ix+1
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;add_iy_bc:
0054D0r 2               ;		lda z80_iy
0054D0r 2               ;		clc
0054D0r 2               ;		adc z80_c
0054D0r 2               ;		sta z80_iy
0054D0r 2               ;		lda z80_iy+1
0054D0r 2               ;		adc z80_b
0054D0r 2               ;		sta z80_iy+1
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;sbc_hl_de:
0054D0r 2               ;		lda z80_l
0054D0r 2               ;		sbc z80_e
0054D0r 2               ;		sta z80_l
0054D0r 2               ;		lda z80_h
0054D0r 2               ;		sbc z80_d
0054D0r 2               ;		sta z80_h
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;sbc_hl_bc:
0054D0r 2               ;		lda z80_l
0054D0r 2               ;		sbc z80_c
0054D0r 2               ;		sta z80_l
0054D0r 2               ;		lda z80_h
0054D0r 2               ;		sbc z80_b
0054D0r 2               ;		sta z80_h
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;cmp_hl_bc:
0054D0r 2               ;		lda z80_l
0054D0r 2               ;		cmp z80_c
0054D0r 2               ;		bne cmp_hl_bc_end
0054D0r 2               ;		lda z80_h
0054D0r 2               ;		cmp z80_b
0054D0r 2               ;cmp_hl_bc_end:
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;cmp_iy_ix:
0054D0r 2               ;		lda z80_iy
0054D0r 2               ;		cmp z80_ix
0054D0r 2               ;		bne cmp_iy_ix_end
0054D0r 2               ;		lda z80_iy+1
0054D0r 2               ;		cmp z80_ix+1
0054D0r 2               ;cmp_iy_ix_end:
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;dec_hl:
0054D0r 2               ;		lda z80_l
0054D0r 2               ;		bne dec_hl_no_dec_h
0054D0r 2               ;		dec z80_h
0054D0r 2               ;dec_hl_no_dec_h:
0054D0r 2               ;		dec z80_l
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;dec_ix:
0054D0r 2               ;		lda z80_ix
0054D0r 2               ;		bne dec_ix_no_dec_h
0054D0r 2               ;		dec z80_ix+1
0054D0r 2               ;dec_ix_no_dec_h:
0054D0r 2               ;		dec z80_ix
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;dec_bc:
0054D0r 2               ;		lda z80_c
0054D0r 2               ;		bne dec_bc_no_dec_b
0054D0r 2               ;		dec z80_b
0054D0r 2               ;dec_bc_no_dec_b:
0054D0r 2               ;		dec z80_c
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;dec_de:
0054D0r 2               ;		lda z80_e
0054D0r 2               ;		bne dec_de_no_dec_d
0054D0r 2               ;		dec z80_d
0054D0r 2               ;dec_de_no_dec_d:
0054D0r 2               ;		dec z80_e
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               ;ex_af_afs:
0054D0r 2               ;	rts
0054D0r 2               ;ex_de_hl:
0054D0r 2               ;		lda z80_e
0054D0r 2               ;		ldx z80_l
0054D0r 2               ;		stx z80_e
0054D0r 2               ;		sta z80_l
0054D0r 2               ;		lda z80_d
0054D0r 2               ;		ldx z80_h
0054D0r 2               ;		stx z80_d
0054D0r 2               ;		sta z80_h
0054D0r 2               ;		rts
0054D0r 2               ;
0054D0r 2               exx:
0054D0r 2  A5 rr        		lda z80_c
0054D2r 2  A4 rr        		ldy z80_cp
0054D4r 2  84 rr        		sty z80_c
0054D6r 2  85 rr        		sta z80_cp
0054D8r 2  A5 rr        		lda z80_b
0054DAr 2  A4 rr        		ldy z80_bp
0054DCr 2  84 rr        		sty z80_b
0054DEr 2  85 rr        		sta z80_bp
0054E0r 2  A5 rr        		lda z80_e
0054E2r 2  A4 rr        		ldy z80_ep
0054E4r 2  84 rr        		sty z80_e
0054E6r 2  85 rr        		sta z80_ep
0054E8r 2  A5 rr        		lda z80_d
0054EAr 2  A4 rr        		ldy z80_dp
0054ECr 2  84 rr        		sty z80_d
0054EEr 2  85 rr        		sta z80_dp
0054F0r 2  A5 rr        		lda scraddr
0054F2r 2  A4 rr        		ldy z80_lp
0054F4r 2  84 rr        		sty scraddr
0054F6r 2  85 rr        		sta z80_lp
0054F8r 2  A5 rr        		lda scraddr+1
0054FAr 2  A4 rr        		ldy z80_hp
0054FCr 2  84 rr        		sty scraddr+1
0054FEr 2  85 rr        		sta z80_hp
005500r 2  60           		rts
005501r 2               
005501r 2               ;ex_sp_hl:
005501r 2               ;		tsx
005501r 2               ;		lda $0103,x
005501r 2               ;		ldy z80_h
005501r 2               ;		sta z80_h
005501r 2               ;		tya
005501r 2               ;		sta $0103,x
005501r 2               ;		lda $0104,x
005501r 2               ;		ldy z80_l
005501r 2               ;		sta z80_l
005501r 2               ;		tya
005501r 2               ;		sta $104,x
005501r 2               ;		rts
005501r 2               ;
005501r 2               ;ldi:
005501r 2               ;	rts
005501r 2               ;ldir:
005501r 2               ;		ldy #$00
005501r 2               ;		ldx z80_b
005501r 2               ;		beq ldir_last_page
005501r 2               ;ldir_loop:
005501r 2               ;		lda (z80_hl),y
005501r 2               ;		sta (z80_de),y
005501r 2               ;		iny
005501r 2               ;		bne ldir_loop
005501r 2               ;		inc z80_h
005501r 2               ;		inc z80_d
005501r 2               ;		dex
005501r 2               ;		bne ldir_loop
005501r 2               ;ldir_last_page:
005501r 2               ;		lda z80_c
005501r 2               ;		beq ldir_end
005501r 2               ;ldir_last_page_loop:
005501r 2               ;		lda (z80_hl),y
005501r 2               ;		sta (z80_de),y
005501r 2               ;		iny
005501r 2               ;		cpy z80_c
005501r 2               ;		bne ldir_last_page_loop
005501r 2               ;ldir_end:
005501r 2               ;		stx z80_c
005501r 2               ;		stx z80_b
005501r 2               ;		tya
005501r 2               ;		clc
005501r 2               ;		adc z80_l
005501r 2               ;		sta z80_l
005501r 2               ;		bcc *+4
005501r 2               ;		inc z80_h
005501r 2               ;		tya
005501r 2               ;		clc
005501r 2               ;		adc z80_e
005501r 2               ;		sta z80_e
005501r 2               ;		bcc *+4
005501r 2               ;		inc z80_d
005501r 2               ;		rts
005501r 2               ;
005501r 2               ;lddr:		ldy #$00
005501r 2               ;lddr_loop:
005501r 2               ;		lda (z80_hl),y
005501r 2               ;		sta (z80_de),y
005501r 2               ;		jsr dec_hl
005501r 2               ;		jsr dec_de
005501r 2               ;		jsr dec_bc
005501r 2               ;		lda z80_b
005501r 2               ;		ora z80_c
005501r 2               ;		bne lddr_loop
005501r 2               ;		rts
005501r 2               ;ei:
005501r 2               ;		rts
005501r 2               ;di:
005501r 2               ;		rts
005501r 2               
005501r 2               ;-------------------------------------------------------------
005501r 2               ; Set bits in bitmem
005501r 2               ;-------------------------------------------------------------
005501r 2               
005501r 2               .if 0
005501r 2               z80_init:
005501r 2               	ldx #$00
005501r 2               	lda #$01
005501r 2               z80_init_loop:
005501r 2               	sta _bitmem0,x
005501r 2               	inx
005501r 2               	asl a
005501r 2               	bne z80_init_loop
005501r 2               	rts
005501r 2               .endif
005501r 2               
005501r 2               push_af:
005501r 2               push_bc:
005501r 2               push_de:
005501r 2               push_hl:
005501r 2               
005501r 2               pop_af:
005501r 2               pop_bc:
005501r 2               pop_de:
005501r 2               pop_ix:
005501r 2               pop_hl:
005501r 2               
005501r 2               add_hl_hl:
005501r 2               
005501r 2               inc_bc:
005501r 2               inc_de:
005501r 2               inc_hl:
005501r 2               inc_ix:
005501r 2               inc_sp:
005501r 2               
005501r 2               cpir:
005501r 2               
005501r 2               ex_af_af:
005501r 2               ;	rts
005501r 2               
005501r 1               
005501r 1               eind_asm:
005501r 1               eop:					; End Of Program
005501r 1               
005501r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
005501r 1               
