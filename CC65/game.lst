ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 1 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 0 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 1 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "vic-dirtydozer.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 12
000000r 3               	CentreY		= 38
000000r 3               	CentreXMP   = 14
000000r 3               	CentreYMP   = 36
000000r 3               	timervalue	= 24000
000000r 3               	timerint	= 24000			; Interrupt timer 1/50 sec
000000r 3               	.out "- Starting vide in PAL mode"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	CentreXMP   = 6
000000r 3               	CentreYMP   = 24
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- Starting vide in NTSC mode"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 18			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               	var_colour = 17		; sprite colour
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  00           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  16           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  01           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  00           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  A0           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 D8        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3               	lda #<objdta		; objects table.
000026r 3               	sta z80_x
000026r 3               	lda #>objdta
000026r 3               	sta z80_i
000026r 3               
000026r 3               	ldx numob 		; number of objects in the game.
000026r 3               iniob0:
000026r 3               	ldy #36
000026r 3               	lda (z80_ix),y 		; start screen.
000026r 3               	ldy #33
000026r 3               	sta (z80_ix),y 		; set start screen.
000026r 3               
000026r 3               	ldy #37
000026r 3               	lda (z80_ix),y 		; find start y.
000026r 3               	ldy #34
000026r 3               	sta (z80_ix),y 		; set start y.
000026r 3               
000026r 3               	ldy #38
000026r 3               	lda (z80_ix),y 		; get initial x.
000026r 3               	ldy #35
000026r 3               	sta (z80_ix),y 		; set x coord.
000026r 3               
000026r 3               	clc 			; point to next object.
000026r 3               	lda z80_x
000026r 3               	adc #39			; distance between objects.
000026r 3               	sta z80_x
000026r 3               	bcc :+
000026r 3               	inc z80_i
000026r 3               :
000026r 3               	dex 			; repeat.
000026r 3               	bne iniob0
000026r 3               
000026r 3               	rts
000026r 3               .endif
000026r 3               
000026r 3               ;-----------------------------------------------
000026r 3               ; Redraw the screen.
000026r 3               ;
000026r 3               ; Remove old copy of all sprites for redraw.
000026r 3               ;-----------------------------------------------
000026r 3               
000026r 3               redraw:
000026r 3               .if xflag
000026r 3               	lda #WINDOWWID
000026r 3               	sta winwid
000026r 3               	lda #WINDOWHGT
000026r 3               	sta winhgt
000026r 3               .endif
000026r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000028r 3  48           	pha
000029r 3  A5 rr        	lda z80_x
00002Br 3  48           	pha
00002Cr 3               
00002Cr 3  20 rr rr     	jsr droom		; show screen layout.
00002Fr 3               .if oflag
00002Fr 3               	jsr shwob		; draw objects.
00002Fr 3               .endif
00002Fr 3               numsp0:
00002Fr 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000031r 3  85 rr        	sta tmp
000033r 3               
000033r 3  A9 rr        	lda #<sprtab		; sprite table.
000035r 3  85 rr        	sta z80_x
000037r 3  A9 rr        	lda #>sprtab
000039r 3  85 rr        	sta z80_i
00003Br 3               redrw0:
00003Br 3  A0 00        	ldy #0
00003Dr 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00003Fr 3  C9 FF        	cmp #255		; is it enabled?
000041r 3  F0 0B        	beq redrw1 		; no, find next one.
000043r 3               
000043r 3  A0 03        	ldy #var_Y
000045r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000047r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000049r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
00004Br 3               
00004Br 3  20 rr rr     	jsr sspria		; show single sprite.
00004Er 3               
00004Er 3               redrw1:
00004Er 3  18           	clc			; next sprite.
00004Fr 3  A5 rr        	lda z80_x
000051r 3  69 12        	adc #TABSIZ		; distance to next odd/even entry.
000053r 3  85 rr        	sta z80_x
000055r 3  90 02        	bcc :+
000057r 3  E6 rr        	inc z80_i
000059r 3               :
000059r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
00005Br 3  D0 DE        	bne redrw0
00005Dr 3               
00005Dr 3               rpblc1:
00005Dr 3               ;	jsr dshrp		; redraw shrapnel.
00005Dr 3               
00005Dr 3               .if aflag
00005Dr 3               	jsr rbloc		; draw blocks for this screen
00005Dr 3               .endif
00005Dr 3  68           	pla			; retrieve sprite pointer.
00005Er 3  85 rr        	sta z80_x
000060r 3  68           	pla
000061r 3  85 rr        	sta z80_i
000063r 3               
000063r 3  60           	rts
000064r 3               
000064r 3               ;----------------------------------------------------------------------
000064r 3               ; Clear screen routine.
000064r 3               ;
000064r 3               ; Fill screenmem $9400-$97ff with ScrFillByte
000064r 3               ;----------------------------------------------------------------------
000064r 3               
000064r 3               cls:
000064r 3  A9 10        	lda #>CharAddress	; Character RAM address.
000066r 3  8D rr rr     	sta clrdata+2
000069r 3               
000069r 3               ; Clear bitmap data
000069r 3               
000069r 3  A9 00        	lda #ScrFillByte	; Clear screen
00006Br 3  A0 00        	ldy #0
00006Dr 3  A2 10        	ldx #16
00006Fr 3               clrdata:
00006Fr 3  99 00 10     	sta CharAddress,y
000072r 3  C8           	iny
000073r 3  D0 FA        	bne clrdata
000075r 3  EE rr rr     	inc clrdata+2
000078r 3  CA           	dex
000079r 3  D0 F4        	bne clrdata
00007Br 3               
00007Br 3               ; Clear colour attributes
00007Br 3               
00007Br 3  AD rr rr     	lda fontcol
00007Er 3  A2 00        	ldx #0
000080r 3               clrcolour:
000080r 3  9D 00 94     	sta ColorAttr-$200,x
000083r 3  9D 00 96     	sta ColorAttr,x
000086r 3  E8           	inx
000087r 3  D0 F7        	bne clrcolour
000089r 3  60           	rts
00008Ar 3               
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               ; Clear colour attributes
00008Ar 3               ;
00008Ar 3               ; Reset colour attributes to fontcol
00008Ar 3               ;----------------------------------------------------------------------
00008Ar 3               
00008Ar 3               clrcol:
00008Ar 3  AD rr rr     	lda fontcol		; Clear colour attributes
00008Dr 3  A2 00        	ldx #0
00008Fr 3               clscol:
00008Fr 3  9D 00 96     	sta ColorAttr,x
000092r 3  E8           	inx
000093r 3  E0 F2        	cpx #242
000095r 3  D0 F8        	bne clscol
000097r 3               
000097r 3  60           	rts
000098r 3               
000098r 3               ;----------------------------------------------------------------------
000098r 3               ; FODDER check
000098r 3               ;----------------------------------------------------------------------
000098r 3               
000098r 3               .if pflag .or dflag
000098r 3               fdchk:
000098r 3  C9 04        	cmp #FODDER 		; is it fodder?
00009Ar 3  F0 01        	beq :+
00009Cr 3  60           	rts 			; no.
00009Dr 3               :
00009Dr 3  A9 00        	lda #0			; wipe fodder in MAP
00009Fr 3  A0 00        	ldy #0
0000A1r 3  91 rr        	sta (bufaddr),y 	; rewrite block type.
0000A3r 3               
0000A3r 3  A5 rr        	lda dispx		; x=x/8
0000A5r 3  48           	pha
0000A6r 3  4A           	lsr a
0000A7r 3  4A           	lsr a
0000A8r 3  4A           	lsr a
0000A9r 3  85 rr        	sta dispx
0000ABr 3               
0000ABr 3  A5 rr        	lda dispy		; y=y/8
0000ADr 3  48           	pha
0000AEr 3  4A           	lsr a
0000AFr 3  4A           	lsr a
0000B0r 3  4A           	lsr a
0000B1r 3  85 rr        	sta dispy
0000B3r 3               
0000B3r 3  A9 00        	lda #0 			; block to write.
0000B5r 3  20 rr rr     	jsr pattr 		; write block.
0000B8r 3               
0000B8r 3  68           	pla
0000B9r 3  85 rr        	sta dispy
0000BBr 3  68           	pla
0000BCr 3  85 rr        	sta dispx
0000BEr 3  60           	rts
0000BFr 3               .endif
0000BFr 3               
0000BFr 3               ;----------------------------------------------------
0000BFr 3               ; Scrolly text and puzzle variables.
0000BFr 3               ;----------------------------------------------------
0000BFr 3               
0000BFr 3               .if sflag
0000BFr 3               txtbit:	.byte 128		; bit to write.
0000BFr 3               txtwid:	.byte 16		; width of ticker message.
0000BFr 3               txtpos:	.word msgdat
0000BFr 3               txtini:	.word msgdat
0000BFr 3               txtscr:	.word ScreenAddr
0000BFr 3               .endif
0000BFr 3               
0000BFr 3               ;----------------------------------------------------
0000BFr 3               ; Specialist routines.
0000BFr 3               ; Process shrapnel.
0000BFr 3               ;----------------------------------------------------
0000BFr 3               proshr:
0000BFr 3               .if pflag
0000BFr 3               	lda #<SHRAPN		; table.
0000BFr 3               	sta z80_x
0000BFr 3               	lda #>SHRAPN
0000BFr 3               	sta z80_i
0000BFr 3               
0000BFr 3               	lda #NUMSHR		; shrapnel pieces to process.
0000BFr 3               	sta shrctr
0000BFr 3               prosh0:
0000BFr 3               	ldy #0
0000BFr 3               	lda (z80_ix),y		; on/off marker.
0000BFr 3               	asl a
0000BFr 3               proshx:
0000BFr 3               	bcs :+
0000BFr 3               	jsr prosh1 		; on, so process it.
0000BFr 3               :
0000BFr 3               	clc
0000BFr 3               	lda z80_x
0000BFr 3               	adc #SHRSIZ
0000BFr 3               	sta z80_x
0000BFr 3               	bcc :+
0000BFr 3               	inc z80_i
0000BFr 3               :
0000BFr 3               	dec shrctr		; round again.
0000BFr 3               	bne prosh0
0000BFr 3               .endif
0000BFr 3               .if sflag
0000BFr 3               	jsr scrly
0000BFr 3               .endif
0000BFr 3  60           	rts
0000C0r 3               
0000C0r 3               .if pflag
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Proces shrapnel piece
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               prosh1:
0000C0r 3               	jsr plot 		; delete the pixel.
0000C0r 3               
0000C0r 3               	lda #<shrptr		; shrapnel routine pointers.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>shrptr
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y		; restore shrapnel type.
0000C0r 3               	jsr prosh2 		; run the routine.
0000C0r 3               	jsr chkxy		; check x and y are good before we redisplay.
0000C0r 3               
0000C0r 3               	lda #<SHRSIZ 		; distance to next.
0000C0r 3               	sta z80_e
0000C0r 3               	lda #>SHRSIZ
0000C0r 3               	sta z80_d
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Run the routine
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               prosh2:
0000C0r 3               	asl a 			; 2 bytes per address.
0000C0r 3               	tay
0000C0r 3               	lda shrptr,y
0000C0r 3               	sta z80_l
0000C0r 3               	lda shrptr+1,y 		; fetch high byte from table.
0000C0r 3               	sta z80_h
0000C0r 3               	jmp (z80_hl) 		; jump to routine.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Paricle routine table
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shrptr:	.word laser		; laser.
0000C0r 3               	.word trail		; vapour trail.
0000C0r 3               	.word shrap		; shrapnel from explosion.
0000C0r 3               	.word dotl		; horizontal starfield left.
0000C0r 3               	.word dotr		; horizontal starfield right.
0000C0r 3               	.word dotu		; vertical starfield up.
0000C0r 3               	.word dotd		; vertical starfield down.
0000C0r 3               	.word ptcusr		; user particle.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Explosion shrapnel.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shrap:
0000C0r 3               	ldy #1
0000C0r 3               	lda (z80_ix),y 		; get the angle.
0000C0r 3               	clc
0000C0r 3               	adc #<shrsin		; shrapnel sine table.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>shrsin
0000C0r 3               	adc #0
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; fetch value from table.
0000C0r 3               	sta z80_e
0000C0r 3               	inc z80_l 		; next byte of table.
0000C0r 3               	bne :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y		; fetch value from table.
0000C0r 3               	sta z80_d
0000C0r 3               	inc z80_l		; next byte of table.
0000C0r 3               	bne :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; fetch value from table.
0000C0r 3               	sta z80_c
0000C0r 3               	inc z80_l 		; next byte of table.
0000C0r 3               	bne :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; fetch value from table.
0000C0r 3               	sta z80_b
0000C0r 3               
0000C0r 3               	ldy #2
0000C0r 3               	lda (z80_ix),y 		; x coordinate in hl.
0000C0r 3               	clc
0000C0r 3               	adc z80_e		; add sine lb
0000C0r 3               	sta (z80_ix),y		; store new coordinate lb.
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	adc z80_d		; add sine hb
0000C0r 3               	sta (z80_ix),y		; store new coordinate hb.
0000C0r 3               
0000C0r 3               	ldy #4
0000C0r 3               	lda (z80_ix),y	 	; y coordinate in hl.
0000C0r 3               	clc
0000C0r 3               	adc z80_c		; add cosine lb
0000C0r 3               	sta (z80_ix),y		; store new coordinate lb.
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	adc z80_b		; add cosine lb
0000C0r 3               	sta (z80_ix),y		; store new coordinate hb.
0000C0r 3               
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Move dots
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               dotl:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1		 	; move left.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               dotr:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1		 	; move left.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               dotu:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1		 	; move up.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               dotd:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1			; move down.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Check if coordinates are ok before redrawing at new position.
0000C0r 3               ;
0000C0r 3               ; left:   X>L		X=L	Ok
0000C0r 3               ; right:  R+15>X	X=R	Ok
0000C0r 3               ; top:    Y>T		Y=T	Ok
0000C0r 3               ; bottom: B+15>Y	Y=B	Ok
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               chkxy:
0000C0r 3               
0000C0r 3               ; top:    Y>T		Y=T	Ok
0000C0r 3               
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	cmp wntopx		; window top.
0000C0r 3               	bcs :+			; compare with top window limit.
0000C0r 3               	jmp kilshr		; out of window, kill shrapnel.
0000C0r 3               :
0000C0r 3               ; left:   X>L		X=L	Ok
0000C0r 3               
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	cmp wnlftx		; left edge.
0000C0r 3               	bcs :+			; compare with left window limit.
0000C0r 3               	jmp kilshr		; out of window, kill shrapnel.
0000C0r 3               :
0000C0r 3               ; bottom: B+15>Y	Y=B	Ok
0000C0r 3               
0000C0r 3               	lda wnbotx		; point to bottom.
0000C0r 3               	clc
0000C0r 3               	adc #15
0000C0r 3               	ldy #3
0000C0r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	bcs :+			; compare with shrapnel x coordinate.
0000C0r 3               	jmp kilshr		; off screen, kill shrapnel..
0000C0r 3               :
0000C0r 3               ; right:  R+15>X	X=R	Ok
0000C0r 3               
0000C0r 3               	lda wnrgtx		; point to right edge.
0000C0r 3               	clc
0000C0r 3               	adc #15
0000C0r 3               	ldy #5
0000C0r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000C0r 3               	bcs :+			; compare with window limit.
0000C0r 3               	jmp kilshr		; off screen, kill shrapnel.
0000C0r 3               :
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Drop through.
0000C0r 3               ; Display shrapnel.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               plot:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y		; y integer.
0000C0r 3               	sta dispy	 	; workspace coordinates.
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y	 	; x integer.
0000C0r 3               	sta dispx 		; workspace coordinates.
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y 		; type.
0000C0r 3               	bne :+			; is it a laser?
0000C0r 3               	jmp plot1 		; yes, draw laser instead.
0000C0r 3               :
0000C0r 3               plot0:
0000C0r 3               	lda dispx		; which pixel within byte do we
0000C0r 3               	and #7			; want to set first?
0000C0r 3               	tay
0000C0r 3               	lda dots,y 		; table of small pixel positions.
0000C0r 3               	sta z80_e 		; get value.
0000C0r 3               
0000C0r 3               	jsr scadd 		; screen address.
0000C0r 3               	ldy #0
0000C0r 3               	lda (scraddr),y		; see what's already there.
0000C0r 3               	eor z80_e
0000C0r 3               	sta (scraddr),y 	; put back on screen.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               plot1:
0000C0r 3               	jsr scadd 		; screen address.
0000C0r 3               	ldy #0
0000C0r 3               	lda (scraddr),y 	; fetch byte there.
0000C0r 3               	eor #255 		; toggle all bits.
0000C0r 3               	sta (scraddr),y 	; new byte.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Switch off shrapnel
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               kilshr:
0000C0r 3               	lda #128
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y	; switch off shrapnel.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Sine/cosine table
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
0000C0r 3               	.word 1024,0,946,65144,724,64811,391,64589
0000C0r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0000C0r 3               	.word 64512,0,64589,391,64811,724,65144,946
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create trail
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               trail:
0000C0r 3               	ldy #1
0000C0r 3               	lda (z80_ix),y 	; time remaining.
0000C0r 3               	sec
0000C0r 3               	sbc #1
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	bne :+
0000C0r 3               	jmp trailk		; time to switch it off.
0000C0r 3               :
0000C0r 3               	jsr qrand		; get a random number.
0000C0r 3               	lsr a 			; x or y axis?
0000C0r 3               	bcc :+
0000C0r 3               	jmp trailv		; use y.
0000C0r 3               :
0000C0r 3               ; Trail horizontal
0000C0r 3               
0000C0r 3               	lsr a 			; which direction?
0000C0r 3               	bcc :+
0000C0r 3               	jmp traill		; go left.
0000C0r 3               :
0000C0r 3               ; Trail right
0000C0r 3               
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1	 		; go right.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Trail left
0000C0r 3               
0000C0r 3               traill:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1 			; go left.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Trail vertical
0000C0r 3               
0000C0r 3               trailv:
0000C0r 3               	lsr a		 	; which direction?
0000C0r 3               	bcc :+
0000C0r 3               	jmp trailu		; go up.
0000C0r 3               :
0000C0r 3               ; Trail down
0000C0r 3               
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	clc
0000C0r 3               	adc #1 			; go down.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Trail up
0000C0r 3               
0000C0r 3               trailu:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y
0000C0r 3               	sec
0000C0r 3               	sbc #1 			; go up.
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ; Kill trail
0000C0r 3               
0000C0r 3               trailk:
0000C0r 3               	lda #200		; set off-screen to kill vapour trail.
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create laser beam
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               laser:
0000C0r 3               	ldy #1
0000C0r 3               	lda (z80_ix),y 		; direction.
0000C0r 3               	ror a 			; left or right?
0000C0r 3               	bcs :+
0000C0r 3               	jmp laserl		; move left.
0000C0r 3               :
0000C0r 3               ; Laser right
0000C0r 3               
0000C0r 3               	lda #8			; distance to travel.
0000C0r 3               	sta z80_b
0000C0r 3               	jmp laserm		; move laser.
0000C0r 3               
0000C0r 3               ; Laser left
0000C0r 3               
0000C0r 3               laserl:
0000C0r 3               	lda #248		; distance to travel.
0000C0r 3               	sta z80_b
0000C0r 3               laserm:
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_ix),y		; x position.
0000C0r 3               	clc
0000C0r 3               	adc z80_b		; add distance.
0000C0r 3               	sta (z80_ix),y		; set new x coordinate.
0000C0r 3               
0000C0r 3               ; Test new block.
0000C0r 3               
0000C0r 3               	sta dispx 		; set x for block collision detection purposes.
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_ix),y 		; get y.
0000C0r 3               	sta dispy		; set coordinate for collision test.
0000C0r 3               	jsr tstbl 		; get block type there.
0000C0r 3               	cmp #WALL		; is it solid?
0000C0r 3               	bne :+
0000C0r 3               	jmp trailk		; yes, it cannot pass.
0000C0r 3               :
0000C0r 3               .if pflag .or dflag
0000C0r 3                       cmp #FODDER             ; is it fodder?
0000C0r 3                       bne :+
0000C0r 3                       jsr fdchk               ; remove fodder block.
0000C0r 3                       jmp trailk              ; destroy laser.
0000C0r 3               :
0000C0r 3               .endif
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Dots mask
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               dots:	.byte 128,64,32,16,8,4,2,1
0000C0r 3               
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Plot, preserving de.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               plotde:
0000C0r 3               	lda z80_d 		; put de on stack.
0000C0r 3               	pha
0000C0r 3               	lda z80_e
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	jsr plot 		; plot pixel.
0000C0r 3               
0000C0r 3               	pla			; restore de from stack.
0000C0r 3               	sta z80_e
0000C0r 3               	pla
0000C0r 3               	sta z80_d
0000C0r 3               
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Shoot a laser.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               shoot:
0000C0r 3               	sta z80_c		; store direction in c register.
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	clc
0000C0r 3               shoot1:
0000C0r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0000C0r 3               	sta z80_l 		; puty y coordinate in l.
0000C0r 3               
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y 		; x coordinate in h.
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	lda z80_i		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcs :+
0000C0r 3               	jmp vapou2		; failed, restore ix.
0000C0r 3               :
0000C0r 3               	lda #0
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y 		; set up a laser.
0000C0r 3               
0000C0r 3               	lda z80_c
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y 		; set the direction.
0000C0r 3               
0000C0r 3               	lda z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; set y coordinate.
0000C0r 3               
0000C0r 3               	ror z80_c		; check direction we want.
0000C0r 3               	bcc :+
0000C0r 3               	jmp shootr		; shoot right.
0000C0r 3               :
0000C0r 3               	lda z80_h		; X position.
0000C0r 3               shoot0:
0000C0r 3               	and #248		; align on character boundary.
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; set x coordinate.
0000C0r 3               	jmp vapou0 		; draw first image.
0000C0r 3               shootr:
0000C0r 3               	lda z80_h		; x position.
0000C0r 3               	clc
0000C0r 3               	adc #15			; look right.
0000C0r 3               	jmp shoot0		; align and continue.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create a bit of vapour trail.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               vapour:
0000C0r 3               	lda z80_i		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	clc
0000C0r 3               vapou3:
0000C0r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0000C0r 3               	sta z80_l
0000C0r 3               
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y 		; x coordinate.
0000C0r 3               	adc #7
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcc :+
0000C0r 3               	jmp vapou1		; no, we can use it.
0000C0r 3               :
0000C0r 3               vapou2:
0000C0r 3               	pla
0000C0r 3               	sta z80_x
0000C0r 3               	pla
0000C0r 3               	sta z80_i
0000C0r 3               	rts
0000C0r 3               vapou1:
0000C0r 3               	lda z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; set up y.
0000C0r 3               
0000C0r 3               	lda z80_h
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y 		; set up x coordinate.
0000C0r 3               
0000C0r 3               	jsr qrand		; get quick random number.
0000C0r 3               	and #15			; random time.
0000C0r 3               	clc
0000C0r 3               	adc #15			; minimum time on screen.
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y		; set time on screen.
0000C0r 3               
0000C0r 3               	lda #1
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; define particle as vapour trail.
0000C0r 3               vapou0:
0000C0r 3               	jsr chkxy		; plot first position.
0000C0r 3               	jmp vapou2
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create a user particle.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               ptusr:
0000C0r 3               	sta z80_f		; store timer.
0000C0r 3               
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	clc
0000C0r 3               	adc #7			; mid-point of sprite.
0000C0r 3               	sta z80_l
0000C0r 3               
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y 		; x coordinate.
0000C0r 3               	clc
0000C0r 3               	adc #7			; mid-point of sprite.
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcs ptusr1
0000C0r 3               	rts 			; out of slots, can't generate anything.
0000C0r 3               ptusr1:
0000C0r 3               	lda z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y 		; set up y.
0000C0r 3               
0000C0r 3               	lda z80_h
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; set up x coordinate.
0000C0r 3               
0000C0r 3               	lda z80_f 		; restore timer.
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y		; set time on screen.
0000C0r 3               
0000C0r 3               	lda #7
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; define particle as user particle.
0000C0r 3               
0000C0r 3               	jmp chkxy		; plot first position.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create a vertical or horizontal star.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               star:
0000C0r 3               	lda z80_i		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	jsr fpslot 		; find particle slot.
0000C0r 3               	bcs star7		; found one we can use.
0000C0r 3               star0:
0000C0r 3               	pla 			; restore sprite pointer.
0000C0r 3               	sta z80_x
0000C0r 3               	pla
0000C0r 3               	sta z80_i
0000C0r 3               	rts 			; out of slots, can't generate anything.
0000C0r 3               star7:
0000C0r 3               	lda z80_c		; direction.
0000C0r 3               	and #3 			; is it left?
0000C0r 3               	bne :+
0000C0r 3               	jmp star1 		; yes, it's left.
0000C0r 3               :
0000C0r 3               	cmp #1 			; is it right?
0000C0r 3               	bne :+
0000C0r 3               	jmp star2 		; yes, it's right.
0000C0r 3               :
0000C0r 3               	cmp #2 			; is it up?
0000C0r 3               	bne :+
0000C0r 3               	jmp star3 		; yes, it's up.
0000C0r 3               :
0000C0r 3               	ldy wntopx 		; get edge of screen.
0000C0r 3               	iny			; down one pixel.
0000C0r 3               	tya
0000C0r 3               star8:
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y 		; set y coord.
0000C0r 3               	jsr qrand 		; get quick random number.
0000C0r 3               star9:
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; set x position.
0000C0r 3               
0000C0r 3               	lda z80_c		; direction.
0000C0r 3               	and #3			; zero to three.
0000C0r 3               	clc
0000C0r 3               	adc #3			; 3 to 6 for starfield.
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; define particle as star.
0000C0r 3               	jsr chkxy		; plot first position.
0000C0r 3               	jmp star0
0000C0r 3               star1:
0000C0r 3               	jsr qrand		; get quick random number.
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y 		; set y coord.
0000C0r 3               
0000C0r 3               	lda wnrgtx 		; get edge of screen.
0000C0r 3               	clc
0000C0r 3               	adc #15			; add width of sprite minus 1.
0000C0r 3               	jmp star9
0000C0r 3               star2:
0000C0r 3               	jsr qrand 		; get quick random number.
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; set y coord.
0000C0r 3               
0000C0r 3               	lda wnlftx		; get edge of screen.
0000C0r 3               	jmp star9
0000C0r 3               star3:
0000C0r 3               	lda wnbotx 		; get edge of screen.
0000C0r 3               	clc
0000C0r 3               	adc #15 		; height of sprite minus one pixel.
0000C0r 3               	jmp star8
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Find particle slot for lasers or vapour trail.
0000C0r 3               ; can't use alternate accumulator.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               fpslot:
0000C0r 3               	lda #<SHRAPN 		; shrapnel table.
0000C0r 3               	sta z80_x
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_i
0000C0r 3               
0000C0r 3               	lda #NUMSHR		; number of pieces in table.
0000C0r 3               	sta z80_b
0000C0r 3               fpslt0:
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y		; get type.
0000C0r 3               	asl a  			; is this slot in use?
0000C0r 3               	bcc :+
0000C0r 3               	rts			; no, we can use it.
0000C0r 3               :
0000C0r 3               	clc			; point to more shrapnel.
0000C0r 3               	lda z80_x
0000C0r 3               	adc #SHRSIZ
0000C0r 3               	sta z80_x
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_i
0000C0r 3               :
0000C0r 3               	dec z80_b		; repeat for all shrapnel.
0000C0r 3               	bne fpslt0
0000C0r 3               
0000C0r 3               	clc
0000C0r 3               	rts 			; out of slots, can't generate anything.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Create an explosion at sprite position.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               explod:
0000C0r 3               	sta z80_c 		; particles to create.
0000C0r 3               
0000C0r 3               	lda z80_i 		; store pointer to sprite.
0000C0r 3               	pha
0000C0r 3               	lda z80_x
0000C0r 3               	pha
0000C0r 3               
0000C0r 3               	ldy #8
0000C0r 3               	lda (z80_ix),y 		; y coordinate.
0000C0r 3               	sta z80_l
0000C0r 3               	ldy #9
0000C0r 3               	lda (z80_ix),y		; x coordinate.
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	lda #<SHRAPN		; shrapnel table.
0000C0r 3               	sta z80_x
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_i
0000C0r 3               
0000C0r 3               	lda #NUMSHR		; number of pieces in table.
0000C0r 3               	sta explcnt
0000C0r 3               expld0:
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_ix),y		; get type.
0000C0r 3               	asl a 			; is this slot in use?
0000C0r 3               	bcs expld1		; no, we can use it.
0000C0r 3               expld2:
0000C0r 3               	clc
0000C0r 3               	lda z80_x
0000C0r 3               	adc #SHRSIZ
0000C0r 3               	sta z80_x
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_i
0000C0r 3               :
0000C0r 3               	dec explcnt		; repeat for all shrapnel.
0000C0r 3               	bne expld0
0000C0r 3               expld3:
0000C0r 3               	pla			; restore sprite pointer.
0000C0r 3               	sta z80_x
0000C0r 3               	pla
0000C0r 3               	sta z80_i
0000C0r 3               	rts 			; out of slots, can't generate any more.
0000C0r 3               
0000C0r 3               expld1:
0000C0r 3               	lda z80_c		; shrapnel counter.
0000C0r 3               	and #15			; 0 to 15.
0000C0r 3               	clc			; add to x.
0000C0r 3               	adc z80_l
0000C0r 3               	ldy #3
0000C0r 3               	sta (z80_ix),y		; y coord.
0000C0r 3               
0000C0r 3               	lda seed3 		; crap random number.
0000C0r 3               	and #15			; 0 to 15.
0000C0r 3               	clc 			; add to y.
0000C0r 3               	adc z80_h
0000C0r 3               	ldy #5
0000C0r 3               	sta (z80_ix),y		; x coord.
0000C0r 3               
0000C0r 3               	lda #2
0000C0r 3               	ldy #0
0000C0r 3               	sta (z80_ix),y		; switch it on.
0000C0r 3               
0000C0r 3               	jsr chkxy		; plot first position.
0000C0r 3               	jsr qrand		; quick random angle.
0000C0r 3               	and #60 		; keep within range.
0000C0r 3               	ldy #1
0000C0r 3               	sta (z80_ix),y		; angle.
0000C0r 3               
0000C0r 3               	dec z80_c		; one less piece of shrapnel to generate.
0000C0r 3               	bne expld2 		; back to main explosion loop.
0000C0r 3               	jmp expld3 		; restore sprite pointer and exit.
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Quick random
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               qrand:
0000C0r 3               	jsr random		; r register.
0000C0r 3               	eor seed3		; combine with seed.
0000C0r 3               	sta seed3 		; new seed.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;----------------------------------------------------
0000C0r 3               ; Display all shrapnel.
0000C0r 3               ;----------------------------------------------------
0000C0r 3               
0000C0r 3               dshrp:
0000C0r 3               	lda #<plotde		; display routine.
0000C0r 3               	sta proshx+1
0000C0r 3               	lda #>plotde
0000C0r 3               	sta proshx+2
0000C0r 3               	jsr proshr		; process shrapnel.
0000C0r 3               
0000C0r 3               	lda #<prosh1		; processing routine.
0000C0r 3               	sta proshx+1
0000C0r 3               	lda #>prosh1
0000C0r 3               	sta proshx+2
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;------------------------------------------------------
0000C0r 3               ; Particle engine.
0000C0r 3               ;
0000C0r 3               ; Init particle data for 55 particles in SHRAPN table.
0000C0r 3               ; Every particle has 6 bytes.
0000C0r 3               ;
0000C0r 3               ; global:	-
0000C0r 3               ; local:	x,y,hl
0000C0r 3               ; calls:	-
0000C0r 3               ;------------------------------------------------------
0000C0r 3               
0000C0r 3               inishr:
0000C0r 3               	lda #<SHRAPN 		; table.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	ldy #0
0000C0r 3               	ldx #NUMSHR		; shrapnel pieces to process.
0000C0r 3               inish0:
0000C0r 3               	lda #255 		; kill the shrapnel.
0000C0r 3               	sta (z80_hl),y
0000C0r 3               
0000C0r 3               	clc 			; point there.
0000C0r 3               	lda z80_l
0000C0r 3               	adc #SHRSIZ		; distance to next.
0000C0r 3               	sta z80_l
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	dex
0000C0r 3               	bne inish0 		; round again.
0000C0r 3               	rts
0000C0r 3               
0000C0r 3               ;------------------------------------------------------
0000C0r 3               ; Check for collision between laser and sprite.
0000C0r 3               ;------------------------------------------------------
0000C0r 3               
0000C0r 3               lcol:
0000C0r 3               	lda #<SHRAPN		; shrapnel table.
0000C0r 3               	sta z80_l
0000C0r 3               	lda #>SHRAPN
0000C0r 3               	sta z80_h
0000C0r 3               
0000C0r 3               	lda #NUMSHR		; number of pieces in table.
0000C0r 3               	sta z80_b
0000C0r 3               lcol0:
0000C0r 3               	ldy #0
0000C0r 3               	lda (z80_hl),y 		; get type.
0000C0r 3               	beq lcol1		; yes, check collision.
0000C0r 3               lcol3:
0000C0r 3               	clc			; point to more shrapnel.
0000C0r 3               	lda z80_l
0000C0r 3               	adc #SHRSIZ
0000C0r 3               	sta z80_l
0000C0r 3               	bcc :+
0000C0r 3               	inc z80_h
0000C0r 3               :
0000C0r 3               	dec z80_b		; repeat for all shrapnel.
0000C0r 3               	bne lcol0
0000C0r 3               	clc
0000C0r 3               	rts 			; no collision, carry not set.
0000C0r 3               lcol1:
0000C0r 3               	ldy #3
0000C0r 3               	lda (z80_hl),y		; get y.
0000C0r 3               	sec
0000C0r 3               	ldy #8
0000C0r 3               	sbc (z80_ix),y		; subtract sprite y.
0000C0r 3               lcolh:
0000C0r 3               	cmp #SPR_HGT 		; within range?
0000C0r 3               	bcc :+
0000C0r 3               	jmp lcol2		; no, missed.
0000C0r 3               :
0000C0r 3               	ldy #5
0000C0r 3               	lda (z80_hl),y 		; get x.
0000C0r 3               	sec
0000C0r 3               	ldy #9
0000C0r 3               	sbc (z80_ix),y 		; subtract sprite y.
0000C0r 3               	cmp #16			; within range?
0000C0r 3               	bcs :+
0000C0r 3               	jmp lcol4 		; yes, collision occurred.
0000C0r 3               :
0000C0r 3               lcol2:
0000C0r 3               	jmp lcol3
0000C0r 3               lcol4:
0000C0r 3               	sec
0000C0r 3               	rts 			; return with carry set for collision.
0000C0r 3               .endif
0000C0r 3               
0000C0r 3               ;------------------------------------------------------
0000C0r 3               ; Main game engine code starts here.
0000C0r 3               ; After initialisation, mloop is the main loop
0000C0r 3               ;------------------------------------------------------
0000C0r 3               
0000C0r 3               game:
0000C0r 3               
0000C0r 3               ; Set up screen address table.
0000C0r 3               
0000C0r 3               setsat:
0000C0r 3  A9 00        	lda #<CharAddress	; start of screen.
0000C2r 3  85 rr        	sta scraddr
0000C4r 3  A9 10        	lda #>CharAddress
0000C6r 3  85 rr        	sta scraddr+1
0000C8r 3               
0000C8r 3  A0 00        	ldy #0			; vertical lines on screen.
0000CAr 3               setsa0:
0000CAr 3  A5 rr        	lda scraddr
0000CCr 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000CFr 3  A5 rr        	lda scraddr+1
0000D1r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000D4r 3  20 rr rr     	jsr nline		; next line down.
0000D7r 3  C8           	iny			; next position in table.
0000D8r 3  D0 F0        	bne setsa0
0000DAr 3               
0000DAr 3               ; Set up colour address table
0000DAr 3               
0000DAr 3               setsof:
0000DAr 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000DCr 3  85 rr        	sta bufaddr
0000DEr 3  A9 96        	lda #>ColorAttr
0000E0r 3  85 rr        	sta bufaddr+1
0000E2r 3               
0000E2r 3  A0 00        	ldy #0			; vertical lines on screen.
0000E4r 3               setof0:
0000E4r 3  A5 rr        	lda bufaddr
0000E6r 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000E9r 3  A5 rr        	lda bufaddr+1
0000EBr 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000EEr 3  18           	clc			; next line down.
0000EFr 3  A5 rr        	lda bufaddr
0000F1r 3  69 16        	adc #ScrWidth
0000F3r 3  85 rr        	sta bufaddr
0000F5r 3  90 02        	bcc :+
0000F7r 3  E6 rr        	inc bufaddr+1
0000F9r 3               :
0000F9r 3  C8           	iny			; next position in table.
0000FAr 3  C0 0B        	cpy #ScrHeight/2
0000FCr 3  D0 E6        	bne setof0
0000FEr 3               
0000FEr 3               ; Init graphics mode
0000FEr 3               
0000FEr 3  20 rr rr     	jsr init
000101r 3               
000101r 3               ; Init joysticks
000101r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
000104r 3               
000104r 3               rpblc2:
000104r 3               .if pflag
000104r 3               	jsr inishr 		; initialise particle engine.
000104r 3               .endif
000104r 3               evintr:
000104r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000107r 3               
000107r 3  A9 02        	lda #WALL 		; write default property.
000109r 3  A2 00        	ldx #0
00010Br 3               clrmap:
00010Br 3  9D 00 04     	sta MAP,x 		; block properties.
00010Er 3  9D 00 05     	sta MAP+256,x
000111r 3  E8           	inx
000112r 3  D0 F7        	bne clrmap
000114r 3               
000114r 3               .if oflag
000114r 3               	jsr iniob 		; initialise objects.
000114r 3               .endif
000114r 3  A9 00        	lda #0			; put zero in accumulator.
000116r 3  85 rr        	sta gamwon		; reset game won flag.
000118r 3               
000118r 3  20 rr rr     	jsr inisc 		; init the score.
00011Br 3               mapst:
00011Br 3  AD rr rr     	lda stmap 		; start position on map.
00011Er 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
000121r 3               
000121r 3               inipbl:
000121r 3               .if aflag
000121r 3               	lda #<eop		; reset blockpointer
000121r 3               	sta pbptr
000121r 3               	lda #>eop
000121r 3               	sta pbptr+1
000121r 3               .endif
000121r 3  20 rr rr     	jsr initsc 		; set up first screen.
000124r 3               
000124r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
000126r 3  85 rr        	sta z80_x
000128r 3  A9 rr        	lda #>ssprit
00012Ar 3  85 rr        	sta z80_i
00012Cr 3               evini:
00012Cr 3  20 rr rr     	jsr evnt13 		; initialisation.
00012Fr 3               
00012Fr 3               ; Two restarts.
00012Fr 3               ; First restart - clear all sprites and initialise everything.
00012Fr 3               
00012Fr 3               rstrt:
00012Fr 3  20 rr rr     	jsr rsevt 		; restart events.
000132r 3  20 rr rr     	jsr xspr 		; clear sprite table.
000135r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000138r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
00013Br 3  4C rr rr     	jmp rstrt0
00013Er 3               
00013Er 3               ; Second restart - clear all but player, and don't initialise him.
00013Er 3               
00013Er 3               rstrtn:
00013Er 3  20 rr rr     	jsr rsevt		; restart events.
000141r 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
000144r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000147r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
00014Ar 3               
00014Ar 3               ; Set up the player and/or enemy sprites.
00014Ar 3               
00014Ar 3               rstrt0:
00014Ar 3  A9 00        	lda #0 			; zero in accumulator.
00014Cr 3  85 rr        	sta nexlev 		; reset next level flag.
00014Er 3  85 rr        	sta restfl 		; reset restart flag.
000150r 3  85 rr        	sta deadf 		; reset dead flag.
000152r 3               
000152r 3  20 rr rr     	jsr droom 		; show screen layout.
000155r 3               rpblc0:
000155r 3               .if pflag
000155r 3               	jsr inishr 		; initialise particle engine.
000155r 3               .endif
000155r 3               .if aflag
000155r 3               	jsr rbloc		; draw blocks for this screen
000155r 3               .endif
000155r 3               .if oflag
000155r 3               	jsr shwob		; draw objects.
000155r 3               .endif
000155r 3               
000155r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000157r 3  85 rr        	sta z80_x
000159r 3  A9 rr        	lda #>sprtab
00015Br 3  85 rr        	sta z80_i
00015Dr 3  20 rr rr     	jsr dspr 		; display sprites.
000160r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000162r 3  85 rr        	sta z80_x
000164r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000166r 3  85 rr        	sta z80_i
000168r 3  20 rr rr     	jsr dspr 		; display sprites.
00016Br 3               mloop:
00016Br 3  20 rr rr     	jsr vsync 		; synchronise with display.
00016Er 3               
00016Er 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000170r 3  85 rr        	sta z80_x
000172r 3  A9 rr        	lda #>sprtab
000174r 3  85 rr        	sta z80_i
000176r 3  20 rr rr     	jsr dspr 		; display even sprites.
000179r 3               
000179r 3               ;	jsr plsnd 		; play sounds.
000179r 3  20 rr rr     	jsr vsync 		; synchronise with display.
00017Cr 3  20 rr rr     	jsr proshr
00017Fr 3               
00017Fr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000181r 3  85 rr        	sta z80_x
000183r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000185r 3  85 rr        	sta z80_i
000187r 3  20 rr rr     	jsr dspr 		; display odd sprites.
00018Ar 3               
00018Ar 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
00018Cr 3  85 rr        	sta z80_x
00018Er 3  A9 rr        	lda #>(ssprit)
000190r 3  85 rr        	sta z80_i
000192r 3               evlp1:
000192r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000195r 3  20 rr rr     	jsr pspr 		; process sprites.
000198r 3               
000198r 3               ; Main loop events.
000198r 3               
000198r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
00019Ar 3  85 rr        	sta z80_x
00019Cr 3  A9 rr        	lda #>ssprit
00019Er 3  85 rr        	sta z80_i
0001A0r 3               evlp2:
0001A0r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
0001A3r 3               bsortx:
0001A3r 3  20 rr rr     	jsr bsort 		; sort sprites.
0001A6r 3               
0001A6r 3  A5 rr        	lda nexlev		; finished level flag.
0001A8r 3  D0 1F        	bne newlev		; is set, go to next level.
0001AAr 3  A5 rr        	lda gamwon		; finished game flag.
0001ACr 3  D0 2A        	bne evwon		; is set, finish the game.
0001AEr 3  A5 rr        	lda restfl 		; finished level flag.
0001B0r 3  C9 01        	cmp #1			; has it been set?
0001B2r 3  D0 03        	bne :+
0001B4r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
0001B7r 3               :
0001B7r 3  C9 02        	cmp #2			; has it been set?
0001B9r 3  D0 03        	bne :+
0001BBr 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
0001BEr 3               :
0001BEr 3  A5 rr        	lda deadf 		; dead flag.
0001C0r 3  D0 1C        	bne pdead		; yes, player dead.
0001C2r 3               
0001C2r 3               ; back to start of main loop.
0001C2r 3               
0001C2r 3  E6 rr        	inc frmno
0001C4r 3  E6 rr        	inc clock
0001C6r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
0001C9r 3               
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               ; Read blocks from list and update screen accordingly.
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               
0001C9r 3               .if aflag
0001C9r 3               rbloc:
0001C9r 3               	lda #<eop		; reset blockpointer
0001C9r 3               	sta pbbuf
0001C9r 3               	lda #>eop
0001C9r 3               	sta pbbuf+1
0001C9r 3               
0001C9r 3               rbloc2:
0001C9r 3               	lda pbbuf			; check for last block
0001C9r 3               	cmp pbptr
0001C9r 3               	bne rbloc1
0001C9r 3               	lda pbbuf+1
0001C9r 3               	cmp pbptr+1
0001C9r 3               	bne rbloc1
0001C9r 3               	rts
0001C9r 3               rbloc1:
0001C9r 3               	ldy #0
0001C9r 3               	lda (pbbuf),y		; check if block for this scno
0001C9r 3               	cmp scno
0001C9r 3               	bne rbloc0		; if not, skip
0001C9r 3               	iny
0001C9r 3               	lda (pbbuf),y		; get y
0001C9r 3               	sta dispy
0001C9r 3               	iny
0001C9r 3               	lda (pbbuf),y		; get x
0001C9r 3               	sta dispx
0001C9r 3               	iny
0001C9r 3               	lda (pbbuf),y		; get blocknr
0001C9r 3               	jsr pattr2		; draw block
0001C9r 3               rbloc0:
0001C9r 3               	clc			; point to next block
0001C9r 3               	lda pbbuf
0001C9r 3               	adc #4
0001C9r 3               	sta pbbuf
0001C9r 3               	bcc rbloc2
0001C9r 3               	inc pbbuf+1
0001C9r 3               	jmp rbloc2
0001C9r 3               .endif
0001C9r 3               
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               ; New level
0001C9r 3               ;----------------------------------------------------------
0001C9r 3               
0001C9r 3               newlev:
0001C9r 3  A5 rr        	lda scno 			; current screen.
0001CBr 3  18           	clc
0001CCr 3  69 01        	adc #1				; next screen.
0001CEr 3  CD rr rr     	cmp numsc 			; total number of screens.
0001D1r 3  B0 05        	bcs evwon			; yes, game finished.
0001D3r 3  85 rr        	sta scno			; set new level number.
0001D5r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001D8r 3               
0001D8r 3               evwon:
0001D8r 3  20 rr rr     	jsr evnt18		 	; game completed.
0001DBr 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001DEr 3               
0001DEr 3               ;----------------------------------------------------------
0001DEr 3               ; Player dead.
0001DEr 3               ;----------------------------------------------------------
0001DEr 3               
0001DEr 3               pdead:
0001DEr 3  A9 00        	lda #0				; zeroise accumulator.
0001E0r 3  85 rr        	sta deadf			; reset dead flag.
0001E2r 3               evdie:
0001E2r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001E5r 3  A5 rr        	lda numlif			; number of lives.
0001E7r 3  F0 03        	beq :+
0001E9r 3  4C rr rr     	jmp rstrt 			; restart game.
0001ECr 3               :
0001ECr 3               evfail:
0001ECr 3  20 rr rr     	jsr evnt17 			; failure event.
0001EFr 3  4C rr rr     	jmp game			; restart game
0001F2r 3               
0001F2r 3               ;----------------------------------------------------------
0001F2r 3               ; Tidy things up
0001F2r 3               ;----------------------------------------------------------
0001F2r 3               
0001F2r 3               tidyup:
0001F2r 3  A0 00        	ldy #0				; digits to check.
0001F4r 3               tidyu2:
0001F4r 3  B9 rr rr     	lda score,y 			; get score digit.
0001F7r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001FAr 3  90 07        	bcc tidyu0			; high score is bigger.
0001FCr 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001FEr 3  C8           	iny				; next digit of high score.
0001FFr 3  C0 06        	cpy #6
000201r 3  D0 F1        	bne tidyu2			; repeat for all digits
000203r 3               tidyu0:
000203r 3  A9 rr        	lda #<score			; return pointing to score.
000205r 3  85 rr        	sta z80_c
000207r 3  A9 rr        	lda #>score
000209r 3  85 rr        	sta z80_b
00020Br 3  60           	rts
00020Cr 3               tidyu1:
00020Cr 3  A0 05        	ldy #5
00020Er 3               tidyu3:
00020Er 3  B9 rr rr     	lda score,y			; score.
000211r 3  99 rr rr     	sta hiscor,y			; high score.
000214r 3  88           	dey
000215r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000217r 3               evnewh:
000217r 3  20 rr rr     	jsr evnt19			; new high score event.
00021Ar 3  4C rr rr     	jmp tidyu0			; tidy up.
00021Dr 3               
00021Dr 3               ;--------------------------------------------------
00021Dr 3               ; Restart event.
00021Dr 3               ;--------------------------------------------------
00021Dr 3               
00021Dr 3               rsevt:
00021Dr 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00021Fr 3  85 rr        	sta z80_x
000221r 3  A9 rr        	lda #>ssprit
000223r 3  85 rr        	sta z80_i
000225r 3               
000225r 3               evrs:
000225r 3  4C rr rr     	jmp evnt14	 		; call restart event.
000228r 3               
000228r 3               ;------------------------------------------------------------------
000228r 3               ; Copy number passed in a to string position bc, right-justified.
000228r 3               ;
000228r 3               ; Input:
000228r 3               ;  A  = number
000228r 3               ;  BC = string address
000228r 3               ;
000228r 3               ; Output:
000228r 3               ;  BC = string with number
000228r 3               ;-----------------------------------------------------------------
000228r 3               
000228r 3               num2ch:
000228r 3  85 rr        	sta z80_d		; Save number
00022Ar 3               
00022Ar 3  A9 00        	lda #0
00022Cr 3  85 rr        	sta flag
00022Er 3               numdg3:
00022Er 3  A2 64        	ldx #100		; hundreds column.
000230r 3  86 rr        	stx z80_e
000232r 3  20 rr rr     	jsr numdg		; show digit.
000235r 3               numdg2:
000235r 3  A2 0A        	ldx #10			; tens column.
000237r 3  86 rr        	stx z80_e
000239r 3  20 rr rr     	jsr numdg		; show digit.
00023Cr 3               
00023Cr 3  E6 rr        	inc flag
00023Er 3  A2 01        	ldx #1			; units column.
000240r 3  86 rr        	stx z80_e
000242r 3               numdg:
000242r 3  A9 30        	lda #48			; clear digit.
000244r 3  85 rr        	sta z80_a
000246r 3               numdg1:
000246r 3  A5 rr        	lda z80_d
000248r 3  C5 rr        	cmp z80_e
00024Ar 3  90 0E        	bcc numdg0		; nothing to show.
00024Cr 3  38           	sec
00024Dr 3  A5 rr        	lda z80_d
00024Fr 3  E5 rr        	sbc z80_e		; subtract from column.
000251r 3  85 rr        	sta z80_d
000253r 3  E6 rr        	inc z80_a		; increment digit.
000255r 3  E6 rr        	inc flag
000257r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
00025Ar 3               numdg0:
00025Ar 3  A0 00        	ldy #0
00025Cr 3  A5 rr        	lda z80_a
00025Er 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000260r 3  A5 rr        	lda flag
000262r 3  F0 06        	beq :+
000264r 3  E6 rr        	inc z80_c		; next buffer position.
000266r 3  D0 02        	bne :+
000268r 3  E6 rr        	inc z80_b
00026Ar 3               :
00026Ar 3  60           	rts
00026Br 3               num2dd:
00026Br 3  85 rr        	sta z80_d		; Save number
00026Dr 3               
00026Dr 3  A9 01        	lda #1
00026Fr 3  85 rr        	sta flag
000271r 3               
000271r 3  4C rr rr     	jmp numdg2
000274r 3               num2td:
000274r 3  85 rr        	sta z80_d		; Save number
000276r 3               
000276r 3  A9 01        	lda #1
000278r 3  85 rr        	sta flag
00027Ar 3  4C rr rr     	jmp numdg3
00027Dr 3               
00027Dr 3               ;---------------------------------------------------------
00027Dr 3               ; Reset score to "000000"
00027Dr 3               ;---------------------------------------------------------
00027Dr 3               
00027Dr 3               inisc:
00027Dr 3  A9 30        	lda #'0'
00027Fr 3  A2 05        	ldx #5			; digits to initialise.
000281r 3               inisc0:
000281r 3  9D rr rr     	sta score,x 		; write zero digit.
000284r 3  CA           	dex			; next column.
000285r 3  10 FA        	bpl inisc0		; repeat for all digits.
000287r 3               
000287r 3  60           	rts
000288r 3               
000288r 3               ;-----------------------------------------------------
000288r 3               ; Multiply h by d and return in hl.
000288r 3               ;
000288r 3               ; Input:
000288r 3               ;  H = first number
000288r 3               ;  D = second number
000288r 3               ;
000288r 3               ; Output:
000288r 3               ;  HL = result H x D
000288r 3               ;-----------------------------------------------------
000288r 3               
000288r 3               imul:
000288r 3  A5 rr        	lda z80_d		; HL = H * D
00028Ar 3  85 rr        	sta z80_e
00028Cr 3  A5 rr        	lda z80_h
00028Er 3  85 rr        	sta z80_c		; make c first multiplier.
000290r 3               imul0:
000290r 3  A9 00        	lda #0			; zeroise total.
000292r 3  85 rr        	sta z80_l
000294r 3  85 rr        	sta z80_h
000296r 3               
000296r 3  A5 rr        	lda z80_h
000298r 3  85 rr        	sta z80_d		; zeroise high byte.
00029Ar 3               
00029Ar 3  A9 08        	lda #8			; repeat 8 times.
00029Cr 3  85 rr        	sta z80_b
00029Er 3               imul1:
00029Er 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
0002A0r 3  90 0E        	bcc imul2		; wasn't set.
0002A2r 3  18           	clc			; bit was set, so add de.
0002A3r 3  A5 rr        	lda z80_l
0002A5r 3  65 rr        	adc z80_e
0002A7r 3  85 rr        	sta z80_l
0002A9r 3  A5 rr        	lda z80_h
0002ABr 3  65 rr        	adc z80_d
0002ADr 3  85 rr        	sta z80_h
0002AFr 3  18           	clc 			; reset carry.
0002B0r 3               imul2:
0002B0r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
0002B2r 3  26 rr        	rol z80_d
0002B4r 3  C6 rr        	dec z80_b
0002B6r 3  D0 E6        	bne imul1		; repeat 8 times.
0002B8r 3               
0002B8r 3  60           	rts
0002B9r 3               
0002B9r 3               ;-----------------------------------------------
0002B9r 3               ; Divide d by e and return in d, remainder in a.
0002B9r 3               ;
0002B9r 3               ; Input:
0002B9r 3               ;  D = first number
0002B9r 3               ;  E = second number
0002B9r 3               ;
0002B9r 3               ; Output:
0002B9r 3               ;  D = result D/E
0002B9r 3               ;  A = remainder
0002B9r 3               ;-----------------------------------------------
0002B9r 3               
0002B9r 3               idiv:
0002B9r 3  A9 00        	lda #0
0002BBr 3  A0 08        	ldy #8		 	; bits to shift.
0002BDr 3  06 rr        	asl z80_d
0002BFr 3               idiv0:
0002BFr 3  2A           	rol a 			; multiply d by 2.
0002C0r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
0002C2r 3  90 02        	bcc idiv1		; e is greater, no division this time.
0002C4r 3  E5 rr        	sbc z80_e		; subtract it.
0002C6r 3               idiv1:
0002C6r 3  26 rr        	rol z80_d		; rotate into d.
0002C8r 3  88           	dey
0002C9r 3  D0 F4        	bne idiv0		; repeat
0002CBr 3  60           	rts
0002CCr 3               
0002CCr 3               ;---------------------------------------------------
0002CCr 3               ; Play AY sound effect
0002CCr 3               ;---------------------------------------------------
0002CCr 3               
0002CCr 3               plsnd:
0002CCr 3  60           	rts
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Objects handling.
0002CDr 3               ; 32 bytes for image
0002CDr 3               ; 1 for colour
0002CDr 3               ; 3 for room, y and x
0002CDr 3               ; 3 for starting room, y and x.
0002CDr 3               ; 254 = disabled.
0002CDr 3               ; 255 = object in player"s pockets.
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Show items present.
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               .if oflag
0002CDr 3               shwob:
0002CDr 3               	lda #<objdta			; objects table.
0002CDr 3               	sta z80_l
0002CDr 3               	lda #>objdta
0002CDr 3               	sta z80_h
0002CDr 3               	lda numob 			; number of objects in the game.
0002CDr 3               	sta sprcnt
0002CDr 3               shwob0:
0002CDr 3               	ldy #33 			; distance to room number.
0002CDr 3               	lda (z80_hl),y 			; same as an item?
0002CDr 3               	cmp scno 			; current location.
0002CDr 3               	bne :+
0002CDr 3               	jsr dobj 			; yes, display object.
0002CDr 3               :
0002CDr 3               	clc
0002CDr 3               	lda z80_l
0002CDr 3               	adc #39 			; distance to next item.
0002CDr 3               	sta z80_l
0002CDr 3               	lda z80_h
0002CDr 3               	adc #0
0002CDr 3               	sta z80_h	 		; point to it.
0002CDr 3               	dec sprcnt
0002CDr 3               	bne shwob0 			; repeat for others.
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Display object.
0002CDr 3               ; hl must point to object's start address.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  HL = object address
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               dobj:
0002CDr 3               	ldy #32
0002CDr 3               	lda (z80_hl),y 			; point to y.
0002CDr 3               	sta objcol
0002CDr 3               	ldy #34
0002CDr 3               	lda (z80_hl),y 			; point to y.
0002CDr 3               	sta dispy
0002CDr 3               	iny
0002CDr 3               	lda (z80_hl),y 			; point to x.
0002CDr 3               	sta dispx
0002CDr 3               dobj1:
0002CDr 3               	jmp sprite 			; draw this sprite.
0002CDr 3               
0002CDr 3               ;--------------------------------------
0002CDr 3               ; Remove an object.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;--------------------------------------
0002CDr 3               
0002CDr 3               remob:
0002CDr 3               	cmp numob			; number of objects in game.
0002CDr 3               	bcc :+				; are we checking past the end?
0002CDr 3               	rts				; yes, can't get non-existent item.
0002CDr 3               :
0002CDr 3               	pha				; remember object.
0002CDr 3               	jsr getob			; pick it up if we haven't already got it.
0002CDr 3               	pla				; retrieve object number.
0002CDr 3               	jsr gotob			; get its address.
0002CDr 3               	lda #254
0002CDr 3               	ldy #33
0002CDr 3               	sta (z80_hl),y			; remove it.
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               ;---------------------------------------------------
0002CDr 3               ; Pick up object number held in the accumulator.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;---------------------------------------------------
0002CDr 3               
0002CDr 3               getob:
0002CDr 3               	cmp numob 		; number of objects in game.
0002CDr 3               	bcc :+			; are we checking past the end?
0002CDr 3               	rts			; yes, can't get non-existent item.
0002CDr 3               :
0002CDr 3               	jsr gotob 		; check if we already have it.
0002CDr 3               	cmp #255
0002CDr 3               	bne :+
0002CDr 3               	rts			; we already do.
0002CDr 3               :
0002CDr 3               	ldy #33
0002CDr 3               	lda (z80_hl),y		; is it on this screen?
0002CDr 3               	cmp scno 		; current screen.
0002CDr 3               	bne getob0		; not on screen, so nothing to delete.
0002CDr 3               
0002CDr 3               	lda #255
0002CDr 3               	sta (z80_hl),y		; pick it up.
0002CDr 3               	iny 			; point to y coord.
0002CDr 3               getob1:
0002CDr 3               	ldy #34
0002CDr 3               	lda (z80_hl),y		; y coord.
0002CDr 3               	sta dispy
0002CDr 3               	ldy #35
0002CDr 3               	lda (z80_hl),y 		; x coord.
0002CDr 3               	sta dispx
0002CDr 3               	jmp dobj1 		; delete object sprite.
0002CDr 3               getob0:
0002CDr 3               	lda #255
0002CDr 3               	sta (z80_hl),y 		; pick it up.
0002CDr 3               	rts
0002CDr 3               .endif
0002CDr 3               
0002CDr 3               ;-----------------------------------------------------------------
0002CDr 3               ; Got object check.
0002CDr 3               ; Call with object in accumulator, returns zero set if in pockets.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;-----------------------------------------------------------------
0002CDr 3               .if oflag .or mflag
0002CDr 3               gotob:
0002CDr 3               	cmp numob 		; number of objects in game.
0002CDr 3               	bcc :+ 			; are we checking past the end?
0002CDr 3               	jmp gotob0 		; yes, we can't have a non-existent object.
0002CDr 3               :
0002CDr 3               	jsr findob		; find the object.
0002CDr 3               gotob1:
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               gotob0:
0002CDr 3               	lda #254 		; missing.
0002CDr 3               	jmp gotob1
0002CDr 3               
0002CDr 3               findob:
0002CDr 3               	pha			; save object number
0002CDr 3               	lda #<objdta 		; objects.
0002CDr 3               	sta z80_l
0002CDr 3               	lda #>objdta
0002CDr 3               	sta z80_h
0002CDr 3               	pla			; retreive object number
0002CDr 3               	beq fndob1 		; is it zero? yes, skip loop.
0002CDr 3               	tax 			; loop counter
0002CDr 3               fndob2:
0002CDr 3               	clc
0002CDr 3               	lda z80_l
0002CDr 3               	adc #39 		; size of each object.
0002CDr 3               	sta z80_l
0002CDr 3               	bcc :+
0002CDr 3               	inc z80_h
0002CDr 3               :
0002CDr 3               	dex 			; repeat until we find address.
0002CDr 3               	bne fndob2
0002CDr 3               fndob1:
0002CDr 3               	ldy #33			; distance to room it's in.
0002CDr 3               	lda (z80_hl),y		; fetch status.
0002CDr 3               	rts
0002CDr 3               .endif
0002CDr 3               
0002CDr 3               ;---------------------------------------------
0002CDr 3               ; Drop object number at (dispx, dispy).
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  A = object number
0002CDr 3               ;---------------------------------------------
0002CDr 3               
0002CDr 3               .if oflag
0002CDr 3               drpob:
0002CDr 3               	cmp numob 		; are we checking past the end?
0002CDr 3               	bcc :+
0002CDr 3               	rts			; yes, can't drop non-existent item.
0002CDr 3               :
0002CDr 3               	jsr gotob		; make sure object is in inventory.
0002CDr 3               	cmp scno		; already on this screen?
0002CDr 3               	bne :+
0002CDr 3               	rts			; yes, nothing to do.
0002CDr 3               :
0002CDr 3               	ldy #33
0002CDr 3               	lda scno
0002CDr 3               	sta (z80_hl),y		; bring onto screen.
0002CDr 3               	lda dispy		; sprite y coordinate.
0002CDr 3               	iny
0002CDr 3               	sta (z80_hl),y		; point to object y.
0002CDr 3               	lda dispx 		; sprite x coordinate.
0002CDr 3               	iny
0002CDr 3               	sta (z80_hl),y 		; point to object x
0002CDr 3               	jmp dobj		; draw the object sprite.
0002CDr 3               
0002CDr 3               ;-----------------------------------------------
0002CDr 3               ; Seek objects at sprite position.
0002CDr 3               ;
0002CDr 3               ; Output:
0002CDr 3               ;  A = object number, if not found A=255
0002CDr 3               ;-----------------------------------------------
0002CDr 3               
0002CDr 3               skobj:
0002CDr 3               	lda #<objdta 		; pointer to objects.
0002CDr 3               	sta z80_l
0002CDr 3               	lda #>objdta
0002CDr 3               	sta z80_h
0002CDr 3               
0002CDr 3               	lda numob 		; number of objects in game.
0002CDr 3               	sta z80_b 		; set up the loop counter.
0002CDr 3               skobj0:
0002CDr 3               	lda scno		; current room number.
0002CDr 3               	ldy #33
0002CDr 3               	cmp (z80_hl),y		; is object in here?
0002CDr 3               	bne :+
0002CDr 3               	jsr skobj1		; yes, check coordinates.
0002CDr 3               :
0002CDr 3               	clc			; point to next object in table.
0002CDr 3               	lda z80_l
0002CDr 3               	adc #39			; size of each object.
0002CDr 3               	sta z80_l
0002CDr 3               	bcc :+
0002CDr 3               	inc z80_h
0002CDr 3               :
0002CDr 3               	dec z80_b
0002CDr 3               	bne skobj0		; repeat for all objects.
0002CDr 3               
0002CDr 3               	lda #255		; end of list and nothing found, return 255.
0002CDr 3               	rts
0002CDr 3               
0002CDr 3               skobj1:
0002CDr 3               	ldy #34			; point to y coordinate.
0002CDr 3               	lda (z80_hl),y		; point to y coordinate.
0002CDr 3               	sec
0002CDr 3               	ldy #var_newY
0002CDr 3               	sbc (z80_ix),y 		; subtract sprite y.
0002CDr 3               	clc
0002CDr 3               	adc #15			; add sprite height minus one.
0002CDr 3               	cmp #31			; within range?
0002CDr 3               	bcs skobj2		; no, ignore object.
0002CDr 3               
0002CDr 3               	ldy #35			; point to x coordinate now.
0002CDr 3               	lda (z80_hl),y 		; get coordinate.
0002CDr 3               	sec
0002CDr 3               	ldy #var_newX
0002CDr 3               	sbc (z80_ix),y 		; subtract the sprite x.
0002CDr 3               	clc			; add sprite width minus one.
0002CDr 3               	adc #15
0002CDr 3               	cmp #31			; within range?
0002CDr 3               	bcs skobj2		; no, ignore object.
0002CDr 3               
0002CDr 3               	pla			; remove return address from stack.
0002CDr 3               	pla
0002CDr 3               
0002CDr 3               	lda numob 		; objects in game.
0002CDr 3               	sec
0002CDr 3               	sbc z80_b		; subtract loop counter.
0002CDr 3               skobj2:
0002CDr 3               	rts			; accumulator now points to object.
0002CDr 3               .endif
0002CDr 3               
0002CDr 3               ;---------------------------------------------------------------------
0002CDr 3               ; Spawn a new sprite.
0002CDr 3               ;---------------------------------------------------------------------
0002CDr 3               
0002CDr 3               spawn:
0002CDr 3  A9 rr        	lda #<sprtab		; sprite table.
0002CFr 3  85 rr        	sta z80_l
0002D1r 3  A9 rr        	lda #>sprtab
0002D3r 3  85 rr        	sta z80_h
0002D5r 3               numsp1:
0002D5r 3  A9 0C        	lda #NUMSPR		; number of sprites.
0002D7r 3  85 rr        	sta spcnt
0002D9r 3               spaw0:
0002D9r 3  A0 00        	ldy #var_Type
0002DBr 3  B1 rr        	lda (z80_hl),y		; get sprite type.
0002DDr 3  C9 FF        	cmp #255		; is it an unused slot?
0002DFr 3  F0 0F        	beq spaw1 		; yes, we can use this one.
0002E1r 3               
0002E1r 3  18           	clc 			; point to next sprite in table.
0002E2r 3  A5 rr        	lda z80_l
0002E4r 3  69 12        	adc #TABSIZ		; size of each entry.
0002E6r 3  85 rr        	sta z80_l
0002E8r 3  90 02        	bcc :+
0002EAr 3  E6 rr        	inc z80_h
0002ECr 3               :
0002ECr 3  C6 rr        	dec spcnt		; one less iteration.
0002EEr 3  D0 E9        	bne spaw0		; keep going until we find a slot.
0002F0r 3               
0002F0r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
0002F0r 3               
0002F0r 3               spaw1:
0002F0r 3  A5 rr        	lda z80_i		; address of original sprite.
0002F2r 3  48           	pha
0002F3r 3  A5 rr        	lda z80_x
0002F5r 3  48           	pha
0002F6r 3               
0002F6r 3  A5 rr        	lda z80_l		; store spawned sprite address.
0002F8r 3  85 rr        	sta spptr
0002FAr 3  A5 rr        	lda z80_h
0002FCr 3  85 rr        	sta spptr+1
0002FEr 3               
0002FEr 3  A5 rr        	lda z80_c
000300r 3  A0 00        	ldy #var_Type
000302r 3  91 rr        	sta (z80_hl),y 		; set the type.
000304r 3  A0 05        	ldy #var_newType
000306r 3  91 rr        	sta (z80_hl),y		; copy
000308r 3               
000308r 3  A5 rr        	lda z80_b
00030Ar 3  A0 01        	ldy #var_Image
00030Cr 3  91 rr        	sta (z80_hl),y		; set the image.
00030Er 3  A0 06        	ldy #var_newImage
000310r 3  91 rr        	sta (z80_hl),y		; copy
000312r 3               
000312r 3  A9 00        	lda #0 				; frame zero.
000314r 3  A0 02        	ldy #var_Frame
000316r 3  91 rr        	sta (z80_hl),y		; set frame.
000318r 3  A0 07        	ldy #var_newFrame
00031Ar 3  91 rr        	sta (z80_hl),y		; copy
00031Cr 3               
00031Cr 3  A0 08        	ldy #8
00031Er 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000320r 3  A0 03        	ldy #3
000322r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000324r 3  A0 08        	ldy #8
000326r 3  91 rr        	sta (z80_hl),y		; copy
000328r 3               
000328r 3  A0 09        	ldy #9
00032Ar 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00032Cr 3  A0 04        	ldy #4
00032Er 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000330r 3  A0 09        	ldy #9
000332r 3  91 rr        	sta (z80_hl),y		; copy
000334r 3               
000334r 3  A0 0A        	ldy #10				; direction of original.
000336r 3  B1 rr        	lda (z80_ix),y
000338r 3  91 rr        	sta (z80_hl),y		; direction
00033Ar 3               
00033Ar 3  A9 00        	lda #0
00033Cr 3  A0 0D        	ldy #var_jumpLo
00033Er 3  91 rr        	sta (z80_hl),y		; reset parameter.
000340r 3  C8           	iny
000341r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000343r 3  C8           	iny
000344r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000346r 3  C8           	iny
000347r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000349r 3  C8           	iny
00034Ar 3  AD rr rr     	lda fontcol
00034Dr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00034Fr 3               rtssp:
00034Fr 3  A5 rr        	lda spptr			; address of new sprite.
000351r 3  85 rr        	sta z80_x
000353r 3  A5 rr        	lda spptr+1
000355r 3  85 rr        	sta z80_i
000357r 3               evis1:
000357r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
00035Ar 3               
00035Ar 3  A5 rr        	lda spptr 			; address of new sprite.
00035Cr 3  85 rr        	sta z80_x
00035Er 3  A5 rr        	lda spptr+1
000360r 3  85 rr        	sta z80_i
000362r 3               
000362r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000362r 3  A0 03        	ldy #var_Y
000364r 3  B1 rr        	lda (z80_hl), y		; old x coord
000366r 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
000368r 3  B0 03        	bcs :+				; yes, don't draw it.
00036Ar 3               
00036Ar 3  20 rr rr     	jsr sspria 			; display the new sprite.
00036Dr 3               :
00036Dr 3  68           	pla					; address of original sprite.
00036Er 3  85 rr        	sta z80_x
000370r 3  68           	pla
000371r 3  85 rr        	sta z80_i
000373r 3               
000373r 3  60           	rts
000374r 3               
000374r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000378r 3  30 30        
00037Ar 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00037Er 3  30 30        
000380r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
000384r 3  30 30        
000386r 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
000388r 3               
000388r 3               ;----------------------------------------------------
000388r 3               ; Check y-pos
000388r 3               ;----------------------------------------------------
000388r 3               
000388r 3               checkx:
000388r 3  A5 rr        	lda dispy		; y position.
00038Ar 3  C9 16        	cmp #22			; off screen?
00038Cr 3  B0 01        	bcs :+
00038Er 3  60           	rts			; no, it's okay.
00038Fr 3               :
00038Fr 3  68           	pla			; remove return address from stack.
000390r 3  85 rr        	sta z80_l
000392r 3  68           	pla
000393r 3  85 rr        	sta z80_h
000395r 3  60           	rts
000396r 3               
000396r 3               ;-----------------------------------------------
000396r 3               ; Displays the current high score.
000396r 3               ;-----------------------------------------------
000396r 3               
000396r 3               dhisc:
000396r 3  A9 rr        	lda #<hiscor 		; high score text.
000398r 3  8D rr rr     	sta dscor3+1
00039Br 3  8D rr rr     	sta bscor3+1
00039Er 3  A9 rr        	lda #>hiscor
0003A0r 3  8D rr rr     	sta dscor3+2
0003A3r 3  8D rr rr     	sta bscor3+2
0003A6r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
0003A9r 3               
0003A9r 3               ;------------------------------------------------------
0003A9r 3               ; Displays the current score.
0003A9r 3               ;------------------------------------------------------
0003A9r 3               
0003A9r 3               dscor:
0003A9r 3  A9 rr        	lda #<score		; score text.
0003ABr 3  8D rr rr     	sta dscor3+1
0003AEr 3  8D rr rr     	sta bscor3+1
0003B1r 3  A9 rr        	lda #>score
0003B3r 3  8D rr rr     	sta dscor3+2
0003B6r 3  8D rr rr     	sta bscor3+2
0003B9r 3               dscor1:
0003B9r 3  8C rr rr     	sty tmpscr
0003BCr 3  20 rr rr     	jsr preprt		; set up font and print position.
0003BFr 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
0003C2r 3               
0003C2r 3               ;	lda #6			; digits to display.
0003C2r 3               ;	sta z80_b
0003C2r 3  A5 rr        	lda prtmod		; get print mode.
0003C4r 3  F0 03        	beq :+			; standard size text?
0003C6r 3  4C rr rr     	jmp bscor0		; no, show double-height.
0003C9r 3               :
0003C9r 3               dscor0:
0003C9r 3               ;	ldy #0
0003C9r 3               ;	lda (z80_hl),y 		; fetch character.
0003C9r 3  AC rr rr     	ldy tmpscr
0003CCr 3               dscor3:
0003CCr 3  B9 rr rr     	lda score,y
0003CFr 3  20 rr rr     	jsr pchar 		; display character.
0003D2r 3  E6 rr        	inc dispx		; move along x coordinate
0003D4r 3               
0003D4r 3               ;	inc z80_l		; next score column.
0003D4r 3               ;	bne :+
0003D4r 3               ;	inc z80_h
0003D4r 3               ;:
0003D4r 3  EE rr rr     	inc tmpscr
0003D7r 3  C6 rr        	dec z80_b
0003D9r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0003DBr 3               dscor2:
0003DBr 3  A5 rr        	lda dispx 		; set up display coordinates.
0003DDr 3  85 rr        	sta charx
0003DFr 3  A5 rr        	lda dispy
0003E1r 3  85 rr        	sta chary
0003E3r 3  60           	rts
0003E4r 3               
0003E4r 3  00           tmpscr:	.byte 0
0003E5r 3               ;------------------------------------------------------
0003E5r 3               ; Displays the current score in double-height characters.
0003E5r 3               ;
0003E5r 3               ; Input:
0003E5r 3               ;  B  = digit number
0003E5r 3               ;  HL = score string
0003E5r 3               ;------------------------------------------------------
0003E5r 3               
0003E5r 3               bscor0:
0003E5r 3               ;	ldy #0
0003E5r 3               
0003E5r 3               ;	lda (z80_hl),y 		; fetch character.
0003E5r 3  A4 rr        	ldy tmp
0003E7r 3               bscor3:
0003E7r 3  B9 rr rr     	lda score,y
0003EAr 3  20 rr rr     	jsr bchar 		; display big char.
0003EDr 3               
0003EDr 3               ;	inc z80_l 		; next score column.
0003EDr 3               ;	bne :+
0003EDr 3               ;	inc z80_h
0003EDr 3               ;:
0003EDr 3  E6 rr        	inc tmp
0003EFr 3  C6 rr        	dec z80_b
0003F1r 3  F0 03        	beq :+
0003F3r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
0003F6r 3               :
0003F6r 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
0003F9r 3               
0003F9r 3               ;-----------------------------------------------------
0003F9r 3               ; Adds number in the hl pair to the score.
0003F9r 3               ;-----------------------------------------------------
0003F9r 3               
0003F9r 3               addsc:
0003F9r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
0003FBr 3  85 rr        	sta z80_e
0003FDr 3  A9 rr        	lda #>(score+1)
0003FFr 3  85 rr        	sta z80_d
000401r 3  A9 10        	lda #<10000		; amount to add each time.
000403r 3  85 rr        	sta z80_c
000405r 3  A9 27        	lda #>10000
000407r 3  85 rr        	sta z80_b
000409r 3  20 rr rr     	jsr incsc		; add to score.
00040Cr 3               
00040Cr 3  E6 rr        	inc z80_e		; thousands column.
00040Er 3  D0 02        	bne :+
000410r 3  E6 rr        	inc z80_d
000412r 3               :
000412r 3  A9 E8        	lda #<1000		; amount to add each time.
000414r 3  85 rr        	sta z80_c
000416r 3  A9 03        	lda #>1000
000418r 3  85 rr        	sta z80_b
00041Ar 3  20 rr rr     	jsr incsc 		; add to score.
00041Dr 3               
00041Dr 3  E6 rr        	inc z80_e		; hundreds column.
00041Fr 3  D0 02        	bne :+
000421r 3  E6 rr        	inc z80_d
000423r 3               :
000423r 3  A9 64        	lda #<100		; amount to add each time.
000425r 3  85 rr        	sta z80_c
000427r 3  A9 00        	lda #>100
000429r 3  85 rr        	sta z80_b
00042Br 3  20 rr rr     	jsr incsc		; add to score.
00042Er 3               
00042Er 3  E6 rr        	inc z80_e 		; tens column.
000430r 3  D0 02        	bne :+
000432r 3  E6 rr        	inc z80_d
000434r 3               :
000434r 3  A9 0A        	lda #<10		; amount to add each time.
000436r 3  85 rr        	sta z80_c
000438r 3  A9 00        	lda #>10
00043Ar 3  85 rr        	sta z80_b
00043Cr 3  20 rr rr     	jsr incsc 		; add to score.
00043Fr 3               
00043Fr 3  E6 rr        	inc z80_e		; units column.
000441r 3  D0 02        	bne :+
000443r 3  E6 rr        	inc z80_d
000445r 3               :
000445r 3  A9 01        	lda #<1			; units.
000447r 3  85 rr        	sta z80_c
000449r 3  A9 00        	lda #>1
00044Br 3  85 rr        	sta z80_b
00044Dr 3               incsc:
00044Dr 3  A5 rr        	lda z80_h		; store amount to add.
00044Fr 3  48           	pha
000450r 3  A5 rr        	lda z80_l
000452r 3  48           	pha
000453r 3               
000453r 3  38           	sec			; subtract from amount to add.
000454r 3  A5 rr        	lda z80_l
000456r 3  E5 rr        	sbc z80_c
000458r 3  85 rr        	sta z80_l
00045Ar 3  A5 rr        	lda z80_h
00045Cr 3  E5 rr        	sbc z80_b
00045Er 3  85 rr        	sta z80_h
000460r 3  90 14        	bcc incsc0		; too much, restore value.
000462r 3               
000462r 3  68           	pla			; delete the previous amount from the stack.
000463r 3  68           	pla
000464r 3               
000464r 3  A5 rr        	lda z80_d 		; store column position.
000466r 3  48           	pha
000467r 3  A5 rr        	lda z80_e
000469r 3  48           	pha
00046Ar 3  20 rr rr     	jsr incsc2		; do the increment.
00046Dr 3               
00046Dr 3  68           	pla			; restore column.
00046Er 3  85 rr        	sta z80_e
000470r 3  68           	pla
000471r 3  85 rr        	sta z80_d
000473r 3  4C rr rr     	jmp incsc		; repeat until all added.
000476r 3               
000476r 3               incsc0:
000476r 3  68           	pla			; restore previous value.
000477r 3  85 rr        	sta z80_l
000479r 3  68           	pla
00047Ar 3  85 rr        	sta z80_h
00047Cr 3  60           	rts
00047Dr 3               incsc2:
00047Dr 3  A0 00        	ldy #0
00047Fr 3  B1 rr        	lda (z80_de),y 		; get amount.
000481r 3  18           	clc
000482r 3  69 01        	adc #1			; add one to column.
000484r 3  91 rr        	sta (z80_de),y		; write new column total.
000486r 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
000488r 3  B0 01        	bcs :+
00048Ar 3  60           	rts			; no, carry on.
00048Br 3               :
00048Br 3  A9 30        	lda #'0'		; make it zero.
00048Dr 3  91 rr        	sta (z80_de),y		; write new column total.
00048Fr 3  C6 rr        	dec z80_e		; back one column.
000491r 3  D0 02        	bne :+
000493r 3  C6 rr        	dec z80_d
000495r 3               :
000495r 3  4C rr rr     	jmp incsc2
000498r 3               
000498r 3               ;------------------------------------
000498r 3               ; Add bonus to score and reset bonus
000498r 3               ;------------------------------------
000498r 3               
000498r 3               addbo:
000498r 3  A2 05        	ldx #5			; last digit.
00049Ar 3  18           	clc
00049Br 3               addbo0:
00049Br 3  BD rr rr     	lda score,x		; get score.
00049Er 3  7D rr rr     	adc bonus,x		; add bonus.
0004A1r 3  38           	sec			; 0 to 18.
0004A2r 3  E9 30        	sbc #48
0004A4r 3  48           	pha
0004A5r 3  A9 30        	lda #'0'
0004A7r 3  9D rr rr     	sta bonus,x
0004AAr 3  68           	pla
0004ABr 3  C9 3A        	cmp #58
0004ADr 3  90 03        	bcc addbo1
0004AFr 3  38           	sec
0004B0r 3  E9 0A        	sbc #10
0004B2r 3               addbo1:
0004B2r 3  9D rr rr     	sta score,x		; zeroise bonus.
0004B5r 3  CA           	dex			; next digit.
0004B6r 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0004B8r 3  60           	rts
0004B9r 3               
0004B9r 3               ;------------------------------------
0004B9r 3               ; Swap score and bonus.
0004B9r 3               ;------------------------------------
0004B9r 3               
0004B9r 3               swpsb:
0004B9r 3  A2 05        	ldx #5			; digits to add.
0004BBr 3               swpsb0:
0004BBr 3  BD rr rr     	lda score,x 		; get score digits.
0004BEr 3  48           	pha			; save digit
0004BFr 3  BD rr rr     	lda bonus,x 		; get bonus digits.
0004C2r 3  9D rr rr     	sta score,x		; switch score-bonus
0004C5r 3  68           	pla
0004C6r 3  9D rr rr     	sta bonus,x
0004C9r 3  CA           	dex 			; repeat for all 6 digits.
0004CAr 3  10 EF        	bpl swpsb0
0004CCr 3  60           	rts
0004CDr 3               
0004CDr 3               ;----------------------------------------------------
0004CDr 3               ; Get print address.
0004CDr 3               ;----------------------------------------------------
0004CDr 3               
0004CDr 3               gprad:
0004CDr 3  98           	tya
0004CEr 3  48           	pha
0004CFr 3               
0004CFr 3  A5 rr        	lda dispx 		; x coordinate.
0004D1r 3  85 rr        	sta scraddr
0004D3r 3  A9 00        	lda #0
0004D5r 3  85 rr        	sta scraddr+1
0004D7r 3  06 rr        	asl scraddr  		; multiply char by 16
0004D9r 3  26 rr        	rol scraddr+1
0004DBr 3  06 rr        	asl scraddr
0004DDr 3  26 rr        	rol scraddr+1
0004DFr 3  06 rr        	asl scraddr
0004E1r 3  26 rr        	rol scraddr+1
0004E3r 3  06 rr        	asl scraddr
0004E5r 3  26 rr        	rol scraddr+1
0004E7r 3               
0004E7r 3  A5 rr        	lda dispy		; y coordinate.
0004E9r 3  0A           	asl a
0004EAr 3  0A           	asl a
0004EBr 3  0A           	asl a			; multiply char by 8
0004ECr 3  A8           	tay
0004EDr 3               
0004EDr 3  18           	clc
0004EEr 3  A5 rr        	lda scraddr
0004F0r 3  79 00 07     	adc SCADTB_lb,y
0004F3r 3  85 rr        	sta scraddr
0004F5r 3  A5 rr        	lda scraddr+1
0004F7r 3  79 00 08     	adc SCADTB_hb,y
0004FAr 3  85 rr        	sta scraddr+1
0004FCr 3               
0004FCr 3  A5 rr        	lda prtmod		; Double line if bigtxt
0004FEr 3  F0 08        	beq noskip
000500r 3  A5 rr        	lda dispx
000502r 3  29 E0        	and #$e0
000504r 3  F0 02        	beq noskip
000506r 3  E6 rr        	inc scraddr+1
000508r 3               noskip:
000508r 3               
000508r 3  68           	pla
000509r 3  A8           	tay
00050Ar 3  60           	rts
00050Br 3               ;--------------------------------------------------------------
00050Br 3               ; Get property buffer address of char at (dispx, dispy) in hl.
00050Br 3               ;
00050Br 3               ; Output:
00050Br 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
00050Br 3               ;--------------------------------------------------------------
00050Br 3               
00050Br 3               pradd:
00050Br 3  A5 rr        	lda dispy 		; y coordinate.
00050Dr 3  85 rr        	sta bufaddr
00050Fr 3  A9 00        	lda #0
000511r 3  85 rr        	sta bufaddr+1
000513r 3  06 rr        	asl bufaddr  		; multiply char by 32
000515r 3  26 rr        	rol bufaddr+1
000517r 3  06 rr        	asl bufaddr
000519r 3  26 rr        	rol bufaddr+1
00051Br 3  06 rr        	asl bufaddr
00051Dr 3  26 rr        	rol bufaddr+1
00051Fr 3  06 rr        	asl bufaddr
000521r 3  26 rr        	rol bufaddr+1
000523r 3  06 rr        	asl bufaddr
000525r 3  26 rr        	rol bufaddr+1
000527r 3  18           	clc			; add address of MAP graphics.
000528r 3  A5 rr        	lda bufaddr
00052Ar 3  65 rr        	adc dispx
00052Cr 3  69 00        	adc #<MAP
00052Er 3  85 rr        	sta bufaddr
000530r 3  A5 rr        	lda bufaddr+1
000532r 3  69 04        	adc #>MAP
000534r 3  85 rr        	sta bufaddr+1
000536r 3  60           	rts
000537r 3               
000537r 3               ;--------------------------------------------------------------
000537r 3               ; Get attribute address at (dispx, dispy).
000537r 3               ;
000537r 3               ; Output:
000537r 3               ;  bufaddr = COLOR + dispy*22 + dispx
000537r 3               ;--------------------------------------------------------------
000537r 3               
000537r 3               gaadd:
000537r 3  A5 rr        	lda dispy
000539r 3  4A           	lsr a
00053Ar 3  A8           	tay
00053Br 3  B9 55 0A     	lda COLATTTB_hb,y
00053Er 3  85 rr        	sta bufaddr+1
000540r 3  B9 4A 0A     	lda COLATTTB_lb,y
000543r 3  18           	clc
000544r 3  65 rr        	adc dispx
000546r 3  85 rr        	sta bufaddr
000548r 3  60           	rts
000549r 3               
000549r 3               ;----------------------------------------------
000549r 3               ; Print attributes, properties and pixels.
000549r 3               ;
000549r 3               ; Input:
000549r 3               ;  A	= tile number
000549r 3               ;----------------------------------------------
000549r 3               
000549r 3               pbpattr:			; entry PUTBLOCK command
000549r 3  A4 rr        	ldy charx
00054Br 3  84 rr        	sty dispx
00054Dr 3  A4 rr        	ldy chary
00054Fr 3  84 rr        	sty dispy
000551r 3               pattr:
000551r 3               .if aflag
000551r 3               	pha
000551r 3               	jsr wbloc		; save blockinfo
000551r 3               	pla
000551r 3               .endif
000551r 3               
000551r 3               pattr2:
000551r 3  85 rr        	sta z80_b		; store cell in b register for now.
000553r 3  AA           	tax
000554r 3  BD rr rr     	lda bprop,x 		; block properties.
000557r 3  85 rr        	sta z80_c
000559r 3  C9 08        	cmp #COLECT
00055Br 3  D0 04        	bne :+
00055Dr 3  A5 rr        	lda z80_b
00055Fr 3  85 rr        	sta colpatt
000561r 3               :
000561r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000564r 3  A5 rr        	lda z80_c
000566r 3  A0 00        	ldy #0
000568r 3  91 rr        	sta (bufaddr),y 	; write property.
00056Ar 3  A5 rr        	lda z80_b 		; restore cell.
00056Cr 3  4C rr rr     	jmp panp
00056Fr 3               ; Print attributes, no properties.
00056Fr 3               
00056Fr 3               ;colpatt:	.byte 0
00056Fr 3               
00056Fr 3               panp:
00056Fr 3  85 rr        	sta z80_e		; displacement in e.
000571r 3  A9 00        	lda #0
000573r 3  85 rr        	sta z80_d		; no high byte.
000575r 3  06 rr        	asl z80_e  		; multiply char by 8.
000577r 3  26 rr        	rol z80_d
000579r 3  06 rr        	asl z80_e
00057Br 3  26 rr        	rol z80_d
00057Dr 3  06 rr        	asl z80_e
00057Fr 3  26 rr        	rol z80_d
000581r 3  18           	clc
000582r 3  A5 rr        	lda z80_e
000584r 3  69 rr        	adc #<chgfx 		; address of graphics.
000586r 3  85 rr        	sta tileaddr
000588r 3  A5 rr        	lda z80_d
00058Ar 3  69 rr        	adc #>chgfx
00058Cr 3  85 rr        	sta tileaddr+1
00058Er 3               
00058Er 3  A6 rr        	ldx z80_b		; set colour attribute
000590r 3  BD rr rr     	lda bCol,x
000593r 3  48           	pha
000594r 3  20 rr rr     	jsr gaadd
000597r 3  A0 00        	ldy #0
000599r 3  68           	pla
00059Ar 3  91 rr        	sta (bufaddr),y
00059Cr 3               
00059Cr 3  20 rr rr     	jsr gprad 		; get screen address.
00059Fr 3  A2 07        	ldx #7			; number of pixel rows to write.
0005A1r 3               panp0:
0005A1r 3  A0 00        	ldy #0
0005A3r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
0005A5r 3               .if iflag
0005A5r 3               	eor #$ff		; Invert
0005A5r 3               .endif
0005A5r 3  BC rr rr     	ldy scrtab,x
0005A8r 3  91 rr        	sta (scraddr),y 	; copy to screen.
0005AAr 3  E6 rr        	inc tileaddr 		; next image byte.
0005ACr 3  D0 02        	bne :+
0005AEr 3  E6 rr        	inc tileaddr+1
0005B0r 3               :
0005B0r 3  CA           	dex	 		; repeat for 8 pixel rows.
0005B1r 3  10 EE        	bpl panp0
0005B3r 3  E6 rr        	inc dispx 		; move along one.
0005B5r 3  E6 rr        	inc charx
0005B7r 3  60           	rts
0005B8r 3               
0005B8r 3               ;----------------------------------------------
0005B8r 3               ; Write block
0005B8r 3               ;----------------------------------------------
0005B8r 3               
0005B8r 3               .if aflag
0005B8r 3               wbloc:
0005B8r 3               	ldy #3
0005B8r 3               	sta (pbptr),y		; store block number
0005B8r 3               	dey
0005B8r 3               	lda dispx
0005B8r 3               	sta (pbptr),y		; write x position of block.
0005B8r 3               	dey
0005B8r 3               	lda dispy
0005B8r 3               	sta (pbptr),y		; write y position of block.
0005B8r 3               	dey
0005B8r 3               	lda scno
0005B8r 3               	sta (pbptr),y		; write screen.
0005B8r 3               	clc			; point to next free location
0005B8r 3               	lda pbptr
0005B8r 3               	adc #4
0005B8r 3               	sta pbptr
0005B8r 3               	bcc :+
0005B8r 3               	inc pbptr+1
0005B8r 3               :
0005B8r 3               	rts
0005B8r 3               .endif
0005B8r 3               
0005B8r 3               ;.if kflag
0005B8r 3               ;panp:
0005B8r 3               ;.endif
0005B8r 3               
0005B8r 3               ;----------------------------------------------
0005B8r 3               ; Print character pixels, no more.
0005B8r 3               ;
0005B8r 3               ; Input:
0005B8r 3               ;  A	= character to print
0005B8r 3               ;----------------------------------------------
0005B8r 3               
0005B8r 3               pchr:
0005B8r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
0005BBr 3  E6 rr        	inc dispx		; move along one.
0005BDr 3  60           	rts
0005BEr 3               
0005BEr 3               ;----------------------------------------------------
0005BEr 3               ; Shifter sprite routine for objects.
0005BEr 3               ;----------------------------------------------------
0005BEr 3               
0005BEr 3               .if oflag
0005BEr 3               sprit7:
0005BEr 3               	lda z80_b
0005BEr 3               	beq sprit0
0005BEr 3               	sta z80_a
0005BEr 3               sprit3:
0005BEr 3               	lsr spr			; shift into position.
0005BEr 3               	ror spr+1
0005BEr 3               	ror spr+2
0005BEr 3               	dec z80_a		; one less iteration.
0005BEr 3               	bne sprit3
0005BEr 3               sprit0:
0005BEr 3               	rts 			; now apply to screen.
0005BEr 3               .endif
0005BEr 3               
0005BEr 3               ;-----------------------------------------------------------
0005BEr 3               ; Get room address.
0005BEr 3               ;-----------------------------------------------------------
0005BEr 3               
0005BEr 3               groom:
0005BEr 3  A6 rr        	ldx scno 		; screen number.
0005C0r 3  A0 00        	ldy #0
0005C2r 3               groomx:
0005C2r 3  A9 rr        	lda #<scdat 		; pointer to screens.
0005C4r 3  85 rr        	sta z80_l
0005C6r 3  A9 rr        	lda #>scdat
0005C8r 3  85 rr        	sta z80_h
0005CAr 3               groom1:
0005CAr 3  E0 00        	cpx #0			; is it the first one?
0005CCr 3  F0 15        	beq groom0 		; no more screens to skip.
0005CEr 3               
0005CEr 3  18           	clc
0005CFr 3  A5 rr        	lda z80_l
0005D1r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
0005D4r 3  85 rr        	sta z80_l
0005D6r 3  C8           	iny			; point to high byte.
0005D7r 3  A5 rr        	lda z80_h
0005D9r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
0005DCr 3  85 rr        	sta z80_h
0005DEr 3  C8           	iny			; next address.
0005DFr 3               
0005DFr 3  CA           	dex 			; one less iteration.
0005E0r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
0005E3r 3               groom0:
0005E3r 3  AD rr rr     	lda numsc		; add displacement.
0005E6r 3  0A           	asl a
0005E7r 3  18           	clc			; add double displacement to address.
0005E8r 3  65 rr        	adc z80_l
0005EAr 3  85 rr        	sta z80_l
0005ECr 3  A5 rr        	lda z80_h
0005EEr 3  69 00        	adc #0
0005F0r 3  85 rr        	sta z80_h
0005F2r 3  60           	rts
0005F3r 3               
0005F3r 3               ;-----------------------------------------------------------
0005F3r 3               ; Draw present room.
0005F3r 3               ;-----------------------------------------------------------
0005F3r 3               
0005F3r 3               droom:
0005F3r 3  AD rr rr     	lda wintop 		; window top.
0005F6r 3  85 rr        	sta dispy		; set cursor y position.
0005F8r 3               droom2:
0005F8r 3  20 rr rr     	jsr groom 		; get address of current room.
0005FBr 3  A9 00        	lda #0	 		; zero in accumulator.
0005FDr 3  85 rr        	sta comcnt 		; reset compression counter.
0005FFr 3  AD rr rr     	lda winhgt 		; height of window.
000602r 3  85 rr        	sta rrow		; set row counter
000604r 3               droom0:
000604r 3  AD rr rr     	lda winlft 		; window left edge.
000607r 3  85 rr        	sta dispx 		; set cursor x position.
000609r 3  AD rr rr     	lda winwid 		; width of window.
00060Cr 3  85 rr        	sta rcol		; set column counter
00060Er 3               droom1:
00060Er 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000611r 3               .if xflag
000611r 3               	jsr drwmeta
000611r 3               .else
000611r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000614r 3               .endif
000614r 3  C6 rr        	dec rcol		; one less column.
000616r 3  D0 F6        	bne droom1 		; repeat for entire line.
000618r 3  E6 rr        	inc dispy		; move down one line.
00061Ar 3               .if xflag
00061Ar 3               	inc dispy		; move down one line.
00061Ar 3               .endif
00061Ar 3  C6 rr        	dec rrow 		; one less row.
00061Cr 3  D0 E6        	bne droom0 		; repeat for all rows.
00061Er 3  60           	rts
00061Fr 3               
00061Fr 3               ;----------------------------------------------
00061Fr 3               ; Decompress bytes on-the-fly.
00061Fr 3               ;----------------------------------------------
00061Fr 3               
00061Fr 3               flbyt:
00061Fr 3  A5 rr        	lda comcnt 		; compression counter.
000621r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000623r 3               
000623r 3  A0 00        	ldy #0
000625r 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000627r 3  E6 rr        	inc z80_l 		; point to next cell.
000629r 3  D0 02        	bne :+
00062Br 3  E6 rr        	inc z80_h
00062Dr 3               :
00062Dr 3  C9 FF        	cmp #255 		; is this byte a control code?
00062Fr 3  F0 01        	beq :+
000631r 3  60           	rts 			; no, this byte is uncompressed.
000632r 3               :
000632r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000634r 3  85 rr        	sta combyt 		; set up the type.
000636r 3  E6 rr        	inc z80_l 		; point to quantity.
000638r 3  D0 02        	bne :+
00063Ar 3  E6 rr        	inc z80_h
00063Cr 3               :
00063Cr 3  B1 rr        	lda (z80_hl),y 		; get quantity.
00063Er 3  E6 rr        	inc z80_l 		; point to next byte.
000640r 3  D0 02        	bne :+
000642r 3  E6 rr        	inc z80_h
000644r 3               :
000644r 3               flbyt1:
000644r 3  85 rr        	sta comcnt 		; store new quantity.
000646r 3  C6 rr        	dec comcnt		; one less.
000648r 3  A5 rr        	lda combyt 		; byte to expand.
00064Ar 3  60           	rts
00064Br 3               
00064Br 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00064Br 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
00064Br 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
00064Br 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00064Br 3               .if xflag
00064Br 3               drwmeta:
00064Br 3               	sta tmpblk
00064Br 3               	jsr pattr2
00064Br 3               
00064Br 3               	inc dispy
00064Br 3               	dec dispx
00064Br 3               	ldx tmpblk
00064Br 3               	beq :+
00064Br 3               	inx
00064Br 3               :
00064Br 3               	txa
00064Br 3               	jsr pattr2
00064Br 3               
00064Br 3               	ldx tmpblk
00064Br 3               	beq :+
00064Br 3               	inx
00064Br 3               	inx
00064Br 3               	inx
00064Br 3               :
00064Br 3               	txa
00064Br 3               	jsr pattr2
00064Br 3               
00064Br 3               	dec dispy
00064Br 3               	dec dispx
00064Br 3               	ldx tmpblk
00064Br 3               	beq :+
00064Br 3               	inx
00064Br 3               	inx
00064Br 3               :
00064Br 3               	txa
00064Br 3               	jsr pattr2
00064Br 3               	rts
00064Br 3               
00064Br 3               tmpblk:	.byte 0
00064Br 3               
00064Br 3               .endif
00064Br 3               
00064Br 3               ;------------------------------------------
00064Br 3               ; Ladder down check.
00064Br 3               ;
00064Br 3               ; Input:
00064Br 3               ;  IX = sprite pointer
00064Br 3               ;------------------------------------------
00064Br 3               
00064Br 3               .if lflag
00064Br 3               laddd:
00064Br 3  A0 09        	ldy #9
00064Dr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00064Fr 3  85 rr        	sta dispx
000651r 3               
000651r 3  A0 08        	ldy #8
000653r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000655r 3  29 FE        	and #254		; make it even.
000657r 3  91 rr        	sta (z80_ix),y 		; reset it.
000659r 3  18           	clc 			; look down 16 pixels.
00065Ar 3               numsp5:
00065Ar 3  69 10        	adc #SPR_HGT
00065Cr 3  85 rr        	sta dispy		; coords in dispx,dispy.
00065Er 3  4C rr rr     	jmp laddv
000661r 3               
000661r 3               ;------------------------------------------
000661r 3               ; Ladder up check.
000661r 3               ;
000661r 3               ; Input:
000661r 3               ;  IX = sprite pointer
000661r 3               ;
000661r 3               ; Output:
000661r 3               ;  A  = 0 is ok, A <>0 is not ok
000661r 3               ;------------------------------------------
000661r 3               
000661r 3               laddu:
000661r 3  A0 09        	ldy #9
000663r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000665r 3  85 rr        	sta dispx
000667r 3               
000667r 3  A0 08        	ldy #8
000669r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00066Br 3  29 FE        	and #254 		; make it even.
00066Dr 3  91 rr        	sta (z80_ix),y		; reset it.
00066Fr 3  18           	clc 			; look 2 pixels above feet.
000670r 3               numsp6:
000670r 3  69 0E        	adc #SPR_HGT-2
000672r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000674r 3               laddv:
000674r 3  20 rr rr     	jsr tstbl 		; get map address.
000677r 3  20 rr rr     	jsr ldchk 		; standard ladder check.
00067Ar 3  F0 01        	beq :+
00067Cr 3  60           	rts 			; no way through.
00067Dr 3               :
00067Dr 3  E6 rr        	inc bufaddr 		; look right one cell.
00067Fr 3  D0 02        	bne :+
000681r 3  E6 rr        	inc bufaddr+1
000683r 3               :
000683r 3  20 rr rr     	jsr ldchk 		; do the check.
000686r 3  F0 01        	beq :+
000688r 3  60           	rts 			; impassable.
000689r 3               :
000689r 3  A5 rr        	lda dispx 		; y coordinate.
00068Br 3  29 07        	and #7 			; position straddling block cells.
00068Dr 3  D0 01        	bne :+
00068Fr 3  60           	rts 			; no more checks needed.
000690r 3               :
000690r 3  E6 rr        	inc bufaddr 		; look to third cell.
000692r 3  D0 02        	bne :+
000694r 3  E6 rr        	inc bufaddr+1
000696r 3               :
000696r 3  20 rr rr     	jsr ldchk 		; do the check.
000699r 3  60           	rts  			; return with zero flag set accordingly.
00069Ar 3               .endif
00069Ar 3               
00069Ar 3               ;---------------------------------------------------------
00069Ar 3               ; Can go up check.
00069Ar 3               ;
00069Ar 3               ; Input:
00069Ar 3               ;  IX = sprite pointer
00069Ar 3               ;
00069Ar 3               ; Output:
00069Ar 3               ;  A  = 0 is ok, A <>0 is not ok
00069Ar 3               ;---------------------------------------------------------
00069Ar 3               
00069Ar 3               cangu:
00069Ar 3  A0 09        	ldy #9
00069Cr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00069Er 3  85 rr        	sta dispx
0006A0r 3  A0 08        	ldy #8
0006A2r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0006A4r 3  38           	sec
0006A5r 3  E9 02        	sbc #2
0006A7r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0006A9r 3  20 rr rr     	jsr tstbl 		; get map address.
0006ACr 3  20 rr rr     	jsr lrchk 		; standard left/right check.
0006AFr 3  F0 01        	beq :+
0006B1r 3  60           	rts			; no way through.
0006B2r 3               :
0006B2r 3  E6 rr        	inc bufaddr		; look right one cell.
0006B4r 3  D0 02        	bne :+
0006B6r 3  E6 rr        	inc bufaddr+1
0006B8r 3               :
0006B8r 3  20 rr rr     	jsr lrchk 		; do the check.
0006BBr 3  F0 01        	beq :+
0006BDr 3  60           	rts			; impassable.
0006BEr 3               :
0006BEr 3  A5 rr        	lda dispx		; x coordinate.
0006C0r 3  29 07        	and #7			; position straddling block cells.
0006C2r 3  D0 01        	bne :+
0006C4r 3  60           	rts			; no more checks needed.
0006C5r 3               :
0006C5r 3  E6 rr        	inc bufaddr		; look to third cell.
0006C7r 3  D0 02        	bne :+
0006C9r 3  E6 rr        	inc bufaddr+1
0006CBr 3               :
0006CBr 3  20 rr rr     	jsr lrchk		; do the check.
0006CEr 3  60           	rts 			; return with zero flag set accordingly.
0006CFr 3               
0006CFr 3               ;---------------------------------------------------------
0006CFr 3               ; Can go down check.
0006CFr 3               ;
0006CFr 3               ; Input:
0006CFr 3               ;  IX = sprite pointer
0006CFr 3               ;
0006CFr 3               ; Output:
0006CFr 3               ;  A  = 0 is ok, A <>0 is not ok
0006CFr 3               ;---------------------------------------------------------
0006CFr 3               
0006CFr 3               cangd:
0006CFr 3  A0 09        	ldy #9
0006D1r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0006D3r 3  85 rr        	sta dispx
0006D5r 3  A0 08        	ldy #8
0006D7r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
0006D9r 3  18           	clc
0006DAr 3               numsp3:
0006DAr 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0006DCr 3  85 rr        	sta dispy		; coords in dispx,dispy.
0006DEr 3  20 rr rr     	jsr tstbl 		; get map address.
0006E1r 3  20 rr rr     	jsr plchk 		; block, platform check.
0006E4r 3  F0 01        	beq :+
0006E6r 3  60           	rts			; no way through.
0006E7r 3               :
0006E7r 3  E6 rr        	inc bufaddr		; look right one cell.
0006E9r 3  D0 02        	bne :+
0006EBr 3  E6 rr        	inc bufaddr+1
0006EDr 3               :
0006EDr 3  20 rr rr     	jsr plchk		; block, platform check.
0006F0r 3  F0 01        	beq :+
0006F2r 3  60           	rts			; impassable.
0006F3r 3               :
0006F3r 3  A5 rr        	lda dispx		; x coordinate.
0006F5r 3  29 07        	and #7			; position straddling block cells.
0006F7r 3  D0 01        	bne :+
0006F9r 3  60           	rts			; no more checks needed.
0006FAr 3               :
0006FAr 3  E6 rr        	inc bufaddr		; look to third cell.
0006FCr 3  D0 02        	bne :+
0006FEr 3  E6 rr        	inc bufaddr+1
000700r 3               :
000700r 3  20 rr rr     	jsr plchk		; block, platform check.
000703r 3  60           	rts			; return with zero flag set accordingly.
000704r 3               
000704r 3               ;---------------------------------------------------------
000704r 3               ; Can go left check.
000704r 3               ;
000704r 3               ; Input:
000704r 3               ;  IX = sprite pointer
000704r 3               ;
000704r 3               ; Output:
000704r 3               ;  A  = 0 is ok, A <>0 is not ok
000704r 3               ;---------------------------------------------------------
000704r 3               
000704r 3               cangl:
000704r 3  A0 08        	ldy #8
000706r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000708r 3  85 rr        	sta dispy
00070Ar 3  A0 09        	ldy #9
00070Cr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00070Er 3  38           	sec
00070Fr 3  E9 02        	sbc #2			; look left 2 pixels.
000711r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000713r 3  4C rr rr     	jmp cangh		; test if we can go there.
000716r 3               
000716r 3               ;---------------------------------------------------------
000716r 3               ; Can go right check.
000716r 3               ;
000716r 3               ; Input:
000716r 3               ;  IX = sprite pointer
000716r 3               ;
000716r 3               ; Output:
000716r 3               ;  A  = 0 is ok, A <>0 is not ok
000716r 3               ;---------------------------------------------------------
000716r 3               
000716r 3               cangr:
000716r 3  A0 08        	ldy #8
000718r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00071Ar 3  85 rr        	sta dispy
00071Cr 3  A0 09        	ldy #9
00071Er 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000720r 3  18           	clc
000721r 3  69 10        	adc #16			; look right 16 pixels.
000723r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000725r 3               cangh:
000725r 3               cangh2:
000725r 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000727r 3  85 rr        	sta z80_b
000729r 3  A5 rr        	lda dispy		; y position.
00072Br 3  29 07        	and #7			; does x straddle cells?
00072Dr 3  D0 02        	bne cangh0		; yes, loop counter is good.
00072Fr 3  C6 rr        	dec z80_b		; one less row to write.
000731r 3               cangh0:
000731r 3  20 rr rr     	jsr tstbl		; get map address.
000734r 3               cangh1:
000734r 3  20 rr rr     	jsr lrchk		; standard left/right check.
000737r 3  F0 01        	beq :+
000739r 3  60           	rts			; no way through.
00073Ar 3               :
00073Ar 3  48           	pha
00073Br 3  18           	clc
00073Cr 3  A5 rr        	lda bufaddr
00073Er 3  69 20        	adc #32		; look down.
000740r 3  85 rr        	sta bufaddr
000742r 3  90 02        	bcc :+
000744r 3  E6 rr        	inc bufaddr+1
000746r 3               :
000746r 3  68           	pla
000747r 3               
000747r 3  C6 rr        	dec z80_b
000749r 3  D0 E9        	bne cangh1
00074Br 3  60           	rts
00074Cr 3               
00074Cr 3               ;-------------------------------------
00074Cr 3               ; Check left/right movement is okay.
00074Cr 3               ;
00074Cr 3               ; Input:
00074Cr 3               ;  bufaddr = MAP + x/8 + y/8*32
00074Cr 3               ;
00074Cr 3               ; Output:
00074Cr 3               ;  A  = 0 is ok, A <>0 is not ok
00074Cr 3               ;-------------------------------------
00074Cr 3               
00074Cr 3               lrchk:
00074Cr 3  A0 00        	ldy #0
00074Er 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000750r 3  C9 02        	cmp #WALL 		; is it passable?
000752r 3  F0 0A        	beq lrchkx		; no.
000754r 3               
000754r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000756r 3  F0 06        	beq lrchkx		; not passable.
000758r 3  A9 00        	lda #0
00075Ar 3  60           	rts
00075Br 3               
00075Br 3               ;--------------------------------------------------------------
00075Br 3               ; Called by mmenu
00075Br 3               ;--------------------------------------------------------------
00075Br 3               
00075Br 3               always:
00075Br 3  A9 FF        	lda #255		; report it as okay.
00075Dr 3  60           	rts
00075Er 3               
00075Er 3               lrchkx:
00075Er 3  A9 01        	lda #1 			; reset all bits.
000760r 3  60           	rts
000761r 3               
000761r 3               
000761r 3               ;--------------------------------------------------------------
000761r 3               ; Check platform or solid item is not in way.
000761r 3               ;
000761r 3               ; Input:
000761r 3               ;  bufaddr = MAP + x/8 + y/8*32
000761r 3               ;
000761r 3               ; Output:
000761r 3               ;  A  = 0 is ok, A <>0 is not ok
000761r 3               ;--------------------------------------------------------------
000761r 3               
000761r 3               plchk:
000761r 3  A0 00        	ldy #0
000763r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000765r 3  C9 02        	cmp #WALL 		; is it passable?
000767r 3  F0 F5        	beq lrchkx		; no.
000769r 3               .if pflag .or dflag
000769r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
00076Br 3  F0 F1        	beq lrchkx		; not passable.
00076Dr 3               .endif
00076Dr 3  C9 01        	cmp #PLATFM		; platform is solid.
00076Fr 3  F0 07        	beq plchkx		; not passable.
000771r 3               .if lflag
000771r 3  C9 03        	cmp #LADDER		; is it a ladder?
000773r 3  F0 E9        	beq lrchkx		; on ladder, deny movement.
000775r 3               .endif
000775r 3               plchk0:
000775r 3  A9 00        	lda #0			; report as ok
000777r 3  60           	rts
000778r 3               plchkx:
000778r 3  A5 rr        	lda dispy		; x coordinate.
00077Ar 3  29 07        	and #7			; position straddling blocks.
00077Cr 3  F0 E0        	beq lrchkx		; on platform, deny movement.
00077Er 3  4C rr rr     	jmp plchk0
000781r 3               
000781r 3               ;--------------------------------------------------------------
000781r 3               ; Check ladder is available.
000781r 3               ;
000781r 3               ; Input:
000781r 3               ;  bufaddr = MAP + x/8 + y/8*32
000781r 3               ;
000781r 3               ; Output:
000781r 3               ;  A  = 0 is ok, A <>0 is not ok
000781r 3               ;--------------------------------------------------------------
000781r 3               
000781r 3               .if lflag
000781r 3               ldchk:
000781r 3  A0 00        	ldy #0
000783r 3  B1 rr        	lda (bufaddr),y 	; fetch cell.
000785r 3  C9 03        	cmp #LADDER 		; is it a ladder?
000787r 3  F0 03        	beq ldchk1
000789r 3  A9 01        	lda #1
00078Br 3  60           	rts  			; return with zero flag set accordingly.
00078Cr 3               ldchk1:
00078Cr 3  A9 00        	lda #0
00078Er 3  60           	rts
00078Fr 3               .endif
00078Fr 3               
00078Fr 3               ;--------------------------------------------------------------
00078Fr 3               ; Get collectables.
00078Fr 3               ;--------------------------------------------------------------
00078Fr 3               
00078Fr 3               .if cflag
00078Fr 3               getcol:
00078Fr 3                       lda #COLECT             ; collectable blocks.
00078Fr 3                       sta z80_b
00078Fr 3                       jsr tded                ; test for collectable blocks.
00078Fr 3                       cmp z80_b               ; did we find one?
00078Fr 3                       beq :+
00078Fr 3                       rts                     ; none were found, job done.
00078Fr 3               :
00078Fr 3                       jsr gtblk               ; get block.
00078Fr 3                       jsr evnt20              ; collected block event.
00078Fr 3                       jmp getcol              ; repeat until none left.
00078Fr 3               
00078Fr 3               ; Get collectable block.
00078Fr 3               
00078Fr 3               gtblk:
00078Fr 3               	ldy #0
00078Fr 3               	lda (bufaddr),y
00078Fr 3               	sta z80_a
00078Fr 3                       lda #0
00078Fr 3                       sta (bufaddr),y		; make it empty now.
00078Fr 3               
00078Fr 3               	lda bufaddr		; set dispx
00078Fr 3               	and #31
00078Fr 3               	sta dispx
00078Fr 3               
00078Fr 3               	lda bufaddr+1		; Set dispy
00078Fr 3               	sec
00078Fr 3               	sbc #>MAP
00078Fr 3               	sta bufaddr+1
00078Fr 3               	asl bufaddr
00078Fr 3               	rol bufaddr+1
00078Fr 3               	asl bufaddr
00078Fr 3               	rol bufaddr+1
00078Fr 3               	asl bufaddr
00078Fr 3               	rol bufaddr+1
00078Fr 3               	lda bufaddr+1
00078Fr 3               	sta dispy
00078Fr 3               
00078Fr 3               	lda colpatt		; get blocknr
00078Fr 3               	sta z80_e		; displacement in e.
00078Fr 3               	lda #0
00078Fr 3               	sta z80_d		; no high byte.
00078Fr 3               	asl z80_e  		; multiply char by 8.
00078Fr 3               	rol z80_d
00078Fr 3               	asl z80_e
00078Fr 3               	rol z80_d
00078Fr 3               	asl z80_e
00078Fr 3               	rol z80_d
00078Fr 3               	clc
00078Fr 3               	lda z80_e
00078Fr 3               	adc #<chgfx 		; address of graphics.
00078Fr 3               	sta tileaddr
00078Fr 3               	lda z80_d
00078Fr 3               	adc #>chgfx
00078Fr 3               	sta tileaddr+1
00078Fr 3               
00078Fr 3               	jsr gprad 		; get screen address.
00078Fr 3               	ldx #7			; number of pixel rows to write.
00078Fr 3               gtblk0:
00078Fr 3               	ldy #0
00078Fr 3               	lda (tileaddr),y 	; get image byte.
00078Fr 3               	ldy scrtab,x
00078Fr 3               	eor (scraddr),y 	; XOR tile on screen
00078Fr 3               	sta (scraddr),y 	; copy to screen.
00078Fr 3               	inc tileaddr 		; next image byte.
00078Fr 3               	bne :+
00078Fr 3               	inc tileaddr+1
00078Fr 3               :
00078Fr 3               	dex	 		; repeat for 8 pixel rows.
00078Fr 3               	bpl gtblk0
00078Fr 3               	rts
00078Fr 3               .endif
00078Fr 3               
00078Fr 3               ;--------------------------------------------------------------
00078Fr 3               ; Touched deadly block check.
00078Fr 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
00078Fr 3               ;
00078Fr 3               ; Input:
00078Fr 3               ;  IX = sprite address
00078Fr 3               ;
00078Fr 3               ; Output:
00078Fr 3               ;  A  = 0 is ok, A=5 is not ok
00078Fr 3               ;--------------------------------------------------------------
00078Fr 3               
00078Fr 3               tded:
00078Fr 3  A0 08        	ldy #8
000791r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000793r 3  85 rr        	sta dispy
000795r 3  C8           	iny
000796r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000798r 3  85 rr        	sta dispx		; coords in dispx,dispy.
00079Ar 3  20 rr rr     	jsr tstbl		; get map address.
00079Dr 3  48           	pha
00079Er 3  A9 1F        	lda #31			; default distance to next line down.
0007A0r 3  85 rr        	sta z80_e
0007A2r 3  68           	pla
0007A3r 3  C5 rr        	cmp z80_b		; is this the required block?
0007A5r 3  D0 01        	bne :+
0007A7r 3  60           	rts			; yes.
0007A8r 3               :
0007A8r 3  E6 rr        	inc bufaddr 		; next cell.
0007AAr 3  D0 02        	bne :+
0007ACr 3  E6 rr        	inc bufaddr+1
0007AEr 3               :
0007AEr 3  A0 00        	ldy #0
0007B0r 3  B1 rr        	lda (bufaddr),y		; fetch type.
0007B2r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
0007B4r 3  D0 01        	bne :+
0007B6r 3  60           	rts			; yes.
0007B7r 3               :
0007B7r 3  A5 rr        	lda dispx		; horizontal position.
0007B9r 3  85 rr        	sta z80_c 		; store column in c register.
0007BBr 3  29 07        	and #7			; is it straddling cells?
0007BDr 3  D0 03        	bne :+
0007BFr 3  4C rr rr     	jmp tded0		; no.
0007C2r 3               :
0007C2r 3  E6 rr        	inc bufaddr 		; last cell.
0007C4r 3  D0 02        	bne :+
0007C6r 3  E6 rr        	inc bufaddr+1
0007C8r 3               :
0007C8r 3  A0 00        	ldy #0
0007CAr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0007CCr 3  C5 rr        	cmp z80_b		; is this the block?
0007CEr 3  D0 01        	bne :+
0007D0r 3  60           	rts			; yes.
0007D1r 3               :
0007D1r 3  C6 rr        	dec z80_e		; one less cell to next row down.
0007D3r 3               tded0:
0007D3r 3  18           	clc 			; point to next row.
0007D4r 3  A5 rr        	lda bufaddr
0007D6r 3  65 rr        	adc z80_e
0007D8r 3  85 rr        	sta bufaddr
0007DAr 3  90 02        	bcc :+
0007DCr 3  E6 rr        	inc bufaddr+1
0007DEr 3               :
0007DEr 3  A0 00        	ldy #0
0007E0r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
0007E2r 3  C5 rr        	cmp z80_b		; is this fatal?
0007E4r 3  D0 01        	bne :+
0007E6r 3  60           	rts			; yes.
0007E7r 3               :
0007E7r 3  E6 rr        	inc bufaddr 		; next cell.
0007E9r 3  D0 02        	bne :+
0007EBr 3  E6 rr        	inc bufaddr+1
0007EDr 3               :
0007EDr 3  A0 00        	ldy #0
0007EFr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0007F1r 3  C5 rr        	cmp z80_b		; is this fatal?
0007F3r 3  D0 01        	bne :+
0007F5r 3  60           	rts			; yes.
0007F6r 3               :
0007F6r 3  A5 rr        	lda z80_c		; horizontal position.
0007F8r 3  29 07        	and #7			; is it straddling cells?
0007FAr 3  D0 03        	bne :+
0007FCr 3  4C rr rr     	jmp tded1 		; no.
0007FFr 3               :
0007FFr 3  E6 rr        	inc bufaddr		; last cell.
000801r 3  D0 02        	bne :+
000803r 3  E6 rr        	inc bufaddr+1
000805r 3               :
000805r 3  A0 00        	ldy #0
000807r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000809r 3  C5 rr        	cmp z80_b		; is this fatal?
00080Br 3  D0 01        	bne :+
00080Dr 3  60           	rts			; yes.
00080Er 3               :
00080Er 3               tded1:
00080Er 3  A5 rr        	lda dispy		; vertical position.
000810r 3  29 07        	and #7 			; is it straddling cells?
000812r 3  D0 01        	bne :+
000814r 3  60           	rts			; no, job done.
000815r 3               :
000815r 3  18           	clc			; point to next row.
000816r 3  A5 rr        	lda bufaddr
000818r 3  65 rr        	adc z80_e
00081Ar 3  85 rr        	sta bufaddr
00081Cr 3  90 02        	bcc :+
00081Er 3  E6 rr        	inc bufaddr+1
000820r 3               :
000820r 3  A0 00        	ldy #0
000822r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000824r 3  C5 rr        	cmp z80_b		; is this fatal?
000826r 3  D0 01        	bne :+
000828r 3  60           	rts			; yes.
000829r 3               :
000829r 3  E6 rr        	inc bufaddr		; next cell.
00082Br 3  D0 02        	bne :+
00082Dr 3  E6 rr        	inc bufaddr+1
00082Fr 3               :
00082Fr 3  A0 00        	ldy #0
000831r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000833r 3  C5 rr        	cmp z80_b		; is this fatal?
000835r 3  D0 01        	bne :+
000837r 3  60           	rts			; yes.
000838r 3               :
000838r 3  A5 rr        	lda z80_c		; horizontal position.
00083Ar 3  29 07        	and #7			; is it straddling cells?
00083Cr 3  D0 01        	bne :+
00083Er 3  60           	rts			; no.
00083Fr 3               :
00083Fr 3  E6 rr        	inc bufaddr		; last cell.
000841r 3  D0 02        	bne :+
000843r 3  E6 rr        	inc bufaddr+1
000845r 3               :
000845r 3  A0 00        	ldy #0
000847r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000849r 3  60           	rts 			; return with final type in accumulator.
00084Ar 3               
00084Ar 3               ;---------------------------------------------------
00084Ar 3               ; Fetch block type at (dispx, dispy).
00084Ar 3               ;
00084Ar 3               ; Output:
00084Ar 3               ;  A = block type
00084Ar 3               ;---------------------------------------------------
00084Ar 3               
00084Ar 3               tstbl:
00084Ar 3  A5 rr        	lda dispy 		; fetch y coord.
00084Cr 3  4A           	lsr a			; bufaddr = y/8
00084Dr 3  4A           	lsr a
00084Er 3  4A           	lsr a
00084Fr 3               ;	sta chary
00084Fr 3               
00084Fr 3  85 rr        	sta bufaddr
000851r 3  A9 00        	lda #0
000853r 3  85 rr        	sta bufaddr+1
000855r 3               
000855r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000857r 3  26 rr        	rol bufaddr+1
000859r 3  06 rr        	asl bufaddr
00085Br 3  26 rr        	rol bufaddr+1
00085Dr 3  06 rr        	asl bufaddr
00085Fr 3  26 rr        	rol bufaddr+1
000861r 3  06 rr        	asl bufaddr
000863r 3  26 rr        	rol bufaddr+1
000865r 3  06 rr        	asl bufaddr
000867r 3  26 rr        	rol bufaddr+1
000869r 3               
000869r 3  A5 rr        	lda dispx		; x/8
00086Br 3  4A           	lsr a
00086Cr 3  4A           	lsr a
00086Dr 3  4A           	lsr a
00086Er 3               ;	sta charx
00086Er 3               
00086Er 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00086Fr 3  65 rr        	adc bufaddr
000871r 3  69 00        	adc #<MAP
000873r 3  85 rr        	sta bufaddr
000875r 3  A5 rr        	lda bufaddr+1
000877r 3  69 04        	adc #>MAP
000879r 3  85 rr        	sta bufaddr+1
00087Br 3               
00087Br 3  A0 00        	ldy #0
00087Dr 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00087Fr 3  60           	rts
000880r 3               
000880r 3               ;-------------------------------------------------------------------
000880r 3               ; Jump - if we can.
000880r 3               ; Requires initial speed to be set up in accumulator prior to call.
000880r 3               ;
000880r 3               ; Input:
000880r 3               ;  IX = sprite address
000880r 3               ;-------------------------------------------------------------------
000880r 3               
000880r 3               jump:
000880r 3  A0 0D        	ldy #var_jumpLo
000882r 3  B1 rr        	lda (z80_ix),y		; jump table low.
000884r 3  A0 0E        	ldy #var_jumpHi
000886r 3  11 rr        	ora (z80_ix),y		; jump table high.
000888r 3  F0 01        	beq :+
00088Ar 3  60           	rts			; already in the air.
00088Br 3               :
00088Br 3  A9 rr        	lda #>jtab
00088Dr 3  A0 0E        	ldy #var_jumpHi
00088Fr 3  91 rr        	sta (z80_ix),y		; set jump high.
000891r 3  A9 rr        	lda #<jtab		; jump table start.
000893r 3  A0 0D        	ldy #var_jumpLo
000895r 3  91 rr        	sta (z80_ix),y		; set jump low.
000897r 3  60           	rts
000898r 3               
000898r 3               ; Jump table.
000898r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
000898r 3               ;.align 32
000898r 3               ;jtab:
000898r 3               ;	.byte 248,250,252
000898r 3               ;	.byte 254,254,255
000898r 3               ;	.byte 255,255,0,0
000898r 3               ;	.byte 0,1,1,1,2,2
000898r 3               ;	.byte 4,6,8,8,8,99
000898r 3               
000898r 3               ;------------------------------------------------
000898r 3               ; Random numbers code.
000898r 3               ; Pseudo-random number generator, 8-bit.
000898r 3               ;
000898r 3               ; Output:
000898r 3               ;  RND = random number
000898r 3               ;------------------------------------------------
000898r 3               
000898r 3               random:
000898r 3  A5 rr        	lda seed
00089Ar 3  F0 05        	beq doEor
00089Cr 3  0A           	asl a
00089Dr 3  F0 04        	beq noEor
00089Fr 3  90 02        	bcc noEor
0008A1r 3  49 1D        doEor:	eor #$1d
0008A3r 3  85 rr        noEor:	sta seed
0008A5r 3  60           	rts
0008A6r 3               
0008A6r 3               ;	lda seed		; get last random number.
0008A6r 3               ;	asl a
0008A6r 3               ;	asl a
0008A6r 3               ;	clc
0008A6r 3               ;	adc seed
0008A6r 3               ;	clc
0008A6r 3               ;	adc #$45
0008A6r 3               ;	sta seed		; store new seed.
0008A6r 3               ;	sta varrnd		; return number in variable.
0008A6r 3               ;	rts
0008A6r 3               
0008A6r 3               ;-------------------------------------------------------
0008A6r 3               ; Joystick and keyboard reading routines.
0008A6r 3               ;
0008A6r 3               ; contrl = 0, Keyboard
0008A6r 3               ;          1, JoyKeyb
0008A6r 3               ;          2, JoyMMC
0008A6r 3               ;
0008A6r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
0008A6r 3               ;             ||||||||
0008A6r 3               ;             |||||||+> Right    KEY 0  - X
0008A6r 3               ;             ||||||+-> Left     KEY 1  - Z
0008A6r 3               ;             |||||+--> Down     KEY 2  - .
0008A6r 3               ;             ||||+---> Up       KEY 3  - ;
0008A6r 3               ;             |||+----> Fire1    KEY 4  - SPC
0008A6r 3               ;             ||+-----> Fire2    KEY 5  - Q
0008A6r 3               ;             |+------> Fire3    KEY 6  - P
0008A6r 3               ;             +-------> Not used
0008A6r 3               ;
0008A6r 3               ;                       Option1  KEY 7  - 1
0008A6r 3               ;                       Option2  KEY 8  - 2
0008A6r 3               ;                       Option3  KEY 9  - 3
0008A6r 3               ;                       Option4  KEY 10 - 4
0008A6r 3               ;-------------------------------------------------------
0008A6r 3               
0008A6r 3               joykey:
0008A6r 3  A5 rr        	lda contrl 		; control flag.
0008A8r 3  C9 01        	cmp #1
0008AAr 3  F0 1A        	beq joy1 		; scan joystick1
0008ACr 3  C9 02        	cmp #2
0008AEr 3  F0 1C        	beq joy2 		; scan joystick2
0008B0r 3               
0008B0r 3               ; Scan keyboard
0008B0r 3               
0008B0r 3  A9 00        	lda #0		 	; zero reading.
0008B2r 3  85 rr        	sta z80_e
0008B4r 3               
0008B4r 3  A0 06        	ldy #6	 		; address of last key.
0008B6r 3               joyke0:
0008B6r 3  B9 rr rr     	lda keys,y 		; get key from table.
0008B9r 3  20 rr rr     	jsr ktest		; being pressed?
0008BCr 3  26 rr        	rol z80_e 		; rotate into reading.
0008BEr 3               
0008BEr 3  88           	dey		 	; next key.
0008BFr 3  10 F5        	bpl joyke0 		; repeat for all keys.
0008C1r 3               joyret:
0008C1r 3  A5 rr        	lda z80_e
0008C3r 3  85 rr        	sta joyval
0008C5r 3  60           	rts
0008C6r 3               
0008C6r 3               ; Scan joystick 1
0008C6r 3               
0008C6r 3               joy1:
0008C6r 3  20 rr rr     	jsr joy1scan
0008C9r 3  4C rr rr     	jmp joyret 		; store the value.
0008CCr 3               
0008CCr 3               ; Scan joystick 2
0008CCr 3               
0008CCr 3               joy2:
0008CCr 3  20 rr rr     	jsr joy2scan
0008CFr 3  4C rr rr     	jmp joyret 		; store the value.
0008D2r 3               
0008D2r 3               ;---------------------------------------------------------------
0008D2r 3               ; Display message.
0008D2r 3               ;
0008D2r 3               ; Input:
0008D2r 3               ;  A = message number
0008D2r 3               ;---------------------------------------------------------------
0008D2r 3               
0008D2r 3               dmsg:
0008D2r 3  AA           	tax
0008D3r 3  A9 rr        	lda #<msgdat		; pointer to messages.
0008D5r 3  85 rr        	sta z80_l
0008D7r 3  A9 rr        	lda #>msgdat
0008D9r 3  85 rr        	sta z80_h
0008DBr 3  20 rr rr     	jsr getwrd		; get message number.
0008DEr 3               dmsg3:
0008DEr 3  20 rr rr     	jsr preprt		; pre-printing stuff.
0008E1r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
0008E4r 3  A5 rr        	lda prtmod		; print mode.
0008E6r 3  D0 47        	bne bmsg1		; no, double-height text.
0008E8r 3               dmsg0:
0008E8r 3  A5 rr        	lda z80_h		; store string pointer.
0008EAr 3  48           	pha
0008EBr 3  A5 rr        	lda z80_l
0008EDr 3  48           	pha
0008EEr 3               
0008EEr 3  A0 00        	ldy #0
0008F0r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
0008F2r 3  29 7F        	and #127		; remove any end marker.
0008F4r 3  C9 0D        	cmp #ASCII_NEWLINE
0008F6r 3  F0 24        	beq dmsg1
0008F8r 3  20 rr rr     	jsr pchar		; display character.
0008FBr 3  20 rr rr     	jsr nexpos 		; display position.
0008FEr 3  D0 03        	bne dmsg2		; not on a new line.
000900r 3  20 rr rr     	jsr nexlin		; next line down.
000903r 3               dmsg2:
000903r 3  68           	pla			; retrieve string pointer
000904r 3  85 rr        	sta z80_l
000906r 3  68           	pla
000907r 3  85 rr        	sta z80_h
000909r 3               
000909r 3  A0 00        	ldy #0
00090Br 3  B1 rr        	lda (z80_hl),y		; fetch last character.
00090Dr 3  0A           	asl a  			; was it the end?
00090Er 3  90 03        	bcc :+
000910r 3  4C rr rr     	jmp dscor2		; yes, job done.
000913r 3               :
000913r 3  E6 rr        	inc z80_l		; next character to display.
000915r 3  D0 02        	bne :+
000917r 3  E6 rr        	inc z80_h
000919r 3               :
000919r 3  4C rr rr     	jmp dmsg0
00091Cr 3               dmsg1:
00091Cr 3  E6 rr        	inc dispy
00091Er 3  A5 rr        	lda dispy
000920r 3  C9 18        	cmp #24
000922r 3  90 04        	bcc dmsg4
000924r 3  A9 00        	lda #0
000926r 3  85 rr        	sta dispy
000928r 3               dmsg4:
000928r 3  A9 00        	lda #0
00092Ar 3  85 rr        	sta dispx
00092Cr 3  4C rr rr     	jmp dmsg2
00092Fr 3               
00092Fr 3               
00092Fr 3               ;----------------------------------------------------------
00092Fr 3               ; Display message in big text.
00092Fr 3               ;
00092Fr 3               ; Input:
00092Fr 3               ;  HL = string pointer
00092Fr 3               ;----------------------------------------------------------
00092Fr 3               
00092Fr 3               bmsg1:
00092Fr 3  A0 00        	ldy #0
000931r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000933r 3  29 7F        	and #127		; only want 7 bits.
000935r 3  C9 0D        	cmp #ASCII_NEWLINE
000937r 3  F0 13        	beq bmsg2
000939r 3  20 rr rr     	jsr bchar 		; display big char.
00093Cr 3               bmsg3:
00093Cr 3  A0 00        	ldy #0
00093Er 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000940r 3  48           	pha
000941r 3  E6 rr        	inc z80_l 		; next character in list.
000943r 3  D0 02        	bne :+
000945r 3  E6 rr        	inc z80_h
000947r 3               :
000947r 3  68           	pla
000948r 3  0A           	asl a  			; was terminator flag set?
000949r 3  90 E4        	bcc bmsg1		; no, keep going.
00094Br 3               
00094Br 3  60           	rts
00094Cr 3               bmsg2:
00094Cr 3  A9 00        	lda #0
00094Er 3  85 rr        	sta dispx
000950r 3  E6 rr        	inc dispy
000952r 3  E6 rr        	inc dispy
000954r 3  A5 rr        	lda dispy
000956r 3  C9 17        	cmp #23
000958r 3  90 E2        	bcc bmsg3
00095Ar 3  A9 00        	lda #0
00095Cr 3  85 rr        	sta dispy
00095Er 3  4C rr rr     	jmp bmsg3
000961r 3               
000961r 3               ;----------------------------------------------------------
000961r 3               ; Big character display.
000961r 3               ;
000961r 3               ; Input:
000961r 3               ;  A = character
000961r 3               ;----------------------------------------------------------
000961r 3               
000961r 3               bchar:
000961r 3  85 rr        	sta z80_e		; save char in lb
000963r 3  A9 00        	lda #0
000965r 3  85 rr        	sta z80_d		; reset hb
000967r 3               
000967r 3  06 rr        	asl z80_e 		; multiply char by 8.
000969r 3  26 rr        	rol z80_d
00096Br 3  06 rr        	asl z80_e
00096Dr 3  26 rr        	rol z80_d
00096Fr 3  06 rr        	asl z80_e
000971r 3  26 rr        	rol z80_d		; de = a*8
000973r 3               
000973r 3  18           	clc			; de = #<(FONT-256) + a*8
000974r 3  A5 rr        	lda z80_e
000976r 3  69 rr        	adc #<(FONT-256) 		; address of font.
000978r 3  85 rr        	sta z80_e
00097Ar 3  A5 rr        	lda z80_d
00097Cr 3  69 rr        	adc #>(FONT-256)
00097Er 3  85 rr        	sta z80_d
000980r 3               
000980r 3  20 rr rr     	jsr gaadd		; set colour attribute
000983r 3  AD rr rr     	lda fontcol
000986r 3  A0 00        	ldy #0
000988r 3  91 rr        	sta (bufaddr),y
00098Ar 3               
00098Ar 3  20 rr rr     	jsr gprad 		; get screen address.
00098Dr 3               
00098Dr 3  A2 00        	ldx #0			; height of character in font.
00098Fr 3               bchar0:
00098Fr 3  A0 00        	ldy #0
000991r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000993r 3               
000993r 3               .if iflag
000993r 3               	eor #$ff
000993r 3               .endif
000993r 3               
000993r 3  91 rr        	sta (scraddr),y
000995r 3  48           	pha
000996r 3  20 rr rr     	jsr nline 		; next line down.
000999r 3  68           	pla
00099Ar 3  91 rr        	sta (scraddr),y
00099Cr 3  20 rr rr     	jsr nline 		; next line down.
00099Fr 3               
00099Fr 3  18           	clc
0009A0r 3  E6 rr        	inc z80_e 		; next line of font.
0009A2r 3  D0 02        	bne :+
0009A4r 3  E6 rr        	inc z80_d
0009A6r 3               :
0009A6r 3  E8           	inx
0009A7r 3  E0 08        	cpx #8
0009A9r 3  D0 E4        	bne bchar0
0009ABr 3               
0009ABr 3  20 rr rr     	jsr nexpos		; display position.
0009AEr 3  D0 05        	bne bchar2 		; not on a new line.
0009B0r 3               bchar3:
0009B0r 3  E6 rr        	inc dispy
0009B2r 3  20 rr rr     	jsr nexlin 		; next line check.
0009B5r 3               bchar2:
0009B5r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
0009B8r 3               
0009B8r 3               
0009B8r 3               ;-------------------------------------------------
0009B8r 3               ; Display a character.
0009B8r 3               ;
0009B8r 3               ; Input:
0009B8r 3               ;  A = character
0009B8r 3               ;-------------------------------------------------
0009B8r 3               
0009B8r 3               achar:
0009B8r 3  85 rr        	sta z80_b 		; copy to b.
0009BAr 3  20 rr rr     	jsr preprt 		; get ready to print.
0009BDr 3  A5 rr        	lda z80_b		; character in accumulator.
0009BFr 3  A6 rr        	ldx prtmod 		; print mode.
0009C1r 3  F0 03        	beq :+
0009C3r 3  4C rr rr     	jmp bchar 		; no, double-height text.
0009C6r 3               :
0009C6r 3  20 rr rr     	jsr pchar 		; display character.
0009C9r 3  20 rr rr     	jsr nexpos 		; display position.
0009CCr 3  F0 E2        	beq bchar3		; next line down.
0009CEr 3  4C rr rr     	jmp bchar2 		; tidy up.
0009D1r 3               
0009D1r 3               
0009D1r 3               ;-------------------------------------------------
0009D1r 3               ; Get next print column position.
0009D1r 3               ;-------------------------------------------------
0009D1r 3               
0009D1r 3               nexpos:
0009D1r 3  E6 rr        	inc dispx		; move along one position.
0009D3r 3  A5 rr        	lda dispx 		; get coordinate.
0009D5r 3  C9 16        	cmp #22
0009D7r 3  D0 0E        	bne :+
0009D9r 3  A9 00        	lda #0
0009DBr 3  85 rr        	sta dispx
0009DDr 3  A5 rr        	lda prtmod
0009DFr 3  F0 06        	beq :+
0009E1r 3  20 rr rr     	jsr nexlin
0009E4r 3  4C rr rr     	jmp nexlin
0009E7r 3               :
0009E7r 3  60           	rts
0009E8r 3               
0009E8r 3               ;-------------------------------------------------
0009E8r 3               ; Get next print line position.
0009E8r 3               ;-------------------------------------------------
0009E8r 3               
0009E8r 3               nexlin:
0009E8r 3  E6 rr        	inc dispy 		; newline.
0009EAr 3  A5 rr        	lda dispy		; vertical position.
0009ECr 3  C9 16        	cmp #22			; past screen edge?
0009EEr 3  B0 01        	bcs :+
0009F0r 3  60           	rts			; no, still okay.
0009F1r 3               :
0009F1r 3  A9 00        	lda #0			; restart at top.
0009F3r 3  85 rr        	sta dispy
0009F5r 3  60           	rts
0009F6r 3               
0009F6r 3               ;--------------------------------------------------------
0009F6r 3               ; Pre-print preliminaries.
0009F6r 3               ;--------------------------------------------------------
0009F6r 3               
0009F6r 3               preprt:
0009F6r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
0009F8r 3  8D rr rr     	sta grbase		; set up graphics base.
0009FBr 3  A9 rr        	lda #>(FONT-256)
0009FDr 3  8D rr rr     	sta grbase+1
000A00r 3               prescr:
000A00r 3  A5 rr        	lda charx 		; display coordinates.
000A02r 3  85 rr        	sta dispx		; set up general coordinates.
000A04r 3  A5 rr        	lda chary
000A06r 3  85 rr        	sta dispy
000A08r 3  60           	rts
000A09r 3               
000A09r 3               ;--------------------------------------------------------------
000A09r 3               ; Get messagenr x in hl
000A09r 3               ;
000A09r 3               ; Input:
000A09r 3               ;  HL = pointer to message list
000A09r 3               ;  X  = message number.
000A09r 3               ;--------------------------------------------------------------
000A09r 3               
000A09r 3               getwrd:
000A09r 3  E0 00        	cpx #0
000A0Br 3  D0 01        	bne:+ 			; first word in list?
000A0Dr 3  60           	rts 			; yep, don't search.
000A0Er 3               :
000A0Er 3  A0 00        	ldy #0
000A10r 3               getwd0:
000A10r 3  B1 rr        	lda (z80_hl),y
000A12r 3  48           	pha
000A13r 3  E6 rr        	inc z80_l
000A15r 3  D0 02        	bne :+
000A17r 3  E6 rr        	inc z80_h
000A19r 3               :
000A19r 3  68           	pla
000A1Ar 3  C9 80        	cmp #128		; found end?
000A1Cr 3  30 F2        	bmi getwd0		; no, carry on.
000A1Er 3  CA           	dex			; until we have right number.
000A1Fr 3  D0 EF        	bne getwd0
000A21r 3  60           	rts
000A22r 3               
000A22r 3               ;-----------------------------------------------------------
000A22r 3               ; Bubble sort.
000A22r 3               ;-----------------------------------------------------------
000A22r 3               
000A22r 3               bsort:
000A22r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000A24r 3  85 rr        	sta qscnt
000A26r 3               
000A26r 3  A9 rr        	lda #<sprtab 		; sprite table.
000A28r 3  85 rr        	sta z80_x
000A2Ar 3  A9 rr        	lda #>sprtab
000A2Cr 3  85 rr        	sta z80_i
000A2Er 3               bsort0:
000A2Er 3  A0 00        	ldy #0
000A30r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000A32r 3  C9 FF        	cmp #255 		; is it switched off?
000A34r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000A36r 3               
000A36r 3  A0 12        	ldy #TABSIZ
000A38r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000A3Ar 3  C9 FF        	cmp #255 		; is it enabled?
000A3Cr 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000A3Er 3               
000A3Er 3  A0 15        	ldy #TABSIZ+3
000A40r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000A42r 3  A0 03        	ldy #3
000A44r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000A46r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000A48r 3               bsort2:
000A48r 3  18           	clc
000A49r 3  A5 rr        	lda z80_x
000A4Br 3  69 12        	adc #TABSIZ 		; distance to next odd/even entry.
000A4Dr 3  85 rr        	sta z80_x
000A4Fr 3  90 02        	bcc :+
000A51r 3  E6 rr        	inc z80_i
000A53r 3               :
000A53r 3  C6 rr        	dec qscnt
000A55r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000A57r 3  60           	rts
000A58r 3               
000A58r 3               bsort1:
000A58r 3  A0 12        	ldy #TABSIZ
000A5Ar 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000A5Cr 3  C9 FF        	cmp #255		; is it enabled?
000A5Er 3  F0 E8        	beq bsort2		; no, nothing to swap.
000A60r 3  20 rr rr     	jsr swspr		; swap positions.
000A63r 3  4C rr rr     	jmp bsort2
000A66r 3               swemp:
000A66r 3  A0 12        	ldy #TABSIZ
000A68r 3  B1 rr        	lda (z80_ix),y		; next table entry.
000A6Ar 3  C9 FF        	cmp #255		; is that one on?
000A6Cr 3  F0 DA        	beq bsort2		; no, nothing to swap.
000A6Er 3  20 rr rr     	jsr swspr		; swap positions.
000A71r 3  4C rr rr     	jmp bsort2
000A74r 3               
000A74r 3               ; Swap sprites.
000A74r 3               
000A74r 3               swspr:
000A74r 3  A5 rr        	lda z80_x		; table address
000A76r 3  85 rr        	sta z80_e		; copy to de pair.
000A78r 3  85 rr        	sta z80_l		; copy to hl pair.
000A7Ar 3  A5 rr        	lda z80_i
000A7Cr 3  85 rr        	sta z80_h
000A7Er 3  85 rr        	sta z80_d
000A80r 3               
000A80r 3  18           	clc
000A81r 3  A5 rr        	lda z80_l
000A83r 3  69 12        	adc #TABSIZ		; distance to second entry.
000A85r 3  85 rr        	sta z80_l
000A87r 3  90 02        	bcc :+
000A89r 3  E6 rr        	inc z80_h
000A8Br 3               :
000A8Br 3  A9 12        	lda #TABSIZ		; bytes to swap.
000A8Dr 3  85 rr        	sta z80_b
000A8Fr 3  A0 00        	ldy #0
000A91r 3               swspr0:
000A91r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000A93r 3  48           	pha
000A94r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000A96r 3  91 rr        	sta (z80_hl),y 		; copy to second.
000A98r 3  68           	pla
000A99r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000A9Br 3               
000A9Br 3  E6 rr        	inc z80_e 		; next byte.
000A9Dr 3  D0 02        	bne :+
000A9Fr 3  E6 rr        	inc z80_d
000AA1r 3               :
000AA1r 3  E6 rr        	inc z80_l 		; next byte.
000AA3r 3  D0 02        	bne :+
000AA5r 3  E6 rr        	inc z80_h
000AA7r 3               :
000AA7r 3  C6 rr        	dec z80_b
000AA9r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000AABr 3  60           	rts
000AACr 3               
000AACr 3               ;----------------------------------------------------
000AACr 3               ; Process sprites.
000AACr 3               ;----------------------------------------------------
000AACr 3               
000AACr 3               pspr:
000AACr 3  A9 0C        	lda #NUMSPR		; sprites to process.
000AAEr 3  85 rr        	sta sprptr
000AB0r 3               
000AB0r 3  A9 rr        	lda #<sprtab 		; sprite table.
000AB2r 3  85 rr        	sta z80_x
000AB4r 3  A9 rr        	lda #>sprtab
000AB6r 3  85 rr        	sta z80_i
000AB8r 3               pspr1:
000AB8r 3  A0 00        	ldy #0
000ABAr 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000ABCr 3  C9 09        	cmp #9 			; within range of sprite types?
000ABEr 3  B0 03        	bcs :+
000AC0r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000AC3r 3               :
000AC3r 3  18           	clc
000AC4r 3  A5 rr        	lda z80_x
000AC6r 3  69 12        	adc #TABSIZ 		; distance to next odd/even entry.
000AC8r 3  85 rr        	sta z80_x
000ACAr 3  90 02        	bcc :+
000ACCr 3  E6 rr        	inc z80_i		; next sprite.
000ACEr 3               :
000ACEr 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000AD0r 3  D0 E6        	bne pspr1
000AD2r 3  60           	rts
000AD3r 3               
000AD3r 3               pspr2:
000AD3r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000AD5r 3  85 rr        	sta ogptr
000AD7r 3  A5 rr        	lda z80_i
000AD9r 3  85 rr        	sta ogptr+1
000ADBr 3  20 rr rr     	jsr pspr3		; do the routine.
000ADEr 3               rtorg:
000ADEr 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000AE0r 3  85 rr        	sta z80_x
000AE2r 3  A5 rr        	lda ogptr+1
000AE4r 3  85 rr        	sta z80_i
000AE6r 3               rtorg0:
000AE6r 3  60           	rts
000AE7r 3               
000AE7r 3               pspr3:
000AE7r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000AE9r 3  85 rr        	sta z80_l
000AEBr 3  A9 rr        	lda #>evtyp0
000AEDr 3  85 rr        	sta z80_h
000AEFr 3               pspr4:
000AEFr 3  B1 rr        	lda (z80_ix),y
000AF1r 3  0A           	asl a			; double accumulator.
000AF2r 3  18           	clc
000AF3r 3  65 rr        	adc z80_l
000AF5r 3  85 rr        	sta z80_l
000AF7r 3  90 02        	bcc :+
000AF9r 3  E6 rr        	inc z80_h
000AFBr 3               :
000AFBr 3  B1 rr        	lda (z80_hl),y
000AFDr 3  85 rr        	sta z80_e 		; copy to de.
000AFFr 3  48           	pha
000B00r 3               
000B00r 3  E6 rr        	inc z80_l 		; next byte of address.
000B02r 3  D0 02        	bne :+
000B04r 3  E6 rr        	inc z80_h
000B06r 3               :
000B06r 3  B1 rr        	lda (z80_hl),y 		; address high.
000B08r 3  85 rr        	sta z80_d
000B0Ar 3               
000B0Ar 3  48           	pha	 		; swap address into hl.
000B0Br 3  A5 rr        	lda z80_h
000B0Dr 3  85 rr        	sta z80_d
000B0Fr 3  68           	pla
000B10r 3  85 rr        	sta z80_h
000B12r 3  68           	pla
000B13r 3  85 rr        	sta z80_l
000B15r 3  A5 rr        	lda z80_l
000B17r 3  85 rr        	sta z80_e
000B19r 3               
000B19r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000B1Cr 3               
000B1Cr 3               ; Address of each sprite type's routine.
000B1Cr 3               
000B1Cr 3  rr rr        evtyp0:	.word evnt00
000B1Er 3  rr rr        evtyp1:	.word evnt01
000B20r 3  rr rr        evtyp2:	.word evnt02
000B22r 3  rr rr        evtyp3:	.word evnt03
000B24r 3  rr rr        evtyp4:	.word evnt04
000B26r 3  rr rr        evtyp5:	.word evnt05
000B28r 3  rr rr        evtyp6:	.word evnt06
000B2Ar 3  rr rr        evtyp7:	.word evnt07
000B2Cr 3  rr rr        evtyp8:	.word evnt08
000B2Er 3               
000B2Er 3               ;--------------------------------------------------------------
000B2Er 3               ; Display sprites.
000B2Er 3               ;
000B2Er 3               ; Input:
000B2Er 3               ;  IX = sprite table
000B2Er 3               ;--------------------------------------------------------------
000B2Er 3               
000B2Er 3               dspr:
000B2Er 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000B30r 3  85 rr        	sta sprcnt
000B32r 3               
000B32r 3               dspr0:
000B32r 3  A0 00        	ldy #var_Type
000B34r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000B36r 3  C9 FF        	cmp #255 		; is it enabled?
000B38r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000B3Ar 3               dspr5:
000B3Ar 3  A0 05        	ldy #var_newType
000B3Cr 3  B1 rr        	lda (z80_ix),y 		; new type.
000B3Er 3  C9 FF        	cmp #255		; is it enabled?
000B40r 3  F0 03        	beq dspr2
000B42r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000B45r 3               dspr2:
000B45r 3  A0 05        	ldy #var_newType
000B47r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000B49r 3  A0 00        	ldy #var_Type
000B4Br 3  91 rr        	sta (z80_ix),y
000B4Dr 3  A0 06        	ldy #var_newImage
000B4Fr 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000B51r 3  A0 01        	ldy #var_Image
000B53r 3  91 rr        	sta (z80_ix),y
000B55r 3  A0 07        	ldy #var_newFrame
000B57r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000B59r 3  A0 02        	ldy #var_Frame
000B5Br 3  91 rr        	sta (z80_ix),y
000B5Dr 3  A0 08        	ldy #var_newY
000B5Fr 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000B61r 3  A0 03        	ldy #var_Y
000B63r 3  91 rr        	sta (z80_ix),y
000B65r 3  A0 09        	ldy #var_newX
000B67r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000B69r 3  A0 04        	ldy #var_X
000B6Br 3  91 rr        	sta (z80_ix),y
000B6Dr 3               
000B6Dr 3  18           	clc
000B6Er 3  A5 rr        	lda z80_x
000B70r 3  69 24        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000B72r 3  85 rr        	sta z80_x
000B74r 3  A5 rr        	lda z80_i
000B76r 3  69 00        	adc #0
000B78r 3  85 rr        	sta z80_i 		; next sprite.
000B7Ar 3  C6 rr        	dec sprcnt
000B7Cr 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000B7Er 3  60           	rts
000B7Fr 3               
000B7Fr 3               dspr1:
000B7Fr 3               	; _BEEB clipping code copied from CPC Engine
000B7Fr 3  A0 03        	ldy #var_Y
000B81r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B83r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B85r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000B87r 3               
000B87r 3  A0 05        	ldy #var_newType
000B89r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000B8Br 3  C9 FF        	cmp #255		; is this enabled?
000B8Dr 3  D0 06        	bne dspr4 		; yes, display both.
000B8Fr 3               
000B8Fr 3               dspr6:
000B8Fr 3  20 rr rr     	jsr sspria 		; show single sprite.
000B92r 3  4C rr rr     	jmp dspr2
000B95r 3               
000B95r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000B95r 3               
000B95r 3               dspr4:
000B95r 3               	; _BEEB clipping code copied from CPC Engine
000B95r 3  A0 08        	ldy #var_newY
000B97r 3  B1 rr        	lda (z80_ix), y		; old x coord
000B99r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000B9Br 3  B0 F2        	bcs dspr6		; yes, don't display it.
000B9Dr 3               
000B9Dr 3  A0 04        	ldy #var_X
000B9Fr 3  B1 rr        	lda (z80_ix),y		; old x.
000BA1r 3  A0 09        	ldy #var_newX
000BA3r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000BA5r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000BA7r 3               
000BA7r 3  A0 03        	ldy #var_Y
000BA9r 3  B1 rr        	lda (z80_ix),y		; old y.
000BABr 3  A0 08        	ldy #var_newY
000BADr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000BAFr 3  D0 17        	bne dspr7		; they differ, need to redraw.
000BB1r 3               
000BB1r 3  A0 02        	ldy #var_Frame
000BB3r 3  B1 rr        	lda (z80_ix),y 		; old frame.
000BB5r 3  A0 07        	ldy #var_newFrame
000BB7r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000BB9r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000BBBr 3               
000BBBr 3  A0 01        	ldy #var_Image
000BBDr 3  B1 rr        	lda (z80_ix),y 		; old image.
000BBFr 3  A0 06        	ldy #var_newImage
000BC1r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000BC3r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000BC5r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000BC8r 3               dspr7:
000BC8r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000BCBr 3  4C rr rr     	jmp dspr2
000BCEr 3               dspr3:
000BCEr 3               	; _BEEB clipping code copied from CPC Engine
000BCEr 3  A0 08        	ldy #var_newY
000BD0r 3  B1 rr        	lda (z80_ix), y		; old x coord
000BD2r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000BD4r 3  90 03        	bcc :+			; no, continue
000BD6r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000BD9r 3               :
000BD9r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000BDCr 3  4C rr rr     	jmp dspr2
000BDFr 3               
000BDFr 3               ;-----------------------------------------
000BDFr 3               ; Get sprite address calculations.
000BDFr 3               ; gspran = new sprite, gsprad = old sprite.
000BDFr 3               ;
000BDFr 3               ; Input:
000BDFr 3               ;  IX = sprite address
000BDFr 3               ;-----------------------------------------
000BDFr 3               
000BDFr 3               gspran:
000BDFr 3  A0 08        	ldy #var_newY
000BE1r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000BE3r 3  85 rr        	sta dispy
000BE5r 3  A0 09        	ldy #var_newX
000BE7r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000BE9r 3  85 rr        	sta dispx
000BEBr 3  A0 06        	ldy #var_newImage
000BEDr 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000BEFr 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000BF2r 3               
000BF2r 3  A0 00        	ldy #0
000BF4r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000BF6r 3  A0 07        	ldy #var_newFrame
000BF8r 3  18           	clc
000BF9r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000BFBr 3  4C rr rr     	jmp gspra0
000BFEr 3               
000BFEr 3               ;-----------------------------------------
000BFEr 3               ; Calculate old sprite address
000BFEr 3               ;
000BFEr 3               ; Input:
000BFEr 3               ;  IX = sprite address
000BFEr 3               ;
000BFEr 3               ; Output:
000BFEr 3               ;  B  = right byte mask
000BFEr 3               ;  C  = left byte mask
000BFEr 3               ;  DE = spriteframe address
000BFEr 3               ;  scraddr = screenaddress(dispx,dispy)
000BFEr 3               ;-----------------------------------------
000BFEr 3               
000BFEr 3               gsprad:
000BFEr 3  A0 03        	ldy #var_Y
000C00r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000C02r 3  85 rr        	sta dispy
000C04r 3  A0 04        	ldy #var_X
000C06r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000C08r 3  85 rr        	sta dispx
000C0Ar 3  A0 01        	ldy #var_Image
000C0Cr 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000C0Er 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000C11r 3               
000C11r 3  A0 00        	ldy #0
000C13r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000C15r 3  A0 02        	ldy #var_Frame
000C17r 3  18           	clc
000C18r 3  71 rr        	adc (z80_ix),y 		; add frame number.
000C1Ar 3               
000C1Ar 3               gspra0:
000C1Ar 3               .if rflag
000C1Ar 3  85 rr        	sta z80_e		; multiply by 32.
000C1Cr 3  A9 00        	lda #0
000C1Er 3  85 rr        	sta z80_d
000C20r 3               
000C20r 3  06 rr        	asl z80_e
000C22r 3  26 rr        	rol z80_d
000C24r 3  06 rr        	asl z80_e
000C26r 3  26 rr        	rol z80_d
000C28r 3  06 rr        	asl z80_e
000C2Ar 3  26 rr        	rol z80_d
000C2Cr 3  06 rr        	asl z80_e
000C2Er 3  26 rr        	rol z80_d
000C30r 3               .if bflag
000C30r 3               	lda z80_e		; multiply by 48
000C30r 3               	sta tmp1
000C30r 3               	lda z80_d
000C30r 3               	sta tmp2
000C30r 3               .endif
000C30r 3  06 rr        	asl z80_e
000C32r 3  26 rr        	rol z80_d
000C34r 3               .if bflag
000C34r 3               	clc
000C34r 3               	lda z80_e
000C34r 3               	adc tmp1
000C34r 3               	sta z80_e
000C34r 3               	lda z80_d
000C34r 3               	adc tmp2
000C34r 3               	sta z80_d
000C34r 3               .endif
000C34r 3               .else
000C34r 3               	lsr a	  		; multiply by 128.
000C34r 3               	sta z80_d 		; store in d.
000C34r 3               	sta tmp1
000C34r 3               	lda #0
000C34r 3               	ror a
000C34r 3               	sta z80_e 		; got low byte.
000C34r 3               	sta tmp2
000C34r 3               .if bflag
000C34r 3               	lsr tmp1		; multiply by 192
000C34r 3               	ror tmp2
000C34r 3               	clc
000C34r 3               	lda tmp2
000C34r 3               	adc z80_e
000C34r 3               	sta z80_e
000C34r 3               	lda tmp1
000C34r 3               	adc z80_d
000C34r 3               	sta z80_d
000C34r 3               .endif
000C34r 3               .endif
000C34r 3  18           	clc 			; address of play sprites.
000C35r 3  A5 rr        	lda z80_e
000C37r 3  69 rr        	adc #<sprgfx
000C39r 3  85 rr        	sta z80_e
000C3Br 3  A5 rr        	lda z80_d
000C3Dr 3  69 rr        	adc #>sprgfx
000C3Fr 3  85 rr        	sta z80_d
000C41r 3               
000C41r 3  A5 rr        	lda dispx 		; y coordinate.
000C43r 3  29 06        	and #6 			; position within byte boundary.
000C45r 3  AA           	tax	 		; low byte of table displacement.
000C46r 3               .if rflag
000C46r 3  86 rr        	stx sprshft
000C48r 3               .else
000C48r 3               	asl a	  		; multiply by 32.
000C48r 3               	asl a  			; already a multiple
000C48r 3               	asl a  			; of 2, so just 4
000C48r 3               .if bflag
000C48r 3               	sta tmp1
000C48r 3               	asl a  			; shifts needed.
000C48r 3               	clc
000C48r 3               	adc tmp1
000C48r 3               .else
000C48r 3               	asl a  			; shifts needed.
000C48r 3               .endif
000C48r 3               	clc 			; add to sprite address.
000C48r 3               	adc z80_e
000C48r 3               	sta z80_e
000C48r 3               	bcc :+
000C48r 3               	inc z80_d
000C48r 3               :
000C48r 3               .endif
000C48r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000C4Br 3  85 rr        	sta z80_c 		; left mask.
000C4Dr 3  BD rr rr     	lda spmask+1,x
000C50r 3  85 rr        	sta z80_b 		; right mask.
000C52r 3               ; Drop into screen address routine.
000C52r 3  4C rr rr     	jmp scadd
000C55r 3               
000C55r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000C59r 3  0F F0 03 FC  
000C5Dr 3               
000C5Dr 3               
000C5Dr 3               ;-----------------------------------------------------------
000C5Dr 3               ; Animates a sprite.
000C5Dr 3               ;
000C5Dr 3               ; Input:
000C5Dr 3               ;  IX = sprite address
000C5Dr 3               ;  HL = last sprite address
000C5Dr 3               ;-----------------------------------------------------------
000C5Dr 3               
000C5Dr 3               animsp:
000C5Dr 3  25 rr        	and frmno
000C5Fr 3  F0 01        	beq :+
000C61r 3  60           	rts
000C62r 3               :
000C62r 3  A0 06        	ldy #var_newImage
000C64r 3  B1 rr        	lda (z80_ix),y		; sprite image
000C66r 3  20 rr rr     	jsr gfrm		; get frame data.
000C69r 3               
000C69r 3  E6 rr        	inc z80_l		; point to frames.
000C6Br 3  D0 02        	bne :+
000C6Dr 3  E6 rr        	inc z80_h
000C6Fr 3               :
000C6Fr 3  A0 07        	ldy #var_newFrame
000C71r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000C73r 3  18           	clc
000C74r 3  69 01        	adc #1			; next one along.
000C76r 3  A0 00        	ldy #0
000C78r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000C7Ar 3  90 02        	bcc anims0		; no, not yet.
000C7Cr 3  A9 00        	lda #0			; start at first frame.
000C7Er 3               anims0:
000C7Er 3  A0 07        	ldy #var_newFrame
000C80r 3  91 rr        	sta (z80_ix),y		; new frame.
000C82r 3  60           	rts
000C83r 3               
000C83r 3               ;--------------------------------------------------------------
000C83r 3               ; Animate back
000C83r 3               ;
000C83r 3               ; Input:
000C83r 3               ;  IX = sprite address
000C83r 3               ;  HL = last sprite address
000C83r 3               ;--------------------------------------------------------------
000C83r 3               
000C83r 3               animbk:
000C83r 3  25 rr        	and frmno
000C85r 3  F0 01        	beq :+
000C87r 3  60           	rts
000C88r 3               :
000C88r 3  A0 06        	ldy #var_newImage
000C8Ar 3  B1 rr        	lda (z80_ix),y		; sprite image.
000C8Cr 3  20 rr rr     	jsr gfrm		; get frame data.
000C8Fr 3               
000C8Fr 3  E6 rr        	inc z80_l 		; point to frames.
000C91r 3  D0 02        	bne :+
000C93r 3  E6 rr        	inc z80_h
000C95r 3               :
000C95r 3  A0 07        	ldy #var_newFrame
000C97r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000C99r 3  F0 03        	beq :+
000C9Br 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000C9Er 3               :
000C9Er 3  A0 00        	ldy #0
000CA0r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000CA2r 3               rtanb0:
000CA2r 3  38           	sec
000CA3r 3  E9 01        	sbc #1			; next one along.
000CA5r 3  4C rr rr     	jmp anims0		; set new frame.
000CA8r 3               
000CA8r 3               ;--------------------------------------------------------------
000CA8r 3               ; Check for collision with other sprite, strict enforcement.
000CA8r 3               ;
000CA8r 3               ; Input:
000CA8r 3               ;  b		= sprite to test for
000CA8r 3               ;  ix		= current sprite pointer
000CA8r 3               ;
000CA8r 3               ; global:	b
000CA8r 3               ; local:	x,y,hl,de,skptr
000CA8r 3               ; calls:	-
000CA8r 3               ;--------------------------------------------------------------
000CA8r 3               
000CA8r 3               sktyp:
000CA8r 3  A9 rr        	lda #<sprtab				; sprite table.
000CAAr 3  85 rr        	sta z80_l
000CACr 3  A9 rr        	lda #>sprtab
000CAEr 3  85 rr        	sta z80_h
000CB0r 3               numsp2:
000CB0r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000CB2r 3  85 rr        	sta sktptr
000CB4r 3               sktyp0:
000CB4r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000CB6r 3  85 rr        	sta skptr
000CB8r 3  A5 rr        	lda z80_h
000CBAr 3  85 rr        	sta skptr+1
000CBCr 3               
000CBCr 3  A0 00        	ldy #0
000CBEr 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000CC0r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000CC2r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000CC4r 3               sktyp1:
000CC4r 3  18           	clc
000CC5r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000CC7r 3  69 12        	adc #TABSIZ				; size of each entry.
000CC9r 3  85 rr        	sta z80_l
000CCBr 3  A5 rr        	lda skptr+1
000CCDr 3  69 00        	adc #0
000CCFr 3  85 rr        	sta z80_h
000CD1r 3  C6 rr        	dec sktptr					; one less iteration.
000CD3r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000CD5r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000CD7r 3  85 rr        	sta z80_l
000CD9r 3  85 rr        	sta z80_h
000CDBr 3  85 rr        	sta skptr				; store pointer to sprite.
000CDDr 3  85 rr        	sta skptr+1
000CDFr 3               
000CDFr 3  18           	clc					; don't return with zero flag set.
000CE0r 3  60           	rts 					; didn't find one.
000CE1r 3               
000CE1r 3               coltyp:
000CE1r 3  A0 00        	ldy #0
000CE3r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000CE5r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000CE7r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000CE9r 3               colty0:
000CE9r 3  A0 09        	ldy #9					; distance to x position in table.
000CEBr 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000CEDr 3  85 rr        	sta z80_e
000CEFr 3  88           	dey
000CF0r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000CF2r 3  85 rr        	sta z80_d
000CF4r 3               
000CF4r 3               ; Drop into collision detection.
000CF4r 3               
000CF4r 3               colc16:
000CF4r 3  A0 09        	ldy #9
000CF6r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000CF8r 3  38           	sec					; subtract x.
000CF9r 3  E5 rr        	sbc z80_e
000CFBr 3  B0 05        	bcs  colc1a 				; result is positive.
000CFDr 3  49 FF        	eor #$ff				; make negative positive.
000CFFr 3  18           	clc
000D00r 3  69 01        	adc #1
000D02r 3               colc1a:
000D02r 3  C9 10        	cmp #16 				; within x range?
000D04r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000D06r 3  85 rr        	sta z80_c				; store difference.
000D08r 3               
000D08r 3  A0 08        	ldy #8
000D0Ar 3  B1 rr        	lda (z80_ix),y				; y coord.
000D0Cr 3  38           	sec
000D0Dr 3  E5 rr        	sbc z80_d				; subtract y.
000D0Fr 3  B0 05        	bcs colc1b				; result is positive.
000D11r 3  49 FF        	eor #$ff				; make negative positive.
000D13r 3  18           	clc
000D14r 3  69 01        	adc #1
000D16r 3               colc1b:
000D16r 3  C9 10        	cmp #16					; within y range?
000D18r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000D1Ar 3  18           	clc					; add x difference.
000D1Br 3  65 rr        	adc z80_c
000D1Dr 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000D1Fr 3  B0 02        	bcs :+
000D21r 3  38           	sec
000D22r 3  60           	rts 					; carry set if there's a collision.
000D23r 3               :
000D23r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000D26r 3               colty1:
000D26r 3  A5 rr        	lda z80_x  				; compare the two.
000D28r 3  C5 rr        	cmp z80_l
000D2Ar 3  D0 09        	bne end_col
000D2Cr 3  A5 rr        	lda z80_i
000D2Er 3  C5 rr        	cmp z80_h
000D30r 3  D0 03        	bne end_col
000D32r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000D35r 3               end_col:
000D35r 3  4C rr rr     	jmp colty0
000D38r 3               
000D38r 3               ;-----------------------------------------------------------
000D38r 3               ; Display number, left aligned
000D38r 3               ;
000D38r 3               ; Input:
000D38r 3               ;  a		= number
000D38r 3               ;
000D38r 3               ; global:	-
000D38r 3               ; local:	a,y,bc,hl,displ0
000D38r 3               ; calls:	num2ch,dmsg3
000D38r 3               ;-----------------------------------------------------------
000D38r 3               
000D38r 3               disply:
000D38r 3  85 rr        	sta z80_a
000D3Ar 3  A9 rr        	lda #<displ0				; display workspace.
000D3Cr 3  85 rr        	sta z80_c
000D3Er 3  A9 rr        	lda #>displ0
000D40r 3  85 rr        	sta z80_b
000D42r 3  A5 rr        	lda z80_a
000D44r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000D47r 3               displ1:
000D47r 3  C6 rr        	dec z80_c				; back one character.
000D49r 3  A5 rr        	lda z80_c
000D4Br 3  C9 FF        	cmp #$ff
000D4Dr 3  D0 02        	bne :+
000D4Fr 3  C6 rr        	dec z80_b
000D51r 3               :
000D51r 3  A0 00        	ldy #0
000D53r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000D55r 3  09 80        	ora #128				; insert end marker.
000D57r 3  91 rr        	sta (z80_bc),y				; new value.
000D59r 3               
000D59r 3  A9 rr        	lda #<displ0				; display space.
000D5Br 3  85 rr        	sta z80_l
000D5Dr 3  A9 rr        	lda #>displ0
000D5Fr 3  85 rr        	sta z80_h
000D61r 3  4C rr rr     	jmp dmsg3				; display the string.
000D64r 3               
000D64r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000D68r 3               
000D68r 3               ;----------------------------------------------------------------
000D68r 3               ; Initialise screen.
000D68r 3               ;
000D68r 3               ; global:	roomtb,scno
000D68r 3               ; local:	-
000D68r 3               ; calls:	tstcs
000D68r 3               ;----------------------------------------------------------------
000D68r 3               
000D68r 3               initsc:
000D68r 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000D6Br 3  20 rr rr     	jsr tstsc 			; find displacement.
000D6Er 3  C9 FF        	cmp #255 			; is it valid?
000D70r 3  F0 02        	beq init_end 			; no, it's rubbish.
000D72r 3  85 rr        	sta scno			; store new room number.
000D74r 3               init_end:
000D74r 3  60           	rts
000D75r 3               
000D75r 3               ;----------------------------------------------------------------
000D75r 3               ; Test screen.
000D75r 3               ;
000D75r 3               ; global:	-
000D75r 3               ; local:	x
000D75r 3               ; calls:	-
000D75r 3               ;----------------------------------------------------------------
000D75r 3               
000D75r 3               tstsc:
000D75r 3  85 rr        	sta tmproom
000D77r 3  18           	clc
000D78r 3  69 03        	adc #MAPWID 			; add width in case we"re negative.
000D7Ar 3  AA           	tax 				; add displacement to map data.
000D7Br 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000D7Er 3  60           	rts
000D7Fr 3               
000D7Fr 3               ;--------------------------
000D7Fr 3               ; Screen left.
000D7Fr 3               ;--------------------------
000D7Fr 3               
000D7Fr 3               scrl:
000D7Fr 3  AD rr rr     	lda roomtb 			; present room table pointer.
000D82r 3  38           	sec
000D83r 3  E9 01        	sbc #1				; room left.
000D85r 3               scrl0:
000D85r 3  20 rr rr     	jsr tstsc			; test screen.
000D88r 3  C9 FF        	cmp #255			; is there a screen this way?
000D8Ar 3  D0 01        	bne :+
000D8Cr 3  60           	rts				; no, return to loop.
000D8Dr 3               :
000D8Dr 3  A5 rr        	lda tmproom			; restore room displacement.
000D8Fr 3  8D rr rr     	sta roomtb			; new room table position.
000D92r 3               scrl1:
000D92r 3  20 rr rr     	jsr initsc 			; set new screen.
000D95r 3  A9 02        	lda #2
000D97r 3  85 rr        	sta restfl 			; set it.
000D99r 3  60           	rts
000D9Ar 3               scrr:
000D9Ar 3  AD rr rr     	lda roomtb 			; room table pointer.
000D9Dr 3  18           	clc
000D9Er 3  69 01        	adc #1				; room right.
000DA0r 3  4C rr rr     	jmp scrl0
000DA3r 3               scru:
000DA3r 3  AD rr rr     	lda roomtb 			; room table pointer.
000DA6r 3  38           	sec
000DA7r 3  E9 03        	sbc #MAPWID 			; room up.
000DA9r 3  4C rr rr     	jmp scrl0
000DACr 3               scrd:
000DACr 3  AD rr rr     	lda roomtb 			; room table pointer.
000DAFr 3  18           	clc
000DB0r 3  69 03        	adc #MAPWID 			; room down.
000DB2r 3  4C rr rr     	jmp scrl0
000DB5r 3               
000DB5r 3               ;-----------------------------------------
000DB5r 3               ; Jump to new screen.
000DB5r 3               ;-----------------------------------------
000DB5r 3               
000DB5r 3               nwscr:
000DB5r 3  A2 00        	ldx #0				; start of map data.
000DB7r 3               nwscr0:
000DB7r 3  DD rr rr     	cmp mapdat,x
000DBAr 3  F0 06        	beq nwscr1			; have we found a match for screen?
000DBCr 3  E8           	inx 				; next room.
000DBDr 3  E0 50        	cpx #80				; zero room count, 80 to search.
000DBFr 3  D0 F6        	bne nwscr0			; keep looking.
000DC1r 3  60           	rts
000DC2r 3               nwscr1:
000DC2r 3  8E rr rr     	stx roomtb			; set the map position.
000DC5r 3  4C rr rr     	jmp scrl1			; draw new room.
000DC8r 3               
000DC8r 3               
000DC8r 3               ;----------------------------------------------------------
000DC8r 3               ; Gravity processing.
000DC8r 3               ;----------------------------------------------------------
000DC8r 3               
000DC8r 3               grav:
000DC8r 3  A0 0D        	ldy #13
000DCAr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000DCCr 3  85 rr        	sta z80_l
000DCEr 3  A0 0E        	ldy #14
000DD0r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000DD2r 3  85 rr        	sta z80_h
000DD4r 3  05 rr        	ora z80_l			; merge in low byte.
000DD6r 3  D0 01        	bne :+
000DD8r 3  60           	rts				; if neither is set, we're not in the air.
000DD9r 3               :
000DD9r 3  A0 00        	ldy #0
000DDBr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000DDDr 3  85 rr        	sta z80_a
000DDFr 3  C9 63        	cmp #99				; reached the end?
000DE1r 3  D0 0C        	bne grav0			; no, continue.
000DE3r 3               grav2:
000DE3r 3  C6 rr        	dec z80_l			; go back to previous value.
000DE5r 3  C9 FF        	cmp #$ff
000DE7r 3  D0 02        	bne :+
000DE9r 3  C6 rr        	dec z80_h
000DEBr 3               :
000DEBr 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000DEDr 3  85 rr        	sta z80_a
000DEFr 3               grav0:
000DEFr 3  E6 rr        	inc z80_l			; point to next table entry.
000DF1r 3  D0 02        	bne :+
000DF3r 3  E6 rr        	inc z80_h
000DF5r 3               :
000DF5r 3  A5 rr        	lda z80_l
000DF7r 3  A0 0D        	ldy #13
000DF9r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000DFBr 3  A5 rr        	lda z80_h
000DFDr 3  A0 0E        	ldy #14
000DFFr 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000E01r 3               grav1:
000E01r 3  A5 rr        	lda z80_a
000E03r 3  D0 01        	bne :+				; any movement required?
000E05r 3  60           	rts				; no, not this time.
000E06r 3               :
000E06r 3  A5 rr        	lda z80_a
000E08r 3  C9 80        	cmp #128			; is it up or down?
000E0Ar 3  B0 15        	bcs gravu			; it's up.
000E0Cr 3               gravd:
000E0Cr 3  85 rr        	sta z80_b			; set pixels to move.
000E0Er 3               gravd0:
000E0Er 3  20 rr rr     	jsr cangd			; can we go down?
000E11r 3  D0 28        	bne gravst			; can't move down, so stop.
000E13r 3  A0 08        	ldy #8
000E15r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000E17r 3  18           	clc
000E18r 3  69 01        	adc #1
000E1Ar 3  91 rr        	sta (z80_ix),y
000E1Cr 3  C6 rr        	dec z80_b
000E1Er 3  D0 EE        	bne gravd0
000E20r 3  60           	rts
000E21r 3               gravu:
000E21r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000E23r 3  18           	clc
000E24r 3  69 01        	adc #1
000E26r 3  85 rr        	sta z80_b			; set pixels to move.
000E28r 3               gravu0:
000E28r 3  20 rr rr     	jsr cangu			; can we go up?
000E2Br 3  D0 6E        	bne ifalls			; can't move up, go down next.
000E2Dr 3  A0 08        	ldy #8
000E2Fr 3  B1 rr        	lda (z80_ix),y
000E31r 3  38           	sec
000E32r 3  E9 01        	sbc #1
000E34r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000E36r 3  C6 rr        	dec z80_b
000E38r 3  D0 EE        	bne gravu0
000E3Ar 3  60           	rts
000E3Br 3               gravst:
000E3Br 3  A0 0D        	ldy #var_jumpLo
000E3Dr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000E3Fr 3  85 rr        	sta z80_l
000E41r 3  A0 0E        	ldy #var_jumpHi
000E43r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000E45r 3  85 rr        	sta z80_h
000E47r 3               
000E47r 3  A9 00        	lda #0				; null value in pointer.
000E49r 3  A0 0D        	ldy #var_jumpLo
000E4Br 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000E4Dr 3  C8           	iny
000E4Er 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000E50r 3               
000E50r 3  A0 00        	ldy #0
000E52r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000E54r 3  C9 63        	cmp #99				; is it the end marker?
000E56r 3               evftf:
000E56r 3  F0 01        	beq :+				; yes, fallen too far.
000E58r 3  60           	rts
000E59r 3               :
000E59r 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000E5Cr 3               
000E5Cr 3               ;------------------------------------------------
000E5Cr 3               ; Initiate fall check.
000E5Cr 3               ;------------------------------------------------
000E5Cr 3               
000E5Cr 3               ifall:
000E5Cr 3  A0 0D        	ldy #var_jumpLo
000E5Er 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000E60r 3  85 rr        	sta z80_l
000E62r 3  A0 0E        	ldy #var_jumpHi
000E64r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000E66r 3  85 rr        	sta z80_h			; high byte in accumulator.
000E68r 3  05 rr        	ora z80_l			; merge in low byte.
000E6Ar 3  F0 01        	beq :+
000E6Cr 3  60           	rts				; if either is set, we're already in the air.
000E6Dr 3               :
000E6Dr 3  A0 09        	ldy #9
000E6Fr 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000E71r 3  85 rr        	sta dispx
000E73r 3  A0 08        	ldy #8
000E75r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000E77r 3  18           	clc
000E78r 3               numsp7:
000E78r 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000E7Ar 3  85 rr        	sta dispy			; set up test coordinates.
000E7Cr 3  20 rr rr     	jsr tstbl			; get map address.
000E7Fr 3  20 rr rr     	jsr plchk			; block, platform check.
000E82r 3  F0 01        	beq :+
000E84r 3  60           	rts				; it's solid, don't fall.
000E85r 3               :
000E85r 3  E6 rr        	inc bufaddr			; look right one cell.
000E87r 3  20 rr rr     	jsr plchk			; block, platform check.
000E8Ar 3  F0 01        	beq :+
000E8Cr 3  60           	rts				; it's solid, don't fall.
000E8Dr 3               :
000E8Dr 3  A5 rr        	lda dispx			; y coordinate.
000E8Fr 3  29 07        	and #7				; position straddling block cells.
000E91r 3  F0 08        	beq ifalls			; no more checks needed.
000E93r 3  E6 rr        	inc bufaddr			; look to third cell.
000E95r 3  20 rr rr     	jsr plchk			; block, platform check.
000E98r 3  F0 01        	beq :+
000E9Ar 3  60           	rts				; it's solid, don't fall.
000E9Br 3               :
000E9Br 3               ifalls:
000E9Br 3  A9 rr        	lda #<jtab			; jump table start.
000E9Dr 3  85 rr        	sta z80_l
000E9Fr 3  A9 rr        	lda #>jtab
000EA1r 3  85 rr        	sta z80_h
000EA3r 3               ifal0:
000EA3r 3  E6 rr        	inc z80_l			; point to next value.
000EA5r 3  D0 02        	bne :+
000EA7r 3  E6 rr        	inc z80_h
000EA9r 3               :
000EA9r 3  A0 00        	ldy #0
000EABr 3  B1 rr        	lda (z80_hl),y			; fetch value.
000EADr 3  F0 F4        	beq ifal0			; no, get next value.
000EAFr 3  C9 63        	cmp #99				; reached end of table?
000EB1r 3  D0 01        	bne :+
000EB3r 3  60           	rts				; yes, don't fall.
000EB4r 3               :
000EB4r 3  C9 80        	cmp #128			; is it going up?
000EB6r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000EB8r 3               
000EB8r 3  A0 0D        	ldy #13
000EBAr 3  A5 rr        	lda z80_l
000EBCr 3  91 rr        	sta (z80_ix),y 			; set jump low.
000EBEr 3  A0 0E        	ldy #14
000EC0r 3  A5 rr        	lda z80_h
000EC2r 3  91 rr        	sta (z80_ix),y 			; set jump high.
000EC4r 3  60           	rts
000EC5r 3               
000EC5r 3               
000EC5r 3               ;----------------------------------------------------
000EC5r 3               ; Get frame data for a particular sprite.
000EC5r 3               ; Input:
000EC5r 3               ;  a		= framenumer
000EC5r 3               ; Output:
000EC5r 3               ;  hl		= frame address
000EC5r 3               ;
000EC5r 3               ; global:	hl,frmptr
000EC5r 3               ; local:	-
000EC5r 3               ; calls:	-
000EC5r 3               ;----------------------------------------------------
000EC5r 3               
000EC5r 3               gfrm:
000EC5r 3  0A           	asl a	 		 	; multiple of 2.
000EC6r 3  18           	clc
000EC7r 3  6D rr rr     	adc frmptr 			; frames used by game.
000ECAr 3  85 rr        	sta z80_l
000ECCr 3  AD rr rr     	lda frmptr+1
000ECFr 3  69 00        	adc #0
000ED1r 3  85 rr        	sta z80_h 			; point to frame start.
000ED3r 3  60           	rts
000ED4r 3               
000ED4r 3               ;----------------------------------------------------
000ED4r 3               ; Find sprite list for current room.
000ED4r 3               ;
000ED4r 3               ; global:	hl
000ED4r 3               ; local:	x,y
000ED4r 3               ; calls:	-
000ED4r 3               ;----------------------------------------------------
000ED4r 3               
000ED4r 3               sprlst:
000ED4r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
000ED6r 3  85 rr        	sta z80_l
000ED8r 3  A9 rr        	lda #>nmedat
000EDAr 3  85 rr        	sta z80_h
000EDCr 3  A6 rr        	ldx scno 			; screen number.
000EDEr 3  D0 01        	bne sprls2 			; is it the first screen?
000EE0r 3  60           	rts 				; yes, don't need to search data.
000EE1r 3               sprls2:
000EE1r 3  A0 00        	ldy #0
000EE3r 3               sprls1:
000EE3r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
000EE5r 3  C9 FF        	cmp #255			; is it an end marker?
000EE7r 3  F0 0E        	beq sprls0 			; yes, end of this room.
000EE9r 3               
000EE9r 3  18           	clc 				; point to next sprite in list.
000EEAr 3  A5 rr        	lda z80_l
000EECr 3  69 04        	adc #NMESIZ
000EEEr 3  85 rr        	sta z80_l
000EF0r 3  90 02        	bcc :+
000EF2r 3  E6 rr        	inc z80_h
000EF4r 3               :
000EF4r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
000EF7r 3               sprls0:
000EF7r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
000EF9r 3  D0 02        	bne :+
000EFBr 3  E6 rr        	inc z80_h
000EFDr 3               :
000EFDr 3  CA           	dex
000EFEr 3  D0 E3        	bne sprls1 			; continue until room found.
000F00r 3  60           	rts
000F01r 3               
000F01r 3               
000F01r 3               ;----------------------------------------------------
000F01r 3               ; Clear all but a single player sprite.
000F01r 3               ;
000F01r 3               ; global:	-
000F01r 3               ; local:	x,y,ix
000F01r 3               ; calls:	-
000F01r 3               ;----------------------------------------------------
000F01r 3               
000F01r 3               nspr:
000F01r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000F03r 3  85 rr        	sta sprcnt
000F05r 3  A9 rr        	lda #<sprtab 			; sprite table.
000F07r 3  85 rr        	sta z80_x
000F09r 3  A9 rr        	lda #>sprtab
000F0Br 3  85 rr        	sta z80_i
000F0Dr 3               nspr0:
000F0Dr 3  A0 00        	ldy #0 				; fetch sprite type.
000F0Fr 3  B1 rr        	lda (z80_ix),y 			; is it a player?
000F11r 3  F0 1A        	beq nspr1 			; yes, keep this one.
000F13r 3               
000F13r 3  A9 FF        	lda #255
000F15r 3  A0 00        	ldy #0 				; fetch sprite type.
000F17r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000F19r 3  A0 05        	ldy #5
000F1Br 3  91 rr        	sta (z80_ix),y 			; remove next type.
000F1Dr 3               
000F1Dr 3  18           	clc	 			; next sprite.
000F1Er 3  A5 rr        	lda z80_x
000F20r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000F22r 3  85 rr        	sta z80_x
000F24r 3  90 02        	bcc :+
000F26r 3  E6 rr        	inc z80_i
000F28r 3               :
000F28r 3  C6 rr        	dec sprcnt	 			; one less space in the table.
000F2Ar 3  D0 E1        	bne nspr0
000F2Cr 3  60           	rts
000F2Dr 3               nspr1:
000F2Dr 3  A9 FF        	lda #255
000F2Fr 3  A0 00        	ldy #0
000F31r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000F33r 3               
000F33r 3  18           	clc	 			; point to next sprite.
000F34r 3  A5 rr        	lda z80_x
000F36r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000F38r 3  85 rr        	sta z80_x
000F3Ar 3  90 02        	bcc :+
000F3Cr 3  E6 rr        	inc z80_i
000F3Er 3               :
000F3Er 3  C6 rr        	dec sprcnt	 			; one less to do.
000F40r 3  D0 01        	bne nspr2
000F42r 3  60           	rts
000F43r 3               nspr2:
000F43r 3  A9 FF        	lda #255
000F45r 3  A0 00        	ldy #0
000F47r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
000F49r 3  A0 05        	ldy #5
000F4Br 3  91 rr        	sta (z80_ix),y 			; remove next type.
000F4Dr 3               
000F4Dr 3  18           	clc	 			; next sprite.
000F4Er 3  A5 rr        	lda z80_x
000F50r 3  69 12        	adc #TABSIZ 			; distance to next odd/even entry.
000F52r 3  85 rr        	sta z80_x
000F54r 3  90 02        	bcc :+
000F56r 3  E6 rr        	inc z80_i
000F58r 3               :
000F58r 3  C6 rr        	dec sprcnt	 			; one less space in table.
000F5Ar 3  D0 E7        	bne nspr2
000F5Cr 3  60           	rts
000F5Dr 3               
000F5Dr 3               ;----------------------------------------------------------
000F5Dr 3               ; Two initialisation routines.
000F5Dr 3               ; Initialise sprites - copy everything from list to table.
000F5Dr 3               ;
000F5Dr 3               ; global:	-
000F5Dr 3               ; local:	x,y,ix
000F5Dr 3               ; calls:	cpsp
000F5Dr 3               ;----------------------------------------------------------
000F5Dr 3               
000F5Dr 3               ispr:
000F5Dr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
000F5Fr 3  85 rr        	sta sprcnt
000F61r 3  A9 rr        	lda #<sprtab			; sprite table.
000F63r 3  85 rr        	sta z80_x
000F65r 3  A9 rr        	lda #>sprtab
000F67r 3  85 rr        	sta z80_i
000F69r 3               ispr2:
000F69r 3  A0 00        	ldy #0
000F6Br 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000F6Dr 3  C9 FF        	cmp #255 			; is it an end marker?
000F6Fr 3  D0 01        	bne :+
000F71r 3  60           	rts 				; yes, no more to do.
000F72r 3               :
000F72r 3               ispr1:
000F72r 3  A0 00        	ldy #0
000F74r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
000F76r 3  C9 FF        	cmp #255 			; is it enabled yet?
000F78r 3  D0 08        	bne ispr4			; yes, try another slot.
000F7Ar 3               
000F7Ar 3  A0 05        	ldy #5
000F7Cr 3  B1 rr        	lda (z80_ix),y		 	; next type.
000F7Er 3  C9 FF        	cmp #255 			; is it enabled yet?
000F80r 3  F0 10        	beq ispr3 			; no, process this one.
000F82r 3               ispr4:
000F82r 3  18           	clc 				; next sprite.
000F83r 3  A5 rr        	lda z80_x
000F85r 3  69 12        	adc #TABSIZ		 	; distance to next odd/even entry.
000F87r 3  85 rr        	sta z80_x
000F89r 3  90 02        	bcc :+
000F8Br 3  E6 rr        	inc z80_i
000F8Dr 3               :
000F8Dr 3  C6 rr        	dec sprcnt
000F8Fr 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
000F91r 3  60           	rts  				; no more room in table.
000F92r 3               ispr3:
000F92r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
000F95r 3  C6 rr        	dec sprcnt			; one less space in the table.
000F97r 3  D0 D0        	bne ispr2
000F99r 3  60           	rts
000F9Ar 3               
000F9Ar 3               
000F9Ar 3               ;-----------------------------------------------------------------------
000F9Ar 3               ; Initialise sprites - but not player, we're keeping the old one.
000F9Ar 3               ;
000F9Ar 3               ; global:	-
000F9Ar 3               ; local:	x,y,ix
000F9Ar 3               ; calls:	cpsp
000F9Ar 3               ;-----------------------------------------------------------------------
000F9Ar 3               
000F9Ar 3               kspr:
000F9Ar 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
000F9Cr 3  A9 rr        	lda #<sprtab 			; sprite table.
000F9Er 3  85 rr        	sta z80_x
000FA0r 3  A9 rr        	lda #>sprtab
000FA2r 3  85 rr        	sta z80_i
000FA4r 3               kspr2:
000FA4r 3  A0 00        	ldy #0
000FA6r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
000FA8r 3  C9 FF        	cmp #255 			; is it an end marker?
000FAAr 3  D0 01        	bne :+
000FACr 3  60           	rts 				; yes, no more to do.
000FADr 3               :
000FADr 3  C9 00        	cmp #0
000FAFr 3  D0 0E        	bne kspr1 			; no, add to table as normal.
000FB1r 3               
000FB1r 3  18           	clc 				; next sprite.
000FB2r 3  A5 rr        	lda z80_l
000FB4r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
000FB6r 3  85 rr        	sta z80_l
000FB8r 3  90 02        	bcc :+
000FBAr 3  E6 rr        	inc z80_h
000FBCr 3               :
000FBCr 3  4C rr rr     	jmp kspr2
000FBFr 3               kspr1:
000FBFr 3  A0 00        	ldy #0 				; fetch sprite type.
000FC1r 3  B1 rr        	lda (z80_ix),y
000FC3r 3  C9 FF        	cmp #255 			; is it enabled yet?
000FC5r 3  D0 08        	bne kspr4 			; yes, try another slot.
000FC7r 3               
000FC7r 3  A0 05        	ldy #5 				; next type.
000FC9r 3  B1 rr        	lda (z80_ix),y
000FCBr 3  C9 FF        	cmp #255 			; is it enabled yet?
000FCDr 3  F0 0F        	beq kspr3 			; no, process this one.
000FCFr 3               kspr4:
000FCFr 3  18           	clc 				; next sprite.
000FD0r 3  A5 rr        	lda z80_x
000FD2r 3  69 12        	adc #TABSIZ		 	; distance to next odd/even entry.
000FD4r 3  85 rr        	sta z80_x
000FD6r 3  90 02        	bcc :+
000FD8r 3  E6 rr        	inc z80_i
000FDAr 3               :
000FDAr 3  CA           	dex	 			; repeat for remaining sprites.
000FDBr 3  D0 E2        	bne kspr1
000FDDr 3  60           	rts  				; no more room in table.
000FDEr 3               kspr3:
000FDEr 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
000FE1r 3  CA           	dex	 			; one less space in the table.
000FE2r 3  D0 C0        	bne kspr2
000FE4r 3  60           	rts
000FE5r 3               
000FE5r 3               ;----------------------------------------------
000FE5r 3               ; Copy sprite from list to table.
000FE5r 3               ;
000FE5r 3               ; global:	hl,ix
000FE5r 3               ; local:	y
000FE5r 3               ; calls:	evnt09
000FE5r 3               ;----------------------------------------------
000FE5r 3               
000FE5r 3               cpsp:
000FE5r 3  A0 00        	ldy #0				; fetch byte from table.
000FE7r 3  B1 rr        	lda (z80_hl),y
000FE9r 3               	; y=var_Type
000FE9r 3  91 rr        	sta (z80_ix),y			; set up type.
000FEBr 3  A0 05        	ldy #var_newType
000FEDr 3  91 rr        	sta (z80_ix),y 			; set up type.
000FEFr 3               
000FEFr 3  E6 rr        	inc z80_l 			; move to next byte.
000FF1r 3  D0 02        	bne :+
000FF3r 3  E6 rr        	inc z80_h
000FF5r 3               :
000FF5r 3  A0 00        	ldy #0 				; fetch byte from table.
000FF7r 3  B1 rr        	lda (z80_hl),y
000FF9r 3  A0 06        	ldy #var_newImage
000FFBr 3  91 rr        	sta (z80_ix),y			; set up image.
000FFDr 3               
000FFDr 3  E6 rr        	inc z80_l 			; move to next byte.
000FFFr 3  D0 02        	bne :+
001001r 3  E6 rr        	inc z80_h
001003r 3               :
001003r 3  A0 00        	ldy #0
001005r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
001007r 3  A0 08        	ldy #var_newY
001009r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00100Br 3               
00100Br 3  A9 C8        	lda #200 			; set initial coordinate off screen.
00100Dr 3  A0 03        	ldy #var_Y
00100Fr 3  91 rr        	sta (z80_ix),y
001011r 3               
001011r 3  E6 rr        	inc z80_l 			; move to next byte.
001013r 3  D0 02        	bne :+
001015r 3  E6 rr        	inc z80_h
001017r 3               :
001017r 3  A0 00        	ldy #0 				; fetch byte from table.
001019r 3  B1 rr        	lda (z80_hl),y
00101Br 3  A0 09        	ldy #var_newX
00101Dr 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00101Fr 3               
00101Fr 3  E6 rr        	inc z80_l 			; move to next byte.
001021r 3  D0 02        	bne :+
001023r 3  E6 rr        	inc z80_h
001025r 3               :
001025r 3  A9 00        	lda #0				; zeroes in accumulator.
001027r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
001029r 3  91 rr        	sta (z80_ix),y
00102Br 3  A0 0A        	ldy #var_Direction 		; reset direction.
00102Dr 3  91 rr        	sta (z80_ix),y
00102Fr 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
001031r 3  91 rr        	sta (z80_ix),y
001033r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
001035r 3  91 rr        	sta (z80_ix),y
001037r 3               
001037r 3  A9 FF        	lda #255 			; reset data pointer to auto-restore.
001039r 3  A0 10        	ldy #var_dataHi
00103Br 3  91 rr        	sta (z80_ix),y
00103Dr 3               
00103Dr 3  AD rr rr     	lda fontcol			; set background INK
001040r 3  A0 11        	ldy #var_colour
001042r 3  91 rr        	sta (z80_ix),y
001044r 3               
001044r 3               evis0:
001044r 3  A5 rr        	lda z80_i
001046r 3  48           	pha
001047r 3  A5 rr        	lda z80_x
001049r 3  48           	pha
00104Ar 3  A5 rr        	lda z80_h
00104Cr 3  48           	pha
00104Dr 3  A5 rr        	lda z80_l
00104Fr 3  48           	pha
001050r 3               
001050r 3  20 rr rr     	jsr evnt09 				; perform event.
001053r 3               
001053r 3  68           	pla
001054r 3  85 rr        	sta z80_l
001056r 3  68           	pla
001057r 3  85 rr        	sta z80_h
001059r 3  68           	pla
00105Ar 3  85 rr        	sta z80_x
00105Cr 3  68           	pla
00105Dr 3  85 rr        	sta z80_i
00105Fr 3               
00105Fr 3  18           	clc
001060r 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
001062r 3  69 12        	adc #TABSIZ		 	; next sprite.
001064r 3  85 rr        	sta z80_x
001066r 3  90 02        	bcc :+
001068r 3  E6 rr        	inc z80_i
00106Ar 3               :
00106Ar 3  60           	rts
00106Br 3               
00106Br 3               
00106Br 3               ;-------------------------------------
00106Br 3               ; Clear the play area window.
00106Br 3               ;-------------------------------------
00106Br 3               
00106Br 3               clw:
00106Br 3  AD rr rr     	lda wintop			; get coordinates of window.
00106Er 3  85 rr        	sta dispy			; put into dispx for calculation.
001070r 3  AD rr rr     	lda winlft
001073r 3  85 rr        	sta dispx
001075r 3               
001075r 3  AD rr rr     	lda winhgt			; height of window.
001078r 3  85 rr        	sta rrow			; copy to b register.
00107Ar 3               clw3:
00107Ar 3  AD rr rr     	lda winwid 			; width of window.
00107Dr 3  85 rr        	sta rcol
00107Fr 3               clw2:
00107Fr 3  20 rr rr     	jsr gprad 			; get print address.
001082r 3  A9 20        	lda #32
001084r 3  20 rr rr     	jsr pchar
001087r 3  E6 rr        	inc dispx			; next column.
001089r 3  C6 rr        	dec rcol			; one less to do.
00108Br 3  D0 F2        	bne clw2			; repeat for remaining columns.
00108Dr 3               
00108Dr 3  AD rr rr     	lda winlft			; get left edge.
001090r 3  85 rr        	sta dispx 			; reset x.
001092r 3  E6 rr        	inc dispy 			; next line down.
001094r 3               
001094r 3  C6 rr        	dec rrow
001096r 3  D0 E2        	bne clw3			; repeat down the screen.
001098r 3               
001098r 3  AD rr rr     	lda wintop			; get coordinates of window.
00109Br 3  85 rr        	sta chary			; put into display position.
00109Dr 3  AD rr rr     	lda winlft
0010A0r 3  85 rr        	sta charx
0010A2r 3  60           	rts
0010A3r 3               
0010A3r 3               
0010A3r 3               ;----------------------------------------------------------
0010A3r 3               ; Effects code.
0010A3r 3               ; Ticker routine is called 25 times per second.
0010A3r 3               ;
0010A3r 3               ; txtini = text scroller address
0010A3r 3               ; txtscr = left text screen address
0010A3r 3               ; txtwid = scroller width
0010A3r 3               ; txtbit = 128
0010A3r 3               ; X      = message nr
0010A3r 3               ;----------------------------------------------------------
0010A3r 3               
0010A3r 3               .if sflag
0010A3r 3               
0010A3r 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
0010A3r 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
0010A3r 3               		.byte $00,$10,$20,$30,$40,$50
0010A3r 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
0010A3r 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
0010A3r 3               		.byte $01,$01,$01,$01,$01,$01
0010A3r 3               
0010A3r 3               scrly:
0010A3r 3               
0010A3r 3               ; Set scr_l = txtscr
0010A3r 3               
0010A3r 3               	rts
0010A3r 3               	.word txtscr         	; set scr_l = left screen address.
0010A3r 3               	sta scr_l
0010A3r 3               	sta scr_r
0010A3r 3               	lda txtscr+1
0010A3r 3               	sta scr_l+1
0010A3r 3               	sta scr_r+1
0010A3r 3               
0010A3r 3               	stx xtmp		; save x
0010A3r 3               
0010A3r 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
0010A3r 3               
0010A3r 3               	ldx txtwid
0010A3r 3               	dex
0010A3r 3               	lda scrollpos_lb,x
0010A3r 3               	clc
0010A3r 3               	adc scr_r
0010A3r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
0010A3r 3               	bcc :+
0010A3r 3               	inc scr_r+1
0010A3r 3               :
0010A3r 3               	clc
0010A3r 3               	lda scrollpos_hb,x
0010A3r 3               	adc scr_r+1
0010A3r 3               	sta scr_r+1
0010A3r 3               
0010A3r 3               ; Scroll string
0010A3r 3               
0010A3r 3               	lda #0
0010A3r 3               	sta line_cnt		; Set line counter
0010A3r 3               scrly1:
0010A3r 3               	clc
0010A3r 3               	lda scr_r
0010A3r 3               	adc line_cnt
0010A3r 3               	sta scr_tmp
0010A3r 3               	lda scr_r+1
0010A3r 3               	sta scr_tmp+1
0010A3r 3               
0010A3r 3               	ldx txtwid		; set column counter
0010A3r 3               	dex
0010A3r 3               	ldy #0
0010A3r 3               	clc			; Reset pixel to be shifted in
0010A3r 3               scrly0:
0010A3r 3               	lda (scr_tmp),y
0010A3r 3               	rol a			; Shift screenbyte
0010A3r 3               	sta (scr_tmp),y		; store screenbyte
0010A3r 3               	php			; save carry
0010A3r 3               
0010A3r 3               	sec			; subtract 16 form screenaddress
0010A3r 3               	lda scr_tmp
0010A3r 3               	sbc #$10
0010A3r 3               	sta scr_tmp
0010A3r 3               	bcs :+
0010A3r 3               	dec scr_tmp+1
0010A3r 3               :
0010A3r 3               	plp			; restore carry
0010A3r 3               	dex			; previous column
0010A3r 3               	bpl scrly0		; repeat for all columns
0010A3r 3               
0010A3r 3               	inc line_cnt		; next line
0010A3r 3               	lda line_cnt
0010A3r 3               	cmp #8
0010A3r 3               	bne scrly1		; repeat for 8 lines
0010A3r 3               
0010A3r 3               ; Get next character in string
0010A3r 3               
0010A3r 3               	lda txtpos 		; get text pointer.
0010A3r 3               	sta scr_txt
0010A3r 3               	lda txtpos+1
0010A3r 3               	sta scr_txt+1
0010A3r 3               
0010A3r 3               	ldy #0
0010A3r 3               	lda (scr_txt),y 	; find character we're displaying.
0010A3r 3               	and #127 		; remove end marker bit if applicable.
0010A3r 3               	cmp #13			; is it newline?
0010A3r 3               	bne scrly5 		; no, it's okay.
0010A3r 3               	lda #32			; convert to a space instead.
0010A3r 3               scrly5:
0010A3r 3               	sta fntaddr		; calculate char address
0010A3r 3               	lda #0
0010A3r 3               	sta fntaddr+1
0010A3r 3               	asl fntaddr  		; multiply char by 8.
0010A3r 3               	rol fntaddr+1
0010A3r 3               	asl fntaddr
0010A3r 3               	rol fntaddr+1
0010A3r 3               	asl fntaddr
0010A3r 3               	rol fntaddr+1
0010A3r 3               	lda fntaddr
0010A3r 3               	clc
0010A3r 3               	adc #<(FONT-256)
0010A3r 3               	sta scrly3+1		; that's the low byte.
0010A3r 3               	lda fntaddr+1
0010A3r 3               	adc #>(FONT-256)
0010A3r 3               	sta scrly3+2		; add displacement.
0010A3r 3               
0010A3r 3               	ldy #0
0010A3r 3               scrly3:
0010A3r 3               	lda $3333,y		; get image of char line.
0010A3r 3               	and txtbit
0010A3r 3               	beq scrly2		; don't plot pixel
0010A3r 3               	lda (scr_r),y
0010A3r 3               	clc
0010A3r 3               	ora #1
0010A3r 3               	sta (scr_r),y		; plot pixel
0010A3r 3               scrly2:
0010A3r 3               	iny			; next line of char.
0010A3r 3               	cpy #8
0010A3r 3               	bne scrly3
0010A3r 3               
0010A3r 3               	lsr txtbit		; bit of text to display.
0010A3r 3               	bcs :+
0010A3r 3               	rts
0010A3r 3               :
0010A3r 3               	ldy #0
0010A3r 3               	lda (scr_txt),y 	; what was the character?
0010A3r 3               	asl a	  		; end of message?
0010A3r 3               	bcs scrly4
0010A3r 3               	inc txtpos
0010A3r 3               	bne :+
0010A3r 3               	inc txtpos+1
0010A3r 3               :
0010A3r 3               	jmp scrly6 		; not yet - continue.
0010A3r 3               scrly4:
0010A3r 3               	lda txtini 		; start of scrolling message.
0010A3r 3               	sta txtpos
0010A3r 3               	lda txtini+1
0010A3r 3               	sta txtpos+1
0010A3r 3               scrly6:
0010A3r 3               	lda #128
0010A3r 3               	sta txtbit
0010A3r 3               	ldx xtmp
0010A3r 3               	rts
0010A3r 3               
0010A3r 3               tmp_byte:	.byte 0
0010A3r 3               line_cnt:	.byte 0
0010A3r 3               
0010A3r 3               ;-------------------------------------------------------
0010A3r 3               ; Entry TICKER command
0010A3r 3               ;
0010A3r 3               ; Entry:
0010A3r 3               ;  z80_b = message nr
0010A3r 3               ;  z80_c = width
0010A3r 3               ;-------------------------------------------------------
0010A3r 3               
0010A3r 3               iscrly:
0010A3r 3               	jsr prescr 		; set up display position.
0010A3r 3               	lda #<msgdat 		; text messages.
0010A3r 3               	sta z80_l
0010A3r 3               	lda #>msgdat
0010A3r 3               	sta z80_h
0010A3r 3               	lda z80_c 		; width.
0010A3r 3               	sec
0010A3r 3               	sbc #1			; subtract one.
0010A3r 3               	cmp #32 		; is it between 1 and 32?
0010A3r 3               	bcc :+
0010A3r 3               	lda #$60
0010A3r 3               	jmp iscrl0		; no, disable messages.
0010A3r 3               :
0010A3r 3               	ldx z80_b		; message number.
0010A3r 3               	jsr getwrd 		; find message start.
0010A3r 3               
0010A3r 3               	lda z80_l		; set initial text position.
0010A3r 3               	sta txtini
0010A3r 3               	lda z80_h
0010A3r 3               	sta txtini+1
0010A3r 3               
0010A3r 3               	lda #$ad		; code for lda adrr
0010A3r 3               iscrl0:
0010A3r 3               	sta scrly		; enable/disable scrolling routine.
0010A3r 3               
0010A3r 3               	jsr prescr 		; set up display position.
0010A3r 3               	jsr gprad 		; get print address.
0010A3r 3               
0010A3r 3               	lda scraddr 		; set text screen address.
0010A3r 3               	sta txtscr
0010A3r 3               	lda scraddr+1
0010A3r 3               	sta txtscr+1
0010A3r 3               
0010A3r 3               	lda z80_c		; width.
0010A3r 3               	sta txtwid		; set width in working storage.
0010A3r 3               
0010A3r 3               	lda #128 		; start with leftmost bit.
0010A3r 3               	sta txtbit
0010A3r 3               
0010A3r 3               	jmp scrly4
0010A3r 3               .endif
0010A3r 3               
0010A3r 3               ;------------------------------------------------------------------
0010A3r 3               ; Dig routine, conditional assembly depending on dflag
0010A3r 3               ;------------------------------------------------------------------
0010A3r 3               .if dflag
0010A3r 3               dig:
0010A3r 3  29 03        	and #3
0010A5r 3  F0 3B        	beq digr		; dig right
0010A7r 3  C9 01        	cmp #1
0010A9r 3  F0 26        	beq digl		; dig left
0010ABr 3  C9 02        	cmp #2
0010ADr 3  F0 11        	beq digd		; dig down
0010AFr 3               
0010AFr 3               ; Dig up.
0010AFr 3               
0010AFr 3               digu:				; dig up
0010AFr 3  A0 08        	ldy #8
0010B1r 3  B1 rr        	lda (z80_ix),y
0010B3r 3  38           	sec
0010B4r 3  E9 02        	sbc #2
0010B6r 3  85 rr        	sta dispy		; set y
0010B8r 3               
0010B8r 3  C8           	iny
0010B9r 3  B1 rr        	lda (z80_ix),y
0010BBr 3  85 rr        	sta dispx		; set x
0010BDr 3  4C rr rr     	jmp digv
0010C0r 3               
0010C0r 3               ; Dig down.
0010C0r 3               
0010C0r 3               digd:
0010C0r 3  A0 09        	ldy #9
0010C2r 3  B1 rr        	lda (z80_ix),y
0010C4r 3  85 rr        	sta dispx		; set y
0010C6r 3               
0010C6r 3  88           	dey
0010C7r 3  18           	clc
0010C8r 3  B1 rr        	lda (z80_ix),y
0010CAr 3  69 10        	adc #16
0010CCr 3  85 rr        	sta dispy		; set y
0010CEr 3  4C rr rr     	jmp digv
0010D1r 3               
0010D1r 3               ; Dig left.
0010D1r 3               
0010D1r 3               digl:
0010D1r 3  A0 08        	ldy #8
0010D3r 3  B1 rr        	lda (z80_ix),y
0010D5r 3  85 rr        	sta dispy		; set y
0010D7r 3               
0010D7r 3  C8           	iny
0010D8r 3  B1 rr        	lda (z80_ix),y
0010DAr 3  38           	sec
0010DBr 3  E9 02        	sbc #2			; x=x-2
0010DDr 3  85 rr        	sta dispx		; set x
0010DFr 3  4C rr rr     	jmp digh
0010E2r 3               
0010E2r 3               ; Dig right.
0010E2r 3               
0010E2r 3               digr:
0010E2r 3  A0 08        	ldy #8
0010E4r 3  B1 rr        	lda (z80_ix),y
0010E6r 3  85 rr        	sta dispy		; set y
0010E8r 3               
0010E8r 3  C8           	iny
0010E9r 3  B1 rr        	lda (z80_ix),y
0010EBr 3  18           	clc
0010ECr 3  69 10        	adc #16
0010EEr 3  85 rr        	sta dispx		; set x+16
0010F0r 3  4C rr rr     	jmp digh
0010F3r 3               
0010F3r 3               ; Vertical digging
0010F3r 3               
0010F3r 3               digv:
0010F3r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
0010F6r 3  20 rr rr     	jsr fdchk		; test if FODDER
0010F9r 3               
0010F9r 3  18           	clc
0010FAr 3  A5 rr        	lda dispx		; look 1 cell down
0010FCr 3  69 08        	adc #8
0010FEr 3  85 rr        	sta dispx
001100r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
001103r 3  20 rr rr     	jsr fdchk
001106r 3  A5 rr        	lda dispx
001108r 3  29 07        	and #7
00110Ar 3  D0 01        	bne :+
00110Cr 3  60           	rts
00110Dr 3               :
00110Dr 3  18           	clc
00110Er 3  A5 rr        	lda dispx		; look 1 cell down
001110r 3  69 08        	adc #8
001112r 3  85 rr        	sta dispx
001114r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
001117r 3  4C rr rr     	jmp fdchk
00111Ar 3               
00111Ar 3               ; Horizontal digging
00111Ar 3               
00111Ar 3               digh:
00111Ar 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
00111Dr 3  20 rr rr     	jsr fdchk		; test if FODDER
001120r 3               
001120r 3  18           	clc
001121r 3  A5 rr        	lda dispy		; look 1 cell down
001123r 3  69 08        	adc #8
001125r 3  85 rr        	sta dispy
001127r 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
00112Ar 3  20 rr rr     	jsr fdchk
00112Dr 3  A5 rr        	lda dispy
00112Fr 3  29 07        	and #7
001131r 3  D0 01        	bne :+
001133r 3  60           	rts
001134r 3               :
001134r 3  18           	clc
001135r 3  A5 rr        	lda dispy		; look 1 cell down
001137r 3  69 08        	adc #8
001139r 3  85 rr        	sta dispy
00113Br 3  20 rr rr     	jsr tstbl		; check blocktype in MAP
00113Er 3  4C rr rr     	jmp fdchk
001141r 3               
001141r 3  00           digcnt:	.byte 0
001142r 3               
001142r 3               .endif
001142r 3               
001142r 3               ;------------------------------------------------------------------
001142r 3               ; Sprite table
001142r 3               ;------------------------------------------------------------------
001142r 3               
001142r 3               
001142r 3               ; ix+0  = type.
001142r 3               ; ix+1  = sprite image number.
001142r 3               ; ix+2  = frame.
001142r 3               ; ix+3  = y coord.
001142r 3               ; ix+4  = x coord.
001142r 3               
001142r 3               ; ix+5  = new type.
001142r 3               ; ix+6  = new image number.
001142r 3               ; ix+7  = new frame.
001142r 3               ; ix+8  = new y coord.
001142r 3               ; ix+9  = new x coord.
001142r 3               
001142r 3               ; ix+10 = direction.
001142r 3               ; ix+11 = parameter 1.
001142r 3               ; ix+12 = parameter 2.
001142r 3               ; ix+13 = jump pointer low.
001142r 3               ; ix+14 = jump pointer high.
001142r 3               ; ix+15 = data pointer low.
001142r 3               ; ix+16 = data pointer high.
001142r 3               
001142r 3               ; block NUMSPR * TABSIZ,255
001142r 3               
001142r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
001146r 3  FF FF FF FF  
00114Ar 3  FF FF FF FF  
00121Ar 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
00121Er 3  FF FF FF 00  
001222r 3  C0 78 00 00  
00122Br 3  07           roomtb:	.byte 7                      ; start room map offset.
00122Cr 3               
00122Cr 3               setfgcol:
00122Cr 3               setbgcol:
00122Cr 3  60           	rts
00122Dr 3               
00122Dr 3               ; User routine.  Put your own code in here to be called with USER instruction.
00122Dr 3               ; if USER has an argument it will be passed in the accumulator.
00122Dr 3               
00122Dr 3               user:
00122Dr 3               	.include "user.inc"
00122Dr 4  60           	rts
00122Er 4               
00122Er 3               
00122Er 3               ; Everything below here will be generated by the editors.
00122Er 3               
00122Er 3               
00122Er 3  60                   rts
00122Fr 3               WINDOWTOP = 0
00122Fr 3               WINDOWLFT = 0
00122Fr 3               WINDOWHGT = 22
00122Fr 3               WINDOWWID = 22 ;a
00122Fr 3               MAPWID = 3
00122Fr 3  FF FF FF             .byte 255,255,255
001232r 3               mapdat:
001232r 3  00 08 10 01          .byte 0,8,16,1,9,17,2,10,18,3,11,19,4,12,20,5,13,21,6,14,22,7,15,23
001236r 3  09 11 02 0A  
00123Ar 3  12 03 0B 13  
00124Ar 3  FF FF FF             .byte 255,255,255
00124Dr 3  00           stmap:  .byte 0
00124Er 3               
00124Er 3               evnt00:
00124Er 3  A9 02                lda #2 	; COLLISION
001250r 3  85 rr                sta z80_b
001252r 3  20 rr rr             jsr sktyp
001255r 3  B0 03                bcs :+
001257r 3  4C rr rr             jmp a00057
00125Ar 3               :
00125Ar 3  A9 00                lda #0
00125Cr 3  C5 rr                cmp varc
00125Er 3  F0 03                beq *+5
001260r 3  4C rr rr             jmp a00057
001263r 3  A9 08                lda #8
001265r 3  A0 05                ldy #5
001267r 3  91 rr                sta (z80_ix),y
001269r 3  A9 00        a00057: lda #0
00126Br 3  C5 rr                cmp vare
00126Dr 3  F0 03                beq *+5
00126Fr 3  4C rr rr             jmp a00196
001272r 3  A9 01                lda #1
001274r 3  C5 rr                cmp scno
001276r 3  90 03                bcc *+5
001278r 3  4C rr rr             jmp a00196
00127Br 3  A9 08                lda #8
00127Dr 3  85 rr                sta chary
00127Fr 3  A9 08                lda #8
001281r 3  85 rr                sta charx
001283r 3  A9 01                lda #1		; PRINTMODE
001285r 3  85 rr                sta prtmod
001287r 3  A9 02                lda #2 	; INK
001289r 3  8D rr rr             sta fontcol
00128Cr 3  A9 05                lda #5  	; MESSAGE
00128Er 3  20 rr rr             jsr dmsg
001291r 3  A9 00                lda #0		; PRINTMODE
001293r 3  85 rr                sta prtmod
001295r 3  A9 01                lda #1 	; INK
001297r 3  8D rr rr             sta fontcol
00129Ar 3  A9 5A                lda #90 	; DELAY
00129Cr 3  20 rr rr             jsr delay
00129Fr 3  20 rr rr             jsr redraw	; REDRAW
0012A2r 3  A9 00                lda #0
0012A4r 3  85 rr                sta varz
0012A6r 3  A9 01                lda #1
0012A8r 3  85 rr                sta vare
0012AAr 3  A5 rr        a00196: lda joyval	; KEY
0012ACr 3  29 20                and #32
0012AEr 3  F0 03                beq :+
0012B0r 3  4C rr rr             jmp a00228
0012B3r 3               :
0012B3r 3  A9 08                lda #8
0012B5r 3  A0 05                ldy #5
0012B7r 3  91 rr                sta (z80_ix),y
0012B9r 3  A5 rr        a00228: lda joyval	; KEY
0012BBr 3  29 40                and #64
0012BDr 3  F0 03                beq :+
0012BFr 3  4C rr rr             jmp a00256
0012C2r 3               :
0012C2r 3  A9 1F                lda #31
0012C4r 3  85 rr                sta varm
0012C6r 3  A9 05        a00256: lda #DEADLY	; DEADLY
0012C8r 3  85 rr                sta z80_b
0012CAr 3  20 rr rr             jsr tded
0012CDr 3  C5 rr                cmp z80_b
0012CFr 3  F0 03                beq :+
0012D1r 3  4C rr rr             jmp a00299
0012D4r 3               :
0012D4r 3  A9 08                lda #8
0012D6r 3  A0 05                ldy #5
0012D8r 3  91 rr                sta (z80_ix),y
0012DAr 3  A9 06        a00299: lda #CUSTOM	; CUSTOM
0012DCr 3  85 rr                sta z80_b
0012DEr 3  20 rr rr             jsr tded
0012E1r 3  C5 rr                cmp z80_b
0012E3r 3  F0 03                beq :+
0012E5r 3  4C rr rr             jmp a00497
0012E8r 3               :
0012E8r 3  A5 rr                lda joyval	; KEY
0012EAr 3  29 08                and #8
0012ECr 3  F0 03                beq :+
0012EEr 3  4C rr rr             jmp a00493
0012F1r 3               :
0012F1r 3  A9 0A                lda #10
0012F3r 3  85 rr                sta z80_c
0012F5r 3  A0 08                ldy #8
0012F7r 3  B1 rr                lda (z80_ix),y
0012F9r 3  38                   sec
0012FAr 3  E5 rr                sbc z80_c
0012FCr 3  A0 08                ldy #8
0012FEr 3  91 rr                sta (z80_ix),y
001300r 3  A9 01                lda #1 	; COLLISION
001302r 3  85 rr                sta z80_b
001304r 3  20 rr rr             jsr sktyp
001307r 3  B0 03                bcs :+
001309r 3  4C rr rr             jmp a00447
00130Cr 3               :
00130Cr 3  A9 0A                lda #10
00130Er 3  85 rr                sta z80_c
001310r 3  A0 08                ldy #8
001312r 3  B1 rr                lda (z80_ix),y
001314r 3  18                   clc
001315r 3  65 rr                adc z80_c
001317r 3  A0 08                ldy #8
001319r 3  91 rr                sta (z80_ix),y
00131Br 3  4C rr rr             jmp a00493
00131Er 3  A9 2D        a00447: lda #45		; BEEP
001320r 3  8D rr rr             sta sndtyp
001323r 3  A9 0E                lda #14
001325r 3  85 rr                sta z80_c
001327r 3  A0 08                ldy #8
001329r 3  B1 rr                lda (z80_ix),y
00132Br 3  38                   sec
00132Cr 3  E5 rr                sbc z80_c
00132Er 3  A0 08                ldy #8
001330r 3  91 rr                sta (z80_ix),y
001332r 3  4C rr rr     a00493: jmp a00684
001335r 3  20 rr rr     a00497: jsr laddd	; LADDERBELOW
001338r 3  F0 03                beq :+
00133Ar 3  4C rr rr             jmp a00684
00133Dr 3               :
00133Dr 3  A5 rr                lda joyval	; KEY
00133Fr 3  29 04                and #4
001341r 3  F0 03                beq :+
001343r 3  4C rr rr             jmp a00679
001346r 3               :
001346r 3  A9 0C                lda #12
001348r 3  85 rr                sta z80_c
00134Ar 3  A0 08                ldy #8
00134Cr 3  B1 rr                lda (z80_ix),y
00134Er 3  18                   clc
00134Fr 3  65 rr                adc z80_c
001351r 3  A0 08                ldy #8
001353r 3  91 rr                sta (z80_ix),y
001355r 3  A9 01                lda #1 	; COLLISION
001357r 3  85 rr                sta z80_b
001359r 3  20 rr rr             jsr sktyp
00135Cr 3  B0 03                bcs :+
00135Er 3  4C rr rr             jmp a00633
001361r 3               :
001361r 3  A9 0C                lda #12
001363r 3  85 rr                sta z80_c
001365r 3  A0 08                ldy #8
001367r 3  B1 rr                lda (z80_ix),y
001369r 3  38                   sec
00136Ar 3  E5 rr                sbc z80_c
00136Cr 3  A0 08                ldy #8
00136Er 3  91 rr                sta (z80_ix),y
001370r 3  4C rr rr             jmp a00679
001373r 3  A9 28        a00633: lda #40		; BEEP
001375r 3  8D rr rr             sta sndtyp
001378r 3  A9 0C                lda #12
00137Ar 3  85 rr                sta z80_c
00137Cr 3  A0 08                ldy #8
00137Er 3  B1 rr                lda (z80_ix),y
001380r 3  18                   clc
001381r 3  65 rr                adc z80_c
001383r 3  A0 08                ldy #8
001385r 3  91 rr                sta (z80_ix),y
001387r 3  4C rr rr     a00679: jmp a00684
00138Ar 3  A0 08        a00684: ldy #8
00138Cr 3  B1 rr                lda (z80_ix),y
00138Er 3  4A                   lsr a
00138Fr 3  A0 08                ldy #8
001391r 3  91 rr                sta (z80_ix),y
001393r 3  A0 08                ldy #8
001395r 3  B1 rr                lda (z80_ix),y
001397r 3  0A                   asl a
001398r 3  A0 08                ldy #8
00139Ar 3  91 rr                sta (z80_ix),y
00139Cr 3  A0 09                ldy #9
00139Er 3  B1 rr                lda (z80_ix),y
0013A0r 3  4A                   lsr a
0013A1r 3  A0 09                ldy #9
0013A3r 3  91 rr                sta (z80_ix),y
0013A5r 3  A0 09                ldy #9
0013A7r 3  B1 rr                lda (z80_ix),y
0013A9r 3  0A                   asl a
0013AAr 3  A0 09                ldy #9
0013ACr 3  91 rr                sta (z80_ix),y
0013AEr 3  A0 08                ldy #8
0013B0r 3  B1 rr                lda (z80_ix),y
0013B2r 3  85 rr                sta varj
0013B4r 3  A0 09                ldy #9
0013B6r 3  B1 rr                lda (z80_ix),y
0013B8r 3  85 rr                sta vark
0013BAr 3  20 rr rr             jsr cangd	; CANGODOWN
0013BDr 3  F0 03                beq :+
0013BFr 3  4C rr rr             jmp a01005
0013C2r 3               :
0013C2r 3  A9 01                lda #1 	; COLLISION
0013C4r 3  85 rr                sta z80_b
0013C6r 3  20 rr rr             jsr sktyp
0013C9r 3  B0 03                bcs :+
0013CBr 3  4C rr rr             jmp a00998
0013CEr 3               :
0013CEr 3  A0 08                ldy #8
0013D0r 3  B1 rr                lda (z80_ix),y
0013D2r 3  C5 rr                cmp varq
0013D4r 3  90 03                bcc *+5
0013D6r 3  4C rr rr             jmp a00993
0013D9r 3  A0 08                ldy #8
0013DBr 3  B1 rr                lda (z80_ix),y
0013DDr 3  85 rr                sta z80_c
0013DFr 3  A5 rr                lda varq
0013E1r 3  38                   sec
0013E2r 3  E5 rr                sbc z80_c
0013E4r 3  85 rr                sta varq
0013E6r 3  A9 08                lda #8
0013E8r 3  C5 rr                cmp varq
0013EAr 3  90 03                bcc *+5
0013ECr 3  4C rr rr             jmp a00993
0013EFr 3  A5 rr                lda varq
0013F1r 3  85 rr                sta z80_c
0013F3r 3  A5 rr                lda varp
0013F5r 3  18                   clc
0013F6r 3  65 rr                adc z80_c
0013F8r 3  85 rr                sta varp
0013FAr 3  A5 rr                lda varq
0013FCr 3  A0 08                ldy #8
0013FEr 3  91 rr                sta (z80_ix),y
001400r 3  A9 10                lda #16
001402r 3  85 rr                sta z80_c
001404r 3  A0 08                ldy #8
001406r 3  B1 rr                lda (z80_ix),y
001408r 3  38                   sec
001409r 3  E5 rr                sbc z80_c
00140Br 3  A0 08                ldy #8
00140Dr 3  91 rr                sta (z80_ix),y
00140Fr 3  20 rr rr             jsr gravst	; STOPFALL
001412r 3  4C rr rr     a00993: jmp a01005
001415r 3  20 rr rr     a00998: jsr ifall	; TABLEFALL
001418r 3  A5 rr        a01005: lda joyval	; KEY
00141Ar 3  29 01                and #1
00141Cr 3  F0 03                beq :+
00141Er 3  4C rr rr             jmp a01379
001421r 3               :
001421r 3  A9 00                lda #0
001423r 3  A0 06                ldy #6
001425r 3  91 rr                sta (z80_ix),y
001427r 3  A9 00                lda #0
001429r 3  85 rr                sta vard
00142Br 3  A9 9F                lda #159
00142Dr 3  A0 09                ldy #9
00142Fr 3  D1 rr                cmp (z80_ix),y
001431r 3  90 03                bcc *+5
001433r 3  4C rr rr             jmp a01182
001436r 3  A9 00                lda #0
001438r 3  A0 09                ldy #9
00143Ar 3  91 rr                sta (z80_ix),y
00143Cr 3  20 rr rr             jsr cangr	; CANGORIGHT
00143Fr 3  F0 03                beq :+
001441r 3  4C rr rr             jmp a01116
001444r 3               :
001444r 3  A9 00                lda #0
001446r 3  A0 09                ldy #9
001448r 3  91 rr                sta (z80_ix),y
00144Ar 3  4C rr rr             jmp a01172
00144Dr 3  A9 A0        a01116: lda #160
00144Fr 3  A0 09                ldy #9
001451r 3  91 rr                sta (z80_ix),y
001453r 3  20 rr rr             jsr cangd	; CANGODOWN
001456r 3  F0 03                beq :+
001458r 3  4C rr rr             jmp a01172
00145Br 3               :
00145Br 3  A0 08                ldy #8 		; SPRITEDOWN
00145Dr 3  B1 rr                lda (z80_ix),y
00145Fr 3  18                   clc
001460r 3  69 02                adc #2
001462r 3  91 rr                sta (z80_ix),y
001464r 3  60           a01172: rts		; EXIT
001465r 3  4C rr rr             jmp a01379
001468r 3  20 rr rr     a01182: jsr cangr	; CANGORIGHT
00146Br 3  F0 03                beq :+
00146Dr 3  4C rr rr             jmp a01370
001470r 3               :
001470r 3  A9 00                lda #0
001472r 3  A0 06                ldy #6
001474r 3  91 rr                sta (z80_ix),y
001476r 3  A9 00                lda #0
001478r 3  C5 rr                cmp vara
00147Ar 3  F0 03                beq *+5
00147Cr 3  4C rr rr             jmp a01240
00147Fr 3  A9 00                lda #0		; ANIMATE
001481r 3  20 rr rr             jsr animsp
001484r 3  A9 00        a01240: lda #0	; DIG
001486r 3  20 rr rr             jsr dig
001489r 3  A0 09                ldy #9 		; SPRITERIGHT
00148Br 3  B1 rr                lda (z80_ix),y
00148Dr 3  18                   clc
00148Er 3  69 02                adc #2
001490r 3  91 rr                sta (z80_ix),y
001492r 3  A9 00                lda #0
001494r 3  C5 rr                cmp vara
001496r 3  F0 03                beq *+5
001498r 3  4C rr rr             jmp a01341
00149Br 3  A9 0A                lda #10
00149Dr 3  85 rr                sta z80_d	; GETRANDOM
00149Fr 3  20 rr rr             jsr random
0014A2r 3  85 rr                sta z80_h
0014A4r 3  20 rr rr             jsr imul
0014A7r 3  A5 rr                lda z80_h
0014A9r 3  85 rr                sta varrnd
0014ABr 3  A5 rr                lda varrnd	; BEEP
0014ADr 3  29 7F                and #127
0014AFr 3  8D rr rr             sta sndtyp
0014B2r 3  20 rr rr     a01341: jsr cangd	; CANGODOWN
0014B5r 3  F0 03                beq :+
0014B7r 3  4C rr rr             jmp a01365
0014BAr 3               :
0014BAr 3  20 rr rr             jsr ifall	; TABLEFALL
0014BDr 3  4C rr rr     a01365: jmp a01379
0014C0r 3  A9 00        a01370: lda #0	; DIG
0014C2r 3  20 rr rr             jsr dig
0014C5r 3  A5 rr        a01379: lda joyval	; KEY
0014C7r 3  29 02                and #2
0014C9r 3  F0 03                beq :+
0014CBr 3  4C rr rr             jmp a01760
0014CEr 3               :
0014CEr 3  A9 01                lda #1
0014D0r 3  85 rr                sta vard
0014D2r 3  A9 00                lda #0
0014D4r 3  A0 09                ldy #9
0014D6r 3  D1 rr                cmp (z80_ix),y
0014D8r 3  B0 03                bcs *+5
0014DAr 3  4C rr rr             jmp a01542
0014DDr 3  A9 A0                lda #160
0014DFr 3  A0 09                ldy #9
0014E1r 3  91 rr                sta (z80_ix),y
0014E3r 3  20 rr rr             jsr cangl	; CANGOLEFT
0014E6r 3  F0 03                beq :+
0014E8r 3  4C rr rr             jmp a01477
0014EBr 3               :
0014EBr 3  A9 A0                lda #160
0014EDr 3  A0 09                ldy #9
0014EFr 3  91 rr                sta (z80_ix),y
0014F1r 3  4C rr rr             jmp a01533
0014F4r 3  A9 00        a01477: lda #0
0014F6r 3  A0 09                ldy #9
0014F8r 3  91 rr                sta (z80_ix),y
0014FAr 3  20 rr rr             jsr cangd	; CANGODOWN
0014FDr 3  F0 03                beq :+
0014FFr 3  4C rr rr             jmp a01533
001502r 3               :
001502r 3  A0 08                ldy #8 		; SPRITEDOWN
001504r 3  B1 rr                lda (z80_ix),y
001506r 3  18                   clc
001507r 3  69 02                adc #2
001509r 3  91 rr                sta (z80_ix),y
00150Br 3  60           a01533: rts		; EXIT
00150Cr 3  4C rr rr             jmp a01760
00150Fr 3  A9 01        a01542: lda #1
001511r 3  A0 06                ldy #6
001513r 3  91 rr                sta (z80_ix),y
001515r 3  20 rr rr             jsr cangl	; CANGOLEFT
001518r 3  F0 03                beq :+
00151Ar 3  4C rr rr             jmp a01744
00151Dr 3               :
00151Dr 3  A9 01                lda #1
00151Fr 3  A0 06                ldy #6
001521r 3  91 rr                sta (z80_ix),y
001523r 3  A9 00                lda #0
001525r 3  C5 rr                cmp vara
001527r 3  F0 03                beq *+5
001529r 3  4C rr rr             jmp a01613
00152Cr 3  A9 00                lda #0		; ANIMATE
00152Er 3  20 rr rr             jsr animsp
001531r 3  A9 01        a01613: lda #1	; DIG
001533r 3  20 rr rr             jsr dig
001536r 3  A0 09                ldy #9 		; SPRITELEFT
001538r 3  B1 rr                lda (z80_ix),y
00153Ar 3  38                   sec
00153Br 3  E9 02                sbc #2
00153Dr 3  91 rr                sta (z80_ix),y
00153Fr 3  A9 00                lda #0
001541r 3  C5 rr                cmp vara
001543r 3  F0 03                beq *+5
001545r 3  4C rr rr             jmp a01715
001548r 3  A9 0A                lda #10
00154Ar 3  85 rr                sta z80_d	; GETRANDOM
00154Cr 3  20 rr rr             jsr random
00154Fr 3  85 rr                sta z80_h
001551r 3  20 rr rr             jsr imul
001554r 3  A5 rr                lda z80_h
001556r 3  85 rr                sta varrnd
001558r 3  A5 rr                lda varrnd	; BEEP
00155Ar 3  29 7F                and #127
00155Cr 3  8D rr rr             sta sndtyp
00155Fr 3  20 rr rr     a01715: jsr cangd	; CANGODOWN
001562r 3  F0 03                beq :+
001564r 3  4C rr rr             jmp a01739
001567r 3               :
001567r 3  20 rr rr             jsr ifall	; TABLEFALL
00156Ar 3  4C rr rr     a01739: jmp a01760
00156Dr 3  20 rr rr     a01744: jsr ifall	; TABLEFALL
001570r 3  A9 01                lda #1	; DIG
001572r 3  20 rr rr             jsr dig
001575r 3  A5 rr        a01760: lda joyval	; KEY
001577r 3  29 08                and #8
001579r 3  F0 03                beq :+
00157Br 3  4C rr rr             jmp a02091
00157Er 3               :
00157Er 3  A9 18                lda #24
001580r 3  85 rr                sta z80_c
001582r 3  A0 08                ldy #8
001584r 3  B1 rr                lda (z80_ix),y
001586r 3  38                   sec
001587r 3  E5 rr                sbc z80_c
001589r 3  A0 08                ldy #8
00158Br 3  91 rr                sta (z80_ix),y
00158Dr 3  A9 01                lda #1 	; COLLISION
00158Fr 3  85 rr                sta z80_b
001591r 3  20 rr rr             jsr sktyp
001594r 3  B0 03                bcs :+
001596r 3  4C rr rr             jmp a01922
001599r 3               :
001599r 3  A9 18                lda #24
00159Br 3  85 rr                sta z80_c
00159Dr 3  A0 08                ldy #8
00159Fr 3  B1 rr                lda (z80_ix),y
0015A1r 3  18                   clc
0015A2r 3  65 rr                adc z80_c
0015A4r 3  A0 08                ldy #8
0015A6r 3  91 rr                sta (z80_ix),y
0015A8r 3  20 rr rr             jsr jump	; TABLEJUMP
0015ABr 3  A9 00                lda #0
0015ADr 3  A0 08                ldy #8
0015AFr 3  D1 rr                cmp (z80_ix),y
0015B1r 3  B0 03                bcs *+5
0015B3r 3  4C rr rr             jmp a01917
0015B6r 3  A9 00                lda #0
0015B8r 3  A0 08                ldy #8
0015BAr 3  91 rr                sta (z80_ix),y
0015BCr 3  4C rr rr     a01917: jmp a02091
0015BFr 3  A9 18        a01922: lda #24
0015C1r 3  85 rr                sta z80_c
0015C3r 3  A0 08                ldy #8
0015C5r 3  B1 rr                lda (z80_ix),y
0015C7r 3  18                   clc
0015C8r 3  65 rr                adc z80_c
0015CAr 3  A0 08                ldy #8
0015CCr 3  91 rr                sta (z80_ix),y
0015CEr 3  A9 00                lda #0
0015D0r 3  C5 rr                cmp vara
0015D2r 3  F0 03                beq *+5
0015D4r 3  4C rr rr             jmp a02039
0015D7r 3  20 rr rr             jsr cangu	; CANGOUP
0015DAr 3  F0 03                beq :+
0015DCr 3  4C rr rr             jmp a02039
0015DFr 3               :
0015DFr 3  A9 28                lda #40
0015E1r 3  85 rr                sta z80_d	; GETRANDOM
0015E3r 3  20 rr rr             jsr random
0015E6r 3  85 rr                sta z80_h
0015E8r 3  20 rr rr             jsr imul
0015EBr 3  A5 rr                lda z80_h
0015EDr 3  85 rr                sta varrnd
0015EFr 3  A5 rr                lda varrnd	; BEEP
0015F1r 3  29 7F                and #127
0015F3r 3  8D rr rr             sta sndtyp
0015F6r 3  20 rr rr     a02039: jsr jump	; TABLEJUMP
0015F9r 3  A9 03                lda #3	; DIG
0015FBr 3  20 rr rr             jsr dig
0015FEr 3  A9 00                lda #0
001600r 3  A0 08                ldy #8
001602r 3  D1 rr                cmp (z80_ix),y
001604r 3  B0 03                bcs *+5
001606r 3  4C rr rr             jmp a02091
001609r 3  A9 00                lda #0
00160Br 3  A0 08                ldy #8
00160Dr 3  91 rr                sta (z80_ix),y
00160Fr 3  4C rr rr     a02091: jmp grav
001612r 3               evnt01:
001612r 3  A9 02                lda #2 	; COLLISION
001614r 3  85 rr                sta z80_b
001616r 3  20 rr rr             jsr sktyp
001619r 3  B0 03                bcs :+
00161Br 3  4C rr rr             jmp b00057
00161Er 3               :
00161Er 3  A9 00                lda #0
001620r 3  C5 rr                cmp varc
001622r 3  F0 03                beq *+5
001624r 3  4C rr rr             jmp b00057
001627r 3  A9 08                lda #8
001629r 3  A0 05                ldy #5
00162Br 3  91 rr                sta (z80_ix),y
00162Dr 3  A9 05        b00057: lda #DEADLY	; DEADLY
00162Fr 3  85 rr                sta z80_b
001631r 3  20 rr rr             jsr tded
001634r 3  C5 rr                cmp z80_b
001636r 3  F0 03                beq :+
001638r 3  4C rr rr             jmp b00116
00163Br 3               :
00163Br 3  A9 00                lda #0
00163Dr 3  C5 rr                cmp varc
00163Fr 3  F0 03                beq *+5
001641r 3  4C rr rr             jmp b00116
001644r 3  A9 08                lda #8
001646r 3  A0 05                ldy #5
001648r 3  91 rr                sta (z80_ix),y
00164Ar 3  20 rr rr     b00116: jsr cangd	; CANGODOWN
00164Dr 3  F0 03                beq :+
00164Fr 3  4C rr rr             jmp b00151
001652r 3               :
001652r 3  A9 06                lda #6
001654r 3  A0 06                ldy #6
001656r 3  91 rr                sta (z80_ix),y
001658r 3  4C rr rr             jmp b00164
00165Br 3  A9 02        b00151: lda #2
00165Dr 3  A0 06                ldy #6
00165Fr 3  91 rr                sta (z80_ix),y
001661r 3  20 rr rr     b00164: jsr ifall	; TABLEFALL
001664r 3  A0 08                ldy #8
001666r 3  B1 rr                lda (z80_ix),y
001668r 3  85 rr                sta varf
00166Ar 3  A0 09                ldy #9
00166Cr 3  B1 rr                lda (z80_ix),y
00166Er 3  85 rr                sta varn
001670r 3  A9 00                lda #0 	; COLLISION
001672r 3  85 rr                sta z80_b
001674r 3  20 rr rr             jsr sktyp
001677r 3  B0 03                bcs :+
001679r 3  4C rr rr             jmp b02266
00167Cr 3               :
00167Cr 3  A0 08                ldy #8
00167Er 3  B1 rr                lda (z80_ix),y
001680r 3  85 rr                sta varq
001682r 3  A0 09                ldy #9
001684r 3  B1 rr                lda (z80_ix),y
001686r 3  85 rr                sta varr
001688r 3  A0 08                ldy #8
00168Ar 3  B1 rr                lda (z80_ix),y
00168Cr 3  85 rr                sta vari
00168Er 3  A0 09                ldy #9
001690r 3  B1 rr                lda (z80_ix),y
001692r 3  85 rr                sta varj
001694r 3  A5 rr                lda skptr	; OTHER
001696r 3  85 rr                sta z80_x
001698r 3  A5 rr                lda skptr+1
00169Ar 3  85 rr                sta z80_i
00169Cr 3  A0 08                ldy #8
00169Er 3  B1 rr                lda (z80_ix),y
0016A0r 3  85 rr                sta varo
0016A2r 3  A0 09                ldy #9
0016A4r 3  B1 rr                lda (z80_ix),y
0016A6r 3  85 rr                sta varp
0016A8r 3  A0 08                ldy #8
0016AAr 3  B1 rr                lda (z80_ix),y
0016ACr 3  85 rr                sta varg
0016AEr 3  A0 09                ldy #9
0016B0r 3  B1 rr                lda (z80_ix),y
0016B2r 3  85 rr                sta varh
0016B4r 3  A5 rr                lda ogptr	; ENDSPRITE
0016B6r 3  85 rr                sta z80_x
0016B8r 3  A5 rr                lda ogptr+1
0016BAr 3  85 rr                sta z80_i
0016BCr 3  A0 08                ldy #8
0016BEr 3  B1 rr                lda (z80_ix),y
0016C0r 3  C5 rr                cmp varo
0016C2r 3  90 03                bcc *+5
0016C4r 3  4C rr rr             jmp b00398
0016C7r 3  A9 06        b00398: lda #6
0016C9r 3  A0 06                ldy #6
0016CBr 3  D1 rr                cmp (z80_ix),y
0016CDr 3  F0 03                beq *+5
0016CFr 3  4C rr rr             jmp b00559
0016D2r 3  A5 rr                lda skptr	; OTHER
0016D4r 3  85 rr                sta z80_x
0016D6r 3  A5 rr                lda skptr+1
0016D8r 3  85 rr                sta z80_i
0016DAr 3  A9 00                lda #0
0016DCr 3  A0 06                ldy #6
0016DEr 3  D1 rr                cmp (z80_ix),y
0016E0r 3  F0 03                beq *+5
0016E2r 3  4C rr rr             jmp b00502
0016E5r 3  A9 02                lda #2
0016E7r 3  85 rr                sta z80_c
0016E9r 3  A0 09                ldy #9
0016EBr 3  B1 rr                lda (z80_ix),y
0016EDr 3  38                   sec
0016EEr 3  E5 rr                sbc z80_c
0016F0r 3  A0 09                ldy #9
0016F2r 3  91 rr                sta (z80_ix),y
0016F4r 3  4C rr rr             jmp b00537
0016F7r 3  A9 02        b00502: lda #2
0016F9r 3  85 rr                sta z80_c
0016FBr 3  A0 09                ldy #9
0016FDr 3  B1 rr                lda (z80_ix),y
0016FFr 3  18                   clc
001700r 3  65 rr                adc z80_c
001702r 3  A0 09                ldy #9
001704r 3  91 rr                sta (z80_ix),y
001706r 3  A5 rr        b00537: lda ogptr	; ENDSPRITE
001708r 3  85 rr                sta z80_x
00170Ar 3  A5 rr                lda ogptr+1
00170Cr 3  85 rr                sta z80_i
00170Er 3  A5 rr        b00559: lda skptr	; OTHER
001710r 3  85 rr                sta z80_x
001712r 3  A5 rr                lda skptr+1
001714r 3  85 rr                sta z80_i
001716r 3  A5 rr                lda varg
001718r 3  C5 rr                cmp varf
00171Ar 3  90 03                bcc *+5
00171Cr 3  4C rr rr             jmp b00808
00171Fr 3  A5 rr                lda vari
001721r 3  85 rr                sta vars
001723r 3  A5 rr                lda varg
001725r 3  85 rr                sta z80_c
001727r 3  A5 rr                lda vars
001729r 3  38                   sec
00172Ar 3  E5 rr                sbc z80_c
00172Cr 3  85 rr                sta vars
00172Er 3  A9 09                lda #9
001730r 3  C5 rr                cmp vars
001732r 3  90 03                bcc *+5
001734r 3  4C rr rr             jmp b00808
001737r 3  A5 rr                lda varn
001739r 3  C5 rr                cmp varh
00173Br 3  90 03                bcc *+5
00173Dr 3  4C rr rr             jmp b00738
001740r 3  A5 rr                lda varh
001742r 3  85 rr                sta vart
001744r 3  A5 rr                lda varj
001746r 3  85 rr                sta z80_c
001748r 3  A5 rr                lda vart
00174Ar 3  38                   sec
00174Br 3  E5 rr                sbc z80_c
00174Dr 3  85 rr                sta vart
00174Fr 3  A9 0C                lda #12
001751r 3  C5 rr                cmp vart
001753r 3  90 03                bcc *+5
001755r 3  4C rr rr             jmp b00726
001758r 3  20 rr rr             jsr ifall	; TABLEFALL
00175Br 3  4C rr rr             jmp b00734
00175Er 3  20 rr rr     b00726: jsr gravst	; STOPFALL
001761r 3  4C rr rr     b00734: jmp b00808
001764r 3  A5 rr        b00738: lda varn
001766r 3  85 rr                sta vart
001768r 3  A5 rr                lda varh
00176Ar 3  85 rr                sta z80_c
00176Cr 3  A5 rr                lda vart
00176Er 3  38                   sec
00176Fr 3  E5 rr                sbc z80_c
001771r 3  85 rr                sta vart
001773r 3  A9 0C                lda #12
001775r 3  C5 rr                cmp vart
001777r 3  90 03                bcc *+5
001779r 3  4C rr rr             jmp b00801
00177Cr 3  20 rr rr             jsr ifall	; TABLEFALL
00177Fr 3  4C rr rr             jmp b00808
001782r 3  20 rr rr     b00801: jsr gravst	; STOPFALL
001785r 3  A5 rr        b00808: lda ogptr	; ENDSPRITE
001787r 3  85 rr                sta z80_x
001789r 3  A5 rr                lda ogptr+1
00178Br 3  85 rr                sta z80_i
00178Dr 3  A5 rr                lda varo
00178Fr 3  A0 08                ldy #8
001791r 3  D1 rr                cmp (z80_ix),y
001793r 3  90 03                bcc *+5
001795r 3  4C rr rr             jmp b01256
001798r 3  A5 rr                lda skptr	; OTHER
00179Ar 3  85 rr                sta z80_x
00179Cr 3  A5 rr                lda skptr+1
00179Er 3  85 rr                sta z80_i
0017A0r 3  A9 10                lda #16
0017A2r 3  85 rr                sta z80_c
0017A4r 3  A5 rr                lda varo
0017A6r 3  18                   clc
0017A7r 3  65 rr                adc z80_c
0017A9r 3  85 rr                sta varo
0017ABr 3  A5 rr                lda varq
0017ADr 3  85 rr                sta z80_c
0017AFr 3  A5 rr                lda varo
0017B1r 3  38                   sec
0017B2r 3  E5 rr                sbc z80_c
0017B4r 3  85 rr                sta varo
0017B6r 3  20 rr rr             jsr cangu	; CANGOUP
0017B9r 3  F0 03                beq :+
0017BBr 3  4C rr rr             jmp b01208
0017BEr 3               :
0017BEr 3  A5 rr                lda varo
0017C0r 3  C9 08                cmp #8
0017C2r 3  90 03                bcc *+5
0017C4r 3  4C rr rr             jmp b00995
0017C7r 3  A5 rr                lda varo
0017C9r 3  85 rr                sta z80_c
0017CBr 3  A0 08                ldy #8
0017CDr 3  B1 rr                lda (z80_ix),y
0017CFr 3  38                   sec
0017D0r 3  E5 rr                sbc z80_c
0017D2r 3  A0 08                ldy #8
0017D4r 3  91 rr                sta (z80_ix),y
0017D6r 3  4C rr rr             jmp b01208
0017D9r 3  A9 01        b00995: lda #1
0017DBr 3  A0 06                ldy #6
0017DDr 3  D1 rr                cmp (z80_ix),y
0017DFr 3  F0 03                beq *+5
0017E1r 3  4C rr rr             jmp b01101
0017E4r 3  A9 10                lda #16
0017E6r 3  85 rr                sta z80_c
0017E8r 3  A5 rr                lda varr
0017EAr 3  18                   clc
0017EBr 3  65 rr                adc z80_c
0017EDr 3  85 rr                sta varr
0017EFr 3  A5 rr                lda varp
0017F1r 3  85 rr                sta z80_c
0017F3r 3  A5 rr                lda varr
0017F5r 3  38                   sec
0017F6r 3  E5 rr                sbc z80_c
0017F8r 3  85 rr                sta varr
0017FAr 3  A5 rr                lda varr
0017FCr 3  85 rr                sta z80_c
0017FEr 3  A0 09                ldy #9
001800r 3  B1 rr                lda (z80_ix),y
001802r 3  18                   clc
001803r 3  65 rr                adc z80_c
001805r 3  A0 09                ldy #9
001807r 3  91 rr                sta (z80_ix),y
001809r 3  A9 00        b01101: lda #0
00180Br 3  A0 06                ldy #6
00180Dr 3  D1 rr                cmp (z80_ix),y
00180Fr 3  F0 03                beq *+5
001811r 3  4C rr rr             jmp b01208
001814r 3  A9 10                lda #16
001816r 3  85 rr                sta z80_c
001818r 3  A5 rr                lda varp
00181Ar 3  18                   clc
00181Br 3  65 rr                adc z80_c
00181Dr 3  85 rr                sta varp
00181Fr 3  A5 rr                lda varr
001821r 3  85 rr                sta z80_c
001823r 3  A5 rr                lda varp
001825r 3  38                   sec
001826r 3  E5 rr                sbc z80_c
001828r 3  85 rr                sta varp
00182Ar 3  A5 rr                lda varp
00182Cr 3  85 rr                sta z80_c
00182Er 3  A0 09                ldy #9
001830r 3  B1 rr                lda (z80_ix),y
001832r 3  38                   sec
001833r 3  E5 rr                sbc z80_c
001835r 3  A0 09                ldy #9
001837r 3  91 rr                sta (z80_ix),y
001839r 3  A5 rr        b01208: lda joyval	; KEY
00183Br 3  29 08                and #8
00183Dr 3  F0 03                beq :+
00183Fr 3  4C rr rr             jmp b01234
001842r 3               :
001842r 3  20 rr rr             jsr jump	; TABLEJUMP
001845r 3  A5 rr        b01234: lda ogptr	; ENDSPRITE
001847r 3  85 rr                sta z80_x
001849r 3  A5 rr                lda ogptr+1
00184Br 3  85 rr                sta z80_i
00184Dr 3  A5 rr        b01256: lda varq
00184Fr 3  C5 rr                cmp varo
001851r 3  90 03                bcc *+5
001853r 3  4C rr rr             jmp b01421
001856r 3  A5 rr                lda varq
001858r 3  85 rr                sta z80_c
00185Ar 3  A5 rr                lda varo
00185Cr 3  38                   sec
00185Dr 3  E5 rr                sbc z80_c
00185Fr 3  85 rr                sta varo
001861r 3  A9 09                lda #9
001863r 3  C5 rr                cmp varo
001865r 3  90 03                bcc *+5
001867r 3  4C rr rr             jmp b01416
00186Ar 3  A9 00                lda #0 	; COLLISION
00186Cr 3  85 rr                sta z80_b
00186Er 3  20 rr rr             jsr sktyp
001871r 3  B0 03                bcs :+
001873r 3  4C rr rr             jmp b01416
001876r 3               :
001876r 3  A5 rr                lda skptr	; OTHER
001878r 3  85 rr                sta z80_x
00187Ar 3  A5 rr                lda skptr+1
00187Cr 3  85 rr                sta z80_i
00187Er 3  A9 0A                lda #10
001880r 3  85 rr                sta z80_c
001882r 3  A0 08                ldy #8
001884r 3  B1 rr                lda (z80_ix),y
001886r 3  18                   clc
001887r 3  65 rr                adc z80_c
001889r 3  A0 08                ldy #8
00188Br 3  91 rr                sta (z80_ix),y
00188Dr 3  A5 rr                lda ogptr	; ENDSPRITE
00188Fr 3  85 rr                sta z80_x
001891r 3  A5 rr                lda ogptr+1
001893r 3  85 rr                sta z80_i
001895r 3  4C rr rr     b01416: jmp b01603
001898r 3  A5 rr        b01421: lda varo
00189Ar 3  85 rr                sta z80_c
00189Cr 3  A5 rr                lda varq
00189Er 3  38                   sec
00189Fr 3  E5 rr                sbc z80_c
0018A1r 3  85 rr                sta varq
0018A3r 3  A9 0D                lda #13
0018A5r 3  C5 rr                cmp varq
0018A7r 3  90 03                bcc *+5
0018A9r 3  4C rr rr             jmp b01603
0018ACr 3  20 rr rr             jsr cangd	; CANGODOWN
0018AFr 3  F0 03                beq :+
0018B1r 3  4C rr rr             jmp b01603
0018B4r 3               :
0018B4r 3  A9 00                lda #0 	; COLLISION
0018B6r 3  85 rr                sta z80_b
0018B8r 3  20 rr rr             jsr sktyp
0018BBr 3  B0 03                bcs :+
0018BDr 3  4C rr rr             jmp b01555
0018C0r 3               :
0018C0r 3  A5 rr                lda skptr	; OTHER
0018C2r 3  85 rr                sta z80_x
0018C4r 3  A5 rr                lda skptr+1
0018C6r 3  85 rr                sta z80_i
0018C8r 3  A0 08                ldy #8 		; SPRITEDOWN
0018CAr 3  B1 rr                lda (z80_ix),y
0018CCr 3  18                   clc
0018CDr 3  69 02                adc #2
0018CFr 3  91 rr                sta (z80_ix),y
0018D1r 3  4C rr rr             jmp b01603
0018D4r 3  A0 08        b01555: ldy #8 		; SPRITEDOWN
0018D6r 3  B1 rr                lda (z80_ix),y
0018D8r 3  18                   clc
0018D9r 3  69 02                adc #2
0018DBr 3  91 rr                sta (z80_ix),y
0018DDr 3  A5 rr                lda ogptr	; ENDSPRITE
0018DFr 3  85 rr                sta z80_x
0018E1r 3  A5 rr                lda ogptr+1
0018E3r 3  85 rr                sta z80_i
0018E5r 3  A5 rr        b01603: lda varr
0018E7r 3  C5 rr                cmp varp
0018E9r 3  90 03                bcc *+5
0018EBr 3  4C rr rr             jmp b01945
0018EEr 3  A5 rr                lda varr
0018F0r 3  85 rr                sta z80_c
0018F2r 3  A5 rr                lda varp
0018F4r 3  38                   sec
0018F5r 3  E5 rr                sbc z80_c
0018F7r 3  85 rr                sta varp
0018F9r 3  A9 0D                lda #13
0018FBr 3  C5 rr                cmp varp
0018FDr 3  90 03                bcc *+5
0018FFr 3  4C rr rr             jmp b01941
001902r 3  20 rr rr             jsr cangl	; CANGOLEFT
001905r 3  F0 03                beq :+
001907r 3  4C rr rr             jmp b01856
00190Ar 3               :
00190Ar 3  20 rr rr             jsr cangd	; CANGODOWN
00190Dr 3  F0 03                beq :+
00190Fr 3  4C rr rr             jmp b01725
001912r 3               :
001912r 3  A0 08                ldy #8 		; SPRITEDOWN
001914r 3  B1 rr                lda (z80_ix),y
001916r 3  18                   clc
001917r 3  69 02                adc #2
001919r 3  91 rr                sta (z80_ix),y
00191Br 3  4C rr rr             jmp b01851
00191Er 3  A0 09        b01725: ldy #9
001920r 3  B1 rr                lda (z80_ix),y
001922r 3  C9 20                cmp #32
001924r 3  90 03                bcc *+5
001926r 3  4C rr rr             jmp b01816
001929r 3  A9 20                lda #32
00192Br 3  A0 09                ldy #9
00192Dr 3  91 rr                sta (z80_ix),y
00192Fr 3  A5 rr                lda skptr	; OTHER
001931r 3  85 rr                sta z80_x
001933r 3  A5 rr                lda skptr+1
001935r 3  85 rr                sta z80_i
001937r 3  A9 28                lda #40
001939r 3  A0 09                ldy #9
00193Br 3  91 rr                sta (z80_ix),y
00193Dr 3  A5 rr                lda ogptr	; ENDSPRITE
00193Fr 3  85 rr                sta z80_x
001941r 3  A5 rr                lda ogptr+1
001943r 3  85 rr                sta z80_i
001945r 3  A9 08        b01816: lda #8
001947r 3  85 rr                sta z80_c
001949r 3  A0 09                ldy #9
00194Br 3  B1 rr                lda (z80_ix),y
00194Dr 3  38                   sec
00194Er 3  E5 rr                sbc z80_c
001950r 3  A0 09                ldy #9
001952r 3  91 rr                sta (z80_ix),y
001954r 3  4C rr rr     b01851: jmp b01941
001957r 3  A5 rr        b01856: lda skptr	; OTHER
001959r 3  85 rr                sta z80_x
00195Br 3  A5 rr                lda skptr+1
00195Dr 3  85 rr                sta z80_i
00195Fr 3  20 rr rr             jsr cangr	; CANGORIGHT
001962r 3  F0 03                beq :+
001964r 3  4C rr rr             jmp b01919
001967r 3               :
001967r 3  A0 09                ldy #9 		; SPRITERIGHT
001969r 3  B1 rr                lda (z80_ix),y
00196Br 3  18                   clc
00196Cr 3  69 02                adc #2
00196Er 3  91 rr                sta (z80_ix),y
001970r 3  A5 rr        b01919: lda ogptr	; ENDSPRITE
001972r 3  85 rr                sta z80_x
001974r 3  A5 rr                lda ogptr+1
001976r 3  85 rr                sta z80_i
001978r 3  4C rr rr     b01941: jmp b02266
00197Br 3  A5 rr        b01945: lda varp
00197Dr 3  85 rr                sta z80_c
00197Fr 3  A5 rr                lda varr
001981r 3  38                   sec
001982r 3  E5 rr                sbc z80_c
001984r 3  85 rr                sta varr
001986r 3  A9 0D                lda #13
001988r 3  C5 rr                cmp varr
00198Ar 3  90 03                bcc *+5
00198Cr 3  4C rr rr             jmp b02266
00198Fr 3  20 rr rr             jsr cangr	; CANGORIGHT
001992r 3  F0 03                beq :+
001994r 3  4C rr rr             jmp b02182
001997r 3               :
001997r 3  20 rr rr             jsr cangd	; CANGODOWN
00199Ar 3  F0 03                beq :+
00199Cr 3  4C rr rr             jmp b02051
00199Fr 3               :
00199Fr 3  A0 08                ldy #8 		; SPRITEDOWN
0019A1r 3  B1 rr                lda (z80_ix),y
0019A3r 3  18                   clc
0019A4r 3  69 02                adc #2
0019A6r 3  91 rr                sta (z80_ix),y
0019A8r 3  4C rr rr             jmp b02177
0019ABr 3  A9 98        b02051: lda #152
0019ADr 3  A0 09                ldy #9
0019AFr 3  D1 rr                cmp (z80_ix),y
0019B1r 3  F0 03                beq *+5
0019B3r 3  4C rr rr             jmp b02142
0019B6r 3  A9 98                lda #152
0019B8r 3  85 rr                sta varr
0019BAr 3  A5 rr                lda skptr	; OTHER
0019BCr 3  85 rr                sta z80_x
0019BEr 3  A5 rr                lda skptr+1
0019C0r 3  85 rr                sta z80_i
0019C2r 3  A9 88                lda #136
0019C4r 3  A0 09                ldy #9
0019C6r 3  91 rr                sta (z80_ix),y
0019C8r 3  A5 rr                lda ogptr	; ENDSPRITE
0019CAr 3  85 rr                sta z80_x
0019CCr 3  A5 rr                lda ogptr+1
0019CEr 3  85 rr                sta z80_i
0019D0r 3  4C rr rr             jmp b02177
0019D3r 3  A9 08        b02142: lda #8
0019D5r 3  85 rr                sta z80_c
0019D7r 3  A0 09                ldy #9
0019D9r 3  B1 rr                lda (z80_ix),y
0019DBr 3  18                   clc
0019DCr 3  65 rr                adc z80_c
0019DEr 3  A0 09                ldy #9
0019E0r 3  91 rr                sta (z80_ix),y
0019E2r 3  4C rr rr     b02177: jmp b02266
0019E5r 3  A5 rr        b02182: lda skptr	; OTHER
0019E7r 3  85 rr                sta z80_x
0019E9r 3  A5 rr                lda skptr+1
0019EBr 3  85 rr                sta z80_i
0019EDr 3  20 rr rr             jsr cangl	; CANGOLEFT
0019F0r 3  F0 03                beq :+
0019F2r 3  4C rr rr             jmp b02245
0019F5r 3               :
0019F5r 3  A0 09                ldy #9 		; SPRITELEFT
0019F7r 3  B1 rr                lda (z80_ix),y
0019F9r 3  38                   sec
0019FAr 3  E9 02                sbc #2
0019FCr 3  91 rr                sta (z80_ix),y
0019FEr 3  A5 rr        b02245: lda ogptr	; ENDSPRITE
001A00r 3  85 rr                sta z80_x
001A02r 3  A5 rr                lda ogptr+1
001A04r 3  85 rr                sta z80_i
001A06r 3  A9 02        b02266: lda #2 	; COLLISION
001A08r 3  85 rr                sta z80_b
001A0Ar 3  20 rr rr             jsr sktyp
001A0Dr 3  B0 03                bcs :+
001A0Fr 3  4C rr rr             jmp b02349
001A12r 3               :
001A12r 3  A5 rr                lda skptr	; OTHER
001A14r 3  85 rr                sta z80_x
001A16r 3  A5 rr                lda skptr+1
001A18r 3  85 rr                sta z80_i
001A1Ar 3  A9 FF                lda #255	; REMOVE
001A1Cr 3  A0 05                ldy #5
001A1Er 3  91 rr                sta (z80_ix),y
001A20r 3  A5 rr                lda ogptr	; ENDSPRITE
001A22r 3  85 rr                sta z80_x
001A24r 3  A5 rr                lda ogptr+1
001A26r 3  85 rr                sta z80_i
001A28r 3  4C rr rr     b02349: jmp grav
001A2Br 3               evnt02:
001A2Br 3  20 rr rr             jsr cangr	; CANGORIGHT
001A2Er 3  F0 03                beq :+
001A30r 3  4C rr rr             jmp c00023
001A33r 3               :
001A33r 3  4C rr rr             jmp c00082
001A36r 3  20 rr rr     c00023: jsr cangl	; CANGOLEFT
001A39r 3  F0 03                beq :+
001A3Br 3  4C rr rr             jmp c00044
001A3Er 3               :
001A3Er 3  4C rr rr             jmp c00082
001A41r 3  20 rr rr     c00044: jsr cangd	; CANGODOWN
001A44r 3  F0 03                beq :+
001A46r 3  4C rr rr             jmp c00066
001A49r 3               :
001A49r 3  4C rr rr             jmp c00082
001A4Cr 3  A9 FF        c00066: lda #255	; REMOVE
001A4Er 3  A0 05                ldy #5
001A50r 3  91 rr                sta (z80_ix),y
001A52r 3  A9 00        c00082: lda #0
001A54r 3  C5 rr                cmp vara
001A56r 3  F0 03                beq *+5
001A58r 3  4C rr rr             jmp c00110
001A5Br 3  A9 00                lda #0		; ANIMATE
001A5Dr 3  20 rr rr             jsr animsp
001A60r 3  A0 0B        c00110: ldy #11
001A62r 3  B1 rr                lda (z80_ix),y
001A64r 3  18                   clc
001A65r 3  69 01                adc #1
001A67r 3  A0 0B                ldy #11
001A69r 3  91 rr                sta (z80_ix),y
001A6Br 3  A9 03                lda #3
001A6Dr 3  A0 06                ldy #6
001A6Fr 3  D1 rr                cmp (z80_ix),y
001A71r 3  F0 03                beq *+5
001A73r 3  4C rr rr             jmp c00317
001A76r 3  20 rr rr             jsr cangr	; CANGORIGHT
001A79r 3  F0 03                beq :+
001A7Br 3  4C rr rr             jmp c00231
001A7Er 3               :
001A7Er 3  A0 09                ldy #9 		; SPRITERIGHT
001A80r 3  B1 rr                lda (z80_ix),y
001A82r 3  18                   clc
001A83r 3  69 02                adc #2
001A85r 3  91 rr                sta (z80_ix),y
001A87r 3  A0 09                ldy #9 		; SPRITERIGHT
001A89r 3  B1 rr                lda (z80_ix),y
001A8Br 3  18                   clc
001A8Cr 3  69 02                adc #2
001A8Er 3  91 rr                sta (z80_ix),y
001A90r 3  4C rr rr             jmp c00245
001A93r 3  A9 04        c00231: lda #4
001A95r 3  A0 06                ldy #6
001A97r 3  91 rr                sta (z80_ix),y
001A99r 3  20 rr rr     c00245: jsr cangd	; CANGODOWN
001A9Cr 3  F0 03                beq :+
001A9Er 3  4C rr rr             jmp c00313
001AA1r 3               :
001AA1r 3  A0 08                ldy #8 		; SPRITEDOWN
001AA3r 3  B1 rr                lda (z80_ix),y
001AA5r 3  18                   clc
001AA6r 3  69 02                adc #2
001AA8r 3  91 rr                sta (z80_ix),y
001AAAr 3  A0 08                ldy #8 		; SPRITEDOWN
001AACr 3  B1 rr                lda (z80_ix),y
001AAEr 3  18                   clc
001AAFr 3  69 02                adc #2
001AB1r 3  91 rr                sta (z80_ix),y
001AB3r 3  4C rr rr     c00313: jmp c00380
001AB6r 3  A9 04        c00317: lda #4
001AB8r 3  A0 06                ldy #6
001ABAr 3  91 rr                sta (z80_ix),y
001ABCr 3  A9 28                lda #40
001ABEr 3  A0 0B                ldy #11
001AC0r 3  D1 rr                cmp (z80_ix),y
001AC2r 3  90 03                bcc *+5
001AC4r 3  4C rr rr             jmp c00380
001AC7r 3  A9 08                lda #8
001AC9r 3  A0 05                ldy #5
001ACBr 3  91 rr                sta (z80_ix),y
001ACDr 3  A9 00                lda #0
001ACFr 3  A0 0B                ldy #11
001AD1r 3  91 rr                sta (z80_ix),y
001AD3r 3  A9 04        c00380: lda #4
001AD5r 3  A0 06                ldy #6
001AD7r 3  D1 rr                cmp (z80_ix),y
001AD9r 3  F0 03                beq *+5
001ADBr 3  4C rr rr             jmp c00561
001ADEr 3  20 rr rr             jsr cangl	; CANGOLEFT
001AE1r 3  F0 03                beq :+
001AE3r 3  4C rr rr             jmp c00475
001AE6r 3               :
001AE6r 3  A0 09                ldy #9 		; SPRITELEFT
001AE8r 3  B1 rr                lda (z80_ix),y
001AEAr 3  38                   sec
001AEBr 3  E9 02                sbc #2
001AEDr 3  91 rr                sta (z80_ix),y
001AEFr 3  A0 09                ldy #9 		; SPRITELEFT
001AF1r 3  B1 rr                lda (z80_ix),y
001AF3r 3  38                   sec
001AF4r 3  E9 02                sbc #2
001AF6r 3  91 rr                sta (z80_ix),y
001AF8r 3  4C rr rr             jmp c00488
001AFBr 3  A9 03        c00475: lda #3
001AFDr 3  A0 06                ldy #6
001AFFr 3  91 rr                sta (z80_ix),y
001B01r 3  20 rr rr     c00488: jsr cangd	; CANGODOWN
001B04r 3  F0 03                beq :+
001B06r 3  4C rr rr             jmp c00556
001B09r 3               :
001B09r 3  A0 08                ldy #8 		; SPRITEDOWN
001B0Br 3  B1 rr                lda (z80_ix),y
001B0Dr 3  18                   clc
001B0Er 3  69 02                adc #2
001B10r 3  91 rr                sta (z80_ix),y
001B12r 3  A0 08                ldy #8 		; SPRITEDOWN
001B14r 3  B1 rr                lda (z80_ix),y
001B16r 3  18                   clc
001B17r 3  69 02                adc #2
001B19r 3  91 rr                sta (z80_ix),y
001B1Br 3  4C rr rr     c00556: jmp c00623
001B1Er 3  A9 03        c00561: lda #3
001B20r 3  A0 06                ldy #6
001B22r 3  91 rr                sta (z80_ix),y
001B24r 3  A9 28                lda #40
001B26r 3  A0 0B                ldy #11
001B28r 3  D1 rr                cmp (z80_ix),y
001B2Ar 3  90 03                bcc *+5
001B2Cr 3  4C rr rr             jmp c00623
001B2Fr 3  A9 08                lda #8
001B31r 3  A0 05                ldy #5
001B33r 3  91 rr                sta (z80_ix),y
001B35r 3  A9 00                lda #0
001B37r 3  A0 0B                ldy #11
001B39r 3  91 rr                sta (z80_ix),y
001B3Br 3  60           c00623: rts
001B3Cr 3               evnt03:
001B3Cr 3  A0 08                ldy #8
001B3Er 3  B1 rr                lda (z80_ix),y
001B40r 3  C5 rr                cmp varf
001B42r 3  F0 03                beq *+5
001B44r 3  4C rr rr             jmp d00160
001B47r 3  A0 09                ldy #9
001B49r 3  B1 rr                lda (z80_ix),y
001B4Br 3  C5 rr                cmp varn
001B4Dr 3  F0 03                beq *+5
001B4Fr 3  4C rr rr             jmp d00160
001B52r 3  A9 32                lda #50		; BEEP
001B54r 3  8D rr rr             sta sndtyp
001B57r 3  A9 01                lda #1
001B59r 3  85 rr                sta varc
001B5Br 3  A9 09                lda #9
001B5Dr 3  85 rr                sta chary
001B5Fr 3  A9 08                lda #8
001B61r 3  85 rr                sta charx
001B63r 3  A9 01                lda #1		; PRINTMODE
001B65r 3  85 rr                sta prtmod
001B67r 3  A9 05                lda #5 	; INK
001B69r 3  8D rr rr             sta fontcol
001B6Cr 3  A9 01                lda #1  	; MESSAGE
001B6Er 3  20 rr rr             jsr dmsg
001B71r 3  A9 00                lda #0		; PRINTMODE
001B73r 3  85 rr                sta prtmod
001B75r 3  A9 01                lda #1 	; INK
001B77r 3  8D rr rr             sta fontcol
001B7Ar 3  A9 5A                lda #90 	; DELAY
001B7Cr 3  20 rr rr             jsr delay
001B7Fr 3  A9 01                lda #1	; NEXTLEVEL
001B81r 3  85 rr                sta nexlev
001B83r 3  A9 01        d00160: lda #1
001B85r 3  C5 rr                cmp varc
001B87r 3  F0 03                beq *+5
001B89r 3  4C rr rr             jmp d00181
001B8Cr 3  4C rr rr             jmp d00215
001B8Fr 3  A9 08        d00181: lda #8
001B91r 3  85 rr                sta z80_d	; GETRANDOM
001B93r 3  20 rr rr             jsr random
001B96r 3  85 rr                sta z80_h
001B98r 3  20 rr rr             jsr imul
001B9Br 3  A5 rr                lda z80_h
001B9Dr 3  85 rr                sta varrnd
001B9Fr 3  A9 00        d00215: lda #0
001BA1r 3  C5 rr                cmp vara
001BA3r 3  F0 03                beq *+5
001BA5r 3  4C rr rr             jmp d00243
001BA8r 3  A9 00                lda #0		; ANIMATE
001BAAr 3  20 rr rr             jsr animsp
001BADr 3  60           d00243: rts
001BAEr 3               evnt04:
001BAEr 3  A9 00                lda #0
001BB0r 3  C5 rr                cmp vara
001BB2r 3  F0 03                beq *+5
001BB4r 3  4C rr rr             jmp e00030
001BB7r 3  A9 00                lda #0		; ANIMATE
001BB9r 3  20 rr rr             jsr animsp
001BBCr 3  A9 0E        e00030: lda #14
001BBEr 3  A0 06                ldy #6
001BC0r 3  D1 rr                cmp (z80_ix),y
001BC2r 3  F0 03                beq *+5
001BC4r 3  4C rr rr             jmp e00393
001BC7r 3  A9 00                lda #0 	; COLLISION
001BC9r 3  85 rr                sta z80_b
001BCBr 3  20 rr rr             jsr sktyp
001BCEr 3  B0 03                bcs :+
001BD0r 3  4C rr rr             jmp e00149
001BD3r 3               :
001BD3r 3  A9 00                lda #0
001BD5r 3  C5 rr                cmp varc
001BD7r 3  F0 03                beq *+5
001BD9r 3  4C rr rr             jmp e00149
001BDCr 3  A5 rr                lda skptr	; OTHER
001BDEr 3  85 rr                sta z80_x
001BE0r 3  A5 rr                lda skptr+1
001BE2r 3  85 rr                sta z80_i
001BE4r 3  A9 08                lda #8
001BE6r 3  A0 05                ldy #5
001BE8r 3  91 rr                sta (z80_ix),y
001BEAr 3  A5 rr                lda ogptr	; ENDSPRITE
001BECr 3  85 rr                sta z80_x
001BEEr 3  A5 rr                lda ogptr+1
001BF0r 3  85 rr                sta z80_i
001BF2r 3  A9 01        e00149: lda #1 	; COLLISION
001BF4r 3  85 rr                sta z80_b
001BF6r 3  20 rr rr             jsr sktyp
001BF9r 3  B0 03                bcs :+
001BFBr 3  4C rr rr             jmp e00246
001BFEr 3               :
001BFEr 3  A9 00                lda #0
001C00r 3  C5 rr                cmp varc
001C02r 3  F0 03                beq *+5
001C04r 3  4C rr rr             jmp e00246
001C07r 3  A5 rr                lda skptr	; OTHER
001C09r 3  85 rr                sta z80_x
001C0Br 3  A5 rr                lda skptr+1
001C0Dr 3  85 rr                sta z80_i
001C0Fr 3  A9 08                lda #8
001C11r 3  A0 05                ldy #5
001C13r 3  91 rr                sta (z80_ix),y
001C15r 3  A5 rr                lda ogptr	; ENDSPRITE
001C17r 3  85 rr                sta z80_x
001C19r 3  A5 rr                lda ogptr+1
001C1Br 3  85 rr                sta z80_i
001C1Dr 3  A9 00        e00246: lda #0
001C1Fr 3  A0 0A                ldy #10
001C21r 3  D1 rr                cmp (z80_ix),y
001C23r 3  F0 03                beq *+5
001C25r 3  4C rr rr             jmp e00332
001C28r 3  20 rr rr             jsr cangu	; CANGOUP
001C2Br 3  F0 03                beq :+
001C2Dr 3  4C rr rr             jmp e00314
001C30r 3               :
001C30r 3  A0 08                ldy #8 		; SPRITEUP
001C32r 3  B1 rr                lda (z80_ix),y
001C34r 3  38                   sec
001C35r 3  E9 02                sbc #2
001C37r 3  91 rr                sta (z80_ix),y
001C39r 3  4C rr rr             jmp e00328
001C3Cr 3  A9 01        e00314: lda #1
001C3Er 3  A0 0A                ldy #10
001C40r 3  91 rr                sta (z80_ix),y
001C42r 3  4C rr rr     e00328: jmp e00393
001C45r 3  20 rr rr     e00332: jsr cangd	; CANGODOWN
001C48r 3  F0 03                beq :+
001C4Ar 3  4C rr rr             jmp e00379
001C4Dr 3               :
001C4Dr 3  A0 08                ldy #8 		; SPRITEDOWN
001C4Fr 3  B1 rr                lda (z80_ix),y
001C51r 3  18                   clc
001C52r 3  69 02                adc #2
001C54r 3  91 rr                sta (z80_ix),y
001C56r 3  4C rr rr             jmp e00393
001C59r 3  A9 00        e00379: lda #0
001C5Br 3  A0 0A                ldy #10
001C5Dr 3  91 rr                sta (z80_ix),y
001C5Fr 3  A9 0B        e00393: lda #11
001C61r 3  A0 06                ldy #6
001C63r 3  D1 rr                cmp (z80_ix),y
001C65r 3  F0 03                beq *+5
001C67r 3  4C rr rr             jmp e00631
001C6Ar 3  A9 00                lda #0
001C6Cr 3  A0 0C                ldy #12
001C6Er 3  D1 rr                cmp (z80_ix),y
001C70r 3  F0 03                beq *+5
001C72r 3  4C rr rr             jmp e00536
001C75r 3  20 rr rr             jsr cangl	; CANGOLEFT
001C78r 3  F0 03                beq :+
001C7Ar 3  4C rr rr             jmp e00484
001C7Dr 3               :
001C7Dr 3  A0 09                ldy #9 		; SPRITELEFT
001C7Fr 3  B1 rr                lda (z80_ix),y
001C81r 3  38                   sec
001C82r 3  E9 02                sbc #2
001C84r 3  91 rr                sta (z80_ix),y
001C86r 3  4C rr rr             jmp e00532
001C89r 3  A9 01        e00484: lda #1
001C8Br 3  A0 0C                ldy #12
001C8Dr 3  91 rr                sta (z80_ix),y
001C8Fr 3  A9 02                lda #2	; SPAWN
001C91r 3  85 rr                sta z80_c
001C93r 3  A9 03                lda #3
001C95r 3  85 rr                sta z80_b
001C97r 3  20 rr rr             jsr spawn
001C9Ar 3  A9 3C                lda #60		; BEEP
001C9Cr 3  8D rr rr             sta sndtyp
001C9Fr 3  4C rr rr     e00532: jmp e00631
001CA2r 3  20 rr rr     e00536: jsr cangr	; CANGORIGHT
001CA5r 3  F0 03                beq :+
001CA7r 3  4C rr rr             jmp e00584
001CAAr 3               :
001CAAr 3  A0 09                ldy #9 		; SPRITERIGHT
001CACr 3  B1 rr                lda (z80_ix),y
001CAEr 3  18                   clc
001CAFr 3  69 02                adc #2
001CB1r 3  91 rr                sta (z80_ix),y
001CB3r 3  4C rr rr             jmp e00631
001CB6r 3  A9 02        e00584: lda #2	; SPAWN
001CB8r 3  85 rr                sta z80_c
001CBAr 3  A9 04                lda #4
001CBCr 3  85 rr                sta z80_b
001CBEr 3  20 rr rr             jsr spawn
001CC1r 3  A9 00                lda #0
001CC3r 3  A0 0C                ldy #12
001CC5r 3  91 rr                sta (z80_ix),y
001CC7r 3  A9 3C                lda #60		; BEEP
001CC9r 3  8D rr rr             sta sndtyp
001CCCr 3  A9 07        e00631: lda #7
001CCEr 3  A0 06                ldy #6
001CD0r 3  D1 rr                cmp (z80_ix),y
001CD2r 3  F0 03                beq *+5
001CD4r 3  4C rr rr             jmp e01216
001CD7r 3  A9 04                lda #4
001CD9r 3  85 rr                sta z80_d	; GETRANDOM
001CDBr 3  20 rr rr             jsr random
001CDEr 3  85 rr                sta z80_h
001CE0r 3  20 rr rr             jsr imul
001CE3r 3  A5 rr                lda z80_h
001CE5r 3  85 rr                sta varrnd
001CE7r 3  A9 03                lda #3
001CE9r 3  85 rr                sta z80_c
001CEBr 3  A5 rr                lda varrnd
001CEDr 3  18                   clc
001CEEr 3  65 rr                adc z80_c
001CF0r 3  85 rr                sta varrnd
001CF2r 3  A9 00                lda #0
001CF4r 3  A0 0B                ldy #11
001CF6r 3  D1 rr                cmp (z80_ix),y
001CF8r 3  F0 03                beq *+5
001CFAr 3  4C rr rr             jmp e00881
001CFDr 3  20 rr rr             jsr cangl	; CANGOLEFT
001D00r 3  F0 03                beq :+
001D02r 3  4C rr rr             jmp e00852
001D05r 3               :
001D05r 3  A0 09                ldy #9 		; SPRITELEFT
001D07r 3  B1 rr                lda (z80_ix),y
001D09r 3  38                   sec
001D0Ar 3  E9 02                sbc #2
001D0Cr 3  91 rr                sta (z80_ix),y
001D0Er 3  A9 10                lda #16
001D10r 3  85 rr                sta z80_c
001D12r 3  A0 09                ldy #9
001D14r 3  B1 rr                lda (z80_ix),y
001D16r 3  38                   sec
001D17r 3  E5 rr                sbc z80_c
001D19r 3  A0 09                ldy #9
001D1Br 3  91 rr                sta (z80_ix),y
001D1Dr 3  A9 10                lda #16
001D1Fr 3  85 rr                sta z80_c
001D21r 3  A0 09                ldy #9
001D23r 3  B1 rr                lda (z80_ix),y
001D25r 3  18                   clc
001D26r 3  65 rr                adc z80_c
001D28r 3  A0 09                ldy #9
001D2Ar 3  91 rr                sta (z80_ix),y
001D2Cr 3  4C rr rr             jmp e00876
001D2Fr 3  A9 0F        e00852: lda #15		; BEEP
001D31r 3  8D rr rr             sta sndtyp
001D34r 3  A9 01                lda #1
001D36r 3  A0 0B                ldy #11
001D38r 3  91 rr                sta (z80_ix),y
001D3Ar 3  4C rr rr     e00876: jmp e01022
001D3Dr 3  20 rr rr     e00881: jsr cangr	; CANGORIGHT
001D40r 3  F0 03                beq :+
001D42r 3  4C rr rr             jmp e00998
001D45r 3               :
001D45r 3  A0 09                ldy #9 		; SPRITERIGHT
001D47r 3  B1 rr                lda (z80_ix),y
001D49r 3  18                   clc
001D4Ar 3  69 02                adc #2
001D4Cr 3  91 rr                sta (z80_ix),y
001D4Er 3  A9 10                lda #16
001D50r 3  85 rr                sta z80_c
001D52r 3  A0 09                ldy #9
001D54r 3  B1 rr                lda (z80_ix),y
001D56r 3  18                   clc
001D57r 3  65 rr                adc z80_c
001D59r 3  A0 09                ldy #9
001D5Br 3  91 rr                sta (z80_ix),y
001D5Dr 3  A9 10                lda #16
001D5Fr 3  85 rr                sta z80_c
001D61r 3  A0 09                ldy #9
001D63r 3  B1 rr                lda (z80_ix),y
001D65r 3  38                   sec
001D66r 3  E5 rr                sbc z80_c
001D68r 3  A0 09                ldy #9
001D6Ar 3  91 rr                sta (z80_ix),y
001D6Cr 3  4C rr rr             jmp e01022
001D6Fr 3  A9 0F        e00998: lda #15		; BEEP
001D71r 3  8D rr rr             sta sndtyp
001D74r 3  A9 00                lda #0
001D76r 3  A0 0B                ldy #11
001D78r 3  91 rr                sta (z80_ix),y
001D7Ar 3  A9 00        e01022: lda #0 	; COLLISION
001D7Cr 3  85 rr                sta z80_b
001D7Er 3  20 rr rr             jsr sktyp
001D81r 3  B0 03                bcs :+
001D83r 3  4C rr rr             jmp e01119
001D86r 3               :
001D86r 3  A5 rr                lda skptr	; OTHER
001D88r 3  85 rr                sta z80_x
001D8Ar 3  A5 rr                lda skptr+1
001D8Cr 3  85 rr                sta z80_i
001D8Er 3  A9 00                lda #0
001D90r 3  C5 rr                cmp varc
001D92r 3  F0 03                beq *+5
001D94r 3  4C rr rr             jmp e01098
001D97r 3  A9 08                lda #8
001D99r 3  A0 05                ldy #5
001D9Br 3  91 rr                sta (z80_ix),y
001D9Dr 3  A5 rr        e01098: lda ogptr	; ENDSPRITE
001D9Fr 3  85 rr                sta z80_x
001DA1r 3  A5 rr                lda ogptr+1
001DA3r 3  85 rr                sta z80_i
001DA5r 3  A9 01        e01119: lda #1 	; COLLISION
001DA7r 3  85 rr                sta z80_b
001DA9r 3  20 rr rr             jsr sktyp
001DACr 3  B0 03                bcs :+
001DAEr 3  4C rr rr             jmp e01216
001DB1r 3               :
001DB1r 3  A5 rr                lda skptr	; OTHER
001DB3r 3  85 rr                sta z80_x
001DB5r 3  A5 rr                lda skptr+1
001DB7r 3  85 rr                sta z80_i
001DB9r 3  A9 00                lda #0
001DBBr 3  C5 rr                cmp varc
001DBDr 3  F0 03                beq *+5
001DBFr 3  4C rr rr             jmp e01195
001DC2r 3  A9 08                lda #8
001DC4r 3  A0 05                ldy #5
001DC6r 3  91 rr                sta (z80_ix),y
001DC8r 3  A5 rr        e01195: lda ogptr	; ENDSPRITE
001DCAr 3  85 rr                sta z80_x
001DCCr 3  A5 rr                lda ogptr+1
001DCEr 3  85 rr                sta z80_i
001DD0r 3  60           e01216: rts
001DD1r 3               evnt05:
001DD1r 3  A9 00                lda #0 	; COLLISION
001DD3r 3  85 rr                sta z80_b
001DD5r 3  20 rr rr             jsr sktyp
001DD8r 3  B0 03                bcs :+
001DDAr 3  4C rr rr             jmp f00230
001DDDr 3               :
001DDDr 3  A9 08                lda #8
001DDFr 3  A0 06                ldy #6
001DE1r 3  D1 rr                cmp (z80_ix),y
001DE3r 3  F0 03                beq *+5
001DE5r 3  4C rr rr             jmp f00126
001DE8r 3  A9 01                lda #1
001DEAr 3  A0 07                ldy #7
001DECr 3  D1 rr                cmp (z80_ix),y
001DEEr 3  90 03                bcc *+5
001DF0r 3  4C rr rr             jmp f00126
001DF3r 3  A5 rr                lda skptr	; OTHER
001DF5r 3  85 rr                sta z80_x
001DF7r 3  A5 rr                lda skptr+1
001DF9r 3  85 rr                sta z80_i
001DFBr 3  A9 08                lda #8
001DFDr 3  A0 05                ldy #5
001DFFr 3  91 rr                sta (z80_ix),y
001E01r 3  A5 rr                lda ogptr	; ENDSPRITE
001E03r 3  85 rr                sta z80_x
001E05r 3  A5 rr                lda ogptr+1
001E07r 3  85 rr                sta z80_i
001E09r 3  A9 09        f00126: lda #9
001E0Br 3  A0 06                ldy #6
001E0Dr 3  D1 rr                cmp (z80_ix),y
001E0Fr 3  F0 03                beq *+5
001E11r 3  4C rr rr             jmp f00225
001E14r 3  A0 07                ldy #7
001E16r 3  B1 rr                lda (z80_ix),y
001E18r 3  C9 03                cmp #3
001E1Ar 3  90 03                bcc *+5
001E1Cr 3  4C rr rr             jmp f00225
001E1Fr 3  A5 rr                lda skptr	; OTHER
001E21r 3  85 rr                sta z80_x
001E23r 3  A5 rr                lda skptr+1
001E25r 3  85 rr                sta z80_i
001E27r 3  A9 08                lda #8
001E29r 3  A0 05                ldy #5
001E2Br 3  91 rr                sta (z80_ix),y
001E2Dr 3  A5 rr                lda ogptr	; ENDSPRITE
001E2Fr 3  85 rr                sta z80_x
001E31r 3  A5 rr                lda ogptr+1
001E33r 3  85 rr                sta z80_i
001E35r 3  4C rr rr     f00225: jmp f00453
001E38r 3  A9 01        f00230: lda #1 	; COLLISION
001E3Ar 3  85 rr                sta z80_b
001E3Cr 3  20 rr rr             jsr sktyp
001E3Fr 3  B0 03                bcs :+
001E41r 3  4C rr rr             jmp f00453
001E44r 3               :
001E44r 3  A9 08                lda #8
001E46r 3  A0 06                ldy #6
001E48r 3  D1 rr                cmp (z80_ix),y
001E4Ar 3  F0 03                beq *+5
001E4Cr 3  4C rr rr             jmp f00354
001E4Fr 3  A9 01                lda #1
001E51r 3  A0 07                ldy #7
001E53r 3  D1 rr                cmp (z80_ix),y
001E55r 3  90 03                bcc *+5
001E57r 3  4C rr rr             jmp f00354
001E5Ar 3  A5 rr                lda skptr	; OTHER
001E5Cr 3  85 rr                sta z80_x
001E5Er 3  A5 rr                lda skptr+1
001E60r 3  85 rr                sta z80_i
001E62r 3  A9 08                lda #8
001E64r 3  A0 05                ldy #5
001E66r 3  91 rr                sta (z80_ix),y
001E68r 3  A5 rr                lda ogptr	; ENDSPRITE
001E6Ar 3  85 rr                sta z80_x
001E6Cr 3  A5 rr                lda ogptr+1
001E6Er 3  85 rr                sta z80_i
001E70r 3  A9 09        f00354: lda #9
001E72r 3  A0 06                ldy #6
001E74r 3  D1 rr                cmp (z80_ix),y
001E76r 3  F0 03                beq *+5
001E78r 3  4C rr rr             jmp f00453
001E7Br 3  A0 07                ldy #7
001E7Dr 3  B1 rr                lda (z80_ix),y
001E7Fr 3  C9 03                cmp #3
001E81r 3  90 03                bcc *+5
001E83r 3  4C rr rr             jmp f00453
001E86r 3  A5 rr                lda skptr	; OTHER
001E88r 3  85 rr                sta z80_x
001E8Ar 3  A5 rr                lda skptr+1
001E8Cr 3  85 rr                sta z80_i
001E8Er 3  A9 08                lda #8
001E90r 3  A0 05                ldy #5
001E92r 3  91 rr                sta (z80_ix),y
001E94r 3  A5 rr                lda ogptr	; ENDSPRITE
001E96r 3  85 rr                sta z80_x
001E98r 3  A5 rr                lda ogptr+1
001E9Ar 3  85 rr                sta z80_i
001E9Cr 3  A9 00        f00453: lda #0
001E9Er 3  C5 rr                cmp vara
001EA0r 3  F0 03                beq *+5
001EA2r 3  4C rr rr             jmp f00872
001EA5r 3  A0 0B                ldy #11
001EA7r 3  B1 rr                lda (z80_ix),y
001EA9r 3  18                   clc
001EAAr 3  69 01                adc #1
001EACr 3  A0 0B                ldy #11
001EAEr 3  91 rr                sta (z80_ix),y
001EB0r 3  A9 01                lda #1
001EB2r 3  A0 0B                ldy #11
001EB4r 3  D1 rr                cmp (z80_ix),y
001EB6r 3  F0 03                beq *+5
001EB8r 3  4C rr rr             jmp f00532
001EBBr 3  A9 00                lda #0
001EBDr 3  A0 07                ldy #7
001EBFr 3  91 rr                sta (z80_ix),y
001EC1r 3  A9 0F        f00532: lda #15
001EC3r 3  A0 0B                ldy #11
001EC5r 3  D1 rr                cmp (z80_ix),y
001EC7r 3  F0 03                beq *+5
001EC9r 3  4C rr rr             jmp f00588
001ECCr 3  A0 0B                ldy #11
001ECEr 3  B1 rr                lda (z80_ix),y	; BEEP
001ED0r 3  29 7F                and #127
001ED2r 3  8D rr rr             sta sndtyp
001ED5r 3  A9 01                lda #1
001ED7r 3  A0 07                ldy #7
001ED9r 3  91 rr                sta (z80_ix),y
001EDBr 3  A9 10        f00588: lda #16
001EDDr 3  A0 0B                ldy #11
001EDFr 3  D1 rr                cmp (z80_ix),y
001EE1r 3  F0 03                beq *+5
001EE3r 3  4C rr rr             jmp f00624
001EE6r 3  A9 02                lda #2
001EE8r 3  A0 07                ldy #7
001EEAr 3  91 rr                sta (z80_ix),y
001EECr 3  A9 11        f00624: lda #17
001EEEr 3  A0 0B                ldy #11
001EF0r 3  D1 rr                cmp (z80_ix),y
001EF2r 3  F0 03                beq *+5
001EF4r 3  4C rr rr             jmp f00660
001EF7r 3  A9 03                lda #3
001EF9r 3  A0 07                ldy #7
001EFBr 3  91 rr                sta (z80_ix),y
001EFDr 3  A9 12        f00660: lda #18
001EFFr 3  A0 0B                ldy #11
001F01r 3  D1 rr                cmp (z80_ix),y
001F03r 3  F0 03                beq *+5
001F05r 3  4C rr rr             jmp f00695
001F08r 3  A9 04                lda #4
001F0Ar 3  A0 07                ldy #7
001F0Cr 3  91 rr                sta (z80_ix),y
001F0Er 3  A9 1E        f00695: lda #30
001F10r 3  A0 0B                ldy #11
001F12r 3  D1 rr                cmp (z80_ix),y
001F14r 3  F0 03                beq *+5
001F16r 3  4C rr rr             jmp f00731
001F19r 3  A9 03                lda #3
001F1Br 3  A0 07                ldy #7
001F1Dr 3  91 rr                sta (z80_ix),y
001F1Fr 3  A9 1F        f00731: lda #31
001F21r 3  A0 0B                ldy #11
001F23r 3  D1 rr                cmp (z80_ix),y
001F25r 3  F0 03                beq *+5
001F27r 3  4C rr rr             jmp f00767
001F2Ar 3  A9 02                lda #2
001F2Cr 3  A0 07                ldy #7
001F2Er 3  91 rr                sta (z80_ix),y
001F30r 3  A9 20        f00767: lda #32
001F32r 3  A0 0B                ldy #11
001F34r 3  D1 rr                cmp (z80_ix),y
001F36r 3  F0 03                beq *+5
001F38r 3  4C rr rr             jmp f00803
001F3Br 3  A9 01                lda #1
001F3Dr 3  A0 07                ldy #7
001F3Fr 3  91 rr                sta (z80_ix),y
001F41r 3  A9 21        f00803: lda #33
001F43r 3  A0 0B                ldy #11
001F45r 3  D1 rr                cmp (z80_ix),y
001F47r 3  F0 03                beq *+5
001F49r 3  4C rr rr             jmp f00872
001F4Cr 3  A0 0B                ldy #11
001F4Er 3  B1 rr                lda (z80_ix),y	; BEEP
001F50r 3  29 7F                and #127
001F52r 3  8D rr rr             sta sndtyp
001F55r 3  A9 00                lda #0
001F57r 3  A0 07                ldy #7
001F59r 3  91 rr                sta (z80_ix),y
001F5Br 3  A9 00                lda #0
001F5Dr 3  A0 0B                ldy #11
001F5Fr 3  91 rr                sta (z80_ix),y
001F61r 3  60           f00872: rts
001F62r 3               evnt06:
001F62r 3  A9 00                lda #0
001F64r 3  C5 rr                cmp vara
001F66r 3  F0 03                beq *+5
001F68r 3  4C rr rr             jmp g00030
001F6Br 3  A9 00                lda #0		; ANIMATE
001F6Dr 3  20 rr rr             jsr animsp
001F70r 3  A9 00        g00030: lda #0
001F72r 3  A0 0A                ldy #10
001F74r 3  D1 rr                cmp (z80_ix),y
001F76r 3  F0 03                beq *+5
001F78r 3  4C rr rr             jmp g00196
001F7Br 3  A9 10                lda #16
001F7Dr 3  85 rr                sta z80_c
001F7Fr 3  A0 08                ldy #8
001F81r 3  B1 rr                lda (z80_ix),y
001F83r 3  38                   sec
001F84r 3  E5 rr                sbc z80_c
001F86r 3  A0 08                ldy #8
001F88r 3  91 rr                sta (z80_ix),y
001F8Ar 3  20 rr rr             jsr cangu	; CANGOUP
001F8Dr 3  F0 03                beq :+
001F8Fr 3  4C rr rr             jmp g00143
001F92r 3               :
001F92r 3  A9 0F                lda #15
001F94r 3  85 rr                sta z80_c
001F96r 3  A0 08                ldy #8
001F98r 3  B1 rr                lda (z80_ix),y
001F9Ar 3  18                   clc
001F9Br 3  65 rr                adc z80_c
001F9Dr 3  A0 08                ldy #8
001F9Fr 3  91 rr                sta (z80_ix),y
001FA1r 3  4C rr rr             jmp g00191
001FA4r 3  A9 10        g00143: lda #16
001FA6r 3  85 rr                sta z80_c
001FA8r 3  A0 08                ldy #8
001FAAr 3  B1 rr                lda (z80_ix),y
001FACr 3  18                   clc
001FADr 3  65 rr                adc z80_c
001FAFr 3  A0 08                ldy #8
001FB1r 3  91 rr                sta (z80_ix),y
001FB3r 3  A9 01                lda #1
001FB5r 3  A0 0A                ldy #10
001FB7r 3  91 rr                sta (z80_ix),y
001FB9r 3  4C rr rr     g00191: jmp g00256
001FBCr 3  20 rr rr     g00196: jsr cangd	; CANGODOWN
001FBFr 3  F0 03                beq :+
001FC1r 3  4C rr rr             jmp g00243
001FC4r 3               :
001FC4r 3  A0 08                ldy #8
001FC6r 3  B1 rr                lda (z80_ix),y
001FC8r 3  18                   clc
001FC9r 3  69 01                adc #1
001FCBr 3  A0 08                ldy #8
001FCDr 3  91 rr                sta (z80_ix),y
001FCFr 3  4C rr rr             jmp g00256
001FD2r 3  A9 00        g00243: lda #0
001FD4r 3  A0 0A                ldy #10
001FD6r 3  91 rr                sta (z80_ix),y
001FD8r 3  A9 00        g00256: lda #0 	; COLLISION
001FDAr 3  85 rr                sta z80_b
001FDCr 3  20 rr rr             jsr sktyp
001FDFr 3  B0 03                bcs :+
001FE1r 3  4C rr rr             jmp g00519
001FE4r 3               :
001FE4r 3  A0 08                ldy #8
001FE6r 3  B1 rr                lda (z80_ix),y
001FE8r 3  85 rr                sta varp
001FEAr 3  A5 rr                lda skptr	; OTHER
001FECr 3  85 rr                sta z80_x
001FEEr 3  A5 rr                lda skptr+1
001FF0r 3  85 rr                sta z80_i
001FF2r 3  A0 08                ldy #8
001FF4r 3  B1 rr                lda (z80_ix),y
001FF6r 3  C5 rr                cmp varp
001FF8r 3  90 03                bcc *+5
001FFAr 3  4C rr rr             jmp g00519
001FFDr 3  A0 08                ldy #8
001FFFr 3  B1 rr                lda (z80_ix),y
002001r 3  85 rr                sta z80_c
002003r 3  A5 rr                lda varp
002005r 3  38                   sec
002006r 3  E5 rr                sbc z80_c
002008r 3  85 rr                sta varp
00200Ar 3  A9 08                lda #8
00200Cr 3  C5 rr                cmp varp
00200Er 3  90 03                bcc *+5
002010r 3  4C rr rr             jmp g00497
002013r 3  A0 08                ldy #8
002015r 3  B1 rr                lda (z80_ix),y
002017r 3  85 rr                sta z80_c
002019r 3  A5 rr                lda varp
00201Br 3  18                   clc
00201Cr 3  65 rr                adc z80_c
00201Er 3  85 rr                sta varp
002020r 3  A5 rr                lda varp
002022r 3  A0 08                ldy #8
002024r 3  91 rr                sta (z80_ix),y
002026r 3  A9 10                lda #16
002028r 3  85 rr                sta z80_c
00202Ar 3  A0 08                ldy #8
00202Cr 3  B1 rr                lda (z80_ix),y
00202Er 3  38                   sec
00202Fr 3  E5 rr                sbc z80_c
002031r 3  A0 08                ldy #8
002033r 3  91 rr                sta (z80_ix),y
002035r 3  20 rr rr             jsr gravst	; STOPFALL
002038r 3  A5 rr                lda joyval	; KEY
00203Ar 3  29 08                and #8
00203Cr 3  F0 03                beq :+
00203Er 3  4C rr rr             jmp g00497
002041r 3               :
002041r 3  20 rr rr             jsr jump	; TABLEJUMP
002044r 3  A5 rr        g00497: lda ogptr	; ENDSPRITE
002046r 3  85 rr                sta z80_x
002048r 3  A5 rr                lda ogptr+1
00204Ar 3  85 rr                sta z80_i
00204Cr 3  4C rr rr     g00519: jmp grav
00204Fr 3               evnt07:
00204Fr 3  A9 04                lda #4 	; COLLISION
002051r 3  85 rr                sta z80_b
002053r 3  20 rr rr             jsr sktyp
002056r 3  B0 03                bcs :+
002058r 3  4C rr rr             jmp h00135
00205Br 3               :
00205Br 3  A9 07                lda #7
00205Dr 3  85 rr                sta z80_d	; GETRANDOM
00205Fr 3  20 rr rr             jsr random
002062r 3  85 rr                sta z80_h
002064r 3  20 rr rr             jsr imul
002067r 3  A5 rr                lda z80_h
002069r 3  85 rr                sta varrnd
00206Br 3  A5 rr                lda varrnd
00206Dr 3  18                   clc
00206Er 3  69 01                adc #1
002070r 3  85 rr                sta varrnd
002072r 3  A9 5A                lda #90
002074r 3  A0 09                ldy #9
002076r 3  D1 rr                cmp (z80_ix),y
002078r 3  90 03                bcc *+5
00207Ar 3  4C rr rr             jmp h00117
00207Dr 3  A9 01                lda #1
00207Fr 3  A0 07                ldy #7
002081r 3  91 rr                sta (z80_ix),y
002083r 3  4C rr rr             jmp h00130
002086r 3  A9 02        h00117: lda #2
002088r 3  A0 07                ldy #7
00208Ar 3  91 rr                sta (z80_ix),y
00208Cr 3  4C rr rr     h00130: jmp h00148
00208Fr 3  A9 00        h00135: lda #0
002091r 3  A0 07                ldy #7
002093r 3  91 rr                sta (z80_ix),y
002095r 3  60           h00148: rts
002096r 3               evnt08:
002096r 3  20 rr rr             jsr cangd	; CANGODOWN
002099r 3  F0 03                beq :+
00209Br 3  4C rr rr             jmp i00049
00209Er 3               :
00209Er 3  A0 08                ldy #8 		; SPRITEDOWN
0020A0r 3  B1 rr                lda (z80_ix),y
0020A2r 3  18                   clc
0020A3r 3  69 02                adc #2
0020A5r 3  91 rr                sta (z80_ix),y
0020A7r 3  4C rr rr             jmp i00101
0020AAr 3  A0 0B        i00049: ldy #11
0020ACr 3  B1 rr                lda (z80_ix),y
0020AEr 3  18                   clc
0020AFr 3  69 01                adc #1
0020B1r 3  A0 0B                ldy #11
0020B3r 3  91 rr                sta (z80_ix),y
0020B5r 3  A0 0C                ldy #12
0020B7r 3  B1 rr                lda (z80_ix),y
0020B9r 3  18                   clc
0020BAr 3  69 01                adc #1
0020BCr 3  A0 0C                ldy #12
0020BEr 3  91 rr                sta (z80_ix),y
0020C0r 3  A9 04        i00101: lda #4
0020C2r 3  A0 06                ldy #6
0020C4r 3  D1 rr                cmp (z80_ix),y
0020C6r 3  F0 03                beq *+5
0020C8r 3  4C rr rr             jmp i00137
0020CBr 3  A9 0C                lda #12
0020CDr 3  A0 06                ldy #6
0020CFr 3  91 rr                sta (z80_ix),y
0020D1r 3  A9 03        i00137: lda #3
0020D3r 3  A0 06                ldy #6
0020D5r 3  D1 rr                cmp (z80_ix),y
0020D7r 3  F0 03                beq *+5
0020D9r 3  4C rr rr             jmp i00172
0020DCr 3  A9 0C                lda #12
0020DEr 3  A0 06                ldy #6
0020E0r 3  91 rr                sta (z80_ix),y
0020E2r 3  A9 0C        i00172: lda #12
0020E4r 3  A0 06                ldy #6
0020E6r 3  D1 rr                cmp (z80_ix),y
0020E8r 3  F0 03                beq *+5
0020EAr 3  4C rr rr             jmp i00461
0020EDr 3  A9 01                lda #1 	; COLLISION
0020EFr 3  85 rr                sta z80_b
0020F1r 3  20 rr rr             jsr sktyp
0020F4r 3  B0 03                bcs :+
0020F6r 3  4C rr rr             jmp i00291
0020F9r 3               :
0020F9r 3  A5 rr                lda skptr	; OTHER
0020FBr 3  85 rr                sta z80_x
0020FDr 3  A5 rr                lda skptr+1
0020FFr 3  85 rr                sta z80_i
002101r 3  A9 00                lda #0
002103r 3  C5 rr                cmp varc
002105r 3  F0 03                beq *+5
002107r 3  4C rr rr             jmp i00270
00210Ar 3  A9 08                lda #8
00210Cr 3  A0 05                ldy #5
00210Er 3  91 rr                sta (z80_ix),y
002110r 3  A5 rr        i00270: lda ogptr	; ENDSPRITE
002112r 3  85 rr                sta z80_x
002114r 3  A5 rr                lda ogptr+1
002116r 3  85 rr                sta z80_i
002118r 3  A9 00        i00291: lda #0 	; COLLISION
00211Ar 3  85 rr                sta z80_b
00211Cr 3  20 rr rr             jsr sktyp
00211Fr 3  B0 03                bcs :+
002121r 3  4C rr rr             jmp i00388
002124r 3               :
002124r 3  A5 rr                lda skptr	; OTHER
002126r 3  85 rr                sta z80_x
002128r 3  A5 rr                lda skptr+1
00212Ar 3  85 rr                sta z80_i
00212Cr 3  A9 00                lda #0
00212Er 3  C5 rr                cmp varc
002130r 3  F0 03                beq *+5
002132r 3  4C rr rr             jmp i00367
002135r 3  A9 08                lda #8
002137r 3  A0 05                ldy #5
002139r 3  91 rr                sta (z80_ix),y
00213Br 3  A5 rr        i00367: lda ogptr	; ENDSPRITE
00213Dr 3  85 rr                sta z80_x
00213Fr 3  A5 rr                lda ogptr+1
002141r 3  85 rr                sta z80_i
002143r 3  A0 0C        i00388: ldy #12
002145r 3  B1 rr                lda (z80_ix),y	; BEEP
002147r 3  29 7F                and #127
002149r 3  8D rr rr             sta sndtyp
00214Cr 3  A9 1E                lda #30
00214Er 3  A0 0C                ldy #12
002150r 3  D1 rr                cmp (z80_ix),y
002152r 3  90 03                bcc *+5
002154r 3  4C rr rr             jmp i00461
002157r 3  A9 FF                lda #255	; REMOVE
002159r 3  A0 05                ldy #5
00215Br 3  91 rr                sta (z80_ix),y
00215Dr 3  A9 00                lda #0
00215Fr 3  A0 0C                ldy #12
002161r 3  91 rr                sta (z80_ix),y
002163r 3  A9 00        i00461: lda #0
002165r 3  A0 06                ldy #6
002167r 3  D1 rr                cmp (z80_ix),y
002169r 3  F0 03                beq *+5
00216Br 3  4C rr rr             jmp i00496
00216Er 3  A9 0A                lda #10
002170r 3  A0 06                ldy #6
002172r 3  91 rr                sta (z80_ix),y
002174r 3  A9 01        i00496: lda #1
002176r 3  A0 06                ldy #6
002178r 3  D1 rr                cmp (z80_ix),y
00217Ar 3  F0 03                beq *+5
00217Cr 3  4C rr rr             jmp i00532
00217Fr 3  A9 0A                lda #10
002181r 3  A0 06                ldy #6
002183r 3  91 rr                sta (z80_ix),y
002185r 3  A9 02        i00532: lda #2
002187r 3  A0 06                ldy #6
002189r 3  D1 rr                cmp (z80_ix),y
00218Br 3  F0 03                beq *+5
00218Dr 3  4C rr rr             jmp i00567
002190r 3  A9 0A                lda #10
002192r 3  A0 06                ldy #6
002194r 3  91 rr                sta (z80_ix),y
002196r 3  A9 06        i00567: lda #6
002198r 3  A0 06                ldy #6
00219Ar 3  D1 rr                cmp (z80_ix),y
00219Cr 3  F0 03                beq *+5
00219Er 3  4C rr rr             jmp i00603
0021A1r 3  A9 0A                lda #10
0021A3r 3  A0 06                ldy #6
0021A5r 3  91 rr                sta (z80_ix),y
0021A7r 3  A9 00        i00603: lda #0
0021A9r 3  C5 rr                cmp vara
0021ABr 3  F0 03                beq *+5
0021ADr 3  4C rr rr             jmp i00631
0021B0r 3  A9 00                lda #0		; ANIMATE
0021B2r 3  20 rr rr             jsr animsp
0021B5r 3  A9 0A        i00631: lda #10
0021B7r 3  A0 06                ldy #6
0021B9r 3  D1 rr                cmp (z80_ix),y
0021BBr 3  F0 03                beq *+5
0021BDr 3  4C rr rr             jmp i00789
0021C0r 3  A0 0B                ldy #11
0021C2r 3  B1 rr                lda (z80_ix),y	; BEEP
0021C4r 3  29 7F                and #127
0021C6r 3  8D rr rr             sta sndtyp
0021C9r 3  A9 19                lda #25
0021CBr 3  A0 0B                ldy #11
0021CDr 3  D1 rr                cmp (z80_ix),y
0021CFr 3  F0 03                beq *+5
0021D1r 3  4C rr rr             jmp i00789
0021D4r 3  A9 08                lda #8
0021D6r 3  85 rr                sta chary
0021D8r 3  A9 06                lda #6
0021DAr 3  85 rr                sta charx
0021DCr 3  A9 01                lda #1		; PRINTMODE
0021DEr 3  85 rr                sta prtmod
0021E0r 3  A9 02                lda #2 	; INK
0021E2r 3  8D rr rr             sta fontcol
0021E5r 3  A9 07                lda #7  	; MESSAGE
0021E7r 3  20 rr rr             jsr dmsg
0021EAr 3  A9 00                lda #0		; PRINTMODE
0021ECr 3  85 rr                sta prtmod
0021EEr 3  A9 01                lda #1 	; INK
0021F0r 3  8D rr rr             sta fontcol
0021F3r 3  A9 1E                lda #30 	; DELAY
0021F5r 3  20 rr rr             jsr delay
0021F8r 3  A9 01                lda #1 		; KILL
0021FAr 3  85 rr                sta deadf
0021FCr 3  60           i00789: rts
0021FDr 3               evnt09:
0021FDr 3  60                   rts
0021FEr 3               evnt10:
0021FEr 3  A9 00                lda #0
002200r 3  C5 rr                cmp scno
002202r 3  F0 03                beq *+5
002204r 3  4C rr rr             jmp k00091
002207r 3  A9 15                lda #21
002209r 3  85 rr                sta chary
00220Br 3  A9 06                lda #6
00220Dr 3  85 rr                sta charx
00220Fr 3  A9 05                lda #5 	; INK
002211r 3  8D rr rr             sta fontcol
002214r 3  A9 06                lda #6  	; MESSAGE
002216r 3  20 rr rr             jsr dmsg
002219r 3  A9 01                lda #1 	; INK
00221Br 3  8D rr rr             sta fontcol
00221Er 3  20 rr rr             jsr prskey	; WAITKEY
002221r 3  A9 01                lda #1	; NEXTLEVEL
002223r 3  85 rr                sta nexlev
002225r 3  4C rr rr             jmp k00236
002228r 3  A9 00        k00091: lda #0
00222Ar 3  C5 rr                cmp varz
00222Cr 3  F0 03                beq *+5
00222Er 3  4C rr rr             jmp k00236
002231r 3  A9 00                lda #0
002233r 3  85 rr                sta chary
002235r 3  A9 00                lda #0
002237r 3  85 rr                sta charx
002239r 3  A9 0A                lda #10		; PRINT
00223Br 3  20 rr rr             jsr dmsg
00223Er 3  A5 rr                lda numlif	; DISPLAY
002240r 3  20 rr rr             jsr disply
002243r 3  A9 00                lda #0
002245r 3  85 rr                sta chary
002247r 3  A9 12                lda #18
002249r 3  85 rr                sta charx
00224Br 3  A9 0B                lda #11		; PRINT
00224Dr 3  20 rr rr             jsr dmsg
002250r 3  A9 00                lda #0
002252r 3  C5 rr                cmp scno
002254r 3  90 03                bcc *+5
002256r 3  4C rr rr             jmp k00228
002259r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
00225Br 3  85 rr                sta z80_c
00225Dr 3  A9 rr                lda #>displ0
00225Fr 3  85 rr                sta z80_b
002261r 3  A5 rr                lda scno
002263r 3  20 rr rr             jsr num2dd
002266r 3  20 rr rr             jsr displ1
002269r 3  A9 01        k00228: lda #1
00226Br 3  85 rr                sta varz
00226Dr 3  A9 00        k00236: lda #0
00226Fr 3  C5 rr                cmp vara
002271r 3  F0 03                beq *+5
002273r 3  4C rr rr             jmp k00265
002276r 3  A9 01                lda #1
002278r 3  85 rr                sta vara
00227Ar 3  4C rr rr             jmp k00273
00227Dr 3  A9 00        k00265: lda #0
00227Fr 3  85 rr                sta vara
002281r 3  60           k00273: rts
002282r 3               evnt11:
002282r 3  A9 17                lda #23
002284r 3  C5 rr                cmp scno
002286r 3  F0 03                beq *+5
002288r 3  4C rr rr             jmp l00159
00228Br 3  A9 02                lda #2
00228Dr 3  85 rr                sta chary
00228Fr 3  A9 04                lda #4
002291r 3  85 rr                sta charx
002293r 3  A9 01                lda #1		; PRINTMODE
002295r 3  85 rr                sta prtmod
002297r 3  A9 07                lda #7 	; INK
002299r 3  8D rr rr             sta fontcol
00229Cr 3  A9 08                lda #8  	; MESSAGE
00229Er 3  20 rr rr             jsr dmsg
0022A1r 3  A9 01                lda #1		; PRINTMODE
0022A3r 3  85 rr                sta prtmod
0022A5r 3  A9 05                lda #5 	; INK
0022A7r 3  8D rr rr             sta fontcol
0022AAr 3  A9 14                lda #20
0022ACr 3  85 rr                sta chary
0022AEr 3  A9 06                lda #6
0022B0r 3  85 rr                sta charx
0022B2r 3  A9 09                lda #9  	; MESSAGE
0022B4r 3  20 rr rr             jsr dmsg
0022B7r 3  A9 01                lda #1 	; INK
0022B9r 3  8D rr rr             sta fontcol
0022BCr 3  A5 rr                lda joyval	; KEY
0022BEr 3  29 10                and #16
0022C0r 3  F0 03                beq :+
0022C2r 3  4C rr rr             jmp l00159
0022C5r 3               :
0022C5r 3  A9 01                lda #1		; ENDGAME
0022C7r 3  85 rr                sta gamwon
0022C9r 3  60           l00159: rts
0022CAr 3               evnt12:
0022CAr 3  A9 00                lda #0 	; PAPER
0022CCr 3  0A                   asl a
0022CDr 3  0A                   asl a
0022CEr 3  0A                   asl a
0022CFr 3  0A                   asl a
0022D0r 3  85 rr                sta tmp
0022D2r 3  AD 0F 90             lda RegF
0022D5r 3  29 0F                and #%00001111
0022D7r 3  05 rr                ora tmp
0022D9r 3  8D 0F 90             sta RegF
0022DCr 3  A9 01                lda #1 	; INK
0022DEr 3  8D rr rr             sta fontcol
0022E1r 3  20 rr rr             jsr cls		; CLS
0022E4r 3  A9 06                lda #6		; AT
0022E6r 3  85 rr                sta chary
0022E8r 3  A9 05                lda #5
0022EAr 3  85 rr                sta charx
0022ECr 3  A9 04                lda #4 	; INK
0022EEr 3  8D rr rr             sta fontcol
0022F1r 3  A9 01                lda #1		; PRINTMODE
0022F3r 3  85 rr                sta prtmod
0022F5r 3  A9 0C                lda #12		; PRINT
0022F7r 3  20 rr rr             jsr dmsg
0022FAr 3  A9 00                lda #0		; PRINTMODE
0022FCr 3  85 rr                sta prtmod
0022FEr 3  A9 0A                lda #10		; AT
002300r 3  85 rr                sta chary
002302r 3  A9 05                lda #5
002304r 3  85 rr                sta charx
002306r 3  A9 07                lda #7 	; INK
002308r 3  8D rr rr             sta fontcol
00230Br 3  A9 0D                lda #13		; PRINT
00230Dr 3  20 rr rr             jsr dmsg
002310r 3  A9 0C                lda #12		; AT
002312r 3  85 rr                sta chary
002314r 3  A9 05                lda #5
002316r 3  85 rr                sta charx
002318r 3  A9 0E                lda #14		; PRINT
00231Ar 3  20 rr rr             jsr dmsg
00231Dr 3  A9 11                lda #17		; AT
00231Fr 3  85 rr                sta chary
002321r 3  A9 05                lda #5
002323r 3  85 rr                sta charx
002325r 3  A9 03                lda #3 	; INK
002327r 3  8D rr rr             sta fontcol
00232Ar 3  A9 0F                lda #15		; PRINT
00232Cr 3  20 rr rr             jsr dmsg
00232Fr 3  A9 01                lda #1 	; INK
002331r 3  8D rr rr             sta fontcol
002334r 3               
002334r 3               rtcon:			; CONTROLMENU
002334r 3  20 rr rr             jsr vsync
002337r 3  A9 00                lda #0
002339r 3  85 rr                sta contrl
00233Br 3  AD rr rr             lda keys+7
00233Er 3  20 rr rr             jsr ktest
002341r 3  90 0C                bcc rtcon1
002343r 3  A9 01                lda #1
002345r 3  85 rr                sta contrl
002347r 3  AD rr rr             lda keys+8
00234Ar 3  20 rr rr             jsr ktest
00234Dr 3  B0 E5                bcs rtcon
00234Fr 3                       rtcon1:
00234Fr 3  60                   rts
002350r 3               evnt13:
002350r 3  A9 01                lda #1
002352r 3  85 rr                sta varm
002354r 3  A9 00                lda #0
002356r 3  85 rr                sta varc
002358r 3  A9 09                lda #9
00235Ar 3  85 rr                sta numlif
00235Cr 3  60                   rts
00235Dr 3               evnt14:
00235Dr 3  A9 00                lda #0
00235Fr 3  C5 rr                cmp scno
002361r 3  F0 03                beq *+5
002363r 3  4C rr rr             jmp o00026
002366r 3  A9 01                lda #1
002368r 3  85 rr                sta varm
00236Ar 3  A9 01        o00026: lda #1
00236Cr 3  C5 rr                cmp scno
00236Er 3  F0 03                beq *+5
002370r 3  4C rr rr             jmp o00051
002373r 3  A9 02                lda #2
002375r 3  85 rr                sta varm
002377r 3  A9 02        o00051: lda #2
002379r 3  C5 rr                cmp scno
00237Br 3  F0 03                beq *+5
00237Dr 3  4C rr rr             jmp o00076
002380r 3  A9 03                lda #3
002382r 3  85 rr                sta varm
002384r 3  A9 03        o00076: lda #3
002386r 3  C5 rr                cmp scno
002388r 3  F0 03                beq *+5
00238Ar 3  4C rr rr             jmp o00101
00238Dr 3  A9 04                lda #4
00238Fr 3  85 rr                sta varm
002391r 3  A9 04        o00101: lda #4
002393r 3  C5 rr                cmp scno
002395r 3  F0 03                beq *+5
002397r 3  4C rr rr             jmp o00125
00239Ar 3  A9 02                lda #2
00239Cr 3  85 rr                sta varm
00239Er 3  A9 05        o00125: lda #5
0023A0r 3  C5 rr                cmp scno
0023A2r 3  F0 03                beq *+5
0023A4r 3  4C rr rr             jmp o00150
0023A7r 3  A9 03                lda #3
0023A9r 3  85 rr                sta varm
0023ABr 3  A9 06        o00150: lda #6
0023ADr 3  C5 rr                cmp scno
0023AFr 3  F0 03                beq *+5
0023B1r 3  4C rr rr             jmp o00175
0023B4r 3  A9 04                lda #4
0023B6r 3  85 rr                sta varm
0023B8r 3  A9 07        o00175: lda #7
0023BAr 3  C5 rr                cmp scno
0023BCr 3  F0 03                beq *+5
0023BEr 3  4C rr rr             jmp o00200
0023C1r 3  A9 02                lda #2
0023C3r 3  85 rr                sta varm
0023C5r 3  A9 08        o00200: lda #8
0023C7r 3  C5 rr                cmp scno
0023C9r 3  F0 03                beq *+5
0023CBr 3  4C rr rr             jmp o00224
0023CEr 3  A9 03                lda #3
0023D0r 3  85 rr                sta varm
0023D2r 3  A9 09        o00224: lda #9
0023D4r 3  C5 rr                cmp scno
0023D6r 3  F0 03                beq *+5
0023D8r 3  4C rr rr             jmp o00249
0023DBr 3  A9 04                lda #4
0023DDr 3  85 rr                sta varm
0023DFr 3  A9 0A        o00249: lda #10
0023E1r 3  C5 rr                cmp scno
0023E3r 3  F0 03                beq *+5
0023E5r 3  4C rr rr             jmp o00274
0023E8r 3  A9 02                lda #2
0023EAr 3  85 rr                sta varm
0023ECr 3  A9 0B        o00274: lda #11
0023EEr 3  C5 rr                cmp scno
0023F0r 3  F0 03                beq *+5
0023F2r 3  4C rr rr             jmp o00299
0023F5r 3  A9 03                lda #3
0023F7r 3  85 rr                sta varm
0023F9r 3  A9 0C        o00299: lda #12
0023FBr 3  C5 rr                cmp scno
0023FDr 3  F0 03                beq *+5
0023FFr 3  4C rr rr             jmp o00324
002402r 3  A9 04                lda #4
002404r 3  85 rr                sta varm
002406r 3  A9 0D        o00324: lda #13
002408r 3  C5 rr                cmp scno
00240Ar 3  F0 03                beq *+5
00240Cr 3  4C rr rr             jmp o00349
00240Fr 3  A9 02                lda #2
002411r 3  85 rr                sta varm
002413r 3  A9 0E        o00349: lda #14
002415r 3  C5 rr                cmp scno
002417r 3  F0 03                beq *+5
002419r 3  4C rr rr             jmp o00374
00241Cr 3  A9 03                lda #3
00241Er 3  85 rr                sta varm
002420r 3  A9 0F        o00374: lda #15
002422r 3  C5 rr                cmp scno
002424r 3  F0 03                beq *+5
002426r 3  4C rr rr             jmp o00399
002429r 3  A9 04                lda #4
00242Br 3  85 rr                sta varm
00242Dr 3  A9 10        o00399: lda #16
00242Fr 3  C5 rr                cmp scno
002431r 3  F0 03                beq *+5
002433r 3  4C rr rr             jmp o00424
002436r 3  A9 02                lda #2
002438r 3  85 rr                sta varm
00243Ar 3  A9 11        o00424: lda #17
00243Cr 3  C5 rr                cmp scno
00243Er 3  F0 03                beq *+5
002440r 3  4C rr rr             jmp o00449
002443r 3  A9 03                lda #3
002445r 3  85 rr                sta varm
002447r 3  A9 12        o00449: lda #18
002449r 3  C5 rr                cmp scno
00244Br 3  F0 03                beq *+5
00244Dr 3  4C rr rr             jmp o00474
002450r 3  A9 04                lda #4
002452r 3  85 rr                sta varm
002454r 3  A9 13        o00474: lda #19
002456r 3  C5 rr                cmp scno
002458r 3  F0 03                beq *+5
00245Ar 3  4C rr rr             jmp o00499
00245Dr 3  A9 02                lda #2
00245Fr 3  85 rr                sta varm
002461r 3  A9 14        o00499: lda #20
002463r 3  C5 rr                cmp scno
002465r 3  F0 03                beq *+5
002467r 3  4C rr rr             jmp o00524
00246Ar 3  A9 03                lda #3
00246Cr 3  85 rr                sta varm
00246Er 3  A9 15        o00524: lda #21
002470r 3  C5 rr                cmp scno
002472r 3  F0 03                beq *+5
002474r 3  4C rr rr             jmp o00549
002477r 3  A9 04                lda #4
002479r 3  85 rr                sta varm
00247Br 3  A9 16        o00549: lda #22
00247Dr 3  C5 rr                cmp scno
00247Fr 3  F0 03                beq *+5
002481r 3  4C rr rr             jmp o00574
002484r 3  A9 02                lda #2
002486r 3  85 rr                sta varm
002488r 3  A9 17        o00574: lda #23
00248Ar 3  C5 rr                cmp scno
00248Cr 3  F0 03                beq *+5
00248Er 3  4C rr rr             jmp o00599
002491r 3  A9 05                lda #5
002493r 3  85 rr                sta varm
002495r 3  A9 00        o00599: lda #0
002497r 3  85 rr                sta varc
002499r 3  A9 00                lda #0
00249Br 3  85 rr                sta vare
00249Dr 3  A9 00                lda #0
00249Fr 3  85 rr                sta vara
0024A1r 3  A9 00                lda #0
0024A3r 3  85 rr                sta varz
0024A5r 3  60                   rts
0024A6r 3               evnt15:
0024A6r 3  60                   rts
0024A7r 3               evnt16:
0024A7r 3  A5 rr                lda numlif
0024A9r 3  38                   sec
0024AAr 3  E9 01                sbc #1
0024ACr 3  85 rr                sta numlif
0024AEr 3  A9 00                lda #0
0024B0r 3  C5 rr                cmp numlif
0024B2r 3  F0 03                beq *+5
0024B4r 3  4C rr rr             jmp q00082
0024B7r 3  20 rr rr             jsr redraw	; REDRAW
0024BAr 3  A9 17                lda #23
0024BCr 3  85 rr                sta chary
0024BEr 3  A9 14                lda #20
0024C0r 3  85 rr                sta charx
0024C2r 3  A5 rr                lda numlif	; DISPLAY
0024C4r 3  20 rr rr             jsr disply
0024C7r 3  A9 01                lda #1		; ENDGAME
0024C9r 3  85 rr                sta gamwon
0024CBr 3  60           q00082: rts
0024CCr 3               evnt17:
0024CCr 3  A9 09                lda #9
0024CEr 3  85 rr                sta chary
0024D0r 3  A9 08                lda #8
0024D2r 3  85 rr                sta charx
0024D4r 3  A9 01                lda #1		; PRINTMODE
0024D6r 3  85 rr                sta prtmod
0024D8r 3  A9 02                lda #2 	; INK
0024DAr 3  8D rr rr             sta fontcol
0024DDr 3  A9 00                lda #0  	; MESSAGE
0024DFr 3  20 rr rr             jsr dmsg
0024E2r 3  A9 00                lda #0		; PRINTMODE
0024E4r 3  85 rr                sta prtmod
0024E6r 3  A9 01                lda #1 	; INK
0024E8r 3  8D rr rr             sta fontcol
0024EBr 3  A9 05                lda #5
0024EDr 3  85 rr                sta varm
0024EFr 3  20 rr rr             jsr prskey	; WAITKEY
0024F2r 3  60                   rts
0024F3r 3               evnt18:
0024F3r 3  A9 32                lda #50 	; DELAY
0024F5r 3  20 rr rr             jsr delay
0024F8r 3  60                   rts
0024F9r 3               evnt19:
0024F9r 3  60                   rts
0024FAr 3               evnt20:
0024FAr 3  60                   rts
0024FBr 3  60           ptcusr: rts
0024FCr 3               data_start:
0024FCr 3               msgdat:
0024FCr 3  47 41 4D 45          .byte "GAME,OVE",210
002500r 3  2C 4F 56 45  
002504r 3  D2           
002505r 3  57 45 4C 4C          .byte "WELL,DON",197
002509r 3  2C 44 4F 4E  
00250Dr 3  C5           
00250Er 3  3F 3F BF             .byte "??",191
002511r 3  47 4F 4F 44          .byte "GOOD LUCK",161
002515r 3  20 4C 55 43  
002519r 3  4B A1        
00251Br 3  38 F8                .byte "8",248
00251Dr 3  52 45 41 44          .byte "READY",191
002521r 3  59 BF        
002523r 3  50 52 45 53          .byte "PRESS A KE",217
002527r 3  53 20 41 20  
00252Br 3  4B 45 D9     
00252Er 3  42 41 44 20          .byte "BAD LUCK",161
002532r 3  4C 55 43 4B  
002536r 3  A1           
002537r 3  43 4F 4E 47          .byte "CONGRATULATIONS",161
00253Br 3  52 41 54 55  
00253Fr 3  4C 41 54 49  
002547r 3  59 4F 55 20          .byte "YOU MADE I",212
00254Br 3  4D 41 44 45  
00254Fr 3  20 49 D4     
002552r 3  7D BA                .byte "}",186
002554r 3  4C BA                .byte "L",186
002556r 3  44 49 52 54          .byte "DIRTY DOZE",210
00255Ar 3  59 20 44 4F  
00255Er 3  5A 45 D2     
002561r 3  31 20 2D 20          .byte "1 - KEYBOAR",196
002565r 3  4B 45 59 42  
002569r 3  4F 41 52 C4  
00256Dr 3  32 20 2D 20          .byte "2 - JOYSTIC",203
002571r 3  4A 4F 59 53  
002575r 3  54 49 43 CB  
002579r 3  52 20 2D 20          .byte "R - Retr",249
00257Dr 3  52 65 74 72  
002581r 3  F9           
002582r 3               nummsg:
002582r 3  10                   .byte 16
002583r 3               chgfx:
002583r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002587r 3  00 00 00 00  
00258Br 3  77 77 63 00          .byte 119,119,99,0,238,238,198,0
00258Fr 3  EE EE C6 00  
002593r 3  FF E7 DB 85          .byte 255,231,219,133,129,195,231,255
002597r 3  81 C3 E7 FF  
00259Br 3  E7 E7 E7 00          .byte 231,231,231,0,126,126,126,0
00259Fr 3  7E 7E 7E 00  
0025A3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0025A7r 3  00 00 00 00  
0025ABr 3  E7 E7 E7 00          .byte 231,231,231,0,126,126,126,0
0025AFr 3  7E 7E 7E 00  
0025B3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0025B7r 3  00 00 00 00  
0025BBr 3  F7 A5 C3 81          .byte 247,165,195,129,195,66,129,129
0025BFr 3  C3 42 81 81  
0025C3r 3  EF BB A5 90          .byte 239,187,165,144,74,81,82,138
0025C7r 3  4A 51 52 8A  
0025CBr 3  FF 83 A4 99          .byte 255,131,164,153,144,165,130,85
0025CFr 3  90 A5 82 55  
0025D3r 3  81 C2 A5 90          .byte 129,194,165,144,25,164,3,129
0025D7r 3  19 A4 03 81  
0025DBr 3  FF 00 24 18          .byte 255,0,36,24,0,36,66,255
0025DFr 3  00 24 42 FF  
0025E3r 3  00 00 20 00          .byte 0,0,32,0,0,0,0,0
0025E7r 3  00 00 00 00  
0025EBr 3  ED 52 52 94          .byte 237,82,82,148,18,32,18,0
0025EFr 3  12 20 12 00  
0025F3r 3  00 24 40 4A          .byte 0,36,64,74,4,165,89,238
0025F7r 3  04 A5 59 EE  
0025FBr 3  41 8C 3A 28          .byte 65,140,58,40,122,36,137,163
0025FFr 3  7A 24 89 A3  
002603r 3  00 00 00 04          .byte 0,0,0,4,58,61,62,4
002607r 3  3A 3D 3E 04  
00260Br 3  00 00 00 63          .byte 0,0,0,99,54,28,54,99
00260Fr 3  36 1C 36 63  
002613r 3  80 00 00 00          .byte 128,0,0,0,0,0,0,0
002617r 3  00 00 00 00  
00261Br 3  80 00 00 00          .byte 128,0,0,0,0,0,0,0
00261Fr 3  00 00 00 00  
002623r 3  00 00 08 14          .byte 0,0,8,20,46,8,8,0
002627r 3  2E 08 08 00  
00262Br 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00262Fr 3  00 00 00 00  
002633r 3  07 0E 1C 38          .byte 7,14,28,56,112,224,193,131
002637r 3  70 E0 C1 83  
00263Br 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00263Fr 3  00 00 00 00  
002643r 3  00 00 08 08          .byte 0,0,8,8,62,28,8,0
002647r 3  3E 1C 08 00  
00264Br 3  00 00 F0 F0          .byte 0,0,240,240,0,240,240,240
00264Fr 3  00 F0 F0 F0  
002653r 3  20 B0 B0 B0          .byte 32,176,176,176,165,180,165,180
002657r 3  A5 B4 A5 B4  
00265Br 3  A5 B4 A5 B4          .byte 165,180,165,180,160,176,160,48
00265Fr 3  A0 B0 A0 30  
002663r 3  04 0D 05 0D          .byte 4,13,5,13,165,45,165,45
002667r 3  A5 2D A5 2D  
00266Br 3  A5 2D A5 2D          .byte 165,45,165,45,5,13,5,12
00266Fr 3  05 0D 05 0C  
002673r 3  10 20 08 10          .byte 16,32,8,16,8,8,0,16
002677r 3  08 08 00 10  
00267Br 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00267Fr 3  00 00 00 00  
002683r 3  10 18 38 3C          .byte 16,24,56,60,90,110,157,106
002687r 3  5A 6E 9D 6A  
00268Br 3  3C 3C 00 AA          .byte 60,60,0,170,85,0,60,60
00268Fr 3  55 00 3C 3C  
002693r 3  10 18 38 3C          .byte 16,24,56,60,90,110,157,106
002697r 3  5A 6E 9D 6A  
00269Br 3  81 00 86 CF          .byte 129,0,134,207,255,63,15,31
00269Fr 3  FF 3F 0F 1F  
0026A3r 3  07 07 82 01          .byte 7,7,130,1,63,127,255,255
0026A7r 3  3F 7F FF FF  
0026ABr 3  E2 E5 40 80          .byte 226,229,64,128,252,254,255,255
0026AFr 3  FC FE FF FF  
0026B3r 3  80 18 64 F2          .byte 128,24,100,242,247,255,248,240
0026B7r 3  F7 FF F8 F0  
0026BBr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0026BFr 3  00 00 00 00  
0026C3r 3  00 00 00 20          .byte 0,0,0,32,0,0,0,0
0026C7r 3  00 00 00 00  
0026CBr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0026CFr 3  00 00 00 00  
0026D3r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0026D7r 3  00 00 00 00  
0026DBr 3               bCol:
0026DBr 3  01                   .byte 1
0026DCr 3  01                   .byte 1
0026DDr 3  01                   .byte 1
0026DEr 3  01                   .byte 1
0026DFr 3  01                   .byte 1
0026E0r 3  01                   .byte 1
0026E1r 3  01                   .byte 1
0026E2r 3  01                   .byte 1
0026E3r 3  01                   .byte 1
0026E4r 3  01                   .byte 1
0026E5r 3  01                   .byte 1
0026E6r 3  01                   .byte 1
0026E7r 3  01                   .byte 1
0026E8r 3  01                   .byte 1
0026E9r 3  01                   .byte 1
0026EAr 3  01                   .byte 1
0026EBr 3  01                   .byte 1
0026ECr 3  01                   .byte 1
0026EDr 3  01                   .byte 1
0026EEr 3  01                   .byte 1
0026EFr 3  01                   .byte 1
0026F0r 3  01                   .byte 1
0026F1r 3  01                   .byte 1
0026F2r 3  01                   .byte 1
0026F3r 3  01                   .byte 1
0026F4r 3  01                   .byte 1
0026F5r 3  01                   .byte 1
0026F6r 3  01                   .byte 1
0026F7r 3  01                   .byte 1
0026F8r 3  01                   .byte 1
0026F9r 3  01                   .byte 1
0026FAr 3  01                   .byte 1
0026FBr 3  01                   .byte 1
0026FCr 3  01                   .byte 1
0026FDr 3  01                   .byte 1
0026FEr 3  01                   .byte 1
0026FFr 3  01                   .byte 1
002700r 3  01                   .byte 1
002701r 3  01                   .byte 1
002702r 3  01                   .byte 1
002703r 3  01                   .byte 1
002704r 3  01                   .byte 1
002705r 3  01                   .byte 1
002706r 3               bprop:
002706r 3  00                   .byte 0
002707r 3  02                   .byte 2
002708r 3  02                   .byte 2
002709r 3  04                   .byte 4
00270Ar 3  00                   .byte 0
00270Br 3  04                   .byte 4
00270Cr 3  00                   .byte 0
00270Dr 3  02                   .byte 2
00270Er 3  02                   .byte 2
00270Fr 3  02                   .byte 2
002710r 3  02                   .byte 2
002711r 3  02                   .byte 2
002712r 3  00                   .byte 0
002713r 3  02                   .byte 2
002714r 3  02                   .byte 2
002715r 3  02                   .byte 2
002716r 3  00                   .byte 0
002717r 3  00                   .byte 0
002718r 3  00                   .byte 0
002719r 3  00                   .byte 0
00271Ar 3  00                   .byte 0
00271Br 3  00                   .byte 0
00271Cr 3  02                   .byte 2
00271Dr 3  00                   .byte 0
00271Er 3  00                   .byte 0
00271Fr 3  00                   .byte 0
002720r 3  02                   .byte 2
002721r 3  02                   .byte 2
002722r 3  02                   .byte 2
002723r 3  02                   .byte 2
002724r 3  02                   .byte 2
002725r 3  06                   .byte 6
002726r 3  05                   .byte 5
002727r 3  03                   .byte 3
002728r 3  05                   .byte 5
002729r 3  02                   .byte 2
00272Ar 3  02                   .byte 2
00272Br 3  02                   .byte 2
00272Cr 3  02                   .byte 2
00272Dr 3  00                   .byte 0
00272Er 3  00                   .byte 0
00272Fr 3  00                   .byte 0
002730r 3  00                   .byte 0
002731r 3               sprgfx:
002731r 3  0E C0 1F E0          .byte 14,192,31,224,47,225,25,34,41,34,31,226,46,230,30,234,0,30,127,226,0,2,85,82,0,2,183,105,0,0,85,80
002735r 3  2F E1 19 22  
002739r 3  29 22 1F E2  
002751r 3  0F 60 1F E1          .byte 15,96,31,225,47,226,28,130,44,130,31,226,47,102,31,106,0,30,127,226,0,2,42,162,128,9,58,224,128,8,42,160
002755r 3  2F E2 1C 82  
002759r 3  2C 82 1F E2  
002771r 3  03 70 07 F8          .byte 3,112,7,248,135,244,68,152,68,148,71,248,103,116,87,120,120,0,71,254,64,0,74,170,64,0,150,237,0,0,10,170
002775r 3  87 F4 44 98  
002779r 3  44 94 47 F8  
002791r 3  06 F0 87 F8          .byte 6,240,135,248,71,244,65,56,65,52,71,248,102,244,86,248,120,0,71,254,64,0,69,84,144,1,7,92,16,1,5,84
002795r 3  47 F4 41 38  
002799r 3  41 34 47 F8  
0027B1r 3  FF FF 80 01          .byte 255,255,128,1,128,0,128,9,128,8,128,73,130,8,128,73,130,8,144,73,130,8,144,73,159,248,128,1,128,0,213,85
0027B5r 3  80 00 80 09  
0027B9r 3  80 08 80 49  
0027D1r 3  00 00 00 04          .byte 0,0,0,4,0,1,0,12,1,81,6,164,15,80,15,176,15,80,14,16,7,32,3,192,0,0,0,0,0,0,0,0
0027D5r 3  00 01 00 0C  
0027D9r 3  01 51 06 A4  
0027F1r 3  00 00 00 00          .byte 0,0,0,0,0,0,3,128,7,192,13,96,26,240,21,240,18,240,16,112,8,224,4,192,3,18,0,8,0,34,0,8
0027F5r 3  00 00 03 80  
0027F9r 3  07 C0 0D 60  
002811r 3  00 00 00 00          .byte 0,0,0,0,0,0,3,0,164,128,8,224,80,112,53,240,146,240,26,240,13,80,7,224,3,128,0,0,0,0,0,0
002815r 3  00 00 03 00  
002819r 3  A4 80 08 E0  
002831r 3  00 08 00 22          .byte 0,8,0,34,0,8,3,18,4,192,8,224,16,96,21,240,18,240,26,240,13,96,7,192,3,128,0,0,0,0,0,0
002835r 3  00 08 03 12  
002839r 3  04 C0 08 E0  
002851r 3  00 00 00 00          .byte 0,0,0,0,0,0,3,128,7,224,13,80,26,240,21,248,18,248,16,120,8,240,7,224,147,128,32,0,136,0,32,0
002855r 3  00 00 03 80  
002859r 3  07 E0 0D 50  
002871r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,192,1,96,2,176,7,88,15,168,15,72,14,8,7,16,3,32,0,200,0,5,0,0,0,5
002875r 3  00 00 00 C0  
002879r 3  01 60 02 B0  
002891r 3  F8 1F B8 1D          .byte 248,31,184,29,192,3,192,3,192,3,0,0,0,0,0,0,0,0,0,0,0,0,192,3,192,3,192,3,184,29,248,31
002895r 3  C0 03 C0 03  
002899r 3  C0 03 00 00  
0028B1r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0028B5r 3  00 00 00 00  
0028B9r 3  00 00 00 00  
0028D1r 3  FF FF 80 01          .byte 255,255,128,1,128,0,128,9,128,8,128,73,130,8,128,73,130,8,144,73,130,8,144,73,159,248,128,1,128,0,213,85
0028D5r 3  80 00 80 09  
0028D9r 3  80 08 80 49  
0028F1r 3  10 00 10 04          .byte 16,0,16,4,40,4,40,10,40,10,68,10,68,10,130,17,2,16,2,32,1,64,1,64,1,64,0,128,0,128,0,0
0028F5r 3  28 04 28 0A  
0028F9r 3  28 0A 44 0A  
002911r 3  02 00 02 00          .byte 2,0,2,0,2,0,5,0,5,0,8,128,8,128,136,129,72,130,80,130,80,130,32,68,32,40,0,40,0,16,0,16
002915r 3  02 00 05 00  
002919r 3  05 00 08 80  
002931r 3  00 40 00 40          .byte 0,64,0,64,0,64,0,160,0,160,1,16,1,16,129,17,65,18,65,10,65,10,34,4,20,4,20,0,8,0,8,0
002935r 3  00 40 00 A0  
002939r 3  00 A0 01 10  
002951r 3  00 08 20 08          .byte 0,8,32,8,32,20,80,20,80,20,80,34,80,34,136,65,8,64,4,64,2,128,2,128,2,128,1,0,1,0,0,0
002955r 3  20 14 50 14  
002959r 3  50 14 50 22  
002971r 3  FF E3 00 00          .byte 255,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002975r 3  00 00 00 00  
002979r 3  00 00 00 00  
002991r 3  FF E3 FF E3          .byte 255,227,255,227,255,227,255,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002995r 3  FF E3 FF E3  
002999r 3  00 00 00 00  
0029B1r 3  3F 9C 3F 9C          .byte 63,156,63,156,63,156,0,0,255,227,255,227,255,227,255,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0029B5r 3  3F 9C 00 00  
0029B9r 3  FF E3 FF E3  
0029D1r 3  3F 9C 3F 9C          .byte 63,156,63,156,63,156,63,156,63,156,63,156,63,156,0,0,255,227,255,227,255,227,255,227,0,0,0,0,0,0,0,0
0029D5r 3  3F 9C 3F 9C  
0029D9r 3  3F 9C 3F 9C  
0029F1r 3  3F 9C 3F 9C          .byte 63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,0,0,255,227,255,227,255,227,255,227
0029F5r 3  3F 9C 3F 9C  
0029F9r 3  3F 9C 3F 9C  
002A11r 3  3F 9C 3F 9C          .byte 63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,63,156,0,0,255,227,255,227,255,227,255,227
002A15r 3  3F 9C 3F 9C  
002A19r 3  3F 9C 3F 9C  
002A31r 3  3F 9C 3F 9C          .byte 63,156,63,156,63,156,63,156,63,156,63,156,63,156,0,0,255,227,255,227,255,227,255,227,0,0,0,0,0,0,0,0
002A35r 3  3F 9C 3F 9C  
002A39r 3  3F 9C 3F 9C  
002A51r 3  3F 9C 3F 9C          .byte 63,156,63,156,63,156,0,0,255,227,255,227,255,227,255,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002A55r 3  3F 9C 00 00  
002A59r 3  FF E3 FF E3  
002A71r 3  FF E3 FF E3          .byte 255,227,255,227,255,227,255,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002A75r 3  FF E3 FF E3  
002A79r 3  00 00 00 00  
002A91r 3  FF E3 00 00          .byte 255,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002A95r 3  00 00 00 00  
002A99r 3  00 00 00 00  
002AB1r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,2,0,16,16,32,64,0,96,3,108,14,12,76,198,97,227,244,220,118,62
002AB5r 3  00 00 00 00  
002AB9r 3  00 00 00 00  
002AD1r 3  00 00 00 00          .byte 0,0,0,0,0,128,0,128,17,2,0,0,0,18,32,0,2,4,6,0,54,192,48,112,99,50,199,134,59,47,124,110
002AD5r 3  00 80 00 80  
002AD9r 3  11 02 00 00  
002AF1r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002AF5r 3  00 00 00 00  
002AF9r 3  00 00 00 00  
002B11r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002B15r 3  00 00 00 00  
002B19r 3  00 00 00 00  
002B31r 3  02 00 03 80          .byte 2,0,3,128,1,192,1,224,1,240,3,184,7,220,7,158,15,142,15,15,30,15,60,31,120,63,120,62,252,124,127,248
002B35r 3  01 C0 01 E0  
002B39r 3  01 F0 03 B8  
002B51r 3  00 40 01 C0          .byte 0,64,1,192,3,128,7,128,15,128,29,192,59,224,121,224,113,240,240,240,240,120,248,60,252,30,124,30,62,63,31,254
002B55r 3  03 80 07 80  
002B59r 3  0F 80 1D C0  
002B71r 3  C7 FF C7 FF          .byte 199,255,199,255,199,255,199,255,0,0,47,244,111,246,55,236,27,216,0,0,7,224,2,160,0,0,0,128,0,0,0,0
002B75r 3  C7 FF C7 FF  
002B79r 3  00 00 2F F4  
002B91r 3  FF E3 FF E3          .byte 255,227,255,227,255,227,255,227,0,0,62,252,126,254,63,124,31,120,0,0,7,224,5,64,0,0,1,0,0,0,0,0
002B95r 3  FF E3 FF E3  
002B99r 3  00 00 3E FC  
002BB1r 3  01 00 01 00          .byte 1,0,1,0,3,128,3,128,7,192,14,224,28,120,249,63,28,120,14,224,7,192,3,128,3,128,1,0,1,0,1,0
002BB5r 3  03 80 03 80  
002BB9r 3  07 C0 0E E0  
002BD1r 3  80 01 40 02          .byte 128,1,64,2,32,4,28,56,31,248,27,184,12,112,13,112,12,112,11,176,31,248,31,248,28,56,32,4,64,2,128,1
002BD5r 3  20 04 1C 38  
002BD9r 3  1F F8 1B B8  
002BF1r 3  03 C0 04 20          .byte 3,192,4,32,5,160,4,160,21,168,9,144,0,0,34,64,39,232,21,164,3,196,1,136,7,224,0,0,4,128,2,192
002BF5r 3  05 A0 04 A0  
002BF9r 3  15 A8 09 90  
002C11r 3  03 C0 04 20          .byte 3,192,4,32,5,160,4,160,21,168,9,144,0,0,2,64,23,232,21,168,19,200,17,136,7,224,0,0,2,128,6,192
002C15r 3  05 A0 04 A0  
002C19r 3  15 A8 09 90  
002C31r 3  03 C0 04 20          .byte 3,192,4,32,5,160,5,32,21,168,9,144,0,0,2,68,23,228,37,168,35,192,17,128,7,224,0,0,1,32,3,64
002C35r 3  05 A0 05 20  
002C39r 3  15 A8 09 90  
002C51r 3  03 C0 04 20          .byte 3,192,4,32,5,160,4,160,21,168,9,144,0,0,2,64,23,232,21,168,19,200,17,136,7,224,0,0,2,128,6,192
002C55r 3  05 A0 04 A0  
002C59r 3  15 A8 09 90  
002C71r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002C75r 3  00 00 00 00  
002C79r 3  00 00 00 00  
002C91r 3  03 F0 01 7C          .byte 3,240,1,124,192,150,119,123,59,1,29,120,3,240,3,156,0,64,13,49,26,97,60,199,113,158,195,248,3,128,0,0
002C95r 3  C0 96 77 7B  
002C99r 3  3B 01 1D 78  
002CB1r 3  0F C0 3E 80          .byte 15,192,62,128,105,3,222,238,128,220,30,184,15,192,57,192,2,0,140,176,134,88,227,60,121,142,31,195,1,192,0,0
002CB5r 3  69 03 DE EE  
002CB9r 3  80 DC 1E B8  
002CD1r 3               frmlst:
002CD1r 3  00 02                .byte 0,2
002CD3r 3  02 02                .byte 2,2
002CD5r 3  04 01                .byte 4,1
002CD7r 3  05 03                .byte 5,3
002CD9r 3  08 03                .byte 8,3
002CDBr 3  0B 02                .byte 11,2
002CDDr 3  0D 01                .byte 13,1
002CDFr 3  0E 04                .byte 14,4
002CE1r 3  12 05                .byte 18,5
002CE3r 3  17 05                .byte 23,5
002CE5r 3  1C 02                .byte 28,2
002CE7r 3  1E 02                .byte 30,2
002CE9r 3  20 02                .byte 32,2
002CEBr 3  22 02                .byte 34,2
002CEDr 3  24 02                .byte 36,2
002CEFr 3  26 04                .byte 38,4
002CF1r 3  2A 03 2D 00          .byte 42,3,45,0
002CF5r 3               scdat:
002CF5r 3  C3 00 1D 01          .word 195,285,336,372,346,316,185,355,346,319,357,365,312,354,277,313,318,277,351,347,342,340,342,267
002CF9r 3  50 01 74 01  
002CFDr 3  5A 01 3C 01  
002D25r 3  FF 00 21 0B          .byte 255,0,33,11,11,11,255,0,16,16,0,0,0,5,5,255,0,20,5,3,255,0,13,1,11,11,255,1,6,11,11,1,255,0,13
002D29r 3  0B 0B FF 00  
002D2Dr 3  10 10 00 00  
002D48r 3  10 00 12 12          .byte 16,0,18,18,0,16,0,21,21,255,0,15,18,4,0,0,0,21,21,255,0,10,1,11,11,11,255,1,4,11,11,11,1
002D4Cr 3  00 10 00 15  
002D50r 3  15 FF 00 0F  
002D69r 3  FF 00 0D 10          .byte 255,0,13,16,255,0,4,16,255,0,35,2,2,1,1,255,11,4,1,1,2,2,255,0,13,16,255,0,4,18,18,0,17
002D6Dr 3  FF 00 04 10  
002D71r 3  FF 00 23 02  
002D8Ar 3  FF 00 12 12          .byte 255,0,18,18,4,255,0,12,2,2,11,11,22,22,255,11,4,2,2,255,0,10,16,0,0,0,41,41,10,0,0,16,255,0,15
002D8Er 3  04 FF 00 0C  
002D92r 3  02 02 0B 0B  
002DADr 3  18 17 17 0A          .byte 24,23,23,10,255,0,4,17,255,0,10,255,11,4,22,22,11,255,0,15,16,0,0,20,39,39,10,0,0,0,34,34,255,0,14
002DB1r 3  FF 00 04 11  
002DB5r 3  FF 00 0A FF  
002DD0r 3  1F 1F 0A 00          .byte 31,31,10,0,255,1,4,255,0,10,255,11,4,22,22,11,0,8,8,7,8,255,0,49
002DD4r 3  FF 01 04 FF  
002DD8r 3  00 0A FF 0B  
002DE8r 3  FF 06 0A 28          .byte 255,6,10,40,255,6,13,40,255,6,14,40,255,6,10,40,255,6,13,40,255,6,15,40,255,6,7,255,14,11,10,255,14,10
002DECr 3  FF 06 0D 28  
002DF0r 3  FF 06 0E 28  
002E0Ar 3  02 02 01 07          .byte 2,2,1,7,1,11,9,11,11,1,1,9,1,1,11,9,11,1,7,1,2,2,255,0,6,5,5,255,0,7,2,0,0
002E0Er 3  01 0B 09 0B  
002E12r 3  0B 01 01 09  
002E2Br 3  0C 00 00 00          .byte 12,0,0,0,12,0,0,0,12,0,5,5,0,0,0,12,0,0,0,10,255,0,4,12,0,0,0,12,0,0,0,5,3
002E2Fr 3  0C 00 00 00  
002E33r 3  0C 00 05 05  
002E4Cr 3  0C FF 00 05          .byte 12,255,0,5,12,10,255,0,12,5,3,255,0,7,10,255,0,12,5,3,255,0,7,2,255,0,6,2,2,9,0,0,0
002E50r 3  0C 0A FF 00  
002E54r 3  0C 05 03 FF  
002E6Dr 3  0B 0B 0B 09          .byte 11,11,11,9,0,0,0,11,1,9,1,11,11,1,2,2,15,15,10,255,0,10,255,5,4,0,0,10,15,15,13,15,10
002E71r 3  00 00 00 0B  
002E75r 3  01 09 01 0B  
002E8Er 3  FF 00 0A FF          .byte 255,0,10,255,3,4,0,0,10,15,13,6,13,9,11,11,11,1,1,9,1,1,1,11,11,11,9,11,11,11,9,13,6
002E92r 3  03 04 00 00  
002E96r 3  0A 0F 0D 06  
002EAFr 3  28 06 0D 0F          .byte 40,6,13,15,15,15,13,15,13,255,15,4,13,15,10,15,15,15,13,255,6,4,40,13,15,13,6,13,6,13,13,15,13
002EB3r 3  0F 0F 0D 0F  
002EB7r 3  0D FF 0F 04  
002ED0r 3  06 0D 0F 0D          .byte 6,13,15,13,13,13,6,6,40,255,6,4,13,255,6,6,13,6,40,6,13,255,6,15,40,255,6,13,40,255,6,5,40
002ED4r 3  0D 0D 06 06  
002ED8r 3  28 FF 06 04  
002EF1r 3  FF 06 0B 28          .byte 255,6,11,40,255,6,13,40,255,6,4,40,255,6,9,40,255,6,16,40
002EF5r 3  FF 06 0D 28  
002EF9r 3  FF 06 04 28  
002F05r 3  0F 01 01 01          .byte 15,1,1,1,7,9,11,11,9,7,1,1,2,1,1,7,9,11,11,11,9,15,13,9,255,4,18,10,13,6,1,255,0,4
002F09r 3  07 09 0B 0B  
002F0Dr 3  09 07 01 01  
002F27r 3  05 05 00 00          .byte 5,5,0,0,12,255,0,9,10,6,6,10,255,0,4,5,5,255,0,5,12,0,0,1,1,0,0,1,6,14,10,0,12
002F2Br 3  0C FF 00 09  
002F2Fr 3  0A 06 06 0A  
002F48r 3  00 00 05 03          .byte 0,0,5,3,12,255,0,7,5,5,0,0,9,14,15,1,255,0,4,5,3,255,0,8,5,3,0,0,10,15,9,7,1
002F4Cr 3  0C FF 00 07  
002F50r 3  05 05 00 00  
002F69r 3  0B 0B 01 0B          .byte 11,11,1,11,11,9,255,0,4,9,11,11,1,11,11,9,7,8,9,255,4,8,255,0,4,255,4,8,10,1,4,255,0,4
002F6Dr 3  0B 09 FF 00  
002F71r 3  04 09 0B 0B  
002F8Br 3  0C FF 00 09          .byte 12,255,0,9,12,255,0,4,10,1,4,255,0,8,12,255,0,10,1,10,4,0,12,255,0,15,12,0,9,10,4,255,0,19
002F8Fr 3  0C FF 00 04  
002F93r 3  0A 01 04 FF  
002FADr 3  0A 08 01 09          .byte 10,8,1,9,255,0,4,11,11,9,1,1,9,11,11,0,0,0,9,11,10,10,5,5,255,0,5,255,4,8,0,0,0
002FB1r 3  FF 00 04 0B  
002FB5r 3  0B 09 01 01  
002FCEr 3  FF 05 05 03          .byte 255,5,5,3,255,0,16,5,3,3,3,2,2,11,11,1,1,11,11,15,255,0,4,15,11,11,1,1,11,11,2,2,255,15,8
002FD2r 3  FF 00 10 05  
002FD6r 3  03 03 03 02  
002FF1r 3  0A 04 00 00          .byte 10,4,0,0,0,10,255,15,8,13,255,15,7,10,4,0,0,0,10,255,15,6,13,13,6,13,13,15,15,9,1,1,9
002FF5r 3  00 0A FF 0F  
002FF9r 3  08 0D FF 0F  
003012r 3  04 00 00 00          .byte 4,0,0,0,9,1,1,9,15,15,13,255,6,5,13,15,7,255,4,4,0,0,0,4,4,4,7,15,13,6,6,40,6,6
003016r 3  09 01 01 09  
00301Ar 3  0F 0F 0D FF  
003034r 3  28 06 0D 01          .byte 40,6,13,1,4,255,0,9,1,13,6,40,6,6,40,255,6,4,9,11,11,9,7,15,15,7,9,11,11,9,255,6,5
003038r 3  04 FF 00 09  
00303Cr 3  01 0D 06 28  
003055r 3  06 28 06 09          .byte 6,40,6,9,1,11,11,11,1,1,7,7,1,1,11,11,11,1,9,255,6,5,14,26,255,4,14,28,14,6,40,6,14
003059r 3  01 0B 0B 0B  
00305Dr 3  01 01 07 07  
003076r 3  0F 1B 04 FF          .byte 15,27,4,255,0,7,12,255,0,4,4,29,15,14,6,6,15,15,15,4,0,12,255,0,9,12,4,15,15,15,6,14,15,15
00307Ar 3  00 07 0C FF  
00307Er 3  00 04 04 1D  
003098r 3  0A 04 FF 00          .byte 10,4,255,0,12,4,10,15,15,14,15,15,15,1,4,255,0,12,4,1,15,15,15,2,2,7,9,4,0,0,9,1,255,11,4
00309Cr 3  0C 04 0A 0F  
0030A0r 3  0F 0E 0F 0F  
0030BBr 3  01 09 00 00          .byte 1,9,0,0,4,9,7,2,2,255,5,4,0,0,0,5,5,255,4,4,5,5,0,0,0,255,5,6,3,3,0,0,0
0030BFr 3  04 09 07 02  
0030C3r 3  02 FF 05 04  
0030DCr 3  05 03 FF 00          .byte 5,3,255,0,4,5,3,0,0,0,5,5,3,3,2,2,1,1,255,11,4,9,255,0,4,9,255,11,4,9,1,2,2
0030E0r 3  04 05 03 00  
0030E4r 3  00 00 05 05  
0030FDr 3  FF 04 09 FF          .byte 255,4,9,255,0,4,5,255,4,8,255,0,13,3,255,0,8,2,2,9,0,0,0,9,11,11,1,1,11,11,9,0,0,0
003101r 3  00 04 05 FF  
003105r 3  04 08 FF 00  
00311Fr 3  01 0B 09 02          .byte 1,11,9,2,2,5,5,4,0,0,0,255,4,7,5,0,0,0,4,4,4,5,5,5,3,255,0,11,3,255,0,6,5
003123r 3  02 05 05 04  
003127r 3  00 00 00 FF  
003140r 3  03 02 02 0B          .byte 3,2,2,11,11,11,9,0,0,0,1,0,0,0,9,1,1,9,11,11,11,2,2,13,255,15,4,10,0,0,0,4,0,0,0
003144r 3  0B 0B 09 00  
003148r 3  00 00 01 00  
003163r 3  04 04 04 0A          .byte 4,4,4,10,255,15,4,13,6,13,15,15,15,10,255,0,10,10,15,15,15,13,6,6,6,13,15,15,1,11,9,0,0,0
003167r 3  FF 0F 04 0D  
00316Br 3  06 0D 0F 0F  
003185r 3  09 0B 0B 00          .byte 9,11,11,0,0,1,15,15,13,6,6,40,6,6,13,15,10,4,4,0,0,0,4,4,4,0,0,10,15,13,6,6,40
003189r 3  00 01 0F 0F  
00318Dr 3  0D 06 06 28  
0031A6r 3  06 06 06 28          .byte 6,6,6,40,13,10,255,0,10,10,13,6,40,6,6,6,40,6,6,6,9,8,7,11,11,1,1,11,11,7,8,9,255,6,5
0031AAr 3  0D 0A FF 00  
0031AEr 3  0A 0A 0D 06  
0031C9r 3  FF 0B 09 09          .byte 255,11,9,9,1,9,1,9,255,11,8,255,4,6,0,0,12,255,0,9,12,0,4,4,255,0,11,12,255,0,10,2,2
0031CDr 3  01 09 01 09  
0031D1r 3  FF 0B 08 FF  
0031EAr 3  0B 0B 01 01          .byte 11,11,1,1,0,0,0,12,255,0,5,12,255,0,5,2,4,4,0,0,5,5,255,0,14,5,5,255,0,4,5,3,255,0,6
0031EEr 3  00 00 00 0C  
0031F2r 3  FF 00 05 0C  
00320Dr 3  0C FF 00 07          .byte 12,255,0,7,5,3,2,2,255,11,4,9,1,1,255,0,4,1,1,11,11,0,0,0,2,2,4,4,255,0,5,5,5
003211r 3  05 03 02 02  
003215r 3  FF 0B 04 09  
00322Er 3  FF 00 04 05          .byte 255,0,4,5,5,4,4,0,0,0,5,5,255,0,7,5,3,255,0,4,5,3,0,12,0,0,0,5,3,2,2,255,11,7
003232r 3  05 04 04 00  
003236r 3  00 00 05 05  
003250r 3  01 0B 01 0B          .byte 1,11,1,11,1,9,0,0,0,11,11,2,2,4,4,0,5,5,255,4,4,1,7,1,7,1,1,0,0,0,255,5,4
003254r 3  01 09 00 00  
003258r 3  00 0B 0B 02  
003271r 3  00 00 00 05          .byte 0,0,0,5,3,0,0,12,0,10,0,10,12,10,1,0,0,0,5,5,3,3,2,2,1,1,1,255,0,4,9,11,9
003275r 3  03 00 00 0C  
003279r 3  00 0A 00 0A  
003292r 3  0B 09 08 00          .byte 11,9,8,0,0,0,9,11,2,2,5,5,255,0,7,255,4,6,0,0,0,255,4,4,5,3,255,0,7,12,255,0,12
003296r 3  00 00 09 0B  
00329Ar 3  02 02 05 05  
0032B3r 3  02 02 FF 01          .byte 2,2,255,1,5,255,0,6,5,5,9,11,11,11,9,2,2,1,9,1,7,1,7,1,255,0,6,5,3,255,4,6,8
0032B7r 3  05 FF 00 06  
0032BBr 3  05 05 09 0B  
0032D4r 3  01 0A 01 04          .byte 1,10,1,4,8,12,1,255,0,6,5,3,0,0,0,12,0,0,0,1,10,1,0,0,0,9,11,11,1,11,11,9,5,5
0032D8r 3  08 0C 01 FF  
0032DCr 3  00 06 05 03  
0032F6r 3  FF 00 07 01          .byte 255,0,7,1,10,1,5,9,5,1,255,4,6,5,3,255,0,6,12,1,9,1,5,1,5,1,255,0,6,5,3,255,0,7
0032FAr 3  0A 01 05 09  
0032FEr 3  05 01 FF 04  
003318r 3  FF 0B 09 09          .byte 255,11,9,9,1,9,1,9,255,11,8
00331Cr 3  01 09 01 09  
003320r 3  FF 0B 08     
003323r 3  0B 0B 01 09          .byte 11,11,1,9,1,11,11,11,1,1,9,9,1,1,11,11,11,1,9,1,11,11,255,4,22,255,0,12,12,255,0,9,2,2
003327r 3  01 0B 0B 0B  
00332Br 3  01 01 09 09  
003345r 3  FF 00 04 0C          .byte 255,0,4,12,0,0,1,11,11,1,0,0,0,12,0,0,0,2,2,26,4,255,0,7,255,4,4,255,0,7,4,28,27
003349r 3  00 00 01 0B  
00334Dr 3  0B 01 00 00  
003366r 3  FF 00 14 1D          .byte 255,0,20,29,2,2,7,9,0,0,0,9,1,255,11,4,1,9,0,0,0,9,7,2,2,255,4,4,0,0,0,255,4,8
00336Ar 3  02 02 07 09  
00336Er 3  00 00 00 09  
003388r 3  00 00 00 FF          .byte 0,0,0,255,4,4,0,12,255,0,20,2,2,1,1,255,11,4,9,255,0,4,9,255,11,4,9,1,2,2,255,4,9
00338Cr 3  04 04 00 0C  
003390r 3  FF 00 14 02  
0033A9r 3  FF 00 04 0A          .byte 255,0,4,10,255,4,8,255,0,13,10,255,0,8,2,2,9,0,0,0,9,11,11,1,1,11,11,9,0,12,0,1,11
0033ADr 3  FF 04 08 FF  
0033B1r 3  00 0D 0A FF  
0033CAr 3  09 02 02 05          .byte 9,2,2,5,5,4,0,0,0,255,4,7,1,0,0,0,255,4,5,5,3,255,0,11,1,255,0,6,12,0,2,2,11,11,11
0033CEr 3  05 04 00 00  
0033D2r 3  00 FF 04 07  
0033EDr 3  09 0B 0B 01          .byte 9,11,11,1,0,0,12,0,9,1,1,9,11,11,11,2,2,255,4,9,255,0,4,4,4,4,10,255,4,5,0,0,12
0033F1r 3  00 00 0C 00  
0033F5r 3  09 01 01 09  
00340Er 3  FF 00 04 03          .byte 255,0,4,3,255,0,8,10,0,12,0,0,0,2,2,11,1,0,12,0,3,1,255,0,5,12,0,9,8,1,1,2,2
003412r 3  FF 00 08 0A  
003416r 3  00 0C 00 00  
00342Fr 3  FF 04 04 00          .byte 255,4,4,0,0,0,3,10,1,1,255,0,5,255,4,6,255,0,7,3,13,10,9,255,0,11,2,2,1,1,9,11,11
003433r 3  00 00 03 0A  
003437r 3  01 01 FF 00  
003450r 3  07 0B 0D 01          .byte 7,11,13,1,1,11,11,9,8,9,11,1,1,2,2
003454r 3  01 0B 0B 09  
003458r 3  08 09 0B 01  
00345Fr 3  06 06 28 FF          .byte 6,6,40,255,6,33,40,255,6,4,40,255,6,10,40,255,6,13,255,14,22,255,15,22,2,2,1,1,9,11,28,26,11,11
003463r 3  06 21 28 FF  
003467r 3  06 04 28 FF  
003481r 3  1D 01 09 01          .byte 29,1,9,1,27,11,11,9,1,1,2,2,255,4,12,1,255,4,9,255,0,4,12,255,0,5,12,0,1,12,255,0,8
003485r 3  1B 0B 0B 09  
003489r 3  01 01 02 02  
0034A2r 3  02 02 01 01          .byte 2,2,1,1,28,26,29,27,9,0,0,0,9,0,0,0,9,11,11,1,2,2,5,5,255,4,7,0,0,12,4,0,0,0
0034A6r 3  1C 1A 1D 1B  
0034AAr 3  09 00 00 00  
0034C4r 3  FF 04 04 05          .byte 255,4,4,5,5,5,3,0,0,12,255,0,15,5,3,2,2,1,1,29,27,11,11,9,11,11,27,9,29,11,11,11,27
0034C8r 3  05 05 03 00  
0034CCr 3  00 0C FF 00  
0034E5r 3  01 01 02 02          .byte 1,1,2,2,255,15,22,255,13,22,255,6,29,40,255,6,6,40,255,6,8,40,255,6,17,40,255,6,34,40,255,6,16
0034E9r 3  FF 0F 16 FF  
0034EDr 3  0D 16 FF 06  
003506r 3  28 FF 06 0F          .byte 40,255,6,15,40,6,40,255,6,15,40,255,6,16,40,255,6,9
00350Ar 3  28 06 28 FF  
00350Er 3  06 0F 28 FF  
003518r 3  1C 0B 0B FF          .byte 28,11,11,255,1,6,9,11,11,9,255,1,6,11,11,26,10,8,255,4,18,8,10,10,4,0,0,12,255,0,5,12,255,0,4
00351Cr 3  01 06 09 0B  
003520r 3  0B 09 FF 01  
00353Br 3  0C FF 00 04          .byte 12,255,0,4,4,10,1,4,12,255,0,4,1,11,11,1,1,0,0,12,0,0,0,12,0,4,1,1,9,255,0,5,8
00353Fr 3  04 0A 01 04  
003543r 3  0C FF 00 04  
00355Cr 3  FF 04 04 FF          .byte 255,4,4,255,0,8,9,1,1,10,4,255,0,4,10,255,0,11,4,10,1,1,10,11,11,11,1,1,9,255,0,5,9
003560r 3  00 08 09 01  
003564r 3  01 0A 04 FF  
00357Dr 3  01 01 FF 0B          .byte 1,1,255,11,4,10,1,1,10,4,4,0,0,5,5,255,0,5,5,5,5,0,0,4,4,10,1,1,10,4,0,0,0
003581r 3  04 0A 01 01  
003585r 3  0A 04 04 00  
00359Er 3  05 03 FF 00          .byte 5,3,255,0,5,5,3,3,0,0,0,4,10,1,2,2,4,0,0,0,9,1,1,1,11,11,1,1,1,9,0,0,0
0035A2r 3  05 05 03 03  
0035A6r 3  00 00 00 04  
0035BFr 3  04 02 02 1A          .byte 4,2,2,26,4,4,0,0,0,255,4,4,5,5,255,4,4,0,0,0,4,4,28,27,255,0,9,5,3,255,0,9,29
0035C3r 3  04 04 00 00  
0035C7r 3  00 FF 04 04  
0035E0r 3  02 02 01 01          .byte 2,2,1,1,255,0,4,9,255,1,4,9,255,0,4,9,1,2,2,255,5,4,255,0,4,5,255,4,5,255,0,4,255,4,4
0035E4r 3  FF 00 04 09  
0035E8r 3  FF 01 04 09  
003603r 3  05 03 03 03          .byte 5,3,3,3,255,0,4,3,255,0,13,2,2,1,1,11,11,1,1,9,255,0,4,9,1,1,11,11,1,1,2,2,5,5
003607r 3  FF 00 04 03  
00360Br 3  FF 00 0D 02  
003625r 3  FF 04 07 FF          .byte 255,4,7,255,0,4,255,4,7,5,5,5,3,255,0,18,5,3,2,2,255,1,7,9,0,0,9,255,1,5,9,11,2,2
003629r 3  00 04 FF 04  
00362Dr 3  07 05 05 05  
003647r 3  0F FF 0D 06          .byte 15,255,13,6,15,15,10,0,0,10,15,15,255,13,6,15,13,6,40,255,6,4,13,15,10,0,0,10,15,13,255,6,6
00364Br 3  0F 0F 0A 00  
00364Fr 3  00 0A 0F 0F  
003668r 3  0D FF 06 05          .byte 13,255,6,5,40,6,6,13,10,11,11,10,13,6,6,40,255,6,5
00366Cr 3  28 06 06 0D  
003670r 3  0A 0B 0B 0A  
00367Br 3  06 06 28 06          .byte 6,6,40,6,6,6,14,14,14,9,11,11,11,1,13,1,1,11,11,11,9,14,40,6,6,14,14,14,15,15,15,10,255,4,11
00367Fr 3  06 06 0E 0E  
003683r 3  0E 09 0B 0B  
00369Er 3  09 0E 0E 0E          .byte 9,14,14,14,255,15,6,10,4,0,0,12,255,0,5,12,0,10,2,2,1,9,255,11,5,9,4,0,12,0,0,0,12
0036A2r 3  FF 0F 06 0A  
0036A6r 3  04 00 00 0C  
0036BFr 3  00 00 00 02          .byte 0,0,0,2,2,5,5,255,4,6,7,7,4,255,0,7,12,0,5,5,5,3,0,12,0,0,12,0,30,30,12,255,0,9
0036C3r 3  02 05 05 FF  
0036C7r 3  04 06 07 07  
0036E1r 3  05 03 02 02          .byte 5,3,2,2,0,0,0,12,0,0,28,26,0,0,0,9,11,11,11,9,1,1,2,2,13,10,255,0,11,5,5,255,4,5
0036E5r 3  00 00 00 0C  
0036E9r 3  00 00 1C 1A  
003703r 3  0A 0D 06 0A          .byte 10,13,6,10,255,0,11,5,3,255,0,5,10,6,2,2,1,9,0,0,0,9,255,1,8,9,0,0,0,2,2,5,5
003707r 3  FF 00 0B 05  
00370Br 3  03 FF 00 05  
003724r 3  04 04 00 00          .byte 4,4,0,0,0,4,4,4,10,8,255,4,5,0,0,0,5,5,5,3,255,0,8,10,10,255,0,8,5,3,2,2,1,1,1
003728r 3  00 04 04 04  
00372Cr 3  0A 08 FF 04  
003747r 3  09 FF 00 04          .byte 9,255,0,4,1,1,255,0,5,9,1,1,2,2,255,4,6,255,0,4,4,4,255,0,5,255,4,5,255,0,22,2,2
00374Br 3  01 01 FF 00  
00374Fr 3  05 09 01 01  
003768r 3  FF 01 04 09          .byte 255,1,4,9,0,0,0,28,26,0,0,0,9,255,1,4,2,2,13,10,255,4,5,0,0,0,4,4,0,0,0,255,4,5
00376Cr 3  00 00 00 1C  
003770r 3  1A 00 00 00  
00378Ar 3  0A 0D 06 0A          .byte 10,13,6,10,255,0,18,10,6,11,13,9,0,0,0,9,1,11,11,28,26,11,11,1,9,0,0,0,9,13,11,13,10
00378Er 3  FF 00 12 0A  
003792r 3  06 0B 0D 09  
0037ABr 3  04 00 00 00          .byte 4,0,0,0,255,4,10,0,0,0,4,10,13,6,10,255,0,18,10,6,6,9,1,11,11,11,1,1,1,9,11,11,9
0037AFr 3  FF 04 0A 00  
0037B3r 3  00 00 04 0A  
0037CCr 3  01 01 01 0B          .byte 1,1,1,11,11,11,1,9,6
0037D0r 3  0B 0B 01 09  
0037D4r 3  06           
0037D5r 3  06 28 06 06          .byte 6,40,6,6,14,9,1,1,1,8,7,7,8,1,1,1,9,14,255,6,7,14,15,1,255,4,10,1,15,15,14,40,6,6,6
0037D9r 3  0E 09 01 01  
0037DDr 3  01 08 07 07  
0037F8r 3  0E 0F 0F 08          .byte 14,15,15,8,255,0,10,8,15,15,15,14,6,255,1,6,0,12,0,11,11,11,255,1,11,35,255,4,4,0,0,0,255,4,11
0037FCr 3  FF 00 0A 08  
003800r 3  0F 0F 0F 0E  
00381Br 3  26 01 01 24          .byte 38,1,1,36,255,0,9,12,255,0,8,37,1,2,2,1,0,12,0,29,1,1,27,0,0,0,29,1,1,1,9,1,1
00381Fr 3  FF 00 09 0C  
003823r 3  FF 00 08 25  
00383Cr 3  02 02 04 04          .byte 2,2,4,4,4,0,0,0,255,4,4,0,0,0,255,4,4,1,255,4,4,255,0,16,12,1,255,0,4,2,2,1,1,1
003840r 3  04 00 00 00  
003844r 3  FF 04 04 00  
00385Er 3  0B 09 00 0C          .byte 11,9,0,12,0,1,1,9,1,1,0,0,1,0,12,2,2,255,4,7,0,0,0,255,4,5,0,0,8,0,0,4,4
003862r 3  00 01 01 09  
003866r 3  01 01 00 00  
00387Fr 3  00 00 00 0C          .byte 0,0,0,12,255,0,13,1,255,0,4,2,2,1,1,9,0,0,0,9,1,1,11,11,11,1,1,1,9,1,1,2,2
003883r 3  FF 00 0D 01  
003887r 3  FF 00 04 02  
0038A0r 3  01 23 04 04          .byte 1,35,4,4,4,0,0,0,255,4,12,38,1,1,36,0,0,12,255,0,15,37,1,2,2,255,1,6,27,0,12,0,0
0038A4r 3  04 00 00 00  
0038A8r 3  FF 04 0C 26  
0038C1r 3  1D FF 01 06          .byte 29,255,1,6,2,2,255,4,9,255,0,4,255,4,9,255,0,22,2,2,1,0,12,0,9,1,1,1,11,11,1,1,1
0038C5r 3  02 02 FF 04  
0038C9r 3  09 FF 00 04  
0038E2r 3  09 00 0C 00          .byte 9,0,12,0,1,2,2,13,15,1,0,0,0,255,4,10,0,0,0,1,15,13,6,13,1,255,0,4,5,3,255,0,4
0038E6r 3  01 02 02 0D  
0038EAr 3  0F 01 00 00  
003903r 3  05 03 FF 00          .byte 5,3,255,0,4,1,13,6,40,6,9,255,1,16,9,6,6
003907r 3  04 01 0D 06  
00390Br 3  28 06 09 FF  
003914r 3  09 01 01 0B          .byte 9,1,1,11,11,11,7,9,1,1,7,7,1,1,9,7,11,11,11,1,1,9,1,35,255,4,18,38,1,1,36,255,0,4
003918r 3  0B 0B 07 09  
00391Cr 3  01 01 07 07  
003936r 3  0C 00 00 00          .byte 12,0,0,0,12,255,0,4,12,0,0,12,0,37,1,10,4,255,0,7,1,9,9,1,255,0,7,4,10,10,4,12,0,0
00393Ar 3  0C FF 00 04  
00393Er 3  0C 00 00 0C  
003958r 3  0C 00 00 05          .byte 12,0,0,5,255,4,4,5,0,0,12,0,0,0,4,10,9,4,255,0,6,3,255,0,4,3,255,0,6,4,9,2,2
00395Cr 3  FF 04 04 05  
003960r 3  00 00 0C 00  
003979r 3  FF 01 06 09          .byte 255,1,6,9,255,0,4,9,255,1,6,2,2,255,4,8,5,0,12,0,0,5,255,4,8,0,0,0,12,255,0,4,3
00397Dr 3  FF 00 04 09  
003981r 3  FF 01 06 02  
00399Ar 3  FF 00 04 03          .byte 255,0,4,3,255,0,5,12,0,0,2,2,11,11,0,0,0,11,255,1,6,0,0,0,9,11,11,2,2,255,4,4,0,0,0
00399Er 3  FF 00 05 0C  
0039A2r 3  00 00 02 02  
0039BDr 3  04 04 04 0B          .byte 4,4,4,11,11,4,4,0,0,0,10,255,4,4,255,0,10,30,30,255,0,5,1,255,0,4,2,2,11,11,7,1,9
0039C1r 3  0B 04 04 00  
0039C5r 3  00 00 0A FF  
0039DEr 3  00 00 00 1D          .byte 0,0,0,29,27,0,0,0,11,11,9,0,0,2,2,9,30,255,4,5,0,0,0,4,4,0,0,0,4,4,4,0,0
0039E2r 3  1B 00 00 00  
0039E6r 3  0B 0B 09 00  
0039FFr 3  01 01 01 1E          .byte 1,1,1,30,255,0,18,11,11,1,30,0,0,9,255,1,7,9,0,0,0,9,7,1,1,9,11,10,30,0,0,10,30
003A03r 3  FF 00 12 0B  
003A07r 3  0B 01 1E 00  
003A20r 3  FF 04 07 00          .byte 255,4,7,0,0,0,255,4,4,13,10,10,30,0,0,1,1,255,0,14,10,1,1,30,0,0,8,9,0,0,0,9,1,1,1
003A24r 3  00 00 FF 04  
003A28r 3  04 0D 0A 0A  
003A43r 3  07 01 01 09          .byte 7,1,1,9,0,0,0,1,30,1,30,0,0,4,4,0,0,0,255,4,8,0,0,0,30,30,9,30,255,0,18,10,1
003A47r 3  00 00 00 01  
003A4Br 3  1E 01 1E 00  
003A64r 3  0D 0B FF 01          .byte 13,11,255,1,4,9,1,1,1,7,11,11,1,1,1,9,1,1,1,9,13
003A68r 3  04 09 01 01  
003A6Cr 3  01 07 0B 0B  
003A79r 3  08 08 08 07          .byte 8,8,8,7,255,1,4,5,9,7,9,7,5,255,1,4,8,7,8,8,30,255,4,20,30,30,0,0,12,255,0,7,12
003A7Dr 3  FF 01 04 05  
003A81r 3  09 07 09 07  
003A9Ar 3  FF 00 07 0C          .byte 255,0,7,12,0,30,30,255,0,6,12,255,0,7,1,12,255,0,4,30,9,1,1,1,7,1,1,9,0,12,0,0,0
003A9Er 3  00 1E 1E FF  
003AA2r 3  00 06 0C FF  
003ABBr 3  09 01 07 01          .byte 9,1,7,1,255,0,4,9,26,255,4,7,255,0,4,12,255,4,4,255,0,4,28,27,255,0,18,12,0,29,8,0,12
003ABFr 3  FF 00 04 09  
003AC3r 3  1A FF 04 07  
003ADCr 3  FF 00 04 0C          .byte 255,0,4,12,255,0,9,1,0,0,0,8,9,11,11,11,255,1,4,9,0,0,0,9,1,11,11,11,7,9,0,0,30
003AE0r 3  FF 00 09 01  
003AE4r 3  00 00 00 08  
003AFDr 3  02 02 01 08          .byte 2,2,1,8,4,4,4,1,1,0,0,0,1,1,1,4,4,4,1,0,0,2,255,4,4,0,0,0,5,5,0,0,0
003B01r 3  04 04 04 01  
003B05r 3  01 00 00 00  
003B1Er 3  05 05 05 00          .byte 5,5,5,0,0,0,1,0,0,4,255,0,7,5,3,0,0,0,5,3,3,0,0,0,1,0,0,0,2,2,1,1,0,0,0
003B22r 3  00 00 01 00  
003B26r 3  00 04 FF 00  
003B41r 3  09 0B 0B 01          .byte 9,11,11,1,1,11,11,9,0,0,0,8,1,2,2,255,4,4,0,0,0,255,4,8,0,0,0,255,4,4,255,0,22
003B45r 3  01 0B 0B 09  
003B49r 3  00 00 00 08  
003B62r 3  02 02 01 01          .byte 2,2,1,1,9,1,7,1,1,255,0,4,1,7,1,9,1,1,1,2,2,15,13,13,15,10,4,4,4,5,255,0,4
003B66r 3  09 01 07 01  
003B6Ar 3  01 FF 00 04  
003B83r 3  04 04 04 0A          .byte 4,4,4,10,15,15,15,13,15,13,6,6,13,10,0,0,0,3,255,0,7,10,15,15,13,6,13,6,9,11,11,9,0,0,0
003B87r 3  0F 0F 0F 0D  
003B8Br 3  0F 0D 06 06  
003BA6r 3  01 0B 09 0B          .byte 1,11,9,11,1,0,0,0,9,15,15,255,6,4,10,4,4,4,0,0,0,255,4,5,0,0,0,10,15,13,6,40,6
003BAAr 3  01 00 00 00  
003BAEr 3  09 0F 0F FF  
003BC7r 3  28 0A FF 00          .byte 40,10,255,0,14,10,13,6,6,6,14,6,9,11,11,9,255,11,4,1,1,1,255,11,4,9,6,40,6,14,15
003BCBr 3  0E 0A 0D 06  
003BCFr 3  06 06 0E 06  
003BE6r 3  02 02 08 01          .byte 2,2,8,1,1,1,8,7,7,9,8,7,255,1,4,8,8,8,7,2,2,255,4,20,5,5,0,0,12,255,0,5,12
003BEAr 3  01 01 08 07  
003BEEr 3  07 09 08 07  
003C07r 3  FF 00 07 0C          .byte 255,0,7,12,0,0,0,5,3,2,2,0,0,0,34,34,255,0,6,9,7,8,255,1,4,2,2,1,1,0,0,9,1
003C0Br 3  00 00 00 05  
003C0Fr 3  03 02 02 00  
003C28r 3  08 FF 00 06          .byte 8,255,0,6,255,4,7,1,10,8,30,0,12,1,4,4,255,0,4,12,255,0,7,12,30,10,1,30,0,0,10,0,0
003C2Cr 3  FF 04 07 01  
003C30r 3  0A 08 1E 00  
003C49r 3  0C FF 00 07          .byte 12,255,0,7,12,255,0,4,30,10,10,30,0,0,10,255,0,15,1,10,10,30,0,0,10,0,0,1,255,0,12,1,10
003C4Dr 3  0C FF 00 04  
003C51r 3  1E 0A 0A 1E  
003C6Ar 3  02 02 00 00          .byte 2,2,0,0,9,11,11,11,1,1,1,7,255,1,5,11,11,11,7,10,10,4,12,0,255,4,17,10,10,255,0,5,12
003C6Er 3  09 0B 0B 0B  
003C72r 3  01 01 01 07  
003C8Br 3  FF 00 0E 0A          .byte 255,0,14,10,2,2,1,11,11,9,0,0,0,9,1,11,1,9,0,12,0,9,11,11,1,1,35,255,4,5,0,0,0
003C8Fr 3  02 02 01 0B  
003C93r 3  0B 09 00 00  
003CACr 3  FF 04 05 00          .byte 255,4,5,0,0,0,255,4,4,38,36,255,0,20,37,255,1,4,11,11,9,255,0,4,9,255,0,4,9,11,11,1,1,1
003CB0r 3  00 00 FF 04  
003CB4r 3  04 26 24 FF  
003CCEr 3  0A FF 04 06          .byte 10,255,4,6,255,0,4,4,255,0,4,255,4,5,10,10,255,0,20,10,9,255,0,5,1,1,8,9,255,11,4,9,8
003CD2r 3  FF 00 04 04  
003CD6r 3  FF 00 04 FF  
003CEFr 3  01 01 00 00          .byte 1,1,0,0,0,9,10,9,255,0,4,255,4,12,0,0,9,10,10,10,255,0,18,10,10,7,8,1,1,1,11,8,7
003CF3r 3  00 09 0A 09  
003CF7r 3  FF 00 04 FF  
003D10r 3  01 01 01 09          .byte 1,1,1,9,1,1,1,11,7,8,1,1,7,8
003D14r 3  01 01 01 0B  
003D18r 3  07 08 01 01  
003D1Er 3  06 09 01 01          .byte 6,9,1,1,255,11,7,13,255,11,6,1,1,9,6,6,1,255,4,18,1,6,6,1,0,0,0,12,255,0,12,12,0
003D22r 3  FF 0B 07 0D  
003D26r 3  FF 0B 06 01  
003D3Fr 3  01 06 06 0D          .byte 1,6,6,13,1,9,255,0,4,12,0,0,1,13,1,13,1,13,1,0,0,13,6,6,26,4,4,0,0,12,255,0,4
003D43r 3  01 09 FF 00  
003D47r 3  04 0C 00 00  
003D60r 3  FF 04 07 00          .byte 255,4,7,0,0,28,6,14,27,255,0,15,12,0,0,29,14,2,2,1,1,11,7,11,11,11,8,255,11,4,7,1,255,0,4
003D64r 3  00 1C 06 0E  
003D68r 3  1B FF 00 0F  
003D83r 3  02 02 05 05          .byte 2,2,5,5,255,4,8,1,255,4,5,0,0,12,0,5,5,5,3,255,0,4,12,0,0,0,10,255,0,9,5,3,2,2
003D87r 3  FF 04 08 01  
003D8Br 3  FF 04 05 00  
003DA5r 3  0B 08 01 01          .byte 11,8,1,1,255,0,4,10,0,0,1,9,1,1,0,0,0,2,2,255,4,6,255,0,4,10,0,0,255,4,4,0,0,0
003DA9r 3  FF 00 04 0A  
003DADr 3  00 00 01 09  
003DC7r 3  04 04 FF 00          .byte 4,4,255,0,10,10,255,0,11,2,2,9,11,11,11,9,0,0,0,22,22,1,0,0,0,9,1,1,1,2,2,15,15
003DCBr 3  0A 0A FF 00  
003DCFr 3  0B 02 02 09  
003DE8r 3  0A FF 04 04          .byte 10,255,4,4,0,0,0,41,41,4,0,0,0,255,4,4,1,9,15,15,10,255,0,7,23,23,255,0,8,1,15,13,15
003DECr 3  00 00 00 29  
003DF0r 3  29 04 00 00  
003E09r 3  0A 16 16 FF          .byte 10,22,22,255,11,5,33,33,11,11,11,0,0,0,1,7,9,15,6,13,10,41,41,255,4,5,39,39,4,4,4,0,0,0
003E0Dr 3  0B 05 21 21  
003E11r 3  0B 0B 0B 00  
003E2Br 3  04 04 01 0D          .byte 4,4,1,13,6,6,10,23,23,255,0,5,31,31,255,0,8,1,6,40,6,10,33,33,255,11,5,22,22,11,0,0,0
003E2Fr 3  06 06 0A 17  
003E33r 3  17 FF 00 05  
003E4Cr 3  01 01 00 00          .byte 1,1,0,0,1,6,6,6,10,39,39,255,4,8,0,0,0,4,4,0,0,1,40,6,6,10,31,31,255,0,15,1,6,6
003E50r 3  01 06 06 06  
003E54r 3  0A 27 27 FF  
003E6Er 3  28 0A 16 16          .byte 40,10,22,22,255,11,6,1,8,7,11,11,9,7,1,1,9,6
003E72r 3  FF 0B 06 01  
003E76r 3  08 07 0B 0B  
003E80r 3  0E FF 0B 0A          .byte 14,255,11,10,9,255,11,9,14,10,255,4,10,5,255,4,9,10,10,0,12,0,0,12,255,0,5,3,255,0,6,12,0,0
003E84r 3  09 FF 0B 09  
003E88r 3  0E 0A FF 04  
003EA2r 3  0A 0E FF 00          .byte 10,14,255,0,6,12,255,22,6,0,0,12,0,0,12,0,14,28,35,0,0,12,0,0,0,255,4,6,255,0,6,38,26
003EA6r 3  06 0C FF 16  
003EAAr 3  06 00 00 0C  
003EC3r 3  1D 24 FF 00          .byte 29,36,255,0,18,37,27,15,13,255,11,6,9,255,0,4,9,255,11,6,13,15,13,10,255,4,7,255,0,4,255,4,7
003EC7r 3  12 25 1B 0F  
003ECBr 3  0D FF 0B 06  
003EE4r 3  0A 0D 06 0A          .byte 10,13,6,10,255,0,18,10,6,6,9,11,9,0,0,0,9,255,11,12,9,6,6,10,4,4,0,0,0,255,4,13,10
003EE8r 3  FF 00 12 0A  
003EECr 3  06 06 09 0B  
003F05r 3  06 0E 0A FF          .byte 6,14,10,255,0,18,10,14,15,14,255,11,12,9,0,0,0,9,11,14,15,28,35,255,4,13,0,0,0,4,4,38,26
003F09r 3  00 12 0A 0E  
003F0Dr 3  0F 0E FF 0B  
003F26r 3  1D 24 FF 00          .byte 29,36,255,0,18,37,27,15,13,11,11,11,22,22,11,0,0,0,9,255,11,8,13,15,13,1,4,4,4,41,41,4,0,0,0
003F2Ar 3  12 25 1B 0F  
003F2Er 3  0D 0B 0B 0B  
003F49r 3  FF 04 09 01          .byte 255,4,9,1,13,6,13,0,0,0,23,23,255,0,13,13,6,6,6,11,11,11,33,33,255,11,13,6,6,40,6,13,15
003F4Dr 3  0D 06 0D 00  
003F51r 3  00 00 17 17  
003F6Ar 3  0D 27 27 FF          .byte 13,39,39,255,4,7,13,15,13,13,6,13,255,6,5,13,10,31,31,255,0,7,10,13,6,6,40,255,6,5,40,6,9
003F6Er 3  04 07 0D 0F  
003F72r 3  0D 0D 06 0D  
003F8Br 3  16 16 FF 0B          .byte 22,22,255,11,7,9,255,6,6,40
003F8Fr 3  07 09 FF 06  
003F93r 3  06 28        
003F95r 3  01 01 01 0F          .byte 1,1,1,15,255,13,4,15,15,1,1,15,15,255,13,4,15,1,1,1,14,255,4,20,14,26,255,0,17,12,0,0,28
003F99r 3  FF 0D 04 0F  
003F9Dr 3  0F 01 01 0F  
003FB6r 3  1B 00 00 0C          .byte 27,0,0,12,0,0,0,12,255,0,5,12,255,0,7,29,13,255,0,10,12,255,0,7,12,0,13,1,255,0,4,12,255,0,10
003FBAr 3  00 00 00 0C  
003FBEr 3  FF 00 05 0C  
003FD9r 3  0C FF 00 04          .byte 12,255,0,4,1,10,0,12,255,0,6,12,255,0,4,12,255,0,6,10,10,255,0,17,12,0,0,10,10,255,0,20,10
003FDDr 3  01 0A 00 0C  
003FE1r 3  FF 00 06 0C  
003FFAr 3  01 01 01 FF          .byte 1,1,1,255,0,18,1,13,4,4,255,0,18,13,1,32,32,255,34,16,0,0,1,1,22,22,255,1,8,22,22,255,1,6
003FFEr 3  00 12 01 0D  
004002r 3  04 04 FF 00  
00401Cr 3  00 00 01 0A          .byte 0,0,1,10,41,41,255,4,8,41,41,10,255,4,5,0,0,10,10,23,23,255,0,8,23,23,10,32,34,34,34,0,0,0
004020r 3  29 29 FF 04  
004024r 3  08 29 29 0A  
00403Er 3  0A 01 21 21          .byte 10,1,33,33,255,11,4,1,22,22,11,33,33,1,22,22,11,11,1,0,0,1,10,39,39,255,4,4,10,41,41,4,39,39
004042r 3  FF 0B 04 01  
004046r 3  16 16 0B 21  
004060r 3  0A 27 29 04          .byte 10,39,41,4,4,4,0,0,10,10,31,42,255,0,4,10,23,23,0,42,31,10,23,23,255,0,5,10,13,22,22,255,11,4
004064r 3  04 04 00 00  
004068r 3  0A 0A 1F 2A  
004082r 3  01 21 21 0B          .byte 1,33,33,11,22,22,1,33,33,1,11,1,1,1,13,6,13,13,15,15,15,13,10,39,39,255,4,4,39,39,10,15,15,15
004086r 3  16 16 01 21  
00408Ar 3  21 01 0B 01  
0040A4r 3  0D 06 28 06          .byte 13,6,40,6,6,13,13,15,15,10,42,31,255,0,4,31,42,10,15,13,13,255,6,4,40,6,6,13,13,13,22,22,255,11,4
0040A8r 3  06 0D 0D 0F  
0040ACr 3  0F 0A 2A 1F  
0040C7r 3  16 16 0D 0D          .byte 22,22,13,13,255,6,4
0040CBr 3  FF 06 04     
0040CEr 3  0D 0B 01 01          .byte 13,11,1,1,255,11,14,1,1,11,13,6,1,255,4,18,1,6,6,1,255,0,8,12,255,0,7,12,0,1,6,6,8
0040D2r 3  FF 0B 0E 01  
0040D6r 3  01 0B 0D 06  
0040EFr 3  00 0C 09 FF          .byte 0,12,9,255,11,5,1,1,1,255,11,4,9,0,0,11,6,15,26,0,0,255,4,14,0,0,28,15,15,27,255,0,18
0040F3r 3  0B 05 01 01  
0040F7r 3  01 FF 0B 04  
004110r 3  1D 0F 02 02          .byte 29,15,2,2,0,0,0,9,11,1,1,11,11,9,0,12,0,9,11,1,11,11,2,2,5,5,0,0,12,255,4,7,0,0,0
004114r 3  00 00 00 09  
004118r 3  0B 01 01 0B  
004133r 3  FF 04 05 05          .byte 255,4,5,5,5,5,3,255,0,5,12,255,0,12,5,3,2,2,11,11,9,0,0,0,9,255,11,5,9,0,0,0,9
004137r 3  05 05 03 FF  
00413Br 3  00 05 0C FF  
004154r 3  0B 02 02 01          .byte 11,2,2,1,35,4,4,4,0,0,0,255,4,7,0,0,0,4,4,38,1,1,36,255,0,18,37,1,11,11,0,0,0
004158r 3  23 04 04 04  
00415Cr 3  00 00 00 FF  
004175r 3  09 01 0B 01          .byte 9,1,11,1,9,0,0,0,9,11,11,255,1,4,11,11,13,1,0,0,0,255,4,4,255,0,4,255,4,7,1,13,6
004179r 3  09 00 00 00  
00417Dr 3  09 0B 0B FF  
004196r 3  01 FF 00 12          .byte 1,255,0,18,1,6,2,2,0,0,9,255,11,8,22,22,11,11,9,0,0,2,2,4,4,0,0,255,4,8,10,41,39
00419Ar 3  01 06 02 02  
00419Er 3  00 00 09 FF  
0041B7r 3  04 04 04 00          .byte 4,4,4,0,0,4,4,255,0,12,10,42,23,255,0,7,2,2,255,11,4,9,11,9,0,0,0,9,33,33,255,11,5
0041BBr 3  00 04 04 FF  
0041BFr 3  00 0C 0A 2A  
0041D8r 3  02 02 06 0D          .byte 2,2,6,13,255,15,4,10,4,4,0,0,0,4,41,39,255,4,5,1,13,40,6,6,13,13,15,10,255,0,6,42,31
0041DCr 3  FF 0F 04 0A  
0041E0r 3  04 04 00 00  
0041F9r 3  FF 00 05 01          .byte 255,0,5,1,255,6,6,13,9,255,11,6,22,22,255,11,5,9,6
0041FDr 3  FF 06 06 0D  
004201r 3  09 FF 0B 06  
00420Cr 3  01 23 FF 04          .byte 1,35,255,4,18,38,1,1,36,255,0,8,12,255,0,5,12,0,0,0,37,1,9,9,255,0,18,9,9,8,8,0,0
004210r 3  12 26 01 01  
004214r 3  24 FF 00 08  
00422Dr 3  0C FF 00 09          .byte 12,255,0,9,12,255,0,5,8,8,15,13,255,0,16,12,0,13,15,13,10,255,0,5,12,255,0,12,10,13,1,10,255,0,7
004231r 3  0C FF 00 05  
004235r 3  08 08 0F 0D  
004250r 3  01 0B 0B 01          .byte 1,11,11,1,255,0,7,10,1,1,10,255,0,7,255,4,4,0,0,0,12,0,0,0,10,1,6,10,0,0,12,255,0,15
004254r 3  FF 00 07 0A  
004258r 3  01 01 0A FF  
004272r 3  0A 06 0E 0D          .byte 10,6,14,13,255,0,5,1,9,255,11,4,9,255,0,6,13,14,26,4,255,0,4,12,255,4,7,255,0,4,12,0,4
004276r 3  FF 00 05 01  
00427Ar 3  09 FF 0B 04  
004293r 3  1C 1B FF 00          .byte 28,27,255,0,20,29,13,14,0,0,0,1,11,11,1,0,0,0,12,255,0,7,14,13,6,10,0,0,0,255,4,4,255,0,11
004297r 3  14 1D 0D 0E  
00429Br 3  00 00 00 01  
0042B6r 3  0A 06 01 0A          .byte 10,6,1,10,255,0,18,10,1,13,1,11,9,255,0,4,1,255,11,5,0,12,0,0,9,1,1,1,6,13,4,4,255,0,4
0042BAr 3  FF 00 12 0A  
0042BEr 3  01 0D 01 0B  
0042D9r 3  FF 04 06 FF          .byte 255,4,6,255,0,4,4,4,13,1,6,10,255,0,18,10,1,14,10,0,0,0,1,11,11,9,255,11,4,9,0,0,11,11
0042DDr 3  00 04 04 04  
0042E1r 3  0D 01 06 0A  
0042FBr 3  01 01 01 0F          .byte 1,1,1,15,15,10,0,0,0,255,4,9,0,0,4,4,10,1,15,13,15,10,255,0,16,10,15,13,6,13,13,255,1,16
0042FFr 3  0F 0A 00 00  
004303r 3  00 FF 04 09  
00431Dr 3  0D 0D 06 06          .byte 13,13,6,6
004321r 3  06 28 06 06          .byte 6,40,6,6,9,11,11,1,1,11,11,1,11,1,1,1,9,255,6,9,1,255,4,11,8,255,6,8,14,1,0,12,255,0,6
004325r 3  09 0B 0B 01  
004329r 3  01 0B 0B 01  
004344r 3  0C 00 00 01          .byte 12,0,0,1,14,6,6,40,6,6,6,14,1,7,255,0,4,9,1,1,8,1,1,1,9,15,14,6,6,6,14,14,15
004348r 3  0E 06 06 28  
00434Cr 3  06 06 06 0E  
004365r 3  01 04 FF 00          .byte 1,4,255,0,4,255,4,7,1,15,15,14,14,6,15,15,15,9,255,0,7,12,255,0,4,1,255,15,4,14,1,11,11
004369r 3  04 FF 04 07  
00436Dr 3  01 0F 0F 0E  
004386r 3  08 00 00 09          .byte 8,0,0,9,11,11,11,1,7,9,0,0,0,8,1,11,11,11,1,26,4,4,4,12,0,0,255,4,6,0,12,0,255,4,5
00438Ar 3  0B 0B 0B 01  
00438Er 3  07 09 00 00  
0043A9r 3  1C 1B FF 00          .byte 28,27,255,0,17,12,0,0,29,2,2,9,0,0,0,9,11,1,1,9,1,1,11,11,1,9,0,0,0,2,2,5,5
0043ADr 3  11 0C 00 00  
0043B1r 3  1D 02 02 09  
0043CAr 3  00 0C 00 00          .byte 0,12,0,0,255,4,11,0,0,0,4,4,5,3,255,0,20,2,2,11,11,8,1,0,0,0,1,11,9,7,11,1,0,0,0
0043CEr 3  FF 04 0B 00  
0043D2r 3  00 00 04 04  
0043EDr 3  01 0B 02 02          .byte 1,11,2,2,15,10,255,4,4,0,0,0,4,4,1,4,4,4,0,0,0,4,4,10,15,13,10,255,0,9,10,255,0,8
0043F1r 3  0F 0A FF 04  
0043F5r 3  04 00 00 00  
00440Fr 3  0A 0D 06 0A          .byte 10,13,6,10,0,0,0,1,11,1,0,0,0,9,0,0,0,9,1,11,11,1,1,6,14,10,0,0,0,4,4,4,0,0,0
004413r 3  00 00 00 01  
004417r 3  0B 01 00 00  
004432r 3  04 00 00 00          .byte 4,0,0,0,255,4,5,10,14,15,10,255,0,18,10,15,2,2,11,11,9,11,11,1,1,8,1,11,11,9,255,0,4
004436r 3  FF 04 05 0A  
00443Ar 3  0E 0F 0A FF  
004453r 3  09 0B 02 02          .byte 9,11,2,2,5,5,255,4,12,255,0,4,4,4,5,5,5,3,255,0,18,5,3,2,2,11,9,1,8,1,11,11,1,1
004457r 3  05 05 FF 04  
00445Br 3  0C FF 00 04  
004475r 3  0B 0B 01 08          .byte 11,11,1,8,1,1,1,9,11,2,2
004479r 3  01 01 01 09  
00447Dr 3  0B 02 02     
004480r 3  09 01 0B 0B          .byte 9,1,11,11,8,1,1,1,8,11,11,11,8,255,1,4,8,11,11,1,9,10,255,4,20,10,10,4,12,255,0,7,12
004484r 3  08 01 01 01  
004488r 3  08 0B 0B 0B  
0044A1r 3  FF 00 09 04          .byte 255,0,9,4,10,10,4,0,0,12,255,0,13,12,0,4,10,9,4,0,0,0,8,11,1,9,0,0,0,9,1,11,11
0044A5r 3  0A 0A 04 00  
0044A9r 3  00 0C FF 00  
0044C2r 3  08 00 00 00          .byte 8,0,0,0,4,9,1,4,0,0,0,255,4,4,12,0,0,255,4,5,0,0,0,4,1,1,4,255,0,18,4,1,9
0044C6r 3  04 09 01 04  
0044CAr 3  00 00 00 FF  
0044E3r 3  04 00 0C 00          .byte 4,0,12,0,0,0,9,11,1,1,8,11,11,9,0,0,12,0,0,4,9,1,4,255,0,5,4,4,4,10,255,4,4
0044E7r 3  00 00 09 0B  
0044EBr 3  01 01 08 0B  
004504r 3  FF 00 05 04          .byte 255,0,5,4,1,10,4,255,0,8,10,255,0,9,4,10,10,4,0,0,0,9,1,11,11,8,1,0,0,0,8,1,9
004508r 3  01 0A 04 FF  
00450Cr 3  00 08 0A FF  
004525r 3  00 00 00 04          .byte 0,0,0,4,10,10,4,0,0,0,255,4,6,0,0,0,4,4,4,0,0,0,4,10,1,4,255,0,18,4,1,14,4
004529r 3  0A 0A 04 00  
00452Dr 3  00 00 FF 04  
004546r 3  FF 00 06 09          .byte 255,0,6,9,1,11,11,8,1,9,255,0,5,4,14,26,4,255,0,6,5,255,4,6,255,0,5,4,28,27,4,255,0,6
00454Ar 3  01 0B 0B 08  
00454Er 3  01 09 FF 00  
004568r 3  03 FF 00 0B          .byte 3,255,0,11,4,29,13,4,0,0,0,1,8,1,9,255,0,4,9,1,8,1,0,0,0,4,13,1,4,0,0,0,10
00456Cr 3  04 1D 0D 04  
004570r 3  00 00 00 01  
004589r 3  04 04 04 FF          .byte 4,4,4,255,0,4,4,4,4,10,0,0,0,4,1,10,4,0,0,0,10,255,0,10,10,0,0,0,4,10,10,4,0,0,0
00458Dr 3  00 04 04 04  
004591r 3  04 0A 00 00  
0045ACr 3  09 0B 0B 01          .byte 9,11,11,1,1,1,7,8,1,11,11,9,0,0,0,4,10,10,255,32,4,10,15,255,13,8,15,10,255,32,4,10,13
0045B0r 3  01 01 07 08  
0045B4r 3  01 0B 0B 09  
0045CDr 3  FF 0B 04 0D          .byte 255,11,4,13,13,255,6,8,13,13,255,11,4,13
0045D1r 3  0D FF 06 08  
0045D5r 3  0D 0D FF 0B  
0045DBr 3  16 16 01 01          .byte 22,22,1,1,11,11,11,9,1,13,29,27,13,11,11,13,29,27,13,1,14,6,255,4,20,1,14,0,0,12,255,0,17
0045DFr 3  0B 0B 0B 09  
0045E3r 3  01 0D 1D 1B  
0045FCr 3  09 01 0B 0B          .byte 9,1,11,11,255,0,16,12,0,4,1,13,4,255,0,13,12,255,0,5,9,10,255,0,8,12,255,0,10,12,10,10,0
004600r 3  FF 00 10 0C  
004604r 3  00 04 01 0D  
00461Dr 3  0C 00 00 00          .byte 12,0,0,0,9,1,255,0,10,9,0,0,10,10,255,0,5,4,13,255,0,4,9,1,1,0,0,0,8,0,0,10,14
004621r 3  09 01 FF 00  
004625r 3  0A 09 00 00  
00463Er 3  FF 00 06 0A          .byte 255,0,6,10,255,0,5,8,8,0,0,0,1,0,0,8,1,9,0,0,0,12,0,10,255,0,4,12,1,1,0,0,0
004642r 3  FF 00 05 08  
004646r 3  08 00 00 00  
00465Fr 3  01 00 00 0E          .byte 1,0,0,14,13,4,255,0,5,10,255,0,4,34,22,22,34,34,34,1,0,0,10,10,255,0,6,14,0,0,34,34,1
004663r 3  0D 04 FF 00  
004667r 3  05 0A FF 00  
004680r 3  0B 0B FF 01          .byte 11,11,255,1,4,0,0,10,10,255,0,5,9,1,0,0,1,1,255,4,7,0,0,10,10,255,0,5,4,13,0,0,8,8
004684r 3  04 00 00 0A  
004688r 3  0A FF 00 05  
0046A2r 3  FF 00 09 0A          .byte 255,0,9,10,14,255,0,6,10,0,0,10,22,0,0,0,9,1,255,11,4,1,1,9,255,0,5,10,0,0,10,22,0,0,0
0046A6r 3  0E FF 00 06  
0046AAr 3  0A 00 00 0A  
0046C5r 3  FF 04 06 08          .byte 255,4,6,8,13,4,255,0,5,10,0,0,10,22,255,0,9,1,10,255,0,6,14,0,0,1,11,11,9,1,1,255,0,5
0046C9r 3  0D 04 FF 00  
0046CDr 3  05 0A 00 00  
0046E7r 3  01 0A FF 00          .byte 1,10,255,0,5,9,1,0,0,22,22,1,1,11,11,9,255,0,4,1,14,255,0,5,4,3,0,0,3,3,255,0,4
0046EBr 3  05 09 01 00  
0046EFr 3  00 16 16 01  
004708r 3  04 00 00 00          .byte 4,0,0,0,9,15,1,255,0,6,3,0,0,3,3,255,0,8,1,13,13,1,11,11,9,11,11,1,11,11,1,1,9
00470Cr 3  09 0F 01 FF  
004710r 3  00 06 03 00  
004729r 3  01 FF 0B 04          .byte 1,255,11,4,1,1,13,6
00472Dr 3  01 01 0D 06  
004731r 3  02 02 07 0B          .byte 2,2,7,11,11,11,1,7,8,9,1,1,11,11,11,9,8,1,7,8,2,2,255,4,22,0,0,0,12,255,0,9,12
004735r 3  0B 0B 01 07  
004739r 3  08 09 01 01  
004752r 3  FF 00 04 0C          .byte 255,0,4,12,0,0,0,12,255,0,7,12,255,0,7,12,255,0,4,12,2,2,11,11,1,5,3,3,11,1,9,0,0,0
004756r 3  00 00 00 0C  
00475Ar 3  FF 00 07 0C  
004774r 3  09 01 FF 0B          .byte 9,1,255,11,4,2,2,35,255,4,5,0,0,4,4,4,0,12,0,255,4,7,38,36,255,0,4,12,255,0,15,37,1
004778r 3  04 02 02 23  
00477Cr 3  FF 04 05 00  
004795r 3  09 0C FF 00          .byte 9,12,255,0,11,12,255,0,5,9,1,15,10,255,0,4,9,1,5,3,8,11,9,0,0,0,9,11,11,1,10,15,13
004799r 3  0B 0C FF 00  
00479Dr 3  05 09 01 0F  
0047B6r 3  0A FF 00 04          .byte 10,255,0,4,4,4,0,0,1,4,4,0,0,0,255,4,4,10,13,6,10,255,0,8,10,255,0,9,10,6,6,10,255,0,8
0047BAr 3  04 04 00 00  
0047BEr 3  01 04 04 00  
0047D9r 3  0A FF 00 09          .byte 10,255,0,9,10,6,2,2,5,5,3,3,1,5,3,3,9,1,11,1,9,0,0,0,9,11,2,2,5,5,4,4,0,0
0047DDr 3  0A 06 02 02  
0047E1r 3  05 05 03 03  
0047FBr 3  04 04 00 00          .byte 4,4,0,0,255,4,5,0,0,0,4,4,5,5,5,3,255,0,18,5,3,5,3,255,0,18,5,3,2,2,5,3,1
0047FFr 3  FF 04 05 00  
004803r 3  00 00 04 04  
00481Cr 3  0B 0B 01 05          .byte 11,11,1,5,3,1,9,0,0,0,9,1,5,3,3,2,2,5,5,0,0,255,4,4,0,0,4,4,0,0,0,4,4
004820r 3  03 01 09 00  
004824r 3  00 00 09 01  
00483Dr 3  00 00 00 05          .byte 0,0,0,5,5,5,3,255,0,18,5,3,5,3,255,0,4,11,9,0,0,8,9,255,0,8,5,3,2,2,8,1,1
004841r 3  05 05 03 FF  
004845r 3  00 12 05 03  
00485Er 3  0D 07 0B 0B          .byte 13,7,11,11,9,7,13,1,1,8,15,1,1,1,8,2,2,13,6,13,15,13,13,15,13,1,1,13,15,13,13,6,13
004862r 3  09 07 0D 01  
004866r 3  01 08 0F 01  
00487Fr 3  0F 0D 06 0D          .byte 15,13,6,13,13,15
004883r 3  0D 0F        
004885r 3  06 0E 01 01          .byte 6,14,1,1,11,11,1,9,1,11,11,1,1,1,14,6,40,255,6,4,40,6,1,255,4,12,1,14,6,6,40,6,6,6
004889r 3  0B 0B 01 09  
00488Dr 3  01 0B 0B 01  
0048A7r 3  28 01 00 00          .byte 40,1,0,0,0,12,255,0,4,12,0,0,0,1,15,14,255,6,6,10,12,255,0,10,12,1,11,11,1,14,6,6,6
0048ABr 3  00 0C FF 00  
0048AFr 3  04 0C 00 00  
0048C8r 3  0E 0A 00 00          .byte 14,10,0,0,22,22,255,1,4,9,0,0,0,255,4,4,1,14,40,6,15,26,0,0,255,4,7,0,12,255,0,4,12
0048CCr 3  16 16 FF 01  
0048D0r 3  04 09 00 00  
0048E9r 3  1C 0F 06 06          .byte 28,15,6,6,13,27,255,0,5,12,255,0,7,12,0,0,29,13,6,6,40,30,3,3,1,1,255,22,7,1,1,0,0,0
0048EDr 3  0D 1B FF 00  
0048F1r 3  05 0C FF 00  
00490Br 3  1E 06 06 28          .byte 30,6,6,40,14,26,0,0,255,4,11,0,12,0,28,14,6,6,14,27,255,0,16,29,15,14,14,2,2,3,3,22,22
00490Fr 3  0E 1A 00 00  
004913r 3  FF 04 0B 00  
00492Cr 3  00 00 00 0C          .byte 0,0,0,12,0,0,0,1,22,22,22,1,7,8,2,2,5,5,0,0,4,4,0,12,255,0,5,255,4,7,5,5,5
004930r 3  00 00 00 01  
004934r 3  16 16 16 01  
00494Dr 3  03 FF 00 12          .byte 3,255,0,18,5,3,2,2,8,22,22,22,1,1,0,0,12,1,1,255,22,5,11,11,2,2,14,14,255,4,6,0,0,0
004951r 3  05 03 02 02  
004955r 3  08 16 16 16  
00496Fr 3  FF 04 09 0E          .byte 255,4,9,14,14,26,4,0,0,12,255,0,9,12,255,0,5,4,28,27,255,0,6,12,255,0,9,12,0,0,0,29,26
004973r 3  0E 1A 04 00  
004977r 3  00 0C FF 00  
004990r 3  00 0C FF 00          .byte 0,12,255,0,7,12,255,0,10,28,27,255,0,4,12,255,0,6,12,255,0,8,29,22,22,22,255,0,10,5,0,0,0
004994r 3  07 0C FF 00  
004998r 3  0A 1C 1B FF  
0049B1r 3  FF 16 05 0F          .byte 255,22,5,15,13,22,255,0,5,11,255,0,4,5,0,0,0,22,15,14,13,15,13,6,22,22,28,26,28,26,22,28,26
0049B5r 3  0D 16 FF 00  
0049B9r 3  05 0B FF 00  
0049D2r 3  1C 1A FF 16          .byte 28,26,255,22,5,6,13,6,13
0049D6r 3  05 06 0D 06  
0049DAr 3  0D           
0049DBr 3  FF 06 04 28          .byte 255,6,4,40,255,6,13,40,255,6,44,40,255,6,4,40,6,6,40,255,6,5,40,255,6,13,255,14,16,255,6,5,14
0049DFr 3  FF 06 0D 28  
0049E3r 3  FF 06 2C 28  
0049FCr 3  0F 01 0B 09          .byte 15,1,11,9,11,11,1,1,9,1,1,11,9,11,1,15,14,6,40,6,6,15,255,4,16,15,6,6,40,6,22,0,12
004A00r 3  0B 0B 01 01  
004A04r 3  09 01 01 0B  
004A1Dr 3  FF 00 06 0C          .byte 255,0,6,12,255,0,6,12,22,255,6,4,1,255,0,5,12,255,0,5,12,255,0,4,1,255,6,4,1,255,0,16,1
004A21r 3  FF 00 06 0C  
004A25r 3  16 FF 06 04  
004A3Er 3  FF 06 04 01          .byte 255,6,4,1,0,12,255,0,12,12,0,1,40,6,2,2,13,255,0,4,255,22,8,255,0,4,13,2,2,15,15,10,255,0,4
004A42r 3  00 0C FF 00  
004A46r 3  0C 0C 00 01  
004A61r 3  FF 04 08 00          .byte 255,4,8,0,12,0,0,10,15,15,13,15,10,0,0,12,255,0,5,12,255,0,6,12,10,15,13,6,13,9,11,11,11
004A65r 3  0C 00 00 0A  
004A69r 3  0F 0F 0D 0F  
004A82r 3  01 01 09 01          .byte 1,1,9,1,1,1,11,11,11,9,11,11,11,9,13,6,6,6,13,15,15,15,13,15,13,255,15,4,13,15,10,15,15,15
004A86r 3  01 01 0B 0B  
004A8Ar 3  0B 09 0B 0B  
004AA4r 3  0D FF 06 04          .byte 13,255,6,4,40,13,15,13,6,13,6,13,13,15,13,6,13,15,13,13,13,6,6,40,255,6,4,13,6,6,6,40,6,6
004AA8r 3  28 0D 0F 0D  
004AACr 3  06 0D 06 0D  
004AC6r 3  0D 06 06 06          .byte 13,6,6,6,13,255,6,7,40,255,6,17,40,255,6,6,40,255,6,33,40,255,6,12,40,6,6,6,40,255,6,10
004ACAr 3  0D FF 06 07  
004ACEr 3  28 FF 06 11  
004AE6r 3               numsc:
004AE6r 3  18                   .byte 24
004AE7r 3               nmedat:
004AE7r 3  03 05 28 78          .byte 3,5,40,120,0,0,16,80,1,2,40,80,0,0,40,40,0,0,64,120,0,0,64,40,1,6,88,104,0,0,88,88,0,0,136,48,1,2,128,104,0,0,112,48,255
004AEBr 3  00 00 10 50  
004AEFr 3  01 02 28 50  
004B14r 3  00 00 48 88          .byte 0,0,72,136,1,2,48,64,3,5,96,136,255
004B18r 3  01 02 30 40  
004B1Cr 3  03 05 60 88  
004B21r 3  00 00 20 10          .byte 0,0,32,16,1,2,8,128,3,5,152,112,255
004B25r 3  01 02 08 80  
004B29r 3  03 05 98 70  
004B2Er 3  00 00 20 40          .byte 0,0,32,64,1,2,24,96,3,5,152,48,4,7,8,72,255
004B32r 3  01 02 18 60  
004B36r 3  03 05 98 30  
004B3Fr 3  00 00 08 00          .byte 0,0,8,0,1,2,8,32,3,5,152,56,255
004B43r 3  01 02 08 20  
004B47r 3  03 05 98 38  
004B4Cr 3  00 00 08 00          .byte 0,0,8,0,1,2,8,80,4,7,32,152,3,5,152,88,255
004B50r 3  01 02 08 50  
004B54r 3  04 07 20 98  
004B5Dr 3  00 00 30 10          .byte 0,0,48,16,5,9,48,48,1,2,48,128,5,8,72,32,3,5,72,88,255
004B61r 3  05 09 30 30  
004B65r 3  01 02 30 80  
004B72r 3  00 00 20 10          .byte 0,0,32,16,1,2,8,120,3,5,152,80,4,7,80,144,5,9,128,112,255
004B76r 3  01 02 08 78  
004B7Ar 3  03 05 98 50  
004B87r 3  00 01 20 90          .byte 0,1,32,144,1,2,24,112,5,9,56,64,5,8,128,80,5,9,152,48,3,5,152,144,5,9,152,112,4,7,8,80,5,8,104,24,255
004B8Br 3  01 02 18 70  
004B8Fr 3  05 09 38 40  
004BACr 3  00 00 98 50          .byte 0,0,152,80,4,11,32,144,3,5,8,112,1,2,8,88,4,11,104,16,7,16,32,16,7,16,104,16,7,16,32,144,7,16,104,144,255
004BB0r 3  04 0B 20 90  
004BB4r 3  03 05 08 70  
004BD1r 3  00 00 08 50          .byte 0,0,8,80,4,11,8,136,1,2,104,128,5,9,104,80,5,8,152,32,5,9,152,104,3,5,152,144,5,8,128,88,7,16,8,16,7,16,8,144,255
004BD5r 3  04 0B 08 88  
004BD9r 3  01 02 68 80  
004BFAr 3  00 00 10 08          .byte 0,0,16,8,1,2,8,104,4,7,40,8,5,8,104,104,5,9,80,16,5,9,152,88,5,8,104,16,3,5,152,16,255
004BFEr 3  01 02 08 68  
004C02r 3  04 07 28 08  
004C1Br 3  00 00 38 40          .byte 0,0,56,64,1,2,40,112,4,7,8,64,4,11,104,144,1,2,80,88,3,5,152,88,7,16,104,8,7,16,104,152,255
004C1Fr 3  01 02 28 70  
004C23r 3  04 07 08 40  
004C3Cr 3  00 00 08 10          .byte 0,0,8,16,1,2,8,104,4,7,32,24,5,9,56,24,5,8,80,24,5,8,56,104,5,9,128,48,3,5,152,128,5,8,152,48,255
004C40r 3  01 02 08 68  
004C44r 3  04 07 20 18  
004C61r 3  00 01 98 60          .byte 0,1,152,96,4,11,32,128,4,11,104,16,3,5,8,96,1,2,8,64,7,16,32,16,7,16,32,144,7,16,104,16,7,16,104,144,255
004C65r 3  04 0B 20 80  
004C69r 3  04 0B 68 10  
004C86r 3  00 00 38 08          .byte 0,0,56,8,6,13,24,40,6,13,80,88,6,13,40,136,4,7,16,8,5,9,152,88,1,2,128,24,3,5,128,40,5,8,104,40,5,8,104,56,255
004C8Ar 3  06 0D 18 28  
004C8Er 3  06 0D 50 58  
004CAFr 3  00 00 08 40          .byte 0,0,8,64,1,2,8,96,4,11,80,24,4,7,32,16,3,5,152,56,7,16,80,16,7,16,80,144,255
004CB3r 3  01 02 08 60  
004CB7r 3  04 0B 50 18  
004CCCr 3  00 00 98 50          .byte 0,0,152,80,4,11,0,136,1,2,8,80,3,5,152,128,4,7,80,16,5,9,152,48,7,16,0,16,7,16,0,144,255
004CD0r 3  04 0B 00 88  
004CD4r 3  01 02 08 50  
004CEDr 3  03 05 98 90          .byte 3,5,152,144,0,1,8,112,1,2,8,72,4,7,56,16,5,8,128,40,5,9,80,96,5,9,152,32,5,8,152,80,255
004CF1r 3  00 01 08 70  
004CF5r 3  01 02 08 48  
004D0Er 3  00 01 10 68          .byte 0,1,16,104,1,2,8,48,6,13,24,8,6,13,144,152,3,5,136,48,4,7,112,8,5,9,40,56,255
004D12r 3  01 02 08 30  
004D16r 3  06 0D 18 08  
004D2Br 3  00 00 08 00          .byte 0,0,8,0,1,2,8,48,4,14,40,24,4,14,48,80,4,14,8,128,3,5,152,40,5,8,96,120,5,9,152,112,255
004D2Fr 3  01 02 08 30  
004D33r 3  04 0E 28 18  
004D4Cr 3  00 00 10 10          .byte 0,0,16,16,1,2,8,64,4,11,40,120,3,5,144,64,7,16,40,8,7,16,40,152,255
004D50r 3  01 02 08 40  
004D54r 3  04 0B 28 78  
004D65r 3  00 00 10 40          .byte 0,0,16,64,1,2,8,32,4,7,64,88,3,5,152,120,4,7,40,16,4,7,120,72,4,7,136,104,255
004D69r 3  01 02 08 20  
004D6Dr 3  04 07 40 58  
004D82r 3  04 00 48 50          .byte 4,0,72,80,4,15,72,56,4,15,72,104,255
004D86r 3  04 0F 48 38  
004D8Ar 3  04 0F 48 68  
004D8Fr 3               NUMOBJ = 1
004D8Fr 3               objdta:
004D8Fr 3  22 22 45 41          .byte 34,34,69,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,68,26,68,68,26,68
004D93r 3  00 00 00 00  
004D97r 3  00 00 00 00  
004DB6r 3               font:
004DB6r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004DBAr 3  00 00 00 00  
004DBEr 3  00 30 30 30          .byte 0,48,48,48,48,48,0,48
004DC2r 3  30 30 00 30  
004DC6r 3  00 18 00 18          .byte 0,24,0,24,24,24,24,24
004DCAr 3  18 18 18 18  
004DCEr 3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
004DD2r 3  6C FE 6C 00  
004DD6r 3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
004DDAr 3  7E 1E 7E 18  
004DDEr 3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
004DE2r 3  30 6E CE 00  
004DE6r 3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
004DEAr 3  7E CC 7E 00  
004DEEr 3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
004DF2r 3  00 00 00 00  
004DF6r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004DFAr 3  00 00 00 00  
004DFEr 3  FF 81 BF BA          .byte 255,129,191,186,187,162,191,234
004E02r 3  BB A2 BF EA  
004E06r 3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
004E0Ar 3  7E 18 3C 00  
004E0Er 3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
004E12r 3  7E 18 18 00  
004E16r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004E1Ar 3  00 00 00 00  
004E1Er 3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
004E22r 3  7E 00 00 00  
004E26r 3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
004E2Ar 3  00 38 38 00  
004E2Er 3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
004E32r 3  18 30 60 00  
004E36r 3  00 7C CE DE          .byte 0,124,206,222,246,230,124,0
004E3Ar 3  F6 E6 7C 00  
004E3Er 3  00 38 78 18          .byte 0,56,120,24,24,24,126,0
004E42r 3  18 18 7E 00  
004E46r 3  00 7C C6 06          .byte 0,124,198,6,124,192,254,0
004E4Ar 3  7C C0 FE 00  
004E4Er 3  00 7C C6 1C          .byte 0,124,198,28,6,198,124,0
004E52r 3  06 C6 7C 00  
004E56r 3  00 18 38 78          .byte 0,24,56,120,216,254,24,0
004E5Ar 3  D8 FE 18 00  
004E5Er 3  00 FE C0 FC          .byte 0,254,192,252,6,198,124,0
004E62r 3  06 C6 7C 00  
004E66r 3  00 7C C0 FC          .byte 0,124,192,252,198,198,124,0
004E6Ar 3  C6 C6 7C 00  
004E6Er 3  00 FE 06 0C          .byte 0,254,6,12,24,48,48,0
004E72r 3  18 30 30 00  
004E76r 3  00 7C C6 7C          .byte 0,124,198,124,198,198,124,0
004E7Ar 3  C6 C6 7C 00  
004E7Er 3  00 7C C6 C6          .byte 0,124,198,198,126,6,124,0
004E82r 3  7E 06 7C 00  
004E86r 3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
004E8Ar 3  00 00 30 00  
004E8Er 3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
004E92r 3  00 30 30 60  
004E96r 3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
004E9Ar 3  30 18 0C 00  
004E9Er 3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
004EA2r 3  00 7E 00 00  
004EA6r 3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
004EAAr 3  0C 18 30 00  
004EAEr 3  00 7C C6 0C          .byte 0,124,198,12,24,0,24,0
004EB2r 3  18 00 18 00  
004EB6r 3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
004EBAr 3  FE C0 7C 00  
004EBEr 3  00 7C C6 C6          .byte 0,124,198,198,254,198,198,0
004EC2r 3  FE C6 C6 00  
004EC6r 3  00 FC C6 FC          .byte 0,252,198,252,198,198,252,0
004ECAr 3  C6 C6 FC 00  
004ECEr 3  00 7C C6 C0          .byte 0,124,198,192,192,198,124,0
004ED2r 3  C0 C6 7C 00  
004ED6r 3  00 F8 CC C6          .byte 0,248,204,198,198,204,248,0
004EDAr 3  C6 CC F8 00  
004EDEr 3  00 FE C0 FC          .byte 0,254,192,252,192,192,254,0
004EE2r 3  C0 C0 FE 00  
004EE6r 3  00 FE C0 FC          .byte 0,254,192,252,192,192,192,0
004EEAr 3  C0 C0 C0 00  
004EEEr 3  00 7C C6 C0          .byte 0,124,198,192,222,198,124,0
004EF2r 3  DE C6 7C 00  
004EF6r 3  00 C6 C6 FE          .byte 0,198,198,254,198,198,198,0
004EFAr 3  C6 C6 C6 00  
004EFEr 3  00 7E 18 18          .byte 0,126,24,24,24,24,126,0
004F02r 3  18 18 7E 00  
004F06r 3  00 06 06 06          .byte 0,6,6,6,198,198,124,0
004F0Ar 3  C6 C6 7C 00  
004F0Er 3  00 CC D8 F0          .byte 0,204,216,240,216,204,198,0
004F12r 3  D8 CC C6 00  
004F16r 3  00 C0 C0 C0          .byte 0,192,192,192,192,192,254,0
004F1Ar 3  C0 C0 FE 00  
004F1Er 3  00 C6 EE FE          .byte 0,198,238,254,198,198,198,0
004F22r 3  C6 C6 C6 00  
004F26r 3  00 C6 E6 F6          .byte 0,198,230,246,222,206,198,0
004F2Ar 3  DE CE C6 00  
004F2Er 3  00 7C C6 C6          .byte 0,124,198,198,198,198,124,0
004F32r 3  C6 C6 7C 00  
004F36r 3  00 FC C6 C6          .byte 0,252,198,198,252,192,192,0
004F3Ar 3  FC C0 C0 00  
004F3Er 3  00 7C C6 C6          .byte 0,124,198,198,246,222,124,0
004F42r 3  F6 DE 7C 00  
004F46r 3  00 FC C6 C6          .byte 0,252,198,198,252,204,198,0
004F4Ar 3  FC CC C6 00  
004F4Er 3  00 7C C0 7C          .byte 0,124,192,124,6,198,124,0
004F52r 3  06 C6 7C 00  
004F56r 3  00 FE 30 30          .byte 0,254,48,48,48,48,48,0
004F5Ar 3  30 30 30 00  
004F5Er 3  00 C6 C6 C6          .byte 0,198,198,198,198,198,124,0
004F62r 3  C6 C6 7C 00  
004F66r 3  00 C6 C6 C6          .byte 0,198,198,198,198,108,56,0
004F6Ar 3  C6 6C 38 00  
004F6Er 3  00 C6 C6 C6          .byte 0,198,198,198,198,254,108,0
004F72r 3  C6 FE 6C 00  
004F76r 3  00 C6 6C 38          .byte 0,198,108,56,56,108,198,0
004F7Ar 3  38 6C C6 00  
004F7Er 3  00 86 CC 78          .byte 0,134,204,120,48,48,48,0
004F82r 3  30 30 30 00  
004F86r 3  00 FE 0C 18          .byte 0,254,12,24,48,96,254,0
004F8Ar 3  30 60 FE 00  
004F8Er 3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
004F92r 3  18 18 1E 00  
004F96r 3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
004F9Ar 3  30 18 0C 00  
004F9Er 3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
004FA2r 3  30 30 F0 00  
004FA6r 3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
004FAAr 3  30 30 30 00  
004FAEr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
004FB2r 3  00 00 00 FF  
004FB6r 3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
004FBAr 3  60 60 FE 00  
004FBEr 3  00 00 78 0C          .byte 0,0,120,12,124,204,124,0
004FC2r 3  7C CC 7C 00  
004FC6r 3  00 60 60 7C          .byte 0,96,96,124,102,102,124,0
004FCAr 3  66 66 7C 00  
004FCEr 3  00 00 3C 60          .byte 0,0,60,96,96,96,60,0
004FD2r 3  60 60 3C 00  
004FD6r 3  00 0C 0C 7C          .byte 0,12,12,124,204,204,124,0
004FDAr 3  CC CC 7C 00  
004FDEr 3  00 00 78 CC          .byte 0,0,120,204,248,192,124,0
004FE2r 3  F8 C0 7C 00  
004FE6r 3  00 1C 30 38          .byte 0,28,48,56,48,48,48,0
004FEAr 3  30 30 30 00  
004FEEr 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,120
004FF2r 3  CC 7C 0C 78  
004FF6r 3  00 C0 C0 F8          .byte 0,192,192,248,204,204,204,0
004FFAr 3  CC CC CC 00  
004FFEr 3  00 30 00 70          .byte 0,48,0,112,48,48,120,0
005002r 3  30 30 78 00  
005006r 3  00 0C 00 0C          .byte 0,12,0,12,12,12,108,56
00500Ar 3  0C 0C 6C 38  
00500Er 3  00 60 78 70          .byte 0,96,120,112,112,120,108,0
005012r 3  70 78 6C 00  
005016r 3  00 30 30 30          .byte 0,48,48,48,48,48,28,0
00501Ar 3  30 30 1C 00  
00501Er 3  00 00 F8 FC          .byte 0,0,248,252,252,252,252,0
005022r 3  FC FC FC 00  
005026r 3  00 00 F8 CC          .byte 0,0,248,204,204,204,204,0
00502Ar 3  CC CC CC 00  
00502Er 3  00 00 78 CC          .byte 0,0,120,204,204,204,120,0
005032r 3  CC CC 78 00  
005036r 3  00 00 F8 CC          .byte 0,0,248,204,204,248,192,192
00503Ar 3  CC F8 C0 C0  
00503Er 3  00 00 7C CC          .byte 0,0,124,204,204,124,12,14
005042r 3  CC 7C 0C 0E  
005046r 3  00 00 3C 60          .byte 0,0,60,96,96,96,96,0
00504Ar 3  60 60 60 00  
00504Er 3  00 00 78 C0          .byte 0,0,120,192,120,12,248,0
005052r 3  78 0C F8 00  
005056r 3  00 30 78 30          .byte 0,48,120,48,48,48,28,0
00505Ar 3  30 30 1C 00  
00505Er 3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
005062r 3  CC CC 78 00  
005066r 3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00506Ar 3  78 78 30 00  
00506Er 3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
005072r 3  FC FC 78 00  
005076r 3  00 00 CC 78          .byte 0,0,204,120,48,120,204,0
00507Ar 3  30 78 CC 00  
00507Er 3  00 00 CC CC          .byte 0,0,204,204,204,124,12,120
005082r 3  CC 7C 0C 78  
005086r 3  00 00 FC 18          .byte 0,0,252,24,48,96,252,0
00508Ar 3  30 60 FC 00  
00508Er 3  00 1E 18 70          .byte 0,30,24,112,24,24,30,0
005092r 3  18 18 1E 00  
005096r 3  00 18 18 18          .byte 0,24,24,24,24,24,24,0
00509Ar 3  18 18 18 00  
00509Er 3  3C 54 7C 7D          .byte 60,84,124,125,3,253,1,85
0050A2r 3  03 FD 01 55  
0050A6r 3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
0050AAr 3  00 00 00 00  
0050AEr 3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
0050B2r 3  E3 BB C6 7C  
0050B6r 3               jtab:
0050B6r 3  F8 FA FC FD          .byte 248,250,252,253,253,255,255,255,0,0,0,1,1,1,2,2,4,4,6,6,6,99
0050BAr 3  FD FF FF FF  
0050BEr 3  00 00 00 01  
0050CCr 3  65 14 51 10  keys:   .byte 101,20,81,16,48,98,52,112,0,113,1
0050D0r 3  30 62 34 70  
0050D4r 3  00 71 01     
0050D7r 3               
0050D7r 2               
0050D7r 1               	.include "lib.inc"
0050D7r 2               ;----------------------------------------------------------------------
0050D7r 2               ; VIC20 Platform Specific functions
0050D7r 2               ;----------------------------------------------------------------------
0050D7r 2               
0050D7r 2               ;============================================================
0050D7r 2               ; PLATFORM VARIABLES
0050D7r 2               ;============================================================
0050D7r 2               ;
0050D7r 2               ; Memory map:
0050D7r 2               ;
0050D7r 2               ;	$0000-$01ff	 0.5kB	CPU WS
0050D7r 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
0050D7r 2               ;	$0400-$0fff	 3,0kB	RAM
0050D7r 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
0050D7r 2               ;	$2000-$7fff	24,0kB	RAM
0050D7r 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
0050D7r 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
0050D7r 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
0050D7r 2               ;	$9800-$9fff	 2,0kB	I/O
0050D7r 2               ;	$a000-$bfff	 8,0kB	RAM
0050D7r 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
0050D7r 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
0050D7r 2               ;
0050D7r 2               ; Keyboard matrix:
0050D7r 2               ;                          	  $9121
0050D7r 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
0050D7r 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
0050D7r 2               ;               ASCII   ??  ??  45  48  56  54  52  50
0050D7r 2               ;                 VIC   07  06  05  04  03  02  01  00
0050D7r 2               ;
0050D7r 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
0050D7r 2               ;               ASCII   ??  ??  64  79  85  84  69  81
0050D7r 2               ;                 VIC   17  16  15  14  13  12  11  10
0050D7r 2               ;
0050D7r 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
0050D7r 2               ;               ASCII   ??  61  58  75  72  70  83  ??
0050D7r 2               ;                 VIC   27  26  25  24  23  22  21  20
0050D7r 2               ;
0050D7r 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
0050D7r 2               ;               ASCII   ??  ??  46  77  66  67  90  32
0050D7r 2               ;                 VIC   37  36  35  34  33  32  31  30
0050D7r 2               ;
0050D7r 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
0050D7r 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
0050D7r 2               ;                 VIC   47  46  45  44  43  42  41  40
0050D7r 2               ;
0050D7r 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
0050D7r 2               ;               ASCII   ??  59  76  74  71  68  65  ??
0050D7r 2               ;                 VIC   57  56  55  54  53  52  51  50
0050D7r 2               ;
0050D7r 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
0050D7r 2               ;               ASCII   13  42  80  73  89  82  87
0050D7r 2               ;                 VIC   67  66  65  64  63  62  61  60
0050D7r 2               ;
0050D7r 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
0050D7r 2               ;               ASCII   08  ??  43  57  55  53  51  49
0050D7r 2               ;                 VIC   77  76  75  74  73  72  71  70
0050D7r 2               ;
0050D7r 2               ;	 P =$65,O=$14,A=$51,Q=$10
0050D7r 2               ;	SPC=$30,N=$44,M=$34
0050D7r 2               ;	 1 =$70,2=$00,3=$71,4=$01
0050D7r 2               ;
0050D7r 2               ; Joysticks:
0050D7r 2               ;
0050D7r 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
0050D7r 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
0050D7r 2               ;	$9120	Right -     -     -     -     -     -     -
0050D7r 2               ;
0050D7r 2               ;	$9122	DDRB = Data Direction Register port $9120
0050D7r 2               ;               0 = input, 1 = output
0050D7r 2               ;		Bit7 should be 0 to read joystick $9120
0050D7r 2               ;
0050D7r 2               ; Video registers:
0050D7r 2               ;
0050D7r 2               ;	$9000	horizontal centering
0050D7r 2               ;		bits 0-6 horizontal centering
0050D7r 2               ;		bit  7 sets interlace scan
0050D7r 2               ;	$9001	vertical centering
0050D7r 2               ;	$9002	set # of columns
0050D7r 2               ;		bits 0-6 set # of columns
0050D7r 2               ;		bit 7 is part of video matrix address
0050D7r 2               ;	$9003	set # of rows
0050D7r 2               ;		bit 0 sets 8x8 or 16x8 chars
0050D7r 2               ;		bits 1-6 set # of rows
0050D7r 2               ;	$9004	TV raster beam line
0050D7r 2               ;	$9005	start of character memory
0050D7r 2               ;		bits 0-3 start of character memory (default = 0)
0050D7r 2               ;		bits 4-7 is rest of video address (default= F)
0050D7r 2               ;		BITS 3,2,1,0 CM startinq address
0050D7r 2               ;			     HEX   DEC
0050D7r 2               ;		0000   ROM   8000  32768
0050D7r 2               ;		0001	     8400  33792
0050D7r 2               ;		0010	     8800  34816
0050D7r 2               ;		0011	     8C00  35840
0050D7r 2               ;		1000   RAM   0000  0000
0050D7r 2               ;		1001  xxxx
0050D7r 2               ;		1010  xxxx   unavail.
0050D7r 2               ;		1011  xxxx
0050D7r 2               ;		1100	     1000  4096
0050D7r 2               ;		1101	     1400  5120
0050D7r 2               ;		1110	     1800  6144
0050D7r 2               ;		1111	     1C00  7168
0050D7r 2               ;
0050D7r 2               ; Sound registers:
0050D7r 2               ;
0050D7r 2               ;	$900a	Frequency for oscillator 1 (low)
0050D7r 2               ;		(on: 128-255)
0050D7r 2               ;	$900b	Frequency for oscillator 2 (medium)
0050D7r 2               ;		(on: 128-255)
0050D7r 2               ;	$900c	Frequency for oscillator 3 (high)
0050D7r 2               ;		(on: 128-255)
0050D7r 2               ;	$900d	Frequency of noise source
0050D7r 2               ;	$900e	bit 0-3 sets volume of all sound
0050D7r 2               ;		bits 4-7 are auxiliary color information
0050D7r 2               ;	$900f	Screen and border color register
0050D7r 2               ;		bits 4-7 select background color
0050D7r 2               ;		bits 0-2 select border color
0050D7r 2               ;		bit 3 selects inverted or normal mode
0050D7r 2               ;
0050D7r 2               ; I/O:
0050D7r 2               ;	VIA1 -VIA2
0050D7r 2               ;-----------------------------------------------------------
0050D7r 2               ;	$9110,$9120 	Port B output register
0050D7r 2               ;	$9111,$9121 	Port A output register
0050D7r 2               ;			(PA0) Bit 0=Serial CLK IN
0050D7r 2               ;			(PA1) Bit 1=Serial DATA IN
0050D7r 2               ;			(PA2) Bit 2=Joy 0
0050D7r 2               ;			(PA3) Bit 3=Joy 1
0050D7r 2               ;			(PA4) Bit 4=Joy 2
0050D7r 2               ;			(PA5) Bit 5 = Lightpen/Fire button
0050D7r 2               ;			(PA6) Bit 6=Cassette switch sense
0050D7r 2               ;			(PA7) Bit 7=Serial ATN out
0050D7r 2               ;	$9112,$9122	Data direction register B
0050D7r 2               ;	$9113,$9123	Data direction register A
0050D7r 2               ;	$9114,$9124	Timer 1 low byte
0050D7r 2               ;	$9115,$9125	Timer 1 high byte & counter
0050D7r 2               ;	$9116,$9126	Timer 1 low byte
0050D7r 2               ;	$9117,$9127	Timer 1 high byte
0050D7r 2               ;	$9118,$9128	Timer 2 low byte
0050D7r 2               ;	$9119,$9129	Timer 2 high byte
0050D7r 2               ;	$911A,$912A	Shift register
0050D7r 2               ;	$911B,$912B	Auxiliary control register
0050D7r 2               ;	$911C,$912C	Peripheral control register
0050D7r 2               ;			(CA1, CA2, CB1, CB2)
0050D7r 2               ;			CA1 = restore key (Bit 0)
0050D7r 2               ;			CA2 = cassette motor control (Bits 1-3)
0050D7r 2               ;			CB1 = interrupt signal for received
0050D7r 2               ;			RS-232 data (Bit 4)
0050D7r 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
0050D7r 2               ;	$911D,$912D	Interrupt flag register
0050D7r 2               ;	$911E,$912E	Interrupt enable register
0050D7r 2               ;	$911F,$912F	Port A (Sense cassette switch)
0050D7r 2               
0050D7r 2               ; VIC constants
0050D7r 2               
0050D7r 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
0050D7r 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
0050D7r 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
0050D7r 2               
0050D7r 2               ; VIC variables:
0050D7r 2               
0050D7r 2  00           	fontcol:	.byte 0		; Frontcolour text
0050D8r 2  00           	mode:		.byte 0		; 0=MPAGD, 1=MiniPaint
0050D9r 2               .if modelflag				; Set crtflag to identify machine, NTSC or PAL
0050D9r 2               	crtflag:	.byte 1		; PAL
0050D9r 2               .else
0050D9r 2  00           	crtflag:	.byte 0		; NTSC
0050DAr 2               .endif
0050DAr 2               
0050DAr 2               ; Addresses
0050DAr 2               
0050DAr 2               	ScreenAddr	= $0200		; VIDEO RAM
0050DAr 2               	MapAddr		= $0400		; RAM
0050DAr 2               	CharAddress	= $1000		; CHAR RAM
0050DAr 2               	Reg0		= $9000		; Horizontal centering
0050DAr 2               	Reg1		= $9001		; Vertical centering
0050DAr 2               	Reg2		= $9002		; Set # of columns
0050DAr 2               	Reg3		= $9003		; Set # of rows
0050DAr 2               	Reg4		= $9004		; Vsync signal
0050DAr 2               	Reg5		= $9005		; Start of character memory
0050DAr 2               	RegA		= $900a		; Colour and auxcolour register
0050DAr 2               	RegB		= $900b		; Colour and auxcolour register
0050DAr 2               	RegC		= $900c		; Colour and auxcolour register
0050DAr 2               	RegD		= $900d		; Colour and auxcolour register
0050DAr 2               	RegE		= $900e		; Colour and auxcolour register
0050DAr 2               	RegF		= $900f		; Screen and border color register
0050DAr 2               
0050DAr 2               	JoyAddr1	= $9111		; Joystick address 1
0050DAr 2               	Timer11_Low  	= $9114		; Timer 1 low byte
0050DAr 2               	Timer11_High 	= $9115		; Timer 1 high byte
0050DAr 2               	Timer12_Low  	= $9118		; Timer 2 low byte
0050DAr 2               	Timer12_High 	= $9119		; Timer 2 high byte
0050DAr 2               	AUX1		= $911b		; Auxiliary control register
0050DAr 2               	IFR1		= $911d		; Interrupt Flag Register
0050DAr 2               	IER1		= $911e		; Interrupt Enable Register
0050DAr 2               
0050DAr 2               	KeyColAddr	= $9120		; Keyboard column (write)
0050DAr 2               	JoyAddr2	= $9120		; Joystick address 2
0050DAr 2               	KeyRowAddr	= $9121		; Keyboard row (read)
0050DAr 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
0050DAr 2               	Timer21_Low  	= $9124		; Timer 1 low byte
0050DAr 2               	Timer21_High 	= $9125		; Timer 1 high byte
0050DAr 2               	AUX2		= $912b		; Auxiliary control register
0050DAr 2               	IFR2		= $912d		; Interrupt Flag Register
0050DAr 2               	IER2		= $912e		; Interrupt Enable Register
0050DAr 2               
0050DAr 2               	ColorAttr	= $9600		; Color attributes
0050DAr 2               	HiRAM		= $a000		; Hi RAM 8kB
0050DAr 2               
0050DAr 2               ;----------------------------------------------------------------------
0050DAr 2               ; VIC20 video hardware fns
0050DAr 2               ;----------------------------------------------------------------------
0050DAr 2               
0050DAr 2               init:
0050DAr 2               
0050DAr 2  A9 00        	lda #0
0050DCr 2  8D rr rr     	sta crtflag
0050DFr 2  AD E4 ED     	lda $ede4
0050E2r 2  C9 05        	cmp #5
0050E4r 2  F0 05        	beq Ntsc_System
0050E6r 2  A9 01        	lda #1
0050E8r 2  8D rr rr     	sta crtflag
0050EBr 2               Ntsc_System:
0050EBr 2               
0050EBr 2               ; Disable interrupts
0050EBr 2               
0050EBr 2  A9 7F        	lda #$7f
0050EDr 2  8D 1E 91     	sta IER1
0050F0r 2  8D 2D 91     	sta IFR2
0050F3r 2  8D 2E 91     	sta IER2
0050F6r 2               
0050F6r 2               ; Set audio volume and flag to 0 to check when disabling
0050F6r 2               ; beep and crash
0050F6r 2               
0050F6r 2  A9 00        	lda #0
0050F8r 2  8D 0A 90     	sta RegA
0050FBr 2  8D 0B 90     	sta RegB
0050FEr 2  8D 0C 90     	sta RegC
005101r 2  8D 0D 90     	sta RegD
005104r 2  A9 00        	lda #$00
005106r 2  85 rr        	sta SOUNDS_STATUS
005108r 2               
005108r 2  AD 0E 90     	lda RegE
00510Br 2  09 0F        	ora #$0f		; Set volume max
00510Dr 2  8D 0E 90     	sta RegE
005110r 2               
005110r 2               ; Init screen for NTSC
005110r 2               ; this sets the background and border color of the screen
005110r 2               ; in this case border black and background black
005110r 2               
005110r 2  A9 18        	lda #%00011000
005112r 2  8D 0F 90     	sta RegF
005115r 2               
005115r 2               ; Reset fontcolor
005115r 2  A9 00        	lda #0		; Black
005117r 2  8D rr rr     	sta fontcol
00511Ar 2               
00511Ar 2               
00511Ar 2  A9 00        	lda #0		; Mode 0 = MPAGD
00511Cr 2  20 rr rr     	jsr SetReg
00511Fr 2               
00511Fr 2               ; Init screencharacters
00511Fr 2               ; Fill screen with characters from left to right, up to down
00511Fr 2               
00511Fr 2  A2 00        	ldx #0
005121r 2  A0 00        	ldy #0
005123r 2               scrinit:
005123r 2  8A           	txa
005124r 2  9D 00 02     	sta ScreenAddr,x
005127r 2  98           	tya
005128r 2  9D 00 96     	sta ColorAttr,x
00512Br 2  E8           	inx
00512Cr 2  E0 F2        	cpx#242
00512Er 2  D0 F3        	bne scrinit
005130r 2               
005130r 2               ; Reset fontcolor
005130r 2               
005130r 2  A9 00        	lda #0			; Black
005132r 2  8D rr rr     	sta fontcol
005135r 2               
005135r 2               ; Init music
005135r 2               
005135r 2               ;	jsr initmusic
005135r 2               
005135r 2               ; Init VIA1 timer11 for timeout 1/25 sec
005135r 2               
005135r 2  A9 E0        	lda #$e0		; T1 continuous
005137r 2  8D 1B 91     	sta AUX1
00513Ar 2  A9 7F        	lda #$7f		; No int
00513Cr 2  8D 1E 91     	sta IER1
00513Fr 2  A9 00        	lda #0
005141r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
005144r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
005146r 2  8D 14 91     	sta Timer11_Low
005149r 2  A9 4E        	lda #>timervalue
00514Br 2  8D 15 91     	sta Timer11_High
00514Er 2               
00514Er 2               ; Pre-shifted byte tables if parameter 'r' given
00514Er 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
00514Er 2               ; The bits are shifted to the right and overflow bits are
00514Er 2               ; inserted to the left. So 1 byte contains a left and right part
00514Er 2               
00514Er 2               .if rflag
00514Er 2               shift0 = HiRAM
00514Er 2               shift2 = HiRAM+256
00514Er 2               shift4 = HiRAM+512
00514Er 2               shift6 = HiRAM+768
00514Er 2               
00514Er 2               ; Pre-shifted table 0 pixels
00514Er 2               
00514Er 2  A2 00        	ldx #0
005150r 2               shf0:
005150r 2  8A           	txa
005151r 2  9D 00 A0     	sta shift0,x
005154r 2  E8           	inx
005155r 2  D0 F9        	bne shf0
005157r 2               
005157r 2               ; Pre-shifted table 2 pixels
005157r 2               
005157r 2  A2 00        	ldx #0
005159r 2               shf2:
005159r 2  A0 02        	ldy #2
00515Br 2  8A           	txa
00515Cr 2               shf2loop:
00515Cr 2  4A           	lsr a
00515Dr 2  90 02        	bcc :+
00515Fr 2  09 80        	ora #$80
005161r 2               :
005161r 2  88           	dey
005162r 2  D0 F8        	bne shf2loop
005164r 2  9D 00 A1     	sta shift2,x
005167r 2  E8           	inx
005168r 2  D0 EF        	bne shf2
00516Ar 2               
00516Ar 2               ; Pre-shifted table 4 pixels
00516Ar 2               
00516Ar 2  A2 00        	ldx #0
00516Cr 2               shf4:
00516Cr 2  A0 04        	ldy #4
00516Er 2  8A           	txa
00516Fr 2               shf4loop:
00516Fr 2  4A           	lsr a
005170r 2  90 02        	bcc :+
005172r 2  09 80        	ora #$80
005174r 2               :
005174r 2  88           	dey
005175r 2  D0 F8        	bne shf4loop
005177r 2  9D 00 A2     	sta shift4,x
00517Ar 2  E8           	inx
00517Br 2  D0 EF        	bne shf4
00517Dr 2               
00517Dr 2               ; Pre-shifted table 6 pixels
00517Dr 2               
00517Dr 2  A2 00        	ldx #0
00517Fr 2               shf6:
00517Fr 2  A0 06        	ldy #6
005181r 2  8A           	txa
005182r 2               shf6loop:
005182r 2  4A           	lsr a
005183r 2  90 02        	bcc :+
005185r 2  09 80        	ora #$80
005187r 2               :
005187r 2  88           	dey
005188r 2  D0 F8        	bne shf6loop
00518Ar 2  9D 00 A3     	sta shift6,x
00518Dr 2  E8           	inx
00518Er 2  D0 EF        	bne shf6
005190r 2               .endif
005190r 2               
005190r 2  60           	rts
005191r 2               
005191r 2               ;========================================================
005191r 2               ; KEY AND JOYSTICK ROUTINES
005191r 2               ;--------------------------------------------------------
005191r 2               ; Keys
005191r 2               ;
005191r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
005191r 2               ;             ||||||||
005191r 2               ;             |||||||+> Right    KEY 0  - X
005191r 2               ;             ||||||+-> Left     KEY 1  - Z
005191r 2               ;             |||||+--> Down     KEY 2  - .
005191r 2               ;             ||||+---> Up       KEY 3  - ;
005191r 2               ;             |||+----> Fire1    KEY 4  - SPC
005191r 2               ;             ||+-----> Fire2    KEY 5  - Q
005191r 2               ;             |+------> Fire3    KEY 6  - P
005191r 2               ;             +-------> Not used
005191r 2               ;
005191r 2               ;                       Option1  KEY 7  - 1
005191r 2               ;                       Option2  KEY 8  - 2
005191r 2               ;                       Option3  KEY 9  - 3
005191r 2               ;                       Option4  KEY 10 - 4
005191r 2               ;--------------------------------------------------------
005191r 2               
005191r 2               ;----------------------------------------------------
005191r 2               ; Interrupt service
005191r 2               ;----------------------------------------------------
005191r 2               
005191r 2               intserv:
005191r 2  EE 01 96     	inc $9601	; scroll colour char topleft
005194r 2  68           	pla
005195r 2  A8           	tay
005196r 2  68           	pla
005197r 2  AA           	tax
005198r 2  68           	pla
005199r 2  40           	rti
00519Ar 2               
00519Ar 2               ;--------------------------------------------------------
00519Ar 2               ; PRSKEY
00519Ar 2               ;
00519Ar 2               ; Wait for keypress.
00519Ar 2               ;--------------------------------------------------------
00519Ar 2               
00519Ar 2               prskey:
00519Ar 2  98           	tya
00519Br 2  48           	pha
00519Cr 2               prsloop:
00519Cr 2  20 rr rr     	jsr vsync
00519Fr 2  20 rr rr     	jsr joykey
0051A2r 2  09 80        	ora #$80
0051A4r 2  C9 FF        	cmp #$ff
0051A6r 2  D0 07        	bne :+
0051A8r 2  20 rr rr     	jsr readkey
0051ABr 2  C9 FF        	cmp #255
0051ADr 2  F0 ED        	beq prsloop		; wait until key pressed
0051AFr 2               :
0051AFr 2               prsrelease:
0051AFr 2  20 rr rr     	jsr vsync
0051B2r 2  20 rr rr     	jsr joykey
0051B5r 2  09 80        	ora #$80
0051B7r 2  C9 FF        	cmp #$ff
0051B9r 2  F0 07        	beq :+
0051BBr 2  20 rr rr     	jsr readkey
0051BEr 2  C9 FF        	cmp #255
0051C0r 2  D0 ED        	bne prsrelease		; wait until key released
0051C2r 2               :
0051C2r 2  68           	pla
0051C3r 2  A8           	tay
0051C4r 2  60           	rts
0051C5r 2               
0051C5r 2               ;--------------------------------------------------------
0051C5r 2               ; KTEST
0051C5r 2               ;
0051C5r 2               ; Keyboard test routine with key in A.
0051C5r 2               ; Scan key and clear carry if key pressed
0051C5r 2               ;--------------------------------------------------------
0051C5r 2               
0051C5r 2               ktest:
0051C5r 2  85 rr        	sta z80_a		; save key
0051C7r 2               
0051C7r 2  4A           	lsr a
0051C8r 2  4A           	lsr a
0051C9r 2  4A           	lsr a
0051CAr 2  4A           	lsr a
0051CBr 2  AA           	tax
0051CCr 2  BD rr rr     	lda colmask,x
0051CFr 2  8D 20 91     	sta KeyColAddr		; set row
0051D2r 2               
0051D2r 2  A5 rr        	lda z80_a
0051D4r 2  29 0F        	and #$0f
0051D6r 2  AA           	tax			; get column
0051D7r 2               
0051D7r 2  AD 21 91     	lda KeyRowAddr		; read column
0051DAr 2  3D rr rr     	and keymask,x		; check if key pressed
0051DDr 2  F0 02        	beq pressed		; Skip if pressed
0051DFr 2  38           	sec			; key not pressed
0051E0r 2  60           	rts
0051E1r 2               pressed:
0051E1r 2  18           	clc			; key pressed
0051E2r 2  60           	rts
0051E3r 2               
0051E3r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
0051E7r 2  F7 FB FD FE  
0051EBr 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
0051EFr 2  10 20 40 80  
0051F3r 2               
0051F3r 2               ;---------------------------------------------------------------
0051F3r 2               ; KGET
0051F3r 2               ;
0051F3r 2               ; Read keyboard matrix if a key is pressed.
0051F3r 2               ; Return A = high nibble=row and low nibble=col
0051F3r 2               ;---------------------------------------------------------------
0051F3r 2               
0051F3r 2               kget:
0051F3r 2  86 rr        	stx xtmp		; Save x-reg
0051F5r 2               kget0:
0051F5r 2  A2 00        	ldx #0			; reset row
0051F7r 2               kget1:
0051F7r 2  BD rr rr     	lda colmask,x		; Get mask
0051FAr 2  8D 20 91     	sta KeyColAddr		; Set row
0051FDr 2  AD 21 91     	lda KeyRowAddr		; Read columns
005200r 2  85 rr        	sta tmp			; Save colums
005202r 2  C9 FF        	cmp #$ff		; Key pressed?
005204r 2  D0 08        	bne kget2		; Yes, skip
005206r 2  E8           	inx			; Next row
005207r 2  E0 08        	cpx #8			; All rows scanned?
005209r 2  D0 EC        	bne kget1		; No, repeat
00520Br 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
00520Er 2               kget2:
00520Er 2  A0 00        	ldy #0			; Reset column
005210r 2               kget3:
005210r 2  46 rr        	lsr tmp			; Test bit
005212r 2  90 04        	bcc kget4		; If clear, key pressed
005214r 2  C8           	iny			; Next column
005215r 2  4C rr rr     	jmp kget3		; Repeat
005218r 2               kget4:
005218r 2  86 rr        	stx tmp			; Get row
00521Ar 2  06 rr        	asl tmp			; Make high nibble
00521Cr 2  06 rr        	asl tmp
00521Er 2  06 rr        	asl tmp
005220r 2  06 rr        	asl tmp
005222r 2  98           	tya			; Get column
005223r 2  18           	clc
005224r 2  65 rr        	adc tmp			; Add row as low nibble
005226r 2  85 rr        	sta tmp
005228r 2               kget5:
005228r 2  AD 21 91     	lda KeyRowAddr		; Read columns
00522Br 2  C9 FF        	cmp #$ff
00522Dr 2  D0 F9        	bne kget5
00522Fr 2               
00522Fr 2  A5 rr        	lda tmp			; Return keycode
005231r 2  A6 rr        	ldx xtmp		; Restore X-reg
005233r 2  60           	rts			; Return
005234r 2               
005234r 2               ;-------------------------------------------------------------
005234r 2               ; READKEY
005234r 2               ;
005234r 2               ; Check keyboard matrix if a key is pressed
005234r 2               ; Return keymask in Y
005234r 2               ;-------------------------------------------------------------
005234r 2               
005234r 2               readkey:
005234r 2  A9 FF        	lda #$ff		; Keymask
005236r 2  85 rr        	sta tmp
005238r 2  A2 07        	ldx #7
00523Ar 2               scanrow:
00523Ar 2  BD rr rr     	lda colmask,x
00523Dr 2  8D 20 91     	sta KeyColAddr		; set row
005240r 2  AD 21 91     	lda KeyRowAddr		; read column
005243r 2  25 rr        	and tmp			; Reset bit is key pressed
005245r 2  85 rr        	sta tmp
005247r 2  CA           	dex
005248r 2  10 F0        	bpl scanrow
00524Ar 2  A5 rr        	lda tmp
00524Cr 2  A8           	tay
00524Dr 2  60           	rts
00524Er 2               
00524Er 2               ;-------------------------------------------------------------
00524Er 2               ; JOY1SCAN
00524Er 2               ;
00524Er 2               ; Initializes joystick
00524Er 2               ;-------------------------------------------------------------
00524Er 2               
00524Er 2               joyinit:
00524Er 2  60           	rts
00524Fr 2               
00524Fr 2               ;-------------------------------------------------------------
00524Fr 2               ; JOY1SCAN
00524Fr 2               ;
00524Fr 2               ; Scan joystick1 and return key in z80_e
00524Fr 2               ; Up, down, left, right and fire are read from the joystick
00524Fr 2               ; Fire2 and fire3 are read from the keyboard
00524Fr 2               ;-------------------------------------------------------------
00524Fr 2               
00524Fr 2               joy1scan:
00524Fr 2  A9 FF        	lda #$ff
005251r 2  85 rr        	sta z80_e
005253r 2               
005253r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
005256r 2  4A           	lsr a
005257r 2  4A           	lsr a
005258r 2               
005258r 2  4A           	lsr a
005259r 2  26 rr        	rol z80_e		; Up
00525Br 2  4A           	lsr a
00525Cr 2  26 rr        	rol z80_e		; Down
00525Er 2  4A           	lsr a
00525Fr 2  26 rr        	rol z80_e		; Left
005261r 2               
005261r 2  A9 7F        	lda #%01111111
005263r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
005266r 2  AD 20 91     	lda JoyAddr2
005269r 2  0A           	asl a
00526Ar 2  26 rr        	rol z80_e		; Right
00526Cr 2  A9 FF        	lda #%11111111
00526Er 2  8D 22 91     	sta DDRB		; Reset
005271r 2               
005271r 2  AD 11 91     	lda JoyAddr1
005274r 2  29 20        	and #%00100000
005276r 2  D0 06        	bne :+
005278r 2  A5 rr        	lda z80_e
00527Ar 2  29 EF        	and #%11101111		; Fire
00527Cr 2  85 rr        	sta z80_e
00527Er 2               :
00527Er 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
005281r 2  20 rr rr     	jsr ktest
005284r 2  B0 06        	bcs :+
005286r 2  A5 rr        	lda z80_e
005288r 2  29 BF        	and #%10111111
00528Ar 2  85 rr        	sta z80_e
00528Cr 2               :
00528Cr 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
00528Fr 2  20 rr rr     	jsr ktest
005292r 2  B0 06        	bcs :+
005294r 2  A5 rr        	lda z80_e
005296r 2  29 DF        	and #%11011111
005298r 2  85 rr        	sta z80_e
00529Ar 2               :
00529Ar 2  60           	rts
00529Br 2               
00529Br 2               ;-------------------------------------------------------------
00529Br 2               ; JOY2SCAN
00529Br 2               ;
00529Br 2               ; TODO, Scan joystick2 and return key in z80_e
00529Br 2               ;-------------------------------------------------------------
00529Br 2               
00529Br 2               joy2scan:
00529Br 2  60           	rts
00529Cr 2               
00529Cr 2               
00529Cr 2               
00529Cr 2               ;========================================================
00529Cr 2               ; HARDWARE DEPENDING ROUTINES
00529Cr 2               ;========================================================
00529Cr 2               
00529Cr 2               ;----------------------------------------------------
00529Cr 2               ; DELAY
00529Cr 2               ;
00529Cr 2               ; Delay routine A * 1/50 sec
00529Cr 2               ;----------------------------------------------------
00529Cr 2               
00529Cr 2               delay:
00529Cr 2  85 rr        	sta xtmp		; set delaycounter
00529Er 2               del_loop:
00529Er 2  AD 04 90     	lda Reg4
0052A1r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
0052A3r 2               
0052A3r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
0052A5r 2               delay1:
0052A5r 2  61 80        	adc ($80,x)		;	 6 usec
0052A7r 2  61 80        	adc ($80,x)		;	 6 usec
0052A9r 2  88           	dey			;	 2 usec
0052AAr 2  D0 F9        	bne delay1		;	 2 usec
0052ACr 2  EA           	nop			; 2 usec
0052ADr 2  EA           	nop			; 2 usec
0052AEr 2               				; tot: 20000 usec
0052AEr 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
0052B0r 2  D0 EC        	bne del_loop
0052B2r 2  60           	rts
0052B3r 2               
0052B3r 2               ;-------------------------------------------------------------
0052B3r 2               ; VSYNC
0052B3r 2               ;
0052B3r 2               ; - read joystick/keyboard
0052B3r 2               ; - sync framerate with timer 25Hz
0052B3r 2               ; - handle shrapnel every even frame
0052B3r 2               ; - handle sound
0052B3r 2               ;-------------------------------------------------------------
0052B3r 2               
0052B3r 2               vsync:
0052B3r 2  48           	pha			; save registers
0052B4r 2  98           	tya
0052B5r 2  48           	pha
0052B6r 2  8A           	txa
0052B7r 2  48           	pha
0052B8r 2               
0052B8r 2               ;-------------------------------------------------------------
0052B8r 2               ; Read joystick/keyboard.
0052B8r 2               ;-------------------------------------------------------------
0052B8r 2               
0052B8r 2  20 rr rr     	jsr joykey
0052BBr 2               
0052BBr 2               ;-------------------------------------------------------------
0052BBr 2               ; Sync framerate with timer 25Hz
0052BBr 2               ;-------------------------------------------------------------
0052BBr 2               
0052BBr 2  A9 40        	lda #$40		; set Timer1 expired bit
0052BDr 2               vsync1:
0052BDr 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
0052C0r 2  F0 FB        	beq vsync1		; wait if timer not expired
0052C2r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
0052C5r 2               
0052C5r 2               rasterwait:
0052C5r 2  AD 04 90     	lda Reg4
0052C8r 2  D0 FB        	bne rasterwait
0052CAr 2               
0052CAr 2               ;-------------------------------------------------------------
0052CAr 2               ; Handle sound command
0052CAr 2               ;-------------------------------------------------------------
0052CAr 2               
0052CAr 2  20 rr rr     	jsr make_sound2
0052CDr 2               
0052CDr 2               ;-------------------------------------------------------------
0052CDr 2               ; Handle shrapnel every even frame
0052CDr 2               ;-------------------------------------------------------------
0052CDr 2               
0052CDr 2  A5 rr        	lda clock		; get clock
0052CFr 2  29 01        	and #1			; 2 frames expired
0052D1r 2  D0 03        	bne:+
0052D3r 2  20 rr rr     	jsr proshr		; process shrapnel
0052D6r 2               :
0052D6r 2               
0052D6r 2               ;-------------------------------------------------------------
0052D6r 2               ; Handle sound BEEP and CRASH
0052D6r 2               ;-------------------------------------------------------------
0052D6r 2               
0052D6r 2  AD rr rr     	lda sndtyp
0052D9r 2  F0 4E        	beq sndskip
0052DBr 2               
0052DBr 2               sndloop:
0052DBr 2  AC rr rr     	ldy sndtyp
0052DEr 2               sndwait:
0052DEr 2  88           	dey
0052DFr 2  D0 FD        	bne sndwait
0052E1r 2               
0052E1r 2  AD rr rr     	lda sndtyp
0052E4r 2  30 1E        	bmi crashaudio
0052E6r 2               
0052E6r 2               ; BEEP command:
0052E6r 2               ; enable sound on channel 2
0052E6r 2               ; range 0-127
0052E6r 2               
0052E6r 2               beepaudio:
0052E6r 2  AD 0E 90     	lda RegE
0052E9r 2  09 0F        	ora #$0f
0052EBr 2  8D 0E 90     	sta RegE
0052EEr 2               
0052EEr 2  A5 rr        	lda SOUNDS_STATUS
0052F0r 2  09 40        	ora #%01000000
0052F2r 2  85 rr        	sta SOUNDS_STATUS
0052F4r 2  A9 FF        	lda #$ff
0052F6r 2  38           	sec
0052F7r 2  ED rr rr     	sbc sndtyp
0052FAr 2  4A           	lsr
0052FBr 2  4A           	lsr
0052FCr 2  09 C0        	ora #%11000000
0052FEr 2  8D 0C 90     	sta RegC
005301r 2  4C rr rr     	jmp endaudiotype
005304r 2               
005304r 2               ; CRASH command:
005304r 2               ; enable sound on channel 3
005304r 2               ; range 128-255
005304r 2               
005304r 2               crashaudio:
005304r 2  AD 0E 90     	lda RegE
005307r 2  09 0F        	ora #$0f
005309r 2  8D 0E 90     	sta RegE
00530Cr 2  A5 rr        	lda SOUNDS_STATUS
00530Er 2  09 80        	ora #%10000000
005310r 2  85 rr        	sta SOUNDS_STATUS
005312r 2  A9 FF        	lda #$ff
005314r 2  38           	sec
005315r 2  ED rr rr     	sbc sndtyp
005318r 2  09 80        	ora #%10000000
00531Ar 2  8D 0D 90     	sta RegD
00531Dr 2               
00531Dr 2               endaudiotype:
00531Dr 2  CE rr rr     	dec sndtyp
005320r 2  F0 07        	beq sndskip
005322r 2  C9 80        	cmp #128
005324r 2  F0 03        	beq sndskip
005326r 2  4C rr rr     	jmp sndloop
005329r 2               
005329r 2               ; disable sound
005329r 2               
005329r 2               sndskip:
005329r 2  24 rr        	bit SOUNDS_STATUS
00532Br 2  50 0B        	bvc :+
00532Dr 2  A5 rr        	lda SOUNDS_STATUS
00532Fr 2  29 BF        	and #%10111111
005331r 2  85 rr        	sta SOUNDS_STATUS
005333r 2  A9 00        	lda #$00
005335r 2  8D 0C 90     	sta RegC
005338r 2               :
005338r 2  24 rr        	bit SOUNDS_STATUS
00533Ar 2  10 0B        	bpl :+
00533Cr 2               
00533Cr 2  A5 rr        	lda SOUNDS_STATUS
00533Er 2  29 7F        	and #%01111111
005340r 2  85 rr        	sta SOUNDS_STATUS
005342r 2  A9 00        	lda #$00
005344r 2  8D 0D 90     	sta RegD
005347r 2               :
005347r 2  68           	pla
005348r 2  AA           	tax
005349r 2  68           	pla
00534Ar 2  A8           	tay
00534Br 2  68           	pla
00534Cr 2  60           	rts
00534Dr 2               
00534Dr 2  00           sndtyp:		.byte 0		; Beep sound parameter
00534Er 2               
00534Er 2               ;========================================================
00534Er 2               ; SPRITE HANDLING ROUTINES
00534Er 2               ;========================================================
00534Er 2               
00534Er 2               ;----------------------------------------------------
00534Er 2               ; SPRITE
00534Er 2               ;
00534Er 2               ; Draw object sprite
00534Er 2               ;----------------------------------------------------
00534Er 2               
00534Er 2               .if oflag
00534Er 2               sprite:
00534Er 2               	stx xtmp		; Save X-reg
00534Er 2               	jsr scadd 		; get screen address in scraddr.
00534Er 2               
00534Er 2               	lda dispx 		; x position.
00534Er 2               	and #7 			; position straddling cells.
00534Er 2               	sta z80_b		; store in b register.
00534Er 2               
00534Er 2               	lda z80_l		; store sprite graphic address.
00534Er 2               	sta sprit1+1
00534Er 2               	sta sprit2+1
00534Er 2               	lda z80_h
00534Er 2               	sta sprit1+2
00534Er 2               	sta sprit2+2
00534Er 2               
00534Er 2               	ldx #0			; pixel height.
00534Er 2               	ldy #0
00534Er 2               sprit1:
00534Er 2               	lda objdta,x		; fetch first byte.
00534Er 2               	sta spr
00534Er 2               	inx
00534Er 2               sprit2:
00534Er 2               	lda objdta,x
00534Er 2               	sta spr+1
00534Er 2               
00534Er 2               	lda #0
00534Er 2               	sta spr+2
00534Er 2               	jsr sprit7		; shift sprite
00534Er 2               
00534Er 2               	lda spr			; fetch graphic.
00534Er 2               	ldy #0			; _BEEB
00534Er 2               	eor (scraddr),y		; merge with screen image.
00534Er 2               	sta (scraddr),y		; write to screen.
00534Er 2               
00534Er 2               	lda spr+1		; fetch graphic.
00534Er 2               	ldy #16			; _BEEB
00534Er 2               	eor (scraddr),y		; merge with screen image.
00534Er 2               	sta (scraddr),y		; write to screen.
00534Er 2               
00534Er 2               	lda spr+2		; fetch graphic.
00534Er 2               	ldy #32			; _BEEB
00534Er 2               	eor (scraddr),y		; merge with screen image.
00534Er 2               	sta (scraddr),y		; write to screen.
00534Er 2               
00534Er 2               	jsr nline
00534Er 2               
00534Er 2               	inx			; next source byte.
00534Er 2               	cpx #32
00534Er 2               	bne sprit1		; repeat
00534Er 2               
00534Er 2               	ldx xtmp		; retreive X-reg
00534Er 2               	rts
00534Er 2               
00534Er 2               .endif
00534Er 2               
00534Er 2               ;------------------------------------------------------------------
00534Er 2               ; SCADD
00534Er 2               ;
00534Er 2               ; This routine returns a screen address for X,Y in scraddr.
00534Er 2               ;------------------------------------------------------------------
00534Er 2               
00534Er 2               scadd:
00534Er 2  A5 rr        	lda dispx		; get x
005350r 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
005352r 2  85 rr        	sta scraddr		; set lb scraddr
005354r 2  A9 00        	lda #0
005356r 2  85 rr        	sta scraddr+1		; set hb scraddr
005358r 2  06 rr        	asl scraddr		; multiply X by 2
00535Ar 2  26 rr        	rol scraddr+1
00535Cr 2               
00535Cr 2               ; Add line address Y pos to X
00535Cr 2               
00535Cr 2  A6 rr        	ldx dispy		; get row address Y pos
00535Er 2  18           	clc
00535Fr 2  A5 rr        	lda scraddr
005361r 2  7D 00 07     	adc SCADTB_lb,x
005364r 2  85 rr        	sta scraddr
005366r 2  A5 rr        	lda scraddr+1
005368r 2  7D 00 08     	adc SCADTB_hb,x
00536Br 2  85 rr        	sta scraddr+1
00536Dr 2               
00536Dr 2  60           	rts
00536Er 2               
00536Er 2               ;------------------------------------------------------------------
00536Er 2               ; SSPRIA
00536Er 2               ;
00536Er 2               ; Erase single sprite, old (ix+0).
00536Er 2               ;------------------------------------------------------------------
00536Er 2               
00536Er 2               sspria:
00536Er 2  20 rr rr     	jsr gsprad		; get old sprite address.
005371r 2               sspri2:
005371r 2               .if rflag
005371r 2  A5 rr        	lda z80_e		; 3c
005373r 2  8D rr rr     	sta dline_spraddr1+1	; 4c
005376r 2  8D rr rr     	sta dline_spraddr2+1	; 4c
005379r 2  A5 rr        	lda z80_d		; 3c
00537Br 2  8D rr rr     	sta dline_spraddr1+2	; 4c
00537Er 2  8D rr rr     	sta dline_spraddr2+2	; 4c
005381r 2               
005381r 2  A6 rr        	ldx sprshft
005383r 2  BD rr rr     	lda shift_table,x
005386r 2  8D rr rr     	sta dline_shift1+1
005389r 2  8D rr rr     	sta dline_shift2+1
00538Cr 2  BD rr rr     	lda shift_table+1,x
00538Fr 2  8D rr rr     	sta dline_shift1+2
005392r 2  8D rr rr     	sta dline_shift2+2
005395r 2               
005395r 2  A2 00        	ldx #0			; byte counter.
005397r 2               sspri0:
005397r 2  20 rr rr     	jsr dline		; draw a line.
00539Ar 2                 .if bflag
00539Ar 2               	cpx #48			; big sprites have 24 bytes
00539Ar 2                 .else
00539Ar 2  E0 20        	cpx #32			; normal sprites have 32 bytes
00539Cr 2                 .endif
00539Cr 2  D0 F9        	bne sspri0		; repeat 16 times x 2 bytes
00539Er 2  60           	rts
00539Fr 2               .else
00539Fr 2                 .if bflag
00539Fr 2               	lda #24			; big sprites have 24 lines
00539Fr 2                 .else
00539Fr 2               	lda #16			; normal sprites have 16 lines.
00539Fr 2                 .endif
00539Fr 2               	sta acnt
00539Fr 2               sspri0:
00539Fr 2               	jsr dline		; draw a line.
00539Fr 2               	dec acnt
00539Fr 2               	bne sspri0		; repeat 16 times
00539Fr 2               	rts
00539Fr 2               
00539Fr 2               acnt:	.byte 0			; line counter
00539Fr 2               
00539Fr 2               .endif
00539Fr 2               
00539Fr 2               ;------------------------------------------------------------------
00539Fr 2               ; SSPRIB
00539Fr 2               ;
00539Fr 2               ; Display single sprite, new (ix+5).
00539Fr 2               ;------------------------------------------------------------------
00539Fr 2               
00539Fr 2               ssprib:
00539Fr 2  20 rr rr     	jsr gspran 		; get new sprite address.
0053A2r 2  4C rr rr     	jmp sspri2		; Display sprite
0053A5r 2               
0053A5r 2               ;------------------------------------------------------------------
0053A5r 2               ; SSPRIC
0053A5r 2               ;
0053A5r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
0053A5r 2               ;------------------------------------------------------------------
0053A5r 2               
0053A5r 2               sspric:
0053A5r 2  AD rr rr     	lda fontcol			; Background colour
0053A8r 2  85 rr        	sta z80_c
0053AAr 2  20 rr rr     	jsr cspr_old
0053ADr 2               
0053ADr 2  A0 11        	ldy #17
0053AFr 2  B1 rr        	lda (z80_ix),y
0053B1r 2  85 rr        	sta z80_c
0053B3r 2  20 rr rr     	jsr cspr_new
0053B6r 2               
0053B6r 2               .if rflag
0053B6r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
0053B9r 2               
0053B9r 2  A5 rr        	lda z80_e		; 3c
0053BBr 2  8D rr rr     	sta ddline_spraddr3+1	; 4c
0053BEr 2  8D rr rr     	sta ddline_spraddr4+1	; 4c
0053C1r 2               
0053C1r 2  A5 rr        	lda z80_d		; 3c
0053C3r 2  8D rr rr     	sta ddline_spraddr3+2	; 4c
0053C6r 2  8D rr rr     	sta ddline_spraddr4+2	; 4c
0053C9r 2               
0053C9r 2  A6 rr        	ldx sprshft		; set spriteshift table addresses
0053CBr 2  BD rr rr     	lda shift_table,x
0053CEr 2  8D rr rr     	sta ddline_shift3+1
0053D1r 2  8D rr rr     	sta ddline_shift4+1
0053D4r 2  BD rr rr     	lda shift_table+1,x
0053D7r 2  8D rr rr     	sta ddline_shift3+2
0053DAr 2  8D rr rr     	sta ddline_shift4+2
0053DDr 2               
0053DDr 2  20 rr rr     	jsr exx  		; store addresses.
0053E0r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
0053E3r 2               
0053E3r 2  A5 rr        	lda z80_e		; 3c
0053E5r 2  8D rr rr     	sta ddline_spraddr1+1	; 4c
0053E8r 2  8D rr rr     	sta ddline_spraddr2+1	; 4c
0053EBr 2               
0053EBr 2  A5 rr        	lda z80_d		; 3c
0053EDr 2  8D rr rr     	sta ddline_spraddr1+2	; 4c
0053F0r 2  8D rr rr     	sta ddline_spraddr2+2	; 4c
0053F3r 2               
0053F3r 2  A6 rr        	ldx sprshft
0053F5r 2  BD rr rr     	lda shift_table,x
0053F8r 2  8D rr rr     	sta ddline_shift1+1
0053FBr 2  8D rr rr     	sta ddline_shift2+1
0053FEr 2  BD rr rr     	lda shift_table+1,x
005401r 2  8D rr rr     	sta ddline_shift1+2
005404r 2  8D rr rr     	sta ddline_shift2+2
005407r 2               
005407r 2  A2 00        	ldx #0
005409r 2               lloop:
005409r 2  20 rr rr     	jsr ddline 		; draw a line.
00540Cr 2                 .if bflag
00540Cr 2               	cpx #48
00540Cr 2                 .else
00540Cr 2  E0 20        	cpx #32
00540Er 2                 .endif
00540Er 2  D0 F9        	bne lloop
005410r 2  60           	rts
005411r 2               
005411r 2               shift_table:
005411r 2  00 A0        	.word shift0
005413r 2  00 A1        	.word shift2
005415r 2  00 A2        	.word shift4
005417r 2  00 A3        	.word shift6
005419r 2               
005419r 2               ;------------------------------------------------------------------
005419r 2               ; DLINE
005419r 2               ;
005419r 2               ; Draw a sprite line, now work out next target address.
005419r 2               ;
005419r 2               ; Input:
005419r 2               ;  B  = right mask
005419r 2               ;  C  = left mask
005419r 2               ;  DE = spriteaddress
005419r 2               ;  scraddr = screen address
005419r 2               ;------------------------------------------------------------------
005419r 2               
005419r 2               dline:
005419r 2               
005419r 2               dline_spraddr1:
005419r 2  BC FF FF     	ldy $ffff,x 		; get graphic data as pointer.
00541Cr 2               dline_shift1:
00541Cr 2  B9 FF FF     	lda $ffff,y		; get pre-shifted data
00541Fr 2  85 rr        	sta sprtmp		; save byte
005421r 2  25 rr        	and z80_c 		; mask right for left byte
005423r 2               
005423r 2  A0 00        	ldy #0
005425r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005427r 2  91 rr        	sta (scraddr),y 	; display left byte
005429r 2               
005429r 2               ; carry to next screen byte
005429r 2               
005429r 2  A5 rr        	lda sprtmp		; fetch data.
00542Br 2  25 rr        	and z80_b 		; mask for left part
00542Dr 2  85 rr        	sta sprtmp
00542Fr 2               
00542Fr 2               ; middle screen byte
00542Fr 2               
00542Fr 2  E8           	inx
005430r 2               dline_spraddr2:
005430r 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005433r 2               dline_shift2:
005433r 2  B9 FF FF     	lda $ffff,y
005436r 2  85 rr        	sta sprtmp2
005438r 2  25 rr        	and z80_c 		; mask away what's not needed.
00543Ar 2  05 rr        	ora sprtmp
00543Cr 2  A0 10        	ldy #16
00543Er 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005440r 2  91 rr        	sta (scraddr),y 	; display middle bye.
005442r 2               
005442r 2               ; carry to last screen byte
005442r 2               
005442r 2  A5 rr        	lda sprtmp2
005444r 2  25 rr        	and z80_b 		; mask away unwanted
005446r 2               
005446r 2  A0 20        	ldy #32
005448r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00544Ar 2  91 rr        	sta (scraddr),y 	; display right byte.
00544Cr 2               
00544Cr 2  E8           	inx
00544Dr 2               .else
00544Dr 2               
00544Dr 2               	jsr gsprad 		; get old sprite address.
00544Dr 2               	jsr exx  		; store addresses.
00544Dr 2               	jsr gspran 		; get new sprite addresses.
00544Dr 2               
00544Dr 2               .if bflag
00544Dr 2               	lda #23
00544Dr 2               .else
00544Dr 2               	lda #15
00544Dr 2               .endif
00544Dr 2               	sta ccnt
00544Dr 2               lloop:
00544Dr 2               	jsr dline 		; draw a line.
00544Dr 2               	jsr exx  		; restore old addresses.
00544Dr 2               	jsr dline 		; delete a line.
00544Dr 2               	jsr exx  		; flip to new sprite addresses.
00544Dr 2               	dec ccnt
00544Dr 2               	bne lloop
00544Dr 2               
00544Dr 2               	jsr dline		; draw a line.
00544Dr 2               	jsr exx 		; restore old addresses.
00544Dr 2               
00544Dr 2               ;-------------------------------------------------------------
00544Dr 2               ; Drop through.
00544Dr 2               ; Line drawn, now work out next target address.
00544Dr 2               ;
00544Dr 2               ; Input:
00544Dr 2               ;  B  = right mask
00544Dr 2               ;  C  = left mask
00544Dr 2               ;  DE = spriteaddress
00544Dr 2               ;  scraddr = screen address
00544Dr 2               ;-------------------------------------------------------------
00544Dr 2               
00544Dr 2               dline:
00544Dr 2               	ldy #0
00544Dr 2               	lda (z80_de),y 		; graphic data.
00544Dr 2               	pha
00544Dr 2               	and z80_c 		; mask away what's not needed.
00544Dr 2               	eor (scraddr),y 	; XOR with what's there.
00544Dr 2               	sta (scraddr),y 	; left byte on screen.
00544Dr 2               
00544Dr 2               	pla
00544Dr 2               	and z80_b 		; mask away unwanted bits.
00544Dr 2               	ldy #32
00544Dr 2               	eor (scraddr),y 	; XOR with what's there.
00544Dr 2               	sta (scraddr),y 	; right byte on screen
00544Dr 2               
00544Dr 2               	inc z80_e 		; next graphic.
00544Dr 2               	bne :+
00544Dr 2               	inc z80_d
00544Dr 2               :
00544Dr 2               ; _BEEB screen arrangement
00544Dr 2               ;	sec
00544Dr 2               ;	lda scraddr 		; one character cell to the left.
00544Dr 2               ;	sbc #8
00544Dr 2               ;	sta scraddr
00544Dr 2               ;	lda scraddr+1
00544Dr 2               ;	sbc #0
00544Dr 2               ;	sta scraddr+1
00544Dr 2               	ldy #0
00544Dr 2               	lda (z80_de),y 		; second bit of data.
00544Dr 2               	ldy #16
00544Dr 2               	eor (scraddr),y 	; XOR with what's there.
00544Dr 2               	sta (scraddr),y 	; middle byte on screen.
00544Dr 2               
00544Dr 2               	inc z80_e 		; point to next line of data.
00544Dr 2               	bne :+
00544Dr 2               	inc z80_d
00544Dr 2               :
00544Dr 2               ; _BEEB screen arrangement
00544Dr 2               ;	sec
00544Dr 2               ;	lda scraddr 		; another char left.
00544Dr 2               ;	sbc #8
00544Dr 2               ;	sta scraddr
00544Dr 2               ;	lda scraddr+1
00544Dr 2               ;	sbc #0
00544Dr 2               ;	sta scraddr+1
00544Dr 2               .endif
00544Dr 2               
00544Dr 2               ;----------------------------------------------------------------------
00544Dr 2               ; Line drawn, now work out next target address.
00544Dr 2               ;----------------------------------------------------------------------
00544Dr 2               
00544Dr 2               ; _BEEB screen arrangement
00544Dr 2               
00544Dr 2               nline:
00544Dr 2  A5 rr        	lda scraddr 			; get low byte of address.
00544Fr 2  29 0F        	and #15
005451r 2  C9 0F        	cmp #15				; is this last line of row?
005453r 2  F0 03        	beq beeb_next_row
005455r 2               
005455r 2               	; within same row
005455r 2  E6 rr        	inc scraddr			; new low byte of address.
005457r 2  60           	rts
005458r 2               
005458r 2               beeb_next_row:
005458r 2  18           	clc
005459r 2  A5 rr        	lda scraddr
00545Br 2  69 51        	adc #<(ScreenRowBytes-15)
00545Dr 2  85 rr        	sta scraddr			; new low byte of address.
00545Fr 2  A5 rr        	lda scraddr+1
005461r 2  69 01        	adc #>(ScreenRowBytes-15)
005463r 2  85 rr        	sta scraddr+1			; new high byte of address.
005465r 2  60           	rts
005466r 2               
005466r 2               .if rflag
005466r 2               ;-------------------------------------------------------------
005466r 2               ; Drop through.
005466r 2               ; Line drawn, now work out next target address.
005466r 2               ;
005466r 2               ; Input:
005466r 2               ;  B  = right mask
005466r 2               ;  C  = left mask
005466r 2               ;  DE = spriteaddress
005466r 2               ;  scraddr = screen address
005466r 2               ;-------------------------------------------------------------
005466r 2               
005466r 2               ddline:
005466r 2               
005466r 2               ; NEW SPRITE
005466r 2               
005466r 2               ; first screen byte
005466r 2               
005466r 2               ddline_spraddr1:
005466r 2  BC FF FF     	ldy $ffff,x 		; graphic data.
005469r 2               ddline_shift1:
005469r 2  B9 FF FF     	lda $ffff,y
00546Cr 2  85 rr        	sta sprtmp
00546Er 2  25 rr        	and z80_c 			; mask away what's not needed.
005470r 2               
005470r 2  A0 00        	ldy #0
005472r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005474r 2  91 rr        	sta (scraddr),y 	; bung it in.
005476r 2               
005476r 2               ; carry to next screen byte
005476r 2               
005476r 2  A5 rr        	lda sprtmp			; fetch data.
005478r 2  25 rr        	and z80_b 			; mask away unwanted
00547Ar 2  85 rr        	sta sprtmp
00547Cr 2               
00547Cr 2               ; middle screen byte
00547Cr 2               
00547Cr 2  E8           	inx
00547Dr 2               ddline_spraddr2:
00547Dr 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005480r 2               ddline_shift2:
005480r 2  B9 FF FF     	lda $ffff,y
005483r 2  85 rr        	sta sprtmp2
005485r 2  25 rr        	and z80_c 			; mask away what's not needed.
005487r 2  05 rr        	ora sprtmp
005489r 2               
005489r 2  A0 10        	ldy #16
00548Br 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00548Dr 2  91 rr        	sta (scraddr),y 	; bung it in.
00548Fr 2               
00548Fr 2               ; carry to last screen byte
00548Fr 2               
00548Fr 2  A5 rr        	lda sprtmp2
005491r 2  25 rr        	and z80_b 			; mask away unwanted
005493r 2               
005493r 2  A0 20        	ldy #32
005495r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005497r 2  91 rr        	sta (scraddr),y 	; bung it in.
005499r 2               
005499r 2               ; _BEEB next row
005499r 2               
005499r 2  A5 rr        	lda scraddr 		; get low byte of address.
00549Br 2  29 0F        	and #15
00549Dr 2  C9 0F        	cmp #15				; is this last line of row?
00549Fr 2  F0 04        	beq :+
0054A1r 2               
0054A1r 2               	; within same row can't increment page
0054A1r 2  E6 rr        	inc scraddr			; new low byte of address.
0054A3r 2  D0 0D        	bne ddline2
0054A5r 2               
0054A5r 2               :
0054A5r 2  18           	clc
0054A6r 2  A5 rr        	lda scraddr
0054A8r 2  69 51        	adc #<(ScreenRowBytes-15)
0054AAr 2  85 rr        	sta scraddr			; new low byte of address.
0054ACr 2  A5 rr        	lda scraddr+1
0054AEr 2  69 01        	adc #>(ScreenRowBytes-15)
0054B0r 2  85 rr        	sta scraddr+1		; new high byte of address.
0054B2r 2               
0054B2r 2               ; OLD SPRITE
0054B2r 2               
0054B2r 2               ddline2:
0054B2r 2               
0054B2r 2               ; still first row but different data!
0054B2r 2               
0054B2r 2  CA           	dex
0054B3r 2               
0054B3r 2               ; first screen byte
0054B3r 2               
0054B3r 2               ddline_spraddr3:
0054B3r 2  BC FF FF     	ldy $ffff,x			; graphic data.
0054B6r 2               ddline_shift3:
0054B6r 2  B9 FF FF     	lda $ffff,y
0054B9r 2  85 rr        	sta sprtmp
0054BBr 2  25 rr        	and z80_cp 			; mask away what's not needed.
0054BDr 2               
0054BDr 2  A0 00        	ldy #0
0054BFr 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
0054C1r 2  91 rr        	sta (z80_hlp),y 	; bung it in.
0054C3r 2               
0054C3r 2               ; carry to next screen byte
0054C3r 2               
0054C3r 2  A5 rr        	lda sprtmp			; fetch data.
0054C5r 2  25 rr        	and z80_bp 			; mask away unwanted
0054C7r 2  85 rr        	sta sprtmp
0054C9r 2               
0054C9r 2               ; middle screen byte
0054C9r 2               
0054C9r 2  E8           	inx
0054CAr 2               ddline_spraddr4:
0054CAr 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
0054CDr 2               ddline_shift4:
0054CDr 2  B9 FF FF     	lda $ffff,y
0054D0r 2  85 rr        	sta sprtmp2
0054D2r 2  25 rr        	and z80_cp 			; mask away what's not needed.
0054D4r 2  05 rr        	ora sprtmp
0054D6r 2               
0054D6r 2  A0 10        	ldy #16
0054D8r 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
0054DAr 2  91 rr        	sta (z80_hlp),y 	; bung it in.
0054DCr 2               
0054DCr 2               ; last screen byte
0054DCr 2               
0054DCr 2  A5 rr        	lda sprtmp2			; fetch data.
0054DEr 2  25 rr        	and z80_bp 			; mask away unwanted
0054E0r 2               
0054E0r 2  A0 20        	ldy #32
0054E2r 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
0054E4r 2  91 rr        	sta (z80_hlp),y 	; bung it in.
0054E6r 2               
0054E6r 2               ; next row of sprite data
0054E6r 2               
0054E6r 2  E8           	inx
0054E7r 2               
0054E7r 2               ; _BEEB screen arrangement
0054E7r 2               
0054E7r 2  A5 rr        	lda z80_lp 			; get low byte of address.
0054E9r 2  29 0F        	and #15
0054EBr 2  C9 0F        	cmp #15				; is this last line of row?
0054EDr 2  F0 03        	beq :+
0054EFr 2               
0054EFr 2               	; within same row can't increment page
0054EFr 2  E6 rr        	inc z80_lp			; new low byte of address.
0054F1r 2  60           	rts
0054F2r 2               
0054F2r 2               :
0054F2r 2  18           	clc
0054F3r 2  A5 rr        	lda z80_lp
0054F5r 2  69 51        	adc #<(ScreenRowBytes-15)
0054F7r 2  85 rr        	sta z80_lp			; new low byte of address.
0054F9r 2  A5 rr        	lda z80_lp+1
0054FBr 2  69 01        	adc #>(ScreenRowBytes-15)
0054FDr 2  85 rr        	sta z80_lp+1		; new high byte of address.
0054FFr 2  60           	rts
005500r 2               .endif
005500r 2               
005500r 2               ;----------------------------------------------------
005500r 2               ; SPRINTEINK
005500r 2               ;----------------------------------------------------
005500r 2               
005500r 2               cspr:
005500r 2  A5 rr        	lda z80_c
005502r 2  A0 11        	ldy #17
005504r 2  91 rr        	sta (z80_ix),y
005506r 2  20 rr rr     	jsr cspr_new
005509r 2  60           	rts
00550Ar 2               
00550Ar 2               cspr_new:
00550Ar 2  A0 08        	ldy #8
00550Cr 2  B1 rr        	lda (z80_ix),y			; Get sprite y
00550Er 2  4C rr rr     	jmp cspr_go
005511r 2               cspr_old:
005511r 2  A0 03        	ldy #3
005513r 2  B1 rr        	lda(z80_ix),y
005515r 2               cspr_go:
005515r 2  85 rr        	sta dispy
005517r 2  C9 B1        	cmp #8*ScrHeight+1		; Check if on screen
005519r 2  90 01        	bcc :+
00551Br 2  60           	rts
00551Cr 2               :
00551Cr 2  C8           	iny
00551Dr 2  B1 rr        	lda (z80_ix),y			; Get sprite x
00551Fr 2  85 rr        	sta dispx
005521r 2               
005521r 2               ; Calculate colour attribte address in scraddr
005521r 2               
005521r 2  20 rr rr     	jsr coladdr
005524r 2               
005524r 2               ; Set number of rows
005524r 2               
005524r 2  A9 02        	lda #2
005526r 2  85 rr        	sta z80_b
005528r 2  A5 rr        	lda dispy
00552Ar 2  29 0F        	and #15
00552Cr 2  D0 02        	bne :+
00552Er 2  C6 rr        	dec z80_b
005530r 2               :
005530r 2               ; Loop to colour row blocks
005530r 2               
005530r 2               cspr0:
005530r 2  A0 00        	ldy #0
005532r 2  A5 rr        	lda z80_c
005534r 2  91 rr        	sta (scraddr),y
005536r 2               cspr6:
005536r 2  A0 01        	ldy #1
005538r 2  91 rr        	sta (scraddr),y
00553Ar 2               cspr7:
00553Ar 2  A5 rr        	lda dispx
00553Cr 2  29 07        	and #7
00553Er 2  F0 06        	beq cspr1
005540r 2               
005540r 2  A0 02        	ldy #2
005542r 2  A5 rr        	lda z80_c
005544r 2  91 rr        	sta (scraddr),y
005546r 2               cspr1:
005546r 2  A5 rr        	lda scraddr
005548r 2  18           	clc
005549r 2  69 16        	adc #22
00554Br 2  85 rr        	sta scraddr
00554Dr 2  90 02        	bcc :+
00554Fr 2  E6 rr        	inc scraddr+1
005551r 2               :
005551r 2  C6 rr        	dec z80_b
005553r 2  D0 DB        	bne cspr0
005555r 2  60           	rts
005556r 2               
005556r 2               ; Calculate colour attribte address
005556r 2               ; scraddr = COLOR + dispy/16 + dispx/8
005556r 2               
005556r 2               coladdr:
005556r 2  A5 rr        	lda dispy
005558r 2  4A           	lsr a
005559r 2  4A           	lsr a
00555Ar 2  4A           	lsr a
00555Br 2  4A           	lsr a
00555Cr 2  A8           	tay
00555Dr 2  B9 55 0A     	lda COLATTTB_hb,y
005560r 2  85 rr        	sta scraddr+1
005562r 2  B9 4A 0A     	lda COLATTTB_lb,y
005565r 2  85 rr        	sta scraddr
005567r 2  A5 rr        	lda dispx
005569r 2  4A           	lsr a
00556Ar 2  4A           	lsr a
00556Br 2  4A           	lsr a
00556Cr 2  18           	clc
00556Dr 2  65 rr        	adc scraddr
00556Fr 2  85 rr        	sta scraddr
005571r 2  90 02        	bcc :+
005573r 2  E6 rr        	inc scraddr+1
005575r 2               :
005575r 2  60           	rts
005576r 2               
005576r 2               ;----------------------------------------------------
005576r 2               ; Display character in A at dispx,dispy.
005576r 2               ;
005576r 2               ; Input:
005576r 2               ;  A 	   = character to print
005576r 2               ;----------------------------------------------------
005576r 2               
005576r 2               pchar:
005576r 2  85 rr        	sta fntaddr
005578r 2  A9 00        	lda #0
00557Ar 2  85 rr        	sta fntaddr+1
00557Cr 2  06 rr        	asl fntaddr  		; multiply char by 8.
00557Er 2  26 rr        	rol fntaddr+1
005580r 2  06 rr        	asl fntaddr
005582r 2  26 rr        	rol fntaddr+1
005584r 2  06 rr        	asl fntaddr
005586r 2  26 rr        	rol fntaddr+1
005588r 2               
005588r 2  A5 rr        	lda fntaddr
00558Ar 2  18           	clc
00558Br 2  69 rr        	adc #<(FONT-256)
00558Dr 2  85 rr        	sta fntaddr		; that's the low byte.
00558Fr 2  A5 rr        	lda fntaddr+1
005591r 2  69 rr        	adc #>(FONT-256)
005593r 2  85 rr        	sta fntaddr+1		; add displacement.
005595r 2               
005595r 2               pchark:
005595r 2  20 rr rr     	jsr gaadd		; set colour attribute
005598r 2  AD rr rr     	lda fontcol
00559Br 2  A0 00        	ldy #0
00559Dr 2  91 rr        	sta (bufaddr),y
00559Fr 2               
00559Fr 2  20 rr rr     	jsr gprad		; get screen address.
0055A2r 2  A2 07        	ldx #7			; lines to write.
0055A4r 2               pchar0:
0055A4r 2  A0 00        	ldy #0
0055A6r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
0055A8r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
0055ABr 2               .if iflag
0055ABr 2               	eor #TxtInvert		; Invert
0055ABr 2               .endif
0055ABr 2  91 rr        	sta (scraddr),y 	; copy to screen.
0055ADr 2  E6 rr        	inc fntaddr		; next image byte.
0055AFr 2  D0 02        	bne :+
0055B1r 2  E6 rr        	inc fntaddr+1
0055B3r 2               :
0055B3r 2  CA           	dex			; next screen row down.
0055B4r 2  10 EE        	bpl pchar0		; repeat.
0055B6r 2               
0055B6r 2  60           	rts
0055B7r 2               
0055B7r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
0055BBr 2  03 02 01 00  
0055BFr 2               
0055BFr 2               ;----------------------------------------------------
0055BFr 2               ; LoadFile
0055BFr 2               ;----------------------------------------------------
0055BFr 2               
0055BFr 2               loadfile:
0055BFr 2  AA           	tax
0055C0r 2  A9 rr        	lda #<msgdat		; pointer to messages.
0055C2r 2  85 rr        	sta z80_l
0055C4r 2  A9 rr        	lda #>msgdat
0055C6r 2  85 rr        	sta z80_h
0055C8r 2  20 rr rr     	jsr getwrd		; get message number.
0055CBr 2               
0055CBr 2               ; Init screen for NTSC
0055CBr 2               ; this sets the background and border color of the screen
0055CBr 2               ; in this case border black and background black
0055CBr 2               
0055CBr 2  A9 08        	lda #%00001000
0055CDr 2  8D 0F 90     	sta RegF
0055D0r 2               
0055D0r 2               ; z80_hl should point to the textstring now.
0055D0r 2               ; Read filename +length into buffer
0055D0r 2               
0055D0r 2  A0 00        	ldy #0
0055D2r 2               nameloop:
0055D2r 2  B1 rr        	lda (z80_hl),y
0055D4r 2  30 07        	bmi lastchar
0055D6r 2  99 rr rr     	sta filename,y
0055D9r 2  C8           	iny
0055DAr 2  4C rr rr     	jmp nameloop
0055DDr 2               lastchar:
0055DDr 2  29 7F        	and #$7f
0055DFr 2  99 rr rr     	sta filename,y
0055E2r 2  C8           	iny
0055E3r 2  8C rr rr     	sty filelen
0055E6r 2               
0055E6r 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
0055E6r 2               ;                       usually the first drive, and y set to 1 reads from the header
0055E6r 2               ;                       of the file the location where to save it)
0055E6r 2  A9 01        	lda #1
0055E8r 2  A2 08        	ldx #8		; Disk device
0055EAr 2  A0 01        	ldy #1
0055ECr 2  20 BA FF     	jsr $ffba
0055EFr 2               
0055EFr 2               ; Load the file name (in accumulator the size of the string
0055EFr 2               ;                      containing the name, x low address for FileName,
0055EFr 2               ;                      y high address for FileName)
0055EFr 2  AD rr rr     	lda filelen
0055F2r 2  A2 rr        	ldx #<filename
0055F4r 2  A0 rr        	ldy #>filename
0055F6r 2  20 BD FF     	jsr $ffbd
0055F9r 2               
0055F9r 2               ; load from disk to ram
0055F9r 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
0055FBr 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
0055FDr 2  A0 00        	ldy #>$ff	; target location high (got from header)
0055FFr 2  20 D5 FF     	jsr $ffd5
005602r 2               
005602r 2  60           	rts
005603r 2               
005603r 2               filename:
005603r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005607r 2  00 00 00 00  
00560Br 2  00 00 00 00  
005613r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005617r 2  00 00 00 00  
00561Br 2  00 00 00 00  
005623r 2               filelen:
005623r 2  00           	.byte 0
005624r 2               
005624r 2               ;----------------------------------------------------
005624r 2               ; Sound
005624r 2               ;----------------------------------------------------
005624r 2               
005624r 2               ; Actual memory locations
005624r 2               
005624r 2               CHANNEL1_ENABLED  = $ea
005624r 2               CHANNEL2_ENABLED  = $eb
005624r 2               CHANNEL3_ENABLED  = $ec
005624r 2               CHANNEL4_ENABLED  = $ed
005624r 2               MUSIC_ON		  = $ee
005624r 2               
005624r 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
005628r 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
00562Cr 2  DE           SetSoundTone: 		.byte $de
00562Dr 2               
00562Dr 2               ;--------------------------------------------
00562Dr 2               ;                      SOUND    0   1   2   3
00562Dr 2               ;--------------------------------------------
00562Dr 2  C8 C8 DE DC  SndTone:		.byte 200,200,222,220
005631r 2  01 00 03 01  SndChannel:		.byte   1,  0,  3,  1
005635r 2  3C 3C 3C 28  SndDuration:		.byte  60, 60, 60, 40
005639r 2               
005639r 2               ;--------------------------------------------
005639r 2               ; Called by SOUND with parameter in A
005639r 2               ;--------------------------------------------
005639r 2               
005639r 2               playsound:
005639r 2  A8           	tay
00563Ar 2  B9 rr rr     	lda SndTone,y		; lda $a0
00563Dr 2  8D rr rr     	sta SetSoundTone	; sta SetSoundTone
005640r 2  B9 rr rr     	lda SndDuration,y	; lda $a2
005643r 2  BE rr rr     	ldx SndChannel,y	; ldx $a1
005646r 2  9D rr rr     	sta SetSoundDuration,x	; sta SetSoundDuration,x
005649r 2  B9 rr rr     	lda SndTone,y		; lda $a0
00564Cr 2  9D rr rr     	sta SetSoundVars,x	; sta SetSoundVars,x
00564Fr 2  60           	rts
005650r 2               
005650r 2               ;--------------------------------------------
005650r 2               ; Make sound
005650r 2               ; Called by vsync every frame
005650r 2               ;--------------------------------------------
005650r 2               
005650r 2               make_sound2:
005650r 2  A0 00        	ldy #$00
005652r 2  AE rr rr     	ldx SetSoundTone
005655r 2  AD rr rr     	lda SetSoundVars
005658r 2  CD rr rr     	cmp SetSoundDuration
00565Br 2  B0 1C        	bcs l0366
00565Dr 2               
00565Dr 2  AD rr rr     	lda SetSoundVars
005660r 2  CD rr rr     	cmp SetSoundDuration
005663r 2  D0 07        	bne :+
005665r 2  A5 EE        	lda MUSIC_ON
005667r 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
005669r 2  4C rr rr     	jmp l0374
00566Cr 2               :
00566Cr 2               
00566Cr 2  A9 00        	lda #$0
00566Er 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
005670r 2  EE rr rr     	inc SetSoundVars
005673r 2  EE 0A 90     	inc RegA
005676r 2  4C rr rr     	jmp l0374
005679r 2               
005679r 2  8C 0A 90     l0366:	sty RegA
00567Cr 2  EC rr rr     	cpx SetSoundVars
00567Fr 2  D0 06        	bne l0374
005681r 2  8C rr rr     	sty SetSoundVars
005684r 2  8E 0A 90     	stx RegA
005687r 2               
005687r 2  AD rr rr     l0374:	lda SetSoundVars+1
00568Ar 2  CD rr rr     	cmp SetSoundDuration+1
00568Dr 2  D0 07        	bne :+
00568Fr 2  A5 EE        	lda MUSIC_ON
005691r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 1
005693r 2  4C rr rr     	jmp l0392
005696r 2               :
005696r 2  A9 00        	lda #$0
005698r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 2
00569Ar 2  AD rr rr     	lda SetSoundVars+1
00569Dr 2  CD rr rr     	cmp SetSoundDuration+1
0056A0r 2  B0 09        	bcs l0384
0056A2r 2  EE rr rr     	inc SetSoundVars+1
0056A5r 2  EE 0B 90     	inc RegB
0056A8r 2  4C rr rr     	jmp l0392
0056ABr 2               
0056ABr 2  8C 0B 90     l0384:	sty RegB
0056AEr 2  EC rr rr     	cpx SetSoundVars+1
0056B1r 2  D0 06        	bne l0392
0056B3r 2  8C rr rr     	sty SetSoundVars+1
0056B6r 2  8E 0B 90     	stx RegB
0056B9r 2               
0056B9r 2  AD rr rr     l0392:	lda SetSoundVars+2
0056BCr 2  CD rr rr     	cmp SetSoundDuration+2
0056BFr 2  D0 07        	bne :+
0056C1r 2  A5 EE        	lda MUSIC_ON
0056C3r 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 1
0056C5r 2  4C rr rr     	jmp l03b0
0056C8r 2               :
0056C8r 2  A9 00        	lda #$0
0056CAr 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 3
0056CCr 2  AD rr rr     	lda SetSoundVars+2
0056CFr 2  CD rr rr     	cmp SetSoundDuration+2
0056D2r 2  B0 09        	bcs l03a2
0056D4r 2  EE rr rr     	inc SetSoundVars+2
0056D7r 2  CE 0C 90     	dec RegC
0056DAr 2  4C rr rr     	jmp l03b0
0056DDr 2               
0056DDr 2  8C 0C 90     l03a2:	sty RegC
0056E0r 2  EC rr rr     	cpx SetSoundVars+2
0056E3r 2  D0 06        	bne l03b0
0056E5r 2  8C rr rr     	sty SetSoundVars+2
0056E8r 2  8E 0C 90     	stx RegC
0056EBr 2               
0056EBr 2  AD rr rr     l03b0:	lda SetSoundVars+3
0056EEr 2  CD rr rr     	cmp SetSoundDuration+3
0056F1r 2  D0 07        	bne :+
0056F3r 2  A5 EE        	lda MUSIC_ON
0056F5r 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 1
0056F7r 2  4C rr rr     	jmp l03d3
0056FAr 2               :
0056FAr 2               
0056FAr 2               	; lda SetSoundVars+3
0056FAr 2               	; cmp SetSoundDuration+3
0056FAr 2               	; beq l03e1
0056FAr 2               
0056FAr 2  A9 00        	lda #$0
0056FCr 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 4
0056FEr 2               
0056FEr 2  AD rr rr     	lda SetSoundVars+3
005701r 2  CD rr rr         cmp SetSoundDuration+3 ; $03b3 $03b4
005704r 2  B0 1C            bcs l03d3
005706r 2               
005706r 2  EE rr rr     	inc SetSoundVars+3
005709r 2  AD rr rr     	lda SetSoundVars+3
00570Cr 2  C9 16        	cmp #$16
00570Er 2  D0 07        	bne l03c8
005710r 2  A9 B0        	lda #$b0
005712r 2  8D 0D 90     	sta RegD
005715r 2  F0 19        	beq l03e1
005717r 2  C9 2B        l03c8:	cmp #$2b
005719r 2  D0 15        	bne l03e1
00571Br 2  A9 A0        	lda #$a0
00571Dr 2  8D 0D 90     	sta RegD
005720r 2  F0 0E        	beq l03e1
005722r 2  8C 0D 90     l03d3:	sty RegD
005725r 2  EC rr rr     	cpx SetSoundVars+3
005728r 2  D0 06        	bne l03e1
00572Ar 2  8C rr rr     	sty SetSoundVars+3
00572Dr 2  8E 0D 90     	stx RegD
005730r 2               
005730r 2  60           l03e1:	rts
005731r 2               
005731r 2               ;----------------------------------------------------
005731r 2               ; Set video registers
005731r 2               ;----------------------------------------------------
005731r 2               
005731r 2               SetReg:
005731r 2  8D rr rr     	sta mode
005734r 2  0A           	asl a
005735r 2  18           	clc
005736r 2  6D rr rr     	adc crtflag
005739r 2  AA           	tax
00573Ar 2  BD rr rr     	lda centreX,x
00573Dr 2  8D 00 90     	sta Reg0
005740r 2  BD rr rr     	lda centreY,x
005743r 2  8D 01 90     	sta Reg1
005746r 2  BD rr rr     	lda scrW,x
005749r 2  8D 02 90     	sta Reg2
00574Cr 2  BD rr rr     	lda scrH,x
00574Fr 2  8D 03 90     	sta Reg3
005752r 2  BD rr rr     	lda RAMset,x
005755r 2  8D 05 90     	sta Reg5
005758r 2  60           	rts
005759r 2               
005759r 2  04 0C 06 0E  centreX:	.byte $04,$0c,$06,$0e
00575Dr 2  1B 26 18 24  centreY:	.byte $1b,$26,$18,$24
005761r 2  96 96 14 14  scrW:		.byte $96,$96,$14,$14
005765r 2  17 17 19 19  scrH:		.byte $17,$17,$19,$19
005769r 2  8C 8C CC CC  RAMset:		.byte $8c,$8c,$cc,$cc
00576Dr 2  84 A0 84 A0  BottomScr:	.byte $84,$a0,$84,$a0
005771r 2               
005771r 2               ;----------------------------------------------------
005771r 2               ; Display functions
005771r 2               ;
005771r 2               ; DISPLAYON   resets CentreY
005771r 2               ; DISPLAYOFF  locates screen below bottom
005771r 2               ; DISPLAYUP   scrolls screen up until default CentreY
005771r 2               ; DISPLAYDOWN scrolls screen down until below bottom
005771r 2               ;----------------------------------------------------
005771r 2               
005771r 2               dispon:
005771r 2  AD rr rr     	lda mode
005774r 2  0A           	asl a
005775r 2  18           	clc
005776r 2  6D rr rr     	adc crtflag
005779r 2  AA           	tax
00577Ar 2  BD rr rr     	lda centreY,x
00577Dr 2  8D 01 90     	sta Reg1
005780r 2  60           	rts
005781r 2               
005781r 2               dispoff:
005781r 2  AD rr rr     	lda mode
005784r 2  0A           	asl a
005785r 2  18           	clc
005786r 2  6D rr rr     	adc crtflag
005789r 2  AA           	tax
00578Ar 2  BD rr rr     	lda BottomScr,x
00578Dr 2  8D 01 90     	sta Reg1
005790r 2  60           	rts
005791r 2               
005791r 2               dispup:
005791r 2  AD rr rr     	lda mode
005794r 2  0A           	asl a
005795r 2  18           	clc
005796r 2  6D rr rr     	adc crtflag
005799r 2  AA           	tax
00579Ar 2  BD rr rr     	lda centreY,x
00579Dr 2  85 rr        	sta tmp
00579Fr 2               scr_down_loop:
00579Fr 2  A9 01        	lda #1
0057A1r 2  20 rr rr     	jsr delay
0057A4r 2  CE 01 90     	dec Reg1
0057A7r 2  AD 01 90     	lda Reg1
0057AAr 2  C5 rr        	cmp tmp
0057ACr 2  D0 F1        	bne scr_down_loop
0057AEr 2  60           	rts
0057AFr 2               
0057AFr 2               dispdown:
0057AFr 2  AD rr rr     	lda mode
0057B2r 2  0A           	asl a
0057B3r 2  18           	clc
0057B4r 2  6D rr rr     	adc crtflag
0057B7r 2  AA           	tax
0057B8r 2  A9 01        	lda #1
0057BAr 2  20 rr rr     	jsr delay
0057BDr 2  EE 01 90     	inc Reg1
0057C0r 2  AD 01 90     	lda Reg1
0057C3r 2  DD rr rr     	cmp BottomScr,x
0057C6r 2  D0 E7        	bne dispdown
0057C8r 2  60           	rts
0057C9r 2               
0057C9r 1               ;	.include "music.inc"
0057C9r 1               ;colscr:	.incbin "..\pictures\slasher3c"
0057C9r 1               ;datscr:	.incbin "..\pictures\slasher3d"
0057C9r 1               
0057C9r 1               	.include "z80.asm"
0057C9r 2               ;------------------------------------------------------
0057C9r 2               ; z80.asm
0057C9r 2               ; spectrum stuff
0057C9r 2               ; adresses
0057C9r 2               
0057C9r 2               ;ws	 = $60
0057C9r 2               
0057C9r 2               ;z80_f	 = ws+$00
0057C9r 2               ;z80_a	 = ws+$01
0057C9r 2               ;z80_af	 = z80_f
0057C9r 2               
0057C9r 2               ;z80_c	 = ws+$02
0057C9r 2               ;z80_b	 = ws+$03
0057C9r 2               ;z80_bc	 = z80_c
0057C9r 2               
0057C9r 2               ;z80_e	 = ws+$04
0057C9r 2               ;z80_d	 = ws+$05
0057C9r 2               ;z80_de	 = z80_e
0057C9r 2               
0057C9r 2               ;z80_l	 = ws+$06
0057C9r 2               ;z80_h	 = ws+$07
0057C9r 2               ;z80_hl	 = z80_l
0057C9r 2               
0057C9r 2               ;z80_x    = ws+$08
0057C9r 2               ;z80_i    = ws+$09
0057C9r 2               ;z80_ix	 = z80_x
0057C9r 2               
0057C9r 2               ;z80_iy	 = ws+$0a
0057C9r 2               
0057C9r 2               ;z80_fp	 = ws+$0c
0057C9r 2               ;z80_ap	 = ws+$0d
0057C9r 2               
0057C9r 2               ;z80_cp	 = ws+$0e
0057C9r 2               ;z80_bp	 = ws+$0f
0057C9r 2               ;z80_bcp = z80_cp
0057C9r 2               
0057C9r 2               ;z80_ep	 = ws+$10
0057C9r 2               ;z80_dp	 = ws+$11
0057C9r 2               ;z80_dep = z80_ep
0057C9r 2               
0057C9r 2               ;z80_lp	 = ws+$12
0057C9r 2               ;z80_hp	 = ws+$13
0057C9r 2               ;z80_hlp = z80_lp
0057C9r 2               
0057C9r 2               ;z80_sp   = ws+$14
0057C9r 2               
0057C9r 2               ;z80_reg0 = ws+$16
0057C9r 2               ;z80_reg1 = ws+$17
0057C9r 2               ;z80_reg2 = ws+$18
0057C9r 2               ;z80_reg3 = ws+$19
0057C9r 2               
0057C9r 2               ;z80_r	 = ws+$1a
0057C9r 2               
0057C9r 2               ; Contains seperatly 1 bit set
0057C9r 2               ; _BEEB this is not safe memory to use as required by MOS
0057C9r 2               
0057C9r 2               _bitmem0	= $f8
0057C9r 2               _bitmem1	= $f9
0057C9r 2               _bitmem2	= $fa
0057C9r 2               _bitmem3	= $fb
0057C9r 2               _bitmem4	= $fc
0057C9r 2               _bitmem5	= $fd
0057C9r 2               _bitmem6	= $fe
0057C9r 2               _bitmem7	= $ff
0057C9r 2               
0057C9r 2               ; constants
0057C9r 2               _bitvalue0	= $01
0057C9r 2               _bitvalue1	= $02
0057C9r 2               _bitvalue2	= $04
0057C9r 2               _bitvalue3	= $08
0057C9r 2               _bitvalue4	= $10
0057C9r 2               _bitvalue5	= $20
0057C9r 2               _bitvalue6	= $40
0057C9r 2               _bitvalue7	= $80
0057C9r 2               
0057C9r 2               _notbitvalue0	= $fe
0057C9r 2               _notbitvalue1	= $fd
0057C9r 2               _notbitvalue2	= $fb
0057C9r 2               _notbitvalue3	= $f7
0057C9r 2               _notbitvalue4	= $ef
0057C9r 2               _notbitvalue5	= $df
0057C9r 2               _notbitvalue6	= $bf
0057C9r 2               _notbitvalue7	= $7f
0057C9r 2               
0057C9r 2               
0057C9r 2               ;add_hl_bc:
0057C9r 2               ;		lda z80_l
0057C9r 2               ;		clc
0057C9r 2               ;		adc z80_c
0057C9r 2               ;		sta z80_l
0057C9r 2               ;		lda z80_h
0057C9r 2               ;		adc z80_b
0057C9r 2               ;		sta z80_h
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;add_ix_de:
0057C9r 2               ;		lda z80_ix
0057C9r 2               ;		clc
0057C9r 2               ;		adc z80_e
0057C9r 2               ;		sta z80_ix
0057C9r 2               ;		lda z80_ix+1
0057C9r 2               ;		adc z80_d
0057C9r 2               ;		sta z80_ix+1
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;add_iy_de:
0057C9r 2               ;		lda z80_iy
0057C9r 2               ;		clc
0057C9r 2               ;		adc z80_e
0057C9r 2               ;		sta z80_iy
0057C9r 2               ;		lda z80_iy+1
0057C9r 2               ;		adc z80_d
0057C9r 2               ;		sta z80_iy+1
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;add_hl_de:
0057C9r 2               ;		lda z80_l
0057C9r 2               ;		clc
0057C9r 2               ;		adc z80_e
0057C9r 2               ;		sta z80_l
0057C9r 2               ;		lda z80_h
0057C9r 2               ;		adc z80_d
0057C9r 2               ;		sta z80_h
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;add_ix_bc:
0057C9r 2               ;		lda z80_ix
0057C9r 2               ;		clc
0057C9r 2               ;		adc z80_c
0057C9r 2               ;		sta z80_ix
0057C9r 2               ;		lda z80_ix+1
0057C9r 2               ;		adc z80_b
0057C9r 2               ;		sta z80_ix+1
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;add_iy_bc:
0057C9r 2               ;		lda z80_iy
0057C9r 2               ;		clc
0057C9r 2               ;		adc z80_c
0057C9r 2               ;		sta z80_iy
0057C9r 2               ;		lda z80_iy+1
0057C9r 2               ;		adc z80_b
0057C9r 2               ;		sta z80_iy+1
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;sbc_hl_de:
0057C9r 2               ;		lda z80_l
0057C9r 2               ;		sbc z80_e
0057C9r 2               ;		sta z80_l
0057C9r 2               ;		lda z80_h
0057C9r 2               ;		sbc z80_d
0057C9r 2               ;		sta z80_h
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;sbc_hl_bc:
0057C9r 2               ;		lda z80_l
0057C9r 2               ;		sbc z80_c
0057C9r 2               ;		sta z80_l
0057C9r 2               ;		lda z80_h
0057C9r 2               ;		sbc z80_b
0057C9r 2               ;		sta z80_h
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;cmp_hl_bc:
0057C9r 2               ;		lda z80_l
0057C9r 2               ;		cmp z80_c
0057C9r 2               ;		bne cmp_hl_bc_end
0057C9r 2               ;		lda z80_h
0057C9r 2               ;		cmp z80_b
0057C9r 2               ;cmp_hl_bc_end:
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;cmp_iy_ix:
0057C9r 2               ;		lda z80_iy
0057C9r 2               ;		cmp z80_ix
0057C9r 2               ;		bne cmp_iy_ix_end
0057C9r 2               ;		lda z80_iy+1
0057C9r 2               ;		cmp z80_ix+1
0057C9r 2               ;cmp_iy_ix_end:
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;dec_hl:
0057C9r 2               ;		lda z80_l
0057C9r 2               ;		bne dec_hl_no_dec_h
0057C9r 2               ;		dec z80_h
0057C9r 2               ;dec_hl_no_dec_h:
0057C9r 2               ;		dec z80_l
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;dec_ix:
0057C9r 2               ;		lda z80_ix
0057C9r 2               ;		bne dec_ix_no_dec_h
0057C9r 2               ;		dec z80_ix+1
0057C9r 2               ;dec_ix_no_dec_h:
0057C9r 2               ;		dec z80_ix
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;dec_bc:
0057C9r 2               ;		lda z80_c
0057C9r 2               ;		bne dec_bc_no_dec_b
0057C9r 2               ;		dec z80_b
0057C9r 2               ;dec_bc_no_dec_b:
0057C9r 2               ;		dec z80_c
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;dec_de:
0057C9r 2               ;		lda z80_e
0057C9r 2               ;		bne dec_de_no_dec_d
0057C9r 2               ;		dec z80_d
0057C9r 2               ;dec_de_no_dec_d:
0057C9r 2               ;		dec z80_e
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               ;ex_af_afs:
0057C9r 2               ;	rts
0057C9r 2               ;ex_de_hl:
0057C9r 2               ;		lda z80_e
0057C9r 2               ;		ldx z80_l
0057C9r 2               ;		stx z80_e
0057C9r 2               ;		sta z80_l
0057C9r 2               ;		lda z80_d
0057C9r 2               ;		ldx z80_h
0057C9r 2               ;		stx z80_d
0057C9r 2               ;		sta z80_h
0057C9r 2               ;		rts
0057C9r 2               ;
0057C9r 2               exx:
0057C9r 2  A5 rr        		lda z80_c
0057CBr 2  A4 rr        		ldy z80_cp
0057CDr 2  84 rr        		sty z80_c
0057CFr 2  85 rr        		sta z80_cp
0057D1r 2  A5 rr        		lda z80_b
0057D3r 2  A4 rr        		ldy z80_bp
0057D5r 2  84 rr        		sty z80_b
0057D7r 2  85 rr        		sta z80_bp
0057D9r 2  A5 rr        		lda z80_e
0057DBr 2  A4 rr        		ldy z80_ep
0057DDr 2  84 rr        		sty z80_e
0057DFr 2  85 rr        		sta z80_ep
0057E1r 2  A5 rr        		lda z80_d
0057E3r 2  A4 rr        		ldy z80_dp
0057E5r 2  84 rr        		sty z80_d
0057E7r 2  85 rr        		sta z80_dp
0057E9r 2  A5 rr        		lda scraddr
0057EBr 2  A4 rr        		ldy z80_lp
0057EDr 2  84 rr        		sty scraddr
0057EFr 2  85 rr        		sta z80_lp
0057F1r 2  A5 rr        		lda scraddr+1
0057F3r 2  A4 rr        		ldy z80_hp
0057F5r 2  84 rr        		sty scraddr+1
0057F7r 2  85 rr        		sta z80_hp
0057F9r 2  60           		rts
0057FAr 2               
0057FAr 2               ;ex_sp_hl:
0057FAr 2               ;		tsx
0057FAr 2               ;		lda $0103,x
0057FAr 2               ;		ldy z80_h
0057FAr 2               ;		sta z80_h
0057FAr 2               ;		tya
0057FAr 2               ;		sta $0103,x
0057FAr 2               ;		lda $0104,x
0057FAr 2               ;		ldy z80_l
0057FAr 2               ;		sta z80_l
0057FAr 2               ;		tya
0057FAr 2               ;		sta $104,x
0057FAr 2               ;		rts
0057FAr 2               ;
0057FAr 2               ;ldi:
0057FAr 2               ;	rts
0057FAr 2               ;ldir:
0057FAr 2               ;		ldy #$00
0057FAr 2               ;		ldx z80_b
0057FAr 2               ;		beq ldir_last_page
0057FAr 2               ;ldir_loop:
0057FAr 2               ;		lda (z80_hl),y
0057FAr 2               ;		sta (z80_de),y
0057FAr 2               ;		iny
0057FAr 2               ;		bne ldir_loop
0057FAr 2               ;		inc z80_h
0057FAr 2               ;		inc z80_d
0057FAr 2               ;		dex
0057FAr 2               ;		bne ldir_loop
0057FAr 2               ;ldir_last_page:
0057FAr 2               ;		lda z80_c
0057FAr 2               ;		beq ldir_end
0057FAr 2               ;ldir_last_page_loop:
0057FAr 2               ;		lda (z80_hl),y
0057FAr 2               ;		sta (z80_de),y
0057FAr 2               ;		iny
0057FAr 2               ;		cpy z80_c
0057FAr 2               ;		bne ldir_last_page_loop
0057FAr 2               ;ldir_end:
0057FAr 2               ;		stx z80_c
0057FAr 2               ;		stx z80_b
0057FAr 2               ;		tya
0057FAr 2               ;		clc
0057FAr 2               ;		adc z80_l
0057FAr 2               ;		sta z80_l
0057FAr 2               ;		bcc *+4
0057FAr 2               ;		inc z80_h
0057FAr 2               ;		tya
0057FAr 2               ;		clc
0057FAr 2               ;		adc z80_e
0057FAr 2               ;		sta z80_e
0057FAr 2               ;		bcc *+4
0057FAr 2               ;		inc z80_d
0057FAr 2               ;		rts
0057FAr 2               ;
0057FAr 2               ;lddr:		ldy #$00
0057FAr 2               ;lddr_loop:
0057FAr 2               ;		lda (z80_hl),y
0057FAr 2               ;		sta (z80_de),y
0057FAr 2               ;		jsr dec_hl
0057FAr 2               ;		jsr dec_de
0057FAr 2               ;		jsr dec_bc
0057FAr 2               ;		lda z80_b
0057FAr 2               ;		ora z80_c
0057FAr 2               ;		bne lddr_loop
0057FAr 2               ;		rts
0057FAr 2               ;ei:
0057FAr 2               ;		rts
0057FAr 2               ;di:
0057FAr 2               ;		rts
0057FAr 2               
0057FAr 2               ;-------------------------------------------------------------
0057FAr 2               ; Set bits in bitmem
0057FAr 2               ;-------------------------------------------------------------
0057FAr 2               
0057FAr 2               .if 0
0057FAr 2               z80_init:
0057FAr 2               	ldx #$00
0057FAr 2               	lda #$01
0057FAr 2               z80_init_loop:
0057FAr 2               	sta _bitmem0,x
0057FAr 2               	inx
0057FAr 2               	asl a
0057FAr 2               	bne z80_init_loop
0057FAr 2               	rts
0057FAr 2               .endif
0057FAr 2               
0057FAr 2               push_af:
0057FAr 2               push_bc:
0057FAr 2               push_de:
0057FAr 2               push_hl:
0057FAr 2               
0057FAr 2               pop_af:
0057FAr 2               pop_bc:
0057FAr 2               pop_de:
0057FAr 2               pop_ix:
0057FAr 2               pop_hl:
0057FAr 2               
0057FAr 2               add_hl_hl:
0057FAr 2               
0057FAr 2               inc_bc:
0057FAr 2               inc_de:
0057FAr 2               inc_hl:
0057FAr 2               inc_ix:
0057FAr 2               inc_sp:
0057FAr 2               
0057FAr 2               cpir:
0057FAr 2               
0057FAr 2               ex_af_af:
0057FAr 2               ;	rts
0057FAr 2               
0057FAr 1               
0057FAr 1               eind_asm:
0057FAr 1               eop:					; End Of Program
0057FAr 1               
0057FAr 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
0057FAr 1               
