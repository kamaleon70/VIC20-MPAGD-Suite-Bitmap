ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 1 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx xx xx xx  dummy:  .res 5
00002Br 2  xx           
00002Cr 2               
00002Cr 2  xx           contrl:	.res 1			; control 0 = keyboard, 1 = Joystick.
00002Dr 2  xx           joyval:	.res 1			; joystick reading.
00002Er 2  xx           frmno:	.res 1			; selected frame.
00002Fr 2               
00002Fr 2               ;----------------------------------------------------
00002Fr 2               ; Missing vars
00002Fr 2               ;----------------------------------------------------
00002Fr 2               
00002Fr 2  xx           loopa:	    .res 1
000030r 2  xx           loopb:	    .res 1
000031r 2  xx           loopc:	    .res 1
000032r 2  xx xx        FontPtr:    .res 2
000034r 2               
000034r 2               ; Local vars
000034r 2               
000034r 2  xx xx        scraddr:    .res 2
000036r 2  xx xx        fntaddr:    .res 2
000038r 2  xx xx        tileaddr:   .res 2
00003Ar 2  xx xx        bufaddr:    .res 2
00003Cr 2               
00003Cr 2  xx xx        tmp:        .res 2
00003Er 2               .if sflag
00003Er 2               scr_l:      .res 2
00003Er 2               scr_r:      .res 2
00003Er 2               scr_txt:    .res 2
00003Er 2               scr_tmp:    .res 2
00003Er 2               .endif
00003Er 2               
00003Er 2  xx           xtmp:	    .res 1
00003Fr 2  xx           spcnt:	    .res 1
000040r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000042r 2  xx           seed:	    .res 1		; seed for random numbers.
000043r 2               
000043r 2  xx           ccnt:       .res 1
000044r 2  xx           flag:	    .res 1
000045r 2  xx           rcol:	    .res 1
000046r 2  xx           rrow:	    .res 1
000047r 2               
000047r 2  xx           combyt:	    .res 1		; byte type compressed.
000048r 2  xx           comcnt:	    .res 1		; compression counter.
000049r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Ar 2  xx           qscnt:	    .res 1
00004Br 2               
00004Br 2  xx           sprptr:	    .res 1      ; not a ptr
00004Cr 2  xx           sprcnt:	    .res 1
00004Dr 2               
00004Dr 2  xx xx        skptr:	    .res 2		; search pointer.
00004Fr 2  xx           sktptr:	    .res 1      ; not a ptr
000050r 2  xx           tmproom:    .res 1
000051r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000053r 2               
000053r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000056r 2  xx           vsync_count:.res 1
000057r 2  xx           colpatt:    .res 1
000058r 2  xx           sprtmp:     .res 1
000059r 2  xx           sprtmp2:    .res 1
00005Ar 2  xx           sprshft:    .res 1
00005Br 2               
00005Br 2  xx           spriteink:  .res 1
00005Cr 2  xx           colour_byte:.res 1
00005Dr 2  xx           colour_xor: .res 1
00005Er 2  xx           objcol:	    .res 1
00005Fr 2               
00005Fr 2               .if mflag
00005Fr 2               TmpAddr:    .res 2
00005Fr 2               bwid:	    .res 1     ; box/menu width.
00005Fr 2               blen:	    .res 1     ; box/menu height.
00005Fr 2               btop:	    .res 1     ; box coordinates.
00005Fr 2               blft:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if pflag
00005Fr 2               shrctr:	    .res 1
00005Fr 2               explcnt:    .res 1
00005Fr 2               seed3:	    .res 1
00005Fr 2               .endif
00005Fr 2               
00005Fr 2               .if aflag
00005Fr 2               pbbuf:      .res 2
00005Fr 2               pbptr:      .res 2
00005Fr 2               .endif
00005Fr 2               
00005Fr 2  xx           tmp1:       .res 1
000060r 2  xx           tmp2:       .res 1
000061r 2               
000061r 2  xx           SOUNDS_STATUS:      .res 1
000062r 2               
000062r 2               ;----------------------------------------------------
000062r 2               ; Music player variables
000062r 2               ;----------------------------------------------------
000062r 2               
000062r 2               ;SONG_POS:		.res 1	; = $90
000062r 2               ;PATTERN_POS:		.res 1	; = $91
000062r 2               ;FRAME_COUNT:		.res 1	; = $92
000062r 2               ;FRAME_LENGTH:		.res 1	; = $93
000062r 2               ;SONG_NEXT_TRUE:		.res 1	; = $94
000062r 2               ;SONG_END_TRUE:		.res 1	; = $95
000062r 2               
000062r 2               ; 2 byte address of pattern data
000062r 2               ;CH1_PATTERN_POS:	.res 2	; = $96
000062r 2               ;CH2_PATTERN_POS:	.res 2	; = $98
000062r 2               ;CH3_PATTERN_POS:	.res 2	; = $9a
000062r 2               ;CH4_PATTERN_POS:	.res 2	; = $9c
000062r 2               
000062r 2               ; #$00 == inactive mode
000062r 2               ;CH1_ACTIVE:		.res 1	; = $a0
000062r 2               ;CH2_ACTIVE:		.res 1	; = $a1
000062r 2               ;CH3_ACTIVE:		.res 1	; = $a2
000062r 2               ;CH4_ACTIVE:		.res 1	; = $a3
000062r 2               
000062r 2               ;TEMP_GUY:		.res 1	; = $a4
000062r 2               ;CHAN_NOTE_DATA:		.res 1	; = $a5
000062r 2               ;CHANS_INACTIVE:		.res 1	; = $a6
000062r 2               ;FAST_COUNTER:		.res 1	; = $a7
000062r 2               ;MEGA_COUNTER:		.res 1	; = $a8
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "beethoven2.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	rflag			; Pre-shifted byte tables
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- Pre-shifted byte tables enabled"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 12
000000r 3               	CentreY		= 38
000000r 3               	CentreXMP   = 14
000000r 3               	CentreYMP   = 36
000000r 3               	timervalue	= 24000
000000r 3               	timerint	= 24000			; Interrupt timer 1/50 sec
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	CentreXMP   = 6
000000r 3               	CentreYMP   = 24
000000r 3               	timervalue	= 20000
000000r 3               	timerint	= 20000			; Interrupt timer 1/50 sec
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3               
000000r 3               ; Clear variables
000000r 3               
000000r 3  A9 00        	lda #0
000002r 3  AA           	tax
000003r 3               clrloop:
000003r 3  95 00        	sta 0,x
000005r 3  E8           	inx
000006r 3  D0 FB        	bne clrloop
000008r 3               
000008r 3  20 rr rr     	jsr game	 		; start the game.
00000Br 3  4C rr rr     	jmp start
00000Er 3               
00000Er 3               ; Don't change the order of these four.
00000Er 3               ; Menu routine relies on winlft following wintop.
00000Er 3               
00000Er 3  02           wintop:	.byte WINDOWTOP		; top of window.
00000Fr 3  00           winlft:	.byte WINDOWLFT		; left edge.
000010r 3  14           winhgt:	.byte WINDOWHGT		; window height.
000011r 3  16           winwid:	.byte WINDOWWID		; window width.
000012r 3  08           numob:	.byte NUMOBJ		; number of objects in game.
000013r 3               
000013r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000013r 3               
000013r 3  10           wntopx:	.byte (8 * WINDOWTOP)
000014r 3  00           wnlftx:	.byte (8 * WINDOWLFT)
000015r 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
000016r 3  A0           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)
000017r 3               
000017r 3               ; Make sure pointers are arranged in the same order as the data itself.
000017r 3               
000017r 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
000019r 3               
000019r 3               ; Assorted game routines which can go in contended memory.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for inventory.
000019r 3               ; called by the INV command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with objects seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of INV menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               .if mflag
000019r 3               minve:
000019r 3               .if xflag
000019r 3               	lda #WINDOWHGT
000019r 3               	asl a
000019r 3               	sta winhgt
000019r 3               	lda #WINDOWWID
000019r 3               	asl a
000019r 3               	sta winwid
000019r 3               .endif
000019r 3               	lda #<(invdis)		; routine address.
000019r 3               	sta mod0+1		; set up menu routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(invdis)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               	lda #<(fopt)		; find option from available objects.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fopt)
000019r 3               	sta mod1+1+1
000019r 3               	jmp dbox		; do menu routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Modify for menu.
000019r 3               ; called by the MENU command
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  X   = message nr with menu items seperated with ,
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected line nr of MENU menu
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               mmenu:
000019r 3               	lda #<(always)		; routine address.
000019r 3               	sta mod0+1		; set up routine.
000019r 3               	sta mod2+1		; set up count routine.
000019r 3               	lda #>(always)
000019r 3               	sta mod0+2
000019r 3               	sta mod2+2
000019r 3               
000019r 3               	lda #<(fstd)		; standard option selection.
000019r 3               	sta mod1+1		; set up routine.
000019r 3               	lda #>(fstd)
000019r 3               	sta mod1+2
000019r 3               
000019r 3               ; Drop through into box routine.
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; Work out size of box for message or menu.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               dbox:
000019r 3               	lda #<msgdat		; pointer to messages.
000019r 3               	sta z80_l
000019r 3               	lda #>msgdat
000019r 3               	sta z80_h
000019r 3               
000019r 3               	jsr getwrd		; get message number.
000019r 3               
000019r 3               	lda z80_h		; store pointer to message.
000019r 3               	sta TmpAddr
000019r 3               	lda z80_l
000019r 3               	sta TmpAddr+1
000019r 3               
000019r 3               	lda #1			; height.
000019r 3               	sta z80_d
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               	sta z80_e		; maximum width.
000019r 3               dbox5:
000019r 3               	lda #0			; this line"s width.
000019r 3               	sta z80_b
000019r 3               mod2:
000019r 3               	jsr always		; item in player"s possession?
000019r 3               	cmp #255
000019r 3               	bne dbox6		; not in inventory, skip this line.
000019r 3               	inc z80_d		; add to tally.
000019r 3               dbox6:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a		; reached end of line?
000019r 3               	cmp #','
000019r 3               	beq dbox3		; yes.
000019r 3               	cmp #ASCII_NEWLINE
000019r 3               	beq dbox3		; yes.
000019r 3               	inc z80_b		; add to this line"s width.
000019r 3               	lda z80_a
000019r 3               	bmi dbox4		; end of message? yes, end count.
000019r 3               	jmp dbox6		; repeat until we find the end.
000019r 3               dbox3:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox5		; no, carry on looking.
000019r 3               	lda z80_b		; make this the widest so far.
000019r 3               	sta z80_e
000019r 3               	jmp dbox5		; keep looking.
000019r 3               dbox4:
000019r 3               	lda z80_e		; maximum line width.
000019r 3               	cmp z80_b		; have we exceeded longest so far?
000019r 3               	bpl dbox8		; no, carry on looking.
000019r 3               	lda z80_b		; final line is the longest so far.
000019r 3               	sta z80_e
000019r 3               dbox8:
000019r 3               	dec z80_d		; decrement items found.
000019r 3               	bne :+			; total was zero.
000019r 3               	lda #255
000019r 3               	sta varopt
000019r 3               	jmp dbox15
000019r 3               :
000019r 3               	lda z80_e		; longest line.
000019r 3               	bne :+			; was it zero?
000019r 3               	jmp dbox15		; total was zero.
000019r 3               :
000019r 3               	sta bwid		; set up size.
000019r 3               	lda z80_d
000019r 3               	sta blen
000019r 3               
000019r 3               ;--------------------------------------------------------------
000019r 3               ; That's set up our box size.
000019r 3               ;--------------------------------------------------------------
000019r 3               
000019r 3               	lda winhgt		; window height in characters.
000019r 3               	sec
000019r 3               	sbc z80_d		; subtract height of box.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc wintop		; add top edge of window.
000019r 3               	sta btop		; set up box top.
000019r 3               
000019r 3               	lda winwid		; window width in characters.
000019r 3               	sec
000019r 3               	sbc z80_e		; subtract box width.
000019r 3               	lsr a			; divide by 2.
000019r 3               	clc
000019r 3               	adc winlft		; add left edge of window.
000019r 3               	sta blft		; box left.
000019r 3               
000019r 3               	lda #<(FONT-256)		; font.
000019r 3               	sta grbase		; set up for text display.
000019r 3               	lda #>(FONT-256)
000019r 3               	sta grbase+1
000019r 3               
000019r 3               	lda TmpAddr+1		; restore message pointer.
000019r 3               	sta z80_l
000019r 3               	lda TmpAddr
000019r 3               	sta z80_h
000019r 3               
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set display coordinate.
000019r 3               	lda #0			; start at object zero.
000019r 3               	sta combyt		; store number of object in combyt.
000019r 3               dbox2:
000019r 3               	lda combyt		; get object number.
000019r 3               	sta z80_a
000019r 3               mod0:
000019r 3               	jsr always		; check inventory for display.
000019r 3               	cmp #255
000019r 3               	beq :+
000019r 3               	jmp dbox13		; not in inventory, skip this line.
000019r 3               :
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set left display position.
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_b		; store width.
000019r 3               dbox0:
000019r 3               	ldy #0			; get character.
000019r 3               	lda (z80_hl),y
000019r 3               	cmp #','		; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               	cmp #ASCII_NEWLINE			; end of line?
000019r 3               	beq dbox1		; yes, next one.
000019r 3               
000019r 3               	cmp #141			; end of line?
000019r 3               	bne :+
000019r 3               	dec bwid
000019r 3               	jmp dbox7		; yes, next one.
000019r 3               :
000019r 3               	dec z80_b		; one less to display.
000019r 3               	and #127		; remove terminator.
000019r 3               
000019r 3               	jsr pchr		; display on screen.
000019r 3               
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	sta z80_a
000019r 3               	inc z80_l		; next character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	lda z80_a
000019r 3               	cmp #128		; end of message?
000019r 3               	bmi :+
000019r 3               	jmp dbox7		; yes, job done.
000019r 3               :
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	beq :+			; are any left?
000019r 3               	jmp dbox0		; yes, continue.
000019r 3               :
000019r 3               ;---------------------------------------------------
000019r 3               ; Reached limit of characters per line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dbox9:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #ASCII_NEWLINE	; another line?
000019r 3               	beq dbox10		; yes, do next line.
000019r 3               	cmp #128		; end of message?
000019r 3               	bcs :+
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox9
000019r 3               
000019r 3               ;---------------------------------------------------
000019r 3               ; Fill box to end of line.
000019r 3               ;---------------------------------------------------
000019r 3               
000019r 3               dboxf:
000019r 3               	lda #32			; space character.
000019r 3               	jsr pchr		; display character.
000019r 3               	dec z80_b
000019r 3               	beq :+
000019r 3               	jmp dboxf		; repeat for remaining chars on line.
000019r 3               :
000019r 3               	rts
000019r 3               dbox1:
000019r 3               	inc z80_l		; skip character.
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	jsr dboxf		; fill box out to right side.
000019r 3               dbox10:
000019r 3               	inc dispy		; y coordinate down a line next position.
000019r 3               	jmp dbox2		; next line.
000019r 3               dbox7:
000019r 3               	lda z80_b		; chars remaining.
000019r 3               	bne :+			; are any left?
000019r 3               	jmp dbox11		; no, nothing to draw.
000019r 3               :
000019r 3               	jsr dboxf		; fill message to line.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Drawn the box menu, now select option.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox11:
000019r 3               	lda btop		; box top.
000019r 3               	sta dispy		; set bar position.
000019r 3               dbox14:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	bne dbox14		; yes, debounce it.
000019r 3               	jsr dbar		; draw bar.
000019r 3               dbox12:
000019r 3               	jsr joykey		; get controls.
000019r 3               	cmp #$7f		; anything pressed?
000019r 3               	beq dbox12		; no, nothing.
000019r 3               	and #16			; fire button pressed?
000019r 3               	bne :+
000019r 3               mod1:
000019r 3               	jmp fstd		; yes, job done.
000019r 3               :
000019r 3               	jsr dbar		; delete bar.
000019r 3               
000019r 3               	lda joyval		; joystick reading.
000019r 3               	and #8			; going up?
000019r 3               	beq dboxu		; yes, go up.
000019r 3               
000019r 3               	ldx dispy		; vertical position of bar.
000019r 3               	inx			; look down.
000019r 3               	txa
000019r 3               	sec
000019r 3               	sbc btop		; find distance from top.
000019r 3               	cmp blen		; top of box.
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	inc dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               dboxu:
000019r 3               	lda dispy		; vertical position of bar.
000019r 3               	cmp btop		; are we at the top?
000019r 3               	bne :+
000019r 3               	jmp dbox14		; yes, go no further.
000019r 3               :
000019r 3               	dec dispy		; move bar.
000019r 3               	jmp dbox14		; continue.
000019r 3               fstd:
000019r 3               	lda dispy		; bar position.
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta varopt		; store the option.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Option not available.  Skip this line.
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbox13:
000019r 3               	ldy #0
000019r 3               	lda (z80_hl),y		; get character.
000019r 3               	inc z80_l		; next one.
000019r 3               
000019r 3               	bne :+
000019r 3               	inc z80_h
000019r 3               :
000019r 3               	cmp #','		; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               	cmp #ASCII_NEWLINE			; another line?
000019r 3               	bne :+
000019r 3               	jmp dbox2		; yes, do next line.
000019r 3               :
000019r 3               
000019r 3               	bpl :+			; end of message?
000019r 3               	jmp dbox11		; yes, finish message.
000019r 3               :
000019r 3               	jmp dbox13
000019r 3               dbox15:
000019r 3               .if xflag
000019r 3               	lda #WINDOWWID
000019r 3               	sta winwid
000019r 3               	lda #WINDOWHGT
000019r 3               	sta winhgt
000019r 3               .endif
000019r 3               	lda TmpAddr		; pop message pointer from the stack.
000019r 3               	sta z80_h
000019r 3               	lda TmpAddr+1
000019r 3               	sta z80_l
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Invert bar
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               dbar:
000019r 3               	lda blft		; box left.
000019r 3               	sta dispx		; set display coordinate.
000019r 3               	jsr gprad		; get printing address.
000019r 3               
000019r 3               	lda bwid		; box width.
000019r 3               	sta z80_c		; loop counter in c.
000019r 3               	lda z80_h
000019r 3               	sta z80_d		; store screen address high byte.
000019r 3               dbar1:
000019r 3               	ldx #7			; pixel height in b.
000019r 3               dbar0:
000019r 3               	ldy scrtab,x
000019r 3               	lda (scraddr),y		; get screen byte.
000019r 3               	eor #255		; reverse all bits.
000019r 3               	sta (scraddr),y		; write back to screen.
000019r 3               	dex			; next line down.
000019r 3               	bpl dbar0		; draw rest of character.
000019r 3               
000019r 3               	lda scraddr
000019r 3               	adc #16
000019r 3               	sta scraddr
000019r 3               	bcc :+
000019r 3               	inc scraddr+1
000019r 3               :
000019r 3               	dec z80_c		; decrement character counter.
000019r 3               	bne dbar1		; repeat for whole line.
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Point to object
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  A = object number, A=255 if already in possession
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               invdis:
000019r 3               	lda z80_l		; store message text pointer.
000019r 3               	pha
000019r 3               	lda z80_h
000019r 3               	pha
000019r 3               	lda combyt		; object number.
000019r 3               	inc combyt		; ready for next one.
000019r 3               	jsr gotob		; check if we have object.
000019r 3               	tay
000019r 3               	pla
000019r 3               	sta z80_h
000019r 3               	pla
000019r 3               	sta z80_l
000019r 3               	tya
000019r 3               	rts
000019r 3               
000019r 3               ;------------------------------------------------------
000019r 3               ; Find option selected.
000019r 3               ;
000019r 3               ; Input:
000019r 3               ;  -
000019r 3               ;
000019r 3               ; Output:
000019r 3               ;  OPT = selected object
000019r 3               ;------------------------------------------------------
000019r 3               
000019r 3               fopt:
000019r 3               	lda dispy
000019r 3               	sec
000019r 3               	sbc btop		; find selected option.
000019r 3               	sta tmp+2		; option selected in b register.
000019r 3               	inc tmp+2
000019r 3               
000019r 3               	lda #0			; set to first item.
000019r 3               	sta combyt		; object number.
000019r 3               fopt0:
000019r 3               	jsr fobj		; find next object in inventory.
000019r 3               	dec tmp+2
000019r 3               	bne fopt0		; repeat for relevant steps down the list.
000019r 3               
000019r 3               	lda combyt		; get option.
000019r 3               	sta varopt		; store the option.
000019r 3               	dec varopt		; one less, due to where we increment combyt.
000019r 3               	jmp redraw		; redraw the screen.
000019r 3               fobj:
000019r 3               	ldy combyt		; object number.
000019r 3               	inc combyt		; ready for next item.
000019r 3               	tya
000019r 3               	jsr gotob		; do we have this item?
000019r 3               	cmp #255
000019r 3               	bne :+
000019r 3               	rts
000019r 3               :
000019r 3               	jmp fobj		; yes, it's on the list.
000019r 3               .endif
000019r 3               
000019r 3               ;----------------------------------------------------
000019r 3               ; Clear sprite table.
000019r 3               ;
000019r 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
000019r 3               ;----------------------------------------------------
000019r 3               
000019r 3               xspr:
000019r 3  A9 FF        	lda #255		; clear byte.
00001Br 3  A2 00        	ldx #0			; length of table.
00001Dr 3               xspr0:
00001Dr 3  9D rr rr     	sta sprtab,x		; sprite table.
000020r 3  E8           	inx			; move to next byte.
000021r 3  E0 CC        	cpx #SPRBUF
000023r 3  D0 F8        	bne xspr0		; repeat for rest of table.
000025r 3  60           	rts
000026r 3               
000026r 3               ;-------------------------------------------------------------
000026r 3               ; Initialise all objects.
000026r 3               ;
000026r 3               ; Reset current room,y,x to start room,y,x for all objects
000026r 3               ;-------------------------------------------------------------
000026r 3               
000026r 3               .if oflag
000026r 3               iniob:
000026r 3  A9 rr        	lda #<objdta		; objects table.
000028r 3  85 rr        	sta z80_x
00002Ar 3  A9 rr        	lda #>objdta
00002Cr 3  85 rr        	sta z80_i
00002Er 3               
00002Er 3  AE rr rr     	ldx numob 		; number of objects in the game.
000031r 3               iniob0:
000031r 3  A0 24        	ldy #36
000033r 3  B1 rr        	lda (z80_ix),y 		; start screen.
000035r 3  A0 21        	ldy #33
000037r 3  91 rr        	sta (z80_ix),y 		; set start screen.
000039r 3               
000039r 3  A0 25        	ldy #37
00003Br 3  B1 rr        	lda (z80_ix),y 		; find start y.
00003Dr 3  A0 22        	ldy #34
00003Fr 3  91 rr        	sta (z80_ix),y 		; set start y.
000041r 3               
000041r 3  A0 26        	ldy #38
000043r 3  B1 rr        	lda (z80_ix),y 		; get initial x.
000045r 3  A0 23        	ldy #35
000047r 3  91 rr        	sta (z80_ix),y 		; set x coord.
000049r 3               
000049r 3  18           	clc 			; point to next object.
00004Ar 3  A5 rr        	lda z80_x
00004Cr 3  69 27        	adc #39			; distance between objects.
00004Er 3  85 rr        	sta z80_x
000050r 3  90 02        	bcc :+
000052r 3  E6 rr        	inc z80_i
000054r 3               :
000054r 3  CA           	dex 			; repeat.
000055r 3  D0 DA        	bne iniob0
000057r 3               
000057r 3  60           	rts
000058r 3               .endif
000058r 3               
000058r 3               ;-----------------------------------------------
000058r 3               ; Redraw the screen.
000058r 3               ;
000058r 3               ; Remove old copy of all sprites for redraw.
000058r 3               ;-----------------------------------------------
000058r 3               
000058r 3               redraw:
000058r 3               .if xflag
000058r 3               	lda #WINDOWWID
000058r 3               	sta winwid
000058r 3               	lda #WINDOWHGT
000058r 3               	sta winhgt
000058r 3               .endif
000058r 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00005Ar 3  48           	pha
00005Br 3  A5 rr        	lda z80_x
00005Dr 3  48           	pha
00005Er 3               
00005Er 3  20 rr rr     	jsr droom		; show screen layout.
000061r 3               .if oflag
000061r 3  20 rr rr     	jsr shwob		; draw objects.
000064r 3               .endif
000064r 3               numsp0:
000064r 3  A9 0C        	lda #NUMSPR		; sprites to draw.
000066r 3  85 rr        	sta tmp
000068r 3               
000068r 3  A9 rr        	lda #<sprtab		; sprite table.
00006Ar 3  85 rr        	sta z80_x
00006Cr 3  A9 rr        	lda #>sprtab
00006Er 3  85 rr        	sta z80_i
000070r 3               redrw0:
000070r 3  A0 00        	ldy #0
000072r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
000074r 3  C9 FF        	cmp #255		; is it enabled?
000076r 3  F0 0B        	beq redrw1 		; no, find next one.
000078r 3               
000078r 3  A0 03        	ldy #var_Y
00007Ar 3  B1 rr        	lda (z80_ix),y 		; sprite y.
00007Cr 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
00007Er 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000080r 3               
000080r 3  20 rr rr     	jsr sspria		; show single sprite.
000083r 3               
000083r 3               redrw1:
000083r 3  18           	clc			; next sprite.
000084r 3  A5 rr        	lda z80_x
000086r 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
000088r 3  85 rr        	sta z80_x
00008Ar 3  90 02        	bcc :+
00008Cr 3  E6 rr        	inc z80_i
00008Er 3               :
00008Er 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000090r 3  D0 DE        	bne redrw0
000092r 3               
000092r 3               rpblc1:
000092r 3               ;	jsr dshrp		; redraw shrapnel.
000092r 3               
000092r 3               .if aflag
000092r 3               	jsr rbloc		; draw blocks for this screen
000092r 3               .endif
000092r 3  68           	pla			; retrieve sprite pointer.
000093r 3  85 rr        	sta z80_x
000095r 3  68           	pla
000096r 3  85 rr        	sta z80_i
000098r 3               
000098r 3  60           	rts
000099r 3               
000099r 3               ;----------------------------------------------------------------------
000099r 3               ; Clear screen routine.
000099r 3               ;
000099r 3               ; Fill screenmem $9400-$97ff with ScrFillByte
000099r 3               ;----------------------------------------------------------------------
000099r 3               
000099r 3               cls:
000099r 3  A9 10        	lda #>CharAddress	; Character RAM address.
00009Br 3  8D rr rr     	sta clrdata+2
00009Er 3               
00009Er 3               ; Clear bitmap data
00009Er 3               
00009Er 3  A9 00        	lda #ScrFillByte	; Clear screen
0000A0r 3  A0 00        	ldy #0
0000A2r 3  A2 10        	ldx #16
0000A4r 3               clrdata:
0000A4r 3  99 00 10     	sta CharAddress,y
0000A7r 3  C8           	iny
0000A8r 3  D0 FA        	bne clrdata
0000AAr 3  EE rr rr     	inc clrdata+2
0000ADr 3  CA           	dex
0000AEr 3  D0 F4        	bne clrdata
0000B0r 3               
0000B0r 3               ; Clear colour attributes
0000B0r 3               
0000B0r 3  AD rr rr     	lda fontcol
0000B3r 3  A2 00        	ldx #0
0000B5r 3               clrcolour:
0000B5r 3  9D 00 94     	sta ColorAttr-$200,x
0000B8r 3  9D 00 96     	sta ColorAttr,x
0000BBr 3  E8           	inx
0000BCr 3  D0 F7        	bne clrcolour
0000BEr 3  60           	rts
0000BFr 3               
0000BFr 3               ;----------------------------------------------------------------------
0000BFr 3               ; Clear colour attributes
0000BFr 3               ;
0000BFr 3               ; Reset colour attributes to fontcol
0000BFr 3               ;----------------------------------------------------------------------
0000BFr 3               
0000BFr 3               clrcol:
0000BFr 3  AD rr rr     	lda fontcol		; Clear colour attributes
0000C2r 3  A2 00        	ldx #0
0000C4r 3               clscol:
0000C4r 3  9D 00 96     	sta ColorAttr,x
0000C7r 3  E8           	inx
0000C8r 3  E0 F2        	cpx #242
0000CAr 3  D0 F8        	bne clscol
0000CCr 3               
0000CCr 3  60           	rts
0000CDr 3               
0000CDr 3               ;----------------------------------------------------------------------
0000CDr 3               ; FODDER check
0000CDr 3               ;----------------------------------------------------------------------
0000CDr 3               
0000CDr 3               .if pflag .or dflag
0000CDr 3               fdchk:
0000CDr 3               	cmp #FODDER 		; is it fodder?
0000CDr 3               	beq :+
0000CDr 3               	rts 			; no.
0000CDr 3               :
0000CDr 3               	lda #0			; wipe fodder in MAP
0000CDr 3               	ldy #0
0000CDr 3               	sta (bufaddr),y 	; rewrite block type.
0000CDr 3               
0000CDr 3               	lda dispx		; x=x/8
0000CDr 3               	pha
0000CDr 3               	lsr a
0000CDr 3               	lsr a
0000CDr 3               	lsr a
0000CDr 3               	sta dispx
0000CDr 3               
0000CDr 3               	lda dispy		; y=y/8
0000CDr 3               	pha
0000CDr 3               	lsr a
0000CDr 3               	lsr a
0000CDr 3               	lsr a
0000CDr 3               	sta dispy
0000CDr 3               
0000CDr 3               	lda #0 			; block to write.
0000CDr 3               	jsr pattr 		; write block.
0000CDr 3               
0000CDr 3               	pla
0000CDr 3               	sta dispy
0000CDr 3               	pla
0000CDr 3               	sta dispx
0000CDr 3               	rts
0000CDr 3               .endif
0000CDr 3               
0000CDr 3               ;----------------------------------------------------
0000CDr 3               ; Scrolly text and puzzle variables.
0000CDr 3               ;----------------------------------------------------
0000CDr 3               
0000CDr 3               .if sflag
0000CDr 3               txtbit:	.byte 128		; bit to write.
0000CDr 3               txtwid:	.byte 16		; width of ticker message.
0000CDr 3               txtpos:	.word msgdat
0000CDr 3               txtini:	.word msgdat
0000CDr 3               txtscr:	.word ScreenAddr
0000CDr 3               .endif
0000CDr 3               
0000CDr 3               ;----------------------------------------------------
0000CDr 3               ; Specialist routines.
0000CDr 3               ; Process shrapnel.
0000CDr 3               ;----------------------------------------------------
0000CDr 3               proshr:
0000CDr 3               .if pflag
0000CDr 3               	lda #<SHRAPN		; table.
0000CDr 3               	sta z80_x
0000CDr 3               	lda #>SHRAPN
0000CDr 3               	sta z80_i
0000CDr 3               
0000CDr 3               	lda #NUMSHR		; shrapnel pieces to process.
0000CDr 3               	sta shrctr
0000CDr 3               prosh0:
0000CDr 3               	ldy #0
0000CDr 3               	lda (z80_ix),y		; on/off marker.
0000CDr 3               	asl a
0000CDr 3               proshx:
0000CDr 3               	bcs :+
0000CDr 3               	jsr prosh1 		; on, so process it.
0000CDr 3               :
0000CDr 3               	clc
0000CDr 3               	lda z80_x
0000CDr 3               	adc #SHRSIZ
0000CDr 3               	sta z80_x
0000CDr 3               	bcc :+
0000CDr 3               	inc z80_i
0000CDr 3               :
0000CDr 3               	dec shrctr		; round again.
0000CDr 3               	bne prosh0
0000CDr 3               .endif
0000CDr 3               .if sflag
0000CDr 3               	jsr scrly
0000CDr 3               .endif
0000CDr 3  60           	rts
0000CEr 3               
0000CEr 3               .if pflag
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Proces shrapnel piece
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               prosh1:
0000CEr 3               	jsr plot 		; delete the pixel.
0000CEr 3               
0000CEr 3               	lda #<shrptr		; shrapnel routine pointers.
0000CEr 3               	sta z80_l
0000CEr 3               	lda #>shrptr
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_ix),y		; restore shrapnel type.
0000CEr 3               	jsr prosh2 		; run the routine.
0000CEr 3               	jsr chkxy		; check x and y are good before we redisplay.
0000CEr 3               
0000CEr 3               	lda #<SHRSIZ 		; distance to next.
0000CEr 3               	sta z80_e
0000CEr 3               	lda #>SHRSIZ
0000CEr 3               	sta z80_d
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Run the routine
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               prosh2:
0000CEr 3               	asl a 			; 2 bytes per address.
0000CEr 3               	tay
0000CEr 3               	lda shrptr,y
0000CEr 3               	sta z80_l
0000CEr 3               	lda shrptr+1,y 		; fetch high byte from table.
0000CEr 3               	sta z80_h
0000CEr 3               	jmp (z80_hl) 		; jump to routine.
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Paricle routine table
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               shrptr:	.word laser		; laser.
0000CEr 3               	.word trail		; vapour trail.
0000CEr 3               	.word shrap		; shrapnel from explosion.
0000CEr 3               	.word dotl		; horizontal starfield left.
0000CEr 3               	.word dotr		; horizontal starfield right.
0000CEr 3               	.word dotu		; vertical starfield up.
0000CEr 3               	.word dotd		; vertical starfield down.
0000CEr 3               	.word ptcusr		; user particle.
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Explosion shrapnel.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               shrap:
0000CEr 3               	ldy #1
0000CEr 3               	lda (z80_ix),y 		; get the angle.
0000CEr 3               	clc
0000CEr 3               	adc #<shrsin		; shrapnel sine table.
0000CEr 3               	sta z80_l
0000CEr 3               	lda #>shrsin
0000CEr 3               	adc #0
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_hl),y 		; fetch value from table.
0000CEr 3               	sta z80_e
0000CEr 3               	inc z80_l 		; next byte of table.
0000CEr 3               	bne :+
0000CEr 3               	inc z80_h
0000CEr 3               :
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_hl),y		; fetch value from table.
0000CEr 3               	sta z80_d
0000CEr 3               	inc z80_l		; next byte of table.
0000CEr 3               	bne :+
0000CEr 3               	inc z80_h
0000CEr 3               :
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_hl),y 		; fetch value from table.
0000CEr 3               	sta z80_c
0000CEr 3               	inc z80_l 		; next byte of table.
0000CEr 3               	bne :+
0000CEr 3               	inc z80_h
0000CEr 3               :
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_hl),y 		; fetch value from table.
0000CEr 3               	sta z80_b
0000CEr 3               
0000CEr 3               	ldy #2
0000CEr 3               	lda (z80_ix),y 		; x coordinate in hl.
0000CEr 3               	clc
0000CEr 3               	adc z80_e		; add sine lb
0000CEr 3               	sta (z80_ix),y		; store new coordinate lb.
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	adc z80_d		; add sine hb
0000CEr 3               	sta (z80_ix),y		; store new coordinate hb.
0000CEr 3               
0000CEr 3               	ldy #4
0000CEr 3               	lda (z80_ix),y	 	; y coordinate in hl.
0000CEr 3               	clc
0000CEr 3               	adc z80_c		; add cosine lb
0000CEr 3               	sta (z80_ix),y		; store new coordinate lb.
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	adc z80_b		; add cosine lb
0000CEr 3               	sta (z80_ix),y		; store new coordinate hb.
0000CEr 3               
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Move dots
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               dotl:
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	sec
0000CEr 3               	sbc #1		 	; move left.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               dotr:
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	clc
0000CEr 3               	adc #1		 	; move left.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               dotu:
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	sec
0000CEr 3               	sbc #1		 	; move up.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               dotd:
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	clc
0000CEr 3               	adc #1			; move down.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Check if coordinates are ok before redrawing at new position.
0000CEr 3               ;
0000CEr 3               ; left:   X>L		X=L	Ok
0000CEr 3               ; right:  R+15>X	X=R	Ok
0000CEr 3               ; top:    Y>T		Y=T	Ok
0000CEr 3               ; bottom: B+15>Y	Y=B	Ok
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               chkxy:
0000CEr 3               
0000CEr 3               ; top:    Y>T		Y=T	Ok
0000CEr 3               
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000CEr 3               	cmp wntopx		; window top.
0000CEr 3               	bcs :+			; compare with top window limit.
0000CEr 3               	jmp kilshr		; out of window, kill shrapnel.
0000CEr 3               :
0000CEr 3               ; left:   X>L		X=L	Ok
0000CEr 3               
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000CEr 3               	cmp wnlftx		; left edge.
0000CEr 3               	bcs :+			; compare with left window limit.
0000CEr 3               	jmp kilshr		; out of window, kill shrapnel.
0000CEr 3               :
0000CEr 3               ; bottom: B+15>Y	Y=B	Ok
0000CEr 3               
0000CEr 3               	lda wnbotx		; point to bottom.
0000CEr 3               	clc
0000CEr 3               	adc #15
0000CEr 3               	ldy #3
0000CEr 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000CEr 3               	bcs :+			; compare with shrapnel x coordinate.
0000CEr 3               	jmp kilshr		; off screen, kill shrapnel..
0000CEr 3               :
0000CEr 3               ; right:  R+15>X	X=R	Ok
0000CEr 3               
0000CEr 3               	lda wnrgtx		; point to right edge.
0000CEr 3               	clc
0000CEr 3               	adc #15
0000CEr 3               	ldy #5
0000CEr 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000CEr 3               	bcs :+			; compare with window limit.
0000CEr 3               	jmp kilshr		; off screen, kill shrapnel.
0000CEr 3               :
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Drop through.
0000CEr 3               ; Display shrapnel.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               plot:
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y		; y integer.
0000CEr 3               	sta dispy	 	; workspace coordinates.
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y	 	; x integer.
0000CEr 3               	sta dispx 		; workspace coordinates.
0000CEr 3               
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_ix),y 		; type.
0000CEr 3               	bne :+			; is it a laser?
0000CEr 3               	jmp plot1 		; yes, draw laser instead.
0000CEr 3               :
0000CEr 3               plot0:
0000CEr 3               	lda dispx		; which pixel within byte do we
0000CEr 3               	and #7			; want to set first?
0000CEr 3               	tay
0000CEr 3               	lda dots,y 		; table of small pixel positions.
0000CEr 3               	sta z80_e 		; get value.
0000CEr 3               
0000CEr 3               	jsr scadd 		; screen address.
0000CEr 3               	ldy #0
0000CEr 3               	lda (scraddr),y		; see what's already there.
0000CEr 3               	eor z80_e
0000CEr 3               	sta (scraddr),y 	; put back on screen.
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               plot1:
0000CEr 3               	jsr scadd 		; screen address.
0000CEr 3               	ldy #0
0000CEr 3               	lda (scraddr),y 	; fetch byte there.
0000CEr 3               	eor #255 		; toggle all bits.
0000CEr 3               	sta (scraddr),y 	; new byte.
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Switch off shrapnel
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               kilshr:
0000CEr 3               	lda #128
0000CEr 3               	ldy #0
0000CEr 3               	sta (z80_ix),y	; switch off shrapnel.
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Sine/cosine table
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               shrsin:	.word 0,1024,391,946,724,724,946,391
0000CEr 3               	.word 1024,0,946,65144,724,64811,391,64589
0000CEr 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0000CEr 3               	.word 64512,0,64589,391,64811,724,65144,946
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Create trail
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               trail:
0000CEr 3               	ldy #1
0000CEr 3               	lda (z80_ix),y 	; time remaining.
0000CEr 3               	sec
0000CEr 3               	sbc #1
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	bne :+
0000CEr 3               	jmp trailk		; time to switch it off.
0000CEr 3               :
0000CEr 3               	jsr qrand		; get a random number.
0000CEr 3               	lsr a 			; x or y axis?
0000CEr 3               	bcc :+
0000CEr 3               	jmp trailv		; use y.
0000CEr 3               :
0000CEr 3               ; Trail horizontal
0000CEr 3               
0000CEr 3               	lsr a 			; which direction?
0000CEr 3               	bcc :+
0000CEr 3               	jmp traill		; go left.
0000CEr 3               :
0000CEr 3               ; Trail right
0000CEr 3               
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	clc
0000CEr 3               	adc #1	 		; go right.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ; Trail left
0000CEr 3               
0000CEr 3               traill:
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	sec
0000CEr 3               	sbc #1 			; go left.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ; Trail vertical
0000CEr 3               
0000CEr 3               trailv:
0000CEr 3               	lsr a		 	; which direction?
0000CEr 3               	bcc :+
0000CEr 3               	jmp trailu		; go up.
0000CEr 3               :
0000CEr 3               ; Trail down
0000CEr 3               
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	clc
0000CEr 3               	adc #1 			; go down.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ; Trail up
0000CEr 3               
0000CEr 3               trailu:
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y
0000CEr 3               	sec
0000CEr 3               	sbc #1 			; go up.
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ; Kill trail
0000CEr 3               
0000CEr 3               trailk:
0000CEr 3               	lda #200		; set off-screen to kill vapour trail.
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Create laser beam
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               laser:
0000CEr 3               	ldy #1
0000CEr 3               	lda (z80_ix),y 		; direction.
0000CEr 3               	ror a 			; left or right?
0000CEr 3               	bcs :+
0000CEr 3               	jmp laserl		; move left.
0000CEr 3               :
0000CEr 3               ; Laser right
0000CEr 3               
0000CEr 3               	lda #8			; distance to travel.
0000CEr 3               	sta z80_b
0000CEr 3               	jmp laserm		; move laser.
0000CEr 3               
0000CEr 3               ; Laser left
0000CEr 3               
0000CEr 3               laserl:
0000CEr 3               	lda #248		; distance to travel.
0000CEr 3               	sta z80_b
0000CEr 3               laserm:
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_ix),y		; x position.
0000CEr 3               	clc
0000CEr 3               	adc z80_b		; add distance.
0000CEr 3               	sta (z80_ix),y		; set new x coordinate.
0000CEr 3               
0000CEr 3               ; Test new block.
0000CEr 3               
0000CEr 3               	sta dispx 		; set x for block collision detection purposes.
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_ix),y 		; get y.
0000CEr 3               	sta dispy		; set coordinate for collision test.
0000CEr 3               	jsr tstbl 		; get block type there.
0000CEr 3               	cmp #WALL		; is it solid?
0000CEr 3               	bne :+
0000CEr 3               	jmp trailk		; yes, it cannot pass.
0000CEr 3               :
0000CEr 3               .if pflag .or dflag
0000CEr 3                       cmp #FODDER             ; is it fodder?
0000CEr 3                       bne :+
0000CEr 3                       jsr fdchk               ; remove fodder block.
0000CEr 3                       jmp trailk              ; destroy laser.
0000CEr 3               :
0000CEr 3               .endif
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Dots mask
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               dots:	.byte 128,64,32,16,8,4,2,1
0000CEr 3               
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Plot, preserving de.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               plotde:
0000CEr 3               	lda z80_d 		; put de on stack.
0000CEr 3               	pha
0000CEr 3               	lda z80_e
0000CEr 3               	pha
0000CEr 3               
0000CEr 3               	jsr plot 		; plot pixel.
0000CEr 3               
0000CEr 3               	pla			; restore de from stack.
0000CEr 3               	sta z80_e
0000CEr 3               	pla
0000CEr 3               	sta z80_d
0000CEr 3               
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Shoot a laser.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               shoot:
0000CEr 3               	sta z80_c		; store direction in c register.
0000CEr 3               	ldy #8
0000CEr 3               	lda (z80_ix),y 		; y coordinate.
0000CEr 3               	clc
0000CEr 3               shoot1:
0000CEr 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0000CEr 3               	sta z80_l 		; puty y coordinate in l.
0000CEr 3               
0000CEr 3               	ldy #9
0000CEr 3               	lda (z80_ix),y 		; x coordinate in h.
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	lda z80_i		; store pointer to sprite.
0000CEr 3               	pha
0000CEr 3               	lda z80_x
0000CEr 3               	pha
0000CEr 3               
0000CEr 3               	jsr fpslot 		; find particle slot.
0000CEr 3               	bcs :+
0000CEr 3               	jmp vapou2		; failed, restore ix.
0000CEr 3               :
0000CEr 3               	lda #0
0000CEr 3               	ldy #0
0000CEr 3               	sta (z80_ix),y 		; set up a laser.
0000CEr 3               
0000CEr 3               	lda z80_c
0000CEr 3               	ldy #1
0000CEr 3               	sta (z80_ix),y 		; set the direction.
0000CEr 3               
0000CEr 3               	lda z80_l
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y		; set y coordinate.
0000CEr 3               
0000CEr 3               	ror z80_c		; check direction we want.
0000CEr 3               	bcc :+
0000CEr 3               	jmp shootr		; shoot right.
0000CEr 3               :
0000CEr 3               	lda z80_h		; X position.
0000CEr 3               shoot0:
0000CEr 3               	and #248		; align on character boundary.
0000CEr 3               	ldy #5
0000CEr 3               	sta (z80_ix),y		; set x coordinate.
0000CEr 3               	jmp vapou0 		; draw first image.
0000CEr 3               shootr:
0000CEr 3               	lda z80_h		; x position.
0000CEr 3               	clc
0000CEr 3               	adc #15			; look right.
0000CEr 3               	jmp shoot0		; align and continue.
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Create a bit of vapour trail.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               vapour:
0000CEr 3               	lda z80_i		; store pointer to sprite.
0000CEr 3               	pha
0000CEr 3               	lda z80_x
0000CEr 3               	pha
0000CEr 3               
0000CEr 3               	ldy #8
0000CEr 3               	lda (z80_ix),y 		; y coordinate.
0000CEr 3               	clc
0000CEr 3               vapou3:
0000CEr 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0000CEr 3               	sta z80_l
0000CEr 3               
0000CEr 3               	ldy #9
0000CEr 3               	lda (z80_ix),y 		; x coordinate.
0000CEr 3               	adc #7
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	jsr fpslot 		; find particle slot.
0000CEr 3               	bcc :+
0000CEr 3               	jmp vapou1		; no, we can use it.
0000CEr 3               :
0000CEr 3               vapou2:
0000CEr 3               	pla
0000CEr 3               	sta z80_x
0000CEr 3               	pla
0000CEr 3               	sta z80_i
0000CEr 3               	rts
0000CEr 3               vapou1:
0000CEr 3               	lda z80_l
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y		; set up y.
0000CEr 3               
0000CEr 3               	lda z80_h
0000CEr 3               	ldy #5
0000CEr 3               	sta (z80_ix),y 		; set up x coordinate.
0000CEr 3               
0000CEr 3               	jsr qrand		; get quick random number.
0000CEr 3               	and #15			; random time.
0000CEr 3               	clc
0000CEr 3               	adc #15			; minimum time on screen.
0000CEr 3               	ldy #1
0000CEr 3               	sta (z80_ix),y		; set time on screen.
0000CEr 3               
0000CEr 3               	lda #1
0000CEr 3               	ldy #0
0000CEr 3               	sta (z80_ix),y		; define particle as vapour trail.
0000CEr 3               vapou0:
0000CEr 3               	jsr chkxy		; plot first position.
0000CEr 3               	jmp vapou2
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Create a user particle.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               ptusr:
0000CEr 3               	sta z80_f		; store timer.
0000CEr 3               
0000CEr 3               	ldy #8
0000CEr 3               	lda (z80_ix),y 		; y coordinate.
0000CEr 3               	clc
0000CEr 3               	adc #7			; mid-point of sprite.
0000CEr 3               	sta z80_l
0000CEr 3               
0000CEr 3               	ldy #9
0000CEr 3               	lda (z80_ix),y 		; x coordinate.
0000CEr 3               	clc
0000CEr 3               	adc #7			; mid-point of sprite.
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	jsr fpslot 		; find particle slot.
0000CEr 3               	bcs ptusr1
0000CEr 3               	rts 			; out of slots, can't generate anything.
0000CEr 3               ptusr1:
0000CEr 3               	lda z80_l
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y 		; set up y.
0000CEr 3               
0000CEr 3               	lda z80_h
0000CEr 3               	ldy #5
0000CEr 3               	sta (z80_ix),y		; set up x coordinate.
0000CEr 3               
0000CEr 3               	lda z80_f 		; restore timer.
0000CEr 3               	ldy #1
0000CEr 3               	sta (z80_ix),y		; set time on screen.
0000CEr 3               
0000CEr 3               	lda #7
0000CEr 3               	ldy #0
0000CEr 3               	sta (z80_ix),y		; define particle as user particle.
0000CEr 3               
0000CEr 3               	jmp chkxy		; plot first position.
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Create a vertical or horizontal star.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               star:
0000CEr 3               	lda z80_i		; store pointer to sprite.
0000CEr 3               	pha
0000CEr 3               	lda z80_x
0000CEr 3               	pha
0000CEr 3               
0000CEr 3               	jsr fpslot 		; find particle slot.
0000CEr 3               	bcs star7		; found one we can use.
0000CEr 3               star0:
0000CEr 3               	pla 			; restore sprite pointer.
0000CEr 3               	sta z80_x
0000CEr 3               	pla
0000CEr 3               	sta z80_i
0000CEr 3               	rts 			; out of slots, can't generate anything.
0000CEr 3               star7:
0000CEr 3               	lda z80_c		; direction.
0000CEr 3               	and #3 			; is it left?
0000CEr 3               	bne :+
0000CEr 3               	jmp star1 		; yes, it's left.
0000CEr 3               :
0000CEr 3               	cmp #1 			; is it right?
0000CEr 3               	bne :+
0000CEr 3               	jmp star2 		; yes, it's right.
0000CEr 3               :
0000CEr 3               	cmp #2 			; is it up?
0000CEr 3               	bne :+
0000CEr 3               	jmp star3 		; yes, it's up.
0000CEr 3               :
0000CEr 3               	ldy wntopx 		; get edge of screen.
0000CEr 3               	iny			; down one pixel.
0000CEr 3               	tya
0000CEr 3               star8:
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y 		; set y coord.
0000CEr 3               	jsr qrand 		; get quick random number.
0000CEr 3               star9:
0000CEr 3               	ldy #5
0000CEr 3               	sta (z80_ix),y		; set x position.
0000CEr 3               
0000CEr 3               	lda z80_c		; direction.
0000CEr 3               	and #3			; zero to three.
0000CEr 3               	clc
0000CEr 3               	adc #3			; 3 to 6 for starfield.
0000CEr 3               	ldy #0
0000CEr 3               	sta (z80_ix),y		; define particle as star.
0000CEr 3               	jsr chkxy		; plot first position.
0000CEr 3               	jmp star0
0000CEr 3               star1:
0000CEr 3               	jsr qrand		; get quick random number.
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y 		; set y coord.
0000CEr 3               
0000CEr 3               	lda wnrgtx 		; get edge of screen.
0000CEr 3               	clc
0000CEr 3               	adc #15			; add width of sprite minus 1.
0000CEr 3               	jmp star9
0000CEr 3               star2:
0000CEr 3               	jsr qrand 		; get quick random number.
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y		; set y coord.
0000CEr 3               
0000CEr 3               	lda wnlftx		; get edge of screen.
0000CEr 3               	jmp star9
0000CEr 3               star3:
0000CEr 3               	lda wnbotx 		; get edge of screen.
0000CEr 3               	clc
0000CEr 3               	adc #15 		; height of sprite minus one pixel.
0000CEr 3               	jmp star8
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Find particle slot for lasers or vapour trail.
0000CEr 3               ; can't use alternate accumulator.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               fpslot:
0000CEr 3               	lda #<SHRAPN 		; shrapnel table.
0000CEr 3               	sta z80_x
0000CEr 3               	lda #>SHRAPN
0000CEr 3               	sta z80_i
0000CEr 3               
0000CEr 3               	lda #NUMSHR		; number of pieces in table.
0000CEr 3               	sta z80_b
0000CEr 3               fpslt0:
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_ix),y		; get type.
0000CEr 3               	asl a  			; is this slot in use?
0000CEr 3               	bcc :+
0000CEr 3               	rts			; no, we can use it.
0000CEr 3               :
0000CEr 3               	clc			; point to more shrapnel.
0000CEr 3               	lda z80_x
0000CEr 3               	adc #SHRSIZ
0000CEr 3               	sta z80_x
0000CEr 3               	bcc :+
0000CEr 3               	inc z80_i
0000CEr 3               :
0000CEr 3               	dec z80_b		; repeat for all shrapnel.
0000CEr 3               	bne fpslt0
0000CEr 3               
0000CEr 3               	clc
0000CEr 3               	rts 			; out of slots, can't generate anything.
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Create an explosion at sprite position.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               explod:
0000CEr 3               	sta z80_c 		; particles to create.
0000CEr 3               
0000CEr 3               	lda z80_i 		; store pointer to sprite.
0000CEr 3               	pha
0000CEr 3               	lda z80_x
0000CEr 3               	pha
0000CEr 3               
0000CEr 3               	ldy #8
0000CEr 3               	lda (z80_ix),y 		; y coordinate.
0000CEr 3               	sta z80_l
0000CEr 3               	ldy #9
0000CEr 3               	lda (z80_ix),y		; x coordinate.
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	lda #<SHRAPN		; shrapnel table.
0000CEr 3               	sta z80_x
0000CEr 3               	lda #>SHRAPN
0000CEr 3               	sta z80_i
0000CEr 3               
0000CEr 3               	lda #NUMSHR		; number of pieces in table.
0000CEr 3               	sta explcnt
0000CEr 3               expld0:
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_ix),y		; get type.
0000CEr 3               	asl a 			; is this slot in use?
0000CEr 3               	bcs expld1		; no, we can use it.
0000CEr 3               expld2:
0000CEr 3               	clc
0000CEr 3               	lda z80_x
0000CEr 3               	adc #SHRSIZ
0000CEr 3               	sta z80_x
0000CEr 3               	bcc :+
0000CEr 3               	inc z80_i
0000CEr 3               :
0000CEr 3               	dec explcnt		; repeat for all shrapnel.
0000CEr 3               	bne expld0
0000CEr 3               expld3:
0000CEr 3               	pla			; restore sprite pointer.
0000CEr 3               	sta z80_x
0000CEr 3               	pla
0000CEr 3               	sta z80_i
0000CEr 3               	rts 			; out of slots, can't generate any more.
0000CEr 3               
0000CEr 3               expld1:
0000CEr 3               	lda z80_c		; shrapnel counter.
0000CEr 3               	and #15			; 0 to 15.
0000CEr 3               	clc			; add to x.
0000CEr 3               	adc z80_l
0000CEr 3               	ldy #3
0000CEr 3               	sta (z80_ix),y		; y coord.
0000CEr 3               
0000CEr 3               	lda seed3 		; crap random number.
0000CEr 3               	and #15			; 0 to 15.
0000CEr 3               	clc 			; add to y.
0000CEr 3               	adc z80_h
0000CEr 3               	ldy #5
0000CEr 3               	sta (z80_ix),y		; x coord.
0000CEr 3               
0000CEr 3               	lda #2
0000CEr 3               	ldy #0
0000CEr 3               	sta (z80_ix),y		; switch it on.
0000CEr 3               
0000CEr 3               	jsr chkxy		; plot first position.
0000CEr 3               	jsr qrand		; quick random angle.
0000CEr 3               	and #60 		; keep within range.
0000CEr 3               	ldy #1
0000CEr 3               	sta (z80_ix),y		; angle.
0000CEr 3               
0000CEr 3               	dec z80_c		; one less piece of shrapnel to generate.
0000CEr 3               	bne expld2 		; back to main explosion loop.
0000CEr 3               	jmp expld3 		; restore sprite pointer and exit.
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Quick random
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               qrand:
0000CEr 3               	jsr random		; r register.
0000CEr 3               	eor seed3		; combine with seed.
0000CEr 3               	sta seed3 		; new seed.
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;----------------------------------------------------
0000CEr 3               ; Display all shrapnel.
0000CEr 3               ;----------------------------------------------------
0000CEr 3               
0000CEr 3               dshrp:
0000CEr 3               	lda #<plotde		; display routine.
0000CEr 3               	sta proshx+1
0000CEr 3               	lda #>plotde
0000CEr 3               	sta proshx+2
0000CEr 3               	jsr proshr		; process shrapnel.
0000CEr 3               
0000CEr 3               	lda #<prosh1		; processing routine.
0000CEr 3               	sta proshx+1
0000CEr 3               	lda #>prosh1
0000CEr 3               	sta proshx+2
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;------------------------------------------------------
0000CEr 3               ; Particle engine.
0000CEr 3               ;
0000CEr 3               ; Init particle data for 55 particles in SHRAPN table.
0000CEr 3               ; Every particle has 6 bytes.
0000CEr 3               ;
0000CEr 3               ; global:	-
0000CEr 3               ; local:	x,y,hl
0000CEr 3               ; calls:	-
0000CEr 3               ;------------------------------------------------------
0000CEr 3               
0000CEr 3               inishr:
0000CEr 3               	lda #<SHRAPN 		; table.
0000CEr 3               	sta z80_l
0000CEr 3               	lda #>SHRAPN
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	ldy #0
0000CEr 3               	ldx #NUMSHR		; shrapnel pieces to process.
0000CEr 3               inish0:
0000CEr 3               	lda #255 		; kill the shrapnel.
0000CEr 3               	sta (z80_hl),y
0000CEr 3               
0000CEr 3               	clc 			; point there.
0000CEr 3               	lda z80_l
0000CEr 3               	adc #SHRSIZ		; distance to next.
0000CEr 3               	sta z80_l
0000CEr 3               	bcc :+
0000CEr 3               	inc z80_h
0000CEr 3               :
0000CEr 3               	dex
0000CEr 3               	bne inish0 		; round again.
0000CEr 3               	rts
0000CEr 3               
0000CEr 3               ;------------------------------------------------------
0000CEr 3               ; Check for collision between laser and sprite.
0000CEr 3               ;------------------------------------------------------
0000CEr 3               
0000CEr 3               lcol:
0000CEr 3               	lda #<SHRAPN		; shrapnel table.
0000CEr 3               	sta z80_l
0000CEr 3               	lda #>SHRAPN
0000CEr 3               	sta z80_h
0000CEr 3               
0000CEr 3               	lda #NUMSHR		; number of pieces in table.
0000CEr 3               	sta z80_b
0000CEr 3               lcol0:
0000CEr 3               	ldy #0
0000CEr 3               	lda (z80_hl),y 		; get type.
0000CEr 3               	beq lcol1		; yes, check collision.
0000CEr 3               lcol3:
0000CEr 3               	clc			; point to more shrapnel.
0000CEr 3               	lda z80_l
0000CEr 3               	adc #SHRSIZ
0000CEr 3               	sta z80_l
0000CEr 3               	bcc :+
0000CEr 3               	inc z80_h
0000CEr 3               :
0000CEr 3               	dec z80_b		; repeat for all shrapnel.
0000CEr 3               	bne lcol0
0000CEr 3               	clc
0000CEr 3               	rts 			; no collision, carry not set.
0000CEr 3               lcol1:
0000CEr 3               	ldy #3
0000CEr 3               	lda (z80_hl),y		; get y.
0000CEr 3               	sec
0000CEr 3               	ldy #8
0000CEr 3               	sbc (z80_ix),y		; subtract sprite y.
0000CEr 3               lcolh:
0000CEr 3               	cmp #SPR_HGT 		; within range?
0000CEr 3               	bcc :+
0000CEr 3               	jmp lcol2		; no, missed.
0000CEr 3               :
0000CEr 3               	ldy #5
0000CEr 3               	lda (z80_hl),y 		; get x.
0000CEr 3               	sec
0000CEr 3               	ldy #9
0000CEr 3               	sbc (z80_ix),y 		; subtract sprite y.
0000CEr 3               	cmp #16			; within range?
0000CEr 3               	bcs :+
0000CEr 3               	jmp lcol4 		; yes, collision occurred.
0000CEr 3               :
0000CEr 3               lcol2:
0000CEr 3               	jmp lcol3
0000CEr 3               lcol4:
0000CEr 3               	sec
0000CEr 3               	rts 			; return with carry set for collision.
0000CEr 3               .endif
0000CEr 3               
0000CEr 3               ;------------------------------------------------------
0000CEr 3               ; Main game engine code starts here.
0000CEr 3               ; After initialisation, mloop is the main loop
0000CEr 3               ;------------------------------------------------------
0000CEr 3               
0000CEr 3               game:
0000CEr 3               
0000CEr 3               ; Set up screen address table.
0000CEr 3               
0000CEr 3               setsat:
0000CEr 3  A9 00        	lda #<CharAddress	; start of screen.
0000D0r 3  85 rr        	sta scraddr
0000D2r 3  A9 10        	lda #>CharAddress
0000D4r 3  85 rr        	sta scraddr+1
0000D6r 3               
0000D6r 3  A0 00        	ldy #0			; vertical lines on screen.
0000D8r 3               setsa0:
0000D8r 3  A5 rr        	lda scraddr
0000DAr 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000DDr 3  A5 rr        	lda scraddr+1
0000DFr 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000E2r 3  20 rr rr     	jsr nline		; next line down.
0000E5r 3  C8           	iny			; next position in table.
0000E6r 3  D0 F0        	bne setsa0
0000E8r 3               
0000E8r 3               ; Set up colour address table
0000E8r 3               
0000E8r 3               setsof:
0000E8r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000EAr 3  85 rr        	sta bufaddr
0000ECr 3  A9 96        	lda #>ColorAttr
0000EEr 3  85 rr        	sta bufaddr+1
0000F0r 3               
0000F0r 3  A0 00        	ldy #0			; vertical lines on screen.
0000F2r 3               setof0:
0000F2r 3  A5 rr        	lda bufaddr
0000F4r 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000F7r 3  A5 rr        	lda bufaddr+1
0000F9r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000FCr 3  18           	clc			; next line down.
0000FDr 3  A5 rr        	lda bufaddr
0000FFr 3  69 16        	adc #ScrWidth
000101r 3  85 rr        	sta bufaddr
000103r 3  90 02        	bcc :+
000105r 3  E6 rr        	inc bufaddr+1
000107r 3               :
000107r 3  C8           	iny			; next position in table.
000108r 3  C0 0B        	cpy #ScrHeight/2
00010Ar 3  D0 E6        	bne setof0
00010Cr 3               
00010Cr 3               ; Init graphics mode
00010Cr 3               
00010Cr 3  20 rr rr     	jsr init
00010Fr 3               
00010Fr 3               ; Init joysticks
00010Fr 3  20 rr rr     	jsr joyinit		; VIC20 joystick
000112r 3               
000112r 3               rpblc2:
000112r 3               .if pflag
000112r 3               	jsr inishr 		; initialise particle engine.
000112r 3               .endif
000112r 3               evintr:
000112r 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
000115r 3               
000115r 3  A9 02        	lda #WALL 		; write default property.
000117r 3  A2 00        	ldx #0
000119r 3               clrmap:
000119r 3  9D 00 04     	sta MAP,x 		; block properties.
00011Cr 3  9D 00 05     	sta MAP+256,x
00011Fr 3  E8           	inx
000120r 3  D0 F7        	bne clrmap
000122r 3               
000122r 3               .if oflag
000122r 3  20 rr rr     	jsr iniob 		; initialise objects.
000125r 3               .endif
000125r 3  A9 00        	lda #0			; put zero in accumulator.
000127r 3  85 rr        	sta gamwon		; reset game won flag.
000129r 3               
000129r 3  20 rr rr     	jsr inisc 		; init the score.
00012Cr 3               mapst:
00012Cr 3  AD rr rr     	lda stmap 		; start position on map.
00012Fr 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
000132r 3               
000132r 3               inipbl:
000132r 3               .if aflag
000132r 3               	lda #<eop		; reset blockpointer
000132r 3               	sta pbptr
000132r 3               	lda #>eop
000132r 3               	sta pbptr+1
000132r 3               .endif
000132r 3  20 rr rr     	jsr initsc 		; set up first screen.
000135r 3               
000135r 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
000137r 3  85 rr        	sta z80_x
000139r 3  A9 rr        	lda #>ssprit
00013Br 3  85 rr        	sta z80_i
00013Dr 3               evini:
00013Dr 3  20 rr rr     	jsr evnt13 		; initialisation.
000140r 3               
000140r 3               ; Two restarts.
000140r 3               ; First restart - clear all sprites and initialise everything.
000140r 3               
000140r 3               rstrt:
000140r 3  20 rr rr     	jsr rsevt 		; restart events.
000143r 3  20 rr rr     	jsr xspr 		; clear sprite table.
000146r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000149r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
00014Cr 3  4C rr rr     	jmp rstrt0
00014Fr 3               
00014Fr 3               ; Second restart - clear all but player, and don't initialise him.
00014Fr 3               
00014Fr 3               rstrtn:
00014Fr 3  20 rr rr     	jsr rsevt		; restart events.
000152r 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
000155r 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000158r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
00015Br 3               
00015Br 3               ; Set up the player and/or enemy sprites.
00015Br 3               
00015Br 3               rstrt0:
00015Br 3  A9 00        	lda #0 			; zero in accumulator.
00015Dr 3  85 rr        	sta nexlev 		; reset next level flag.
00015Fr 3  85 rr        	sta restfl 		; reset restart flag.
000161r 3  85 rr        	sta deadf 		; reset dead flag.
000163r 3               
000163r 3  20 rr rr     	jsr droom 		; show screen layout.
000166r 3               rpblc0:
000166r 3               .if pflag
000166r 3               	jsr inishr 		; initialise particle engine.
000166r 3               .endif
000166r 3               .if aflag
000166r 3               	jsr rbloc		; draw blocks for this screen
000166r 3               .endif
000166r 3               .if oflag
000166r 3  20 rr rr     	jsr shwob		; draw objects.
000169r 3               .endif
000169r 3               
000169r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00016Br 3  85 rr        	sta z80_x
00016Dr 3  A9 rr        	lda #>sprtab
00016Fr 3  85 rr        	sta z80_i
000171r 3  20 rr rr     	jsr dspr 		; display sprites.
000174r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000176r 3  85 rr        	sta z80_x
000178r 3  A9 rr        	lda #>(sprtab+TABSIZ)
00017Ar 3  85 rr        	sta z80_i
00017Cr 3  20 rr rr     	jsr dspr 		; display sprites.
00017Fr 3               mloop:
00017Fr 3  20 rr rr     	jsr vsync 		; synchronise with display.
000182r 3               
000182r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000184r 3  85 rr        	sta z80_x
000186r 3  A9 rr        	lda #>sprtab
000188r 3  85 rr        	sta z80_i
00018Ar 3  20 rr rr     	jsr dspr 		; display even sprites.
00018Dr 3               
00018Dr 3               ;	jsr plsnd 		; play sounds.
00018Dr 3  20 rr rr     	jsr vsync 		; synchronise with display.
000190r 3  20 rr rr     	jsr proshr
000193r 3               
000193r 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
000195r 3  85 rr        	sta z80_x
000197r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000199r 3  85 rr        	sta z80_i
00019Br 3  20 rr rr     	jsr dspr 		; display odd sprites.
00019Er 3               
00019Er 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
0001A0r 3  85 rr        	sta z80_x
0001A2r 3  A9 rr        	lda #>(ssprit)
0001A4r 3  85 rr        	sta z80_i
0001A6r 3               evlp1:
0001A6r 3  20 rr rr     	jsr evnt10 		; called once per main loop.
0001A9r 3  20 rr rr     	jsr pspr 		; process sprites.
0001ACr 3               
0001ACr 3               ; Main loop events.
0001ACr 3               
0001ACr 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
0001AEr 3  85 rr        	sta z80_x
0001B0r 3  A9 rr        	lda #>ssprit
0001B2r 3  85 rr        	sta z80_i
0001B4r 3               evlp2:
0001B4r 3  20 rr rr     	jsr evnt11 		; called once per main loop.
0001B7r 3               bsortx:
0001B7r 3  20 rr rr     	jsr bsort 		; sort sprites.
0001BAr 3               
0001BAr 3  A5 rr        	lda nexlev		; finished level flag.
0001BCr 3  D0 1F        	bne newlev		; is set, go to next level.
0001BEr 3  A5 rr        	lda gamwon		; finished game flag.
0001C0r 3  D0 2A        	bne evwon		; is set, finish the game.
0001C2r 3  A5 rr        	lda restfl 		; finished level flag.
0001C4r 3  C9 01        	cmp #1			; has it been set?
0001C6r 3  D0 03        	bne :+
0001C8r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
0001CBr 3               :
0001CBr 3  C9 02        	cmp #2			; has it been set?
0001CDr 3  D0 03        	bne :+
0001CFr 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
0001D2r 3               :
0001D2r 3  A5 rr        	lda deadf 		; dead flag.
0001D4r 3  D0 1C        	bne pdead		; yes, player dead.
0001D6r 3               
0001D6r 3               ; back to start of main loop.
0001D6r 3               
0001D6r 3  E6 rr        	inc frmno
0001D8r 3  E6 rr        	inc clock
0001DAr 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
0001DDr 3               
0001DDr 3               ;----------------------------------------------------------
0001DDr 3               ; Read blocks from list and update screen accordingly.
0001DDr 3               ;----------------------------------------------------------
0001DDr 3               
0001DDr 3               .if aflag
0001DDr 3               rbloc:
0001DDr 3               	lda #<eop		; reset blockpointer
0001DDr 3               	sta pbbuf
0001DDr 3               	lda #>eop
0001DDr 3               	sta pbbuf+1
0001DDr 3               
0001DDr 3               rbloc2:
0001DDr 3               	lda pbbuf			; check for last block
0001DDr 3               	cmp pbptr
0001DDr 3               	bne rbloc1
0001DDr 3               	lda pbbuf+1
0001DDr 3               	cmp pbptr+1
0001DDr 3               	bne rbloc1
0001DDr 3               	rts
0001DDr 3               rbloc1:
0001DDr 3               	ldy #0
0001DDr 3               	lda (pbbuf),y		; check if block for this scno
0001DDr 3               	cmp scno
0001DDr 3               	bne rbloc0		; if not, skip
0001DDr 3               	iny
0001DDr 3               	lda (pbbuf),y		; get y
0001DDr 3               	sta dispy
0001DDr 3               	iny
0001DDr 3               	lda (pbbuf),y		; get x
0001DDr 3               	sta dispx
0001DDr 3               	iny
0001DDr 3               	lda (pbbuf),y		; get blocknr
0001DDr 3               	jsr pattr2		; draw block
0001DDr 3               rbloc0:
0001DDr 3               	clc			; point to next block
0001DDr 3               	lda pbbuf
0001DDr 3               	adc #4
0001DDr 3               	sta pbbuf
0001DDr 3               	bcc rbloc2
0001DDr 3               	inc pbbuf+1
0001DDr 3               	jmp rbloc2
0001DDr 3               .endif
0001DDr 3               
0001DDr 3               ;----------------------------------------------------------
0001DDr 3               ; New level
0001DDr 3               ;----------------------------------------------------------
0001DDr 3               
0001DDr 3               newlev:
0001DDr 3  A5 rr        	lda scno 			; current screen.
0001DFr 3  18           	clc
0001E0r 3  69 01        	adc #1				; next screen.
0001E2r 3  CD rr rr     	cmp numsc 			; total number of screens.
0001E5r 3  B0 05        	bcs evwon			; yes, game finished.
0001E7r 3  85 rr        	sta scno			; set new level number.
0001E9r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001ECr 3               
0001ECr 3               evwon:
0001ECr 3  20 rr rr     	jsr evnt18		 	; game completed.
0001EFr 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001F2r 3               
0001F2r 3               ;----------------------------------------------------------
0001F2r 3               ; Player dead.
0001F2r 3               ;----------------------------------------------------------
0001F2r 3               
0001F2r 3               pdead:
0001F2r 3  A9 00        	lda #0				; zeroise accumulator.
0001F4r 3  85 rr        	sta deadf			; reset dead flag.
0001F6r 3               evdie:
0001F6r 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001F9r 3  A5 rr        	lda numlif			; number of lives.
0001FBr 3  F0 03        	beq :+
0001FDr 3  4C rr rr     	jmp rstrt 			; restart game.
000200r 3               :
000200r 3               evfail:
000200r 3  20 rr rr     	jsr evnt17 			; failure event.
000203r 3  4C rr rr     	jmp game			; restart game
000206r 3               
000206r 3               ;----------------------------------------------------------
000206r 3               ; Tidy things up
000206r 3               ;----------------------------------------------------------
000206r 3               
000206r 3               tidyup:
000206r 3  A0 00        	ldy #0				; digits to check.
000208r 3               tidyu2:
000208r 3  B9 rr rr     	lda score,y 			; get score digit.
00020Br 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
00020Er 3  90 07        	bcc tidyu0			; high score is bigger.
000210r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
000212r 3  C8           	iny				; next digit of high score.
000213r 3  C0 06        	cpy #6
000215r 3  D0 F1        	bne tidyu2			; repeat for all digits
000217r 3               tidyu0:
000217r 3  A9 rr        	lda #<score			; return pointing to score.
000219r 3  85 rr        	sta z80_c
00021Br 3  A9 rr        	lda #>score
00021Dr 3  85 rr        	sta z80_b
00021Fr 3  60           	rts
000220r 3               tidyu1:
000220r 3  A0 05        	ldy #5
000222r 3               tidyu3:
000222r 3  B9 rr rr     	lda score,y			; score.
000225r 3  99 rr rr     	sta hiscor,y			; high score.
000228r 3  88           	dey
000229r 3  10 F7        	bpl tidyu3 			; copy score to high score.
00022Br 3               evnewh:
00022Br 3  20 rr rr     	jsr evnt19			; new high score event.
00022Er 3  4C rr rr     	jmp tidyu0			; tidy up.
000231r 3               
000231r 3               ;--------------------------------------------------
000231r 3               ; Restart event.
000231r 3               ;--------------------------------------------------
000231r 3               
000231r 3               rsevt:
000231r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
000233r 3  85 rr        	sta z80_x
000235r 3  A9 rr        	lda #>ssprit
000237r 3  85 rr        	sta z80_i
000239r 3               
000239r 3               evrs:
000239r 3  4C rr rr     	jmp evnt14	 		; call restart event.
00023Cr 3               
00023Cr 3               ;------------------------------------------------------------------
00023Cr 3               ; Copy number passed in a to string position bc, right-justified.
00023Cr 3               ;
00023Cr 3               ; Input:
00023Cr 3               ;  A  = number
00023Cr 3               ;  BC = string address
00023Cr 3               ;
00023Cr 3               ; Output:
00023Cr 3               ;  BC = string with number
00023Cr 3               ;-----------------------------------------------------------------
00023Cr 3               
00023Cr 3               num2ch:
00023Cr 3  85 rr        	sta z80_d		; Save number
00023Er 3               
00023Er 3  A9 00        	lda #0
000240r 3  85 rr        	sta flag
000242r 3               numdg3:
000242r 3  A2 64        	ldx #100		; hundreds column.
000244r 3  86 rr        	stx z80_e
000246r 3  20 rr rr     	jsr numdg		; show digit.
000249r 3               numdg2:
000249r 3  A2 0A        	ldx #10			; tens column.
00024Br 3  86 rr        	stx z80_e
00024Dr 3  20 rr rr     	jsr numdg		; show digit.
000250r 3               
000250r 3  E6 rr        	inc flag
000252r 3  A2 01        	ldx #1			; units column.
000254r 3  86 rr        	stx z80_e
000256r 3               numdg:
000256r 3  A9 30        	lda #48			; clear digit.
000258r 3  85 rr        	sta z80_a
00025Ar 3               numdg1:
00025Ar 3  A5 rr        	lda z80_d
00025Cr 3  C5 rr        	cmp z80_e
00025Er 3  90 0E        	bcc numdg0		; nothing to show.
000260r 3  38           	sec
000261r 3  A5 rr        	lda z80_d
000263r 3  E5 rr        	sbc z80_e		; subtract from column.
000265r 3  85 rr        	sta z80_d
000267r 3  E6 rr        	inc z80_a		; increment digit.
000269r 3  E6 rr        	inc flag
00026Br 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
00026Er 3               numdg0:
00026Er 3  A0 00        	ldy #0
000270r 3  A5 rr        	lda z80_a
000272r 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
000274r 3  A5 rr        	lda flag
000276r 3  F0 06        	beq :+
000278r 3  E6 rr        	inc z80_c		; next buffer position.
00027Ar 3  D0 02        	bne :+
00027Cr 3  E6 rr        	inc z80_b
00027Er 3               :
00027Er 3  60           	rts
00027Fr 3               num2dd:
00027Fr 3  85 rr        	sta z80_d		; Save number
000281r 3               
000281r 3  A9 01        	lda #1
000283r 3  85 rr        	sta flag
000285r 3               
000285r 3  4C rr rr     	jmp numdg2
000288r 3               num2td:
000288r 3  85 rr        	sta z80_d		; Save number
00028Ar 3               
00028Ar 3  A9 01        	lda #1
00028Cr 3  85 rr        	sta flag
00028Er 3  4C rr rr     	jmp numdg3
000291r 3               
000291r 3               ;---------------------------------------------------------
000291r 3               ; Reset score to "000000"
000291r 3               ;---------------------------------------------------------
000291r 3               
000291r 3               inisc:
000291r 3  A9 30        	lda #'0'
000293r 3  A2 05        	ldx #5			; digits to initialise.
000295r 3               inisc0:
000295r 3  9D rr rr     	sta score,x 		; write zero digit.
000298r 3  CA           	dex			; next column.
000299r 3  10 FA        	bpl inisc0		; repeat for all digits.
00029Br 3               
00029Br 3  60           	rts
00029Cr 3               
00029Cr 3               ;-----------------------------------------------------
00029Cr 3               ; Multiply h by d and return in hl.
00029Cr 3               ;
00029Cr 3               ; Input:
00029Cr 3               ;  H = first number
00029Cr 3               ;  D = second number
00029Cr 3               ;
00029Cr 3               ; Output:
00029Cr 3               ;  HL = result H x D
00029Cr 3               ;-----------------------------------------------------
00029Cr 3               
00029Cr 3               imul:
00029Cr 3  A5 rr        	lda z80_d		; HL = H * D
00029Er 3  85 rr        	sta z80_e
0002A0r 3  A5 rr        	lda z80_h
0002A2r 3  85 rr        	sta z80_c		; make c first multiplier.
0002A4r 3               imul0:
0002A4r 3  A9 00        	lda #0			; zeroise total.
0002A6r 3  85 rr        	sta z80_l
0002A8r 3  85 rr        	sta z80_h
0002AAr 3               
0002AAr 3  A5 rr        	lda z80_h
0002ACr 3  85 rr        	sta z80_d		; zeroise high byte.
0002AEr 3               
0002AEr 3  A9 08        	lda #8			; repeat 8 times.
0002B0r 3  85 rr        	sta z80_b
0002B2r 3               imul1:
0002B2r 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
0002B4r 3  90 0E        	bcc imul2		; wasn't set.
0002B6r 3  18           	clc			; bit was set, so add de.
0002B7r 3  A5 rr        	lda z80_l
0002B9r 3  65 rr        	adc z80_e
0002BBr 3  85 rr        	sta z80_l
0002BDr 3  A5 rr        	lda z80_h
0002BFr 3  65 rr        	adc z80_d
0002C1r 3  85 rr        	sta z80_h
0002C3r 3  18           	clc 			; reset carry.
0002C4r 3               imul2:
0002C4r 3  26 rr        	rol z80_e 		; shift de 1 bit left.
0002C6r 3  26 rr        	rol z80_d
0002C8r 3  C6 rr        	dec z80_b
0002CAr 3  D0 E6        	bne imul1		; repeat 8 times.
0002CCr 3               
0002CCr 3  60           	rts
0002CDr 3               
0002CDr 3               ;-----------------------------------------------
0002CDr 3               ; Divide d by e and return in d, remainder in a.
0002CDr 3               ;
0002CDr 3               ; Input:
0002CDr 3               ;  D = first number
0002CDr 3               ;  E = second number
0002CDr 3               ;
0002CDr 3               ; Output:
0002CDr 3               ;  D = result D/E
0002CDr 3               ;  A = remainder
0002CDr 3               ;-----------------------------------------------
0002CDr 3               
0002CDr 3               idiv:
0002CDr 3  A9 00        	lda #0
0002CFr 3  A0 08        	ldy #8		 	; bits to shift.
0002D1r 3  06 rr        	asl z80_d
0002D3r 3               idiv0:
0002D3r 3  2A           	rol a 			; multiply d by 2.
0002D4r 3  C5 rr        	cmp z80_e 		; test if e is smaller.
0002D6r 3  90 02        	bcc idiv1		; e is greater, no division this time.
0002D8r 3  E5 rr        	sbc z80_e		; subtract it.
0002DAr 3               idiv1:
0002DAr 3  26 rr        	rol z80_d		; rotate into d.
0002DCr 3  88           	dey
0002DDr 3  D0 F4        	bne idiv0		; repeat
0002DFr 3  60           	rts
0002E0r 3               
0002E0r 3               ;---------------------------------------------------
0002E0r 3               ; Play AY sound effect
0002E0r 3               ;---------------------------------------------------
0002E0r 3               
0002E0r 3               plsnd:
0002E0r 3  60           	rts
0002E1r 3               
0002E1r 3               ;---------------------------------------------------
0002E1r 3               ; Objects handling.
0002E1r 3               ; 32 bytes for image
0002E1r 3               ; 1 for colour
0002E1r 3               ; 3 for room, y and x
0002E1r 3               ; 3 for starting room, y and x.
0002E1r 3               ; 254 = disabled.
0002E1r 3               ; 255 = object in player"s pockets.
0002E1r 3               ;---------------------------------------------------
0002E1r 3               
0002E1r 3               ;---------------------------------------------------
0002E1r 3               ; Show items present.
0002E1r 3               ;---------------------------------------------------
0002E1r 3               
0002E1r 3               .if oflag
0002E1r 3               shwob:
0002E1r 3  A9 rr        	lda #<objdta			; objects table.
0002E3r 3  85 rr        	sta z80_l
0002E5r 3  A9 rr        	lda #>objdta
0002E7r 3  85 rr        	sta z80_h
0002E9r 3  AD rr rr     	lda numob 			; number of objects in the game.
0002ECr 3  85 rr        	sta sprcnt
0002EEr 3               shwob0:
0002EEr 3  A0 21        	ldy #33 			; distance to room number.
0002F0r 3  B1 rr        	lda (z80_hl),y 			; same as an item?
0002F2r 3  C5 rr        	cmp scno 			; current location.
0002F4r 3  D0 03        	bne :+
0002F6r 3  20 rr rr     	jsr dobj 			; yes, display object.
0002F9r 3               :
0002F9r 3  18           	clc
0002FAr 3  A5 rr        	lda z80_l
0002FCr 3  69 27        	adc #39 			; distance to next item.
0002FEr 3  85 rr        	sta z80_l
000300r 3  A5 rr        	lda z80_h
000302r 3  69 00        	adc #0
000304r 3  85 rr        	sta z80_h	 		; point to it.
000306r 3  C6 rr        	dec sprcnt
000308r 3  D0 E4        	bne shwob0 			; repeat for others.
00030Ar 3  60           	rts
00030Br 3               
00030Br 3               ;---------------------------------------------------
00030Br 3               ; Display object.
00030Br 3               ; hl must point to object's start address.
00030Br 3               ;
00030Br 3               ; Input:
00030Br 3               ;  HL = object address
00030Br 3               ;---------------------------------------------------
00030Br 3               
00030Br 3               dobj:
00030Br 3  A0 20        	ldy #32
00030Dr 3  B1 rr        	lda (z80_hl),y 			; point to y.
00030Fr 3  85 rr        	sta objcol
000311r 3  A0 22        	ldy #34
000313r 3  B1 rr        	lda (z80_hl),y 			; point to y.
000315r 3  85 rr        	sta dispy
000317r 3  C8           	iny
000318r 3  B1 rr        	lda (z80_hl),y 			; point to x.
00031Ar 3  85 rr        	sta dispx
00031Cr 3               dobj1:
00031Cr 3  4C rr rr     	jmp sprite 			; draw this sprite.
00031Fr 3               
00031Fr 3               ;--------------------------------------
00031Fr 3               ; Remove an object.
00031Fr 3               ;
00031Fr 3               ; Input:
00031Fr 3               ;  A = object number
00031Fr 3               ;--------------------------------------
00031Fr 3               
00031Fr 3               remob:
00031Fr 3  CD rr rr     	cmp numob			; number of objects in game.
000322r 3  90 01        	bcc :+				; are we checking past the end?
000324r 3  60           	rts				; yes, can't get non-existent item.
000325r 3               :
000325r 3  48           	pha				; remember object.
000326r 3  20 rr rr     	jsr getob			; pick it up if we haven't already got it.
000329r 3  68           	pla				; retrieve object number.
00032Ar 3  20 rr rr     	jsr gotob			; get its address.
00032Dr 3  A9 FE        	lda #254
00032Fr 3  A0 21        	ldy #33
000331r 3  91 rr        	sta (z80_hl),y			; remove it.
000333r 3  60           	rts
000334r 3               
000334r 3               ;---------------------------------------------------
000334r 3               ; Pick up object number held in the accumulator.
000334r 3               ;
000334r 3               ; Input:
000334r 3               ;  A = object number
000334r 3               ;---------------------------------------------------
000334r 3               
000334r 3               getob:
000334r 3  CD rr rr     	cmp numob 		; number of objects in game.
000337r 3  90 01        	bcc :+			; are we checking past the end?
000339r 3  60           	rts			; yes, can't get non-existent item.
00033Ar 3               :
00033Ar 3  20 rr rr     	jsr gotob 		; check if we already have it.
00033Dr 3  C9 FF        	cmp #255
00033Fr 3  D0 01        	bne :+
000341r 3  60           	rts			; we already do.
000342r 3               :
000342r 3  A0 21        	ldy #33
000344r 3  B1 rr        	lda (z80_hl),y		; is it on this screen?
000346r 3  C5 rr        	cmp scno 		; current screen.
000348r 3  D0 14        	bne getob0		; not on screen, so nothing to delete.
00034Ar 3               
00034Ar 3  A9 FF        	lda #255
00034Cr 3  91 rr        	sta (z80_hl),y		; pick it up.
00034Er 3  C8           	iny 			; point to y coord.
00034Fr 3               getob1:
00034Fr 3  A0 22        	ldy #34
000351r 3  B1 rr        	lda (z80_hl),y		; y coord.
000353r 3  85 rr        	sta dispy
000355r 3  A0 23        	ldy #35
000357r 3  B1 rr        	lda (z80_hl),y 		; x coord.
000359r 3  85 rr        	sta dispx
00035Br 3  4C rr rr     	jmp dobj1 		; delete object sprite.
00035Er 3               getob0:
00035Er 3  A9 FF        	lda #255
000360r 3  91 rr        	sta (z80_hl),y 		; pick it up.
000362r 3  60           	rts
000363r 3               .endif
000363r 3               
000363r 3               ;-----------------------------------------------------------------
000363r 3               ; Got object check.
000363r 3               ; Call with object in accumulator, returns zero set if in pockets.
000363r 3               ;
000363r 3               ; Input:
000363r 3               ;  A = object number
000363r 3               ;-----------------------------------------------------------------
000363r 3               .if oflag .or mflag
000363r 3               gotob:
000363r 3  CD rr rr     	cmp numob 		; number of objects in game.
000366r 3  90 03        	bcc :+ 			; are we checking past the end?
000368r 3  4C rr rr     	jmp gotob0 		; yes, we can't have a non-existent object.
00036Br 3               :
00036Br 3  20 rr rr     	jsr findob		; find the object.
00036Er 3               gotob1:
00036Er 3  60           	rts
00036Fr 3               
00036Fr 3               gotob0:
00036Fr 3  A9 FE        	lda #254 		; missing.
000371r 3  4C rr rr     	jmp gotob1
000374r 3               
000374r 3               findob:
000374r 3  48           	pha			; save object number
000375r 3  A9 rr        	lda #<objdta 		; objects.
000377r 3  85 rr        	sta z80_l
000379r 3  A9 rr        	lda #>objdta
00037Br 3  85 rr        	sta z80_h
00037Dr 3  68           	pla			; retreive object number
00037Er 3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000380r 3  AA           	tax 			; loop counter
000381r 3               fndob2:
000381r 3  18           	clc
000382r 3  A5 rr        	lda z80_l
000384r 3  69 27        	adc #39 		; size of each object.
000386r 3  85 rr        	sta z80_l
000388r 3  90 02        	bcc :+
00038Ar 3  E6 rr        	inc z80_h
00038Cr 3               :
00038Cr 3  CA           	dex 			; repeat until we find address.
00038Dr 3  D0 F2        	bne fndob2
00038Fr 3               fndob1:
00038Fr 3  A0 21        	ldy #33			; distance to room it's in.
000391r 3  B1 rr        	lda (z80_hl),y		; fetch status.
000393r 3  60           	rts
000394r 3               .endif
000394r 3               
000394r 3               ;---------------------------------------------
000394r 3               ; Drop object number at (dispx, dispy).
000394r 3               ;
000394r 3               ; Input:
000394r 3               ;  A = object number
000394r 3               ;---------------------------------------------
000394r 3               
000394r 3               .if oflag
000394r 3               drpob:
000394r 3  CD rr rr     	cmp numob 		; are we checking past the end?
000397r 3  90 01        	bcc :+
000399r 3  60           	rts			; yes, can't drop non-existent item.
00039Ar 3               :
00039Ar 3  20 rr rr     	jsr gotob		; make sure object is in inventory.
00039Dr 3  C5 rr        	cmp scno		; already on this screen?
00039Fr 3  D0 01        	bne :+
0003A1r 3  60           	rts			; yes, nothing to do.
0003A2r 3               :
0003A2r 3  A0 21        	ldy #33
0003A4r 3  A5 rr        	lda scno
0003A6r 3  91 rr        	sta (z80_hl),y		; bring onto screen.
0003A8r 3  A5 rr        	lda dispy		; sprite y coordinate.
0003AAr 3  C8           	iny
0003ABr 3  91 rr        	sta (z80_hl),y		; point to object y.
0003ADr 3  A5 rr        	lda dispx 		; sprite x coordinate.
0003AFr 3  C8           	iny
0003B0r 3  91 rr        	sta (z80_hl),y 		; point to object x
0003B2r 3  4C rr rr     	jmp dobj		; draw the object sprite.
0003B5r 3               
0003B5r 3               ;-----------------------------------------------
0003B5r 3               ; Seek objects at sprite position.
0003B5r 3               ;
0003B5r 3               ; Output:
0003B5r 3               ;  A = object number, if not found A=255
0003B5r 3               ;-----------------------------------------------
0003B5r 3               
0003B5r 3               skobj:
0003B5r 3  A9 rr        	lda #<objdta 		; pointer to objects.
0003B7r 3  85 rr        	sta z80_l
0003B9r 3  A9 rr        	lda #>objdta
0003BBr 3  85 rr        	sta z80_h
0003BDr 3               
0003BDr 3  AD rr rr     	lda numob 		; number of objects in game.
0003C0r 3  85 rr        	sta z80_b 		; set up the loop counter.
0003C2r 3               skobj0:
0003C2r 3  A5 rr        	lda scno		; current room number.
0003C4r 3  A0 21        	ldy #33
0003C6r 3  D1 rr        	cmp (z80_hl),y		; is object in here?
0003C8r 3  D0 03        	bne :+
0003CAr 3  20 rr rr     	jsr skobj1		; yes, check coordinates.
0003CDr 3               :
0003CDr 3  18           	clc			; point to next object in table.
0003CEr 3  A5 rr        	lda z80_l
0003D0r 3  69 27        	adc #39			; size of each object.
0003D2r 3  85 rr        	sta z80_l
0003D4r 3  90 02        	bcc :+
0003D6r 3  E6 rr        	inc z80_h
0003D8r 3               :
0003D8r 3  C6 rr        	dec z80_b
0003DAr 3  D0 E6        	bne skobj0		; repeat for all objects.
0003DCr 3               
0003DCr 3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0003DEr 3  60           	rts
0003DFr 3               
0003DFr 3               skobj1:
0003DFr 3  A0 22        	ldy #34			; point to y coordinate.
0003E1r 3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
0003E3r 3  38           	sec
0003E4r 3  A0 08        	ldy #var_newY
0003E6r 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
0003E8r 3  18           	clc
0003E9r 3  69 0F        	adc #15			; add sprite height minus one.
0003EBr 3  C9 1F        	cmp #31			; within range?
0003EDr 3  B0 18        	bcs skobj2		; no, ignore object.
0003EFr 3               
0003EFr 3  A0 23        	ldy #35			; point to x coordinate now.
0003F1r 3  B1 rr        	lda (z80_hl),y 		; get coordinate.
0003F3r 3  38           	sec
0003F4r 3  A0 09        	ldy #var_newX
0003F6r 3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
0003F8r 3  18           	clc			; add sprite width minus one.
0003F9r 3  69 0F        	adc #15
0003FBr 3  C9 1F        	cmp #31			; within range?
0003FDr 3  B0 08        	bcs skobj2		; no, ignore object.
0003FFr 3               
0003FFr 3  68           	pla			; remove return address from stack.
000400r 3  68           	pla
000401r 3               
000401r 3  AD rr rr     	lda numob 		; objects in game.
000404r 3  38           	sec
000405r 3  E5 rr        	sbc z80_b		; subtract loop counter.
000407r 3               skobj2:
000407r 3  60           	rts			; accumulator now points to object.
000408r 3               .endif
000408r 3               
000408r 3               ;---------------------------------------------------------------------
000408r 3               ; Spawn a new sprite.
000408r 3               ;---------------------------------------------------------------------
000408r 3               
000408r 3               spawn:
000408r 3  A9 rr        	lda #<sprtab		; sprite table.
00040Ar 3  85 rr        	sta z80_l
00040Cr 3  A9 rr        	lda #>sprtab
00040Er 3  85 rr        	sta z80_h
000410r 3               numsp1:
000410r 3  A9 0C        	lda #NUMSPR		; number of sprites.
000412r 3  85 rr        	sta spcnt
000414r 3               spaw0:
000414r 3  A0 00        	ldy #var_Type
000416r 3  B1 rr        	lda (z80_hl),y		; get sprite type.
000418r 3  C9 FF        	cmp #255		; is it an unused slot?
00041Ar 3  F0 0F        	beq spaw1 		; yes, we can use this one.
00041Cr 3               
00041Cr 3  18           	clc 			; point to next sprite in table.
00041Dr 3  A5 rr        	lda z80_l
00041Fr 3  69 11        	adc #TABSIZ		; size of each entry.
000421r 3  85 rr        	sta z80_l
000423r 3  90 02        	bcc :+
000425r 3  E6 rr        	inc z80_h
000427r 3               :
000427r 3  C6 rr        	dec spcnt		; one less iteration.
000429r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
00042Br 3               
00042Br 3               ; Didn't find one but drop through and set up a dummy sprite instead.
00042Br 3               
00042Br 3               spaw1:
00042Br 3  A5 rr        	lda z80_i		; address of original sprite.
00042Dr 3  48           	pha
00042Er 3  A5 rr        	lda z80_x
000430r 3  48           	pha
000431r 3               
000431r 3  A5 rr        	lda z80_l		; store spawned sprite address.
000433r 3  85 rr        	sta spptr
000435r 3  A5 rr        	lda z80_h
000437r 3  85 rr        	sta spptr+1
000439r 3               
000439r 3  A5 rr        	lda z80_c
00043Br 3  A0 00        	ldy #var_Type
00043Dr 3  91 rr        	sta (z80_hl),y 		; set the type.
00043Fr 3  A0 05        	ldy #var_newType
000441r 3  91 rr        	sta (z80_hl),y		; copy
000443r 3               
000443r 3  A5 rr        	lda z80_b
000445r 3  A0 01        	ldy #var_Image
000447r 3  91 rr        	sta (z80_hl),y		; set the image.
000449r 3  A0 06        	ldy #var_newImage
00044Br 3  91 rr        	sta (z80_hl),y		; copy
00044Dr 3               
00044Dr 3  A9 00        	lda #0 				; frame zero.
00044Fr 3  A0 02        	ldy #var_Frame
000451r 3  91 rr        	sta (z80_hl),y		; set frame.
000453r 3  A0 07        	ldy #var_newFrame
000455r 3  91 rr        	sta (z80_hl),y		; copy
000457r 3               
000457r 3  A0 08        	ldy #8
000459r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00045Br 3  A0 03        	ldy #3
00045Dr 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
00045Fr 3  A0 08        	ldy #8
000461r 3  91 rr        	sta (z80_hl),y		; copy
000463r 3               
000463r 3  A0 09        	ldy #9
000465r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000467r 3  A0 04        	ldy #4
000469r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
00046Br 3  A0 09        	ldy #9
00046Dr 3  91 rr        	sta (z80_hl),y		; copy
00046Fr 3               
00046Fr 3  A0 0A        	ldy #10				; direction of original.
000471r 3  B1 rr        	lda (z80_ix),y
000473r 3  91 rr        	sta (z80_hl),y		; direction
000475r 3               
000475r 3  A9 00        	lda #0
000477r 3  A0 0D        	ldy #var_jumpLo
000479r 3  91 rr        	sta (z80_hl),y		; reset parameter.
00047Br 3  C8           	iny
00047Cr 3  91 rr        	sta (z80_hl),y		; reset parameter.
00047Er 3  C8           	iny
00047Fr 3  91 rr        	sta (z80_hl),y		; reset parameter.
000481r 3  C8           	iny
000482r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000484r 3               rtssp:
000484r 3  A5 rr        	lda spptr			; address of new sprite.
000486r 3  85 rr        	sta z80_x
000488r 3  A5 rr        	lda spptr+1
00048Ar 3  85 rr        	sta z80_i
00048Cr 3               evis1:
00048Cr 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
00048Fr 3               
00048Fr 3  A5 rr        	lda spptr 			; address of new sprite.
000491r 3  85 rr        	sta z80_x
000493r 3  A5 rr        	lda spptr+1
000495r 3  85 rr        	sta z80_i
000497r 3               
000497r 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
000497r 3  A0 03        	ldy #var_Y
000499r 3  B1 rr        	lda (z80_hl), y		; old x coord
00049Br 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
00049Dr 3  B0 03        	bcs :+				; yes, don't draw it.
00049Fr 3               
00049Fr 3  20 rr rr     	jsr sspria 			; display the new sprite.
0004A2r 3               :
0004A2r 3  68           	pla					; address of original sprite.
0004A3r 3  85 rr        	sta z80_x
0004A5r 3  68           	pla
0004A6r 3  85 rr        	sta z80_i
0004A8r 3               
0004A8r 3  60           	rts
0004A9r 3               
0004A9r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
0004ADr 3  30 30        
0004AFr 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
0004B3r 3  30 30        
0004B5r 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0004B9r 3  30 30        
0004BBr 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
0004BDr 3               
0004BDr 3               ;----------------------------------------------------
0004BDr 3               ; Check y-pos
0004BDr 3               ;----------------------------------------------------
0004BDr 3               
0004BDr 3               checkx:
0004BDr 3  A5 rr        	lda dispy		; y position.
0004BFr 3  C9 16        	cmp #22			; off screen?
0004C1r 3  B0 01        	bcs :+
0004C3r 3  60           	rts			; no, it's okay.
0004C4r 3               :
0004C4r 3  68           	pla			; remove return address from stack.
0004C5r 3  85 rr        	sta z80_l
0004C7r 3  68           	pla
0004C8r 3  85 rr        	sta z80_h
0004CAr 3  60           	rts
0004CBr 3               
0004CBr 3               ;-----------------------------------------------
0004CBr 3               ; Displays the current high score.
0004CBr 3               ;-----------------------------------------------
0004CBr 3               
0004CBr 3               dhisc:
0004CBr 3  A9 rr        	lda #<hiscor 		; high score text.
0004CDr 3  8D rr rr     	sta dscor3+1
0004D0r 3  8D rr rr     	sta bscor3+1
0004D3r 3  A9 rr        	lda #>hiscor
0004D5r 3  8D rr rr     	sta dscor3+2
0004D8r 3  8D rr rr     	sta bscor3+2
0004DBr 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
0004DEr 3               
0004DEr 3               ;------------------------------------------------------
0004DEr 3               ; Displays the current score.
0004DEr 3               ;------------------------------------------------------
0004DEr 3               
0004DEr 3               dscor:
0004DEr 3  A9 rr        	lda #<score		; score text.
0004E0r 3  8D rr rr     	sta dscor3+1
0004E3r 3  8D rr rr     	sta bscor3+1
0004E6r 3  A9 rr        	lda #>score
0004E8r 3  8D rr rr     	sta dscor3+2
0004EBr 3  8D rr rr     	sta bscor3+2
0004EEr 3               dscor1:
0004EEr 3  8C rr rr     	sty tmpscr
0004F1r 3  20 rr rr     	jsr preprt		; set up font and print position.
0004F4r 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
0004F7r 3               
0004F7r 3               ;	lda #6			; digits to display.
0004F7r 3               ;	sta z80_b
0004F7r 3  A5 rr        	lda prtmod		; get print mode.
0004F9r 3  F0 03        	beq :+			; standard size text?
0004FBr 3  4C rr rr     	jmp bscor0		; no, show double-height.
0004FEr 3               :
0004FEr 3               dscor0:
0004FEr 3               ;	ldy #0
0004FEr 3               ;	lda (z80_hl),y 		; fetch character.
0004FEr 3  AC rr rr     	ldy tmpscr
000501r 3               dscor3:
000501r 3  B9 rr rr     	lda score,y
000504r 3  20 rr rr     	jsr pchar 		; display character.
000507r 3  E6 rr        	inc dispx		; move along x coordinate
000509r 3               
000509r 3               ;	inc z80_l		; next score column.
000509r 3               ;	bne :+
000509r 3               ;	inc z80_h
000509r 3               ;:
000509r 3  EE rr rr     	inc tmpscr
00050Cr 3  C6 rr        	dec z80_b
00050Er 3  D0 EE        	bne dscor0 		; repeat for all digits.
000510r 3               dscor2:
000510r 3  A5 rr        	lda dispx 		; set up display coordinates.
000512r 3  85 rr        	sta charx
000514r 3  A5 rr        	lda dispy
000516r 3  85 rr        	sta chary
000518r 3  60           	rts
000519r 3               
000519r 3  00           tmpscr:	.byte 0
00051Ar 3               ;------------------------------------------------------
00051Ar 3               ; Displays the current score in double-height characters.
00051Ar 3               ;
00051Ar 3               ; Input:
00051Ar 3               ;  B  = digit number
00051Ar 3               ;  HL = score string
00051Ar 3               ;------------------------------------------------------
00051Ar 3               
00051Ar 3               bscor0:
00051Ar 3               ;	ldy #0
00051Ar 3               
00051Ar 3               ;	lda (z80_hl),y 		; fetch character.
00051Ar 3  A4 rr        	ldy tmp
00051Cr 3               bscor3:
00051Cr 3  B9 rr rr     	lda score,y
00051Fr 3  20 rr rr     	jsr bchar 		; display big char.
000522r 3               
000522r 3               ;	inc z80_l 		; next score column.
000522r 3               ;	bne :+
000522r 3               ;	inc z80_h
000522r 3               ;:
000522r 3  E6 rr        	inc tmp
000524r 3  C6 rr        	dec z80_b
000526r 3  F0 03        	beq :+
000528r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
00052Br 3               :
00052Br 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
00052Er 3               
00052Er 3               ;-----------------------------------------------------
00052Er 3               ; Adds number in the hl pair to the score.
00052Er 3               ;-----------------------------------------------------
00052Er 3               
00052Er 3               addsc:
00052Er 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000530r 3  85 rr        	sta z80_e
000532r 3  A9 rr        	lda #>(score+1)
000534r 3  85 rr        	sta z80_d
000536r 3  A9 10        	lda #<10000		; amount to add each time.
000538r 3  85 rr        	sta z80_c
00053Ar 3  A9 27        	lda #>10000
00053Cr 3  85 rr        	sta z80_b
00053Er 3  20 rr rr     	jsr incsc		; add to score.
000541r 3               
000541r 3  E6 rr        	inc z80_e		; thousands column.
000543r 3  D0 02        	bne :+
000545r 3  E6 rr        	inc z80_d
000547r 3               :
000547r 3  A9 E8        	lda #<1000		; amount to add each time.
000549r 3  85 rr        	sta z80_c
00054Br 3  A9 03        	lda #>1000
00054Dr 3  85 rr        	sta z80_b
00054Fr 3  20 rr rr     	jsr incsc 		; add to score.
000552r 3               
000552r 3  E6 rr        	inc z80_e		; hundreds column.
000554r 3  D0 02        	bne :+
000556r 3  E6 rr        	inc z80_d
000558r 3               :
000558r 3  A9 64        	lda #<100		; amount to add each time.
00055Ar 3  85 rr        	sta z80_c
00055Cr 3  A9 00        	lda #>100
00055Er 3  85 rr        	sta z80_b
000560r 3  20 rr rr     	jsr incsc		; add to score.
000563r 3               
000563r 3  E6 rr        	inc z80_e 		; tens column.
000565r 3  D0 02        	bne :+
000567r 3  E6 rr        	inc z80_d
000569r 3               :
000569r 3  A9 0A        	lda #<10		; amount to add each time.
00056Br 3  85 rr        	sta z80_c
00056Dr 3  A9 00        	lda #>10
00056Fr 3  85 rr        	sta z80_b
000571r 3  20 rr rr     	jsr incsc 		; add to score.
000574r 3               
000574r 3  E6 rr        	inc z80_e		; units column.
000576r 3  D0 02        	bne :+
000578r 3  E6 rr        	inc z80_d
00057Ar 3               :
00057Ar 3  A9 01        	lda #<1			; units.
00057Cr 3  85 rr        	sta z80_c
00057Er 3  A9 00        	lda #>1
000580r 3  85 rr        	sta z80_b
000582r 3               incsc:
000582r 3  A5 rr        	lda z80_h		; store amount to add.
000584r 3  48           	pha
000585r 3  A5 rr        	lda z80_l
000587r 3  48           	pha
000588r 3               
000588r 3  38           	sec			; subtract from amount to add.
000589r 3  A5 rr        	lda z80_l
00058Br 3  E5 rr        	sbc z80_c
00058Dr 3  85 rr        	sta z80_l
00058Fr 3  A5 rr        	lda z80_h
000591r 3  E5 rr        	sbc z80_b
000593r 3  85 rr        	sta z80_h
000595r 3  90 14        	bcc incsc0		; too much, restore value.
000597r 3               
000597r 3  68           	pla			; delete the previous amount from the stack.
000598r 3  68           	pla
000599r 3               
000599r 3  A5 rr        	lda z80_d 		; store column position.
00059Br 3  48           	pha
00059Cr 3  A5 rr        	lda z80_e
00059Er 3  48           	pha
00059Fr 3  20 rr rr     	jsr incsc2		; do the increment.
0005A2r 3               
0005A2r 3  68           	pla			; restore column.
0005A3r 3  85 rr        	sta z80_e
0005A5r 3  68           	pla
0005A6r 3  85 rr        	sta z80_d
0005A8r 3  4C rr rr     	jmp incsc		; repeat until all added.
0005ABr 3               
0005ABr 3               incsc0:
0005ABr 3  68           	pla			; restore previous value.
0005ACr 3  85 rr        	sta z80_l
0005AEr 3  68           	pla
0005AFr 3  85 rr        	sta z80_h
0005B1r 3  60           	rts
0005B2r 3               incsc2:
0005B2r 3  A0 00        	ldy #0
0005B4r 3  B1 rr        	lda (z80_de),y 		; get amount.
0005B6r 3  18           	clc
0005B7r 3  69 01        	adc #1			; add one to column.
0005B9r 3  91 rr        	sta (z80_de),y		; write new column total.
0005BBr 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0005BDr 3  B0 01        	bcs :+
0005BFr 3  60           	rts			; no, carry on.
0005C0r 3               :
0005C0r 3  A9 30        	lda #'0'		; make it zero.
0005C2r 3  91 rr        	sta (z80_de),y		; write new column total.
0005C4r 3  C6 rr        	dec z80_e		; back one column.
0005C6r 3  D0 02        	bne :+
0005C8r 3  C6 rr        	dec z80_d
0005CAr 3               :
0005CAr 3  4C rr rr     	jmp incsc2
0005CDr 3               
0005CDr 3               ;------------------------------------
0005CDr 3               ; Add bonus to score and reset bonus
0005CDr 3               ;------------------------------------
0005CDr 3               
0005CDr 3               addbo:
0005CDr 3  A2 05        	ldx #5			; last digit.
0005CFr 3  18           	clc
0005D0r 3               addbo0:
0005D0r 3  BD rr rr     	lda score,x		; get score.
0005D3r 3  7D rr rr     	adc bonus,x		; add bonus.
0005D6r 3  38           	sec			; 0 to 18.
0005D7r 3  E9 30        	sbc #48
0005D9r 3  48           	pha
0005DAr 3  A9 30        	lda #'0'
0005DCr 3  9D rr rr     	sta bonus,x
0005DFr 3  68           	pla
0005E0r 3  C9 3A        	cmp #58
0005E2r 3  90 03        	bcc addbo1
0005E4r 3  38           	sec
0005E5r 3  E9 0A        	sbc #10
0005E7r 3               addbo1:
0005E7r 3  9D rr rr     	sta score,x		; zeroise bonus.
0005EAr 3  CA           	dex			; next digit.
0005EBr 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0005EDr 3  60           	rts
0005EEr 3               
0005EEr 3               ;------------------------------------
0005EEr 3               ; Swap score and bonus.
0005EEr 3               ;------------------------------------
0005EEr 3               
0005EEr 3               swpsb:
0005EEr 3  A2 05        	ldx #5			; digits to add.
0005F0r 3               swpsb0:
0005F0r 3  BD rr rr     	lda score,x 		; get score digits.
0005F3r 3  48           	pha			; save digit
0005F4r 3  BD rr rr     	lda bonus,x 		; get bonus digits.
0005F7r 3  9D rr rr     	sta score,x		; switch score-bonus
0005FAr 3  68           	pla
0005FBr 3  9D rr rr     	sta bonus,x
0005FEr 3  CA           	dex 			; repeat for all 6 digits.
0005FFr 3  10 EF        	bpl swpsb0
000601r 3  60           	rts
000602r 3               
000602r 3               ;----------------------------------------------------
000602r 3               ; Get print address.
000602r 3               ;----------------------------------------------------
000602r 3               
000602r 3               gprad:
000602r 3  98           	tya
000603r 3  48           	pha
000604r 3               
000604r 3  A5 rr        	lda dispx 		; x coordinate.
000606r 3  85 rr        	sta scraddr
000608r 3  A9 00        	lda #0
00060Ar 3  85 rr        	sta scraddr+1
00060Cr 3  06 rr        	asl scraddr  		; multiply char by 16
00060Er 3  26 rr        	rol scraddr+1
000610r 3  06 rr        	asl scraddr
000612r 3  26 rr        	rol scraddr+1
000614r 3  06 rr        	asl scraddr
000616r 3  26 rr        	rol scraddr+1
000618r 3  06 rr        	asl scraddr
00061Ar 3  26 rr        	rol scraddr+1
00061Cr 3               
00061Cr 3  A5 rr        	lda dispy		; y coordinate.
00061Er 3  0A           	asl a
00061Fr 3  0A           	asl a
000620r 3  0A           	asl a			; multiply char by 8
000621r 3  A8           	tay
000622r 3               
000622r 3  18           	clc
000623r 3  A5 rr        	lda scraddr
000625r 3  79 00 07     	adc SCADTB_lb,y
000628r 3  85 rr        	sta scraddr
00062Ar 3  A5 rr        	lda scraddr+1
00062Cr 3  79 00 08     	adc SCADTB_hb,y
00062Fr 3  85 rr        	sta scraddr+1
000631r 3               
000631r 3  A5 rr        	lda prtmod		; Double line if bigtxt
000633r 3  F0 08        	beq noskip
000635r 3  A5 rr        	lda dispx
000637r 3  29 E0        	and #$e0
000639r 3  F0 02        	beq noskip
00063Br 3  E6 rr        	inc scraddr+1
00063Dr 3               noskip:
00063Dr 3               
00063Dr 3  68           	pla
00063Er 3  A8           	tay
00063Fr 3  60           	rts
000640r 3               ;--------------------------------------------------------------
000640r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000640r 3               ;
000640r 3               ; Output:
000640r 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
000640r 3               ;--------------------------------------------------------------
000640r 3               
000640r 3               pradd:
000640r 3  A5 rr        	lda dispy 		; y coordinate.
000642r 3  85 rr        	sta bufaddr
000644r 3  A9 00        	lda #0
000646r 3  85 rr        	sta bufaddr+1
000648r 3  06 rr        	asl bufaddr  		; multiply char by 32
00064Ar 3  26 rr        	rol bufaddr+1
00064Cr 3  06 rr        	asl bufaddr
00064Er 3  26 rr        	rol bufaddr+1
000650r 3  06 rr        	asl bufaddr
000652r 3  26 rr        	rol bufaddr+1
000654r 3  06 rr        	asl bufaddr
000656r 3  26 rr        	rol bufaddr+1
000658r 3  06 rr        	asl bufaddr
00065Ar 3  26 rr        	rol bufaddr+1
00065Cr 3  18           	clc			; add address of MAP graphics.
00065Dr 3  A5 rr        	lda bufaddr
00065Fr 3  65 rr        	adc dispx
000661r 3  69 00        	adc #<MAP
000663r 3  85 rr        	sta bufaddr
000665r 3  A5 rr        	lda bufaddr+1
000667r 3  69 04        	adc #>MAP
000669r 3  85 rr        	sta bufaddr+1
00066Br 3  60           	rts
00066Cr 3               
00066Cr 3               ;--------------------------------------------------------------
00066Cr 3               ; Get attribute address at (dispx, dispy).
00066Cr 3               ;
00066Cr 3               ; Output:
00066Cr 3               ;  bufaddr = COLOR + dispy*22 + dispx
00066Cr 3               ;--------------------------------------------------------------
00066Cr 3               
00066Cr 3               gaadd:
00066Cr 3  A5 rr        	lda dispy
00066Er 3  4A           	lsr a
00066Fr 3  A8           	tay
000670r 3  B9 55 0A     	lda COLATTTB_hb,y
000673r 3  85 rr        	sta bufaddr+1
000675r 3  B9 4A 0A     	lda COLATTTB_lb,y
000678r 3  18           	clc
000679r 3  65 rr        	adc dispx
00067Br 3  85 rr        	sta bufaddr
00067Dr 3  60           	rts
00067Er 3               
00067Er 3               ;----------------------------------------------
00067Er 3               ; Print attributes, properties and pixels.
00067Er 3               ;
00067Er 3               ; Input:
00067Er 3               ;  A	= tile number
00067Er 3               ;----------------------------------------------
00067Er 3               
00067Er 3               pbpattr:			; entry PUTBLOCK command
00067Er 3  A4 rr        	ldy charx
000680r 3  84 rr        	sty dispx
000682r 3  A4 rr        	ldy chary
000684r 3  84 rr        	sty dispy
000686r 3               pattr:
000686r 3               .if aflag
000686r 3               	pha
000686r 3               	jsr wbloc		; save blockinfo
000686r 3               	pla
000686r 3               .endif
000686r 3               
000686r 3               pattr2:
000686r 3  85 rr        	sta z80_b		; store cell in b register for now.
000688r 3  AA           	tax
000689r 3  BD rr rr     	lda bprop,x 		; block properties.
00068Cr 3  85 rr        	sta z80_c
00068Er 3  C9 08        	cmp #COLECT
000690r 3  D0 04        	bne :+
000692r 3  A5 rr        	lda z80_b
000694r 3  85 rr        	sta colpatt
000696r 3               :
000696r 3  20 rr rr     	jsr pradd 		; get property buffer address.
000699r 3  A5 rr        	lda z80_c
00069Br 3  A0 00        	ldy #0
00069Dr 3  91 rr        	sta (bufaddr),y 	; write property.
00069Fr 3  A5 rr        	lda z80_b 		; restore cell.
0006A1r 3  4C rr rr     	jmp panp
0006A4r 3               ; Print attributes, no properties.
0006A4r 3               
0006A4r 3               ;colpatt:	.byte 0
0006A4r 3               
0006A4r 3               panp:
0006A4r 3  85 rr        	sta z80_e		; displacement in e.
0006A6r 3  A9 00        	lda #0
0006A8r 3  85 rr        	sta z80_d		; no high byte.
0006AAr 3  06 rr        	asl z80_e  		; multiply char by 8.
0006ACr 3  26 rr        	rol z80_d
0006AEr 3  06 rr        	asl z80_e
0006B0r 3  26 rr        	rol z80_d
0006B2r 3  06 rr        	asl z80_e
0006B4r 3  26 rr        	rol z80_d
0006B6r 3  18           	clc
0006B7r 3  A5 rr        	lda z80_e
0006B9r 3  69 rr        	adc #<chgfx 		; address of graphics.
0006BBr 3  85 rr        	sta tileaddr
0006BDr 3  A5 rr        	lda z80_d
0006BFr 3  69 rr        	adc #>chgfx
0006C1r 3  85 rr        	sta tileaddr+1
0006C3r 3               
0006C3r 3  A6 rr        	ldx z80_b		; set colour attribute
0006C5r 3  BD rr rr     	lda bCol,x
0006C8r 3  48           	pha
0006C9r 3  20 rr rr     	jsr gaadd
0006CCr 3  A0 00        	ldy #0
0006CEr 3  68           	pla
0006CFr 3  91 rr        	sta (bufaddr),y
0006D1r 3               
0006D1r 3  20 rr rr     	jsr gprad 		; get screen address.
0006D4r 3  A2 07        	ldx #7			; number of pixel rows to write.
0006D6r 3               panp0:
0006D6r 3  A0 00        	ldy #0
0006D8r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
0006DAr 3               .if iflag
0006DAr 3               	eor #$ff		; Invert
0006DAr 3               .endif
0006DAr 3  BC rr rr     	ldy scrtab,x
0006DDr 3  91 rr        	sta (scraddr),y 	; copy to screen.
0006DFr 3  E6 rr        	inc tileaddr 		; next image byte.
0006E1r 3  D0 02        	bne :+
0006E3r 3  E6 rr        	inc tileaddr+1
0006E5r 3               :
0006E5r 3  CA           	dex	 		; repeat for 8 pixel rows.
0006E6r 3  10 EE        	bpl panp0
0006E8r 3  E6 rr        	inc dispx 		; move along one.
0006EAr 3  E6 rr        	inc charx
0006ECr 3  60           	rts
0006EDr 3               
0006EDr 3               ;----------------------------------------------
0006EDr 3               ; Write block
0006EDr 3               ;----------------------------------------------
0006EDr 3               
0006EDr 3               .if aflag
0006EDr 3               wbloc:
0006EDr 3               	ldy #3
0006EDr 3               	sta (pbptr),y		; store block number
0006EDr 3               	dey
0006EDr 3               	lda dispx
0006EDr 3               	sta (pbptr),y		; write x position of block.
0006EDr 3               	dey
0006EDr 3               	lda dispy
0006EDr 3               	sta (pbptr),y		; write y position of block.
0006EDr 3               	dey
0006EDr 3               	lda scno
0006EDr 3               	sta (pbptr),y		; write screen.
0006EDr 3               	clc			; point to next free location
0006EDr 3               	lda pbptr
0006EDr 3               	adc #4
0006EDr 3               	sta pbptr
0006EDr 3               	bcc :+
0006EDr 3               	inc pbptr+1
0006EDr 3               :
0006EDr 3               	rts
0006EDr 3               .endif
0006EDr 3               
0006EDr 3               ;.if kflag
0006EDr 3               ;panp:
0006EDr 3               ;.endif
0006EDr 3               
0006EDr 3               ;----------------------------------------------
0006EDr 3               ; Print character pixels, no more.
0006EDr 3               ;
0006EDr 3               ; Input:
0006EDr 3               ;  A	= character to print
0006EDr 3               ;----------------------------------------------
0006EDr 3               
0006EDr 3               pchr:
0006EDr 3  20 rr rr     	jsr pchar 		; show character in accumulator.
0006F0r 3  E6 rr        	inc dispx		; move along one.
0006F2r 3  60           	rts
0006F3r 3               
0006F3r 3               ;----------------------------------------------------
0006F3r 3               ; Shifter sprite routine for objects.
0006F3r 3               ;----------------------------------------------------
0006F3r 3               
0006F3r 3               .if oflag
0006F3r 3               sprit7:
0006F3r 3  A5 rr        	lda z80_b
0006F5r 3  F0 0C        	beq sprit0
0006F7r 3  85 rr        	sta z80_a
0006F9r 3               sprit3:
0006F9r 3  46 rr        	lsr spr			; shift into position.
0006FBr 3  66 rr        	ror spr+1
0006FDr 3  66 rr        	ror spr+2
0006FFr 3  C6 rr        	dec z80_a		; one less iteration.
000701r 3  D0 F6        	bne sprit3
000703r 3               sprit0:
000703r 3  60           	rts 			; now apply to screen.
000704r 3               .endif
000704r 3               
000704r 3               ;-----------------------------------------------------------
000704r 3               ; Get room address.
000704r 3               ;-----------------------------------------------------------
000704r 3               
000704r 3               groom:
000704r 3  A6 rr        	ldx scno 		; screen number.
000706r 3  A0 00        	ldy #0
000708r 3               groomx:
000708r 3  A9 rr        	lda #<scdat 		; pointer to screens.
00070Ar 3  85 rr        	sta z80_l
00070Cr 3  A9 rr        	lda #>scdat
00070Er 3  85 rr        	sta z80_h
000710r 3               groom1:
000710r 3  E0 00        	cpx #0			; is it the first one?
000712r 3  F0 15        	beq groom0 		; no more screens to skip.
000714r 3               
000714r 3  18           	clc
000715r 3  A5 rr        	lda z80_l
000717r 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
00071Ar 3  85 rr        	sta z80_l
00071Cr 3  C8           	iny			; point to high byte.
00071Dr 3  A5 rr        	lda z80_h
00071Fr 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
000722r 3  85 rr        	sta z80_h
000724r 3  C8           	iny			; next address.
000725r 3               
000725r 3  CA           	dex 			; one less iteration.
000726r 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000729r 3               groom0:
000729r 3  AD rr rr     	lda numsc		; add displacement.
00072Cr 3  0A           	asl a
00072Dr 3  18           	clc			; add double displacement to address.
00072Er 3  65 rr        	adc z80_l
000730r 3  85 rr        	sta z80_l
000732r 3  A5 rr        	lda z80_h
000734r 3  69 00        	adc #0
000736r 3  85 rr        	sta z80_h
000738r 3  60           	rts
000739r 3               
000739r 3               ;-----------------------------------------------------------
000739r 3               ; Draw present room.
000739r 3               ;-----------------------------------------------------------
000739r 3               
000739r 3               droom:
000739r 3  AD rr rr     	lda wintop 		; window top.
00073Cr 3  85 rr        	sta dispy		; set cursor y position.
00073Er 3               droom2:
00073Er 3  20 rr rr     	jsr groom 		; get address of current room.
000741r 3  A9 00        	lda #0	 		; zero in accumulator.
000743r 3  85 rr        	sta comcnt 		; reset compression counter.
000745r 3  AD rr rr     	lda winhgt 		; height of window.
000748r 3  85 rr        	sta rrow		; set row counter
00074Ar 3               droom0:
00074Ar 3  AD rr rr     	lda winlft 		; window left edge.
00074Dr 3  85 rr        	sta dispx 		; set cursor x position.
00074Fr 3  AD rr rr     	lda winwid 		; width of window.
000752r 3  85 rr        	sta rcol		; set column counter
000754r 3               droom1:
000754r 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
000757r 3               .if xflag
000757r 3               	jsr drwmeta
000757r 3               .else
000757r 3  20 rr rr     	jsr pattr2 		; show attributes and block.
00075Ar 3               .endif
00075Ar 3  C6 rr        	dec rcol		; one less column.
00075Cr 3  D0 F6        	bne droom1 		; repeat for entire line.
00075Er 3  E6 rr        	inc dispy		; move down one line.
000760r 3               .if xflag
000760r 3               	inc dispy		; move down one line.
000760r 3               .endif
000760r 3  C6 rr        	dec rrow 		; one less row.
000762r 3  D0 E6        	bne droom0 		; repeat for all rows.
000764r 3  60           	rts
000765r 3               
000765r 3               ;----------------------------------------------
000765r 3               ; Decompress bytes on-the-fly.
000765r 3               ;----------------------------------------------
000765r 3               
000765r 3               flbyt:
000765r 3  A5 rr        	lda comcnt 		; compression counter.
000767r 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000769r 3               
000769r 3  A0 00        	ldy #0
00076Br 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
00076Dr 3  E6 rr        	inc z80_l 		; point to next cell.
00076Fr 3  D0 02        	bne :+
000771r 3  E6 rr        	inc z80_h
000773r 3               :
000773r 3  C9 FF        	cmp #255 		; is this byte a control code?
000775r 3  F0 01        	beq :+
000777r 3  60           	rts 			; no, this byte is uncompressed.
000778r 3               :
000778r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
00077Ar 3  85 rr        	sta combyt 		; set up the type.
00077Cr 3  E6 rr        	inc z80_l 		; point to quantity.
00077Er 3  D0 02        	bne :+
000780r 3  E6 rr        	inc z80_h
000782r 3               :
000782r 3  B1 rr        	lda (z80_hl),y 		; get quantity.
000784r 3  E6 rr        	inc z80_l 		; point to next byte.
000786r 3  D0 02        	bne :+
000788r 3  E6 rr        	inc z80_h
00078Ar 3               :
00078Ar 3               flbyt1:
00078Ar 3  85 rr        	sta comcnt 		; store new quantity.
00078Cr 3  C6 rr        	dec comcnt		; one less.
00078Er 3  A5 rr        	lda combyt 		; byte to expand.
000790r 3  60           	rts
000791r 3               
000791r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000791r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000791r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000791r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000791r 3               .if xflag
000791r 3               drwmeta:
000791r 3               	sta tmpblk
000791r 3               	jsr pattr2
000791r 3               
000791r 3               	inc dispy
000791r 3               	dec dispx
000791r 3               	ldx tmpblk
000791r 3               	beq :+
000791r 3               	inx
000791r 3               :
000791r 3               	txa
000791r 3               	jsr pattr2
000791r 3               
000791r 3               	ldx tmpblk
000791r 3               	beq :+
000791r 3               	inx
000791r 3               	inx
000791r 3               	inx
000791r 3               :
000791r 3               	txa
000791r 3               	jsr pattr2
000791r 3               
000791r 3               	dec dispy
000791r 3               	dec dispx
000791r 3               	ldx tmpblk
000791r 3               	beq :+
000791r 3               	inx
000791r 3               	inx
000791r 3               :
000791r 3               	txa
000791r 3               	jsr pattr2
000791r 3               	rts
000791r 3               
000791r 3               tmpblk:	.byte 0
000791r 3               
000791r 3               .endif
000791r 3               
000791r 3               ;------------------------------------------
000791r 3               ; Ladder down check.
000791r 3               ;
000791r 3               ; Input:
000791r 3               ;  IX = sprite pointer
000791r 3               ;------------------------------------------
000791r 3               
000791r 3               .if lflag
000791r 3               laddd:
000791r 3  A0 09        	ldy #9
000793r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000795r 3  85 rr        	sta dispx
000797r 3               
000797r 3  A0 08        	ldy #8
000799r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00079Br 3  29 FE        	and #254		; make it even.
00079Dr 3  91 rr        	sta (z80_ix),y 		; reset it.
00079Fr 3  18           	clc 			; look down 16 pixels.
0007A0r 3               numsp5:
0007A0r 3  69 10        	adc #SPR_HGT
0007A2r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0007A4r 3  4C rr rr     	jmp laddv
0007A7r 3               
0007A7r 3               ;------------------------------------------
0007A7r 3               ; Ladder up check.
0007A7r 3               ;
0007A7r 3               ; Input:
0007A7r 3               ;  IX = sprite pointer
0007A7r 3               ;
0007A7r 3               ; Output:
0007A7r 3               ;  A  = 0 is ok, A <>0 is not ok
0007A7r 3               ;------------------------------------------
0007A7r 3               
0007A7r 3               laddu:
0007A7r 3  A0 09        	ldy #9
0007A9r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0007ABr 3  85 rr        	sta dispx
0007ADr 3               
0007ADr 3  A0 08        	ldy #8
0007AFr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
0007B1r 3  29 FE        	and #254 		; make it even.
0007B3r 3  91 rr        	sta (z80_ix),y		; reset it.
0007B5r 3  18           	clc 			; look 2 pixels above feet.
0007B6r 3               numsp6:
0007B6r 3  69 0E        	adc #SPR_HGT-2
0007B8r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0007BAr 3               laddv:
0007BAr 3  20 rr rr     	jsr tstbl 		; get map address.
0007BDr 3  20 rr rr     	jsr ldchk 		; standard ladder check.
0007C0r 3  F0 01        	beq :+
0007C2r 3  60           	rts 			; no way through.
0007C3r 3               :
0007C3r 3  E6 rr        	inc bufaddr 		; look right one cell.
0007C5r 3  D0 02        	bne :+
0007C7r 3  E6 rr        	inc bufaddr+1
0007C9r 3               :
0007C9r 3  20 rr rr     	jsr ldchk 		; do the check.
0007CCr 3  F0 01        	beq :+
0007CEr 3  60           	rts 			; impassable.
0007CFr 3               :
0007CFr 3  A5 rr        	lda dispx 		; y coordinate.
0007D1r 3  29 07        	and #7 			; position straddling block cells.
0007D3r 3  D0 01        	bne :+
0007D5r 3  60           	rts 			; no more checks needed.
0007D6r 3               :
0007D6r 3  E6 rr        	inc bufaddr 		; look to third cell.
0007D8r 3  D0 02        	bne :+
0007DAr 3  E6 rr        	inc bufaddr+1
0007DCr 3               :
0007DCr 3  20 rr rr     	jsr ldchk 		; do the check.
0007DFr 3  60           	rts  			; return with zero flag set accordingly.
0007E0r 3               .endif
0007E0r 3               
0007E0r 3               ;---------------------------------------------------------
0007E0r 3               ; Can go up check.
0007E0r 3               ;
0007E0r 3               ; Input:
0007E0r 3               ;  IX = sprite pointer
0007E0r 3               ;
0007E0r 3               ; Output:
0007E0r 3               ;  A  = 0 is ok, A <>0 is not ok
0007E0r 3               ;---------------------------------------------------------
0007E0r 3               
0007E0r 3               cangu:
0007E0r 3  A0 09        	ldy #9
0007E2r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0007E4r 3  85 rr        	sta dispx
0007E6r 3  A0 08        	ldy #8
0007E8r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0007EAr 3  38           	sec
0007EBr 3  E9 02        	sbc #2
0007EDr 3  85 rr        	sta dispy		; coords in dispx,dispy.
0007EFr 3  20 rr rr     	jsr tstbl 		; get map address.
0007F2r 3  20 rr rr     	jsr lrchk 		; standard left/right check.
0007F5r 3  F0 01        	beq :+
0007F7r 3  60           	rts			; no way through.
0007F8r 3               :
0007F8r 3  E6 rr        	inc bufaddr		; look right one cell.
0007FAr 3  D0 02        	bne :+
0007FCr 3  E6 rr        	inc bufaddr+1
0007FEr 3               :
0007FEr 3  20 rr rr     	jsr lrchk 		; do the check.
000801r 3  F0 01        	beq :+
000803r 3  60           	rts			; impassable.
000804r 3               :
000804r 3  A5 rr        	lda dispx		; x coordinate.
000806r 3  29 07        	and #7			; position straddling block cells.
000808r 3  D0 01        	bne :+
00080Ar 3  60           	rts			; no more checks needed.
00080Br 3               :
00080Br 3  E6 rr        	inc bufaddr		; look to third cell.
00080Dr 3  D0 02        	bne :+
00080Fr 3  E6 rr        	inc bufaddr+1
000811r 3               :
000811r 3  20 rr rr     	jsr lrchk		; do the check.
000814r 3  60           	rts 			; return with zero flag set accordingly.
000815r 3               
000815r 3               ;---------------------------------------------------------
000815r 3               ; Can go down check.
000815r 3               ;
000815r 3               ; Input:
000815r 3               ;  IX = sprite pointer
000815r 3               ;
000815r 3               ; Output:
000815r 3               ;  A  = 0 is ok, A <>0 is not ok
000815r 3               ;---------------------------------------------------------
000815r 3               
000815r 3               cangd:
000815r 3  A0 09        	ldy #9
000817r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000819r 3  85 rr        	sta dispx
00081Br 3  A0 08        	ldy #8
00081Dr 3  B1 rr        	lda (z80_ix),y		; y coordinate.
00081Fr 3  18           	clc
000820r 3               numsp3:
000820r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
000822r 3  85 rr        	sta dispy		; coords in dispx,dispy.
000824r 3  20 rr rr     	jsr tstbl 		; get map address.
000827r 3  20 rr rr     	jsr plchk 		; block, platform check.
00082Ar 3  F0 01        	beq :+
00082Cr 3  60           	rts			; no way through.
00082Dr 3               :
00082Dr 3  E6 rr        	inc bufaddr		; look right one cell.
00082Fr 3  D0 02        	bne :+
000831r 3  E6 rr        	inc bufaddr+1
000833r 3               :
000833r 3  20 rr rr     	jsr plchk		; block, platform check.
000836r 3  F0 01        	beq :+
000838r 3  60           	rts			; impassable.
000839r 3               :
000839r 3  A5 rr        	lda dispx		; x coordinate.
00083Br 3  29 07        	and #7			; position straddling block cells.
00083Dr 3  D0 01        	bne :+
00083Fr 3  60           	rts			; no more checks needed.
000840r 3               :
000840r 3  E6 rr        	inc bufaddr		; look to third cell.
000842r 3  D0 02        	bne :+
000844r 3  E6 rr        	inc bufaddr+1
000846r 3               :
000846r 3  20 rr rr     	jsr plchk		; block, platform check.
000849r 3  60           	rts			; return with zero flag set accordingly.
00084Ar 3               
00084Ar 3               ;---------------------------------------------------------
00084Ar 3               ; Can go left check.
00084Ar 3               ;
00084Ar 3               ; Input:
00084Ar 3               ;  IX = sprite pointer
00084Ar 3               ;
00084Ar 3               ; Output:
00084Ar 3               ;  A  = 0 is ok, A <>0 is not ok
00084Ar 3               ;---------------------------------------------------------
00084Ar 3               
00084Ar 3               cangl:
00084Ar 3  A0 08        	ldy #8
00084Cr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00084Er 3  85 rr        	sta dispy
000850r 3  A0 09        	ldy #9
000852r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000854r 3  38           	sec
000855r 3  E9 02        	sbc #2			; look left 2 pixels.
000857r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000859r 3  4C rr rr     	jmp cangh		; test if we can go there.
00085Cr 3               
00085Cr 3               ;---------------------------------------------------------
00085Cr 3               ; Can go right check.
00085Cr 3               ;
00085Cr 3               ; Input:
00085Cr 3               ;  IX = sprite pointer
00085Cr 3               ;
00085Cr 3               ; Output:
00085Cr 3               ;  A  = 0 is ok, A <>0 is not ok
00085Cr 3               ;---------------------------------------------------------
00085Cr 3               
00085Cr 3               cangr:
00085Cr 3  A0 08        	ldy #8
00085Er 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000860r 3  85 rr        	sta dispy
000862r 3  A0 09        	ldy #9
000864r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000866r 3  18           	clc
000867r 3  69 10        	adc #16			; look right 16 pixels.
000869r 3  85 rr        	sta dispx		; coords in dispx,dispy.
00086Br 3               cangh:
00086Br 3               cangh2:
00086Br 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
00086Dr 3  85 rr        	sta z80_b
00086Fr 3  A5 rr        	lda dispy		; y position.
000871r 3  29 07        	and #7			; does x straddle cells?
000873r 3  D0 02        	bne cangh0		; yes, loop counter is good.
000875r 3  C6 rr        	dec z80_b		; one less row to write.
000877r 3               cangh0:
000877r 3  20 rr rr     	jsr tstbl		; get map address.
00087Ar 3               cangh1:
00087Ar 3  20 rr rr     	jsr lrchk		; standard left/right check.
00087Dr 3  F0 01        	beq :+
00087Fr 3  60           	rts			; no way through.
000880r 3               :
000880r 3  48           	pha
000881r 3  18           	clc
000882r 3  A5 rr        	lda bufaddr
000884r 3  69 20        	adc #32		; look down.
000886r 3  85 rr        	sta bufaddr
000888r 3  90 02        	bcc :+
00088Ar 3  E6 rr        	inc bufaddr+1
00088Cr 3               :
00088Cr 3  68           	pla
00088Dr 3               
00088Dr 3  C6 rr        	dec z80_b
00088Fr 3  D0 E9        	bne cangh1
000891r 3  60           	rts
000892r 3               
000892r 3               ;-------------------------------------
000892r 3               ; Check left/right movement is okay.
000892r 3               ;
000892r 3               ; Input:
000892r 3               ;  bufaddr = MAP + x/8 + y/8*32
000892r 3               ;
000892r 3               ; Output:
000892r 3               ;  A  = 0 is ok, A <>0 is not ok
000892r 3               ;-------------------------------------
000892r 3               
000892r 3               lrchk:
000892r 3  A0 00        	ldy #0
000894r 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
000896r 3  C9 02        	cmp #WALL 		; is it passable?
000898r 3  F0 0A        	beq lrchkx		; no.
00089Ar 3               
00089Ar 3  C9 04        	cmp #FODDER		; fodder has to be dug.
00089Cr 3  F0 06        	beq lrchkx		; not passable.
00089Er 3  A9 00        	lda #0
0008A0r 3  60           	rts
0008A1r 3               
0008A1r 3               ;--------------------------------------------------------------
0008A1r 3               ; Called by mmenu
0008A1r 3               ;--------------------------------------------------------------
0008A1r 3               
0008A1r 3               always:
0008A1r 3  A9 FF        	lda #255		; report it as okay.
0008A3r 3  60           	rts
0008A4r 3               
0008A4r 3               lrchkx:
0008A4r 3  A9 01        	lda #1 			; reset all bits.
0008A6r 3  60           	rts
0008A7r 3               
0008A7r 3               
0008A7r 3               ;--------------------------------------------------------------
0008A7r 3               ; Check platform or solid item is not in way.
0008A7r 3               ;
0008A7r 3               ; Input:
0008A7r 3               ;  bufaddr = MAP + x/8 + y/8*32
0008A7r 3               ;
0008A7r 3               ; Output:
0008A7r 3               ;  A  = 0 is ok, A <>0 is not ok
0008A7r 3               ;--------------------------------------------------------------
0008A7r 3               
0008A7r 3               plchk:
0008A7r 3  A0 00        	ldy #0
0008A9r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
0008ABr 3  C9 02        	cmp #WALL 		; is it passable?
0008ADr 3  F0 F5        	beq lrchkx		; no.
0008AFr 3               .if pflag .or dflag
0008AFr 3               	cmp #FODDER		; fodder has to be dug.
0008AFr 3               	beq lrchkx		; not passable.
0008AFr 3               .endif
0008AFr 3  C9 01        	cmp #PLATFM		; platform is solid.
0008B1r 3  F0 07        	beq plchkx		; not passable.
0008B3r 3               .if lflag
0008B3r 3  C9 03        	cmp #LADDER		; is it a ladder?
0008B5r 3  F0 ED        	beq lrchkx		; on ladder, deny movement.
0008B7r 3               .endif
0008B7r 3               plchk0:
0008B7r 3  A9 00        	lda #0			; report as ok
0008B9r 3  60           	rts
0008BAr 3               plchkx:
0008BAr 3  A5 rr        	lda dispy		; x coordinate.
0008BCr 3  29 07        	and #7			; position straddling blocks.
0008BEr 3  F0 E4        	beq lrchkx		; on platform, deny movement.
0008C0r 3  4C rr rr     	jmp plchk0
0008C3r 3               
0008C3r 3               ;--------------------------------------------------------------
0008C3r 3               ; Check ladder is available.
0008C3r 3               ;
0008C3r 3               ; Input:
0008C3r 3               ;  bufaddr = MAP + x/8 + y/8*32
0008C3r 3               ;
0008C3r 3               ; Output:
0008C3r 3               ;  A  = 0 is ok, A <>0 is not ok
0008C3r 3               ;--------------------------------------------------------------
0008C3r 3               
0008C3r 3               .if lflag
0008C3r 3               ldchk:
0008C3r 3  A0 00        	ldy #0
0008C5r 3  B1 rr        	lda (bufaddr),y 	; fetch cell.
0008C7r 3  C9 03        	cmp #LADDER 		; is it a ladder?
0008C9r 3  F0 03        	beq ldchk1
0008CBr 3  A9 01        	lda #1
0008CDr 3  60           	rts  			; return with zero flag set accordingly.
0008CEr 3               ldchk1:
0008CEr 3  A9 00        	lda #0
0008D0r 3  60           	rts
0008D1r 3               .endif
0008D1r 3               
0008D1r 3               ;--------------------------------------------------------------
0008D1r 3               ; Get collectables.
0008D1r 3               ;--------------------------------------------------------------
0008D1r 3               
0008D1r 3               .if cflag
0008D1r 3               getcol:
0008D1r 3                       lda #COLECT             ; collectable blocks.
0008D1r 3                       sta z80_b
0008D1r 3                       jsr tded                ; test for collectable blocks.
0008D1r 3                       cmp z80_b               ; did we find one?
0008D1r 3                       beq :+
0008D1r 3                       rts                     ; none were found, job done.
0008D1r 3               :
0008D1r 3                       jsr gtblk               ; get block.
0008D1r 3                       jsr evnt20              ; collected block event.
0008D1r 3                       jmp getcol              ; repeat until none left.
0008D1r 3               
0008D1r 3               ; Get collectable block.
0008D1r 3               
0008D1r 3               gtblk:
0008D1r 3               	ldy #0
0008D1r 3               	lda (bufaddr),y
0008D1r 3               	sta z80_a
0008D1r 3                       lda #0
0008D1r 3                       sta (bufaddr),y		; make it empty now.
0008D1r 3               
0008D1r 3               	lda bufaddr		; set dispx
0008D1r 3               	and #31
0008D1r 3               	sta dispx
0008D1r 3               
0008D1r 3               	lda bufaddr+1		; Set dispy
0008D1r 3               	sec
0008D1r 3               	sbc #>MAP
0008D1r 3               	sta bufaddr+1
0008D1r 3               	asl bufaddr
0008D1r 3               	rol bufaddr+1
0008D1r 3               	asl bufaddr
0008D1r 3               	rol bufaddr+1
0008D1r 3               	asl bufaddr
0008D1r 3               	rol bufaddr+1
0008D1r 3               	lda bufaddr+1
0008D1r 3               	sta dispy
0008D1r 3               
0008D1r 3               	lda colpatt		; get blocknr
0008D1r 3               	sta z80_e		; displacement in e.
0008D1r 3               	lda #0
0008D1r 3               	sta z80_d		; no high byte.
0008D1r 3               	asl z80_e  		; multiply char by 8.
0008D1r 3               	rol z80_d
0008D1r 3               	asl z80_e
0008D1r 3               	rol z80_d
0008D1r 3               	asl z80_e
0008D1r 3               	rol z80_d
0008D1r 3               	clc
0008D1r 3               	lda z80_e
0008D1r 3               	adc #<chgfx 		; address of graphics.
0008D1r 3               	sta tileaddr
0008D1r 3               	lda z80_d
0008D1r 3               	adc #>chgfx
0008D1r 3               	sta tileaddr+1
0008D1r 3               
0008D1r 3               	jsr gprad 		; get screen address.
0008D1r 3               	ldx #7			; number of pixel rows to write.
0008D1r 3               gtblk0:
0008D1r 3               	ldy #0
0008D1r 3               	lda (tileaddr),y 	; get image byte.
0008D1r 3               	ldy scrtab,x
0008D1r 3               	eor (scraddr),y 	; XOR tile on screen
0008D1r 3               	sta (scraddr),y 	; copy to screen.
0008D1r 3               	inc tileaddr 		; next image byte.
0008D1r 3               	bne :+
0008D1r 3               	inc tileaddr+1
0008D1r 3               :
0008D1r 3               	dex	 		; repeat for 8 pixel rows.
0008D1r 3               	bpl gtblk0
0008D1r 3               	rts
0008D1r 3               .endif
0008D1r 3               
0008D1r 3               ;--------------------------------------------------------------
0008D1r 3               ; Touched deadly block check.
0008D1r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0008D1r 3               ;
0008D1r 3               ; Input:
0008D1r 3               ;  IX = sprite address
0008D1r 3               ;
0008D1r 3               ; Output:
0008D1r 3               ;  A  = 0 is ok, A=5 is not ok
0008D1r 3               ;--------------------------------------------------------------
0008D1r 3               
0008D1r 3               tded:
0008D1r 3  A0 08        	ldy #8
0008D3r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0008D5r 3  85 rr        	sta dispy
0008D7r 3  C8           	iny
0008D8r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0008DAr 3  85 rr        	sta dispx		; coords in dispx,dispy.
0008DCr 3  20 rr rr     	jsr tstbl		; get map address.
0008DFr 3  48           	pha
0008E0r 3  A9 1F        	lda #31			; default distance to next line down.
0008E2r 3  85 rr        	sta z80_e
0008E4r 3  68           	pla
0008E5r 3  C5 rr        	cmp z80_b		; is this the required block?
0008E7r 3  D0 01        	bne :+
0008E9r 3  60           	rts			; yes.
0008EAr 3               :
0008EAr 3  E6 rr        	inc bufaddr 		; next cell.
0008ECr 3  D0 02        	bne :+
0008EEr 3  E6 rr        	inc bufaddr+1
0008F0r 3               :
0008F0r 3  A0 00        	ldy #0
0008F2r 3  B1 rr        	lda (bufaddr),y		; fetch type.
0008F4r 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
0008F6r 3  D0 01        	bne :+
0008F8r 3  60           	rts			; yes.
0008F9r 3               :
0008F9r 3  A5 rr        	lda dispx		; horizontal position.
0008FBr 3  85 rr        	sta z80_c 		; store column in c register.
0008FDr 3  29 07        	and #7			; is it straddling cells?
0008FFr 3  D0 03        	bne :+
000901r 3  4C rr rr     	jmp tded0		; no.
000904r 3               :
000904r 3  E6 rr        	inc bufaddr 		; last cell.
000906r 3  D0 02        	bne :+
000908r 3  E6 rr        	inc bufaddr+1
00090Ar 3               :
00090Ar 3  A0 00        	ldy #0
00090Cr 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00090Er 3  C5 rr        	cmp z80_b		; is this the block?
000910r 3  D0 01        	bne :+
000912r 3  60           	rts			; yes.
000913r 3               :
000913r 3  C6 rr        	dec z80_e		; one less cell to next row down.
000915r 3               tded0:
000915r 3  18           	clc 			; point to next row.
000916r 3  A5 rr        	lda bufaddr
000918r 3  65 rr        	adc z80_e
00091Ar 3  85 rr        	sta bufaddr
00091Cr 3  90 02        	bcc :+
00091Er 3  E6 rr        	inc bufaddr+1
000920r 3               :
000920r 3  A0 00        	ldy #0
000922r 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
000924r 3  C5 rr        	cmp z80_b		; is this fatal?
000926r 3  D0 01        	bne :+
000928r 3  60           	rts			; yes.
000929r 3               :
000929r 3  E6 rr        	inc bufaddr 		; next cell.
00092Br 3  D0 02        	bne :+
00092Dr 3  E6 rr        	inc bufaddr+1
00092Fr 3               :
00092Fr 3  A0 00        	ldy #0
000931r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000933r 3  C5 rr        	cmp z80_b		; is this fatal?
000935r 3  D0 01        	bne :+
000937r 3  60           	rts			; yes.
000938r 3               :
000938r 3  A5 rr        	lda z80_c		; horizontal position.
00093Ar 3  29 07        	and #7			; is it straddling cells?
00093Cr 3  D0 03        	bne :+
00093Er 3  4C rr rr     	jmp tded1 		; no.
000941r 3               :
000941r 3  E6 rr        	inc bufaddr		; last cell.
000943r 3  D0 02        	bne :+
000945r 3  E6 rr        	inc bufaddr+1
000947r 3               :
000947r 3  A0 00        	ldy #0
000949r 3  B1 rr        	lda (bufaddr),y		; fetch type.
00094Br 3  C5 rr        	cmp z80_b		; is this fatal?
00094Dr 3  D0 01        	bne :+
00094Fr 3  60           	rts			; yes.
000950r 3               :
000950r 3               tded1:
000950r 3  A5 rr        	lda dispy		; vertical position.
000952r 3  29 07        	and #7 			; is it straddling cells?
000954r 3  D0 01        	bne :+
000956r 3  60           	rts			; no, job done.
000957r 3               :
000957r 3  18           	clc			; point to next row.
000958r 3  A5 rr        	lda bufaddr
00095Ar 3  65 rr        	adc z80_e
00095Cr 3  85 rr        	sta bufaddr
00095Er 3  90 02        	bcc :+
000960r 3  E6 rr        	inc bufaddr+1
000962r 3               :
000962r 3  A0 00        	ldy #0
000964r 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
000966r 3  C5 rr        	cmp z80_b		; is this fatal?
000968r 3  D0 01        	bne :+
00096Ar 3  60           	rts			; yes.
00096Br 3               :
00096Br 3  E6 rr        	inc bufaddr		; next cell.
00096Dr 3  D0 02        	bne :+
00096Fr 3  E6 rr        	inc bufaddr+1
000971r 3               :
000971r 3  A0 00        	ldy #0
000973r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
000975r 3  C5 rr        	cmp z80_b		; is this fatal?
000977r 3  D0 01        	bne :+
000979r 3  60           	rts			; yes.
00097Ar 3               :
00097Ar 3  A5 rr        	lda z80_c		; horizontal position.
00097Cr 3  29 07        	and #7			; is it straddling cells?
00097Er 3  D0 01        	bne :+
000980r 3  60           	rts			; no.
000981r 3               :
000981r 3  E6 rr        	inc bufaddr		; last cell.
000983r 3  D0 02        	bne :+
000985r 3  E6 rr        	inc bufaddr+1
000987r 3               :
000987r 3  A0 00        	ldy #0
000989r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
00098Br 3  60           	rts 			; return with final type in accumulator.
00098Cr 3               
00098Cr 3               ;---------------------------------------------------
00098Cr 3               ; Fetch block type at (dispx, dispy).
00098Cr 3               ;
00098Cr 3               ; Output:
00098Cr 3               ;  A = block type
00098Cr 3               ;---------------------------------------------------
00098Cr 3               
00098Cr 3               tstbl:
00098Cr 3  A5 rr        	lda dispy 		; fetch y coord.
00098Er 3  4A           	lsr a			; bufaddr = y/8
00098Fr 3  4A           	lsr a
000990r 3  4A           	lsr a
000991r 3               ;	sta chary
000991r 3               
000991r 3  85 rr        	sta bufaddr
000993r 3  A9 00        	lda #0
000995r 3  85 rr        	sta bufaddr+1
000997r 3               
000997r 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000999r 3  26 rr        	rol bufaddr+1
00099Br 3  06 rr        	asl bufaddr
00099Dr 3  26 rr        	rol bufaddr+1
00099Fr 3  06 rr        	asl bufaddr
0009A1r 3  26 rr        	rol bufaddr+1
0009A3r 3  06 rr        	asl bufaddr
0009A5r 3  26 rr        	rol bufaddr+1
0009A7r 3  06 rr        	asl bufaddr
0009A9r 3  26 rr        	rol bufaddr+1
0009ABr 3               
0009ABr 3  A5 rr        	lda dispx		; x/8
0009ADr 3  4A           	lsr a
0009AEr 3  4A           	lsr a
0009AFr 3  4A           	lsr a
0009B0r 3               ;	sta charx
0009B0r 3               
0009B0r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
0009B1r 3  65 rr        	adc bufaddr
0009B3r 3  69 00        	adc #<MAP
0009B5r 3  85 rr        	sta bufaddr
0009B7r 3  A5 rr        	lda bufaddr+1
0009B9r 3  69 04        	adc #>MAP
0009BBr 3  85 rr        	sta bufaddr+1
0009BDr 3               
0009BDr 3  A0 00        	ldy #0
0009BFr 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0009C1r 3  60           	rts
0009C2r 3               
0009C2r 3               ;-------------------------------------------------------------------
0009C2r 3               ; Jump - if we can.
0009C2r 3               ; Requires initial speed to be set up in accumulator prior to call.
0009C2r 3               ;
0009C2r 3               ; Input:
0009C2r 3               ;  IX = sprite address
0009C2r 3               ;-------------------------------------------------------------------
0009C2r 3               
0009C2r 3               jump:
0009C2r 3  A0 0D        	ldy #var_jumpLo
0009C4r 3  B1 rr        	lda (z80_ix),y		; jump table low.
0009C6r 3  A0 0E        	ldy #var_jumpHi
0009C8r 3  11 rr        	ora (z80_ix),y		; jump table high.
0009CAr 3  F0 01        	beq :+
0009CCr 3  60           	rts			; already in the air.
0009CDr 3               :
0009CDr 3  A9 rr        	lda #>jtab
0009CFr 3  A0 0E        	ldy #var_jumpHi
0009D1r 3  91 rr        	sta (z80_ix),y		; set jump high.
0009D3r 3  A9 rr        	lda #<jtab		; jump table start.
0009D5r 3  A0 0D        	ldy #var_jumpLo
0009D7r 3  91 rr        	sta (z80_ix),y		; set jump low.
0009D9r 3  60           	rts
0009DAr 3               
0009DAr 3               ; Jump table.
0009DAr 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
0009DAr 3               ;.align 32
0009DAr 3               ;jtab:
0009DAr 3               ;	.byte 248,250,252
0009DAr 3               ;	.byte 254,254,255
0009DAr 3               ;	.byte 255,255,0,0
0009DAr 3               ;	.byte 0,1,1,1,2,2
0009DAr 3               ;	.byte 4,6,8,8,8,99
0009DAr 3               
0009DAr 3               ;------------------------------------------------
0009DAr 3               ; Random numbers code.
0009DAr 3               ; Pseudo-random number generator, 8-bit.
0009DAr 3               ;
0009DAr 3               ; Output:
0009DAr 3               ;  RND = random number
0009DAr 3               ;------------------------------------------------
0009DAr 3               
0009DAr 3               random:
0009DAr 3  A5 rr        	lda seed
0009DCr 3  F0 05        	beq doEor
0009DEr 3  0A           	asl a
0009DFr 3  F0 04        	beq noEor
0009E1r 3  90 02        	bcc noEor
0009E3r 3  49 1D        doEor:	eor #$1d
0009E5r 3  85 rr        noEor:	sta seed
0009E7r 3  60           	rts
0009E8r 3               
0009E8r 3               ;	lda seed		; get last random number.
0009E8r 3               ;	asl a
0009E8r 3               ;	asl a
0009E8r 3               ;	clc
0009E8r 3               ;	adc seed
0009E8r 3               ;	clc
0009E8r 3               ;	adc #$45
0009E8r 3               ;	sta seed		; store new seed.
0009E8r 3               ;	sta varrnd		; return number in variable.
0009E8r 3               ;	rts
0009E8r 3               
0009E8r 3               ;-------------------------------------------------------
0009E8r 3               ; Joystick and keyboard reading routines.
0009E8r 3               ;
0009E8r 3               ; contrl = 0, Keyboard
0009E8r 3               ;          1, JoyKeyb
0009E8r 3               ;          2, JoyMMC
0009E8r 3               ;
0009E8r 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
0009E8r 3               ;             ||||||||
0009E8r 3               ;             |||||||+> Right    KEY 0  - X
0009E8r 3               ;             ||||||+-> Left     KEY 1  - Z
0009E8r 3               ;             |||||+--> Down     KEY 2  - .
0009E8r 3               ;             ||||+---> Up       KEY 3  - ;
0009E8r 3               ;             |||+----> Fire1    KEY 4  - SPC
0009E8r 3               ;             ||+-----> Fire2    KEY 5  - Q
0009E8r 3               ;             |+------> Fire3    KEY 6  - P
0009E8r 3               ;             +-------> Not used
0009E8r 3               ;
0009E8r 3               ;                       Option1  KEY 7  - 1
0009E8r 3               ;                       Option2  KEY 8  - 2
0009E8r 3               ;                       Option3  KEY 9  - 3
0009E8r 3               ;                       Option4  KEY 10 - 4
0009E8r 3               ;-------------------------------------------------------
0009E8r 3               
0009E8r 3               joykey:
0009E8r 3  A5 rr        	lda contrl 		; control flag.
0009EAr 3  C9 01        	cmp #1
0009ECr 3  F0 1A        	beq joy1 		; scan joystick1
0009EEr 3  C9 02        	cmp #2
0009F0r 3  F0 1C        	beq joy2 		; scan joystick2
0009F2r 3               
0009F2r 3               ; Scan keyboard
0009F2r 3               
0009F2r 3  A9 00        	lda #0		 	; zero reading.
0009F4r 3  85 rr        	sta z80_e
0009F6r 3               
0009F6r 3  A0 06        	ldy #6	 		; address of last key.
0009F8r 3               joyke0:
0009F8r 3  B9 rr rr     	lda keys,y 		; get key from table.
0009FBr 3  20 rr rr     	jsr ktest		; being pressed?
0009FEr 3  26 rr        	rol z80_e 		; rotate into reading.
000A00r 3               
000A00r 3  88           	dey		 	; next key.
000A01r 3  10 F5        	bpl joyke0 		; repeat for all keys.
000A03r 3               joyret:
000A03r 3  A5 rr        	lda z80_e
000A05r 3  85 rr        	sta joyval
000A07r 3  60           	rts
000A08r 3               
000A08r 3               ; Scan joystick 1
000A08r 3               
000A08r 3               joy1:
000A08r 3  20 rr rr     	jsr joy1scan
000A0Br 3  4C rr rr     	jmp joyret 		; store the value.
000A0Er 3               
000A0Er 3               ; Scan joystick 2
000A0Er 3               
000A0Er 3               joy2:
000A0Er 3  20 rr rr     	jsr joy2scan
000A11r 3  4C rr rr     	jmp joyret 		; store the value.
000A14r 3               
000A14r 3               ;---------------------------------------------------------------
000A14r 3               ; Display message.
000A14r 3               ;
000A14r 3               ; Input:
000A14r 3               ;  A = message number
000A14r 3               ;---------------------------------------------------------------
000A14r 3               
000A14r 3               dmsg:
000A14r 3  AA           	tax
000A15r 3  A9 rr        	lda #<msgdat		; pointer to messages.
000A17r 3  85 rr        	sta z80_l
000A19r 3  A9 rr        	lda #>msgdat
000A1Br 3  85 rr        	sta z80_h
000A1Dr 3  20 rr rr     	jsr getwrd		; get message number.
000A20r 3               dmsg3:
000A20r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000A23r 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000A26r 3  A5 rr        	lda prtmod		; print mode.
000A28r 3  D0 47        	bne bmsg1		; no, double-height text.
000A2Ar 3               dmsg0:
000A2Ar 3  A5 rr        	lda z80_h		; store string pointer.
000A2Cr 3  48           	pha
000A2Dr 3  A5 rr        	lda z80_l
000A2Fr 3  48           	pha
000A30r 3               
000A30r 3  A0 00        	ldy #0
000A32r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000A34r 3  29 7F        	and #127		; remove any end marker.
000A36r 3  C9 0D        	cmp #ASCII_NEWLINE
000A38r 3  F0 24        	beq dmsg1
000A3Ar 3  20 rr rr     	jsr pchar		; display character.
000A3Dr 3  20 rr rr     	jsr nexpos 		; display position.
000A40r 3  D0 03        	bne dmsg2		; not on a new line.
000A42r 3  20 rr rr     	jsr nexlin		; next line down.
000A45r 3               dmsg2:
000A45r 3  68           	pla			; retrieve string pointer
000A46r 3  85 rr        	sta z80_l
000A48r 3  68           	pla
000A49r 3  85 rr        	sta z80_h
000A4Br 3               
000A4Br 3  A0 00        	ldy #0
000A4Dr 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000A4Fr 3  0A           	asl a  			; was it the end?
000A50r 3  90 03        	bcc :+
000A52r 3  4C rr rr     	jmp dscor2		; yes, job done.
000A55r 3               :
000A55r 3  E6 rr        	inc z80_l		; next character to display.
000A57r 3  D0 02        	bne :+
000A59r 3  E6 rr        	inc z80_h
000A5Br 3               :
000A5Br 3  4C rr rr     	jmp dmsg0
000A5Er 3               dmsg1:
000A5Er 3  E6 rr        	inc dispy
000A60r 3  A5 rr        	lda dispy
000A62r 3  C9 18        	cmp #24
000A64r 3  90 04        	bcc dmsg4
000A66r 3  A9 00        	lda #0
000A68r 3  85 rr        	sta dispy
000A6Ar 3               dmsg4:
000A6Ar 3  A9 00        	lda #0
000A6Cr 3  85 rr        	sta dispx
000A6Er 3  4C rr rr     	jmp dmsg2
000A71r 3               
000A71r 3               
000A71r 3               ;----------------------------------------------------------
000A71r 3               ; Display message in big text.
000A71r 3               ;
000A71r 3               ; Input:
000A71r 3               ;  HL = string pointer
000A71r 3               ;----------------------------------------------------------
000A71r 3               
000A71r 3               bmsg1:
000A71r 3  A0 00        	ldy #0
000A73r 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000A75r 3  29 7F        	and #127		; only want 7 bits.
000A77r 3  C9 0D        	cmp #ASCII_NEWLINE
000A79r 3  F0 13        	beq bmsg2
000A7Br 3  20 rr rr     	jsr bchar 		; display big char.
000A7Er 3               bmsg3:
000A7Er 3  A0 00        	ldy #0
000A80r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000A82r 3  48           	pha
000A83r 3  E6 rr        	inc z80_l 		; next character in list.
000A85r 3  D0 02        	bne :+
000A87r 3  E6 rr        	inc z80_h
000A89r 3               :
000A89r 3  68           	pla
000A8Ar 3  0A           	asl a  			; was terminator flag set?
000A8Br 3  90 E4        	bcc bmsg1		; no, keep going.
000A8Dr 3               
000A8Dr 3  60           	rts
000A8Er 3               bmsg2:
000A8Er 3  A9 00        	lda #0
000A90r 3  85 rr        	sta dispx
000A92r 3  E6 rr        	inc dispy
000A94r 3  E6 rr        	inc dispy
000A96r 3  A5 rr        	lda dispy
000A98r 3  C9 17        	cmp #23
000A9Ar 3  90 E2        	bcc bmsg3
000A9Cr 3  A9 00        	lda #0
000A9Er 3  85 rr        	sta dispy
000AA0r 3  4C rr rr     	jmp bmsg3
000AA3r 3               
000AA3r 3               ;----------------------------------------------------------
000AA3r 3               ; Big character display.
000AA3r 3               ;
000AA3r 3               ; Input:
000AA3r 3               ;  A = character
000AA3r 3               ;----------------------------------------------------------
000AA3r 3               
000AA3r 3               bchar:
000AA3r 3  85 rr        	sta z80_e		; save char in lb
000AA5r 3  A9 00        	lda #0
000AA7r 3  85 rr        	sta z80_d		; reset hb
000AA9r 3               
000AA9r 3  06 rr        	asl z80_e 		; multiply char by 8.
000AABr 3  26 rr        	rol z80_d
000AADr 3  06 rr        	asl z80_e
000AAFr 3  26 rr        	rol z80_d
000AB1r 3  06 rr        	asl z80_e
000AB3r 3  26 rr        	rol z80_d		; de = a*8
000AB5r 3               
000AB5r 3  18           	clc			; de = #<(FONT-256) + a*8
000AB6r 3  A5 rr        	lda z80_e
000AB8r 3  69 rr        	adc #<(FONT-256) 		; address of font.
000ABAr 3  85 rr        	sta z80_e
000ABCr 3  A5 rr        	lda z80_d
000ABEr 3  69 rr        	adc #>(FONT-256)
000AC0r 3  85 rr        	sta z80_d
000AC2r 3               
000AC2r 3  20 rr rr     	jsr gaadd		; set colour attribute
000AC5r 3  AD rr rr     	lda fontcol
000AC8r 3  A0 00        	ldy #0
000ACAr 3  91 rr        	sta (bufaddr),y
000ACCr 3               
000ACCr 3  20 rr rr     	jsr gprad 		; get screen address.
000ACFr 3               
000ACFr 3  A2 00        	ldx #0			; height of character in font.
000AD1r 3               bchar0:
000AD1r 3  A0 00        	ldy #0
000AD3r 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000AD5r 3               
000AD5r 3               .if iflag
000AD5r 3               	eor #$ff
000AD5r 3               .endif
000AD5r 3               
000AD5r 3  91 rr        	sta (scraddr),y
000AD7r 3  48           	pha
000AD8r 3  20 rr rr     	jsr nline 		; next line down.
000ADBr 3  68           	pla
000ADCr 3  91 rr        	sta (scraddr),y
000ADEr 3  20 rr rr     	jsr nline 		; next line down.
000AE1r 3               
000AE1r 3  18           	clc
000AE2r 3  E6 rr        	inc z80_e 		; next line of font.
000AE4r 3  D0 02        	bne :+
000AE6r 3  E6 rr        	inc z80_d
000AE8r 3               :
000AE8r 3  E8           	inx
000AE9r 3  E0 08        	cpx #8
000AEBr 3  D0 E4        	bne bchar0
000AEDr 3               
000AEDr 3  20 rr rr     	jsr nexpos		; display position.
000AF0r 3  D0 05        	bne bchar2 		; not on a new line.
000AF2r 3               bchar3:
000AF2r 3  E6 rr        	inc dispy
000AF4r 3  20 rr rr     	jsr nexlin 		; next line check.
000AF7r 3               bchar2:
000AF7r 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000AFAr 3               
000AFAr 3               
000AFAr 3               ;-------------------------------------------------
000AFAr 3               ; Display a character.
000AFAr 3               ;
000AFAr 3               ; Input:
000AFAr 3               ;  A = character
000AFAr 3               ;-------------------------------------------------
000AFAr 3               
000AFAr 3               achar:
000AFAr 3  85 rr        	sta z80_b 		; copy to b.
000AFCr 3  20 rr rr     	jsr preprt 		; get ready to print.
000AFFr 3  A5 rr        	lda z80_b		; character in accumulator.
000B01r 3  A6 rr        	ldx prtmod 		; print mode.
000B03r 3  F0 03        	beq :+
000B05r 3  4C rr rr     	jmp bchar 		; no, double-height text.
000B08r 3               :
000B08r 3  20 rr rr     	jsr pchar 		; display character.
000B0Br 3  20 rr rr     	jsr nexpos 		; display position.
000B0Er 3  F0 E2        	beq bchar3		; next line down.
000B10r 3  4C rr rr     	jmp bchar2 		; tidy up.
000B13r 3               
000B13r 3               
000B13r 3               ;-------------------------------------------------
000B13r 3               ; Get next print column position.
000B13r 3               ;-------------------------------------------------
000B13r 3               
000B13r 3               nexpos:
000B13r 3  E6 rr        	inc dispx		; move along one position.
000B15r 3  A5 rr        	lda dispx 		; get coordinate.
000B17r 3  C9 16        	cmp #22
000B19r 3  D0 0E        	bne :+
000B1Br 3  A9 00        	lda #0
000B1Dr 3  85 rr        	sta dispx
000B1Fr 3  A5 rr        	lda prtmod
000B21r 3  F0 06        	beq :+
000B23r 3  20 rr rr     	jsr nexlin
000B26r 3  4C rr rr     	jmp nexlin
000B29r 3               :
000B29r 3  60           	rts
000B2Ar 3               
000B2Ar 3               ;-------------------------------------------------
000B2Ar 3               ; Get next print line position.
000B2Ar 3               ;-------------------------------------------------
000B2Ar 3               
000B2Ar 3               nexlin:
000B2Ar 3  E6 rr        	inc dispy 		; newline.
000B2Cr 3  A5 rr        	lda dispy		; vertical position.
000B2Er 3  C9 16        	cmp #22			; past screen edge?
000B30r 3  B0 01        	bcs :+
000B32r 3  60           	rts			; no, still okay.
000B33r 3               :
000B33r 3  A9 00        	lda #0			; restart at top.
000B35r 3  85 rr        	sta dispy
000B37r 3  60           	rts
000B38r 3               
000B38r 3               ;--------------------------------------------------------
000B38r 3               ; Pre-print preliminaries.
000B38r 3               ;--------------------------------------------------------
000B38r 3               
000B38r 3               preprt:
000B38r 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000B3Ar 3  8D rr rr     	sta grbase		; set up graphics base.
000B3Dr 3  A9 rr        	lda #>(FONT-256)
000B3Fr 3  8D rr rr     	sta grbase+1
000B42r 3               prescr:
000B42r 3  A5 rr        	lda charx 		; display coordinates.
000B44r 3  85 rr        	sta dispx		; set up general coordinates.
000B46r 3  A5 rr        	lda chary
000B48r 3  85 rr        	sta dispy
000B4Ar 3  60           	rts
000B4Br 3               
000B4Br 3               ;--------------------------------------------------------------
000B4Br 3               ; Get messagenr x in hl
000B4Br 3               ;
000B4Br 3               ; Input:
000B4Br 3               ;  HL = pointer to message list
000B4Br 3               ;  X  = message number.
000B4Br 3               ;--------------------------------------------------------------
000B4Br 3               
000B4Br 3               getwrd:
000B4Br 3  E0 00        	cpx #0
000B4Dr 3  D0 01        	bne:+ 			; first word in list?
000B4Fr 3  60           	rts 			; yep, don't search.
000B50r 3               :
000B50r 3  A0 00        	ldy #0
000B52r 3               getwd0:
000B52r 3  B1 rr        	lda (z80_hl),y
000B54r 3  48           	pha
000B55r 3  E6 rr        	inc z80_l
000B57r 3  D0 02        	bne :+
000B59r 3  E6 rr        	inc z80_h
000B5Br 3               :
000B5Br 3  68           	pla
000B5Cr 3  C9 80        	cmp #128		; found end?
000B5Er 3  30 F2        	bmi getwd0		; no, carry on.
000B60r 3  CA           	dex			; until we have right number.
000B61r 3  D0 EF        	bne getwd0
000B63r 3  60           	rts
000B64r 3               
000B64r 3               ;-----------------------------------------------------------
000B64r 3               ; Bubble sort.
000B64r 3               ;-----------------------------------------------------------
000B64r 3               
000B64r 3               bsort:
000B64r 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000B66r 3  85 rr        	sta qscnt
000B68r 3               
000B68r 3  A9 rr        	lda #<sprtab 		; sprite table.
000B6Ar 3  85 rr        	sta z80_x
000B6Cr 3  A9 rr        	lda #>sprtab
000B6Er 3  85 rr        	sta z80_i
000B70r 3               bsort0:
000B70r 3  A0 00        	ldy #0
000B72r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000B74r 3  C9 FF        	cmp #255 		; is it switched off?
000B76r 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000B78r 3               
000B78r 3  A0 11        	ldy #TABSIZ
000B7Ar 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000B7Cr 3  C9 FF        	cmp #255 		; is it enabled?
000B7Er 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000B80r 3               
000B80r 3  A0 14        	ldy #TABSIZ+3
000B82r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000B84r 3  A0 03        	ldy #3
000B86r 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000B88r 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000B8Ar 3               bsort2:
000B8Ar 3  18           	clc
000B8Br 3  A5 rr        	lda z80_x
000B8Dr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000B8Fr 3  85 rr        	sta z80_x
000B91r 3  90 02        	bcc :+
000B93r 3  E6 rr        	inc z80_i
000B95r 3               :
000B95r 3  C6 rr        	dec qscnt
000B97r 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000B99r 3  60           	rts
000B9Ar 3               
000B9Ar 3               bsort1:
000B9Ar 3  A0 11        	ldy #TABSIZ
000B9Cr 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000B9Er 3  C9 FF        	cmp #255		; is it enabled?
000BA0r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000BA2r 3  20 rr rr     	jsr swspr		; swap positions.
000BA5r 3  4C rr rr     	jmp bsort2
000BA8r 3               swemp:
000BA8r 3  A0 11        	ldy #TABSIZ
000BAAr 3  B1 rr        	lda (z80_ix),y		; next table entry.
000BACr 3  C9 FF        	cmp #255		; is that one on?
000BAEr 3  F0 DA        	beq bsort2		; no, nothing to swap.
000BB0r 3  20 rr rr     	jsr swspr		; swap positions.
000BB3r 3  4C rr rr     	jmp bsort2
000BB6r 3               
000BB6r 3               ; Swap sprites.
000BB6r 3               
000BB6r 3               swspr:
000BB6r 3  A5 rr        	lda z80_x		; table address
000BB8r 3  85 rr        	sta z80_e		; copy to de pair.
000BBAr 3  85 rr        	sta z80_l		; copy to hl pair.
000BBCr 3  A5 rr        	lda z80_i
000BBEr 3  85 rr        	sta z80_h
000BC0r 3  85 rr        	sta z80_d
000BC2r 3               
000BC2r 3  18           	clc
000BC3r 3  A5 rr        	lda z80_l
000BC5r 3  69 11        	adc #TABSIZ		; distance to second entry.
000BC7r 3  85 rr        	sta z80_l
000BC9r 3  90 02        	bcc :+
000BCBr 3  E6 rr        	inc z80_h
000BCDr 3               :
000BCDr 3  A9 11        	lda #TABSIZ		; bytes to swap.
000BCFr 3  85 rr        	sta z80_b
000BD1r 3  A0 00        	ldy #0
000BD3r 3               swspr0:
000BD3r 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000BD5r 3  48           	pha
000BD6r 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000BD8r 3  91 rr        	sta (z80_hl),y 		; copy to second.
000BDAr 3  68           	pla
000BDBr 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000BDDr 3               
000BDDr 3  E6 rr        	inc z80_e 		; next byte.
000BDFr 3  D0 02        	bne :+
000BE1r 3  E6 rr        	inc z80_d
000BE3r 3               :
000BE3r 3  E6 rr        	inc z80_l 		; next byte.
000BE5r 3  D0 02        	bne :+
000BE7r 3  E6 rr        	inc z80_h
000BE9r 3               :
000BE9r 3  C6 rr        	dec z80_b
000BEBr 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000BEDr 3  60           	rts
000BEEr 3               
000BEEr 3               ;----------------------------------------------------
000BEEr 3               ; Process sprites.
000BEEr 3               ;----------------------------------------------------
000BEEr 3               
000BEEr 3               pspr:
000BEEr 3  A9 0C        	lda #NUMSPR		; sprites to process.
000BF0r 3  85 rr        	sta sprptr
000BF2r 3               
000BF2r 3  A9 rr        	lda #<sprtab 		; sprite table.
000BF4r 3  85 rr        	sta z80_x
000BF6r 3  A9 rr        	lda #>sprtab
000BF8r 3  85 rr        	sta z80_i
000BFAr 3               pspr1:
000BFAr 3  A0 00        	ldy #0
000BFCr 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000BFEr 3  C9 09        	cmp #9 			; within range of sprite types?
000C00r 3  B0 03        	bcs :+
000C02r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000C05r 3               :
000C05r 3  18           	clc
000C06r 3  A5 rr        	lda z80_x
000C08r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000C0Ar 3  85 rr        	sta z80_x
000C0Cr 3  90 02        	bcc :+
000C0Er 3  E6 rr        	inc z80_i		; next sprite.
000C10r 3               :
000C10r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000C12r 3  D0 E6        	bne pspr1
000C14r 3  60           	rts
000C15r 3               
000C15r 3               pspr2:
000C15r 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000C17r 3  85 rr        	sta ogptr
000C19r 3  A5 rr        	lda z80_i
000C1Br 3  85 rr        	sta ogptr+1
000C1Dr 3  20 rr rr     	jsr pspr3		; do the routine.
000C20r 3               rtorg:
000C20r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000C22r 3  85 rr        	sta z80_x
000C24r 3  A5 rr        	lda ogptr+1
000C26r 3  85 rr        	sta z80_i
000C28r 3               rtorg0:
000C28r 3  60           	rts
000C29r 3               
000C29r 3               pspr3:
000C29r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000C2Br 3  85 rr        	sta z80_l
000C2Dr 3  A9 rr        	lda #>evtyp0
000C2Fr 3  85 rr        	sta z80_h
000C31r 3               pspr4:
000C31r 3  B1 rr        	lda (z80_ix),y
000C33r 3  0A           	asl a			; double accumulator.
000C34r 3  18           	clc
000C35r 3  65 rr        	adc z80_l
000C37r 3  85 rr        	sta z80_l
000C39r 3  90 02        	bcc :+
000C3Br 3  E6 rr        	inc z80_h
000C3Dr 3               :
000C3Dr 3  B1 rr        	lda (z80_hl),y
000C3Fr 3  85 rr        	sta z80_e 		; copy to de.
000C41r 3  48           	pha
000C42r 3               
000C42r 3  E6 rr        	inc z80_l 		; next byte of address.
000C44r 3  D0 02        	bne :+
000C46r 3  E6 rr        	inc z80_h
000C48r 3               :
000C48r 3  B1 rr        	lda (z80_hl),y 		; address high.
000C4Ar 3  85 rr        	sta z80_d
000C4Cr 3               
000C4Cr 3  48           	pha	 		; swap address into hl.
000C4Dr 3  A5 rr        	lda z80_h
000C4Fr 3  85 rr        	sta z80_d
000C51r 3  68           	pla
000C52r 3  85 rr        	sta z80_h
000C54r 3  68           	pla
000C55r 3  85 rr        	sta z80_l
000C57r 3  A5 rr        	lda z80_l
000C59r 3  85 rr        	sta z80_e
000C5Br 3               
000C5Br 3  6C rr rr     	jmp (z80_hl) 		; go there.
000C5Er 3               
000C5Er 3               ; Address of each sprite type's routine.
000C5Er 3               
000C5Er 3  rr rr        evtyp0:	.word evnt00
000C60r 3  rr rr        evtyp1:	.word evnt01
000C62r 3  rr rr        evtyp2:	.word evnt02
000C64r 3  rr rr        evtyp3:	.word evnt03
000C66r 3  rr rr        evtyp4:	.word evnt04
000C68r 3  rr rr        evtyp5:	.word evnt05
000C6Ar 3  rr rr        evtyp6:	.word evnt06
000C6Cr 3  rr rr        evtyp7:	.word evnt07
000C6Er 3  rr rr        evtyp8:	.word evnt08
000C70r 3               
000C70r 3               ;--------------------------------------------------------------
000C70r 3               ; Display sprites.
000C70r 3               ;
000C70r 3               ; Input:
000C70r 3               ;  IX = sprite table
000C70r 3               ;--------------------------------------------------------------
000C70r 3               
000C70r 3               dspr:
000C70r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000C72r 3  85 rr        	sta sprcnt
000C74r 3               
000C74r 3               dspr0:
000C74r 3  A0 00        	ldy #var_Type
000C76r 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000C78r 3  C9 FF        	cmp #255 		; is it enabled?
000C7Ar 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000C7Cr 3               dspr5:
000C7Cr 3  A0 05        	ldy #var_newType
000C7Er 3  B1 rr        	lda (z80_ix),y 		; new type.
000C80r 3  C9 FF        	cmp #255		; is it enabled?
000C82r 3  F0 03        	beq dspr2
000C84r 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000C87r 3               dspr2:
000C87r 3  A0 05        	ldy #var_newType
000C89r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000C8Br 3  A0 00        	ldy #var_Type
000C8Dr 3  91 rr        	sta (z80_ix),y
000C8Fr 3  A0 06        	ldy #var_newImage
000C91r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000C93r 3  A0 01        	ldy #var_Image
000C95r 3  91 rr        	sta (z80_ix),y
000C97r 3  A0 07        	ldy #var_newFrame
000C99r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000C9Br 3  A0 02        	ldy #var_Frame
000C9Dr 3  91 rr        	sta (z80_ix),y
000C9Fr 3  A0 08        	ldy #var_newY
000CA1r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000CA3r 3  A0 03        	ldy #var_Y
000CA5r 3  91 rr        	sta (z80_ix),y
000CA7r 3  A0 09        	ldy #var_newX
000CA9r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000CABr 3  A0 04        	ldy #var_X
000CADr 3  91 rr        	sta (z80_ix),y
000CAFr 3               
000CAFr 3  18           	clc
000CB0r 3  A5 rr        	lda z80_x
000CB2r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000CB4r 3  85 rr        	sta z80_x
000CB6r 3  A5 rr        	lda z80_i
000CB8r 3  69 00        	adc #0
000CBAr 3  85 rr        	sta z80_i 		; next sprite.
000CBCr 3  C6 rr        	dec sprcnt
000CBEr 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000CC0r 3  60           	rts
000CC1r 3               
000CC1r 3               dspr1:
000CC1r 3               	; _BEEB clipping code copied from CPC Engine
000CC1r 3  A0 03        	ldy #var_Y
000CC3r 3  B1 rr        	lda (z80_ix), y		; old x coord
000CC5r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000CC7r 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000CC9r 3               
000CC9r 3  A0 05        	ldy #var_newType
000CCBr 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000CCDr 3  C9 FF        	cmp #255		; is this enabled?
000CCFr 3  D0 06        	bne dspr4 		; yes, display both.
000CD1r 3               
000CD1r 3               dspr6:
000CD1r 3  20 rr rr     	jsr sspria 		; show single sprite.
000CD4r 3  4C rr rr     	jmp dspr2
000CD7r 3               
000CD7r 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000CD7r 3               
000CD7r 3               dspr4:
000CD7r 3               	; _BEEB clipping code copied from CPC Engine
000CD7r 3  A0 08        	ldy #var_newY
000CD9r 3  B1 rr        	lda (z80_ix), y		; old x coord
000CDBr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000CDDr 3  B0 F2        	bcs dspr6		; yes, don't display it.
000CDFr 3               
000CDFr 3  A0 04        	ldy #var_X
000CE1r 3  B1 rr        	lda (z80_ix),y		; old x.
000CE3r 3  A0 09        	ldy #var_newX
000CE5r 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000CE7r 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000CE9r 3               
000CE9r 3  A0 03        	ldy #var_Y
000CEBr 3  B1 rr        	lda (z80_ix),y		; old y.
000CEDr 3  A0 08        	ldy #var_newY
000CEFr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CF1r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000CF3r 3               
000CF3r 3  A0 02        	ldy #var_Frame
000CF5r 3  B1 rr        	lda (z80_ix),y 		; old frame.
000CF7r 3  A0 07        	ldy #var_newFrame
000CF9r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CFBr 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000CFDr 3               
000CFDr 3  A0 01        	ldy #var_Image
000CFFr 3  B1 rr        	lda (z80_ix),y 		; old image.
000D01r 3  A0 06        	ldy #var_newImage
000D03r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000D05r 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000D07r 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000D0Ar 3               dspr7:
000D0Ar 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000D0Dr 3  4C rr rr     	jmp dspr2
000D10r 3               dspr3:
000D10r 3               	; _BEEB clipping code copied from CPC Engine
000D10r 3  A0 08        	ldy #var_newY
000D12r 3  B1 rr        	lda (z80_ix), y		; old x coord
000D14r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000D16r 3  90 03        	bcc :+			; no, continue
000D18r 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000D1Br 3               :
000D1Br 3  20 rr rr     	jsr ssprib 		; show single sprite.
000D1Er 3  4C rr rr     	jmp dspr2
000D21r 3               
000D21r 3               ;-----------------------------------------
000D21r 3               ; Get sprite address calculations.
000D21r 3               ; gspran = new sprite, gsprad = old sprite.
000D21r 3               ;
000D21r 3               ; Input:
000D21r 3               ;  IX = sprite address
000D21r 3               ;-----------------------------------------
000D21r 3               
000D21r 3               gspran:
000D21r 3  A0 08        	ldy #var_newY
000D23r 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000D25r 3  85 rr        	sta dispy
000D27r 3  A0 09        	ldy #var_newX
000D29r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000D2Br 3  85 rr        	sta dispx
000D2Dr 3  A0 06        	ldy #var_newImage
000D2Fr 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000D31r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000D34r 3               
000D34r 3  A0 00        	ldy #0
000D36r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000D38r 3  A0 07        	ldy #var_newFrame
000D3Ar 3  18           	clc
000D3Br 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000D3Dr 3  4C rr rr     	jmp gspra0
000D40r 3               
000D40r 3               ;-----------------------------------------
000D40r 3               ; Calculate old sprite address
000D40r 3               ;
000D40r 3               ; Input:
000D40r 3               ;  IX = sprite address
000D40r 3               ;
000D40r 3               ; Output:
000D40r 3               ;  B  = right byte mask
000D40r 3               ;  C  = left byte mask
000D40r 3               ;  DE = spriteframe address
000D40r 3               ;  scraddr = screenaddress(dispx,dispy)
000D40r 3               ;-----------------------------------------
000D40r 3               
000D40r 3               gsprad:
000D40r 3  A0 03        	ldy #var_Y
000D42r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000D44r 3  85 rr        	sta dispy
000D46r 3  A0 04        	ldy #var_X
000D48r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000D4Ar 3  85 rr        	sta dispx
000D4Cr 3  A0 01        	ldy #var_Image
000D4Er 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000D50r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000D53r 3               
000D53r 3  A0 00        	ldy #0
000D55r 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000D57r 3  A0 02        	ldy #var_Frame
000D59r 3  18           	clc
000D5Ar 3  71 rr        	adc (z80_ix),y 		; add frame number.
000D5Cr 3               
000D5Cr 3               gspra0:
000D5Cr 3               .if rflag
000D5Cr 3  85 rr        	sta z80_e		; multiply by 32.
000D5Er 3  A9 00        	lda #0
000D60r 3  85 rr        	sta z80_d
000D62r 3               
000D62r 3  06 rr        	asl z80_e
000D64r 3  26 rr        	rol z80_d
000D66r 3  06 rr        	asl z80_e
000D68r 3  26 rr        	rol z80_d
000D6Ar 3  06 rr        	asl z80_e
000D6Cr 3  26 rr        	rol z80_d
000D6Er 3  06 rr        	asl z80_e
000D70r 3  26 rr        	rol z80_d
000D72r 3               .if bflag
000D72r 3               	lda z80_e		; multiply by 48
000D72r 3               	sta tmp1
000D72r 3               	lda z80_d
000D72r 3               	sta tmp2
000D72r 3               .endif
000D72r 3  06 rr        	asl z80_e
000D74r 3  26 rr        	rol z80_d
000D76r 3               .if bflag
000D76r 3               	clc
000D76r 3               	lda z80_e
000D76r 3               	adc tmp1
000D76r 3               	sta z80_e
000D76r 3               	lda z80_d
000D76r 3               	adc tmp2
000D76r 3               	sta z80_d
000D76r 3               .endif
000D76r 3               .else
000D76r 3               	lsr a	  		; multiply by 128.
000D76r 3               	sta z80_d 		; store in d.
000D76r 3               	sta tmp1
000D76r 3               	lda #0
000D76r 3               	ror a
000D76r 3               	sta z80_e 		; got low byte.
000D76r 3               	sta tmp2
000D76r 3               .if bflag
000D76r 3               	lsr tmp1		; multiply by 192
000D76r 3               	ror tmp2
000D76r 3               	clc
000D76r 3               	lda tmp2
000D76r 3               	adc z80_e
000D76r 3               	sta z80_e
000D76r 3               	lda tmp1
000D76r 3               	adc z80_d
000D76r 3               	sta z80_d
000D76r 3               .endif
000D76r 3               .endif
000D76r 3  18           	clc 			; address of play sprites.
000D77r 3  A5 rr        	lda z80_e
000D79r 3  69 rr        	adc #<sprgfx
000D7Br 3  85 rr        	sta z80_e
000D7Dr 3  A5 rr        	lda z80_d
000D7Fr 3  69 rr        	adc #>sprgfx
000D81r 3  85 rr        	sta z80_d
000D83r 3               
000D83r 3  A5 rr        	lda dispx 		; y coordinate.
000D85r 3  29 06        	and #6 			; position within byte boundary.
000D87r 3  AA           	tax	 		; low byte of table displacement.
000D88r 3               .if rflag
000D88r 3  86 rr        	stx sprshft
000D8Ar 3               .else
000D8Ar 3               	asl a	  		; multiply by 32.
000D8Ar 3               	asl a  			; already a multiple
000D8Ar 3               	asl a  			; of 2, so just 4
000D8Ar 3               .if bflag
000D8Ar 3               	sta tmp1
000D8Ar 3               	asl a  			; shifts needed.
000D8Ar 3               	clc
000D8Ar 3               	adc tmp1
000D8Ar 3               .else
000D8Ar 3               	asl a  			; shifts needed.
000D8Ar 3               .endif
000D8Ar 3               	clc 			; add to sprite address.
000D8Ar 3               	adc z80_e
000D8Ar 3               	sta z80_e
000D8Ar 3               	bcc :+
000D8Ar 3               	inc z80_d
000D8Ar 3               :
000D8Ar 3               .endif
000D8Ar 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000D8Dr 3  85 rr        	sta z80_c 		; left mask.
000D8Fr 3  BD rr rr     	lda spmask+1,x
000D92r 3  85 rr        	sta z80_b 		; right mask.
000D94r 3               ; Drop into screen address routine.
000D94r 3  4C rr rr     	jmp scadd
000D97r 3               
000D97r 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000D9Br 3  0F F0 03 FC  
000D9Fr 3               
000D9Fr 3               
000D9Fr 3               ;-----------------------------------------------------------
000D9Fr 3               ; Animates a sprite.
000D9Fr 3               ;
000D9Fr 3               ; Input:
000D9Fr 3               ;  IX = sprite address
000D9Fr 3               ;  HL = last sprite address
000D9Fr 3               ;-----------------------------------------------------------
000D9Fr 3               
000D9Fr 3               animsp:
000D9Fr 3  25 rr        	and frmno
000DA1r 3  F0 01        	beq :+
000DA3r 3  60           	rts
000DA4r 3               :
000DA4r 3  A0 06        	ldy #var_newImage
000DA6r 3  B1 rr        	lda (z80_ix),y		; sprite image
000DA8r 3  20 rr rr     	jsr gfrm		; get frame data.
000DABr 3               
000DABr 3  E6 rr        	inc z80_l		; point to frames.
000DADr 3  D0 02        	bne :+
000DAFr 3  E6 rr        	inc z80_h
000DB1r 3               :
000DB1r 3  A0 07        	ldy #var_newFrame
000DB3r 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000DB5r 3  18           	clc
000DB6r 3  69 01        	adc #1			; next one along.
000DB8r 3  A0 00        	ldy #0
000DBAr 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000DBCr 3  90 02        	bcc anims0		; no, not yet.
000DBEr 3  A9 00        	lda #0			; start at first frame.
000DC0r 3               anims0:
000DC0r 3  A0 07        	ldy #var_newFrame
000DC2r 3  91 rr        	sta (z80_ix),y		; new frame.
000DC4r 3  60           	rts
000DC5r 3               
000DC5r 3               ;--------------------------------------------------------------
000DC5r 3               ; Animate back
000DC5r 3               ;
000DC5r 3               ; Input:
000DC5r 3               ;  IX = sprite address
000DC5r 3               ;  HL = last sprite address
000DC5r 3               ;--------------------------------------------------------------
000DC5r 3               
000DC5r 3               animbk:
000DC5r 3  25 rr        	and frmno
000DC7r 3  F0 01        	beq :+
000DC9r 3  60           	rts
000DCAr 3               :
000DCAr 3  A0 06        	ldy #var_newImage
000DCCr 3  B1 rr        	lda (z80_ix),y		; sprite image.
000DCEr 3  20 rr rr     	jsr gfrm		; get frame data.
000DD1r 3               
000DD1r 3  E6 rr        	inc z80_l 		; point to frames.
000DD3r 3  D0 02        	bne :+
000DD5r 3  E6 rr        	inc z80_h
000DD7r 3               :
000DD7r 3  A0 07        	ldy #var_newFrame
000DD9r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000DDBr 3  F0 03        	beq :+
000DDDr 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000DE0r 3               :
000DE0r 3  A0 00        	ldy #0
000DE2r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000DE4r 3               rtanb0:
000DE4r 3  38           	sec
000DE5r 3  E9 01        	sbc #1			; next one along.
000DE7r 3  4C rr rr     	jmp anims0		; set new frame.
000DEAr 3               
000DEAr 3               ;--------------------------------------------------------------
000DEAr 3               ; Check for collision with other sprite, strict enforcement.
000DEAr 3               ;
000DEAr 3               ; Input:
000DEAr 3               ;  b		= sprite to test for
000DEAr 3               ;  ix		= current sprite pointer
000DEAr 3               ;
000DEAr 3               ; global:	b
000DEAr 3               ; local:	x,y,hl,de,skptr
000DEAr 3               ; calls:	-
000DEAr 3               ;--------------------------------------------------------------
000DEAr 3               
000DEAr 3               sktyp:
000DEAr 3  A9 rr        	lda #<sprtab				; sprite table.
000DECr 3  85 rr        	sta z80_l
000DEEr 3  A9 rr        	lda #>sprtab
000DF0r 3  85 rr        	sta z80_h
000DF2r 3               numsp2:
000DF2r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000DF4r 3  85 rr        	sta sktptr
000DF6r 3               sktyp0:
000DF6r 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000DF8r 3  85 rr        	sta skptr
000DFAr 3  A5 rr        	lda z80_h
000DFCr 3  85 rr        	sta skptr+1
000DFEr 3               
000DFEr 3  A0 00        	ldy #0
000E00r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000E02r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000E04r 3  F0 1D        	beq coltyp				; yes, we can use this one.
000E06r 3               sktyp1:
000E06r 3  18           	clc
000E07r 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000E09r 3  69 11        	adc #TABSIZ				; size of each entry.
000E0Br 3  85 rr        	sta z80_l
000E0Dr 3  A5 rr        	lda skptr+1
000E0Fr 3  69 00        	adc #0
000E11r 3  85 rr        	sta z80_h
000E13r 3  C6 rr        	dec sktptr					; one less iteration.
000E15r 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000E17r 3  A9 00        	lda #0					; default to ROM address - no sprite.
000E19r 3  85 rr        	sta z80_l
000E1Br 3  85 rr        	sta z80_h
000E1Dr 3  85 rr        	sta skptr				; store pointer to sprite.
000E1Fr 3  85 rr        	sta skptr+1
000E21r 3               
000E21r 3  18           	clc					; don't return with zero flag set.
000E22r 3  60           	rts 					; didn't find one.
000E23r 3               
000E23r 3               coltyp:
000E23r 3  A0 00        	ldy #0
000E25r 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000E27r 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000E29r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000E2Br 3               colty0:
000E2Br 3  A0 09        	ldy #9					; distance to x position in table.
000E2Dr 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000E2Fr 3  85 rr        	sta z80_e
000E31r 3  88           	dey
000E32r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000E34r 3  85 rr        	sta z80_d
000E36r 3               
000E36r 3               ; Drop into collision detection.
000E36r 3               
000E36r 3               colc16:
000E36r 3  A0 09        	ldy #9
000E38r 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000E3Ar 3  38           	sec					; subtract x.
000E3Br 3  E5 rr        	sbc z80_e
000E3Dr 3  B0 05        	bcs  colc1a 				; result is positive.
000E3Fr 3  49 FF        	eor #$ff				; make negative positive.
000E41r 3  18           	clc
000E42r 3  69 01        	adc #1
000E44r 3               colc1a:
000E44r 3  C9 10        	cmp #16 				; within x range?
000E46r 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000E48r 3  85 rr        	sta z80_c				; store difference.
000E4Ar 3               
000E4Ar 3  A0 08        	ldy #8
000E4Cr 3  B1 rr        	lda (z80_ix),y				; y coord.
000E4Er 3  38           	sec
000E4Fr 3  E5 rr        	sbc z80_d				; subtract y.
000E51r 3  B0 05        	bcs colc1b				; result is positive.
000E53r 3  49 FF        	eor #$ff				; make negative positive.
000E55r 3  18           	clc
000E56r 3  69 01        	adc #1
000E58r 3               colc1b:
000E58r 3  C9 10        	cmp #16					; within y range?
000E5Ar 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000E5Cr 3  18           	clc					; add x difference.
000E5Dr 3  65 rr        	adc z80_c
000E5Fr 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000E61r 3  B0 02        	bcs :+
000E63r 3  38           	sec
000E64r 3  60           	rts 					; carry set if there's a collision.
000E65r 3               :
000E65r 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000E68r 3               colty1:
000E68r 3  A5 rr        	lda z80_x  				; compare the two.
000E6Ar 3  C5 rr        	cmp z80_l
000E6Cr 3  D0 09        	bne end_col
000E6Er 3  A5 rr        	lda z80_i
000E70r 3  C5 rr        	cmp z80_h
000E72r 3  D0 03        	bne end_col
000E74r 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000E77r 3               end_col:
000E77r 3  4C rr rr     	jmp colty0
000E7Ar 3               
000E7Ar 3               ;-----------------------------------------------------------
000E7Ar 3               ; Display number, left aligned
000E7Ar 3               ;
000E7Ar 3               ; Input:
000E7Ar 3               ;  a		= number
000E7Ar 3               ;
000E7Ar 3               ; global:	-
000E7Ar 3               ; local:	a,y,bc,hl,displ0
000E7Ar 3               ; calls:	num2ch,dmsg3
000E7Ar 3               ;-----------------------------------------------------------
000E7Ar 3               
000E7Ar 3               disply:
000E7Ar 3  85 rr        	sta z80_a
000E7Cr 3  A9 rr        	lda #<displ0				; display workspace.
000E7Er 3  85 rr        	sta z80_c
000E80r 3  A9 rr        	lda #>displ0
000E82r 3  85 rr        	sta z80_b
000E84r 3  A5 rr        	lda z80_a
000E86r 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000E89r 3               displ1:
000E89r 3  C6 rr        	dec z80_c				; back one character.
000E8Br 3  A5 rr        	lda z80_c
000E8Dr 3  C9 FF        	cmp #$ff
000E8Fr 3  D0 02        	bne :+
000E91r 3  C6 rr        	dec z80_b
000E93r 3               :
000E93r 3  A0 00        	ldy #0
000E95r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000E97r 3  09 80        	ora #128				; insert end marker.
000E99r 3  91 rr        	sta (z80_bc),y				; new value.
000E9Br 3               
000E9Br 3  A9 rr        	lda #<displ0				; display space.
000E9Dr 3  85 rr        	sta z80_l
000E9Fr 3  A9 rr        	lda #>displ0
000EA1r 3  85 rr        	sta z80_h
000EA3r 3  4C rr rr     	jmp dmsg3				; display the string.
000EA6r 3               
000EA6r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000EAAr 3               
000EAAr 3               ;----------------------------------------------------------------
000EAAr 3               ; Initialise screen.
000EAAr 3               ;
000EAAr 3               ; global:	roomtb,scno
000EAAr 3               ; local:	-
000EAAr 3               ; calls:	tstcs
000EAAr 3               ;----------------------------------------------------------------
000EAAr 3               
000EAAr 3               initsc:
000EAAr 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000EADr 3  20 rr rr     	jsr tstsc 			; find displacement.
000EB0r 3  C9 FF        	cmp #255 			; is it valid?
000EB2r 3  F0 02        	beq init_end 			; no, it's rubbish.
000EB4r 3  85 rr        	sta scno			; store new room number.
000EB6r 3               init_end:
000EB6r 3  60           	rts
000EB7r 3               
000EB7r 3               ;----------------------------------------------------------------
000EB7r 3               ; Test screen.
000EB7r 3               ;
000EB7r 3               ; global:	-
000EB7r 3               ; local:	x
000EB7r 3               ; calls:	-
000EB7r 3               ;----------------------------------------------------------------
000EB7r 3               
000EB7r 3               tstsc:
000EB7r 3  85 rr        	sta tmproom
000EB9r 3  18           	clc
000EBAr 3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
000EBCr 3  AA           	tax 				; add displacement to map data.
000EBDr 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000EC0r 3  60           	rts
000EC1r 3               
000EC1r 3               ;--------------------------
000EC1r 3               ; Screen left.
000EC1r 3               ;--------------------------
000EC1r 3               
000EC1r 3               scrl:
000EC1r 3  AD rr rr     	lda roomtb 			; present room table pointer.
000EC4r 3  38           	sec
000EC5r 3  E9 01        	sbc #1				; room left.
000EC7r 3               scrl0:
000EC7r 3  20 rr rr     	jsr tstsc			; test screen.
000ECAr 3  C9 FF        	cmp #255			; is there a screen this way?
000ECCr 3  D0 01        	bne :+
000ECEr 3  60           	rts				; no, return to loop.
000ECFr 3               :
000ECFr 3  A5 rr        	lda tmproom			; restore room displacement.
000ED1r 3  8D rr rr     	sta roomtb			; new room table position.
000ED4r 3               scrl1:
000ED4r 3  20 rr rr     	jsr initsc 			; set new screen.
000ED7r 3  A9 02        	lda #2
000ED9r 3  85 rr        	sta restfl 			; set it.
000EDBr 3  60           	rts
000EDCr 3               scrr:
000EDCr 3  AD rr rr     	lda roomtb 			; room table pointer.
000EDFr 3  18           	clc
000EE0r 3  69 01        	adc #1				; room right.
000EE2r 3  4C rr rr     	jmp scrl0
000EE5r 3               scru:
000EE5r 3  AD rr rr     	lda roomtb 			; room table pointer.
000EE8r 3  38           	sec
000EE9r 3  E9 0D        	sbc #MAPWID 			; room up.
000EEBr 3  4C rr rr     	jmp scrl0
000EEEr 3               scrd:
000EEEr 3  AD rr rr     	lda roomtb 			; room table pointer.
000EF1r 3  18           	clc
000EF2r 3  69 0D        	adc #MAPWID 			; room down.
000EF4r 3  4C rr rr     	jmp scrl0
000EF7r 3               
000EF7r 3               ;-----------------------------------------
000EF7r 3               ; Jump to new screen.
000EF7r 3               ;-----------------------------------------
000EF7r 3               
000EF7r 3               nwscr:
000EF7r 3  A2 00        	ldx #0				; start of map data.
000EF9r 3               nwscr0:
000EF9r 3  DD rr rr     	cmp mapdat,x
000EFCr 3  F0 06        	beq nwscr1			; have we found a match for screen?
000EFEr 3  E8           	inx 				; next room.
000EFFr 3  E0 50        	cpx #80				; zero room count, 80 to search.
000F01r 3  D0 F6        	bne nwscr0			; keep looking.
000F03r 3  60           	rts
000F04r 3               nwscr1:
000F04r 3  8E rr rr     	stx roomtb			; set the map position.
000F07r 3  4C rr rr     	jmp scrl1			; draw new room.
000F0Ar 3               
000F0Ar 3               
000F0Ar 3               ;----------------------------------------------------------
000F0Ar 3               ; Gravity processing.
000F0Ar 3               ;----------------------------------------------------------
000F0Ar 3               
000F0Ar 3               grav:
000F0Ar 3  A0 0D        	ldy #13
000F0Cr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000F0Er 3  85 rr        	sta z80_l
000F10r 3  A0 0E        	ldy #14
000F12r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000F14r 3  85 rr        	sta z80_h
000F16r 3  05 rr        	ora z80_l			; merge in low byte.
000F18r 3  D0 01        	bne :+
000F1Ar 3  60           	rts				; if neither is set, we're not in the air.
000F1Br 3               :
000F1Br 3  A0 00        	ldy #0
000F1Dr 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000F1Fr 3  85 rr        	sta z80_a
000F21r 3  C9 63        	cmp #99				; reached the end?
000F23r 3  D0 0C        	bne grav0			; no, continue.
000F25r 3               grav2:
000F25r 3  C6 rr        	dec z80_l			; go back to previous value.
000F27r 3  C9 FF        	cmp #$ff
000F29r 3  D0 02        	bne :+
000F2Br 3  C6 rr        	dec z80_h
000F2Dr 3               :
000F2Dr 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000F2Fr 3  85 rr        	sta z80_a
000F31r 3               grav0:
000F31r 3  E6 rr        	inc z80_l			; point to next table entry.
000F33r 3  D0 02        	bne :+
000F35r 3  E6 rr        	inc z80_h
000F37r 3               :
000F37r 3  A5 rr        	lda z80_l
000F39r 3  A0 0D        	ldy #13
000F3Br 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000F3Dr 3  A5 rr        	lda z80_h
000F3Fr 3  A0 0E        	ldy #14
000F41r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000F43r 3               grav1:
000F43r 3  A5 rr        	lda z80_a
000F45r 3  D0 01        	bne :+				; any movement required?
000F47r 3  60           	rts				; no, not this time.
000F48r 3               :
000F48r 3  A5 rr        	lda z80_a
000F4Ar 3  C9 80        	cmp #128			; is it up or down?
000F4Cr 3  B0 15        	bcs gravu			; it's up.
000F4Er 3               gravd:
000F4Er 3  85 rr        	sta z80_b			; set pixels to move.
000F50r 3               gravd0:
000F50r 3  20 rr rr     	jsr cangd			; can we go down?
000F53r 3  D0 28        	bne gravst			; can't move down, so stop.
000F55r 3  A0 08        	ldy #8
000F57r 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000F59r 3  18           	clc
000F5Ar 3  69 01        	adc #1
000F5Cr 3  91 rr        	sta (z80_ix),y
000F5Er 3  C6 rr        	dec z80_b
000F60r 3  D0 EE        	bne gravd0
000F62r 3  60           	rts
000F63r 3               gravu:
000F63r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000F65r 3  18           	clc
000F66r 3  69 01        	adc #1
000F68r 3  85 rr        	sta z80_b			; set pixels to move.
000F6Ar 3               gravu0:
000F6Ar 3  20 rr rr     	jsr cangu			; can we go up?
000F6Dr 3  D0 6E        	bne ifalls			; can't move up, go down next.
000F6Fr 3  A0 08        	ldy #8
000F71r 3  B1 rr        	lda (z80_ix),y
000F73r 3  38           	sec
000F74r 3  E9 01        	sbc #1
000F76r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000F78r 3  C6 rr        	dec z80_b
000F7Ar 3  D0 EE        	bne gravu0
000F7Cr 3  60           	rts
000F7Dr 3               gravst:
000F7Dr 3  A0 0D        	ldy #var_jumpLo
000F7Fr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000F81r 3  85 rr        	sta z80_l
000F83r 3  A0 0E        	ldy #var_jumpHi
000F85r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000F87r 3  85 rr        	sta z80_h
000F89r 3               
000F89r 3  A9 00        	lda #0				; null value in pointer.
000F8Br 3  A0 0D        	ldy #var_jumpLo
000F8Dr 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000F8Fr 3  C8           	iny
000F90r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000F92r 3               
000F92r 3  A0 00        	ldy #0
000F94r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000F96r 3  C9 63        	cmp #99				; is it the end marker?
000F98r 3               evftf:
000F98r 3  F0 01        	beq :+				; yes, fallen too far.
000F9Ar 3  60           	rts
000F9Br 3               :
000F9Br 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000F9Er 3               
000F9Er 3               ;------------------------------------------------
000F9Er 3               ; Initiate fall check.
000F9Er 3               ;------------------------------------------------
000F9Er 3               
000F9Er 3               ifall:
000F9Er 3  A0 0D        	ldy #var_jumpLo
000FA0r 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000FA2r 3  85 rr        	sta z80_l
000FA4r 3  A0 0E        	ldy #var_jumpHi
000FA6r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000FA8r 3  85 rr        	sta z80_h			; high byte in accumulator.
000FAAr 3  05 rr        	ora z80_l			; merge in low byte.
000FACr 3  F0 01        	beq :+
000FAEr 3  60           	rts				; if either is set, we're already in the air.
000FAFr 3               :
000FAFr 3  A0 09        	ldy #9
000FB1r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000FB3r 3  85 rr        	sta dispx
000FB5r 3  A0 08        	ldy #8
000FB7r 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000FB9r 3  18           	clc
000FBAr 3               numsp7:
000FBAr 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000FBCr 3  85 rr        	sta dispy			; set up test coordinates.
000FBEr 3  20 rr rr     	jsr tstbl			; get map address.
000FC1r 3  20 rr rr     	jsr plchk			; block, platform check.
000FC4r 3  F0 01        	beq :+
000FC6r 3  60           	rts				; it's solid, don't fall.
000FC7r 3               :
000FC7r 3  E6 rr        	inc bufaddr			; look right one cell.
000FC9r 3  20 rr rr     	jsr plchk			; block, platform check.
000FCCr 3  F0 01        	beq :+
000FCEr 3  60           	rts				; it's solid, don't fall.
000FCFr 3               :
000FCFr 3  A5 rr        	lda dispx			; y coordinate.
000FD1r 3  29 07        	and #7				; position straddling block cells.
000FD3r 3  F0 08        	beq ifalls			; no more checks needed.
000FD5r 3  E6 rr        	inc bufaddr			; look to third cell.
000FD7r 3  20 rr rr     	jsr plchk			; block, platform check.
000FDAr 3  F0 01        	beq :+
000FDCr 3  60           	rts				; it's solid, don't fall.
000FDDr 3               :
000FDDr 3               ifalls:
000FDDr 3  A9 rr        	lda #<jtab			; jump table start.
000FDFr 3  85 rr        	sta z80_l
000FE1r 3  A9 rr        	lda #>jtab
000FE3r 3  85 rr        	sta z80_h
000FE5r 3               ifal0:
000FE5r 3  E6 rr        	inc z80_l			; point to next value.
000FE7r 3  D0 02        	bne :+
000FE9r 3  E6 rr        	inc z80_h
000FEBr 3               :
000FEBr 3  A0 00        	ldy #0
000FEDr 3  B1 rr        	lda (z80_hl),y			; fetch value.
000FEFr 3  F0 F4        	beq ifal0			; no, get next value.
000FF1r 3  C9 63        	cmp #99				; reached end of table?
000FF3r 3  D0 01        	bne :+
000FF5r 3  60           	rts				; yes, don't fall.
000FF6r 3               :
000FF6r 3  C9 80        	cmp #128			; is it going up?
000FF8r 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000FFAr 3               
000FFAr 3  A0 0D        	ldy #13
000FFCr 3  A5 rr        	lda z80_l
000FFEr 3  91 rr        	sta (z80_ix),y 			; set jump low.
001000r 3  A0 0E        	ldy #14
001002r 3  A5 rr        	lda z80_h
001004r 3  91 rr        	sta (z80_ix),y 			; set jump high.
001006r 3  60           	rts
001007r 3               
001007r 3               
001007r 3               ;----------------------------------------------------
001007r 3               ; Get frame data for a particular sprite.
001007r 3               ; Input:
001007r 3               ;  a		= framenumer
001007r 3               ; Output:
001007r 3               ;  hl		= frame address
001007r 3               ;
001007r 3               ; global:	hl,frmptr
001007r 3               ; local:	-
001007r 3               ; calls:	-
001007r 3               ;----------------------------------------------------
001007r 3               
001007r 3               gfrm:
001007r 3  0A           	asl a	 		 	; multiple of 2.
001008r 3  18           	clc
001009r 3  6D rr rr     	adc frmptr 			; frames used by game.
00100Cr 3  85 rr        	sta z80_l
00100Er 3  AD rr rr     	lda frmptr+1
001011r 3  69 00        	adc #0
001013r 3  85 rr        	sta z80_h 			; point to frame start.
001015r 3  60           	rts
001016r 3               
001016r 3               ;----------------------------------------------------
001016r 3               ; Find sprite list for current room.
001016r 3               ;
001016r 3               ; global:	hl
001016r 3               ; local:	x,y
001016r 3               ; calls:	-
001016r 3               ;----------------------------------------------------
001016r 3               
001016r 3               sprlst:
001016r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
001018r 3  85 rr        	sta z80_l
00101Ar 3  A9 rr        	lda #>nmedat
00101Cr 3  85 rr        	sta z80_h
00101Er 3  A6 rr        	ldx scno 			; screen number.
001020r 3  D0 01        	bne sprls2 			; is it the first screen?
001022r 3  60           	rts 				; yes, don't need to search data.
001023r 3               sprls2:
001023r 3  A0 00        	ldy #0
001025r 3               sprls1:
001025r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
001027r 3  C9 FF        	cmp #255			; is it an end marker?
001029r 3  F0 0E        	beq sprls0 			; yes, end of this room.
00102Br 3               
00102Br 3  18           	clc 				; point to next sprite in list.
00102Cr 3  A5 rr        	lda z80_l
00102Er 3  69 04        	adc #NMESIZ
001030r 3  85 rr        	sta z80_l
001032r 3  90 02        	bcc :+
001034r 3  E6 rr        	inc z80_h
001036r 3               :
001036r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
001039r 3               sprls0:
001039r 3  E6 rr        	inc z80_l 			; point to start of next screen.s
00103Br 3  D0 02        	bne :+
00103Dr 3  E6 rr        	inc z80_h
00103Fr 3               :
00103Fr 3  CA           	dex
001040r 3  D0 E3        	bne sprls1 			; continue until room found.
001042r 3  60           	rts
001043r 3               
001043r 3               
001043r 3               ;----------------------------------------------------
001043r 3               ; Clear all but a single player sprite.
001043r 3               ;
001043r 3               ; global:	-
001043r 3               ; local:	x,y,ix
001043r 3               ; calls:	-
001043r 3               ;----------------------------------------------------
001043r 3               
001043r 3               nspr:
001043r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001045r 3  85 rr        	sta sprcnt
001047r 3  A9 rr        	lda #<sprtab 			; sprite table.
001049r 3  85 rr        	sta z80_x
00104Br 3  A9 rr        	lda #>sprtab
00104Dr 3  85 rr        	sta z80_i
00104Fr 3               nspr0:
00104Fr 3  A0 00        	ldy #0 				; fetch sprite type.
001051r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
001053r 3  F0 1A        	beq nspr1 			; yes, keep this one.
001055r 3               
001055r 3  A9 FF        	lda #255
001057r 3  A0 00        	ldy #0 				; fetch sprite type.
001059r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00105Br 3  A0 05        	ldy #5
00105Dr 3  91 rr        	sta (z80_ix),y 			; remove next type.
00105Fr 3               
00105Fr 3  18           	clc	 			; next sprite.
001060r 3  A5 rr        	lda z80_x
001062r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001064r 3  85 rr        	sta z80_x
001066r 3  90 02        	bcc :+
001068r 3  E6 rr        	inc z80_i
00106Ar 3               :
00106Ar 3  C6 rr        	dec sprcnt	 			; one less space in the table.
00106Cr 3  D0 E1        	bne nspr0
00106Er 3  60           	rts
00106Fr 3               nspr1:
00106Fr 3  A9 FF        	lda #255
001071r 3  A0 00        	ldy #0
001073r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001075r 3               
001075r 3  18           	clc	 			; point to next sprite.
001076r 3  A5 rr        	lda z80_x
001078r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00107Ar 3  85 rr        	sta z80_x
00107Cr 3  90 02        	bcc :+
00107Er 3  E6 rr        	inc z80_i
001080r 3               :
001080r 3  C6 rr        	dec sprcnt	 			; one less to do.
001082r 3  D0 01        	bne nspr2
001084r 3  60           	rts
001085r 3               nspr2:
001085r 3  A9 FF        	lda #255
001087r 3  A0 00        	ldy #0
001089r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00108Br 3  A0 05        	ldy #5
00108Dr 3  91 rr        	sta (z80_ix),y 			; remove next type.
00108Fr 3               
00108Fr 3  18           	clc	 			; next sprite.
001090r 3  A5 rr        	lda z80_x
001092r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001094r 3  85 rr        	sta z80_x
001096r 3  90 02        	bcc :+
001098r 3  E6 rr        	inc z80_i
00109Ar 3               :
00109Ar 3  C6 rr        	dec sprcnt	 			; one less space in table.
00109Cr 3  D0 E7        	bne nspr2
00109Er 3  60           	rts
00109Fr 3               
00109Fr 3               ;----------------------------------------------------------
00109Fr 3               ; Two initialisation routines.
00109Fr 3               ; Initialise sprites - copy everything from list to table.
00109Fr 3               ;
00109Fr 3               ; global:	-
00109Fr 3               ; local:	x,y,ix
00109Fr 3               ; calls:	cpsp
00109Fr 3               ;----------------------------------------------------------
00109Fr 3               
00109Fr 3               ispr:
00109Fr 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0010A1r 3  85 rr        	sta sprcnt
0010A3r 3  A9 rr        	lda #<sprtab			; sprite table.
0010A5r 3  85 rr        	sta z80_x
0010A7r 3  A9 rr        	lda #>sprtab
0010A9r 3  85 rr        	sta z80_i
0010ABr 3               ispr2:
0010ABr 3  A0 00        	ldy #0
0010ADr 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0010AFr 3  C9 FF        	cmp #255 			; is it an end marker?
0010B1r 3  D0 01        	bne :+
0010B3r 3  60           	rts 				; yes, no more to do.
0010B4r 3               :
0010B4r 3               ispr1:
0010B4r 3  A0 00        	ldy #0
0010B6r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
0010B8r 3  C9 FF        	cmp #255 			; is it enabled yet?
0010BAr 3  D0 08        	bne ispr4			; yes, try another slot.
0010BCr 3               
0010BCr 3  A0 05        	ldy #5
0010BEr 3  B1 rr        	lda (z80_ix),y		 	; next type.
0010C0r 3  C9 FF        	cmp #255 			; is it enabled yet?
0010C2r 3  F0 10        	beq ispr3 			; no, process this one.
0010C4r 3               ispr4:
0010C4r 3  18           	clc 				; next sprite.
0010C5r 3  A5 rr        	lda z80_x
0010C7r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0010C9r 3  85 rr        	sta z80_x
0010CBr 3  90 02        	bcc :+
0010CDr 3  E6 rr        	inc z80_i
0010CFr 3               :
0010CFr 3  C6 rr        	dec sprcnt
0010D1r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0010D3r 3  60           	rts  				; no more room in table.
0010D4r 3               ispr3:
0010D4r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
0010D7r 3  C6 rr        	dec sprcnt			; one less space in the table.
0010D9r 3  D0 D0        	bne ispr2
0010DBr 3  60           	rts
0010DCr 3               
0010DCr 3               
0010DCr 3               ;-----------------------------------------------------------------------
0010DCr 3               ; Initialise sprites - but not player, we're keeping the old one.
0010DCr 3               ;
0010DCr 3               ; global:	-
0010DCr 3               ; local:	x,y,ix
0010DCr 3               ; calls:	cpsp
0010DCr 3               ;-----------------------------------------------------------------------
0010DCr 3               
0010DCr 3               kspr:
0010DCr 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0010DEr 3  A9 rr        	lda #<sprtab 			; sprite table.
0010E0r 3  85 rr        	sta z80_x
0010E2r 3  A9 rr        	lda #>sprtab
0010E4r 3  85 rr        	sta z80_i
0010E6r 3               kspr2:
0010E6r 3  A0 00        	ldy #0
0010E8r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0010EAr 3  C9 FF        	cmp #255 			; is it an end marker?
0010ECr 3  D0 01        	bne :+
0010EEr 3  60           	rts 				; yes, no more to do.
0010EFr 3               :
0010EFr 3  C9 00        	cmp #0
0010F1r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
0010F3r 3               
0010F3r 3  18           	clc 				; next sprite.
0010F4r 3  A5 rr        	lda z80_l
0010F6r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0010F8r 3  85 rr        	sta z80_l
0010FAr 3  90 02        	bcc :+
0010FCr 3  E6 rr        	inc z80_h
0010FEr 3               :
0010FEr 3  4C rr rr     	jmp kspr2
001101r 3               kspr1:
001101r 3  A0 00        	ldy #0 				; fetch sprite type.
001103r 3  B1 rr        	lda (z80_ix),y
001105r 3  C9 FF        	cmp #255 			; is it enabled yet?
001107r 3  D0 08        	bne kspr4 			; yes, try another slot.
001109r 3               
001109r 3  A0 05        	ldy #5 				; next type.
00110Br 3  B1 rr        	lda (z80_ix),y
00110Dr 3  C9 FF        	cmp #255 			; is it enabled yet?
00110Fr 3  F0 0F        	beq kspr3 			; no, process this one.
001111r 3               kspr4:
001111r 3  18           	clc 				; next sprite.
001112r 3  A5 rr        	lda z80_x
001114r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001116r 3  85 rr        	sta z80_x
001118r 3  90 02        	bcc :+
00111Ar 3  E6 rr        	inc z80_i
00111Cr 3               :
00111Cr 3  CA           	dex	 			; repeat for remaining sprites.
00111Dr 3  D0 E2        	bne kspr1
00111Fr 3  60           	rts  				; no more room in table.
001120r 3               kspr3:
001120r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
001123r 3  CA           	dex	 			; one less space in the table.
001124r 3  D0 C0        	bne kspr2
001126r 3  60           	rts
001127r 3               
001127r 3               ;----------------------------------------------
001127r 3               ; Copy sprite from list to table.
001127r 3               ;
001127r 3               ; global:	hl,ix
001127r 3               ; local:	y
001127r 3               ; calls:	evnt09
001127r 3               ;----------------------------------------------
001127r 3               
001127r 3               cpsp:
001127r 3  A0 00        	ldy #0					; fetch byte from table.
001129r 3  B1 rr        	lda (z80_hl),y
00112Br 3               	; y=var_Type
00112Br 3  91 rr        	sta (z80_ix),y			; set up type.
00112Dr 3  A0 05        	ldy #var_newType
00112Fr 3  91 rr        	sta (z80_ix),y 			; set up type.
001131r 3               
001131r 3  E6 rr        	inc z80_l 				; move to next byte.
001133r 3  D0 02        	bne :+
001135r 3  E6 rr        	inc z80_h
001137r 3               :
001137r 3  A0 00        	ldy #0 					; fetch byte from table.
001139r 3  B1 rr        	lda (z80_hl),y
00113Br 3  A0 06        	ldy #var_newImage
00113Dr 3  91 rr        	sta (z80_ix),y			; set up image.
00113Fr 3               
00113Fr 3  E6 rr        	inc z80_l 				; move to next byte.
001141r 3  D0 02        	bne :+
001143r 3  E6 rr        	inc z80_h
001145r 3               :
001145r 3  A0 00        	ldy #0
001147r 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
001149r 3  A0 08        	ldy #var_newY
00114Br 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
00114Dr 3               
00114Dr 3  A9 C8        	lda #200 				; set initial coordinate off screen.
00114Fr 3  A0 03        	ldy #var_Y
001151r 3  91 rr        	sta (z80_ix),y
001153r 3               
001153r 3  E6 rr        	inc z80_l 				; move to next byte.
001155r 3  D0 02        	bne :+
001157r 3  E6 rr        	inc z80_h
001159r 3               :
001159r 3  A0 00        	ldy #0 					; fetch byte from table.
00115Br 3  B1 rr        	lda (z80_hl),y
00115Dr 3  A0 09        	ldy #var_newX
00115Fr 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
001161r 3               
001161r 3  E6 rr        	inc z80_l 				; move to next byte.
001163r 3  D0 02        	bne :+
001165r 3  E6 rr        	inc z80_h
001167r 3               :
001167r 3  A9 00        	lda #0					; zeroes in accumulator.
001169r 3  A0 07        	ldy #var_newFrame 		; reset frame number.
00116Br 3  91 rr        	sta (z80_ix),y
00116Dr 3  A0 0A        	ldy #var_Direction 		; reset direction.
00116Fr 3  91 rr        	sta (z80_ix),y
001171r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
001173r 3  91 rr        	sta (z80_ix),y
001175r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
001177r 3  91 rr        	sta (z80_ix),y
001179r 3               
001179r 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
00117Br 3  A0 10        	ldy #var_dataHi
00117Dr 3  91 rr        	sta (z80_ix),y
00117Fr 3               evis0:
00117Fr 3  A5 rr        	lda z80_i
001181r 3  48           	pha
001182r 3  A5 rr        	lda z80_x
001184r 3  48           	pha
001185r 3  A5 rr        	lda z80_h
001187r 3  48           	pha
001188r 3  A5 rr        	lda z80_l
00118Ar 3  48           	pha
00118Br 3               
00118Br 3  20 rr rr     	jsr evnt09 				; perform event.
00118Er 3               
00118Er 3  68           	pla
00118Fr 3  85 rr        	sta z80_l
001191r 3  68           	pla
001192r 3  85 rr        	sta z80_h
001194r 3  68           	pla
001195r 3  85 rr        	sta z80_x
001197r 3  68           	pla
001198r 3  85 rr        	sta z80_i
00119Ar 3               
00119Ar 3  18           	clc
00119Br 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
00119Dr 3  69 11        	adc #TABSIZ		 	; next sprite.
00119Fr 3  85 rr        	sta z80_x
0011A1r 3  90 02        	bcc :+
0011A3r 3  E6 rr        	inc z80_i
0011A5r 3               :
0011A5r 3  60           	rts
0011A6r 3               
0011A6r 3               
0011A6r 3               ;-------------------------------------
0011A6r 3               ; Clear the play area window.
0011A6r 3               ;-------------------------------------
0011A6r 3               
0011A6r 3               clw:
0011A6r 3  AD rr rr     	lda wintop			; get coordinates of window.
0011A9r 3  85 rr        	sta dispy			; put into dispx for calculation.
0011ABr 3  AD rr rr     	lda winlft
0011AEr 3  85 rr        	sta dispx
0011B0r 3               
0011B0r 3  AD rr rr     	lda winhgt			; height of window.
0011B3r 3  85 rr        	sta rrow			; copy to b register.
0011B5r 3               clw3:
0011B5r 3  AD rr rr     	lda winwid 			; width of window.
0011B8r 3  85 rr        	sta rcol
0011BAr 3               clw2:
0011BAr 3  20 rr rr     	jsr gprad 			; get print address.
0011BDr 3  A9 20        	lda #32
0011BFr 3  20 rr rr     	jsr pchar
0011C2r 3  E6 rr        	inc dispx			; next column.
0011C4r 3  C6 rr        	dec rcol			; one less to do.
0011C6r 3  D0 F2        	bne clw2			; repeat for remaining columns.
0011C8r 3               
0011C8r 3  AD rr rr     	lda winlft			; get left edge.
0011CBr 3  85 rr        	sta dispx 			; reset x.
0011CDr 3  E6 rr        	inc dispy 			; next line down.
0011CFr 3               
0011CFr 3  C6 rr        	dec rrow
0011D1r 3  D0 E2        	bne clw3			; repeat down the screen.
0011D3r 3               
0011D3r 3  AD rr rr     	lda wintop			; get coordinates of window.
0011D6r 3  85 rr        	sta chary			; put into display position.
0011D8r 3  AD rr rr     	lda winlft
0011DBr 3  85 rr        	sta charx
0011DDr 3  60           	rts
0011DEr 3               
0011DEr 3               
0011DEr 3               ;----------------------------------------------------------
0011DEr 3               ; Effects code.
0011DEr 3               ; Ticker routine is called 25 times per second.
0011DEr 3               ;
0011DEr 3               ; txtini = text scroller address
0011DEr 3               ; txtscr = left text screen address
0011DEr 3               ; txtwid = scroller width
0011DEr 3               ; txtbit = 128
0011DEr 3               ; X      = message nr
0011DEr 3               ;----------------------------------------------------------
0011DEr 3               
0011DEr 3               .if sflag
0011DEr 3               
0011DEr 3               scrollpos_lb:	.byte $00,$10,$20,$30,$40,$50,$60,$70
0011DEr 3               		.byte $80,$90,$a0,$b0,$c0,$d0,$e0,$f0
0011DEr 3               		.byte $00,$10,$20,$30,$40,$50
0011DEr 3               scrollpos_hb:	.byte $00,$00,$00,$00,$00,$00,$00,$00
0011DEr 3               		.byte $00,$00,$00,$00,$00,$00,$00,$00
0011DEr 3               		.byte $01,$01,$01,$01,$01,$01
0011DEr 3               
0011DEr 3               scrly:
0011DEr 3               
0011DEr 3               ; Set scr_l = txtscr
0011DEr 3               
0011DEr 3               	rts
0011DEr 3               	.word txtscr         	; set scr_l = left screen address.
0011DEr 3               	sta scr_l
0011DEr 3               	sta scr_r
0011DEr 3               	lda txtscr+1
0011DEr 3               	sta scr_l+1
0011DEr 3               	sta scr_r+1
0011DEr 3               
0011DEr 3               	stx xtmp		; save x
0011DEr 3               
0011DEr 3               ; Calculate scr_r = scr_l + 16*(txtwid -1)
0011DEr 3               
0011DEr 3               	ldx txtwid
0011DEr 3               	dex
0011DEr 3               	lda scrollpos_lb,x
0011DEr 3               	clc
0011DEr 3               	adc scr_r
0011DEr 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
0011DEr 3               	bcc :+
0011DEr 3               	inc scr_r+1
0011DEr 3               :
0011DEr 3               	clc
0011DEr 3               	lda scrollpos_hb,x
0011DEr 3               	adc scr_r+1
0011DEr 3               	sta scr_r+1
0011DEr 3               
0011DEr 3               ; Scroll string
0011DEr 3               
0011DEr 3               	lda #0
0011DEr 3               	sta line_cnt		; Set line counter
0011DEr 3               scrly1:
0011DEr 3               	clc
0011DEr 3               	lda scr_r
0011DEr 3               	adc line_cnt
0011DEr 3               	sta scr_tmp
0011DEr 3               	lda scr_r+1
0011DEr 3               	sta scr_tmp+1
0011DEr 3               
0011DEr 3               	ldx txtwid		; set column counter
0011DEr 3               	dex
0011DEr 3               	ldy #0
0011DEr 3               	clc			; Reset pixel to be shifted in
0011DEr 3               scrly0:
0011DEr 3               	lda (scr_tmp),y
0011DEr 3               	rol a			; Shift screenbyte
0011DEr 3               	sta (scr_tmp),y		; store screenbyte
0011DEr 3               	php			; save carry
0011DEr 3               
0011DEr 3               	sec			; subtract 16 form screenaddress
0011DEr 3               	lda scr_tmp
0011DEr 3               	sbc #$10
0011DEr 3               	sta scr_tmp
0011DEr 3               	bcs :+
0011DEr 3               	dec scr_tmp+1
0011DEr 3               :
0011DEr 3               	plp			; restore carry
0011DEr 3               	dex			; previous column
0011DEr 3               	bpl scrly0		; repeat for all columns
0011DEr 3               
0011DEr 3               	inc line_cnt		; next line
0011DEr 3               	lda line_cnt
0011DEr 3               	cmp #8
0011DEr 3               	bne scrly1		; repeat for 8 lines
0011DEr 3               
0011DEr 3               ; Get next character in string
0011DEr 3               
0011DEr 3               	lda txtpos 		; get text pointer.
0011DEr 3               	sta scr_txt
0011DEr 3               	lda txtpos+1
0011DEr 3               	sta scr_txt+1
0011DEr 3               
0011DEr 3               	ldy #0
0011DEr 3               	lda (scr_txt),y 	; find character we're displaying.
0011DEr 3               	and #127 		; remove end marker bit if applicable.
0011DEr 3               	cmp #13			; is it newline?
0011DEr 3               	bne scrly5 		; no, it's okay.
0011DEr 3               	lda #32			; convert to a space instead.
0011DEr 3               scrly5:
0011DEr 3               	sta fntaddr		; calculate char address
0011DEr 3               	lda #0
0011DEr 3               	sta fntaddr+1
0011DEr 3               	asl fntaddr  		; multiply char by 8.
0011DEr 3               	rol fntaddr+1
0011DEr 3               	asl fntaddr
0011DEr 3               	rol fntaddr+1
0011DEr 3               	asl fntaddr
0011DEr 3               	rol fntaddr+1
0011DEr 3               	lda fntaddr
0011DEr 3               	clc
0011DEr 3               	adc #<(FONT-256)
0011DEr 3               	sta scrly3+1		; that's the low byte.
0011DEr 3               	lda fntaddr+1
0011DEr 3               	adc #>(FONT-256)
0011DEr 3               	sta scrly3+2		; add displacement.
0011DEr 3               
0011DEr 3               	ldy #0
0011DEr 3               scrly3:
0011DEr 3               	lda $3333,y		; get image of char line.
0011DEr 3               	and txtbit
0011DEr 3               	beq scrly2		; don't plot pixel
0011DEr 3               	lda (scr_r),y
0011DEr 3               	clc
0011DEr 3               	ora #1
0011DEr 3               	sta (scr_r),y		; plot pixel
0011DEr 3               scrly2:
0011DEr 3               	iny			; next line of char.
0011DEr 3               	cpy #8
0011DEr 3               	bne scrly3
0011DEr 3               
0011DEr 3               	lsr txtbit		; bit of text to display.
0011DEr 3               	bcs :+
0011DEr 3               	rts
0011DEr 3               :
0011DEr 3               	ldy #0
0011DEr 3               	lda (scr_txt),y 	; what was the character?
0011DEr 3               	asl a	  		; end of message?
0011DEr 3               	bcs scrly4
0011DEr 3               	inc txtpos
0011DEr 3               	bne :+
0011DEr 3               	inc txtpos+1
0011DEr 3               :
0011DEr 3               	jmp scrly6 		; not yet - continue.
0011DEr 3               scrly4:
0011DEr 3               	lda txtini 		; start of scrolling message.
0011DEr 3               	sta txtpos
0011DEr 3               	lda txtini+1
0011DEr 3               	sta txtpos+1
0011DEr 3               scrly6:
0011DEr 3               	lda #128
0011DEr 3               	sta txtbit
0011DEr 3               	ldx xtmp
0011DEr 3               	rts
0011DEr 3               
0011DEr 3               tmp_byte:	.byte 0
0011DEr 3               line_cnt:	.byte 0
0011DEr 3               
0011DEr 3               ;-------------------------------------------------------
0011DEr 3               ; Entry TICKER command
0011DEr 3               ;
0011DEr 3               ; Entry:
0011DEr 3               ;  z80_b = message nr
0011DEr 3               ;  z80_c = width
0011DEr 3               ;-------------------------------------------------------
0011DEr 3               
0011DEr 3               iscrly:
0011DEr 3               	jsr prescr 		; set up display position.
0011DEr 3               	lda #<msgdat 		; text messages.
0011DEr 3               	sta z80_l
0011DEr 3               	lda #>msgdat
0011DEr 3               	sta z80_h
0011DEr 3               	lda z80_c 		; width.
0011DEr 3               	sec
0011DEr 3               	sbc #1			; subtract one.
0011DEr 3               	cmp #32 		; is it between 1 and 32?
0011DEr 3               	bcc :+
0011DEr 3               	lda #$60
0011DEr 3               	jmp iscrl0		; no, disable messages.
0011DEr 3               :
0011DEr 3               	ldx z80_b		; message number.
0011DEr 3               	jsr getwrd 		; find message start.
0011DEr 3               
0011DEr 3               	lda z80_l		; set initial text position.
0011DEr 3               	sta txtini
0011DEr 3               	lda z80_h
0011DEr 3               	sta txtini+1
0011DEr 3               
0011DEr 3               	lda #$ad		; code for lda adrr
0011DEr 3               iscrl0:
0011DEr 3               	sta scrly		; enable/disable scrolling routine.
0011DEr 3               
0011DEr 3               	jsr prescr 		; set up display position.
0011DEr 3               	jsr gprad 		; get print address.
0011DEr 3               
0011DEr 3               	lda scraddr 		; set text screen address.
0011DEr 3               	sta txtscr
0011DEr 3               	lda scraddr+1
0011DEr 3               	sta txtscr+1
0011DEr 3               
0011DEr 3               	lda z80_c		; width.
0011DEr 3               	sta txtwid		; set width in working storage.
0011DEr 3               
0011DEr 3               	lda #128 		; start with leftmost bit.
0011DEr 3               	sta txtbit
0011DEr 3               
0011DEr 3               	jmp scrly4
0011DEr 3               .endif
0011DEr 3               
0011DEr 3               ;------------------------------------------------------------------
0011DEr 3               ; Dig routine, conditional assembly depending on dflag
0011DEr 3               ;------------------------------------------------------------------
0011DEr 3               .if dflag
0011DEr 3               dig:
0011DEr 3               	and #3
0011DEr 3               	beq digr		; dig right
0011DEr 3               	cmp #1
0011DEr 3               	beq digl		; dig left
0011DEr 3               	cmp #2
0011DEr 3               	beq digd		; dig down
0011DEr 3               
0011DEr 3               ; Dig up.
0011DEr 3               
0011DEr 3               digu:				; dig up
0011DEr 3               	ldy #8
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	sec
0011DEr 3               	sbc #2
0011DEr 3               	sta dispy		; set y
0011DEr 3               
0011DEr 3               	iny
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	sta dispx		; set x
0011DEr 3               	jmp digv
0011DEr 3               
0011DEr 3               ; Dig down.
0011DEr 3               
0011DEr 3               digd:
0011DEr 3               	ldy #9
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	sta dispx		; set y
0011DEr 3               
0011DEr 3               	dey
0011DEr 3               	clc
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	adc #16
0011DEr 3               	sta dispy		; set y
0011DEr 3               	jmp digv
0011DEr 3               
0011DEr 3               ; Dig left.
0011DEr 3               
0011DEr 3               digl:
0011DEr 3               	ldy #8
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	sta dispy		; set y
0011DEr 3               
0011DEr 3               	iny
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	sec
0011DEr 3               	sbc #2			; x=x-2
0011DEr 3               	sta dispx		; set x
0011DEr 3               	jmp digh
0011DEr 3               
0011DEr 3               ; Dig right.
0011DEr 3               
0011DEr 3               digr:
0011DEr 3               	ldy #8
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	sta dispy		; set y
0011DEr 3               
0011DEr 3               	iny
0011DEr 3               	lda (z80_ix),y
0011DEr 3               	clc
0011DEr 3               	adc #16
0011DEr 3               	sta dispx		; set x+16
0011DEr 3               	jmp digh
0011DEr 3               
0011DEr 3               ; Vertical digging
0011DEr 3               
0011DEr 3               digv:
0011DEr 3               	jsr tstbl		; check blocktype in MAP
0011DEr 3               	jsr fdchk		; test if FODDER
0011DEr 3               
0011DEr 3               	clc
0011DEr 3               	lda dispx		; look 1 cell down
0011DEr 3               	adc #8
0011DEr 3               	sta dispx
0011DEr 3               	jsr tstbl		; check blocktype in MAP
0011DEr 3               	jsr fdchk
0011DEr 3               	lda dispx
0011DEr 3               	and #7
0011DEr 3               	bne :+
0011DEr 3               	rts
0011DEr 3               :
0011DEr 3               	clc
0011DEr 3               	lda dispx		; look 1 cell down
0011DEr 3               	adc #8
0011DEr 3               	sta dispx
0011DEr 3               	jsr tstbl		; check blocktype in MAP
0011DEr 3               	jmp fdchk
0011DEr 3               
0011DEr 3               ; Horizontal digging
0011DEr 3               
0011DEr 3               digh:
0011DEr 3               	jsr tstbl		; check blocktype in MAP
0011DEr 3               	jsr fdchk		; test if FODDER
0011DEr 3               
0011DEr 3               	clc
0011DEr 3               	lda dispy		; look 1 cell down
0011DEr 3               	adc #8
0011DEr 3               	sta dispy
0011DEr 3               	jsr tstbl		; check blocktype in MAP
0011DEr 3               	jsr fdchk
0011DEr 3               	lda dispy
0011DEr 3               	and #7
0011DEr 3               	bne :+
0011DEr 3               	rts
0011DEr 3               :
0011DEr 3               	clc
0011DEr 3               	lda dispy		; look 1 cell down
0011DEr 3               	adc #8
0011DEr 3               	sta dispy
0011DEr 3               	jsr tstbl		; check blocktype in MAP
0011DEr 3               	jmp fdchk
0011DEr 3               
0011DEr 3               digcnt:	.byte 0
0011DEr 3               
0011DEr 3               .endif
0011DEr 3               
0011DEr 3               ;------------------------------------------------------------------
0011DEr 3               ; Sprite table
0011DEr 3               ;------------------------------------------------------------------
0011DEr 3               
0011DEr 3               
0011DEr 3               ; ix+0  = type.
0011DEr 3               ; ix+1  = sprite image number.
0011DEr 3               ; ix+2  = frame.
0011DEr 3               ; ix+3  = y coord.
0011DEr 3               ; ix+4  = x coord.
0011DEr 3               
0011DEr 3               ; ix+5  = new type.
0011DEr 3               ; ix+6  = new image number.
0011DEr 3               ; ix+7  = new frame.
0011DEr 3               ; ix+8  = new y coord.
0011DEr 3               ; ix+9  = new x coord.
0011DEr 3               
0011DEr 3               ; ix+10 = direction.
0011DEr 3               ; ix+11 = parameter 1.
0011DEr 3               ; ix+12 = parameter 2.
0011DEr 3               ; ix+13 = jump pointer low.
0011DEr 3               ; ix+14 = jump pointer high.
0011DEr 3               ; ix+15 = data pointer low.
0011DEr 3               ; ix+16 = data pointer high.
0011DEr 3               
0011DEr 3               ; block NUMSPR * TABSIZ,255
0011DEr 3               
0011DEr 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0011E2r 3  FF FF FF FF  
0011E6r 3  FF FF FF FF  
0012AAr 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0012AEr 3  FF FF FF 00  
0012B2r 3  C0 78 00 00  
0012BBr 3  07           roomtb:	.byte 7                      ; start room map offset.
0012BCr 3               
0012BCr 3               setfgcol:
0012BCr 3               setbgcol:
0012BCr 3  60           	rts
0012BDr 3               
0012BDr 3               ; User routine.  Put your own code in here to be called with USER instruction.
0012BDr 3               ; if USER has an argument it will be passed in the accumulator.
0012BDr 3               
0012BDr 3               user:
0012BDr 3               	.include "user.inc"
0012BDr 4  60           	rts
0012BEr 4               
0012BEr 3               
0012BEr 3               ; Everything below here will be generated by the editors.
0012BEr 3               
0012BEr 3               
0012BEr 3  60                   rts
0012BFr 3               WINDOWTOP = 2
0012BFr 3               WINDOWLFT = 0
0012BFr 3               WINDOWHGT = 20
0012BFr 3               WINDOWWID = 22 ;a
0012BFr 3               MAPWID = 13
0012BFr 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
0012C3r 3  FF FF FF FF  
0012C7r 3  FF FF FF FF  
0012CCr 3               mapdat:
0012CCr 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,22,24,23,31,255,255,3,26,27,255,255,255,255,10,1,21,9,255,255,29,25,28,26,27,7,6,8,255,255,255,255,255,255,255,29,25,28,25,5,12,15,14,18,255,255,255,255,255,255,255,255,255,20,17,16,13,255,255,255,255,255,255,
0012D0r 3  FF FF FF FF  
0012D4r 3  16 18 17 1F  
00131Ar 3               255,4,19,30,2,11,0,255
00131Ar 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
00131Er 3  FF FF FF FF  
001322r 3  FF FF FF FF  
001327r 3  4C           stmap:  .byte 76
001328r 3               
001328r 3               evnt00:
001328r 3  A9 05                lda #DEADLY	; DEADLY
00132Ar 3  85 rr                sta z80_b
00132Cr 3  20 rr rr             jsr tded
00132Fr 3  C5 rr                cmp z80_b
001331r 3  F0 03                beq :+
001333r 3  4C rr rr             jmp a00059
001336r 3               :
001336r 3  A9 1F                lda #31
001338r 3  C5 rr                cmp scno
00133Ar 3  F0 03                beq *+5
00133Cr 3  4C rr rr             jmp a00059
00133Fr 3  A9 01                lda #1		; ENDGAME
001341r 3  85 rr                sta gamwon
001343r 3  A9 05        a00059: lda #DEADLY	; DEADLY
001345r 3  85 rr                sta z80_b
001347r 3  20 rr rr             jsr tded
00134Ar 3  C5 rr                cmp z80_b
00134Cr 3  F0 03                beq :+
00134Er 3  4C rr rr             jmp a00106
001351r 3               :
001351r 3  A9 00                lda #0
001353r 3  C5 rr                cmp varr
001355r 3  F0 03                beq *+5
001357r 3  4C rr rr             jmp a00106
00135Ar 3  A9 06        a00106: lda #CUSTOM	; CUSTOM
00135Cr 3  85 rr                sta z80_b
00135Er 3  20 rr rr             jsr tded
001361r 3  C5 rr                cmp z80_b
001363r 3  F0 03                beq :+
001365r 3  4C rr rr             jmp a00234
001368r 3               :
001368r 3  A5 rr                lda numlif
00136Ar 3  C9 63                cmp #99
00136Cr 3  90 03                bcc *+5
00136Er 3  4C rr rr             jmp a00234
001371r 3  A5 rr                lda numlif
001373r 3  18                   clc
001374r 3  69 01                adc #1
001376r 3  85 rr                sta numlif
001378r 3  A9 00                lda #0
00137Ar 3  85 rr                sta chary
00137Cr 3  A9 07                lda #7
00137Er 3  85 rr                sta charx
001380r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001382r 3  85 rr                sta z80_c
001384r 3  A9 rr                lda #>displ0
001386r 3  85 rr                sta z80_b
001388r 3  A5 rr                lda numlif
00138Ar 3  20 rr rr             jsr num2dd
00138Dr 3  20 rr rr             jsr displ1
001390r 3  A9 05                lda #5		; BEEP
001392r 3  8D rr rr             sta sndtyp
001395r 3  20 rr rr     a00234: jsr skobj	; DETECTOBJECT
001398r 3  85 rr                sta varobj
00139Ar 3  A9 02                lda #2
00139Cr 3  C5 rr                cmp varobj
00139Er 3  F0 03                beq *+5
0013A0r 3  4C rr rr             jmp a00299
0013A3r 3  A5 rr                lda varobj	; GET
0013A5r 3  20 rr rr             jsr getob
0013A8r 3  A9 02                lda #2
0013AAr 3  85 rr                sta varr
0013ACr 3  A9 01                lda #1
0013AEr 3  85 rr                sta varb
0013B0r 3  A9 01                lda #1
0013B2r 3  85 rr                sta varm
0013B4r 3  A9 03        a00299: lda #3
0013B6r 3  C5 rr                cmp varobj
0013B8r 3  F0 03                beq *+5
0013BAr 3  4C rr rr             jmp a00351
0013BDr 3  A5 rr                lda varobj	; GET
0013BFr 3  20 rr rr             jsr getob
0013C2r 3  A9 02                lda #2
0013C4r 3  85 rr                sta varr
0013C6r 3  A9 01                lda #1
0013C8r 3  85 rr                sta vark
0013CAr 3  A9 01                lda #1
0013CCr 3  85 rr                sta varm
0013CEr 3  A9 00        a00351: lda #0
0013D0r 3  C5 rr                cmp varobj
0013D2r 3  F0 03                beq *+5
0013D4r 3  4C rr rr             jmp a00395
0013D7r 3  A5 rr                lda varobj	; GET
0013D9r 3  20 rr rr             jsr getob
0013DCr 3  A9 02                lda #2
0013DEr 3  85 rr                sta varr
0013E0r 3  A9 01                lda #1
0013E2r 3  85 rr                sta varm
0013E4r 3  A9 04        a00395: lda #4
0013E6r 3  C5 rr                cmp varobj
0013E8r 3  F0 03                beq *+5
0013EAr 3  4C rr rr             jmp a00447
0013EDr 3  A5 rr                lda varobj	; GET
0013EFr 3  20 rr rr             jsr getob
0013F2r 3  A9 02                lda #2
0013F4r 3  85 rr                sta varr
0013F6r 3  A9 01                lda #1
0013F8r 3  85 rr                sta varl
0013FAr 3  A9 01                lda #1
0013FCr 3  85 rr                sta varm
0013FEr 3  A9 05        a00447: lda #5
001400r 3  C5 rr                cmp varobj
001402r 3  F0 03                beq *+5
001404r 3  4C rr rr             jmp a00491
001407r 3  A5 rr                lda varobj	; GET
001409r 3  20 rr rr             jsr getob
00140Cr 3  A9 02                lda #2
00140Er 3  85 rr                sta varr
001410r 3  A9 01                lda #1
001412r 3  85 rr                sta varm
001414r 3  A9 06        a00491: lda #6
001416r 3  C5 rr                cmp varobj
001418r 3  F0 03                beq *+5
00141Ar 3  4C rr rr             jmp a00527
00141Dr 3  A5 rr                lda varobj	; GET
00141Fr 3  20 rr rr             jsr getob
001422r 3  A9 02                lda #2
001424r 3  85 rr                sta varr
001426r 3  A9 01        a00527: lda #1
001428r 3  C5 rr                cmp varobj
00142Ar 3  F0 03                beq *+5
00142Cr 3  4C rr rr             jmp a00579
00142Fr 3  A5 rr                lda varobj	; GET
001431r 3  20 rr rr             jsr getob
001434r 3  A9 02                lda #2
001436r 3  85 rr                sta varr
001438r 3  A9 01                lda #1
00143Ar 3  85 rr                sta vare
00143Cr 3  A9 01                lda #1
00143Er 3  85 rr                sta varm
001440r 3  A9 07        a00579: lda #7
001442r 3  C5 rr                cmp varobj
001444r 3  F0 03                beq *+5
001446r 3  4C rr rr             jmp a00631
001449r 3  A5 rr                lda varobj	; GET
00144Br 3  20 rr rr             jsr getob
00144Er 3  A9 02                lda #2
001450r 3  85 rr                sta varr
001452r 3  A9 01                lda #1
001454r 3  85 rr                sta varh
001456r 3  A9 01                lda #1
001458r 3  85 rr                sta varm
00145Ar 3  A9 08        a00631: lda #8
00145Cr 3  C5 rr                cmp varn
00145Er 3  F0 03                beq *+5
001460r 3  4C rr rr             jmp a00694
001463r 3  A9 00                lda #0
001465r 3  85 rr                sta chary
001467r 3  A9 05                lda #5
001469r 3  85 rr                sta charx
00146Br 3  A9 03                lda #3  	; MESSAGE
00146Dr 3  20 rr rr             jsr dmsg
001470r 3  A9 78                lda #120		; BEEP
001472r 3  8D rr rr             sta sndtyp
001475r 3  A9 09                lda #9
001477r 3  85 rr                sta varn
001479r 3  A9 01        a00694: lda #1
00147Br 3  C5 rr                cmp varm
00147Dr 3  F0 03                beq *+5
00147Fr 3  4C rr rr             jmp a00781
001482r 3  A5 rr                lda varn
001484r 3  18                   clc
001485r 3  69 01                adc #1
001487r 3  85 rr                sta varn
001489r 3  A9 00                lda #0
00148Br 3  85 rr                sta chary
00148Dr 3  A9 15                lda #21
00148Fr 3  85 rr                sta charx
001491r 3  A9 50                lda #80		; BEEP
001493r 3  8D rr rr             sta sndtyp
001496r 3  A5 rr                lda varn	; DISPLAY
001498r 3  20 rr rr             jsr disply
00149Br 3  A9 00                lda #0
00149Dr 3  85 rr                sta varm
00149Fr 3  A9 00                lda #0
0014A1r 3  85 rr                sta varr
0014A3r 3  A5 rr        a00781: lda joyval	; KEY
0014A5r 3  29 02                and #2
0014A7r 3  F0 03                beq :+
0014A9r 3  4C rr rr             jmp a00984
0014ACr 3               :
0014ACr 3  A9 01                lda #1
0014AEr 3  A0 0A                ldy #10
0014B0r 3  91 rr                sta (z80_ix),y
0014B2r 3  A9 01                lda #1
0014B4r 3  A0 06                ldy #6
0014B6r 3  91 rr                sta (z80_ix),y
0014B8r 3  AD rr rr             lda wnlftx
0014BBr 3  A0 09                ldy #9
0014BDr 3  D1 rr                cmp (z80_ix),y
0014BFr 3  B0 03                bcs *+5
0014C1r 3  4C rr rr             jmp a00881
0014C4r 3  20 rr rr             jsr scrl	; SCREENLEFT
0014C7r 3  AD rr rr             lda wnrgtx
0014CAr 3  A0 09                ldy #9
0014CCr 3  91 rr                sta (z80_ix),y
0014CEr 3  60                   rts		; EXIT
0014CFr 3  4C rr rr             jmp a00984
0014D2r 3  20 rr rr     a00881: jsr cangl	; CANGOLEFT
0014D5r 3  F0 03                beq :+
0014D7r 3  4C rr rr             jmp a00984
0014DAr 3               :
0014DAr 3  A0 09                ldy #9 		; SPRITELEFT
0014DCr 3  B1 rr                lda (z80_ix),y
0014DEr 3  38                   sec
0014DFr 3  E9 02                sbc #2
0014E1r 3  91 rr                sta (z80_ix),y
0014E3r 3  A9 03                lda #3		; ANIMATE
0014E5r 3  20 rr rr             jsr animsp
0014E8r 3  A9 00                lda #0
0014EAr 3  C5 rr                cmp vara
0014ECr 3  F0 03                beq *+5
0014EEr 3  4C rr rr             jmp a00984
0014F1r 3  A9 01                lda #1
0014F3r 3  A0 07                ldy #7
0014F5r 3  D1 rr                cmp (z80_ix),y
0014F7r 3  F0 03                beq *+5
0014F9r 3  4C rr rr             jmp a00984
0014FCr 3  A9 0F                lda #15		; BEEP
0014FEr 3  8D rr rr             sta sndtyp
001501r 3  A5 rr        a00984: lda joyval	; KEY
001503r 3  29 01                and #1
001505r 3  F0 03                beq :+
001507r 3  4C rr rr             jmp a01192
00150Ar 3               :
00150Ar 3  A9 00                lda #0
00150Cr 3  A0 0A                ldy #10
00150Er 3  91 rr                sta (z80_ix),y
001510r 3  A9 00                lda #0
001512r 3  A0 06                ldy #6
001514r 3  91 rr                sta (z80_ix),y
001516r 3  AD rr rr             lda wnrgtx
001519r 3  A0 09                ldy #9
00151Br 3  D1 rr                cmp (z80_ix),y
00151Dr 3  F0 05                beq *+7
00151Fr 3  90 03                bcc *+5
001521r 3  4C rr rr             jmp a01089
001524r 3  20 rr rr             jsr scrr	; SCREENRIGHT
001527r 3  AD rr rr             lda wnlftx
00152Ar 3  A0 09                ldy #9
00152Cr 3  91 rr                sta (z80_ix),y
00152Er 3  60                   rts		; EXIT
00152Fr 3  4C rr rr             jmp a01192
001532r 3  20 rr rr     a01089: jsr cangr	; CANGORIGHT
001535r 3  F0 03                beq :+
001537r 3  4C rr rr             jmp a01192
00153Ar 3               :
00153Ar 3  A0 09                ldy #9 		; SPRITERIGHT
00153Cr 3  B1 rr                lda (z80_ix),y
00153Er 3  18                   clc
00153Fr 3  69 02                adc #2
001541r 3  91 rr                sta (z80_ix),y
001543r 3  A9 03                lda #3		; ANIMATE
001545r 3  20 rr rr             jsr animsp
001548r 3  A9 00                lda #0
00154Ar 3  C5 rr                cmp vara
00154Cr 3  F0 03                beq *+5
00154Er 3  4C rr rr             jmp a01192
001551r 3  A9 01                lda #1
001553r 3  A0 07                ldy #7
001555r 3  D1 rr                cmp (z80_ix),y
001557r 3  F0 03                beq *+5
001559r 3  4C rr rr             jmp a01192
00155Cr 3  A9 0F                lda #15		; BEEP
00155Er 3  8D rr rr             sta sndtyp
001561r 3  A5 rr        a01192: lda joyval	; KEY
001563r 3  29 08                and #8
001565r 3  F0 03                beq :+
001567r 3  4C rr rr             jmp a01406
00156Ar 3               :
00156Ar 3  AD rr rr             lda wntopx
00156Dr 3  A0 08                ldy #8
00156Fr 3  D1 rr                cmp (z80_ix),y
001571r 3  B0 03                bcs *+5
001573r 3  4C rr rr             jmp a01255
001576r 3  20 rr rr             jsr scru	; SCREENUP
001579r 3  AD rr rr             lda wnbotx
00157Cr 3  A0 08                ldy #8
00157Er 3  91 rr                sta (z80_ix),y
001580r 3  20 rr rr     a01255: jsr laddu	; CANGOUP
001583r 3  F0 03                beq :+
001585r 3  4C rr rr             jmp a01406
001588r 3               :
001588r 3  A9 02                lda #2
00158Ar 3  A0 06                ldy #6
00158Cr 3  91 rr                sta (z80_ix),y
00158Er 3  A9 01                lda #1
001590r 3  A0 07                ldy #7
001592r 3  D1 rr                cmp (z80_ix),y
001594r 3  90 03                bcc *+5
001596r 3  4C rr rr             jmp a01320
001599r 3  A9 00                lda #0
00159Br 3  A0 07                ldy #7
00159Dr 3  91 rr                sta (z80_ix),y
00159Fr 3  A0 08        a01320: ldy #8 		; SPRITEUP
0015A1r 3  B1 rr                lda (z80_ix),y
0015A3r 3  38                   sec
0015A4r 3  E9 02                sbc #2
0015A6r 3  91 rr                sta (z80_ix),y
0015A8r 3  A9 03                lda #3		; ANIMATE
0015AAr 3  20 rr rr             jsr animsp
0015ADr 3  A9 00                lda #0
0015AFr 3  C5 rr                cmp vara
0015B1r 3  F0 03                beq *+5
0015B3r 3  4C rr rr             jmp a01406
0015B6r 3  A9 01                lda #1
0015B8r 3  A0 07                ldy #7
0015BAr 3  D1 rr                cmp (z80_ix),y
0015BCr 3  F0 03                beq *+5
0015BEr 3  4C rr rr             jmp a01406
0015C1r 3  A9 0F                lda #15		; BEEP
0015C3r 3  8D rr rr             sta sndtyp
0015C6r 3  A5 rr        a01406: lda joyval	; KEY
0015C8r 3  29 04                and #4
0015CAr 3  F0 03                beq :+
0015CCr 3  4C rr rr             jmp a01626
0015CFr 3               :
0015CFr 3  AD rr rr             lda wnbotx
0015D2r 3  A0 08                ldy #8
0015D4r 3  D1 rr                cmp (z80_ix),y
0015D6r 3  F0 05                beq *+7
0015D8r 3  90 03                bcc *+5
0015DAr 3  4C rr rr             jmp a01474
0015DDr 3  20 rr rr             jsr scrd	; SCREENDOWN
0015E0r 3  AD rr rr             lda wntopx
0015E3r 3  A0 08                ldy #8
0015E5r 3  91 rr                sta (z80_ix),y
0015E7r 3  20 rr rr     a01474: jsr laddd	; LADDERBELOW
0015EAr 3  F0 03                beq :+
0015ECr 3  4C rr rr             jmp a01626
0015EFr 3               :
0015EFr 3  A9 03                lda #3
0015F1r 3  A0 06                ldy #6
0015F3r 3  91 rr                sta (z80_ix),y
0015F5r 3  A9 01                lda #1
0015F7r 3  A0 07                ldy #7
0015F9r 3  D1 rr                cmp (z80_ix),y
0015FBr 3  90 03                bcc *+5
0015FDr 3  4C rr rr             jmp a01539
001600r 3  A9 00                lda #0
001602r 3  A0 07                ldy #7
001604r 3  91 rr                sta (z80_ix),y
001606r 3  A0 08        a01539: ldy #8 		; SPRITEDOWN
001608r 3  B1 rr                lda (z80_ix),y
00160Ar 3  18                   clc
00160Br 3  69 02                adc #2
00160Dr 3  91 rr                sta (z80_ix),y
00160Fr 3  A9 03                lda #3		; ANIMATE
001611r 3  20 rr rr             jsr animsp
001614r 3  A9 00                lda #0
001616r 3  C5 rr                cmp vara
001618r 3  F0 03                beq *+5
00161Ar 3  4C rr rr             jmp a01626
00161Dr 3  A9 01                lda #1
00161Fr 3  A0 07                ldy #7
001621r 3  D1 rr                cmp (z80_ix),y
001623r 3  F0 03                beq *+5
001625r 3  4C rr rr             jmp a01626
001628r 3  A9 0F                lda #15		; BEEP
00162Ar 3  8D rr rr             sta sndtyp
00162Dr 3  60           a01626: rts
00162Er 3               evnt01:
00162Er 3  A9 01                lda #1
001630r 3  29 07                and #7
001632r 3  85 rr                sta z80_c
001634r 3  20 rr rr             jsr cspr
001637r 3                       ; SPRITEINK command
001637r 3  A9 00                lda #0
001639r 3  A0 0A                ldy #10
00163Br 3  D1 rr                cmp (z80_ix),y
00163Dr 3  F0 03                beq *+5
00163Fr 3  4C rr rr             jmp b00176
001642r 3  20 rr rr             jsr laddu	; CANGOUP
001645r 3  F0 03                beq :+
001647r 3  4C rr rr             jmp b00093
00164Ar 3               :
00164Ar 3  A0 08                ldy #8 		; SPRITEUP
00164Cr 3  B1 rr                lda (z80_ix),y
00164Er 3  38                   sec
00164Fr 3  E9 02                sbc #2
001651r 3  91 rr                sta (z80_ix),y
001653r 3  4C rr rr             jmp b00176
001656r 3  A9 02        b00093: lda #2
001658r 3  85 rr                sta z80_d	; GETRANDOM
00165Ar 3  20 rr rr             jsr random
00165Dr 3  85 rr                sta z80_h
00165Fr 3  20 rr rr             jsr imul
001662r 3  A5 rr                lda z80_h
001664r 3  85 rr                sta varrnd
001666r 3  A9 00                lda #0
001668r 3  C5 rr                cmp varrnd
00166Ar 3  F0 03                beq *+5
00166Cr 3  4C rr rr             jmp b00163
00166Fr 3  A9 02                lda #2
001671r 3  A0 0A                ldy #10
001673r 3  91 rr                sta (z80_ix),y
001675r 3  4C rr rr             jmp b00176
001678r 3  A9 03        b00163: lda #3
00167Ar 3  A0 0A                ldy #10
00167Cr 3  91 rr                sta (z80_ix),y
00167Er 3  A9 01        b00176: lda #1
001680r 3  A0 0A                ldy #10
001682r 3  D1 rr                cmp (z80_ix),y
001684r 3  F0 03                beq *+5
001686r 3  4C rr rr             jmp b00329
001689r 3  20 rr rr             jsr laddd	; LADDERBELOW
00168Cr 3  F0 03                beq :+
00168Er 3  4C rr rr             jmp b00246
001691r 3               :
001691r 3  A0 08                ldy #8 		; SPRITEDOWN
001693r 3  B1 rr                lda (z80_ix),y
001695r 3  18                   clc
001696r 3  69 02                adc #2
001698r 3  91 rr                sta (z80_ix),y
00169Ar 3  4C rr rr             jmp b00329
00169Dr 3  A9 02        b00246: lda #2
00169Fr 3  85 rr                sta z80_d	; GETRANDOM
0016A1r 3  20 rr rr             jsr random
0016A4r 3  85 rr                sta z80_h
0016A6r 3  20 rr rr             jsr imul
0016A9r 3  A5 rr                lda z80_h
0016ABr 3  85 rr                sta varrnd
0016ADr 3  A9 00                lda #0
0016AFr 3  C5 rr                cmp varrnd
0016B1r 3  F0 03                beq *+5
0016B3r 3  4C rr rr             jmp b00315
0016B6r 3  A9 02                lda #2
0016B8r 3  A0 0A                ldy #10
0016BAr 3  91 rr                sta (z80_ix),y
0016BCr 3  4C rr rr             jmp b00329
0016BFr 3  A9 03        b00315: lda #3
0016C1r 3  A0 0A                ldy #10
0016C3r 3  91 rr                sta (z80_ix),y
0016C5r 3  A9 02        b00329: lda #2
0016C7r 3  A0 0A                ldy #10
0016C9r 3  D1 rr                cmp (z80_ix),y
0016CBr 3  F0 03                beq *+5
0016CDr 3  4C rr rr             jmp b00569
0016D0r 3  20 rr rr             jsr cangl	; CANGOLEFT
0016D3r 3  F0 03                beq :+
0016D5r 3  4C rr rr             jmp b00439
0016D8r 3               :
0016D8r 3  AD rr rr             lda wnlftx
0016DBr 3  A0 09                ldy #9
0016DDr 3  D1 rr                cmp (z80_ix),y
0016DFr 3  90 03                bcc *+5
0016E1r 3  4C rr rr             jmp b00421
0016E4r 3  A0 09                ldy #9 		; SPRITELEFT
0016E6r 3  B1 rr                lda (z80_ix),y
0016E8r 3  38                   sec
0016E9r 3  E9 02                sbc #2
0016EBr 3  91 rr                sta (z80_ix),y
0016EDr 3  4C rr rr             jmp b00435
0016F0r 3  A9 03        b00421: lda #3
0016F2r 3  A0 0A                ldy #10
0016F4r 3  91 rr                sta (z80_ix),y
0016F6r 3  4C rr rr     b00435: jmp b00453
0016F9r 3  A9 03        b00439: lda #3
0016FBr 3  A0 0A                ldy #10
0016FDr 3  91 rr                sta (z80_ix),y
0016FFr 3  A9 04        b00453: lda #4
001701r 3  85 rr                sta z80_d	; GETRANDOM
001703r 3  20 rr rr             jsr random
001706r 3  85 rr                sta z80_h
001708r 3  20 rr rr             jsr imul
00170Br 3  A5 rr                lda z80_h
00170Dr 3  85 rr                sta varrnd
00170Fr 3  A9 00                lda #0
001711r 3  C5 rr                cmp varrnd
001713r 3  F0 03                beq *+5
001715r 3  4C rr rr             jmp b00569
001718r 3  20 rr rr             jsr laddu	; CANGOUP
00171Br 3  F0 03                beq :+
00171Dr 3  4C rr rr             jmp b00538
001720r 3               :
001720r 3  A9 00                lda #0
001722r 3  A0 0A                ldy #10
001724r 3  91 rr                sta (z80_ix),y
001726r 3  4C rr rr             jmp b00569
001729r 3  20 rr rr     b00538: jsr laddd	; LADDERBELOW
00172Cr 3  F0 03                beq :+
00172Er 3  4C rr rr             jmp b00569
001731r 3               :
001731r 3  A9 01                lda #1
001733r 3  A0 0A                ldy #10
001735r 3  91 rr                sta (z80_ix),y
001737r 3  A9 03        b00569: lda #3
001739r 3  A0 0A                ldy #10
00173Br 3  D1 rr                cmp (z80_ix),y
00173Dr 3  F0 03                beq *+5
00173Fr 3  4C rr rr             jmp b00768
001742r 3  20 rr rr             jsr cangr	; CANGORIGHT
001745r 3  F0 03                beq :+
001747r 3  4C rr rr             jmp b00639
00174Ar 3               :
00174Ar 3  A0 09                ldy #9 		; SPRITERIGHT
00174Cr 3  B1 rr                lda (z80_ix),y
00174Er 3  18                   clc
00174Fr 3  69 02                adc #2
001751r 3  91 rr                sta (z80_ix),y
001753r 3  4C rr rr             jmp b00652
001756r 3  A9 02        b00639: lda #2
001758r 3  A0 0A                ldy #10
00175Ar 3  91 rr                sta (z80_ix),y
00175Cr 3  A9 04        b00652: lda #4
00175Er 3  85 rr                sta z80_d	; GETRANDOM
001760r 3  20 rr rr             jsr random
001763r 3  85 rr                sta z80_h
001765r 3  20 rr rr             jsr imul
001768r 3  A5 rr                lda z80_h
00176Ar 3  85 rr                sta varrnd
00176Cr 3  A9 00                lda #0
00176Er 3  C5 rr                cmp varrnd
001770r 3  F0 03                beq *+5
001772r 3  4C rr rr             jmp b00768
001775r 3  20 rr rr             jsr laddu	; CANGOUP
001778r 3  F0 03                beq :+
00177Ar 3  4C rr rr             jmp b00738
00177Dr 3               :
00177Dr 3  A9 00                lda #0
00177Fr 3  A0 0A                ldy #10
001781r 3  91 rr                sta (z80_ix),y
001783r 3  4C rr rr             jmp b00768
001786r 3  20 rr rr     b00738: jsr laddd	; LADDERBELOW
001789r 3  F0 03                beq :+
00178Br 3  4C rr rr             jmp b00768
00178Er 3               :
00178Er 3  A9 01                lda #1
001790r 3  A0 0A                ldy #10
001792r 3  91 rr                sta (z80_ix),y
001794r 3  A9 01        b00768: lda #1
001796r 3  A0 07                ldy #7
001798r 3  D1 rr                cmp (z80_ix),y
00179Ar 3  90 03                bcc *+5
00179Cr 3  4C rr rr             jmp b00803
00179Fr 3  A9 00                lda #0
0017A1r 3  A0 07                ldy #7
0017A3r 3  91 rr                sta (z80_ix),y
0017A5r 3  A9 03        b00803: lda #3		; ANIMATE
0017A7r 3  20 rr rr             jsr animsp
0017AAr 3  A9 00                lda #0 	; COLLISION
0017ACr 3  85 rr                sta z80_b
0017AEr 3  20 rr rr             jsr sktyp
0017B1r 3  B0 03                bcs :+
0017B3r 3  4C rr rr             jmp b00998
0017B6r 3               :
0017B6r 3  A9 00                lda #0
0017B8r 3  C5 rr                cmp numlif
0017BAr 3  F0 03                beq *+5
0017BCr 3  4C rr rr             jmp b00872
0017BFr 3  A9 01                lda #1 		; KILL
0017C1r 3  85 rr                sta deadf
0017C3r 3  4C rr rr             jmp b00998
0017C6r 3  A5 rr        b00872: lda numlif
0017C8r 3  38                   sec
0017C9r 3  E9 01                sbc #1
0017CBr 3  85 rr                sta numlif
0017CDr 3  A9 02                lda #2		; BEEP
0017CFr 3  8D rr rr             sta sndtyp
0017D2r 3  A5 rr                lda numlif
0017D4r 3  C9 0A                cmp #10
0017D6r 3  90 03                bcc *+5
0017D8r 3  4C rr rr             jmp b00944
0017DBr 3  A9 00                lda #0
0017DDr 3  85 rr                sta chary
0017DFr 3  A9 0A                lda #10
0017E1r 3  85 rr                sta charx
0017E3r 3  A9 04                lda #4  	; MESSAGE
0017E5r 3  20 rr rr             jsr dmsg
0017E8r 3  A9 00        b00944: lda #0
0017EAr 3  85 rr                sta chary
0017ECr 3  A9 07                lda #7
0017EEr 3  85 rr                sta charx
0017F0r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
0017F2r 3  85 rr                sta z80_c
0017F4r 3  A9 rr                lda #>displ0
0017F6r 3  85 rr                sta z80_b
0017F8r 3  A5 rr                lda numlif
0017FAr 3  20 rr rr             jsr num2dd
0017FDr 3  20 rr rr             jsr displ1
001800r 3  A9 11        b00998: lda #17
001802r 3  A0 06                ldy #6
001804r 3  D1 rr                cmp (z80_ix),y
001806r 3  90 03                bcc *+5
001808r 3  4C rr rr             jmp b01049
00180Br 3  A9 04                lda #4
00180Dr 3  29 07                and #7
00180Fr 3  85 rr                sta z80_c
001811r 3  20 rr rr             jsr cspr
001814r 3                       ; SPRITEINK command
001814r 3  4C rr rr             jmp b01172
001817r 3  A0 06        b01049: ldy #6
001819r 3  B1 rr                lda (z80_ix),y
00181Br 3  C9 0A                cmp #10
00181Dr 3  90 03                bcc *+5
00181Fr 3  4C rr rr             jmp b01099
001822r 3  A9 06                lda #6
001824r 3  29 07                and #7
001826r 3  85 rr                sta z80_c
001828r 3  20 rr rr             jsr cspr
00182Br 3                       ; SPRITEINK command
00182Br 3  4C rr rr             jmp b01172
00182Er 3  A9 10        b01099: lda #16
001830r 3  A0 06                ldy #6
001832r 3  D1 rr                cmp (z80_ix),y
001834r 3  F0 03                beq *+5
001836r 3  4C rr rr             jmp b01149
001839r 3  A9 03                lda #3
00183Br 3  29 07                and #7
00183Dr 3  85 rr                sta z80_c
00183Fr 3  20 rr rr             jsr cspr
001842r 3                       ; SPRITEINK command
001842r 3  4C rr rr             jmp b01172
001845r 3  A9 05        b01149: lda #5
001847r 3  29 07                and #7
001849r 3  85 rr                sta z80_c
00184Br 3  20 rr rr             jsr cspr
00184Er 3                       ; SPRITEINK command
00184Er 3  60           b01172: rts
00184Fr 3               evnt02:
00184Fr 3  A9 01                lda #1
001851r 3  29 07                and #7
001853r 3  85 rr                sta z80_c
001855r 3  20 rr rr             jsr cspr
001858r 3                       ; SPRITEINK command
001858r 3  A9 0A                lda #10
00185Ar 3  A0 06                ldy #6
00185Cr 3  D1 rr                cmp (z80_ix),y
00185Er 3  F0 03                beq *+5
001860r 3  4C rr rr             jmp c00064
001863r 3  A9 0A                lda #10
001865r 3  85 rr                sta varc
001867r 3  A9 0B                lda #11
001869r 3  85 rr                sta vard
00186Br 3  A9 0B        c00064: lda #11
00186Dr 3  A0 06                ldy #6
00186Fr 3  D1 rr                cmp (z80_ix),y
001871r 3  F0 03                beq *+5
001873r 3  4C rr rr             jmp c00102
001876r 3  A9 0A                lda #10
001878r 3  85 rr                sta varc
00187Ar 3  A9 0B                lda #11
00187Cr 3  85 rr                sta vard
00187Er 3  A9 0C        c00102: lda #12
001880r 3  A0 06                ldy #6
001882r 3  D1 rr                cmp (z80_ix),y
001884r 3  F0 03                beq *+5
001886r 3  4C rr rr             jmp c00141
001889r 3  A9 0C                lda #12
00188Br 3  85 rr                sta varc
00188Dr 3  A9 0D                lda #13
00188Fr 3  85 rr                sta vard
001891r 3  A9 0D        c00141: lda #13
001893r 3  A0 06                ldy #6
001895r 3  D1 rr                cmp (z80_ix),y
001897r 3  F0 03                beq *+5
001899r 3  4C rr rr             jmp c00180
00189Cr 3  A9 0C                lda #12
00189Er 3  85 rr                sta varc
0018A0r 3  A9 0D                lda #13
0018A2r 3  85 rr                sta vard
0018A4r 3  A9 0E        c00180: lda #14
0018A6r 3  A0 06                ldy #6
0018A8r 3  D1 rr                cmp (z80_ix),y
0018AAr 3  F0 03                beq *+5
0018ACr 3  4C rr rr             jmp c00219
0018AFr 3  A9 0E                lda #14
0018B1r 3  85 rr                sta varc
0018B3r 3  A9 0F                lda #15
0018B5r 3  85 rr                sta vard
0018B7r 3  A9 0F        c00219: lda #15
0018B9r 3  A0 06                ldy #6
0018BBr 3  D1 rr                cmp (z80_ix),y
0018BDr 3  F0 03                beq *+5
0018BFr 3  4C rr rr             jmp c00257
0018C2r 3  A9 0E                lda #14
0018C4r 3  85 rr                sta varc
0018C6r 3  A9 0F                lda #15
0018C8r 3  85 rr                sta vard
0018CAr 3  A9 03        c00257: lda #3		; ANIMATE
0018CCr 3  20 rr rr             jsr animsp
0018CFr 3  A9 00                lda #0
0018D1r 3  A0 0B                ldy #11
0018D3r 3  D1 rr                cmp (z80_ix),y
0018D5r 3  F0 03                beq *+5
0018D7r 3  4C rr rr             jmp c00370
0018DAr 3  20 rr rr             jsr cangl	; CANGOLEFT
0018DDr 3  F0 03                beq :+
0018DFr 3  4C rr rr             jmp c00352
0018E2r 3               :
0018E2r 3  A5 rr                lda varc
0018E4r 3  A0 06                ldy #6
0018E6r 3  91 rr                sta (z80_ix),y
0018E8r 3  A0 09                ldy #9 		; SPRITELEFT
0018EAr 3  B1 rr                lda (z80_ix),y
0018ECr 3  38                   sec
0018EDr 3  E9 02                sbc #2
0018EFr 3  91 rr                sta (z80_ix),y
0018F1r 3  4C rr rr             jmp c00365
0018F4r 3  A9 01        c00352: lda #1
0018F6r 3  A0 0B                ldy #11
0018F8r 3  91 rr                sta (z80_ix),y
0018FAr 3  4C rr rr     c00365: jmp c00445
0018FDr 3  20 rr rr     c00370: jsr cangr	; CANGORIGHT
001900r 3  F0 03                beq :+
001902r 3  4C rr rr             jmp c00431
001905r 3               :
001905r 3  A5 rr                lda vard
001907r 3  A0 06                ldy #6
001909r 3  91 rr                sta (z80_ix),y
00190Br 3  A0 09                ldy #9 		; SPRITERIGHT
00190Dr 3  B1 rr                lda (z80_ix),y
00190Fr 3  18                   clc
001910r 3  69 02                adc #2
001912r 3  91 rr                sta (z80_ix),y
001914r 3  4C rr rr             jmp c00445
001917r 3  A9 00        c00431: lda #0
001919r 3  A0 0B                ldy #11
00191Br 3  91 rr                sta (z80_ix),y
00191Dr 3  A9 00        c00445: lda #0 	; COLLISION
00191Fr 3  85 rr                sta z80_b
001921r 3  20 rr rr             jsr sktyp
001924r 3  B0 03                bcs :+
001926r 3  4C rr rr             jmp c00628
001929r 3               :
001929r 3  A9 00                lda #0
00192Br 3  C5 rr                cmp numlif
00192Dr 3  F0 03                beq *+5
00192Fr 3  4C rr rr             jmp c00502
001932r 3  A9 01                lda #1 		; KILL
001934r 3  85 rr                sta deadf
001936r 3  4C rr rr             jmp c00628
001939r 3  A5 rr        c00502: lda numlif
00193Br 3  38                   sec
00193Cr 3  E9 01                sbc #1
00193Er 3  85 rr                sta numlif
001940r 3  A9 02                lda #2		; BEEP
001942r 3  8D rr rr             sta sndtyp
001945r 3  A5 rr                lda numlif
001947r 3  C9 0A                cmp #10
001949r 3  90 03                bcc *+5
00194Br 3  4C rr rr             jmp c00574
00194Er 3  A9 00                lda #0
001950r 3  85 rr                sta chary
001952r 3  A9 08                lda #8
001954r 3  85 rr                sta charx
001956r 3  A9 04                lda #4  	; MESSAGE
001958r 3  20 rr rr             jsr dmsg
00195Br 3  A9 00        c00574: lda #0
00195Dr 3  85 rr                sta chary
00195Fr 3  A9 07                lda #7
001961r 3  85 rr                sta charx
001963r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001965r 3  85 rr                sta z80_c
001967r 3  A9 rr                lda #>displ0
001969r 3  85 rr                sta z80_b
00196Br 3  A5 rr                lda numlif
00196Dr 3  20 rr rr             jsr num2dd
001970r 3  20 rr rr             jsr displ1
001973r 3  A9 0D        c00628: lda #13
001975r 3  A0 06                ldy #6
001977r 3  D1 rr                cmp (z80_ix),y
001979r 3  90 03                bcc *+5
00197Br 3  4C rr rr             jmp c00678
00197Er 3  A9 04                lda #4
001980r 3  29 07                and #7
001982r 3  85 rr                sta z80_c
001984r 3  20 rr rr             jsr cspr
001987r 3                       ; SPRITEINK command
001987r 3  4C rr rr             jmp c00752
00198Ar 3  A0 06        c00678: ldy #6
00198Cr 3  B1 rr                lda (z80_ix),y
00198Er 3  C9 0C                cmp #12
001990r 3  90 03                bcc *+5
001992r 3  4C rr rr             jmp c00729
001995r 3  A9 02                lda #2
001997r 3  29 07                and #7
001999r 3  85 rr                sta z80_c
00199Br 3  20 rr rr             jsr cspr
00199Er 3                       ; SPRITEINK command
00199Er 3  4C rr rr             jmp c00752
0019A1r 3  A9 05        c00729: lda #5
0019A3r 3  29 07                and #7
0019A5r 3  85 rr                sta z80_c
0019A7r 3  20 rr rr             jsr cspr
0019AAr 3                       ; SPRITEINK command
0019AAr 3  60           c00752: rts
0019ABr 3               evnt03:
0019ABr 3  A9 01                lda #1
0019ADr 3  29 07                and #7
0019AFr 3  85 rr                sta z80_c
0019B1r 3  20 rr rr             jsr cspr
0019B4r 3                       ; SPRITEINK command
0019B4r 3  A9 03                lda #3		; ANIMATE
0019B6r 3  20 rr rr             jsr animsp
0019B9r 3  A9 00                lda #0 	; COLLISION
0019BBr 3  85 rr                sta z80_b
0019BDr 3  20 rr rr             jsr sktyp
0019C0r 3  B0 03                bcs :+
0019C2r 3  4C rr rr             jmp d00513
0019C5r 3               :
0019C5r 3  A9 04                lda #4
0019C7r 3  C5 rr                cmp scno
0019C9r 3  F0 03                beq *+5
0019CBr 3  4C rr rr             jmp d00205
0019CEr 3  A9 01                lda #1		; GOT
0019D0r 3  20 rr rr             jsr gotob
0019D3r 3  C9 FF                cmp #255
0019D5r 3  F0 03                beq :+
0019D7r 3  4C rr rr             jmp d00205
0019DAr 3               :
0019DAr 3  A9 FF                lda #255	; REMOVE
0019DCr 3  A0 05                ldy #5
0019DEr 3  91 rr                sta (z80_ix),y
0019E0r 3  A9 00                lda #0
0019E2r 3  85 rr                sta varp
0019E4r 3  A9 0A                lda #10		; BEEP
0019E6r 3  8D rr rr             sta sndtyp
0019E9r 3  A9 08                lda #8
0019EBr 3  85 rr                sta chary
0019EDr 3  A9 0B                lda #11
0019EFr 3  85 rr                sta charx
0019F1r 3  A9 00                lda #0 		; PUTBLOCK
0019F3r 3  20 rr rr             jsr pbpattr
0019F6r 3  A9 07                lda #7
0019F8r 3  85 rr                sta chary
0019FAr 3  A9 0A                lda #10
0019FCr 3  85 rr                sta charx
0019FEr 3  A9 00                lda #0 		; PUTBLOCK
001A00r 3  20 rr rr             jsr pbpattr
001A03r 3  A9 00                lda #0 		; PUTBLOCK
001A05r 3  20 rr rr             jsr pbpattr
001A08r 3  A9 12        d00205: lda #18
001A0Ar 3  C5 rr                cmp scno
001A0Cr 3  F0 03                beq *+5
001A0Er 3  4C rr rr             jmp d00350
001A11r 3  A9 00                lda #0		; GOT
001A13r 3  20 rr rr             jsr gotob
001A16r 3  C9 FF                cmp #255
001A18r 3  F0 03                beq :+
001A1Ar 3  4C rr rr             jmp d00350
001A1Dr 3               :
001A1Dr 3  A9 FF                lda #255	; REMOVE
001A1Fr 3  A0 05                ldy #5
001A21r 3  91 rr                sta (z80_ix),y
001A23r 3  A9 00                lda #0
001A25r 3  85 rr                sta varq
001A27r 3  A9 0A                lda #10		; BEEP
001A29r 3  8D rr rr             sta sndtyp
001A2Cr 3  A9 12                lda #18
001A2Er 3  85 rr                sta chary
001A30r 3  A9 04                lda #4
001A32r 3  85 rr                sta charx
001A34r 3  A9 00                lda #0 		; PUTBLOCK
001A36r 3  20 rr rr             jsr pbpattr
001A39r 3  A9 00                lda #0 		; PUTBLOCK
001A3Br 3  20 rr rr             jsr pbpattr
001A3Er 3  A9 11                lda #17
001A40r 3  85 rr                sta chary
001A42r 3  A9 04                lda #4
001A44r 3  85 rr                sta charx
001A46r 3  A9 00                lda #0 		; PUTBLOCK
001A48r 3  20 rr rr             jsr pbpattr
001A4Br 3  A9 00        d00350: lda #0
001A4Dr 3  C5 rr                cmp numlif
001A4Fr 3  F0 03                beq *+5
001A51r 3  4C rr rr             jmp d00382
001A54r 3  A9 01                lda #1 		; KILL
001A56r 3  85 rr                sta deadf
001A58r 3  4C rr rr             jmp d00513
001A5Br 3  A5 rr        d00382: lda numlif
001A5Dr 3  38                   sec
001A5Er 3  E9 01                sbc #1
001A60r 3  85 rr                sta numlif
001A62r 3  A9 02                lda #2		; BEEP
001A64r 3  8D rr rr             sta sndtyp
001A67r 3  A5 rr                lda numlif
001A69r 3  C9 0A                cmp #10
001A6Br 3  90 03                bcc *+5
001A6Dr 3  4C rr rr             jmp d00459
001A70r 3  A9 00                lda #0
001A72r 3  85 rr                sta chary
001A74r 3  A9 08                lda #8
001A76r 3  85 rr                sta charx
001A78r 3  A9 04                lda #4  	; MESSAGE
001A7Ar 3  20 rr rr             jsr dmsg
001A7Dr 3  4C rr rr             jmp d00513
001A80r 3  A9 00        d00459: lda #0
001A82r 3  85 rr                sta chary
001A84r 3  A9 07                lda #7
001A86r 3  85 rr                sta charx
001A88r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001A8Ar 3  85 rr                sta z80_c
001A8Cr 3  A9 rr                lda #>displ0
001A8Er 3  85 rr                sta z80_b
001A90r 3  A5 rr                lda numlif
001A92r 3  20 rr rr             jsr num2dd
001A95r 3  20 rr rr             jsr displ1
001A98r 3  A9 04        d00513: lda #4
001A9Ar 3  29 07                and #7
001A9Cr 3  85 rr                sta z80_c
001A9Er 3  20 rr rr             jsr cspr
001AA1r 3                       ; SPRITEINK command
001AA1r 3  60                   rts
001AA2r 3               evnt04:
001AA2r 3  A9 01                lda #1
001AA4r 3  29 07                and #7
001AA6r 3  85 rr                sta z80_c
001AA8r 3  20 rr rr             jsr cspr
001AABr 3                       ; SPRITEINK command
001AABr 3  A9 03                lda #3		; ANIMATE
001AADr 3  20 rr rr             jsr animsp
001AB0r 3  A9 05                lda #5
001AB2r 3  A0 06                ldy #6
001AB4r 3  D1 rr                cmp (z80_ix),y
001AB6r 3  F0 03                beq *+5
001AB8r 3  4C rr rr             jmp e00122
001ABBr 3  A9 00                lda #0
001ABDr 3  C5 rr                cmp varp
001ABFr 3  F0 03                beq *+5
001AC1r 3  4C rr rr             jmp e00122
001AC4r 3  A9 FF                lda #255	; REMOVE
001AC6r 3  A0 05                ldy #5
001AC8r 3  91 rr                sta (z80_ix),y
001ACAr 3  A9 04                lda #4	; SPAWN
001ACCr 3  85 rr                sta z80_c
001ACEr 3  A9 06                lda #6
001AD0r 3  85 rr                sta z80_b
001AD2r 3  20 rr rr             jsr spawn
001AD5r 3  A9 01                lda #1
001AD7r 3  85 rr                sta varg
001AD9r 3  A9 07        e00122: lda #7
001ADBr 3  A0 06                ldy #6
001ADDr 3  D1 rr                cmp (z80_ix),y
001ADFr 3  F0 03                beq *+5
001AE1r 3  4C rr rr             jmp e00208
001AE4r 3  A9 00                lda #0
001AE6r 3  C5 rr                cmp varq
001AE8r 3  F0 03                beq *+5
001AEAr 3  4C rr rr             jmp e00208
001AEDr 3  A9 FF                lda #255	; REMOVE
001AEFr 3  A0 05                ldy #5
001AF1r 3  91 rr                sta (z80_ix),y
001AF3r 3  A9 04                lda #4	; SPAWN
001AF5r 3  85 rr                sta z80_c
001AF7r 3  A9 08                lda #8
001AF9r 3  85 rr                sta z80_b
001AFBr 3  20 rr rr             jsr spawn
001AFEr 3  A9 01                lda #1
001B00r 3  85 rr                sta varj
001B02r 3  A9 07        e00208: lda #7
001B04r 3  29 07                and #7
001B06r 3  85 rr                sta z80_c
001B08r 3  20 rr rr             jsr cspr
001B0Br 3                       ; SPRITEINK command
001B0Br 3  60                   rts
001B0Cr 3               evnt05:
001B0Cr 3  60                   rts
001B0Dr 3               evnt06:
001B0Dr 3  60                   rts
001B0Er 3               evnt07:
001B0Er 3  60                   rts
001B0Fr 3               evnt08:
001B0Fr 3  60                   rts
001B10r 3               evnt09:
001B10r 3  A9 02                lda #2
001B12r 3  A0 05                ldy #5
001B14r 3  D1 rr                cmp (z80_ix),y
001B16r 3  F0 03                beq *+5
001B18r 3  4C rr rr             jmp j00037
001B1Br 3  A9 00                lda #0
001B1Dr 3  A0 0B                ldy #11
001B1Fr 3  91 rr                sta (z80_ix),y
001B21r 3  60           j00037: rts
001B22r 3               evnt10:
001B22r 3  A9 FF                lda #255
001B24r 3  C5 rr                cmp varopt
001B26r 3  F0 03                beq *+5
001B28r 3  4C rr rr             jmp k00097
001B2Br 3  A9 00                lda #0
001B2Dr 3  C5 rr                cmp scno
001B2Fr 3  F0 03                beq *+5
001B31r 3  4C rr rr             jmp k00088
001B34r 3  A9 02                lda #2		; GOT
001B36r 3  20 rr rr             jsr gotob
001B39r 3  C9 FF                cmp #255
001B3Br 3  F0 03                beq :+
001B3Dr 3  4C rr rr             jmp k00088
001B40r 3               :
001B40r 3  A9 0E                lda #14
001B42r 3  85 rr                sta chary
001B44r 3  A9 11                lda #17
001B46r 3  85 rr                sta charx
001B48r 3  A9 00                lda #0 		; PUTBLOCK
001B4Ar 3  20 rr rr             jsr pbpattr
001B4Dr 3  A9 00        k00088: lda #0
001B4Fr 3  85 rr                sta varopt
001B51r 3  A9 FF        k00097: lda #255
001B53r 3  C5 rr                cmp varb
001B55r 3  F0 03                beq *+5
001B57r 3  4C rr rr             jmp k00191
001B5Ar 3  A9 08                lda #8
001B5Cr 3  C5 rr                cmp scno
001B5Er 3  F0 03                beq *+5
001B60r 3  4C rr rr             jmp k00183
001B63r 3  A9 03                lda #3		; GOT
001B65r 3  20 rr rr             jsr gotob
001B68r 3  C9 FF                cmp #255
001B6Ar 3  F0 03                beq :+
001B6Cr 3  4C rr rr             jmp k00183
001B6Fr 3               :
001B6Fr 3  A9 06                lda #6
001B71r 3  85 rr                sta chary
001B73r 3  A9 11                lda #17
001B75r 3  85 rr                sta charx
001B77r 3  A9 00                lda #0 		; PUTBLOCK
001B79r 3  20 rr rr             jsr pbpattr
001B7Cr 3  A9 00        k00183: lda #0
001B7Er 3  85 rr                sta varb
001B80r 3  A9 FF        k00191: lda #255
001B82r 3  C5 rr                cmp vare
001B84r 3  F0 03                beq *+5
001B86r 3  4C rr rr             jmp k00285
001B89r 3  A9 0D                lda #13
001B8Br 3  C5 rr                cmp scno
001B8Dr 3  F0 03                beq *+5
001B8Fr 3  4C rr rr             jmp k00277
001B92r 3  A9 04                lda #4		; GOT
001B94r 3  20 rr rr             jsr gotob
001B97r 3  C9 FF                cmp #255
001B99r 3  F0 03                beq :+
001B9Br 3  4C rr rr             jmp k00277
001B9Er 3               :
001B9Er 3  A9 09                lda #9
001BA0r 3  85 rr                sta chary
001BA2r 3  A9 12                lda #18
001BA4r 3  85 rr                sta charx
001BA6r 3  A9 00                lda #0 		; PUTBLOCK
001BA8r 3  20 rr rr             jsr pbpattr
001BABr 3  A9 00        k00277: lda #0
001BADr 3  85 rr                sta vare
001BAFr 3  A9 FF        k00285: lda #255
001BB1r 3  C5 rr                cmp varl
001BB3r 3  F0 03                beq *+5
001BB5r 3  4C rr rr             jmp k00379
001BB8r 3  A9 03                lda #3
001BBAr 3  C5 rr                cmp scno
001BBCr 3  F0 03                beq *+5
001BBEr 3  4C rr rr             jmp k00371
001BC1r 3  A9 05                lda #5		; GOT
001BC3r 3  20 rr rr             jsr gotob
001BC6r 3  C9 FF                cmp #255
001BC8r 3  F0 03                beq :+
001BCAr 3  4C rr rr             jmp k00371
001BCDr 3               :
001BCDr 3  A9 10                lda #16
001BCFr 3  85 rr                sta chary
001BD1r 3  A9 03                lda #3
001BD3r 3  85 rr                sta charx
001BD5r 3  A9 00                lda #0 		; PUTBLOCK
001BD7r 3  20 rr rr             jsr pbpattr
001BDAr 3  A9 00        k00371: lda #0
001BDCr 3  85 rr                sta varl
001BDEr 3  A9 FF        k00379: lda #255
001BE0r 3  C5 rr                cmp varf
001BE2r 3  F0 03                beq *+5
001BE4r 3  4C rr rr             jmp k00473
001BE7r 3  A9 14                lda #20
001BE9r 3  C5 rr                cmp scno
001BEBr 3  F0 03                beq *+5
001BEDr 3  4C rr rr             jmp k00465
001BF0r 3  A9 06                lda #6		; GOT
001BF2r 3  20 rr rr             jsr gotob
001BF5r 3  C9 FF                cmp #255
001BF7r 3  F0 03                beq :+
001BF9r 3  4C rr rr             jmp k00465
001BFCr 3               :
001BFCr 3  A9 10                lda #16
001BFEr 3  85 rr                sta chary
001C00r 3  A9 03                lda #3
001C02r 3  85 rr                sta charx
001C04r 3  A9 00                lda #0 		; PUTBLOCK
001C06r 3  20 rr rr             jsr pbpattr
001C09r 3  A9 00        k00465: lda #0
001C0Br 3  85 rr                sta varf
001C0Dr 3  A9 00        k00473: lda #0
001C0Fr 3  C5 rr                cmp varp
001C11r 3  F0 03                beq *+5
001C13r 3  4C rr rr             jmp k00561
001C16r 3  A9 13                lda #19
001C18r 3  C5 rr                cmp scno
001C1Ar 3  F0 03                beq *+5
001C1Cr 3  4C rr rr             jmp k00561
001C1Fr 3  A9 12                lda #18
001C21r 3  85 rr                sta chary
001C23r 3  A9 00                lda #0
001C25r 3  85 rr                sta charx
001C27r 3  A9 11                lda #17 		; PUTBLOCK
001C29r 3  20 rr rr             jsr pbpattr
001C2Cr 3  A9 01                lda #1
001C2Er 3  C5 rr                cmp vars
001C30r 3  F0 03                beq *+5
001C32r 3  4C rr rr             jmp k00561
001C35r 3  A9 00                lda #0
001C37r 3  85 rr                sta vars
001C39r 3  A9 FF        k00561: lda #255
001C3Br 3  C5 rr                cmp vari
001C3Dr 3  F0 03                beq *+5
001C3Fr 3  4C rr rr             jmp k00632
001C42r 3  A9 13                lda #19
001C44r 3  C5 rr                cmp scno
001C46r 3  F0 03                beq *+5
001C48r 3  4C rr rr             jmp k00624
001C4Br 3  A9 08                lda #8
001C4Dr 3  85 rr                sta chary
001C4Fr 3  A9 12                lda #18
001C51r 3  85 rr                sta charx
001C53r 3  A9 00                lda #0 		; PUTBLOCK
001C55r 3  20 rr rr             jsr pbpattr
001C58r 3  A9 00        k00624: lda #0
001C5Ar 3  85 rr                sta vari
001C5Cr 3  A9 FF        k00632: lda #255
001C5Er 3  C5 rr                cmp vard
001C60r 3  F0 03                beq *+5
001C62r 3  4C rr rr             jmp k00726
001C65r 3  A9 16                lda #22
001C67r 3  C5 rr                cmp scno
001C69r 3  F0 03                beq *+5
001C6Br 3  4C rr rr             jmp k00718
001C6Er 3  A9 01                lda #1		; GOT
001C70r 3  20 rr rr             jsr gotob
001C73r 3  C9 FF                cmp #255
001C75r 3  F0 03                beq :+
001C77r 3  4C rr rr             jmp k00718
001C7Ar 3               :
001C7Ar 3  A9 06                lda #6
001C7Cr 3  85 rr                sta chary
001C7Er 3  A9 04                lda #4
001C80r 3  85 rr                sta charx
001C82r 3  A9 00                lda #0 		; PUTBLOCK
001C84r 3  20 rr rr             jsr pbpattr
001C87r 3  A9 00        k00718: lda #0
001C89r 3  85 rr                sta vard
001C8Br 3  A9 00        k00726: lda #0
001C8Dr 3  C5 rr                cmp varq
001C8Fr 3  F0 03                beq *+5
001C91r 3  4C rr rr             jmp k00813
001C94r 3  A9 0E                lda #14
001C96r 3  C5 rr                cmp scno
001C98r 3  F0 03                beq *+5
001C9Ar 3  4C rr rr             jmp k00813
001C9Dr 3  A9 04                lda #4
001C9Fr 3  85 rr                sta chary
001CA1r 3  A9 15                lda #21
001CA3r 3  85 rr                sta charx
001CA5r 3  A9 11                lda #17 		; PUTBLOCK
001CA7r 3  20 rr rr             jsr pbpattr
001CAAr 3  A9 01                lda #1
001CACr 3  C5 rr                cmp vart
001CAEr 3  F0 03                beq *+5
001CB0r 3  4C rr rr             jmp k00813
001CB3r 3  A9 00                lda #0
001CB5r 3  85 rr                sta vart
001CB7r 3  A9 FF        k00813: lda #255
001CB9r 3  C5 rr                cmp vark
001CBBr 3  F0 03                beq *+5
001CBDr 3  4C rr rr             jmp k00916
001CC0r 3  A9 17                lda #23
001CC2r 3  C5 rr                cmp scno
001CC4r 3  F0 03                beq *+5
001CC6r 3  4C rr rr             jmp k00908
001CC9r 3  A9 07                lda #7		; GOT
001CCBr 3  20 rr rr             jsr gotob
001CCEr 3  C9 FF                cmp #255
001CD0r 3  F0 03                beq :+
001CD2r 3  4C rr rr             jmp k00908
001CD5r 3               :
001CD5r 3  A9 01                lda #1
001CD7r 3  85 rr                sta varr
001CD9r 3  A9 06                lda #6
001CDBr 3  85 rr                sta chary
001CDDr 3  A9 15                lda #21
001CDFr 3  85 rr                sta charx
001CE1r 3  A9 00                lda #0 		; PUTBLOCK
001CE3r 3  20 rr rr             jsr pbpattr
001CE6r 3  A9 00        k00908: lda #0
001CE8r 3  85 rr                sta vark
001CEAr 3  60           k00916: rts
001CEBr 3               evnt11:
001CEBr 3  A9 03                lda #3
001CEDr 3  C5 rr                cmp vara
001CEFr 3  F0 03                beq *+5
001CF1r 3  4C rr rr             jmp l00031
001CF4r 3  A9 00                lda #0
001CF6r 3  85 rr                sta vara
001CF8r 3  4C rr rr             jmp l00046
001CFBr 3  A5 rr        l00031: lda vara
001CFDr 3  18                   clc
001CFEr 3  69 01                adc #1
001D00r 3  85 rr                sta vara
001D02r 3  60           l00046: rts
001D03r 3               evnt12:
001D03r 3  20 rr rr             jsr cls		; CLS
001D06r 3  60                   rts
001D07r 3               evnt13:
001D07r 3  A9 01                lda #1
001D09r 3                       ; BORDER command
001D09r 3  29 07                and #7
001D0Br 3  85 rr                sta tmp
001D0Dr 3  AD 0F 90             lda RegF
001D10r 3  29 F8                and #%11111000
001D12r 3  05 rr                ora tmp
001D14r 3  8D 0F 90             sta RegF
001D17r 3  20 rr rr             jsr cls		; CLS
001D1Ar 3  A9 02                lda #2 	; INK
001D1Cr 3  8D rr rr             sta fontcol
001D1Fr 3  A9 00                lda #0 	; PAPER
001D21r 3  0A                   asl a
001D22r 3  0A                   asl a
001D23r 3  0A                   asl a
001D24r 3  0A                   asl a
001D25r 3  85 rr                sta tmp
001D27r 3  AD 0F 90             lda RegF
001D2Ar 3  29 0F                and #%00001111
001D2Cr 3  05 rr                ora tmp
001D2Er 3  8D 0F 90             sta RegF
001D31r 3  A9 0B                lda #11
001D33r 3  85 rr                sta chary
001D35r 3  A9 00                lda #0
001D37r 3  85 rr                sta charx
001D39r 3  A9 01                lda #1  	; MESSAGE
001D3Br 3  20 rr rr             jsr dmsg
001D3Er 3  A9 64                lda #100 	; DELAY
001D40r 3  20 rr rr             jsr delay
001D43r 3  A9 02                lda #2 	; INK
001D45r 3  8D rr rr             sta fontcol
001D48r 3  A9 01                lda #1 	; PAPER
001D4Ar 3  0A                   asl a
001D4Br 3  0A                   asl a
001D4Cr 3  0A                   asl a
001D4Dr 3  0A                   asl a
001D4Er 3  85 rr                sta tmp
001D50r 3  AD 0F 90             lda RegF
001D53r 3  29 0F                and #%00001111
001D55r 3  05 rr                ora tmp
001D57r 3  8D 0F 90             sta RegF
001D5Ar 3  20 rr rr             jsr cls		; CLS
001D5Dr 3  A9 00                lda #0
001D5Fr 3  85 rr                sta chary
001D61r 3  A9 00                lda #0
001D63r 3  85 rr                sta charx
001D65r 3  A9 00                lda #0  	; MESSAGE
001D67r 3  20 rr rr             jsr dmsg
001D6Ar 3  A9 63                lda #99
001D6Cr 3  85 rr                sta numlif
001D6Er 3  A9 00                lda #0
001D70r 3  85 rr                sta chary
001D72r 3  A9 07                lda #7
001D74r 3  85 rr                sta charx
001D76r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001D78r 3  85 rr                sta z80_c
001D7Ar 3  A9 rr                lda #>displ0
001D7Cr 3  85 rr                sta z80_b
001D7Er 3  A5 rr                lda numlif
001D80r 3  20 rr rr             jsr num2dd
001D83r 3  20 rr rr             jsr displ1
001D86r 3  A9 00                lda #0
001D88r 3  85 rr                sta chary
001D8Ar 3  A9 09                lda #9
001D8Cr 3  85 rr                sta charx
001D8Er 3  A9 4C                lda #76 		; PUTBLOCK
001D90r 3  20 rr rr             jsr pbpattr
001D93r 3  A9 00                lda #0
001D95r 3  85 rr                sta chary
001D97r 3  A9 0B                lda #11
001D99r 3  85 rr                sta charx
001D9Br 3  A9 02                lda #2  	; MESSAGE
001D9Dr 3  20 rr rr             jsr dmsg
001DA0r 3  A9 00                lda #0
001DA2r 3  85 rr                sta varn
001DA4r 3  A9 00                lda #0
001DA6r 3  85 rr                sta chary
001DA8r 3  A9 15                lda #21
001DAAr 3  85 rr                sta charx
001DACr 3  A5 rr                lda varn	; DISPLAY
001DAEr 3  20 rr rr             jsr disply
001DB1r 3  A9 00                lda #0
001DB3r 3  85 rr                sta vara
001DB5r 3  A9 01                lda #1
001DB7r 3  85 rr                sta varp
001DB9r 3  A9 01                lda #1
001DBBr 3  85 rr                sta varq
001DBDr 3  A9 00                lda #0
001DBFr 3  85 rr                sta varg
001DC1r 3  A9 00                lda #0
001DC3r 3  85 rr                sta varj
001DC5r 3  A9 02                lda #2
001DC7r 3  85 rr                sta varr
001DC9r 3  A9 01                lda #1
001DCBr 3  85 rr                sta vars
001DCDr 3  A9 01                lda #1
001DCFr 3  85 rr                sta vart
001DD1r 3  A9 00                lda #0
001DD3r 3  85 rr                sta varb
001DD5r 3  A9 00                lda #0
001DD7r 3  85 rr                sta varm
001DD9r 3  60                   rts
001DDAr 3               evnt14:
001DDAr 3  A9 FF                lda #255
001DDCr 3  85 rr                sta vark
001DDEr 3  A9 FF                lda #255
001DE0r 3  85 rr                sta varopt
001DE2r 3  A9 FF                lda #255
001DE4r 3  85 rr                sta varb
001DE6r 3  A9 FF                lda #255
001DE8r 3  85 rr                sta varc
001DEAr 3  A9 01                lda #1
001DECr 3  C5 rr                cmp varg
001DEEr 3  F0 03                beq *+5
001DF0r 3  4C rr rr             jmp o00061
001DF3r 3  A9 FF                lda #255
001DF5r 3  85 rr                sta vard
001DF7r 3  A9 FF        o00061: lda #255
001DF9r 3  85 rr                sta vare
001DFBr 3  A9 FF                lda #255
001DFDr 3  85 rr                sta varf
001DFFr 3  A9 00                lda #0
001E01r 3  C5 rr                cmp varq
001E03r 3  F0 03                beq *+5
001E05r 3  4C rr rr             jmp o00104
001E08r 3  A9 FF                lda #255
001E0Ar 3  85 rr                sta vari
001E0Cr 3  A9 FF        o00104: lda #255
001E0Er 3  85 rr                sta varl
001E10r 3  A9 00                lda #0 	; PAPER
001E12r 3  0A                   asl a
001E13r 3  0A                   asl a
001E14r 3  0A                   asl a
001E15r 3  0A                   asl a
001E16r 3  85 rr                sta tmp
001E18r 3  AD 0F 90             lda RegF
001E1Br 3  29 0F                and #%00001111
001E1Dr 3  05 rr                ora tmp
001E1Fr 3  8D 0F 90             sta RegF
001E22r 3  A9 01                lda #1 	; INK
001E24r 3  8D rr rr             sta fontcol
001E27r 3  20 rr rr             jsr clw
001E2Ar 3                       ; CLW command
001E2Ar 3  60                   rts
001E2Br 3               evnt15:
001E2Br 3  A9 00                lda #0
001E2Dr 3  A0 05                ldy #5
001E2Fr 3  D1 rr                cmp (z80_ix),y
001E31r 3  F0 03                beq *+5
001E33r 3  4C rr rr             jmp p00034
001E36r 3  A9 01                lda #1 		; KILL
001E38r 3  85 rr                sta deadf
001E3Ar 3  60           p00034: rts
001E3Br 3               evnt16:
001E3Br 3  20 rr rr             jsr cls		; CLS
001E3Er 3  60                   rts
001E3Fr 3               evnt17:
001E3Fr 3  A9 96                lda #150 	; DELAY
001E41r 3  20 rr rr             jsr delay
001E44r 3  60                   rts
001E45r 3               evnt18:
001E45r 3  A9 C8                lda #200 	; DELAY
001E47r 3  20 rr rr             jsr delay
001E4Ar 3  20 rr rr             jsr cls		; CLS
001E4Dr 3  60                   rts
001E4Er 3               evnt19:
001E4Er 3  60                   rts
001E4Fr 3               evnt20:
001E4Fr 3  60                   rts
001E50r 3  60           ptcusr: rts
001E51r 3               data_start:
001E51r 3               msgdat:
001E51r 3  45 4E 45 52          .byte "ENERG",217
001E55r 3  47 D9        
001E57r 3  54 48 45 20          .byte "THE CURTAIN IS RAISED",174
001E5Br 3  43 55 52 54  
001E5Fr 3  41 49 4E 20  
001E6Dr 3  4F 52 43 48          .byte "ORCHESTR",193
001E71r 3  45 53 54 52  
001E75r 3  C1           
001E76r 3  47 4F 20 46          .byte "GO FOR I",212
001E7Ar 3  4F 52 20 49  
001E7Er 3  D4           
001E7Fr 3  ED                   .byte 237
001E80r 3  47 41 4D 45          .byte "GAME OVE",210
001E84r 3  20 4F 56 45  
001E88r 3  D2           
001E89r 3               nummsg:
001E89r 3  06                   .byte 6
001E8Ar 3               chgfx:
001E8Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001E8Er 3  00 00 00 00  
001E92r 3  3D 7F FF 7F          .byte 61,127,255,127,187,117,106,0
001E96r 3  BB 75 6A 00  
001E9Ar 3  3E FE FF FF          .byte 62,254,255,255,170,213,106,0
001E9Er 3  AA D5 6A 00  
001EA2r 3  30 7E FF FF          .byte 48,126,255,255,187,87,42,0
001EA6r 3  BB 57 2A 00  
001EAAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001EAEr 3  00 00 00 00  
001EB2r 3  18 4D 5D 7D          .byte 24,77,93,125,125,24,0,220
001EB6r 3  7D 18 00 DC  
001EBAr 3  FA 78 F0 E6          .byte 250,120,240,230,239,239,2,184
001EBEr 3  EF EF 02 B8  
001EC2r 3  F6 FE BE 78          .byte 246,254,190,120,0,60,119,42
001EC6r 3  00 3C 77 2A  
001ECAr 3  3C 98 C8 30          .byte 60,152,200,48,184,56,24,0
001ECEr 3  B8 38 18 00  
001ED2r 3  07 6F EE 64          .byte 7,111,238,100,116,0,0,0
001ED6r 3  74 00 00 00  
001EDAr 3  F3 FF FF FF          .byte 243,255,255,255,255,0,0,0
001EDEr 3  FF 00 00 00  
001EE2r 3  40 F6 37 26          .byte 64,246,55,38,12,0,0,0
001EE6r 3  0C 00 00 00  
001EEAr 3  5F 1E 0F 67          .byte 95,30,15,103,247,247,64,29
001EEEr 3  F7 F7 40 1D  
001EF2r 3  18 B2 BA BE          .byte 24,178,186,190,190,24,0,59
001EF6r 3  BE 18 00 3B  
001EFAr 3  3C 19 13 0C          .byte 60,25,19,12,29,28,24,0
001EFEr 3  1D 1C 18 00  
001F02r 3  6F 7F 7D 3E          .byte 111,127,125,62,0,60,118,44
001F06r 3  00 3C 76 2C  
001F0Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001F0Er 3  00 00 00 00  
001F12r 3  38 44 45 24          .byte 56,68,69,36,5,8,16,32
001F16r 3  05 08 10 20  
001F1Ar 3  3F 7F F8 55          .byte 63,127,248,85,42,0,42,85
001F1Er 3  2A 00 2A 55  
001F22r 3  FF FF 00 55          .byte 255,255,0,85,170,0,0,0
001F26r 3  AA 00 00 00  
001F2Ar 3  FC FE 1F 55          .byte 252,254,31,85,170,0,84,170
001F2Er 3  AA 00 54 AA  
001F32r 3  AA D5 7D FD          .byte 170,213,125,253,93,253,45,253
001F36r 3  5D FD 2D FD  
001F3Ar 3  55 AB BE BF          .byte 85,171,190,191,186,191,180,191
001F3Er 3  BA BF B4 BF  
001F42r 3  15 FD 2D FD          .byte 21,253,45,253,125,203,126,0
001F46r 3  7D CB 7E 00  
001F4Ar 3  A8 BF B4 BF          .byte 168,191,180,191,190,211,126,0
001F4Er 3  BE D3 7E 00  
001F52r 3  DB B4 84 37          .byte 219,180,132,55,155,49,13,0
001F56r 3  9B 31 0D 00  
001F5Ar 3  F5 9A 88 7B          .byte 245,154,136,123,100,238,72,0
001F5Er 3  64 EE 48 00  
001F62r 3  00 00 3F 61          .byte 0,0,63,97,106,111,112,42
001F66r 3  6A 6F 70 2A  
001F6Ar 3  00 00 FF 55          .byte 0,0,255,85,170,255,0,170
001F6Er 3  AA FF 00 AA  
001F72r 3  00 00 FF AA          .byte 0,0,255,170,85,255,0,85
001F76r 3  55 FF 00 55  
001F7Ar 3  00 00 FC 86          .byte 0,0,252,134,86,246,14,84
001F7Er 3  56 F6 0E 54  
001F82r 3  1C 36 55 55          .byte 28,54,85,85,85,85,85,127
001F86r 3  55 55 55 7F  
001F8Ar 3  55 55 55 55          .byte 85,85,85,85,85,85,127,0
001F8Er 3  55 55 7F 00  
001F92r 3  00 01 12 4A          .byte 0,1,18,74,108,61,62,54
001F96r 3  6C 3D 3E 36  
001F9Ar 3  77 3E 36 36          .byte 119,62,54,54,28,20,28,8
001F9Er 3  1C 14 1C 08  
001FA2r 3  FF 00 AA 55          .byte 255,0,170,85,0,255,106,255
001FA6r 3  00 FF 6A FF  
001FAAr 3  00 FF AA 55          .byte 0,255,170,85,170,255,0,255
001FAEr 3  AA FF 00 FF  
001FB2r 3  92 49 24 92          .byte 146,73,36,146,73,255,0,255
001FB6r 3  49 FF 00 FF  
001FBAr 3  7F 7F 40 5F          .byte 127,127,64,95,80,80,80,80
001FBEr 3  50 50 50 50  
001FC2r 3  FF 80 AA 95          .byte 255,128,170,149,128,255,0,0
001FC6r 3  80 FF 00 00  
001FCAr 3  FF 01 A9 55          .byte 255,1,169,85,1,255,0,0
001FCEr 3  01 FF 00 00  
001FD2r 3  FE FE 02 FA          .byte 254,254,2,250,10,10,10,10
001FD6r 3  0A 0A 0A 0A  
001FDAr 3  50 50 50 50          .byte 80,80,80,80,80,80,80,80
001FDEr 3  50 50 50 50  
001FE2r 3  50 50 50 50          .byte 80,80,80,80,80,80,0,80
001FE6r 3  50 50 00 50  
001FEAr 3  7F 7F 40 5F          .byte 127,127,64,95,80,85,82,85
001FEEr 3  50 55 52 55  
001FF2r 3  FF FF 00 FF          .byte 255,255,0,255,0,85,170,255
001FF6r 3  00 55 AA FF  
001FFAr 3  FF 80 AA 95          .byte 255,128,170,149,128,255,106,127
001FFEr 3  80 FF 6A 7F  
002002r 3  FF 01 A9 55          .byte 255,1,169,85,1,255,170,254
002006r 3  01 FF AA FE  
00200Ar 3  FE FE 02 FA          .byte 254,254,2,250,10,74,170,234
00200Er 3  0A 4A AA EA  
002012r 3  53 55 53 55          .byte 83,85,83,85,83,85,83,85
002016r 3  53 55 53 55  
00201Ar 3  FF 80 80 95          .byte 255,128,128,149,149,151,159,149
00201Er 3  95 97 9F 95  
002022r 3  FF 00 00 55          .byte 255,0,0,85,85,253,87,253
002026r 3  55 FD 57 FD  
00202Ar 3  FF 00 00 55          .byte 255,0,0,85,85,127,213,127
00202Er 3  55 7F D5 7F  
002032r 3  FF 00 00 54          .byte 255,0,0,84,84,212,86,254
002036r 3  54 D4 56 FE  
00203Ar 3  EA EA EA EA          .byte 234,234,234,234,234,234,234,234
00203Er 3  EA EA EA EA  
002042r 3  9F 9F 80 FF          .byte 159,159,128,255,255,255,255,128
002046r 3  FF FF FF 80  
00204Ar 3  FF FF 00 FF          .byte 255,255,0,255,255,255,255,0
00204Er 3  FF FF FF 00  
002052r 3  FF FF 00 FF          .byte 255,255,0,255,255,255,255,0
002056r 3  FF FF FF 00  
00205Ar 3  FE FE 00 FF          .byte 254,254,0,255,192,248,255,0
00205Er 3  C0 F8 FF 00  
002062r 3  53 55 53 55          .byte 83,85,83,85,83,85,83,0
002066r 3  53 55 53 00  
00206Ar 3  8A 9B 9F 9B          .byte 138,155,159,155,159,128,255,0
00206Er 3  9F 80 FF 00  
002072r 3  AA FF BB FF          .byte 170,255,187,255,255,0,255,0
002076r 3  FF 00 FF 00  
00207Ar 3  AA EF FB FF          .byte 170,239,251,255,255,0,255,0
00207Er 3  FF 00 FF 00  
002082r 3  AA EE FA FE          .byte 170,238,250,254,254,0,255,0
002086r 3  FE 00 FF 00  
00208Ar 3  AA EE FA FE          .byte 170,238,250,254,254,0,255,0
00208Er 3  FE 00 FF 00  
002092r 3  EA EA EA EA          .byte 234,234,234,234,234,234,234,0
002096r 3  EA EA EA 00  
00209Ar 3  FF 00 55 88          .byte 255,0,85,136,221,221,221,221
00209Er 3  DD DD DD DD  
0020A2r 3  DD DD DD DD          .byte 221,221,221,221,221,221,221,221
0020A6r 3  DD DD DD DD  
0020AAr 3  DD DD DD DD          .byte 221,221,221,221,255,0,0,255
0020AEr 3  FF 00 00 FF  
0020B2r 3  EA C8 A2 80          .byte 234,200,162,128,34,2,0,0
0020B6r 3  22 02 00 00  
0020BAr 3  FF FD 5B AD          .byte 255,253,91,173,45,138,33,10
0020BEr 3  2D 8A 21 0A  
0020C2r 3  15 FD 2D FD          .byte 21,253,45,253,125,203,126,0
0020C6r 3  7D CB 7E 00  
0020CAr 3  7D FD 5D FD          .byte 125,253,93,253,125,253,29,253
0020CEr 3  7D FD 1D FD  
0020D2r 3  BC BF BA BF          .byte 188,191,186,191,190,191,188,191
0020D6r 3  BE BF BC BF  
0020DAr 3  A8 B7 BC BF          .byte 168,183,188,191,190,211,126,0
0020DEr 3  BE D3 7E 00  
0020E2r 3  00 20 30 10          .byte 0,32,48,16,16,16,0,0
0020E6r 3  10 10 00 00  
0020EAr 3  FC E0 C0 CC          .byte 252,224,192,204,204,200,136,143
0020EEr 3  CC C8 88 8F  
0020F2r 3  FF 00 00 55          .byte 255,0,0,85,254,253,251,247
0020F6r 3  FE FD FB F7  
0020FAr 3  EF DF BF 7F          .byte 239,223,191,127,254,253,251,247
0020FEr 3  FE FD FB F7  
002102r 3  10 20 40 01          .byte 16,32,64,1,1,255,255,0
002106r 3  01 FF FF 00  
00210Ar 3  00 40 60 20          .byte 0,64,96,32,32,48,40,52
00210Er 3  20 30 28 34  
002112r 3  06 0B 10 30          .byte 6,11,16,48,32,98,76,216
002116r 3  20 62 4C D8  
00211Ar 3  14 1A 3A 5A          .byte 20,26,58,90,10,11,10,21
00211Er 3  0A 0B 0A 15  
002122r 3  90 90 B7 B8          .byte 144,144,183,184,176,224,160,80
002126r 3  B0 E0 A0 50  
00212Ar 3  00 00 38 4C          .byte 0,0,56,76,6,3,113,156
00212Er 3  06 03 71 9C  
002132r 3  00 00 00 00          .byte 0,0,0,0,14,25,152,168
002136r 3  0E 19 98 A8  
00213Ar 3  0E 07 C3 73          .byte 14,7,195,115,57,20,9,0
00213Er 3  39 14 09 00  
002142r 3  52 17 1D 18          .byte 82,23,29,24,40,16,40,0
002146r 3  28 10 28 00  
00214Ar 3  00 7F 51 3F          .byte 0,127,81,63,0,63,55,59
00214Er 3  00 3F 37 3B  
002152r 3  00 FF 5F FE          .byte 0,255,95,254,0,252,252,252
002156r 3  00 FC FC FC  
00215Ar 3  17 1B 17 1B          .byte 23,27,23,27,17,16,16,15
00215Er 3  11 10 10 0F  
002162r 3  F8 F8 F8 F8          .byte 248,248,248,248,248,184,8,240
002166r 3  F8 B8 08 F0  
00216Ar 3  55 3E 7F FE          .byte 85,62,127,254,124,0,0,0
00216Er 3  7C 00 00 00  
002172r 3  00 00 00 7C          .byte 0,0,0,124,254,127,190,85
002176r 3  FE 7F BE 55  
00217Ar 3  0E 1F 1E 1F          .byte 14,31,30,31,10,21,10,0
00217Er 3  0A 15 0A 00  
002182r 3  38 7C FC 7C          .byte 56,124,252,124,92,40,80,0
002186r 3  5C 28 50 00  
00218Ar 3  FE FC F8 F0          .byte 254,252,248,240,224,192,192,252
00218Er 3  E0 C0 C0 FC  
002192r 3  7F 3F 1F 0F          .byte 127,63,31,15,7,3,3,31
002196r 3  07 03 03 1F  
00219Ar 3  FC FC FC FC          .byte 252,252,252,252,252,255,252,255
00219Er 3  FC FF FC FF  
0021A2r 3  1F 1F 1F 1F          .byte 31,31,31,31,31,255,31,255
0021A6r 3  1F FF 1F FF  
0021AAr 3  FF FC FF FC          .byte 255,252,255,252,252,252,252,252
0021AEr 3  FC FC FC FC  
0021B2r 3  1F 03 03 07          .byte 31,3,3,7,15,31,63,127
0021B6r 3  0F 1F 3F 7F  
0021BAr 3  FF FF FF FF          .byte 255,255,255,255,255,255,160,160
0021BEr 3  FF FF A0 A0  
0021C2r 3  FF FF 9F 8F          .byte 255,255,159,143,135,131,1,0
0021C6r 3  87 83 01 00  
0021CAr 3  A0 A0 A0 FF          .byte 160,160,160,255,255,255,255,255
0021CEr 3  FF FF FF FF  
0021D2r 3  00 01 03 87          .byte 0,1,3,135,143,159,255,255
0021D6r 3  8F 9F FF FF  
0021DAr 3  FF FF F9 F1          .byte 255,255,249,241,225,193,128,0
0021DEr 3  E1 C1 80 00  
0021E2r 3  FF FF FF FF          .byte 255,255,255,255,255,255,5,5
0021E6r 3  FF FF 05 05  
0021EAr 3  00 80 C0 E1          .byte 0,128,192,225,241,249,255,255
0021EEr 3  F1 F9 FF FF  
0021F2r 3  05 05 05 FF          .byte 5,5,5,255,255,255,255,255
0021F6r 3  FF FF FF FF  
0021FAr 3  7F D5 80 DF          .byte 127,213,128,223,159,217,157,217
0021FEr 3  9F D9 9D D9  
002202r 3  FE 57 01 FB          .byte 254,87,1,251,249,155,217,155
002206r 3  F9 9B D9 9B  
00220Ar 3  9F 9C 96 99          .byte 159,156,150,153,159,192,234,127
00220Er 3  9F C0 EA 7F  
002212r 3  F9 7B D9 3B          .byte 249,123,217,59,249,3,171,254
002216r 3  F9 03 AB FE  
00221Ar 3  A0 40 3F 27          .byte 160,64,63,39,35,49,56,56
00221Er 3  23 31 38 38  
002222r 3  01 02 FC E4          .byte 1,2,252,228,196,140,28,28
002226r 3  C4 8C 1C 1C  
00222Ar 3  32 32 31 37          .byte 50,50,49,55,59,60,64,128
00222Er 3  3B 3C 40 80  
002232r 3  4C 4C 8C EC          .byte 76,76,140,236,92,60,2,1
002236r 3  5C 3C 02 01  
00223Ar 3  00 40 60 20          .byte 0,64,96,32,32,48,40,52
00223Er 3  20 30 28 34  
002242r 3  06 0A 11 30          .byte 6,10,17,48,32,98,76,216
002246r 3  20 62 4C D8  
00224Ar 3  14 1A 3A 5A          .byte 20,26,58,90,10,11,10,21
00224Er 3  0A 0B 0A 15  
002252r 3  90 B0 A6 B9          .byte 144,176,166,185,176,224,160,80
002256r 3  B0 E0 A0 50  
00225Ar 3  0E 07 C3 73          .byte 14,7,195,115,57,20,9,0
00225Er 3  39 14 09 00  
002262r 3  52 57 1D 98          .byte 82,87,29,152,40,144,40,0
002266r 3  28 90 28 00  
00226Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00226Er 3  00 00 00 00  
002272r 3  1F 14 1F 14          .byte 31,20,31,20,31,20,31,0
002276r 3  1F 14 1F 00  
00227Ar 3  EB 0C ED 0A          .byte 235,12,237,10,234,8,187,56
00227Er 3  EA 08 BB 38  
002282r 3  FF 00 BB 38          .byte 255,0,187,56,167,32,175,32
002286r 3  A7 20 AF 20  
00228Ar 3  20 28 28 30          .byte 32,40,40,48,48,32,0,0
00228Er 3  30 20 00 00  
002292r 3  F2 0E BE 32          .byte 242,14,190,50,162,34,174,46
002296r 3  A2 22 AE 2E  
00229Ar 3  E0 E0 00 00          .byte 224,224,0,0,0,0,0,0
00229Er 3  00 00 00 00  
0022A2r 3  EB 0C ED 0A          .byte 235,12,237,10,234,10,185,56
0022A6r 3  EA 0A B9 38  
0022AAr 3  04 1C 1C 00          .byte 4,28,28,0,0,0,0,0
0022AEr 3  00 00 00 00  
0022B2r 3  FF 00 BB 38          .byte 255,0,187,56,163,40,179,48
0022B6r 3  A3 28 B3 30  
0022BAr 3  20 00 00 00          .byte 32,0,0,0,0,0,0,0
0022BEr 3  00 00 00 00  
0022C2r 3  B7 38 AD 22          .byte 183,56,173,34,170,34,234,226
0022C6r 3  AA 22 EA E2  
0022CAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0022CEr 3  00 00 00 00  
0022D2r 3  1C 1C 00 00          .byte 28,28,0,0,0,0,0,0
0022D6r 3  00 00 00 00  
0022DAr 3  FF 08 FF 08          .byte 255,8,255,8,255,8,255,0
0022DEr 3  FF 08 FF 00  
0022E2r 3  7F 80 95 BF          .byte 127,128,149,191,191,191,160,167
0022E6r 3  BF BF A0 A7  
0022EAr 3  FE 01 55 FF          .byte 254,1,85,255,255,255,3,251
0022EEr 3  FF FF 03 FB  
0022F2r 3  A7 A6 A7 A7          .byte 167,166,167,167,160,191,160,167
0022F6r 3  A0 BF A0 A7  
0022FAr 3  FB DB 3B FB          .byte 251,219,59,251,3,255,3,251
0022FEr 3  03 FF 03 FB  
002302r 3  A7 A6 A7 A7          .byte 167,166,167,167,160,255,0,192
002306r 3  A0 FF 00 C0  
00230Ar 3  FB DB 3B FB          .byte 251,219,59,251,3,255,0,3
00230Er 3  03 FF 00 03  
002312r 3  FC F3 EF DF          .byte 252,243,239,223,223,191,191,191
002316r 3  DF BF BF BF  
00231Ar 3  1F 67 FB FD          .byte 31,103,251,253,125,126,126,126
00231Er 3  7D 7E 7E 7E  
002322r 3  9E BF BF DF          .byte 158,191,191,223,223,239,243,252
002326r 3  DF EF F3 FC  
00232Ar 3  04 7E FE FD          .byte 4,126,254,253,253,251,103,31
00232Er 3  FD FB 67 1F  
002332r 3  00 FF 00 FF          .byte 0,255,0,255,0,255,0,0
002336r 3  00 FF 00 00  
00233Ar 3  FF 05 FF 05          .byte 255,5,255,5,255,5,255,0
00233Er 3  FF 05 FF 00  
002342r 3  FF A0 FF A0          .byte 255,160,255,160,255,160,255,0
002346r 3  FF A0 FF 00  
00234Ar 3  15 91 91 3D          .byte 21,145,145,61,125,248,85,3
00234Er 3  7D F8 55 03  
002352r 3  7F 8B BD B8          .byte 127,139,189,184,189,159,111,151
002356r 3  BD 9F 6F 97  
00235Ar 3  FF 15 FF FF          .byte 255,21,255,255,223,143,223,255
00235Er 3  DF 8F DF FF  
002362r 3  FF FD DF 8F          .byte 255,253,223,143,222,252,254,255
002366r 3  DE FC FE FF  
00236Ar 3  FC 42 FD FD          .byte 252,66,253,253,253,121,246,233
00236Er 3  FD 79 F6 E9  
002372r 3  D2 F0 D2 F2          .byte 210,240,210,242,247,112,15,96
002376r 3  F7 70 0F 60  
00237Ar 3  AA 00 B6 B6          .byte 170,0,182,182,255,64,255,0
00237Er 3  FF 40 FF 00  
002382r 3  AA 00 DB DB          .byte 170,0,219,219,255,0,255,0
002386r 3  FF 00 FF 00  
00238Ar 3  AB 0F 4D 4F          .byte 171,15,77,79,239,14,240,6
00238Er 3  EF 0E F0 06  
002392r 3  1F 20 2F 2F          .byte 31,32,47,47,47,47,0,63
002396r 3  2F 2F 00 3F  
00239Ar 3  F8 AC FC FC          .byte 248,172,252,252,252,252,0,252
00239Er 3  FC FC 00 FC  
0023A2r 3  7F 40 7F 00          .byte 127,64,127,0,96,96,0,96
0023A6r 3  60 60 00 60  
0023AAr 3  FE 14 FE 00          .byte 254,20,254,0,6,6,0,6
0023AEr 3  06 06 00 06  
0023B2r 3  7F 60 6F 6E          .byte 127,96,111,110,96,127,96,111
0023B6r 3  60 7F 60 6F  
0023BAr 3  FE 02 FA 7A          .byte 254,2,250,122,2,254,2,250
0023BEr 3  02 FE 02 FA  
0023C2r 3  6E 60 7F 6A          .byte 110,96,127,106,96,103,0,96
0023C6r 3  60 67 00 60  
0023CAr 3  7A 02 FE AE          .byte 122,2,254,174,6,246,0,6
0023CEr 3  06 F6 00 06  
0023D2r 3  01 01 01 01          .byte 1,1,1,1,1,1,3,6
0023D6r 3  01 01 03 06  
0023DAr 3  80 80 80 80          .byte 128,128,128,128,128,128,192,96
0023DEr 3  80 80 C0 60  
0023E2r 3  08 07 0E 1D          .byte 8,7,14,29,63,117,170,0
0023E6r 3  3F 75 AA 00  
0023EAr 3  10 E0 78 B8          .byte 16,224,120,184,252,174,85,0
0023EEr 3  FC AE 55 00  
0023F2r 3  FF BE FE FE          .byte 255,190,254,254,248,240,242,242
0023F6r 3  F8 F0 F2 F2  
0023FAr 3  FF 3D 3F 3F          .byte 255,61,63,63,15,7,39,39
0023FEr 3  0F 07 27 27  
002402r 3  F2 F2 F2 FE          .byte 242,242,242,254,254,254,188,252
002406r 3  FE FE BC FC  
00240Ar 3  27 27 27 BF          .byte 39,39,39,191,191,191,157,159
00240Er 3  BF BF 9D 9F  
002412r 3  FF FF FF FF          .byte 255,255,255,255,192,128,15,29
002416r 3  C0 80 0F 1D  
00241Ar 3  FF FF FF FF          .byte 255,255,255,255,3,1,240,184
00241Er 3  03 01 F0 B8  
002422r 3  E2 0A 17 2A          .byte 226,10,23,42,19,43,19,43
002426r 3  13 2B 13 2B  
00242Ar 3  22 98 EC A2          .byte 34,152,236,162,252,84,250,250
00242Er 3  FC 54 FA FA  
002432r 3  00 24 10 03          .byte 0,36,16,3,135,44,13,175
002436r 3  87 2C 0D AF  
00243Ar 3  90 84 28 C0          .byte 144,132,40,192,225,148,176,245
00243Er 3  E1 94 B0 F5  
002442r 3  0E 2B 84 03          .byte 14,43,132,3,16,36,64,8
002446r 3  10 24 40 08  
00244Ar 3  70 D0 24 C1          .byte 112,208,36,193,8,164,130,144
00244Er 3  08 A4 82 90  
002452r 3  00 0F 10 26          .byte 0,15,16,38,78,88,86,94
002456r 3  4E 58 56 5E  
00245Ar 3  00 F0 08 04          .byte 0,240,8,4,114,122,122,122
00245Er 3  72 7A 7A 7A  
002462r 3  41 5E 5A 56          .byte 65,94,90,86,94,64,127,255
002466r 3  5E 40 7F FF  
00246Ar 3  82 7A 7A 7A          .byte 130,122,122,122,122,2,254,255
00246Er 3  7A 02 FE FF  
002472r 3  92 49 24 92          .byte 146,73,36,146,73,36,146,73
002476r 3  49 24 92 49  
00247Ar 3  0A 0A 0A 0A          .byte 10,10,10,10,10,10,10,10
00247Er 3  0A 0A 0A 0A  
002482r 3  0A 0A 0A 0A          .byte 10,10,10,10,10,10,0,10
002486r 3  0A 0A 00 0A  
00248Ar 3  7E FF 81 7E          .byte 126,255,129,126,0,0,0,0
00248Er 3  00 00 00 00  
002492r 3  6B 6B 68 6F          .byte 107,107,104,111,104,107,107,107
002496r 3  68 6B 6B 6B  
00249Ar 3  9D FD 01 FF          .byte 157,253,1,255,1,253,157,253
00249Er 3  01 FD 9D FD  
0024A2r 3  00 55 BF 7F          .byte 0,85,191,127,255,126,0,0
0024A6r 3  FF 7E 00 00  
0024AAr 3  00 00 7D FF          .byte 0,0,125,255,127,191,87,0
0024AEr 3  7F BF 57 00  
0024B2r 3  2E 5F 1F 3F          .byte 46,95,31,63,15,23,11,0
0024B6r 3  0F 17 0B 00  
0024BAr 3  38 7C FC 7C          .byte 56,124,252,124,220,40,80,0
0024BEr 3  DC 28 50 00  
0024C2r 3  FF FF C3 C3          .byte 255,255,195,195,195,195,194,193
0024C6r 3  C3 C3 C2 C1  
0024CAr 3  FF FF 0C 0C          .byte 255,255,12,12,12,12,8,4
0024CEr 3  0C 0C 08 04  
0024D2r 3  FF FF 30 30          .byte 255,255,48,48,48,48,32,16
0024D6r 3  30 30 20 10  
0024DAr 3  FF FF C3 C3          .byte 255,255,195,195,195,195,130,65
0024DEr 3  C3 C3 82 41  
0024E2r 3  FC FC 0C 0C          .byte 252,252,12,12,12,12,8,4
0024E6r 3  0C 0C 08 04  
0024EAr 3  03 03 03 03          .byte 3,3,3,3,3,3,3,2
0024EEr 3  03 03 03 02  
0024F2r 3  0C 0C 0C 0C          .byte 12,12,12,12,12,12,12,8
0024F6r 3  0C 0C 0C 08  
0024FAr 3  30 30 30 30          .byte 48,48,48,48,48,48,48,32
0024FEr 3  30 30 30 20  
002502r 3  C3 C3 C3 C3          .byte 195,195,195,195,195,195,195,130
002506r 3  C3 C3 C3 82  
00250Ar 3  C1 C2 C3 C3          .byte 193,194,195,195,195,195,195,130
00250Er 3  C3 C3 C3 82  
002512r 3  7F 40 40 4B          .byte 127,64,64,75,91,75,91,75
002516r 3  5B 4B 5B 4B  
00251Ar 3  FF 00 00 BB          .byte 255,0,0,187,187,187,187,251
00251Er 3  BB BB BB FB  
002522r 3  FE 02 02 B2          .byte 254,2,2,178,178,242,178,242
002526r 3  B2 F2 B2 F2  
00252Ar 3  5F 4B 5F 4B          .byte 95,75,95,75,95,79,95,75
00252Er 3  5F 4F 5F 4B  
002532r 3  BB FB BE B9          .byte 187,251,190,185,185,254,187,187
002536r 3  B9 FE BB BB  
00253Ar 3  F2 32 12 22          .byte 242,50,18,34,226,18,242,242
00253Er 3  E2 12 F2 F2  
002542r 3  5B 4F 1B 4F          .byte 91,79,27,79,95,64,127,0
002546r 3  5F 40 7F 00  
00254Ar 3  BB BB BB BF          .byte 187,187,187,191,191,0,255,0
00254Er 3  BF 00 FF 00  
002552r 3  F2 B2 F2 B3          .byte 242,178,242,179,179,2,254,0
002556r 3  B3 02 FE 00  
00255Ar 3  3E 7F 7E 5F          .byte 62,127,126,95,170,85,42,0
00255Er 3  AA 55 2A 00  
002562r 3  34 7A FF 7E          .byte 52,122,255,126,171,85,170,0
002566r 3  AB 55 AA 00  
00256Ar 3  62 F7 7E 75          .byte 98,247,126,117,186,85,34,0
00256Er 3  BA 55 22 00  
002572r 3  00 27 6F 6F          .byte 0,39,111,111,24,16,16,25
002576r 3  18 10 10 19  
00257Ar 3  00 F2 FB FB          .byte 0,242,251,251,140,132,132,76
00257Er 3  8C 84 84 4C  
002582r 3  1F 0E 0E 0B          .byte 31,14,14,11,98,120,51,0
002586r 3  62 78 33 00  
00258Ar 3  7C 38 B8 E8          .byte 124,56,184,232,163,15,230,0
00258Er 3  A3 0F E6 00  
002592r 3  7E 42 FE E7          .byte 126,66,254,231,231,239,239,62
002596r 3  E7 EF EF 3E  
00259Ar 3  FF FF FF AA          .byte 255,255,255,170,127,191,223,239
00259Er 3  7F BF DF EF  
0025A2r 3  F7 FB F9 FE          .byte 247,251,249,254,127,143,207,239
0025A6r 3  7F 8F CF EF  
0025AAr 3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0
0025AEr 3  FF 00 FF 00  
0025B2r 3  F7 FB FD FE          .byte 247,251,253,254,255,0,0,255
0025B6r 3  FF 00 00 FF  
0025BAr 3  1C 36 55 55          .byte 28,54,85,85,85,85,85,127
0025BEr 3  55 55 55 7F  
0025C2r 3  55 55 55 55          .byte 85,85,85,85,85,85,127,0
0025C6r 3  55 55 7F 00  
0025CAr 3  00 02 24 94          .byte 0,2,36,148,221,94,108,56
0025CEr 3  DD 5E 6C 38  
0025D2r 3  77 3E 36 36          .byte 119,62,54,54,28,20,28,8
0025D6r 3  1C 14 1C 08  
0025DAr 3  10 18 18 14          .byte 16,24,24,20,20,16,112,112
0025DEr 3  14 10 70 70  
0025E2r 3  F8 08 F8 08          .byte 248,8,248,8,248,8,248,0
0025E6r 3  F8 08 F8 00  
0025EAr 3  F9 03 FA 02          .byte 249,3,250,2,250,2,250,1
0025EEr 3  FA 02 FA 01  
0025F2r 3  9F 40 6F 20          .byte 159,64,111,32,55,48,103,192
0025F6r 3  37 30 67 C0  
0025FAr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0025FEr 3  00 00 00 00  
002602r 3  00 00 01 03          .byte 0,0,1,3,7,7,1,0
002606r 3  07 07 01 00  
00260Ar 3  78 FE FF FF          .byte 120,254,255,255,255,255,255,30
00260Er 3  FF FF FF 1E  
002612r 3  00 00 70 F8          .byte 0,0,112,248,252,252,240,0
002616r 3  FC FC F0 00  
00261Ar 3  03 07 0D 19          .byte 3,7,13,25,51,54,52,52
00261Er 3  33 36 34 34  
002622r 3  80 00 00 00          .byte 128,0,0,0,224,176,152,152
002626r 3  E0 B0 98 98  
00262Ar 3  12 08 07 00          .byte 18,8,7,0,12,30,12,7
00262Er 3  0C 1E 0C 07  
002632r 3  90 A0 C0 80          .byte 144,160,192,128,64,64,128,0
002636r 3  40 40 80 00  
00263Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00263Er 3  00 00 00 00  
002642r 3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0
002646r 3  FF 00 FF 00  
00264Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00264Er 3  00 00 00 00  
002652r 3  00 00 E7 18          .byte 0,0,231,24,24,0,0,0
002656r 3  18 00 00 00  
00265Ar 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00265Er 3  00 00 00 00  
002662r 3  10 18 18 14          .byte 16,24,24,20,20,16,112,112
002666r 3  14 10 70 70  
00266Ar 3  D0 86 95 D5          .byte 208,134,149,213,149,149,149,0
00266Er 3  95 95 95 00  
002672r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002676r 3  00 00 00 00  
00267Ar 3               bCol:
00267Ar 3  01                   .byte 1
00267Br 3  01                   .byte 1
00267Cr 3  01                   .byte 1
00267Dr 3  01                   .byte 1
00267Er 3  01                   .byte 1
00267Fr 3  01                   .byte 1
002680r 3  01                   .byte 1
002681r 3  01                   .byte 1
002682r 3  01                   .byte 1
002683r 3  01                   .byte 1
002684r 3  01                   .byte 1
002685r 3  01                   .byte 1
002686r 3  01                   .byte 1
002687r 3  01                   .byte 1
002688r 3  01                   .byte 1
002689r 3  01                   .byte 1
00268Ar 3  01                   .byte 1
00268Br 3  01                   .byte 1
00268Cr 3  01                   .byte 1
00268Dr 3  01                   .byte 1
00268Er 3  01                   .byte 1
00268Fr 3  01                   .byte 1
002690r 3  01                   .byte 1
002691r 3  01                   .byte 1
002692r 3  01                   .byte 1
002693r 3  01                   .byte 1
002694r 3  01                   .byte 1
002695r 3  01                   .byte 1
002696r 3  01                   .byte 1
002697r 3  01                   .byte 1
002698r 3  01                   .byte 1
002699r 3  03                   .byte 3
00269Ar 3  03                   .byte 3
00269Br 3  01                   .byte 1
00269Cr 3  01                   .byte 1
00269Dr 3  01                   .byte 1
00269Er 3  01                   .byte 1
00269Fr 3  01                   .byte 1
0026A0r 3  01                   .byte 1
0026A1r 3  01                   .byte 1
0026A2r 3  01                   .byte 1
0026A3r 3  01                   .byte 1
0026A4r 3  01                   .byte 1
0026A5r 3  01                   .byte 1
0026A6r 3  01                   .byte 1
0026A7r 3  01                   .byte 1
0026A8r 3  01                   .byte 1
0026A9r 3  01                   .byte 1
0026AAr 3  01                   .byte 1
0026ABr 3  01                   .byte 1
0026ACr 3  01                   .byte 1
0026ADr 3  01                   .byte 1
0026AEr 3  01                   .byte 1
0026AFr 3  01                   .byte 1
0026B0r 3  01                   .byte 1
0026B1r 3  01                   .byte 1
0026B2r 3  01                   .byte 1
0026B3r 3  01                   .byte 1
0026B4r 3  01                   .byte 1
0026B5r 3  01                   .byte 1
0026B6r 3  01                   .byte 1
0026B7r 3  01                   .byte 1
0026B8r 3  01                   .byte 1
0026B9r 3  01                   .byte 1
0026BAr 3  01                   .byte 1
0026BBr 3  01                   .byte 1
0026BCr 3  01                   .byte 1
0026BDr 3  01                   .byte 1
0026BEr 3  01                   .byte 1
0026BFr 3  01                   .byte 1
0026C0r 3  01                   .byte 1
0026C1r 3  01                   .byte 1
0026C2r 3  01                   .byte 1
0026C3r 3  01                   .byte 1
0026C4r 3  01                   .byte 1
0026C5r 3  01                   .byte 1
0026C6r 3  01                   .byte 1
0026C7r 3  01                   .byte 1
0026C8r 3  01                   .byte 1
0026C9r 3  01                   .byte 1
0026CAr 3  01                   .byte 1
0026CBr 3  01                   .byte 1
0026CCr 3  01                   .byte 1
0026CDr 3  01                   .byte 1
0026CEr 3  01                   .byte 1
0026CFr 3  01                   .byte 1
0026D0r 3  01                   .byte 1
0026D1r 3  01                   .byte 1
0026D2r 3  01                   .byte 1
0026D3r 3  01                   .byte 1
0026D4r 3  01                   .byte 1
0026D5r 3  01                   .byte 1
0026D6r 3  06                   .byte 6
0026D7r 3  06                   .byte 6
0026D8r 3  06                   .byte 6
0026D9r 3  06                   .byte 6
0026DAr 3  01                   .byte 1
0026DBr 3  01                   .byte 1
0026DCr 3  01                   .byte 1
0026DDr 3  01                   .byte 1
0026DEr 3  01                   .byte 1
0026DFr 3  01                   .byte 1
0026E0r 3  01                   .byte 1
0026E1r 3  01                   .byte 1
0026E2r 3  01                   .byte 1
0026E3r 3  01                   .byte 1
0026E4r 3  01                   .byte 1
0026E5r 3  01                   .byte 1
0026E6r 3  01                   .byte 1
0026E7r 3  01                   .byte 1
0026E8r 3  01                   .byte 1
0026E9r 3  01                   .byte 1
0026EAr 3  01                   .byte 1
0026EBr 3  01                   .byte 1
0026ECr 3  01                   .byte 1
0026EDr 3  01                   .byte 1
0026EEr 3  01                   .byte 1
0026EFr 3  01                   .byte 1
0026F0r 3  01                   .byte 1
0026F1r 3  01                   .byte 1
0026F2r 3  01                   .byte 1
0026F3r 3  01                   .byte 1
0026F4r 3  01                   .byte 1
0026F5r 3  01                   .byte 1
0026F6r 3  01                   .byte 1
0026F7r 3  01                   .byte 1
0026F8r 3  01                   .byte 1
0026F9r 3  01                   .byte 1
0026FAr 3  01                   .byte 1
0026FBr 3  01                   .byte 1
0026FCr 3  01                   .byte 1
0026FDr 3  01                   .byte 1
0026FEr 3  01                   .byte 1
0026FFr 3  01                   .byte 1
002700r 3  01                   .byte 1
002701r 3  01                   .byte 1
002702r 3  01                   .byte 1
002703r 3  01                   .byte 1
002704r 3  01                   .byte 1
002705r 3  01                   .byte 1
002706r 3  01                   .byte 1
002707r 3  01                   .byte 1
002708r 3  01                   .byte 1
002709r 3  01                   .byte 1
00270Ar 3  01                   .byte 1
00270Br 3  01                   .byte 1
00270Cr 3  01                   .byte 1
00270Dr 3  01                   .byte 1
00270Er 3  01                   .byte 1
00270Fr 3  01                   .byte 1
002710r 3  01                   .byte 1
002711r 3  01                   .byte 1
002712r 3  01                   .byte 1
002713r 3  01                   .byte 1
002714r 3  01                   .byte 1
002715r 3  01                   .byte 1
002716r 3  01                   .byte 1
002717r 3  01                   .byte 1
002718r 3  01                   .byte 1
002719r 3  01                   .byte 1
00271Ar 3  01                   .byte 1
00271Br 3  01                   .byte 1
00271Cr 3  01                   .byte 1
00271Dr 3  01                   .byte 1
00271Er 3  01                   .byte 1
00271Fr 3  01                   .byte 1
002720r 3  01                   .byte 1
002721r 3  01                   .byte 1
002722r 3  01                   .byte 1
002723r 3  01                   .byte 1
002724r 3  01                   .byte 1
002725r 3  01                   .byte 1
002726r 3  01                   .byte 1
002727r 3  01                   .byte 1
002728r 3  01                   .byte 1
002729r 3  01                   .byte 1
00272Ar 3  01                   .byte 1
00272Br 3  01                   .byte 1
00272Cr 3  01                   .byte 1
00272Dr 3  01                   .byte 1
00272Er 3  01                   .byte 1
00272Fr 3  01                   .byte 1
002730r 3  01                   .byte 1
002731r 3  01                   .byte 1
002732r 3  01                   .byte 1
002733r 3  01                   .byte 1
002734r 3  01                   .byte 1
002735r 3  01                   .byte 1
002736r 3  01                   .byte 1
002737r 3  01                   .byte 1
002738r 3  01                   .byte 1
002739r 3  01                   .byte 1
00273Ar 3  01                   .byte 1
00273Br 3  01                   .byte 1
00273Cr 3  01                   .byte 1
00273Dr 3  01                   .byte 1
00273Er 3  01                   .byte 1
00273Fr 3  01                   .byte 1
002740r 3  01                   .byte 1
002741r 3  01                   .byte 1
002742r 3  03                   .byte 3
002743r 3  01                   .byte 1
002744r 3  01                   .byte 1
002745r 3  03                   .byte 3
002746r 3  01                   .byte 1
002747r 3  03                   .byte 3
002748r 3  01                   .byte 1
002749r 3  01                   .byte 1
00274Ar 3  01                   .byte 1
00274Br 3  01                   .byte 1
00274Cr 3  01                   .byte 1
00274Dr 3  01                   .byte 1
00274Er 3  01                   .byte 1
00274Fr 3  01                   .byte 1
002750r 3  01                   .byte 1
002751r 3  01                   .byte 1
002752r 3  01                   .byte 1
002753r 3  01                   .byte 1
002754r 3  06                   .byte 6
002755r 3  06                   .byte 6
002756r 3  06                   .byte 6
002757r 3  01                   .byte 1
002758r 3  01                   .byte 1
002759r 3  01                   .byte 1
00275Ar 3  01                   .byte 1
00275Br 3  04                   .byte 4
00275Cr 3  01                   .byte 1
00275Dr 3  01                   .byte 1
00275Er 3  01                   .byte 1
00275Fr 3  01                   .byte 1
002760r 3  01                   .byte 1
002761r 3  01                   .byte 1
002762r 3  01                   .byte 1
002763r 3  01                   .byte 1
002764r 3  01                   .byte 1
002765r 3  01                   .byte 1
002766r 3  01                   .byte 1
002767r 3  01                   .byte 1
002768r 3  01                   .byte 1
002769r 3  01                   .byte 1
00276Ar 3  01                   .byte 1
00276Br 3  01                   .byte 1
00276Cr 3  01                   .byte 1
00276Dr 3  01                   .byte 1
00276Er 3  01                   .byte 1
00276Fr 3  01                   .byte 1
002770r 3  01                   .byte 1
002771r 3  01                   .byte 1
002772r 3  01                   .byte 1
002773r 3  01                   .byte 1
002774r 3  01                   .byte 1
002775r 3  01                   .byte 1
002776r 3  01                   .byte 1
002777r 3  01                   .byte 1
002778r 3               bprop:
002778r 3  00                   .byte 0
002779r 3  02                   .byte 2
00277Ar 3  02                   .byte 2
00277Br 3  02                   .byte 2
00277Cr 3  03                   .byte 3
00277Dr 3  02                   .byte 2
00277Er 3  02                   .byte 2
00277Fr 3  02                   .byte 2
002780r 3  02                   .byte 2
002781r 3  02                   .byte 2
002782r 3  00                   .byte 0
002783r 3  02                   .byte 2
002784r 3  02                   .byte 2
002785r 3  02                   .byte 2
002786r 3  02                   .byte 2
002787r 3  02                   .byte 2
002788r 3  03                   .byte 3
002789r 3  02                   .byte 2
00278Ar 3  02                   .byte 2
00278Br 3  02                   .byte 2
00278Cr 3  02                   .byte 2
00278Dr 3  02                   .byte 2
00278Er 3  02                   .byte 2
00278Fr 3  02                   .byte 2
002790r 3  02                   .byte 2
002791r 3  03                   .byte 3
002792r 3  03                   .byte 3
002793r 3  02                   .byte 2
002794r 3  02                   .byte 2
002795r 3  02                   .byte 2
002796r 3  02                   .byte 2
002797r 3  02                   .byte 2
002798r 3  02                   .byte 2
002799r 3  02                   .byte 2
00279Ar 3  02                   .byte 2
00279Br 3  02                   .byte 2
00279Cr 3  02                   .byte 2
00279Dr 3  00                   .byte 0
00279Er 3  02                   .byte 2
00279Fr 3  03                   .byte 3
0027A0r 3  03                   .byte 3
0027A1r 3  02                   .byte 2
0027A2r 3  02                   .byte 2
0027A3r 3  02                   .byte 2
0027A4r 3  02                   .byte 2
0027A5r 3  02                   .byte 2
0027A6r 3  00                   .byte 0
0027A7r 3  00                   .byte 0
0027A8r 3  02                   .byte 2
0027A9r 3  02                   .byte 2
0027AAr 3  02                   .byte 2
0027ABr 3  01                   .byte 1
0027ACr 3  02                   .byte 2
0027ADr 3  02                   .byte 2
0027AEr 3  02                   .byte 2
0027AFr 3  02                   .byte 2
0027B0r 3  02                   .byte 2
0027B1r 3  02                   .byte 2
0027B2r 3  02                   .byte 2
0027B3r 3  02                   .byte 2
0027B4r 3  02                   .byte 2
0027B5r 3  02                   .byte 2
0027B6r 3  02                   .byte 2
0027B7r 3  02                   .byte 2
0027B8r 3  02                   .byte 2
0027B9r 3  02                   .byte 2
0027BAr 3  02                   .byte 2
0027BBr 3  02                   .byte 2
0027BCr 3  02                   .byte 2
0027BDr 3  02                   .byte 2
0027BEr 3  02                   .byte 2
0027BFr 3  02                   .byte 2
0027C0r 3  02                   .byte 2
0027C1r 3  02                   .byte 2
0027C2r 3  02                   .byte 2
0027C3r 3  03                   .byte 3
0027C4r 3  00                   .byte 0
0027C5r 3  02                   .byte 2
0027C6r 3  02                   .byte 2
0027C7r 3  02                   .byte 2
0027C8r 3  02                   .byte 2
0027C9r 3  02                   .byte 2
0027CAr 3  02                   .byte 2
0027CBr 3  02                   .byte 2
0027CCr 3  02                   .byte 2
0027CDr 3  02                   .byte 2
0027CEr 3  02                   .byte 2
0027CFr 3  02                   .byte 2
0027D0r 3  02                   .byte 2
0027D1r 3  02                   .byte 2
0027D2r 3  02                   .byte 2
0027D3r 3  02                   .byte 2
0027D4r 3  02                   .byte 2
0027D5r 3  02                   .byte 2
0027D6r 3  02                   .byte 2
0027D7r 3  02                   .byte 2
0027D8r 3  00                   .byte 0
0027D9r 3  00                   .byte 0
0027DAr 3  00                   .byte 0
0027DBr 3  00                   .byte 0
0027DCr 3  00                   .byte 0
0027DDr 3  00                   .byte 0
0027DEr 3  00                   .byte 0
0027DFr 3  00                   .byte 0
0027E0r 3  00                   .byte 0
0027E1r 3  00                   .byte 0
0027E2r 3  00                   .byte 0
0027E3r 3  00                   .byte 0
0027E4r 3  00                   .byte 0
0027E5r 3  00                   .byte 0
0027E6r 3  02                   .byte 2
0027E7r 3  02                   .byte 2
0027E8r 3  02                   .byte 2
0027E9r 3  02                   .byte 2
0027EAr 3  02                   .byte 2
0027EBr 3  02                   .byte 2
0027ECr 3  02                   .byte 2
0027EDr 3  02                   .byte 2
0027EEr 3  02                   .byte 2
0027EFr 3  02                   .byte 2
0027F0r 3  02                   .byte 2
0027F1r 3  02                   .byte 2
0027F2r 3  02                   .byte 2
0027F3r 3  02                   .byte 2
0027F4r 3  02                   .byte 2
0027F5r 3  02                   .byte 2
0027F6r 3  02                   .byte 2
0027F7r 3  00                   .byte 0
0027F8r 3  00                   .byte 0
0027F9r 3  00                   .byte 0
0027FAr 3  02                   .byte 2
0027FBr 3  00                   .byte 0
0027FCr 3  00                   .byte 0
0027FDr 3  02                   .byte 2
0027FEr 3  00                   .byte 0
0027FFr 3  02                   .byte 2
002800r 3  00                   .byte 0
002801r 3  00                   .byte 0
002802r 3  02                   .byte 2
002803r 3  02                   .byte 2
002804r 3  02                   .byte 2
002805r 3  02                   .byte 2
002806r 3  02                   .byte 2
002807r 3  02                   .byte 2
002808r 3  02                   .byte 2
002809r 3  02                   .byte 2
00280Ar 3  02                   .byte 2
00280Br 3  02                   .byte 2
00280Cr 3  02                   .byte 2
00280Dr 3  03                   .byte 3
00280Er 3  02                   .byte 2
00280Fr 3  02                   .byte 2
002810r 3  02                   .byte 2
002811r 3  02                   .byte 2
002812r 3  02                   .byte 2
002813r 3  02                   .byte 2
002814r 3  02                   .byte 2
002815r 3  02                   .byte 2
002816r 3  02                   .byte 2
002817r 3  02                   .byte 2
002818r 3  02                   .byte 2
002819r 3  02                   .byte 2
00281Ar 3  02                   .byte 2
00281Br 3  02                   .byte 2
00281Cr 3  02                   .byte 2
00281Dr 3  02                   .byte 2
00281Er 3  02                   .byte 2
00281Fr 3  02                   .byte 2
002820r 3  02                   .byte 2
002821r 3  02                   .byte 2
002822r 3  02                   .byte 2
002823r 3  02                   .byte 2
002824r 3  02                   .byte 2
002825r 3  02                   .byte 2
002826r 3  02                   .byte 2
002827r 3  02                   .byte 2
002828r 3  02                   .byte 2
002829r 3  02                   .byte 2
00282Ar 3  02                   .byte 2
00282Br 3  02                   .byte 2
00282Cr 3  02                   .byte 2
00282Dr 3  02                   .byte 2
00282Er 3  02                   .byte 2
00282Fr 3  02                   .byte 2
002830r 3  02                   .byte 2
002831r 3  02                   .byte 2
002832r 3  02                   .byte 2
002833r 3  02                   .byte 2
002834r 3  02                   .byte 2
002835r 3  02                   .byte 2
002836r 3  02                   .byte 2
002837r 3  02                   .byte 2
002838r 3  02                   .byte 2
002839r 3  02                   .byte 2
00283Ar 3  02                   .byte 2
00283Br 3  02                   .byte 2
00283Cr 3  02                   .byte 2
00283Dr 3  02                   .byte 2
00283Er 3  02                   .byte 2
00283Fr 3  02                   .byte 2
002840r 3  02                   .byte 2
002841r 3  02                   .byte 2
002842r 3  02                   .byte 2
002843r 3  02                   .byte 2
002844r 3  02                   .byte 2
002845r 3  02                   .byte 2
002846r 3  02                   .byte 2
002847r 3  02                   .byte 2
002848r 3  02                   .byte 2
002849r 3  02                   .byte 2
00284Ar 3  02                   .byte 2
00284Br 3  02                   .byte 2
00284Cr 3  02                   .byte 2
00284Dr 3  02                   .byte 2
00284Er 3  02                   .byte 2
00284Fr 3  02                   .byte 2
002850r 3  02                   .byte 2
002851r 3  02                   .byte 2
002852r 3  02                   .byte 2
002853r 3  02                   .byte 2
002854r 3  02                   .byte 2
002855r 3  02                   .byte 2
002856r 3  02                   .byte 2
002857r 3  02                   .byte 2
002858r 3  02                   .byte 2
002859r 3  02                   .byte 2
00285Ar 3  02                   .byte 2
00285Br 3  02                   .byte 2
00285Cr 3  02                   .byte 2
00285Dr 3  02                   .byte 2
00285Er 3  02                   .byte 2
00285Fr 3  02                   .byte 2
002860r 3  02                   .byte 2
002861r 3  02                   .byte 2
002862r 3  06                   .byte 6
002863r 3  02                   .byte 2
002864r 3  03                   .byte 3
002865r 3  03                   .byte 3
002866r 3  00                   .byte 0
002867r 3  00                   .byte 0
002868r 3  00                   .byte 0
002869r 3  00                   .byte 0
00286Ar 3  03                   .byte 3
00286Br 3  03                   .byte 3
00286Cr 3  03                   .byte 3
00286Dr 3  03                   .byte 3
00286Er 3  02                   .byte 2
00286Fr 3  03                   .byte 3
002870r 3  05                   .byte 5
002871r 3  00                   .byte 0
002872r 3  00                   .byte 0
002873r 3  06                   .byte 6
002874r 3  05                   .byte 5
002875r 3  00                   .byte 0
002876r 3               sprgfx:
002876r 3  15 EE 8B 03          .byte 21,238,139,3,90,254,51,24,139,152,91,241,21,159,0,254,0,0,0,192,1,230,1,236,1,224,0,0,0,224,0,240
00287Ar 3  5A FE 33 18  
00287Er 3  8B 98 5B F1  
002896r 3  45 EE 4B 03          .byte 69,238,75,3,58,254,19,24,139,152,91,241,53,143,0,252,0,0,0,192,1,236,1,224,1,228,0,12,7,24,3,128
00289Ar 3  3A FE 13 18  
00289Er 3  8B 98 5B F1  
0028B6r 3  05 EE 0B 03          .byte 5,238,11,3,26,254,51,24,203,152,59,241,145,223,120,254,0,0,0,192,1,236,13,230,13,224,12,0,8,28,0,30
0028BAr 3  1A FE 33 18  
0028BEr 3  CB 98 3B F1  
0028D6r 3  77 A8 C0 D1          .byte 119,168,192,209,127,90,24,204,25,209,143,218,249,168,127,0,0,0,3,0,103,128,55,128,7,128,0,0,7,0,15,0
0028DAr 3  7F 5A 18 CC  
0028DEr 3  19 D1 8F DA  
0028F6r 3  77 A2 C0 D2          .byte 119,162,192,210,127,92,24,200,25,209,143,218,241,172,127,0,0,0,3,0,55,128,7,128,39,128,48,0,24,224,1,192
0028FAr 3  7F 5C 18 C8  
0028FEr 3  19 D1 8F DA  
002916r 3  77 A0 C0 D0          .byte 119,160,192,208,127,88,24,204,25,211,143,220,251,137,127,30,0,0,3,0,55,128,103,176,7,176,0,48,56,16,120,0
00291Ar 3  7F 58 18 CC  
00291Er 3  19 D3 8F DC  
002936r 3  03 60 07 F0          .byte 3,96,7,240,7,240,15,248,15,248,29,172,43,118,93,174,0,0,7,224,15,240,8,176,4,80,15,248,3,96,3,0
00293Ar 3  07 F0 0F F8  
00293Er 3  0F F8 1D AC  
002956r 3  03 60 07 F0          .byte 3,96,7,240,7,240,15,248,15,248,29,172,43,118,93,174,0,0,7,224,15,240,8,176,4,80,15,248,3,96,0,96
00295Ar 3  07 F0 0F F8  
00295Er 3  0F F8 1D AC  
002976r 3  0F 78 11 9C          .byte 15,120,17,156,30,110,57,158,41,148,111,246,46,114,103,236,0,0,111,122,109,240,38,58,75,235,111,107,3,96,3,0
00297Ar 3  1E 6E 39 9E  
00297Er 3  29 94 6F F6  
002996r 3  0F 78 11 9C          .byte 15,120,17,156,30,110,57,158,41,148,111,246,46,50,103,236,0,0,111,122,109,240,38,58,75,235,111,107,3,96,0,96
00299Ar 3  1E 6E 39 9E  
00299Er 3  29 94 6F F6  
0029B6r 3  3F F0 7F F8          .byte 63,240,127,248,252,252,251,116,251,120,252,244,255,248,255,244,248,120,247,180,239,216,236,212,236,216,247,180,120,120,63,240
0029BAr 3  FC FC FB 74  
0029BEr 3  FB 78 FC F4  
0029D6r 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,139,81,159,241,89,225,47,210,28,244,24,100,15,196,23,136,43,0,12,48,28,112
0029DAr 3  4F FA 9F FA  
0029DEr 3  86 16 8B 51  
0029F6r 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,139,81,159,241,89,225,47,210,28,244,24,100,15,196,23,136,43,48,12,112,28,0
0029FAr 3  4F FA 9F FA  
0029FEr 3  86 16 8B 51  
002A16r 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,147,145,159,241,89,225,47,210,31,116,216,100,44,68,55,136,11,6,12,49,28,112
002A1Ar 3  4F FA 9F FA  
002A1Er 3  86 16 93 91  
002A36r 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,139,81,159,241,89,225,47,210,31,116,24,100,12,69,119,139,203,4,140,48,28,112
002A3Ar 3  4F FA 9F FA  
002A3Er 3  86 16 8B 51  
002A56r 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,216,83,224,63,220,57,190,31,119,0,99,10,243
002A5Ar 3  7F FE 80 63  
002A5Er 3  7F 9F 7F E1  
002A76r 3  0F FC 7F FE          .byte 15,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,216,83,224,63,220,57,190,31,119,0,99,10,243,21,240
002A7Ar 3  80 63 7F 9F  
002A7Er 3  7F E1 0C 77  
002A96r 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,216,83,224,46,192,49,128,31,122,64,108,58,240
002A9Ar 3  7F FE 80 63  
002A9Er 3  7F 9F 7F E1  
002AB6r 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,219,83,226,174,196,177,152,95,112,32,96,26,240
002ABAr 3  7F FE 80 63  
002ABEr 3  7F 9F 7F E1  
002AD6r 3  1F E0 75 F0          .byte 31,224,117,240,171,129,246,25,246,121,23,227,55,131,246,24,150,120,23,224,55,128,246,24,150,112,23,224,53,64,10,128
002ADAr 3  AB 81 F6 19  
002ADEr 3  F6 79 17 E3  
002AF6r 3  1F F0 3F F8          .byte 31,240,63,248,68,56,129,214,165,89,141,218,124,28,11,250,0,0,0,104,0,92,3,222,12,235,16,57,16,56,16,104
002AFAr 3  44 38 81 D6  
002AFEr 3  A5 59 8D DA  
002B16r 3  1F F0 3F F8          .byte 31,240,63,248,68,56,129,214,165,89,141,218,124,28,11,250,0,0,0,104,0,92,1,222,6,234,8,58,8,44,8,196
002B1Ar 3  44 38 81 D6  
002B1Er 3  A5 59 8D DA  
002B36r 3  0F F8 1F FC          .byte 15,248,31,252,28,34,107,129,154,165,91,177,56,62,95,208,0,0,22,0,58,0,123,192,215,48,156,8,28,8,22,8
002B3Ar 3  1C 22 6B 81  
002B3Er 3  9A A5 5B B1  
002B56r 3  0F F8 1F FC          .byte 15,248,31,252,28,34,107,129,154,165,91,177,56,62,95,208,0,0,22,0,58,0,123,128,87,96,92,16,52,16,35,16
002B5Ar 3  1C 22 6B 81  
002B5Er 3  9A A5 5B B1  
002B76r 3  3D D0 5F F8          .byte 61,208,95,248,129,11,76,101,65,11,63,247,28,122,7,224,0,0,1,224,2,24,3,252,27,230,33,226,32,224,33,160
002B7Ar 3  81 0B 4C 65  
002B7Er 3  41 0B 3F F7  
002B96r 3  3D D0 5F F8          .byte 61,208,95,248,129,11,76,101,65,11,63,247,28,250,7,224,0,0,1,224,2,24,3,252,11,230,17,236,16,176,19,16
002B9Ar 3  81 0B 4C 65  
002B9Er 3  41 0B 3F F7  
002BB6r 3  0B BC 1F FA          .byte 11,188,31,250,208,129,166,50,208,130,239,252,94,56,7,224,0,0,7,128,24,64,63,192,103,216,71,132,7,4,5,132
002BBAr 3  D0 81 A6 32  
002BBEr 3  D0 82 EF FC  
002BD6r 3  0B BC 1F FA          .byte 11,188,31,250,208,129,166,50,208,130,239,252,95,56,7,224,0,0,7,128,24,64,63,192,103,208,55,136,13,8,8,200
002BDAr 3  D0 81 A6 32  
002BDEr 3  D0 82 EF FC  
002BF6r 3  C3 00 BF 40          .byte 195,0,191,64,124,112,55,88,65,88,147,12,255,60,199,110,239,62,127,77,111,93,71,92,47,54,95,22,126,86,48,22
002BFAr 3  7C 70 37 58  
002BFEr 3  41 58 93 0C  
002C16r 3  C3 00 BF 40          .byte 195,0,191,64,124,112,55,88,65,88,147,12,255,60,199,110,239,62,127,77,111,93,67,92,39,54,95,22,126,86,48,80
002C1Ar 3  7C 70 37 58  
002C1Er 3  41 58 93 0C  
002C36r 3  00 C3 02 FD          .byte 0,195,2,253,14,62,26,236,26,130,48,201,60,255,118,227,124,247,178,254,186,246,58,226,108,244,104,250,106,126,104,12
002C3Ar 3  0E 3E 1A EC  
002C3Er 3  1A 82 30 C9  
002C56r 3  00 C3 02 FD          .byte 0,195,2,253,14,62,26,236,26,130,48,201,60,255,118,227,124,247,178,254,186,246,58,194,108,228,104,250,106,126,10,12
002C5Ar 3  0E 3E 1A EC  
002C5Er 3  1A 82 30 C9  
002C76r 3  27 7A 1E 2C          .byte 39,122,30,44,47,115,94,61,63,115,14,184,125,94,106,43,198,49,205,201,200,137,236,152,111,120,69,232,66,16,3,224
002C7Ar 3  2F 73 5E 3D  
002C7Er 3  3F 73 0E B8  
002C96r 3  27 7A 1E 2C          .byte 39,122,30,44,47,115,94,61,63,115,14,184,125,94,106,43,198,49,205,201,234,169,236,153,79,121,69,233,2,16,3,224
002C9Ar 3  2F 73 5E 3D  
002C9Er 3  3F 73 0E B8  
002CB6r 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,31,249,140,48,15,241,7,224,11,208,13,176,12,48,28,56
002CBAr 3  1F F8 39 9C  
002CBEr 3  35 AC 71 8E  
002CD6r 3               frmlst:
002CD6r 3  00 03                .byte 0,3
002CD8r 3  03 03                .byte 3,3
002CDAr 3  06 02                .byte 6,2
002CDCr 3  08 02                .byte 8,2
002CDEr 3  0A 01                .byte 10,1
002CE0r 3  0B 02                .byte 11,2
002CE2r 3  0D 02                .byte 13,2
002CE4r 3  0F 02                .byte 15,2
002CE6r 3  11 02                .byte 17,2
002CE8r 3  13 01                .byte 19,1
002CEAr 3  14 02                .byte 20,2
002CECr 3  16 02                .byte 22,2
002CEEr 3  18 02                .byte 24,2
002CF0r 3  1A 02                .byte 26,2
002CF2r 3  1C 02                .byte 28,2
002CF4r 3  1E 02                .byte 30,2
002CF6r 3  20 02                .byte 32,2
002CF8r 3  22 01 23 00          .byte 34,1,35,0
002CFCr 3               scdat:
002CFCr 3  69 01 02 01          .word 361,258,401,340,366,339,264,198,248,214,200,368,404,372,403,411,336,427,374,353,413,237,223,215,187,336
002D00r 3  91 01 54 01  
002D04r 3  6E 01 53 01  
002D30r 3  46 01 58 01          .word 326,344,324,345
002D34r 3  44 01 59 01  
002D38r 3  DA DA 5E 5C          .byte 218,218,94,92,218,218,218,94,218,218,94,218,218,92,218,218,94,218,220,218,94,218,94,255,218,4,94,255,218,5,94,94,218,218
002D3Cr 3  DA DA DA 5E  
002D40r 3  DA DA 5E DA  
002D5Ar 3  5E DA DA 5E          .byte 94,218,218,94,218,218,95,95,255,0,19,31,94,95,255,0,19,32,95,94,4,4,218,94,93,218,218,0,218,218,218,4,4
002D5Er 3  DA DA 5F 5F  
002D62r 3  FF 00 13 1F  
002D7Br 3  DA DA 04 04          .byte 218,218,4,4,218,218,33,94,95,4,4,255,218,9,4,4,220,94,4,4,218,218,34,95,94,4,4,94,218,220,95,93,219,219
002D7Fr 3  DA DA 21 5E  
002D83r 3  5F 04 04 FF  
002D9Dr 3  5F DA 04 04          .byte 95,218,4,4,219,219,4,4,95,218,218,94,95,4,4,218,94,218,219,219,94,219,219,94,4,4,219,94,4,4,94,220,218
002DA1r 3  DB DB 04 04  
002DA5r 3  5F DA DA 5E  
002DBEr 3  5F 5E 04 04          .byte 95,94,4,4,218,218,218,255,0,6,4,4,0,0,4,4,0,0,0,94,95,4,4,94,218,218,255,0,6,4,4,0,0
002DC2r 3  DA DA DA FF  
002DC6r 3  00 06 04 04  
002DDFr 3  04 04 00 00          .byte 4,4,0,0,0,95,0,4,4,218,218,94,4,4,218,94,219,219,94,219,219,94,218,218,94,95,94,94,0,4,4,218,219
002DE3r 3  00 5F 00 04  
002DE7r 3  04 DA DA 5E  
002E00r 3  DA 04 04 DA          .byte 218,4,4,218,219,219,94,219,219,219,94,218,218,94,218,218,95,219,4,4,0,0,218,4,4,255,0,12,33,94,93,4,4
002E04r 3  DB DB 5E DB  
002E08r 3  DB DB 5E DA  
002E21r 3  00 00 DA 04          .byte 0,0,218,4,4,255,0,9,225,0,0,34,95,218,95,95,4,4,94,219,219,219,94,219,219,94,4,4,218,255,200,4,203
002E25r 3  04 FF 00 09  
002E29r 3  E1 00 00 22  
002E42r 3  5E 5D 5D DC          .byte 94,93,93,220,4,4,218,94,219,219,219,94,219,219,4,4,218,255,205,5,95,94,92,218,4,4,255,0,8,4,4,255,0,5
002E46r 3  04 04 DA 5E  
002E4Ar 3  DB DB DB 5E  
002E64r 3  CD 5E 21 5E          .byte 205,94,33,94,220,4,4,255,0,8,4,4,255,0,5,205,95,34,95,95,218,218,94,218,218,94,94,218,94,218,218,94,218,218
002E68r 3  DC 04 04 FF  
002E6Cr 3  00 08 04 04  
002E86r 3  5E DA DA DA          .byte 94,218,218,218,94,95,94,218,218,94,95,94,218,220,218,95,94,218,94,218,94,218,95,94,218,94,218
002E8Ar 3  5E 5F 5E DA  
002E8Er 3  DA 5E 5F 5E  
002EA1r 3  FF 4D 16 FF          .byte 255,77,22,255,79,22,255,0,44,255,77,4,38,39,40,41,255,77,7,38,39,40,41,77,77,77,78,145,146,78,42,4,4
002EA5r 3  4F 16 FF 00  
002EA9r 3  2C FF 4D 04  
002EC2r 3  BE 4E 4E 4E          .byte 190,78,78,78,110,111,78,78,42,4,4,190,255,78,4,147,148,78,42,4,4,190,78,78,78,112,113,78,78,42,4,4,190
002EC6r 3  6E 6F 4E 4E  
002ECAr 3  2A 04 04 BE  
002EE3r 3  FF 4E 07 2A          .byte 255,78,7,42,4,4,190,255,78,7,42,4,4,190,255,78,7,42,4,4,190,255,78,7,42,4,4,191,78,78,78,255,79,4
002EE7r 3  04 04 BE FF  
002EEBr 3  4E 07 2A 04  
002F05r 3  2B 04 04 BF          .byte 43,4,4,191,255,79,7,43,4,4,191,79,79,79,255,0,5,4,4,255,0,9,4,4,255,0,9,4,4,255,0,9,4,4
002F09r 3  FF 4F 07 2B  
002F0Dr 3  04 04 BF 4F  
002F27r 3  FF 00 04 4D          .byte 255,0,4,77,38,39,40,41,255,77,5,38,39,40,41,77,77,77,38,39,40,41,77,78,42,4,4,190,255,78,5,42,4,4
002F2Br 3  26 27 28 29  
002F2Fr 3  FF 4D 05 26  
002F49r 3  BE 4E 4E 4E          .byte 190,78,78,78,42,4,4,190,78,78,42,4,4,190,78,165,166,78,78,42,4,4,190,78,161,162,42,4,4,190,78,79,43
002F4Dr 3  2A 04 04 BE  
002F51r 3  4E 4E 2A 04  
002F6Ar 3  04 04 BF 4F          .byte 4,4,191,79,167,168,79,79,43,4,4,191,79,163,164,43,4,4,191,79,0,0,4,4,255,0,7,4,4,255,0,5,4,4
002F6Er 3  A7 A8 4F 4F  
002F72r 3  2B 04 04 BF  
002F8Cr 3  FF 00 04 04          .byte 255,0,4,4,4,255,0,7,4,4,255,0,5,4,4,0,0,255,77,22,255,79,22
002F90r 3  04 FF 00 07  
002F94r 3  04 04 FF 00  
002FA3r 3  5D DA 5F DA          .byte 93,218,95,218,218,94,218,218,218,94,218,218,220,220,218,94,218,220,218,94,218,94,218,218,95,93,218,94,218,33,93,218,94
002FA7r 3  DA 5E DA DA  
002FABr 3  DA 5E DA DA  
002FC4r 3  DA DA 5E DA          .byte 218,218,94,218,218,94,218,218,94,95,255,218,4,0,0,93,218,34,218,218,0,0,218,218,218,255,0,6,218,218,218,95,0,0
002FC8r 3  DA 5E DA DA  
002FCCr 3  5E 5F FF DA  
002FE6r 3  DA 5F 1F DA          .byte 218,95,31,218,95,4,4,218,33,218,255,0,5,234,218,221,222,218,4,4,218,218,32,95,218,4,4,218,34,218,4,4,93
002FEAr 3  5F 04 04 DA  
002FEEr 3  21 DA FF 00  
003007r 3  DC DA DA DA          .byte 220,218,218,218,223,224,95,4,4,218,95,218,218,93,4,4,94,220,218,4,4,218,218,95,218,95,218,95,218,4,4,219,95
00300Br 3  DF E0 5F 04  
00300Fr 3  04 DA 5F DA  
003028r 3  5D 5E 5F 04          .byte 93,94,95,4,4,218,218,95,4,4,218,218,218,95,218,94,218,95,4,4,255,218,5,4,4,218,218,218,4,4,255,218,6
00302Cr 3  04 DA DA 5F  
003030r 3  04 04 DA DA  
003049r 3  DC 5F 04 04          .byte 220,95,4,4,255,0,5,4,4,0,0,0,4,4,255,0,5,218,218,218,4,4,255,0,5,4,4,0,0,0,4,4,255,0,5
00304Dr 3  FF 00 05 04  
003051r 3  04 00 00 00  
00306Cr 3  DA 5E DA 04          .byte 218,94,218,4,4,94,218,4,4,218,218,95,218,4,4,218,220,218,93,95,95,218,218,218,95,4,4,218,95,4,4,218,93
003070r 3  04 5E DA 04  
003074r 3  04 DA DA 5F  
00308Dr 3  DA DA 04 04          .byte 218,218,4,4,218,95,218,220,218,218,220,94,220,218,4,4,218,94,4,4,255,0,4,4,4,255,0,6,95,218,94,95,4,4
003091r 3  DA 5F DA DC  
003095r 3  DA DA DC 5E  
0030AFr 3  5E DA 04 04          .byte 94,218,4,4,255,0,4,4,4,255,0,6,219,0,0,0,4,4,218,95,93,95,218,94,93,218,4,4,93,4,4,93,4,4
0030B3r 3  FF 00 04 04  
0030B7r 3  04 FF 00 06  
0030D1r 3  5F 00 00 00          .byte 95,0,0,0,4,4,218,218,95,255,218,4,94,4,4,218,4,4,218,4,4,255,218,4,4,4,255,0,8,4,4,218,4,4
0030D5r 3  04 04 DA DA  
0030D9r 3  5F FF DA 04  
0030F3r 3  5D 04 04 5F          .byte 93,4,4,95,218,218,218,4,4,255,0,8,4,4,93,4,4,218,4,4,218,94,94,218,93,95,94,218,93,94,218,93,218,218
0030F7r 3  DA DA DA 04  
0030FBr 3  04 FF 00 08  
003115r 3  5D 5E DA 5D          .byte 93,94,218,93,218,218,93,218,218,218,94,95,218,218,94,218,218,218,94,218,218,94,218,220,218,94,218,218,94,94,95
003119r 3  DA DA 5D DA  
00311Dr 3  DA DA 5E 5F  
003134r 3  01 C4 01 01          .byte 1,196,1,1,1,197,1,195,1,1,195,1,1,197,255,1,4,196,255,1,4,197,1,196,1,1,1,196,1,3,1,196,1,1,1
003138r 3  01 C5 01 C3  
00313Cr 3  01 01 C3 01  
003157r 3  C3 01 01 C3          .byte 195,1,1,195,1,197,1,1,255,0,21,1,255,0,21,33,5,6,9,4,4,11,12,13,33,1,1,1,33,5,6,9,4,4
00315Br 3  01 C5 01 01  
00315Fr 3  FF 00 15 01  
003179r 3  0B 0C 0D 22          .byte 11,12,13,34,7,8,93,4,4,93,14,15,34,1,1,1,34,7,8,93,4,4,93,14,15,1,0,0,0,4,4,255,0,11
00317Dr 3  07 08 5D 04  
003181r 3  04 5D 0E 0F  
00319Br 3  04 04 00 00          .byte 4,4,0,0,0,1,0,0,0,4,4,255,0,11,4,4,0,0,0,195,3,1,197,1,195,1,33,5,6,9,4,4,11
00319Fr 3  00 01 00 00  
0031A3r 3  00 04 04 FF  
0031BCr 3  0C 0D 21 C5          .byte 12,13,33,197,1,197,195,1,197,195,1,1,197,3,1,34,7,8,93,4,4,93,14,15,34,1,195,3,1,3,1,255,0,10
0031C0r 3  01 C5 C3 01  
0031C4r 3  C5 C3 01 01  
0031DEr 3  04 04 FF 00          .byte 4,4,255,0,9,1,255,0,10,4,4,255,0,9,1,1,33,5,6,9,4,4,11,12,13,33,33,5,6,9,4,4,11
0031E2r 3  09 01 FF 00  
0031E6r 3  0A 04 04 FF  
0031FFr 3  0C 0D 21 01          .byte 12,13,33,1,1,34,7,8,93,4,4,93,14,15,34,34,7,8,93,4,4,93,12,15,34,1,255,0,5,4,4,255,0,8
003203r 3  01 22 07 08  
003207r 3  5D 04 04 5D  
003221r 3  04 04 FF 00          .byte 4,4,255,0,4,1,0,0,225,0,0,4,4,255,0,5,234,0,0,4,4,255,0,4,196,1,1,1,3,1,1,195,1
003225r 3  04 01 00 00  
003229r 3  E1 00 00 04  
003242r 3  C5 01 03 01          .byte 197,1,3,1,197,1,3,1,1,1,3,255,1,5,196,1,1,3,1,195,1,1,197,1,1,1,196,1,196,1,3,196,1,1
003246r 3  C5 01 03 01  
00324Ar 3  01 01 03 FF  
003264r 3  C3 C5 01 C3          .byte 195,197,1,195,255,1,6,196,197,1,1,1,196,255,1,7,197,1,1,1,196,1,1,195,1,195,1,3,1,1,195,1,197,197
003268r 3  FF 01 06 C4  
00326Cr 3  C5 01 01 01  
003286r 3  C4 01                .byte 196,1
003288r 3  DA 5D DA 5E          .byte 218,93,218,94,93,218,94,218,218,93,218,25,26,218,218,94,218,218,93,218,94,93,218,94,93,255,218,4,93,218,94,255,218,5
00328Cr 3  5D DA 5E DA  
003290r 3  DA 5D DA 19  
0032AAr 3  5D DA DA 5E          .byte 93,218,218,94,255,218,4,94,0,0,218,255,0,16,95,218,95,0,0,218,255,0,16,94,94,94,4,4,218,93,218,4,4
0032AEr 3  FF DA 04 5E  
0032B2r 3  00 00 DA FF  
0032CBr 3  5D DA C7 C8          .byte 93,218,199,200,200,203,218,92,218,218,4,4,95,218,95,4,4,218,218,218,4,4,218,218,207,0,0,203,33,218,93,218,4,4
0032CFr 3  C8 CB DA 5C  
0032D3r 3  DA DA 04 04  
0032EDr 3  5F DA 5F 04          .byte 95,218,95,4,4,0,0,0,4,4,0,225,199,0,0,203,34,218,0,0,4,4,94,94,94,4,4,0,0,0,4,4,0,0
0032F1r 3  04 00 00 00  
0032F5r 3  04 04 00 E1  
00330Fr 3  CF CD CD CD          .byte 207,205,205,205,218,218,0,0,4,4,95,218,95,4,4,218,218,218,94,218,218,92,93,255,218,5,4,4,218,218,94,218,94
003313r 3  DA DA 00 00  
003317r 3  04 04 5F DA  
003330r 3  04 04 FF DA          .byte 4,4,255,218,13,4,4,218,218,95,218,95,4,4,255,0,13,4,4,0,0,94,218,94,4,4,255,0,13,4,4,0,0
003334r 3  0D 04 04 DA  
003338r 3  DA 5F DA 5F  
003351r 3  5F DA 5F DA          .byte 95,218,95,218,218,92,4,4,218,93,4,4,218,4,4,218,4,4,218,92,4,4,94,94,94,218,218,218,4,4,92,218,4,4
003355r 3  DA 5C 04 04  
003359r 3  DA 5D 04 04  
003373r 3  DA 04 04 DA          .byte 218,4,4,218,4,4,93,218,4,4,95,218,95,4,4,218,4,4,93,218,4,4,218,4,4,218,4,4,92,218,4,4,94
003377r 3  04 04 5D DA  
00337Br 3  04 04 5F DA  
003394r 3  21 5E 04 04          .byte 33,94,4,4,218,4,4,218,218,4,4,218,4,4,218,4,4,218,93,4,4,95,34,95,4,4,0,4,4,0,0,4,4
003398r 3  DA 04 04 DA  
00339Cr 3  DA 04 04 DA  
0033B5r 3  00 04 04 00          .byte 0,4,4,0,4,4,0,0,4,4,0,94,94,4,4,0,4,4,0,0,4,4,0,4,4,0,4,4,0,0,4,4,0
0033B9r 3  04 04 00 00  
0033BDr 3  04 04 00 5E  
0033D6r 3  DA 5F FF DA          .byte 218,95,255,218,15,92,93,218,94,218,94,94,218,218,93,218,218,94,218,218,94,218,93,218,218,94,218,93,218,218,94,218
0033DAr 3  0F 5C 5D DA  
0033DEr 3  5E DA 5E 5E  
0033F6r 3  01 01 C5 01          .byte 1,1,197,1,196,1,31,1,1,1,196,1,1,196,1,31,1,196,195,2,196,198,198,1,196,195,255,1,4,197,1,2,195
0033FAr 3  C4 01 1F 01  
0033FEr 3  01 01 C4 01  
003417r 3  02 FF 01 04          .byte 2,255,1,4,2,1,196,1,1,255,0,21,197,255,0,21,198,33,5,6,9,4,4,11,12,13,33,1,195,1,33,5,6
00341Br 3  02 01 C4 01  
00341Fr 3  01 FF 00 15  
003438r 3  09 04 04 0B          .byte 9,4,4,11,12,13,34,7,8,93,4,4,93,14,15,34,1,1,1,34,7,8,93,4,4,93,14,15,255,0,4,4,4
00343Cr 3  0C 0D 22 07  
003440r 3  08 5D 04 04  
003459r 3  FF 00 0B 04          .byte 255,0,11,4,4,255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5,6,9,4,4,11,12
00345Dr 3  04 FF 00 07  
003461r 3  04 04 FF 00  
00347Ar 3  0D 21 C4 C4          .byte 13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1,198,1,195,255,0,11,4,4
00347Er 3  01 01 C4 C5  
003482r 3  C4 01 01 C3  
00349Cr 3  FF 00 08 C6          .byte 255,0,8,198,255,0,11,4,4,255,0,8,197,196,1,33,5,6,9,4,4,11,12,13,1,196,5,6,9,4,4,11,12
0034A0r 3  FF 00 0B 04  
0034A4r 3  04 FF 00 08  
0034BDr 3  0D 21 01 C4          .byte 13,33,1,196,34,7,8,93,4,4,93,14,15,196,1,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8,4,4
0034C1r 3  22 07 08 5D  
0034C5r 3  04 04 5D 0E  
0034DFr 3  00 00 00 C6          .byte 0,0,0,198,255,0,6,4,4,255,0,8,4,4,0,0,0,197,195,1,1,195,2,197,1,196,1,2,1,1,2,196,1
0034E3r 3  FF 00 06 04  
0034E7r 3  04 FF 00 08  
003500r 3  C4 01 C4 01          .byte 196,1,196,1,1,1,2,1,1,31,196,1,196,3,1,196,198,1,31,196,1,1,198,196,1,31,1,2,1,1,2,1,1
003504r 3  01 01 02 01  
003508r 3  01 1F C4 01  
003521r 3  03 01 C4 C4          .byte 3,1,196,196,1,1,1,32,1,2,1,3,2,2,1,1,2,196,1,196,1,2,198,196,196,1,196,1,196,1,195,2,1
003525r 3  01 01 01 20  
003529r 3  01 02 01 03  
003542r 3  C4 C6 C5 02          .byte 196,198,197,2,196,1,196
003546r 3  C4 01 C4     
003549r 3  FF 24 08 2C          .byte 255,36,8,44,45,46,47,45,48,255,36,8,255,189,8,49,50,51,52,53,54,255,189,16,49,55,56,57,58,54,255,189,8
00354Dr 3  2D 2E 2F 2D  
003551r 3  30 FF 24 08  
00356Ar 3  FF 25 08 3B          .byte 255,37,8,59,60,61,62,63,54,255,37,8,255,0,44,255,36,4,38,39,40,41,36,36,36,177,178,36,36,36,38,39,40
00356Er 3  3C 3D 3E 3F  
003572r 3  36 FF 25 08  
00358Br 3  29 24 24 FF          .byte 41,36,36,255,189,4,42,4,4,190,189,189,189,179,180,189,189,189,42,4,4,190,255,189,6,42,4,4,190,189,189,189,139
00358Fr 3  BD 04 2A 04  
003593r 3  04 BE BD BD  
0035ACr 3  8C BD BD BD          .byte 140,189,189,189,42,4,4,190,189,189,255,37,4,43,4,4,191,189,37,37,143,144,37,37,37,43,4,4,191,37,37,255,0,5
0035B0r 3  2A 04 04 BE  
0035B4r 3  BD BD FF 25  
0035CEr 3  04 04 FF 00          .byte 4,4,255,0,10,4,4,255,0,8,4,4,255,0,10,4,4,0,0,0,255,36,7,38,39,40,41,36,36,38,39,40,41
0035D2r 3  0A 04 04 FF  
0035D6r 3  00 08 04 04  
0035EFr 3  FF 24 05 BD          .byte 255,36,5,189,189,118,119,189,189,189,42,4,4,190,189,189,42,4,4,190,189,189,118,119,189,189,189,122,123,189,189,189,42
0035F3r 3  BD 76 77 BD  
0035F7r 3  BD BD 2A 04  
003610r 3  04 04 BE BD          .byte 4,4,190,189,189,42,4,4,190,189,189,120,121,189,189,189,90,91,189,189,189,42,4,4,190,189,189,42,4,4,190,189,189
003614r 3  BD 2A 04 04  
003618r 3  BE BD BD 78  
003631r 3  5A 5B 25 FF          .byte 90,91,37,255,0,8,4,4,255,0,4,4,4,255,0,14,4,4,255,0,4,4,4,255,0,6,255,36,22,255,37,22
003635r 3  00 08 04 04  
003639r 3  FF 00 04 04  
003651r 3  FF 24 16 FF          .byte 255,36,22,255,189,14,173,174,255,189,10,102,103,255,189,8,175,176,255,189,6,255,37,4,104,105,255,37,16,1,255,0,21
003655r 3  BD 0E AD AE  
003659r 3  FF BD 0A 66  
003672r 3  03 FF 00 15          .byte 3,255,0,21,255,36,4,38,39,40,41,255,36,14,255,189,4,42,4,4,190,255,189,5,110,111,255,189,11,42,4,4,190
003676r 3  FF 24 04 26  
00367Ar 3  27 28 29 FF  
003693r 3  FF BD 05 70          .byte 255,189,5,112,113,255,189,7,255,37,4,43,4,4,191,255,37,14,220,255,0,4,4,4,255,0,15,218,255,0,4,4,4
003697r 3  71 FF BD 07  
00369Br 3  FF 25 04 2B  
0036B4r 3  FF 00 0F FF          .byte 255,0,15,255,36,8,189,255,36,4,38,39,40,41,255,36,5,255,189,13,42,4,4,190,255,189,7,153,154,155,156,255,189,7
0036B8r 3  24 08 BD FF  
0036BCr 3  24 04 26 27  
0036D6r 3  2A 04 04 BE          .byte 42,4,4,190,189,189,139,140,189,37,37,157,158,159,160,255,37,7,42,4,4,190,37,37,143,144,37,3,255,0,13,4,4
0036DAr 3  BD BD 8B 8C  
0036DEr 3  BD 25 25 9D  
0036F7r 3  FF 00 06 02          .byte 255,0,6,2,255,0,13,4,4,255,0,6,255,36,8,38,39,40,41,255,36,10,255,37,8,42,4,4,190,255,37,10
0036FBr 3  FF 00 0D 04  
0036FFr 3  04 FF 00 06  
003717r 3  FF 24 08 26          .byte 255,36,8,38,39,40,41,255,36,10,189,189,189,96,97,189,189,189,42,0,0,190,255,189,13,98,99,189,189,189,42,4,4
00371Br 3  27 28 29 FF  
00371Fr 3  24 0A BD BD  
003738r 3  BE FF BD 0A          .byte 190,255,189,10,255,37,8,43,4,4,191,189,189,255,37,8,255,0,9,4,4,255,0,9,165,166,255,0,9,4,4,255,0,6
00373Cr 3  FF 25 08 2B  
003740r 3  04 04 BF BD  
00375Ar 3  E1 00 00 A7          .byte 225,0,0,167,168,36,36,38,39,40,41,255,36,6,38,39,40,41,255,36,6,189,189,42,4,4,190,255,189,6,42,4,4
00375Er 3  A8 24 24 26  
003762r 3  27 28 29 FF  
00377Br 3  BE FF BD 08          .byte 190,255,189,8,42,4,4,190,189,189,165,166,189,189,42,4,4,190,255,189,6,37,37,43,4,4,191,37,37,167,168,37,37
00377Fr 3  2A 04 04 BE  
003783r 3  BD BD A5 A6  
00379Cr 3  2B 04 04 BF          .byte 43,4,4,191,255,37,6,0,0,0,4,4,255,0,8,4,4,255,0,6,197,0,0,0,4,4,255,0,8,4,4,255,0,6
0037A0r 3  FF 25 06 00  
0037A4r 3  00 00 04 04  
0037BEr 3  C6 FF 24 07          .byte 198,255,36,7,38,39,40,41,255,36,11,189,189,189,145,146,189,189,42,4,4,190,255,189,7,185,186,255,189,5,147,148,189,189
0037C2r 3  26 27 28 29  
0037C6r 3  FF 24 0B BD  
0037E0r 3  2A 04 04 BE          .byte 42,4,4,190,255,189,7,187,188,189,189,255,37,7,42,4,4,190,255,37,11,255,0,8,4,4,255,0,10,171,172,255,0,8
0037E4r 3  FF BD 07 BB  
0037E8r 3  BC BD BD FF  
003802r 3  04 04 FF 00          .byte 4,4,255,0,10,169,170,255,36,22,255,37,22
003806r 3  0A A9 AA FF  
00380Ar 3  24 16 FF 25  
00380Fr 3  FF 4D 16 FF          .byte 255,77,22,255,79,22,255,0,16,234,0,0,0,165,166,255,0,20,167,168,255,77,7,38,39,40,41,255,77,11,78,78,185
003813r 3  4F 16 FF 00  
003817r 3  10 EA 00 00  
003830r 3  BA 4E 4E 4E          .byte 186,78,78,78,42,4,4,190,78,145,146,255,78,4,185,186,255,78,4,187,188,78,78,78,42,4,4,190,78,147,148,255,78,4
003834r 3  2A 04 04 BE  
003838r 3  4E 91 92 FF  
003852r 3  BB BC FF 4E          .byte 187,188,255,78,9,42,4,4,190,255,78,18,42,4,4,190,255,78,11,255,79,7,43,4,4,191,255,79,11,255,0,8,4,4
003856r 3  09 2A 04 04  
00385Ar 3  BE FF 4E 12  
003874r 3  FF 00 0A A1          .byte 255,0,10,161,162,255,0,8,4,4,255,0,10,163,164,255,77,9,44,45,46,47,45,48,77,38,39,40,41,77,77,78,114
003878r 3  A2 FF 00 08  
00387Cr 3  04 04 FF 00  
003895r 3  73 4E 4E 6A          .byte 115,78,78,106,107,78,78,49,50,51,52,53,54,78,42,4,4,190,78,78,78,116,117,78,78,108,109,78,78,49,55,56,57
003899r 3  6B 4E 4E 31  
00389Dr 3  32 33 34 35  
0038B6r 3  3A 36 4E 2A          .byte 58,54,78,42,4,4,190,78,78,255,79,9,49,60,61,62,63,54,79,43,4,4,191,79,79,255,0,17,4,4,0,88,89
0038BAr 3  04 04 BE 4E  
0038BEr 3  4E FF 4F 09  
0038D7r 3  FF 00 11 04          .byte 255,0,17,4,4,0,90,91,255,77,22,255,79,22
0038DBr 3  04 00 5A 5B  
0038DFr 3  FF 4D 16 FF  
0038E5r 3  4D 4D 26 27          .byte 77,77,38,39,40,41,255,77,16,79,79,42,4,4,190,255,79,16,1,0,0,4,4,255,0,17,2,0,0,4,4,255,0,17
0038E9r 3  28 29 FF 4D  
0038EDr 3  10 4F 4F 2A  
003907r 3  FF 4D 0B 26          .byte 255,77,11,38,39,40,41,255,77,7,255,78,11,42,4,4,190,78,78,114,115,255,78,14,42,4,4,190,78,78,116,117,255,78,14
00390Br 3  27 28 29 FF  
00390Fr 3  4D 07 FF 4E  
00392Ar 3  2A 04 04 BE          .byte 42,4,4,190,255,78,18,42,4,4,190,255,78,7,255,79,11,43,4,4,190,255,79,7,218,255,0,11,4,4,255,0,8
00392Er 3  FF 4E 12 2A  
003932r 3  04 04 BE FF  
00394Br 3  DB FF 00 0B          .byte 219,255,0,11,4,4,255,0,8,255,77,17,38,39,40,41,77,78,78,78,110,111,255,78,6,165,166,255,78,4,42,4,4
00394Fr 3  04 04 FF 00  
003953r 3  08 FF 4D 11  
00396Cr 3  BE FF 4E 04          .byte 190,255,78,4,112,113,255,78,6,167,168,255,78,4,42,4,4,190,78,255,79,17,43,4,4,191,79,161,162,255,0,16,4,4
003970r 3  70 71 FF 4E  
003974r 3  06 A7 A8 FF  
00398Er 3  00 00 A3 A4          .byte 0,0,163,164,255,0,16,4,4,0,0,255,77,8,38,39,40,41,255,77,10,255,79,8,42,4,4,190,255,79,10
003992r 3  FF 00 10 04  
003996r 3  04 00 00 FF  
0039ADr 3  DA DA DC DA          .byte 218,218,220,218,218,94,220,218,218,94,219,220,255,218,4,94,219,0,0,218,95,218,95,218,95,220,218,220,95,218,220,218,218,218
0039B1r 3  DA 5E DC DA  
0039B5r 3  DA 5E DB DC  
0039CFr 3  5F DA DB DC          .byte 95,218,219,220,95,4,4,218,94,218,220,95,255,0,15,4,4,0,95,218,218,218,255,0,15,4,4,0,94,218,219,218,4,4
0039D3r 3  5F 04 04 DA  
0039D7r 3  5E DA DC 5F  
0039F1r 3  DA DA 5E 5F          .byte 218,218,94,95,219,218,94,218,4,4,95,219,220,218,220,218,95,218,218,220,4,4,255,219,8,4,4,93,218,220,218,93,218
0039F5r 3  DB DA 5E DA  
0039F9r 3  04 04 5F DB  
003A12r 3  5E DC DA 5F          .byte 94,220,218,95,4,4,255,0,7,95,4,4,0,0,218,221,222,0,95,219,219,219,4,4,255,0,7,218,4,4,0,0,94
003A16r 3  04 04 FF 00  
003A1Ar 3  07 5F 04 04  
003A33r 3  DF E0 00 5E          .byte 223,224,0,94,0,0,0,4,4,218,94,218,95,219,218,219,95,93,95,4,4,218,220,93,218,95,0,0,0,4,4,255,219,8
003A37r 3  00 00 00 04  
003A3Br 3  04 DA 5E DA  
003A55r 3  5D 5E 04 04          .byte 93,94,4,4,218,218,93,218,94,218,218,220,4,4,255,0,8,219,95,4,4,255,0,5,220,218,94,4,4,255,0,8,92
003A59r 3  DA DA 5D DA  
003A5Dr 3  5E DA DA DC  
003A76r 3  5E 04 04 FF          .byte 94,4,4,255,0,5,218,219,95,4,4,95,218,4,4,93,95,4,4,93,95,4,4,218,218,4,4,218,219,220,94,4,4
003A7Ar 3  00 05 DA DB  
003A7Er 3  5F 04 04 5F  
003A97r 3  5E DB 04 04          .byte 94,219,4,4,218,220,4,4,218,94,4,4,95,218,4,4,94,219,218,95,4,4,218,95,4,4,94,219,4,4,218,218,4,4
003A9Br 3  DA DC 04 04  
003A9Fr 3  DA 5E 04 04  
003AB9r 3  DA 5E 04 04          .byte 218,94,4,4,95,218,219,220,4,4,219,93,4,4,95,95,4,4,218,218,4,4,94,218,4,4,94,218,218,95,4,4,0,0
003ABDr 3  5F DA DB DC  
003AC1r 3  04 04 DB 5D  
003ADBr 3  04 04 00 00          .byte 4,4,0,0,4,4,0,0,4,4,0,0,4,4,33,220,219,94,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,0
003ADFr 3  04 04 00 00  
003AE3r 3  04 04 00 00  
003AFDr 3  04 04 22 DB          .byte 4,4,34,219,220,95,255,218,18,95,219,218,95,93,218,218,220,93,218,218,220,93,219,220,93,219,220,218,220,93,218,219
003B01r 3  DC 5F FF DA  
003B05r 3  12 5F DB DA  
003B1Dr 3  C6 01 C5 C4          .byte 198,1,197,196,1,1,196,1,198,1,198,1,196,1,198,1,1,196,1,196,255,1,4,198,1,198,1,197,255,1,4,197,198
003B21r 3  01 01 C4 01  
003B25r 3  C6 01 C6 01  
003B3Er 3  01 01 01 C4          .byte 1,1,1,196,1,196,198,196,1,18,19,20,255,0,11,196,255,0,7,22,0,21,255,0,11,1,255,0,7,3,0,3,4,4
003B42r 3  01 C4 C6 C4  
003B46r 3  01 12 13 14  
003B60r 3  C6 04 04 03          .byte 198,4,4,3,18,19,20,4,4,1,4,4,1,198,1,1,196,3,198,3,4,4,197,4,4,3,22,0,21,4,4,3,4,4
003B64r 3  12 13 14 04  
003B68r 3  04 01 04 04  
003B82r 3  C4 C5 03 1F          .byte 196,197,3,31,196,0,0,0,4,4,198,4,4,3,73,0,72,4,4,3,4,4,195,198,3,3,198,0,0,0,4,4,197
003B86r 3  C4 00 00 00  
003B8Ar 3  04 04 C6 04  
003BA3r 3  04 04 03 49          .byte 4,4,3,73,0,72,4,4,3,4,4,196,2,198,1,1,198,4,4,3,198,0,4,4,255,0,4,4,4,0,4,4,255,0,4
003BA7r 3  00 48 04 04  
003BABr 3  03 04 04 C4  
003BC6r 3  C4 C5 04 04          .byte 196,197,4,4,3,197,0,4,4,255,0,4,4,4,0,4,4,255,0,4,196,198,4,4,3,198,3,197,1,197,197,1,4,4
003BCAr 3  03 C5 00 04  
003BCEr 3  04 FF 00 04  
003BE8r 3  03 C6 03 01          .byte 3,198,3,1,4,4,3,3,198,197,4,4,196,197,195,3,197,1,197,196,4,4,198,1,1,198,4,4,198,1,1,198,4,4
003BECr 3  04 04 03 03  
003BF0r 3  C6 C5 04 04  
003C0Ar 3  C5 C6 C5 03          .byte 197,198,197,3,197,0,0,3,4,4,255,0,4,4,4,0,0,198,197,4,4,198,198,2,198,3,0,0,196,4,4,255,0,4
003C0Er 3  C5 00 00 03  
003C12r 3  04 04 FF 00  
003C2Cr 3  04 04 00 00          .byte 4,4,0,0,197,198,4,4,197,221,222,196,198,4,4,198,4,4,3,31,4,4,197,198,4,4,198,196,4,4,198,223,224
003C30r 3  C5 C6 04 04  
003C34r 3  C5 DD DE C4  
003C4Dr 3  03 03 04 04          .byte 3,3,4,4,3,4,4,197,32,4,4,198,197,4,4,197,197,4,4,255,0,5,4,4,196,4,4,0,0,4,4,0,0
003C51r 3  03 04 04 C5  
003C55r 3  20 04 04 C6  
003C6Er 3  04 04 C6 C6          .byte 4,4,198,198,4,4,255,0,5,4,4,198,4,4,0,0,4,4,0,0,4,4,1,3,197,3,3,196,197,3,196,4,4
003C72r 3  04 04 FF 00  
003C76r 3  05 04 04 C6  
003C8Fr 3  C5 03 03 C5          .byte 197,3,3,197,3,3,196,197,196,3,3,196,197,3,3,197,198,3,197,3,4,4,198,3,198,3,3,197,198,3,3,197,3
003C93r 3  03 03 C4 C5  
003C97r 3  C4 03 03 C4  
003CB0r 3  01                   .byte 1
003CB1r 3  DA 5E 5D 5E          .byte 218,94,93,94,218,218,218,93,218,25,26,218,218,218,94,218,93,218,94,94,255,218,5,95,94,93,218,94,218,95,218,218,93
003CB5r 3  DA DA DA 5D  
003CB9r 3  DA 19 1A DA  
003CD2r 3  5E DA DA 5E          .byte 94,218,218,94,218,218,95,93,95,255,0,21,94,255,0,21,95,218,95,95,218,95,4,4,93,94,93,218,95,4,4,95,95
003CD6r 3  DA DA 5F 5D  
003CDAr 3  5F FF 00 15  
003CF3r 3  DA DA DA 5D          .byte 218,218,218,93,95,218,218,94,95,33,94,4,4,92,95,33,218,94,4,4,219,219,219,0,219,219,219,218,94,218,93,34,95
003CF7r 3  5F DA DA 5E  
003CFBr 3  5F 21 5E 04  
003D14r 3  04 04 5E DA          .byte 4,4,94,218,34,95,218,4,4,95,95,34,218,94,93,218,95,94,95,93,219,219,4,4,219,93,219,219,93,4,4,219,93
003D18r 3  22 5F DA 04  
003D1Cr 3  04 5F 5F 22  
003D35r 3  DB 5D DB 5D          .byte 219,93,219,93,219,218,218,94,0,0,0,4,4,255,0,5,4,4,255,0,4,225,0,0,95,218,95,0,0,0,4,4,255,0,5
003D39r 3  DB DA DA 5E  
003D3Dr 3  00 00 00 04  
003D58r 3  04 04 FF 00          .byte 4,4,255,0,7,218,95,95,219,219,93,219,219,93,219,4,4,93,219,219,93,4,4,219,93,219,219,95,95,218,255,219,7
003D5Cr 3  07 DA 5F 5F  
003D60r 3  DB DB 5D DB  
003D79r 3  04 04 DB DB          .byte 4,4,219,219,219,93,4,4,255,219,4,218,218,95,255,0,7,4,4,255,0,4,4,4,255,0,4,95,218,95,255,0,7
003D7Dr 3  DB 5D 04 04  
003D81r 3  FF DB 04 DA  
003D9Ar 3  04 04 FF 00          .byte 4,4,255,0,4,4,4,255,0,4,218,95,218,219,93,219,4,4,219,93,219,219,219,4,4,93,219,93,4,4,93,219,95
003D9Er 3  04 04 04 FF  
003DA2r 3  00 04 DA 5F  
003DBBr 3  DA 5F 5F DA          .byte 218,95,95,218,93,4,4,218,95,218,95,218,4,4,218,95,218,4,4,93,218,218,218,94,0,0,0,4,4,255,0,5,4,4
003DBFr 3  5D 04 04 DA  
003DC3r 3  5F DA 5F DA  
003DDDr 3  00 00 00 04          .byte 0,0,0,4,4,0,0,218,95,95,0,0,0,4,4,255,0,5,4,4,0,0,0,4,4,0,0,95,218,95,218,95,93
003DE1r 3  04 00 00 DA  
003DE5r 3  5F 5F 00 00  
003DFEr 3  5F DA 5E DA          .byte 95,218,94,218,93,95,218,95,218,95,218,94,93,218,95,94,218,95,218,25,26,218,95,94,218,95,218,94,95,218,218,218,25
003E02r 3  5D 5F DA 5F  
003E06r 3  DA 5F DA 5E  
003E1Fr 3  1A DA 5F DA          .byte 26,218,95,218,218,95
003E23r 3  DA 5F        
003E25r 3  01 C6 01 C6          .byte 1,198,1,198,1,198,1,198,1,196,1,1,196,1,196,1,198,198,1,198,196,1,1,197,198,1,196,197,198,1,196,197,198
003E29r 3  01 C6 01 C6  
003E2Dr 3  01 C4 01 01  
003E46r 3  C5 01 C5 C5          .byte 197,1,197,197,198,197,196,197,196,197,1,0,0,0,196,1,255,0,20,198,196,255,0,17,198,4,4,198,196,4,4,196,1
003E4Ar 3  C6 C5 C4 C5  
003E4Er 3  C4 C5 01 00  
003E67r 3  C6 04 04 C4          .byte 198,4,4,196,1,4,4,198,196,198,4,4,197,197,4,4,198,196,4,4,1,196,197,4,4,197,1,4,4,197,197,1,4,4
003E6Br 3  01 04 04 C6  
003E6Fr 3  C4 C6 04 04  
003E89r 3  C6 C6 04 04          .byte 198,198,4,4,197,197,4,4,198,197,1,4,4,1,196,4,4,197,196,3,4,4,197,197,4,4,198,3,4,4,197,1,3
003E8Dr 3  C5 C5 04 04  
003E91r 3  C6 C5 01 04  
003EAAr 3  04 04 C5 01          .byte 4,4,197,1,4,4,198,198,3,4,4,198,198,4,4,0,0,4,4,0,0,0,4,4,0,0,4,4,0,0,0,4,4
003EAEr 3  04 04 C6 C6  
003EB2r 3  03 04 04 C6  
003ECBr 3  C5 C5 04 04          .byte 197,197,4,4,0,0,4,4,0,0,0,4,4,0,0,4,4,0,0,0,4,4,1,198,4,4,1,1,4,4,198,196,197
003ECFr 3  00 00 04 04  
003ED3r 3  00 00 00 04  
003EECr 3  04 04 01 C6          .byte 4,4,1,198,4,4,1,198,1,4,4,198,197,4,4,1,3,4,4,197,197,197,4,4,197,1,4,4,197,197,198,1,197
003EF0r 3  04 04 01 C6  
003EF4r 3  01 04 04 C6  
003F0Dr 3  01 C6 04 04          .byte 1,198,4,4,0,0,4,4,0,0,0,4,4,0,0,4,4,255,0,5,198,197,4,4,0,0,4,4,0,0,0,4,4
003F11r 3  00 00 04 04  
003F15r 3  00 00 00 04  
003F2Er 3  00 00 04 04          .byte 0,0,4,4,255,0,5,198,198,4,4,198,1,3,198,1,4,4,1,198,4,4,1,1,4,4,1,198,1,197,197,4,4
003F32r 3  FF 00 05 C6  
003F36r 3  C6 04 04 C6  
003F4Fr 3  C6 C6 01 01          .byte 198,198,1,1,198,4,4,196,1,4,4,198,3,4,4,1,3,198,1,198,4,4,1,1,0,0,0,4,4,1,196,4,4
003F53r 3  C6 04 04 C4  
003F57r 3  01 04 04 C6  
003F70r 3  C4 01 04 04          .byte 196,1,4,4,198,198,1,197,197,4,4,197,198,0,0,0,4,4,1,3,4,4,197,198,4,4,197,1,3,198,198,255,1,4
003F74r 3  C6 C6 01 C5  
003F78r 3  C5 04 04 C5  
003F92r 3  C5 C6 01 01          .byte 197,198,1,1,1,198,1,1,198,1,196,1,198,1,1,198,197,197,1,1,197,198,1,197,1,197,196,196,255,197,4,198,197
003F96r 3  01 C6 01 01  
003F9Ar 3  C6 01 C4 01  
003FB3r 3  01 C6 C5 C5          .byte 1,198,197,197,1
003FB7r 3  01           
003FB8r 3  01 C6 C6 01          .byte 1,198,198,1,197,198,1,198,1,197,197,1,198,197,1,198,198,1,197,198,198,197,197,198,1,195,197,1,195,198,1,198,1
003FBCr 3  C5 C6 01 C6  
003FC0r 3  01 C5 C5 01  
003FD9r 3  C6 01 C6 01          .byte 198,1,198,1,195,1,197,1,195,1,1,255,0,11,197,195,195,255,0,19,1,1,1,255,0,8,198,4,4,1,4,4,195
003FDDr 3  C3 01 C5 01  
003FE1r 3  C3 01 01 FF  
003FFAr 3  C5 01 04 04          .byte 197,1,4,4,0,0,0,4,4,197,195,1,4,4,197,197,4,4,195,4,4,197,1,195,4,4,0,0,0,4,4,195,1
003FFEr 3  00 00 00 04  
004002r 3  04 C5 C3 01  
00401Br 3  C6 04 04 C6          .byte 198,4,4,198,198,4,4,1,4,4,0,0,0,4,4,195,1,195,4,4,0,0,0,4,4,197,197,4,4,198,4,4,0,0,0
00401Fr 3  C6 04 04 01  
004023r 3  04 04 00 00  
00403Er 3  04 04 01 C3          .byte 4,4,1,195,198,4,4,0,0,0,4,4,198,198,4,4,0,4,4,197,1,195,4,4,0,0,0,4,4,1,195,198,4,4
004042r 3  C6 04 04 00  
004046r 3  00 00 04 04  
004060r 3  C5 C5 04 04          .byte 197,197,4,4,0,4,4,195,1,197,4,4,0,0,0,4,4,195,1,1,4,4,198,198,4,4,198,4,4,1,195,197,4,4
004064r 3  00 04 04 C3  
004068r 3  01 C5 04 04  
004082r 3  C6 C6 C6 04          .byte 198,198,198,4,4,0,0,0,4,4,197,197,4,4,1,4,4,197,1,195,4,4,1,195,197,4,4,0,0,0,4,4,198,198
004086r 3  04 00 00 00  
00408Ar 3  04 04 C5 C5  
0040A4r 3  04 04 00 04          .byte 4,4,0,4,4,0,0,0,4,4,197,198,195,4,4,195,198,1,4,4,197,197,4,4,0,4,4,0,0,0,4,4,195
0040A8r 3  04 00 00 00  
0040ACr 3  04 04 C5 C6  
0040C5r 3  C6 01 04 04          .byte 198,1,4,4,197,195,195,4,4,198,198,4,4,1,4,4,195,1,197,4,4,0,0,0,4,4,1,1,1,4,4,197,197
0040C9r 3  C5 C3 C3 04  
0040CDr 3  04 C6 C6 04  
0040E6r 3  04 04 C3 04          .byte 4,4,195,4,4,1,197,195,4,4,0,0,0,4,4,195,1,197,4,4,198,198,4,4,198,4,4,0,0,0,4,4,1
0040EAr 3  04 01 C5 C3  
0040EEr 3  04 04 00 00  
004107r 3  C6 01 04 04          .byte 198,1,4,4,0,0,0,4,4,197,197,4,4,1,4,4,0,0,0,4,4,1,1,1,4,4,0,0,0,4,4,198,198
00410Br 3  00 00 00 04  
00410Fr 3  04 C5 C5 04  
004128r 3  01 C3 C6 C6          .byte 1,195,198,198,1,197,1,198,195,1,198,198,195,1,195,1,198,1,195,1,197,197,1,195,1,197,195,198,195,1,1,198,197
00412Cr 3  01 C5 01 C6  
004130r 3  C3 01 C6 C6  
004149r 3  C3 01 01 C6          .byte 195,1,1,198,1,195,1,197,198,198
00414Dr 3  01 C3 01 C5  
004151r 3  C6 C6        
004153r 3  5F DA DC DA          .byte 95,218,220,218,95,218,31,255,218,4,220,218,218,220,218,218,218,31,218,95,218,95,218,93,255,218,6,93,218,218,218,95,218,218
004157r 3  5F DA 1F FF  
00415Br 3  DA 04 DC DA  
004175r 3  5D FF DA 05          .byte 93,255,218,5,255,0,44,255,218,4,93,218,218,93,95,4,4,218,218,93,218,218,218,93,218,218,93,94,95,218,95,218,218
004179r 3  FF 00 2C FF  
00417Dr 3  DA 04 5D DA  
004196r 3  5F DA DA DA          .byte 95,218,218,218,4,4,95,218,218,218,95,218,220,218,218,218,95,218,95,255,0,7,4,4,0,0,218,33,218,18,19,19,20
00419Ar 3  04 04 5F DA  
00419Er 3  DA DA 5F DA  
0041B7r 3  21 5E 5E DA          .byte 33,94,94,218,255,0,7,4,4,0,0,218,34,220,22,0,0,21,34,218,95,218,218,218,95,255,218,4,4,4,218,95,218
0041BBr 3  FF 00 07 04  
0041BFr 3  04 00 00 DA  
0041D8r 3  5F 5F 49 00          .byte 95,95,73,0,0,72,218,95,94,95,218,94,218,218,31,218,220,4,4,218,94,220,95,218,73,95,95,72,218,94,95,218,255,0,7
0041DCr 3  00 48 DA 5F  
0041E0r 3  5E 5F DA 5E  
0041FBr 3  04 04 FF 00          .byte 4,4,255,0,10,218,94,95,255,0,7,4,4,255,0,10,95,95,255,218,11,4,4,255,218,4,4,4,218,94,94,95,218,218
0041FFr 3  0A DA 5E 5F  
004203r 3  FF 00 07 04  
00421Dr 3  5D DA DA 5F          .byte 93,218,218,95,218,93,218,93,4,4,220,218,93,218,4,4,93,218,95,218,218,31,218,95,218,218,218,95,218,220,4,4,218
004221r 3  DA 5D DA 5D  
004225r 3  04 04 DC DA  
00423Er 3  1F DC 5F 04          .byte 31,220,95,4,4,218,218,218,95,218,218,218,220,218,95,218,220,218,218,4,4,218,218,218,94,4,4,218,94,95,218,255,0,10
004242r 3  04 DA DA DA  
004246r 3  5F DA DA DA  
004260r 3  04 04 5F 00          .byte 4,4,95,0,0,0,4,4,0,95,218,95,255,0,10,4,4,218,0,0,0,4,4,0,218,95,218,93,218,93,218,218,93
004264r 3  00 00 04 04  
004268r 3  00 5F DA 5F  
004281r 3  DA DA 5D DA          .byte 218,218,93,218,93,218,218,218,93,218,4,4,93,94,94,218,218,95,220,218,218,218,95,255,218,5,220,218,218,218,4,4,218
004285r 3  5D DA DA DA  
004289r 3  5D DA 04 04  
0042A2r 3  5F                   .byte 95
0042A3r 3  DA DA 5D DA          .byte 218,218,93,218,218,93,218,218,93,218,218,218,93,218,218,93,218,93,93,218,93,218,93,218,218,218,93,218,218,93,218,218,93
0042A7r 3  DA 5D DA DA  
0042ABr 3  5D DA DA DA  
0042C4r 3  DA DA DA 5D          .byte 218,218,218,93,255,218,6,93,218,218,0,0,218,218,0,0,218,218,0,0,218,218,255,0,8,218,218,0,0,218,218,0,0
0042C8r 3  FF DA 06 5D  
0042CCr 3  DA DA 00 00  
0042E5r 3  5E 21 00 00          .byte 94,33,0,0,218,218,255,0,8,94,218,4,4,0,0,4,4,218,34,4,4,0,0,4,4,218,94,93,4,4,95,218,218
0042E9r 3  DA DA FF 00  
0042EDr 3  08 5E DA 04  
004306r 3  04 04 00 00          .byte 4,4,0,0,4,4,94,218,4,4,0,0,4,4,218,93,218,4,4,94,94,95,4,4,218,218,4,4,218,220,4,4,218
00430Ar 3  04 04 5E DA  
00430Er 3  04 04 00 00  
004327r 3  1F 04 04 5E          .byte 31,4,4,94,93,94,4,4,95,95,218,4,4,33,220,4,4,218,218,4,4,218,32,4,4,218,218,218,4,4,94,218,95
00432Br 3  5D 5E 04 04  
00432Fr 3  5F 5F DA 04  
004348r 3  04 04 22 DA          .byte 4,4,34,218,4,4,0,0,4,4,33,218,4,4,218,31,94,4,4,95,218,94,4,4,218,218,4,4,0,0,4,4,34
00434Cr 3  04 04 00 00  
004350r 3  04 04 21 DA  
004369r 3  5F 04 04 5E          .byte 95,4,4,94,32,218,4,4,94,218,218,4,4,94,220,4,4,218,94,4,4,93,94,4,4,0,0,0,4,4,95,94,218
00436Dr 3  20 DA 04 04  
004371r 3  5E DA DA 04  
00438Ar 3  04 04 DA DA          .byte 4,4,218,218,4,4,95,218,4,4,93,218,4,4,0,0,0,4,4,94,95,218,4,4,0,0,4,4,218,93,4,4,220
00438Er 3  04 04 5F DA  
004392r 3  04 04 5D DA  
0043ABr 3  DA 04 04 DA          .byte 218,4,4,218,218,218,4,4,95,218,94,4,4,0,0,4,4,33,95,4,4,218,95,4,4,94,218,93,4,4,94,94,218
0043AFr 3  DA DA 04 04  
0043B3r 3  5F DA 5E 04  
0043CCr 3  04 04 5F 5E          .byte 4,4,95,94,4,4,34,218,4,4,218,95,4,4,93,92,93,4,4,95,218,95,4,4,220,220,4,4,95,218,4,4,95
0043D0r 3  04 04 22 DA  
0043D4r 3  04 04 DA 5F  
0043EDr 3  5D 04 04 DA          .byte 93,4,4,218,92,218,4,4,94,0,0,4,4,94,95,4,4,0,0,4,4,0,0,4,4,0,0,0,4,4,95,0,0
0043F1r 3  5C DA 04 04  
0043F5r 3  5E 00 00 04  
00440Er 3  04 04 5E 5F          .byte 4,4,94,95,4,4,0,0,4,4,0,0,4,4,0,0,0,4,4,94,218,218,92,220,218,218,220,218,94,218,220,220,218
004412r 3  04 04 00 00  
004416r 3  04 04 00 00  
00442Fr 3  5F 5E 5F DA          .byte 95,94,95,218,94,218,94,95,95,218,93,218,93,93,218,93,218,218,93,218,93,218,218,218,93,218,218,93,218,218,93
004433r 3  5E DA 5E 5F  
004437r 3  5F DA 5D DA  
00444Er 3  01 C3 01 C6          .byte 1,195,1,198,1,195,1,1,195,1,195,1,198,1,195,1,198,1,198,195,1,197,196,198,196,1,1,198,196,1,196,1,1
004452r 3  01 C3 01 01  
004456r 3  C3 01 C3 01  
00446Fr 3  C6 01 C6 C6          .byte 198,1,198,198,196,1,196,198,196,198,198,0,0,0,1,33,1,1,198,1,1,198,255,1,4,197,1,1,198,1,1,197,0,0,0
004473r 3  C4 01 C4 C6  
004477r 3  C4 C6 C6 00  
004492r 3  C6 22 03 03          .byte 198,34,3,3,3,1,198,1,1,197,1,198,1,198,1,197,1,1,198,197,4,4,197,1,1,255,0,15,197,198,4,4,1
004496r 3  03 01 C6 01  
00449Ar 3  01 C5 01 C6  
0044B3r 3  1F C6 FF 00          .byte 31,198,255,0,6,234,255,0,8,198,197,4,4,197,32,197,4,4,1,1,197,1,1,198,198,197,1,1,1,4,4,197,198
0044B7r 3  06 EA FF 00  
0044BBr 3  08 C6 C5 04  
0044D4r 3  04 04 C6 01          .byte 4,4,198,1,1,4,4,198,1,197,198,198,1,1,197,1,198,197,4,4,1,197,4,4,1,198,198,4,4,255,0,11,4,4
0044D8r 3  01 04 04 C6  
0044DCr 3  01 C5 C6 C6  
0044F6r 3  01 C6 04 04          .byte 1,198,4,4,197,1,198,4,4,255,0,11,4,4,198,197,4,4,1,198,1,4,4,1,197,1,1,197,1,1,197,1,1
0044FAr 3  C5 01 C6 04  
0044FEr 3  04 FF 00 0B  
004517r 3  C5 01 01 C5          .byte 197,1,1,197,198,4,4,1,1,1,4,4,197,1,198,1,1,197,1,1,198,1,198,198,1,198,197,4,4,0,0,0,4,4
00451Br 3  C6 04 04 01  
00451Fr 3  01 01 04 04  
004539r 3  FF 00 0D C5          .byte 255,0,13,197,198,4,4,0,0,0,4,4,255,0,13,198,197,199,200,201,199,1,3,3,1,198,4,4,1,18,19,19,20
00453Dr 3  C6 04 04 00  
004541r 3  00 00 04 04  
00455Ar 3  01 04 04 01          .byte 1,4,4,1,197,198,199,205,206,207,196,1,198,1,1,4,4,1,22,0,0,21,1,4,4,196,198,197,207,0,0,208,255,0,5
00455Er 3  C5 C6 C7 CD  
004562r 3  CE CF C4 01  
00457Dr 3  04 04 FF 00          .byte 4,4,255,0,6,4,4,0,197,198,207,0,0,200,225,255,0,4,4,4,255,0,6,4,4,0,198,198,1,1,197,1,1,1
004581r 3  06 04 04 00  
004585r 3  C5 C6 CF 00  
00459Fr 3  C5 01 01 01          .byte 197,1,1,1,197,1,1,198,197,1,1,197,1,1,197,196,197,1,1,1,197,198,1,197,1,195,197,1,1,196,1,196,1
0045A3r 3  C5 01 01 C6  
0045A7r 3  C5 01 01 C5  
0045C0r 3  C6 C4 01 01          .byte 198,196,1,1
0045C4r 3  5E DA DC DA          .byte 94,218,220,218,218,94,255,218,4,94,218,218,220,218,218,218,94,255,218,6,94,218,220,218,218,94,218,218,218,94,255,218,4
0045C8r 3  DA 5E FF DA  
0045CCr 3  04 5E DA DA  
0045E5r 3  21 12 13 13          .byte 33,18,19,19,20,33,218,255,0,14,218,34,22,0,0,21,34,218,255,0,14,220,218,24,0,0,23,218,218,4,4,218,94
0045E9r 3  14 21 DA FF  
0045EDr 3  00 0E DA 22  
004606r 3  5D DA 5E DA          .byte 93,218,94,218,93,220,218,93,4,4,93,218,218,94,218,220,218,94,4,4,218,218,220,255,218,4,94,220,218,4,4,218,220
00460Ar 3  5D DC DA 5D  
00460Er 3  04 04 5D DA  
004627r 3  5D DA DA DC          .byte 93,218,218,220,93,218,4,4,255,0,10,4,4,255,0,7,218,4,4,255,0,10,4,4,0,0,0,225,0,0,0,218,4,4
00462Br 3  5D DA 04 04  
00462Fr 3  FF 00 0A 04  
004649r 3  5D 5E 5E DA          .byte 93,94,94,218,220,93,94,94,218,218,4,4,218,94,93,218,218,94,218,94,4,4,218,218,93,220,218,218,93,93,218,218,4,4
00464Dr 3  DC 5D 5E 5E  
004651r 3  DA DA 04 04  
00466Br 3  DA DA DC DA          .byte 218,218,220,218,93,220,218,218,4,4,255,0,10,4,4,255,0,6,218,94,4,4,255,0,10,4,4,255,0,6,218,218,218
00466Fr 3  5D DC DA DA  
004673r 3  04 04 FF 00  
00468Cr 3  5E DA DA 04          .byte 94,218,218,4,4,218,94,218,94,4,4,94,218,4,4,218,218,94,94,218,93,218,218,218,93,4,4,218,93,218,94,4,4
004690r 3  04 DA 5E DA  
004694r 3  5E 04 04 5E  
0046ADr 3  DA DA 04 04          .byte 218,218,4,4,218,220,218,218,93,218,218,93,218,218,4,4,93,218,218,218,4,4,218,218,4,4,218,93,218,93,218,94,255,218,4
0046B1r 3  DA DC DA DA  
0046B5r 3  5D DA DA 5D  
0046D0r 3  04 04 DA 5D          .byte 4,4,218,93,218,93,4,4,93,218,4,4,255,218,4,93,255,0,5,4,4,255,0,4,4,4,0,0,4,4,255,0,10
0046D4r 3  DA 5D 04 04  
0046D8r 3  5D DA 04 04  
0046F1r 3  04 04 FF 00          .byte 4,4,255,0,4,4,4,0,0,4,4,255,0,5,218,93,218,93,255,218,5,93,255,218,4,93,255,218,6,220,218,94,218
0046F5r 3  04 04 04 00  
0046F9r 3  00 04 04 FF  
004712r 3  5D DA 5E DA          .byte 93,218,94,218,218,94,93,218,94,218,220,218,218,218,94,93,218,218,218
004716r 3  DA 5E 5D DA  
00471Ar 3  5E DA DC DA  
004725r 3  DA DA 5D DA          .byte 218,218,93,218,218,218,18,19,25,26,19,20,218,218,18,19,19,19,20,255,218,5,31,218,93,33,22,21,0,0,22,21,33,33
004729r 3  DA DA 12 13  
00472Dr 3  19 1A 13 14  
004747r 3  15 D1 D2 D3          .byte 21,209,210,211,22,33,218,31,218,93,32,93,218,34,24,23,4,4,24,23,34,34,21,212,213,214,22,34,218,32,218,93,218
00474Br 3  16 21 DA 1F  
00474Fr 3  DA 5D 20 5D  
004768r 3  5D DA DA 5D          .byte 93,218,218,93,218,4,4,218,218,93,218,23,215,216,216,24,255,218,4,255,0,7,4,4,255,0,4,93,218,255,0,5,93,93
00476Cr 3  DA 04 04 DA  
004770r 3  DA 5D DA 17  
00478Ar 3  00 EA FF 00          .byte 0,234,255,0,5,4,4,255,0,4,218,93,255,0,5,93,218,93,218,218,4,4,218,218,4,4,93,218,4,4,218,218,4,4
00478Er 3  05 04 04 FF  
004792r 3  00 04 DA 5D  
0047ACr 3  5D 04 04 DA          .byte 93,4,4,218,218,93,218,93,4,4,93,218,4,4,218,93,4,4,31,93,4,4,218,4,4,93,93,221,222,218,4,4,218
0047B0r 3  DA 5D DA 5D  
0047B4r 3  04 04 5D DA  
0047CDr 3  5D 04 04 DA          .byte 93,4,4,218,218,4,4,32,218,4,4,218,4,4,218,218,223,224,93,4,4,93,218,4,4,93,218,4,4,218,218,4,4
0047D1r 3  DA 04 04 20  
0047D5r 3  DA 04 04 DA  
0047EEr 3  5D 04 04 5D          .byte 93,4,4,93,93,218,218,218,4,4,0,0,4,4,218,93,4,4,0,0,4,4,218,4,4,93,218,31,218,93,4,4,0,0
0047F2r 3  5D DA DA DA  
0047F6r 3  04 04 00 00  
004810r 3  04 04 DA 5D          .byte 4,4,218,93,4,4,0,0,4,4,218,4,4,218,218,32,93,218,4,4,218,93,4,4,93,218,4,4,218,93,218,218,93
004814r 3  04 04 00 00  
004818r 3  04 04 DA 04  
004831r 3  04 04 DA 5D          .byte 4,4,218,93,218,93,93,4,4,218,31,4,4,218,93,4,4,93,255,218,4,4,4,93,218,0,0,0,4,4,93,32,4,4
004835r 3  DA 5D 5D 04  
004839r 3  04 DA 1F 04  
004853r 3  DA DA 04 04          .byte 218,218,4,4,93,218,93,0,218,4,4,93,218,0,0,225,4,4,218,218,4,4,218,218,4,4,255,218,5,4,4,218,93
004857r 3  5D DA 5D 00  
00485Br 3  DA 04 04 5D  
004874r 3  DA 5D DA 04          .byte 218,93,218,4,4,0,0,4,4,0,0,4,4,255,0,5,4,4,0,93,220,93,218,4,4,0,0,4,4,0,0,4,4
004878r 3  04 00 00 04  
00487Cr 3  04 00 00 04  
004895r 3  FF 00 05 04          .byte 255,0,5,4,4,0,218,218,218,93,255,218,4,93,218,218,218,93,255,218,7,93,218,218,93,218,220,218,93,218,220,93,218,218
004899r 3  04 00 DA DA  
00489Dr 3  DA 5D FF DA  
0048B7r 3  5D DA DA DC          .byte 93,218,218,220,93,218,220,93,218,93,218
0048BBr 3  5D DA DC 5D  
0048BFr 3  DA 5D DA     
0048C2r 3  FF 4D 16 FF          .byte 255,77,22,255,79,22,255,0,44,77,38,39,40,41,255,77,5,145,146,255,77,5,38,39,40,41,77,78,42,4,4,190,78
0048C6r 3  4F 16 FF 00  
0048CAr 3  2C 4D 26 27  
0048E3r 3  72 73 4E 4E          .byte 114,115,78,78,147,148,255,78,5,42,4,4,190,78,78,42,4,4,190,78,116,117,255,78,9,42,4,4,190,78,78,42,4,4
0048E7r 3  93 94 FF 4E  
0048EBr 3  05 2A 04 04  
004905r 3  BE FF 4E 0C          .byte 190,255,78,12,42,4,4,190,78,78,42,4,4,190,255,78,8,165,166,78,78,42,4,4,190,78,79,43,4,4,191,255,79,8
004909r 3  2A 04 04 BE  
00490Dr 3  4E 4E 2A 04  
004927r 3  A7 A8 4F 4F          .byte 167,168,79,79,43,4,4,191,79,0,0,4,4,255,0,14,4,4,255,0,4,4,4,255,0,14,4,4,0,0,255,77,5
00492Br 3  2B 04 04 BF  
00492Fr 3  4F 00 00 04  
004948r 3  26 27 28 29          .byte 38,39,40,41,255,77,4,38,39,40,41,255,77,5,255,78,5,42,4,4,190,78,110,111,78,42,4,4,190,255,78,6,161
00494Cr 3  FF 4D 04 26  
004950r 3  27 28 29 FF  
004969r 3  A2 4E 4E 2A          .byte 162,78,78,42,4,4,190,78,112,113,78,42,4,4,190,78,78,177,178,78,79,163,164,79,79,43,4,4,191,255,79,4,43
00496Dr 3  04 04 BE 4E  
004971r 3  70 71 4E 2A  
00498Ar 3  04 04 BF 4F          .byte 4,4,191,79,79,179,180,79,255,0,6,4,4,255,0,6,4,4,255,0,12,4,4,255,0,6,4,4,255,0,6,255,77,22
00498Er 3  4F B3 B4 4F  
004992r 3  FF 00 06 04  
0049ACr 3  FF 4F 16             .byte 255,79,22
0049AFr 3  FF E2 0F 2C          .byte 255,226,15,44,45,46,47,45,48,226,255,227,15,49,50,51,52,53,54,255,227,4,173,174,255,227,10,49,60,61,62,63,54
0049B3r 3  2D 2E 2F 2D  
0049B7r 3  30 E2 FF E3  
0049D0r 3  E3 E5 E5 E5          .byte 227,229,229,229,175,176,255,229,10,49,55,56,57,58,54,229,171,172,255,0,20,169,170,0,0,225,255,0,17,255,226,11,38
0049D4r 3  AF B0 FF E5  
0049D8r 3  0A 31 37 38  
0049F1r 3  27 28 29 FF          .byte 39,40,41,255,226,7,255,227,11,42,4,4,190,255,227,18,42,4,4,190,227,227,227,110,111,255,227,13,42,4,4,190,227,227,227
0049F5r 3  E2 07 FF E3  
0049F9r 3  0B 2A 04 04  
004A14r 3  70 71 FF E3          .byte 112,113,255,227,7,139,140,255,227,4,42,4,4,190,255,227,7,255,229,5,143,144,255,229,4,42,4,4,190,255,229,7,165
004A18r 3  07 8B 8C FF  
004A1Cr 3  E3 04 2A 04  
004A35r 3  A6 FF 00 0A          .byte 166,255,0,10,4,4,255,0,8,167,168,255,0,10,4,4,255,0,8,226,226,38,39,40,41,255,226,16,227,227,42,4,4
004A39r 3  04 04 FF 00  
004A3Dr 3  08 A7 A8 FF  
004A56r 3  BE E3 E2 FF          .byte 190,227,226,255,227,16,42,4,4,190,255,227,6,185,186,255,227,10,42,4,4,190,255,227,6,187,188,255,227,10,42,4,4
004A5Ar 3  E3 10 2A 04  
004A5Er 3  04 BE FF E3  
004A77r 3  BE FF E3 0B          .byte 190,255,227,11,153,156,227,227,227,229,229,43,4,4,191,255,229,11,157,160,229,229,229
004A7Br 3  99 9C E3 E3  
004A7Fr 3  E3 E5 E5 2B  
004A8Er 3  FF E2 07 2C          .byte 255,226,7,44,45,46,47,45,48,255,226,9,255,227,7,49,50,51,52,53,54,255,227,16,49,55,56,57,58,54,255,227,16
004A92r 3  2D 2E 2F 2D  
004A96r 3  30 FF E2 09  
004AAFr 3  31 3C 3D 3E          .byte 49,60,61,62,63,54,229,255,227,8,255,0,43,225,226,226,38,39,40,41,255,226,11,38,39,40,41,226,227,227,42,4,4
004AB3r 3  3F 36 E5 FF  
004AB7r 3  E3 08 FF 00  
004AD0r 3  BE FF E3 0B          .byte 190,255,227,11,42,4,4,190,227,227,227,42,4,4,190,255,227,11,42,4,4,190,227,227,227,42,4,4,190,255,227,11,42
004AD4r 3  2A 04 04 BE  
004AD8r 3  E3 E3 E3 2A  
004AF1r 3  04 04 BE E3          .byte 4,4,190,227,227,227,42,4,4,190,255,227,11,42,4,4,190,227,227,227,42,4,4,190,255,227,11,42,4,4,190,227,0,0,0
004AF5r 3  E3 E3 2A 04  
004AF9r 3  04 BE FF E3  
004B14r 3  04 04 FF 00          .byte 4,4,255,0,13,4,4,0,3,0,0,0,4,4,255,0,13,4,4,0,3,255,226,22,255,227,11,44,45,46,47,45,48
004B18r 3  0D 04 04 00  
004B1Cr 3  03 00 00 00  
004B35r 3  FF E3 09 B9          .byte 255,227,9,185,186,255,227,5,49,255,66,4,54,255,227,9,187,188,255,227,5,49,255,67,4,54,255,227,16,49,255,67,4
004B39r 3  BA FF E3 05  
004B3Dr 3  31 FF 42 04  
004B56r 3  36 FF E3 05          .byte 54,255,227,5,255,229,11,49,255,68,4,54,255,229,5
004B5Ar 3  FF E5 0B 31  
004B5Er 3  FF 44 04 36  
004B65r 3  FF E2 0F 2C          .byte 255,226,15,44,45,46,47,45,48,226,255,227,4,173,174,255,227,4,185,186,227,227,227,49,50,51,52,53,54,255,227,5,175
004B69r 3  2D 2E 2F 2D  
004B6Dr 3  30 E2 FF E3  
004B86r 3  B0 FF E3 04          .byte 176,255,227,4,187,188,227,227,227,49,60,61,62,63,54,255,227,16,49,55,56,57,58,54,227,255,0,44,226,226,38,39,40
004B8Ar 3  BB BC E3 E3  
004B8Er 3  E3 31 3C 3D  
004BA7r 3  29 FF E2 10          .byte 41,255,226,16,227,227,42,4,4,190,255,227,13,226,255,227,4,42,4,4,190,255,227,12,114,115,255,227,4,42,4,4,190
004BABr 3  E3 E3 2A 04  
004BAFr 3  04 BE FF E3  
004BC8r 3  FF E3 0C 74          .byte 255,227,12,116,117,255,227,4,42,4,4,190,255,227,5,161,162,255,227,11,42,4,4,190,255,227,5,163,164,255,227,9,0,0,0
004BCCr 3  75 FF E3 04  
004BD0r 3  2A 04 04 BE  
004BEBr 3  04 04 FF 00          .byte 4,4,255,0,20,4,4,255,0,17,255,226,13,227,255,226,8,255,227,25,84,85,255,227,8,145,146,255,227,10,86,87,255,227,8
004BEFr 3  14 04 04 FF  
004BF3r 3  00 11 FF E2  
004C0Er 3  93 94 FF E3          .byte 147,148,255,227,10,88,89,255,227,17,229,229,229,90,91,255,229,17
004C12r 3  0A 58 59 FF  
004C16r 3  E3 11 E5 E5  
004C20r 3  01 01 C5 C5          .byte 1,1,197,197,196,5,5,6,9,0,0,11,12,13,13,196,197,196,195,2,196,198,198,1,196,195,1,7,7,8,93,4,4
004C24r 3  C4 05 05 06  
004C28r 3  09 00 00 0B  
004C41r 3  5D 0C 0F 0F          .byte 93,12,15,15,3,1,2,1,196,1,1,255,0,9,4,4,255,0,20,4,4,255,0,11,33,5,6,9,4,4,11,12,13
004C45r 3  03 01 02 01  
004C49r 3  C4 01 01 FF  
004C62r 3  21 01 C3 01          .byte 33,1,195,1,33,5,6,9,4,4,11,12,13,34,7,8,93,4,4,93,14,15,34,197,1,1,34,7,8,93,4,4,93
004C66r 3  21 05 06 09  
004C6Ar 3  04 04 0B 0C  
004C83r 3  0E 0F FF 00          .byte 14,15,255,0,4,4,4,255,0,11,4,4,255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33
004C87r 3  04 04 04 FF  
004C8Br 3  00 0B 04 04  
004CA4r 3  05 06 09 04          .byte 5,6,9,4,4,11,12,13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1
004CA8r 3  04 0B 0C 0D  
004CACr 3  21 C4 C4 01  
004CC5r 3  C6 01 C3 FF          .byte 198,1,195,255,0,11,4,4,255,0,20,4,4,255,0,9,196,1,33,5,6,9,4,4,11,12,13,1,196,5,6,9,4,4
004CC9r 3  00 0B 04 04  
004CCDr 3  FF 00 14 04  
004CE7r 3  0B 0C 0D 21          .byte 11,12,13,33,1,196,34,7,8,93,4,4,93,14,15,196,1,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8
004CEBr 3  01 C4 22 07  
004CEFr 3  08 5D 04 04  
004D09r 3  04 04 FF 00          .byte 4,4,255,0,10,4,4,255,0,8,4,4,255,0,4,195,1,1,195,2,197,1,196,1,2,1,1,2,93,94,95,94,95
004D0Dr 3  0A 04 04 FF  
004D11r 3  00 08 04 04  
004D2Ar 3  C5 01 01 C5          .byte 197,1,1,197,1,1,31,196,197,196,3,1,197,198,1,197,196,94,93,220,93,1,31,1,2,1,1,197,1,1,3,1,196,196
004D2Er 3  01 01 1F C4  
004D32r 3  C5 C4 03 01  
004D4Cr 3  01 01 01 C6          .byte 1,1,1,198,1,220,220,93,220,220,1,1,197,196,1,196,1,197,198,196,196,197,196,1,197,1,220,93,220,220,220,93,220
004D50r 3  01 DC DC 5D  
004D54r 3  DC DC 01 01  
004D6Dr 3  C4 01 C4             .byte 196,1,196
004D70r 3  01 C5 C5 01          .byte 1,197,197,1,196,1,31,1,1,1,25,26,1,196,1,31,1,196,195,2,196,198,198,1,196,195,1,1,1,197,197,1,2
004D74r 3  C4 01 1F 01  
004D78r 3  01 01 19 1A  
004D91r 3  C3 02 01 C5          .byte 195,2,1,197,197,1,2,1,196,1,1,255,0,44,33,5,6,9,4,4,11,12,13,33,2,198,197,33,5,6,9,4,4
004D95r 3  C5 01 02 01  
004D99r 3  C4 01 01 FF  
004DB2r 3  0B 0C 0D 22          .byte 11,12,13,34,7,8,93,4,4,93,14,15,34,197,1,198,34,7,8,93,4,4,93,14,15,255,0,4,4,4,255,0,11
004DB6r 3  07 08 5D 04  
004DBAr 3  04 5D 0E 0F  
004DD3r 3  04 04 FF 00          .byte 4,4,255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5,6,9,4,4,11,12,13,33,196,196
004DD7r 3  07 04 04 FF  
004DDBr 3  00 0B 04 04  
004DF5r 3  01 01 C4 C5          .byte 1,1,196,197,196,1,1,195,1,1,34,7,8,1,4,4,1,14,15,34,195,1,198,1,195,255,0,11,4,4,255,0,20
004DF9r 3  C4 01 01 C3  
004DFDr 3  01 01 22 07  
004E16r 3  04 04 FF 00          .byte 4,4,255,0,9,196,1,33,5,6,9,4,4,11,12,13,197,198,5,6,9,4,4,11,12,13,33,1,196,34,7,8,93
004E1Ar 3  09 C4 01 21  
004E1Er 3  05 06 09 04  
004E37r 3  04 04 5D 0E          .byte 4,4,93,14,15,196,1,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8,4,4,255,0,10,4,4,255,0,8
004E3Br 3  0F C4 01 07  
004E3Fr 3  08 5D 04 04  
004E59r 3  04 04 FF 00          .byte 4,4,255,0,4,195,197,1,195,2,197,5,6,9,4,4,11,12,13,197,197,3,196,1,1,1,2,1,1,31,196,1,198
004E5Dr 3  04 C3 C5 01  
004E61r 3  C3 02 C5 05  
004E7Ar 3  07 08 DC 04          .byte 7,8,220,4,4,220,14,15,198,195,33,196,31,1,2,1,1,2,32,197,3,1,5,6,0,4,4,0,15,13,198,197,34
004E7Er 3  04 DC 0E 0F  
004E82r 3  C6 C3 21 C4  
004E9Br 3  02 20 01 02          .byte 2,32,1,2,197,1,197,1,2,198,196,5,6,220,4,4,220,15,13,197,198,1,197,2,196,1,196
004E9Fr 3  C5 01 C5 01  
004EA3r 3  02 C6 C4 05  
004EB6r 3  01 01 1F 01          .byte 1,1,31,1,196,1,31,1,1,1,196,31,1,196,1,31,1,196,195,31,196,198,198,1,32,195,1,1,32,1,197,1,2
004EBAr 3  C4 01 1F 01  
004EBEr 3  01 01 C4 1F  
004ED7r 3  20 02 01 01          .byte 32,2,1,1,32,1,2,1,32,1,1,255,0,21,197,255,0,21,198,33,5,6,9,4,4,11,12,13,33,1,195,1,33
004EDBr 3  20 01 02 01  
004EDFr 3  20 01 01 FF  
004EF8r 3  05 06 09 04          .byte 5,6,9,4,4,11,12,13,34,7,8,196,4,4,196,14,15,34,1,1,1,34,7,8,196,4,4,196,14,15,255,0,4
004EFCr 3  04 0B 0C 0D  
004F00r 3  22 07 08 C4  
004F19r 3  04 04 FF 00          .byte 4,4,255,0,11,4,4,0,0,197,255,0,4,4,4,255,0,11,4,4,0,0,198,1,196,196,198,196,196,1,33,5,6
004F1Dr 3  0B 04 04 00  
004F21r 3  00 C5 FF 00  
004F3Ar 3  09 04 04 0B          .byte 9,4,4,11,12,13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,196,4,4,196,14,15,34,195,1,198,1
004F3Er 3  0C 0D 21 C4  
004F42r 3  C4 01 01 C4  
004F5Br 3  C3 FF 00 0B          .byte 195,255,0,11,4,4,255,0,8,198,255,0,11,4,4,255,0,8,197,196,1,33,5,6,9,4,4,11,12,13,1,196,5
004F5Fr 3  04 04 FF 00  
004F63r 3  08 C6 FF 00  
004F7Cr 3  06 09 04 04          .byte 6,9,4,4,11,12,13,33,1,196,34,7,8,196,4,4,196,14,15,25,26,7,8,196,4,4,196,12,15,34,255,0,6
004F80r 3  0B 0C 0D 21  
004F84r 3  01 C4 22 07  
004F9Dr 3  04 04 FF 00          .byte 4,4,255,0,8,4,4,0,0,0,198,255,0,6,4,4,255,0,8,4,4,0,0,0,197,195,1,1,195,2,197,1,196
004FA1r 3  08 04 04 00  
004FA5r 3  00 00 C6 FF  
004FBEr 3  01 02 01 01          .byte 1,2,1,1,2,196,1,196,1,196,1,1,1,2,1,1,3,3,197,196,3,1,196,198,1,3,196,1,1,198,196,197,3
004FC2r 3  02 C4 01 C4  
004FC6r 3  01 C4 01 01  
004FDFr 3  01 C5 01 01          .byte 1,197,1,1,2,31,1,3,1,196,196,1,197,1,31,1,2,197,3,2,2,31,1,2,196,1,196,32,2,198,196,197,1
004FE3r 3  02 1F 01 03  
004FE7r 3  01 C4 C4 01  
005000r 3  C4 01 C4 20          .byte 196,1,196,32,195,2,1,196,198,197,32,196,1,196
005004r 3  C3 02 01 C4  
005008r 3  C6 C5 20 C4  
00500Er 3  01 01 C4 1F          .byte 1,1,196,31,196,1,196,1,1,1,196,195,1,196,1,198,1,196,195,31,197,198,198,1,196,32,255,1,4,197,1,2,195
005012r 3  C4 01 C4 01  
005016r 3  01 01 C4 C3  
00502Fr 3  02 FF 01 04          .byte 2,255,1,4,2,1,32,1,1,255,0,44,33,5,6,9,4,4,11,12,13,33,1,31,1,33,5,6,9,4,4,11,12
005033r 3  02 01 20 01  
005037r 3  01 FF 00 2C  
005050r 3  0D 22 07 08          .byte 13,34,7,8,93,4,4,93,14,15,34,1,32,1,34,7,8,93,4,4,93,14,15,255,0,4,4,4,255,0,11,4,4
005054r 3  5D 04 04 5D  
005058r 3  0E 0F 22 01  
005071r 3  FF 00 07 04          .byte 255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5,6,9,4,4,11,12,13,33,196,196,1,1
005075r 3  04 FF 00 0B  
005079r 3  04 04 00 00  
005093r 3  C4 C5 C4 01          .byte 196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1,198,1,195,255,0,11,4,4,255,0,20,4,4
005097r 3  01 C3 01 01  
00509Br 3  22 07 08 5D  
0050B4r 3  FF 00 09 C4          .byte 255,0,9,196,1,33,5,6,9,4,4,11,12,13,197,196,5,6,9,4,4,11,12,13,33,1,196,34,7,8,93,4,4
0050B8r 3  01 21 05 06  
0050BCr 3  09 04 04 0B  
0050D5r 3  5D 0E 0F C4          .byte 93,14,15,196,198,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8,4,4,255,0,10,4,4,255,0,8,4,4
0050D9r 3  C6 07 08 5D  
0050DDr 3  04 04 5D 0C  
0050F7r 3  FF 00 04 DA          .byte 255,0,4,218,93,218,218,197,197,1,196,1,2,1,1,2,196,1,196,1,196,1,1,1,2,93,218,220,220,93,197,3,1
0050FBr 3  5D DA DA C5  
0050FFr 3  C5 01 C4 01  
005118r 3  C4 C6 01 01          .byte 196,198,1,1,197,1,1,198,93,220,92,93,2,1,93,93,221,222,93,1,196,197,1,1,31,197,1,2,93,93,92,95,94
00511Cr 3  C5 01 01 C6  
005120r 3  5D DC 5C 5D  
005139r 3  5D 02 C4 DA          .byte 93,2,196,218,218,223,224,218,218,196,1,196,1,32,1,195,93,93,92,92,94,95,220,95,196
00513Dr 3  DA DF E0 DA  
005141r 3  DA C4 01 C4  
005152r 3  01 01 C4 1F          .byte 1,1,196,31,196,1,196,1,1,31,196,195,1,31,1,198,1,196,195,31,197,198,198,1,196,32,255,1,4,197,32,2,195
005156r 3  C4 01 C4 01  
00515Ar 3  01 1F C4 C3  
005173r 3  02 20 01 01          .byte 2,32,1,1,1,2,1,32,1,1,197,255,0,21,198,255,0,21,33,5,6,9,4,4,11,12,13,33,197,196,2,33,5
005177r 3  01 02 01 20  
00517Br 3  01 01 C5 FF  
005194r 3  06 09 04 04          .byte 6,9,4,4,11,12,13,34,7,8,93,4,4,93,14,15,34,196,197,197,34,7,8,93,4,4,93,14,15,198,0,0,0
005198r 3  0B 0C 0D 22  
00519Cr 3  07 08 5D 04  
0051B5r 3  04 04 FF 00          .byte 4,4,255,0,11,4,4,0,0,0,197,0,0,0,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5
0051B9r 3  0B 04 04 00  
0051BDr 3  00 00 C5 00  
0051D6r 3  06 09 04 04          .byte 6,9,4,4,11,12,13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1,198
0051DAr 3  0B 0C 0D 21  
0051DEr 3  C4 C4 01 01  
0051F7r 3  01 C3 C5 FF          .byte 1,195,197,255,0,10,4,4,255,0,9,198,255,0,10,4,4,255,0,9,196,1,33,5,6,9,4,4,11,12,13,197,196
0051FBr 3  00 0A 04 04  
0051FFr 3  FF 00 09 C6  
005218r 3  05 06 09 04          .byte 5,6,9,4,4,11,12,13,33,1,196,34,7,8,93,4,4,93,14,15,196,198,7,8,93,4,4,93,12,15,34,198,255,0,5
00521Cr 3  04 0B 0C 0D  
005220r 3  21 01 C4 22  
00523Br 3  04 04 FF 00          .byte 4,4,255,0,8,4,4,255,0,4,197,255,0,5,4,4,255,0,8,4,4,255,0,4,3,3,195,198,2,197,1,196,1
00523Fr 3  08 04 04 FF  
005243r 3  00 04 C5 FF  
00525Cr 3  02 01 01 02          .byte 2,1,1,2,196,1,196,1,196,1,1,1,2,197,198,3,2,3,196,3,3,196,198,1,1,196,197,1,198,198,198,197,3
005260r 3  C4 01 C4 01  
005264r 3  C4 01 01 01  
00527Dr 3  02 01 03 C5          .byte 2,1,3,197,197,198,198,1,196,31,1,197,1,3,1,31,195,197,198,195,196,31,2,196,198,3,198,197,195,198,196,32,196
005281r 3  C5 C6 C6 01  
005285r 3  C4 1F 01 C5  
00529Er 3  01 C4 01 C3          .byte 1,196,1,195,32,197,198,3,197,198,32,198,196
0052A2r 3  20 C5 C6 03  
0052A6r 3  C5 C6 20 C6  
0052ABr 3               numsc:
0052ABr 3  1E                   .byte 30
0052ACr 3               nmedat:
0052ACr 3  00 01 90 90          .byte 0,1,144,144,255
0052B0r 3  FF           
0052B1r 3  02 0C 20 98          .byte 2,12,32,152,0,0,144,40,255
0052B5r 3  00 00 90 28  
0052B9r 3  FF           
0052BAr 3  01 11 70 50          .byte 1,17,112,80,1,17,144,48,0,1,144,88,255
0052BEr 3  01 11 90 30  
0052C2r 3  00 01 90 58  
0052C7r 3  01 10 80 50          .byte 1,16,128,80,1,16,64,16,0,1,128,152,255
0052CBr 3  01 10 40 10  
0052CFr 3  00 01 80 98  
0052D4r 3  03 0E 40 40          .byte 3,14,64,64,1,4,32,136,1,17,144,56,4,5,56,96,0,1,144,144,255
0052D8r 3  01 04 20 88  
0052DCr 3  01 11 90 38  
0052E9r 3  01 10 80 48          .byte 1,16,128,72,1,16,32,112,2,14,96,144,0,1,128,152,255
0052EDr 3  01 10 20 70  
0052F1r 3  02 0E 60 90  
0052FAr 3  02 0D 30 10          .byte 2,13,48,16,2,10,96,120,0,1,144,144,255
0052FEr 3  02 0A 60 78  
005302r 3  00 01 90 90  
005307r 3  02 0A 30 78          .byte 2,10,48,120,2,12,96,72,0,1,144,152,255
00530Br 3  02 0C 60 48  
00530Fr 3  00 01 90 98  
005314r 3  02 0C 30 28          .byte 2,12,48,40,2,11,96,88,0,0,144,16,255
005318r 3  02 0B 60 58  
00531Cr 3  00 00 90 10  
005321r 3  02 0C 60 60          .byte 2,12,96,96,0,0,144,16,255
005325r 3  00 00 90 10  
005329r 3  FF           
00532Ar 3  02 0B 60 28          .byte 2,11,96,40,0,1,144,96,255
00532Er 3  00 01 90 60  
005332r 3  FF           
005333r 3  01 11 60 40          .byte 1,17,96,64,0,1,144,136,255
005337r 3  00 01 90 88  
00533Br 3  FF           
00533Cr 3  01 11 50 48          .byte 1,17,80,72,1,9,112,120,0,0,80,152,255
005340r 3  01 09 70 78  
005344r 3  00 00 50 98  
005349r 3  02 0E 20 90          .byte 2,14,32,144,2,15,80,72,1,16,112,144,1,16,144,80,0,0,32,8,255
00534Dr 3  02 0F 50 48  
005351r 3  01 10 70 90  
00535Er 3  01 04 70 98          .byte 1,4,112,152,1,17,144,40,0,1,32,160,255
005362r 3  01 11 90 28  
005366r 3  00 01 20 A0  
00536Br 3  01 10 90 08          .byte 1,16,144,8,1,16,128,96,1,16,112,56,1,16,64,136,0,0,32,8,255
00536Fr 3  01 10 80 60  
005373r 3  01 10 70 38  
005380r 3  02 0F 60 20          .byte 2,15,96,32,1,17,144,64,0,0,32,8,255
005384r 3  01 11 90 40  
005388r 3  00 00 20 08  
00538Dr 3  01 04 30 20          .byte 1,4,48,32,1,17,48,96,0,1,32,160,255
005391r 3  01 11 30 60  
005395r 3  00 01 20 A0  
00539Ar 3  04 07 90 10          .byte 4,7,144,16,3,15,144,48,1,17,144,104,1,17,80,128,0,0,32,0,255
00539Er 3  03 0F 90 30  
0053A2r 3  01 11 90 68  
0053AFr 3  02 0F 40 18          .byte 2,15,64,24,1,16,96,72,0,1,144,152,255
0053B3r 3  01 10 60 48  
0053B7r 3  00 01 90 98  
0053BCr 3  01 09 30 18          .byte 1,9,48,24,1,17,96,112,0,1,144,120,255
0053C0r 3  01 11 60 70  
0053C4r 3  00 01 90 78  
0053C9r 3  02 0A 20 78          .byte 2,10,32,120,2,13,96,56,0,0,144,8,255
0053CDr 3  02 0D 60 38  
0053D1r 3  00 00 90 08  
0053D6r 3  02 0C 30 48          .byte 2,12,48,72,2,11,112,72,0,0,112,160,255
0053DAr 3  02 0B 70 48  
0053DEr 3  00 00 70 A0  
0053E3r 3  02 0A 70 68          .byte 2,10,112,104,0,0,112,56,255
0053E7r 3  00 00 70 38  
0053EBr 3  FF           
0053ECr 3  02 0D 70 50          .byte 2,13,112,80,0,0,112,8,255
0053F0r 3  00 00 70 08  
0053F4r 3  FF           
0053F5r 3  01 10 40 70          .byte 1,16,64,112,1,9,96,24,0,1,128,160,255
0053F9r 3  01 09 60 18  
0053FDr 3  00 01 80 A0  
005402r 3  01 10 40 40          .byte 1,16,64,64,1,17,128,112,0,1,128,152,255
005406r 3  01 11 80 70  
00540Ar 3  00 01 80 98  
00540Fr 3  01 10 40 48          .byte 1,16,64,72,1,16,128,112,0,0,128,8,255
005413r 3  01 10 80 70  
005417r 3  00 00 80 08  
00541Cr 3  01 10 20 78          .byte 1,16,32,120,1,16,128,80,0,1,128,160,255
005420r 3  01 10 80 50  
005424r 3  00 01 80 A0  
005429r 3  01 10 40 48          .byte 1,16,64,72,1,17,128,96,0,1,128,160,255
00542Dr 3  01 11 80 60  
005431r 3  00 01 80 A0  
005436r 3               NUMOBJ = 8
005436r 3               objdta:
005436r 3  07 E0 18 18          .byte 7,224,24,24,39,228,76,18,75,226,143,17,146,233,151,153,191,97,158,145,135,201,94,30,77,226,37,244,25,248,7,224,1,20,128,8,20,128,8
00543Ar 3  27 E4 4C 12  
00543Er 3  4B E2 8F 11  
00545Dr 3  00 00 00 00          .byte 0,0,0,0,0,0,80,0,32,10,80,4,136,14,232,29,244,29,246,29,123,251,124,6,63,254,31,252,15,248,0,0,1,8,48,144,8,48,144
005461r 3  00 00 50 00  
005465r 3  20 0A 50 04  
005484r 3  07 F0 0F 18          .byte 7,240,15,24,28,108,24,246,56,58,49,218,115,238,115,234,96,238,112,108,32,120,4,80,46,176,23,224,31,192,15,128,1,23,48,112,23,48,112
005488r 3  1C 6C 18 F6  
00548Cr 3  38 3A 31 DA  
0054ABr 3  00 F0 01 88          .byte 0,240,1,136,2,136,4,80,8,76,24,34,55,209,106,239,245,111,158,255,103,248,25,232,23,136,16,136,0,128,0,128,1,0,112,144,0,112,144
0054AFr 3  02 88 04 50  
0054B3r 3  08 4C 18 22  
0054D2r 3  00 04 00 86          .byte 0,4,0,134,1,70,0,133,0,157,0,156,1,64,2,32,2,32,4,144,8,136,9,8,31,224,2,0,0,0,0,0,1,22,48,16,22,48,16
0054D6r 3  01 46 00 85  
0054DAr 3  00 9D 00 9C  
0054F9r 3  00 00 02 00          .byte 0,0,2,0,2,0,7,0,2,0,2,6,7,6,15,134,21,198,21,198,15,134,31,198,56,230,63,230,31,192,15,128,1,13,80,152,13,80,152
0054FDr 3  02 00 07 00  
005501r 3  02 00 02 06  
005520r 3  00 3C 00 76          .byte 0,60,0,118,56,242,95,211,215,81,245,81,117,81,53,81,53,81,29,81,29,83,15,82,15,86,7,220,7,190,3,27,1,3,128,8,3,128,8
005524r 3  38 F2 5F D3  
005528r 3  D7 51 F5 51  
005547r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,1,0,3,128,15,255,255,154,175,42,147,47,209,58,176,31,224,0,0,0,0,0,0,0,0,1,19,64,160,19,64,160
00554Br 3  00 00 00 01  
00554Fr 3  00 03 80 0F  
00556Er 3               font:
00556Er 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
005572r 3  00 00 00 00  
005576r 3  18 18 18 18          .byte 24,24,24,24,24,0,24,24
00557Ar 3  18 00 18 18  
00557Er 3  66 66 CC CC          .byte 102,102,204,204,0,0,0,0
005582r 3  00 00 00 00  
005586r 3  36 7F 7F 36          .byte 54,127,127,54,127,127,54,0
00558Ar 3  7F 7F 36 00  
00558Er 3  18 7E 78 7E          .byte 24,126,120,126,30,126,24,0
005592r 3  1E 7E 18 00  
005596r 3  66 66 6C 0C          .byte 102,102,108,12,24,27,51,51
00559Ar 3  18 1B 33 33  
00559Er 3  3C 7C 60 3E          .byte 60,124,96,62,126,102,126,62
0055A2r 3  7E 66 7E 3E  
0055A6r 3  18 18 30 30          .byte 24,24,48,48,0,0,0,0
0055AAr 3  00 00 00 00  
0055AEr 3  1C 3C 70 60          .byte 28,60,112,96,96,112,60,28
0055B2r 3  60 70 3C 1C  
0055B6r 3  70 78 1C 0C          .byte 112,120,28,12,12,28,120,112
0055BAr 3  0C 1C 78 70  
0055BEr 3  18 7E 7E 3C          .byte 24,126,126,60,126,126,24,0
0055C2r 3  7E 7E 18 00  
0055C6r 3  00 18 18 7E          .byte 0,24,24,126,126,24,24,0
0055CAr 3  7E 18 18 00  
0055CEr 3  00 00 00 00          .byte 0,0,0,0,0,24,56,48
0055D2r 3  00 18 38 30  
0055D6r 3  00 00 00 7E          .byte 0,0,0,126,126,0,0,0
0055DAr 3  7E 00 00 00  
0055DEr 3  00 00 00 00          .byte 0,0,0,0,0,24,24,24
0055E2r 3  00 18 18 18  
0055E6r 3  0C 0C 18 18          .byte 12,12,24,24,48,48,96,96
0055EAr 3  30 30 60 60  
0055EEr 3  3C 7E 66 66          .byte 60,126,102,102,102,102,126,60
0055F2r 3  66 66 7E 3C  
0055F6r 3  18 38 38 18          .byte 24,56,56,24,24,24,60,60
0055FAr 3  18 18 3C 3C  
0055FEr 3  3C 7E 66 0C          .byte 60,126,102,12,24,48,126,126
005602r 3  18 30 7E 7E  
005606r 3  7E 7E 06 1C          .byte 126,126,6,28,30,6,126,124
00560Ar 3  1E 06 7E 7C  
00560Er 3  1C 3C 6C 6C          .byte 28,60,108,108,126,126,12,12
005612r 3  7E 7E 0C 0C  
005616r 3  7E 7E 60 7C          .byte 126,126,96,124,126,6,126,124
00561Ar 3  7E 06 7E 7C  
00561Er 3  1C 3C 70 7C          .byte 28,60,112,124,126,102,126,60
005622r 3  7E 66 7E 3C  
005626r 3  7E 7E 06 0C          .byte 126,126,6,12,12,24,24,24
00562Ar 3  0C 18 18 18  
00562Er 3  3C 7E 66 3C          .byte 60,126,102,60,126,102,126,60
005632r 3  7E 66 7E 3C  
005636r 3  3C 7E 66 7E          .byte 60,126,102,126,62,14,60,56
00563Ar 3  3E 0E 3C 38  
00563Er 3  00 18 18 18          .byte 0,24,24,24,0,24,24,24
005642r 3  00 18 18 18  
005646r 3  00 18 18 18          .byte 0,24,24,24,0,24,56,48
00564Ar 3  00 18 38 30  
00564Er 3  0C 1C 38 70          .byte 12,28,56,112,112,56,28,12
005652r 3  70 38 1C 0C  
005656r 3  00 7E 7E 00          .byte 0,126,126,0,0,126,126,0
00565Ar 3  00 7E 7E 00  
00565Er 3  60 70 38 1C          .byte 96,112,56,28,28,56,112,96
005662r 3  1C 38 70 60  
005666r 3  7C 7E 06 3E          .byte 124,126,6,62,60,0,48,48
00566Ar 3  3C 00 30 30  
00566Er 3  3C 7E 66 6E          .byte 60,126,102,110,110,96,126,62
005672r 3  6E 60 7E 3E  
005676r 3  18 3C 7E 66          .byte 24,60,126,102,126,126,102,102
00567Ar 3  7E 7E 66 66  
00567Er 3  7C 7E 66 7C          .byte 124,126,102,124,126,102,126,124
005682r 3  7E 66 7E 7C  
005686r 3  3C 7E 66 60          .byte 60,126,102,96,96,102,126,60
00568Ar 3  60 66 7E 3C  
00568Er 3  78 7C 6E 66          .byte 120,124,110,102,102,110,124,120
005692r 3  66 6E 7C 78  
005696r 3  7E 7E 60 7C          .byte 126,126,96,124,124,96,126,126
00569Ar 3  7C 60 7E 7E  
00569Er 3  7E 7E 60 7C          .byte 126,126,96,124,124,96,96,96
0056A2r 3  7C 60 60 60  
0056A6r 3  3E 7E 60 6E          .byte 62,126,96,110,110,102,126,60
0056AAr 3  6E 66 7E 3C  
0056AEr 3  66 66 66 7E          .byte 102,102,102,126,126,102,102,102
0056B2r 3  7E 66 66 66  
0056B6r 3  3C 3C 18 18          .byte 60,60,24,24,24,24,60,60
0056BAr 3  18 18 3C 3C  
0056BEr 3  06 06 06 06          .byte 6,6,6,6,102,102,126,60
0056C2r 3  66 66 7E 3C  
0056C6r 3  66 66 6C 78          .byte 102,102,108,120,120,108,102,102
0056CAr 3  78 6C 66 66  
0056CEr 3  60 60 60 60          .byte 96,96,96,96,96,96,126,126
0056D2r 3  60 60 7E 7E  
0056D6r 3  63 77 7F 7F          .byte 99,119,127,127,107,99,99,99
0056DAr 3  6B 63 63 63  
0056DEr 3  66 66 76 7E          .byte 102,102,118,126,110,102,102,102
0056E2r 3  6E 66 66 66  
0056E6r 3  3C 7E 66 66          .byte 60,126,102,102,102,102,126,60
0056EAr 3  66 66 7E 3C  
0056EEr 3  7C 7E 66 7E          .byte 124,126,102,126,124,96,96,96
0056F2r 3  7C 60 60 60  
0056F6r 3  3C 7E 66 66          .byte 60,126,102,102,102,108,126,54
0056FAr 3  66 6C 7E 36  
0056FEr 3  7C 7E 66 7E          .byte 124,126,102,126,124,108,110,102
005702r 3  7C 6C 6E 66  
005706r 3  3E 7E 60 7C          .byte 62,126,96,124,62,6,126,124
00570Ar 3  3E 06 7E 7C  
00570Er 3  7E 7E 18 18          .byte 126,126,24,24,24,24,24,24
005712r 3  18 18 18 18  
005716r 3  66 66 66 66          .byte 102,102,102,102,102,102,126,60
00571Ar 3  66 66 7E 3C  
00571Er 3  66 66 66 66          .byte 102,102,102,102,60,60,24,24
005722r 3  3C 3C 18 18  
005726r 3  63 63 6B 6B          .byte 99,99,107,107,127,62,54,54
00572Ar 3  7F 3E 36 36  
00572Er 3  66 66 66 3C          .byte 102,102,102,60,60,102,102,102
005732r 3  3C 66 66 66  
005736r 3  66 66 66 3C          .byte 102,102,102,60,60,24,24,24
00573Ar 3  3C 18 18 18  
00573Er 3  7E 7E 0C 18          .byte 126,126,12,24,48,96,126,126
005742r 3  30 60 7E 7E  
005746r 3  3C 3C 30 30          .byte 60,60,48,48,48,48,60,60
00574Ar 3  30 30 3C 3C  
00574Er 3  60 60 30 30          .byte 96,96,48,48,24,24,12,12
005752r 3  18 18 0C 0C  
005756r 3  3C 3C 0C 0C          .byte 60,60,12,12,12,12,60,60
00575Ar 3  0C 0C 3C 3C  
00575Er 3  18 3C 7E 66          .byte 24,60,126,102,0,0,0,0
005762r 3  00 00 00 00  
005766r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,254
00576Ar 3  00 00 00 FE  
00576Er 3  1E 3E 30 7C          .byte 30,62,48,124,124,48,126,126
005772r 3  7C 30 7E 7E  
005776r 3  00 3E 7E 66          .byte 0,62,126,102,102,102,126,62
00577Ar 3  66 66 7E 3E  
00577Er 3  60 60 7C 7E          .byte 96,96,124,126,102,102,126,124
005782r 3  66 66 7E 7C  
005786r 3  00 3C 7E 66          .byte 0,60,126,102,96,102,126,60
00578Ar 3  60 66 7E 3C  
00578Er 3  06 06 3E 7E          .byte 6,6,62,126,102,102,126,62
005792r 3  66 66 7E 3E  
005796r 3  00 3C 7E 66          .byte 0,60,126,102,126,96,126,62
00579Ar 3  7E 60 7E 3E  
00579Er 3  1C 3C 30 7C          .byte 28,60,48,124,124,48,48,48
0057A2r 3  7C 30 30 30  
0057A6r 3  00 3E 7E 66          .byte 0,62,126,102,62,6,62,60
0057AAr 3  3E 06 3E 3C  
0057AEr 3  60 60 7C 7E          .byte 96,96,124,126,102,102,102,102
0057B2r 3  66 66 66 66  
0057B6r 3  00 38 38 18          .byte 0,56,56,24,24,24,24,24
0057BAr 3  18 18 18 18  
0057BEr 3  00 0C 0C 0C          .byte 0,12,12,12,12,12,60,56
0057C2r 3  0C 0C 3C 38  
0057C6r 3  60 66 6E 7C          .byte 96,102,110,124,124,110,102,102
0057CAr 3  7C 6E 66 66  
0057CEr 3  38 38 18 18          .byte 56,56,24,24,24,24,60,60
0057D2r 3  18 18 3C 3C  
0057D6r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0057DAr 3  00 00 00 00  
0057DEr 3  00 7C 7E 66          .byte 0,124,126,102,102,102,102,102
0057E2r 3  66 66 66 66  
0057E6r 3  00 3C 7E 66          .byte 0,60,126,102,102,102,126,60
0057EAr 3  66 66 7E 3C  
0057EEr 3  00 7C 7E 66          .byte 0,124,126,102,126,124,96,96
0057F2r 3  7E 7C 60 60  
0057F6r 3  00 3E 7E 66          .byte 0,62,126,102,126,62,6,6
0057FAr 3  7E 3E 06 06  
0057FEr 3  00 7C 7E 66          .byte 0,124,126,102,96,96,96,96
005802r 3  60 60 60 60  
005806r 3  00 3E 7E 70          .byte 0,62,126,112,60,14,126,124
00580Ar 3  3C 0E 7E 7C  
00580Er 3  30 7C 7C 30          .byte 48,124,124,48,48,48,62,30
005812r 3  30 30 3E 1E  
005816r 3  00 66 66 66          .byte 0,102,102,102,102,102,126,62
00581Ar 3  66 66 7E 3E  
00581Er 3  00 66 66 66          .byte 0,102,102,102,102,60,60,24
005822r 3  66 3C 3C 18  
005826r 3  00 63 6B 6B          .byte 0,99,107,107,127,62,54,54
00582Ar 3  7F 3E 36 36  
00582Er 3  00 66 66 3C          .byte 0,102,102,60,60,102,102,102
005832r 3  3C 66 66 66  
005836r 3  00 66 66 7E          .byte 0,102,102,126,62,6,62,60
00583Ar 3  3E 06 3E 3C  
00583Er 3  00 7C 7C 0C          .byte 0,124,124,12,56,96,124,124
005842r 3  38 60 7C 7C  
005846r 3  0E 1E 18 70          .byte 14,30,24,112,112,24,30,14
00584Ar 3  70 18 1E 0E  
00584Er 3  18 18 18 18          .byte 24,24,24,24,24,24,24,0
005852r 3  18 18 18 00  
005856r 3  70 78 18 0E          .byte 112,120,24,14,14,24,120,112
00585Ar 3  0E 18 78 70  
00585Er 3  36 6C 00 00          .byte 54,108,0,0,0,0,0,0
005862r 3  00 00 00 00  
005866r 3  3E 41 5D 51          .byte 62,65,93,81,81,93,65,62
00586Ar 3  51 5D 41 3E  
00586Er 3               jtab:
00586Er 3  63                   .byte 99
00586Fr 3  65 14 51 10  keys:   .byte 101,20,81,16,48,35,83,112,0,113,1
005873r 3  30 23 53 70  
005877r 3  00 71 01     
00587Ar 3               
00587Ar 2               
00587Ar 1               	.include "lib.inc"
00587Ar 2               ;----------------------------------------------------------------------
00587Ar 2               ; VIC20 Platform Specific functions
00587Ar 2               ;----------------------------------------------------------------------
00587Ar 2               
00587Ar 2               ;============================================================
00587Ar 2               ; PLATFORM VARIABLES
00587Ar 2               ;============================================================
00587Ar 2               ;
00587Ar 2               ; Memory map:
00587Ar 2               ;
00587Ar 2               ;	$0000-$01ff	 0.5kB	CPU WS
00587Ar 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
00587Ar 2               ;	$0400-$0fff	 3,0kB	RAM
00587Ar 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
00587Ar 2               ;	$2000-$7fff	24,0kB	RAM
00587Ar 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
00587Ar 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
00587Ar 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
00587Ar 2               ;	$9800-$9fff	 2,0kB	I/O
00587Ar 2               ;	$a000-$bfff	 8,0kB	RAM
00587Ar 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
00587Ar 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
00587Ar 2               ;
00587Ar 2               ; Keyboard matrix:
00587Ar 2               ;                          	  $9121
00587Ar 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
00587Ar 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
00587Ar 2               ;               ASCII   ??  ??  45  48  56  54  52  50
00587Ar 2               ;                 VIC   07  06  05  04  03  02  01  00
00587Ar 2               ;
00587Ar 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
00587Ar 2               ;               ASCII   ??  ??  64  79  85  84  69  81
00587Ar 2               ;                 VIC   17  16  15  14  13  12  11  10
00587Ar 2               ;
00587Ar 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
00587Ar 2               ;               ASCII   ??  61  58  75  72  70  83  ??
00587Ar 2               ;                 VIC   27  26  25  24  23  22  21  20
00587Ar 2               ;
00587Ar 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
00587Ar 2               ;               ASCII   ??  ??  46  77  66  67  90  32
00587Ar 2               ;                 VIC   37  36  35  34  33  32  31  30
00587Ar 2               ;
00587Ar 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
00587Ar 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
00587Ar 2               ;                 VIC   47  46  45  44  43  42  41  40
00587Ar 2               ;
00587Ar 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
00587Ar 2               ;               ASCII   ??  59  76  74  71  68  65  ??
00587Ar 2               ;                 VIC   57  56  55  54  53  52  51  50
00587Ar 2               ;
00587Ar 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
00587Ar 2               ;               ASCII   13  42  80  73  89  82  87
00587Ar 2               ;                 VIC   67  66  65  64  63  62  61  60
00587Ar 2               ;
00587Ar 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
00587Ar 2               ;               ASCII   08  ??  43  57  55  53  51  49
00587Ar 2               ;                 VIC   77  76  75  74  73  72  71  70
00587Ar 2               ;
00587Ar 2               ;	 P =$65,O=$14,A=$51,Q=$10
00587Ar 2               ;	SPC=$30,N=$44,M=$34
00587Ar 2               ;	 1 =$70,2=$00,3=$71,4=$01
00587Ar 2               ;
00587Ar 2               ; Joysticks:
00587Ar 2               ;
00587Ar 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
00587Ar 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
00587Ar 2               ;	$9120	Right -     -     -     -     -     -     -
00587Ar 2               ;
00587Ar 2               ;	$9122	DDRB = Data Direction Register port $9120
00587Ar 2               ;               0 = input, 1 = output
00587Ar 2               ;		Bit7 should be 0 to read joystick $9120
00587Ar 2               ;
00587Ar 2               ; Video registers:
00587Ar 2               ;
00587Ar 2               ;	$9000	horizontal centering
00587Ar 2               ;		bits 0-6 horizontal centering
00587Ar 2               ;		bit  7 sets interlace scan
00587Ar 2               ;	$9001	vertical centering
00587Ar 2               ;	$9002	set # of columns
00587Ar 2               ;		bits 0-6 set # of columns
00587Ar 2               ;		bit 7 is part of video matrix address
00587Ar 2               ;	$9003	set # of rows
00587Ar 2               ;		bit 0 sets 8x8 or 16x8 chars
00587Ar 2               ;		bits 1-6 set # of rows
00587Ar 2               ;	$9005	start of character memory
00587Ar 2               ;		bits 0-3 start of character memory (default = 0)
00587Ar 2               ;		bits 4-7 is rest of video address (default= F)
00587Ar 2               ;		BITS 3,2,1,0 CM startinq address
00587Ar 2               ;			     HEX   DEC
00587Ar 2               ;		0000   ROM   8000  32768
00587Ar 2               ;		0001	     8400  33792
00587Ar 2               ;		0010	     8800  34816
00587Ar 2               ;		0011	     8C00  35840
00587Ar 2               ;		1000   RAM   0000  0000
00587Ar 2               ;		1001  xxxx
00587Ar 2               ;		1010  xxxx   unavail.
00587Ar 2               ;		1011  xxxx
00587Ar 2               ;		1100	     1000  4096
00587Ar 2               ;		1101	     1400  5120
00587Ar 2               ;		1110	     1800  6144
00587Ar 2               ;		1111	     1C00  7168
00587Ar 2               ;
00587Ar 2               ; Sound registers:
00587Ar 2               ;
00587Ar 2               ;	$900a	Frequency for oscillator 1 (low)
00587Ar 2               ;		(on: 128-255)
00587Ar 2               ;	$900b	Frequency for oscillator 2 (medium)
00587Ar 2               ;		(on: 128-255)
00587Ar 2               ;	$900c	Frequency for oscillator 3 (high)
00587Ar 2               ;		(on: 128-255)
00587Ar 2               ;	$900d	Frequency of noise source
00587Ar 2               ;	$900e	bit 0-3 sets volume of all sound
00587Ar 2               ;		bits 4-7 are auxiliary color information
00587Ar 2               ;	$900f	Screen and border color register
00587Ar 2               ;		bits 4-7 select background color
00587Ar 2               ;		bits 0-2 select border color
00587Ar 2               ;		bit 3 selects inverted or normal mode
00587Ar 2               ;
00587Ar 2               ; I/O:
00587Ar 2               ;	VIA1 -VIA2
00587Ar 2               ;-----------------------------------------------------------
00587Ar 2               ;	$9110,$9120 	Port B output register
00587Ar 2               ;	$9111,$9121 	Port A output register
00587Ar 2               ;			(PA0) Bit 0=Serial CLK IN
00587Ar 2               ;			(PA1) Bit 1=Serial DATA IN
00587Ar 2               ;			(PA2) Bit 2=Joy 0
00587Ar 2               ;			(PA3) Bit 3=Joy 1
00587Ar 2               ;			(PA4) Bit 4=Joy 2
00587Ar 2               ;			(PA5) Bit 5 = Lightpen/Fire button
00587Ar 2               ;			(PA6) Bit 6=Cassette switch sense
00587Ar 2               ;			(PA7) Bit 7=Serial ATN out
00587Ar 2               ;	$9112,$9122	Data direction register B
00587Ar 2               ;	$9113,$9123	Data direction register A
00587Ar 2               ;	$9114,$9124	Timer 1 low byte
00587Ar 2               ;	$9115,$9125	Timer 1 high byte & counter
00587Ar 2               ;	$9116,$9126	Timer 1 low byte
00587Ar 2               ;	$9117,$9127	Timer 1 high byte
00587Ar 2               ;	$9118,$9128	Timer 2 low byte
00587Ar 2               ;	$9119,$9129	Timer 2 high byte
00587Ar 2               ;	$911A,$912A	Shift register
00587Ar 2               ;	$911B,$912B	Auxiliary control register
00587Ar 2               ;	$911C,$912C	Peripheral control register
00587Ar 2               ;			(CA1, CA2, CB1, CB2)
00587Ar 2               ;			CA1 = restore key (Bit 0)
00587Ar 2               ;			CA2 = cassette motor control (Bits 1-3)
00587Ar 2               ;			CB1 = interrupt signal for received
00587Ar 2               ;			RS-232 data (Bit 4)
00587Ar 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
00587Ar 2               ;	$911D,$912D	Interrupt flag register
00587Ar 2               ;	$911E,$912E	Interrupt enable register
00587Ar 2               ;	$911F,$912F	Port A (Sense cassette switch)
00587Ar 2               
00587Ar 2               ; VIC constants
00587Ar 2               
00587Ar 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
00587Ar 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
00587Ar 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
00587Ar 2               
00587Ar 2               ; VIC variables:
00587Ar 2               
00587Ar 2  00           	fontcol:	.byte 0		; Frontcolour text
00587Br 2  00           	mode:		.byte 0		; 0=MPAGD, 1=MiniPaint
00587Cr 2               .if modelflag				; Set crtflag to identify machine, NTSC or PAL
00587Cr 2               	crtflag:	.byte 1		; PAL
00587Cr 2               .else
00587Cr 2  00           	crtflag:	.byte 0		; NTSC
00587Dr 2               .endif
00587Dr 2               
00587Dr 2               ; Addresses
00587Dr 2               
00587Dr 2               	ScreenAddr	= $0200		; VIDEO RAM
00587Dr 2               	MapAddr		= $0400		; RAM
00587Dr 2               	CharAddress	= $1000		; CHAR RAM
00587Dr 2               	Reg0		= $9000		; Horizontal centering
00587Dr 2               	Reg1		= $9001		; Vertical centering
00587Dr 2               	Reg2		= $9002		; Set # of columns
00587Dr 2               	Reg3		= $9003		; Set # of rows
00587Dr 2               	Reg4		= $9004		; Vsync signal
00587Dr 2               	Reg5		= $9005		; Start of character memory
00587Dr 2               	RegA		= $900a		; Colour and auxcolour register
00587Dr 2               	RegB		= $900b		; Colour and auxcolour register
00587Dr 2               	RegC		= $900c		; Colour and auxcolour register
00587Dr 2               	RegD		= $900d		; Colour and auxcolour register
00587Dr 2               	RegE		= $900e		; Colour and auxcolour register
00587Dr 2               	RegF		= $900f		; Screen and border color register
00587Dr 2               
00587Dr 2               	JoyAddr1	= $9111		; Joystick address 1
00587Dr 2               	Timer11_Low  	= $9114		; Timer 1 low byte
00587Dr 2               	Timer11_High 	= $9115		; Timer 1 high byte
00587Dr 2               	Timer12_Low  	= $9118		; Timer 2 low byte
00587Dr 2               	Timer12_High 	= $9119		; Timer 2 high byte
00587Dr 2               	AUX1		= $911b		; Auxiliary control register
00587Dr 2               	IFR1		= $911d		; Interrupt Flag Register
00587Dr 2               	IER1		= $911e		; Interrupt Enable Register
00587Dr 2               
00587Dr 2               	KeyColAddr	= $9120		; Keyboard column (write)
00587Dr 2               	JoyAddr2	= $9120		; Joystick address 2
00587Dr 2               	KeyRowAddr	= $9121		; Keyboard row (read)
00587Dr 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
00587Dr 2               	Timer21_Low  	= $9124		; Timer 1 low byte
00587Dr 2               	Timer21_High 	= $9125		; Timer 1 high byte
00587Dr 2               	AUX2		= $912b		; Auxiliary control register
00587Dr 2               	IFR2		= $912d		; Interrupt Flag Register
00587Dr 2               	IER2		= $912e		; Interrupt Enable Register
00587Dr 2               
00587Dr 2               	ColorAttr	= $9600		; Color attributes
00587Dr 2               	HiRAM		= $a000		; Hi RAM 8kB
00587Dr 2               
00587Dr 2               ;----------------------------------------------------------------------
00587Dr 2               ; VIC20 video hardware fns
00587Dr 2               ;----------------------------------------------------------------------
00587Dr 2               
00587Dr 2               init:
00587Dr 2               
00587Dr 2               ; Disable interrupts
00587Dr 2               
00587Dr 2  A9 7F        	lda #$7f
00587Fr 2  8D 1E 91     	sta IER1
005882r 2  8D 2D 91     	sta IFR2
005885r 2  8D 2E 91     	sta IER2
005888r 2               
005888r 2               ; Set audio volume and flag to 0 to check when disabling
005888r 2               ; beep and crash
005888r 2               
005888r 2  A9 00        	lda #0
00588Ar 2  8D 0A 90     	sta RegA
00588Dr 2  8D 0B 90     	sta RegB
005890r 2  8D 0C 90     	sta RegC
005893r 2  8D 0D 90     	sta RegD
005896r 2  A9 00        	lda #$00
005898r 2  85 rr        	sta SOUNDS_STATUS
00589Ar 2               
00589Ar 2  AD 0E 90     	lda RegE
00589Dr 2  09 0F        	ora #$0f		; Set volume max
00589Fr 2  8D 0E 90     	sta RegE
0058A2r 2               
0058A2r 2               ; Init screen for NTSC
0058A2r 2               ; this sets the background and border color of the screen
0058A2r 2               ; in this case border black and background black
0058A2r 2               
0058A2r 2  A9 18        	lda #%00011000
0058A4r 2  8D 0F 90     	sta RegF
0058A7r 2               
0058A7r 2               ; Reset fontcolor
0058A7r 2  A9 00        	lda #0		; Black
0058A9r 2  8D rr rr     	sta fontcol
0058ACr 2               
0058ACr 2               
0058ACr 2  A9 00        	lda #0		; Mode 0 = MPAGD
0058AEr 2  20 rr rr     	jsr SetReg
0058B1r 2               
0058B1r 2               ; Init screencharacters
0058B1r 2               ; Fill screen with characters from left to right, up to down
0058B1r 2               
0058B1r 2  A2 00        	ldx #0
0058B3r 2  A0 00        	ldy #0
0058B5r 2               scrinit:
0058B5r 2  8A           	txa
0058B6r 2  9D 00 02     	sta ScreenAddr,x
0058B9r 2  98           	tya
0058BAr 2  9D 00 96     	sta ColorAttr,x
0058BDr 2  E8           	inx
0058BEr 2  E0 F2        	cpx#242
0058C0r 2  D0 F3        	bne scrinit
0058C2r 2               
0058C2r 2               ; Reset fontcolor
0058C2r 2               
0058C2r 2  A9 00        	lda #0			; Black
0058C4r 2  8D rr rr     	sta fontcol
0058C7r 2               
0058C7r 2               ; Init music
0058C7r 2               
0058C7r 2               ;	jsr initmusic
0058C7r 2               
0058C7r 2               ; Init VIA1 timer11 for timeout 1/25 sec
0058C7r 2               
0058C7r 2  A9 E0        	lda #$e0		; T1 continuous
0058C9r 2  8D 1B 91     	sta AUX1
0058CCr 2  A9 7F        	lda #$7f		; No int
0058CEr 2  8D 1E 91     	sta IER1
0058D1r 2  A9 00        	lda #0
0058D3r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
0058D6r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
0058D8r 2  8D 14 91     	sta Timer11_Low
0058DBr 2  A9 4E        	lda #>timervalue
0058DDr 2  8D 15 91     	sta Timer11_High
0058E0r 2               
0058E0r 2               ; Pre-shifted byte tables if parameter 'r' given
0058E0r 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
0058E0r 2               ; The bits are shifted to the right and overflow bits are
0058E0r 2               ; inserted to the left. So 1 byte contains a left and right part
0058E0r 2               
0058E0r 2               .if rflag
0058E0r 2               shift0 = HiRAM
0058E0r 2               shift2 = HiRAM+256
0058E0r 2               shift4 = HiRAM+512
0058E0r 2               shift6 = HiRAM+768
0058E0r 2               
0058E0r 2               ; Pre-shifted table 0 pixels
0058E0r 2               
0058E0r 2  A2 00        	ldx #0
0058E2r 2               shf0:
0058E2r 2  8A           	txa
0058E3r 2  9D 00 A0     	sta shift0,x
0058E6r 2  E8           	inx
0058E7r 2  D0 F9        	bne shf0
0058E9r 2               
0058E9r 2               ; Pre-shifted table 2 pixels
0058E9r 2               
0058E9r 2  A2 00        	ldx #0
0058EBr 2               shf2:
0058EBr 2  A0 02        	ldy #2
0058EDr 2  8A           	txa
0058EEr 2               shf2loop:
0058EEr 2  4A           	lsr a
0058EFr 2  90 02        	bcc :+
0058F1r 2  09 80        	ora #$80
0058F3r 2               :
0058F3r 2  88           	dey
0058F4r 2  D0 F8        	bne shf2loop
0058F6r 2  9D 00 A1     	sta shift2,x
0058F9r 2  E8           	inx
0058FAr 2  D0 EF        	bne shf2
0058FCr 2               
0058FCr 2               ; Pre-shifted table 4 pixels
0058FCr 2               
0058FCr 2  A2 00        	ldx #0
0058FEr 2               shf4:
0058FEr 2  A0 04        	ldy #4
005900r 2  8A           	txa
005901r 2               shf4loop:
005901r 2  4A           	lsr a
005902r 2  90 02        	bcc :+
005904r 2  09 80        	ora #$80
005906r 2               :
005906r 2  88           	dey
005907r 2  D0 F8        	bne shf4loop
005909r 2  9D 00 A2     	sta shift4,x
00590Cr 2  E8           	inx
00590Dr 2  D0 EF        	bne shf4
00590Fr 2               
00590Fr 2               ; Pre-shifted table 6 pixels
00590Fr 2               
00590Fr 2  A2 00        	ldx #0
005911r 2               shf6:
005911r 2  A0 06        	ldy #6
005913r 2  8A           	txa
005914r 2               shf6loop:
005914r 2  4A           	lsr a
005915r 2  90 02        	bcc :+
005917r 2  09 80        	ora #$80
005919r 2               :
005919r 2  88           	dey
00591Ar 2  D0 F8        	bne shf6loop
00591Cr 2  9D 00 A3     	sta shift6,x
00591Fr 2  E8           	inx
005920r 2  D0 EF        	bne shf6
005922r 2               .endif
005922r 2               
005922r 2  60           	rts
005923r 2               
005923r 2               ;========================================================
005923r 2               ; KEY AND JOYSTICK ROUTINES
005923r 2               ;--------------------------------------------------------
005923r 2               ; Keys
005923r 2               ;
005923r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
005923r 2               ;             ||||||||
005923r 2               ;             |||||||+> Right    KEY 0  - X
005923r 2               ;             ||||||+-> Left     KEY 1  - Z
005923r 2               ;             |||||+--> Down     KEY 2  - .
005923r 2               ;             ||||+---> Up       KEY 3  - ;
005923r 2               ;             |||+----> Fire1    KEY 4  - SPC
005923r 2               ;             ||+-----> Fire2    KEY 5  - Q
005923r 2               ;             |+------> Fire3    KEY 6  - P
005923r 2               ;             +-------> Not used
005923r 2               ;
005923r 2               ;                       Option1  KEY 7  - 1
005923r 2               ;                       Option2  KEY 8  - 2
005923r 2               ;                       Option3  KEY 9  - 3
005923r 2               ;                       Option4  KEY 10 - 4
005923r 2               ;--------------------------------------------------------
005923r 2               
005923r 2               ;----------------------------------------------------
005923r 2               ; Interrupt service
005923r 2               ;----------------------------------------------------
005923r 2               
005923r 2               intserv:
005923r 2  EE 01 96     	inc $9601	; scroll colour char topleft
005926r 2  68           	pla
005927r 2  A8           	tay
005928r 2  68           	pla
005929r 2  AA           	tax
00592Ar 2  68           	pla
00592Br 2  40           	rti
00592Cr 2               
00592Cr 2               ;--------------------------------------------------------
00592Cr 2               ; PRSKEY
00592Cr 2               ;
00592Cr 2               ; Wait for keypress.
00592Cr 2               ;--------------------------------------------------------
00592Cr 2               
00592Cr 2               prskey:
00592Cr 2  98           	tya
00592Dr 2  48           	pha
00592Er 2               prsloop:
00592Er 2  20 rr rr     	jsr vsync
005931r 2  20 rr rr     	jsr joykey
005934r 2  09 80        	ora #$80
005936r 2  C9 FF        	cmp #$ff
005938r 2  D0 07        	bne :+
00593Ar 2  20 rr rr     	jsr readkey
00593Dr 2  C9 FF        	cmp #255
00593Fr 2  F0 ED        	beq prsloop		; wait until key pressed
005941r 2               :
005941r 2               prsrelease:
005941r 2  20 rr rr     	jsr vsync
005944r 2  20 rr rr     	jsr joykey
005947r 2  09 80        	ora #$80
005949r 2  C9 FF        	cmp #$ff
00594Br 2  F0 07        	beq :+
00594Dr 2  20 rr rr     	jsr readkey
005950r 2  C9 FF        	cmp #255
005952r 2  D0 ED        	bne prsrelease		; wait until key released
005954r 2               :
005954r 2  68           	pla
005955r 2  A8           	tay
005956r 2  60           	rts
005957r 2               
005957r 2               ;--------------------------------------------------------
005957r 2               ; KTEST
005957r 2               ;
005957r 2               ; Keyboard test routine with key in A.
005957r 2               ; Scan key and clear carry if key pressed
005957r 2               ;--------------------------------------------------------
005957r 2               
005957r 2               ktest:
005957r 2  85 rr        	sta z80_a		; save key
005959r 2               
005959r 2  4A           	lsr a
00595Ar 2  4A           	lsr a
00595Br 2  4A           	lsr a
00595Cr 2  4A           	lsr a
00595Dr 2  AA           	tax
00595Er 2  BD rr rr     	lda colmask,x
005961r 2  8D 20 91     	sta KeyColAddr		; set row
005964r 2               
005964r 2  A5 rr        	lda z80_a
005966r 2  29 0F        	and #$0f
005968r 2  AA           	tax			; get column
005969r 2               
005969r 2  AD 21 91     	lda KeyRowAddr		; read column
00596Cr 2  3D rr rr     	and keymask,x		; check if key pressed
00596Fr 2  F0 02        	beq pressed		; Skip if pressed
005971r 2  38           	sec			; key not pressed
005972r 2  60           	rts
005973r 2               pressed:
005973r 2  18           	clc			; key pressed
005974r 2  60           	rts
005975r 2               
005975r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
005979r 2  F7 FB FD FE  
00597Dr 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
005981r 2  10 20 40 80  
005985r 2               
005985r 2               ;---------------------------------------------------------------
005985r 2               ; KGET
005985r 2               ;
005985r 2               ; Read keyboard matrix if a key is pressed.
005985r 2               ; Return A = high nibble=row and low nibble=col
005985r 2               ;---------------------------------------------------------------
005985r 2               
005985r 2               kget:
005985r 2  86 rr        	stx xtmp		; Save x-reg
005987r 2               kget0:
005987r 2  A2 00        	ldx #0			; reset row
005989r 2               kget1:
005989r 2  BD rr rr     	lda colmask,x		; Get mask
00598Cr 2  8D 20 91     	sta KeyColAddr		; Set row
00598Fr 2  AD 21 91     	lda KeyRowAddr		; Read columns
005992r 2  85 rr        	sta tmp			; Save colums
005994r 2  C9 FF        	cmp #$ff		; Key pressed?
005996r 2  D0 08        	bne kget2		; Yes, skip
005998r 2  E8           	inx			; Next row
005999r 2  E0 08        	cpx #8			; All rows scanned?
00599Br 2  D0 EC        	bne kget1		; No, repeat
00599Dr 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
0059A0r 2               kget2:
0059A0r 2  A0 00        	ldy #0			; Reset column
0059A2r 2               kget3:
0059A2r 2  46 rr        	lsr tmp			; Test bit
0059A4r 2  90 04        	bcc kget4		; If clear, key pressed
0059A6r 2  C8           	iny			; Next column
0059A7r 2  4C rr rr     	jmp kget3		; Repeat
0059AAr 2               kget4:
0059AAr 2  86 rr        	stx tmp			; Get row
0059ACr 2  06 rr        	asl tmp			; Make high nibble
0059AEr 2  06 rr        	asl tmp
0059B0r 2  06 rr        	asl tmp
0059B2r 2  06 rr        	asl tmp
0059B4r 2  98           	tya			; Get column
0059B5r 2  18           	clc
0059B6r 2  65 rr        	adc tmp			; Add row as low nibble
0059B8r 2  85 rr        	sta tmp
0059BAr 2               kget5:
0059BAr 2  AD 21 91     	lda KeyRowAddr		; Read columns
0059BDr 2  C9 FF        	cmp #$ff
0059BFr 2  D0 F9        	bne kget5
0059C1r 2               
0059C1r 2  A5 rr        	lda tmp			; Return keycode
0059C3r 2  A6 rr        	ldx xtmp		; Restore X-reg
0059C5r 2  60           	rts			; Return
0059C6r 2               
0059C6r 2               ;-------------------------------------------------------------
0059C6r 2               ; READKEY
0059C6r 2               ;
0059C6r 2               ; Check keyboard matrix if a key is pressed
0059C6r 2               ; Return keymask in Y
0059C6r 2               ;-------------------------------------------------------------
0059C6r 2               
0059C6r 2               readkey:
0059C6r 2  A9 FF        	lda #$ff		; Keymask
0059C8r 2  85 rr        	sta tmp
0059CAr 2  A2 07        	ldx #7
0059CCr 2               scanrow:
0059CCr 2  BD rr rr     	lda colmask,x
0059CFr 2  8D 20 91     	sta KeyColAddr		; set row
0059D2r 2  AD 21 91     	lda KeyRowAddr		; read column
0059D5r 2  25 rr        	and tmp			; Reset bit is key pressed
0059D7r 2  85 rr        	sta tmp
0059D9r 2  CA           	dex
0059DAr 2  10 F0        	bpl scanrow
0059DCr 2  A5 rr        	lda tmp
0059DEr 2  A8           	tay
0059DFr 2  60           	rts
0059E0r 2               
0059E0r 2               ;-------------------------------------------------------------
0059E0r 2               ; JOY1SCAN
0059E0r 2               ;
0059E0r 2               ; Initializes joystick
0059E0r 2               ;-------------------------------------------------------------
0059E0r 2               
0059E0r 2               joyinit:
0059E0r 2  60           	rts
0059E1r 2               
0059E1r 2               ;-------------------------------------------------------------
0059E1r 2               ; JOY1SCAN
0059E1r 2               ;
0059E1r 2               ; Scan joystick1 and return key in z80_e
0059E1r 2               ; Up, down, left, right and fire are read from the joystick
0059E1r 2               ; Fire2 and fire3 are read from the keyboard
0059E1r 2               ;-------------------------------------------------------------
0059E1r 2               
0059E1r 2               joy1scan:
0059E1r 2  A9 FF        	lda #$ff
0059E3r 2  85 rr        	sta z80_e
0059E5r 2               
0059E5r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
0059E8r 2  4A           	lsr a
0059E9r 2  4A           	lsr a
0059EAr 2               
0059EAr 2  4A           	lsr a
0059EBr 2  26 rr        	rol z80_e		; Up
0059EDr 2  4A           	lsr a
0059EEr 2  26 rr        	rol z80_e		; Down
0059F0r 2  4A           	lsr a
0059F1r 2  26 rr        	rol z80_e		; Left
0059F3r 2               
0059F3r 2  A9 7F        	lda #%01111111
0059F5r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
0059F8r 2  AD 20 91     	lda JoyAddr2
0059FBr 2  0A           	asl a
0059FCr 2  26 rr        	rol z80_e		; Right
0059FEr 2  A9 FF        	lda #%11111111
005A00r 2  8D 22 91     	sta DDRB		; Reset
005A03r 2               
005A03r 2  AD 11 91     	lda JoyAddr1
005A06r 2  29 20        	and #%00100000
005A08r 2  D0 06        	bne :+
005A0Ar 2  A5 rr        	lda z80_e
005A0Cr 2  29 EF        	and #%11101111		; Fire
005A0Er 2  85 rr        	sta z80_e
005A10r 2               :
005A10r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
005A13r 2  20 rr rr     	jsr ktest
005A16r 2  B0 06        	bcs :+
005A18r 2  A5 rr        	lda z80_e
005A1Ar 2  29 BF        	and #%10111111
005A1Cr 2  85 rr        	sta z80_e
005A1Er 2               :
005A1Er 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
005A21r 2  20 rr rr     	jsr ktest
005A24r 2  B0 06        	bcs :+
005A26r 2  A5 rr        	lda z80_e
005A28r 2  29 DF        	and #%11011111
005A2Ar 2  85 rr        	sta z80_e
005A2Cr 2               :
005A2Cr 2  60           	rts
005A2Dr 2               
005A2Dr 2               ;-------------------------------------------------------------
005A2Dr 2               ; JOY2SCAN
005A2Dr 2               ;
005A2Dr 2               ; TODO, Scan joystick2 and return key in z80_e
005A2Dr 2               ;-------------------------------------------------------------
005A2Dr 2               
005A2Dr 2               joy2scan:
005A2Dr 2  60           	rts
005A2Er 2               
005A2Er 2               
005A2Er 2               
005A2Er 2               ;========================================================
005A2Er 2               ; HARDWARE DEPENDING ROUTINES
005A2Er 2               ;========================================================
005A2Er 2               
005A2Er 2               ;----------------------------------------------------
005A2Er 2               ; DELAY
005A2Er 2               ;
005A2Er 2               ; Delay routine A * 1/50 sec
005A2Er 2               ;----------------------------------------------------
005A2Er 2               
005A2Er 2               delay:
005A2Er 2  85 rr        	sta xtmp		; set delaycounter
005A30r 2               del_loop:
005A30r 2  AD 04 90     	lda Reg4
005A33r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
005A35r 2               
005A35r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
005A37r 2               delay1:
005A37r 2  61 80        	adc ($80,x)		;	 6 usec
005A39r 2  61 80        	adc ($80,x)		;	 6 usec
005A3Br 2  88           	dey			;	 2 usec
005A3Cr 2  D0 F9        	bne delay1		;	 2 usec
005A3Er 2  EA           	nop			; 2 usec
005A3Fr 2  EA           	nop			; 2 usec
005A40r 2               				; tot: 20000 usec
005A40r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
005A42r 2  D0 EC        	bne del_loop
005A44r 2  60           	rts
005A45r 2               
005A45r 2               ;-------------------------------------------------------------
005A45r 2               ; VSYNC
005A45r 2               ;
005A45r 2               ; - read joystick/keyboard
005A45r 2               ; - sync framerate with timer 25Hz
005A45r 2               ; - handle shrapnel every even frame
005A45r 2               ; - handle sound
005A45r 2               ;-------------------------------------------------------------
005A45r 2               
005A45r 2               vsync:
005A45r 2  48           	pha			; save registers
005A46r 2  98           	tya
005A47r 2  48           	pha
005A48r 2  8A           	txa
005A49r 2  48           	pha
005A4Ar 2               
005A4Ar 2               ;-------------------------------------------------------------
005A4Ar 2               ; Read joystick/keyboard.
005A4Ar 2               ;-------------------------------------------------------------
005A4Ar 2               
005A4Ar 2  20 rr rr     	jsr joykey
005A4Dr 2               
005A4Dr 2               ;-------------------------------------------------------------
005A4Dr 2               ; Sync framerate with timer 25Hz
005A4Dr 2               ;-------------------------------------------------------------
005A4Dr 2               
005A4Dr 2  A9 40        	lda #$40		; set Timer1 expired bit
005A4Fr 2               vsync1:
005A4Fr 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
005A52r 2  F0 FB        	beq vsync1		; wait if timer not expired
005A54r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
005A57r 2               
005A57r 2               ;-------------------------------------------------------------
005A57r 2               ; Handle sound command
005A57r 2               ;-------------------------------------------------------------
005A57r 2               
005A57r 2  20 rr rr     	jsr make_sound2
005A5Ar 2               
005A5Ar 2               ;-------------------------------------------------------------
005A5Ar 2               ; Handle shrapnel every even frame
005A5Ar 2               ;-------------------------------------------------------------
005A5Ar 2               
005A5Ar 2  A5 rr        	lda clock		; get clock
005A5Cr 2  29 01        	and #1			; 2 frames expired
005A5Er 2  D0 03        	bne:+
005A60r 2  20 rr rr     	jsr proshr		; process shrapnel
005A63r 2               :
005A63r 2               
005A63r 2               ;-------------------------------------------------------------
005A63r 2               ; Handle sound BEEP and CRASH
005A63r 2               ;-------------------------------------------------------------
005A63r 2               
005A63r 2  AD rr rr     	lda sndtyp
005A66r 2  F0 4E        	beq sndskip
005A68r 2               
005A68r 2               sndloop:
005A68r 2  AC rr rr     	ldy sndtyp
005A6Br 2               sndwait:
005A6Br 2  88           	dey
005A6Cr 2  D0 FD        	bne sndwait
005A6Er 2               
005A6Er 2  AD rr rr     	lda sndtyp
005A71r 2  30 1E        	bmi crashaudio
005A73r 2               
005A73r 2               ; BEEP command:
005A73r 2               ; enable sound on channel 2
005A73r 2               ; range 0-127
005A73r 2               
005A73r 2               beepaudio:
005A73r 2  AD 0E 90     	lda RegE
005A76r 2  09 0F        	ora #$0f
005A78r 2  8D 0E 90     	sta RegE
005A7Br 2               
005A7Br 2  A5 rr        	lda SOUNDS_STATUS
005A7Dr 2  09 40        	ora #%01000000
005A7Fr 2  85 rr        	sta SOUNDS_STATUS
005A81r 2  A9 FF        	lda #$ff
005A83r 2  38           	sec
005A84r 2  ED rr rr     	sbc sndtyp
005A87r 2  4A           	lsr
005A88r 2  4A           	lsr
005A89r 2  09 C0        	ora #%11000000
005A8Br 2  8D 0C 90     	sta RegC
005A8Er 2  4C rr rr     	jmp endaudiotype
005A91r 2               
005A91r 2               ; CRASH command:
005A91r 2               ; enable sound on channel 3
005A91r 2               ; range 128-255
005A91r 2               
005A91r 2               crashaudio:
005A91r 2  AD 0E 90     	lda RegE
005A94r 2  09 0F        	ora #$0f
005A96r 2  8D 0E 90     	sta RegE
005A99r 2  A5 rr        	lda SOUNDS_STATUS
005A9Br 2  09 80        	ora #%10000000
005A9Dr 2  85 rr        	sta SOUNDS_STATUS
005A9Fr 2  A9 FF        	lda #$ff
005AA1r 2  38           	sec
005AA2r 2  ED rr rr     	sbc sndtyp
005AA5r 2  09 80        	ora #%10000000
005AA7r 2  8D 0D 90     	sta RegD
005AAAr 2               
005AAAr 2               endaudiotype:
005AAAr 2  CE rr rr     	dec sndtyp
005AADr 2  F0 07        	beq sndskip
005AAFr 2  C9 80        	cmp #128
005AB1r 2  F0 03        	beq sndskip
005AB3r 2  4C rr rr     	jmp sndloop
005AB6r 2               
005AB6r 2               ; disable sound
005AB6r 2               
005AB6r 2               sndskip:
005AB6r 2  24 rr        	bit SOUNDS_STATUS
005AB8r 2  50 0B        	bvc :+
005ABAr 2  A5 rr        	lda SOUNDS_STATUS
005ABCr 2  29 BF        	and #%10111111
005ABEr 2  85 rr        	sta SOUNDS_STATUS
005AC0r 2  A9 00        	lda #$00
005AC2r 2  8D 0C 90     	sta RegC
005AC5r 2               :
005AC5r 2  24 rr        	bit SOUNDS_STATUS
005AC7r 2  10 0B        	bpl :+
005AC9r 2               
005AC9r 2  A5 rr        	lda SOUNDS_STATUS
005ACBr 2  29 7F        	and #%01111111
005ACDr 2  85 rr        	sta SOUNDS_STATUS
005ACFr 2  A9 00        	lda #$00
005AD1r 2  8D 0D 90     	sta RegD
005AD4r 2               :
005AD4r 2  68           	pla
005AD5r 2  AA           	tax
005AD6r 2  68           	pla
005AD7r 2  A8           	tay
005AD8r 2  68           	pla
005AD9r 2  60           	rts
005ADAr 2               
005ADAr 2  00           sndtyp:		.byte 0		; Beep sound parameter
005ADBr 2               
005ADBr 2               ;========================================================
005ADBr 2               ; SPRITE HANDLING ROUTINES
005ADBr 2               ;========================================================
005ADBr 2               
005ADBr 2               ;----------------------------------------------------
005ADBr 2               ; SPRITE
005ADBr 2               ;
005ADBr 2               ; Draw object sprite
005ADBr 2               ;----------------------------------------------------
005ADBr 2               
005ADBr 2               .if oflag
005ADBr 2               sprite:
005ADBr 2  86 rr        	stx xtmp		; Save X-reg
005ADDr 2  20 rr rr     	jsr scadd 		; get screen address in scraddr.
005AE0r 2               
005AE0r 2  A5 rr        	lda dispx 		; x position.
005AE2r 2  29 07        	and #7 			; position straddling cells.
005AE4r 2  85 rr        	sta z80_b		; store in b register.
005AE6r 2               
005AE6r 2  A5 rr        	lda z80_l		; store sprite graphic address.
005AE8r 2  8D rr rr     	sta sprit1+1
005AEBr 2  8D rr rr     	sta sprit2+1
005AEEr 2  A5 rr        	lda z80_h
005AF0r 2  8D rr rr     	sta sprit1+2
005AF3r 2  8D rr rr     	sta sprit2+2
005AF6r 2               
005AF6r 2  A2 00        	ldx #0			; pixel height.
005AF8r 2  A0 00        	ldy #0
005AFAr 2               sprit1:
005AFAr 2  BD rr rr     	lda objdta,x		; fetch first byte.
005AFDr 2  85 rr        	sta spr
005AFFr 2  E8           	inx
005B00r 2               sprit2:
005B00r 2  BD rr rr     	lda objdta,x
005B03r 2  85 rr        	sta spr+1
005B05r 2               
005B05r 2  A9 00        	lda #0
005B07r 2  85 rr        	sta spr+2
005B09r 2  20 rr rr     	jsr sprit7		; shift sprite
005B0Cr 2               
005B0Cr 2  A5 rr        	lda spr			; fetch graphic.
005B0Er 2  A0 00        	ldy #0			; _BEEB
005B10r 2  51 rr        	eor (scraddr),y		; merge with screen image.
005B12r 2  91 rr        	sta (scraddr),y		; write to screen.
005B14r 2               
005B14r 2  A5 rr        	lda spr+1		; fetch graphic.
005B16r 2  A0 10        	ldy #16			; _BEEB
005B18r 2  51 rr        	eor (scraddr),y		; merge with screen image.
005B1Ar 2  91 rr        	sta (scraddr),y		; write to screen.
005B1Cr 2               
005B1Cr 2  A5 rr        	lda spr+2		; fetch graphic.
005B1Er 2  A0 20        	ldy #32			; _BEEB
005B20r 2  51 rr        	eor (scraddr),y		; merge with screen image.
005B22r 2  91 rr        	sta (scraddr),y		; write to screen.
005B24r 2               
005B24r 2  20 rr rr     	jsr nline
005B27r 2               
005B27r 2  E8           	inx			; next source byte.
005B28r 2  E0 20        	cpx #32
005B2Ar 2  D0 CE        	bne sprit1		; repeat
005B2Cr 2               
005B2Cr 2  A6 rr        	ldx xtmp		; retreive X-reg
005B2Er 2  60           	rts
005B2Fr 2               
005B2Fr 2               .endif
005B2Fr 2               
005B2Fr 2               ;------------------------------------------------------------------
005B2Fr 2               ; SCADD
005B2Fr 2               ;
005B2Fr 2               ; This routine returns a screen address for X,Y in scraddr.
005B2Fr 2               ;------------------------------------------------------------------
005B2Fr 2               
005B2Fr 2               scadd:
005B2Fr 2  A5 rr        	lda dispx		; get x
005B31r 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
005B33r 2  85 rr        	sta scraddr		; set lb scraddr
005B35r 2  A9 00        	lda #0
005B37r 2  85 rr        	sta scraddr+1		; set hb scraddr
005B39r 2  06 rr        	asl scraddr		; multiply X by 2
005B3Br 2  26 rr        	rol scraddr+1
005B3Dr 2               
005B3Dr 2               ; Add line address Y pos to X
005B3Dr 2               
005B3Dr 2  A6 rr        	ldx dispy		; get row address Y pos
005B3Fr 2  18           	clc
005B40r 2  A5 rr        	lda scraddr
005B42r 2  7D 00 07     	adc SCADTB_lb,x
005B45r 2  85 rr        	sta scraddr
005B47r 2  A5 rr        	lda scraddr+1
005B49r 2  7D 00 08     	adc SCADTB_hb,x
005B4Cr 2  85 rr        	sta scraddr+1
005B4Er 2               
005B4Er 2  60           	rts
005B4Fr 2               
005B4Fr 2               ;------------------------------------------------------------------
005B4Fr 2               ; SSPRIA
005B4Fr 2               ;
005B4Fr 2               ; Erase single sprite, old (ix+0).
005B4Fr 2               ;------------------------------------------------------------------
005B4Fr 2               
005B4Fr 2               sspria:
005B4Fr 2  20 rr rr     	jsr gsprad		; get old sprite address.
005B52r 2               sspri2:
005B52r 2               .if rflag
005B52r 2  A5 rr        	lda z80_e		; 3c
005B54r 2  8D rr rr     	sta dline_spraddr1+1	; 4c
005B57r 2  8D rr rr     	sta dline_spraddr2+1	; 4c
005B5Ar 2  A5 rr        	lda z80_d		; 3c
005B5Cr 2  8D rr rr     	sta dline_spraddr1+2	; 4c
005B5Fr 2  8D rr rr     	sta dline_spraddr2+2	; 4c
005B62r 2               
005B62r 2  A6 rr        	ldx sprshft
005B64r 2  BD rr rr     	lda shift_table,x
005B67r 2  8D rr rr     	sta dline_shift1+1
005B6Ar 2  8D rr rr     	sta dline_shift2+1
005B6Dr 2  BD rr rr     	lda shift_table+1,x
005B70r 2  8D rr rr     	sta dline_shift1+2
005B73r 2  8D rr rr     	sta dline_shift2+2
005B76r 2               
005B76r 2  A2 00        	ldx #0			; byte counter.
005B78r 2               sspri0:
005B78r 2  20 rr rr     	jsr dline		; draw a line.
005B7Br 2                 .if bflag
005B7Br 2               	cpx #48			; big sprites have 24 bytes
005B7Br 2                 .else
005B7Br 2  E0 20        	cpx #32			; normal sprites have 32 bytes
005B7Dr 2                 .endif
005B7Dr 2  D0 F9        	bne sspri0		; repeat 16 times x 2 bytes
005B7Fr 2  60           	rts
005B80r 2               .else
005B80r 2                 .if bflag
005B80r 2               	lda #24			; big sprites have 24 lines
005B80r 2                 .else
005B80r 2               	lda #16			; normal sprites have 16 lines.
005B80r 2                 .endif
005B80r 2               	sta acnt
005B80r 2               sspri0:
005B80r 2               	jsr dline		; draw a line.
005B80r 2               	dec acnt
005B80r 2               	bne sspri0		; repeat 16 times
005B80r 2               	rts
005B80r 2               
005B80r 2               acnt:	.byte 0			; line counter
005B80r 2               
005B80r 2               .endif
005B80r 2               
005B80r 2               ;------------------------------------------------------------------
005B80r 2               ; SSPRIB
005B80r 2               ;
005B80r 2               ; Display single sprite, new (ix+5).
005B80r 2               ;------------------------------------------------------------------
005B80r 2               
005B80r 2               ssprib:
005B80r 2  20 rr rr     	jsr gspran 		; get new sprite address.
005B83r 2  4C rr rr     	jmp sspri2		; Display sprite
005B86r 2               
005B86r 2               ;------------------------------------------------------------------
005B86r 2               ; SSPRIC
005B86r 2               ;
005B86r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
005B86r 2               ;------------------------------------------------------------------
005B86r 2               
005B86r 2               sspric:
005B86r 2               .if rflag
005B86r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
005B89r 2               
005B89r 2  A5 rr        	lda z80_e		; 3c
005B8Br 2  8D rr rr     	sta ddline_spraddr3+1	; 4c
005B8Er 2  8D rr rr     	sta ddline_spraddr4+1	; 4c
005B91r 2               
005B91r 2  A5 rr        	lda z80_d		; 3c
005B93r 2  8D rr rr     	sta ddline_spraddr3+2	; 4c
005B96r 2  8D rr rr     	sta ddline_spraddr4+2	; 4c
005B99r 2               
005B99r 2  A6 rr        	ldx sprshft		; set spriteshift table addresses
005B9Br 2  BD rr rr     	lda shift_table,x
005B9Er 2  8D rr rr     	sta ddline_shift3+1
005BA1r 2  8D rr rr     	sta ddline_shift4+1
005BA4r 2  BD rr rr     	lda shift_table+1,x
005BA7r 2  8D rr rr     	sta ddline_shift3+2
005BAAr 2  8D rr rr     	sta ddline_shift4+2
005BADr 2               
005BADr 2  20 rr rr     	jsr exx  		; store addresses.
005BB0r 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
005BB3r 2               
005BB3r 2  A5 rr        	lda z80_e		; 3c
005BB5r 2  8D rr rr     	sta ddline_spraddr1+1	; 4c
005BB8r 2  8D rr rr     	sta ddline_spraddr2+1	; 4c
005BBBr 2               
005BBBr 2  A5 rr        	lda z80_d		; 3c
005BBDr 2  8D rr rr     	sta ddline_spraddr1+2	; 4c
005BC0r 2  8D rr rr     	sta ddline_spraddr2+2	; 4c
005BC3r 2               
005BC3r 2  A6 rr        	ldx sprshft
005BC5r 2  BD rr rr     	lda shift_table,x
005BC8r 2  8D rr rr     	sta ddline_shift1+1
005BCBr 2  8D rr rr     	sta ddline_shift2+1
005BCEr 2  BD rr rr     	lda shift_table+1,x
005BD1r 2  8D rr rr     	sta ddline_shift1+2
005BD4r 2  8D rr rr     	sta ddline_shift2+2
005BD7r 2               
005BD7r 2  A2 00        	ldx #0
005BD9r 2               lloop:
005BD9r 2  20 rr rr     	jsr ddline 		; draw a line.
005BDCr 2                 .if bflag
005BDCr 2               	cpx #48
005BDCr 2                 .else
005BDCr 2  E0 20        	cpx #32
005BDEr 2                 .endif
005BDEr 2  D0 F9        	bne lloop
005BE0r 2  60           	rts
005BE1r 2               
005BE1r 2               shift_table:
005BE1r 2  00 A0        	.word shift0
005BE3r 2  00 A1        	.word shift2
005BE5r 2  00 A2        	.word shift4
005BE7r 2  00 A3        	.word shift6
005BE9r 2               
005BE9r 2               ;------------------------------------------------------------------
005BE9r 2               ; DLINE
005BE9r 2               ;
005BE9r 2               ; Draw a sprite line, now work out next target address.
005BE9r 2               ;
005BE9r 2               ; Input:
005BE9r 2               ;  B  = right mask
005BE9r 2               ;  C  = left mask
005BE9r 2               ;  DE = spriteaddress
005BE9r 2               ;  scraddr = screen address
005BE9r 2               ;------------------------------------------------------------------
005BE9r 2               
005BE9r 2               dline:
005BE9r 2               
005BE9r 2               dline_spraddr1:
005BE9r 2  BC FF FF     	ldy $ffff,x 		; get graphic data as pointer.
005BECr 2               dline_shift1:
005BECr 2  B9 FF FF     	lda $ffff,y		; get pre-shifted data
005BEFr 2  85 rr        	sta sprtmp		; save byte
005BF1r 2  25 rr        	and z80_c 		; mask right for left byte
005BF3r 2               
005BF3r 2  A0 00        	ldy #0
005BF5r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005BF7r 2  91 rr        	sta (scraddr),y 	; display left byte
005BF9r 2               
005BF9r 2               ; carry to next screen byte
005BF9r 2               
005BF9r 2  A5 rr        	lda sprtmp		; fetch data.
005BFBr 2  25 rr        	and z80_b 		; mask for left part
005BFDr 2  85 rr        	sta sprtmp
005BFFr 2               
005BFFr 2               ; middle screen byte
005BFFr 2               
005BFFr 2  E8           	inx
005C00r 2               dline_spraddr2:
005C00r 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005C03r 2               dline_shift2:
005C03r 2  B9 FF FF     	lda $ffff,y
005C06r 2  85 rr        	sta sprtmp2
005C08r 2  25 rr        	and z80_c 		; mask away what's not needed.
005C0Ar 2  05 rr        	ora sprtmp
005C0Cr 2  A0 10        	ldy #16
005C0Er 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005C10r 2  91 rr        	sta (scraddr),y 	; display middle bye.
005C12r 2               
005C12r 2               ; carry to last screen byte
005C12r 2               
005C12r 2  A5 rr        	lda sprtmp2
005C14r 2  25 rr        	and z80_b 		; mask away unwanted
005C16r 2               
005C16r 2  A0 20        	ldy #32
005C18r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005C1Ar 2  91 rr        	sta (scraddr),y 	; display right byte.
005C1Cr 2               
005C1Cr 2  E8           	inx
005C1Dr 2               .else
005C1Dr 2               
005C1Dr 2               	jsr gsprad 		; get old sprite address.
005C1Dr 2               	jsr exx  		; store addresses.
005C1Dr 2               	jsr gspran 		; get new sprite addresses.
005C1Dr 2               
005C1Dr 2               .if bflag
005C1Dr 2               	lda #23
005C1Dr 2               .else
005C1Dr 2               	lda #15
005C1Dr 2               .endif
005C1Dr 2               	sta ccnt
005C1Dr 2               lloop:
005C1Dr 2               	jsr dline 		; draw a line.
005C1Dr 2               	jsr exx  		; restore old addresses.
005C1Dr 2               	jsr dline 		; delete a line.
005C1Dr 2               	jsr exx  		; flip to new sprite addresses.
005C1Dr 2               	dec ccnt
005C1Dr 2               	bne lloop
005C1Dr 2               
005C1Dr 2               	jsr dline		; draw a line.
005C1Dr 2               	jsr exx 		; restore old addresses.
005C1Dr 2               
005C1Dr 2               ;-------------------------------------------------------------
005C1Dr 2               ; Drop through.
005C1Dr 2               ; Line drawn, now work out next target address.
005C1Dr 2               ;
005C1Dr 2               ; Input:
005C1Dr 2               ;  B  = right mask
005C1Dr 2               ;  C  = left mask
005C1Dr 2               ;  DE = spriteaddress
005C1Dr 2               ;  scraddr = screen address
005C1Dr 2               ;-------------------------------------------------------------
005C1Dr 2               
005C1Dr 2               dline:
005C1Dr 2               	ldy #0
005C1Dr 2               	lda (z80_de),y 		; graphic data.
005C1Dr 2               	pha
005C1Dr 2               	and z80_c 		; mask away what's not needed.
005C1Dr 2               	eor (scraddr),y 	; XOR with what's there.
005C1Dr 2               	sta (scraddr),y 	; left byte on screen.
005C1Dr 2               
005C1Dr 2               	pla
005C1Dr 2               	and z80_b 		; mask away unwanted bits.
005C1Dr 2               	ldy #32
005C1Dr 2               	eor (scraddr),y 	; XOR with what's there.
005C1Dr 2               	sta (scraddr),y 	; right byte on screen
005C1Dr 2               
005C1Dr 2               	inc z80_e 		; next graphic.
005C1Dr 2               	bne :+
005C1Dr 2               	inc z80_d
005C1Dr 2               :
005C1Dr 2               ; _BEEB screen arrangement
005C1Dr 2               ;	sec
005C1Dr 2               ;	lda scraddr 		; one character cell to the left.
005C1Dr 2               ;	sbc #8
005C1Dr 2               ;	sta scraddr
005C1Dr 2               ;	lda scraddr+1
005C1Dr 2               ;	sbc #0
005C1Dr 2               ;	sta scraddr+1
005C1Dr 2               	ldy #0
005C1Dr 2               	lda (z80_de),y 		; second bit of data.
005C1Dr 2               	ldy #16
005C1Dr 2               	eor (scraddr),y 	; XOR with what's there.
005C1Dr 2               	sta (scraddr),y 	; middle byte on screen.
005C1Dr 2               
005C1Dr 2               	inc z80_e 		; point to next line of data.
005C1Dr 2               	bne :+
005C1Dr 2               	inc z80_d
005C1Dr 2               :
005C1Dr 2               ; _BEEB screen arrangement
005C1Dr 2               ;	sec
005C1Dr 2               ;	lda scraddr 		; another char left.
005C1Dr 2               ;	sbc #8
005C1Dr 2               ;	sta scraddr
005C1Dr 2               ;	lda scraddr+1
005C1Dr 2               ;	sbc #0
005C1Dr 2               ;	sta scraddr+1
005C1Dr 2               .endif
005C1Dr 2               
005C1Dr 2               ;----------------------------------------------------------------------
005C1Dr 2               ; Line drawn, now work out next target address.
005C1Dr 2               ;----------------------------------------------------------------------
005C1Dr 2               
005C1Dr 2               ; _BEEB screen arrangement
005C1Dr 2               
005C1Dr 2               nline:
005C1Dr 2  A5 rr        	lda scraddr 			; get low byte of address.
005C1Fr 2  29 0F        	and #15
005C21r 2  C9 0F        	cmp #15				; is this last line of row?
005C23r 2  F0 03        	beq beeb_next_row
005C25r 2               
005C25r 2               	; within same row
005C25r 2  E6 rr        	inc scraddr			; new low byte of address.
005C27r 2  60           	rts
005C28r 2               
005C28r 2               beeb_next_row:
005C28r 2  18           	clc
005C29r 2  A5 rr        	lda scraddr
005C2Br 2  69 51        	adc #<(ScreenRowBytes-15)
005C2Dr 2  85 rr        	sta scraddr			; new low byte of address.
005C2Fr 2  A5 rr        	lda scraddr+1
005C31r 2  69 01        	adc #>(ScreenRowBytes-15)
005C33r 2  85 rr        	sta scraddr+1			; new high byte of address.
005C35r 2  60           	rts
005C36r 2               
005C36r 2               .if rflag
005C36r 2               ;-------------------------------------------------------------
005C36r 2               ; Drop through.
005C36r 2               ; Line drawn, now work out next target address.
005C36r 2               ;
005C36r 2               ; Input:
005C36r 2               ;  B  = right mask
005C36r 2               ;  C  = left mask
005C36r 2               ;  DE = spriteaddress
005C36r 2               ;  scraddr = screen address
005C36r 2               ;-------------------------------------------------------------
005C36r 2               
005C36r 2               ddline:
005C36r 2               
005C36r 2               ; NEW SPRITE
005C36r 2               
005C36r 2               ; first screen byte
005C36r 2               
005C36r 2               ddline_spraddr1:
005C36r 2  BC FF FF     	ldy $ffff,x 		; graphic data.
005C39r 2               ddline_shift1:
005C39r 2  B9 FF FF     	lda $ffff,y
005C3Cr 2  85 rr        	sta sprtmp
005C3Er 2  25 rr        	and z80_c 			; mask away what's not needed.
005C40r 2               
005C40r 2  A0 00        	ldy #0
005C42r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005C44r 2  91 rr        	sta (scraddr),y 	; bung it in.
005C46r 2               
005C46r 2               ; carry to next screen byte
005C46r 2               
005C46r 2  A5 rr        	lda sprtmp			; fetch data.
005C48r 2  25 rr        	and z80_b 			; mask away unwanted
005C4Ar 2  85 rr        	sta sprtmp
005C4Cr 2               
005C4Cr 2               ; middle screen byte
005C4Cr 2               
005C4Cr 2  E8           	inx
005C4Dr 2               ddline_spraddr2:
005C4Dr 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005C50r 2               ddline_shift2:
005C50r 2  B9 FF FF     	lda $ffff,y
005C53r 2  85 rr        	sta sprtmp2
005C55r 2  25 rr        	and z80_c 			; mask away what's not needed.
005C57r 2  05 rr        	ora sprtmp
005C59r 2               
005C59r 2  A0 10        	ldy #16
005C5Br 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005C5Dr 2  91 rr        	sta (scraddr),y 	; bung it in.
005C5Fr 2               
005C5Fr 2               ; carry to last screen byte
005C5Fr 2               
005C5Fr 2  A5 rr        	lda sprtmp2
005C61r 2  25 rr        	and z80_b 			; mask away unwanted
005C63r 2               
005C63r 2  A0 20        	ldy #32
005C65r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005C67r 2  91 rr        	sta (scraddr),y 	; bung it in.
005C69r 2               
005C69r 2               ; _BEEB next row
005C69r 2               
005C69r 2  A5 rr        	lda scraddr 		; get low byte of address.
005C6Br 2  29 0F        	and #15
005C6Dr 2  C9 0F        	cmp #15				; is this last line of row?
005C6Fr 2  F0 04        	beq :+
005C71r 2               
005C71r 2               	; within same row can't increment page
005C71r 2  E6 rr        	inc scraddr			; new low byte of address.
005C73r 2  D0 0D        	bne ddline2
005C75r 2               
005C75r 2               :
005C75r 2  18           	clc
005C76r 2  A5 rr        	lda scraddr
005C78r 2  69 51        	adc #<(ScreenRowBytes-15)
005C7Ar 2  85 rr        	sta scraddr			; new low byte of address.
005C7Cr 2  A5 rr        	lda scraddr+1
005C7Er 2  69 01        	adc #>(ScreenRowBytes-15)
005C80r 2  85 rr        	sta scraddr+1		; new high byte of address.
005C82r 2               
005C82r 2               ; OLD SPRITE
005C82r 2               
005C82r 2               ddline2:
005C82r 2               
005C82r 2               ; still first row but different data!
005C82r 2               
005C82r 2  CA           	dex
005C83r 2               
005C83r 2               ; first screen byte
005C83r 2               
005C83r 2               ddline_spraddr3:
005C83r 2  BC FF FF     	ldy $ffff,x			; graphic data.
005C86r 2               ddline_shift3:
005C86r 2  B9 FF FF     	lda $ffff,y
005C89r 2  85 rr        	sta sprtmp
005C8Br 2  25 rr        	and z80_cp 			; mask away what's not needed.
005C8Dr 2               
005C8Dr 2  A0 00        	ldy #0
005C8Fr 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
005C91r 2  91 rr        	sta (z80_hlp),y 	; bung it in.
005C93r 2               
005C93r 2               ; carry to next screen byte
005C93r 2               
005C93r 2  A5 rr        	lda sprtmp			; fetch data.
005C95r 2  25 rr        	and z80_bp 			; mask away unwanted
005C97r 2  85 rr        	sta sprtmp
005C99r 2               
005C99r 2               ; middle screen byte
005C99r 2               
005C99r 2  E8           	inx
005C9Ar 2               ddline_spraddr4:
005C9Ar 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005C9Dr 2               ddline_shift4:
005C9Dr 2  B9 FF FF     	lda $ffff,y
005CA0r 2  85 rr        	sta sprtmp2
005CA2r 2  25 rr        	and z80_cp 			; mask away what's not needed.
005CA4r 2  05 rr        	ora sprtmp
005CA6r 2               
005CA6r 2  A0 10        	ldy #16
005CA8r 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
005CAAr 2  91 rr        	sta (z80_hlp),y 	; bung it in.
005CACr 2               
005CACr 2               ; last screen byte
005CACr 2               
005CACr 2  A5 rr        	lda sprtmp2			; fetch data.
005CAEr 2  25 rr        	and z80_bp 			; mask away unwanted
005CB0r 2               
005CB0r 2  A0 20        	ldy #32
005CB2r 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
005CB4r 2  91 rr        	sta (z80_hlp),y 	; bung it in.
005CB6r 2               
005CB6r 2               ; next row of sprite data
005CB6r 2               
005CB6r 2  E8           	inx
005CB7r 2               
005CB7r 2               ; _BEEB screen arrangement
005CB7r 2               
005CB7r 2  A5 rr        	lda z80_lp 			; get low byte of address.
005CB9r 2  29 0F        	and #15
005CBBr 2  C9 0F        	cmp #15				; is this last line of row?
005CBDr 2  F0 03        	beq :+
005CBFr 2               
005CBFr 2               	; within same row can't increment page
005CBFr 2  E6 rr        	inc z80_lp			; new low byte of address.
005CC1r 2  60           	rts
005CC2r 2               
005CC2r 2               :
005CC2r 2  18           	clc
005CC3r 2  A5 rr        	lda z80_lp
005CC5r 2  69 51        	adc #<(ScreenRowBytes-15)
005CC7r 2  85 rr        	sta z80_lp			; new low byte of address.
005CC9r 2  A5 rr        	lda z80_lp+1
005CCBr 2  69 01        	adc #>(ScreenRowBytes-15)
005CCDr 2  85 rr        	sta z80_lp+1		; new high byte of address.
005CCFr 2  60           	rts
005CD0r 2               .endif
005CD0r 2               
005CD0r 2               ;----------------------------------------------------
005CD0r 2               ; SPRINTEINK
005CD0r 2               ;----------------------------------------------------
005CD0r 2               
005CD0r 2               cspr:
005CD0r 2  A0 08        	ldy #8
005CD2r 2  B1 rr        	lda (z80_ix),y			; Get sprite y
005CD4r 2  85 rr        	sta dispy
005CD6r 2  C9 B1        	cmp #8*ScrHeight+1		; Check if on screen
005CD8r 2  90 01        	bcc :+
005CDAr 2  60           	rts
005CDBr 2               :
005CDBr 2  C8           	iny
005CDCr 2  B1 rr        	lda (z80_ix),y			; Get sprite x
005CDEr 2  85 rr        	sta dispx
005CE0r 2               
005CE0r 2               ; Calculate map address in buffaddr
005CE0r 2               
005CE0r 2               ;	jsr tstbl
005CE0r 2               
005CE0r 2               ; Calculate colour attribte address in scraddr
005CE0r 2               
005CE0r 2  20 rr rr     	jsr coladdr
005CE3r 2               
005CE3r 2               ; Set number of rows
005CE3r 2               
005CE3r 2  A9 02        	lda #2
005CE5r 2  85 rr        	sta z80_b
005CE7r 2  A5 rr        	lda dispy
005CE9r 2  29 0F        	and #15
005CEBr 2  D0 02        	bne :+
005CEDr 2  C6 rr        	dec z80_b
005CEFr 2               :
005CEFr 2               ; Loop to colour row blocks
005CEFr 2               
005CEFr 2               cspr0:
005CEFr 2  A0 00        	ldy #0
005CF1r 2               ;	lda (bufaddr),y
005CF1r 2               ;	bne cspr6
005CF1r 2  A5 rr        	lda z80_c
005CF3r 2  91 rr        	sta (scraddr),y
005CF5r 2               cspr6:
005CF5r 2  A0 01        	ldy #1
005CF7r 2               ;	lda (bufaddr),y
005CF7r 2               ;	bne cspr7
005CF7r 2               ;	lda z80_c
005CF7r 2  91 rr        	sta (scraddr),y
005CF9r 2               cspr7:
005CF9r 2  A5 rr        	lda dispx
005CFBr 2  29 07        	and #7
005CFDr 2  F0 06        	beq cspr1
005CFFr 2               
005CFFr 2  A0 02        	ldy #2
005D01r 2               ;	lda (bufaddr),y
005D01r 2               ;	bne cspr1
005D01r 2               
005D01r 2  A5 rr        	lda z80_c
005D03r 2  91 rr        	sta (scraddr),y
005D05r 2               cspr1:
005D05r 2               ;	lda bufaddr
005D05r 2               ;	clc
005D05r 2               ;	adc #32
005D05r 2               ;	sta bufaddr
005D05r 2               ;	bcc :+
005D05r 2               ;	inc bufaddr+1
005D05r 2               ;:
005D05r 2  A5 rr        	lda scraddr
005D07r 2  18           	clc
005D08r 2  69 16        	adc #22
005D0Ar 2  85 rr        	sta scraddr
005D0Cr 2  90 02        	bcc :+
005D0Er 2  E6 rr        	inc scraddr+1
005D10r 2               :
005D10r 2  C6 rr        	dec z80_b
005D12r 2  D0 DB        	bne cspr0
005D14r 2  60           	rts
005D15r 2               
005D15r 2               ; Calculate colour attribte address
005D15r 2               ; scraddr = COLOR + dispy/16 + dispx/8
005D15r 2               
005D15r 2               coladdr:
005D15r 2  A5 rr        	lda dispy
005D17r 2  4A           	lsr a
005D18r 2  4A           	lsr a
005D19r 2  4A           	lsr a
005D1Ar 2  4A           	lsr a
005D1Br 2  A8           	tay
005D1Cr 2  B9 55 0A     	lda COLATTTB_hb,y
005D1Fr 2  85 rr        	sta scraddr+1
005D21r 2  B9 4A 0A     	lda COLATTTB_lb,y
005D24r 2  85 rr        	sta scraddr
005D26r 2  A5 rr        	lda dispx
005D28r 2  4A           	lsr a
005D29r 2  4A           	lsr a
005D2Ar 2  4A           	lsr a
005D2Br 2  18           	clc
005D2Cr 2  65 rr        	adc scraddr
005D2Er 2  85 rr        	sta scraddr
005D30r 2  90 02        	bcc :+
005D32r 2  E6 rr        	inc tmp+1
005D34r 2               :
005D34r 2  60           	rts
005D35r 2               
005D35r 2               ;----------------------------------------------------
005D35r 2               ; Display character in A at dispx,dispy.
005D35r 2               ;
005D35r 2               ; Input:
005D35r 2               ;  A 	   = character to print
005D35r 2               ;----------------------------------------------------
005D35r 2               
005D35r 2               pchar:
005D35r 2  85 rr        	sta fntaddr
005D37r 2  A9 00        	lda #0
005D39r 2  85 rr        	sta fntaddr+1
005D3Br 2  06 rr        	asl fntaddr  		; multiply char by 8.
005D3Dr 2  26 rr        	rol fntaddr+1
005D3Fr 2  06 rr        	asl fntaddr
005D41r 2  26 rr        	rol fntaddr+1
005D43r 2  06 rr        	asl fntaddr
005D45r 2  26 rr        	rol fntaddr+1
005D47r 2               
005D47r 2  A5 rr        	lda fntaddr
005D49r 2  18           	clc
005D4Ar 2  69 rr        	adc #<(FONT-256)
005D4Cr 2  85 rr        	sta fntaddr		; that's the low byte.
005D4Er 2  A5 rr        	lda fntaddr+1
005D50r 2  69 rr        	adc #>(FONT-256)
005D52r 2  85 rr        	sta fntaddr+1		; add displacement.
005D54r 2               
005D54r 2               pchark:
005D54r 2  20 rr rr     	jsr gaadd		; set colour attribute
005D57r 2  AD rr rr     	lda fontcol
005D5Ar 2  A0 00        	ldy #0
005D5Cr 2  91 rr        	sta (bufaddr),y
005D5Er 2               
005D5Er 2  20 rr rr     	jsr gprad		; get screen address.
005D61r 2  A2 07        	ldx #7			; lines to write.
005D63r 2               pchar0:
005D63r 2  A0 00        	ldy #0
005D65r 2  B1 rr        	lda (fntaddr),y 	; get image byte.
005D67r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
005D6Ar 2               .if iflag
005D6Ar 2               	eor #TxtInvert		; Invert
005D6Ar 2               .endif
005D6Ar 2  91 rr        	sta (scraddr),y 	; copy to screen.
005D6Cr 2  E6 rr        	inc fntaddr		; next image byte.
005D6Er 2  D0 02        	bne :+
005D70r 2  E6 rr        	inc fntaddr+1
005D72r 2               :
005D72r 2  CA           	dex			; next screen row down.
005D73r 2  10 EE        	bpl pchar0		; repeat.
005D75r 2               
005D75r 2  60           	rts
005D76r 2               
005D76r 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
005D7Ar 2  03 02 01 00  
005D7Er 2               
005D7Er 2               ;----------------------------------------------------
005D7Er 2               ; LoadFile
005D7Er 2               ;----------------------------------------------------
005D7Er 2               
005D7Er 2               loadfile:
005D7Er 2  AA           	tax
005D7Fr 2  A9 rr        	lda #<msgdat		; pointer to messages.
005D81r 2  85 rr        	sta z80_l
005D83r 2  A9 rr        	lda #>msgdat
005D85r 2  85 rr        	sta z80_h
005D87r 2  20 rr rr     	jsr getwrd		; get message number.
005D8Ar 2               
005D8Ar 2               ; Init screen for NTSC
005D8Ar 2               ; this sets the background and border color of the screen
005D8Ar 2               ; in this case border black and background black
005D8Ar 2               
005D8Ar 2  A9 08        	lda #%00001000
005D8Cr 2  8D 0F 90     	sta RegF
005D8Fr 2               
005D8Fr 2               ; z80_hl should point to the textstring now.
005D8Fr 2               ; Read filename +length into buffer
005D8Fr 2               
005D8Fr 2  A0 00        	ldy #0
005D91r 2               nameloop:
005D91r 2  B1 rr        	lda (z80_hl),y
005D93r 2  30 07        	bmi lastchar
005D95r 2  99 rr rr     	sta filename,y
005D98r 2  C8           	iny
005D99r 2  4C rr rr     	jmp nameloop
005D9Cr 2               lastchar:
005D9Cr 2  29 7F        	and #$7f
005D9Er 2  99 rr rr     	sta filename,y
005DA1r 2  C8           	iny
005DA2r 2  8C rr rr     	sty filelen
005DA5r 2               
005DA5r 2               ; Which device to use (in A the file num 1 is OK - x with 8 is the type of device
005DA5r 2               ;                       usually the first drive, and y set to 1 reads from the header
005DA5r 2               ;                       of the file the location where to save it)
005DA5r 2  A9 01        	lda #1
005DA7r 2  A2 08        	ldx #8		; Disk device
005DA9r 2  A0 01        	ldy #1
005DABr 2  20 BA FF     	jsr $ffba
005DAEr 2               
005DAEr 2               ; Load the file name (in accumulator the size of the string
005DAEr 2               ;                      containing the name, x low address for FileName,
005DAEr 2               ;                      y high address for FileName)
005DAEr 2  AD rr rr     	lda filelen
005DB1r 2  A2 rr        	ldx #<filename
005DB3r 2  A0 rr        	ldy #>filename
005DB5r 2  20 BD FF     	jsr $ffbd
005DB8r 2               
005DB8r 2               ; load from disk to ram
005DB8r 2  A9 00        	lda #0		; accumulator must be set to 0 to load the image
005DBAr 2  A2 FF        	ldx #<$ff	; target location low not set (got from header)
005DBCr 2  A0 00        	ldy #>$ff	; target location high (got from header)
005DBEr 2  20 D5 FF     	jsr $ffd5
005DC1r 2               
005DC1r 2  60           	rts
005DC2r 2               
005DC2r 2               filename:
005DC2r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005DC6r 2  00 00 00 00  
005DCAr 2  00 00 00 00  
005DD2r 2  00 00 00 00  	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005DD6r 2  00 00 00 00  
005DDAr 2  00 00 00 00  
005DE2r 2               filelen:
005DE2r 2  00           	.byte 0
005DE3r 2               
005DE3r 2               ;----------------------------------------------------
005DE3r 2               ; Sound
005DE3r 2               ;----------------------------------------------------
005DE3r 2               
005DE3r 2               ; Actual memory locations
005DE3r 2               
005DE3r 2               CHANNEL1_ENABLED  = $ea
005DE3r 2               CHANNEL2_ENABLED  = $eb
005DE3r 2               CHANNEL3_ENABLED  = $ec
005DE3r 2               CHANNEL4_ENABLED  = $ed
005DE3r 2               MUSIC_ON		  = $ee
005DE3r 2               
005DE3r 2  0A 19 10 40  SetSoundVars:		.byte $0a, $19, $10, $40
005DE7r 2  0A 19 10 40  SetSoundDuration:	.byte $0a, $19, $10, $40
005DEBr 2  DE           SetSoundTone: 		.byte $de
005DECr 2               
005DECr 2               ;--------------------------------------------
005DECr 2               ;                      SOUND    0   1   2   3
005DECr 2               ;--------------------------------------------
005DECr 2  C8 C8 DE DC  SndTone:		.byte 200,200,222,220
005DF0r 2  01 00 03 01  SndChannel:		.byte   1,  0,  3,  1
005DF4r 2  3C 3C 3C 28  SndDuration:		.byte  60, 60, 60, 40
005DF8r 2               
005DF8r 2               ;--------------------------------------------
005DF8r 2               ; Called by SOUND with parameter in A
005DF8r 2               ;--------------------------------------------
005DF8r 2               
005DF8r 2               playsound:
005DF8r 2  A8           	tay
005DF9r 2  B9 rr rr     	lda SndTone,y		; lda $a0
005DFCr 2  8D rr rr     	sta SetSoundTone	; sta SetSoundTone
005DFFr 2  B9 rr rr     	lda SndDuration,y	; lda $a2
005E02r 2  BE rr rr     	ldx SndChannel,y	; ldx $a1
005E05r 2  9D rr rr     	sta SetSoundDuration,x	; sta SetSoundDuration,x
005E08r 2  B9 rr rr     	lda SndTone,y		; lda $a0
005E0Br 2  9D rr rr     	sta SetSoundVars,x	; sta SetSoundVars,x
005E0Er 2  60           	rts
005E0Fr 2               
005E0Fr 2               ;--------------------------------------------
005E0Fr 2               ; Make sound
005E0Fr 2               ; Called by vsync every frame
005E0Fr 2               ;--------------------------------------------
005E0Fr 2               
005E0Fr 2               make_sound2:
005E0Fr 2  A0 00        	ldy #$00
005E11r 2  AE rr rr     	ldx SetSoundTone
005E14r 2  AD rr rr     	lda SetSoundVars
005E17r 2  CD rr rr     	cmp SetSoundDuration
005E1Ar 2  B0 1C        	bcs l0366
005E1Cr 2               
005E1Cr 2  AD rr rr     	lda SetSoundVars
005E1Fr 2  CD rr rr     	cmp SetSoundDuration
005E22r 2  D0 07        	bne :+
005E24r 2  A5 EE        	lda MUSIC_ON
005E26r 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
005E28r 2  4C rr rr     	jmp l0374
005E2Br 2               :
005E2Br 2               
005E2Br 2  A9 00        	lda #$0
005E2Dr 2  85 EA        	sta CHANNEL1_ENABLED	; Enable channel 1
005E2Fr 2  EE rr rr     	inc SetSoundVars
005E32r 2  EE 0A 90     	inc RegA
005E35r 2  4C rr rr     	jmp l0374
005E38r 2               
005E38r 2  8C 0A 90     l0366:	sty RegA
005E3Br 2  EC rr rr     	cpx SetSoundVars
005E3Er 2  D0 06        	bne l0374
005E40r 2  8C rr rr     	sty SetSoundVars
005E43r 2  8E 0A 90     	stx RegA
005E46r 2               
005E46r 2  AD rr rr     l0374:	lda SetSoundVars+1
005E49r 2  CD rr rr     	cmp SetSoundDuration+1
005E4Cr 2  D0 07        	bne :+
005E4Er 2  A5 EE        	lda MUSIC_ON
005E50r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 1
005E52r 2  4C rr rr     	jmp l0392
005E55r 2               :
005E55r 2  A9 00        	lda #$0
005E57r 2  85 EB        	sta CHANNEL2_ENABLED	; Enable channel 2
005E59r 2  AD rr rr     	lda SetSoundVars+1
005E5Cr 2  CD rr rr     	cmp SetSoundDuration+1
005E5Fr 2  B0 09        	bcs l0384
005E61r 2  EE rr rr     	inc SetSoundVars+1
005E64r 2  EE 0B 90     	inc RegB
005E67r 2  4C rr rr     	jmp l0392
005E6Ar 2               
005E6Ar 2  8C 0B 90     l0384:	sty RegB
005E6Dr 2  EC rr rr     	cpx SetSoundVars+1
005E70r 2  D0 06        	bne l0392
005E72r 2  8C rr rr     	sty SetSoundVars+1
005E75r 2  8E 0B 90     	stx RegB
005E78r 2               
005E78r 2  AD rr rr     l0392:	lda SetSoundVars+2
005E7Br 2  CD rr rr     	cmp SetSoundDuration+2
005E7Er 2  D0 07        	bne :+
005E80r 2  A5 EE        	lda MUSIC_ON
005E82r 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 1
005E84r 2  4C rr rr     	jmp l03b0
005E87r 2               :
005E87r 2  A9 00        	lda #$0
005E89r 2  85 EC        	sta CHANNEL3_ENABLED	; Enable channel 3
005E8Br 2  AD rr rr     	lda SetSoundVars+2
005E8Er 2  CD rr rr     	cmp SetSoundDuration+2
005E91r 2  B0 09        	bcs l03a2
005E93r 2  EE rr rr     	inc SetSoundVars+2
005E96r 2  CE 0C 90     	dec RegC
005E99r 2  4C rr rr     	jmp l03b0
005E9Cr 2               
005E9Cr 2  8C 0C 90     l03a2:	sty RegC
005E9Fr 2  EC rr rr     	cpx SetSoundVars+2
005EA2r 2  D0 06        	bne l03b0
005EA4r 2  8C rr rr     	sty SetSoundVars+2
005EA7r 2  8E 0C 90     	stx RegC
005EAAr 2               
005EAAr 2  AD rr rr     l03b0:	lda SetSoundVars+3
005EADr 2  CD rr rr     	cmp SetSoundDuration+3
005EB0r 2  D0 07        	bne :+
005EB2r 2  A5 EE        	lda MUSIC_ON
005EB4r 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 1
005EB6r 2  4C rr rr     	jmp l03d3
005EB9r 2               :
005EB9r 2               
005EB9r 2               	; lda SetSoundVars+3
005EB9r 2               	; cmp SetSoundDuration+3
005EB9r 2               	; beq l03e1
005EB9r 2               
005EB9r 2  A9 00        	lda #$0
005EBBr 2  85 ED        	sta CHANNEL4_ENABLED	; Enable channel 4
005EBDr 2               
005EBDr 2  AD rr rr     	lda SetSoundVars+3
005EC0r 2  CD rr rr         cmp SetSoundDuration+3 ; $03b3 $03b4
005EC3r 2  B0 1C            bcs l03d3
005EC5r 2               
005EC5r 2  EE rr rr     	inc SetSoundVars+3
005EC8r 2  AD rr rr     	lda SetSoundVars+3
005ECBr 2  C9 16        	cmp #$16
005ECDr 2  D0 07        	bne l03c8
005ECFr 2  A9 B0        	lda #$b0
005ED1r 2  8D 0D 90     	sta RegD
005ED4r 2  F0 19        	beq l03e1
005ED6r 2  C9 2B        l03c8:	cmp #$2b
005ED8r 2  D0 15        	bne l03e1
005EDAr 2  A9 A0        	lda #$a0
005EDCr 2  8D 0D 90     	sta RegD
005EDFr 2  F0 0E        	beq l03e1
005EE1r 2  8C 0D 90     l03d3:	sty RegD
005EE4r 2  EC rr rr     	cpx SetSoundVars+3
005EE7r 2  D0 06        	bne l03e1
005EE9r 2  8C rr rr     	sty SetSoundVars+3
005EECr 2  8E 0D 90     	stx RegD
005EEFr 2               
005EEFr 2  60           l03e1:	rts
005EF0r 2               
005EF0r 2               ;----------------------------------------------------
005EF0r 2               ; Set video registers
005EF0r 2               ;----------------------------------------------------
005EF0r 2               
005EF0r 2               SetReg:
005EF0r 2  8D rr rr     	sta mode
005EF3r 2  0A           	asl a
005EF4r 2  18           	clc
005EF5r 2  6D rr rr     	adc crtflag
005EF8r 2  AA           	tax
005EF9r 2  BD rr rr     	lda centreX,x
005EFCr 2  8D 00 90     	sta Reg0
005EFFr 2  BD rr rr     	lda centreY,x
005F02r 2  8D 01 90     	sta Reg1
005F05r 2  BD rr rr     	lda scrW,x
005F08r 2  8D 02 90     	sta Reg2
005F0Br 2  BD rr rr     	lda scrH,x
005F0Er 2  8D 03 90     	sta Reg3
005F11r 2  BD rr rr     	lda RAMset,x
005F14r 2  8D 05 90     	sta Reg5
005F17r 2  60           	rts
005F18r 2               
005F18r 2  04 0C 06 0E  centreX:	.byte $04,$0c,$06,$0e
005F1Cr 2  1B 26 18 24  centreY:	.byte $1b,$26,$18,$24
005F20r 2  96 96 14 14  scrW:		.byte $96,$96,$14,$14
005F24r 2  17 17 19 19  scrH:		.byte $17,$17,$19,$19
005F28r 2  8C 8C CC CC  RAMset:		.byte $8c,$8c,$cc,$cc
005F2Cr 2  84 A0 84 A0  BottomScr:	.byte $84,$a0,$84,$a0
005F30r 2               
005F30r 2               ;----------------------------------------------------
005F30r 2               ; Display functions
005F30r 2               ;
005F30r 2               ; DISPLAYON   resets CentreY
005F30r 2               ; DISPLAYOFF  locates screen below bottom
005F30r 2               ; DISPLAYUP   scrolls screen up until default CentreY
005F30r 2               ; DISPLAYDOWN scrolls screen down until below bottom
005F30r 2               ;----------------------------------------------------
005F30r 2               
005F30r 2               dispon:
005F30r 2  AD rr rr     	lda mode
005F33r 2  0A           	asl a
005F34r 2  18           	clc
005F35r 2  6D rr rr     	adc crtflag
005F38r 2  AA           	tax
005F39r 2  BD rr rr     	lda centreY,x
005F3Cr 2  8D 01 90     	sta Reg1
005F3Fr 2  60           	rts
005F40r 2               
005F40r 2               dispoff:
005F40r 2  AD rr rr     	lda mode
005F43r 2  0A           	asl a
005F44r 2  18           	clc
005F45r 2  6D rr rr     	adc crtflag
005F48r 2  AA           	tax
005F49r 2  BD rr rr     	lda BottomScr,x
005F4Cr 2  8D 01 90     	sta Reg1
005F4Fr 2  60           	rts
005F50r 2               
005F50r 2               dispup:
005F50r 2  AD rr rr     	lda mode
005F53r 2  0A           	asl a
005F54r 2  18           	clc
005F55r 2  6D rr rr     	adc crtflag
005F58r 2  AA           	tax
005F59r 2  BD rr rr     	lda centreY,x
005F5Cr 2  85 rr        	sta tmp
005F5Er 2               scr_down_loop:
005F5Er 2  A9 01        	lda #1
005F60r 2  20 rr rr     	jsr delay
005F63r 2  CE 01 90     	dec Reg1
005F66r 2  AD 01 90     	lda Reg1
005F69r 2  C5 rr        	cmp tmp
005F6Br 2  D0 F1        	bne scr_down_loop
005F6Dr 2  60           	rts
005F6Er 2               
005F6Er 2               dispdown:
005F6Er 2  AD rr rr     	lda mode
005F71r 2  0A           	asl a
005F72r 2  18           	clc
005F73r 2  6D rr rr     	adc crtflag
005F76r 2  AA           	tax
005F77r 2  A9 01        	lda #1
005F79r 2  20 rr rr     	jsr delay
005F7Cr 2  EE 01 90     	inc Reg1
005F7Fr 2  AD 01 90     	lda Reg1
005F82r 2  DD rr rr     	cmp BottomScr,x
005F85r 2  D0 E7        	bne dispdown
005F87r 2  60           	rts
005F88r 2               
005F88r 1               ;	.include "music.inc"
005F88r 1               ;colscr:	.incbin "..\pictures\slasher3c"
005F88r 1               ;datscr:	.incbin "..\pictures\slasher3d"
005F88r 1               
005F88r 1               	.include "z80.asm"
005F88r 2               ;------------------------------------------------------
005F88r 2               ; z80.asm
005F88r 2               ; spectrum stuff
005F88r 2               ; adresses
005F88r 2               
005F88r 2               ;ws	 = $60
005F88r 2               
005F88r 2               ;z80_f	 = ws+$00
005F88r 2               ;z80_a	 = ws+$01
005F88r 2               ;z80_af	 = z80_f
005F88r 2               
005F88r 2               ;z80_c	 = ws+$02
005F88r 2               ;z80_b	 = ws+$03
005F88r 2               ;z80_bc	 = z80_c
005F88r 2               
005F88r 2               ;z80_e	 = ws+$04
005F88r 2               ;z80_d	 = ws+$05
005F88r 2               ;z80_de	 = z80_e
005F88r 2               
005F88r 2               ;z80_l	 = ws+$06
005F88r 2               ;z80_h	 = ws+$07
005F88r 2               ;z80_hl	 = z80_l
005F88r 2               
005F88r 2               ;z80_x    = ws+$08
005F88r 2               ;z80_i    = ws+$09
005F88r 2               ;z80_ix	 = z80_x
005F88r 2               
005F88r 2               ;z80_iy	 = ws+$0a
005F88r 2               
005F88r 2               ;z80_fp	 = ws+$0c
005F88r 2               ;z80_ap	 = ws+$0d
005F88r 2               
005F88r 2               ;z80_cp	 = ws+$0e
005F88r 2               ;z80_bp	 = ws+$0f
005F88r 2               ;z80_bcp = z80_cp
005F88r 2               
005F88r 2               ;z80_ep	 = ws+$10
005F88r 2               ;z80_dp	 = ws+$11
005F88r 2               ;z80_dep = z80_ep
005F88r 2               
005F88r 2               ;z80_lp	 = ws+$12
005F88r 2               ;z80_hp	 = ws+$13
005F88r 2               ;z80_hlp = z80_lp
005F88r 2               
005F88r 2               ;z80_sp   = ws+$14
005F88r 2               
005F88r 2               ;z80_reg0 = ws+$16
005F88r 2               ;z80_reg1 = ws+$17
005F88r 2               ;z80_reg2 = ws+$18
005F88r 2               ;z80_reg3 = ws+$19
005F88r 2               
005F88r 2               ;z80_r	 = ws+$1a
005F88r 2               
005F88r 2               ; Contains seperatly 1 bit set
005F88r 2               ; _BEEB this is not safe memory to use as required by MOS
005F88r 2               
005F88r 2               _bitmem0	= $f8
005F88r 2               _bitmem1	= $f9
005F88r 2               _bitmem2	= $fa
005F88r 2               _bitmem3	= $fb
005F88r 2               _bitmem4	= $fc
005F88r 2               _bitmem5	= $fd
005F88r 2               _bitmem6	= $fe
005F88r 2               _bitmem7	= $ff
005F88r 2               
005F88r 2               ; constants
005F88r 2               _bitvalue0	= $01
005F88r 2               _bitvalue1	= $02
005F88r 2               _bitvalue2	= $04
005F88r 2               _bitvalue3	= $08
005F88r 2               _bitvalue4	= $10
005F88r 2               _bitvalue5	= $20
005F88r 2               _bitvalue6	= $40
005F88r 2               _bitvalue7	= $80
005F88r 2               
005F88r 2               _notbitvalue0	= $fe
005F88r 2               _notbitvalue1	= $fd
005F88r 2               _notbitvalue2	= $fb
005F88r 2               _notbitvalue3	= $f7
005F88r 2               _notbitvalue4	= $ef
005F88r 2               _notbitvalue5	= $df
005F88r 2               _notbitvalue6	= $bf
005F88r 2               _notbitvalue7	= $7f
005F88r 2               
005F88r 2               
005F88r 2               ;add_hl_bc:
005F88r 2               ;		lda z80_l
005F88r 2               ;		clc
005F88r 2               ;		adc z80_c
005F88r 2               ;		sta z80_l
005F88r 2               ;		lda z80_h
005F88r 2               ;		adc z80_b
005F88r 2               ;		sta z80_h
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;add_ix_de:
005F88r 2               ;		lda z80_ix
005F88r 2               ;		clc
005F88r 2               ;		adc z80_e
005F88r 2               ;		sta z80_ix
005F88r 2               ;		lda z80_ix+1
005F88r 2               ;		adc z80_d
005F88r 2               ;		sta z80_ix+1
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;add_iy_de:
005F88r 2               ;		lda z80_iy
005F88r 2               ;		clc
005F88r 2               ;		adc z80_e
005F88r 2               ;		sta z80_iy
005F88r 2               ;		lda z80_iy+1
005F88r 2               ;		adc z80_d
005F88r 2               ;		sta z80_iy+1
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;add_hl_de:
005F88r 2               ;		lda z80_l
005F88r 2               ;		clc
005F88r 2               ;		adc z80_e
005F88r 2               ;		sta z80_l
005F88r 2               ;		lda z80_h
005F88r 2               ;		adc z80_d
005F88r 2               ;		sta z80_h
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;add_ix_bc:
005F88r 2               ;		lda z80_ix
005F88r 2               ;		clc
005F88r 2               ;		adc z80_c
005F88r 2               ;		sta z80_ix
005F88r 2               ;		lda z80_ix+1
005F88r 2               ;		adc z80_b
005F88r 2               ;		sta z80_ix+1
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;add_iy_bc:
005F88r 2               ;		lda z80_iy
005F88r 2               ;		clc
005F88r 2               ;		adc z80_c
005F88r 2               ;		sta z80_iy
005F88r 2               ;		lda z80_iy+1
005F88r 2               ;		adc z80_b
005F88r 2               ;		sta z80_iy+1
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;sbc_hl_de:
005F88r 2               ;		lda z80_l
005F88r 2               ;		sbc z80_e
005F88r 2               ;		sta z80_l
005F88r 2               ;		lda z80_h
005F88r 2               ;		sbc z80_d
005F88r 2               ;		sta z80_h
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;sbc_hl_bc:
005F88r 2               ;		lda z80_l
005F88r 2               ;		sbc z80_c
005F88r 2               ;		sta z80_l
005F88r 2               ;		lda z80_h
005F88r 2               ;		sbc z80_b
005F88r 2               ;		sta z80_h
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;cmp_hl_bc:
005F88r 2               ;		lda z80_l
005F88r 2               ;		cmp z80_c
005F88r 2               ;		bne cmp_hl_bc_end
005F88r 2               ;		lda z80_h
005F88r 2               ;		cmp z80_b
005F88r 2               ;cmp_hl_bc_end:
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;cmp_iy_ix:
005F88r 2               ;		lda z80_iy
005F88r 2               ;		cmp z80_ix
005F88r 2               ;		bne cmp_iy_ix_end
005F88r 2               ;		lda z80_iy+1
005F88r 2               ;		cmp z80_ix+1
005F88r 2               ;cmp_iy_ix_end:
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;dec_hl:
005F88r 2               ;		lda z80_l
005F88r 2               ;		bne dec_hl_no_dec_h
005F88r 2               ;		dec z80_h
005F88r 2               ;dec_hl_no_dec_h:
005F88r 2               ;		dec z80_l
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;dec_ix:
005F88r 2               ;		lda z80_ix
005F88r 2               ;		bne dec_ix_no_dec_h
005F88r 2               ;		dec z80_ix+1
005F88r 2               ;dec_ix_no_dec_h:
005F88r 2               ;		dec z80_ix
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;dec_bc:
005F88r 2               ;		lda z80_c
005F88r 2               ;		bne dec_bc_no_dec_b
005F88r 2               ;		dec z80_b
005F88r 2               ;dec_bc_no_dec_b:
005F88r 2               ;		dec z80_c
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;dec_de:
005F88r 2               ;		lda z80_e
005F88r 2               ;		bne dec_de_no_dec_d
005F88r 2               ;		dec z80_d
005F88r 2               ;dec_de_no_dec_d:
005F88r 2               ;		dec z80_e
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               ;ex_af_afs:
005F88r 2               ;	rts
005F88r 2               ;ex_de_hl:
005F88r 2               ;		lda z80_e
005F88r 2               ;		ldx z80_l
005F88r 2               ;		stx z80_e
005F88r 2               ;		sta z80_l
005F88r 2               ;		lda z80_d
005F88r 2               ;		ldx z80_h
005F88r 2               ;		stx z80_d
005F88r 2               ;		sta z80_h
005F88r 2               ;		rts
005F88r 2               ;
005F88r 2               exx:
005F88r 2  A5 rr        		lda z80_c
005F8Ar 2  A4 rr        		ldy z80_cp
005F8Cr 2  84 rr        		sty z80_c
005F8Er 2  85 rr        		sta z80_cp
005F90r 2  A5 rr        		lda z80_b
005F92r 2  A4 rr        		ldy z80_bp
005F94r 2  84 rr        		sty z80_b
005F96r 2  85 rr        		sta z80_bp
005F98r 2  A5 rr        		lda z80_e
005F9Ar 2  A4 rr        		ldy z80_ep
005F9Cr 2  84 rr        		sty z80_e
005F9Er 2  85 rr        		sta z80_ep
005FA0r 2  A5 rr        		lda z80_d
005FA2r 2  A4 rr        		ldy z80_dp
005FA4r 2  84 rr        		sty z80_d
005FA6r 2  85 rr        		sta z80_dp
005FA8r 2  A5 rr        		lda scraddr
005FAAr 2  A4 rr        		ldy z80_lp
005FACr 2  84 rr        		sty scraddr
005FAEr 2  85 rr        		sta z80_lp
005FB0r 2  A5 rr        		lda scraddr+1
005FB2r 2  A4 rr        		ldy z80_hp
005FB4r 2  84 rr        		sty scraddr+1
005FB6r 2  85 rr        		sta z80_hp
005FB8r 2  60           		rts
005FB9r 2               
005FB9r 2               ;ex_sp_hl:
005FB9r 2               ;		tsx
005FB9r 2               ;		lda $0103,x
005FB9r 2               ;		ldy z80_h
005FB9r 2               ;		sta z80_h
005FB9r 2               ;		tya
005FB9r 2               ;		sta $0103,x
005FB9r 2               ;		lda $0104,x
005FB9r 2               ;		ldy z80_l
005FB9r 2               ;		sta z80_l
005FB9r 2               ;		tya
005FB9r 2               ;		sta $104,x
005FB9r 2               ;		rts
005FB9r 2               ;
005FB9r 2               ;ldi:
005FB9r 2               ;	rts
005FB9r 2               ;ldir:
005FB9r 2               ;		ldy #$00
005FB9r 2               ;		ldx z80_b
005FB9r 2               ;		beq ldir_last_page
005FB9r 2               ;ldir_loop:
005FB9r 2               ;		lda (z80_hl),y
005FB9r 2               ;		sta (z80_de),y
005FB9r 2               ;		iny
005FB9r 2               ;		bne ldir_loop
005FB9r 2               ;		inc z80_h
005FB9r 2               ;		inc z80_d
005FB9r 2               ;		dex
005FB9r 2               ;		bne ldir_loop
005FB9r 2               ;ldir_last_page:
005FB9r 2               ;		lda z80_c
005FB9r 2               ;		beq ldir_end
005FB9r 2               ;ldir_last_page_loop:
005FB9r 2               ;		lda (z80_hl),y
005FB9r 2               ;		sta (z80_de),y
005FB9r 2               ;		iny
005FB9r 2               ;		cpy z80_c
005FB9r 2               ;		bne ldir_last_page_loop
005FB9r 2               ;ldir_end:
005FB9r 2               ;		stx z80_c
005FB9r 2               ;		stx z80_b
005FB9r 2               ;		tya
005FB9r 2               ;		clc
005FB9r 2               ;		adc z80_l
005FB9r 2               ;		sta z80_l
005FB9r 2               ;		bcc *+4
005FB9r 2               ;		inc z80_h
005FB9r 2               ;		tya
005FB9r 2               ;		clc
005FB9r 2               ;		adc z80_e
005FB9r 2               ;		sta z80_e
005FB9r 2               ;		bcc *+4
005FB9r 2               ;		inc z80_d
005FB9r 2               ;		rts
005FB9r 2               ;
005FB9r 2               ;lddr:		ldy #$00
005FB9r 2               ;lddr_loop:
005FB9r 2               ;		lda (z80_hl),y
005FB9r 2               ;		sta (z80_de),y
005FB9r 2               ;		jsr dec_hl
005FB9r 2               ;		jsr dec_de
005FB9r 2               ;		jsr dec_bc
005FB9r 2               ;		lda z80_b
005FB9r 2               ;		ora z80_c
005FB9r 2               ;		bne lddr_loop
005FB9r 2               ;		rts
005FB9r 2               ;ei:
005FB9r 2               ;		rts
005FB9r 2               ;di:
005FB9r 2               ;		rts
005FB9r 2               
005FB9r 2               ;-------------------------------------------------------------
005FB9r 2               ; Set bits in bitmem
005FB9r 2               ;-------------------------------------------------------------
005FB9r 2               
005FB9r 2               .if 0
005FB9r 2               z80_init:
005FB9r 2               	ldx #$00
005FB9r 2               	lda #$01
005FB9r 2               z80_init_loop:
005FB9r 2               	sta _bitmem0,x
005FB9r 2               	inx
005FB9r 2               	asl a
005FB9r 2               	bne z80_init_loop
005FB9r 2               	rts
005FB9r 2               .endif
005FB9r 2               
005FB9r 2               push_af:
005FB9r 2               push_bc:
005FB9r 2               push_de:
005FB9r 2               push_hl:
005FB9r 2               
005FB9r 2               pop_af:
005FB9r 2               pop_bc:
005FB9r 2               pop_de:
005FB9r 2               pop_ix:
005FB9r 2               pop_hl:
005FB9r 2               
005FB9r 2               add_hl_hl:
005FB9r 2               
005FB9r 2               inc_bc:
005FB9r 2               inc_de:
005FB9r 2               inc_hl:
005FB9r 2               inc_ix:
005FB9r 2               inc_sp:
005FB9r 2               
005FB9r 2               cpir:
005FB9r 2               
005FB9r 2               ex_af_af:
005FB9r 2               ;	rts
005FB9r 2               
005FB9r 1               
005FB9r 1               eind_asm:
005FB9r 1               eop:					; End Of Program
005FB9r 1               
005FB9r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
005FB9r 1               
