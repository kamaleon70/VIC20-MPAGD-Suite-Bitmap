ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; Common AGD engine
000000r 1               ; VIC20 conversion by Kees van Oss 2024
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 1 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               	.include "engine-zp.inc"
000000r 2               ;----------------------------------------------------------------------
000000r 2               ; AGD 6502 Engine Zero Page Variables
000000r 2               ;----------------------------------------------------------------------
000000r 2               
000000r 2               ; Variables start here.
000000r 2               
000000r 2  xx           scno:	.res 1			; present screen number.
000001r 2  xx           numlif:	.res 1			; number of lives.
000002r 2               
000002r 2  xx           vara:	.res 1			; general-purpose variable.
000003r 2  xx           varb:	.res 1			; general-purpose variable.
000004r 2  xx           varc:	.res 1			; general-purpose variable.
000005r 2  xx           vard:	.res 1			; general-purpose variable.
000006r 2  xx           vare:	.res 1			; general-purpose variable.
000007r 2  xx           varf:	.res 1			; general-purpose variable.
000008r 2  xx           varg:	.res 1			; general-purpose variable.
000009r 2  xx           varh:	.res 1			; general-purpose variable.
00000Ar 2  xx           vari:	.res 1			; general-purpose variable.
00000Br 2  xx           varj:	.res 1			; general-purpose variable.
00000Cr 2  xx           vark:	.res 1			; general-purpose variable.
00000Dr 2  xx           varl:	.res 1			; general-purpose variable.
00000Er 2  xx           varm:	.res 1			; general-purpose variable.
00000Fr 2  xx           varn:	.res 1			; general-purpose variable.
000010r 2  xx           varo:	.res 1			; general-purpose variable.
000011r 2  xx           varp:	.res 1			; general-purpose variable.
000012r 2  xx           varq:	.res 1			; general-purpose variable.
000013r 2  xx           varr:	.res 1			; general-purpose variable.
000014r 2  xx           vars:	.res 1			; general-purpose variable.
000015r 2  xx           vart:	.res 1			; general-purpose variable.
000016r 2  xx           varu:	.res 1			; general-purpose variable.
000017r 2  xx           varv:	.res 1			; general-purpose variable.
000018r 2  xx           varw:	.res 1			; general-purpose variable.
000019r 2  xx           varz:	.res 1			; general-purpose variable.
00001Ar 2               
00001Ar 2  xx           charx:	.res 1			; cursor x position.
00001Br 2  xx           chary:	.res 1			; cursor y position.
00001Cr 2               
00001Cr 2  xx           clock:	.res 1			; last clock reading.
00001Dr 2  xx           varrnd:	.res 1	        ; last random number.
00001Er 2  xx           varobj:	.res 1  	    ; last object number.
00001Fr 2  xx           varopt:	.res 1     		; last option chosen from menu.
000020r 2  xx           varblk:	.res 1  		; block type.
000021r 2  xx           nexlev:	.res 1			; next level flag.
000022r 2  xx           restfl:	.res 1			; restart screen flag.
000023r 2  xx           deadf:	.res 1			; dead flag.
000024r 2  xx           gamwon:	.res 1			; game won flag.
000025r 2  xx           dispx:	.res 1			; cursor x position.
000026r 2  xx           dispy:	.res 1			; cursor y position.
000027r 2               
000027r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000028r 2  xx           joyval:	.res 1			; joystick reading.
000029r 2  xx           frmno:	.res 1			; selected frame.
00002Ar 2               
00002Ar 2               ;----------------------------------------------------
00002Ar 2               ; Missing vars
00002Ar 2               ;----------------------------------------------------
00002Ar 2               
00002Ar 2  xx           loopa:		.res 1
00002Br 2  xx           loopb:		.res 1
00002Cr 2  xx           loopc:		.res 1
00002Dr 2  xx xx        FontPtr:    .res 2
00002Fr 2               
00002Fr 2               ; Local vars
00002Fr 2               
00002Fr 2  xx xx        scraddr:    .res 2
000031r 2  xx xx        fntaddr:    .res 2
000033r 2  xx xx        tileaddr:   .res 2
000035r 2  xx xx        bufaddr:    .res 2
000037r 2               
000037r 2  xx xx        tmp:        .res 2
000039r 2  xx xx        scr_l:      .res 2
00003Br 2  xx xx        scr_r:      .res 2
00003Dr 2  xx xx        scr_txt:    .res 2
00003Fr 2               
00003Fr 2  xx           xtmp:	    .res 1
000040r 2  xx           spcnt:	    .res 1
000041r 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
000043r 2  xx           seed:	    .res 1		; seed for random numbers.
000044r 2               
000044r 2  xx           ccnt:       .res 1
000045r 2  xx           flag:	    .res 1
000046r 2  xx           rcol:	    .res 1
000047r 2  xx           rrow:	    .res 1
000048r 2               
000048r 2  xx           combyt:	    .res 1		; byte type compressed.
000049r 2  xx           comcnt:	    .res 1		; compression counter.
00004Ar 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
00004Br 2  xx           qscnt:	    .res 1
00004Cr 2               
00004Cr 2  xx           sprptr:	    .res 1      ; not a ptr
00004Dr 2  xx           sprcnt:	    .res 1
00004Er 2               
00004Er 2  xx xx        skptr:	    .res 2		; search pointer.
000050r 2  xx           sktptr:	    .res 1      ; not a ptr
000051r 2  xx           tmproom:	.res 1
000052r 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
000054r 2               
000054r 2  xx xx xx     spr:	    .res 3      ; static sprite data
000057r 2  xx           vsync_count:.res 1
000058r 2  xx           colpatt:	.res 1
000059r 2  xx           sprtmp:     .res 1
00005Ar 2  xx           sprtmp2:    .res 1
00005Br 2  xx           sprshft:    .res 1
00005Cr 2               
00005Cr 2  xx           spriteink:  .res 1
00005Dr 2  xx           colour_byte:.res 1
00005Er 2  xx           colour_xor: .res 1
00005Fr 2  xx           objcol:	    .res 1
000060r 2               
000060r 2               .if mflag
000060r 2               TmpAddr:	.res 2
000060r 2               bwid:	    .res 1     ; box/menu width.
000060r 2               blen:	    .res 1     ; box/menu height.
000060r 2               btop:	    .res 1     ; box coordinates.
000060r 2               blft:	    .res 1
000060r 2               .endif
000060r 2               
000060r 2               .if pflag
000060r 2               shrctr:	    .res 1
000060r 2               explcnt:	.res 1
000060r 2               seed3:	    .res 1
000060r 2               .endif
000060r 2               
000060r 2               .if aflag
000060r 2               pbptr:      .res 2
000060r 2               .endif
000060r 2               
000060r 2  xx           tmp1:       .res 1
000061r 2  xx           tmp2:       .res 1
000062r 2               
000062r 1               	.include "z80-zp.inc"
000062r 2               ;ws	 = $60
000062r 2               
000062r 2  xx           z80_f: .res 1;	 = ws+$00
000063r 2  xx           z80_a: .res 1;	 = ws+$01
000064r 2               z80_af	 = z80_f
000064r 2               
000064r 2  xx           z80_c: .res 1;	 = ws+$02
000065r 2  xx           z80_b: .res 1;	 = ws+$03
000066r 2               z80_bc	 = z80_c
000066r 2               
000066r 2  xx           z80_e: .res 1;	 = ws+$04
000067r 2  xx           z80_d: .res 1;	 = ws+$05
000068r 2               z80_de	 = z80_e
000068r 2               
000068r 2  xx           z80_l: .res 1;	 = ws+$06
000069r 2  xx           z80_h: .res 1;	 = ws+$07
00006Ar 2               z80_hl	 = z80_l
00006Ar 2               
00006Ar 2  xx           z80_x: .res 1;    = ws+$08
00006Br 2  xx           z80_i: .res 1;    = ws+$09
00006Cr 2               z80_ix	 = z80_x
00006Cr 2               
00006Cr 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00006Er 2               
00006Er 2  xx           z80_fp: .res 1;	 = ws+$0c
00006Fr 2  xx           z80_ap: .res 1;	 = ws+$0d
000070r 2               
000070r 2  xx           z80_cp: .res 1;	 = ws+$0e
000071r 2  xx           z80_bp: .res 1;	 = ws+$0f
000072r 2               z80_bcp	 = z80_cp
000072r 2               
000072r 2  xx           z80_ep: .res 1;	 = ws+$10
000073r 2  xx           z80_dp: .res 1;	 = ws+$11
000074r 2               z80_dep	 = z80_ep
000074r 2               
000074r 2  xx           z80_lp: .res 1;	 = ws+$12
000075r 2  xx           z80_hp: .res 1;	 = ws+$13
000076r 2               z80_hlp	 = z80_lp
000076r 2               
000076r 2  xx xx        z80_sp: .res 2;   = ws+$14
000078r 2               
000078r 2  xx           z80_reg0: .res 1; = ws+$16
000079r 2  xx           z80_reg1: .res 1; = ws+$17
00007Ar 2  xx           z80_reg2: .res 1; = ws+$18
00007Br 2  xx           z80_reg3: .res 1; = ws+$19
00007Cr 2               
00007Cr 2               ;z80_r: .res 1;	 = ws+$1a
00007Cr 2               
00007Cr 1               
00007Cr 1               ;----------------------------------------------
00007Cr 1               ; BASIC header
00007Cr 1               ;----------------------------------------------
00007Cr 1               
00007Cr 1               .segment "BASIC"
000000r 1               
000000r 1  rr rr        	.word load
000002r 1  rr rr        load:   .word @end
000004r 1  02 00        	.word 2
000006r 1  9E           	.byte $9e
000007r 1  rr           	.byte .lobyte(main/1000 .mod 10) + $30
000008r 1  rr           	.byte .lobyte(main/100 .mod 10) + $30
000009r 1  rr           	.byte .lobyte(main/10 .mod 10) + $30
00000Ar 1  rr           	.byte .lobyte(main/1 .mod 10) + $30
00000Br 1  00           	.byte 0
00000Cr 1  00 00        @end:   .word 0
00000Er 1               
00000Er 1               ;----------------------------------------------
00000Er 1               
00000Er 1               .segment "CODE"
000000r 1               main:
000000r 1               	.include "game.inc"
000000r 2               .include "mozart3.inc"
000000r 3               ; Game engine code --------------------------------------------------------------
000000r 3               
000000r 3               ; Arcade Game Designer.
000000r 3               ; (C) 2008 Jonathan Cauldwell.
000000r 3               ; ZX Spectrum Next Engine v0.1.
000000r 3               
000000r 3               ; Conditional compilation flags
000000r 3               ; Code is installed if flag is set
000000r 3               ; Flags are set in commandline assembly or by the compiler
000000r 3               
000000r 3               ; Flags set by AGD compiler
000000r 3               ;	mflag  			; MENU + INV
000000r 3               ;	pflag 			; particle engine
000000r 3               ;	sflag 			; scrollytext
000000r 3               ;	dflag 			; digging mode
000000r 3               ;	cflag			; collectable blocks
000000r 3               ;	oflag			; objects
000000r 3               ;	lflag			; ladders
000000r 3               ;
000000r 3               ; Flags set manually
000000r 3               ;	aflag			; adventure mode
000000r 3               ;	bflag			; big sprites (16x24)
000000r 3               ;	fflag			; floppy version (skip #0axx)
000000r 3               ;	gflag			; graphic colour mode
000000r 3               ;	hflag			; hidden sprite mode
000000r 3               ;	iflag			; invert mode
000000r 3               
000000r 3               swrflag = 0
000000r 3               
000000r 3               .if mflag
000000r 3               	.out "- MEN/INV enabled"
000000r 3               .endif
000000r 3               .if pflag
000000r 3               	.out "- Particles enabled"
000000r 3               .endif
000000r 3               .if sflag
000000r 3               	.out "- Scrolling enabled"
000000r 3               .endif
000000r 3               .if dflag
000000r 3               	.out "- Digging enabled"
000000r 3               .endif
000000r 3               .if cflag
000000r 3               	.out "- Collectable blocks enabled"
000000r 3               .endif
000000r 3               .if oflag
000000r 3               	.out "- Objects enabled"
000000r 3               .endif
000000r 3               .if lflag
000000r 3               	.out "- Ladders enabled"
000000r 3               .endif
000000r 3               .if aflag
000000r 3               	.out "- Adventure mode enabled"
000000r 3               .endif
000000r 3               .if bflag
000000r 3               	.out "- Big Sprites (16x24) enabled"
000000r 3               .endif
000000r 3               .if gflag
000000r 3               	.out "- Colourmode enabled"
000000r 3               .endif
000000r 3               .if hflag
000000r 3               	.out "- Hidden sprites/foregroundblocks enabled"
000000r 3               .endif
000000r 3               .if iflag
000000r 3               	.out "- Invert mode enabled"
000000r 3               .endif
000000r 3               .if rflag
000000r 3               	.out "- RAM saving sprites enabled"
000000r 3               .endif
000000r 3               .if xflag
000000r 3               	.out "- Metablocks 16x6"
000000r 3               .endif
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; VIC20 check for PAL or NTSC
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               .if modelflag
000000r 3               	ScrWidth	= 22	; PAL settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 28
000000r 3               	timervalue	= 43450	; = 40000 * 1,108/1,02
000000r 3               	.out "- PAL"
000000r 3               .else
000000r 3               	ScrWidth	= 22	; NTSC settings
000000r 3               	ScrHeight	= 22
000000r 3               	CentreX		= 4
000000r 3               	CentreY		= 27
000000r 3               	timervalue	= 20000
000000r 3                	.out "- NTSC"
000000r 3               .endif
000000r 3               .out ""
000000r 3               
000000r 3               ;------------------------------------------------------------
000000r 3               ; Constants MPAGD
000000r 3               ;------------------------------------------------------------
000000r 3               
000000r 3               ; Global definitions
000000r 3               
000000r 3               	FONT 		= font
000000r 3               	MAP 		= MapAddr		; properties map buffer (3x256 bytes)
000000r 3               	SCADTB_lb	= MAP + $300		; Screen address table
000000r 3               	SCADTB_hb	= SCADTB_lb + $100
000000r 3               	SHRAPN 		= SCADTB_hb + $100	; shrapnel table (55x6 bytes)
000000r 3               	COLATTTB_lb	= SHRAPN + 55*6		; Colour attribute address table
000000r 3               	COLATTTB_hb	= COLATTTB_lb + 11
000000r 3               
000000r 3               ; Block characteristics.
000000r 3               
000000r 3               	PLATFM	= 1		; platform.
000000r 3               	WALL	= PLATFM + 1	; solid wall.
000000r 3               	LADDER	= WALL + 1	; ladder.
000000r 3               	FODDER	= LADDER + 1	; fodder block.
000000r 3               	DEADLY	= FODDER + 1	; deadly block.
000000r 3               	CUSTOM	= DEADLY + 1	; custom block.
000000r 3               	WATER	= CUSTOM + 1	; water block.
000000r 3                       COLECT	= WATER + 1	; collectable block.
000000r 3                       NUMTYP	= COLECT + 1	; number of types.
000000r 3               
000000r 3               ; Sprites.
000000r 3               
000000r 3               .if bflag
000000r 3               	SPR_HGT	= 24		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 8		; number of sprites.
000000r 3               .else				; 16x16 sprites
000000r 3               	SPR_HGT = 16		; Sprite height
000000r 3               	SPR_WID = 16		; Sprite width
000000r 3               	NUMSPR	= 12		; number of sprites.
000000r 3               .endif
000000r 3               	TABSIZ = 17			; size of each entry.
000000r 3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
000000r 3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
000000r 3               
000000r 3               ; Sprite table variable offsets.
000000r 3               
000000r 3               	var_Type = 0		; sprite type
000000r 3               	var_Image = 1		; sprite time number
000000r 3               	var_Frame = 2		; sprite frame
000000r 3               	var_Y = 3			; sprite y coordinate
000000r 3               	var_X = 4			; sprite X coordinate
000000r 3               
000000r 3               	var_newType = 5		; sprite new type
000000r 3               	var_newImage = 6	; sprite new image number
000000r 3               	var_newFrame = 7	; sprite new frame
000000r 3               	var_newY = 8		; sprite new y coordinate
000000r 3               	var_newX = 9		; sprite new x coordinate
000000r 3               
000000r 3               	var_Direction = 10	; sprite direction
000000r 3               	var_Param1 = 11		; sprite parameter 1
000000r 3               	var_Param2 = 12		; sprite parameter 2
000000r 3               
000000r 3               	var_jumpLo = 13		; sprite jump ptr low
000000r 3               	var_jumpHi = 14		; sprite jump ptr high
000000r 3               	var_dataLo = 15		; sprite data ptr low
000000r 3               	var_dataHi = 16		; sprite data ptr high
000000r 3               
000000r 3               ; Particle engine.
000000r 3               
000000r 3               	NUMSHR = 55			; pieces of shrapnel.
000000r 3               	SHRSIZ = 6			; bytes per particle.
000000r 3               
000000r 3               .if iflag
000000r 3               	TxtInvert   = $ff	; Invert byte for character printing
000000r 3               	ScrFillByte = $ff	; Screen fill byte for CLS
000000r 3               .else
000000r 3               	TxtInvert   = $00	; Invert byte for character printing
000000r 3               	ScrFillByte = $00	; Screen fill byte for CLS
000000r 3               .endif
000000r 3               
000000r 3               	ASCII_NEWLINE = 13
000000r 3               
000000r 3               ;===============================================================
000000r 3               ; Game starts here
000000r 3               ;===============================================================
000000r 3               
000000r 3               ;--------------------------------------------------------------
000000r 3               ; If a font is required...
000000r 3               ;--------------------------------------------------------------
000000r 3               
000000r 3               start:
000000r 3  20 rr rr     	jsr game	 		; start the game.
000003r 3  60           	rts
000004r 3               
000004r 3               ; Don't change the order of these four.
000004r 3               ; Menu routine relies on winlft following wintop.
000004r 3               
000004r 3  02           wintop:	.byte WINDOWTOP		; top of window.
000005r 3  00           winlft:	.byte WINDOWLFT		; left edge.
000006r 3  14           winhgt:	.byte WINDOWHGT		; window height.
000007r 3  16           winwid:	.byte WINDOWWID		; window width.
000008r 3  08           numob:	.byte NUMOBJ		; number of objects in game.
000009r 3               
000009r 3               ; Pixel versions of wintop, winlft, winhgt, winwid.
000009r 3               
000009r 3  10           wntopx:	.byte (8 * WINDOWTOP)
00000Ar 3  00           wnlftx:	.byte (8 * WINDOWLFT)
00000Br 3  A0           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
00000Cr 3  9E           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00000Dr 3               
00000Dr 3               ; Make sure pointers are arranged in the same order as the data itself.
00000Dr 3               
00000Dr 3  rr rr        frmptr:	.word frmlst        ; sprite frames.
00000Fr 3               
00000Fr 3               ; Assorted game routines which can go in contended memory.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for inventory.
00000Fr 3               ; called by the INV command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with objects seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of INV menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               .if mflag
00000Fr 3               minve:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	asl a
00000Fr 3               	sta winhgt
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	asl a
00000Fr 3               	sta winwid
00000Fr 3               .endif
00000Fr 3               	lda #<(invdis)		; routine address.
00000Fr 3               	sta mod0+1		; set up menu routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(invdis)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               	lda #<(fopt)		; find option from available objects.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fopt)
00000Fr 3               	sta mod1+1+1
00000Fr 3               	jmp dbox		; do menu routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Modify for menu.
00000Fr 3               ; called by the MENU command
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  X   = message nr with menu items seperated with ,
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected line nr of MENU menu
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               mmenu:
00000Fr 3               	lda #<(always)		; routine address.
00000Fr 3               	sta mod0+1		; set up routine.
00000Fr 3               	sta mod2+1		; set up count routine.
00000Fr 3               	lda #>(always)
00000Fr 3               	sta mod0+2
00000Fr 3               	sta mod2+2
00000Fr 3               
00000Fr 3               	lda #<(fstd)		; standard option selection.
00000Fr 3               	sta mod1+1		; set up routine.
00000Fr 3               	lda #>(fstd)
00000Fr 3               	sta mod1+2
00000Fr 3               
00000Fr 3               ; Drop through into box routine.
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; Work out size of box for message or menu.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox:
00000Fr 3               	lda #<msgdat		; pointer to messages.
00000Fr 3               	sta z80_l
00000Fr 3               	lda #>msgdat
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	jsr getwrd		; get message number.
00000Fr 3               
00000Fr 3               	lda z80_h		; store pointer to message.
00000Fr 3               	sta TmpAddr
00000Fr 3               	lda z80_l
00000Fr 3               	sta TmpAddr+1
00000Fr 3               
00000Fr 3               	lda #1			; height.
00000Fr 3               	sta z80_d
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               	sta z80_e		; maximum width.
00000Fr 3               dbox5:
00000Fr 3               	lda #0			; this line"s width.
00000Fr 3               	sta z80_b
00000Fr 3               mod2:
00000Fr 3               	jsr always		; item in player"s possession?
00000Fr 3               	cmp #255
00000Fr 3               	bne dbox6		; not in inventory, skip this line.
00000Fr 3               	inc z80_d		; add to tally.
00000Fr 3               dbox6:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a		; reached end of line?
00000Fr 3               	cmp #','
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	cmp #ASCII_NEWLINE
00000Fr 3               	beq dbox3		; yes.
00000Fr 3               	inc z80_b		; add to this line"s width.
00000Fr 3               	lda z80_a
00000Fr 3               	bmi dbox4		; end of message? yes, end count.
00000Fr 3               	jmp dbox6		; repeat until we find the end.
00000Fr 3               dbox3:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox5		; no, carry on looking.
00000Fr 3               	lda z80_b		; make this the widest so far.
00000Fr 3               	sta z80_e
00000Fr 3               	jmp dbox5		; keep looking.
00000Fr 3               dbox4:
00000Fr 3               	lda z80_e		; maximum line width.
00000Fr 3               	cmp z80_b		; have we exceeded longest so far?
00000Fr 3               	bpl dbox8		; no, carry on looking.
00000Fr 3               	lda z80_b		; final line is the longest so far.
00000Fr 3               	sta z80_e
00000Fr 3               dbox8:
00000Fr 3               	dec z80_d		; decrement items found.
00000Fr 3               	bne :+			; total was zero.
00000Fr 3               	lda #255
00000Fr 3               	sta varopt
00000Fr 3               	jmp dbox15
00000Fr 3               :
00000Fr 3               	lda z80_e		; longest line.
00000Fr 3               	bne :+			; was it zero?
00000Fr 3               	jmp dbox15		; total was zero.
00000Fr 3               :
00000Fr 3               	sta bwid		; set up size.
00000Fr 3               	lda z80_d
00000Fr 3               	sta blen
00000Fr 3               
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               ; That's set up our box size.
00000Fr 3               ;--------------------------------------------------------------
00000Fr 3               
00000Fr 3               	lda winhgt		; window height in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_d		; subtract height of box.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc wintop		; add top edge of window.
00000Fr 3               	sta btop		; set up box top.
00000Fr 3               
00000Fr 3               	lda winwid		; window width in characters.
00000Fr 3               	sec
00000Fr 3               	sbc z80_e		; subtract box width.
00000Fr 3               	lsr a			; divide by 2.
00000Fr 3               	clc
00000Fr 3               	adc winlft		; add left edge of window.
00000Fr 3               	sta blft		; box left.
00000Fr 3               
00000Fr 3               	lda #<(FONT-256)		; font.
00000Fr 3               	sta grbase		; set up for text display.
00000Fr 3               	lda #>(FONT-256)
00000Fr 3               	sta grbase+1
00000Fr 3               
00000Fr 3               	lda TmpAddr+1		; restore message pointer.
00000Fr 3               	sta z80_l
00000Fr 3               	lda TmpAddr
00000Fr 3               	sta z80_h
00000Fr 3               
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set display coordinate.
00000Fr 3               	lda #0			; start at object zero.
00000Fr 3               	sta combyt		; store number of object in combyt.
00000Fr 3               dbox2:
00000Fr 3               	lda combyt		; get object number.
00000Fr 3               	sta z80_a
00000Fr 3               mod0:
00000Fr 3               	jsr always		; check inventory for display.
00000Fr 3               	cmp #255
00000Fr 3               	beq :+
00000Fr 3               	jmp dbox13		; not in inventory, skip this line.
00000Fr 3               :
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set left display position.
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_b		; store width.
00000Fr 3               dbox0:
00000Fr 3               	ldy #0			; get character.
00000Fr 3               	lda (z80_hl),y
00000Fr 3               	cmp #','		; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               	cmp #ASCII_NEWLINE			; end of line?
00000Fr 3               	beq dbox1		; yes, next one.
00000Fr 3               
00000Fr 3               	cmp #141			; end of line?
00000Fr 3               	bne :+
00000Fr 3               	dec bwid
00000Fr 3               	jmp dbox7		; yes, next one.
00000Fr 3               :
00000Fr 3               	dec z80_b		; one less to display.
00000Fr 3               	and #127		; remove terminator.
00000Fr 3               
00000Fr 3               	jsr pchr		; display on screen.
00000Fr 3               
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	sta z80_a
00000Fr 3               	inc z80_l		; next character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	lda z80_a
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bmi :+
00000Fr 3               	jmp dbox7		; yes, job done.
00000Fr 3               :
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	beq :+			; are any left?
00000Fr 3               	jmp dbox0		; yes, continue.
00000Fr 3               :
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Reached limit of characters per line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dbox9:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #ASCII_NEWLINE	; another line?
00000Fr 3               	beq dbox10		; yes, do next line.
00000Fr 3               	cmp #128		; end of message?
00000Fr 3               	bcs :+
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox9
00000Fr 3               
00000Fr 3               ;---------------------------------------------------
00000Fr 3               ; Fill box to end of line.
00000Fr 3               ;---------------------------------------------------
00000Fr 3               
00000Fr 3               dboxf:
00000Fr 3               	lda #32			; space character.
00000Fr 3               	jsr pchr		; display character.
00000Fr 3               	dec z80_b
00000Fr 3               	beq :+
00000Fr 3               	jmp dboxf		; repeat for remaining chars on line.
00000Fr 3               :
00000Fr 3               	rts
00000Fr 3               dbox1:
00000Fr 3               	inc z80_l		; skip character.
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill box out to right side.
00000Fr 3               dbox10:
00000Fr 3               	inc dispy		; y coordinate down a line next position.
00000Fr 3               	jmp dbox2		; next line.
00000Fr 3               dbox7:
00000Fr 3               	lda z80_b		; chars remaining.
00000Fr 3               	bne :+			; are any left?
00000Fr 3               	jmp dbox11		; no, nothing to draw.
00000Fr 3               :
00000Fr 3               	jsr dboxf		; fill message to line.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Drawn the box menu, now select option.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox11:
00000Fr 3               	lda btop		; box top.
00000Fr 3               	sta dispy		; set bar position.
00000Fr 3               dbox14:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	bne dbox14		; yes, debounce it.
00000Fr 3               	jsr dbar		; draw bar.
00000Fr 3               dbox12:
00000Fr 3               	jsr joykey		; get controls.
00000Fr 3               	cmp #$7f		; anything pressed?
00000Fr 3               	beq dbox12		; no, nothing.
00000Fr 3               	and #16			; fire button pressed?
00000Fr 3               	bne :+
00000Fr 3               mod1:
00000Fr 3               	jmp fstd		; yes, job done.
00000Fr 3               :
00000Fr 3               	jsr dbar		; delete bar.
00000Fr 3               
00000Fr 3               	lda joyval		; joystick reading.
00000Fr 3               	and #8			; going up?
00000Fr 3               	beq dboxu		; yes, go up.
00000Fr 3               
00000Fr 3               	ldx dispy		; vertical position of bar.
00000Fr 3               	inx			; look down.
00000Fr 3               	txa
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find distance from top.
00000Fr 3               	cmp blen		; top of box.
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	inc dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               dboxu:
00000Fr 3               	lda dispy		; vertical position of bar.
00000Fr 3               	cmp btop		; are we at the top?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox14		; yes, go no further.
00000Fr 3               :
00000Fr 3               	dec dispy		; move bar.
00000Fr 3               	jmp dbox14		; continue.
00000Fr 3               fstd:
00000Fr 3               	lda dispy		; bar position.
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Option not available.  Skip this line.
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbox13:
00000Fr 3               	ldy #0
00000Fr 3               	lda (z80_hl),y		; get character.
00000Fr 3               	inc z80_l		; next one.
00000Fr 3               
00000Fr 3               	bne :+
00000Fr 3               	inc z80_h
00000Fr 3               :
00000Fr 3               	cmp #','		; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               	cmp #ASCII_NEWLINE			; another line?
00000Fr 3               	bne :+
00000Fr 3               	jmp dbox2		; yes, do next line.
00000Fr 3               :
00000Fr 3               
00000Fr 3               	bpl :+			; end of message?
00000Fr 3               	jmp dbox11		; yes, finish message.
00000Fr 3               :
00000Fr 3               	jmp dbox13
00000Fr 3               dbox15:
00000Fr 3               .if xflag
00000Fr 3               	lda #WINDOWWID
00000Fr 3               	sta winwid
00000Fr 3               	lda #WINDOWHGT
00000Fr 3               	sta winhgt
00000Fr 3               .endif
00000Fr 3               	lda TmpAddr		; pop message pointer from the stack.
00000Fr 3               	sta z80_h
00000Fr 3               	lda TmpAddr+1
00000Fr 3               	sta z80_l
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Invert bar
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               dbar:
00000Fr 3               	lda blft		; box left.
00000Fr 3               	sta dispx		; set display coordinate.
00000Fr 3               	jsr gprad		; get printing address.
00000Fr 3               
00000Fr 3               	lda bwid		; box width.
00000Fr 3               	sta z80_c		; loop counter in c.
00000Fr 3               	lda z80_h
00000Fr 3               	sta z80_d		; store screen address high byte.
00000Fr 3               dbar1:
00000Fr 3               	ldx #7			; pixel height in b.
00000Fr 3               dbar0:
00000Fr 3               	ldy scrtab,x
00000Fr 3               	lda (scraddr),y		; get screen byte.
00000Fr 3               	eor #255		; reverse all bits.
00000Fr 3               	sta (scraddr),y		; write back to screen.
00000Fr 3               	dex			; next line down.
00000Fr 3               	bpl dbar0		; draw rest of character.
00000Fr 3               
00000Fr 3               	lda scraddr
00000Fr 3               	adc #16
00000Fr 3               	sta scraddr
00000Fr 3               	bcc :+
00000Fr 3               	inc scraddr+1
00000Fr 3               :
00000Fr 3               	dec z80_c		; decrement character counter.
00000Fr 3               	bne dbar1		; repeat for whole line.
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Point to object
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  A = object number, A=255 if already in possession
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               invdis:
00000Fr 3               	lda z80_l		; store message text pointer.
00000Fr 3               	pha
00000Fr 3               	lda z80_h
00000Fr 3               	pha
00000Fr 3               	lda combyt		; object number.
00000Fr 3               	inc combyt		; ready for next one.
00000Fr 3               	jsr gotob		; check if we have object.
00000Fr 3               	tay
00000Fr 3               	pla
00000Fr 3               	sta z80_h
00000Fr 3               	pla
00000Fr 3               	sta z80_l
00000Fr 3               	tya
00000Fr 3               	rts
00000Fr 3               
00000Fr 3               ;------------------------------------------------------
00000Fr 3               ; Find option selected.
00000Fr 3               ;
00000Fr 3               ; Input:
00000Fr 3               ;  -
00000Fr 3               ;
00000Fr 3               ; Output:
00000Fr 3               ;  OPT = selected object
00000Fr 3               ;------------------------------------------------------
00000Fr 3               
00000Fr 3               fopt:
00000Fr 3               	lda dispy
00000Fr 3               	sec
00000Fr 3               	sbc btop		; find selected option.
00000Fr 3               	sta tmp+2		; option selected in b register.
00000Fr 3               	inc tmp+2
00000Fr 3               
00000Fr 3               	lda #0			; set to first item.
00000Fr 3               	sta combyt		; object number.
00000Fr 3               fopt0:
00000Fr 3               	jsr fobj		; find next object in inventory.
00000Fr 3               	dec tmp+2
00000Fr 3               	bne fopt0		; repeat for relevant steps down the list.
00000Fr 3               
00000Fr 3               	lda combyt		; get option.
00000Fr 3               	sta varopt		; store the option.
00000Fr 3               	dec varopt		; one less, due to where we increment combyt.
00000Fr 3               	jmp redraw		; redraw the screen.
00000Fr 3               fobj:
00000Fr 3               	ldy combyt		; object number.
00000Fr 3               	inc combyt		; ready for next item.
00000Fr 3               	tya
00000Fr 3               	jsr gotob		; do we have this item?
00000Fr 3               	cmp #255
00000Fr 3               	bne :+
00000Fr 3               	rts
00000Fr 3               :
00000Fr 3               	jmp fobj		; yes, it's on the list.
00000Fr 3               .endif
00000Fr 3               
00000Fr 3               ;----------------------------------------------------
00000Fr 3               ; Clear sprite table.
00000Fr 3               ;
00000Fr 3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00000Fr 3               ;----------------------------------------------------
00000Fr 3               
00000Fr 3               xspr:
00000Fr 3  A9 FF        	lda #255		; clear byte.
000011r 3  A2 00        	ldx #0			; length of table.
000013r 3               xspr0:
000013r 3  9D rr rr     	sta sprtab,x		; sprite table.
000016r 3  E8           	inx			; move to next byte.
000017r 3  E0 CC        	cpx #SPRBUF
000019r 3  D0 F8        	bne xspr0		; repeat for rest of table.
00001Br 3  60           	rts
00001Cr 3               
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               ; Initialise all objects.
00001Cr 3               ;
00001Cr 3               ; Reset current room,y,x to start room,y,x for all objects
00001Cr 3               ;-------------------------------------------------------------
00001Cr 3               
00001Cr 3               .if oflag
00001Cr 3               iniob:
00001Cr 3  A9 rr        	lda #<objdta		; objects table.
00001Er 3  85 rr        	sta z80_x
000020r 3  A9 rr        	lda #>objdta
000022r 3  85 rr        	sta z80_i
000024r 3               
000024r 3  AE rr rr     	ldx numob 		; number of objects in the game.
000027r 3               iniob0:
000027r 3  A0 24        	ldy #36
000029r 3  B1 rr        	lda (z80_ix),y 		; start screen.
00002Br 3  A0 21        	ldy #33
00002Dr 3  91 rr        	sta (z80_ix),y 		; set start screen.
00002Fr 3               
00002Fr 3  A0 25        	ldy #37
000031r 3  B1 rr        	lda (z80_ix),y 		; find start y.
000033r 3  A0 22        	ldy #34
000035r 3  91 rr        	sta (z80_ix),y 		; set start y.
000037r 3               
000037r 3  A0 26        	ldy #38
000039r 3  B1 rr        	lda (z80_ix),y 		; get initial x.
00003Br 3  A0 23        	ldy #35
00003Dr 3  91 rr        	sta (z80_ix),y 		; set x coord.
00003Fr 3               
00003Fr 3  18           	clc 			; point to next object.
000040r 3  A5 rr        	lda z80_x
000042r 3  69 27        	adc #39			; distance between objects.
000044r 3  85 rr        	sta z80_x
000046r 3  90 02        	bcc :+
000048r 3  E6 rr        	inc z80_i
00004Ar 3               :
00004Ar 3  CA           	dex 			; repeat.
00004Br 3  D0 DA        	bne iniob0
00004Dr 3               
00004Dr 3  60           	rts
00004Er 3               .endif
00004Er 3               
00004Er 3               ;-----------------------------------------------
00004Er 3               ; Redraw the screen.
00004Er 3               ;
00004Er 3               ; Remove old copy of all sprites for redraw.
00004Er 3               ;-----------------------------------------------
00004Er 3               
00004Er 3               redraw:
00004Er 3               .if xflag
00004Er 3               	lda #WINDOWWID
00004Er 3               	sta winwid
00004Er 3               	lda #WINDOWHGT
00004Er 3               	sta winhgt
00004Er 3               .endif
00004Er 3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
000050r 3  48           	pha
000051r 3  A5 rr        	lda z80_x
000053r 3  48           	pha
000054r 3               
000054r 3  20 rr rr     	jsr droom		; show screen layout.
000057r 3               .if oflag
000057r 3  20 rr rr     	jsr shwob		; draw objects.
00005Ar 3               .endif
00005Ar 3               numsp0:
00005Ar 3  A9 0C        	lda #NUMSPR		; sprites to draw.
00005Cr 3  85 rr        	sta tmp
00005Er 3               
00005Er 3  A9 rr        	lda #<sprtab		; sprite table.
000060r 3  85 rr        	sta z80_x
000062r 3  A9 rr        	lda #>sprtab
000064r 3  85 rr        	sta z80_i
000066r 3               redrw0:
000066r 3  A0 00        	ldy #0
000068r 3  B1 rr        	lda (z80_ix),y		; old sprite type.
00006Ar 3  C9 FF        	cmp #255		; is it enabled?
00006Cr 3  F0 0B        	beq redrw1 		; no, find next one.
00006Er 3               
00006Er 3  A0 03        	ldy #var_Y
000070r 3  B1 rr        	lda (z80_ix),y 		; sprite y.
000072r 3  C9 A1        	cmp #SpriteMaxY		; beyond maximum?
000074r 3  B0 03        	bcs redrw1		; yes, nothing to draw.
000076r 3               
000076r 3  20 rr rr     	jsr sspria		; show single sprite.
000079r 3               
000079r 3               redrw1:
000079r 3  18           	clc			; next sprite.
00007Ar 3  A5 rr        	lda z80_x
00007Cr 3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00007Er 3  85 rr        	sta z80_x
000080r 3  90 02        	bcc :+
000082r 3  E6 rr        	inc z80_i
000084r 3               :
000084r 3  C6 rr        	dec tmp			; repeat for remaining sprites.
000086r 3  D0 DE        	bne redrw0
000088r 3               
000088r 3               rpblc1:
000088r 3               ;	jsr dshrp		; redraw shrapnel.
000088r 3               
000088r 3               .if aflag
000088r 3               	jsr rbloc		; draw blocks for this screen
000088r 3               .endif
000088r 3  68           	pla			; retrieve sprite pointer.
000089r 3  85 rr        	sta z80_x
00008Br 3  68           	pla
00008Cr 3  85 rr        	sta z80_i
00008Er 3               
00008Er 3  60           	rts
00008Fr 3               
00008Fr 3               ;----------------------------------------------------------------------
00008Fr 3               ; Clear screen routine.
00008Fr 3               ;
00008Fr 3               ; Fill screenmem $8000-$97ff with ScrFillByte
00008Fr 3               ;----------------------------------------------------------------------
00008Fr 3               
00008Fr 3               cls:
00008Fr 3  A9 10        	lda #>CharAddress	; Character RAM address.
000091r 3  8D rr rr     	sta clsloop+2
000094r 3               
000094r 3  A9 00        	lda #ScrFillByte	; Clear screen
000096r 3  A0 00        	ldy #0
000098r 3  A2 10        	ldx #16
00009Ar 3               clsloop:
00009Ar 3  99 00 10     	sta CharAddress,y
00009Dr 3  C8           	iny
00009Er 3  D0 FA        	bne clsloop
0000A0r 3  EE rr rr     	inc clsloop+2
0000A3r 3  CA           	dex
0000A4r 3  D0 F4        	bne clsloop
0000A6r 3  60           	rts
0000A7r 3               
0000A7r 3               ;----------------------------------------------------------------------
0000A7r 3               ; Clear colour attributes
0000A7r 3               ;
0000A7r 3               ; Reset colour attributes to fontcol
0000A7r 3               ;----------------------------------------------------------------------
0000A7r 3               
0000A7r 3               clrcol:
0000A7r 3  AD rr rr     	lda fontcol		; Clear colour attributes
0000AAr 3  A2 00        	ldx #0
0000ACr 3               clscol:
0000ACr 3  9D 00 96     	sta ColorAttr,x
0000AFr 3  E8           	inx
0000B0r 3  E0 F2        	cpx #242
0000B2r 3  D0 F8        	bne clscol
0000B4r 3               
0000B4r 3  60           	rts
0000B5r 3               
0000B5r 3               ;----------------------------------------------------------------------
0000B5r 3               ; FODDER check
0000B5r 3               ;----------------------------------------------------------------------
0000B5r 3               
0000B5r 3               .if pflag .or dflag
0000B5r 3               fdchk:
0000B5r 3               	cmp #FODDER 		; is it fodder?
0000B5r 3               	beq :+
0000B5r 3               	rts 			; no.
0000B5r 3               :
0000B5r 3               	lda #0			; wipe fodder in MAP
0000B5r 3               	ldy #0
0000B5r 3               	sta (bufaddr),y 	; rewrite block type.
0000B5r 3               
0000B5r 3               	lda dispx		; x=x/8
0000B5r 3               	pha
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	sta dispx
0000B5r 3               
0000B5r 3               	lda dispy		; y=y/8
0000B5r 3               	pha
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	lsr a
0000B5r 3               	sta dispy
0000B5r 3               
0000B5r 3               	lda #0 			; block to write.
0000B5r 3               	jsr pattr 		; write block.
0000B5r 3               
0000B5r 3               	pla
0000B5r 3               	sta dispy
0000B5r 3               	pla
0000B5r 3               	sta dispx
0000B5r 3               	rts
0000B5r 3               .endif
0000B5r 3               
0000B5r 3               ;----------------------------------------------------
0000B5r 3               ; Scrolly text and puzzle variables.
0000B5r 3               ;----------------------------------------------------
0000B5r 3               
0000B5r 3               .if sflag
0000B5r 3               txtbit:	.byte 128		; bit to write.
0000B5r 3               txtwid:	.byte 16		; width of ticker message.
0000B5r 3               txtpos:	.word msgdat
0000B5r 3               txtini:	.word msgdat
0000B5r 3               txtscr:	.word ScreenAddr
0000B5r 3               .endif
0000B5r 3               
0000B5r 3               ;----------------------------------------------------
0000B5r 3               ; Specialist routines.
0000B5r 3               ; Process shrapnel.
0000B5r 3               ;----------------------------------------------------
0000B5r 3               proshr:
0000B5r 3               .if pflag
0000B5r 3               	lda #<SHRAPN		; table.
0000B5r 3               	sta z80_x
0000B5r 3               	lda #>SHRAPN
0000B5r 3               	sta z80_i
0000B5r 3               
0000B5r 3               	lda #NUMSHR		; shrapnel pieces to process.
0000B5r 3               	sta shrctr
0000B5r 3               prosh0:
0000B5r 3               	ldy #0
0000B5r 3               	lda (z80_ix),y		; on/off marker.
0000B5r 3               	asl a
0000B5r 3               proshx:
0000B5r 3               	bcs :+
0000B5r 3               	jsr prosh1 		; on, so process it.
0000B5r 3               :
0000B5r 3               	clc
0000B5r 3               	lda z80_x
0000B5r 3               	adc #SHRSIZ
0000B5r 3               	sta z80_x
0000B5r 3               	bcc :+
0000B5r 3               	inc z80_i
0000B5r 3               :
0000B5r 3               	dec shrctr		; round again.
0000B5r 3               	bne prosh0
0000B5r 3               .endif
0000B5r 3               .if sflag
0000B5r 3               	jsr scrly
0000B5r 3               .endif
0000B5r 3  60           	rts
0000B6r 3               
0000B6r 3               .if pflag
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Proces shrapnel piece
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               prosh1:
0000B6r 3               	jsr plot 		; delete the pixel.
0000B6r 3               
0000B6r 3               	lda #<shrptr		; shrapnel routine pointers.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>shrptr
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y		; restore shrapnel type.
0000B6r 3               	jsr prosh2 		; run the routine.
0000B6r 3               	jsr chkxy		; check x and y are good before we redisplay.
0000B6r 3               
0000B6r 3               	lda #<SHRSIZ 		; distance to next.
0000B6r 3               	sta z80_e
0000B6r 3               	lda #>SHRSIZ
0000B6r 3               	sta z80_d
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Run the routine
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               prosh2:
0000B6r 3               	asl a 			; 2 bytes per address.
0000B6r 3               	tay
0000B6r 3               	lda shrptr,y
0000B6r 3               	sta z80_l
0000B6r 3               	lda shrptr+1,y 		; fetch high byte from table.
0000B6r 3               	sta z80_h
0000B6r 3               	jmp (z80_hl) 		; jump to routine.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Paricle routine table
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shrptr:	.word laser		; laser.
0000B6r 3               	.word trail		; vapour trail.
0000B6r 3               	.word shrap		; shrapnel from explosion.
0000B6r 3               	.word dotl		; horizontal starfield left.
0000B6r 3               	.word dotr		; horizontal starfield right.
0000B6r 3               	.word dotu		; vertical starfield up.
0000B6r 3               	.word dotd		; vertical starfield down.
0000B6r 3               	.word ptcusr		; user particle.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Explosion shrapnel.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shrap:
0000B6r 3               	ldy #1
0000B6r 3               	lda (z80_ix),y 		; get the angle.
0000B6r 3               	clc
0000B6r 3               	adc #<shrsin		; shrapnel sine table.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>shrsin
0000B6r 3               	adc #0
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; fetch value from table.
0000B6r 3               	sta z80_e
0000B6r 3               	inc z80_l 		; next byte of table.
0000B6r 3               	bne :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y		; fetch value from table.
0000B6r 3               	sta z80_d
0000B6r 3               	inc z80_l		; next byte of table.
0000B6r 3               	bne :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; fetch value from table.
0000B6r 3               	sta z80_c
0000B6r 3               	inc z80_l 		; next byte of table.
0000B6r 3               	bne :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; fetch value from table.
0000B6r 3               	sta z80_b
0000B6r 3               
0000B6r 3               	ldy #2
0000B6r 3               	lda (z80_ix),y 		; x coordinate in hl.
0000B6r 3               	clc
0000B6r 3               	adc z80_e		; add sine lb
0000B6r 3               	sta (z80_ix),y		; store new coordinate lb.
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	adc z80_d		; add sine hb
0000B6r 3               	sta (z80_ix),y		; store new coordinate hb.
0000B6r 3               
0000B6r 3               	ldy #4
0000B6r 3               	lda (z80_ix),y	 	; y coordinate in hl.
0000B6r 3               	clc
0000B6r 3               	adc z80_c		; add cosine lb
0000B6r 3               	sta (z80_ix),y		; store new coordinate lb.
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	adc z80_b		; add cosine lb
0000B6r 3               	sta (z80_ix),y		; store new coordinate hb.
0000B6r 3               
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Move dots
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               dotl:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1		 	; move left.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               dotr:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1		 	; move left.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               dotu:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1		 	; move up.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               dotd:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1			; move down.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Check if coordinates are ok before redrawing at new position.
0000B6r 3               ;
0000B6r 3               ; left:   X>L		X=L	Ok
0000B6r 3               ; right:  R+15>X	X=R	Ok
0000B6r 3               ; top:    Y>T		Y=T	Ok
0000B6r 3               ; bottom: B+15>Y	Y=B	Ok
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               chkxy:
0000B6r 3               
0000B6r 3               ; top:    Y>T		Y=T	Ok
0000B6r 3               
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	cmp wntopx		; window top.
0000B6r 3               	bcs :+			; compare with top window limit.
0000B6r 3               	jmp kilshr		; out of window, kill shrapnel.
0000B6r 3               :
0000B6r 3               ; left:   X>L		X=L	Ok
0000B6r 3               
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	cmp wnlftx		; left edge.
0000B6r 3               	bcs :+			; compare with left window limit.
0000B6r 3               	jmp kilshr		; out of window, kill shrapnel.
0000B6r 3               :
0000B6r 3               ; bottom: B+15>Y	Y=B	Ok
0000B6r 3               
0000B6r 3               	lda wnbotx		; point to bottom.
0000B6r 3               	clc
0000B6r 3               	adc #15
0000B6r 3               	ldy #3
0000B6r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	bcs :+			; compare with shrapnel x coordinate.
0000B6r 3               	jmp kilshr		; off screen, kill shrapnel..
0000B6r 3               :
0000B6r 3               ; right:  R+15>X	X=R	Ok
0000B6r 3               
0000B6r 3               	lda wnrgtx		; point to right edge.
0000B6r 3               	clc
0000B6r 3               	adc #15
0000B6r 3               	ldy #5
0000B6r 3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0000B6r 3               	bcs :+			; compare with window limit.
0000B6r 3               	jmp kilshr		; off screen, kill shrapnel.
0000B6r 3               :
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Drop through.
0000B6r 3               ; Display shrapnel.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               plot:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y		; y integer.
0000B6r 3               	sta dispy	 	; workspace coordinates.
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y	 	; x integer.
0000B6r 3               	sta dispx 		; workspace coordinates.
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y 		; type.
0000B6r 3               	bne :+			; is it a laser?
0000B6r 3               	jmp plot1 		; yes, draw laser instead.
0000B6r 3               :
0000B6r 3               plot0:
0000B6r 3               	lda dispx		; which pixel within byte do we
0000B6r 3               	and #7			; want to set first?
0000B6r 3               	tay
0000B6r 3               	lda dots,y 		; table of small pixel positions.
0000B6r 3               	sta z80_e 		; get value.
0000B6r 3               
0000B6r 3               	jsr scadd 		; screen address.
0000B6r 3               	ldy #0
0000B6r 3               	lda (scraddr),y		; see what's already there.
0000B6r 3               	eor z80_e
0000B6r 3               	sta (scraddr),y 	; put back on screen.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               plot1:
0000B6r 3               	jsr scadd 		; screen address.
0000B6r 3               	ldy #0
0000B6r 3               	lda (scraddr),y 	; fetch byte there.
0000B6r 3               	eor #255 		; toggle all bits.
0000B6r 3               	sta (scraddr),y 	; new byte.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Switch off shrapnel
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               kilshr:
0000B6r 3               	lda #128
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y	; switch off shrapnel.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Sine/cosine table
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shrsin:	.word 0,1024,391,946,724,724,946,391
0000B6r 3               	.word 1024,0,946,65144,724,64811,391,64589
0000B6r 3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0000B6r 3               	.word 64512,0,64589,391,64811,724,65144,946
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create trail
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               trail:
0000B6r 3               	ldy #1
0000B6r 3               	lda (z80_ix),y 	; time remaining.
0000B6r 3               	sec
0000B6r 3               	sbc #1
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	bne :+
0000B6r 3               	jmp trailk		; time to switch it off.
0000B6r 3               :
0000B6r 3               	jsr qrand		; get a random number.
0000B6r 3               	lsr a 			; x or y axis?
0000B6r 3               	bcc :+
0000B6r 3               	jmp trailv		; use y.
0000B6r 3               :
0000B6r 3               ; Trail horizontal
0000B6r 3               
0000B6r 3               	lsr a 			; which direction?
0000B6r 3               	bcc :+
0000B6r 3               	jmp traill		; go left.
0000B6r 3               :
0000B6r 3               ; Trail right
0000B6r 3               
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1	 		; go right.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Trail left
0000B6r 3               
0000B6r 3               traill:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1 			; go left.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Trail vertical
0000B6r 3               
0000B6r 3               trailv:
0000B6r 3               	lsr a		 	; which direction?
0000B6r 3               	bcc :+
0000B6r 3               	jmp trailu		; go up.
0000B6r 3               :
0000B6r 3               ; Trail down
0000B6r 3               
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	clc
0000B6r 3               	adc #1 			; go down.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Trail up
0000B6r 3               
0000B6r 3               trailu:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y
0000B6r 3               	sec
0000B6r 3               	sbc #1 			; go up.
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ; Kill trail
0000B6r 3               
0000B6r 3               trailk:
0000B6r 3               	lda #200		; set off-screen to kill vapour trail.
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create laser beam
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               laser:
0000B6r 3               	ldy #1
0000B6r 3               	lda (z80_ix),y 		; direction.
0000B6r 3               	ror a 			; left or right?
0000B6r 3               	bcs :+
0000B6r 3               	jmp laserl		; move left.
0000B6r 3               :
0000B6r 3               ; Laser right
0000B6r 3               
0000B6r 3               	lda #8			; distance to travel.
0000B6r 3               	sta z80_b
0000B6r 3               	jmp laserm		; move laser.
0000B6r 3               
0000B6r 3               ; Laser left
0000B6r 3               
0000B6r 3               laserl:
0000B6r 3               	lda #248		; distance to travel.
0000B6r 3               	sta z80_b
0000B6r 3               laserm:
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_ix),y		; x position.
0000B6r 3               	clc
0000B6r 3               	adc z80_b		; add distance.
0000B6r 3               	sta (z80_ix),y		; set new x coordinate.
0000B6r 3               
0000B6r 3               ; Test new block.
0000B6r 3               
0000B6r 3               	sta dispx 		; set x for block collision detection purposes.
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_ix),y 		; get y.
0000B6r 3               	sta dispy		; set coordinate for collision test.
0000B6r 3               	jsr tstbl 		; get block type there.
0000B6r 3               	cmp #WALL		; is it solid?
0000B6r 3               	bne :+
0000B6r 3               	jmp trailk		; yes, it cannot pass.
0000B6r 3               :
0000B6r 3               .if pflag .or dflag
0000B6r 3                       cmp #FODDER             ; is it fodder?
0000B6r 3                       bne :+
0000B6r 3                       jsr fdchk               ; remove fodder block.
0000B6r 3                       jmp trailk              ; destroy laser.
0000B6r 3               :
0000B6r 3               .endif
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Dots mask
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               dots:	.byte 128,64,32,16,8,4,2,1
0000B6r 3               
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Plot, preserving de.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               plotde:
0000B6r 3               	lda z80_d 		; put de on stack.
0000B6r 3               	pha
0000B6r 3               	lda z80_e
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	jsr plot 		; plot pixel.
0000B6r 3               
0000B6r 3               	pla			; restore de from stack.
0000B6r 3               	sta z80_e
0000B6r 3               	pla
0000B6r 3               	sta z80_d
0000B6r 3               
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Shoot a laser.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               shoot:
0000B6r 3               	sta z80_c		; store direction in c register.
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	clc
0000B6r 3               shoot1:
0000B6r 3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0000B6r 3               	sta z80_l 		; puty y coordinate in l.
0000B6r 3               
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y 		; x coordinate in h.
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	lda z80_i		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcs :+
0000B6r 3               	jmp vapou2		; failed, restore ix.
0000B6r 3               :
0000B6r 3               	lda #0
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y 		; set up a laser.
0000B6r 3               
0000B6r 3               	lda z80_c
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y 		; set the direction.
0000B6r 3               
0000B6r 3               	lda z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; set y coordinate.
0000B6r 3               
0000B6r 3               	ror z80_c		; check direction we want.
0000B6r 3               	bcc :+
0000B6r 3               	jmp shootr		; shoot right.
0000B6r 3               :
0000B6r 3               	lda z80_h		; X position.
0000B6r 3               shoot0:
0000B6r 3               	and #248		; align on character boundary.
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; set x coordinate.
0000B6r 3               	jmp vapou0 		; draw first image.
0000B6r 3               shootr:
0000B6r 3               	lda z80_h		; x position.
0000B6r 3               	clc
0000B6r 3               	adc #15			; look right.
0000B6r 3               	jmp shoot0		; align and continue.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create a bit of vapour trail.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               vapour:
0000B6r 3               	lda z80_i		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	clc
0000B6r 3               vapou3:
0000B6r 3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0000B6r 3               	sta z80_l
0000B6r 3               
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y 		; x coordinate.
0000B6r 3               	adc #7
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcc :+
0000B6r 3               	jmp vapou1		; no, we can use it.
0000B6r 3               :
0000B6r 3               vapou2:
0000B6r 3               	pla
0000B6r 3               	sta z80_x
0000B6r 3               	pla
0000B6r 3               	sta z80_i
0000B6r 3               	rts
0000B6r 3               vapou1:
0000B6r 3               	lda z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; set up y.
0000B6r 3               
0000B6r 3               	lda z80_h
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y 		; set up x coordinate.
0000B6r 3               
0000B6r 3               	jsr qrand		; get quick random number.
0000B6r 3               	and #15			; random time.
0000B6r 3               	clc
0000B6r 3               	adc #15			; minimum time on screen.
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y		; set time on screen.
0000B6r 3               
0000B6r 3               	lda #1
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; define particle as vapour trail.
0000B6r 3               vapou0:
0000B6r 3               	jsr chkxy		; plot first position.
0000B6r 3               	jmp vapou2
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create a user particle.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               ptusr:
0000B6r 3               	sta z80_f		; store timer.
0000B6r 3               
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	clc
0000B6r 3               	adc #7			; mid-point of sprite.
0000B6r 3               	sta z80_l
0000B6r 3               
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y 		; x coordinate.
0000B6r 3               	clc
0000B6r 3               	adc #7			; mid-point of sprite.
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcs ptusr1
0000B6r 3               	rts 			; out of slots, can't generate anything.
0000B6r 3               ptusr1:
0000B6r 3               	lda z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y 		; set up y.
0000B6r 3               
0000B6r 3               	lda z80_h
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; set up x coordinate.
0000B6r 3               
0000B6r 3               	lda z80_f 		; restore timer.
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y		; set time on screen.
0000B6r 3               
0000B6r 3               	lda #7
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; define particle as user particle.
0000B6r 3               
0000B6r 3               	jmp chkxy		; plot first position.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create a vertical or horizontal star.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               star:
0000B6r 3               	lda z80_i		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	jsr fpslot 		; find particle slot.
0000B6r 3               	bcs star7		; found one we can use.
0000B6r 3               star0:
0000B6r 3               	pla 			; restore sprite pointer.
0000B6r 3               	sta z80_x
0000B6r 3               	pla
0000B6r 3               	sta z80_i
0000B6r 3               	rts 			; out of slots, can't generate anything.
0000B6r 3               star7:
0000B6r 3               	lda z80_c		; direction.
0000B6r 3               	and #3 			; is it left?
0000B6r 3               	bne :+
0000B6r 3               	jmp star1 		; yes, it's left.
0000B6r 3               :
0000B6r 3               	cmp #1 			; is it right?
0000B6r 3               	bne :+
0000B6r 3               	jmp star2 		; yes, it's right.
0000B6r 3               :
0000B6r 3               	cmp #2 			; is it up?
0000B6r 3               	bne :+
0000B6r 3               	jmp star3 		; yes, it's up.
0000B6r 3               :
0000B6r 3               	ldy wntopx 		; get edge of screen.
0000B6r 3               	iny			; down one pixel.
0000B6r 3               	tya
0000B6r 3               star8:
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y 		; set y coord.
0000B6r 3               	jsr qrand 		; get quick random number.
0000B6r 3               star9:
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; set x position.
0000B6r 3               
0000B6r 3               	lda z80_c		; direction.
0000B6r 3               	and #3			; zero to three.
0000B6r 3               	clc
0000B6r 3               	adc #3			; 3 to 6 for starfield.
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; define particle as star.
0000B6r 3               	jsr chkxy		; plot first position.
0000B6r 3               	jmp star0
0000B6r 3               star1:
0000B6r 3               	jsr qrand		; get quick random number.
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y 		; set y coord.
0000B6r 3               
0000B6r 3               	lda wnrgtx 		; get edge of screen.
0000B6r 3               	clc
0000B6r 3               	adc #15			; add width of sprite minus 1.
0000B6r 3               	jmp star9
0000B6r 3               star2:
0000B6r 3               	jsr qrand 		; get quick random number.
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; set y coord.
0000B6r 3               
0000B6r 3               	lda wnlftx		; get edge of screen.
0000B6r 3               	jmp star9
0000B6r 3               star3:
0000B6r 3               	lda wnbotx 		; get edge of screen.
0000B6r 3               	clc
0000B6r 3               	adc #15 		; height of sprite minus one pixel.
0000B6r 3               	jmp star8
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Find particle slot for lasers or vapour trail.
0000B6r 3               ; can't use alternate accumulator.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               fpslot:
0000B6r 3               	lda #<SHRAPN 		; shrapnel table.
0000B6r 3               	sta z80_x
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_i
0000B6r 3               
0000B6r 3               	lda #NUMSHR		; number of pieces in table.
0000B6r 3               	sta z80_b
0000B6r 3               fpslt0:
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y		; get type.
0000B6r 3               	asl a  			; is this slot in use?
0000B6r 3               	bcc :+
0000B6r 3               	rts			; no, we can use it.
0000B6r 3               :
0000B6r 3               	clc			; point to more shrapnel.
0000B6r 3               	lda z80_x
0000B6r 3               	adc #SHRSIZ
0000B6r 3               	sta z80_x
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_i
0000B6r 3               :
0000B6r 3               	dec z80_b		; repeat for all shrapnel.
0000B6r 3               	bne fpslt0
0000B6r 3               
0000B6r 3               	clc
0000B6r 3               	rts 			; out of slots, can't generate anything.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Create an explosion at sprite position.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               explod:
0000B6r 3               	sta z80_c 		; particles to create.
0000B6r 3               
0000B6r 3               	lda z80_i 		; store pointer to sprite.
0000B6r 3               	pha
0000B6r 3               	lda z80_x
0000B6r 3               	pha
0000B6r 3               
0000B6r 3               	ldy #8
0000B6r 3               	lda (z80_ix),y 		; y coordinate.
0000B6r 3               	sta z80_l
0000B6r 3               	ldy #9
0000B6r 3               	lda (z80_ix),y		; x coordinate.
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	lda #<SHRAPN		; shrapnel table.
0000B6r 3               	sta z80_x
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_i
0000B6r 3               
0000B6r 3               	lda #NUMSHR		; number of pieces in table.
0000B6r 3               	sta explcnt
0000B6r 3               expld0:
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_ix),y		; get type.
0000B6r 3               	asl a 			; is this slot in use?
0000B6r 3               	bcs expld1		; no, we can use it.
0000B6r 3               expld2:
0000B6r 3               	clc
0000B6r 3               	lda z80_x
0000B6r 3               	adc #SHRSIZ
0000B6r 3               	sta z80_x
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_i
0000B6r 3               :
0000B6r 3               	dec explcnt		; repeat for all shrapnel.
0000B6r 3               	bne expld0
0000B6r 3               expld3:
0000B6r 3               	pla			; restore sprite pointer.
0000B6r 3               	sta z80_x
0000B6r 3               	pla
0000B6r 3               	sta z80_i
0000B6r 3               	rts 			; out of slots, can't generate any more.
0000B6r 3               
0000B6r 3               expld1:
0000B6r 3               	lda z80_c		; shrapnel counter.
0000B6r 3               	and #15			; 0 to 15.
0000B6r 3               	clc			; add to x.
0000B6r 3               	adc z80_l
0000B6r 3               	ldy #3
0000B6r 3               	sta (z80_ix),y		; y coord.
0000B6r 3               
0000B6r 3               	lda seed3 		; crap random number.
0000B6r 3               	and #15			; 0 to 15.
0000B6r 3               	clc 			; add to y.
0000B6r 3               	adc z80_h
0000B6r 3               	ldy #5
0000B6r 3               	sta (z80_ix),y		; x coord.
0000B6r 3               
0000B6r 3               	lda #2
0000B6r 3               	ldy #0
0000B6r 3               	sta (z80_ix),y		; switch it on.
0000B6r 3               
0000B6r 3               	jsr chkxy		; plot first position.
0000B6r 3               	jsr qrand		; quick random angle.
0000B6r 3               	and #60 		; keep within range.
0000B6r 3               	ldy #1
0000B6r 3               	sta (z80_ix),y		; angle.
0000B6r 3               
0000B6r 3               	dec z80_c		; one less piece of shrapnel to generate.
0000B6r 3               	bne expld2 		; back to main explosion loop.
0000B6r 3               	jmp expld3 		; restore sprite pointer and exit.
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Quick random
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               qrand:
0000B6r 3               	jsr random		; r register.
0000B6r 3               	eor seed3		; combine with seed.
0000B6r 3               	sta seed3 		; new seed.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;----------------------------------------------------
0000B6r 3               ; Display all shrapnel.
0000B6r 3               ;----------------------------------------------------
0000B6r 3               
0000B6r 3               dshrp:
0000B6r 3               	lda #<plotde		; display routine.
0000B6r 3               	sta proshx+1
0000B6r 3               	lda #>plotde
0000B6r 3               	sta proshx+2
0000B6r 3               	jsr proshr		; process shrapnel.
0000B6r 3               
0000B6r 3               	lda #<prosh1		; processing routine.
0000B6r 3               	sta proshx+1
0000B6r 3               	lda #>prosh1
0000B6r 3               	sta proshx+2
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;------------------------------------------------------
0000B6r 3               ; Particle engine.
0000B6r 3               ;
0000B6r 3               ; Init particle data for 55 particles in SHRAPN table.
0000B6r 3               ; Every particle has 6 bytes.
0000B6r 3               ;
0000B6r 3               ; global:	-
0000B6r 3               ; local:	x,y,hl
0000B6r 3               ; calls:	-
0000B6r 3               ;------------------------------------------------------
0000B6r 3               
0000B6r 3               inishr:
0000B6r 3               	lda #<SHRAPN 		; table.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	ldy #0
0000B6r 3               	ldx #NUMSHR		; shrapnel pieces to process.
0000B6r 3               inish0:
0000B6r 3               	lda #255 		; kill the shrapnel.
0000B6r 3               	sta (z80_hl),y
0000B6r 3               
0000B6r 3               	clc 			; point there.
0000B6r 3               	lda z80_l
0000B6r 3               	adc #SHRSIZ		; distance to next.
0000B6r 3               	sta z80_l
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	dex
0000B6r 3               	bne inish0 		; round again.
0000B6r 3               	rts
0000B6r 3               
0000B6r 3               ;------------------------------------------------------
0000B6r 3               ; Check for collision between laser and sprite.
0000B6r 3               ;------------------------------------------------------
0000B6r 3               
0000B6r 3               lcol:
0000B6r 3               	lda #<SHRAPN		; shrapnel table.
0000B6r 3               	sta z80_l
0000B6r 3               	lda #>SHRAPN
0000B6r 3               	sta z80_h
0000B6r 3               
0000B6r 3               	lda #NUMSHR		; number of pieces in table.
0000B6r 3               	sta z80_b
0000B6r 3               lcol0:
0000B6r 3               	ldy #0
0000B6r 3               	lda (z80_hl),y 		; get type.
0000B6r 3               	beq lcol1		; yes, check collision.
0000B6r 3               lcol3:
0000B6r 3               	clc			; point to more shrapnel.
0000B6r 3               	lda z80_l
0000B6r 3               	adc #SHRSIZ
0000B6r 3               	sta z80_l
0000B6r 3               	bcc :+
0000B6r 3               	inc z80_h
0000B6r 3               :
0000B6r 3               	dec z80_b		; repeat for all shrapnel.
0000B6r 3               	bne lcol0
0000B6r 3               	clc
0000B6r 3               	rts 			; no collision, carry not set.
0000B6r 3               lcol1:
0000B6r 3               	ldy #3
0000B6r 3               	lda (z80_hl),y		; get y.
0000B6r 3               	sec
0000B6r 3               	ldy #8
0000B6r 3               	sbc (z80_ix),y		; subtract sprite y.
0000B6r 3               lcolh:
0000B6r 3               	cmp #SPR_HGT 		; within range?
0000B6r 3               	bcc :+
0000B6r 3               	jmp lcol2		; no, missed.
0000B6r 3               :
0000B6r 3               	ldy #5
0000B6r 3               	lda (z80_hl),y 		; get x.
0000B6r 3               	sec
0000B6r 3               	ldy #9
0000B6r 3               	sbc (z80_ix),y 		; subtract sprite y.
0000B6r 3               	cmp #16			; within range?
0000B6r 3               	bcs :+
0000B6r 3               	jmp lcol4 		; yes, collision occurred.
0000B6r 3               :
0000B6r 3               lcol2:
0000B6r 3               	jmp lcol3
0000B6r 3               lcol4:
0000B6r 3               	sec
0000B6r 3               	rts 			; return with carry set for collision.
0000B6r 3               .endif
0000B6r 3               
0000B6r 3               ;------------------------------------------------------
0000B6r 3               ; Main game engine code starts here.
0000B6r 3               ; After initialisation, mloop is the main loop
0000B6r 3               ;------------------------------------------------------
0000B6r 3               
0000B6r 3               game:
0000B6r 3               
0000B6r 3               ; Set up screen address table.
0000B6r 3               
0000B6r 3               setsat:
0000B6r 3  A9 00        	lda #<CharAddress	; start of screen.
0000B8r 3  85 rr        	sta scraddr
0000BAr 3  A9 10        	lda #>CharAddress
0000BCr 3  85 rr        	sta scraddr+1
0000BEr 3               
0000BEr 3  A0 00        	ldy #0			; vertical lines on screen.
0000C0r 3               setsa0:
0000C0r 3  A5 rr        	lda scraddr
0000C2r 3  99 00 07     	sta SCADTB_lb,y		; write low byte.
0000C5r 3  A5 rr        	lda scraddr+1
0000C7r 3  99 00 08     	sta SCADTB_hb,y		; write high byte.
0000CAr 3  20 rr rr     	jsr nline		; next line down.
0000CDr 3  C8           	iny			; next position in table.
0000CEr 3  D0 F0        	bne setsa0
0000D0r 3               
0000D0r 3               ; Set up colour address table
0000D0r 3               
0000D0r 3               setsof:
0000D0r 3  A9 00        	lda #<ColorAttr		; start of colour attributes
0000D2r 3  85 rr        	sta bufaddr
0000D4r 3  A9 96        	lda #>ColorAttr
0000D6r 3  85 rr        	sta bufaddr+1
0000D8r 3               
0000D8r 3  A0 00        	ldy #0			; vertical lines on screen.
0000DAr 3               setof0:
0000DAr 3  A5 rr        	lda bufaddr
0000DCr 3  99 4A 0A     	sta COLATTTB_lb,y	; write low byte.
0000DFr 3  A5 rr        	lda bufaddr+1
0000E1r 3  99 55 0A     	sta COLATTTB_hb,y	; write high byte.
0000E4r 3  18           	clc			; next line down.
0000E5r 3  A5 rr        	lda bufaddr
0000E7r 3  69 16        	adc #ScrWidth
0000E9r 3  85 rr        	sta bufaddr
0000EBr 3  90 02        	bcc :+
0000EDr 3  E6 rr        	inc bufaddr+1
0000EFr 3               :
0000EFr 3  C8           	iny			; next position in table.
0000F0r 3  C0 0B        	cpy #ScrHeight/2
0000F2r 3  D0 E6        	bne setof0
0000F4r 3               
0000F4r 3               ; Init graphics mode
0000F4r 3               
0000F4r 3  20 rr rr     	jsr init
0000F7r 3               
0000F7r 3               ; Init joysticks
0000F7r 3  20 rr rr     	jsr joyinit		; VIC20 joystick
0000FAr 3               
0000FAr 3               rpblc2:
0000FAr 3               .if pflag
0000FAr 3               	jsr inishr 		; initialise particle engine.
0000FAr 3               .endif
0000FAr 3               evintr:
0000FAr 3  20 rr rr     	jsr evnt12 		; call intro/menu event.
0000FDr 3               
0000FDr 3  A9 02        	lda #WALL 		; write default property.
0000FFr 3  A2 00        	ldx #0
000101r 3               clrmap:
000101r 3  9D 00 04     	sta MAP,x 		; block properties.
000104r 3  9D 00 05     	sta MAP+256,x
000107r 3  E8           	inx
000108r 3  D0 F7        	bne clrmap
00010Ar 3               
00010Ar 3               .if oflag
00010Ar 3  20 rr rr     	jsr iniob 		; initialise objects.
00010Dr 3               .endif
00010Dr 3  A9 00        	lda #0			; put zero in accumulator.
00010Fr 3  85 rr        	sta gamwon		; reset game won flag.
000111r 3               
000111r 3  20 rr rr     	jsr inisc 		; init the score.
000114r 3               mapst:
000114r 3  AD rr rr     	lda stmap 		; start position on map.
000117r 3  8D rr rr     	sta roomtb		; set up position in table, if there is one.
00011Ar 3               
00011Ar 3               inipbl:
00011Ar 3               .if aflag
00011Ar 3               	lda #<eop		; reset blockpointer
00011Ar 3               	sta pbptr
00011Ar 3               	lda #>eop
00011Ar 3               	sta pbptr+1
00011Ar 3               .endif
00011Ar 3  20 rr rr     	jsr initsc 		; set up first screen.
00011Dr 3               
00011Dr 3  A9 rr        	lda #<ssprit 		; default to spare sprite in table.
00011Fr 3  85 rr        	sta z80_x
000121r 3  A9 rr        	lda #>ssprit
000123r 3  85 rr        	sta z80_i
000125r 3               evini:
000125r 3  20 rr rr     	jsr evnt13 		; initialisation.
000128r 3               
000128r 3               ; Two restarts.
000128r 3               ; First restart - clear all sprites and initialise everything.
000128r 3               
000128r 3               rstrt:
000128r 3  20 rr rr     	jsr rsevt 		; restart events.
00012Br 3  20 rr rr     	jsr xspr 		; clear sprite table.
00012Er 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000131r 3  20 rr rr     	jsr ispr 		; initialise sprite table.
000134r 3  4C rr rr     	jmp rstrt0
000137r 3               
000137r 3               ; Second restart - clear all but player, and don't initialise him.
000137r 3               
000137r 3               rstrtn:
000137r 3  20 rr rr     	jsr rsevt		; restart events.
00013Ar 3  20 rr rr     	jsr nspr 		; clear all non-player sprites.
00013Dr 3  20 rr rr     	jsr sprlst 		; fetch pointer to screen sprites.
000140r 3  20 rr rr     	jsr kspr 		; initialise sprite table, no more players.
000143r 3               
000143r 3               ; Set up the player and/or enemy sprites.
000143r 3               
000143r 3               rstrt0:
000143r 3  A9 00        	lda #0 			; zero in accumulator.
000145r 3  85 rr        	sta nexlev 		; reset next level flag.
000147r 3  85 rr        	sta restfl 		; reset restart flag.
000149r 3  85 rr        	sta deadf 		; reset dead flag.
00014Br 3               
00014Br 3  20 rr rr     	jsr droom 		; show screen layout.
00014Er 3               rpblc0:
00014Er 3               .if pflag
00014Er 3               	jsr inishr 		; initialise particle engine.
00014Er 3               .endif
00014Er 3               .if aflag
00014Er 3               	jsr rbloc		; draw blocks for this screen
00014Er 3               .endif
00014Er 3               .if oflag
00014Er 3  20 rr rr     	jsr shwob		; draw objects.
000151r 3               .endif
000151r 3               
000151r 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
000153r 3  85 rr        	sta z80_x
000155r 3  A9 rr        	lda #>sprtab
000157r 3  85 rr        	sta z80_i
000159r 3  20 rr rr     	jsr dspr 		; display sprites.
00015Cr 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00015Er 3  85 rr        	sta z80_x
000160r 3  A9 rr        	lda #>(sprtab+TABSIZ)
000162r 3  85 rr        	sta z80_i
000164r 3  20 rr rr     	jsr dspr 		; display sprites.
000167r 3               mloop:
000167r 3  20 rr rr     	jsr vsync 		; synchronise with display.
00016Ar 3               
00016Ar 3  A9 rr        	lda #<sprtab 		; address of sprite table, even sprites.
00016Cr 3  85 rr        	sta z80_x
00016Er 3  A9 rr        	lda #>sprtab
000170r 3  85 rr        	sta z80_i
000172r 3  20 rr rr     	jsr dspr 		; display even sprites.
000175r 3               
000175r 3               ;	jsr plsnd 		; play sounds.
000175r 3  20 rr rr     	jsr vsync 		; synchronise with display.
000178r 3  20 rr rr     	jsr proshr
00017Br 3               
00017Br 3  A9 rr        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
00017Dr 3  85 rr        	sta z80_x
00017Fr 3  A9 rr        	lda #>(sprtab+TABSIZ)
000181r 3  85 rr        	sta z80_i
000183r 3  20 rr rr     	jsr dspr 		; display odd sprites.
000186r 3               
000186r 3  A9 rr        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
000188r 3  85 rr        	sta z80_x
00018Ar 3  A9 rr        	lda #>(ssprit)
00018Cr 3  85 rr        	sta z80_i
00018Er 3               evlp1:
00018Er 3  20 rr rr     	jsr evnt10 		; called once per main loop.
000191r 3  20 rr rr     	jsr pspr 		; process sprites.
000194r 3               
000194r 3               ; Main loop events.
000194r 3               
000194r 3  A9 rr        	lda #<ssprit 		; point to spare sprite for spawning purposes.
000196r 3  85 rr        	sta z80_x
000198r 3  A9 rr        	lda #>ssprit
00019Ar 3  85 rr        	sta z80_i
00019Cr 3               evlp2:
00019Cr 3  20 rr rr     	jsr evnt11 		; called once per main loop.
00019Fr 3               bsortx:
00019Fr 3  20 rr rr     	jsr bsort 		; sort sprites.
0001A2r 3               
0001A2r 3  A5 rr        	lda nexlev		; finished level flag.
0001A4r 3  D0 1F        	bne newlev		; is set, go to next level.
0001A6r 3  A5 rr        	lda gamwon		; finished game flag.
0001A8r 3  D0 2A        	bne evwon		; is set, finish the game.
0001AAr 3  A5 rr        	lda restfl 		; finished level flag.
0001ACr 3  C9 01        	cmp #1			; has it been set?
0001AEr 3  D0 03        	bne :+
0001B0r 3  4C rr rr     	jmp rstrt		; yes, go to next level.
0001B3r 3               :
0001B3r 3  C9 02        	cmp #2			; has it been set?
0001B5r 3  D0 03        	bne :+
0001B7r 3  4C rr rr     	jmp rstrtn		; yes, go to next level.
0001BAr 3               :
0001BAr 3  A5 rr        	lda deadf 		; dead flag.
0001BCr 3  D0 1C        	bne pdead		; yes, player dead.
0001BEr 3               
0001BEr 3               ; back to start of main loop.
0001BEr 3               
0001BEr 3  E6 rr        	inc frmno
0001C0r 3  E6 rr        	inc clock
0001C2r 3  4C rr rr     	jmp mloop		; switched to a jmp mloop during test mode.
0001C5r 3               
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               ; Read blocks from list and update screen accordingly.
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               
0001C5r 3               .if aflag
0001C5r 3               rbloc:
0001C5r 3               	lda #<eop		; reset blockpointer
0001C5r 3               	sta pbbuf
0001C5r 3               	lda #>eop
0001C5r 3               	sta pbbuf+1
0001C5r 3               
0001C5r 3               rbloc2:
0001C5r 3               	lda pbbuf			; check for last block
0001C5r 3               	cmp pbptr
0001C5r 3               	bne rbloc1
0001C5r 3               	lda pbbuf+1
0001C5r 3               	cmp pbptr+1
0001C5r 3               	bne rbloc1
0001C5r 3               	rts
0001C5r 3               rbloc1:
0001C5r 3               	ldy #0
0001C5r 3               	lda (pbbuf),y		; check if block for this scno
0001C5r 3               	cmp scno
0001C5r 3               	bne rbloc0		; if not, skip
0001C5r 3               	iny
0001C5r 3               	lda (pbbuf),y		; get y
0001C5r 3               	sta dispy
0001C5r 3               	iny
0001C5r 3               	lda (pbbuf),y		; get x
0001C5r 3               	sta dispx
0001C5r 3               	iny
0001C5r 3               	lda (pbbuf),y		; get blocknr
0001C5r 3               	jsr pattr2		; draw block
0001C5r 3               rbloc0:
0001C5r 3               	clc			; point to next block
0001C5r 3               	lda pbbuf
0001C5r 3               	adc #4
0001C5r 3               	sta pbbuf
0001C5r 3               	bcc rbloc2
0001C5r 3               	inc pbbuf+1
0001C5r 3               	jmp rbloc2
0001C5r 3               .endif
0001C5r 3               
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               ; New level
0001C5r 3               ;----------------------------------------------------------
0001C5r 3               
0001C5r 3               newlev:
0001C5r 3  A5 rr        	lda scno 			; current screen.
0001C7r 3  18           	clc
0001C8r 3  69 01        	adc #1				; next screen.
0001CAr 3  CD rr rr     	cmp numsc 			; total number of screens.
0001CDr 3  B0 05        	bcs evwon			; yes, game finished.
0001CFr 3  85 rr        	sta scno			; set new level number.
0001D1r 3  4C rr rr     	jmp rstrt			; restart, clearing all aliens.
0001D4r 3               
0001D4r 3               evwon:
0001D4r 3  20 rr rr     	jsr evnt18		 	; game completed.
0001D7r 3  4C rr rr     	jmp tidyup			; tidy up and return to BASIC/calling routine.
0001DAr 3               
0001DAr 3               ;----------------------------------------------------------
0001DAr 3               ; Player dead.
0001DAr 3               ;----------------------------------------------------------
0001DAr 3               
0001DAr 3               pdead:
0001DAr 3  A9 00        	lda #0				; zeroise accumulator.
0001DCr 3  85 rr        	sta deadf			; reset dead flag.
0001DEr 3               evdie:
0001DEr 3  20 rr rr     	jsr evnt16 			; death subroutine.
0001E1r 3  A5 rr        	lda numlif			; number of lives.
0001E3r 3  F0 03        	beq :+
0001E5r 3  4C rr rr     	jmp rstrt 			; restart game.
0001E8r 3               :
0001E8r 3               evfail:
0001E8r 3  20 rr rr     	jsr evnt17 			; failure event.
0001EBr 3  4C rr rr     	jmp game			; restart game
0001EEr 3               
0001EEr 3               ;----------------------------------------------------------
0001EEr 3               ; Tidy things up
0001EEr 3               ;----------------------------------------------------------
0001EEr 3               
0001EEr 3               tidyup:
0001EEr 3  A0 00        	ldy #0				; digits to check.
0001F0r 3               tidyu2:
0001F0r 3  B9 rr rr     	lda score,y 			; get score digit.
0001F3r 3  CD rr rr     	cmp hiscor 			; are we larger than high score digit?
0001F6r 3  90 07        	bcc tidyu0			; high score is bigger.
0001F8r 3  D0 0E        	bne tidyu1			; score is greater, record new high score.
0001FAr 3  C8           	iny				; next digit of high score.
0001FBr 3  C0 06        	cpy #6
0001FDr 3  D0 F1        	bne tidyu2			; repeat for all digits
0001FFr 3               tidyu0:
0001FFr 3  A9 rr        	lda #<score			; return pointing to score.
000201r 3  85 rr        	sta z80_c
000203r 3  A9 rr        	lda #>score
000205r 3  85 rr        	sta z80_b
000207r 3  60           	rts
000208r 3               tidyu1:
000208r 3  A0 05        	ldy #5
00020Ar 3               tidyu3:
00020Ar 3  B9 rr rr     	lda score,y			; score.
00020Dr 3  99 rr rr     	sta hiscor,y			; high score.
000210r 3  88           	dey
000211r 3  10 F7        	bpl tidyu3 			; copy score to high score.
000213r 3               evnewh:
000213r 3  20 rr rr     	jsr evnt19			; new high score event.
000216r 3  4C rr rr     	jmp tidyu0			; tidy up.
000219r 3               
000219r 3               ;--------------------------------------------------
000219r 3               ; Restart event.
000219r 3               ;--------------------------------------------------
000219r 3               
000219r 3               rsevt:
000219r 3  A9 rr        	lda #<ssprit 			; default to spare element in table.
00021Br 3  85 rr        	sta z80_x
00021Dr 3  A9 rr        	lda #>ssprit
00021Fr 3  85 rr        	sta z80_i
000221r 3               
000221r 3               evrs:
000221r 3  4C rr rr     	jmp evnt14	 		; call restart event.
000224r 3               
000224r 3               ;------------------------------------------------------------------
000224r 3               ; Copy number passed in a to string position bc, right-justified.
000224r 3               ;
000224r 3               ; Input:
000224r 3               ;  A  = number
000224r 3               ;  BC = string address
000224r 3               ;
000224r 3               ; Output:
000224r 3               ;  BC = string with number
000224r 3               ;-----------------------------------------------------------------
000224r 3               
000224r 3               num2ch:
000224r 3  85 rr        	sta z80_d		; Save number
000226r 3               
000226r 3  A9 00        	lda #0
000228r 3  85 rr        	sta flag
00022Ar 3               numdg3:
00022Ar 3  A2 64        	ldx #100		; hundreds column.
00022Cr 3  86 rr        	stx z80_e
00022Er 3  20 rr rr     	jsr numdg		; show digit.
000231r 3               numdg2:
000231r 3  A2 0A        	ldx #10			; tens column.
000233r 3  86 rr        	stx z80_e
000235r 3  20 rr rr     	jsr numdg		; show digit.
000238r 3               
000238r 3  E6 rr        	inc flag
00023Ar 3  A2 01        	ldx #1			; units column.
00023Cr 3  86 rr        	stx z80_e
00023Er 3               numdg:
00023Er 3  A9 30        	lda #48			; clear digit.
000240r 3  85 rr        	sta z80_a
000242r 3               numdg1:
000242r 3  A5 rr        	lda z80_d
000244r 3  C5 rr        	cmp z80_e
000246r 3  90 0E        	bcc numdg0		; nothing to show.
000248r 3  38           	sec
000249r 3  A5 rr        	lda z80_d
00024Br 3  E5 rr        	sbc z80_e		; subtract from column.
00024Dr 3  85 rr        	sta z80_d
00024Fr 3  E6 rr        	inc z80_a		; increment digit.
000251r 3  E6 rr        	inc flag
000253r 3  4C rr rr     	jmp numdg1		; repeat until column is zero.
000256r 3               numdg0:
000256r 3  A0 00        	ldy #0
000258r 3  A5 rr        	lda z80_a
00025Ar 3  91 rr        	sta (z80_bc),y		; write digit to buffer.
00025Cr 3  A5 rr        	lda flag
00025Er 3  F0 06        	beq :+
000260r 3  E6 rr        	inc z80_c		; next buffer position.
000262r 3  D0 02        	bne :+
000264r 3  E6 rr        	inc z80_b
000266r 3               :
000266r 3  60           	rts
000267r 3               num2dd:
000267r 3  85 rr        	sta z80_d		; Save number
000269r 3               
000269r 3  A9 01        	lda #1
00026Br 3  85 rr        	sta flag
00026Dr 3               
00026Dr 3  4C rr rr     	jmp numdg2
000270r 3               num2td:
000270r 3  85 rr        	sta z80_d		; Save number
000272r 3               
000272r 3  A9 01        	lda #1
000274r 3  85 rr        	sta flag
000276r 3  4C rr rr     	jmp numdg3
000279r 3               
000279r 3               ;---------------------------------------------------------
000279r 3               ; Reset score to "000000"
000279r 3               ;---------------------------------------------------------
000279r 3               
000279r 3               inisc:
000279r 3  A9 30        	lda #'0'
00027Br 3  A2 05        	ldx #5			; digits to initialise.
00027Dr 3               inisc0:
00027Dr 3  9D rr rr     	sta score,x 		; write zero digit.
000280r 3  CA           	dex			; next column.
000281r 3  10 FA        	bpl inisc0		; repeat for all digits.
000283r 3               
000283r 3  60           	rts
000284r 3               
000284r 3               ;-----------------------------------------------------
000284r 3               ; Multiply h by d and return in hl.
000284r 3               ;
000284r 3               ; Input:
000284r 3               ;  H = first number
000284r 3               ;  D = second number
000284r 3               ;
000284r 3               ; Output:
000284r 3               ;  HL = result H x D
000284r 3               ;-----------------------------------------------------
000284r 3               
000284r 3               imul:
000284r 3  A5 rr        	lda z80_d		; HL = H * D
000286r 3  85 rr        	sta z80_e
000288r 3  A5 rr        	lda z80_h
00028Ar 3  85 rr        	sta z80_c		; make c first multiplier.
00028Cr 3               imul0:
00028Cr 3  A9 00        	lda #0			; zeroise total.
00028Er 3  85 rr        	sta z80_l
000290r 3  85 rr        	sta z80_h
000292r 3               
000292r 3  A5 rr        	lda z80_h
000294r 3  85 rr        	sta z80_d		; zeroise high byte.
000296r 3               
000296r 3  A9 08        	lda #8			; repeat 8 times.
000298r 3  85 rr        	sta z80_b
00029Ar 3               imul1:
00029Ar 3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
00029Cr 3  90 0E        	bcc imul2		; wasn't set.
00029Er 3  18           	clc			; bit was set, so add de.
00029Fr 3  A5 rr        	lda z80_l
0002A1r 3  65 rr        	adc z80_e
0002A3r 3  85 rr        	sta z80_l
0002A5r 3  A5 rr        	lda z80_h
0002A7r 3  65 rr        	adc z80_d
0002A9r 3  85 rr        	sta z80_h
0002ABr 3  18           	clc 			; reset carry.
0002ACr 3               imul2:
0002ACr 3  06 rr        	asl z80_e 		; shift de 1 bit left.
0002AEr 3  26 rr        	rol z80_d
0002B0r 3  C6 rr        	dec z80_b
0002B2r 3  D0 E6        	bne imul1		; repeat 8 times.
0002B4r 3               
0002B4r 3  60           	rts
0002B5r 3               
0002B5r 3               ;-----------------------------------------------
0002B5r 3               ; Divide d by e and return in d, remainder in a.
0002B5r 3               ;
0002B5r 3               ; Input:
0002B5r 3               ;  D = first number
0002B5r 3               ;  E = second number
0002B5r 3               ;
0002B5r 3               ; Output:
0002B5r 3               ;  D = result D/E
0002B5r 3               ;  A = remainder
0002B5r 3               ;-----------------------------------------------
0002B5r 3               
0002B5r 3               idiv:
0002B5r 3  A9 00        	lda #0
0002B7r 3  A0 08        	ldy #8		 	; bits to shift.
0002B9r 3  06 rr        	asl z80_d
0002BBr 3               idiv0:
0002BBr 3  2A           	rol a 			; multiply d by 2.
0002BCr 3  C5 rr        	cmp z80_e 		; test if e is smaller.
0002BEr 3  90 02        	bcc idiv1		; e is greater, no division this time.
0002C0r 3  E5 rr        	sbc z80_e		; subtract it.
0002C2r 3               idiv1:
0002C2r 3  26 rr        	rol z80_d		; rotate into d.
0002C4r 3  88           	dey
0002C5r 3  D0 F4        	bne idiv0		; repeat
0002C7r 3  60           	rts
0002C8r 3               
0002C8r 3               ;---------------------------------------------------
0002C8r 3               ; Play AY sound effect
0002C8r 3               ;---------------------------------------------------
0002C8r 3               
0002C8r 3               plsnd:
0002C8r 3  60           	rts
0002C9r 3               
0002C9r 3               ;---------------------------------------------------
0002C9r 3               ; Objects handling.
0002C9r 3               ; 32 bytes for image
0002C9r 3               ; 1 for colour
0002C9r 3               ; 3 for room, y and x
0002C9r 3               ; 3 for starting room, y and x.
0002C9r 3               ; 254 = disabled.
0002C9r 3               ; 255 = object in player"s pockets.
0002C9r 3               ;---------------------------------------------------
0002C9r 3               
0002C9r 3               ;---------------------------------------------------
0002C9r 3               ; Show items present.
0002C9r 3               ;---------------------------------------------------
0002C9r 3               
0002C9r 3               .if oflag
0002C9r 3               shwob:
0002C9r 3  A9 rr        	lda #<objdta			; objects table.
0002CBr 3  85 rr        	sta z80_l
0002CDr 3  A9 rr        	lda #>objdta
0002CFr 3  85 rr        	sta z80_h
0002D1r 3  AD rr rr     	lda numob 			; number of objects in the game.
0002D4r 3  85 rr        	sta sprcnt
0002D6r 3               shwob0:
0002D6r 3  A0 21        	ldy #33 			; distance to room number.
0002D8r 3  B1 rr        	lda (z80_hl),y 			; same as an item?
0002DAr 3  C5 rr        	cmp scno 			; current location.
0002DCr 3  D0 03        	bne :+
0002DEr 3  20 rr rr     	jsr dobj 			; yes, display object.
0002E1r 3               :
0002E1r 3  18           	clc
0002E2r 3  A5 rr        	lda z80_l
0002E4r 3  69 27        	adc #39 			; distance to next item.
0002E6r 3  85 rr        	sta z80_l
0002E8r 3  A5 rr        	lda z80_h
0002EAr 3  69 00        	adc #0
0002ECr 3  85 rr        	sta z80_h	 		; point to it.
0002EEr 3  C6 rr        	dec sprcnt
0002F0r 3  D0 E4        	bne shwob0 			; repeat for others.
0002F2r 3  60           	rts
0002F3r 3               
0002F3r 3               ;---------------------------------------------------
0002F3r 3               ; Display object.
0002F3r 3               ; hl must point to object's start address.
0002F3r 3               ;
0002F3r 3               ; Input:
0002F3r 3               ;  HL = object address
0002F3r 3               ;---------------------------------------------------
0002F3r 3               
0002F3r 3               dobj:
0002F3r 3  A0 20        	ldy #32
0002F5r 3  B1 rr        	lda (z80_hl),y 			; point to y.
0002F7r 3  85 rr        	sta objcol
0002F9r 3  A0 22        	ldy #34
0002FBr 3  B1 rr        	lda (z80_hl),y 			; point to y.
0002FDr 3  85 rr        	sta dispy
0002FFr 3  C8           	iny
000300r 3  B1 rr        	lda (z80_hl),y 			; point to x.
000302r 3  85 rr        	sta dispx
000304r 3               dobj1:
000304r 3  4C rr rr     	jmp sprite 			; draw this sprite.
000307r 3               
000307r 3               ;--------------------------------------
000307r 3               ; Remove an object.
000307r 3               ;
000307r 3               ; Input:
000307r 3               ;  A = object number
000307r 3               ;--------------------------------------
000307r 3               
000307r 3               remob:
000307r 3  CD rr rr     	cmp numob			; number of objects in game.
00030Ar 3  90 01        	bcc :+				; are we checking past the end?
00030Cr 3  60           	rts				; yes, can't get non-existent item.
00030Dr 3               :
00030Dr 3  48           	pha				; remember object.
00030Er 3  20 rr rr     	jsr getob			; pick it up if we haven't already got it.
000311r 3  68           	pla				; retrieve object number.
000312r 3  20 rr rr     	jsr gotob			; get its address.
000315r 3  A9 FE        	lda #254
000317r 3  A0 21        	ldy #33
000319r 3  91 rr        	sta (z80_hl),y			; remove it.
00031Br 3  60           	rts
00031Cr 3               
00031Cr 3               ;---------------------------------------------------
00031Cr 3               ; Pick up object number held in the accumulator.
00031Cr 3               ;
00031Cr 3               ; Input:
00031Cr 3               ;  A = object number
00031Cr 3               ;---------------------------------------------------
00031Cr 3               
00031Cr 3               getob:
00031Cr 3  CD rr rr     	cmp numob 		; number of objects in game.
00031Fr 3  90 01        	bcc :+			; are we checking past the end?
000321r 3  60           	rts			; yes, can't get non-existent item.
000322r 3               :
000322r 3  20 rr rr     	jsr gotob 		; check if we already have it.
000325r 3  C9 FF        	cmp #255
000327r 3  D0 01        	bne :+
000329r 3  60           	rts			; we already do.
00032Ar 3               :
00032Ar 3  A0 21        	ldy #33
00032Cr 3  B1 rr        	lda (z80_hl),y		; is it on this screen?
00032Er 3  C5 rr        	cmp scno 		; current screen.
000330r 3  D0 14        	bne getob0		; not on screen, so nothing to delete.
000332r 3               
000332r 3  A9 FF        	lda #255
000334r 3  91 rr        	sta (z80_hl),y		; pick it up.
000336r 3  C8           	iny 			; point to y coord.
000337r 3               getob1:
000337r 3  A0 22        	ldy #34
000339r 3  B1 rr        	lda (z80_hl),y		; y coord.
00033Br 3  85 rr        	sta dispy
00033Dr 3  A0 23        	ldy #35
00033Fr 3  B1 rr        	lda (z80_hl),y 		; x coord.
000341r 3  85 rr        	sta dispx
000343r 3  4C rr rr     	jmp dobj1 		; delete object sprite.
000346r 3               getob0:
000346r 3  A9 FF        	lda #255
000348r 3  91 rr        	sta (z80_hl),y 		; pick it up.
00034Ar 3  60           	rts
00034Br 3               .endif
00034Br 3               
00034Br 3               ;-----------------------------------------------------------------
00034Br 3               ; Got object check.
00034Br 3               ; Call with object in accumulator, returns zero set if in pockets.
00034Br 3               ;
00034Br 3               ; Input:
00034Br 3               ;  A = object number
00034Br 3               ;-----------------------------------------------------------------
00034Br 3               .if oflag .or mflag
00034Br 3               gotob:
00034Br 3  CD rr rr     	cmp numob 		; number of objects in game.
00034Er 3  90 03        	bcc :+ 			; are we checking past the end?
000350r 3  4C rr rr     	jmp gotob0 		; yes, we can't have a non-existent object.
000353r 3               :
000353r 3  20 rr rr     	jsr findob		; find the object.
000356r 3               gotob1:
000356r 3  60           	rts
000357r 3               
000357r 3               gotob0:
000357r 3  A9 FE        	lda #254 		; missing.
000359r 3  4C rr rr     	jmp gotob1
00035Cr 3               
00035Cr 3               findob:
00035Cr 3  48           	pha			; save object number
00035Dr 3  A9 rr        	lda #<objdta 		; objects.
00035Fr 3  85 rr        	sta z80_l
000361r 3  A9 rr        	lda #>objdta
000363r 3  85 rr        	sta z80_h
000365r 3  68           	pla			; retreive object number
000366r 3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
000368r 3  AA           	tax 			; loop counter
000369r 3               fndob2:
000369r 3  18           	clc
00036Ar 3  A5 rr        	lda z80_l
00036Cr 3  69 27        	adc #39 		; size of each object.
00036Er 3  85 rr        	sta z80_l
000370r 3  90 02        	bcc :+
000372r 3  E6 rr        	inc z80_h
000374r 3               :
000374r 3  CA           	dex 			; repeat until we find address.
000375r 3  D0 F2        	bne fndob2
000377r 3               fndob1:
000377r 3  A0 21        	ldy #33			; distance to room it's in.
000379r 3  B1 rr        	lda (z80_hl),y		; fetch status.
00037Br 3  60           	rts
00037Cr 3               .endif
00037Cr 3               
00037Cr 3               ;---------------------------------------------
00037Cr 3               ; Drop object number at (dispx, dispy).
00037Cr 3               ;
00037Cr 3               ; Input:
00037Cr 3               ;  A = object number
00037Cr 3               ;---------------------------------------------
00037Cr 3               
00037Cr 3               .if oflag
00037Cr 3               drpob:
00037Cr 3  CD rr rr     	cmp numob 		; are we checking past the end?
00037Fr 3  90 01        	bcc :+
000381r 3  60           	rts			; yes, can't drop non-existent item.
000382r 3               :
000382r 3  20 rr rr     	jsr gotob		; make sure object is in inventory.
000385r 3  C5 rr        	cmp scno		; already on this screen?
000387r 3  D0 01        	bne :+
000389r 3  60           	rts			; yes, nothing to do.
00038Ar 3               :
00038Ar 3  A0 21        	ldy #33
00038Cr 3  A5 rr        	lda scno
00038Er 3  91 rr        	sta (z80_hl),y		; bring onto screen.
000390r 3  A5 rr        	lda dispy		; sprite y coordinate.
000392r 3  C8           	iny
000393r 3  91 rr        	sta (z80_hl),y		; point to object y.
000395r 3  A5 rr        	lda dispx 		; sprite x coordinate.
000397r 3  C8           	iny
000398r 3  91 rr        	sta (z80_hl),y 		; point to object x
00039Ar 3  4C rr rr     	jmp dobj		; draw the object sprite.
00039Dr 3               
00039Dr 3               ;-----------------------------------------------
00039Dr 3               ; Seek objects at sprite position.
00039Dr 3               ;
00039Dr 3               ; Output:
00039Dr 3               ;  A = object number, if not found A=255
00039Dr 3               ;-----------------------------------------------
00039Dr 3               
00039Dr 3               skobj:
00039Dr 3  A9 rr        	lda #<objdta 		; pointer to objects.
00039Fr 3  85 rr        	sta z80_l
0003A1r 3  A9 rr        	lda #>objdta
0003A3r 3  85 rr        	sta z80_h
0003A5r 3               
0003A5r 3  AD rr rr     	lda numob 		; number of objects in game.
0003A8r 3  85 rr        	sta z80_b 		; set up the loop counter.
0003AAr 3               skobj0:
0003AAr 3  A5 rr        	lda scno		; current room number.
0003ACr 3  A0 21        	ldy #33
0003AEr 3  D1 rr        	cmp (z80_hl),y		; is object in here?
0003B0r 3  D0 03        	bne :+
0003B2r 3  20 rr rr     	jsr skobj1		; yes, check coordinates.
0003B5r 3               :
0003B5r 3  18           	clc			; point to next object in table.
0003B6r 3  A5 rr        	lda z80_l
0003B8r 3  69 27        	adc #39			; size of each object.
0003BAr 3  85 rr        	sta z80_l
0003BCr 3  90 02        	bcc :+
0003BEr 3  E6 rr        	inc z80_h
0003C0r 3               :
0003C0r 3  C6 rr        	dec z80_b
0003C2r 3  D0 E6        	bne skobj0		; repeat for all objects.
0003C4r 3               
0003C4r 3  A9 FF        	lda #255		; end of list and nothing found, return 255.
0003C6r 3  60           	rts
0003C7r 3               
0003C7r 3               skobj1:
0003C7r 3  A0 22        	ldy #34			; point to y coordinate.
0003C9r 3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
0003CBr 3  38           	sec
0003CCr 3  A0 08        	ldy #var_newY
0003CEr 3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
0003D0r 3  18           	clc
0003D1r 3  69 0F        	adc #15			; add sprite height minus one.
0003D3r 3  C9 1F        	cmp #31			; within range?
0003D5r 3  B0 18        	bcs skobj2		; no, ignore object.
0003D7r 3               
0003D7r 3  A0 23        	ldy #35			; point to x coordinate now.
0003D9r 3  B1 rr        	lda (z80_hl),y 		; get coordinate.
0003DBr 3  38           	sec
0003DCr 3  A0 09        	ldy #var_newX
0003DEr 3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
0003E0r 3  18           	clc			; add sprite width minus one.
0003E1r 3  69 0F        	adc #15
0003E3r 3  C9 1F        	cmp #31			; within range?
0003E5r 3  B0 08        	bcs skobj2		; no, ignore object.
0003E7r 3               
0003E7r 3  68           	pla			; remove return address from stack.
0003E8r 3  68           	pla
0003E9r 3               
0003E9r 3  AD rr rr     	lda numob 		; objects in game.
0003ECr 3  38           	sec
0003EDr 3  E5 rr        	sbc z80_b		; subtract loop counter.
0003EFr 3               skobj2:
0003EFr 3  60           	rts			; accumulator now points to object.
0003F0r 3               .endif
0003F0r 3               
0003F0r 3               ;---------------------------------------------------------------------
0003F0r 3               ; Spawn a new sprite.
0003F0r 3               ;---------------------------------------------------------------------
0003F0r 3               
0003F0r 3               spawn:
0003F0r 3  A9 rr        	lda #<sprtab		; sprite table.
0003F2r 3  85 rr        	sta z80_l
0003F4r 3  A9 rr        	lda #>sprtab
0003F6r 3  85 rr        	sta z80_h
0003F8r 3               numsp1:
0003F8r 3  A9 0C        	lda #NUMSPR		; number of sprites.
0003FAr 3  85 rr        	sta spcnt
0003FCr 3               spaw0:
0003FCr 3  A0 00        	ldy #var_Type
0003FEr 3  B1 rr        	lda (z80_hl),y		; get sprite type.
000400r 3  C9 FF        	cmp #255		; is it an unused slot?
000402r 3  F0 0F        	beq spaw1 		; yes, we can use this one.
000404r 3               
000404r 3  18           	clc 			; point to next sprite in table.
000405r 3  A5 rr        	lda z80_l
000407r 3  69 11        	adc #TABSIZ		; size of each entry.
000409r 3  85 rr        	sta z80_l
00040Br 3  90 02        	bcc :+
00040Dr 3  E6 rr        	inc z80_h
00040Fr 3               :
00040Fr 3  C6 rr        	dec spcnt		; one less iteration.
000411r 3  D0 E9        	bne spaw0		; keep going until we find a slot.
000413r 3               
000413r 3               ; Didn't find one but drop through and set up a dummy sprite instead.
000413r 3               
000413r 3               spaw1:
000413r 3  A5 rr        	lda z80_i		; address of original sprite.
000415r 3  48           	pha
000416r 3  A5 rr        	lda z80_x
000418r 3  48           	pha
000419r 3               
000419r 3  A5 rr        	lda z80_l		; store spawned sprite address.
00041Br 3  85 rr        	sta spptr
00041Dr 3  A5 rr        	lda z80_h
00041Fr 3  85 rr        	sta spptr+1
000421r 3               
000421r 3  A5 rr        	lda z80_c
000423r 3  A0 00        	ldy #var_Type
000425r 3  91 rr        	sta (z80_hl),y 		; set the type.
000427r 3  A0 05        	ldy #var_newType
000429r 3  91 rr        	sta (z80_hl),y		; copy
00042Br 3               
00042Br 3  A5 rr        	lda z80_b
00042Dr 3  A0 01        	ldy #var_Image
00042Fr 3  91 rr        	sta (z80_hl),y		; set the image.
000431r 3  A0 06        	ldy #var_newImage
000433r 3  91 rr        	sta (z80_hl),y		; copy
000435r 3               
000435r 3  A9 00        	lda #0 				; frame zero.
000437r 3  A0 02        	ldy #var_Frame
000439r 3  91 rr        	sta (z80_hl),y		; set frame.
00043Br 3  A0 07        	ldy #var_newFrame
00043Dr 3  91 rr        	sta (z80_hl),y		; copy
00043Fr 3               
00043Fr 3  A0 08        	ldy #8
000441r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000443r 3  A0 03        	ldy #3
000445r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000447r 3  A0 08        	ldy #8
000449r 3  91 rr        	sta (z80_hl),y		; copy
00044Br 3               
00044Br 3  A0 09        	ldy #9
00044Dr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
00044Fr 3  A0 04        	ldy #4
000451r 3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
000453r 3  A0 09        	ldy #9
000455r 3  91 rr        	sta (z80_hl),y		; copy
000457r 3               
000457r 3  A0 0A        	ldy #10				; direction of original.
000459r 3  B1 rr        	lda (z80_ix),y
00045Br 3  91 rr        	sta (z80_hl),y		; direction
00045Dr 3               
00045Dr 3  A9 00        	lda #0
00045Fr 3  A0 0D        	ldy #var_jumpLo
000461r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000463r 3  C8           	iny
000464r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000466r 3  C8           	iny
000467r 3  91 rr        	sta (z80_hl),y		; reset parameter.
000469r 3  C8           	iny
00046Ar 3  91 rr        	sta (z80_hl),y		; reset parameter.
00046Cr 3               rtssp:
00046Cr 3  A5 rr        	lda spptr			; address of new sprite.
00046Er 3  85 rr        	sta z80_x
000470r 3  A5 rr        	lda spptr+1
000472r 3  85 rr        	sta z80_i
000474r 3               evis1:
000474r 3  20 rr rr     	jsr evnt09 			; call sprite initialisation event.
000477r 3               
000477r 3  A5 rr        	lda spptr 			; address of new sprite.
000479r 3  85 rr        	sta z80_x
00047Br 3  A5 rr        	lda spptr+1
00047Dr 3  85 rr        	sta z80_i
00047Fr 3               
00047Fr 3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
00047Fr 3  A0 03        	ldy #var_Y
000481r 3  B1 rr        	lda (z80_hl), y		; old x coord
000483r 3  C9 A1        	cmp #SpriteMaxY     ; beyond maximum?
000485r 3  B0 03        	bcs :+				; yes, don't draw it.
000487r 3               
000487r 3  20 rr rr     	jsr sspria 			; display the new sprite.
00048Ar 3               :
00048Ar 3  68           	pla					; address of original sprite.
00048Br 3  85 rr        	sta z80_x
00048Dr 3  68           	pla
00048Er 3  85 rr        	sta z80_i
000490r 3               
000490r 3  60           	rts
000491r 3               
000491r 3  30 30 30 30  score:	.byte "000000"		; player"s score.
000495r 3  30 30        
000497r 3  30 30 30 30  hiscor:	.byte "000000"		; high score.
00049Br 3  30 30        
00049Dr 3  30 30 30 30  bonus:	.byte "000000"		; bonus.
0004A1r 3  30 30        
0004A3r 3  00 02        grbase:	.word ScreenAddr	; graphics base address.
0004A5r 3               
0004A5r 3               ;----------------------------------------------------
0004A5r 3               ; Check y-pos
0004A5r 3               ;----------------------------------------------------
0004A5r 3               
0004A5r 3               checkx:
0004A5r 3  A5 rr        	lda dispy		; y position.
0004A7r 3  C9 16        	cmp #22			; off screen?
0004A9r 3  B0 01        	bcs :+
0004ABr 3  60           	rts			; no, it's okay.
0004ACr 3               :
0004ACr 3  68           	pla			; remove return address from stack.
0004ADr 3  85 rr        	sta z80_l
0004AFr 3  68           	pla
0004B0r 3  85 rr        	sta z80_h
0004B2r 3  60           	rts
0004B3r 3               
0004B3r 3               ;-----------------------------------------------
0004B3r 3               ; Displays the current high score.
0004B3r 3               ;-----------------------------------------------
0004B3r 3               
0004B3r 3               dhisc:
0004B3r 3  A9 rr        	lda #<hiscor 		; high score text.
0004B5r 3  8D rr rr     	sta dscor3+1
0004B8r 3  8D rr rr     	sta bscor3+1
0004BBr 3  A9 rr        	lda #>hiscor
0004BDr 3  8D rr rr     	sta dscor3+2
0004C0r 3  8D rr rr     	sta bscor3+2
0004C3r 3  4C rr rr     	jmp dscor1		; check in printable range then show 6 digits.
0004C6r 3               
0004C6r 3               ;------------------------------------------------------
0004C6r 3               ; Displays the current score.
0004C6r 3               ;------------------------------------------------------
0004C6r 3               
0004C6r 3               dscor:
0004C6r 3  A9 rr        	lda #<score		; score text.
0004C8r 3  8D rr rr     	sta dscor3+1
0004CBr 3  8D rr rr     	sta bscor3+1
0004CEr 3  A9 rr        	lda #>score
0004D0r 3  8D rr rr     	sta dscor3+2
0004D3r 3  8D rr rr     	sta bscor3+2
0004D6r 3               dscor1:
0004D6r 3  8C rr rr     	sty tmpscr
0004D9r 3  20 rr rr     	jsr preprt		; set up font and print position.
0004DCr 3  20 rr rr     	jsr checkx		; make sure we're in a printable range.
0004DFr 3               
0004DFr 3               ;	lda #6			; digits to display.
0004DFr 3               ;	sta z80_b
0004DFr 3  A5 rr        	lda prtmod		; get print mode.
0004E1r 3  F0 03        	beq :+			; standard size text?
0004E3r 3  4C rr rr     	jmp bscor0		; no, show double-height.
0004E6r 3               :
0004E6r 3               dscor0:
0004E6r 3               ;	ldy #0
0004E6r 3               ;	lda (z80_hl),y 		; fetch character.
0004E6r 3  AC rr rr     	ldy tmpscr
0004E9r 3               dscor3:
0004E9r 3  B9 rr rr     	lda score,y
0004ECr 3  20 rr rr     	jsr pchar 		; display character.
0004EFr 3  E6 rr        	inc dispx		; move along x coordinate
0004F1r 3               
0004F1r 3               ;	inc z80_l		; next score column.
0004F1r 3               ;	bne :+
0004F1r 3               ;	inc z80_h
0004F1r 3               ;:
0004F1r 3  EE rr rr     	inc tmpscr
0004F4r 3  C6 rr        	dec z80_b
0004F6r 3  D0 EE        	bne dscor0 		; repeat for all digits.
0004F8r 3               dscor2:
0004F8r 3  A5 rr        	lda dispx 		; set up display coordinates.
0004FAr 3  85 rr        	sta charx
0004FCr 3  A5 rr        	lda dispy
0004FEr 3  85 rr        	sta chary
000500r 3  60           	rts
000501r 3               
000501r 3  00           tmpscr:	.byte 0
000502r 3               ;------------------------------------------------------
000502r 3               ; Displays the current score in double-height characters.
000502r 3               ;
000502r 3               ; Input:
000502r 3               ;  B  = digit number
000502r 3               ;  HL = score string
000502r 3               ;------------------------------------------------------
000502r 3               
000502r 3               bscor0:
000502r 3               ;	ldy #0
000502r 3               
000502r 3               ;	lda (z80_hl),y 		; fetch character.
000502r 3  A4 rr        	ldy tmp
000504r 3               bscor3:
000504r 3  B9 rr rr     	lda score,y
000507r 3  20 rr rr     	jsr bchar 		; display big char.
00050Ar 3               
00050Ar 3               ;	inc z80_l 		; next score column.
00050Ar 3               ;	bne :+
00050Ar 3               ;	inc z80_h
00050Ar 3               ;:
00050Ar 3  E6 rr        	inc tmp
00050Cr 3  C6 rr        	dec z80_b
00050Er 3  F0 03        	beq :+
000510r 3  4C rr rr     	jmp bscor0 		; repeat for all digits.
000513r 3               :
000513r 3  4C rr rr     	jmp dscor2 		; tidy up line and column variables.
000516r 3               
000516r 3               ;-----------------------------------------------------
000516r 3               ; Adds number in the hl pair to the score.
000516r 3               ;-----------------------------------------------------
000516r 3               
000516r 3               addsc:
000516r 3  A9 rr        	lda #<(score+1) 	; ten thousands column.
000518r 3  85 rr        	sta z80_e
00051Ar 3  A9 rr        	lda #>(score+1)
00051Cr 3  85 rr        	sta z80_d
00051Er 3  A9 10        	lda #<10000		; amount to add each time.
000520r 3  85 rr        	sta z80_c
000522r 3  A9 27        	lda #>10000
000524r 3  85 rr        	sta z80_b
000526r 3  20 rr rr     	jsr incsc		; add to score.
000529r 3               
000529r 3  E6 rr        	inc z80_e		; thousands column.
00052Br 3  D0 02        	bne :+
00052Dr 3  E6 rr        	inc z80_d
00052Fr 3               :
00052Fr 3  A9 E8        	lda #<1000		; amount to add each time.
000531r 3  85 rr        	sta z80_c
000533r 3  A9 03        	lda #>1000
000535r 3  85 rr        	sta z80_b
000537r 3  20 rr rr     	jsr incsc 		; add to score.
00053Ar 3               
00053Ar 3  E6 rr        	inc z80_e		; hundreds column.
00053Cr 3  D0 02        	bne :+
00053Er 3  E6 rr        	inc z80_d
000540r 3               :
000540r 3  A9 64        	lda #<100		; amount to add each time.
000542r 3  85 rr        	sta z80_c
000544r 3  A9 00        	lda #>100
000546r 3  85 rr        	sta z80_b
000548r 3  20 rr rr     	jsr incsc		; add to score.
00054Br 3               
00054Br 3  E6 rr        	inc z80_e 		; tens column.
00054Dr 3  D0 02        	bne :+
00054Fr 3  E6 rr        	inc z80_d
000551r 3               :
000551r 3  A9 0A        	lda #<10		; amount to add each time.
000553r 3  85 rr        	sta z80_c
000555r 3  A9 00        	lda #>10
000557r 3  85 rr        	sta z80_b
000559r 3  20 rr rr     	jsr incsc 		; add to score.
00055Cr 3               
00055Cr 3  E6 rr        	inc z80_e		; units column.
00055Er 3  D0 02        	bne :+
000560r 3  E6 rr        	inc z80_d
000562r 3               :
000562r 3  A9 01        	lda #<1			; units.
000564r 3  85 rr        	sta z80_c
000566r 3  A9 00        	lda #>1
000568r 3  85 rr        	sta z80_b
00056Ar 3               incsc:
00056Ar 3  A5 rr        	lda z80_h		; store amount to add.
00056Cr 3  48           	pha
00056Dr 3  A5 rr        	lda z80_l
00056Fr 3  48           	pha
000570r 3               
000570r 3  38           	sec			; subtract from amount to add.
000571r 3  A5 rr        	lda z80_l
000573r 3  E5 rr        	sbc z80_c
000575r 3  85 rr        	sta z80_l
000577r 3  A5 rr        	lda z80_h
000579r 3  E5 rr        	sbc z80_b
00057Br 3  85 rr        	sta z80_h
00057Dr 3  90 14        	bcc incsc0		; too much, restore value.
00057Fr 3               
00057Fr 3  68           	pla			; delete the previous amount from the stack.
000580r 3  68           	pla
000581r 3               
000581r 3  A5 rr        	lda z80_d 		; store column position.
000583r 3  48           	pha
000584r 3  A5 rr        	lda z80_e
000586r 3  48           	pha
000587r 3  20 rr rr     	jsr incsc2		; do the increment.
00058Ar 3               
00058Ar 3  68           	pla			; restore column.
00058Br 3  85 rr        	sta z80_e
00058Dr 3  68           	pla
00058Er 3  85 rr        	sta z80_d
000590r 3  4C rr rr     	jmp incsc		; repeat until all added.
000593r 3               
000593r 3               incsc0:
000593r 3  68           	pla			; restore previous value.
000594r 3  85 rr        	sta z80_l
000596r 3  68           	pla
000597r 3  85 rr        	sta z80_h
000599r 3  60           	rts
00059Ar 3               incsc2:
00059Ar 3  A0 00        	ldy #0
00059Cr 3  B1 rr        	lda (z80_de),y 		; get amount.
00059Er 3  18           	clc
00059Fr 3  69 01        	adc #1			; add one to column.
0005A1r 3  91 rr        	sta (z80_de),y		; write new column total.
0005A3r 3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
0005A5r 3  B0 01        	bcs :+
0005A7r 3  60           	rts			; no, carry on.
0005A8r 3               :
0005A8r 3  A9 30        	lda #'0'		; make it zero.
0005AAr 3  91 rr        	sta (z80_de),y		; write new column total.
0005ACr 3  C6 rr        	dec z80_e		; back one column.
0005AEr 3  D0 02        	bne :+
0005B0r 3  C6 rr        	dec z80_d
0005B2r 3               :
0005B2r 3  4C rr rr     	jmp incsc2
0005B5r 3               
0005B5r 3               ;------------------------------------
0005B5r 3               ; Add bonus to score and reset bonus
0005B5r 3               ;------------------------------------
0005B5r 3               
0005B5r 3               addbo:
0005B5r 3  A2 05        	ldx #5			; last digit.
0005B7r 3  18           	clc
0005B8r 3               addbo0:
0005B8r 3  BD rr rr     	lda score,x		; get score.
0005BBr 3  7D rr rr     	adc bonus,x		; add bonus.
0005BEr 3  38           	sec			; 0 to 18.
0005BFr 3  E9 30        	sbc #48
0005C1r 3  48           	pha
0005C2r 3  A9 30        	lda #'0'
0005C4r 3  9D rr rr     	sta bonus,x
0005C7r 3  68           	pla
0005C8r 3  C9 3A        	cmp #58
0005CAr 3  90 03        	bcc addbo1
0005CCr 3  38           	sec
0005CDr 3  E9 0A        	sbc #10
0005CFr 3               addbo1:
0005CFr 3  9D rr rr     	sta score,x		; zeroise bonus.
0005D2r 3  CA           	dex			; next digit.
0005D3r 3  10 E3        	bpl addbo0		; repeat for all 6 digits.
0005D5r 3  60           	rts
0005D6r 3               
0005D6r 3               ;------------------------------------
0005D6r 3               ; Swap score and bonus.
0005D6r 3               ;------------------------------------
0005D6r 3               
0005D6r 3               swpsb:
0005D6r 3  A2 05        	ldx #5			; digits to add.
0005D8r 3               swpsb0:
0005D8r 3  BD rr rr     	lda score,x 		; get score digits.
0005DBr 3  48           	pha			; save digit
0005DCr 3  BD rr rr     	lda bonus,x 		; get bonus digits.
0005DFr 3  9D rr rr     	sta score,x		; switch score-bonus
0005E2r 3  68           	pla
0005E3r 3  9D rr rr     	sta bonus,x
0005E6r 3  CA           	dex 			; repeat for all 6 digits.
0005E7r 3  10 EF        	bpl swpsb0
0005E9r 3  60           	rts
0005EAr 3               
0005EAr 3               ;----------------------------------------------------
0005EAr 3               ; Get print address.
0005EAr 3               ;----------------------------------------------------
0005EAr 3               
0005EAr 3               gprad:
0005EAr 3  98           	tya
0005EBr 3  48           	pha
0005ECr 3               
0005ECr 3  A5 rr        	lda dispx 		; x coordinate.
0005EEr 3  85 rr        	sta scraddr
0005F0r 3  A9 00        	lda #0
0005F2r 3  85 rr        	sta scraddr+1
0005F4r 3  06 rr        	asl scraddr  		; multiply char by 16
0005F6r 3  26 rr        	rol scraddr+1
0005F8r 3  06 rr        	asl scraddr
0005FAr 3  26 rr        	rol scraddr+1
0005FCr 3  06 rr        	asl scraddr
0005FEr 3  26 rr        	rol scraddr+1
000600r 3  06 rr        	asl scraddr
000602r 3  26 rr        	rol scraddr+1
000604r 3               
000604r 3  A5 rr        	lda dispy		; y coordinate.
000606r 3  0A           	asl a
000607r 3  0A           	asl a
000608r 3  0A           	asl a			; multiply char by 8
000609r 3               ;	asl a
000609r 3  A8           	tay
00060Ar 3               
00060Ar 3  18           	clc
00060Br 3  A5 rr        	lda scraddr
00060Dr 3  79 00 07     	adc SCADTB_lb,y
000610r 3  85 rr        	sta scraddr
000612r 3  A5 rr        	lda scraddr+1
000614r 3  79 00 08     	adc SCADTB_hb,y
000617r 3  85 rr        	sta scraddr+1
000619r 3               
000619r 3               
000619r 3               
000619r 3  A5 rr        	lda prtmod		; Double line if bigtxt
00061Br 3  F0 08        	beq noskip
00061Dr 3  A5 rr        	lda dispx
00061Fr 3  29 E0        	and #$e0
000621r 3  F0 02        	beq noskip
000623r 3  E6 rr        	inc scraddr+1
000625r 3               noskip:
000625r 3               
000625r 3  68           	pla
000626r 3  A8           	tay
000627r 3  60           	rts
000628r 3               ;--------------------------------------------------------------
000628r 3               ; Get property buffer address of char at (dispx, dispy) in hl.
000628r 3               ;
000628r 3               ; Output:
000628r 3               ;  buffaddr = bufaddr = MAP + dispy*22 + dispx
000628r 3               ;--------------------------------------------------------------
000628r 3               
000628r 3               pradd:
000628r 3  A5 rr        	lda dispy 		; y coordinate.
00062Ar 3  85 rr        	sta bufaddr
00062Cr 3  A9 00        	lda #0
00062Er 3  85 rr        	sta bufaddr+1
000630r 3  06 rr        	asl bufaddr  		; multiply char by 32
000632r 3  26 rr        	rol bufaddr+1
000634r 3  06 rr        	asl bufaddr
000636r 3  26 rr        	rol bufaddr+1
000638r 3  06 rr        	asl bufaddr
00063Ar 3  26 rr        	rol bufaddr+1
00063Cr 3  06 rr        	asl bufaddr
00063Er 3  26 rr        	rol bufaddr+1
000640r 3  06 rr        	asl bufaddr
000642r 3  26 rr        	rol bufaddr+1
000644r 3  18           	clc			; add address of MAP graphics.
000645r 3  A5 rr        	lda bufaddr
000647r 3  65 rr        	adc dispx
000649r 3  69 00        	adc #<MAP
00064Br 3  85 rr        	sta bufaddr
00064Dr 3  A5 rr        	lda bufaddr+1
00064Fr 3  69 04        	adc #>MAP
000651r 3  85 rr        	sta bufaddr+1
000653r 3  60           	rts
000654r 3               
000654r 3               ;--------------------------------------------------------------
000654r 3               ; Get attribute address at (dispx, dispy).
000654r 3               ;
000654r 3               ; Output:
000654r 3               ;  bufaddr = COLOR + dispy*22 + dispx
000654r 3               ;--------------------------------------------------------------
000654r 3               
000654r 3               gaadd:
000654r 3  A5 rr        	lda dispy
000656r 3  4A           	lsr a
000657r 3  A8           	tay
000658r 3  B9 55 0A     	lda COLATTTB_hb,y
00065Br 3  85 rr        	sta bufaddr+1
00065Dr 3  B9 4A 0A     	lda COLATTTB_lb,y
000660r 3  18           	clc
000661r 3  65 rr        	adc dispx
000663r 3  85 rr        	sta bufaddr
000665r 3  60           	rts
000666r 3               
000666r 3               ;----------------------------------------------
000666r 3               ; Print attributes, properties and pixels.
000666r 3               ;
000666r 3               ; Input:
000666r 3               ;  A	= tile number
000666r 3               ;----------------------------------------------
000666r 3               
000666r 3               pbpattr:			; entry PUTBLOCK command
000666r 3  A4 rr        	ldy charx
000668r 3  84 rr        	sty dispx
00066Ar 3  A4 rr        	ldy chary
00066Cr 3  84 rr        	sty dispy
00066Er 3               pattr:
00066Er 3               .if aflag
00066Er 3               	pha
00066Er 3               	jsr wbloc		; save blockinfo
00066Er 3               	pla
00066Er 3               .endif
00066Er 3               
00066Er 3               pattr2:
00066Er 3  85 rr        	sta z80_b		; store cell in b register for now.
000670r 3  AA           	tax
000671r 3  BD rr rr     	lda bprop,x 		; block properties.
000674r 3  85 rr        	sta z80_c
000676r 3  C9 08        	cmp #COLECT
000678r 3  D0 04        	bne :+
00067Ar 3  A5 rr        	lda z80_b
00067Cr 3  85 rr        	sta colpatt
00067Er 3               :
00067Er 3  20 rr rr     	jsr pradd 		; get property buffer address.
000681r 3  A5 rr        	lda z80_c
000683r 3  A0 00        	ldy #0
000685r 3  91 rr        	sta (bufaddr),y 	; write property.
000687r 3  A5 rr        	lda z80_b 		; restore cell.
000689r 3  4C rr rr     	jmp panp
00068Cr 3               ; Print attributes, no properties.
00068Cr 3               
00068Cr 3               ;colpatt:	.byte 0
00068Cr 3               
00068Cr 3               panp:
00068Cr 3  85 rr        	sta z80_e		; displacement in e.
00068Er 3  A9 00        	lda #0
000690r 3  85 rr        	sta z80_d		; no high byte.
000692r 3  06 rr        	asl z80_e  		; multiply char by 8.
000694r 3  26 rr        	rol z80_d
000696r 3  06 rr        	asl z80_e
000698r 3  26 rr        	rol z80_d
00069Ar 3  06 rr        	asl z80_e
00069Cr 3  26 rr        	rol z80_d
00069Er 3  18           	clc
00069Fr 3  A5 rr        	lda z80_e
0006A1r 3  69 rr        	adc #<chgfx 		; address of graphics.
0006A3r 3  85 rr        	sta tileaddr
0006A5r 3  A5 rr        	lda z80_d
0006A7r 3  69 rr        	adc #>chgfx
0006A9r 3  85 rr        	sta tileaddr+1
0006ABr 3               
0006ABr 3  A6 rr        	ldx z80_b		; set colour attribute
0006ADr 3  BD rr rr     	lda bCol,x
0006B0r 3  48           	pha
0006B1r 3  20 rr rr     	jsr gaadd
0006B4r 3  A0 00        	ldy #0
0006B6r 3  68           	pla
0006B7r 3  91 rr        	sta (bufaddr),y
0006B9r 3               
0006B9r 3  20 rr rr     	jsr gprad 		; get screen address.
0006BCr 3  A2 07        	ldx #7			; number of pixel rows to write.
0006BEr 3               panp0:
0006BEr 3  A0 00        	ldy #0
0006C0r 3  B1 rr        	lda (tileaddr),y 	; get image byte.
0006C2r 3               .if iflag
0006C2r 3               	eor #$ff		; Invert
0006C2r 3               .endif
0006C2r 3  BC rr rr     	ldy scrtab,x
0006C5r 3  91 rr        	sta (scraddr),y 	; copy to screen.
0006C7r 3  E6 rr        	inc tileaddr 		; next image byte.
0006C9r 3  D0 02        	bne :+
0006CBr 3  E6 rr        	inc tileaddr+1
0006CDr 3               :
0006CDr 3  CA           	dex	 		; repeat for 8 pixel rows.
0006CEr 3  10 EE        	bpl panp0
0006D0r 3  E6 rr        	inc dispx 		; move along one.
0006D2r 3  E6 rr        	inc charx
0006D4r 3  60           	rts
0006D5r 3               
0006D5r 3               ;----------------------------------------------
0006D5r 3               ; Write block
0006D5r 3               ;----------------------------------------------
0006D5r 3               
0006D5r 3               .if aflag
0006D5r 3               wbloc:
0006D5r 3               	ldy #3
0006D5r 3               	sta (pbptr),y		; store block number
0006D5r 3               	dey
0006D5r 3               	lda dispx
0006D5r 3               	sta (pbptr),y		; write x position of block.
0006D5r 3               	dey
0006D5r 3               	lda dispy
0006D5r 3               	sta (pbptr),y		; write y position of block.
0006D5r 3               	dey
0006D5r 3               	lda scno
0006D5r 3               	sta (pbptr),y		; write screen.
0006D5r 3               	clc			; point to next free location
0006D5r 3               	lda pbptr
0006D5r 3               	adc #4
0006D5r 3               	sta pbptr
0006D5r 3               	bcc :+
0006D5r 3               	inc pbptr+1
0006D5r 3               :
0006D5r 3               	rts
0006D5r 3               .endif
0006D5r 3               
0006D5r 3               ;.if kflag
0006D5r 3               ;panp:
0006D5r 3               ;.endif
0006D5r 3               
0006D5r 3               ;----------------------------------------------
0006D5r 3               ; Print character pixels, no more.
0006D5r 3               ;
0006D5r 3               ; Input:
0006D5r 3               ;  A	= character to print
0006D5r 3               ;----------------------------------------------
0006D5r 3               
0006D5r 3               pchr:
0006D5r 3  20 rr rr     	jsr pchar 		; show character in accumulator.
0006D8r 3  E6 rr        	inc dispx		; move along one.
0006DAr 3  60           	rts
0006DBr 3               
0006DBr 3               ;----------------------------------------------------
0006DBr 3               ; Shifter sprite routine for objects.
0006DBr 3               ;----------------------------------------------------
0006DBr 3               
0006DBr 3               .if oflag
0006DBr 3               sprit7:
0006DBr 3  A5 rr        	lda z80_b
0006DDr 3  F0 0C        	beq sprit0
0006DFr 3  85 rr        	sta z80_a
0006E1r 3               sprit3:
0006E1r 3  46 rr        	lsr spr			; shift into position.
0006E3r 3  66 rr        	ror spr+1
0006E5r 3  66 rr        	ror spr+2
0006E7r 3  C6 rr        	dec z80_a		; one less iteration.
0006E9r 3  D0 F6        	bne sprit3
0006EBr 3               sprit0:
0006EBr 3  60           	rts 			; now apply to screen.
0006ECr 3               .endif
0006ECr 3               
0006ECr 3               ;-----------------------------------------------------------
0006ECr 3               ; Get room address.
0006ECr 3               ;-----------------------------------------------------------
0006ECr 3               
0006ECr 3               groom:
0006ECr 3  A6 rr        	ldx scno 		; screen number.
0006EEr 3  A0 00        	ldy #0
0006F0r 3               groomx:
0006F0r 3  A9 rr        	lda #<scdat 		; pointer to screens.
0006F2r 3  85 rr        	sta z80_l
0006F4r 3  A9 rr        	lda #>scdat
0006F6r 3  85 rr        	sta z80_h
0006F8r 3               groom1:
0006F8r 3  E0 00        	cpx #0			; is it the first one?
0006FAr 3  F0 15        	beq groom0 		; no more screens to skip.
0006FCr 3               
0006FCr 3  18           	clc
0006FDr 3  A5 rr        	lda z80_l
0006FFr 3  79 rr rr     	adc scdat,y 		; low byte of screen size.
000702r 3  85 rr        	sta z80_l
000704r 3  C8           	iny			; point to high byte.
000705r 3  A5 rr        	lda z80_h
000707r 3  79 rr rr     	adc scdat,y 		; high byte of screen size.
00070Ar 3  85 rr        	sta z80_h
00070Cr 3  C8           	iny			; next address.
00070Dr 3               
00070Dr 3  CA           	dex 			; one less iteration.
00070Er 3  4C rr rr     	jmp groom1 		; loop until we reach the end.
000711r 3               groom0:
000711r 3  AD rr rr     	lda numsc		; add displacement.
000714r 3  0A           	asl a
000715r 3  18           	clc			; add double displacement to address.
000716r 3  65 rr        	adc z80_l
000718r 3  85 rr        	sta z80_l
00071Ar 3  A5 rr        	lda z80_h
00071Cr 3  69 00        	adc #0
00071Er 3  85 rr        	sta z80_h
000720r 3  60           	rts
000721r 3               
000721r 3               ;-----------------------------------------------------------
000721r 3               ; Draw present room.
000721r 3               ;-----------------------------------------------------------
000721r 3               
000721r 3               droom:
000721r 3  AD rr rr     	lda wintop 		; window top.
000724r 3  85 rr        	sta dispy		; set cursor y position.
000726r 3               droom2:
000726r 3  20 rr rr     	jsr groom 		; get address of current room.
000729r 3  A9 00        	lda #0	 		; zero in accumulator.
00072Br 3  85 rr        	sta comcnt 		; reset compression counter.
00072Dr 3  AD rr rr     	lda winhgt 		; height of window.
000730r 3  85 rr        	sta rrow		; set row counter
000732r 3               droom0:
000732r 3  AD rr rr     	lda winlft 		; window left edge.
000735r 3  85 rr        	sta dispx 		; set cursor x position.
000737r 3  AD rr rr     	lda winwid 		; width of window.
00073Ar 3  85 rr        	sta rcol		; set column counter
00073Cr 3               droom1:
00073Cr 3  20 rr rr     	jsr flbyt 		; decompress next byte on the fly.
00073Fr 3               .if xflag
00073Fr 3               	jsr drwmeta
00073Fr 3               .else
00073Fr 3  20 rr rr     	jsr pattr2 		; show attributes and block.
000742r 3               .endif
000742r 3  C6 rr        	dec rcol		; one less column.
000744r 3  D0 F6        	bne droom1 		; repeat for entire line.
000746r 3  E6 rr        	inc dispy		; move down one line.
000748r 3               .if xflag
000748r 3               	inc dispy		; move down one line.
000748r 3               .endif
000748r 3  C6 rr        	dec rrow 		; one less row.
00074Ar 3  D0 E6        	bne droom0 		; repeat for all rows.
00074Cr 3  60           	rts
00074Dr 3               
00074Dr 3               ;----------------------------------------------
00074Dr 3               ; Decompress bytes on-the-fly.
00074Dr 3               ;----------------------------------------------
00074Dr 3               
00074Dr 3               flbyt:
00074Dr 3  A5 rr        	lda comcnt 		; compression counter.
00074Fr 3  D0 21        	bne flbyt1		; any more to decompress?  yes.
000751r 3               
000751r 3  A0 00        	ldy #0
000753r 3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
000755r 3  E6 rr        	inc z80_l 		; point to next cell.
000757r 3  D0 02        	bne :+
000759r 3  E6 rr        	inc z80_h
00075Br 3               :
00075Br 3  C9 FF        	cmp #255 		; is this byte a control code?
00075Dr 3  F0 01        	beq :+
00075Fr 3  60           	rts 			; no, this byte is uncompressed.
000760r 3               :
000760r 3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
000762r 3  85 rr        	sta combyt 		; set up the type.
000764r 3  E6 rr        	inc z80_l 		; point to quantity.
000766r 3  D0 02        	bne :+
000768r 3  E6 rr        	inc z80_h
00076Ar 3               :
00076Ar 3  B1 rr        	lda (z80_hl),y 		; get quantity.
00076Cr 3  E6 rr        	inc z80_l 		; point to next byte.
00076Er 3  D0 02        	bne :+
000770r 3  E6 rr        	inc z80_h
000772r 3               :
000772r 3               flbyt1:
000772r 3  85 rr        	sta comcnt 		; store new quantity.
000774r 3  C6 rr        	dec comcnt		; one less.
000776r 3  A5 rr        	lda combyt 		; byte to expand.
000778r 3  60           	rts
000779r 3               
000779r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000779r 3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
000779r 3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
000779r 3               ; ------------------------------------------------------------------------------------------------------------------------------------------
000779r 3               .if xflag
000779r 3               drwmeta:
000779r 3               	sta tmpblk
000779r 3               	jsr pattr2
000779r 3               
000779r 3               	inc dispy
000779r 3               	dec dispx
000779r 3               	ldx tmpblk
000779r 3               	beq :+
000779r 3               	inx
000779r 3               :
000779r 3               	txa
000779r 3               	jsr pattr2
000779r 3               
000779r 3               	ldx tmpblk
000779r 3               	beq :+
000779r 3               	inx
000779r 3               	inx
000779r 3               	inx
000779r 3               :
000779r 3               	txa
000779r 3               	jsr pattr2
000779r 3               
000779r 3               	dec dispy
000779r 3               	dec dispx
000779r 3               	ldx tmpblk
000779r 3               	beq :+
000779r 3               	inx
000779r 3               	inx
000779r 3               :
000779r 3               	txa
000779r 3               	jsr pattr2
000779r 3               	rts
000779r 3               
000779r 3               tmpblk:	.byte 0
000779r 3               
000779r 3               .endif
000779r 3               
000779r 3               ;------------------------------------------
000779r 3               ; Ladder down check.
000779r 3               ;
000779r 3               ; Input:
000779r 3               ;  IX = sprite pointer
000779r 3               ;------------------------------------------
000779r 3               
000779r 3               .if lflag
000779r 3               laddd:
000779r 3  A0 09        	ldy #9
00077Br 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00077Dr 3  85 rr        	sta dispx
00077Fr 3               
00077Fr 3  A0 08        	ldy #8
000781r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000783r 3  29 FE        	and #254		; make it even.
000785r 3  91 rr        	sta (z80_ix),y 		; reset it.
000787r 3  18           	clc 			; look down 16 pixels.
000788r 3               numsp5:
000788r 3  69 10        	adc #SPR_HGT
00078Ar 3  85 rr        	sta dispy		; coords in dispx,dispy.
00078Cr 3  4C rr rr     	jmp laddv
00078Fr 3               
00078Fr 3               ;------------------------------------------
00078Fr 3               ; Ladder up check.
00078Fr 3               ;
00078Fr 3               ; Input:
00078Fr 3               ;  IX = sprite pointer
00078Fr 3               ;
00078Fr 3               ; Output:
00078Fr 3               ;  A  = 0 is ok, A <>0 is not ok
00078Fr 3               ;------------------------------------------
00078Fr 3               
00078Fr 3               laddu:
00078Fr 3  A0 09        	ldy #9
000791r 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000793r 3  85 rr        	sta dispx
000795r 3               
000795r 3  A0 08        	ldy #8
000797r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000799r 3  29 FE        	and #254 		; make it even.
00079Br 3  91 rr        	sta (z80_ix),y		; reset it.
00079Dr 3  18           	clc 			; look 2 pixels above feet.
00079Er 3               numsp6:
00079Er 3  69 0E        	adc #SPR_HGT-2
0007A0r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0007A2r 3               laddv:
0007A2r 3  20 rr rr     	jsr tstbl 		; get map address.
0007A5r 3  20 rr rr     	jsr ldchk 		; standard ladder check.
0007A8r 3  F0 01        	beq :+
0007AAr 3  60           	rts 			; no way through.
0007ABr 3               :
0007ABr 3  E6 rr        	inc bufaddr 		; look right one cell.
0007ADr 3  D0 02        	bne :+
0007AFr 3  E6 rr        	inc bufaddr+1
0007B1r 3               :
0007B1r 3  20 rr rr     	jsr ldchk 		; do the check.
0007B4r 3  F0 01        	beq :+
0007B6r 3  60           	rts 			; impassable.
0007B7r 3               :
0007B7r 3  A5 rr        	lda dispx 		; y coordinate.
0007B9r 3  29 07        	and #7 			; position straddling block cells.
0007BBr 3  D0 01        	bne :+
0007BDr 3  60           	rts 			; no more checks needed.
0007BEr 3               :
0007BEr 3  E6 rr        	inc bufaddr 		; look to third cell.
0007C0r 3  D0 02        	bne :+
0007C2r 3  E6 rr        	inc bufaddr+1
0007C4r 3               :
0007C4r 3  20 rr rr     	jsr ldchk 		; do the check.
0007C7r 3  60           	rts  			; return with zero flag set accordingly.
0007C8r 3               .endif
0007C8r 3               
0007C8r 3               ;---------------------------------------------------------
0007C8r 3               ; Can go up check.
0007C8r 3               ;
0007C8r 3               ; Input:
0007C8r 3               ;  IX = sprite pointer
0007C8r 3               ;
0007C8r 3               ; Output:
0007C8r 3               ;  A  = 0 is ok, A <>0 is not ok
0007C8r 3               ;---------------------------------------------------------
0007C8r 3               
0007C8r 3               cangu:
0007C8r 3  A0 09        	ldy #9
0007CAr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
0007CCr 3  85 rr        	sta dispx
0007CEr 3  A0 08        	ldy #8
0007D0r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0007D2r 3  38           	sec
0007D3r 3  E9 02        	sbc #2
0007D5r 3  85 rr        	sta dispy		; coords in dispx,dispy.
0007D7r 3  20 rr rr     	jsr tstbl 		; get map address.
0007DAr 3  20 rr rr     	jsr lrchk 		; standard left/right check.
0007DDr 3  F0 01        	beq :+
0007DFr 3  60           	rts			; no way through.
0007E0r 3               :
0007E0r 3  E6 rr        	inc bufaddr		; look right one cell.
0007E2r 3  D0 02        	bne :+
0007E4r 3  E6 rr        	inc bufaddr+1
0007E6r 3               :
0007E6r 3  20 rr rr     	jsr lrchk 		; do the check.
0007E9r 3  F0 01        	beq :+
0007EBr 3  60           	rts			; impassable.
0007ECr 3               :
0007ECr 3  A5 rr        	lda dispx		; x coordinate.
0007EEr 3  29 07        	and #7			; position straddling block cells.
0007F0r 3  D0 01        	bne :+
0007F2r 3  60           	rts			; no more checks needed.
0007F3r 3               :
0007F3r 3  E6 rr        	inc bufaddr		; look to third cell.
0007F5r 3  D0 02        	bne :+
0007F7r 3  E6 rr        	inc bufaddr+1
0007F9r 3               :
0007F9r 3  20 rr rr     	jsr lrchk		; do the check.
0007FCr 3  60           	rts 			; return with zero flag set accordingly.
0007FDr 3               
0007FDr 3               ;---------------------------------------------------------
0007FDr 3               ; Can go down check.
0007FDr 3               ;
0007FDr 3               ; Input:
0007FDr 3               ;  IX = sprite pointer
0007FDr 3               ;
0007FDr 3               ; Output:
0007FDr 3               ;  A  = 0 is ok, A <>0 is not ok
0007FDr 3               ;---------------------------------------------------------
0007FDr 3               
0007FDr 3               cangd:
0007FDr 3  A0 09        	ldy #9
0007FFr 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
000801r 3  85 rr        	sta dispx
000803r 3  A0 08        	ldy #8
000805r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000807r 3  18           	clc
000808r 3               numsp3:
000808r 3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
00080Ar 3  85 rr        	sta dispy		; coords in dispx,dispy.
00080Cr 3  20 rr rr     	jsr tstbl 		; get map address.
00080Fr 3  20 rr rr     	jsr plchk 		; block, platform check.
000812r 3  F0 01        	beq :+
000814r 3  60           	rts			; no way through.
000815r 3               :
000815r 3  E6 rr        	inc bufaddr		; look right one cell.
000817r 3  D0 02        	bne :+
000819r 3  E6 rr        	inc bufaddr+1
00081Br 3               :
00081Br 3  20 rr rr     	jsr plchk		; block, platform check.
00081Er 3  F0 01        	beq :+
000820r 3  60           	rts			; impassable.
000821r 3               :
000821r 3  A5 rr        	lda dispx		; x coordinate.
000823r 3  29 07        	and #7			; position straddling block cells.
000825r 3  D0 01        	bne :+
000827r 3  60           	rts			; no more checks needed.
000828r 3               :
000828r 3  E6 rr        	inc bufaddr		; look to third cell.
00082Ar 3  D0 02        	bne :+
00082Cr 3  E6 rr        	inc bufaddr+1
00082Er 3               :
00082Er 3  20 rr rr     	jsr plchk		; block, platform check.
000831r 3  60           	rts			; return with zero flag set accordingly.
000832r 3               
000832r 3               ;---------------------------------------------------------
000832r 3               ; Can go left check.
000832r 3               ;
000832r 3               ; Input:
000832r 3               ;  IX = sprite pointer
000832r 3               ;
000832r 3               ; Output:
000832r 3               ;  A  = 0 is ok, A <>0 is not ok
000832r 3               ;---------------------------------------------------------
000832r 3               
000832r 3               cangl:
000832r 3  A0 08        	ldy #8
000834r 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
000836r 3  85 rr        	sta dispy
000838r 3  A0 09        	ldy #9
00083Ar 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
00083Cr 3  38           	sec
00083Dr 3  E9 02        	sbc #2			; look left 2 pixels.
00083Fr 3  85 rr        	sta dispx		; coords in dispx,dispy.
000841r 3  4C rr rr     	jmp cangh		; test if we can go there.
000844r 3               
000844r 3               ;---------------------------------------------------------
000844r 3               ; Can go right check.
000844r 3               ;
000844r 3               ; Input:
000844r 3               ;  IX = sprite pointer
000844r 3               ;
000844r 3               ; Output:
000844r 3               ;  A  = 0 is ok, A <>0 is not ok
000844r 3               ;---------------------------------------------------------
000844r 3               
000844r 3               cangr:
000844r 3  A0 08        	ldy #8
000846r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000848r 3  85 rr        	sta dispy
00084Ar 3  A0 09        	ldy #9
00084Cr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
00084Er 3  18           	clc
00084Fr 3  69 10        	adc #16			; look right 16 pixels.
000851r 3  85 rr        	sta dispx		; coords in dispx,dispy.
000853r 3               cangh:
000853r 3               cangh2:
000853r 3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
000855r 3  85 rr        	sta z80_b
000857r 3  A5 rr        	lda dispy		; y position.
000859r 3  29 07        	and #7			; does x straddle cells?
00085Br 3  D0 02        	bne cangh0		; yes, loop counter is good.
00085Dr 3  C6 rr        	dec z80_b		; one less row to write.
00085Fr 3               cangh0:
00085Fr 3  20 rr rr     	jsr tstbl		; get map address.
000862r 3               cangh1:
000862r 3  20 rr rr     	jsr lrchk		; standard left/right check.
000865r 3  F0 01        	beq :+
000867r 3  60           	rts			; no way through.
000868r 3               :
000868r 3  48           	pha
000869r 3  18           	clc
00086Ar 3  A5 rr        	lda bufaddr
00086Cr 3  69 20        	adc #32		; look down.
00086Er 3  85 rr        	sta bufaddr
000870r 3  90 02        	bcc :+
000872r 3  E6 rr        	inc bufaddr+1
000874r 3               :
000874r 3  68           	pla
000875r 3               
000875r 3  C6 rr        	dec z80_b
000877r 3  D0 E9        	bne cangh1
000879r 3  60           	rts
00087Ar 3               
00087Ar 3               ;-------------------------------------
00087Ar 3               ; Check left/right movement is okay.
00087Ar 3               ;
00087Ar 3               ; Input:
00087Ar 3               ;  bufaddr = MAP + x/8 + y/8*32
00087Ar 3               ;
00087Ar 3               ; Output:
00087Ar 3               ;  A  = 0 is ok, A <>0 is not ok
00087Ar 3               ;-------------------------------------
00087Ar 3               
00087Ar 3               lrchk:
00087Ar 3  A0 00        	ldy #0
00087Cr 3  B1 rr        	lda (bufaddr),y		; fetch map cell.
00087Er 3  C9 02        	cmp #WALL 		; is it passable?
000880r 3  F0 0A        	beq lrchkx		; no.
000882r 3               
000882r 3  C9 04        	cmp #FODDER		; fodder has to be dug.
000884r 3  F0 06        	beq lrchkx		; not passable.
000886r 3  A9 00        	lda #0
000888r 3  60           	rts
000889r 3               
000889r 3               ;--------------------------------------------------------------
000889r 3               ; Called by mmenu
000889r 3               ;--------------------------------------------------------------
000889r 3               
000889r 3               always:
000889r 3  A9 FF        	lda #255		; report it as okay.
00088Br 3  60           	rts
00088Cr 3               
00088Cr 3               lrchkx:
00088Cr 3  A9 01        	lda #1 			; reset all bits.
00088Er 3  60           	rts
00088Fr 3               
00088Fr 3               
00088Fr 3               ;--------------------------------------------------------------
00088Fr 3               ; Check platform or solid item is not in way.
00088Fr 3               ;
00088Fr 3               ; Input:
00088Fr 3               ;  bufaddr = MAP + x/8 + y/8*32
00088Fr 3               ;
00088Fr 3               ; Output:
00088Fr 3               ;  A  = 0 is ok, A <>0 is not ok
00088Fr 3               ;--------------------------------------------------------------
00088Fr 3               
00088Fr 3               plchk:
00088Fr 3  A0 00        	ldy #0
000891r 3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
000893r 3  C9 02        	cmp #WALL 		; is it passable?
000895r 3  F0 F5        	beq lrchkx		; no.
000897r 3               .if pflag .or dflag
000897r 3               	cmp #FODDER		; fodder has to be dug.
000897r 3               	beq lrchkx		; not passable.
000897r 3               .endif
000897r 3  C9 01        	cmp #PLATFM		; platform is solid.
000899r 3  F0 07        	beq plchkx		; not passable.
00089Br 3               .if lflag
00089Br 3  C9 03        	cmp #LADDER		; is it a ladder?
00089Dr 3  F0 ED        	beq lrchkx		; on ladder, deny movement.
00089Fr 3               .endif
00089Fr 3               plchk0:
00089Fr 3  A9 00        	lda #0			; report as ok
0008A1r 3  60           	rts
0008A2r 3               plchkx:
0008A2r 3  A5 rr        	lda dispy		; x coordinate.
0008A4r 3  29 07        	and #7			; position straddling blocks.
0008A6r 3  F0 E4        	beq lrchkx		; on platform, deny movement.
0008A8r 3  4C rr rr     	jmp plchk0
0008ABr 3               
0008ABr 3               ;--------------------------------------------------------------
0008ABr 3               ; Check ladder is available.
0008ABr 3               ;
0008ABr 3               ; Input:
0008ABr 3               ;  bufaddr = MAP + x/8 + y/8*32
0008ABr 3               ;
0008ABr 3               ; Output:
0008ABr 3               ;  A  = 0 is ok, A <>0 is not ok
0008ABr 3               ;--------------------------------------------------------------
0008ABr 3               
0008ABr 3               .if lflag
0008ABr 3               ldchk:
0008ABr 3  A0 00        	ldy #0
0008ADr 3  B1 rr        	lda (bufaddr),y 	; fetch cell.
0008AFr 3  C9 03        	cmp #LADDER 		; is it a ladder?
0008B1r 3  F0 03        	beq ldchk1
0008B3r 3  A9 01        	lda #1
0008B5r 3  60           	rts  			; return with zero flag set accordingly.
0008B6r 3               ldchk1:
0008B6r 3  A9 00        	lda #0
0008B8r 3  60           	rts
0008B9r 3               .endif
0008B9r 3               
0008B9r 3               ;--------------------------------------------------------------
0008B9r 3               ; Get collectables.
0008B9r 3               ;--------------------------------------------------------------
0008B9r 3               
0008B9r 3               .if cflag
0008B9r 3               getcol:
0008B9r 3                       lda #COLECT             ; collectable blocks.
0008B9r 3                       sta z80_b
0008B9r 3                       jsr tded                ; test for collectable blocks.
0008B9r 3                       cmp z80_b               ; did we find one?
0008B9r 3                       beq :+
0008B9r 3                       rts                     ; none were found, job done.
0008B9r 3               :
0008B9r 3                       jsr gtblk               ; get block.
0008B9r 3                       jsr evnt20              ; collected block event.
0008B9r 3                       jmp getcol              ; repeat until none left.
0008B9r 3               
0008B9r 3               ; Get collectable block.
0008B9r 3               
0008B9r 3               gtblk:
0008B9r 3               	ldy #0
0008B9r 3               	lda (bufaddr),y
0008B9r 3               	sta z80_a
0008B9r 3                       lda #0
0008B9r 3                       sta (bufaddr),y		; make it empty now.
0008B9r 3               
0008B9r 3               	lda bufaddr		; set dispx
0008B9r 3               	and #31
0008B9r 3               	sta dispx
0008B9r 3               
0008B9r 3               	lda bufaddr+1		; Set dispy
0008B9r 3               	sec
0008B9r 3               	sbc #>MAP
0008B9r 3               	sta bufaddr+1
0008B9r 3               	asl bufaddr
0008B9r 3               	rol bufaddr+1
0008B9r 3               	asl bufaddr
0008B9r 3               	rol bufaddr+1
0008B9r 3               	asl bufaddr
0008B9r 3               	rol bufaddr+1
0008B9r 3               	lda bufaddr+1
0008B9r 3               	sta dispy
0008B9r 3               
0008B9r 3               	lda colpatt		; get blocknr
0008B9r 3               	sta z80_e		; displacement in e.
0008B9r 3               	lda #0
0008B9r 3               	sta z80_d		; no high byte.
0008B9r 3               	asl z80_e  		; multiply char by 8.
0008B9r 3               	rol z80_d
0008B9r 3               	asl z80_e
0008B9r 3               	rol z80_d
0008B9r 3               	asl z80_e
0008B9r 3               	rol z80_d
0008B9r 3               	clc
0008B9r 3               	lda z80_e
0008B9r 3               	adc #<chgfx 		; address of graphics.
0008B9r 3               	sta tileaddr
0008B9r 3               	lda z80_d
0008B9r 3               	adc #>chgfx
0008B9r 3               	sta tileaddr+1
0008B9r 3               	jsr gprad 		; get screen address.
0008B9r 3               	ldx #7			; number of pixel rows to write.
0008B9r 3               gtblk0:
0008B9r 3               	ldy #0
0008B9r 3               	lda (tileaddr),y 	; get image byte.
0008B9r 3               	ldy scrtab,x
0008B9r 3               	eor (scraddr),y 	; XOR tile on screen
0008B9r 3               	sta (scraddr),y 	; copy to screen.
0008B9r 3               	inc tileaddr 		; next image byte.
0008B9r 3               	bne :+
0008B9r 3               	inc tileaddr+1
0008B9r 3               :
0008B9r 3               	dex	 		; repeat for 8 pixel rows.
0008B9r 3               	bpl gtblk0
0008B9r 3               	rts
0008B9r 3               .endif
0008B9r 3               
0008B9r 3               ;--------------------------------------------------------------
0008B9r 3               ; Touched deadly block check.
0008B9r 3               ; returns with DEADLY (must be non-zero) in accumulator if true.
0008B9r 3               ;
0008B9r 3               ; Input:
0008B9r 3               ;  IX = sprite address
0008B9r 3               ;
0008B9r 3               ; Output:
0008B9r 3               ;  A  = 0 is ok, A=5 is not ok
0008B9r 3               ;--------------------------------------------------------------
0008B9r 3               
0008B9r 3               tded:
0008B9r 3  A0 08        	ldy #8
0008BBr 3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0008BDr 3  85 rr        	sta dispy
0008BFr 3  C8           	iny
0008C0r 3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0008C2r 3  85 rr        	sta dispx		; coords in dispx,dispy.
0008C4r 3  20 rr rr     	jsr tstbl		; get map address.
0008C7r 3  48           	pha
0008C8r 3  A9 1F        	lda #31			; default distance to next line down.
0008CAr 3  85 rr        	sta z80_e
0008CCr 3  68           	pla
0008CDr 3  C5 rr        	cmp z80_b		; is this the required block?
0008CFr 3  D0 01        	bne :+
0008D1r 3  60           	rts			; yes.
0008D2r 3               :
0008D2r 3  E6 rr        	inc bufaddr 		; next cell.
0008D4r 3  D0 02        	bne :+
0008D6r 3  E6 rr        	inc bufaddr+1
0008D8r 3               :
0008D8r 3  A0 00        	ldy #0
0008DAr 3  B1 rr        	lda (bufaddr),y		; fetch type.
0008DCr 3  C5 rr        	cmp z80_b 		; is this deadly/custom?
0008DEr 3  D0 01        	bne :+
0008E0r 3  60           	rts			; yes.
0008E1r 3               :
0008E1r 3  A5 rr        	lda dispx		; horizontal position.
0008E3r 3  85 rr        	sta z80_c 		; store column in c register.
0008E5r 3  29 07        	and #7			; is it straddling cells?
0008E7r 3  D0 03        	bne :+
0008E9r 3  4C rr rr     	jmp tded0		; no.
0008ECr 3               :
0008ECr 3  E6 rr        	inc bufaddr 		; last cell.
0008EEr 3  D0 02        	bne :+
0008F0r 3  E6 rr        	inc bufaddr+1
0008F2r 3               :
0008F2r 3  A0 00        	ldy #0
0008F4r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
0008F6r 3  C5 rr        	cmp z80_b		; is this the block?
0008F8r 3  D0 01        	bne :+
0008FAr 3  60           	rts			; yes.
0008FBr 3               :
0008FBr 3  C6 rr        	dec z80_e		; one less cell to next row down.
0008FDr 3               tded0:
0008FDr 3  18           	clc 			; point to next row.
0008FEr 3  A5 rr        	lda bufaddr
000900r 3  65 rr        	adc z80_e
000902r 3  85 rr        	sta bufaddr
000904r 3  90 02        	bcc :+
000906r 3  E6 rr        	inc bufaddr+1
000908r 3               :
000908r 3  A0 00        	ldy #0
00090Ar 3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
00090Cr 3  C5 rr        	cmp z80_b		; is this fatal?
00090Er 3  D0 01        	bne :+
000910r 3  60           	rts			; yes.
000911r 3               :
000911r 3  E6 rr        	inc bufaddr 		; next cell.
000913r 3  D0 02        	bne :+
000915r 3  E6 rr        	inc bufaddr+1
000917r 3               :
000917r 3  A0 00        	ldy #0
000919r 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00091Br 3  C5 rr        	cmp z80_b		; is this fatal?
00091Dr 3  D0 01        	bne :+
00091Fr 3  60           	rts			; yes.
000920r 3               :
000920r 3  A5 rr        	lda z80_c		; horizontal position.
000922r 3  29 07        	and #7			; is it straddling cells?
000924r 3  D0 03        	bne :+
000926r 3  4C rr rr     	jmp tded1 		; no.
000929r 3               :
000929r 3  E6 rr        	inc bufaddr		; last cell.
00092Br 3  D0 02        	bne :+
00092Dr 3  E6 rr        	inc bufaddr+1
00092Fr 3               :
00092Fr 3  A0 00        	ldy #0
000931r 3  B1 rr        	lda (bufaddr),y		; fetch type.
000933r 3  C5 rr        	cmp z80_b		; is this fatal?
000935r 3  D0 01        	bne :+
000937r 3  60           	rts			; yes.
000938r 3               :
000938r 3               tded1:
000938r 3  A5 rr        	lda dispy		; vertical position.
00093Ar 3  29 07        	and #7 			; is it straddling cells?
00093Cr 3  D0 01        	bne :+
00093Er 3  60           	rts			; no, job done.
00093Fr 3               :
00093Fr 3  18           	clc			; point to next row.
000940r 3  A5 rr        	lda bufaddr
000942r 3  65 rr        	adc z80_e
000944r 3  85 rr        	sta bufaddr
000946r 3  90 02        	bcc :+
000948r 3  E6 rr        	inc bufaddr+1
00094Ar 3               :
00094Ar 3  A0 00        	ldy #0
00094Cr 3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
00094Er 3  C5 rr        	cmp z80_b		; is this fatal?
000950r 3  D0 01        	bne :+
000952r 3  60           	rts			; yes.
000953r 3               :
000953r 3  E6 rr        	inc bufaddr		; next cell.
000955r 3  D0 02        	bne :+
000957r 3  E6 rr        	inc bufaddr+1
000959r 3               :
000959r 3  A0 00        	ldy #0
00095Br 3  B1 rr        	lda (bufaddr),y 	; fetch type.
00095Dr 3  C5 rr        	cmp z80_b		; is this fatal?
00095Fr 3  D0 01        	bne :+
000961r 3  60           	rts			; yes.
000962r 3               :
000962r 3  A5 rr        	lda z80_c		; horizontal position.
000964r 3  29 07        	and #7			; is it straddling cells?
000966r 3  D0 01        	bne :+
000968r 3  60           	rts			; no.
000969r 3               :
000969r 3  E6 rr        	inc bufaddr		; last cell.
00096Br 3  D0 02        	bne :+
00096Dr 3  E6 rr        	inc bufaddr+1
00096Fr 3               :
00096Fr 3  A0 00        	ldy #0
000971r 3  B1 rr        	lda (bufaddr),y		; fetch final type.
000973r 3  60           	rts 			; return with final type in accumulator.
000974r 3               
000974r 3               ;---------------------------------------------------
000974r 3               ; Fetch block type at (dispx, dispy).
000974r 3               ;
000974r 3               ; Output:
000974r 3               ;  A = block type
000974r 3               ;---------------------------------------------------
000974r 3               
000974r 3               tstbl:
000974r 3  A5 rr        	lda dispy 		; fetch y coord.
000976r 3  4A           	lsr a			; bufaddr = y/8
000977r 3  4A           	lsr a
000978r 3  4A           	lsr a
000979r 3               ;	sta chary
000979r 3               
000979r 3  85 rr        	sta bufaddr
00097Br 3  A9 00        	lda #0
00097Dr 3  85 rr        	sta bufaddr+1
00097Fr 3               
00097Fr 3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
000981r 3  26 rr        	rol bufaddr+1
000983r 3  06 rr        	asl bufaddr
000985r 3  26 rr        	rol bufaddr+1
000987r 3  06 rr        	asl bufaddr
000989r 3  26 rr        	rol bufaddr+1
00098Br 3  06 rr        	asl bufaddr
00098Dr 3  26 rr        	rol bufaddr+1
00098Fr 3  06 rr        	asl bufaddr
000991r 3  26 rr        	rol bufaddr+1
000993r 3               
000993r 3  A5 rr        	lda dispx		; x/8
000995r 3  4A           	lsr a
000996r 3  4A           	lsr a
000997r 3  4A           	lsr a
000998r 3               ;	sta charx
000998r 3               
000998r 3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
000999r 3  65 rr        	adc bufaddr
00099Br 3  69 00        	adc #<MAP
00099Dr 3  85 rr        	sta bufaddr
00099Fr 3  A5 rr        	lda bufaddr+1
0009A1r 3  69 04        	adc #>MAP
0009A3r 3  85 rr        	sta bufaddr+1
0009A5r 3               
0009A5r 3  A0 00        	ldy #0
0009A7r 3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
0009A9r 3  60           	rts
0009AAr 3               
0009AAr 3               ;-------------------------------------------------------------------
0009AAr 3               ; Jump - if we can.
0009AAr 3               ; Requires initial speed to be set up in accumulator prior to call.
0009AAr 3               ;
0009AAr 3               ; Input:
0009AAr 3               ;  IX = sprite address
0009AAr 3               ;-------------------------------------------------------------------
0009AAr 3               
0009AAr 3               jump:
0009AAr 3  A0 0D        	ldy #var_jumpLo
0009ACr 3  B1 rr        	lda (z80_ix),y		; jump table low.
0009AEr 3  A0 0E        	ldy #var_jumpHi
0009B0r 3  11 rr        	ora (z80_ix),y		; jump table high.
0009B2r 3  F0 01        	beq :+
0009B4r 3  60           	rts			; already in the air.
0009B5r 3               :
0009B5r 3  A9 rr        	lda #>jtab
0009B7r 3  A0 0E        	ldy #var_jumpHi
0009B9r 3  91 rr        	sta (z80_ix),y		; set jump high.
0009BBr 3  A9 rr        	lda #<jtab		; jump table start.
0009BDr 3  A0 0D        	ldy #var_jumpLo
0009BFr 3  91 rr        	sta (z80_ix),y		; set jump low.
0009C1r 3  60           	rts
0009C2r 3               
0009C2r 3               ; Jump table.
0009C2r 3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
0009C2r 3               ;.align 32
0009C2r 3               ;jtab:
0009C2r 3               ;	.byte 248,250,252
0009C2r 3               ;	.byte 254,254,255
0009C2r 3               ;	.byte 255,255,0,0
0009C2r 3               ;	.byte 0,1,1,1,2,2
0009C2r 3               ;	.byte 4,6,8,8,8,99
0009C2r 3               
0009C2r 3               ;------------------------------------------------
0009C2r 3               ; Random numbers code.
0009C2r 3               ; Pseudo-random number generator, 8-bit.
0009C2r 3               ;
0009C2r 3               ; Output:
0009C2r 3               ;  RND = random number
0009C2r 3               ;------------------------------------------------
0009C2r 3               
0009C2r 3               random:
0009C2r 3  A5 rr        	lda seed
0009C4r 3  F0 05        	beq doEor
0009C6r 3  0A           	asl a
0009C7r 3  F0 04        	beq noEor
0009C9r 3  90 02        	bcc noEor
0009CBr 3  49 1D        doEor:	eor #$1d
0009CDr 3  85 rr        noEor:	sta seed
0009CFr 3  60           	rts
0009D0r 3               
0009D0r 3  A5 rr        	lda seed		; get last random number.
0009D2r 3  0A           	asl a
0009D3r 3  0A           	asl a
0009D4r 3  18           	clc
0009D5r 3  65 rr        	adc seed
0009D7r 3  18           	clc
0009D8r 3  69 45        	adc #$45
0009DAr 3  85 rr        	sta seed		; store new seed.
0009DCr 3  85 rr        	sta varrnd		; return number in variable.
0009DEr 3  60           	rts
0009DFr 3               
0009DFr 3               ;-------------------------------------------------------
0009DFr 3               ; Joystick and keyboard reading routines.
0009DFr 3               ;
0009DFr 3               ; contrl = 0, Keyboard
0009DFr 3               ;          1, JoyKeyb
0009DFr 3               ;          2, JoyMMC
0009DFr 3               ;
0009DFr 3               ;      joyval=x65FUDLR (bit cleared if key pressed)
0009DFr 3               ;             ||||||||
0009DFr 3               ;             |||||||+> Right    KEY 0  - X
0009DFr 3               ;             ||||||+-> Left     KEY 1  - Z
0009DFr 3               ;             |||||+--> Down     KEY 2  - .
0009DFr 3               ;             ||||+---> Up       KEY 3  - ;
0009DFr 3               ;             |||+----> Fire1    KEY 4  - SPC
0009DFr 3               ;             ||+-----> Fire2    KEY 5  - Q
0009DFr 3               ;             |+------> Fire3    KEY 6  - P
0009DFr 3               ;             +-------> Not used
0009DFr 3               ;
0009DFr 3               ;                       Option1  KEY 7  - 1
0009DFr 3               ;                       Option2  KEY 8  - 2
0009DFr 3               ;                       Option3  KEY 9  - 3
0009DFr 3               ;                       Option4  KEY 10 - 4
0009DFr 3               ;-------------------------------------------------------
0009DFr 3               
0009DFr 3               joykey:
0009DFr 3  A5 rr        	lda contrl 		; control flag.
0009E1r 3  C9 01        	cmp #1
0009E3r 3  F0 1A        	beq joy1 		; scan joystick1
0009E5r 3  C9 02        	cmp #2
0009E7r 3  F0 1C        	beq joy2 		; scan joystick2
0009E9r 3               
0009E9r 3               ; Scan keyboard
0009E9r 3               
0009E9r 3  A9 00        	lda #0		 	; zero reading.
0009EBr 3  85 rr        	sta z80_e
0009EDr 3               
0009EDr 3  A0 06        	ldy #6	 		; address of last key.
0009EFr 3               joyke0:
0009EFr 3  B9 rr rr     	lda keys,y 		; get key from table.
0009F2r 3  20 rr rr     	jsr ktest		; being pressed?
0009F5r 3  26 rr        	rol z80_e 		; rotate into reading.
0009F7r 3               
0009F7r 3  88           	dey		 	; next key.
0009F8r 3  10 F5        	bpl joyke0 		; repeat for all keys.
0009FAr 3               joyret:
0009FAr 3  A5 rr        	lda z80_e
0009FCr 3  85 rr        	sta joyval
0009FEr 3  60           	rts
0009FFr 3               
0009FFr 3               ; Scan joystick 1
0009FFr 3               
0009FFr 3               joy1:
0009FFr 3  20 rr rr     	jsr joy1scan
000A02r 3  4C rr rr     	jmp joyret 		; store the value.
000A05r 3               
000A05r 3               ; Scan joystick 2
000A05r 3               
000A05r 3               joy2:
000A05r 3  20 rr rr     	jsr joy2scan
000A08r 3  4C rr rr     	jmp joyret 		; store the value.
000A0Br 3               
000A0Br 3               ;---------------------------------------------------------------
000A0Br 3               ; Display message.
000A0Br 3               ;
000A0Br 3               ; Input:
000A0Br 3               ;  A = message number
000A0Br 3               ;---------------------------------------------------------------
000A0Br 3               
000A0Br 3               dmsg:
000A0Br 3  AA           	tax
000A0Cr 3  A9 rr        	lda #<msgdat		; pointer to messages.
000A0Er 3  85 rr        	sta z80_l
000A10r 3  A9 rr        	lda #>msgdat
000A12r 3  85 rr        	sta z80_h
000A14r 3  20 rr rr     	jsr getwrd		; get message number.
000A17r 3               dmsg3:
000A17r 3  20 rr rr     	jsr preprt		; pre-printing stuff.
000A1Ar 3  20 rr rr     	jsr checkx		; make sure we"re in a printable range.
000A1Dr 3  A5 rr        	lda prtmod		; print mode.
000A1Fr 3  D0 47        	bne bmsg1		; no, double-height text.
000A21r 3               dmsg0:
000A21r 3  A5 rr        	lda z80_h		; store string pointer.
000A23r 3  48           	pha
000A24r 3  A5 rr        	lda z80_l
000A26r 3  48           	pha
000A27r 3               
000A27r 3  A0 00        	ldy #0
000A29r 3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
000A2Br 3  29 7F        	and #127		; remove any end marker.
000A2Dr 3  C9 0D        	cmp #ASCII_NEWLINE
000A2Fr 3  F0 24        	beq dmsg1
000A31r 3  20 rr rr     	jsr pchar		; display character.
000A34r 3  20 rr rr     	jsr nexpos 		; display position.
000A37r 3  D0 03        	bne dmsg2		; not on a new line.
000A39r 3  20 rr rr     	jsr nexlin		; next line down.
000A3Cr 3               dmsg2:
000A3Cr 3  68           	pla			; retrieve string pointer
000A3Dr 3  85 rr        	sta z80_l
000A3Fr 3  68           	pla
000A40r 3  85 rr        	sta z80_h
000A42r 3               
000A42r 3  A0 00        	ldy #0
000A44r 3  B1 rr        	lda (z80_hl),y		; fetch last character.
000A46r 3  0A           	asl a  			; was it the end?
000A47r 3  90 03        	bcc :+
000A49r 3  4C rr rr     	jmp dscor2		; yes, job done.
000A4Cr 3               :
000A4Cr 3  E6 rr        	inc z80_l		; next character to display.
000A4Er 3  D0 02        	bne :+
000A50r 3  E6 rr        	inc z80_h
000A52r 3               :
000A52r 3  4C rr rr     	jmp dmsg0
000A55r 3               dmsg1:
000A55r 3  E6 rr        	inc dispy
000A57r 3  A5 rr        	lda dispy
000A59r 3  C9 18        	cmp #24
000A5Br 3  90 04        	bcc dmsg4
000A5Dr 3  A9 00        	lda #0
000A5Fr 3  85 rr        	sta dispy
000A61r 3               dmsg4:
000A61r 3  A9 00        	lda #0
000A63r 3  85 rr        	sta dispx
000A65r 3  4C rr rr     	jmp dmsg2
000A68r 3               
000A68r 3               
000A68r 3               ;----------------------------------------------------------
000A68r 3               ; Display message in big text.
000A68r 3               ;
000A68r 3               ; Input:
000A68r 3               ;  HL = string pointer
000A68r 3               ;----------------------------------------------------------
000A68r 3               
000A68r 3               bmsg1:
000A68r 3  A0 00        	ldy #0
000A6Ar 3  B1 rr        	lda (z80_hl),y 		; get character to display.
000A6Cr 3  29 7F        	and #127		; only want 7 bits.
000A6Er 3  C9 0D        	cmp #ASCII_NEWLINE
000A70r 3  F0 13        	beq bmsg2
000A72r 3  20 rr rr     	jsr bchar 		; display big char.
000A75r 3               bmsg3:
000A75r 3  A0 00        	ldy #0
000A77r 3  B1 rr        	lda (z80_hl),y 		; look at last character.
000A79r 3  48           	pha
000A7Ar 3  E6 rr        	inc z80_l 		; next character in list.
000A7Cr 3  D0 02        	bne :+
000A7Er 3  E6 rr        	inc z80_h
000A80r 3               :
000A80r 3  68           	pla
000A81r 3  0A           	asl a  			; was terminator flag set?
000A82r 3  90 E4        	bcc bmsg1		; no, keep going.
000A84r 3               
000A84r 3  60           	rts
000A85r 3               bmsg2:
000A85r 3  A9 00        	lda #0
000A87r 3  85 rr        	sta dispx
000A89r 3  E6 rr        	inc dispy
000A8Br 3  E6 rr        	inc dispy
000A8Dr 3  A5 rr        	lda dispy
000A8Fr 3  C9 17        	cmp #23
000A91r 3  90 E2        	bcc bmsg3
000A93r 3  A9 00        	lda #0
000A95r 3  85 rr        	sta dispy
000A97r 3  4C rr rr     	jmp bmsg3
000A9Ar 3               
000A9Ar 3               ;----------------------------------------------------------
000A9Ar 3               ; Big character display.
000A9Ar 3               ;
000A9Ar 3               ; Input:
000A9Ar 3               ;  A = character
000A9Ar 3               ;----------------------------------------------------------
000A9Ar 3               
000A9Ar 3               bchar:
000A9Ar 3  85 rr        	sta z80_e		; save char in lb
000A9Cr 3  A9 00        	lda #0
000A9Er 3  85 rr        	sta z80_d		; reset hb
000AA0r 3               
000AA0r 3  06 rr        	asl z80_e 		; multiply char by 8.
000AA2r 3  26 rr        	rol z80_d
000AA4r 3  06 rr        	asl z80_e
000AA6r 3  26 rr        	rol z80_d
000AA8r 3  06 rr        	asl z80_e
000AAAr 3  26 rr        	rol z80_d		; de = a*8
000AACr 3               
000AACr 3  18           	clc			; de = #<(FONT-256) + a*8
000AADr 3  A5 rr        	lda z80_e
000AAFr 3  69 rr        	adc #<(FONT-256) 		; address of font.
000AB1r 3  85 rr        	sta z80_e
000AB3r 3  A5 rr        	lda z80_d
000AB5r 3  69 rr        	adc #>(FONT-256)
000AB7r 3  85 rr        	sta z80_d
000AB9r 3               
000AB9r 3  20 rr rr     	jsr gaadd		; set colour attribute
000ABCr 3  AD rr rr     	lda fontcol
000ABFr 3  A0 00        	ldy #0
000AC1r 3  91 rr        	sta (bufaddr),y
000AC3r 3               
000AC3r 3  20 rr rr     	jsr gprad 		; get screen address.
000AC6r 3               
000AC6r 3  A2 00        	ldx #0			; height of character in font.
000AC8r 3               bchar0:
000AC8r 3  A0 00        	ldy #0
000ACAr 3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
000ACCr 3               
000ACCr 3               .if iflag
000ACCr 3               	eor #$ff
000ACCr 3               .endif
000ACCr 3               
000ACCr 3  91 rr        	sta (scraddr),y
000ACEr 3  48           	pha
000ACFr 3  20 rr rr     	jsr nline 		; next line down.
000AD2r 3  68           	pla
000AD3r 3  91 rr        	sta (scraddr),y
000AD5r 3  20 rr rr     	jsr nline 		; next line down.
000AD8r 3               
000AD8r 3  18           	clc
000AD9r 3  E6 rr        	inc z80_e 		; next line of font.
000ADBr 3  D0 02        	bne :+
000ADDr 3  E6 rr        	inc z80_d
000ADFr 3               :
000ADFr 3  E8           	inx
000AE0r 3  E0 08        	cpx #8
000AE2r 3  D0 E4        	bne bchar0
000AE4r 3               
000AE4r 3  20 rr rr     	jsr nexpos		; display position.
000AE7r 3  D0 05        	bne bchar2 		; not on a new line.
000AE9r 3               bchar3:
000AE9r 3  E6 rr        	inc dispy
000AEBr 3  20 rr rr     	jsr nexlin 		; next line check.
000AEEr 3               bchar2:
000AEEr 3  4C rr rr     	jmp dscor2		; tidy up line and column variables.
000AF1r 3               
000AF1r 3               
000AF1r 3               ;-------------------------------------------------
000AF1r 3               ; Display a character.
000AF1r 3               ;
000AF1r 3               ; Input:
000AF1r 3               ;  A = character
000AF1r 3               ;-------------------------------------------------
000AF1r 3               
000AF1r 3               achar:
000AF1r 3  85 rr        	sta z80_b 		; copy to b.
000AF3r 3  20 rr rr     	jsr preprt 		; get ready to print.
000AF6r 3  A5 rr        	lda z80_b		; character in accumulator.
000AF8r 3  A6 rr        	ldx prtmod 		; print mode.
000AFAr 3  F0 03        	beq :+
000AFCr 3  4C rr rr     	jmp bchar 		; no, double-height text.
000AFFr 3               :
000AFFr 3  20 rr rr     	jsr pchar 		; display character.
000B02r 3  20 rr rr     	jsr nexpos 		; display position.
000B05r 3  F0 E2        	beq bchar3		; next line down.
000B07r 3  4C rr rr     	jmp bchar2 		; tidy up.
000B0Ar 3               
000B0Ar 3               
000B0Ar 3               ;-------------------------------------------------
000B0Ar 3               ; Get next print column position.
000B0Ar 3               ;-------------------------------------------------
000B0Ar 3               
000B0Ar 3               nexpos:
000B0Ar 3  E6 rr        	inc dispx		; move along one position.
000B0Cr 3  A5 rr        	lda dispx 		; get coordinate.
000B0Er 3  C9 16        	cmp #22
000B10r 3  D0 0E        	bne :+
000B12r 3  A9 00        	lda #0
000B14r 3  85 rr        	sta dispx
000B16r 3  A5 rr        	lda prtmod
000B18r 3  F0 06        	beq :+
000B1Ar 3  20 rr rr     	jsr nexlin
000B1Dr 3  4C rr rr     	jmp nexlin
000B20r 3               :
000B20r 3  60           	rts
000B21r 3               
000B21r 3               ;-------------------------------------------------
000B21r 3               ; Get next print line position.
000B21r 3               ;-------------------------------------------------
000B21r 3               
000B21r 3               nexlin:
000B21r 3  E6 rr        	inc dispy 		; newline.
000B23r 3  A5 rr        	lda dispy		; vertical position.
000B25r 3  C9 16        	cmp #22			; past screen edge?
000B27r 3  B0 01        	bcs :+
000B29r 3  60           	rts			; no, still okay.
000B2Ar 3               :
000B2Ar 3  A9 00        	lda #0			; restart at top.
000B2Cr 3  85 rr        	sta dispy
000B2Er 3  60           	rts
000B2Fr 3               
000B2Fr 3               ;--------------------------------------------------------
000B2Fr 3               ; Pre-print preliminaries.
000B2Fr 3               ;--------------------------------------------------------
000B2Fr 3               
000B2Fr 3               preprt:
000B2Fr 3  A9 rr        	lda #<(FONT-256)		; font pointer.
000B31r 3  8D rr rr     	sta grbase		; set up graphics base.
000B34r 3  A9 rr        	lda #>(FONT-256)
000B36r 3  8D rr rr     	sta grbase+1
000B39r 3               prescr:
000B39r 3  A5 rr        	lda charx 		; display coordinates.
000B3Br 3  85 rr        	sta dispx		; set up general coordinates.
000B3Dr 3  A5 rr        	lda chary
000B3Fr 3  85 rr        	sta dispy
000B41r 3  60           	rts
000B42r 3               
000B42r 3               ;--------------------------------------------------------------
000B42r 3               ; Get messagenr x in hl
000B42r 3               ;
000B42r 3               ; Input:
000B42r 3               ;  HL = pointer to message list
000B42r 3               ;  X  = message number.
000B42r 3               ;--------------------------------------------------------------
000B42r 3               
000B42r 3               getwrd:
000B42r 3  E0 00        	cpx #0
000B44r 3  D0 01        	bne:+ 			; first word in list?
000B46r 3  60           	rts 			; yep, don't search.
000B47r 3               :
000B47r 3  A0 00        	ldy #0
000B49r 3               getwd0:
000B49r 3  B1 rr        	lda (z80_hl),y
000B4Br 3  48           	pha
000B4Cr 3  E6 rr        	inc z80_l
000B4Er 3  D0 02        	bne :+
000B50r 3  E6 rr        	inc z80_h
000B52r 3               :
000B52r 3  68           	pla
000B53r 3  C9 80        	cmp #128		; found end?
000B55r 3  30 F2        	bmi getwd0		; no, carry on.
000B57r 3  CA           	dex			; until we have right number.
000B58r 3  D0 EF        	bne getwd0
000B5Ar 3  60           	rts
000B5Br 3               
000B5Br 3               ;-----------------------------------------------------------
000B5Br 3               ; Bubble sort.
000B5Br 3               ;-----------------------------------------------------------
000B5Br 3               
000B5Br 3               bsort:
000B5Br 3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
000B5Dr 3  85 rr        	sta qscnt
000B5Fr 3               
000B5Fr 3  A9 rr        	lda #<sprtab 		; sprite table.
000B61r 3  85 rr        	sta z80_x
000B63r 3  A9 rr        	lda #>sprtab
000B65r 3  85 rr        	sta z80_i
000B67r 3               bsort0:
000B67r 3  A0 00        	ldy #0
000B69r 3  B1 rr        	lda (z80_ix),y 		; first sprite type.
000B6Br 3  C9 FF        	cmp #255 		; is it switched off?
000B6Dr 3  F0 30        	beq swemp		; yes, may need to switch another in here.
000B6Fr 3               
000B6Fr 3  A0 11        	ldy #TABSIZ
000B71r 3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
000B73r 3  C9 FF        	cmp #255 		; is it enabled?
000B75r 3  F0 0A        	beq bsort2 		; no, nothing to swap.
000B77r 3               
000B77r 3  A0 14        	ldy #TABSIZ+3
000B79r 3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
000B7Br 3  A0 03        	ldy #3
000B7Dr 3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
000B7Fr 3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
000B81r 3               bsort2:
000B81r 3  18           	clc
000B82r 3  A5 rr        	lda z80_x
000B84r 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000B86r 3  85 rr        	sta z80_x
000B88r 3  90 02        	bcc :+
000B8Ar 3  E6 rr        	inc z80_i
000B8Cr 3               :
000B8Cr 3  C6 rr        	dec qscnt
000B8Er 3  D0 D7        	bne bsort0		; repeat for remaining sprites.
000B90r 3  60           	rts
000B91r 3               
000B91r 3               bsort1:
000B91r 3  A0 11        	ldy #TABSIZ
000B93r 3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
000B95r 3  C9 FF        	cmp #255		; is it enabled?
000B97r 3  F0 E8        	beq bsort2		; no, nothing to swap.
000B99r 3  20 rr rr     	jsr swspr		; swap positions.
000B9Cr 3  4C rr rr     	jmp bsort2
000B9Fr 3               swemp:
000B9Fr 3  A0 11        	ldy #TABSIZ
000BA1r 3  B1 rr        	lda (z80_ix),y		; next table entry.
000BA3r 3  C9 FF        	cmp #255		; is that one on?
000BA5r 3  F0 DA        	beq bsort2		; no, nothing to swap.
000BA7r 3  20 rr rr     	jsr swspr		; swap positions.
000BAAr 3  4C rr rr     	jmp bsort2
000BADr 3               
000BADr 3               ; Swap sprites.
000BADr 3               
000BADr 3               swspr:
000BADr 3  A5 rr        	lda z80_x		; table address
000BAFr 3  85 rr        	sta z80_e		; copy to de pair.
000BB1r 3  85 rr        	sta z80_l		; copy to hl pair.
000BB3r 3  A5 rr        	lda z80_i
000BB5r 3  85 rr        	sta z80_h
000BB7r 3  85 rr        	sta z80_d
000BB9r 3               
000BB9r 3  18           	clc
000BBAr 3  A5 rr        	lda z80_l
000BBCr 3  69 11        	adc #TABSIZ		; distance to second entry.
000BBEr 3  85 rr        	sta z80_l
000BC0r 3  90 02        	bcc :+
000BC2r 3  E6 rr        	inc z80_h
000BC4r 3               :
000BC4r 3  A9 11        	lda #TABSIZ		; bytes to swap.
000BC6r 3  85 rr        	sta z80_b
000BC8r 3  A0 00        	ldy #0
000BCAr 3               swspr0:
000BCAr 3  B1 rr        	lda (z80_hl),y		; fetch second byte.
000BCCr 3  48           	pha
000BCDr 3  B1 rr        	lda (z80_de),y 		; fetch first byte.
000BCFr 3  91 rr        	sta (z80_hl),y 		; copy to second.
000BD1r 3  68           	pla
000BD2r 3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
000BD4r 3               
000BD4r 3  E6 rr        	inc z80_e 		; next byte.
000BD6r 3  D0 02        	bne :+
000BD8r 3  E6 rr        	inc z80_d
000BDAr 3               :
000BDAr 3  E6 rr        	inc z80_l 		; next byte.
000BDCr 3  D0 02        	bne :+
000BDEr 3  E6 rr        	inc z80_h
000BE0r 3               :
000BE0r 3  C6 rr        	dec z80_b
000BE2r 3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
000BE4r 3  60           	rts
000BE5r 3               
000BE5r 3               ;----------------------------------------------------
000BE5r 3               ; Process sprites.
000BE5r 3               ;----------------------------------------------------
000BE5r 3               
000BE5r 3               pspr:
000BE5r 3  A9 0C        	lda #NUMSPR		; sprites to process.
000BE7r 3  85 rr        	sta sprptr
000BE9r 3               
000BE9r 3  A9 rr        	lda #<sprtab 		; sprite table.
000BEBr 3  85 rr        	sta z80_x
000BEDr 3  A9 rr        	lda #>sprtab
000BEFr 3  85 rr        	sta z80_i
000BF1r 3               pspr1:
000BF1r 3  A0 00        	ldy #0
000BF3r 3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
000BF5r 3  C9 09        	cmp #9 			; within range of sprite types?
000BF7r 3  B0 03        	bcs :+
000BF9r 3  20 rr rr     	jsr pspr2 		; yes, process this one.
000BFCr 3               :
000BFCr 3  18           	clc
000BFDr 3  A5 rr        	lda z80_x
000BFFr 3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
000C01r 3  85 rr        	sta z80_x
000C03r 3  90 02        	bcc :+
000C05r 3  E6 rr        	inc z80_i		; next sprite.
000C07r 3               :
000C07r 3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
000C09r 3  D0 E6        	bne pspr1
000C0Br 3  60           	rts
000C0Cr 3               
000C0Cr 3               pspr2:
000C0Cr 3  A5 rr        	lda z80_x 		; store original sprite pointer.
000C0Er 3  85 rr        	sta ogptr
000C10r 3  A5 rr        	lda z80_i
000C12r 3  85 rr        	sta ogptr+1
000C14r 3  20 rr rr     	jsr pspr3		; do the routine.
000C17r 3               rtorg:
000C17r 3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
000C19r 3  85 rr        	sta z80_x
000C1Br 3  A5 rr        	lda ogptr+1
000C1Dr 3  85 rr        	sta z80_i
000C1Fr 3               rtorg0:
000C1Fr 3  60           	rts
000C20r 3               
000C20r 3               pspr3:
000C20r 3  A9 rr        	lda #<evtyp0		; sprite type events list.
000C22r 3  85 rr        	sta z80_l
000C24r 3  A9 rr        	lda #>evtyp0
000C26r 3  85 rr        	sta z80_h
000C28r 3               pspr4:
000C28r 3  B1 rr        	lda (z80_ix),y
000C2Ar 3  0A           	asl a			; double accumulator.
000C2Br 3  18           	clc
000C2Cr 3  65 rr        	adc z80_l
000C2Er 3  85 rr        	sta z80_l
000C30r 3  90 02        	bcc :+
000C32r 3  E6 rr        	inc z80_h
000C34r 3               :
000C34r 3  B1 rr        	lda (z80_hl),y
000C36r 3  85 rr        	sta z80_e 		; copy to de.
000C38r 3  48           	pha
000C39r 3               
000C39r 3  E6 rr        	inc z80_l 		; next byte of address.
000C3Br 3  D0 02        	bne :+
000C3Dr 3  E6 rr        	inc z80_h
000C3Fr 3               :
000C3Fr 3  B1 rr        	lda (z80_hl),y 		; address high.
000C41r 3  85 rr        	sta z80_d
000C43r 3               
000C43r 3  48           	pha	 		; swap address into hl.
000C44r 3  A5 rr        	lda z80_h
000C46r 3  85 rr        	sta z80_d
000C48r 3  68           	pla
000C49r 3  85 rr        	sta z80_h
000C4Br 3  68           	pla
000C4Cr 3  85 rr        	sta z80_l
000C4Er 3  A5 rr        	lda z80_l
000C50r 3  85 rr        	sta z80_e
000C52r 3               
000C52r 3  6C rr rr     	jmp (z80_hl) 		; go there.
000C55r 3               
000C55r 3               ; Address of each sprite type's routine.
000C55r 3               
000C55r 3  rr rr        evtyp0:	.word evnt00
000C57r 3  rr rr        evtyp1:	.word evnt01
000C59r 3  rr rr        evtyp2:	.word evnt02
000C5Br 3  rr rr        evtyp3:	.word evnt03
000C5Dr 3  rr rr        evtyp4:	.word evnt04
000C5Fr 3  rr rr        evtyp5:	.word evnt05
000C61r 3  rr rr        evtyp6:	.word evnt06
000C63r 3  rr rr        evtyp7:	.word evnt07
000C65r 3  rr rr        evtyp8:	.word evnt08
000C67r 3               
000C67r 3               ;--------------------------------------------------------------
000C67r 3               ; Display sprites.
000C67r 3               ;
000C67r 3               ; Input:
000C67r 3               ;  IX = sprite table
000C67r 3               ;--------------------------------------------------------------
000C67r 3               
000C67r 3               dspr:
000C67r 3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
000C69r 3  85 rr        	sta sprcnt
000C6Br 3               
000C6Br 3               dspr0:
000C6Br 3  A0 00        	ldy #var_Type
000C6Dr 3  B1 rr        	lda (z80_ix),y 		; get sprite type.
000C6Fr 3  C9 FF        	cmp #255 		; is it enabled?
000C71r 3  D0 45        	bne dspr1 		; yes, it needs deleting.
000C73r 3               dspr5:
000C73r 3  A0 05        	ldy #var_newType
000C75r 3  B1 rr        	lda (z80_ix),y 		; new type.
000C77r 3  C9 FF        	cmp #255		; is it enabled?
000C79r 3  F0 03        	beq dspr2
000C7Br 3  4C rr rr     	jmp dspr3 		; yes, it needs drawing.
000C7Er 3               dspr2:
000C7Er 3  A0 05        	ldy #var_newType
000C80r 3  B1 rr        	lda (z80_ix),y 		; copy new type.
000C82r 3  A0 00        	ldy #var_Type
000C84r 3  91 rr        	sta (z80_ix),y
000C86r 3  A0 06        	ldy #var_newImage
000C88r 3  B1 rr        	lda (z80_ix),y 		; copy new image number.
000C8Ar 3  A0 01        	ldy #var_Image
000C8Cr 3  91 rr        	sta (z80_ix),y
000C8Er 3  A0 07        	ldy #var_newFrame
000C90r 3  B1 rr        	lda (z80_ix),y 		; copy new frame.
000C92r 3  A0 02        	ldy #var_Frame
000C94r 3  91 rr        	sta (z80_ix),y
000C96r 3  A0 08        	ldy #var_newY
000C98r 3  B1 rr        	lda (z80_ix),y 		; copy new y.
000C9Ar 3  A0 03        	ldy #var_Y
000C9Cr 3  91 rr        	sta (z80_ix),y
000C9Er 3  A0 09        	ldy #var_newX
000CA0r 3  B1 rr        	lda (z80_ix),y 		; copy new x.
000CA2r 3  A0 04        	ldy #var_X
000CA4r 3  91 rr        	sta (z80_ix),y
000CA6r 3               
000CA6r 3  18           	clc
000CA7r 3  A5 rr        	lda z80_x
000CA9r 3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
000CABr 3  85 rr        	sta z80_x
000CADr 3  A5 rr        	lda z80_i
000CAFr 3  69 00        	adc #0
000CB1r 3  85 rr        	sta z80_i 		; next sprite.
000CB3r 3  C6 rr        	dec sprcnt
000CB5r 3  D0 B4        	bne dspr0		; repeat for remaining sprites.
000CB7r 3  60           	rts
000CB8r 3               
000CB8r 3               dspr1:
000CB8r 3               	; _BEEB clipping code copied from CPC Engine
000CB8r 3  A0 03        	ldy #var_Y
000CBAr 3  B1 rr        	lda (z80_ix), y		; old x coord
000CBCr 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000CBEr 3  B0 B3        	bcs dspr5		; yes, don't delete it.
000CC0r 3               
000CC0r 3  A0 05        	ldy #var_newType
000CC2r 3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
000CC4r 3  C9 FF        	cmp #255		; is this enabled?
000CC6r 3  D0 06        	bne dspr4 		; yes, display both.
000CC8r 3               
000CC8r 3               dspr6:
000CC8r 3  20 rr rr     	jsr sspria 		; show single sprite.
000CCBr 3  4C rr rr     	jmp dspr2
000CCEr 3               
000CCEr 3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
000CCEr 3               
000CCEr 3               dspr4:
000CCEr 3               	; _BEEB clipping code copied from CPC Engine
000CCEr 3  A0 08        	ldy #var_newY
000CD0r 3  B1 rr        	lda (z80_ix), y		; old x coord
000CD2r 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000CD4r 3  B0 F2        	bcs dspr6		; yes, don't display it.
000CD6r 3               
000CD6r 3  A0 04        	ldy #var_X
000CD8r 3  B1 rr        	lda (z80_ix),y		; old x.
000CDAr 3  A0 09        	ldy #var_newX
000CDCr 3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
000CDEr 3  D0 21        	bne dspr7 		; they differ, need to redraw.
000CE0r 3               
000CE0r 3  A0 03        	ldy #var_Y
000CE2r 3  B1 rr        	lda (z80_ix),y		; old y.
000CE4r 3  A0 08        	ldy #var_newY
000CE6r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CE8r 3  D0 17        	bne dspr7		; they differ, need to redraw.
000CEAr 3               
000CEAr 3  A0 02        	ldy #var_Frame
000CECr 3  B1 rr        	lda (z80_ix),y 		; old frame.
000CEEr 3  A0 07        	ldy #var_newFrame
000CF0r 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CF2r 3  D0 0D        	bne dspr7 		; they differ, need to redraw.
000CF4r 3               
000CF4r 3  A0 01        	ldy #var_Image
000CF6r 3  B1 rr        	lda (z80_ix),y 		; old image.
000CF8r 3  A0 06        	ldy #var_newImage
000CFAr 3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
000CFCr 3  D0 03        	bne dspr7 		; they differ, need to redraw.
000CFEr 3  4C rr rr     	jmp dspr2		; everything is the same, don't redraw.
000D01r 3               dspr7:
000D01r 3  20 rr rr     	jsr sspric 		; delete old sprite, draw new one simultaneously.
000D04r 3  4C rr rr     	jmp dspr2
000D07r 3               dspr3:
000D07r 3               	; _BEEB clipping code copied from CPC Engine
000D07r 3  A0 08        	ldy #var_newY
000D09r 3  B1 rr        	lda (z80_ix), y		; old x coord
000D0Br 3  C9 A1        	cmp #SpriteMaxY     	; beyond maximum?
000D0Dr 3  90 03        	bcc :+			; no, continue
000D0Fr 3  4C rr rr     	jmp dspr2		; yes, don't display it.
000D12r 3               :
000D12r 3  20 rr rr     	jsr ssprib 		; show single sprite.
000D15r 3  4C rr rr     	jmp dspr2
000D18r 3               
000D18r 3               ;-----------------------------------------
000D18r 3               ; Get sprite address calculations.
000D18r 3               ; gspran = new sprite, gsprad = old sprite.
000D18r 3               ;
000D18r 3               ; Input:
000D18r 3               ;  IX = sprite address
000D18r 3               ;-----------------------------------------
000D18r 3               
000D18r 3               gspran:
000D18r 3  A0 08        	ldy #var_newY
000D1Ar 3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
000D1Cr 3  85 rr        	sta dispy
000D1Er 3  A0 09        	ldy #var_newX
000D20r 3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
000D22r 3  85 rr        	sta dispx
000D24r 3  A0 06        	ldy #var_newImage
000D26r 3  B1 rr        	lda (z80_ix),y 		; new sprite image.
000D28r 3  20 rr rr     	jsr gfrm		; fetch start frame for this sprite.
000D2Br 3               
000D2Br 3  A0 00        	ldy #0
000D2Dr 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000D2Fr 3  A0 07        	ldy #var_newFrame
000D31r 3  18           	clc
000D32r 3  71 rr        	adc (z80_ix),y 		; new add frame number.
000D34r 3  4C rr rr     	jmp gspra0
000D37r 3               
000D37r 3               ;-----------------------------------------
000D37r 3               ; Calculate old sprite address
000D37r 3               ;
000D37r 3               ; Input:
000D37r 3               ;  IX = sprite address
000D37r 3               ;
000D37r 3               ; Output:
000D37r 3               ;  B  = right byte mask
000D37r 3               ;  C  = left byte mask
000D37r 3               ;  DE = spriteframe address
000D37r 3               ;  scraddr = screenaddress(dispx,dispy)
000D37r 3               ;-----------------------------------------
000D37r 3               
000D37r 3               gsprad:
000D37r 3  A0 03        	ldy #var_Y
000D39r 3  B1 rr        	lda (z80_ix),y		; y coordinate.
000D3Br 3  85 rr        	sta dispy
000D3Dr 3  A0 04        	ldy #var_X
000D3Fr 3  B1 rr        	lda (z80_ix),y		; x coordinate.
000D41r 3  85 rr        	sta dispx
000D43r 3  A0 01        	ldy #var_Image
000D45r 3  B1 rr        	lda (z80_ix),y 		; sprite image.
000D47r 3  20 rr rr     	jsr gfrm 		; fetch start frame for this sprite.
000D4Ar 3               
000D4Ar 3  A0 00        	ldy #0
000D4Cr 3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
000D4Er 3  A0 02        	ldy #var_Frame
000D50r 3  18           	clc
000D51r 3  71 rr        	adc (z80_ix),y 		; add frame number.
000D53r 3               
000D53r 3               gspra0:
000D53r 3               .if rflag
000D53r 3  85 rr        	sta z80_e		; multiply by 32.
000D55r 3  A9 00        	lda #0
000D57r 3  85 rr        	sta z80_d
000D59r 3               
000D59r 3  06 rr        	asl z80_e
000D5Br 3  26 rr        	rol z80_d
000D5Dr 3  06 rr        	asl z80_e
000D5Fr 3  26 rr        	rol z80_d
000D61r 3  06 rr        	asl z80_e
000D63r 3  26 rr        	rol z80_d
000D65r 3  06 rr        	asl z80_e
000D67r 3  26 rr        	rol z80_d
000D69r 3               .if bflag
000D69r 3               	lda z80_e		; multiply by 48
000D69r 3               	sta tmp1
000D69r 3               	lda z80_d
000D69r 3               	sta tmp2
000D69r 3               .endif
000D69r 3  06 rr        	asl z80_e
000D6Br 3  26 rr        	rol z80_d
000D6Dr 3               .if bflag
000D6Dr 3               	clc
000D6Dr 3               	lda z80_e
000D6Dr 3               	adc tmp1
000D6Dr 3               	sta z80_e
000D6Dr 3               	lda z80_d
000D6Dr 3               	adc tmp2
000D6Dr 3               	sta z80_d
000D6Dr 3               .endif
000D6Dr 3               .else
000D6Dr 3               	lsr a	  		; multiply by 128.
000D6Dr 3               	sta z80_d 		; store in d.
000D6Dr 3               	sta tmp1
000D6Dr 3               	lda #0
000D6Dr 3               	ror a
000D6Dr 3               	sta z80_e 		; got low byte.
000D6Dr 3               	sta tmp2
000D6Dr 3               .if bflag
000D6Dr 3               	lsr tmp1		; multiply by 192
000D6Dr 3               	ror tmp2
000D6Dr 3               	clc
000D6Dr 3               	lda tmp2
000D6Dr 3               	adc z80_e
000D6Dr 3               	sta z80_e
000D6Dr 3               	lda tmp1
000D6Dr 3               	adc z80_d
000D6Dr 3               	sta z80_d
000D6Dr 3               .endif
000D6Dr 3               .endif
000D6Dr 3  18           	clc 			; address of play sprites.
000D6Er 3  A5 rr        	lda z80_e
000D70r 3  69 rr        	adc #<sprgfx
000D72r 3  85 rr        	sta z80_e
000D74r 3  A5 rr        	lda z80_d
000D76r 3  69 rr        	adc #>sprgfx
000D78r 3  85 rr        	sta z80_d
000D7Ar 3               
000D7Ar 3  A5 rr        	lda dispx 		; y coordinate.
000D7Cr 3  29 06        	and #6 			; position within byte boundary.
000D7Er 3  AA           	tax	 		; low byte of table displacement.
000D7Fr 3               .if rflag
000D7Fr 3  86 rr        	stx sprshft
000D81r 3               .else
000D81r 3               	asl a	  		; multiply by 32.
000D81r 3               	asl a  			; already a multiple
000D81r 3               	asl a  			; of 2, so just 4
000D81r 3               .if bflag
000D81r 3               	sta tmp1
000D81r 3               	asl a  			; shifts needed.
000D81r 3               	clc
000D81r 3               	adc tmp1
000D81r 3               .else
000D81r 3               	asl a  			; shifts needed.
000D81r 3               .endif
000D81r 3               	clc 			; add to sprite address.
000D81r 3               	adc z80_e
000D81r 3               	sta z80_e
000D81r 3               	bcc :+
000D81r 3               	inc z80_d
000D81r 3               :
000D81r 3               .endif
000D81r 3  BD rr rr     	lda spmask,x		 ; pointer to mask table.
000D84r 3  85 rr        	sta z80_c 		; left mask.
000D86r 3  BD rr rr     	lda spmask+1,x
000D89r 3  85 rr        	sta z80_b 		; right mask.
000D8Br 3               ; Drop into screen address routine.
000D8Br 3  4C rr rr     	jmp scadd
000D8Er 3               
000D8Er 3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
000D92r 3  0F F0 03 FC  
000D96r 3               
000D96r 3               
000D96r 3               ;-----------------------------------------------------------
000D96r 3               ; Animates a sprite.
000D96r 3               ;
000D96r 3               ; Input:
000D96r 3               ;  IX = sprite address
000D96r 3               ;  HL = last sprite address
000D96r 3               ;-----------------------------------------------------------
000D96r 3               
000D96r 3               animsp:
000D96r 3  25 rr        	and frmno
000D98r 3  F0 01        	beq :+
000D9Ar 3  60           	rts
000D9Br 3               :
000D9Br 3  A0 06        	ldy #var_newImage
000D9Dr 3  B1 rr        	lda (z80_ix),y		; sprite image
000D9Fr 3  20 rr rr     	jsr gfrm		; get frame data.
000DA2r 3               
000DA2r 3  E6 rr        	inc z80_l		; point to frames.
000DA4r 3  D0 02        	bne :+
000DA6r 3  E6 rr        	inc z80_h
000DA8r 3               :
000DA8r 3  A0 07        	ldy #var_newFrame
000DAAr 3  B1 rr        	lda (z80_ix),y		; sprite frame.
000DACr 3  18           	clc
000DADr 3  69 01        	adc #1			; next one along.
000DAFr 3  A0 00        	ldy #0
000DB1r 3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
000DB3r 3  90 02        	bcc anims0		; no, not yet.
000DB5r 3  A9 00        	lda #0			; start at first frame.
000DB7r 3               anims0:
000DB7r 3  A0 07        	ldy #var_newFrame
000DB9r 3  91 rr        	sta (z80_ix),y		; new frame.
000DBBr 3  60           	rts
000DBCr 3               
000DBCr 3               ;--------------------------------------------------------------
000DBCr 3               ; Animate back
000DBCr 3               ;
000DBCr 3               ; Input:
000DBCr 3               ;  IX = sprite address
000DBCr 3               ;  HL = last sprite address
000DBCr 3               ;--------------------------------------------------------------
000DBCr 3               
000DBCr 3               animbk:
000DBCr 3  25 rr        	and frmno
000DBEr 3  F0 01        	beq :+
000DC0r 3  60           	rts
000DC1r 3               :
000DC1r 3  A0 06        	ldy #var_newImage
000DC3r 3  B1 rr        	lda (z80_ix),y		; sprite image.
000DC5r 3  20 rr rr     	jsr gfrm		; get frame data.
000DC8r 3               
000DC8r 3  E6 rr        	inc z80_l 		; point to frames.
000DCAr 3  D0 02        	bne :+
000DCCr 3  E6 rr        	inc z80_h
000DCEr 3               :
000DCEr 3  A0 07        	ldy #var_newFrame
000DD0r 3  B1 rr        	lda (z80_ix),y 		; sprite frame.
000DD2r 3  F0 03        	beq :+
000DD4r 3  4C rr rr     	jmp rtanb0 		; yes, start at end.
000DD7r 3               :
000DD7r 3  A0 00        	ldy #0
000DD9r 3  B1 rr        	lda (z80_hl),y 		; last sprite.
000DDBr 3               rtanb0:
000DDBr 3  38           	sec
000DDCr 3  E9 01        	sbc #1			; next one along.
000DDEr 3  4C rr rr     	jmp anims0		; set new frame.
000DE1r 3               
000DE1r 3               ;--------------------------------------------------------------
000DE1r 3               ; Check for collision with other sprite, strict enforcement.
000DE1r 3               ;
000DE1r 3               ; Input:
000DE1r 3               ;  b		= sprite to test for
000DE1r 3               ;  ix		= current sprite pointer
000DE1r 3               ;
000DE1r 3               ; global:	b
000DE1r 3               ; local:	x,y,hl,de,skptr
000DE1r 3               ; calls:	-
000DE1r 3               ;--------------------------------------------------------------
000DE1r 3               
000DE1r 3               sktyp:
000DE1r 3  A9 rr        	lda #<sprtab				; sprite table.
000DE3r 3  85 rr        	sta z80_l
000DE5r 3  A9 rr        	lda #>sprtab
000DE7r 3  85 rr        	sta z80_h
000DE9r 3               numsp2:
000DE9r 3  A9 0C        	lda #NUMSPR				; number of sprites.
000DEBr 3  85 rr        	sta sktptr
000DEDr 3               sktyp0:
000DEDr 3  A5 rr        	lda z80_l 				; store pointer to sprite.
000DEFr 3  85 rr        	sta skptr
000DF1r 3  A5 rr        	lda z80_h
000DF3r 3  85 rr        	sta skptr+1
000DF5r 3               
000DF5r 3  A0 00        	ldy #0
000DF7r 3  B1 rr        	lda (z80_hl),y 				; get sprite type.
000DF9r 3  C5 rr        	cmp z80_b				; is it the type we seek?
000DFBr 3  F0 1D        	beq coltyp				; yes, we can use this one.
000DFDr 3               sktyp1:
000DFDr 3  18           	clc
000DFEr 3  A5 rr        	lda skptr				; retrieve sprite pointer.
000E00r 3  69 11        	adc #TABSIZ				; size of each entry.
000E02r 3  85 rr        	sta z80_l
000E04r 3  A5 rr        	lda skptr+1
000E06r 3  69 00        	adc #0
000E08r 3  85 rr        	sta z80_h
000E0Ar 3  C6 rr        	dec sktptr					; one less iteration.
000E0Cr 3  D0 DF        	bne sktyp0				; keep going until we find a slot.
000E0Er 3  A9 00        	lda #0					; default to ROM address - no sprite.
000E10r 3  85 rr        	sta z80_l
000E12r 3  85 rr        	sta z80_h
000E14r 3  85 rr        	sta skptr				; store pointer to sprite.
000E16r 3  85 rr        	sta skptr+1
000E18r 3               
000E18r 3  18           	clc					; don't return with zero flag set.
000E19r 3  60           	rts 					; didn't find one.
000E1Ar 3               
000E1Ar 3               coltyp:
000E1Ar 3  A0 00        	ldy #0
000E1Cr 3  B1 rr        	lda (z80_ix),y				; current sprite type.
000E1Er 3  C5 rr        	cmp z80_b				; seeking sprite of same type?
000E20r 3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
000E22r 3               colty0:
000E22r 3  A0 09        	ldy #9					; distance to x position in table.
000E24r 3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
000E26r 3  85 rr        	sta z80_e
000E28r 3  88           	dey
000E29r 3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
000E2Br 3  85 rr        	sta z80_d
000E2Dr 3               
000E2Dr 3               ; Drop into collision detection.
000E2Dr 3               
000E2Dr 3               colc16:
000E2Dr 3  A0 09        	ldy #9
000E2Fr 3  B1 rr        	lda (z80_ix),y			 	; x coord.
000E31r 3  38           	sec					; subtract x.
000E32r 3  E5 rr        	sbc z80_e
000E34r 3  B0 05        	bcs  colc1a 				; result is positive.
000E36r 3  49 FF        	eor #$ff				; make negative positive.
000E38r 3  18           	clc
000E39r 3  69 01        	adc #1
000E3Br 3               colc1a:
000E3Br 3  C9 10        	cmp #16 				; within x range?
000E3Dr 3  B0 BE        	bcs sktyp1				; no - they"ve missed.
000E3Fr 3  85 rr        	sta z80_c				; store difference.
000E41r 3               
000E41r 3  A0 08        	ldy #8
000E43r 3  B1 rr        	lda (z80_ix),y				; y coord.
000E45r 3  38           	sec
000E46r 3  E5 rr        	sbc z80_d				; subtract y.
000E48r 3  B0 05        	bcs colc1b				; result is positive.
000E4Ar 3  49 FF        	eor #$ff				; make negative positive.
000E4Cr 3  18           	clc
000E4Dr 3  69 01        	adc #1
000E4Fr 3               colc1b:
000E4Fr 3  C9 10        	cmp #16					; within y range?
000E51r 3  B0 AA        	bcs sktyp1 				; no - they've missed.
000E53r 3  18           	clc					; add x difference.
000E54r 3  65 rr        	adc z80_c
000E56r 3  C9 1A        	cmp #26					; only 5 corner pixels touching?
000E58r 3  B0 02        	bcs :+
000E5Ar 3  38           	sec
000E5Br 3  60           	rts 					; carry set if there's a collision.
000E5Cr 3               :
000E5Cr 3  4C rr rr     	jmp sktyp1				; try next sprite in table.
000E5Fr 3               colty1:
000E5Fr 3  A5 rr        	lda z80_x  				; compare the two.
000E61r 3  C5 rr        	cmp z80_l
000E63r 3  D0 09        	bne end_col
000E65r 3  A5 rr        	lda z80_i
000E67r 3  C5 rr        	cmp z80_h
000E69r 3  D0 03        	bne end_col
000E6Br 3  4C rr rr     	jmp sktyp1 				; addresses are identical.
000E6Er 3               end_col:
000E6Er 3  4C rr rr     	jmp colty0
000E71r 3               
000E71r 3               ;-----------------------------------------------------------
000E71r 3               ; Display number, left aligned
000E71r 3               ;
000E71r 3               ; Input:
000E71r 3               ;  a		= number
000E71r 3               ;
000E71r 3               ; global:	-
000E71r 3               ; local:	a,y,bc,hl,displ0
000E71r 3               ; calls:	num2ch,dmsg3
000E71r 3               ;-----------------------------------------------------------
000E71r 3               
000E71r 3               disply:
000E71r 3  85 rr        	sta z80_a
000E73r 3  A9 rr        	lda #<displ0				; display workspace.
000E75r 3  85 rr        	sta z80_c
000E77r 3  A9 rr        	lda #>displ0
000E79r 3  85 rr        	sta z80_b
000E7Br 3  A5 rr        	lda z80_a
000E7Dr 3  20 rr rr     	jsr num2ch				; convert accumulator to string.
000E80r 3               displ1:
000E80r 3  C6 rr        	dec z80_c				; back one character.
000E82r 3  D0 02        	bne :+
000E84r 3  C6 rr        	dec z80_b
000E86r 3               :
000E86r 3  A0 00        	ldy #0
000E88r 3  B1 rr        	lda (z80_bc),y				; fetch digit.
000E8Ar 3  09 80        	ora #128				; insert end marker.
000E8Cr 3  91 rr        	sta (z80_bc),y				; new value.
000E8Er 3               
000E8Er 3  A9 rr        	lda #<displ0				; display space.
000E90r 3  85 rr        	sta z80_l
000E92r 3  A9 rr        	lda #>displ0
000E94r 3  85 rr        	sta z80_h
000E96r 3  4C rr rr     	jmp dmsg3				; display the string.
000E99r 3               
000E99r 3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
000E9Dr 3               
000E9Dr 3               ;----------------------------------------------------------------
000E9Dr 3               ; Initialise screen.
000E9Dr 3               ;
000E9Dr 3               ; global:	roomtb,scno
000E9Dr 3               ; local:	-
000E9Dr 3               ; calls:	tstcs
000E9Dr 3               ;----------------------------------------------------------------
000E9Dr 3               
000E9Dr 3               initsc:
000E9Dr 3  AD rr rr     	lda roomtb 			; whereabouts in the map are we?
000EA0r 3  20 rr rr     	jsr tstsc 			; find displacement.
000EA3r 3  C9 FF        	cmp #255 			; is it valid?
000EA5r 3  F0 02        	beq init_end 			; no, it's rubbish.
000EA7r 3  85 rr        	sta scno			; store new room number.
000EA9r 3               init_end:
000EA9r 3  60           	rts
000EAAr 3               
000EAAr 3               ;----------------------------------------------------------------
000EAAr 3               ; Test screen.
000EAAr 3               ;
000EAAr 3               ; global:	-
000EAAr 3               ; local:	x
000EAAr 3               ; calls:	-
000EAAr 3               ;----------------------------------------------------------------
000EAAr 3               
000EAAr 3               tstsc:
000EAAr 3  85 rr        	sta tmproom
000EACr 3  18           	clc
000EADr 3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
000EAFr 3  AA           	tax 				; add displacement to map data.
000EB0r 3  BD rr rr     	lda mapdat-MAPWID,x 		; find room number there.
000EB3r 3  60           	rts
000EB4r 3               
000EB4r 3               ;--------------------------
000EB4r 3               ; Screen left.
000EB4r 3               ;--------------------------
000EB4r 3               
000EB4r 3               scrl:
000EB4r 3  AD rr rr     	lda roomtb 			; present room table pointer.
000EB7r 3  38           	sec
000EB8r 3  E9 01        	sbc #1				; room left.
000EBAr 3               scrl0:
000EBAr 3  20 rr rr     	jsr tstsc			; test screen.
000EBDr 3  C9 FF        	cmp #255			; is there a screen this way?
000EBFr 3  D0 01        	bne :+
000EC1r 3  60           	rts				; no, return to loop.
000EC2r 3               :
000EC2r 3  A5 rr        	lda tmproom			; restore room displacement.
000EC4r 3  8D rr rr     	sta roomtb			; new room table position.
000EC7r 3               scrl1:
000EC7r 3  20 rr rr     	jsr initsc 			; set new screen.
000ECAr 3  A9 02        	lda #2
000ECCr 3  85 rr        	sta restfl 			; set it.
000ECEr 3  60           	rts
000ECFr 3               scrr:
000ECFr 3  AD rr rr     	lda roomtb 			; room table pointer.
000ED2r 3  18           	clc
000ED3r 3  69 01        	adc #1				; room right.
000ED5r 3  4C rr rr     	jmp scrl0
000ED8r 3               scru:
000ED8r 3  AD rr rr     	lda roomtb 			; room table pointer.
000EDBr 3  38           	sec
000EDCr 3  E9 0D        	sbc #MAPWID 			; room up.
000EDEr 3  4C rr rr     	jmp scrl0
000EE1r 3               scrd:
000EE1r 3  AD rr rr     	lda roomtb 			; room table pointer.
000EE4r 3  18           	clc
000EE5r 3  69 0D        	adc #MAPWID 			; room down.
000EE7r 3  4C rr rr     	jmp scrl0
000EEAr 3               
000EEAr 3               ;-----------------------------------------
000EEAr 3               ; Jump to new screen.
000EEAr 3               ;-----------------------------------------
000EEAr 3               
000EEAr 3               nwscr:
000EEAr 3  A2 00        	ldx #0				; start of map data.
000EECr 3               nwscr0:
000EECr 3  DD rr rr     	cmp mapdat,x
000EEFr 3  F0 06        	beq nwscr1			; have we found a match for screen?
000EF1r 3  E8           	inx 				; next room.
000EF2r 3  E0 50        	cpx #80				; zero room count, 80 to search.
000EF4r 3  D0 F6        	bne nwscr0			; keep looking.
000EF6r 3  60           	rts
000EF7r 3               nwscr1:
000EF7r 3  8E rr rr     	stx roomtb			; set the map position.
000EFAr 3  4C rr rr     	jmp scrl1			; draw new room.
000EFDr 3               
000EFDr 3               
000EFDr 3               ;----------------------------------------------------------
000EFDr 3               ; Gravity processing.
000EFDr 3               ;----------------------------------------------------------
000EFDr 3               
000EFDr 3               grav:
000EFDr 3  A0 0D        	ldy #13
000EFFr 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000F01r 3  85 rr        	sta z80_l
000F03r 3  A0 0E        	ldy #14
000F05r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000F07r 3  85 rr        	sta z80_h
000F09r 3  05 rr        	ora z80_l			; merge in low byte.
000F0Br 3  D0 01        	bne :+
000F0Dr 3  60           	rts				; if neither is set, we're not in the air.
000F0Er 3               :
000F0Er 3  A0 00        	ldy #0
000F10r 3  B1 rr        	lda (z80_hl),y			; pixels to move.
000F12r 3  85 rr        	sta z80_a
000F14r 3  C9 63        	cmp #99				; reached the end?
000F16r 3  D0 0C        	bne grav0			; no, continue.
000F18r 3               grav2:
000F18r 3  C6 rr        	dec z80_l			; go back to previous value.
000F1Ar 3  C9 FF        	cmp #$ff
000F1Cr 3  D0 02        	bne :+
000F1Er 3  C6 rr        	dec z80_h
000F20r 3               :
000F20r 3  B1 rr        	lda (z80_hl),y			; fetch that from table.
000F22r 3  85 rr        	sta z80_a
000F24r 3               grav0:
000F24r 3  E6 rr        	inc z80_l			; point to next table entry.
000F26r 3  D0 02        	bne :+
000F28r 3  E6 rr        	inc z80_h
000F2Ar 3               :
000F2Ar 3  A5 rr        	lda z80_l
000F2Cr 3  A0 0D        	ldy #13
000F2Er 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000F30r 3  A5 rr        	lda z80_h
000F32r 3  A0 0E        	ldy #14
000F34r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000F36r 3               grav1:
000F36r 3  A5 rr        	lda z80_a
000F38r 3  D0 01        	bne :+				; any movement required?
000F3Ar 3  60           	rts				; no, not this time.
000F3Br 3               :
000F3Br 3  A5 rr        	lda z80_a
000F3Dr 3  C9 80        	cmp #128			; is it up or down?
000F3Fr 3  B0 15        	bcs gravu			; it's up.
000F41r 3               gravd:
000F41r 3  85 rr        	sta z80_b			; set pixels to move.
000F43r 3               gravd0:
000F43r 3  20 rr rr     	jsr cangd			; can we go down?
000F46r 3  D0 28        	bne gravst			; can't move down, so stop.
000F48r 3  A0 08        	ldy #8
000F4Ar 3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
000F4Cr 3  18           	clc
000F4Dr 3  69 01        	adc #1
000F4Fr 3  91 rr        	sta (z80_ix),y
000F51r 3  C6 rr        	dec z80_b
000F53r 3  D0 EE        	bne gravd0
000F55r 3  60           	rts
000F56r 3               gravu:
000F56r 3  49 FF        	eor #$ff			; flip the sign so it's positive.
000F58r 3  18           	clc
000F59r 3  69 01        	adc #1
000F5Br 3  85 rr        	sta z80_b			; set pixels to move.
000F5Dr 3               gravu0:
000F5Dr 3  20 rr rr     	jsr cangu			; can we go up?
000F60r 3  D0 6E        	bne ifalls			; can't move up, go down next.
000F62r 3  A0 08        	ldy #8
000F64r 3  B1 rr        	lda (z80_ix),y
000F66r 3  38           	sec
000F67r 3  E9 01        	sbc #1
000F69r 3  91 rr        	sta (z80_ix),y			; adjust new x coord.
000F6Br 3  C6 rr        	dec z80_b
000F6Dr 3  D0 EE        	bne gravu0
000F6Fr 3  60           	rts
000F70r 3               gravst:
000F70r 3  A0 0D        	ldy #var_jumpLo
000F72r 3  B1 rr        	lda (z80_ix),y			; jump pointer low.
000F74r 3  85 rr        	sta z80_l
000F76r 3  A0 0E        	ldy #var_jumpHi
000F78r 3  B1 rr        	lda (z80_ix),y			; jump pointer high.
000F7Ar 3  85 rr        	sta z80_h
000F7Cr 3               
000F7Cr 3  A9 00        	lda #0				; null value in pointer.
000F7Er 3  A0 0D        	ldy #var_jumpLo
000F80r 3  91 rr        	sta (z80_ix),y			; store new pointer low.
000F82r 3  C8           	iny
000F83r 3  91 rr        	sta (z80_ix),y			; store new pointer high.
000F85r 3               
000F85r 3  A0 00        	ldy #0
000F87r 3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
000F89r 3  C9 63        	cmp #99				; is it the end marker?
000F8Br 3               evftf:
000F8Br 3  F0 01        	beq :+				; yes, fallen too far.
000F8Dr 3  60           	rts
000F8Er 3               :
000F8Er 3  4C rr rr     	jmp evnt15			; EVENT FELLTOOFAR
000F91r 3               
000F91r 3               ;------------------------------------------------
000F91r 3               ; Initiate fall check.
000F91r 3               ;------------------------------------------------
000F91r 3               
000F91r 3               ifall:
000F91r 3  A0 0D        	ldy #var_jumpLo
000F93r 3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
000F95r 3  85 rr        	sta z80_l
000F97r 3  A0 0E        	ldy #var_jumpHi
000F99r 3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
000F9Br 3  85 rr        	sta z80_h			; high byte in accumulator.
000F9Dr 3  05 rr        	ora z80_l			; merge in low byte.
000F9Fr 3  F0 01        	beq :+
000FA1r 3  60           	rts				; if either is set, we're already in the air.
000FA2r 3               :
000FA2r 3  A0 09        	ldy #9
000FA4r 3  B1 rr        	lda (z80_ix),y			; y coordinate.
000FA6r 3  85 rr        	sta dispx
000FA8r 3  A0 08        	ldy #8
000FAAr 3  B1 rr        	lda (z80_ix),y			; look x coordinate.
000FACr 3  18           	clc
000FADr 3               numsp7:
000FADr 3  69 10        	adc #SPR_HGT			; add 16 pixels.
000FAFr 3  85 rr        	sta dispy			; set up test coordinates.
000FB1r 3  20 rr rr     	jsr tstbl			; get map address.
000FB4r 3  20 rr rr     	jsr plchk			; block, platform check.
000FB7r 3  F0 01        	beq :+
000FB9r 3  60           	rts				; it's solid, don't fall.
000FBAr 3               :
000FBAr 3  E6 rr        	inc bufaddr			; look right one cell.
000FBCr 3  20 rr rr     	jsr plchk			; block, platform check.
000FBFr 3  F0 01        	beq :+
000FC1r 3  60           	rts				; it's solid, don't fall.
000FC2r 3               :
000FC2r 3  A5 rr        	lda dispx			; y coordinate.
000FC4r 3  29 07        	and #7				; position straddling block cells.
000FC6r 3  F0 08        	beq ifalls			; no more checks needed.
000FC8r 3  E6 rr        	inc bufaddr			; look to third cell.
000FCAr 3  20 rr rr     	jsr plchk			; block, platform check.
000FCDr 3  F0 01        	beq :+
000FCFr 3  60           	rts				; it's solid, don't fall.
000FD0r 3               :
000FD0r 3               ifalls:
000FD0r 3  A9 rr        	lda #<jtab			; jump table start.
000FD2r 3  85 rr        	sta z80_l
000FD4r 3  A9 rr        	lda #>jtab
000FD6r 3  85 rr        	sta z80_h
000FD8r 3               ifal0:
000FD8r 3  E6 rr        	inc z80_l			; point to next value.
000FDAr 3  D0 02        	bne :+
000FDCr 3  E6 rr        	inc z80_h
000FDEr 3               :
000FDEr 3  A0 00        	ldy #0
000FE0r 3  B1 rr        	lda (z80_hl),y			; fetch value.
000FE2r 3  F0 F4        	beq ifal0			; no, get next value.
000FE4r 3  C9 63        	cmp #99				; reached end of table?
000FE6r 3  D0 01        	bne :+
000FE8r 3  60           	rts				; yes, don't fall.
000FE9r 3               :
000FE9r 3  C9 80        	cmp #128			; is it going up?
000FEBr 3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
000FEDr 3               
000FEDr 3  A0 0D        	ldy #13
000FEFr 3  A5 rr        	lda z80_l
000FF1r 3  91 rr        	sta (z80_ix),y 			; set jump low.
000FF3r 3  A0 0E        	ldy #14
000FF5r 3  A5 rr        	lda z80_h
000FF7r 3  91 rr        	sta (z80_ix),y 			; set jump high.
000FF9r 3  60           	rts
000FFAr 3               
000FFAr 3               
000FFAr 3               ;----------------------------------------------------
000FFAr 3               ; Get frame data for a particular sprite.
000FFAr 3               ; Input:
000FFAr 3               ;  a		= framenumer
000FFAr 3               ; Output:
000FFAr 3               ;  hl		= frame address
000FFAr 3               ;
000FFAr 3               ; global:	hl,frmptr
000FFAr 3               ; local:	-
000FFAr 3               ; calls:	-
000FFAr 3               ;----------------------------------------------------
000FFAr 3               
000FFAr 3               gfrm:
000FFAr 3  0A           	asl a	 		 	; multiple of 2.
000FFBr 3  18           	clc
000FFCr 3  6D rr rr     	adc frmptr 			; frames used by game.
000FFFr 3  85 rr        	sta z80_l
001001r 3  AD rr rr     	lda frmptr+1
001004r 3  69 00        	adc #0
001006r 3  85 rr        	sta z80_h 			; point to frame start.
001008r 3  60           	rts
001009r 3               
001009r 3               ;----------------------------------------------------
001009r 3               ; Find sprite list for current room.
001009r 3               ;
001009r 3               ; global:	hl
001009r 3               ; local:	x,y
001009r 3               ; calls:	-
001009r 3               ;----------------------------------------------------
001009r 3               
001009r 3               sprlst:
001009r 3  A9 rr        	lda #<nmedat 			; list of enemy sprites.
00100Br 3  85 rr        	sta z80_l
00100Dr 3  A9 rr        	lda #>nmedat
00100Fr 3  85 rr        	sta z80_h
001011r 3  A6 rr        	ldx scno 			; screen number.
001013r 3  D0 01        	bne sprls2 			; is it the first screen?
001015r 3  60           	rts 				; yes, don't need to search data.
001016r 3               sprls2:
001016r 3  A0 00        	ldy #0
001018r 3               sprls1:
001018r 3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
00101Ar 3  C9 FF        	cmp #255			; is it an end marker?
00101Cr 3  F0 0E        	beq sprls0 			; yes, end of this room.
00101Er 3               
00101Er 3  18           	clc 				; point to next sprite in list.
00101Fr 3  A5 rr        	lda z80_l
001021r 3  69 04        	adc #NMESIZ
001023r 3  85 rr        	sta z80_l
001025r 3  90 02        	bcc :+
001027r 3  E6 rr        	inc z80_h
001029r 3               :
001029r 3  4C rr rr     	jmp sprls1 			; continue until end of room.
00102Cr 3               sprls0:
00102Cr 3  E6 rr        	inc z80_l 			; point to start of next screen.s
00102Er 3  D0 02        	bne :+
001030r 3  E6 rr        	inc z80_h
001032r 3               :
001032r 3  CA           	dex
001033r 3  D0 E3        	bne sprls1 			; continue until room found.
001035r 3  60           	rts
001036r 3               
001036r 3               
001036r 3               ;----------------------------------------------------
001036r 3               ; Clear all but a single player sprite.
001036r 3               ;
001036r 3               ; global:	-
001036r 3               ; local:	x,y,ix
001036r 3               ; calls:	-
001036r 3               ;----------------------------------------------------
001036r 3               
001036r 3               nspr:
001036r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001038r 3  85 rr        	sta sprcnt
00103Ar 3  A9 rr        	lda #<sprtab 			; sprite table.
00103Cr 3  85 rr        	sta z80_x
00103Er 3  A9 rr        	lda #>sprtab
001040r 3  85 rr        	sta z80_i
001042r 3               nspr0:
001042r 3  A0 00        	ldy #0 				; fetch sprite type.
001044r 3  B1 rr        	lda (z80_ix),y 			; is it a player?
001046r 3  F0 1A        	beq nspr1 			; yes, keep this one.
001048r 3               
001048r 3  A9 FF        	lda #255
00104Ar 3  A0 00        	ldy #0 				; fetch sprite type.
00104Cr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00104Er 3  A0 05        	ldy #5
001050r 3  91 rr        	sta (z80_ix),y 			; remove next type.
001052r 3               
001052r 3  18           	clc	 			; next sprite.
001053r 3  A5 rr        	lda z80_x
001055r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001057r 3  85 rr        	sta z80_x
001059r 3  90 02        	bcc :+
00105Br 3  E6 rr        	inc z80_i
00105Dr 3               :
00105Dr 3  C6 rr        	dec sprcnt	 			; one less space in the table.
00105Fr 3  D0 E1        	bne nspr0
001061r 3  60           	rts
001062r 3               nspr1:
001062r 3  A9 FF        	lda #255
001064r 3  A0 00        	ldy #0
001066r 3  91 rr        	sta (z80_ix),y 			; delete sprite.
001068r 3               
001068r 3  18           	clc	 			; point to next sprite.
001069r 3  A5 rr        	lda z80_x
00106Br 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00106Dr 3  85 rr        	sta z80_x
00106Fr 3  90 02        	bcc :+
001071r 3  E6 rr        	inc z80_i
001073r 3               :
001073r 3  C6 rr        	dec sprcnt	 			; one less to do.
001075r 3  D0 01        	bne nspr2
001077r 3  60           	rts
001078r 3               nspr2:
001078r 3  A9 FF        	lda #255
00107Ar 3  A0 00        	ldy #0
00107Cr 3  91 rr        	sta (z80_ix),y 			; delete sprite.
00107Er 3  A0 05        	ldy #5
001080r 3  91 rr        	sta (z80_ix),y 			; remove next type.
001082r 3               
001082r 3  18           	clc	 			; next sprite.
001083r 3  A5 rr        	lda z80_x
001085r 3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
001087r 3  85 rr        	sta z80_x
001089r 3  90 02        	bcc :+
00108Br 3  E6 rr        	inc z80_i
00108Dr 3               :
00108Dr 3  C6 rr        	dec sprcnt	 			; one less space in table.
00108Fr 3  D0 E7        	bne nspr2
001091r 3  60           	rts
001092r 3               
001092r 3               ;----------------------------------------------------------
001092r 3               ; Two initialisation routines.
001092r 3               ; Initialise sprites - copy everything from list to table.
001092r 3               ;
001092r 3               ; global:	-
001092r 3               ; local:	x,y,ix
001092r 3               ; calls:	cpsp
001092r 3               ;----------------------------------------------------------
001092r 3               
001092r 3               ispr:
001092r 3  A9 0C        	lda #NUMSPR			; sprite slots in table.
001094r 3  85 rr        	sta sprcnt
001096r 3  A9 rr        	lda #<sprtab			; sprite table.
001098r 3  85 rr        	sta z80_x
00109Ar 3  A9 rr        	lda #>sprtab
00109Cr 3  85 rr        	sta z80_i
00109Er 3               ispr2:
00109Er 3  A0 00        	ldy #0
0010A0r 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0010A2r 3  C9 FF        	cmp #255 			; is it an end marker?
0010A4r 3  D0 01        	bne :+
0010A6r 3  60           	rts 				; yes, no more to do.
0010A7r 3               :
0010A7r 3               ispr1:
0010A7r 3  A0 00        	ldy #0
0010A9r 3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
0010ABr 3  C9 FF        	cmp #255 			; is it enabled yet?
0010ADr 3  D0 08        	bne ispr4			; yes, try another slot.
0010AFr 3               
0010AFr 3  A0 05        	ldy #5
0010B1r 3  B1 rr        	lda (z80_ix),y		 	; next type.
0010B3r 3  C9 FF        	cmp #255 			; is it enabled yet?
0010B5r 3  F0 10        	beq ispr3 			; no, process this one.
0010B7r 3               ispr4:
0010B7r 3  18           	clc 				; next sprite.
0010B8r 3  A5 rr        	lda z80_x
0010BAr 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
0010BCr 3  85 rr        	sta z80_x
0010BEr 3  90 02        	bcc :+
0010C0r 3  E6 rr        	inc z80_i
0010C2r 3               :
0010C2r 3  C6 rr        	dec sprcnt
0010C4r 3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
0010C6r 3  60           	rts  				; no more room in table.
0010C7r 3               ispr3:
0010C7r 3  20 rr rr     	jsr cpsp			; initialise a sprite.
0010CAr 3  C6 rr        	dec sprcnt			; one less space in the table.
0010CCr 3  D0 D0        	bne ispr2
0010CEr 3  60           	rts
0010CFr 3               
0010CFr 3               
0010CFr 3               ;-----------------------------------------------------------------------
0010CFr 3               ; Initialise sprites - but not player, we're keeping the old one.
0010CFr 3               ;
0010CFr 3               ; global:	-
0010CFr 3               ; local:	x,y,ix
0010CFr 3               ; calls:	cpsp
0010CFr 3               ;-----------------------------------------------------------------------
0010CFr 3               
0010CFr 3               kspr:
0010CFr 3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
0010D1r 3  A9 rr        	lda #<sprtab 			; sprite table.
0010D3r 3  85 rr        	sta z80_x
0010D5r 3  A9 rr        	lda #>sprtab
0010D7r 3  85 rr        	sta z80_i
0010D9r 3               kspr2:
0010D9r 3  A0 00        	ldy #0
0010DBr 3  B1 rr        	lda (z80_hl),y 			; fetch byte.
0010DDr 3  C9 FF        	cmp #255 			; is it an end marker?
0010DFr 3  D0 01        	bne :+
0010E1r 3  60           	rts 				; yes, no more to do.
0010E2r 3               :
0010E2r 3  C9 00        	cmp #0
0010E4r 3  D0 0E        	bne kspr1 			; no, add to table as normal.
0010E6r 3               
0010E6r 3  18           	clc 				; next sprite.
0010E7r 3  A5 rr        	lda z80_l
0010E9r 3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
0010EBr 3  85 rr        	sta z80_l
0010EDr 3  90 02        	bcc :+
0010EFr 3  E6 rr        	inc z80_h
0010F1r 3               :
0010F1r 3  4C rr rr     	jmp kspr2
0010F4r 3               kspr1:
0010F4r 3  A0 00        	ldy #0 				; fetch sprite type.
0010F6r 3  B1 rr        	lda (z80_ix),y
0010F8r 3  C9 FF        	cmp #255 			; is it enabled yet?
0010FAr 3  D0 08        	bne kspr4 			; yes, try another slot.
0010FCr 3               
0010FCr 3  A0 05        	ldy #5 				; next type.
0010FEr 3  B1 rr        	lda (z80_ix),y
001100r 3  C9 FF        	cmp #255 			; is it enabled yet?
001102r 3  F0 0F        	beq kspr3 			; no, process this one.
001104r 3               kspr4:
001104r 3  18           	clc 				; next sprite.
001105r 3  A5 rr        	lda z80_x
001107r 3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
001109r 3  85 rr        	sta z80_x
00110Br 3  90 02        	bcc :+
00110Dr 3  E6 rr        	inc z80_i
00110Fr 3               :
00110Fr 3  CA           	dex	 			; repeat for remaining sprites.
001110r 3  D0 E2        	bne kspr1
001112r 3  60           	rts  				; no more room in table.
001113r 3               kspr3:
001113r 3  20 rr rr     	jsr cpsp 			; copy sprite to table.
001116r 3  CA           	dex	 			; one less space in the table.
001117r 3  D0 C0        	bne kspr2
001119r 3  60           	rts
00111Ar 3               
00111Ar 3               ;----------------------------------------------
00111Ar 3               ; Copy sprite from list to table.
00111Ar 3               ;
00111Ar 3               ; global:	hl,ix
00111Ar 3               ; local:	y
00111Ar 3               ; calls:	evnt09
00111Ar 3               ;----------------------------------------------
00111Ar 3               
00111Ar 3               cpsp:
00111Ar 3  A0 00        	ldy #0					; fetch byte from table.
00111Cr 3  B1 rr        	lda (z80_hl),y
00111Er 3               	; y=var_Type
00111Er 3  91 rr        	sta (z80_ix),y			; set up type.
001120r 3  A0 05        	ldy #var_newType
001122r 3  91 rr        	sta (z80_ix),y 			; set up type.
001124r 3               
001124r 3  E6 rr        	inc z80_l 				; move to next byte.
001126r 3  D0 02        	bne :+
001128r 3  E6 rr        	inc z80_h
00112Ar 3               :
00112Ar 3  A0 00        	ldy #0 					; fetch byte from table.
00112Cr 3  B1 rr        	lda (z80_hl),y
00112Er 3  A0 06        	ldy #var_newImage
001130r 3  91 rr        	sta (z80_ix),y			; set up image.
001132r 3               
001132r 3  E6 rr        	inc z80_l 				; move to next byte.
001134r 3  D0 02        	bne :+
001136r 3  E6 rr        	inc z80_h
001138r 3               :
001138r 3  A0 00        	ldy #0
00113Ar 3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
00113Cr 3  A0 08        	ldy #var_newY
00113Er 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
001140r 3               
001140r 3  A9 C8        	lda #200 				; set initial coordinate off screen.
001142r 3  A0 03        	ldy #var_Y
001144r 3  91 rr        	sta (z80_ix),y
001146r 3               
001146r 3  E6 rr        	inc z80_l 				; move to next byte.
001148r 3  D0 02        	bne :+
00114Ar 3  E6 rr        	inc z80_h
00114Cr 3               :
00114Cr 3  A0 00        	ldy #0 					; fetch byte from table.
00114Er 3  B1 rr        	lda (z80_hl),y
001150r 3  A0 09        	ldy #var_newX
001152r 3  91 rr        	sta (z80_ix),y 			; set up coordinate.
001154r 3               
001154r 3  E6 rr        	inc z80_l 				; move to next byte.
001156r 3  D0 02        	bne :+
001158r 3  E6 rr        	inc z80_h
00115Ar 3               :
00115Ar 3  A9 00        	lda #0					; zeroes in accumulator.
00115Cr 3  A0 07        	ldy #var_newFrame 		; reset frame number.
00115Er 3  91 rr        	sta (z80_ix),y
001160r 3  A0 0A        	ldy #var_Direction 		; reset direction.
001162r 3  91 rr        	sta (z80_ix),y
001164r 3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
001166r 3  91 rr        	sta (z80_ix),y
001168r 3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
00116Ar 3  91 rr        	sta (z80_ix),y
00116Cr 3               
00116Cr 3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
00116Er 3  A0 10        	ldy #var_dataHi
001170r 3  91 rr        	sta (z80_ix),y
001172r 3               evis0:
001172r 3  A5 rr        	lda z80_i
001174r 3  48           	pha
001175r 3  A5 rr        	lda z80_x
001177r 3  48           	pha
001178r 3  A5 rr        	lda z80_h
00117Ar 3  48           	pha
00117Br 3  A5 rr        	lda z80_l
00117Dr 3  48           	pha
00117Er 3               
00117Er 3  20 rr rr     	jsr evnt09 				; perform event.
001181r 3               
001181r 3  68           	pla
001182r 3  85 rr        	sta z80_l
001184r 3  68           	pla
001185r 3  85 rr        	sta z80_h
001187r 3  68           	pla
001188r 3  85 rr        	sta z80_x
00118Ar 3  68           	pla
00118Br 3  85 rr        	sta z80_i
00118Dr 3               
00118Dr 3  18           	clc
00118Er 3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
001190r 3  69 11        	adc #TABSIZ		 	; next sprite.
001192r 3  85 rr        	sta z80_x
001194r 3  90 02        	bcc :+
001196r 3  E6 rr        	inc z80_i
001198r 3               :
001198r 3  60           	rts
001199r 3               
001199r 3               
001199r 3               ;-------------------------------------
001199r 3               ; Clear the play area window.
001199r 3               ;-------------------------------------
001199r 3               
001199r 3               clw:
001199r 3  AD rr rr     	lda wintop			; get coordinates of window.
00119Cr 3  85 rr        	sta dispy			; put into dispx for calculation.
00119Er 3  AD rr rr     	lda winlft
0011A1r 3  85 rr        	sta dispx
0011A3r 3               
0011A3r 3  AD rr rr     	lda winhgt			; height of window.
0011A6r 3  85 rr        	sta rrow			; copy to b register.
0011A8r 3               clw3:
0011A8r 3  AD rr rr     	lda winwid 			; width of window.
0011ABr 3  85 rr        	sta rcol
0011ADr 3               clw2:
0011ADr 3  20 rr rr     	jsr gprad 			; get print address.
0011B0r 3  A9 00        	lda #0				; zero byte to write.
0011B2r 3  A2 07        	ldx #7				; pixel height of each cell.
0011B4r 3               clw1:
0011B4r 3  BC rr rr     	ldy scrtab,x
0011B7r 3  91 rr        	sta (scraddr),y 			; copy to screen.
0011B9r 3  CA           	dex				; next screen row down.
0011BAr 3  10 F8        	bpl clw1
0011BCr 3               
0011BCr 3  E6 rr        	inc dispx			; next column.
0011BEr 3  C6 rr        	dec rcol			; one less to do.
0011C0r 3  D0 EB        	bne clw2			; repeat for remaining columns.
0011C2r 3               
0011C2r 3  AD rr rr     	lda winlft			; get left edge.
0011C5r 3  85 rr        	sta dispx 			; reset x.
0011C7r 3  E6 rr        	inc dispy 			; next line down.
0011C9r 3               
0011C9r 3  C6 rr        	dec rrow
0011CBr 3  D0 DB        	bne clw3			; repeat down the screen.
0011CDr 3               
0011CDr 3  AD rr rr     	lda wintop			; get coordinates of window.
0011D0r 3  85 rr        	sta chary			; put into display position.
0011D2r 3  AD rr rr     	lda winlft
0011D5r 3  85 rr        	sta charx
0011D7r 3  60           	rts
0011D8r 3               
0011D8r 3               
0011D8r 3               ;----------------------------------------------------------
0011D8r 3               ; Effects code.
0011D8r 3               ; Ticker routine is called 25 times per second.
0011D8r 3               ;
0011D8r 3               ; txtini = text scroller address
0011D8r 3               ; txtscr = left text screen address
0011D8r 3               ; txtwid = scroller width
0011D8r 3               ; txtbit = 128
0011D8r 3               ; X      = message nr
0011D8r 3               ;----------------------------------------------------------
0011D8r 3               
0011D8r 3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
0011DCr 3  20 28 30 38  
0011E0r 3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
0011E4r 3  60 68 70 78  
0011E8r 3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
0011ECr 3  A0 A8 B0 B8  
0011F0r 3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
0011F4r 3  E0 E8 F0 F8  
0011F8r 3               .if sflag
0011F8r 3               scrly:
0011F8r 3               	rts
0011F8r 3               	.word txtscr         	; set scr_l = left screen address.
0011F8r 3               	sta scr_l
0011F8r 3               	sta tmp_byte		; tmp_byte = lb left screen address
0011F8r 3               	lda txtscr+1
0011F8r 3               	sta scr_l+1
0011F8r 3               	sta scr_r+1		; set hb scr_r = hb left screen address
0011F8r 3               
0011F8r 3               	stx xtmp		; save x
0011F8r 3               
0011F8r 3               	ldx txtwid
0011F8r 3               	dex
0011F8r 3               	ldy scrollpos,x
0011F8r 3               	tya
0011F8r 3               	clc
0011F8r 3               	adc scr_l
0011F8r 3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
0011F8r 3               
0011F8r 3               	lda #8
0011F8r 3               	sta line_cnt
0011F8r 3               scrly1:
0011F8r 3               	ldx txtwid		; set txtwide
0011F8r 3               	dex
0011F8r 3               	clc
0011F8r 3               scrly0:
0011F8r 3               	ldy scrollpos,x
0011F8r 3               	lda (scr_l),y		; scroll 1 line
0011F8r 3               	rol a
0011F8r 3               	sta (scr_l),y
0011F8r 3               	dex
0011F8r 3               	bpl scrly0
0011F8r 3               
0011F8r 3               	inc scr_l
0011F8r 3               	dec line_cnt
0011F8r 3               	bne scrly1		; repeat 8 times
0011F8r 3               
0011F8r 3               	lda txtpos 		; get text pointer.
0011F8r 3               	sta scr_txt
0011F8r 3               	lda txtpos+1
0011F8r 3               	sta scr_txt+1
0011F8r 3               
0011F8r 3               	ldy #0
0011F8r 3               	lda (scr_txt),y 	; find character we're displaying.
0011F8r 3               	and #127 		; remove end marker bit if applicable.
0011F8r 3               	cmp #13			; is it newline?
0011F8r 3               	bne scrly5 		; no, it's okay.
0011F8r 3               	lda #32			; convert to a space instead.
0011F8r 3               scrly5:
0011F8r 3               	sta fntaddr		; calculate char address
0011F8r 3               	lda #0
0011F8r 3               	sta fntaddr+1
0011F8r 3               	asl fntaddr  		; multiply char by 8.
0011F8r 3               	rol fntaddr+1
0011F8r 3               	asl fntaddr
0011F8r 3               	rol fntaddr+1
0011F8r 3               	asl fntaddr
0011F8r 3               	rol fntaddr+1
0011F8r 3               	lda fntaddr
0011F8r 3               	clc
0011F8r 3               	adc #<(FONT-256)
0011F8r 3               	sta scrly3+1		; that's the low byte.
0011F8r 3               	lda fntaddr+1
0011F8r 3               	adc #>(FONT-256)
0011F8r 3               	sta scrly3+2		; add displacement.
0011F8r 3               
0011F8r 3               	ldy #0
0011F8r 3               scrly3:
0011F8r 3               	lda $3333,y		; get image of char line.
0011F8r 3               	and txtbit
0011F8r 3               	beq scrly2		; don't plot pixel
0011F8r 3               	lda (scr_r),y
0011F8r 3               	clc
0011F8r 3               	ora #1
0011F8r 3               	sta (scr_r),y		; plot pixel
0011F8r 3               scrly2:
0011F8r 3               	iny			; next line of char.
0011F8r 3               	cpy #8
0011F8r 3               	bne scrly3
0011F8r 3               
0011F8r 3               	lsr txtbit		; bit of text to display.
0011F8r 3               	bcs :+
0011F8r 3               	rts
0011F8r 3               :
0011F8r 3               	ldy #0
0011F8r 3               	lda (scr_txt),y 	; what was the character?
0011F8r 3               	asl a	  		; end of message?
0011F8r 3               	bcs scrly4
0011F8r 3               	inc txtpos
0011F8r 3               	bne :+
0011F8r 3               	inc txtpos+1
0011F8r 3               :
0011F8r 3               	jmp scrly6 		; not yet - continue.
0011F8r 3               scrly4:
0011F8r 3               	lda txtini 		; start of scrolling message.
0011F8r 3               	sta txtpos
0011F8r 3               	lda txtini+1
0011F8r 3               	sta txtpos+1
0011F8r 3               scrly6:
0011F8r 3               	lda #128
0011F8r 3               	sta txtbit
0011F8r 3               	ldx xtmp
0011F8r 3               	rts
0011F8r 3               
0011F8r 3               ;scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
0011F8r 3               tmp_byte:	.byte 0
0011F8r 3               line_cnt:	.byte 0
0011F8r 3               
0011F8r 3               ;-------------------------------------------------------
0011F8r 3               ; Entry TICKER command
0011F8r 3               ;
0011F8r 3               ; Entry:
0011F8r 3               ;  z80_b = message nr
0011F8r 3               ;  z80_c = width
0011F8r 3               ;-------------------------------------------------------
0011F8r 3               
0011F8r 3               iscrly:
0011F8r 3               	jsr prescr 		; set up display position.
0011F8r 3               	lda #<msgdat 		; text messages.
0011F8r 3               	sta z80_l
0011F8r 3               	lda #>msgdat
0011F8r 3               	sta z80_h
0011F8r 3               	lda z80_c 		; width.
0011F8r 3               	sec
0011F8r 3               	sbc #1			; subtract one.
0011F8r 3               	cmp #32 		; is it between 1 and 32?
0011F8r 3               	bcc :+
0011F8r 3               	lda #$60
0011F8r 3               	jmp iscrl0		; no, disable messages.
0011F8r 3               :
0011F8r 3               	ldx z80_b		; message number.
0011F8r 3               	jsr getwrd 		; find message start.
0011F8r 3               
0011F8r 3               	lda z80_l		; set initial text position.
0011F8r 3               	sta txtini
0011F8r 3               	lda z80_h
0011F8r 3               	sta txtini+1
0011F8r 3               
0011F8r 3               	lda #$ad		; code for lda adrr
0011F8r 3               iscrl0:
0011F8r 3               	sta scrly		; enable/disable scrolling routine.
0011F8r 3               
0011F8r 3               	jsr prescr 		; set up display position.
0011F8r 3               	jsr gprad 		; get print address.
0011F8r 3               
0011F8r 3               	lda scraddr 		; set text screen address.
0011F8r 3               	sta txtscr
0011F8r 3               	lda scraddr+1
0011F8r 3               	sta txtscr+1
0011F8r 3               
0011F8r 3               	lda z80_c		; width.
0011F8r 3               	sta txtwid		; set width in working storage.
0011F8r 3               
0011F8r 3               	lda #128 		; start with leftmost bit.
0011F8r 3               	sta txtbit
0011F8r 3               
0011F8r 3               	jmp scrly4
0011F8r 3               .endif
0011F8r 3               
0011F8r 3               ;------------------------------------------------------------------
0011F8r 3               ; Dig routine, conditional assembly depending on dflag
0011F8r 3               ;------------------------------------------------------------------
0011F8r 3               .if dflag
0011F8r 3               dig:
0011F8r 3               	and #3
0011F8r 3               	beq digr		; dig right
0011F8r 3               	cmp #1
0011F8r 3               	beq digl		; dig left
0011F8r 3               	cmp #2
0011F8r 3               	beq digd		; dig down
0011F8r 3               
0011F8r 3               ; Dig up.
0011F8r 3               
0011F8r 3               digu:				; dig up
0011F8r 3               	ldy #8
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	sec
0011F8r 3               	sbc #2
0011F8r 3               	sta dispy		; set y
0011F8r 3               
0011F8r 3               	iny
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	sta dispx		; set x
0011F8r 3               	jmp digv
0011F8r 3               
0011F8r 3               ; Dig down.
0011F8r 3               
0011F8r 3               digd:
0011F8r 3               	ldy #9
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	sta dispx		; set y
0011F8r 3               
0011F8r 3               	dey
0011F8r 3               	clc
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	adc #16
0011F8r 3               	sta dispy		; set y
0011F8r 3               	jmp digv
0011F8r 3               
0011F8r 3               ; Dig left.
0011F8r 3               
0011F8r 3               digl:
0011F8r 3               	ldy #8
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	sta dispy		; set y
0011F8r 3               
0011F8r 3               	iny
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	sec
0011F8r 3               	sbc #2			; x=x-2
0011F8r 3               	sta dispx		; set x
0011F8r 3               	jmp digh
0011F8r 3               
0011F8r 3               ; Dig right.
0011F8r 3               
0011F8r 3               digr:
0011F8r 3               	ldy #8
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	sta dispy		; set y
0011F8r 3               
0011F8r 3               	iny
0011F8r 3               	lda (z80_ix),y
0011F8r 3               	clc
0011F8r 3               	adc #16
0011F8r 3               	sta dispx		; set x+16
0011F8r 3               	jmp digh
0011F8r 3               
0011F8r 3               ; Vertical digging
0011F8r 3               
0011F8r 3               digv:
0011F8r 3               	jsr tstbl		; check blocktype in MAP
0011F8r 3               	jsr fdchk		; test if FODDER
0011F8r 3               
0011F8r 3               	clc
0011F8r 3               	lda dispx		; look 1 cell down
0011F8r 3               	adc #8
0011F8r 3               	sta dispx
0011F8r 3               	jsr tstbl		; check blocktype in MAP
0011F8r 3               	jsr fdchk
0011F8r 3               	lda dispx
0011F8r 3               	and #7
0011F8r 3               	bne :+
0011F8r 3               	rts
0011F8r 3               :
0011F8r 3               	clc
0011F8r 3               	lda dispx		; look 1 cell down
0011F8r 3               	adc #8
0011F8r 3               	sta dispx
0011F8r 3               	jsr tstbl		; check blocktype in MAP
0011F8r 3               	jmp fdchk
0011F8r 3               
0011F8r 3               ; Horizontal digging
0011F8r 3               
0011F8r 3               digh:
0011F8r 3               	jsr tstbl		; check blocktype in MAP
0011F8r 3               	jsr fdchk		; test if FODDER
0011F8r 3               
0011F8r 3               	clc
0011F8r 3               	lda dispy		; look 1 cell down
0011F8r 3               	adc #8
0011F8r 3               	sta dispy
0011F8r 3               	jsr tstbl		; check blocktype in MAP
0011F8r 3               	jsr fdchk
0011F8r 3               	lda dispy
0011F8r 3               	and #7
0011F8r 3               	bne :+
0011F8r 3               	rts
0011F8r 3               :
0011F8r 3               	clc
0011F8r 3               	lda dispy		; look 1 cell down
0011F8r 3               	adc #8
0011F8r 3               	sta dispy
0011F8r 3               	jsr tstbl		; check blocktype in MAP
0011F8r 3               	jmp fdchk
0011F8r 3               
0011F8r 3               digcnt:	.byte 0
0011F8r 3               
0011F8r 3               .endif
0011F8r 3               
0011F8r 3               ;------------------------------------------------------------------
0011F8r 3               ; Sprite table
0011F8r 3               ;------------------------------------------------------------------
0011F8r 3               
0011F8r 3               
0011F8r 3               ; ix+0  = type.
0011F8r 3               ; ix+1  = sprite image number.
0011F8r 3               ; ix+2  = frame.
0011F8r 3               ; ix+3  = y coord.
0011F8r 3               ; ix+4  = x coord.
0011F8r 3               
0011F8r 3               ; ix+5  = new type.
0011F8r 3               ; ix+6  = new image number.
0011F8r 3               ; ix+7  = new frame.
0011F8r 3               ; ix+8  = new y coord.
0011F8r 3               ; ix+9  = new x coord.
0011F8r 3               
0011F8r 3               ; ix+10 = direction.
0011F8r 3               ; ix+11 = parameter 1.
0011F8r 3               ; ix+12 = parameter 2.
0011F8r 3               ; ix+13 = jump pointer low.
0011F8r 3               ; ix+14 = jump pointer high.
0011F8r 3               ; ix+15 = data pointer low.
0011F8r 3               ; ix+16 = data pointer high.
0011F8r 3               
0011F8r 3               ; block NUMSPR * TABSIZ,255
0011F8r 3               
0011F8r 3  FF FF FF FF  sprtab:	.res NUMSPR*TABSIZ,255
0011FCr 3  FF FF FF FF  
001200r 3  FF FF FF FF  
0012C4r 3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
0012C8r 3  FF FF FF 00  
0012CCr 3  C0 78 00 00  
0012D5r 3  07           roomtb:	.byte 7                      ; start room map offset.
0012D6r 3               
0012D6r 3               setfgcol:
0012D6r 3               setbgcol:
0012D6r 3  60           	rts
0012D7r 3               
0012D7r 3               ; User routine.  Put your own code in here to be called with USER instruction.
0012D7r 3               ; if USER has an argument it will be passed in the accumulator.
0012D7r 3               
0012D7r 3               user:
0012D7r 3               	.include "user.inc"
0012D7r 4  60           	rts
0012D8r 4               
0012D8r 3               
0012D8r 3               ; Everything below here will be generated by the editors.
0012D8r 3               
0012D8r 3               
0012D8r 3  60                   rts
0012D9r 3               WINDOWTOP = 2
0012D9r 3               WINDOWLFT = 0
0012D9r 3               WINDOWHGT = 20
0012D9r 3               WINDOWWID = 22 ;a
0012D9r 3               MAPWID = 13
0012D9r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
0012DDr 3  FF FF FF FF  
0012E1r 3  FF FF FF FF  
0012E6r 3               mapdat:
0012E6r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,22,24,23,31,255,255,3,26,27,255,255,255,255,10,1,21,9,255,255,29,25,28,26,27,7,6,8,255,255,255,255,255,255,255,29,25,28,25,5,12,15,14,18,255,255,255,255,255,255,255,255,255,20,17,16,13,255,255,255,255,255,255,
0012EAr 3  FF FF FF FF  
0012EEr 3  16 18 17 1F  
001334r 3               255,4,19,30,2,11,0,255
001334r 3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
001338r 3  FF FF FF FF  
00133Cr 3  FF FF FF FF  
001341r 3  4C           stmap:  .byte 76
001342r 3               
001342r 3               evnt00:
001342r 3  A9 05                lda #DEADLY	; DEADLY
001344r 3  85 rr                sta z80_b
001346r 3  20 rr rr             jsr tded
001349r 3  C5 rr                cmp z80_b
00134Br 3  F0 03                beq :+
00134Dr 3  4C rr rr             jmp a00059
001350r 3               :
001350r 3  A9 1F                lda #31
001352r 3  C5 rr                cmp scno
001354r 3  F0 03                beq *+5
001356r 3  4C rr rr             jmp a00059
001359r 3  A9 01                lda #1		; ENDGAME
00135Br 3  85 rr                sta gamwon
00135Dr 3  A9 05        a00059: lda #DEADLY	; DEADLY
00135Fr 3  85 rr                sta z80_b
001361r 3  20 rr rr             jsr tded
001364r 3  C5 rr                cmp z80_b
001366r 3  F0 03                beq :+
001368r 3  4C rr rr             jmp a00106
00136Br 3               :
00136Br 3  A9 00                lda #0
00136Dr 3  C5 rr                cmp varr
00136Fr 3  F0 03                beq *+5
001371r 3  4C rr rr             jmp a00106
001374r 3  A9 06        a00106: lda #CUSTOM	; CUSTOM
001376r 3  85 rr                sta z80_b
001378r 3  20 rr rr             jsr tded
00137Br 3  C5 rr                cmp z80_b
00137Dr 3  F0 03                beq :+
00137Fr 3  4C rr rr             jmp a00234
001382r 3               :
001382r 3  A5 rr                lda numlif
001384r 3  C9 63                cmp #99
001386r 3  90 03                bcc *+5
001388r 3  4C rr rr             jmp a00234
00138Br 3  A5 rr                lda numlif
00138Dr 3  18                   clc
00138Er 3  69 01                adc #1
001390r 3  85 rr                sta numlif
001392r 3  A9 00                lda #0
001394r 3  85 rr                sta chary
001396r 3  A9 07                lda #7
001398r 3  85 rr                sta charx
00139Ar 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
00139Cr 3  85 rr                sta z80_c
00139Er 3  A9 rr                lda #>displ0
0013A0r 3  85 rr                sta z80_b
0013A2r 3  A5 rr                lda numlif
0013A4r 3  20 rr rr             jsr num2dd
0013A7r 3  20 rr rr             jsr displ1
0013AAr 3  A9 05                lda #5		; BEEP
0013ACr 3  8D rr rr             sta sndtyp
0013AFr 3  20 rr rr     a00234: jsr skobj	; DETECTOBJECT
0013B2r 3  85 rr                sta varobj
0013B4r 3  A9 02                lda #2
0013B6r 3  C5 rr                cmp varobj
0013B8r 3  F0 03                beq *+5
0013BAr 3  4C rr rr             jmp a00299
0013BDr 3  A5 rr                lda varobj	; GET
0013BFr 3  20 rr rr             jsr getob
0013C2r 3  A9 02                lda #2
0013C4r 3  85 rr                sta varr
0013C6r 3  A9 01                lda #1
0013C8r 3  85 rr                sta varb
0013CAr 3  A9 01                lda #1
0013CCr 3  85 rr                sta varm
0013CEr 3  A9 03        a00299: lda #3
0013D0r 3  C5 rr                cmp varobj
0013D2r 3  F0 03                beq *+5
0013D4r 3  4C rr rr             jmp a00351
0013D7r 3  A5 rr                lda varobj	; GET
0013D9r 3  20 rr rr             jsr getob
0013DCr 3  A9 02                lda #2
0013DEr 3  85 rr                sta varr
0013E0r 3  A9 01                lda #1
0013E2r 3  85 rr                sta vark
0013E4r 3  A9 01                lda #1
0013E6r 3  85 rr                sta varm
0013E8r 3  A9 00        a00351: lda #0
0013EAr 3  C5 rr                cmp varobj
0013ECr 3  F0 03                beq *+5
0013EEr 3  4C rr rr             jmp a00395
0013F1r 3  A5 rr                lda varobj	; GET
0013F3r 3  20 rr rr             jsr getob
0013F6r 3  A9 02                lda #2
0013F8r 3  85 rr                sta varr
0013FAr 3  A9 01                lda #1
0013FCr 3  85 rr                sta varm
0013FEr 3  A9 04        a00395: lda #4
001400r 3  C5 rr                cmp varobj
001402r 3  F0 03                beq *+5
001404r 3  4C rr rr             jmp a00447
001407r 3  A5 rr                lda varobj	; GET
001409r 3  20 rr rr             jsr getob
00140Cr 3  A9 02                lda #2
00140Er 3  85 rr                sta varr
001410r 3  A9 01                lda #1
001412r 3  85 rr                sta varl
001414r 3  A9 01                lda #1
001416r 3  85 rr                sta varm
001418r 3  A9 05        a00447: lda #5
00141Ar 3  C5 rr                cmp varobj
00141Cr 3  F0 03                beq *+5
00141Er 3  4C rr rr             jmp a00491
001421r 3  A5 rr                lda varobj	; GET
001423r 3  20 rr rr             jsr getob
001426r 3  A9 02                lda #2
001428r 3  85 rr                sta varr
00142Ar 3  A9 01                lda #1
00142Cr 3  85 rr                sta varm
00142Er 3  A9 06        a00491: lda #6
001430r 3  C5 rr                cmp varobj
001432r 3  F0 03                beq *+5
001434r 3  4C rr rr             jmp a00527
001437r 3  A5 rr                lda varobj	; GET
001439r 3  20 rr rr             jsr getob
00143Cr 3  A9 02                lda #2
00143Er 3  85 rr                sta varr
001440r 3  A9 01        a00527: lda #1
001442r 3  C5 rr                cmp varobj
001444r 3  F0 03                beq *+5
001446r 3  4C rr rr             jmp a00579
001449r 3  A5 rr                lda varobj	; GET
00144Br 3  20 rr rr             jsr getob
00144Er 3  A9 02                lda #2
001450r 3  85 rr                sta varr
001452r 3  A9 01                lda #1
001454r 3  85 rr                sta vare
001456r 3  A9 01                lda #1
001458r 3  85 rr                sta varm
00145Ar 3  A9 07        a00579: lda #7
00145Cr 3  C5 rr                cmp varobj
00145Er 3  F0 03                beq *+5
001460r 3  4C rr rr             jmp a00631
001463r 3  A5 rr                lda varobj	; GET
001465r 3  20 rr rr             jsr getob
001468r 3  A9 02                lda #2
00146Ar 3  85 rr                sta varr
00146Cr 3  A9 01                lda #1
00146Er 3  85 rr                sta varh
001470r 3  A9 01                lda #1
001472r 3  85 rr                sta varm
001474r 3  A9 08        a00631: lda #8
001476r 3  C5 rr                cmp varn
001478r 3  F0 03                beq *+5
00147Ar 3  4C rr rr             jmp a00694
00147Dr 3  A9 00                lda #0
00147Fr 3  85 rr                sta chary
001481r 3  A9 05                lda #5
001483r 3  85 rr                sta charx
001485r 3  A9 03                lda #3  	; MESSAGE
001487r 3  20 rr rr             jsr dmsg
00148Ar 3  A9 78                lda #120		; BEEP
00148Cr 3  8D rr rr             sta sndtyp
00148Fr 3  A9 09                lda #9
001491r 3  85 rr                sta varn
001493r 3  A9 01        a00694: lda #1
001495r 3  C5 rr                cmp varm
001497r 3  F0 03                beq *+5
001499r 3  4C rr rr             jmp a00781
00149Cr 3  A5 rr                lda varn
00149Er 3  18                   clc
00149Fr 3  69 01                adc #1
0014A1r 3  85 rr                sta varn
0014A3r 3  A9 00                lda #0
0014A5r 3  85 rr                sta chary
0014A7r 3  A9 15                lda #21
0014A9r 3  85 rr                sta charx
0014ABr 3  A9 50                lda #80		; BEEP
0014ADr 3  8D rr rr             sta sndtyp
0014B0r 3  A5 rr                lda varn	; DISPLAY
0014B2r 3  20 rr rr             jsr disply
0014B5r 3  A9 00                lda #0
0014B7r 3  85 rr                sta varm
0014B9r 3  A9 00                lda #0
0014BBr 3  85 rr                sta varr
0014BDr 3  A5 rr        a00781: lda joyval	; KEY
0014BFr 3  29 02                and #2
0014C1r 3  F0 03                beq :+
0014C3r 3  4C rr rr             jmp a00984
0014C6r 3               :
0014C6r 3  A9 01                lda #1
0014C8r 3  A0 0A                ldy #10
0014CAr 3  91 rr                sta (z80_ix),y
0014CCr 3  A9 01                lda #1
0014CEr 3  A0 06                ldy #6
0014D0r 3  91 rr                sta (z80_ix),y
0014D2r 3  AD rr rr             lda wnlftx
0014D5r 3  A0 09                ldy #9
0014D7r 3  D1 rr                cmp (z80_ix),y
0014D9r 3  B0 03                bcs *+5
0014DBr 3  4C rr rr             jmp a00881
0014DEr 3  20 rr rr             jsr scrl	; SCREENLEFT
0014E1r 3  AD rr rr             lda wnrgtx
0014E4r 3  A0 09                ldy #9
0014E6r 3  91 rr                sta (z80_ix),y
0014E8r 3  60                   rts		; EXIT
0014E9r 3  4C rr rr             jmp a00984
0014ECr 3  20 rr rr     a00881: jsr cangl	; CANGOLEFT
0014EFr 3  F0 03                beq :+
0014F1r 3  4C rr rr             jmp a00984
0014F4r 3               :
0014F4r 3  A0 09                ldy #9 		; SPRITELEFT
0014F6r 3  B1 rr                lda (z80_ix),y
0014F8r 3  38                   sec
0014F9r 3  E9 02                sbc #2
0014FBr 3  91 rr                sta (z80_ix),y
0014FDr 3  A9 03                lda #3		; ANIMATE
0014FFr 3  20 rr rr             jsr animsp
001502r 3  A9 00                lda #0
001504r 3  C5 rr                cmp vara
001506r 3  F0 03                beq *+5
001508r 3  4C rr rr             jmp a00984
00150Br 3  A9 01                lda #1
00150Dr 3  A0 07                ldy #7
00150Fr 3  D1 rr                cmp (z80_ix),y
001511r 3  F0 03                beq *+5
001513r 3  4C rr rr             jmp a00984
001516r 3  A9 0F                lda #15		; BEEP
001518r 3  8D rr rr             sta sndtyp
00151Br 3  A5 rr        a00984: lda joyval	; KEY
00151Dr 3  29 01                and #1
00151Fr 3  F0 03                beq :+
001521r 3  4C rr rr             jmp a01192
001524r 3               :
001524r 3  A9 00                lda #0
001526r 3  A0 0A                ldy #10
001528r 3  91 rr                sta (z80_ix),y
00152Ar 3  A9 00                lda #0
00152Cr 3  A0 06                ldy #6
00152Er 3  91 rr                sta (z80_ix),y
001530r 3  AD rr rr             lda wnrgtx
001533r 3  A0 09                ldy #9
001535r 3  D1 rr                cmp (z80_ix),y
001537r 3  F0 05                beq *+7
001539r 3  90 03                bcc *+5
00153Br 3  4C rr rr             jmp a01089
00153Er 3  20 rr rr             jsr scrr	; SCREENRIGHT
001541r 3  AD rr rr             lda wnlftx
001544r 3  A0 09                ldy #9
001546r 3  91 rr                sta (z80_ix),y
001548r 3  60                   rts		; EXIT
001549r 3  4C rr rr             jmp a01192
00154Cr 3  20 rr rr     a01089: jsr cangr	; CANGORIGHT
00154Fr 3  F0 03                beq :+
001551r 3  4C rr rr             jmp a01192
001554r 3               :
001554r 3  A0 09                ldy #9 		; SPRITERIGHT
001556r 3  B1 rr                lda (z80_ix),y
001558r 3  18                   clc
001559r 3  69 02                adc #2
00155Br 3  91 rr                sta (z80_ix),y
00155Dr 3  A9 03                lda #3		; ANIMATE
00155Fr 3  20 rr rr             jsr animsp
001562r 3  A9 00                lda #0
001564r 3  C5 rr                cmp vara
001566r 3  F0 03                beq *+5
001568r 3  4C rr rr             jmp a01192
00156Br 3  A9 01                lda #1
00156Dr 3  A0 07                ldy #7
00156Fr 3  D1 rr                cmp (z80_ix),y
001571r 3  F0 03                beq *+5
001573r 3  4C rr rr             jmp a01192
001576r 3  A9 0F                lda #15		; BEEP
001578r 3  8D rr rr             sta sndtyp
00157Br 3  A5 rr        a01192: lda joyval	; KEY
00157Dr 3  29 08                and #8
00157Fr 3  F0 03                beq :+
001581r 3  4C rr rr             jmp a01406
001584r 3               :
001584r 3  AD rr rr             lda wntopx
001587r 3  A0 08                ldy #8
001589r 3  D1 rr                cmp (z80_ix),y
00158Br 3  B0 03                bcs *+5
00158Dr 3  4C rr rr             jmp a01255
001590r 3  20 rr rr             jsr scru	; SCREENUP
001593r 3  AD rr rr             lda wnbotx
001596r 3  A0 08                ldy #8
001598r 3  91 rr                sta (z80_ix),y
00159Ar 3  20 rr rr     a01255: jsr laddu	; CANGOUP
00159Dr 3  F0 03                beq :+
00159Fr 3  4C rr rr             jmp a01406
0015A2r 3               :
0015A2r 3  A9 02                lda #2
0015A4r 3  A0 06                ldy #6
0015A6r 3  91 rr                sta (z80_ix),y
0015A8r 3  A9 01                lda #1
0015AAr 3  A0 07                ldy #7
0015ACr 3  D1 rr                cmp (z80_ix),y
0015AEr 3  90 03                bcc *+5
0015B0r 3  4C rr rr             jmp a01320
0015B3r 3  A9 00                lda #0
0015B5r 3  A0 07                ldy #7
0015B7r 3  91 rr                sta (z80_ix),y
0015B9r 3  A0 08        a01320: ldy #8 		; SPRITEUP
0015BBr 3  B1 rr                lda (z80_ix),y
0015BDr 3  38                   sec
0015BEr 3  E9 02                sbc #2
0015C0r 3  91 rr                sta (z80_ix),y
0015C2r 3  A9 03                lda #3		; ANIMATE
0015C4r 3  20 rr rr             jsr animsp
0015C7r 3  A9 00                lda #0
0015C9r 3  C5 rr                cmp vara
0015CBr 3  F0 03                beq *+5
0015CDr 3  4C rr rr             jmp a01406
0015D0r 3  A9 01                lda #1
0015D2r 3  A0 07                ldy #7
0015D4r 3  D1 rr                cmp (z80_ix),y
0015D6r 3  F0 03                beq *+5
0015D8r 3  4C rr rr             jmp a01406
0015DBr 3  A9 0F                lda #15		; BEEP
0015DDr 3  8D rr rr             sta sndtyp
0015E0r 3  A5 rr        a01406: lda joyval	; KEY
0015E2r 3  29 04                and #4
0015E4r 3  F0 03                beq :+
0015E6r 3  4C rr rr             jmp a01626
0015E9r 3               :
0015E9r 3  AD rr rr             lda wnbotx
0015ECr 3  A0 08                ldy #8
0015EEr 3  D1 rr                cmp (z80_ix),y
0015F0r 3  F0 05                beq *+7
0015F2r 3  90 03                bcc *+5
0015F4r 3  4C rr rr             jmp a01474
0015F7r 3  20 rr rr             jsr scrd	; SCREENDOWN
0015FAr 3  AD rr rr             lda wntopx
0015FDr 3  A0 08                ldy #8
0015FFr 3  91 rr                sta (z80_ix),y
001601r 3  20 rr rr     a01474: jsr laddd	; LADDERBELOW
001604r 3  F0 03                beq :+
001606r 3  4C rr rr             jmp a01626
001609r 3               :
001609r 3  A9 03                lda #3
00160Br 3  A0 06                ldy #6
00160Dr 3  91 rr                sta (z80_ix),y
00160Fr 3  A9 01                lda #1
001611r 3  A0 07                ldy #7
001613r 3  D1 rr                cmp (z80_ix),y
001615r 3  90 03                bcc *+5
001617r 3  4C rr rr             jmp a01539
00161Ar 3  A9 00                lda #0
00161Cr 3  A0 07                ldy #7
00161Er 3  91 rr                sta (z80_ix),y
001620r 3  A0 08        a01539: ldy #8 		; SPRITEDOWN
001622r 3  B1 rr                lda (z80_ix),y
001624r 3  18                   clc
001625r 3  69 02                adc #2
001627r 3  91 rr                sta (z80_ix),y
001629r 3  A9 03                lda #3		; ANIMATE
00162Br 3  20 rr rr             jsr animsp
00162Er 3  A9 00                lda #0
001630r 3  C5 rr                cmp vara
001632r 3  F0 03                beq *+5
001634r 3  4C rr rr             jmp a01626
001637r 3  A9 01                lda #1
001639r 3  A0 07                ldy #7
00163Br 3  D1 rr                cmp (z80_ix),y
00163Dr 3  F0 03                beq *+5
00163Fr 3  4C rr rr             jmp a01626
001642r 3  A9 0F                lda #15		; BEEP
001644r 3  8D rr rr             sta sndtyp
001647r 3  60           a01626: rts
001648r 3               evnt01:
001648r 3  A9 11                lda #17
00164Ar 3  A0 06                ldy #6
00164Cr 3  D1 rr                cmp (z80_ix),y
00164Er 3  90 03                bcc *+5
001650r 3  4C rr rr             jmp b00036
001653r 3                       ; SPRITEINK command
001653r 3  4C rr rr             jmp b00111
001656r 3  A0 06        b00036: ldy #6
001658r 3  B1 rr                lda (z80_ix),y
00165Ar 3  C9 0A                cmp #10
00165Cr 3  90 03                bcc *+5
00165Er 3  4C rr rr             jmp b00070
001661r 3                       ; SPRITEINK command
001661r 3  4C rr rr             jmp b00111
001664r 3  A9 10        b00070: lda #16
001666r 3  A0 06                ldy #6
001668r 3  D1 rr                cmp (z80_ix),y
00166Ar 3  F0 03                beq *+5
00166Cr 3  4C rr rr             jmp b00104
00166Fr 3                       ; SPRITEINK command
00166Fr 3  4C rr rr             jmp b00111
001672r 3               b00104: ; SPRITEINK command
001672r 3  A9 00        b00111: lda #0
001674r 3  A0 0A                ldy #10
001676r 3  D1 rr                cmp (z80_ix),y
001678r 3  F0 03                beq *+5
00167Ar 3  4C rr rr             jmp b00262
00167Dr 3  20 rr rr             jsr laddu	; CANGOUP
001680r 3  F0 03                beq :+
001682r 3  4C rr rr             jmp b00179
001685r 3               :
001685r 3  A0 08                ldy #8 		; SPRITEUP
001687r 3  B1 rr                lda (z80_ix),y
001689r 3  38                   sec
00168Ar 3  E9 02                sbc #2
00168Cr 3  91 rr                sta (z80_ix),y
00168Er 3  4C rr rr             jmp b00262
001691r 3  A9 02        b00179: lda #2
001693r 3  85 rr                sta z80_d	; GETRANDOM
001695r 3  20 rr rr             jsr random
001698r 3  85 rr                sta z80_h
00169Ar 3  20 rr rr             jsr imul
00169Dr 3  A5 rr                lda z80_h
00169Fr 3  85 rr                sta varrnd
0016A1r 3  A9 00                lda #0
0016A3r 3  C5 rr                cmp varrnd
0016A5r 3  F0 03                beq *+5
0016A7r 3  4C rr rr             jmp b00248
0016AAr 3  A9 02                lda #2
0016ACr 3  A0 0A                ldy #10
0016AEr 3  91 rr                sta (z80_ix),y
0016B0r 3  4C rr rr             jmp b00262
0016B3r 3  A9 03        b00248: lda #3
0016B5r 3  A0 0A                ldy #10
0016B7r 3  91 rr                sta (z80_ix),y
0016B9r 3  A9 01        b00262: lda #1
0016BBr 3  A0 0A                ldy #10
0016BDr 3  D1 rr                cmp (z80_ix),y
0016BFr 3  F0 03                beq *+5
0016C1r 3  4C rr rr             jmp b00415
0016C4r 3  20 rr rr             jsr laddd	; LADDERBELOW
0016C7r 3  F0 03                beq :+
0016C9r 3  4C rr rr             jmp b00332
0016CCr 3               :
0016CCr 3  A0 08                ldy #8 		; SPRITEDOWN
0016CEr 3  B1 rr                lda (z80_ix),y
0016D0r 3  18                   clc
0016D1r 3  69 02                adc #2
0016D3r 3  91 rr                sta (z80_ix),y
0016D5r 3  4C rr rr             jmp b00415
0016D8r 3  A9 02        b00332: lda #2
0016DAr 3  85 rr                sta z80_d	; GETRANDOM
0016DCr 3  20 rr rr             jsr random
0016DFr 3  85 rr                sta z80_h
0016E1r 3  20 rr rr             jsr imul
0016E4r 3  A5 rr                lda z80_h
0016E6r 3  85 rr                sta varrnd
0016E8r 3  A9 00                lda #0
0016EAr 3  C5 rr                cmp varrnd
0016ECr 3  F0 03                beq *+5
0016EEr 3  4C rr rr             jmp b00401
0016F1r 3  A9 02                lda #2
0016F3r 3  A0 0A                ldy #10
0016F5r 3  91 rr                sta (z80_ix),y
0016F7r 3  4C rr rr             jmp b00415
0016FAr 3  A9 03        b00401: lda #3
0016FCr 3  A0 0A                ldy #10
0016FEr 3  91 rr                sta (z80_ix),y
001700r 3  A9 02        b00415: lda #2
001702r 3  A0 0A                ldy #10
001704r 3  D1 rr                cmp (z80_ix),y
001706r 3  F0 03                beq *+5
001708r 3  4C rr rr             jmp b00655
00170Br 3  20 rr rr             jsr cangl	; CANGOLEFT
00170Er 3  F0 03                beq :+
001710r 3  4C rr rr             jmp b00525
001713r 3               :
001713r 3  AD rr rr             lda wnlftx
001716r 3  A0 09                ldy #9
001718r 3  D1 rr                cmp (z80_ix),y
00171Ar 3  90 03                bcc *+5
00171Cr 3  4C rr rr             jmp b00507
00171Fr 3  A0 09                ldy #9 		; SPRITELEFT
001721r 3  B1 rr                lda (z80_ix),y
001723r 3  38                   sec
001724r 3  E9 02                sbc #2
001726r 3  91 rr                sta (z80_ix),y
001728r 3  4C rr rr             jmp b00520
00172Br 3  A9 03        b00507: lda #3
00172Dr 3  A0 0A                ldy #10
00172Fr 3  91 rr                sta (z80_ix),y
001731r 3  4C rr rr     b00520: jmp b00539
001734r 3  A9 03        b00525: lda #3
001736r 3  A0 0A                ldy #10
001738r 3  91 rr                sta (z80_ix),y
00173Ar 3  A9 04        b00539: lda #4
00173Cr 3  85 rr                sta z80_d	; GETRANDOM
00173Er 3  20 rr rr             jsr random
001741r 3  85 rr                sta z80_h
001743r 3  20 rr rr             jsr imul
001746r 3  A5 rr                lda z80_h
001748r 3  85 rr                sta varrnd
00174Ar 3  A9 00                lda #0
00174Cr 3  C5 rr                cmp varrnd
00174Er 3  F0 03                beq *+5
001750r 3  4C rr rr             jmp b00655
001753r 3  20 rr rr             jsr laddu	; CANGOUP
001756r 3  F0 03                beq :+
001758r 3  4C rr rr             jmp b00624
00175Br 3               :
00175Br 3  A9 00                lda #0
00175Dr 3  A0 0A                ldy #10
00175Fr 3  91 rr                sta (z80_ix),y
001761r 3  4C rr rr             jmp b00655
001764r 3  20 rr rr     b00624: jsr laddd	; LADDERBELOW
001767r 3  F0 03                beq :+
001769r 3  4C rr rr             jmp b00655
00176Cr 3               :
00176Cr 3  A9 01                lda #1
00176Er 3  A0 0A                ldy #10
001770r 3  91 rr                sta (z80_ix),y
001772r 3  A9 03        b00655: lda #3
001774r 3  A0 0A                ldy #10
001776r 3  D1 rr                cmp (z80_ix),y
001778r 3  F0 03                beq *+5
00177Ar 3  4C rr rr             jmp b00854
00177Dr 3  20 rr rr             jsr cangr	; CANGORIGHT
001780r 3  F0 03                beq :+
001782r 3  4C rr rr             jmp b00724
001785r 3               :
001785r 3  A0 09                ldy #9 		; SPRITERIGHT
001787r 3  B1 rr                lda (z80_ix),y
001789r 3  18                   clc
00178Ar 3  69 02                adc #2
00178Cr 3  91 rr                sta (z80_ix),y
00178Er 3  4C rr rr             jmp b00738
001791r 3  A9 02        b00724: lda #2
001793r 3  A0 0A                ldy #10
001795r 3  91 rr                sta (z80_ix),y
001797r 3  A9 04        b00738: lda #4
001799r 3  85 rr                sta z80_d	; GETRANDOM
00179Br 3  20 rr rr             jsr random
00179Er 3  85 rr                sta z80_h
0017A0r 3  20 rr rr             jsr imul
0017A3r 3  A5 rr                lda z80_h
0017A5r 3  85 rr                sta varrnd
0017A7r 3  A9 00                lda #0
0017A9r 3  C5 rr                cmp varrnd
0017ABr 3  F0 03                beq *+5
0017ADr 3  4C rr rr             jmp b00854
0017B0r 3  20 rr rr             jsr laddu	; CANGOUP
0017B3r 3  F0 03                beq :+
0017B5r 3  4C rr rr             jmp b00823
0017B8r 3               :
0017B8r 3  A9 00                lda #0
0017BAr 3  A0 0A                ldy #10
0017BCr 3  91 rr                sta (z80_ix),y
0017BEr 3  4C rr rr             jmp b00854
0017C1r 3  20 rr rr     b00823: jsr laddd	; LADDERBELOW
0017C4r 3  F0 03                beq :+
0017C6r 3  4C rr rr             jmp b00854
0017C9r 3               :
0017C9r 3  A9 01                lda #1
0017CBr 3  A0 0A                ldy #10
0017CDr 3  91 rr                sta (z80_ix),y
0017CFr 3  A9 01        b00854: lda #1
0017D1r 3  A0 07                ldy #7
0017D3r 3  D1 rr                cmp (z80_ix),y
0017D5r 3  90 03                bcc *+5
0017D7r 3  4C rr rr             jmp b00889
0017DAr 3  A9 00                lda #0
0017DCr 3  A0 07                ldy #7
0017DEr 3  91 rr                sta (z80_ix),y
0017E0r 3  A9 03        b00889: lda #3		; ANIMATE
0017E2r 3  20 rr rr             jsr animsp
0017E5r 3  A9 00                lda #0 	; COLLISION
0017E7r 3  85 rr                sta z80_b
0017E9r 3  20 rr rr             jsr sktyp
0017ECr 3  B0 03                bcs :+
0017EEr 3  4C rr rr             jmp b01084
0017F1r 3               :
0017F1r 3  A9 00                lda #0
0017F3r 3  C5 rr                cmp numlif
0017F5r 3  F0 03                beq *+5
0017F7r 3  4C rr rr             jmp b00958
0017FAr 3  A9 01                lda #1 		; KILL
0017FCr 3  85 rr                sta deadf
0017FEr 3  4C rr rr             jmp b01084
001801r 3  A5 rr        b00958: lda numlif
001803r 3  38                   sec
001804r 3  E9 01                sbc #1
001806r 3  85 rr                sta numlif
001808r 3  A9 02                lda #2		; BEEP
00180Ar 3  8D rr rr             sta sndtyp
00180Dr 3  A5 rr                lda numlif
00180Fr 3  C9 0A                cmp #10
001811r 3  90 03                bcc *+5
001813r 3  4C rr rr             jmp b01030
001816r 3  A9 00                lda #0
001818r 3  85 rr                sta chary
00181Ar 3  A9 0A                lda #10
00181Cr 3  85 rr                sta charx
00181Er 3  A9 04                lda #4  	; MESSAGE
001820r 3  20 rr rr             jsr dmsg
001823r 3  A9 00        b01030: lda #0
001825r 3  85 rr                sta chary
001827r 3  A9 07                lda #7
001829r 3  85 rr                sta charx
00182Br 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
00182Dr 3  85 rr                sta z80_c
00182Fr 3  A9 rr                lda #>displ0
001831r 3  85 rr                sta z80_b
001833r 3  A5 rr                lda numlif
001835r 3  20 rr rr             jsr num2dd
001838r 3  20 rr rr             jsr displ1
00183Br 3  60           b01084: rts
00183Cr 3               evnt02:
00183Cr 3  A9 0D                lda #13
00183Er 3  A0 06                ldy #6
001840r 3  D1 rr                cmp (z80_ix),y
001842r 3  90 03                bcc *+5
001844r 3  4C rr rr             jmp c00036
001847r 3                       ; SPRITEINK command
001847r 3  4C rr rr             jmp c00077
00184Ar 3  A0 06        c00036: ldy #6
00184Cr 3  B1 rr                lda (z80_ix),y
00184Er 3  C9 0C                cmp #12
001850r 3  90 03                bcc *+5
001852r 3  4C rr rr             jmp c00070
001855r 3                       ; SPRITEINK command
001855r 3  4C rr rr             jmp c00077
001858r 3               c00070: ; SPRITEINK command
001858r 3  A9 0A        c00077: lda #10
00185Ar 3  A0 06                ldy #6
00185Cr 3  D1 rr                cmp (z80_ix),y
00185Er 3  F0 03                beq *+5
001860r 3  4C rr rr             jmp c00115
001863r 3  A9 0A                lda #10
001865r 3  85 rr                sta varc
001867r 3  A9 0B                lda #11
001869r 3  85 rr                sta vard
00186Br 3  A9 0B        c00115: lda #11
00186Dr 3  A0 06                ldy #6
00186Fr 3  D1 rr                cmp (z80_ix),y
001871r 3  F0 03                beq *+5
001873r 3  4C rr rr             jmp c00154
001876r 3  A9 0A                lda #10
001878r 3  85 rr                sta varc
00187Ar 3  A9 0B                lda #11
00187Cr 3  85 rr                sta vard
00187Er 3  A9 0C        c00154: lda #12
001880r 3  A0 06                ldy #6
001882r 3  D1 rr                cmp (z80_ix),y
001884r 3  F0 03                beq *+5
001886r 3  4C rr rr             jmp c00193
001889r 3  A9 0C                lda #12
00188Br 3  85 rr                sta varc
00188Dr 3  A9 0D                lda #13
00188Fr 3  85 rr                sta vard
001891r 3  A9 0D        c00193: lda #13
001893r 3  A0 06                ldy #6
001895r 3  D1 rr                cmp (z80_ix),y
001897r 3  F0 03                beq *+5
001899r 3  4C rr rr             jmp c00232
00189Cr 3  A9 0C                lda #12
00189Er 3  85 rr                sta varc
0018A0r 3  A9 0D                lda #13
0018A2r 3  85 rr                sta vard
0018A4r 3  A9 0E        c00232: lda #14
0018A6r 3  A0 06                ldy #6
0018A8r 3  D1 rr                cmp (z80_ix),y
0018AAr 3  F0 03                beq *+5
0018ACr 3  4C rr rr             jmp c00270
0018AFr 3  A9 0E                lda #14
0018B1r 3  85 rr                sta varc
0018B3r 3  A9 0F                lda #15
0018B5r 3  85 rr                sta vard
0018B7r 3  A9 0F        c00270: lda #15
0018B9r 3  A0 06                ldy #6
0018BBr 3  D1 rr                cmp (z80_ix),y
0018BDr 3  F0 03                beq *+5
0018BFr 3  4C rr rr             jmp c00309
0018C2r 3  A9 0E                lda #14
0018C4r 3  85 rr                sta varc
0018C6r 3  A9 0F                lda #15
0018C8r 3  85 rr                sta vard
0018CAr 3  A9 03        c00309: lda #3		; ANIMATE
0018CCr 3  20 rr rr             jsr animsp
0018CFr 3  A9 00                lda #0
0018D1r 3  A0 0B                ldy #11
0018D3r 3  D1 rr                cmp (z80_ix),y
0018D5r 3  F0 03                beq *+5
0018D7r 3  4C rr rr             jmp c00422
0018DAr 3  20 rr rr             jsr cangl	; CANGOLEFT
0018DDr 3  F0 03                beq :+
0018DFr 3  4C rr rr             jmp c00403
0018E2r 3               :
0018E2r 3  A5 rr                lda varc
0018E4r 3  A0 06                ldy #6
0018E6r 3  91 rr                sta (z80_ix),y
0018E8r 3  A0 09                ldy #9 		; SPRITELEFT
0018EAr 3  B1 rr                lda (z80_ix),y
0018ECr 3  38                   sec
0018EDr 3  E9 02                sbc #2
0018EFr 3  91 rr                sta (z80_ix),y
0018F1r 3  4C rr rr             jmp c00417
0018F4r 3  A9 01        c00403: lda #1
0018F6r 3  A0 0B                ldy #11
0018F8r 3  91 rr                sta (z80_ix),y
0018FAr 3  4C rr rr     c00417: jmp c00496
0018FDr 3  20 rr rr     c00422: jsr cangr	; CANGORIGHT
001900r 3  F0 03                beq :+
001902r 3  4C rr rr             jmp c00483
001905r 3               :
001905r 3  A5 rr                lda vard
001907r 3  A0 06                ldy #6
001909r 3  91 rr                sta (z80_ix),y
00190Br 3  A0 09                ldy #9 		; SPRITERIGHT
00190Dr 3  B1 rr                lda (z80_ix),y
00190Fr 3  18                   clc
001910r 3  69 02                adc #2
001912r 3  91 rr                sta (z80_ix),y
001914r 3  4C rr rr             jmp c00496
001917r 3  A9 00        c00483: lda #0
001919r 3  A0 0B                ldy #11
00191Br 3  91 rr                sta (z80_ix),y
00191Dr 3  A9 00        c00496: lda #0 	; COLLISION
00191Fr 3  85 rr                sta z80_b
001921r 3  20 rr rr             jsr sktyp
001924r 3  B0 03                bcs :+
001926r 3  4C rr rr             jmp c00680
001929r 3               :
001929r 3  A9 00                lda #0
00192Br 3  C5 rr                cmp numlif
00192Dr 3  F0 03                beq *+5
00192Fr 3  4C rr rr             jmp c00554
001932r 3  A9 01                lda #1 		; KILL
001934r 3  85 rr                sta deadf
001936r 3  4C rr rr             jmp c00680
001939r 3  A5 rr        c00554: lda numlif
00193Br 3  38                   sec
00193Cr 3  E9 01                sbc #1
00193Er 3  85 rr                sta numlif
001940r 3  A9 02                lda #2		; BEEP
001942r 3  8D rr rr             sta sndtyp
001945r 3  A5 rr                lda numlif
001947r 3  C9 0A                cmp #10
001949r 3  90 03                bcc *+5
00194Br 3  4C rr rr             jmp c00626
00194Er 3  A9 00                lda #0
001950r 3  85 rr                sta chary
001952r 3  A9 08                lda #8
001954r 3  85 rr                sta charx
001956r 3  A9 04                lda #4  	; MESSAGE
001958r 3  20 rr rr             jsr dmsg
00195Br 3  A9 00        c00626: lda #0
00195Dr 3  85 rr                sta chary
00195Fr 3  A9 07                lda #7
001961r 3  85 rr                sta charx
001963r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001965r 3  85 rr                sta z80_c
001967r 3  A9 rr                lda #>displ0
001969r 3  85 rr                sta z80_b
00196Br 3  A5 rr                lda numlif
00196Dr 3  20 rr rr             jsr num2dd
001970r 3  20 rr rr             jsr displ1
001973r 3  60           c00680: rts
001974r 3               evnt03:
001974r 3                       ; SPRITEINK command
001974r 3  A9 03                lda #3		; ANIMATE
001976r 3  20 rr rr             jsr animsp
001979r 3  A9 00                lda #0 	; COLLISION
00197Br 3  85 rr                sta z80_b
00197Dr 3  20 rr rr             jsr sktyp
001980r 3  B0 03                bcs :+
001982r 3  4C rr rr             jmp d00497
001985r 3               :
001985r 3  A9 04                lda #4
001987r 3  C5 rr                cmp scno
001989r 3  F0 03                beq *+5
00198Br 3  4C rr rr             jmp d00189
00198Er 3  A9 01                lda #1		; GOT
001990r 3  20 rr rr             jsr gotob
001993r 3  C9 FF                cmp #255
001995r 3  F0 03                beq :+
001997r 3  4C rr rr             jmp d00189
00199Ar 3               :
00199Ar 3  A9 FF                lda #255	; REMOVE
00199Cr 3  A0 05                ldy #5
00199Er 3  91 rr                sta (z80_ix),y
0019A0r 3  A9 00                lda #0
0019A2r 3  85 rr                sta varp
0019A4r 3  A9 0A                lda #10		; BEEP
0019A6r 3  8D rr rr             sta sndtyp
0019A9r 3  A9 08                lda #8
0019ABr 3  85 rr                sta chary
0019ADr 3  A9 0B                lda #11
0019AFr 3  85 rr                sta charx
0019B1r 3  A9 00                lda #0 		; PUTBLOCK
0019B3r 3  20 rr rr             jsr pbpattr
0019B6r 3  A9 07                lda #7
0019B8r 3  85 rr                sta chary
0019BAr 3  A9 0A                lda #10
0019BCr 3  85 rr                sta charx
0019BEr 3  A9 00                lda #0 		; PUTBLOCK
0019C0r 3  20 rr rr             jsr pbpattr
0019C3r 3  A9 00                lda #0 		; PUTBLOCK
0019C5r 3  20 rr rr             jsr pbpattr
0019C8r 3  A9 12        d00189: lda #18
0019CAr 3  C5 rr                cmp scno
0019CCr 3  F0 03                beq *+5
0019CEr 3  4C rr rr             jmp d00334
0019D1r 3  A9 00                lda #0		; GOT
0019D3r 3  20 rr rr             jsr gotob
0019D6r 3  C9 FF                cmp #255
0019D8r 3  F0 03                beq :+
0019DAr 3  4C rr rr             jmp d00334
0019DDr 3               :
0019DDr 3  A9 FF                lda #255	; REMOVE
0019DFr 3  A0 05                ldy #5
0019E1r 3  91 rr                sta (z80_ix),y
0019E3r 3  A9 00                lda #0
0019E5r 3  85 rr                sta varq
0019E7r 3  A9 0A                lda #10		; BEEP
0019E9r 3  8D rr rr             sta sndtyp
0019ECr 3  A9 12                lda #18
0019EEr 3  85 rr                sta chary
0019F0r 3  A9 04                lda #4
0019F2r 3  85 rr                sta charx
0019F4r 3  A9 00                lda #0 		; PUTBLOCK
0019F6r 3  20 rr rr             jsr pbpattr
0019F9r 3  A9 00                lda #0 		; PUTBLOCK
0019FBr 3  20 rr rr             jsr pbpattr
0019FEr 3  A9 11                lda #17
001A00r 3  85 rr                sta chary
001A02r 3  A9 04                lda #4
001A04r 3  85 rr                sta charx
001A06r 3  A9 00                lda #0 		; PUTBLOCK
001A08r 3  20 rr rr             jsr pbpattr
001A0Br 3  A9 00        d00334: lda #0
001A0Dr 3  C5 rr                cmp numlif
001A0Fr 3  F0 03                beq *+5
001A11r 3  4C rr rr             jmp d00366
001A14r 3  A9 01                lda #1 		; KILL
001A16r 3  85 rr                sta deadf
001A18r 3  4C rr rr             jmp d00497
001A1Br 3  A5 rr        d00366: lda numlif
001A1Dr 3  38                   sec
001A1Er 3  E9 01                sbc #1
001A20r 3  85 rr                sta numlif
001A22r 3  A9 02                lda #2		; BEEP
001A24r 3  8D rr rr             sta sndtyp
001A27r 3  A5 rr                lda numlif
001A29r 3  C9 0A                cmp #10
001A2Br 3  90 03                bcc *+5
001A2Dr 3  4C rr rr             jmp d00443
001A30r 3  A9 00                lda #0
001A32r 3  85 rr                sta chary
001A34r 3  A9 08                lda #8
001A36r 3  85 rr                sta charx
001A38r 3  A9 04                lda #4  	; MESSAGE
001A3Ar 3  20 rr rr             jsr dmsg
001A3Dr 3  4C rr rr             jmp d00497
001A40r 3  A9 00        d00443: lda #0
001A42r 3  85 rr                sta chary
001A44r 3  A9 07                lda #7
001A46r 3  85 rr                sta charx
001A48r 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001A4Ar 3  85 rr                sta z80_c
001A4Cr 3  A9 rr                lda #>displ0
001A4Er 3  85 rr                sta z80_b
001A50r 3  A5 rr                lda numlif
001A52r 3  20 rr rr             jsr num2dd
001A55r 3  20 rr rr             jsr displ1
001A58r 3  60           d00497: rts
001A59r 3               evnt04:
001A59r 3                       ; SPRITEINK command
001A59r 3  A9 03                lda #3		; ANIMATE
001A5Br 3  20 rr rr             jsr animsp
001A5Er 3  A9 05                lda #5
001A60r 3  A0 06                ldy #6
001A62r 3  D1 rr                cmp (z80_ix),y
001A64r 3  F0 03                beq *+5
001A66r 3  4C rr rr             jmp e00106
001A69r 3  A9 00                lda #0
001A6Br 3  C5 rr                cmp varp
001A6Dr 3  F0 03                beq *+5
001A6Fr 3  4C rr rr             jmp e00106
001A72r 3  A9 FF                lda #255	; REMOVE
001A74r 3  A0 05                ldy #5
001A76r 3  91 rr                sta (z80_ix),y
001A78r 3  A9 04                lda #4	; SPAWN
001A7Ar 3  85 rr                sta z80_c
001A7Cr 3  A9 06                lda #6
001A7Er 3  85 rr                sta z80_b
001A80r 3  20 rr rr             jsr spawn
001A83r 3  A9 01                lda #1
001A85r 3  85 rr                sta varg
001A87r 3  A9 07        e00106: lda #7
001A89r 3  A0 06                ldy #6
001A8Br 3  D1 rr                cmp (z80_ix),y
001A8Dr 3  F0 03                beq *+5
001A8Fr 3  4C rr rr             jmp e00191
001A92r 3  A9 00                lda #0
001A94r 3  C5 rr                cmp varq
001A96r 3  F0 03                beq *+5
001A98r 3  4C rr rr             jmp e00191
001A9Br 3  A9 FF                lda #255	; REMOVE
001A9Dr 3  A0 05                ldy #5
001A9Fr 3  91 rr                sta (z80_ix),y
001AA1r 3  A9 04                lda #4	; SPAWN
001AA3r 3  85 rr                sta z80_c
001AA5r 3  A9 08                lda #8
001AA7r 3  85 rr                sta z80_b
001AA9r 3  20 rr rr             jsr spawn
001AACr 3  A9 01                lda #1
001AAEr 3  85 rr                sta varj
001AB0r 3  60           e00191: rts
001AB1r 3               evnt05:
001AB1r 3  60                   rts
001AB2r 3               evnt06:
001AB2r 3  60                   rts
001AB3r 3               evnt07:
001AB3r 3  60                   rts
001AB4r 3               evnt08:
001AB4r 3  60                   rts
001AB5r 3               evnt09:
001AB5r 3  A9 02                lda #2
001AB7r 3  A0 05                ldy #5
001AB9r 3  D1 rr                cmp (z80_ix),y
001ABBr 3  F0 03                beq *+5
001ABDr 3  4C rr rr             jmp j00037
001AC0r 3  A9 00                lda #0
001AC2r 3  A0 0B                ldy #11
001AC4r 3  91 rr                sta (z80_ix),y
001AC6r 3  60           j00037: rts
001AC7r 3               evnt10:
001AC7r 3  A9 FF                lda #255
001AC9r 3  C5 rr                cmp varopt
001ACBr 3  F0 03                beq *+5
001ACDr 3  4C rr rr             jmp k00097
001AD0r 3  A9 00                lda #0
001AD2r 3  C5 rr                cmp scno
001AD4r 3  F0 03                beq *+5
001AD6r 3  4C rr rr             jmp k00088
001AD9r 3  A9 02                lda #2		; GOT
001ADBr 3  20 rr rr             jsr gotob
001ADEr 3  C9 FF                cmp #255
001AE0r 3  F0 03                beq :+
001AE2r 3  4C rr rr             jmp k00088
001AE5r 3               :
001AE5r 3  A9 0E                lda #14
001AE7r 3  85 rr                sta chary
001AE9r 3  A9 11                lda #17
001AEBr 3  85 rr                sta charx
001AEDr 3  A9 00                lda #0 		; PUTBLOCK
001AEFr 3  20 rr rr             jsr pbpattr
001AF2r 3  A9 00        k00088: lda #0
001AF4r 3  85 rr                sta varopt
001AF6r 3  A9 FF        k00097: lda #255
001AF8r 3  C5 rr                cmp varb
001AFAr 3  F0 03                beq *+5
001AFCr 3  4C rr rr             jmp k00191
001AFFr 3  A9 08                lda #8
001B01r 3  C5 rr                cmp scno
001B03r 3  F0 03                beq *+5
001B05r 3  4C rr rr             jmp k00183
001B08r 3  A9 03                lda #3		; GOT
001B0Ar 3  20 rr rr             jsr gotob
001B0Dr 3  C9 FF                cmp #255
001B0Fr 3  F0 03                beq :+
001B11r 3  4C rr rr             jmp k00183
001B14r 3               :
001B14r 3  A9 06                lda #6
001B16r 3  85 rr                sta chary
001B18r 3  A9 11                lda #17
001B1Ar 3  85 rr                sta charx
001B1Cr 3  A9 00                lda #0 		; PUTBLOCK
001B1Er 3  20 rr rr             jsr pbpattr
001B21r 3  A9 00        k00183: lda #0
001B23r 3  85 rr                sta varb
001B25r 3  A9 FF        k00191: lda #255
001B27r 3  C5 rr                cmp vare
001B29r 3  F0 03                beq *+5
001B2Br 3  4C rr rr             jmp k00285
001B2Er 3  A9 0D                lda #13
001B30r 3  C5 rr                cmp scno
001B32r 3  F0 03                beq *+5
001B34r 3  4C rr rr             jmp k00277
001B37r 3  A9 04                lda #4		; GOT
001B39r 3  20 rr rr             jsr gotob
001B3Cr 3  C9 FF                cmp #255
001B3Er 3  F0 03                beq :+
001B40r 3  4C rr rr             jmp k00277
001B43r 3               :
001B43r 3  A9 09                lda #9
001B45r 3  85 rr                sta chary
001B47r 3  A9 12                lda #18
001B49r 3  85 rr                sta charx
001B4Br 3  A9 00                lda #0 		; PUTBLOCK
001B4Dr 3  20 rr rr             jsr pbpattr
001B50r 3  A9 00        k00277: lda #0
001B52r 3  85 rr                sta vare
001B54r 3  A9 FF        k00285: lda #255
001B56r 3  C5 rr                cmp varl
001B58r 3  F0 03                beq *+5
001B5Ar 3  4C rr rr             jmp k00379
001B5Dr 3  A9 03                lda #3
001B5Fr 3  C5 rr                cmp scno
001B61r 3  F0 03                beq *+5
001B63r 3  4C rr rr             jmp k00371
001B66r 3  A9 05                lda #5		; GOT
001B68r 3  20 rr rr             jsr gotob
001B6Br 3  C9 FF                cmp #255
001B6Dr 3  F0 03                beq :+
001B6Fr 3  4C rr rr             jmp k00371
001B72r 3               :
001B72r 3  A9 10                lda #16
001B74r 3  85 rr                sta chary
001B76r 3  A9 03                lda #3
001B78r 3  85 rr                sta charx
001B7Ar 3  A9 00                lda #0 		; PUTBLOCK
001B7Cr 3  20 rr rr             jsr pbpattr
001B7Fr 3  A9 00        k00371: lda #0
001B81r 3  85 rr                sta varl
001B83r 3  A9 FF        k00379: lda #255
001B85r 3  C5 rr                cmp varf
001B87r 3  F0 03                beq *+5
001B89r 3  4C rr rr             jmp k00473
001B8Cr 3  A9 14                lda #20
001B8Er 3  C5 rr                cmp scno
001B90r 3  F0 03                beq *+5
001B92r 3  4C rr rr             jmp k00465
001B95r 3  A9 06                lda #6		; GOT
001B97r 3  20 rr rr             jsr gotob
001B9Ar 3  C9 FF                cmp #255
001B9Cr 3  F0 03                beq :+
001B9Er 3  4C rr rr             jmp k00465
001BA1r 3               :
001BA1r 3  A9 10                lda #16
001BA3r 3  85 rr                sta chary
001BA5r 3  A9 03                lda #3
001BA7r 3  85 rr                sta charx
001BA9r 3  A9 00                lda #0 		; PUTBLOCK
001BABr 3  20 rr rr             jsr pbpattr
001BAEr 3  A9 00        k00465: lda #0
001BB0r 3  85 rr                sta varf
001BB2r 3  A9 00        k00473: lda #0
001BB4r 3  C5 rr                cmp varp
001BB6r 3  F0 03                beq *+5
001BB8r 3  4C rr rr             jmp k00561
001BBBr 3  A9 13                lda #19
001BBDr 3  C5 rr                cmp scno
001BBFr 3  F0 03                beq *+5
001BC1r 3  4C rr rr             jmp k00561
001BC4r 3  A9 12                lda #18
001BC6r 3  85 rr                sta chary
001BC8r 3  A9 00                lda #0
001BCAr 3  85 rr                sta charx
001BCCr 3  A9 11                lda #17 		; PUTBLOCK
001BCEr 3  20 rr rr             jsr pbpattr
001BD1r 3  A9 01                lda #1
001BD3r 3  C5 rr                cmp vars
001BD5r 3  F0 03                beq *+5
001BD7r 3  4C rr rr             jmp k00561
001BDAr 3  A9 00                lda #0
001BDCr 3  85 rr                sta vars
001BDEr 3  A9 FF        k00561: lda #255
001BE0r 3  C5 rr                cmp vari
001BE2r 3  F0 03                beq *+5
001BE4r 3  4C rr rr             jmp k00632
001BE7r 3  A9 13                lda #19
001BE9r 3  C5 rr                cmp scno
001BEBr 3  F0 03                beq *+5
001BEDr 3  4C rr rr             jmp k00624
001BF0r 3  A9 08                lda #8
001BF2r 3  85 rr                sta chary
001BF4r 3  A9 12                lda #18
001BF6r 3  85 rr                sta charx
001BF8r 3  A9 00                lda #0 		; PUTBLOCK
001BFAr 3  20 rr rr             jsr pbpattr
001BFDr 3  A9 00        k00624: lda #0
001BFFr 3  85 rr                sta vari
001C01r 3  A9 FF        k00632: lda #255
001C03r 3  C5 rr                cmp vard
001C05r 3  F0 03                beq *+5
001C07r 3  4C rr rr             jmp k00726
001C0Ar 3  A9 16                lda #22
001C0Cr 3  C5 rr                cmp scno
001C0Er 3  F0 03                beq *+5
001C10r 3  4C rr rr             jmp k00718
001C13r 3  A9 01                lda #1		; GOT
001C15r 3  20 rr rr             jsr gotob
001C18r 3  C9 FF                cmp #255
001C1Ar 3  F0 03                beq :+
001C1Cr 3  4C rr rr             jmp k00718
001C1Fr 3               :
001C1Fr 3  A9 06                lda #6
001C21r 3  85 rr                sta chary
001C23r 3  A9 04                lda #4
001C25r 3  85 rr                sta charx
001C27r 3  A9 00                lda #0 		; PUTBLOCK
001C29r 3  20 rr rr             jsr pbpattr
001C2Cr 3  A9 00        k00718: lda #0
001C2Er 3  85 rr                sta vard
001C30r 3  A9 00        k00726: lda #0
001C32r 3  C5 rr                cmp varq
001C34r 3  F0 03                beq *+5
001C36r 3  4C rr rr             jmp k00813
001C39r 3  A9 0E                lda #14
001C3Br 3  C5 rr                cmp scno
001C3Dr 3  F0 03                beq *+5
001C3Fr 3  4C rr rr             jmp k00813
001C42r 3  A9 04                lda #4
001C44r 3  85 rr                sta chary
001C46r 3  A9 15                lda #21
001C48r 3  85 rr                sta charx
001C4Ar 3  A9 11                lda #17 		; PUTBLOCK
001C4Cr 3  20 rr rr             jsr pbpattr
001C4Fr 3  A9 01                lda #1
001C51r 3  C5 rr                cmp vart
001C53r 3  F0 03                beq *+5
001C55r 3  4C rr rr             jmp k00813
001C58r 3  A9 00                lda #0
001C5Ar 3  85 rr                sta vart
001C5Cr 3  A9 FF        k00813: lda #255
001C5Er 3  C5 rr                cmp vark
001C60r 3  F0 03                beq *+5
001C62r 3  4C rr rr             jmp k00916
001C65r 3  A9 17                lda #23
001C67r 3  C5 rr                cmp scno
001C69r 3  F0 03                beq *+5
001C6Br 3  4C rr rr             jmp k00908
001C6Er 3  A9 07                lda #7		; GOT
001C70r 3  20 rr rr             jsr gotob
001C73r 3  C9 FF                cmp #255
001C75r 3  F0 03                beq :+
001C77r 3  4C rr rr             jmp k00908
001C7Ar 3               :
001C7Ar 3  A9 01                lda #1
001C7Cr 3  85 rr                sta varr
001C7Er 3  A9 06                lda #6
001C80r 3  85 rr                sta chary
001C82r 3  A9 15                lda #21
001C84r 3  85 rr                sta charx
001C86r 3  A9 00                lda #0 		; PUTBLOCK
001C88r 3  20 rr rr             jsr pbpattr
001C8Br 3  A9 00        k00908: lda #0
001C8Dr 3  85 rr                sta vark
001C8Fr 3  60           k00916: rts
001C90r 3               evnt11:
001C90r 3  A9 03                lda #3
001C92r 3  C5 rr                cmp vara
001C94r 3  F0 03                beq *+5
001C96r 3  4C rr rr             jmp l00031
001C99r 3  A9 00                lda #0
001C9Br 3  85 rr                sta vara
001C9Dr 3  4C rr rr             jmp l00046
001CA0r 3  A5 rr        l00031: lda vara
001CA2r 3  18                   clc
001CA3r 3  69 01                adc #1
001CA5r 3  85 rr                sta vara
001CA7r 3  60           l00046: rts
001CA8r 3               evnt12:
001CA8r 3  20 rr rr             jsr cls		; CLS
001CABr 3  60                   rts
001CACr 3               evnt13:
001CACr 3  A9 01                lda #1
001CAEr 3                       ; BORDER command
001CAEr 3  29 07                and #7
001CB0r 3  85 rr                sta tmp
001CB2r 3  AD 0F 90             lda RegF
001CB5r 3  29 F8                and #%11111000
001CB7r 3  05 rr                ora tmp
001CB9r 3  8D 0F 90             sta RegF
001CBCr 3  20 rr rr             jsr cls		; CLS
001CBFr 3  A9 02                lda #2 	; INK
001CC1r 3  8D rr rr             sta fontcol
001CC4r 3  A9 00                lda #0 	; PAPER
001CC6r 3  0A                   asl a
001CC7r 3  0A                   asl a
001CC8r 3  0A                   asl a
001CC9r 3  0A                   asl a
001CCAr 3  85 rr                sta tmp
001CCCr 3  AD 0F 90             lda RegF
001CCFr 3  29 8F                and #%10001111
001CD1r 3  05 rr                ora tmp
001CD3r 3  8D 0F 90             sta RegF
001CD6r 3  A9 0B                lda #11
001CD8r 3  85 rr                sta chary
001CDAr 3  A9 00                lda #0
001CDCr 3  85 rr                sta charx
001CDEr 3  A9 01                lda #1  	; MESSAGE
001CE0r 3  20 rr rr             jsr dmsg
001CE3r 3  A9 64                lda #100 	; DELAY
001CE5r 3  20 rr rr             jsr delay
001CE8r 3  A9 02                lda #2 	; INK
001CEAr 3  8D rr rr             sta fontcol
001CEDr 3  A9 01                lda #1 	; PAPER
001CEFr 3  0A                   asl a
001CF0r 3  0A                   asl a
001CF1r 3  0A                   asl a
001CF2r 3  0A                   asl a
001CF3r 3  85 rr                sta tmp
001CF5r 3  AD 0F 90             lda RegF
001CF8r 3  29 8F                and #%10001111
001CFAr 3  05 rr                ora tmp
001CFCr 3  8D 0F 90             sta RegF
001CFFr 3  20 rr rr             jsr cls		; CLS
001D02r 3  A9 00                lda #0
001D04r 3  85 rr                sta chary
001D06r 3  A9 00                lda #0
001D08r 3  85 rr                sta charx
001D0Ar 3  A9 00                lda #0  	; MESSAGE
001D0Cr 3  20 rr rr             jsr dmsg
001D0Fr 3  A9 63                lda #99
001D11r 3  85 rr                sta numlif
001D13r 3  A9 00                lda #0
001D15r 3  85 rr                sta chary
001D17r 3  A9 07                lda #7
001D19r 3  85 rr                sta charx
001D1Br 3  A9 rr                lda #<displ0	; DISPLAYDOUBLE
001D1Dr 3  85 rr                sta z80_c
001D1Fr 3  A9 rr                lda #>displ0
001D21r 3  85 rr                sta z80_b
001D23r 3  A5 rr                lda numlif
001D25r 3  20 rr rr             jsr num2dd
001D28r 3  20 rr rr             jsr displ1
001D2Br 3  A9 00                lda #0
001D2Dr 3  85 rr                sta chary
001D2Fr 3  A9 0B                lda #11
001D31r 3  85 rr                sta charx
001D33r 3  A9 02                lda #2  	; MESSAGE
001D35r 3  20 rr rr             jsr dmsg
001D38r 3  A9 00                lda #0
001D3Ar 3  85 rr                sta varn
001D3Cr 3  A9 00                lda #0
001D3Er 3  85 rr                sta chary
001D40r 3  A9 15                lda #21
001D42r 3  85 rr                sta charx
001D44r 3  A5 rr                lda varn	; DISPLAY
001D46r 3  20 rr rr             jsr disply
001D49r 3  A9 00                lda #0
001D4Br 3  85 rr                sta vara
001D4Dr 3  A9 01                lda #1
001D4Fr 3  85 rr                sta varp
001D51r 3  A9 01                lda #1
001D53r 3  85 rr                sta varq
001D55r 3  A9 00                lda #0
001D57r 3  85 rr                sta varg
001D59r 3  A9 00                lda #0
001D5Br 3  85 rr                sta varj
001D5Dr 3  A9 02                lda #2
001D5Fr 3  85 rr                sta varr
001D61r 3  A9 01                lda #1
001D63r 3  85 rr                sta vars
001D65r 3  A9 01                lda #1
001D67r 3  85 rr                sta vart
001D69r 3  A9 00                lda #0
001D6Br 3  85 rr                sta varb
001D6Dr 3  A9 00                lda #0
001D6Fr 3  85 rr                sta varm
001D71r 3  60                   rts
001D72r 3               evnt14:
001D72r 3  A9 FF                lda #255
001D74r 3  85 rr                sta vark
001D76r 3  A9 FF                lda #255
001D78r 3  85 rr                sta varopt
001D7Ar 3  A9 FF                lda #255
001D7Cr 3  85 rr                sta varb
001D7Er 3  A9 FF                lda #255
001D80r 3  85 rr                sta varc
001D82r 3  A9 01                lda #1
001D84r 3  C5 rr                cmp varg
001D86r 3  F0 03                beq *+5
001D88r 3  4C rr rr             jmp o00061
001D8Br 3  A9 FF                lda #255
001D8Dr 3  85 rr                sta vard
001D8Fr 3  A9 FF        o00061: lda #255
001D91r 3  85 rr                sta vare
001D93r 3  A9 FF                lda #255
001D95r 3  85 rr                sta varf
001D97r 3  A9 00                lda #0
001D99r 3  C5 rr                cmp varq
001D9Br 3  F0 03                beq *+5
001D9Dr 3  4C rr rr             jmp o00104
001DA0r 3  A9 FF                lda #255
001DA2r 3  85 rr                sta vari
001DA4r 3  A9 FF        o00104: lda #255
001DA6r 3  85 rr                sta varl
001DA8r 3  A9 00                lda #0 	; PAPER
001DAAr 3  0A                   asl a
001DABr 3  0A                   asl a
001DACr 3  0A                   asl a
001DADr 3  0A                   asl a
001DAEr 3  85 rr                sta tmp
001DB0r 3  AD 0F 90             lda RegF
001DB3r 3  29 8F                and #%10001111
001DB5r 3  05 rr                ora tmp
001DB7r 3  8D 0F 90             sta RegF
001DBAr 3  A9 02                lda #2 	; INK
001DBCr 3  8D rr rr             sta fontcol
001DBFr 3                       ; CLW command
001DBFr 3  60                   rts
001DC0r 3               evnt15:
001DC0r 3  A9 00                lda #0
001DC2r 3  A0 05                ldy #5
001DC4r 3  D1 rr                cmp (z80_ix),y
001DC6r 3  F0 03                beq *+5
001DC8r 3  4C rr rr             jmp p00034
001DCBr 3  A9 01                lda #1 		; KILL
001DCDr 3  85 rr                sta deadf
001DCFr 3  60           p00034: rts
001DD0r 3               evnt16:
001DD0r 3  20 rr rr             jsr cls		; CLS
001DD3r 3  60                   rts
001DD4r 3               evnt17:
001DD4r 3  A9 96                lda #150 	; DELAY
001DD6r 3  20 rr rr             jsr delay
001DD9r 3  60                   rts
001DDAr 3               evnt18:
001DDAr 3  A9 C8                lda #200 	; DELAY
001DDCr 3  20 rr rr             jsr delay
001DDFr 3  20 rr rr             jsr cls		; CLS
001DE2r 3  60                   rts
001DE3r 3               evnt19:
001DE3r 3  60                   rts
001DE4r 3               evnt20:
001DE4r 3  60                   rts
001DE5r 3  60           ptcusr: rts
001DE6r 3               data_start:
001DE6r 3               msgdat:
001DE6r 3  45 4E 45 52          .byte "ENERG",217
001DEAr 3  47 D9        
001DECr 3  54 48 45 20          .byte "THE CURTAIN IS RAISED",174
001DF0r 3  43 55 52 54  
001DF4r 3  41 49 4E 20  
001E02r 3  4F 52 43 48          .byte "ORCHESTR",193
001E06r 3  45 53 54 52  
001E0Ar 3  C1           
001E0Br 3  47 4F 20 46          .byte "GO FOR I",212
001E0Fr 3  4F 52 20 49  
001E13r 3  D4           
001E14r 3  ED                   .byte 237
001E15r 3  47 41 4D 45          .byte "GAME OVE",210
001E19r 3  20 4F 56 45  
001E1Dr 3  D2           
001E1Er 3               nummsg:
001E1Er 3  06                   .byte 6
001E1Fr 3               chgfx:
001E1Fr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001E23r 3  00 00 00 00  
001E27r 3  3D 7F FF 7F          .byte 61,127,255,127,187,117,106,0
001E2Br 3  BB 75 6A 00  
001E2Fr 3  3E FE FF FF          .byte 62,254,255,255,170,213,106,0
001E33r 3  AA D5 6A 00  
001E37r 3  30 7E FF FF          .byte 48,126,255,255,187,87,42,0
001E3Br 3  BB 57 2A 00  
001E3Fr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001E43r 3  00 00 00 00  
001E47r 3  18 4D 5D 7D          .byte 24,77,93,125,125,24,0,220
001E4Br 3  7D 18 00 DC  
001E4Fr 3  FA 78 F0 E6          .byte 250,120,240,230,239,239,2,184
001E53r 3  EF EF 02 B8  
001E57r 3  F6 FE BE 78          .byte 246,254,190,120,0,60,119,42
001E5Br 3  00 3C 77 2A  
001E5Fr 3  3C 98 C8 30          .byte 60,152,200,48,184,56,24,0
001E63r 3  B8 38 18 00  
001E67r 3  07 6F EE 64          .byte 7,111,238,100,116,0,0,0
001E6Br 3  74 00 00 00  
001E6Fr 3  F3 FF FF FF          .byte 243,255,255,255,255,0,0,0
001E73r 3  FF 00 00 00  
001E77r 3  40 F6 37 26          .byte 64,246,55,38,12,0,0,0
001E7Br 3  0C 00 00 00  
001E7Fr 3  5F 1E 0F 67          .byte 95,30,15,103,247,247,64,29
001E83r 3  F7 F7 40 1D  
001E87r 3  18 B2 BA BE          .byte 24,178,186,190,190,24,0,59
001E8Br 3  BE 18 00 3B  
001E8Fr 3  3C 19 13 0C          .byte 60,25,19,12,29,28,24,0
001E93r 3  1D 1C 18 00  
001E97r 3  6F 7F 7D 3E          .byte 111,127,125,62,0,60,118,44
001E9Br 3  00 3C 76 2C  
001E9Fr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
001EA3r 3  00 00 00 00  
001EA7r 3  38 44 45 24          .byte 56,68,69,36,5,8,16,32
001EABr 3  05 08 10 20  
001EAFr 3  3F 7F F8 55          .byte 63,127,248,85,42,0,42,85
001EB3r 3  2A 00 2A 55  
001EB7r 3  FF FF 00 55          .byte 255,255,0,85,170,0,0,0
001EBBr 3  AA 00 00 00  
001EBFr 3  FC FE 1F 55          .byte 252,254,31,85,170,0,84,170
001EC3r 3  AA 00 54 AA  
001EC7r 3  AA D5 7D FD          .byte 170,213,125,253,93,253,45,253
001ECBr 3  5D FD 2D FD  
001ECFr 3  55 AB BE BF          .byte 85,171,190,191,186,191,180,191
001ED3r 3  BA BF B4 BF  
001ED7r 3  15 FD 2D FD          .byte 21,253,45,253,125,203,126,0
001EDBr 3  7D CB 7E 00  
001EDFr 3  A8 BF B4 BF          .byte 168,191,180,191,190,211,126,0
001EE3r 3  BE D3 7E 00  
001EE7r 3  DB B4 84 37          .byte 219,180,132,55,155,49,13,0
001EEBr 3  9B 31 0D 00  
001EEFr 3  F5 9A 88 7B          .byte 245,154,136,123,100,238,72,0
001EF3r 3  64 EE 48 00  
001EF7r 3  00 00 3F 61          .byte 0,0,63,97,106,111,112,42
001EFBr 3  6A 6F 70 2A  
001EFFr 3  00 00 FF 55          .byte 0,0,255,85,170,255,0,170
001F03r 3  AA FF 00 AA  
001F07r 3  00 00 FF AA          .byte 0,0,255,170,85,255,0,85
001F0Br 3  55 FF 00 55  
001F0Fr 3  00 00 FC 86          .byte 0,0,252,134,86,246,14,84
001F13r 3  56 F6 0E 54  
001F17r 3  1C 36 55 55          .byte 28,54,85,85,85,85,85,127
001F1Br 3  55 55 55 7F  
001F1Fr 3  55 55 55 55          .byte 85,85,85,85,85,85,127,0
001F23r 3  55 55 7F 00  
001F27r 3  00 01 12 4A          .byte 0,1,18,74,108,61,62,54
001F2Br 3  6C 3D 3E 36  
001F2Fr 3  77 3E 36 36          .byte 119,62,54,54,28,20,28,8
001F33r 3  1C 14 1C 08  
001F37r 3  FF 00 AA 55          .byte 255,0,170,85,0,255,106,255
001F3Br 3  00 FF 6A FF  
001F3Fr 3  00 FF AA 55          .byte 0,255,170,85,170,255,0,255
001F43r 3  AA FF 00 FF  
001F47r 3  92 49 24 92          .byte 146,73,36,146,73,255,0,255
001F4Br 3  49 FF 00 FF  
001F4Fr 3  7F 7F 40 5F          .byte 127,127,64,95,80,80,80,80
001F53r 3  50 50 50 50  
001F57r 3  FF 80 AA 95          .byte 255,128,170,149,128,255,0,0
001F5Br 3  80 FF 00 00  
001F5Fr 3  FF 01 A9 55          .byte 255,1,169,85,1,255,0,0
001F63r 3  01 FF 00 00  
001F67r 3  FE FE 02 FA          .byte 254,254,2,250,10,10,10,10
001F6Br 3  0A 0A 0A 0A  
001F6Fr 3  50 50 50 50          .byte 80,80,80,80,80,80,80,80
001F73r 3  50 50 50 50  
001F77r 3  50 50 50 50          .byte 80,80,80,80,80,80,0,80
001F7Br 3  50 50 00 50  
001F7Fr 3  7F 7F 40 5F          .byte 127,127,64,95,80,85,82,85
001F83r 3  50 55 52 55  
001F87r 3  FF FF 00 FF          .byte 255,255,0,255,0,85,170,255
001F8Br 3  00 55 AA FF  
001F8Fr 3  FF 80 AA 95          .byte 255,128,170,149,128,255,106,127
001F93r 3  80 FF 6A 7F  
001F97r 3  FF 01 A9 55          .byte 255,1,169,85,1,255,170,254
001F9Br 3  01 FF AA FE  
001F9Fr 3  FE FE 02 FA          .byte 254,254,2,250,10,74,170,234
001FA3r 3  0A 4A AA EA  
001FA7r 3  53 55 53 55          .byte 83,85,83,85,83,85,83,85
001FABr 3  53 55 53 55  
001FAFr 3  FF 80 80 95          .byte 255,128,128,149,149,151,159,149
001FB3r 3  95 97 9F 95  
001FB7r 3  FF 00 00 55          .byte 255,0,0,85,85,253,87,253
001FBBr 3  55 FD 57 FD  
001FBFr 3  FF 00 00 55          .byte 255,0,0,85,85,127,213,127
001FC3r 3  55 7F D5 7F  
001FC7r 3  FF 00 00 54          .byte 255,0,0,84,84,212,86,254
001FCBr 3  54 D4 56 FE  
001FCFr 3  EA EA EA EA          .byte 234,234,234,234,234,234,234,234
001FD3r 3  EA EA EA EA  
001FD7r 3  9F 9F 80 FF          .byte 159,159,128,255,255,255,255,128
001FDBr 3  FF FF FF 80  
001FDFr 3  FF FF 00 FF          .byte 255,255,0,255,255,255,255,0
001FE3r 3  FF FF FF 00  
001FE7r 3  FF FF 00 FF          .byte 255,255,0,255,255,255,255,0
001FEBr 3  FF FF FF 00  
001FEFr 3  FE FE 00 FF          .byte 254,254,0,255,192,248,255,0
001FF3r 3  C0 F8 FF 00  
001FF7r 3  53 55 53 55          .byte 83,85,83,85,83,85,83,0
001FFBr 3  53 55 53 00  
001FFFr 3  8A 9B 9F 9B          .byte 138,155,159,155,159,128,255,0
002003r 3  9F 80 FF 00  
002007r 3  AA FF BB FF          .byte 170,255,187,255,255,0,255,0
00200Br 3  FF 00 FF 00  
00200Fr 3  AA EF FB FF          .byte 170,239,251,255,255,0,255,0
002013r 3  FF 00 FF 00  
002017r 3  AA EE FA FE          .byte 170,238,250,254,254,0,255,0
00201Br 3  FE 00 FF 00  
00201Fr 3  AA EE FA FE          .byte 170,238,250,254,254,0,255,0
002023r 3  FE 00 FF 00  
002027r 3  EA EA EA EA          .byte 234,234,234,234,234,234,234,0
00202Br 3  EA EA EA 00  
00202Fr 3  FF 00 55 88          .byte 255,0,85,136,221,221,221,221
002033r 3  DD DD DD DD  
002037r 3  DD DD DD DD          .byte 221,221,221,221,221,221,221,221
00203Br 3  DD DD DD DD  
00203Fr 3  DD DD DD DD          .byte 221,221,221,221,255,0,0,255
002043r 3  FF 00 00 FF  
002047r 3  EA C8 A2 80          .byte 234,200,162,128,34,2,0,0
00204Br 3  22 02 00 00  
00204Fr 3  FF FD 5B AD          .byte 255,253,91,173,45,138,33,10
002053r 3  2D 8A 21 0A  
002057r 3  15 FD 2D FD          .byte 21,253,45,253,125,203,126,0
00205Br 3  7D CB 7E 00  
00205Fr 3  7D FD 5D FD          .byte 125,253,93,253,125,253,29,253
002063r 3  7D FD 1D FD  
002067r 3  BC BF BA BF          .byte 188,191,186,191,190,191,188,191
00206Br 3  BE BF BC BF  
00206Fr 3  A8 B7 BC BF          .byte 168,183,188,191,190,211,126,0
002073r 3  BE D3 7E 00  
002077r 3  00 20 30 10          .byte 0,32,48,16,16,16,0,0
00207Br 3  10 10 00 00  
00207Fr 3  FC E0 C0 CC          .byte 252,224,192,204,204,200,136,143
002083r 3  CC C8 88 8F  
002087r 3  FF 00 00 55          .byte 255,0,0,85,254,253,251,247
00208Br 3  FE FD FB F7  
00208Fr 3  EF DF BF 7F          .byte 239,223,191,127,254,253,251,247
002093r 3  FE FD FB F7  
002097r 3  10 20 40 01          .byte 16,32,64,1,1,255,255,0
00209Br 3  01 FF FF 00  
00209Fr 3  00 40 60 20          .byte 0,64,96,32,32,48,40,52
0020A3r 3  20 30 28 34  
0020A7r 3  06 0B 10 30          .byte 6,11,16,48,32,98,76,216
0020ABr 3  20 62 4C D8  
0020AFr 3  14 1A 3A 5A          .byte 20,26,58,90,10,11,10,21
0020B3r 3  0A 0B 0A 15  
0020B7r 3  90 90 B7 B8          .byte 144,144,183,184,176,224,160,80
0020BBr 3  B0 E0 A0 50  
0020BFr 3  00 00 38 4C          .byte 0,0,56,76,6,3,113,156
0020C3r 3  06 03 71 9C  
0020C7r 3  00 00 00 00          .byte 0,0,0,0,14,25,152,168
0020CBr 3  0E 19 98 A8  
0020CFr 3  0E 07 C3 73          .byte 14,7,195,115,57,20,9,0
0020D3r 3  39 14 09 00  
0020D7r 3  52 17 1D 18          .byte 82,23,29,24,40,16,40,0
0020DBr 3  28 10 28 00  
0020DFr 3  00 7F 51 3F          .byte 0,127,81,63,0,63,55,59
0020E3r 3  00 3F 37 3B  
0020E7r 3  00 FF 5F FE          .byte 0,255,95,254,0,252,252,252
0020EBr 3  00 FC FC FC  
0020EFr 3  17 1B 17 1B          .byte 23,27,23,27,17,16,16,15
0020F3r 3  11 10 10 0F  
0020F7r 3  F8 F8 F8 F8          .byte 248,248,248,248,248,184,8,240
0020FBr 3  F8 B8 08 F0  
0020FFr 3  55 3E 7F FE          .byte 85,62,127,254,124,0,0,0
002103r 3  7C 00 00 00  
002107r 3  00 00 00 7C          .byte 0,0,0,124,254,127,190,85
00210Br 3  FE 7F BE 55  
00210Fr 3  0E 1F 1E 1F          .byte 14,31,30,31,10,21,10,0
002113r 3  0A 15 0A 00  
002117r 3  38 7C FC 7C          .byte 56,124,252,124,92,40,80,0
00211Br 3  5C 28 50 00  
00211Fr 3  FE FC F8 F0          .byte 254,252,248,240,224,192,192,252
002123r 3  E0 C0 C0 FC  
002127r 3  7F 3F 1F 0F          .byte 127,63,31,15,7,3,3,31
00212Br 3  07 03 03 1F  
00212Fr 3  FC FC FC FC          .byte 252,252,252,252,252,255,252,255
002133r 3  FC FF FC FF  
002137r 3  1F 1F 1F 1F          .byte 31,31,31,31,31,255,31,255
00213Br 3  1F FF 1F FF  
00213Fr 3  FF FC FF FC          .byte 255,252,255,252,252,252,252,252
002143r 3  FC FC FC FC  
002147r 3  1F 03 03 07          .byte 31,3,3,7,15,31,63,127
00214Br 3  0F 1F 3F 7F  
00214Fr 3  FF FF FF FF          .byte 255,255,255,255,255,255,160,160
002153r 3  FF FF A0 A0  
002157r 3  FF FF 9F 8F          .byte 255,255,159,143,135,131,1,0
00215Br 3  87 83 01 00  
00215Fr 3  A0 A0 A0 FF          .byte 160,160,160,255,255,255,255,255
002163r 3  FF FF FF FF  
002167r 3  00 01 03 87          .byte 0,1,3,135,143,159,255,255
00216Br 3  8F 9F FF FF  
00216Fr 3  FF FF F9 F1          .byte 255,255,249,241,225,193,128,0
002173r 3  E1 C1 80 00  
002177r 3  FF FF FF FF          .byte 255,255,255,255,255,255,5,5
00217Br 3  FF FF 05 05  
00217Fr 3  00 80 C0 E1          .byte 0,128,192,225,241,249,255,255
002183r 3  F1 F9 FF FF  
002187r 3  05 05 05 FF          .byte 5,5,5,255,255,255,255,255
00218Br 3  FF FF FF FF  
00218Fr 3  7F D5 80 DF          .byte 127,213,128,223,159,217,157,217
002193r 3  9F D9 9D D9  
002197r 3  FE 57 01 FB          .byte 254,87,1,251,249,155,217,155
00219Br 3  F9 9B D9 9B  
00219Fr 3  9F 9C 96 99          .byte 159,156,150,153,159,192,234,127
0021A3r 3  9F C0 EA 7F  
0021A7r 3  F9 7B D9 3B          .byte 249,123,217,59,249,3,171,254
0021ABr 3  F9 03 AB FE  
0021AFr 3  A0 40 3F 27          .byte 160,64,63,39,35,49,56,56
0021B3r 3  23 31 38 38  
0021B7r 3  01 02 FC E4          .byte 1,2,252,228,196,140,28,28
0021BBr 3  C4 8C 1C 1C  
0021BFr 3  32 32 31 37          .byte 50,50,49,55,59,60,64,128
0021C3r 3  3B 3C 40 80  
0021C7r 3  4C 4C 8C EC          .byte 76,76,140,236,92,60,2,1
0021CBr 3  5C 3C 02 01  
0021CFr 3  00 40 60 20          .byte 0,64,96,32,32,48,40,52
0021D3r 3  20 30 28 34  
0021D7r 3  06 0A 11 30          .byte 6,10,17,48,32,98,76,216
0021DBr 3  20 62 4C D8  
0021DFr 3  14 1A 3A 5A          .byte 20,26,58,90,10,11,10,21
0021E3r 3  0A 0B 0A 15  
0021E7r 3  90 B0 A6 B9          .byte 144,176,166,185,176,224,160,80
0021EBr 3  B0 E0 A0 50  
0021EFr 3  0E 07 C3 73          .byte 14,7,195,115,57,20,9,0
0021F3r 3  39 14 09 00  
0021F7r 3  52 57 1D 98          .byte 82,87,29,152,40,144,40,0
0021FBr 3  28 90 28 00  
0021FFr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002203r 3  00 00 00 00  
002207r 3  1F 14 1F 14          .byte 31,20,31,20,31,20,31,0
00220Br 3  1F 14 1F 00  
00220Fr 3  EB 0C ED 0A          .byte 235,12,237,10,234,8,187,56
002213r 3  EA 08 BB 38  
002217r 3  FF 00 BB 38          .byte 255,0,187,56,167,32,175,32
00221Br 3  A7 20 AF 20  
00221Fr 3  20 28 28 30          .byte 32,40,40,48,48,32,0,0
002223r 3  30 20 00 00  
002227r 3  F2 0E BE 32          .byte 242,14,190,50,162,34,174,46
00222Br 3  A2 22 AE 2E  
00222Fr 3  E0 E0 00 00          .byte 224,224,0,0,0,0,0,0
002233r 3  00 00 00 00  
002237r 3  EB 0C ED 0A          .byte 235,12,237,10,234,10,185,56
00223Br 3  EA 0A B9 38  
00223Fr 3  04 1C 1C 00          .byte 4,28,28,0,0,0,0,0
002243r 3  00 00 00 00  
002247r 3  FF 00 BB 38          .byte 255,0,187,56,163,40,179,48
00224Br 3  A3 28 B3 30  
00224Fr 3  20 00 00 00          .byte 32,0,0,0,0,0,0,0
002253r 3  00 00 00 00  
002257r 3  B7 38 AD 22          .byte 183,56,173,34,170,34,234,226
00225Br 3  AA 22 EA E2  
00225Fr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002263r 3  00 00 00 00  
002267r 3  1C 1C 00 00          .byte 28,28,0,0,0,0,0,0
00226Br 3  00 00 00 00  
00226Fr 3  FF 08 FF 08          .byte 255,8,255,8,255,8,255,0
002273r 3  FF 08 FF 00  
002277r 3  7F 80 95 BF          .byte 127,128,149,191,191,191,160,167
00227Br 3  BF BF A0 A7  
00227Fr 3  FE 01 55 FF          .byte 254,1,85,255,255,255,3,251
002283r 3  FF FF 03 FB  
002287r 3  A7 A6 A7 A7          .byte 167,166,167,167,160,191,160,167
00228Br 3  A0 BF A0 A7  
00228Fr 3  FB DB 3B FB          .byte 251,219,59,251,3,255,3,251
002293r 3  03 FF 03 FB  
002297r 3  A7 A6 A7 A7          .byte 167,166,167,167,160,255,0,192
00229Br 3  A0 FF 00 C0  
00229Fr 3  FB DB 3B FB          .byte 251,219,59,251,3,255,0,3
0022A3r 3  03 FF 00 03  
0022A7r 3  FC F3 EF DF          .byte 252,243,239,223,223,191,191,191
0022ABr 3  DF BF BF BF  
0022AFr 3  1F 67 FB FD          .byte 31,103,251,253,125,126,126,126
0022B3r 3  7D 7E 7E 7E  
0022B7r 3  9E BF BF DF          .byte 158,191,191,223,223,239,243,252
0022BBr 3  DF EF F3 FC  
0022BFr 3  04 7E FE FD          .byte 4,126,254,253,253,251,103,31
0022C3r 3  FD FB 67 1F  
0022C7r 3  00 FF 00 FF          .byte 0,255,0,255,0,255,0,0
0022CBr 3  00 FF 00 00  
0022CFr 3  FF 05 FF 05          .byte 255,5,255,5,255,5,255,0
0022D3r 3  FF 05 FF 00  
0022D7r 3  FF A0 FF A0          .byte 255,160,255,160,255,160,255,0
0022DBr 3  FF A0 FF 00  
0022DFr 3  15 91 91 3D          .byte 21,145,145,61,125,248,85,3
0022E3r 3  7D F8 55 03  
0022E7r 3  7F 8B BD B8          .byte 127,139,189,184,189,159,111,151
0022EBr 3  BD 9F 6F 97  
0022EFr 3  FF 15 FF FF          .byte 255,21,255,255,223,143,223,255
0022F3r 3  DF 8F DF FF  
0022F7r 3  FF FD DF 8F          .byte 255,253,223,143,222,252,254,255
0022FBr 3  DE FC FE FF  
0022FFr 3  FC 42 FD FD          .byte 252,66,253,253,253,121,246,233
002303r 3  FD 79 F6 E9  
002307r 3  D2 F0 D2 F2          .byte 210,240,210,242,247,112,15,96
00230Br 3  F7 70 0F 60  
00230Fr 3  AA 00 B6 B6          .byte 170,0,182,182,255,64,255,0
002313r 3  FF 40 FF 00  
002317r 3  AA 00 DB DB          .byte 170,0,219,219,255,0,255,0
00231Br 3  FF 00 FF 00  
00231Fr 3  AB 0F 4D 4F          .byte 171,15,77,79,239,14,240,6
002323r 3  EF 0E F0 06  
002327r 3  1F 20 2F 2F          .byte 31,32,47,47,47,47,0,63
00232Br 3  2F 2F 00 3F  
00232Fr 3  F8 AC FC FC          .byte 248,172,252,252,252,252,0,252
002333r 3  FC FC 00 FC  
002337r 3  7F 40 7F 00          .byte 127,64,127,0,96,96,0,96
00233Br 3  60 60 00 60  
00233Fr 3  FE 14 FE 00          .byte 254,20,254,0,6,6,0,6
002343r 3  06 06 00 06  
002347r 3  7F 60 6F 6E          .byte 127,96,111,110,96,127,96,111
00234Br 3  60 7F 60 6F  
00234Fr 3  FE 02 FA 7A          .byte 254,2,250,122,2,254,2,250
002353r 3  02 FE 02 FA  
002357r 3  6E 60 7F 6A          .byte 110,96,127,106,96,103,0,96
00235Br 3  60 67 00 60  
00235Fr 3  7A 02 FE AE          .byte 122,2,254,174,6,246,0,6
002363r 3  06 F6 00 06  
002367r 3  01 01 01 01          .byte 1,1,1,1,1,1,3,6
00236Br 3  01 01 03 06  
00236Fr 3  80 80 80 80          .byte 128,128,128,128,128,128,192,96
002373r 3  80 80 C0 60  
002377r 3  08 07 0E 1D          .byte 8,7,14,29,63,117,170,0
00237Br 3  3F 75 AA 00  
00237Fr 3  10 E0 78 B8          .byte 16,224,120,184,252,174,85,0
002383r 3  FC AE 55 00  
002387r 3  FF BE FE FE          .byte 255,190,254,254,248,240,242,242
00238Br 3  F8 F0 F2 F2  
00238Fr 3  FF 3D 3F 3F          .byte 255,61,63,63,15,7,39,39
002393r 3  0F 07 27 27  
002397r 3  F2 F2 F2 FE          .byte 242,242,242,254,254,254,188,252
00239Br 3  FE FE BC FC  
00239Fr 3  27 27 27 BF          .byte 39,39,39,191,191,191,157,159
0023A3r 3  BF BF 9D 9F  
0023A7r 3  FF FF FF FF          .byte 255,255,255,255,192,128,15,29
0023ABr 3  C0 80 0F 1D  
0023AFr 3  FF FF FF FF          .byte 255,255,255,255,3,1,240,184
0023B3r 3  03 01 F0 B8  
0023B7r 3  E2 0A 17 2A          .byte 226,10,23,42,19,43,19,43
0023BBr 3  13 2B 13 2B  
0023BFr 3  22 98 EC A2          .byte 34,152,236,162,252,84,250,250
0023C3r 3  FC 54 FA FA  
0023C7r 3  00 24 10 03          .byte 0,36,16,3,135,44,13,175
0023CBr 3  87 2C 0D AF  
0023CFr 3  90 84 28 C0          .byte 144,132,40,192,225,148,176,245
0023D3r 3  E1 94 B0 F5  
0023D7r 3  0E 2B 84 03          .byte 14,43,132,3,16,36,64,8
0023DBr 3  10 24 40 08  
0023DFr 3  70 D0 24 C1          .byte 112,208,36,193,8,164,130,144
0023E3r 3  08 A4 82 90  
0023E7r 3  00 0F 10 26          .byte 0,15,16,38,78,88,86,94
0023EBr 3  4E 58 56 5E  
0023EFr 3  00 F0 08 04          .byte 0,240,8,4,114,122,122,122
0023F3r 3  72 7A 7A 7A  
0023F7r 3  41 5E 5A 56          .byte 65,94,90,86,94,64,127,255
0023FBr 3  5E 40 7F FF  
0023FFr 3  82 7A 7A 7A          .byte 130,122,122,122,122,2,254,255
002403r 3  7A 02 FE FF  
002407r 3  92 49 24 92          .byte 146,73,36,146,73,36,146,73
00240Br 3  49 24 92 49  
00240Fr 3  0A 0A 0A 0A          .byte 10,10,10,10,10,10,10,10
002413r 3  0A 0A 0A 0A  
002417r 3  0A 0A 0A 0A          .byte 10,10,10,10,10,10,0,10
00241Br 3  0A 0A 00 0A  
00241Fr 3  7E FF 81 7E          .byte 126,255,129,126,0,0,0,0
002423r 3  00 00 00 00  
002427r 3  6B 6B 68 6F          .byte 107,107,104,111,104,107,107,107
00242Br 3  68 6B 6B 6B  
00242Fr 3  9D FD 01 FF          .byte 157,253,1,255,1,253,157,253
002433r 3  01 FD 9D FD  
002437r 3  00 55 BF 7F          .byte 0,85,191,127,255,126,0,0
00243Br 3  FF 7E 00 00  
00243Fr 3  00 00 7D FF          .byte 0,0,125,255,127,191,87,0
002443r 3  7F BF 57 00  
002447r 3  2E 5F 1F 3F          .byte 46,95,31,63,15,23,11,0
00244Br 3  0F 17 0B 00  
00244Fr 3  38 7C FC 7C          .byte 56,124,252,124,220,40,80,0
002453r 3  DC 28 50 00  
002457r 3  FF FF C3 C3          .byte 255,255,195,195,195,195,194,193
00245Br 3  C3 C3 C2 C1  
00245Fr 3  FF FF 0C 0C          .byte 255,255,12,12,12,12,8,4
002463r 3  0C 0C 08 04  
002467r 3  FF FF 30 30          .byte 255,255,48,48,48,48,32,16
00246Br 3  30 30 20 10  
00246Fr 3  FF FF C3 C3          .byte 255,255,195,195,195,195,130,65
002473r 3  C3 C3 82 41  
002477r 3  FC FC 0C 0C          .byte 252,252,12,12,12,12,8,4
00247Br 3  0C 0C 08 04  
00247Fr 3  03 03 03 03          .byte 3,3,3,3,3,3,3,2
002483r 3  03 03 03 02  
002487r 3  0C 0C 0C 0C          .byte 12,12,12,12,12,12,12,8
00248Br 3  0C 0C 0C 08  
00248Fr 3  30 30 30 30          .byte 48,48,48,48,48,48,48,32
002493r 3  30 30 30 20  
002497r 3  C3 C3 C3 C3          .byte 195,195,195,195,195,195,195,130
00249Br 3  C3 C3 C3 82  
00249Fr 3  C1 C2 C3 C3          .byte 193,194,195,195,195,195,195,130
0024A3r 3  C3 C3 C3 82  
0024A7r 3  7F 40 40 4B          .byte 127,64,64,75,91,75,91,75
0024ABr 3  5B 4B 5B 4B  
0024AFr 3  FF 00 00 BB          .byte 255,0,0,187,187,187,187,251
0024B3r 3  BB BB BB FB  
0024B7r 3  FE 02 02 B2          .byte 254,2,2,178,178,242,178,242
0024BBr 3  B2 F2 B2 F2  
0024BFr 3  5F 4B 5F 4B          .byte 95,75,95,75,95,79,95,75
0024C3r 3  5F 4F 5F 4B  
0024C7r 3  BB FB BE B9          .byte 187,251,190,185,185,254,187,187
0024CBr 3  B9 FE BB BB  
0024CFr 3  F2 32 12 22          .byte 242,50,18,34,226,18,242,242
0024D3r 3  E2 12 F2 F2  
0024D7r 3  5B 4F 1B 4F          .byte 91,79,27,79,95,64,127,0
0024DBr 3  5F 40 7F 00  
0024DFr 3  BB BB BB BF          .byte 187,187,187,191,191,0,255,0
0024E3r 3  BF 00 FF 00  
0024E7r 3  F2 B2 F2 B3          .byte 242,178,242,179,179,2,254,0
0024EBr 3  B3 02 FE 00  
0024EFr 3  3E 7F 7E 5F          .byte 62,127,126,95,170,85,42,0
0024F3r 3  AA 55 2A 00  
0024F7r 3  34 7A FF 7E          .byte 52,122,255,126,171,85,170,0
0024FBr 3  AB 55 AA 00  
0024FFr 3  62 F7 7E 75          .byte 98,247,126,117,186,85,34,0
002503r 3  BA 55 22 00  
002507r 3  00 27 6F 6F          .byte 0,39,111,111,24,16,16,25
00250Br 3  18 10 10 19  
00250Fr 3  00 F2 FB FB          .byte 0,242,251,251,140,132,132,76
002513r 3  8C 84 84 4C  
002517r 3  1F 0E 0E 0B          .byte 31,14,14,11,98,120,51,0
00251Br 3  62 78 33 00  
00251Fr 3  7C 38 B8 E8          .byte 124,56,184,232,163,15,230,0
002523r 3  A3 0F E6 00  
002527r 3  7E 42 FE E7          .byte 126,66,254,231,231,239,239,62
00252Br 3  E7 EF EF 3E  
00252Fr 3  FF FF FF AA          .byte 255,255,255,170,127,191,223,239
002533r 3  7F BF DF EF  
002537r 3  F7 FB F9 FE          .byte 247,251,249,254,127,143,207,239
00253Br 3  7F 8F CF EF  
00253Fr 3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0
002543r 3  FF 00 FF 00  
002547r 3  F7 FB FD FE          .byte 247,251,253,254,255,0,0,255
00254Br 3  FF 00 00 FF  
00254Fr 3  1C 36 55 55          .byte 28,54,85,85,85,85,85,127
002553r 3  55 55 55 7F  
002557r 3  55 55 55 55          .byte 85,85,85,85,85,85,127,0
00255Br 3  55 55 7F 00  
00255Fr 3  00 02 24 94          .byte 0,2,36,148,221,94,108,56
002563r 3  DD 5E 6C 38  
002567r 3  77 3E 36 36          .byte 119,62,54,54,28,20,28,8
00256Br 3  1C 14 1C 08  
00256Fr 3  10 18 18 14          .byte 16,24,24,20,20,16,112,112
002573r 3  14 10 70 70  
002577r 3  F8 08 F8 08          .byte 248,8,248,8,248,8,248,0
00257Br 3  F8 08 F8 00  
00257Fr 3  F9 03 FA 02          .byte 249,3,250,2,250,2,250,1
002583r 3  FA 02 FA 01  
002587r 3  9F 40 6F 20          .byte 159,64,111,32,55,48,103,192
00258Br 3  37 30 67 C0  
00258Fr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
002593r 3  00 00 00 00  
002597r 3  00 00 01 03          .byte 0,0,1,3,7,7,1,0
00259Br 3  07 07 01 00  
00259Fr 3  78 FE FF FF          .byte 120,254,255,255,255,255,255,30
0025A3r 3  FF FF FF 1E  
0025A7r 3  00 00 70 F8          .byte 0,0,112,248,252,252,240,0
0025ABr 3  FC FC F0 00  
0025AFr 3  03 07 0D 19          .byte 3,7,13,25,51,54,52,52
0025B3r 3  33 36 34 34  
0025B7r 3  80 00 00 00          .byte 128,0,0,0,224,176,152,152
0025BBr 3  E0 B0 98 98  
0025BFr 3  12 08 07 00          .byte 18,8,7,0,12,30,12,7
0025C3r 3  0C 1E 0C 07  
0025C7r 3  90 A0 C0 80          .byte 144,160,192,128,64,64,128,0
0025CBr 3  40 40 80 00  
0025CFr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0025D3r 3  00 00 00 00  
0025D7r 3  FF 00 FF 00          .byte 255,0,255,0,255,0,255,0
0025DBr 3  FF 00 FF 00  
0025DFr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0025E3r 3  00 00 00 00  
0025E7r 3  00 00 E7 18          .byte 0,0,231,24,24,0,0,0
0025EBr 3  18 00 00 00  
0025EFr 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0025F3r 3  00 00 00 00  
0025F7r 3  10 18 18 14          .byte 16,24,24,20,20,16,112,112
0025FBr 3  14 10 70 70  
0025FFr 3  D0 86 95 D5          .byte 208,134,149,213,149,149,149,0
002603r 3  95 95 95 00  
002607r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00260Br 3  00 00 00 00  
00260Fr 3               bCol:
00260Fr 3  01                   .byte 1
002610r 3  01                   .byte 1
002611r 3  01                   .byte 1
002612r 3  01                   .byte 1
002613r 3  01                   .byte 1
002614r 3  01                   .byte 1
002615r 3  01                   .byte 1
002616r 3  01                   .byte 1
002617r 3  01                   .byte 1
002618r 3  01                   .byte 1
002619r 3  01                   .byte 1
00261Ar 3  01                   .byte 1
00261Br 3  01                   .byte 1
00261Cr 3  01                   .byte 1
00261Dr 3  01                   .byte 1
00261Er 3  01                   .byte 1
00261Fr 3  01                   .byte 1
002620r 3  01                   .byte 1
002621r 3  01                   .byte 1
002622r 3  01                   .byte 1
002623r 3  01                   .byte 1
002624r 3  01                   .byte 1
002625r 3  01                   .byte 1
002626r 3  01                   .byte 1
002627r 3  01                   .byte 1
002628r 3  01                   .byte 1
002629r 3  01                   .byte 1
00262Ar 3  01                   .byte 1
00262Br 3  01                   .byte 1
00262Cr 3  01                   .byte 1
00262Dr 3  01                   .byte 1
00262Er 3  03                   .byte 3
00262Fr 3  03                   .byte 3
002630r 3  01                   .byte 1
002631r 3  01                   .byte 1
002632r 3  01                   .byte 1
002633r 3  01                   .byte 1
002634r 3  01                   .byte 1
002635r 3  01                   .byte 1
002636r 3  01                   .byte 1
002637r 3  01                   .byte 1
002638r 3  01                   .byte 1
002639r 3  01                   .byte 1
00263Ar 3  01                   .byte 1
00263Br 3  01                   .byte 1
00263Cr 3  01                   .byte 1
00263Dr 3  01                   .byte 1
00263Er 3  01                   .byte 1
00263Fr 3  01                   .byte 1
002640r 3  01                   .byte 1
002641r 3  01                   .byte 1
002642r 3  01                   .byte 1
002643r 3  01                   .byte 1
002644r 3  01                   .byte 1
002645r 3  01                   .byte 1
002646r 3  01                   .byte 1
002647r 3  01                   .byte 1
002648r 3  01                   .byte 1
002649r 3  01                   .byte 1
00264Ar 3  01                   .byte 1
00264Br 3  01                   .byte 1
00264Cr 3  01                   .byte 1
00264Dr 3  01                   .byte 1
00264Er 3  01                   .byte 1
00264Fr 3  01                   .byte 1
002650r 3  01                   .byte 1
002651r 3  01                   .byte 1
002652r 3  01                   .byte 1
002653r 3  01                   .byte 1
002654r 3  01                   .byte 1
002655r 3  01                   .byte 1
002656r 3  01                   .byte 1
002657r 3  01                   .byte 1
002658r 3  01                   .byte 1
002659r 3  01                   .byte 1
00265Ar 3  01                   .byte 1
00265Br 3  01                   .byte 1
00265Cr 3  01                   .byte 1
00265Dr 3  01                   .byte 1
00265Er 3  01                   .byte 1
00265Fr 3  01                   .byte 1
002660r 3  01                   .byte 1
002661r 3  01                   .byte 1
002662r 3  01                   .byte 1
002663r 3  01                   .byte 1
002664r 3  01                   .byte 1
002665r 3  01                   .byte 1
002666r 3  01                   .byte 1
002667r 3  01                   .byte 1
002668r 3  01                   .byte 1
002669r 3  01                   .byte 1
00266Ar 3  01                   .byte 1
00266Br 3  06                   .byte 6
00266Cr 3  06                   .byte 6
00266Dr 3  06                   .byte 6
00266Er 3  06                   .byte 6
00266Fr 3  01                   .byte 1
002670r 3  01                   .byte 1
002671r 3  01                   .byte 1
002672r 3  01                   .byte 1
002673r 3  01                   .byte 1
002674r 3  01                   .byte 1
002675r 3  01                   .byte 1
002676r 3  01                   .byte 1
002677r 3  01                   .byte 1
002678r 3  01                   .byte 1
002679r 3  01                   .byte 1
00267Ar 3  01                   .byte 1
00267Br 3  01                   .byte 1
00267Cr 3  01                   .byte 1
00267Dr 3  01                   .byte 1
00267Er 3  01                   .byte 1
00267Fr 3  01                   .byte 1
002680r 3  01                   .byte 1
002681r 3  01                   .byte 1
002682r 3  01                   .byte 1
002683r 3  01                   .byte 1
002684r 3  01                   .byte 1
002685r 3  01                   .byte 1
002686r 3  01                   .byte 1
002687r 3  01                   .byte 1
002688r 3  01                   .byte 1
002689r 3  01                   .byte 1
00268Ar 3  01                   .byte 1
00268Br 3  01                   .byte 1
00268Cr 3  01                   .byte 1
00268Dr 3  01                   .byte 1
00268Er 3  01                   .byte 1
00268Fr 3  01                   .byte 1
002690r 3  01                   .byte 1
002691r 3  01                   .byte 1
002692r 3  01                   .byte 1
002693r 3  01                   .byte 1
002694r 3  01                   .byte 1
002695r 3  01                   .byte 1
002696r 3  01                   .byte 1
002697r 3  01                   .byte 1
002698r 3  01                   .byte 1
002699r 3  01                   .byte 1
00269Ar 3  01                   .byte 1
00269Br 3  01                   .byte 1
00269Cr 3  01                   .byte 1
00269Dr 3  01                   .byte 1
00269Er 3  01                   .byte 1
00269Fr 3  01                   .byte 1
0026A0r 3  01                   .byte 1
0026A1r 3  01                   .byte 1
0026A2r 3  01                   .byte 1
0026A3r 3  01                   .byte 1
0026A4r 3  01                   .byte 1
0026A5r 3  01                   .byte 1
0026A6r 3  01                   .byte 1
0026A7r 3  01                   .byte 1
0026A8r 3  01                   .byte 1
0026A9r 3  01                   .byte 1
0026AAr 3  01                   .byte 1
0026ABr 3  01                   .byte 1
0026ACr 3  01                   .byte 1
0026ADr 3  01                   .byte 1
0026AEr 3  01                   .byte 1
0026AFr 3  01                   .byte 1
0026B0r 3  01                   .byte 1
0026B1r 3  01                   .byte 1
0026B2r 3  01                   .byte 1
0026B3r 3  01                   .byte 1
0026B4r 3  01                   .byte 1
0026B5r 3  01                   .byte 1
0026B6r 3  01                   .byte 1
0026B7r 3  01                   .byte 1
0026B8r 3  01                   .byte 1
0026B9r 3  01                   .byte 1
0026BAr 3  01                   .byte 1
0026BBr 3  01                   .byte 1
0026BCr 3  01                   .byte 1
0026BDr 3  01                   .byte 1
0026BEr 3  01                   .byte 1
0026BFr 3  01                   .byte 1
0026C0r 3  01                   .byte 1
0026C1r 3  01                   .byte 1
0026C2r 3  01                   .byte 1
0026C3r 3  01                   .byte 1
0026C4r 3  01                   .byte 1
0026C5r 3  01                   .byte 1
0026C6r 3  01                   .byte 1
0026C7r 3  01                   .byte 1
0026C8r 3  01                   .byte 1
0026C9r 3  01                   .byte 1
0026CAr 3  01                   .byte 1
0026CBr 3  01                   .byte 1
0026CCr 3  01                   .byte 1
0026CDr 3  01                   .byte 1
0026CEr 3  01                   .byte 1
0026CFr 3  01                   .byte 1
0026D0r 3  01                   .byte 1
0026D1r 3  01                   .byte 1
0026D2r 3  01                   .byte 1
0026D3r 3  01                   .byte 1
0026D4r 3  01                   .byte 1
0026D5r 3  01                   .byte 1
0026D6r 3  01                   .byte 1
0026D7r 3  03                   .byte 3
0026D8r 3  01                   .byte 1
0026D9r 3  01                   .byte 1
0026DAr 3  03                   .byte 3
0026DBr 3  01                   .byte 1
0026DCr 3  03                   .byte 3
0026DDr 3  01                   .byte 1
0026DEr 3  01                   .byte 1
0026DFr 3  01                   .byte 1
0026E0r 3  01                   .byte 1
0026E1r 3  01                   .byte 1
0026E2r 3  01                   .byte 1
0026E3r 3  01                   .byte 1
0026E4r 3  01                   .byte 1
0026E5r 3  01                   .byte 1
0026E6r 3  01                   .byte 1
0026E7r 3  01                   .byte 1
0026E8r 3  01                   .byte 1
0026E9r 3  06                   .byte 6
0026EAr 3  06                   .byte 6
0026EBr 3  06                   .byte 6
0026ECr 3  01                   .byte 1
0026EDr 3  01                   .byte 1
0026EEr 3  01                   .byte 1
0026EFr 3  01                   .byte 1
0026F0r 3  04                   .byte 4
0026F1r 3  01                   .byte 1
0026F2r 3  01                   .byte 1
0026F3r 3  01                   .byte 1
0026F4r 3  01                   .byte 1
0026F5r 3  01                   .byte 1
0026F6r 3  01                   .byte 1
0026F7r 3  01                   .byte 1
0026F8r 3  01                   .byte 1
0026F9r 3  01                   .byte 1
0026FAr 3  01                   .byte 1
0026FBr 3  01                   .byte 1
0026FCr 3  01                   .byte 1
0026FDr 3  01                   .byte 1
0026FEr 3  01                   .byte 1
0026FFr 3  01                   .byte 1
002700r 3  01                   .byte 1
002701r 3  01                   .byte 1
002702r 3  01                   .byte 1
002703r 3  01                   .byte 1
002704r 3  01                   .byte 1
002705r 3  01                   .byte 1
002706r 3  01                   .byte 1
002707r 3  01                   .byte 1
002708r 3  01                   .byte 1
002709r 3  01                   .byte 1
00270Ar 3  01                   .byte 1
00270Br 3  01                   .byte 1
00270Cr 3  01                   .byte 1
00270Dr 3               bprop:
00270Dr 3  00                   .byte 0
00270Er 3  02                   .byte 2
00270Fr 3  02                   .byte 2
002710r 3  02                   .byte 2
002711r 3  03                   .byte 3
002712r 3  02                   .byte 2
002713r 3  02                   .byte 2
002714r 3  02                   .byte 2
002715r 3  02                   .byte 2
002716r 3  02                   .byte 2
002717r 3  00                   .byte 0
002718r 3  02                   .byte 2
002719r 3  02                   .byte 2
00271Ar 3  02                   .byte 2
00271Br 3  02                   .byte 2
00271Cr 3  02                   .byte 2
00271Dr 3  03                   .byte 3
00271Er 3  02                   .byte 2
00271Fr 3  02                   .byte 2
002720r 3  02                   .byte 2
002721r 3  02                   .byte 2
002722r 3  02                   .byte 2
002723r 3  02                   .byte 2
002724r 3  02                   .byte 2
002725r 3  02                   .byte 2
002726r 3  03                   .byte 3
002727r 3  03                   .byte 3
002728r 3  02                   .byte 2
002729r 3  02                   .byte 2
00272Ar 3  02                   .byte 2
00272Br 3  02                   .byte 2
00272Cr 3  02                   .byte 2
00272Dr 3  02                   .byte 2
00272Er 3  02                   .byte 2
00272Fr 3  02                   .byte 2
002730r 3  02                   .byte 2
002731r 3  02                   .byte 2
002732r 3  00                   .byte 0
002733r 3  02                   .byte 2
002734r 3  03                   .byte 3
002735r 3  03                   .byte 3
002736r 3  02                   .byte 2
002737r 3  02                   .byte 2
002738r 3  02                   .byte 2
002739r 3  02                   .byte 2
00273Ar 3  02                   .byte 2
00273Br 3  00                   .byte 0
00273Cr 3  00                   .byte 0
00273Dr 3  02                   .byte 2
00273Er 3  02                   .byte 2
00273Fr 3  02                   .byte 2
002740r 3  01                   .byte 1
002741r 3  02                   .byte 2
002742r 3  02                   .byte 2
002743r 3  02                   .byte 2
002744r 3  02                   .byte 2
002745r 3  02                   .byte 2
002746r 3  02                   .byte 2
002747r 3  02                   .byte 2
002748r 3  02                   .byte 2
002749r 3  02                   .byte 2
00274Ar 3  02                   .byte 2
00274Br 3  02                   .byte 2
00274Cr 3  02                   .byte 2
00274Dr 3  02                   .byte 2
00274Er 3  02                   .byte 2
00274Fr 3  02                   .byte 2
002750r 3  02                   .byte 2
002751r 3  02                   .byte 2
002752r 3  02                   .byte 2
002753r 3  02                   .byte 2
002754r 3  02                   .byte 2
002755r 3  02                   .byte 2
002756r 3  02                   .byte 2
002757r 3  02                   .byte 2
002758r 3  03                   .byte 3
002759r 3  00                   .byte 0
00275Ar 3  02                   .byte 2
00275Br 3  02                   .byte 2
00275Cr 3  02                   .byte 2
00275Dr 3  02                   .byte 2
00275Er 3  02                   .byte 2
00275Fr 3  02                   .byte 2
002760r 3  02                   .byte 2
002761r 3  02                   .byte 2
002762r 3  02                   .byte 2
002763r 3  02                   .byte 2
002764r 3  02                   .byte 2
002765r 3  02                   .byte 2
002766r 3  02                   .byte 2
002767r 3  02                   .byte 2
002768r 3  02                   .byte 2
002769r 3  02                   .byte 2
00276Ar 3  02                   .byte 2
00276Br 3  02                   .byte 2
00276Cr 3  02                   .byte 2
00276Dr 3  00                   .byte 0
00276Er 3  00                   .byte 0
00276Fr 3  00                   .byte 0
002770r 3  00                   .byte 0
002771r 3  00                   .byte 0
002772r 3  00                   .byte 0
002773r 3  00                   .byte 0
002774r 3  00                   .byte 0
002775r 3  00                   .byte 0
002776r 3  00                   .byte 0
002777r 3  00                   .byte 0
002778r 3  00                   .byte 0
002779r 3  00                   .byte 0
00277Ar 3  00                   .byte 0
00277Br 3  02                   .byte 2
00277Cr 3  02                   .byte 2
00277Dr 3  02                   .byte 2
00277Er 3  02                   .byte 2
00277Fr 3  02                   .byte 2
002780r 3  02                   .byte 2
002781r 3  02                   .byte 2
002782r 3  02                   .byte 2
002783r 3  02                   .byte 2
002784r 3  02                   .byte 2
002785r 3  02                   .byte 2
002786r 3  02                   .byte 2
002787r 3  02                   .byte 2
002788r 3  02                   .byte 2
002789r 3  02                   .byte 2
00278Ar 3  02                   .byte 2
00278Br 3  02                   .byte 2
00278Cr 3  00                   .byte 0
00278Dr 3  00                   .byte 0
00278Er 3  00                   .byte 0
00278Fr 3  02                   .byte 2
002790r 3  00                   .byte 0
002791r 3  00                   .byte 0
002792r 3  02                   .byte 2
002793r 3  00                   .byte 0
002794r 3  02                   .byte 2
002795r 3  00                   .byte 0
002796r 3  00                   .byte 0
002797r 3  02                   .byte 2
002798r 3  02                   .byte 2
002799r 3  02                   .byte 2
00279Ar 3  02                   .byte 2
00279Br 3  02                   .byte 2
00279Cr 3  02                   .byte 2
00279Dr 3  02                   .byte 2
00279Er 3  02                   .byte 2
00279Fr 3  02                   .byte 2
0027A0r 3  02                   .byte 2
0027A1r 3  02                   .byte 2
0027A2r 3  03                   .byte 3
0027A3r 3  02                   .byte 2
0027A4r 3  02                   .byte 2
0027A5r 3  02                   .byte 2
0027A6r 3  02                   .byte 2
0027A7r 3  02                   .byte 2
0027A8r 3  02                   .byte 2
0027A9r 3  02                   .byte 2
0027AAr 3  02                   .byte 2
0027ABr 3  02                   .byte 2
0027ACr 3  02                   .byte 2
0027ADr 3  02                   .byte 2
0027AEr 3  02                   .byte 2
0027AFr 3  02                   .byte 2
0027B0r 3  02                   .byte 2
0027B1r 3  02                   .byte 2
0027B2r 3  02                   .byte 2
0027B3r 3  02                   .byte 2
0027B4r 3  02                   .byte 2
0027B5r 3  02                   .byte 2
0027B6r 3  02                   .byte 2
0027B7r 3  02                   .byte 2
0027B8r 3  02                   .byte 2
0027B9r 3  02                   .byte 2
0027BAr 3  02                   .byte 2
0027BBr 3  02                   .byte 2
0027BCr 3  02                   .byte 2
0027BDr 3  02                   .byte 2
0027BEr 3  02                   .byte 2
0027BFr 3  02                   .byte 2
0027C0r 3  02                   .byte 2
0027C1r 3  02                   .byte 2
0027C2r 3  02                   .byte 2
0027C3r 3  02                   .byte 2
0027C4r 3  02                   .byte 2
0027C5r 3  02                   .byte 2
0027C6r 3  02                   .byte 2
0027C7r 3  02                   .byte 2
0027C8r 3  02                   .byte 2
0027C9r 3  02                   .byte 2
0027CAr 3  02                   .byte 2
0027CBr 3  02                   .byte 2
0027CCr 3  02                   .byte 2
0027CDr 3  02                   .byte 2
0027CEr 3  02                   .byte 2
0027CFr 3  02                   .byte 2
0027D0r 3  02                   .byte 2
0027D1r 3  02                   .byte 2
0027D2r 3  02                   .byte 2
0027D3r 3  02                   .byte 2
0027D4r 3  02                   .byte 2
0027D5r 3  02                   .byte 2
0027D6r 3  02                   .byte 2
0027D7r 3  02                   .byte 2
0027D8r 3  02                   .byte 2
0027D9r 3  02                   .byte 2
0027DAr 3  02                   .byte 2
0027DBr 3  02                   .byte 2
0027DCr 3  02                   .byte 2
0027DDr 3  02                   .byte 2
0027DEr 3  02                   .byte 2
0027DFr 3  02                   .byte 2
0027E0r 3  02                   .byte 2
0027E1r 3  02                   .byte 2
0027E2r 3  02                   .byte 2
0027E3r 3  02                   .byte 2
0027E4r 3  02                   .byte 2
0027E5r 3  02                   .byte 2
0027E6r 3  02                   .byte 2
0027E7r 3  02                   .byte 2
0027E8r 3  02                   .byte 2
0027E9r 3  02                   .byte 2
0027EAr 3  02                   .byte 2
0027EBr 3  02                   .byte 2
0027ECr 3  02                   .byte 2
0027EDr 3  02                   .byte 2
0027EEr 3  02                   .byte 2
0027EFr 3  02                   .byte 2
0027F0r 3  02                   .byte 2
0027F1r 3  02                   .byte 2
0027F2r 3  02                   .byte 2
0027F3r 3  02                   .byte 2
0027F4r 3  02                   .byte 2
0027F5r 3  02                   .byte 2
0027F6r 3  02                   .byte 2
0027F7r 3  06                   .byte 6
0027F8r 3  02                   .byte 2
0027F9r 3  03                   .byte 3
0027FAr 3  03                   .byte 3
0027FBr 3  00                   .byte 0
0027FCr 3  00                   .byte 0
0027FDr 3  00                   .byte 0
0027FEr 3  00                   .byte 0
0027FFr 3  03                   .byte 3
002800r 3  03                   .byte 3
002801r 3  03                   .byte 3
002802r 3  03                   .byte 3
002803r 3  02                   .byte 2
002804r 3  03                   .byte 3
002805r 3  05                   .byte 5
002806r 3  00                   .byte 0
002807r 3  00                   .byte 0
002808r 3  06                   .byte 6
002809r 3  05                   .byte 5
00280Ar 3  00                   .byte 0
00280Br 3               sprgfx:
00280Br 3  15 EE 8B 03          .byte 21,238,139,3,90,254,51,24,139,152,91,241,21,159,0,254,0,0,0,192,1,230,1,236,1,224,0,0,0,224,0,240
00280Fr 3  5A FE 33 18  
002813r 3  8B 98 5B F1  
00282Br 3  45 EE 4B 03          .byte 69,238,75,3,58,254,19,24,139,152,91,241,53,143,0,252,0,0,0,192,1,236,1,224,1,228,0,12,7,24,3,128
00282Fr 3  3A FE 13 18  
002833r 3  8B 98 5B F1  
00284Br 3  05 EE 0B 03          .byte 5,238,11,3,26,254,51,24,203,152,59,241,145,223,120,254,0,0,0,192,1,236,13,230,13,224,12,0,8,28,0,30
00284Fr 3  1A FE 33 18  
002853r 3  CB 98 3B F1  
00286Br 3  77 A8 C0 D1          .byte 119,168,192,209,127,90,24,204,25,209,143,218,249,168,127,0,0,0,3,0,103,128,55,128,7,128,0,0,7,0,15,0
00286Fr 3  7F 5A 18 CC  
002873r 3  19 D1 8F DA  
00288Br 3  77 A2 C0 D2          .byte 119,162,192,210,127,92,24,200,25,209,143,218,241,172,127,0,0,0,3,0,55,128,7,128,39,128,48,0,24,224,1,192
00288Fr 3  7F 5C 18 C8  
002893r 3  19 D1 8F DA  
0028ABr 3  77 A0 C0 D0          .byte 119,160,192,208,127,88,24,204,25,211,143,220,251,137,127,30,0,0,3,0,55,128,103,176,7,176,0,48,56,16,120,0
0028AFr 3  7F 58 18 CC  
0028B3r 3  19 D3 8F DC  
0028CBr 3  03 60 07 F0          .byte 3,96,7,240,7,240,15,248,15,248,29,172,43,118,93,174,0,0,7,224,15,240,8,176,4,80,15,248,3,96,3,0
0028CFr 3  07 F0 0F F8  
0028D3r 3  0F F8 1D AC  
0028EBr 3  03 60 07 F0          .byte 3,96,7,240,7,240,15,248,15,248,29,172,43,118,93,174,0,0,7,224,15,240,8,176,4,80,15,248,3,96,0,96
0028EFr 3  07 F0 0F F8  
0028F3r 3  0F F8 1D AC  
00290Br 3  0F 78 11 9C          .byte 15,120,17,156,30,110,57,158,41,148,111,246,46,114,103,236,0,0,111,122,109,240,38,58,75,235,111,107,3,96,3,0
00290Fr 3  1E 6E 39 9E  
002913r 3  29 94 6F F6  
00292Br 3  0F 78 11 9C          .byte 15,120,17,156,30,110,57,158,41,148,111,246,46,50,103,236,0,0,111,122,109,240,38,58,75,235,111,107,3,96,0,96
00292Fr 3  1E 6E 39 9E  
002933r 3  29 94 6F F6  
00294Br 3  3F F0 7F F8          .byte 63,240,127,248,252,252,251,116,251,120,252,244,255,248,255,244,248,120,247,180,239,216,236,212,236,216,247,180,120,120,63,240
00294Fr 3  FC FC FB 74  
002953r 3  FB 78 FC F4  
00296Br 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,139,81,159,241,89,225,47,210,28,244,24,100,15,196,23,136,43,0,12,48,28,112
00296Fr 3  4F FA 9F FA  
002973r 3  86 16 8B 51  
00298Br 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,139,81,159,241,89,225,47,210,28,244,24,100,15,196,23,136,43,48,12,112,28,0
00298Fr 3  4F FA 9F FA  
002993r 3  86 16 8B 51  
0029ABr 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,147,145,159,241,89,225,47,210,31,116,216,100,44,68,55,136,11,6,12,49,28,112
0029AFr 3  4F FA 9F FA  
0029B3r 3  86 16 93 91  
0029CBr 3  0F F8 30 04          .byte 15,248,48,4,79,250,159,250,134,22,139,81,159,241,89,225,47,210,31,116,24,100,12,69,119,139,203,4,140,48,28,112
0029CFr 3  4F FA 9F FA  
0029D3r 3  86 16 8B 51  
0029EBr 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,216,83,224,63,220,57,190,31,119,0,99,10,243
0029EFr 3  7F FE 80 63  
0029F3r 3  7F 9F 7F E1  
002A0Br 3  0F FC 7F FE          .byte 15,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,216,83,224,63,220,57,190,31,119,0,99,10,243,21,240
002A0Fr 3  80 63 7F 9F  
002A13r 3  7F E1 0C 77  
002A2Br 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,216,83,224,46,192,49,128,31,122,64,108,58,240
002A2Fr 3  7F FE 80 63  
002A33r 3  7F 9F 7F E1  
002A4Br 3  0F F8 3F FC          .byte 15,248,63,252,127,254,128,99,127,159,127,225,12,119,38,238,111,240,47,219,83,226,174,196,177,152,95,112,32,96,26,240
002A4Fr 3  7F FE 80 63  
002A53r 3  7F 9F 7F E1  
002A6Br 3  1F E0 75 F0          .byte 31,224,117,240,171,129,246,25,246,121,23,227,55,131,246,24,150,120,23,224,55,128,246,24,150,112,23,224,53,64,10,128
002A6Fr 3  AB 81 F6 19  
002A73r 3  F6 79 17 E3  
002A8Br 3  1F F0 3F F8          .byte 31,240,63,248,68,56,129,214,165,89,141,218,124,28,11,250,0,0,0,104,0,92,3,222,12,235,16,57,16,56,16,104
002A8Fr 3  44 38 81 D6  
002A93r 3  A5 59 8D DA  
002AABr 3  1F F0 3F F8          .byte 31,240,63,248,68,56,129,214,165,89,141,218,124,28,11,250,0,0,0,104,0,92,1,222,6,234,8,58,8,44,8,196
002AAFr 3  44 38 81 D6  
002AB3r 3  A5 59 8D DA  
002ACBr 3  0F F8 1F FC          .byte 15,248,31,252,28,34,107,129,154,165,91,177,56,62,95,208,0,0,22,0,58,0,123,192,215,48,156,8,28,8,22,8
002ACFr 3  1C 22 6B 81  
002AD3r 3  9A A5 5B B1  
002AEBr 3  0F F8 1F FC          .byte 15,248,31,252,28,34,107,129,154,165,91,177,56,62,95,208,0,0,22,0,58,0,123,128,87,96,92,16,52,16,35,16
002AEFr 3  1C 22 6B 81  
002AF3r 3  9A A5 5B B1  
002B0Br 3  3D D0 5F F8          .byte 61,208,95,248,129,11,76,101,65,11,63,247,28,122,7,224,0,0,1,224,2,24,3,252,27,230,33,226,32,224,33,160
002B0Fr 3  81 0B 4C 65  
002B13r 3  41 0B 3F F7  
002B2Br 3  3D D0 5F F8          .byte 61,208,95,248,129,11,76,101,65,11,63,247,28,250,7,224,0,0,1,224,2,24,3,252,11,230,17,236,16,176,19,16
002B2Fr 3  81 0B 4C 65  
002B33r 3  41 0B 3F F7  
002B4Br 3  0B BC 1F FA          .byte 11,188,31,250,208,129,166,50,208,130,239,252,94,56,7,224,0,0,7,128,24,64,63,192,103,216,71,132,7,4,5,132
002B4Fr 3  D0 81 A6 32  
002B53r 3  D0 82 EF FC  
002B6Br 3  0B BC 1F FA          .byte 11,188,31,250,208,129,166,50,208,130,239,252,95,56,7,224,0,0,7,128,24,64,63,192,103,208,55,136,13,8,8,200
002B6Fr 3  D0 81 A6 32  
002B73r 3  D0 82 EF FC  
002B8Br 3  C3 00 BF 40          .byte 195,0,191,64,124,112,55,88,65,88,147,12,255,60,199,110,239,62,127,77,111,93,71,92,47,54,95,22,126,86,48,22
002B8Fr 3  7C 70 37 58  
002B93r 3  41 58 93 0C  
002BABr 3  C3 00 BF 40          .byte 195,0,191,64,124,112,55,88,65,88,147,12,255,60,199,110,239,62,127,77,111,93,67,92,39,54,95,22,126,86,48,80
002BAFr 3  7C 70 37 58  
002BB3r 3  41 58 93 0C  
002BCBr 3  00 C3 02 FD          .byte 0,195,2,253,14,62,26,236,26,130,48,201,60,255,118,227,124,247,178,254,186,246,58,226,108,244,104,250,106,126,104,12
002BCFr 3  0E 3E 1A EC  
002BD3r 3  1A 82 30 C9  
002BEBr 3  00 C3 02 FD          .byte 0,195,2,253,14,62,26,236,26,130,48,201,60,255,118,227,124,247,178,254,186,246,58,194,108,228,104,250,106,126,10,12
002BEFr 3  0E 3E 1A EC  
002BF3r 3  1A 82 30 C9  
002C0Br 3  27 7A 1E 2C          .byte 39,122,30,44,47,115,94,61,63,115,14,184,125,94,106,43,198,49,205,201,200,137,236,152,111,120,69,232,66,16,3,224
002C0Fr 3  2F 73 5E 3D  
002C13r 3  3F 73 0E B8  
002C2Br 3  27 7A 1E 2C          .byte 39,122,30,44,47,115,94,61,63,115,14,184,125,94,106,43,198,49,205,201,234,169,236,153,79,121,69,233,2,16,3,224
002C2Fr 3  2F 73 5E 3D  
002C33r 3  3F 73 0E B8  
002C4Br 3  00 00 0F F0          .byte 0,0,15,240,31,248,57,156,53,172,113,142,191,253,159,249,31,249,140,48,15,241,7,224,11,208,13,176,12,48,28,56
002C4Fr 3  1F F8 39 9C  
002C53r 3  35 AC 71 8E  
002C6Br 3               frmlst:
002C6Br 3  00 03                .byte 0,3
002C6Dr 3  03 03                .byte 3,3
002C6Fr 3  06 02                .byte 6,2
002C71r 3  08 02                .byte 8,2
002C73r 3  0A 01                .byte 10,1
002C75r 3  0B 02                .byte 11,2
002C77r 3  0D 02                .byte 13,2
002C79r 3  0F 02                .byte 15,2
002C7Br 3  11 02                .byte 17,2
002C7Dr 3  13 01                .byte 19,1
002C7Fr 3  14 02                .byte 20,2
002C81r 3  16 02                .byte 22,2
002C83r 3  18 02                .byte 24,2
002C85r 3  1A 02                .byte 26,2
002C87r 3  1C 02                .byte 28,2
002C89r 3  1E 02                .byte 30,2
002C8Br 3  20 02                .byte 32,2
002C8Dr 3  22 01 23 00          .byte 34,1,35,0
002C91r 3               scdat:
002C91r 3  69 01 02 01          .word 361,258,401,340,366,339,264,198,248,214,200,368,404,372,403,411,336,427,374,353,413,237,223,215,187,336
002C95r 3  91 01 54 01  
002C99r 3  6E 01 53 01  
002CC5r 3  46 01 58 01          .word 326,344,324,345,415,256
002CC9r 3  44 01 59 01  
002CCDr 3  9F 01 00 01  
002CD1r 3  DA DA 5E 5C          .byte 218,218,94,92,218,218,218,94,218,218,94,218,218,92,218,218,94,218,220,218,94,218,94,255,218,4,94,255,218,5,94,94,218,218
002CD5r 3  DA DA DA 5E  
002CD9r 3  DA DA 5E DA  
002CF3r 3  5E DA DA 5E          .byte 94,218,218,94,218,218,95,95,255,0,19,31,94,95,255,0,19,32,95,94,4,4,218,94,93,218,218,0,218,218,218,4,4
002CF7r 3  DA DA 5F 5F  
002CFBr 3  FF 00 13 1F  
002D14r 3  DA DA 04 04          .byte 218,218,4,4,218,218,33,94,95,4,4,255,218,9,4,4,220,94,4,4,218,218,34,95,94,4,4,94,218,220,95,93,219,219
002D18r 3  DA DA 21 5E  
002D1Cr 3  5F 04 04 FF  
002D36r 3  5F DA 04 04          .byte 95,218,4,4,219,219,4,4,95,218,218,94,95,4,4,218,94,218,219,219,94,219,219,94,4,4,219,94,4,4,94,220,218
002D3Ar 3  DB DB 04 04  
002D3Er 3  5F DA DA 5E  
002D57r 3  5F 5E 04 04          .byte 95,94,4,4,218,218,218,255,0,6,4,4,0,0,4,4,0,0,0,94,95,4,4,94,218,218,255,0,6,4,4,0,0
002D5Br 3  DA DA DA FF  
002D5Fr 3  00 06 04 04  
002D78r 3  04 04 00 00          .byte 4,4,0,0,0,95,0,4,4,218,218,94,4,4,218,94,219,219,94,219,219,94,218,218,94,95,94,94,0,4,4,218,219
002D7Cr 3  00 5F 00 04  
002D80r 3  04 DA DA 5E  
002D99r 3  DA 04 04 DA          .byte 218,4,4,218,219,219,94,219,219,219,94,218,218,94,218,218,95,219,4,4,0,0,218,4,4,255,0,12,33,94,93,4,4
002D9Dr 3  DB DB 5E DB  
002DA1r 3  DB DB 5E DA  
002DBAr 3  00 00 DA 04          .byte 0,0,218,4,4,255,0,9,225,0,0,34,95,218,95,95,4,4,94,219,219,219,94,219,219,94,4,4,218,255,200,4,203
002DBEr 3  04 FF 00 09  
002DC2r 3  E1 00 00 22  
002DDBr 3  5E 5D 5D DC          .byte 94,93,93,220,4,4,218,94,219,219,219,94,219,219,4,4,218,255,205,5,95,94,92,218,4,4,255,0,8,4,4,255,0,5
002DDFr 3  04 04 DA 5E  
002DE3r 3  DB DB DB 5E  
002DFDr 3  CD 5E 21 5E          .byte 205,94,33,94,220,4,4,255,0,8,4,4,255,0,5,205,95,34,95,95,218,218,94,218,218,94,94,218,94,218,218,94,218,218
002E01r 3  DC 04 04 FF  
002E05r 3  00 08 04 04  
002E1Fr 3  5E DA DA DA          .byte 94,218,218,218,94,95,94,218,218,94,95,94,218,220,218,95,94,218,94,218,94,218,95,94,218,94,218
002E23r 3  5E 5F 5E DA  
002E27r 3  DA 5E 5F 5E  
002E3Ar 3  FF 4D 16 FF          .byte 255,77,22,255,79,22,255,0,44,255,77,4,38,39,40,41,255,77,7,38,39,40,41,77,77,77,78,145,146,78,42,4,4
002E3Er 3  4F 16 FF 00  
002E42r 3  2C FF 4D 04  
002E5Br 3  BE 4E 4E 4E          .byte 190,78,78,78,110,111,78,78,42,4,4,190,255,78,4,147,148,78,42,4,4,190,78,78,78,112,113,78,78,42,4,4,190
002E5Fr 3  6E 6F 4E 4E  
002E63r 3  2A 04 04 BE  
002E7Cr 3  FF 4E 07 2A          .byte 255,78,7,42,4,4,190,255,78,7,42,4,4,190,255,78,7,42,4,4,190,255,78,7,42,4,4,191,78,78,78,255,79,4
002E80r 3  04 04 BE FF  
002E84r 3  4E 07 2A 04  
002E9Er 3  2B 04 04 BF          .byte 43,4,4,191,255,79,7,43,4,4,191,79,79,79,255,0,5,4,4,255,0,9,4,4,255,0,9,4,4,255,0,9,4,4
002EA2r 3  FF 4F 07 2B  
002EA6r 3  04 04 BF 4F  
002EC0r 3  FF 00 04 4D          .byte 255,0,4,77,38,39,40,41,255,77,5,38,39,40,41,77,77,77,38,39,40,41,77,78,42,4,4,190,255,78,5,42,4,4
002EC4r 3  26 27 28 29  
002EC8r 3  FF 4D 05 26  
002EE2r 3  BE 4E 4E 4E          .byte 190,78,78,78,42,4,4,190,78,78,42,4,4,190,78,165,166,78,78,42,4,4,190,78,161,162,42,4,4,190,78,79,43
002EE6r 3  2A 04 04 BE  
002EEAr 3  4E 4E 2A 04  
002F03r 3  04 04 BF 4F          .byte 4,4,191,79,167,168,79,79,43,4,4,191,79,163,164,43,4,4,191,79,0,0,4,4,255,0,7,4,4,255,0,5,4,4
002F07r 3  A7 A8 4F 4F  
002F0Br 3  2B 04 04 BF  
002F25r 3  FF 00 04 04          .byte 255,0,4,4,4,255,0,7,4,4,255,0,5,4,4,0,0,255,77,22,255,79,22
002F29r 3  04 FF 00 07  
002F2Dr 3  04 04 FF 00  
002F3Cr 3  5D DA 5F DA          .byte 93,218,95,218,218,94,218,218,218,94,218,218,220,220,218,94,218,220,218,94,218,94,218,218,95,93,218,94,218,33,93,218,94
002F40r 3  DA 5E DA DA  
002F44r 3  DA 5E DA DA  
002F5Dr 3  DA DA 5E DA          .byte 218,218,94,218,218,94,218,218,94,95,255,218,4,0,0,93,218,34,218,218,0,0,218,218,218,255,0,6,218,218,218,95,0,0
002F61r 3  DA 5E DA DA  
002F65r 3  5E 5F FF DA  
002F7Fr 3  DA 5F 1F DA          .byte 218,95,31,218,95,4,4,218,33,218,255,0,5,234,218,221,222,218,4,4,218,218,32,95,218,4,4,218,34,218,4,4,93
002F83r 3  5F 04 04 DA  
002F87r 3  21 DA FF 00  
002FA0r 3  DC DA DA DA          .byte 220,218,218,218,223,224,95,4,4,218,95,218,218,93,4,4,94,220,218,4,4,218,218,95,218,95,218,95,218,4,4,219,95
002FA4r 3  DF E0 5F 04  
002FA8r 3  04 DA 5F DA  
002FC1r 3  5D 5E 5F 04          .byte 93,94,95,4,4,218,218,95,4,4,218,218,218,95,218,94,218,95,4,4,255,218,5,4,4,218,218,218,4,4,255,218,6
002FC5r 3  04 DA DA 5F  
002FC9r 3  04 04 DA DA  
002FE2r 3  DC 5F 04 04          .byte 220,95,4,4,255,0,5,4,4,0,0,0,4,4,255,0,5,218,218,218,4,4,255,0,5,4,4,0,0,0,4,4,255,0,5
002FE6r 3  FF 00 05 04  
002FEAr 3  04 00 00 00  
003005r 3  DA 5E DA 04          .byte 218,94,218,4,4,94,218,4,4,218,218,95,218,4,4,218,220,218,93,95,95,218,218,218,95,4,4,218,95,4,4,218,93
003009r 3  04 5E DA 04  
00300Dr 3  04 DA DA 5F  
003026r 3  DA DA 04 04          .byte 218,218,4,4,218,95,218,220,218,218,220,94,220,218,4,4,218,94,4,4,255,0,4,4,4,255,0,6,95,218,94,95,4,4
00302Ar 3  DA 5F DA DC  
00302Er 3  DA DA DC 5E  
003048r 3  5E DA 04 04          .byte 94,218,4,4,255,0,4,4,4,255,0,6,219,0,0,0,4,4,218,95,93,95,218,94,93,218,4,4,93,4,4,93,4,4
00304Cr 3  FF 00 04 04  
003050r 3  04 FF 00 06  
00306Ar 3  5F 00 00 00          .byte 95,0,0,0,4,4,218,218,95,255,218,4,94,4,4,218,4,4,218,4,4,255,218,4,4,4,255,0,8,4,4,218,4,4
00306Er 3  04 04 DA DA  
003072r 3  5F FF DA 04  
00308Cr 3  5D 04 04 5F          .byte 93,4,4,95,218,218,218,4,4,255,0,8,4,4,93,4,4,218,4,4,218,94,94,218,93,95,94,218,93,94,218,93,218,218
003090r 3  DA DA DA 04  
003094r 3  04 FF 00 08  
0030AEr 3  5D 5E DA 5D          .byte 93,94,218,93,218,218,93,218,218,218,94,95,218,218,94,218,218,218,94,218,218,94,218,220,218,94,218,218,94,94,95
0030B2r 3  DA DA 5D DA  
0030B6r 3  DA DA 5E 5F  
0030CDr 3  01 C4 01 01          .byte 1,196,1,1,1,197,1,195,1,1,195,1,1,197,255,1,4,196,255,1,4,197,1,196,1,1,1,196,1,3,1,196,1,1,1
0030D1r 3  01 C5 01 C3  
0030D5r 3  01 01 C3 01  
0030F0r 3  C3 01 01 C3          .byte 195,1,1,195,1,197,1,1,255,0,21,1,255,0,21,33,5,6,9,4,4,11,12,13,33,1,1,1,33,5,6,9,4,4
0030F4r 3  01 C5 01 01  
0030F8r 3  FF 00 15 01  
003112r 3  0B 0C 0D 22          .byte 11,12,13,34,7,8,93,4,4,93,14,15,34,1,1,1,34,7,8,93,4,4,93,14,15,1,0,0,0,4,4,255,0,11
003116r 3  07 08 5D 04  
00311Ar 3  04 5D 0E 0F  
003134r 3  04 04 00 00          .byte 4,4,0,0,0,1,0,0,0,4,4,255,0,11,4,4,0,0,0,195,3,1,197,1,195,1,33,5,6,9,4,4,11
003138r 3  00 01 00 00  
00313Cr 3  00 04 04 FF  
003155r 3  0C 0D 21 C5          .byte 12,13,33,197,1,197,195,1,197,195,1,1,197,3,1,34,7,8,93,4,4,93,14,15,34,1,195,3,1,3,1,255,0,10
003159r 3  01 C5 C3 01  
00315Dr 3  C5 C3 01 01  
003177r 3  04 04 FF 00          .byte 4,4,255,0,9,1,255,0,10,4,4,255,0,9,1,1,33,5,6,9,4,4,11,12,13,33,33,5,6,9,4,4,11
00317Br 3  09 01 FF 00  
00317Fr 3  0A 04 04 FF  
003198r 3  0C 0D 21 01          .byte 12,13,33,1,1,34,7,8,93,4,4,93,14,15,34,34,7,8,93,4,4,93,12,15,34,1,255,0,5,4,4,255,0,8
00319Cr 3  01 22 07 08  
0031A0r 3  5D 04 04 5D  
0031BAr 3  04 04 FF 00          .byte 4,4,255,0,4,1,0,0,225,0,0,4,4,255,0,5,234,0,0,4,4,255,0,4,196,1,1,1,3,1,1,195,1
0031BEr 3  04 01 00 00  
0031C2r 3  E1 00 00 04  
0031DBr 3  C5 01 03 01          .byte 197,1,3,1,197,1,3,1,1,1,3,255,1,5,196,1,1,3,1,195,1,1,197,1,1,1,196,1,196,1,3,196,1,1
0031DFr 3  C5 01 03 01  
0031E3r 3  01 01 03 FF  
0031FDr 3  C3 C5 01 C3          .byte 195,197,1,195,255,1,6,196,197,1,1,1,196,255,1,7,197,1,1,1,196,1,1,195,1,195,1,3,1,1,195,1,197,197
003201r 3  FF 01 06 C4  
003205r 3  C5 01 01 01  
00321Fr 3  C4 01                .byte 196,1
003221r 3  DA 5D DA 5E          .byte 218,93,218,94,93,218,94,218,218,93,218,25,26,218,218,94,218,218,93,218,94,93,218,94,93,255,218,4,93,218,94,255,218,5
003225r 3  5D DA 5E DA  
003229r 3  DA 5D DA 19  
003243r 3  5D DA DA 5E          .byte 93,218,218,94,255,218,4,94,0,0,218,255,0,16,95,218,95,0,0,218,255,0,16,94,94,94,4,4,218,93,218,4,4
003247r 3  FF DA 04 5E  
00324Br 3  00 00 DA FF  
003264r 3  5D DA C7 C8          .byte 93,218,199,200,200,203,218,92,218,218,4,4,95,218,95,4,4,218,218,218,4,4,218,218,207,0,0,203,33,218,93,218,4,4
003268r 3  C8 CB DA 5C  
00326Cr 3  DA DA 04 04  
003286r 3  5F DA 5F 04          .byte 95,218,95,4,4,0,0,0,4,4,0,225,199,0,0,203,34,218,0,0,4,4,94,94,94,4,4,0,0,0,4,4,0,0
00328Ar 3  04 00 00 00  
00328Er 3  04 04 00 E1  
0032A8r 3  CF CD CD CD          .byte 207,205,205,205,218,218,0,0,4,4,95,218,95,4,4,218,218,218,94,218,218,92,93,255,218,5,4,4,218,218,94,218,94
0032ACr 3  DA DA 00 00  
0032B0r 3  04 04 5F DA  
0032C9r 3  04 04 FF DA          .byte 4,4,255,218,13,4,4,218,218,95,218,95,4,4,255,0,13,4,4,0,0,94,218,94,4,4,255,0,13,4,4,0,0
0032CDr 3  0D 04 04 DA  
0032D1r 3  DA 5F DA 5F  
0032EAr 3  5F DA 5F DA          .byte 95,218,95,218,218,92,4,4,218,93,4,4,218,4,4,218,4,4,218,92,4,4,94,94,94,218,218,218,4,4,92,218,4,4
0032EEr 3  DA 5C 04 04  
0032F2r 3  DA 5D 04 04  
00330Cr 3  DA 04 04 DA          .byte 218,4,4,218,4,4,93,218,4,4,95,218,95,4,4,218,4,4,93,218,4,4,218,4,4,218,4,4,92,218,4,4,94
003310r 3  04 04 5D DA  
003314r 3  04 04 5F DA  
00332Dr 3  21 5E 04 04          .byte 33,94,4,4,218,4,4,218,218,4,4,218,4,4,218,4,4,218,93,4,4,95,34,95,4,4,0,4,4,0,0,4,4
003331r 3  DA 04 04 DA  
003335r 3  DA 04 04 DA  
00334Er 3  00 04 04 00          .byte 0,4,4,0,4,4,0,0,4,4,0,94,94,4,4,0,4,4,0,0,4,4,0,4,4,0,4,4,0,0,4,4,0
003352r 3  04 04 00 00  
003356r 3  04 04 00 5E  
00336Fr 3  DA 5F FF DA          .byte 218,95,255,218,15,92,93,218,94,218,94,94,218,218,93,218,218,94,218,218,94,218,93,218,218,94,218,93,218,218,94,218
003373r 3  0F 5C 5D DA  
003377r 3  5E DA 5E 5E  
00338Fr 3  01 01 C5 01          .byte 1,1,197,1,196,1,31,1,1,1,196,1,1,196,1,31,1,196,195,2,196,198,198,1,196,195,255,1,4,197,1,2,195
003393r 3  C4 01 1F 01  
003397r 3  01 01 C4 01  
0033B0r 3  02 FF 01 04          .byte 2,255,1,4,2,1,196,1,1,255,0,21,197,255,0,21,198,33,5,6,9,4,4,11,12,13,33,1,195,1,33,5,6
0033B4r 3  02 01 C4 01  
0033B8r 3  01 FF 00 15  
0033D1r 3  09 04 04 0B          .byte 9,4,4,11,12,13,34,7,8,93,4,4,93,14,15,34,1,1,1,34,7,8,93,4,4,93,14,15,255,0,4,4,4
0033D5r 3  0C 0D 22 07  
0033D9r 3  08 5D 04 04  
0033F2r 3  FF 00 0B 04          .byte 255,0,11,4,4,255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5,6,9,4,4,11,12
0033F6r 3  04 FF 00 07  
0033FAr 3  04 04 FF 00  
003413r 3  0D 21 C4 C4          .byte 13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1,198,1,195,255,0,11,4,4
003417r 3  01 01 C4 C5  
00341Br 3  C4 01 01 C3  
003435r 3  FF 00 08 C6          .byte 255,0,8,198,255,0,11,4,4,255,0,8,197,196,1,33,5,6,9,4,4,11,12,13,1,196,5,6,9,4,4,11,12
003439r 3  FF 00 0B 04  
00343Dr 3  04 FF 00 08  
003456r 3  0D 21 01 C4          .byte 13,33,1,196,34,7,8,93,4,4,93,14,15,196,1,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8,4,4
00345Ar 3  22 07 08 5D  
00345Er 3  04 04 5D 0E  
003478r 3  00 00 00 C6          .byte 0,0,0,198,255,0,6,4,4,255,0,8,4,4,0,0,0,197,195,1,1,195,2,197,1,196,1,2,1,1,2,196,1
00347Cr 3  FF 00 06 04  
003480r 3  04 FF 00 08  
003499r 3  C4 01 C4 01          .byte 196,1,196,1,1,1,2,1,1,31,196,1,196,3,1,196,198,1,31,196,1,1,198,196,1,31,1,2,1,1,2,1,1
00349Dr 3  01 01 02 01  
0034A1r 3  01 1F C4 01  
0034BAr 3  03 01 C4 C4          .byte 3,1,196,196,1,1,1,32,1,2,1,3,2,2,1,1,2,196,1,196,1,2,198,196,196,1,196,1,196,1,195,2,1
0034BEr 3  01 01 01 20  
0034C2r 3  01 02 01 03  
0034DBr 3  C4 C6 C5 02          .byte 196,198,197,2,196,1,196
0034DFr 3  C4 01 C4     
0034E2r 3  FF 24 08 2C          .byte 255,36,8,44,45,46,47,45,48,255,36,8,255,189,8,49,50,51,52,53,54,255,189,16,49,55,56,57,58,54,255,189,8
0034E6r 3  2D 2E 2F 2D  
0034EAr 3  30 FF 24 08  
003503r 3  FF 25 08 3B          .byte 255,37,8,59,60,61,62,63,54,255,37,8,255,0,44,255,36,4,38,39,40,41,36,36,36,177,178,36,36,36,38,39,40
003507r 3  3C 3D 3E 3F  
00350Br 3  36 FF 25 08  
003524r 3  29 24 24 FF          .byte 41,36,36,255,189,4,42,4,4,190,189,189,189,179,180,189,189,189,42,4,4,190,255,189,6,42,4,4,190,189,189,189,139
003528r 3  BD 04 2A 04  
00352Cr 3  04 BE BD BD  
003545r 3  8C BD BD BD          .byte 140,189,189,189,42,4,4,190,189,189,255,37,4,43,4,4,191,189,37,37,143,144,37,37,37,43,4,4,191,37,37,255,0,5
003549r 3  2A 04 04 BE  
00354Dr 3  BD BD FF 25  
003567r 3  04 04 FF 00          .byte 4,4,255,0,10,4,4,255,0,8,4,4,255,0,10,4,4,0,0,0,255,36,7,38,39,40,41,36,36,38,39,40,41
00356Br 3  0A 04 04 FF  
00356Fr 3  00 08 04 04  
003588r 3  FF 24 05 BD          .byte 255,36,5,189,189,118,119,189,189,189,42,4,4,190,189,189,42,4,4,190,189,189,118,119,189,189,189,122,123,189,189,189,42
00358Cr 3  BD 76 77 BD  
003590r 3  BD BD 2A 04  
0035A9r 3  04 04 BE BD          .byte 4,4,190,189,189,42,4,4,190,189,189,120,121,189,189,189,90,91,189,189,189,42,4,4,190,189,189,42,4,4,190,189,189
0035ADr 3  BD 2A 04 04  
0035B1r 3  BE BD BD 78  
0035CAr 3  5A 5B 25 FF          .byte 90,91,37,255,0,8,4,4,255,0,4,4,4,255,0,14,4,4,255,0,4,4,4,255,0,6,255,36,22,255,37,22
0035CEr 3  00 08 04 04  
0035D2r 3  FF 00 04 04  
0035EAr 3  FF 24 16 FF          .byte 255,36,22,255,189,14,173,174,255,189,10,102,103,255,189,8,175,176,255,189,6,255,37,4,104,105,255,37,16,1,255,0,21
0035EEr 3  BD 0E AD AE  
0035F2r 3  FF BD 0A 66  
00360Br 3  03 FF 00 15          .byte 3,255,0,21,255,36,4,38,39,40,41,255,36,14,255,189,4,42,4,4,190,255,189,5,110,111,255,189,11,42,4,4,190
00360Fr 3  FF 24 04 26  
003613r 3  27 28 29 FF  
00362Cr 3  FF BD 05 70          .byte 255,189,5,112,113,255,189,7,255,37,4,43,4,4,191,255,37,14,220,255,0,4,4,4,255,0,15,218,255,0,4,4,4
003630r 3  71 FF BD 07  
003634r 3  FF 25 04 2B  
00364Dr 3  FF 00 0F FF          .byte 255,0,15,255,36,8,189,255,36,4,38,39,40,41,255,36,5,255,189,13,42,4,4,190,255,189,7,153,154,155,156,255,189,7
003651r 3  24 08 BD FF  
003655r 3  24 04 26 27  
00366Fr 3  2A 04 04 BE          .byte 42,4,4,190,189,189,139,140,189,37,37,157,158,159,160,255,37,7,42,4,4,190,37,37,143,144,37,3,255,0,13,4,4
003673r 3  BD BD 8B 8C  
003677r 3  BD 25 25 9D  
003690r 3  FF 00 06 02          .byte 255,0,6,2,255,0,13,4,4,255,0,6,255,36,8,38,39,40,41,255,36,10,255,37,8,42,4,4,190,255,37,10
003694r 3  FF 00 0D 04  
003698r 3  04 FF 00 06  
0036B0r 3  FF 24 08 26          .byte 255,36,8,38,39,40,41,255,36,10,189,189,189,96,97,189,189,189,42,0,0,190,255,189,13,98,99,189,189,189,42,4,4
0036B4r 3  27 28 29 FF  
0036B8r 3  24 0A BD BD  
0036D1r 3  BE FF BD 0A          .byte 190,255,189,10,255,37,8,43,4,4,191,189,189,255,37,8,255,0,9,4,4,255,0,9,165,166,255,0,9,4,4,255,0,6
0036D5r 3  FF 25 08 2B  
0036D9r 3  04 04 BF BD  
0036F3r 3  E1 00 00 A7          .byte 225,0,0,167,168,36,36,38,39,40,41,255,36,6,38,39,40,41,255,36,6,189,189,42,4,4,190,255,189,6,42,4,4
0036F7r 3  A8 24 24 26  
0036FBr 3  27 28 29 FF  
003714r 3  BE FF BD 08          .byte 190,255,189,8,42,4,4,190,189,189,165,166,189,189,42,4,4,190,255,189,6,37,37,43,4,4,191,37,37,167,168,37,37
003718r 3  2A 04 04 BE  
00371Cr 3  BD BD A5 A6  
003735r 3  2B 04 04 BF          .byte 43,4,4,191,255,37,6,0,0,0,4,4,255,0,8,4,4,255,0,6,197,0,0,0,4,4,255,0,8,4,4,255,0,6
003739r 3  FF 25 06 00  
00373Dr 3  00 00 04 04  
003757r 3  C6 FF 24 07          .byte 198,255,36,7,38,39,40,41,255,36,11,189,189,189,145,146,189,189,42,4,4,190,255,189,7,185,186,255,189,5,147,148,189,189
00375Br 3  26 27 28 29  
00375Fr 3  FF 24 0B BD  
003779r 3  2A 04 04 BE          .byte 42,4,4,190,255,189,7,187,188,189,189,255,37,7,42,4,4,190,255,37,11,255,0,8,4,4,255,0,10,171,172,255,0,8
00377Dr 3  FF BD 07 BB  
003781r 3  BC BD BD FF  
00379Br 3  04 04 FF 00          .byte 4,4,255,0,10,169,170,255,36,22,255,37,22
00379Fr 3  0A A9 AA FF  
0037A3r 3  24 16 FF 25  
0037A8r 3  FF 4D 16 FF          .byte 255,77,22,255,79,22,255,0,16,234,0,0,0,165,166,255,0,20,167,168,255,77,7,38,39,40,41,255,77,11,78,78,185
0037ACr 3  4F 16 FF 00  
0037B0r 3  10 EA 00 00  
0037C9r 3  BA 4E 4E 4E          .byte 186,78,78,78,42,4,4,190,78,145,146,255,78,4,185,186,255,78,4,187,188,78,78,78,42,4,4,190,78,147,148,255,78,4
0037CDr 3  2A 04 04 BE  
0037D1r 3  4E 91 92 FF  
0037EBr 3  BB BC FF 4E          .byte 187,188,255,78,9,42,4,4,190,255,78,18,42,4,4,190,255,78,11,255,79,7,43,4,4,191,255,79,11,255,0,8,4,4
0037EFr 3  09 2A 04 04  
0037F3r 3  BE FF 4E 12  
00380Dr 3  FF 00 0A A1          .byte 255,0,10,161,162,255,0,8,4,4,255,0,10,163,164,255,77,9,44,45,46,47,45,48,77,38,39,40,41,77,77,78,114
003811r 3  A2 FF 00 08  
003815r 3  04 04 FF 00  
00382Er 3  73 4E 4E 6A          .byte 115,78,78,106,107,78,78,49,50,51,52,53,54,78,42,4,4,190,78,78,78,116,117,78,78,108,109,78,78,49,55,56,57
003832r 3  6B 4E 4E 31  
003836r 3  32 33 34 35  
00384Fr 3  3A 36 4E 2A          .byte 58,54,78,42,4,4,190,78,78,255,79,9,49,60,61,62,63,54,79,43,4,4,191,79,79,255,0,17,4,4,0,88,89
003853r 3  04 04 BE 4E  
003857r 3  4E FF 4F 09  
003870r 3  FF 00 11 04          .byte 255,0,17,4,4,0,90,91,255,77,22,255,79,22
003874r 3  04 00 5A 5B  
003878r 3  FF 4D 16 FF  
00387Er 3  4D 4D 26 27          .byte 77,77,38,39,40,41,255,77,16,79,79,42,4,4,190,255,79,16,1,0,0,4,4,255,0,17,2,0,0,4,4,255,0,17
003882r 3  28 29 FF 4D  
003886r 3  10 4F 4F 2A  
0038A0r 3  FF 4D 0B 26          .byte 255,77,11,38,39,40,41,255,77,7,255,78,11,42,4,4,190,78,78,114,115,255,78,14,42,4,4,190,78,78,116,117,255,78,14
0038A4r 3  27 28 29 FF  
0038A8r 3  4D 07 FF 4E  
0038C3r 3  2A 04 04 BE          .byte 42,4,4,190,255,78,18,42,4,4,190,255,78,7,255,79,11,43,4,4,190,255,79,7,218,255,0,11,4,4,255,0,8
0038C7r 3  FF 4E 12 2A  
0038CBr 3  04 04 BE FF  
0038E4r 3  DB FF 00 0B          .byte 219,255,0,11,4,4,255,0,8,255,77,17,38,39,40,41,77,78,78,78,110,111,255,78,6,165,166,255,78,4,42,4,4
0038E8r 3  04 04 FF 00  
0038ECr 3  08 FF 4D 11  
003905r 3  BE FF 4E 04          .byte 190,255,78,4,112,113,255,78,6,167,168,255,78,4,42,4,4,190,78,255,79,17,43,4,4,191,79,161,162,255,0,16,4,4
003909r 3  70 71 FF 4E  
00390Dr 3  06 A7 A8 FF  
003927r 3  00 00 A3 A4          .byte 0,0,163,164,255,0,16,4,4,0,0,255,77,8,38,39,40,41,255,77,10,255,79,8,42,4,4,190,255,79,10
00392Br 3  FF 00 10 04  
00392Fr 3  04 00 00 FF  
003946r 3  DA DA DC DA          .byte 218,218,220,218,218,94,220,218,218,94,219,220,255,218,4,94,219,0,0,218,95,218,95,218,95,220,218,220,95,218,220,218,218,218
00394Ar 3  DA 5E DC DA  
00394Er 3  DA 5E DB DC  
003968r 3  5F DA DB DC          .byte 95,218,219,220,95,4,4,218,94,218,220,95,255,0,15,4,4,0,95,218,218,218,255,0,15,4,4,0,94,218,219,218,4,4
00396Cr 3  5F 04 04 DA  
003970r 3  5E DA DC 5F  
00398Ar 3  DA DA 5E 5F          .byte 218,218,94,95,219,218,94,218,4,4,95,219,220,218,220,218,95,218,218,220,4,4,255,219,8,4,4,93,218,220,218,93,218
00398Er 3  DB DA 5E DA  
003992r 3  04 04 5F DB  
0039ABr 3  5E DC DA 5F          .byte 94,220,218,95,4,4,255,0,7,95,4,4,0,0,218,221,222,0,95,219,219,219,4,4,255,0,7,218,4,4,0,0,94
0039AFr 3  04 04 FF 00  
0039B3r 3  07 5F 04 04  
0039CCr 3  DF E0 00 5E          .byte 223,224,0,94,0,0,0,4,4,218,94,218,95,219,218,219,95,93,95,4,4,218,220,93,218,95,0,0,0,4,4,255,219,8
0039D0r 3  00 00 00 04  
0039D4r 3  04 DA 5E DA  
0039EEr 3  5D 5E 04 04          .byte 93,94,4,4,218,218,93,218,94,218,218,220,4,4,255,0,8,219,95,4,4,255,0,5,220,218,94,4,4,255,0,8,92
0039F2r 3  DA DA 5D DA  
0039F6r 3  5E DA DA DC  
003A0Fr 3  5E 04 04 FF          .byte 94,4,4,255,0,5,218,219,95,4,4,95,218,4,4,93,95,4,4,93,95,4,4,218,218,4,4,218,219,220,94,4,4
003A13r 3  00 05 DA DB  
003A17r 3  5F 04 04 5F  
003A30r 3  5E DB 04 04          .byte 94,219,4,4,218,220,4,4,218,94,4,4,95,218,4,4,94,219,218,95,4,4,218,95,4,4,94,219,4,4,218,218,4,4
003A34r 3  DA DC 04 04  
003A38r 3  DA 5E 04 04  
003A52r 3  DA 5E 04 04          .byte 218,94,4,4,95,218,219,220,4,4,219,93,4,4,95,95,4,4,218,218,4,4,94,218,4,4,94,218,218,95,4,4,0,0
003A56r 3  5F DA DB DC  
003A5Ar 3  04 04 DB 5D  
003A74r 3  04 04 00 00          .byte 4,4,0,0,4,4,0,0,4,4,0,0,4,4,33,220,219,94,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,0
003A78r 3  04 04 00 00  
003A7Cr 3  04 04 00 00  
003A96r 3  04 04 22 DB          .byte 4,4,34,219,220,95,255,218,18,95,219,218,95,93,218,218,220,93,218,218,220,93,219,220,93,219,220,218,220,93,218,219
003A9Ar 3  DC 5F FF DA  
003A9Er 3  12 5F DB DA  
003AB6r 3  C6 01 C5 C4          .byte 198,1,197,196,1,1,196,1,198,1,198,1,196,1,198,1,1,196,1,196,255,1,4,198,1,198,1,197,255,1,4,197,198
003ABAr 3  01 01 C4 01  
003ABEr 3  C6 01 C6 01  
003AD7r 3  01 01 01 C4          .byte 1,1,1,196,1,196,198,196,1,18,19,20,255,0,11,196,255,0,7,22,0,21,255,0,11,1,255,0,7,3,0,3,4,4
003ADBr 3  01 C4 C6 C4  
003ADFr 3  01 12 13 14  
003AF9r 3  C6 04 04 03          .byte 198,4,4,3,18,19,20,4,4,1,4,4,1,198,1,1,196,3,198,3,4,4,197,4,4,3,22,0,21,4,4,3,4,4
003AFDr 3  12 13 14 04  
003B01r 3  04 01 04 04  
003B1Br 3  C4 C5 03 1F          .byte 196,197,3,31,196,0,0,0,4,4,198,4,4,3,73,0,72,4,4,3,4,4,195,198,3,3,198,0,0,0,4,4,197
003B1Fr 3  C4 00 00 00  
003B23r 3  04 04 C6 04  
003B3Cr 3  04 04 03 49          .byte 4,4,3,73,0,72,4,4,3,4,4,196,2,198,1,1,198,4,4,3,198,0,4,4,255,0,4,4,4,0,4,4,255,0,4
003B40r 3  00 48 04 04  
003B44r 3  03 04 04 C4  
003B5Fr 3  C4 C5 04 04          .byte 196,197,4,4,3,197,0,4,4,255,0,4,4,4,0,4,4,255,0,4,196,198,4,4,3,198,3,197,1,197,197,1,4,4
003B63r 3  03 C5 00 04  
003B67r 3  04 FF 00 04  
003B81r 3  03 C6 03 01          .byte 3,198,3,1,4,4,3,3,198,197,4,4,196,197,195,3,197,1,197,196,4,4,198,1,1,198,4,4,198,1,1,198,4,4
003B85r 3  04 04 03 03  
003B89r 3  C6 C5 04 04  
003BA3r 3  C5 C6 C5 03          .byte 197,198,197,3,197,0,0,3,4,4,255,0,4,4,4,0,0,198,197,4,4,198,198,2,198,3,0,0,196,4,4,255,0,4
003BA7r 3  C5 00 00 03  
003BABr 3  04 04 FF 00  
003BC5r 3  04 04 00 00          .byte 4,4,0,0,197,198,4,4,197,221,222,196,198,4,4,198,4,4,3,31,4,4,197,198,4,4,198,196,4,4,198,223,224
003BC9r 3  C5 C6 04 04  
003BCDr 3  C5 DD DE C4  
003BE6r 3  03 03 04 04          .byte 3,3,4,4,3,4,4,197,32,4,4,198,197,4,4,197,197,4,4,255,0,5,4,4,196,4,4,0,0,4,4,0,0
003BEAr 3  03 04 04 C5  
003BEEr 3  20 04 04 C6  
003C07r 3  04 04 C6 C6          .byte 4,4,198,198,4,4,255,0,5,4,4,198,4,4,0,0,4,4,0,0,4,4,1,3,197,3,3,196,197,3,196,4,4
003C0Br 3  04 04 FF 00  
003C0Fr 3  05 04 04 C6  
003C28r 3  C5 03 03 C5          .byte 197,3,3,197,3,3,196,197,196,3,3,196,197,3,3,197,198,3,197,3,4,4,198,3,198,3,3,197,198,3,3,197,3
003C2Cr 3  03 03 C4 C5  
003C30r 3  C4 03 03 C4  
003C49r 3  01                   .byte 1
003C4Ar 3  DA 5E 5D 5E          .byte 218,94,93,94,218,218,218,93,218,25,26,218,218,218,94,218,93,218,94,94,255,218,5,95,94,93,218,94,218,95,218,218,93
003C4Er 3  DA DA DA 5D  
003C52r 3  DA 19 1A DA  
003C6Br 3  5E DA DA 5E          .byte 94,218,218,94,218,218,95,93,95,255,0,21,94,255,0,21,95,218,95,95,218,95,4,4,93,94,93,218,95,4,4,95,95
003C6Fr 3  DA DA 5F 5D  
003C73r 3  5F FF 00 15  
003C8Cr 3  DA DA DA 5D          .byte 218,218,218,93,95,218,218,94,95,33,94,4,4,92,95,33,218,94,4,4,219,219,219,0,219,219,219,218,94,218,93,34,95
003C90r 3  5F DA DA 5E  
003C94r 3  5F 21 5E 04  
003CADr 3  04 04 5E DA          .byte 4,4,94,218,34,95,218,4,4,95,95,34,218,94,93,218,95,94,95,93,219,219,4,4,219,93,219,219,93,4,4,219,93
003CB1r 3  22 5F DA 04  
003CB5r 3  04 5F 5F 22  
003CCEr 3  DB 5D DB 5D          .byte 219,93,219,93,219,218,218,94,0,0,0,4,4,255,0,5,4,4,255,0,4,225,0,0,95,218,95,0,0,0,4,4,255,0,5
003CD2r 3  DB DA DA 5E  
003CD6r 3  00 00 00 04  
003CF1r 3  04 04 FF 00          .byte 4,4,255,0,7,218,95,95,219,219,93,219,219,93,219,4,4,93,219,219,93,4,4,219,93,219,219,95,95,218,255,219,7
003CF5r 3  07 DA 5F 5F  
003CF9r 3  DB DB 5D DB  
003D12r 3  04 04 DB DB          .byte 4,4,219,219,219,93,4,4,255,219,4,218,218,95,255,0,7,4,4,255,0,4,4,4,255,0,4,95,218,95,255,0,7
003D16r 3  DB 5D 04 04  
003D1Ar 3  FF DB 04 DA  
003D33r 3  04 04 FF 00          .byte 4,4,255,0,4,4,4,255,0,4,218,95,218,219,93,219,4,4,219,93,219,219,219,4,4,93,219,93,4,4,93,219,95
003D37r 3  04 04 04 FF  
003D3Br 3  00 04 DA 5F  
003D54r 3  DA 5F 5F DA          .byte 218,95,95,218,93,4,4,218,95,218,95,218,4,4,218,95,218,4,4,93,218,218,218,94,0,0,0,4,4,255,0,5,4,4
003D58r 3  5D 04 04 DA  
003D5Cr 3  5F DA 5F DA  
003D76r 3  00 00 00 04          .byte 0,0,0,4,4,0,0,218,95,95,0,0,0,4,4,255,0,5,4,4,0,0,0,4,4,0,0,95,218,95,218,95,93
003D7Ar 3  04 00 00 DA  
003D7Er 3  5F 5F 00 00  
003D97r 3  5F DA 5E DA          .byte 95,218,94,218,93,95,218,95,218,95,218,94,93,218,95,94,218,95,218,25,26,218,95,94,218,95,218,94,95,218,218,218,25
003D9Br 3  5D 5F DA 5F  
003D9Fr 3  DA 5F DA 5E  
003DB8r 3  1A DA 5F DA          .byte 26,218,95,218,218,95
003DBCr 3  DA 5F        
003DBEr 3  01 C6 01 C6          .byte 1,198,1,198,1,198,1,198,1,196,1,1,196,1,196,1,198,198,1,198,196,1,1,197,198,1,196,197,198,1,196,197,198
003DC2r 3  01 C6 01 C6  
003DC6r 3  01 C4 01 01  
003DDFr 3  C5 01 C5 C5          .byte 197,1,197,197,198,197,196,197,196,197,1,0,0,0,196,1,255,0,20,198,196,255,0,17,198,4,4,198,196,4,4,196,1
003DE3r 3  C6 C5 C4 C5  
003DE7r 3  C4 C5 01 00  
003E00r 3  C6 04 04 C4          .byte 198,4,4,196,1,4,4,198,196,198,4,4,197,197,4,4,198,196,4,4,1,196,197,4,4,197,1,4,4,197,197,1,4,4
003E04r 3  01 04 04 C6  
003E08r 3  C4 C6 04 04  
003E22r 3  C6 C6 04 04          .byte 198,198,4,4,197,197,4,4,198,197,1,4,4,1,196,4,4,197,196,3,4,4,197,197,4,4,198,3,4,4,197,1,3
003E26r 3  C5 C5 04 04  
003E2Ar 3  C6 C5 01 04  
003E43r 3  04 04 C5 01          .byte 4,4,197,1,4,4,198,198,3,4,4,198,198,4,4,0,0,4,4,0,0,0,4,4,0,0,4,4,0,0,0,4,4
003E47r 3  04 04 C6 C6  
003E4Br 3  03 04 04 C6  
003E64r 3  C5 C5 04 04          .byte 197,197,4,4,0,0,4,4,0,0,0,4,4,0,0,4,4,0,0,0,4,4,1,198,4,4,1,1,4,4,198,196,197
003E68r 3  00 00 04 04  
003E6Cr 3  00 00 00 04  
003E85r 3  04 04 01 C6          .byte 4,4,1,198,4,4,1,198,1,4,4,198,197,4,4,1,3,4,4,197,197,197,4,4,197,1,4,4,197,197,198,1,197
003E89r 3  04 04 01 C6  
003E8Dr 3  01 04 04 C6  
003EA6r 3  01 C6 04 04          .byte 1,198,4,4,0,0,4,4,0,0,0,4,4,0,0,4,4,255,0,5,198,197,4,4,0,0,4,4,0,0,0,4,4
003EAAr 3  00 00 04 04  
003EAEr 3  00 00 00 04  
003EC7r 3  00 00 04 04          .byte 0,0,4,4,255,0,5,198,198,4,4,198,1,3,198,1,4,4,1,198,4,4,1,1,4,4,1,198,1,197,197,4,4
003ECBr 3  FF 00 05 C6  
003ECFr 3  C6 04 04 C6  
003EE8r 3  C6 C6 01 01          .byte 198,198,1,1,198,4,4,196,1,4,4,198,3,4,4,1,3,198,1,198,4,4,1,1,0,0,0,4,4,1,196,4,4
003EECr 3  C6 04 04 C4  
003EF0r 3  01 04 04 C6  
003F09r 3  C4 01 04 04          .byte 196,1,4,4,198,198,1,197,197,4,4,197,198,0,0,0,4,4,1,3,4,4,197,198,4,4,197,1,3,198,198,255,1,4
003F0Dr 3  C6 C6 01 C5  
003F11r 3  C5 04 04 C5  
003F2Br 3  C5 C6 01 01          .byte 197,198,1,1,1,198,1,1,198,1,196,1,198,1,1,198,197,197,1,1,197,198,1,197,1,197,196,196,255,197,4,198,197
003F2Fr 3  01 C6 01 01  
003F33r 3  C6 01 C4 01  
003F4Cr 3  01 C6 C5 C5          .byte 1,198,197,197,1
003F50r 3  01           
003F51r 3  01 C6 C6 01          .byte 1,198,198,1,197,198,1,198,1,197,197,1,198,197,1,198,198,1,197,198,198,197,197,198,1,195,197,1,195,198,1,198,1
003F55r 3  C5 C6 01 C6  
003F59r 3  01 C5 C5 01  
003F72r 3  C6 01 C6 01          .byte 198,1,198,1,195,1,197,1,195,1,1,255,0,11,197,195,195,255,0,19,1,1,1,255,0,8,198,4,4,1,4,4,195
003F76r 3  C3 01 C5 01  
003F7Ar 3  C3 01 01 FF  
003F93r 3  C5 01 04 04          .byte 197,1,4,4,0,0,0,4,4,197,195,1,4,4,197,197,4,4,195,4,4,197,1,195,4,4,0,0,0,4,4,195,1
003F97r 3  00 00 00 04  
003F9Br 3  04 C5 C3 01  
003FB4r 3  C6 04 04 C6          .byte 198,4,4,198,198,4,4,1,4,4,0,0,0,4,4,195,1,195,4,4,0,0,0,4,4,197,197,4,4,198,4,4,0,0,0
003FB8r 3  C6 04 04 01  
003FBCr 3  04 04 00 00  
003FD7r 3  04 04 01 C3          .byte 4,4,1,195,198,4,4,0,0,0,4,4,198,198,4,4,0,4,4,197,1,195,4,4,0,0,0,4,4,1,195,198,4,4
003FDBr 3  C6 04 04 00  
003FDFr 3  00 00 04 04  
003FF9r 3  C5 C5 04 04          .byte 197,197,4,4,0,4,4,195,1,197,4,4,0,0,0,4,4,195,1,1,4,4,198,198,4,4,198,4,4,1,195,197,4,4
003FFDr 3  00 04 04 C3  
004001r 3  01 C5 04 04  
00401Br 3  C6 C6 C6 04          .byte 198,198,198,4,4,0,0,0,4,4,197,197,4,4,1,4,4,197,1,195,4,4,1,195,197,4,4,0,0,0,4,4,198,198
00401Fr 3  04 00 00 00  
004023r 3  04 04 C5 C5  
00403Dr 3  04 04 00 04          .byte 4,4,0,4,4,0,0,0,4,4,197,198,195,4,4,195,198,1,4,4,197,197,4,4,0,4,4,0,0,0,4,4,195
004041r 3  04 00 00 00  
004045r 3  04 04 C5 C6  
00405Er 3  C6 01 04 04          .byte 198,1,4,4,197,195,195,4,4,198,198,4,4,1,4,4,195,1,197,4,4,0,0,0,4,4,1,1,1,4,4,197,197
004062r 3  C5 C3 C3 04  
004066r 3  04 C6 C6 04  
00407Fr 3  04 04 C3 04          .byte 4,4,195,4,4,1,197,195,4,4,0,0,0,4,4,195,1,197,4,4,198,198,4,4,198,4,4,0,0,0,4,4,1
004083r 3  04 01 C5 C3  
004087r 3  04 04 00 00  
0040A0r 3  C6 01 04 04          .byte 198,1,4,4,0,0,0,4,4,197,197,4,4,1,4,4,0,0,0,4,4,1,1,1,4,4,0,0,0,4,4,198,198
0040A4r 3  00 00 00 04  
0040A8r 3  04 C5 C5 04  
0040C1r 3  01 C3 C6 C6          .byte 1,195,198,198,1,197,1,198,195,1,198,198,195,1,195,1,198,1,195,1,197,197,1,195,1,197,195,198,195,1,1,198,197
0040C5r 3  01 C5 01 C6  
0040C9r 3  C3 01 C6 C6  
0040E2r 3  C3 01 01 C6          .byte 195,1,1,198,1,195,1,197,198,198
0040E6r 3  01 C3 01 C5  
0040EAr 3  C6 C6        
0040ECr 3  5F DA DC DA          .byte 95,218,220,218,95,218,31,255,218,4,220,218,218,220,218,218,218,31,218,95,218,95,218,93,255,218,6,93,218,218,218,95,218,218
0040F0r 3  5F DA 1F FF  
0040F4r 3  DA 04 DC DA  
00410Er 3  5D FF DA 05          .byte 93,255,218,5,255,0,44,255,218,4,93,218,218,93,95,4,4,218,218,93,218,218,218,93,218,218,93,94,95,218,95,218,218
004112r 3  FF 00 2C FF  
004116r 3  DA 04 5D DA  
00412Fr 3  5F DA DA DA          .byte 95,218,218,218,4,4,95,218,218,218,95,218,220,218,218,218,95,218,95,255,0,7,4,4,0,0,218,33,218,18,19,19,20
004133r 3  04 04 5F DA  
004137r 3  DA DA 5F DA  
004150r 3  21 5E 5E DA          .byte 33,94,94,218,255,0,7,4,4,0,0,218,34,220,22,0,0,21,34,218,95,218,218,218,95,255,218,4,4,4,218,95,218
004154r 3  FF 00 07 04  
004158r 3  04 00 00 DA  
004171r 3  5F 5F 49 00          .byte 95,95,73,0,0,72,218,95,94,95,218,94,218,218,31,218,220,4,4,218,94,220,95,218,73,95,95,72,218,94,95,218,255,0,7
004175r 3  00 48 DA 5F  
004179r 3  5E 5F DA 5E  
004194r 3  04 04 FF 00          .byte 4,4,255,0,10,218,94,95,255,0,7,4,4,255,0,10,95,95,255,218,11,4,4,255,218,4,4,4,218,94,94,95,218,218
004198r 3  0A DA 5E 5F  
00419Cr 3  FF 00 07 04  
0041B6r 3  5D DA DA 5F          .byte 93,218,218,95,218,93,218,93,4,4,220,218,93,218,4,4,93,218,95,218,218,31,218,95,218,218,218,95,218,220,4,4,218
0041BAr 3  DA 5D DA 5D  
0041BEr 3  04 04 DC DA  
0041D7r 3  1F DC 5F 04          .byte 31,220,95,4,4,218,218,218,95,218,218,218,220,218,95,218,220,218,218,4,4,218,218,218,94,4,4,218,94,95,218,255,0,10
0041DBr 3  04 DA DA DA  
0041DFr 3  5F DA DA DA  
0041F9r 3  04 04 5F 00          .byte 4,4,95,0,0,0,4,4,0,95,218,95,255,0,10,4,4,218,0,0,0,4,4,0,218,95,218,93,218,93,218,218,93
0041FDr 3  00 00 04 04  
004201r 3  00 5F DA 5F  
00421Ar 3  DA DA 5D DA          .byte 218,218,93,218,93,218,218,218,93,218,4,4,93,94,94,218,218,95,220,218,218,218,95,255,218,5,220,218,218,218,4,4,218
00421Er 3  5D DA DA DA  
004222r 3  5D DA 04 04  
00423Br 3  5F                   .byte 95
00423Cr 3  DA DA 5D DA          .byte 218,218,93,218,218,93,218,218,93,218,218,218,93,218,218,93,218,93,93,218,93,218,93,218,218,218,93,218,218,93,218,218,93
004240r 3  DA 5D DA DA  
004244r 3  5D DA DA DA  
00425Dr 3  DA DA DA 5D          .byte 218,218,218,93,255,218,6,93,218,218,0,0,218,218,0,0,218,218,0,0,218,218,255,0,8,218,218,0,0,218,218,0,0
004261r 3  FF DA 06 5D  
004265r 3  DA DA 00 00  
00427Er 3  5E 21 00 00          .byte 94,33,0,0,218,218,255,0,8,94,218,4,4,0,0,4,4,218,34,4,4,0,0,4,4,218,94,93,4,4,95,218,218
004282r 3  DA DA FF 00  
004286r 3  08 5E DA 04  
00429Fr 3  04 04 00 00          .byte 4,4,0,0,4,4,94,218,4,4,0,0,4,4,218,93,218,4,4,94,94,95,4,4,218,218,4,4,218,220,4,4,218
0042A3r 3  04 04 5E DA  
0042A7r 3  04 04 00 00  
0042C0r 3  1F 04 04 5E          .byte 31,4,4,94,93,94,4,4,95,95,218,4,4,33,220,4,4,218,218,4,4,218,32,4,4,218,218,218,4,4,94,218,95
0042C4r 3  5D 5E 04 04  
0042C8r 3  5F 5F DA 04  
0042E1r 3  04 04 22 DA          .byte 4,4,34,218,4,4,0,0,4,4,33,218,4,4,218,31,94,4,4,95,218,94,4,4,218,218,4,4,0,0,4,4,34
0042E5r 3  04 04 00 00  
0042E9r 3  04 04 21 DA  
004302r 3  5F 04 04 5E          .byte 95,4,4,94,32,218,4,4,94,218,218,4,4,94,220,4,4,218,94,4,4,93,94,4,4,0,0,0,4,4,95,94,218
004306r 3  20 DA 04 04  
00430Ar 3  5E DA DA 04  
004323r 3  04 04 DA DA          .byte 4,4,218,218,4,4,95,218,4,4,93,218,4,4,0,0,0,4,4,94,95,218,4,4,0,0,4,4,218,93,4,4,220
004327r 3  04 04 5F DA  
00432Br 3  04 04 5D DA  
004344r 3  DA 04 04 DA          .byte 218,4,4,218,218,218,4,4,95,218,94,4,4,0,0,4,4,33,95,4,4,218,95,4,4,94,218,93,4,4,94,94,218
004348r 3  DA DA 04 04  
00434Cr 3  5F DA 5E 04  
004365r 3  04 04 5F 5E          .byte 4,4,95,94,4,4,34,218,4,4,218,95,4,4,93,92,93,4,4,95,218,95,4,4,220,220,4,4,95,218,4,4,95
004369r 3  04 04 22 DA  
00436Dr 3  04 04 DA 5F  
004386r 3  5D 04 04 DA          .byte 93,4,4,218,92,218,4,4,94,0,0,4,4,94,95,4,4,0,0,4,4,0,0,4,4,0,0,0,4,4,95,0,0
00438Ar 3  5C DA 04 04  
00438Er 3  5E 00 00 04  
0043A7r 3  04 04 5E 5F          .byte 4,4,94,95,4,4,0,0,4,4,0,0,4,4,0,0,0,4,4,94,218,218,92,220,218,218,220,218,94,218,220,220,218
0043ABr 3  04 04 00 00  
0043AFr 3  04 04 00 00  
0043C8r 3  5F 5E 5F DA          .byte 95,94,95,218,94,218,94,95,95,218,93,218,93,93,218,93,218,218,93,218,93,218,218,218,93,218,218,93,218,218,93
0043CCr 3  5E DA 5E 5F  
0043D0r 3  5F DA 5D DA  
0043E7r 3  01 C3 01 C6          .byte 1,195,1,198,1,195,1,1,195,1,195,1,198,1,195,1,198,1,198,195,1,197,196,198,196,1,1,198,196,1,196,1,1
0043EBr 3  01 C3 01 01  
0043EFr 3  C3 01 C3 01  
004408r 3  C6 01 C6 C6          .byte 198,1,198,198,196,1,196,198,196,198,198,0,0,0,1,33,1,1,198,1,1,198,255,1,4,197,1,1,198,1,1,197,0,0,0
00440Cr 3  C4 01 C4 C6  
004410r 3  C4 C6 C6 00  
00442Br 3  C6 22 03 03          .byte 198,34,3,3,3,1,198,1,1,197,1,198,1,198,1,197,1,1,198,197,4,4,197,1,1,255,0,15,197,198,4,4,1
00442Fr 3  03 01 C6 01  
004433r 3  01 C5 01 C6  
00444Cr 3  1F C6 FF 00          .byte 31,198,255,0,6,234,255,0,8,198,197,4,4,197,32,197,4,4,1,1,197,1,1,198,198,197,1,1,1,4,4,197,198
004450r 3  06 EA FF 00  
004454r 3  08 C6 C5 04  
00446Dr 3  04 04 C6 01          .byte 4,4,198,1,1,4,4,198,1,197,198,198,1,1,197,1,198,197,4,4,1,197,4,4,1,198,198,4,4,255,0,11,4,4
004471r 3  01 04 04 C6  
004475r 3  01 C5 C6 C6  
00448Fr 3  01 C6 04 04          .byte 1,198,4,4,197,1,198,4,4,255,0,11,4,4,198,197,4,4,1,198,1,4,4,1,197,1,1,197,1,1,197,1,1
004493r 3  C5 01 C6 04  
004497r 3  04 FF 00 0B  
0044B0r 3  C5 01 01 C5          .byte 197,1,1,197,198,4,4,1,1,1,4,4,197,1,198,1,1,197,1,1,198,1,198,198,1,198,197,4,4,0,0,0,4,4
0044B4r 3  C6 04 04 01  
0044B8r 3  01 01 04 04  
0044D2r 3  FF 00 0D C5          .byte 255,0,13,197,198,4,4,0,0,0,4,4,255,0,13,198,197,199,200,201,199,1,3,3,1,198,4,4,1,18,19,19,20
0044D6r 3  C6 04 04 00  
0044DAr 3  00 00 04 04  
0044F3r 3  01 04 04 01          .byte 1,4,4,1,197,198,199,205,206,207,196,1,198,1,1,4,4,1,22,0,0,21,1,4,4,196,198,197,207,0,0,208,255,0,5
0044F7r 3  C5 C6 C7 CD  
0044FBr 3  CE CF C4 01  
004516r 3  04 04 FF 00          .byte 4,4,255,0,6,4,4,0,197,198,207,0,0,200,225,255,0,4,4,4,255,0,6,4,4,0,198,198,1,1,197,1,1,1
00451Ar 3  06 04 04 00  
00451Er 3  C5 C6 CF 00  
004538r 3  C5 01 01 01          .byte 197,1,1,1,197,1,1,198,197,1,1,197,1,1,197,196,197,1,1,1,197,198,1,197,1,195,197,1,1,196,1,196,1
00453Cr 3  C5 01 01 C6  
004540r 3  C5 01 01 C5  
004559r 3  C6 C4 01 01          .byte 198,196,1,1
00455Dr 3  5E DA DC DA          .byte 94,218,220,218,218,94,255,218,4,94,218,218,220,218,218,218,94,255,218,6,94,218,220,218,218,94,218,218,218,94,255,218,4
004561r 3  DA 5E FF DA  
004565r 3  04 5E DA DA  
00457Er 3  21 12 13 13          .byte 33,18,19,19,20,33,218,255,0,14,218,34,22,0,0,21,34,218,255,0,14,220,218,24,0,0,23,218,218,4,4,218,94
004582r 3  14 21 DA FF  
004586r 3  00 0E DA 22  
00459Fr 3  5D DA 5E DA          .byte 93,218,94,218,93,220,218,93,4,4,93,218,218,94,218,220,218,94,4,4,218,218,220,255,218,4,94,220,218,4,4,218,220
0045A3r 3  5D DC DA 5D  
0045A7r 3  04 04 5D DA  
0045C0r 3  5D DA DA DC          .byte 93,218,218,220,93,218,4,4,255,0,10,4,4,255,0,7,218,4,4,255,0,10,4,4,0,0,0,225,0,0,0,218,4,4
0045C4r 3  5D DA 04 04  
0045C8r 3  FF 00 0A 04  
0045E2r 3  5D 5E 5E DA          .byte 93,94,94,218,220,93,94,94,218,218,4,4,218,94,93,218,218,94,218,94,4,4,218,218,93,220,218,218,93,93,218,218,4,4
0045E6r 3  DC 5D 5E 5E  
0045EAr 3  DA DA 04 04  
004604r 3  DA DA DC DA          .byte 218,218,220,218,93,220,218,218,4,4,255,0,10,4,4,255,0,6,218,94,4,4,255,0,10,4,4,255,0,6,218,218,218
004608r 3  5D DC DA DA  
00460Cr 3  04 04 FF 00  
004625r 3  5E DA DA 04          .byte 94,218,218,4,4,218,94,218,94,4,4,94,218,4,4,218,218,94,94,218,93,218,218,218,93,4,4,218,93,218,94,4,4
004629r 3  04 DA 5E DA  
00462Dr 3  5E 04 04 5E  
004646r 3  DA DA 04 04          .byte 218,218,4,4,218,220,218,218,93,218,218,93,218,218,4,4,93,218,218,218,4,4,218,218,4,4,218,93,218,93,218,94,255,218,4
00464Ar 3  DA DC DA DA  
00464Er 3  5D DA DA 5D  
004669r 3  04 04 DA 5D          .byte 4,4,218,93,218,93,4,4,93,218,4,4,255,218,4,93,255,0,5,4,4,255,0,4,4,4,0,0,4,4,255,0,10
00466Dr 3  DA 5D 04 04  
004671r 3  5D DA 04 04  
00468Ar 3  04 04 FF 00          .byte 4,4,255,0,4,4,4,0,0,4,4,255,0,5,218,93,218,93,255,218,5,93,255,218,4,93,255,218,6,220,218,94,218
00468Er 3  04 04 04 00  
004692r 3  00 04 04 FF  
0046ABr 3  5D DA 5E DA          .byte 93,218,94,218,218,94,93,218,94,218,220,218,218,218,94,93,218,218,218
0046AFr 3  DA 5E 5D DA  
0046B3r 3  5E DA DC DA  
0046BEr 3  DA DA 5D DA          .byte 218,218,93,218,218,218,18,19,25,26,19,20,218,218,18,19,19,19,20,255,218,5,31,218,93,33,22,21,0,0,22,21,33,33
0046C2r 3  DA DA 12 13  
0046C6r 3  19 1A 13 14  
0046E0r 3  15 D1 D2 D3          .byte 21,209,210,211,22,33,218,31,218,93,32,93,218,34,24,23,4,4,24,23,34,34,21,212,213,214,22,34,218,32,218,93,218
0046E4r 3  16 21 DA 1F  
0046E8r 3  DA 5D 20 5D  
004701r 3  5D DA DA 5D          .byte 93,218,218,93,218,4,4,218,218,93,218,23,215,216,216,24,255,218,4,255,0,7,4,4,255,0,4,93,218,255,0,5,93,93
004705r 3  DA 04 04 DA  
004709r 3  DA 5D DA 17  
004723r 3  00 EA FF 00          .byte 0,234,255,0,5,4,4,255,0,4,218,93,255,0,5,93,218,93,218,218,4,4,218,218,4,4,93,218,4,4,218,218,4,4
004727r 3  05 04 04 FF  
00472Br 3  00 04 DA 5D  
004745r 3  5D 04 04 DA          .byte 93,4,4,218,218,93,218,93,4,4,93,218,4,4,218,93,4,4,31,93,4,4,218,4,4,93,93,221,222,218,4,4,218
004749r 3  DA 5D DA 5D  
00474Dr 3  04 04 5D DA  
004766r 3  5D 04 04 DA          .byte 93,4,4,218,218,4,4,32,218,4,4,218,4,4,218,218,223,224,93,4,4,93,218,4,4,93,218,4,4,218,218,4,4
00476Ar 3  DA 04 04 20  
00476Er 3  DA 04 04 DA  
004787r 3  5D 04 04 5D          .byte 93,4,4,93,93,218,218,218,4,4,0,0,4,4,218,93,4,4,0,0,4,4,218,4,4,93,218,31,218,93,4,4,0,0
00478Br 3  5D DA DA DA  
00478Fr 3  04 04 00 00  
0047A9r 3  04 04 DA 5D          .byte 4,4,218,93,4,4,0,0,4,4,218,4,4,218,218,32,93,218,4,4,218,93,4,4,93,218,4,4,218,93,218,218,93
0047ADr 3  04 04 00 00  
0047B1r 3  04 04 DA 04  
0047CAr 3  04 04 DA 5D          .byte 4,4,218,93,218,93,93,4,4,218,31,4,4,218,93,4,4,93,255,218,4,4,4,93,218,0,0,0,4,4,93,32,4,4
0047CEr 3  DA 5D 5D 04  
0047D2r 3  04 DA 1F 04  
0047ECr 3  DA DA 04 04          .byte 218,218,4,4,93,218,93,0,218,4,4,93,218,0,0,225,4,4,218,218,4,4,218,218,4,4,255,218,5,4,4,218,93
0047F0r 3  5D DA 5D 00  
0047F4r 3  DA 04 04 5D  
00480Dr 3  DA 5D DA 04          .byte 218,93,218,4,4,0,0,4,4,0,0,4,4,255,0,5,4,4,0,93,220,93,218,4,4,0,0,4,4,0,0,4,4
004811r 3  04 00 00 04  
004815r 3  04 00 00 04  
00482Er 3  FF 00 05 04          .byte 255,0,5,4,4,0,218,218,218,93,255,218,4,93,218,218,218,93,255,218,7,93,218,218,93,218,220,218,93,218,220,93,218,218
004832r 3  04 00 DA DA  
004836r 3  DA 5D FF DA  
004850r 3  5D DA DA DC          .byte 93,218,218,220,93,218,220,93,218,93,218
004854r 3  5D DA DC 5D  
004858r 3  DA 5D DA     
00485Br 3  FF 4D 16 FF          .byte 255,77,22,255,79,22,255,0,44,77,38,39,40,41,255,77,5,145,146,255,77,5,38,39,40,41,77,78,42,4,4,190,78
00485Fr 3  4F 16 FF 00  
004863r 3  2C 4D 26 27  
00487Cr 3  72 73 4E 4E          .byte 114,115,78,78,147,148,255,78,5,42,4,4,190,78,78,42,4,4,190,78,116,117,255,78,9,42,4,4,190,78,78,42,4,4
004880r 3  93 94 FF 4E  
004884r 3  05 2A 04 04  
00489Er 3  BE FF 4E 0C          .byte 190,255,78,12,42,4,4,190,78,78,42,4,4,190,255,78,8,165,166,78,78,42,4,4,190,78,79,43,4,4,191,255,79,8
0048A2r 3  2A 04 04 BE  
0048A6r 3  4E 4E 2A 04  
0048C0r 3  A7 A8 4F 4F          .byte 167,168,79,79,43,4,4,191,79,0,0,4,4,255,0,14,4,4,255,0,4,4,4,255,0,14,4,4,0,0,255,77,5
0048C4r 3  2B 04 04 BF  
0048C8r 3  4F 00 00 04  
0048E1r 3  26 27 28 29          .byte 38,39,40,41,255,77,4,38,39,40,41,255,77,5,255,78,5,42,4,4,190,78,110,111,78,42,4,4,190,255,78,6,161
0048E5r 3  FF 4D 04 26  
0048E9r 3  27 28 29 FF  
004902r 3  A2 4E 4E 2A          .byte 162,78,78,42,4,4,190,78,112,113,78,42,4,4,190,78,78,177,178,78,79,163,164,79,79,43,4,4,191,255,79,4,43
004906r 3  04 04 BE 4E  
00490Ar 3  70 71 4E 2A  
004923r 3  04 04 BF 4F          .byte 4,4,191,79,79,179,180,79,255,0,6,4,4,255,0,6,4,4,255,0,12,4,4,255,0,6,4,4,255,0,6,255,77,22
004927r 3  4F B3 B4 4F  
00492Br 3  FF 00 06 04  
004945r 3  FF 4F 16             .byte 255,79,22
004948r 3  FF E2 0F 2C          .byte 255,226,15,44,45,46,47,45,48,226,255,227,15,49,50,51,52,53,54,255,227,4,173,174,255,227,10,49,60,61,62,63,54
00494Cr 3  2D 2E 2F 2D  
004950r 3  30 E2 FF E3  
004969r 3  E3 E5 E5 E5          .byte 227,229,229,229,175,176,255,229,10,49,55,56,57,58,54,229,171,172,255,0,20,169,170,0,0,225,255,0,17,255,226,11,38
00496Dr 3  AF B0 FF E5  
004971r 3  0A 31 37 38  
00498Ar 3  27 28 29 FF          .byte 39,40,41,255,226,7,255,227,11,42,4,4,190,255,227,18,42,4,4,190,227,227,227,110,111,255,227,13,42,4,4,190,227,227,227
00498Er 3  E2 07 FF E3  
004992r 3  0B 2A 04 04  
0049ADr 3  70 71 FF E3          .byte 112,113,255,227,7,139,140,255,227,4,42,4,4,190,255,227,7,255,229,5,143,144,255,229,4,42,4,4,190,255,229,7,165
0049B1r 3  07 8B 8C FF  
0049B5r 3  E3 04 2A 04  
0049CEr 3  A6 FF 00 0A          .byte 166,255,0,10,4,4,255,0,8,167,168,255,0,10,4,4,255,0,8,226,226,38,39,40,41,255,226,16,227,227,42,4,4
0049D2r 3  04 04 FF 00  
0049D6r 3  08 A7 A8 FF  
0049EFr 3  BE E3 E2 FF          .byte 190,227,226,255,227,16,42,4,4,190,255,227,6,185,186,255,227,10,42,4,4,190,255,227,6,187,188,255,227,10,42,4,4
0049F3r 3  E3 10 2A 04  
0049F7r 3  04 BE FF E3  
004A10r 3  BE FF E3 0B          .byte 190,255,227,11,153,156,227,227,227,229,229,43,4,4,191,255,229,11,157,160,229,229,229
004A14r 3  99 9C E3 E3  
004A18r 3  E3 E5 E5 2B  
004A27r 3  FF E2 07 2C          .byte 255,226,7,44,45,46,47,45,48,255,226,9,255,227,7,49,50,51,52,53,54,255,227,16,49,55,56,57,58,54,255,227,16
004A2Br 3  2D 2E 2F 2D  
004A2Fr 3  30 FF E2 09  
004A48r 3  31 3C 3D 3E          .byte 49,60,61,62,63,54,229,255,227,8,255,0,43,225,226,226,38,39,40,41,255,226,11,38,39,40,41,226,227,227,42,4,4
004A4Cr 3  3F 36 E5 FF  
004A50r 3  E3 08 FF 00  
004A69r 3  BE FF E3 0B          .byte 190,255,227,11,42,4,4,190,227,227,227,42,4,4,190,255,227,11,42,4,4,190,227,227,227,42,4,4,190,255,227,11,42
004A6Dr 3  2A 04 04 BE  
004A71r 3  E3 E3 E3 2A  
004A8Ar 3  04 04 BE E3          .byte 4,4,190,227,227,227,42,4,4,190,255,227,11,42,4,4,190,227,227,227,42,4,4,190,255,227,11,42,4,4,190,227,0,0,0
004A8Er 3  E3 E3 2A 04  
004A92r 3  04 BE FF E3  
004AADr 3  04 04 FF 00          .byte 4,4,255,0,13,4,4,0,3,0,0,0,4,4,255,0,13,4,4,0,3,255,226,22,255,227,11,44,45,46,47,45,48
004AB1r 3  0D 04 04 00  
004AB5r 3  03 00 00 00  
004ACEr 3  FF E3 09 B9          .byte 255,227,9,185,186,255,227,5,49,255,66,4,54,255,227,9,187,188,255,227,5,49,255,67,4,54,255,227,16,49,255,67,4
004AD2r 3  BA FF E3 05  
004AD6r 3  31 FF 42 04  
004AEFr 3  36 FF E3 05          .byte 54,255,227,5,255,229,11,49,255,68,4,54,255,229,5
004AF3r 3  FF E5 0B 31  
004AF7r 3  FF 44 04 36  
004AFEr 3  FF E2 0F 2C          .byte 255,226,15,44,45,46,47,45,48,226,255,227,4,173,174,255,227,4,185,186,227,227,227,49,50,51,52,53,54,255,227,5,175
004B02r 3  2D 2E 2F 2D  
004B06r 3  30 E2 FF E3  
004B1Fr 3  B0 FF E3 04          .byte 176,255,227,4,187,188,227,227,227,49,60,61,62,63,54,255,227,16,49,55,56,57,58,54,227,255,0,44,226,226,38,39,40
004B23r 3  BB BC E3 E3  
004B27r 3  E3 31 3C 3D  
004B40r 3  29 FF E2 10          .byte 41,255,226,16,227,227,42,4,4,190,255,227,13,226,255,227,4,42,4,4,190,255,227,12,114,115,255,227,4,42,4,4,190
004B44r 3  E3 E3 2A 04  
004B48r 3  04 BE FF E3  
004B61r 3  FF E3 0C 74          .byte 255,227,12,116,117,255,227,4,42,4,4,190,255,227,5,161,162,255,227,11,42,4,4,190,255,227,5,163,164,255,227,9,0,0,0
004B65r 3  75 FF E3 04  
004B69r 3  2A 04 04 BE  
004B84r 3  04 04 FF 00          .byte 4,4,255,0,20,4,4,255,0,17,255,226,13,227,255,226,8,255,227,25,84,85,255,227,8,145,146,255,227,10,86,87,255,227,8
004B88r 3  14 04 04 FF  
004B8Cr 3  00 11 FF E2  
004BA7r 3  93 94 FF E3          .byte 147,148,255,227,10,88,89,255,227,17,229,229,229,90,91,255,229,17
004BABr 3  0A 58 59 FF  
004BAFr 3  E3 11 E5 E5  
004BB9r 3  01 01 C5 C5          .byte 1,1,197,197,196,5,5,6,9,0,0,11,12,13,13,196,197,196,195,2,196,198,198,1,196,195,1,7,7,8,93,4,4
004BBDr 3  C4 05 05 06  
004BC1r 3  09 00 00 0B  
004BDAr 3  5D 0C 0F 0F          .byte 93,12,15,15,3,1,2,1,196,1,1,255,0,9,4,4,255,0,20,4,4,255,0,11,33,5,6,9,4,4,11,12,13
004BDEr 3  03 01 02 01  
004BE2r 3  C4 01 01 FF  
004BFBr 3  21 01 C3 01          .byte 33,1,195,1,33,5,6,9,4,4,11,12,13,34,7,8,93,4,4,93,14,15,34,197,1,1,34,7,8,93,4,4,93
004BFFr 3  21 05 06 09  
004C03r 3  04 04 0B 0C  
004C1Cr 3  0E 0F FF 00          .byte 14,15,255,0,4,4,4,255,0,11,4,4,255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33
004C20r 3  04 04 04 FF  
004C24r 3  00 0B 04 04  
004C3Dr 3  05 06 09 04          .byte 5,6,9,4,4,11,12,13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1
004C41r 3  04 0B 0C 0D  
004C45r 3  21 C4 C4 01  
004C5Er 3  C6 01 C3 FF          .byte 198,1,195,255,0,11,4,4,255,0,20,4,4,255,0,9,196,1,33,5,6,9,4,4,11,12,13,1,196,5,6,9,4,4
004C62r 3  00 0B 04 04  
004C66r 3  FF 00 14 04  
004C80r 3  0B 0C 0D 21          .byte 11,12,13,33,1,196,34,7,8,93,4,4,93,14,15,196,1,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8
004C84r 3  01 C4 22 07  
004C88r 3  08 5D 04 04  
004CA2r 3  04 04 FF 00          .byte 4,4,255,0,10,4,4,255,0,8,4,4,255,0,4,195,1,1,195,2,197,1,196,1,2,1,1,2,93,94,95,94,95
004CA6r 3  0A 04 04 FF  
004CAAr 3  00 08 04 04  
004CC3r 3  C5 01 01 C5          .byte 197,1,1,197,1,1,31,196,197,196,3,1,197,198,1,197,196,94,93,220,93,1,31,1,2,1,1,197,1,1,3,1,196,196
004CC7r 3  01 01 1F C4  
004CCBr 3  C5 C4 03 01  
004CE5r 3  01 01 01 C6          .byte 1,1,1,198,1,220,220,93,220,220,1,1,197,196,1,196,1,197,198,196,196,197,196,1,197,1,220,93,220,220,220,93,220
004CE9r 3  01 DC DC 5D  
004CEDr 3  DC DC 01 01  
004D06r 3  C4 01 C4             .byte 196,1,196
004D09r 3  01 C5 C5 01          .byte 1,197,197,1,196,1,31,1,1,1,25,26,1,196,1,31,1,196,195,2,196,198,198,1,196,195,1,1,1,197,197,1,2
004D0Dr 3  C4 01 1F 01  
004D11r 3  01 01 19 1A  
004D2Ar 3  C3 02 01 C5          .byte 195,2,1,197,197,1,2,1,196,1,1,255,0,44,33,5,6,9,4,4,11,12,13,33,2,198,197,33,5,6,9,4,4
004D2Er 3  C5 01 02 01  
004D32r 3  C4 01 01 FF  
004D4Br 3  0B 0C 0D 22          .byte 11,12,13,34,7,8,93,4,4,93,14,15,34,197,1,198,34,7,8,93,4,4,93,14,15,255,0,4,4,4,255,0,11
004D4Fr 3  07 08 5D 04  
004D53r 3  04 5D 0E 0F  
004D6Cr 3  04 04 FF 00          .byte 4,4,255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5,6,9,4,4,11,12,13,33,196,196
004D70r 3  07 04 04 FF  
004D74r 3  00 0B 04 04  
004D8Er 3  01 01 C4 C5          .byte 1,1,196,197,196,1,1,195,1,1,34,7,8,1,4,4,1,14,15,34,195,1,198,1,195,255,0,11,4,4,255,0,20
004D92r 3  C4 01 01 C3  
004D96r 3  01 01 22 07  
004DAFr 3  04 04 FF 00          .byte 4,4,255,0,9,196,1,33,5,6,9,4,4,11,12,13,197,198,5,6,9,4,4,11,12,13,33,1,196,34,7,8,93
004DB3r 3  09 C4 01 21  
004DB7r 3  05 06 09 04  
004DD0r 3  04 04 5D 0E          .byte 4,4,93,14,15,196,1,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8,4,4,255,0,10,4,4,255,0,8
004DD4r 3  0F C4 01 07  
004DD8r 3  08 5D 04 04  
004DF2r 3  04 04 FF 00          .byte 4,4,255,0,4,195,197,1,195,2,197,5,6,9,4,4,11,12,13,197,197,3,196,1,1,1,2,1,1,31,196,1,198
004DF6r 3  04 C3 C5 01  
004DFAr 3  C3 02 C5 05  
004E13r 3  07 08 DC 04          .byte 7,8,220,4,4,220,14,15,198,195,33,196,31,1,2,1,1,2,32,197,3,1,5,6,0,4,4,0,15,13,198,197,34
004E17r 3  04 DC 0E 0F  
004E1Br 3  C6 C3 21 C4  
004E34r 3  02 20 01 02          .byte 2,32,1,2,197,1,197,1,2,198,196,5,6,220,4,4,220,15,13,197,198,1,197,2,196,1,196
004E38r 3  C5 01 C5 01  
004E3Cr 3  02 C6 C4 05  
004E4Fr 3  01 01 1F 01          .byte 1,1,31,1,196,1,31,1,1,1,196,31,1,196,1,31,1,196,195,31,196,198,198,1,32,195,1,1,32,1,197,1,2
004E53r 3  C4 01 1F 01  
004E57r 3  01 01 C4 1F  
004E70r 3  20 02 01 01          .byte 32,2,1,1,32,1,2,1,32,1,1,255,0,21,197,255,0,21,198,33,5,6,9,4,4,11,12,13,33,1,195,1,33
004E74r 3  20 01 02 01  
004E78r 3  20 01 01 FF  
004E91r 3  05 06 09 04          .byte 5,6,9,4,4,11,12,13,34,7,8,196,4,4,196,14,15,34,1,1,1,34,7,8,196,4,4,196,14,15,255,0,4
004E95r 3  04 0B 0C 0D  
004E99r 3  22 07 08 C4  
004EB2r 3  04 04 FF 00          .byte 4,4,255,0,11,4,4,0,0,197,255,0,4,4,4,255,0,11,4,4,0,0,198,1,196,196,198,196,196,1,33,5,6
004EB6r 3  0B 04 04 00  
004EBAr 3  00 C5 FF 00  
004ED3r 3  09 04 04 0B          .byte 9,4,4,11,12,13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,196,4,4,196,14,15,34,195,1,198,1
004ED7r 3  0C 0D 21 C4  
004EDBr 3  C4 01 01 C4  
004EF4r 3  C3 FF 00 0B          .byte 195,255,0,11,4,4,255,0,8,198,255,0,11,4,4,255,0,8,197,196,1,33,5,6,9,4,4,11,12,13,1,196,5
004EF8r 3  04 04 FF 00  
004EFCr 3  08 C6 FF 00  
004F15r 3  06 09 04 04          .byte 6,9,4,4,11,12,13,33,1,196,34,7,8,196,4,4,196,14,15,25,26,7,8,196,4,4,196,12,15,34,255,0,6
004F19r 3  0B 0C 0D 21  
004F1Dr 3  01 C4 22 07  
004F36r 3  04 04 FF 00          .byte 4,4,255,0,8,4,4,0,0,0,198,255,0,6,4,4,255,0,8,4,4,0,0,0,197,195,1,1,195,2,197,1,196
004F3Ar 3  08 04 04 00  
004F3Er 3  00 00 C6 FF  
004F57r 3  01 02 01 01          .byte 1,2,1,1,2,196,1,196,1,196,1,1,1,2,1,1,3,3,197,196,3,1,196,198,1,3,196,1,1,198,196,197,3
004F5Br 3  02 C4 01 C4  
004F5Fr 3  01 C4 01 01  
004F78r 3  01 C5 01 01          .byte 1,197,1,1,2,31,1,3,1,196,196,1,197,1,31,1,2,197,3,2,2,31,1,2,196,1,196,32,2,198,196,197,1
004F7Cr 3  02 1F 01 03  
004F80r 3  01 C4 C4 01  
004F99r 3  C4 01 C4 20          .byte 196,1,196,32,195,2,1,196,198,197,32,196,1,196
004F9Dr 3  C3 02 01 C4  
004FA1r 3  C6 C5 20 C4  
004FA7r 3  01 01 C4 1F          .byte 1,1,196,31,196,1,196,1,1,1,196,195,1,196,1,198,1,196,195,31,197,198,198,1,196,32,255,1,4,197,1,2,195
004FABr 3  C4 01 C4 01  
004FAFr 3  01 01 C4 C3  
004FC8r 3  02 FF 01 04          .byte 2,255,1,4,2,1,32,1,1,255,0,44,33,5,6,9,4,4,11,12,13,33,1,31,1,33,5,6,9,4,4,11,12
004FCCr 3  02 01 20 01  
004FD0r 3  01 FF 00 2C  
004FE9r 3  0D 22 07 08          .byte 13,34,7,8,93,4,4,93,14,15,34,1,32,1,34,7,8,93,4,4,93,14,15,255,0,4,4,4,255,0,11,4,4
004FEDr 3  5D 04 04 5D  
004FF1r 3  0E 0F 22 01  
00500Ar 3  FF 00 07 04          .byte 255,0,7,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5,6,9,4,4,11,12,13,33,196,196,1,1
00500Er 3  04 FF 00 0B  
005012r 3  04 04 00 00  
00502Cr 3  C4 C5 C4 01          .byte 196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1,198,1,195,255,0,11,4,4,255,0,20,4,4
005030r 3  01 C3 01 01  
005034r 3  22 07 08 5D  
00504Dr 3  FF 00 09 C4          .byte 255,0,9,196,1,33,5,6,9,4,4,11,12,13,197,196,5,6,9,4,4,11,12,13,33,1,196,34,7,8,93,4,4
005051r 3  01 21 05 06  
005055r 3  09 04 04 0B  
00506Er 3  5D 0E 0F C4          .byte 93,14,15,196,198,7,8,93,4,4,93,12,15,34,255,0,6,4,4,255,0,8,4,4,255,0,10,4,4,255,0,8,4,4
005072r 3  C6 07 08 5D  
005076r 3  04 04 5D 0C  
005090r 3  FF 00 04 DA          .byte 255,0,4,218,93,218,218,197,197,1,196,1,2,1,1,2,196,1,196,1,196,1,1,1,2,93,218,220,220,93,197,3,1
005094r 3  5D DA DA C5  
005098r 3  C5 01 C4 01  
0050B1r 3  C4 C6 01 01          .byte 196,198,1,1,197,1,1,198,93,220,92,93,2,1,93,93,221,222,93,1,196,197,1,1,31,197,1,2,93,93,92,95,94
0050B5r 3  C5 01 01 C6  
0050B9r 3  5D DC 5C 5D  
0050D2r 3  5D 02 C4 DA          .byte 93,2,196,218,218,223,224,218,218,196,1,196,1,32,1,195,93,93,92,92,94,95,220,95,196
0050D6r 3  DA DF E0 DA  
0050DAr 3  DA C4 01 C4  
0050EBr 3  01 01 C4 1F          .byte 1,1,196,31,196,1,196,1,1,31,196,195,1,31,1,198,1,196,195,31,197,198,198,1,196,32,255,1,4,197,32,2,195
0050EFr 3  C4 01 C4 01  
0050F3r 3  01 1F C4 C3  
00510Cr 3  02 20 01 01          .byte 2,32,1,1,1,2,1,32,1,1,197,255,0,21,198,255,0,21,33,5,6,9,4,4,11,12,13,33,197,196,2,33,5
005110r 3  01 02 01 20  
005114r 3  01 01 C5 FF  
00512Dr 3  06 09 04 04          .byte 6,9,4,4,11,12,13,34,7,8,93,4,4,93,14,15,34,196,197,197,34,7,8,93,4,4,93,14,15,198,0,0,0
005131r 3  0B 0C 0D 22  
005135r 3  07 08 5D 04  
00514Er 3  04 04 FF 00          .byte 4,4,255,0,11,4,4,0,0,0,197,0,0,0,4,4,255,0,11,4,4,0,0,0,1,196,196,198,196,196,1,33,5
005152r 3  0B 04 04 00  
005156r 3  00 00 C5 00  
00516Fr 3  06 09 04 04          .byte 6,9,4,4,11,12,13,33,196,196,1,1,196,197,196,1,1,195,1,1,34,7,8,93,4,4,93,14,15,34,195,1,198
005173r 3  0B 0C 0D 21  
005177r 3  C4 C4 01 01  
005190r 3  01 C3 C5 FF          .byte 1,195,197,255,0,10,4,4,255,0,9,198,255,0,10,4,4,255,0,9,196,1,33,5,6,9,4,4,11,12,13,197,196
005194r 3  00 0A 04 04  
005198r 3  FF 00 09 C6  
0051B1r 3  05 06 09 04          .byte 5,6,9,4,4,11,12,13,33,1,196,34,7,8,93,4,4,93,14,15,196,198,7,8,93,4,4,93,12,15,34,198,255,0,5
0051B5r 3  04 0B 0C 0D  
0051B9r 3  21 01 C4 22  
0051D4r 3  04 04 FF 00          .byte 4,4,255,0,8,4,4,255,0,4,197,255,0,5,4,4,255,0,8,4,4,255,0,4,3,3,195,198,2,197,1,196,1
0051D8r 3  08 04 04 FF  
0051DCr 3  00 04 C5 FF  
0051F5r 3  02 01 01 02          .byte 2,1,1,2,196,1,196,1,196,1,1,1,2,197,198,3,2,3,196,3,3,196,198,1,1,196,197,1,198,198,198,197,3
0051F9r 3  C4 01 C4 01  
0051FDr 3  C4 01 01 01  
005216r 3  02 01 03 C5          .byte 2,1,3,197,197,198,198,1,196,31,1,197,1,3,1,31,195,197,198,195,196,31,2,196,198,3,198,197,195,198,196,32,196
00521Ar 3  C5 C6 C6 01  
00521Er 3  C4 1F 01 C5  
005237r 3  01 C4 01 C3          .byte 1,196,1,195,32,197,198,3,197,198,32,198,196
00523Br 3  20 C5 C6 03  
00523Fr 3  C5 C6 20 C6  
005244r 3  DA DA 5D DA          .byte 218,218,93,218,218,93,218,93,218,218,218,93,218,218,218,93,218,218,218,93,218,218,218,93,218,93,255,218,5,93,218,218,218
005248r 3  DA 5D DA 5D  
00524Cr 3  DA DA DA 5D  
005265r 3  5D DA DA DA          .byte 93,218,218,218,93,218,218,93,218,218,93,0,0,218,218,255,0,8,218,0,0,218,95,0,0,93,218,218,0,0,220,218,255,0,8
005269r 3  5D DA DA 5D  
00526Dr 3  DA DA 5D 00  
005288r 3  DC 00 00 DA          .byte 220,0,0,218,93,0,0,218,93,218,4,4,218,218,4,4,94,218,218,95,4,4,218,4,4,95,218,4,4,218,218,218,4,4
00528Cr 3  5D 00 00 DA  
005290r 3  5D DA 04 04  
0052AAr 3  5F 5F 04 04          .byte 95,95,4,4,218,209,210,211,4,4,220,4,4,218,95,4,4,93,218,93,4,4,0,0,4,4,218,212,213,214,4,4,0
0052AEr 3  DA D1 D2 D3  
0052B2r 3  04 04 DC 04  
0052CBr 3  04 04 00 00          .byte 4,4,0,0,4,4,218,218,218,4,4,0,0,4,4,95,215,216,217,4,4,0,4,4,0,0,4,4,218,93,218,4,4
0052CFr 3  04 04 DA DA  
0052D3r 3  DA 04 04 00  
0052ECr 3  DC DA 04 04          .byte 220,218,4,4,218,95,218,94,4,4,218,4,4,218,218,4,4,93,218,218,4,4,95,95,4,4,94,218,95,95,4,4,220
0052F0r 3  DA 5F DA 5E  
0052F4r 3  04 04 DA 04  
00530Dr 3  04 04 5F DA          .byte 4,4,95,218,4,4,218,218,93,4,4,0,0,4,4,255,0,4,4,4,93,4,4,93,218,4,4,218,218,218,4,4,0,0
005311r 3  04 04 DA DA  
005315r 3  5D 04 04 00  
00532Fr 3  04 04 FF 00          .byte 4,4,255,0,4,4,4,220,4,4,218,93,4,4,93,93,218,4,4,94,218,4,4,218,93,218,93,4,4,218,4,4,0,0
005333r 3  04 04 04 DC  
005337r 3  04 04 DA 5D  
005351r 3  04 04 DA DA          .byte 4,4,218,218,93,4,4,218,95,4,4,218,218,94,218,4,4,220,4,4,0,0,4,4,218,93,94,4,4,0,0,4,4
005355r 3  5D 04 04 DA  
005359r 3  5F 04 04 DA  
005372r 3  5E DA 5E DA          .byte 94,218,94,218,4,4,93,4,4,218,218,4,4,0,95,93,4,4,0,0,4,4,218,218,218,94,4,4,220,4,4,220,95
005376r 3  04 04 5D 04  
00537Ar 3  04 DA DA 04  
005393r 3  04 04 00 00          .byte 4,4,0,0,0,4,4,95,218,4,4,94,221,222,218,4,4,218,4,4,95,218,4,4,218,0,0,4,4,218,94,4,4
005397r 3  00 04 04 5F  
00539Br 3  DA 04 04 5E  
0053B4r 3  DA DF E0 5E          .byte 218,223,224,94,4,4,218,4,4,220,95,4,4,93,93,255,218,7,220,93,95,255,218,6,95,255,218,6,93,93,255,218,4
0053B8r 3  04 04 DA 04  
0053BCr 3  04 DC 5F 04  
0053D5r 3  5D DA DA DA          .byte 93,218,218,218,93,218,93,218,218,218,93,218,218,218
0053D9r 3  5D DA 5D DA  
0053DDr 3  DA DA 5D DA  
0053E3r 3  F9 FF EE 05          .byte 249,255,238,5,239,240,240,241,255,238,7,249,239,240,241,255,238,6,181,182,255,238,6,239,240,241,255,238,5,249,125,255,228,20
0053E7r 3  EF F0 F0 F1  
0053EBr 3  FF EE 07 F9  
005405r 3  96 7D FF E4          .byte 150,125,255,228,20,150,124,255,238,20,124,124,255,238,20,124,125,228,247,247,255,228,14,247,247,228,150,125,228,236,237,228,228,228
005409r 3  14 96 7C FF  
00540Dr 3  EE 14 7C 7C  
005427r 3  7E FF E4 06          .byte 126,255,228,6,127,228,228,228,236,237,228,150,124,238,242,243,255,238,7,251,238,238,128,238,238,238,242,243,238,124,124,238,244
00542Br 3  7F E4 E4 E4  
00542Fr 3  EC ED E4 96  
005448r 3  F5 FF EE 0E          .byte 245,255,238,14,244,245,238,124,125,228,228,133,228,228,247,247,228,228,127,228,228,247,247,228,228,126,228,228,228,150,125,255,228,5
00544Cr 3  F4 F5 EE 7C  
005450r 3  7D E4 E4 85  
00546Ar 3  EC ED FF E4          .byte 236,237,255,228,5,236,237,255,228,6,150,124,255,238,5,242,243,255,238,5,242,243,255,238,6,124,124,255,238,5,244,245,255,238,5
00546Er 3  05 EC ED FF  
005472r 3  E4 06 96 7C  
00548Dr 3  F4 F5 FF EE          .byte 244,245,255,238,6,124,125,228,228,247,247,255,228,11,247,247,228,228,228,150,125,228,228,236,237,255,228,11,236,237,228,228,228
005491r 3  06 7C 7D E4  
005495r 3  E4 F7 F7 FF  
0054AEr 3  96 7C EE EE          .byte 150,124,238,238,242,243,255,238,11,242,243,238,238,238,124,124,238,238,244,245,255,238,8,252,238,238,244,245,238,238,238,124,125
0054B2r 3  F2 F3 FF EE  
0054B6r 3  0B F2 F3 EE  
0054CFr 3  FF E4 14 96          .byte 255,228,20,150,125,228,228,126,228,228,228,126,255,228,6,126,255,228,6,150
0054D3r 3  7D E4 E4 7E  
0054D7r 3  E4 E4 E4 7E  
0054E3r 3               numsc:
0054E3r 3  20                   .byte 32
0054E4r 3               nmedat:
0054E4r 3  00 01 90 90          .byte 0,1,144,144,255
0054E8r 3  FF           
0054E9r 3  02 0C 20 98          .byte 2,12,32,152,0,0,144,40,255
0054EDr 3  00 00 90 28  
0054F1r 3  FF           
0054F2r 3  01 11 70 50          .byte 1,17,112,80,1,17,144,48,0,1,144,88,255
0054F6r 3  01 11 90 30  
0054FAr 3  00 01 90 58  
0054FFr 3  01 10 80 50          .byte 1,16,128,80,1,16,64,16,0,1,128,152,255
005503r 3  01 10 40 10  
005507r 3  00 01 80 98  
00550Cr 3  03 0E 40 40          .byte 3,14,64,64,1,4,32,136,1,17,144,56,4,5,56,96,0,1,144,144,255
005510r 3  01 04 20 88  
005514r 3  01 11 90 38  
005521r 3  01 10 80 48          .byte 1,16,128,72,1,16,32,112,2,14,96,144,0,1,128,152,255
005525r 3  01 10 20 70  
005529r 3  02 0E 60 90  
005532r 3  02 0D 30 10          .byte 2,13,48,16,2,10,96,120,0,1,144,144,255
005536r 3  02 0A 60 78  
00553Ar 3  00 01 90 90  
00553Fr 3  02 0A 30 78          .byte 2,10,48,120,2,12,96,72,0,1,144,152,255
005543r 3  02 0C 60 48  
005547r 3  00 01 90 98  
00554Cr 3  02 0C 30 28          .byte 2,12,48,40,2,11,96,88,0,0,144,16,255
005550r 3  02 0B 60 58  
005554r 3  00 00 90 10  
005559r 3  02 0C 60 60          .byte 2,12,96,96,0,0,144,16,255
00555Dr 3  00 00 90 10  
005561r 3  FF           
005562r 3  02 0B 60 28          .byte 2,11,96,40,0,1,144,96,255
005566r 3  00 01 90 60  
00556Ar 3  FF           
00556Br 3  01 11 60 40          .byte 1,17,96,64,0,1,144,136,255
00556Fr 3  00 01 90 88  
005573r 3  FF           
005574r 3  01 11 50 48          .byte 1,17,80,72,1,9,112,120,0,0,80,152,255
005578r 3  01 09 70 78  
00557Cr 3  00 00 50 98  
005581r 3  02 0E 20 90          .byte 2,14,32,144,2,15,80,72,1,16,112,144,1,16,144,80,0,0,32,8,255
005585r 3  02 0F 50 48  
005589r 3  01 10 70 90  
005596r 3  01 04 70 98          .byte 1,4,112,152,1,17,144,40,0,1,32,160,255
00559Ar 3  01 11 90 28  
00559Er 3  00 01 20 A0  
0055A3r 3  01 10 90 08          .byte 1,16,144,8,1,16,128,96,1,16,112,56,1,16,64,136,0,0,32,8,255
0055A7r 3  01 10 80 60  
0055ABr 3  01 10 70 38  
0055B8r 3  02 0F 60 20          .byte 2,15,96,32,1,17,144,64,0,0,32,8,255
0055BCr 3  01 11 90 40  
0055C0r 3  00 00 20 08  
0055C5r 3  01 04 30 20          .byte 1,4,48,32,1,17,48,96,0,1,32,160,255
0055C9r 3  01 11 30 60  
0055CDr 3  00 01 20 A0  
0055D2r 3  04 07 90 10          .byte 4,7,144,16,3,15,144,48,1,17,144,104,1,17,80,128,0,0,32,0,255
0055D6r 3  03 0F 90 30  
0055DAr 3  01 11 90 68  
0055E7r 3  02 0F 40 18          .byte 2,15,64,24,1,16,96,72,0,1,144,152,255
0055EBr 3  01 10 60 48  
0055EFr 3  00 01 90 98  
0055F4r 3  01 09 30 18          .byte 1,9,48,24,1,17,96,112,0,1,144,120,255
0055F8r 3  01 11 60 70  
0055FCr 3  00 01 90 78  
005601r 3  02 0A 20 78          .byte 2,10,32,120,2,13,96,56,0,0,144,8,255
005605r 3  02 0D 60 38  
005609r 3  00 00 90 08  
00560Er 3  02 0C 30 48          .byte 2,12,48,72,2,11,112,72,0,0,112,160,255
005612r 3  02 0B 70 48  
005616r 3  00 00 70 A0  
00561Br 3  02 0A 70 68          .byte 2,10,112,104,0,0,112,56,255
00561Fr 3  00 00 70 38  
005623r 3  FF           
005624r 3  02 0D 70 50          .byte 2,13,112,80,0,0,112,8,255
005628r 3  00 00 70 08  
00562Cr 3  FF           
00562Dr 3  01 10 40 70          .byte 1,16,64,112,1,9,96,24,0,1,128,160,255
005631r 3  01 09 60 18  
005635r 3  00 01 80 A0  
00563Ar 3  01 10 40 40          .byte 1,16,64,64,1,17,128,112,0,1,128,152,255
00563Er 3  01 11 80 70  
005642r 3  00 01 80 98  
005647r 3  01 10 40 48          .byte 1,16,64,72,1,16,128,112,0,0,128,8,255
00564Br 3  01 10 80 70  
00564Fr 3  00 00 80 08  
005654r 3  01 10 20 78          .byte 1,16,32,120,1,16,128,80,0,1,128,160,255
005658r 3  01 10 80 50  
00565Cr 3  00 01 80 A0  
005661r 3  01 10 40 48          .byte 1,16,64,72,1,17,128,96,0,1,128,160,255
005665r 3  01 11 80 60  
005669r 3  00 01 80 A0  
00566Er 3  01 10 20 48          .byte 1,16,32,72,1,16,96,64,1,17,64,112,0,1,152,152,255
005672r 3  01 10 60 40  
005676r 3  01 11 40 70  
00567Fr 3  04 08 10 18          .byte 4,8,16,24,4,6,16,80,1,17,112,128,1,17,80,104,1,17,144,144,0,0,144,8,255
005683r 3  04 06 10 50  
005687r 3  01 11 70 80  
005698r 3               NUMOBJ = 8
005698r 3               objdta:
005698r 3  07 E0 18 18          .byte 7,224,24,24,39,228,76,18,75,226,143,17,146,233,151,153,191,97,158,145,135,201,94,30,77,226,37,244,25,248,7,224,1,20,128,8,20,128,8
00569Cr 3  27 E4 4C 12  
0056A0r 3  4B E2 8F 11  
0056BFr 3  00 00 00 00          .byte 0,0,0,0,0,0,80,0,32,10,80,4,136,14,232,29,244,29,246,29,123,251,124,6,63,254,31,252,15,248,0,0,1,8,48,144,8,48,144
0056C3r 3  00 00 50 00  
0056C7r 3  20 0A 50 04  
0056E6r 3  07 F0 0F 18          .byte 7,240,15,24,28,108,24,246,56,58,49,218,115,238,115,234,96,238,112,108,32,120,4,80,46,176,23,224,31,192,15,128,1,23,48,112,23,48,112
0056EAr 3  1C 6C 18 F6  
0056EEr 3  38 3A 31 DA  
00570Dr 3  00 F0 01 88          .byte 0,240,1,136,2,136,4,80,8,76,24,34,55,209,106,239,245,111,158,255,103,248,25,232,23,136,16,136,0,128,0,128,1,0,112,144,0,112,144
005711r 3  02 88 04 50  
005715r 3  08 4C 18 22  
005734r 3  00 04 00 86          .byte 0,4,0,134,1,70,0,133,0,157,0,156,1,64,2,32,2,32,4,144,8,136,9,8,31,224,2,0,0,0,0,0,1,22,48,16,22,48,16
005738r 3  01 46 00 85  
00573Cr 3  00 9D 00 9C  
00575Br 3  00 00 02 00          .byte 0,0,2,0,2,0,7,0,2,0,2,6,7,6,15,134,21,198,21,198,15,134,31,198,56,230,63,230,31,192,15,128,1,13,80,152,13,80,152
00575Fr 3  02 00 07 00  
005763r 3  02 00 02 06  
005782r 3  00 3C 00 76          .byte 0,60,0,118,56,242,95,211,215,81,245,81,117,81,53,81,53,81,29,81,29,83,15,82,15,86,7,220,7,190,3,27,1,3,128,8,3,128,8
005786r 3  38 F2 5F D3  
00578Ar 3  D7 51 F5 51  
0057A9r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,1,0,3,128,15,255,255,154,175,42,147,47,209,58,176,31,224,0,0,0,0,0,0,0,0,1,19,64,160,19,64,160
0057ADr 3  00 00 00 01  
0057B1r 3  00 03 80 0F  
0057D0r 3               font:
0057D0r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
0057D4r 3  00 00 00 00  
0057D8r 3  06 0C 0C 18          .byte 6,12,12,24,24,0,48,0
0057DCr 3  18 00 30 00  
0057E0r 3  66 44 88 00          .byte 102,68,136,0,0,0,0,0
0057E4r 3  00 00 00 00  
0057E8r 3  13 36 7E 24          .byte 19,54,126,36,126,108,200,0
0057ECr 3  7E 6C C8 00  
0057F0r 3  04 1E 34 1E          .byte 4,30,52,30,106,124,16,0
0057F4r 3  6A 7C 10 00  
0057F8r 3  62 64 08 18          .byte 98,100,8,24,48,102,102,0
0057FCr 3  30 66 66 00  
005800r 3  1E 36 30 3A          .byte 30,54,48,58,108,204,126,0
005804r 3  6C CC 7E 00  
005808r 3  0C 08 10 00          .byte 12,8,16,0,0,0,0,0
00580Cr 3  00 00 00 00  
005810r 3  0E 38 30 60          .byte 14,56,48,96,96,96,56,0
005814r 3  60 60 38 00  
005818r 3  1C 06 06 06          .byte 28,6,6,6,12,28,112,0
00581Cr 3  0C 1C 70 00  
005820r 3  08 08 36 1C          .byte 8,8,54,28,56,108,16,16
005824r 3  38 6C 10 10  
005828r 3  00 18 18 7C          .byte 0,24,24,124,48,48,0,0
00582Cr 3  30 30 00 00  
005830r 3  00 00 00 00          .byte 0,0,0,0,0,24,16,32
005834r 3  00 18 10 20  
005838r 3  00 00 00 7C          .byte 0,0,0,124,0,0,0,0
00583Cr 3  00 00 00 00  
005840r 3  00 00 00 00          .byte 0,0,0,0,0,24,24,0
005844r 3  00 18 18 00  
005848r 3  02 04 08 18          .byte 2,4,8,24,48,96,96,0
00584Cr 3  30 60 60 00  
005850r 3  0C 36 66 66          .byte 12,54,102,102,198,228,120,0
005854r 3  C6 E4 78 00  
005858r 3  04 0C 38 18          .byte 4,12,56,24,48,48,112,0
00585Cr 3  30 30 70 00  
005860r 3  1C 36 46 0C          .byte 28,54,70,12,48,98,252,0
005864r 3  30 62 FC 00  
005868r 3  1E 36 04 38          .byte 30,54,4,56,12,204,248,0
00586Cr 3  0C CC F8 00  
005870r 3  0C 18 34 6C          .byte 12,24,52,108,254,24,48,0
005874r 3  FE 18 30 00  
005878r 3  1E 32 78 1C          .byte 30,50,120,28,12,204,248,0
00587Cr 3  0C CC F8 00  
005880r 3  0E 36 60 7C          .byte 14,54,96,124,198,204,120,0
005884r 3  C6 CC 78 00  
005888r 3  3E 46 0C 3C          .byte 62,70,12,60,24,48,112,0
00588Cr 3  18 30 70 00  
005890r 3  1C 26 34 38          .byte 28,38,52,56,76,204,120,0
005894r 3  4C CC 78 00  
005898r 3  1E 33 66 36          .byte 30,51,102,54,12,12,28,0
00589Cr 3  0C 0C 1C 00  
0058A0r 3  00 18 18 00          .byte 0,24,24,0,48,48,0,0
0058A4r 3  30 30 00 00  
0058A8r 3  00 0C 0C 00          .byte 0,12,12,0,24,16,32,0
0058ACr 3  18 10 20 00  
0058B0r 3  06 0C 18 30          .byte 6,12,24,48,24,12,12,0
0058B4r 3  18 0C 0C 00  
0058B8r 3  00 00 3E 00          .byte 0,0,62,0,124,0,0,0
0058BCr 3  7C 00 00 00  
0058C0r 3  30 30 18 0C          .byte 48,48,24,12,24,48,96,0
0058C4r 3  18 30 60 00  
0058C8r 3  3C 66 0C 18          .byte 60,102,12,24,0,48,48,0
0058CCr 3  00 30 30 00  
0058D0r 3  1C 36 6E 6A          .byte 28,54,110,106,220,224,124,0
0058D4r 3  DC E0 7C 00  
0058D8r 3  07 1A 36 66          .byte 7,26,54,102,124,204,206,0
0058DCr 3  7C CC CE 00  
0058E0r 3  3E 1B 32 3C          .byte 62,27,50,60,102,102,252,0
0058E4r 3  66 66 FC 00  
0058E8r 3  0E 36 20 60          .byte 14,54,32,96,192,196,120,0
0058ECr 3  C0 C4 78 00  
0058F0r 3  1E 1B 1B 33          .byte 30,27,27,51,51,102,252,0
0058F4r 3  33 66 FC 00  
0058F8r 3  1E 36 20 78          .byte 30,54,32,120,192,196,248,0
0058FCr 3  C0 C4 F8 00  
005900r 3  1E 36 20 78          .byte 30,54,32,120,192,192,224,0
005904r 3  C0 C0 E0 00  
005908r 3  0E 36 20 6E          .byte 14,54,32,110,198,204,118,0
00590Cr 3  C6 CC 76 00  
005910r 3  11 33 66 7E          .byte 17,51,102,126,204,204,204,0
005914r 3  CC CC CC 00  
005918r 3  1E 0C 18 18          .byte 30,12,24,24,48,48,120,0
00591Cr 3  30 30 78 00  
005920r 3  07 03 03 06          .byte 7,3,3,6,6,108,112,0
005924r 3  06 6C 70 00  
005928r 3  12 36 6C 78          .byte 18,54,108,120,216,204,238,0
00592Cr 3  D8 CC EE 00  
005930r 3  38 18 30 30          .byte 56,24,48,48,96,102,254,0
005934r 3  60 66 FE 00  
005938r 3  11 37 7E 66          .byte 17,55,126,102,204,204,204,0
00593Cr 3  CC CC CC 00  
005940r 3  11 33 76 76          .byte 17,51,118,118,220,204,236,0
005944r 3  DC CC EC 00  
005948r 3  1C 26 66 66          .byte 28,38,102,102,204,204,120,0
00594Cr 3  CC CC 78 00  
005950r 3  7C 36 36 64          .byte 124,54,54,100,120,192,224,0
005954r 3  78 C0 E0 00  
005958r 3  0C 36 66 66          .byte 12,54,102,102,220,204,118,6
00595Cr 3  DC CC 76 06  
005960r 3  7C 36 36 66          .byte 124,54,54,102,120,216,206,0
005964r 3  78 D8 CE 00  
005968r 3  07 1B 30 1C          .byte 7,27,48,28,70,198,124,0
00596Cr 3  46 C6 7C 00  
005970r 3  3F 4D 18 18          .byte 63,77,24,24,48,48,48,0
005974r 3  30 30 30 00  
005978r 3  77 66 66 CC          .byte 119,102,102,204,204,216,112,0
00597Cr 3  CC D8 70 00  
005980r 3  66 E6 64 6C          .byte 102,230,100,108,104,112,96,0
005984r 3  68 70 60 00  
005988r 3  11 73 6B 6B          .byte 17,115,107,107,218,254,220,0
00598Cr 3  DA FE DC 00  
005990r 3  66 66 6C 38          .byte 102,102,108,56,108,204,204,0
005994r 3  6C CC CC 00  
005998r 3  66 66 6C 38          .byte 102,102,108,56,24,48,112,0
00599Cr 3  18 30 70 00  
0059A0r 3  3E 26 0C 18          .byte 62,38,12,24,32,100,248,0
0059A4r 3  20 64 F8 00  
0059A8r 3  1E 18 30 30          .byte 30,24,48,48,96,96,120,0
0059ACr 3  60 60 78 00  
0059B0r 3  20 30 18 18          .byte 32,48,24,24,12,12,12,0
0059B4r 3  0C 0C 0C 00  
0059B8r 3  1E 06 06 0C          .byte 30,6,6,12,12,24,120,0
0059BCr 3  0C 18 78 00  
0059C0r 3  04 1C 7E 18          .byte 4,28,126,24,48,48,48,0
0059C4r 3  30 30 30 00  
0059C8r 3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
0059CCr 3  00 00 00 FF  
0059D0r 3  07 1B 10 7C          .byte 7,27,16,124,96,102,252,0
0059D4r 3  60 66 FC 00  
0059D8r 3  00 00 0E 36          .byte 0,0,14,54,102,220,238,0
0059DCr 3  66 DC EE 00  
0059E0r 3  70 30 6C 76          .byte 112,48,108,118,102,204,248,0
0059E4r 3  66 CC F8 00  
0059E8r 3  00 00 0E 36          .byte 0,0,14,54,96,98,60,0
0059ECr 3  60 62 3C 00  
0059F0r 3  03 03 36 6E          .byte 3,3,54,110,204,204,126,0
0059F4r 3  CC CC 7E 00  
0059F8r 3  00 00 0C 36          .byte 0,0,12,54,102,104,62,0
0059FCr 3  66 68 3E 00  
005A00r 3  00 07 1B 30          .byte 0,7,27,48,60,96,96,192
005A04r 3  3C 60 60 C0  
005A08r 3  00 00 3E 66          .byte 0,0,62,102,204,124,24,240
005A0Cr 3  CC 7C 18 F0  
005A10r 3  30 30 6E 76          .byte 48,48,110,118,102,204,204,0
005A14r 3  66 CC CC 00  
005A18r 3  06 00 0C 38          .byte 6,0,12,56,24,48,56,0
005A1Cr 3  18 30 38 00  
005A20r 3  03 00 0E 06          .byte 3,0,14,6,12,12,24,112
005A24r 3  0C 0C 18 70  
005A28r 3  10 70 62 6C          .byte 16,112,98,108,120,216,204,0
005A2Cr 3  78 D8 CC 00  
005A30r 3  06 1C 18 18          .byte 6,28,24,24,48,48,56,0
005A34r 3  30 30 38 00  
005A38r 3  00 00 37 6B          .byte 0,0,55,107,107,214,198,0
005A3Cr 3  6B D6 C6 00  
005A40r 3  00 00 6E 76          .byte 0,0,110,118,102,204,204,0
005A44r 3  66 CC CC 00  
005A48r 3  00 00 0C 36          .byte 0,0,12,54,102,102,60,0
005A4Cr 3  66 66 3C 00  
005A50r 3  00 00 3E 36          .byte 0,0,62,54,102,108,208,192
005A54r 3  66 6C D0 C0  
005A58r 3  00 00 0E 36          .byte 0,0,14,54,102,220,236,12
005A5Cr 3  66 DC EC 0C  
005A60r 3  00 00 2E 76          .byte 0,0,46,118,96,192,192,0
005A64r 3  60 C0 C0 00  
005A68r 3  00 00 1E 30          .byte 0,0,30,48,30,102,124,0
005A6Cr 3  1E 66 7C 00  
005A70r 3  06 0C 7F 18          .byte 6,12,127,24,48,48,60,0
005A74r 3  30 30 3C 00  
005A78r 3  00 00 1B 33          .byte 0,0,27,51,102,110,118,0
005A7Cr 3  66 6E 76 00  
005A80r 3  00 00 66 6C          .byte 0,0,102,108,104,112,96,0
005A84r 3  68 70 60 00  
005A88r 3  00 00 21 6B          .byte 0,0,33,107,214,214,236,0
005A8Cr 3  D6 D6 EC 00  
005A90r 3  00 00 66 34          .byte 0,0,102,52,56,88,204,0
005A94r 3  38 58 CC 00  
005A98r 3  00 00 26 6C          .byte 0,0,38,108,120,48,96,96
005A9Cr 3  78 30 60 60  
005AA0r 3  00 00 1E 2C          .byte 0,0,30,44,24,50,126,0
005AA4r 3  18 32 7E 00  
005AA8r 3  0F 0C 0C 70          .byte 15,12,12,112,24,48,60,0
005AACr 3  18 30 3C 00  
005AB0r 3  04 0C 18 18          .byte 4,12,24,24,24,48,48,0
005AB4r 3  18 30 30 00  
005AB8r 3  1E 06 0C 07          .byte 30,6,12,7,24,24,120,0
005ABCr 3  18 18 78 00  
005AC0r 3  32 3E 4C 00          .byte 50,62,76,0,0,0,0,0
005AC4r 3  00 00 00 00  
005AC8r 3  0F 31 6F 69          .byte 15,49,111,105,221,195,126,0
005ACCr 3  DD C3 7E 00  
005AD0r 3               jtab:
005AD0r 3  63                   .byte 99
005AD1r 3  65 14 51 10  keys:   .byte 101,20,81,16,48,35,83,112,0,113,1
005AD5r 3  30 23 53 70  
005AD9r 3  00 71 01     
005ADCr 3               
005ADCr 2               
005ADCr 1               	.include "lib.inc"
005ADCr 2               ;----------------------------------------------------------------------
005ADCr 2               ; VIC20 Platform Specific functions
005ADCr 2               ;----------------------------------------------------------------------
005ADCr 2               
005ADCr 2               ;============================================================
005ADCr 2               ; PLATFORM VARIABLES
005ADCr 2               ;============================================================
005ADCr 2               ;
005ADCr 2               ; Memory map:
005ADCr 2               ;
005ADCr 2               ;	$0000-$01ff	 0.5kB	CPU WS
005ADCr 2               ;	$0200-$03ff	 0.5kB	VIDEO RAM
005ADCr 2               ;	$0400-$0fff	 3,0kB	RAM
005ADCr 2               ;	$1000-$1fff	 4,0kB	CHAR RAM
005ADCr 2               ;	$2000-$7fff	24,0kB	RAM
005ADCr 2               ;	$8000-$8fff	 4,0kB	CHAR ROM
005ADCr 2               ;	$9000-$93ff	 1,0kB	VIC VIA's
005ADCr 2               ;	$9600-$97ff	 1,0kB	COLOUR RAM
005ADCr 2               ;	$9800-$9fff	 2,0kB	I/O
005ADCr 2               ;	$a000-$bfff	 8,0kB	RAM
005ADCr 2               ;	$c000-$dfff	 8,0kB	BASIC ROM
005ADCr 2               ;	$e000-$ffff	 8,0kB	KERNAL ROM
005ADCr 2               ;
005ADCr 2               ; Keyboard matrix:
005ADCr 2               ;                          	  $9121
005ADCr 2               ;          $9120	b7  b6  b5  b4  b3  b2  b1  b0
005ADCr 2               ; 	127-0111 1111 	F7  Hom  -   0   8   6   4   2
005ADCr 2               ;               ASCII   ??  ??  45  48  56  54  52  50
005ADCr 2               ;                 VIC   07  06  05  04  03  02  01  00
005ADCr 2               ;
005ADCr 2               ; 	191-1011 1111 	F5       @   O   U   T   E   Q
005ADCr 2               ;               ASCII   ??  ??  64  79  85  84  69  81
005ADCr 2               ;                 VIC   17  16  15  14  13  12  11  10
005ADCr 2               ;
005ADCr 2               ; 	223-1101 1111 	F3   =   :   K   H   F   S  Com
005ADCr 2               ;               ASCII   ??  61  58  75  72  70  83  ??
005ADCr 2               ;                 VIC   27  26  25  24  23  22  21  20
005ADCr 2               ;
005ADCr 2               ; 	239-1110 1111 	F1  RSh  .   M   B   C   Z  Spc
005ADCr 2               ;               ASCII   ??  ??  46  77  66  67  90  32
005ADCr 2               ;                 VIC   37  36  35  34  33  32  31  30
005ADCr 2               ;
005ADCr 2               ; 	247-1111 0111	Cur  /   ,   N   V   X  LSh Run
005ADCr 2               ;               ASCII   ??  47  44  78  86  88  ??  ??
005ADCr 2               ;                 VIC   47  46  45  44  43  42  41  40
005ADCr 2               ;
005ADCr 2               ; 	251-1111 1011	Cur  ;   L   J   G   D   A  Ctr
005ADCr 2               ;               ASCII   ??  59  76  74  71  68  65  ??
005ADCr 2               ;                 VIC   57  56  55  54  53  52  51  50
005ADCr 2               ;
005ADCr 2               ; 	253-1111 1101	Ret  *   P   I   Y   R   W
005ADCr 2               ;               ASCII   13  42  80  73  89  82  87
005ADCr 2               ;                 VIC   67  66  65  64  63  62  61  60
005ADCr 2               ;
005ADCr 2               ; 	254-1111 1110	Del Pnd  +   9   7   5   3   1
005ADCr 2               ;               ASCII   08  ??  43  57  55  53  51  49
005ADCr 2               ;                 VIC   77  76  75  74  73  72  71  70
005ADCr 2               ;
005ADCr 2               ;	 P =$65,O=$14,A=$51,Q=$10
005ADCr 2               ;	SPC=$30,N=$44,M=$34
005ADCr 2               ;	 1 =$70,2=$00,3=$71,4=$01
005ADCr 2               ;
005ADCr 2               ; Joysticks:
005ADCr 2               ;
005ADCr 2               ;               b7    b6    b5    b4    b3    b2    b1    b0
005ADCr 2               ;	$9111	-     -     Fire  Left  Down  Up    -     -
005ADCr 2               ;	$9120	Right -     -     -     -     -     -     -
005ADCr 2               ;
005ADCr 2               ;	$9122	DDRB = Data Direction Register port $9120
005ADCr 2               ;               0 = input, 1 = output
005ADCr 2               ;		Bit7 should be 0 to read joystick $9120
005ADCr 2               ;
005ADCr 2               ; Video registers:
005ADCr 2               ;
005ADCr 2               ;	$9000	horizontal centering
005ADCr 2               ;		bits 0-6 horizontal centering
005ADCr 2               ;		bit  7 sets interlace scan
005ADCr 2               ;	$9001	vertical centering
005ADCr 2               ;	$9002	set # of columns
005ADCr 2               ;		bits 0-6 set # of columns
005ADCr 2               ;		bit 7 is part of video matrix address
005ADCr 2               ;	$9003	set # of rows
005ADCr 2               ;		bit 0 sets 8x8 or 16x8 chars
005ADCr 2               ;		bits 1-6 set # of rows
005ADCr 2               ;	$9005	start of character memory
005ADCr 2               ;		bits 0-3 start of character memory (default = 0)
005ADCr 2               ;		bits 4-7 is rest of video address (default= F)
005ADCr 2               ;		BITS 3,2,1,0 CM startinq address
005ADCr 2               ;			     HEX   DEC
005ADCr 2               ;		0000   ROM   8000  32768
005ADCr 2               ;		0001	     8400  33792
005ADCr 2               ;		0010	     8800  34816
005ADCr 2               ;		0011	     8C00  35840
005ADCr 2               ;		1000   RAM   0000  0000
005ADCr 2               ;		1001  xxxx
005ADCr 2               ;		1010  xxxx   unavail.
005ADCr 2               ;		1011  xxxx
005ADCr 2               ;		1100	     1000  4096
005ADCr 2               ;		1101	     1400  5120
005ADCr 2               ;		1110	     1800  6144
005ADCr 2               ;		1111	     1C00  7168
005ADCr 2               ;	$900f	Screen and border color register
005ADCr 2               ;		bits 4-7 select background color
005ADCr 2               ;		bits 0-2 select border color
005ADCr 2               ;		bit 3 selects inverted or normal mode
005ADCr 2               ;
005ADCr 2               ; $9110-$911F 6522 VIA#1
005ADCr 2               ; $9120-$912F 6522 VIA#2
005ADCr 2               ;
005ADCr 2               ;	$9110,$9120 	Port B output register
005ADCr 2               ;	$9111,$9121 	Port A output register
005ADCr 2               ;			(PA0) Bit 0=Serial CLK IN
005ADCr 2               ;			(PA1) Bit 1=Serial DATA IN
005ADCr 2               ;			(PA2) Bit 2=Joy 0
005ADCr 2               ;			(PA3) Bit 3=Joy 1
005ADCr 2               ;			(PA4) Bit 4=Joy 2
005ADCr 2               ;			(PA5) Bit 5 = Lightpen/Fire button
005ADCr 2               ;			(PA6) Bit 6=Cassette switch sense
005ADCr 2               ;			(PA7) Bit 7=Serial ATN out
005ADCr 2               ;	$9112,$9122	Data direction register B
005ADCr 2               ;	$9113,$9123	Data direction register A
005ADCr 2               ;	$9114,$9124	Timer 1 low byte
005ADCr 2               ;	$9115,$9125	Timer 1 high byte & counter
005ADCr 2               ;	$9116,$9126	Timer 1 low byte
005ADCr 2               ;	$9117,$9127	Timer 1 high byte
005ADCr 2               ;	$9118,$9128	Timer 2 low byte
005ADCr 2               ;	$9119,$9129	Timer 2 high byte
005ADCr 2               ;	$911A,$912A	Shift register
005ADCr 2               ;	$911B,$912B	Auxiliary control register
005ADCr 2               ;	$911C,$912C	Peripheral control register
005ADCr 2               ;			(CA1, CA2, CB1, CB2)
005ADCr 2               ;			CA1 = restore key (Bit 0)
005ADCr 2               ;			CA2 = cassette motor control (Bits 1-3)
005ADCr 2               ;			CB1 = interrupt signal for received
005ADCr 2               ;			RS-232 data (Bit 4)
005ADCr 2               ;			CB2=transmitted RS-232 data (Bits 5-7)
005ADCr 2               ;	$911D,$912D	Interrupt flag register
005ADCr 2               ;	$911E,$912E	Interrupt enable register
005ADCr 2               ;	$911F,$912F	Port A (Sense cassette switch)
005ADCr 2               
005ADCr 2               ; VIC constants
005ADCr 2               
005ADCr 2               ;	scrchar 	= 22				; char/line
005ADCr 2               ;	scrline		= 22				; lines/screen
005ADCr 2               	ScreenSize	= ScrWidth * ScrHeight * 8	; Screen size bytes
005ADCr 2               	ScreenRowBytes	= ScrWidth * 16			; bytes/line
005ADCr 2               	SpriteMaxY	= 161				; maxlines - 16 + 1
005ADCr 2               	timerint	= 20000				; Interrupt timer 1/50 sec
005ADCr 2               
005ADCr 2               ; VIC variables:
005ADCr 2               
005ADCr 2  00           	fontcol:	.byte 0		; Frontcolour text
005ADDr 2               
005ADDr 2               ; Addresses
005ADDr 2               
005ADDr 2               	MapAddr		= $400		; RAM
005ADDr 2               	ScreenAddr	= $0200		; VIDEO RAM
005ADDr 2               	CharAddress	= $1000		; CHAR RAM
005ADDr 2               	Reg0		= $9000		; Horizontal centering
005ADDr 2               	Reg1		= $9001		; Vertical centering
005ADDr 2               	Reg2		= $9002		; Set # of columns
005ADDr 2               	Reg3		= $9003		; Set # of rows
005ADDr 2               	Reg4		= $9004		; Vsync signal
005ADDr 2               	Reg5		= $9005		; Start of character memory
005ADDr 2               	RegE		= $900e		; Colour and auxcolour register
005ADDr 2               	RegF		= $900f		; Screen and border color register
005ADDr 2               
005ADDr 2               	JoyAddr1	= $9111		; Joystick address 1
005ADDr 2               	Timer11_Low  	= $9114		; Timer 1 low byte
005ADDr 2               	Timer11_High 	= $9115		; Timer 1 high byte
005ADDr 2               	Timer12_Low  	= $9118		; Timer 2 low byte
005ADDr 2               	Timer12_High 	= $9119		; Timer 2 high byte
005ADDr 2               	AUX1		= $911b		; Auxiliary control register
005ADDr 2               	IFR1		= $911d		; Interrupt Flag Register
005ADDr 2               	IER1		= $911e		; Interrupt Enable Register
005ADDr 2               
005ADDr 2               	KeyColAddr	= $9120		; Keyboard column (write)
005ADDr 2               	JoyAddr2	= $9120		; Joystick address 2
005ADDr 2               	KeyRowAddr	= $9121		; Keyboard row (read)
005ADDr 2               	DDRB		= $9122		; Bit7 must be 0 for joystick read
005ADDr 2               	Timer21_Low  	= $9124		; Timer 1 low byte
005ADDr 2               	Timer21_High 	= $9125		; Timer 1 high byte
005ADDr 2               	AUX2		= $912b		; Auxiliary control register
005ADDr 2               	IFR2		= $912d		; Interrupt Flag Register
005ADDr 2               	IER2		= $912e		; Interrupt Enable Register
005ADDr 2               
005ADDr 2               	ColorAttr	= $9600		; Color attributes
005ADDr 2               	HiRAM		= $a000		; Hi RAM 8kB
005ADDr 2               
005ADDr 2               ;----------------------------------------------------------------------
005ADDr 2               ; VIC20 video hardware fns
005ADDr 2               ;----------------------------------------------------------------------
005ADDr 2               
005ADDr 2               init:
005ADDr 2               
005ADDr 2               ; Disable interrupts
005ADDr 2               
005ADDr 2  A9 7F        	lda #$7f
005ADFr 2  8D 1E 91     	sta $911e
005AE2r 2  8D 2D 91     	sta $912d
005AE5r 2  8D 2E 91     	sta $912e
005AE8r 2               
005AE8r 2               ; Set audio volume to max
005AE8r 2  A9 0F        	lda #$0f
005AEAr 2  8D 0E 90     	sta $900e
005AEDr 2               
005AEDr 2               ; Init screen for NTSC
005AEDr 2               ; this sets the background and border color of the screen
005AEDr 2               ; in this case border black and background black
005AEDr 2               
005AEDr 2  A9 18        	lda #%00011000
005AEFr 2  8D 0F 90     	sta RegF
005AF2r 2               
005AF2r 2               ; Reset fontcolor
005AF2r 2  A9 00        	lda #0		; Black
005AF4r 2  8D rr rr     	sta fontcol
005AF7r 2               
005AF7r 2               
005AF7r 2               ; max num of columns 24
005AF7r 2               
005AF7r 2  AD 02 90     	lda Reg2
005AFAr 2  29 80        	and #%10000000
005AFCr 2  09 16        	ora #ScrWidth
005AFEr 2  8D 02 90     	sta Reg2
005B01r 2               
005B01r 2               ; max num of lines (mult by 2 - 24) for 8x8 chars
005B01r 2               ; no multiply for 8x16 chars
005B01r 2               
005B01r 2  AD 03 90     	lda Reg3
005B04r 2  29 81        	and #%10000001
005B06r 2  09 16        	ora #ScrWidth		; number of rows multipled by two
005B08r 2  8D 03 90     	sta Reg3
005B0Br 2               
005B0Br 2               ; horizontal and vertical position must be set for
005B0Br 2               ; non standard screen resolution (standard 22x23)
005B0Br 2               ; same games even allow the user to change them
005B0Br 2               ; these values are for PAL for NTSC should be different
005B0Br 2               ; move horizontal position in the screen
005B0Br 2               
005B0Br 2  AD 00 90     	lda Reg0
005B0Er 2  29 80        	and #%10000000
005B10r 2  09 04        	ora #CentreX
005B12r 2  8D 00 90     	sta Reg0
005B15r 2               
005B15r 2               ; move vertical position in the screen
005B15r 2               
005B15r 2  A9 1B        	lda #CentreY
005B17r 2  8D 01 90     	sta Reg1
005B1Ar 2               
005B1Ar 2               ; Set screem memory to $200
005B1Ar 2               ; bit 7 on $9002 has to be set
005B1Ar 2               
005B1Ar 2  AD 02 90     	lda Reg2
005B1Dr 2  09 80        	ora #%10000000
005B1Fr 2  8D 02 90     	sta Reg2
005B22r 2               
005B22r 2               ; Set character data pointer to CHAR RAM at $1000
005B22r 2               ; bit 7 on $9005 has always to be set
005B22r 2               ; (based on compute - mapping the vic book)
005B22r 2               ; color ram goes to 9600
005B22r 2               
005B22r 2  AD 05 90     	lda Reg5
005B25r 2  29 0C        	and #%00001100
005B27r 2  09 8C        	ora #%10001100
005B29r 2  8D 05 90     	sta Reg5
005B2Cr 2               
005B2Cr 2               ; This set the char size to 8x16
005B2Cr 2               
005B2Cr 2  AD 03 90     	lda Reg3
005B2Fr 2  09 01        	ora #%00000001
005B31r 2  8D 03 90     	sta Reg3
005B34r 2               
005B34r 2               ; Init screencharacters
005B34r 2               ; Fill screen with characters from left to right, up to down
005B34r 2               
005B34r 2  A2 00        	ldx #0
005B36r 2  A0 00        	ldy #0
005B38r 2               scrinit:
005B38r 2  8A           	txa
005B39r 2  9D 00 02     	sta ScreenAddr,x
005B3Cr 2  98           	tya
005B3Dr 2  9D 00 96     	sta ColorAttr,x
005B40r 2  E8           	inx
005B41r 2  E0 F2        	cpx#242
005B43r 2  D0 F3        	bne scrinit
005B45r 2               
005B45r 2               
005B45r 2               ; Reset fontcolor
005B45r 2               
005B45r 2  A9 00        	lda #0			; Black
005B47r 2  8D rr rr     	sta fontcol
005B4Ar 2               
005B4Ar 2               ; Init VIA1 timer11 for timeout 1/25 sec
005B4Ar 2               
005B4Ar 2  A9 E0        	lda #$e0		; T1 continuous
005B4Cr 2  8D 1B 91     	sta AUX1
005B4Fr 2  A9 7F        	lda #$7f		; No int
005B51r 2  8D 1E 91     	sta IER1
005B54r 2  A9 00        	lda #0
005B56r 2  8D 1D 91     	sta IFR1		; Clear interrupt flags
005B59r 2  A9 20        	lda #<timervalue	; Timer 1/25 sec
005B5Br 2  8D 14 91     	sta Timer11_Low
005B5Er 2  A9 4E        	lda #>timervalue
005B60r 2  8D 15 91     	sta Timer11_High
005B63r 2               
005B63r 2               ; Init VIA2 timer21 for IRQ 1/50 sec
005B63r 2               
005B63r 2  78           	sei
005B64r 2  A9 E0        	lda #$e0		; T1 continuous
005B66r 2  8D 2B 91     	sta AUX2
005B69r 2  A9 C0        	lda #$c0		; Int timer1
005B6Br 2  8D 2E 91     	sta IER2
005B6Er 2               ;	lda #0
005B6Er 2               ;	sta IFR2		; Clear interrupt flags
005B6Er 2  A9 20        	lda #<timerint		; Timer 1/50 sec
005B70r 2  8D 24 91     	sta Timer21_Low
005B73r 2  A9 4E        	lda #>timerint
005B75r 2  8D 25 91     	sta Timer21_High
005B78r 2  A9 rr        	lda #<int_service
005B7Ar 2  8D 14 03     	sta $0314
005B7Dr 2  A9 rr        	lda #>int_service
005B7Fr 2  8D 15 03     	sta $0315
005B82r 2  58           	cli
005B83r 2               
005B83r 2               ; Pre-shifted byte tables if parameter 'r' given
005B83r 2               ; 4 tables are created which 0,2,4 ad 6 bits pre-shifted
005B83r 2               ; The bits are shifted to the right and overflow bits are
005B83r 2               ; inserted to the left. So 1 byte contains a left and right part
005B83r 2               
005B83r 2               .if rflag
005B83r 2               shift0 = HiRAM
005B83r 2               shift2 = HiRAM+256
005B83r 2               shift4 = HiRAM+512
005B83r 2               shift6 = HiRAM+768
005B83r 2               
005B83r 2               ; Pre-shifted table 0 pixels
005B83r 2               
005B83r 2  A2 00        	ldx #0
005B85r 2               shf0:
005B85r 2  8A           	txa
005B86r 2  9D 00 A0     	sta shift0,x
005B89r 2  E8           	inx
005B8Ar 2  D0 F9        	bne shf0
005B8Cr 2               
005B8Cr 2               ; Pre-shifted table 2 pixels
005B8Cr 2               
005B8Cr 2  A2 00        	ldx #0
005B8Er 2               shf2:
005B8Er 2  A0 02        	ldy #2
005B90r 2  8A           	txa
005B91r 2               shf2loop:
005B91r 2  4A           	lsr a
005B92r 2  90 02        	bcc :+
005B94r 2  09 80        	ora #$80
005B96r 2               :
005B96r 2  88           	dey
005B97r 2  D0 F8        	bne shf2loop
005B99r 2  9D 00 A1     	sta shift2,x
005B9Cr 2  E8           	inx
005B9Dr 2  D0 EF        	bne shf2
005B9Fr 2               
005B9Fr 2               ; Pre-shifted table 4 pixels
005B9Fr 2               
005B9Fr 2  A2 00        	ldx #0
005BA1r 2               shf4:
005BA1r 2  A0 04        	ldy #4
005BA3r 2  8A           	txa
005BA4r 2               shf4loop:
005BA4r 2  4A           	lsr a
005BA5r 2  90 02        	bcc :+
005BA7r 2  09 80        	ora #$80
005BA9r 2               :
005BA9r 2  88           	dey
005BAAr 2  D0 F8        	bne shf4loop
005BACr 2  9D 00 A2     	sta shift4,x
005BAFr 2  E8           	inx
005BB0r 2  D0 EF        	bne shf4
005BB2r 2               
005BB2r 2               ; Pre-shifted table 6 pixels
005BB2r 2               
005BB2r 2  A2 00        	ldx #0
005BB4r 2               shf6:
005BB4r 2  A0 06        	ldy #6
005BB6r 2  8A           	txa
005BB7r 2               shf6loop:
005BB7r 2  4A           	lsr a
005BB8r 2  90 02        	bcc :+
005BBAr 2  09 80        	ora #$80
005BBCr 2               :
005BBCr 2  88           	dey
005BBDr 2  D0 F8        	bne shf6loop
005BBFr 2  9D 00 A3     	sta shift6,x
005BC2r 2  E8           	inx
005BC3r 2  D0 EF        	bne shf6
005BC5r 2               .endif
005BC5r 2               
005BC5r 2  60           	rts
005BC6r 2               
005BC6r 2               ;========================================================
005BC6r 2               ; INTERRUPT SERVICE ROUTINE
005BC6r 2               ;========================================================
005BC6r 2               
005BC6r 2               int_service:
005BC6r 2  A9 40        	lda #$40
005BC8r 2  8D 2D 91     	sta IFR2		; Clear timer1 flag
005BCBr 2  EE 00 96     	inc $9600		; Cycle color topleft char
005BCEr 2  68           	pla
005BCFr 2  A8           	tay
005BD0r 2  68           	pla
005BD1r 2  AA           	tax
005BD2r 2  68           	pla
005BD3r 2  40           	rti			; Return from interrupt
005BD4r 2               
005BD4r 2               ;========================================================
005BD4r 2               ; KEY AND JOYSTICK ROUTINES
005BD4r 2               ;--------------------------------------------------------
005BD4r 2               ; Keys
005BD4r 2               ;
005BD4r 2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
005BD4r 2               ;             ||||||||
005BD4r 2               ;             |||||||+> Right    KEY 0  - X
005BD4r 2               ;             ||||||+-> Left     KEY 1  - Z
005BD4r 2               ;             |||||+--> Down     KEY 2  - .
005BD4r 2               ;             ||||+---> Up       KEY 3  - ;
005BD4r 2               ;             |||+----> Fire1    KEY 4  - SPC
005BD4r 2               ;             ||+-----> Fire2    KEY 5  - Q
005BD4r 2               ;             |+------> Fire3    KEY 6  - P
005BD4r 2               ;             +-------> Not used
005BD4r 2               ;
005BD4r 2               ;                       Option1  KEY 7  - 1
005BD4r 2               ;                       Option2  KEY 8  - 2
005BD4r 2               ;                       Option3  KEY 9  - 3
005BD4r 2               ;                       Option4  KEY 10 - 4
005BD4r 2               ;--------------------------------------------------------
005BD4r 2               
005BD4r 2               ;----------------------------------------------------
005BD4r 2               ; Interrupt service
005BD4r 2               ;----------------------------------------------------
005BD4r 2               
005BD4r 2               intserv:
005BD4r 2  EE 01 96     	inc $9601	; scroll colour char topleft
005BD7r 2  68           	pla
005BD8r 2  A8           	tay
005BD9r 2  68           	pla
005BDAr 2  AA           	tax
005BDBr 2  68           	pla
005BDCr 2  40           	rti
005BDDr 2               
005BDDr 2               ;--------------------------------------------------------
005BDDr 2               ; PRSKEY
005BDDr 2               ;
005BDDr 2               ; Wait for keypress.
005BDDr 2               ;--------------------------------------------------------
005BDDr 2               
005BDDr 2               prskey:
005BDDr 2  98           	tya
005BDEr 2  48           	pha
005BDFr 2               prsloop:
005BDFr 2  20 rr rr     	jsr vsync
005BE2r 2  20 rr rr     	jsr readkey
005BE5r 2  C0 FF        	cpy #255
005BE7r 2  F0 F6        	beq prsloop		; wait until key pressed
005BE9r 2               
005BE9r 2               prsrelease:
005BE9r 2  20 rr rr     	jsr vsync
005BECr 2  20 rr rr     	jsr readkey
005BEFr 2  C0 FF        	cpy #255
005BF1r 2  D0 F6        	bne prsrelease		; wait until key released
005BF3r 2               
005BF3r 2  20 rr rr     	jsr joykey
005BF6r 2               
005BF6r 2  68           	pla
005BF7r 2  A8           	tay
005BF8r 2  60           	rts
005BF9r 2               
005BF9r 2               ;--------------------------------------------------------
005BF9r 2               ; KTEST
005BF9r 2               ;
005BF9r 2               ; Keyboard test routine with key in A.
005BF9r 2               ; Scan key and clear carry if key pressed
005BF9r 2               ;--------------------------------------------------------
005BF9r 2               
005BF9r 2               ktest:
005BF9r 2  85 rr        	sta z80_a		; save key
005BFBr 2               
005BFBr 2  4A           	lsr a
005BFCr 2  4A           	lsr a
005BFDr 2  4A           	lsr a
005BFEr 2  4A           	lsr a
005BFFr 2  AA           	tax
005C00r 2  BD rr rr     	lda colmask,x
005C03r 2  8D 20 91     	sta KeyColAddr		; set row
005C06r 2               
005C06r 2  A5 rr        	lda z80_a
005C08r 2  29 0F        	and #$0f
005C0Ar 2  AA           	tax			; get column
005C0Br 2               
005C0Br 2  AD 21 91     	lda KeyRowAddr		; read column
005C0Er 2  3D rr rr     	and keymask,x		; check if key pressed
005C11r 2  F0 02        	beq pressed		; Skip if pressed
005C13r 2  38           	sec			; key not pressed
005C14r 2  60           	rts
005C15r 2               pressed:
005C15r 2  18           	clc			; key pressed
005C16r 2  60           	rts
005C17r 2               
005C17r 2  7F BF DF EF  colmask:	.byte 127,191,223,239,247,251,253,254
005C1Br 2  F7 FB FD FE  
005C1Fr 2  01 02 04 08  keymask:	.byte $01,$02,$04,$08,$10,$20,$40,$80
005C23r 2  10 20 40 80  
005C27r 2               
005C27r 2               ;---------------------------------------------------------------
005C27r 2               ; KGET
005C27r 2               ;
005C27r 2               ; Read keyboard matrix if a key is pressed.
005C27r 2               ; Return A = high nibble=row and low nibble=col
005C27r 2               ;---------------------------------------------------------------
005C27r 2               
005C27r 2               kget:
005C27r 2  86 rr        	stx xtmp		; Save x-reg
005C29r 2               kget0:
005C29r 2  A2 00        	ldx #0			; reset row
005C2Br 2               kget1:
005C2Br 2  BD rr rr     	lda colmask,x		; Get mask
005C2Er 2  8D 20 91     	sta KeyColAddr		; Set row
005C31r 2  AD 21 91     	lda KeyRowAddr		; Read columns
005C34r 2  85 rr        	sta tmp			; Save colums
005C36r 2  C9 FF        	cmp #$ff		; Key pressed?
005C38r 2  D0 08        	bne kget2		; Yes, skip
005C3Ar 2  E8           	inx			; Next row
005C3Br 2  E0 08        	cpx #8			; All rows scanned?
005C3Dr 2  D0 EC        	bne kget1		; No, repeat
005C3Fr 2  4C rr rr     	jmp kget0		; No key pressed, a=$ff
005C42r 2               kget2:
005C42r 2  A0 00        	ldy #0			; Reset column
005C44r 2               kget3:
005C44r 2  46 rr        	lsr tmp			; Test bit
005C46r 2  90 04        	bcc kget4		; If clear, key pressed
005C48r 2  C8           	iny			; Next column
005C49r 2  4C rr rr     	jmp kget3		; Repeat
005C4Cr 2               kget4:
005C4Cr 2  86 rr        	stx tmp			; Get row
005C4Er 2  06 rr        	asl tmp			; Make high nibble
005C50r 2  06 rr        	asl tmp
005C52r 2  06 rr        	asl tmp
005C54r 2  06 rr        	asl tmp
005C56r 2  98           	tya			; Get column
005C57r 2  18           	clc
005C58r 2  65 rr        	adc tmp			; Add row as low nibble
005C5Ar 2  85 rr        	sta tmp
005C5Cr 2               kget5:
005C5Cr 2  AD 21 91     	lda KeyRowAddr		; Read columns
005C5Fr 2  C9 FF        	cmp #$ff
005C61r 2  D0 F9        	bne kget5
005C63r 2               
005C63r 2  A5 rr        	lda tmp			; Return keycode
005C65r 2  A6 rr        	ldx xtmp		; Restore X-reg
005C67r 2  60           	rts			; Return
005C68r 2               
005C68r 2               ;-------------------------------------------------------------
005C68r 2               ; READKEY
005C68r 2               ;
005C68r 2               ; Check keyboard matrix if a key is pressed
005C68r 2               ; Return keymask in Y
005C68r 2               ;-------------------------------------------------------------
005C68r 2               
005C68r 2               readkey:
005C68r 2  A9 FF        	lda #$ff		; Keymask
005C6Ar 2  85 rr        	sta tmp
005C6Cr 2  A2 07        	ldx #7
005C6Er 2               scanrow:
005C6Er 2  BD rr rr     	lda colmask,x
005C71r 2  8D 20 91     	sta KeyColAddr		; set row
005C74r 2  AD 21 91     	lda KeyRowAddr		; read column
005C77r 2  25 rr        	and tmp			; Reset bit is key pressed
005C79r 2  85 rr        	sta tmp
005C7Br 2  CA           	dex
005C7Cr 2  10 F0        	bpl scanrow
005C7Er 2  A5 rr        	lda tmp
005C80r 2  A8           	tay
005C81r 2  60           	rts
005C82r 2               
005C82r 2               ;-------------------------------------------------------------
005C82r 2               ; JOY1SCAN
005C82r 2               ;
005C82r 2               ; Initializes joystick
005C82r 2               ;-------------------------------------------------------------
005C82r 2               
005C82r 2               joyinit:
005C82r 2  60           	rts
005C83r 2               
005C83r 2               ;-------------------------------------------------------------
005C83r 2               ; JOY1SCAN
005C83r 2               ;
005C83r 2               ; Scan joystick1 and return key in z80_e
005C83r 2               ; Up, down, left, right and fire are read from the joystick
005C83r 2               ; Fire2 and fire3 are read from the keyboard
005C83r 2               ;-------------------------------------------------------------
005C83r 2               
005C83r 2               joy1scan:
005C83r 2  A9 FF        	lda #$ff
005C85r 2  85 rr        	sta z80_e
005C87r 2               
005C87r 2  AD 11 91     	lda JoyAddr1		; Read joystick input
005C8Ar 2  4A           	lsr a
005C8Br 2  4A           	lsr a
005C8Cr 2               
005C8Cr 2  4A           	lsr a
005C8Dr 2  26 rr        	rol z80_e		; Up
005C8Fr 2  4A           	lsr a
005C90r 2  26 rr        	rol z80_e		; Down
005C92r 2  4A           	lsr a
005C93r 2  26 rr        	rol z80_e		; Left
005C95r 2               
005C95r 2  A9 7F        	lda #%01111111
005C97r 2  8D 22 91     	sta DDRB		; Bit7 = input joystick b7
005C9Ar 2  AD 20 91     	lda JoyAddr2
005C9Dr 2  0A           	asl a
005C9Er 2  26 rr        	rol z80_e		; Right
005CA0r 2  A9 FF        	lda #%11111111
005CA2r 2  8D 22 91     	sta DDRB		; Reset
005CA5r 2               
005CA5r 2  AD 11 91     	lda JoyAddr1
005CA8r 2  29 20        	and #%00100000
005CAAr 2  D0 06        	bne :+
005CACr 2  A5 rr        	lda z80_e
005CAEr 2  29 EF        	and #%11101111		; Fire
005CB0r 2  85 rr        	sta z80_e
005CB2r 2               :
005CB2r 2  AD rr rr     	lda keys+6		; Scan keys for Fire3
005CB5r 2  20 rr rr     	jsr ktest
005CB8r 2  B0 06        	bcs :+
005CBAr 2  A5 rr        	lda z80_e
005CBCr 2  29 BF        	and #%10111111
005CBEr 2  85 rr        	sta z80_e
005CC0r 2               :
005CC0r 2  AD rr rr     	lda keys+5		; Scan keys for Fire2
005CC3r 2  20 rr rr     	jsr ktest
005CC6r 2  B0 06        	bcs :+
005CC8r 2  A5 rr        	lda z80_e
005CCAr 2  29 DF        	and #%11011111
005CCCr 2  85 rr        	sta z80_e
005CCEr 2               :
005CCEr 2  60           	rts
005CCFr 2               
005CCFr 2               ;-------------------------------------------------------------
005CCFr 2               ; JOY2SCAN
005CCFr 2               ;
005CCFr 2               ; TODO, Scan joystick2 and return key in z80_e
005CCFr 2               ;-------------------------------------------------------------
005CCFr 2               
005CCFr 2               joy2scan:
005CCFr 2  60           	rts
005CD0r 2               
005CD0r 2               
005CD0r 2               
005CD0r 2               ;========================================================
005CD0r 2               ; HARDWARE DEPENDING ROUTINES
005CD0r 2               ;========================================================
005CD0r 2               
005CD0r 2               ;----------------------------------------------------
005CD0r 2               ; DELAY
005CD0r 2               ;
005CD0r 2               ; Delay routine A * 1/50 sec
005CD0r 2               ;----------------------------------------------------
005CD0r 2               
005CD0r 2               delay:
005CD0r 2  85 rr        	sta xtmp		; set delaycounter
005CD2r 2               del_loop:
005CD2r 2  AD 04 90     	lda Reg4
005CD5r 2  D0 FB        	bne del_loop		; wait for flyback (1/60 sec)
005CD7r 2               
005CD7r 2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
005CD9r 2               delay1:
005CD9r 2  61 80        	adc ($80,x)		;	 6 usec
005CDBr 2  61 80        	adc ($80,x)		;	 6 usec
005CDDr 2  88           	dey			;	 2 usec
005CDEr 2  D0 F9        	bne delay1		;	 2 usec
005CE0r 2  EA           	nop			; 2 usec
005CE1r 2  EA           	nop			; 2 usec
005CE2r 2               				; tot: 20000 usec
005CE2r 2  C6 rr        	dec xtmp		; Next 1/50 sec delay
005CE4r 2  D0 EC        	bne del_loop
005CE6r 2  60           	rts
005CE7r 2               
005CE7r 2               ;-------------------------------------------------------------
005CE7r 2               ; VSYNC
005CE7r 2               ;
005CE7r 2               ; - read joystick/keyboard
005CE7r 2               ; - sync framerate with timer 25Hz
005CE7r 2               ; - handle shrapnel every even frame
005CE7r 2               ; - handle sound
005CE7r 2               ;-------------------------------------------------------------
005CE7r 2               
005CE7r 2               vsync:
005CE7r 2  48           	pha			; save registers
005CE8r 2  98           	tya
005CE9r 2  48           	pha
005CEAr 2  8A           	txa
005CEBr 2  48           	pha
005CECr 2               
005CECr 2               ; Read joystick/keyboard.
005CECr 2               
005CECr 2  20 rr rr     	jsr joykey
005CEFr 2               
005CEFr 2               ; Sync framerate with timer 25Hz
005CEFr 2               
005CEFr 2  A9 40        	lda #$40		; set Timer1 expired bit
005CF1r 2               vsync1:
005CF1r 2  2C 1D 91     	bit IFR1		; check Interrupt Flag Register
005CF4r 2  F0 FB        	beq vsync1		; wait if timer not expired
005CF6r 2  AD 14 91     	lda Timer11_Low		; clear Timer interrupt
005CF9r 2               
005CF9r 2               ; Handle shrapnel every even frame
005CF9r 2               
005CF9r 2  A5 rr        	lda clock		; get clock
005CFBr 2  29 01        	and #1			; 2 frames expired
005CFDr 2  D0 03        	bne:+
005CFFr 2  20 rr rr     	jsr proshr		; process shrapnel
005D02r 2               :
005D02r 2               
005D02r 2               ; Handle sound
005D02r 2               
005D02r 2  AD rr rr         lda sndtyp
005D05r 2  F0 33            beq sndskip
005D07r 2               
005D07r 2               sndloop:
005D07r 2  AC rr rr         ldy sndtyp
005D0Ar 2               sndwait:
005D0Ar 2  88               dey
005D0Br 2  D0 FD            bne sndwait
005D0Dr 2               
005D0Dr 2  AD rr rr         lda sndtyp
005D10r 2  30 11            bmi crashaudio
005D12r 2               
005D12r 2               
005D12r 2               beepaudio:
005D12r 2                   ; enable sound on channel 2
005D12r 2                   ; add 128 because sound is in range 128-255
005D12r 2  4A               lsr
005D13r 2  A9 FF            lda #$ff
005D15r 2  38               sec
005D16r 2  ED rr rr         sbc sndtyp
005D19r 2  4A               lsr
005D1Ar 2  4A               lsr
005D1Br 2  09 C0            ora #%11000000
005D1Dr 2  8D 0C 90         sta $900c
005D20r 2               
005D20r 2  4C rr rr         jmp endaudiotype
005D23r 2               crashaudio:
005D23r 2  A9 FF            lda #$ff
005D25r 2  38               sec
005D26r 2  ED rr rr         sbc sndtyp
005D29r 2  09 80            ora #%10000000
005D2Br 2  8D 0D 90         sta $900d
005D2Er 2               
005D2Er 2               endaudiotype:
005D2Er 2               
005D2Er 2  CE rr rr         dec sndtyp
005D31r 2  F0 07            beq sndskip
005D33r 2  C9 80            cmp #128
005D35r 2  F0 03            beq sndskip
005D37r 2  4C rr rr         jmp sndloop
005D3Ar 2               sndskip:
005D3Ar 2                   ; disable sound
005D3Ar 2  A9 00            lda #$00
005D3Cr 2  8D 0C 90         sta $900c
005D3Fr 2  8D 0D 90         sta $900d
005D42r 2               
005D42r 2  68               pla
005D43r 2  AA               tax
005D44r 2  68               pla
005D45r 2  A8               tay
005D46r 2  68               pla
005D47r 2  60               rts
005D48r 2  00           sndtyp:		.byte 0		; Beep sound parameter
005D49r 2               
005D49r 2               
005D49r 2               
005D49r 2               
005D49r 2               
005D49r 2               
005D49r 2               ;========================================================
005D49r 2               ; SPRITE HANDLING ROUTINES
005D49r 2               ;========================================================
005D49r 2               
005D49r 2               ;----------------------------------------------------
005D49r 2               ; SPRITE
005D49r 2               ;
005D49r 2               ; Draw object sprite
005D49r 2               ;----------------------------------------------------
005D49r 2               
005D49r 2               .if oflag
005D49r 2               sprite:
005D49r 2  86 rr        	stx xtmp		; Save X-reg
005D4Br 2  20 rr rr     	jsr scadd 		; get screen address in scraddr.
005D4Er 2               
005D4Er 2  A5 rr        	lda dispx 		; x position.
005D50r 2  29 07        	and #7 			; position straddling cells.
005D52r 2  85 rr        	sta z80_b		; store in b register.
005D54r 2               
005D54r 2  A5 rr        	lda z80_l		; store sprite graphic address.
005D56r 2  8D rr rr     	sta sprit1+1
005D59r 2  8D rr rr     	sta sprit2+1
005D5Cr 2  A5 rr        	lda z80_h
005D5Er 2  8D rr rr     	sta sprit1+2
005D61r 2  8D rr rr     	sta sprit2+2
005D64r 2               
005D64r 2  A2 00        	ldx #0			; pixel height.
005D66r 2  A0 00        	ldy #0
005D68r 2               sprit1:
005D68r 2  BD rr rr     	lda objdta,x		; fetch first byte.
005D6Br 2  85 rr        	sta spr
005D6Dr 2  E8           	inx
005D6Er 2               sprit2:
005D6Er 2  BD rr rr     	lda objdta,x
005D71r 2  85 rr        	sta spr+1
005D73r 2               
005D73r 2  A9 00        	lda #0
005D75r 2  85 rr        	sta spr+2
005D77r 2  20 rr rr     	jsr sprit7		; shift sprite
005D7Ar 2               
005D7Ar 2  A5 rr        	lda spr			; fetch graphic.
005D7Cr 2  A0 00        	ldy #0			; _BEEB
005D7Er 2  51 rr        	eor (scraddr),y		; merge with screen image.
005D80r 2  91 rr        	sta (scraddr),y		; write to screen.
005D82r 2               
005D82r 2  A5 rr        	lda spr+1		; fetch graphic.
005D84r 2  A0 10        	ldy #16			; _BEEB
005D86r 2  51 rr        	eor (scraddr),y		; merge with screen image.
005D88r 2  91 rr        	sta (scraddr),y		; write to screen.
005D8Ar 2               
005D8Ar 2  A5 rr        	lda spr+2		; fetch graphic.
005D8Cr 2  A0 20        	ldy #32			; _BEEB
005D8Er 2  51 rr        	eor (scraddr),y		; merge with screen image.
005D90r 2  91 rr        	sta (scraddr),y		; write to screen.
005D92r 2               
005D92r 2  20 rr rr     	jsr nline
005D95r 2               
005D95r 2  E8           	inx			; next source byte.
005D96r 2  E0 20        	cpx #32
005D98r 2  D0 CE        	bne sprit1		; repeat
005D9Ar 2               
005D9Ar 2  A6 rr        	ldx xtmp		; retreive X-reg
005D9Cr 2  60           	rts
005D9Dr 2               
005D9Dr 2               .endif
005D9Dr 2               
005D9Dr 2               ;------------------------------------------------------------------
005D9Dr 2               ; SCADD
005D9Dr 2               ;
005D9Dr 2               ; This routine returns a screen address for X,Y in scraddr.
005D9Dr 2               ;------------------------------------------------------------------
005D9Dr 2               
005D9Dr 2               scadd:
005D9Dr 2  A5 rr        	lda dispx		; get x
005D9Fr 2  29 F8        	and #$f8		; reset bit 0-2 for get block pos
005DA1r 2  85 rr        	sta scraddr		; set lb scraddr
005DA3r 2  A9 00        	lda #0
005DA5r 2  85 rr        	sta scraddr+1		; set hb scraddr
005DA7r 2  06 rr        	asl scraddr		; multiply X by 2
005DA9r 2  26 rr        	rol scraddr+1
005DABr 2               
005DABr 2               ; Add line address Y pos to X
005DABr 2               
005DABr 2  A6 rr        	ldx dispy		; get row address Y pos
005DADr 2  18           	clc
005DAEr 2  A5 rr        	lda scraddr
005DB0r 2  7D 00 07     	adc SCADTB_lb,x
005DB3r 2  85 rr        	sta scraddr
005DB5r 2  A5 rr        	lda scraddr+1
005DB7r 2  7D 00 08     	adc SCADTB_hb,x
005DBAr 2  85 rr        	sta scraddr+1
005DBCr 2               
005DBCr 2  60           	rts
005DBDr 2               
005DBDr 2               ;------------------------------------------------------------------
005DBDr 2               ; SSPRIA
005DBDr 2               ;
005DBDr 2               ; Erase single sprite, old (ix+0).
005DBDr 2               ;------------------------------------------------------------------
005DBDr 2               
005DBDr 2               sspria:
005DBDr 2  20 rr rr     	jsr gsprad		; get old sprite address.
005DC0r 2               sspri2:
005DC0r 2               .if rflag
005DC0r 2  A5 rr        	lda z80_e		; 3c
005DC2r 2  8D rr rr     	sta dline_spraddr1+1	; 4c
005DC5r 2  8D rr rr     	sta dline_spraddr2+1	; 4c
005DC8r 2  A5 rr        	lda z80_d		; 3c
005DCAr 2  8D rr rr     	sta dline_spraddr1+2	; 4c
005DCDr 2  8D rr rr     	sta dline_spraddr2+2	; 4c
005DD0r 2               
005DD0r 2  A6 rr        	ldx sprshft
005DD2r 2  BD rr rr     	lda shift_table,x
005DD5r 2  8D rr rr     	sta dline_shift1+1
005DD8r 2  8D rr rr     	sta dline_shift2+1
005DDBr 2  BD rr rr     	lda shift_table+1,x
005DDEr 2  8D rr rr     	sta dline_shift1+2
005DE1r 2  8D rr rr     	sta dline_shift2+2
005DE4r 2               
005DE4r 2  A2 00        	ldx #0			; byte counter.
005DE6r 2               sspri0:
005DE6r 2  20 rr rr     	jsr dline		; draw a line.
005DE9r 2                 .if bflag
005DE9r 2               	cpx #48			; big sprites have 24 bytes
005DE9r 2                 .else
005DE9r 2  E0 20        	cpx #32			; normal sprites have 32 bytes
005DEBr 2                 .endif
005DEBr 2  D0 F9        	bne sspri0		; repeat 16 times x 2 bytes
005DEDr 2  60           	rts
005DEEr 2               .else
005DEEr 2                 .if bflag
005DEEr 2               	lda #24			; big sprites have 24 lines
005DEEr 2                 .else
005DEEr 2               	lda #16			; normal sprites have 16 lines.
005DEEr 2                 .endif
005DEEr 2               	sta acnt
005DEEr 2               sspri0:
005DEEr 2               	jsr dline		; draw a line.
005DEEr 2               	dec acnt
005DEEr 2               	bne sspri0		; repeat 16 times
005DEEr 2               	rts
005DEEr 2               
005DEEr 2               acnt:	.byte 0			; line counter
005DEEr 2               
005DEEr 2               .endif
005DEEr 2               
005DEEr 2               ;------------------------------------------------------------------
005DEEr 2               ; SSPRIB
005DEEr 2               ;
005DEEr 2               ; Display single sprite, new (ix+5).
005DEEr 2               ;------------------------------------------------------------------
005DEEr 2               
005DEEr 2               ssprib:
005DEEr 2  20 rr rr     	jsr gspran 		; get new sprite address.
005DF1r 2  4C rr rr     	jmp sspri2		; Display sprite
005DF4r 2               
005DF4r 2               ;------------------------------------------------------------------
005DF4r 2               ; SSPRIC
005DF4r 2               ;
005DF4r 2               ; Erase old (ix+0) and display new (ix+5) sprite line by line.
005DF4r 2               ;------------------------------------------------------------------
005DF4r 2               
005DF4r 2               sspric:
005DF4r 2               .if rflag
005DF4r 2  20 rr rr     	jsr gsprad 		; get old sprite address.
005DF7r 2               
005DF7r 2  A5 rr        	lda z80_e		; 3c
005DF9r 2  8D rr rr     	sta ddline_spraddr3+1	; 4c
005DFCr 2  8D rr rr     	sta ddline_spraddr4+1	; 4c
005DFFr 2               
005DFFr 2  A5 rr        	lda z80_d		; 3c
005E01r 2  8D rr rr     	sta ddline_spraddr3+2	; 4c
005E04r 2  8D rr rr     	sta ddline_spraddr4+2	; 4c
005E07r 2               
005E07r 2  A6 rr        	ldx sprshft		; set spriteshift table addresses
005E09r 2  BD rr rr     	lda shift_table,x
005E0Cr 2  8D rr rr     	sta ddline_shift3+1
005E0Fr 2  8D rr rr     	sta ddline_shift4+1
005E12r 2  BD rr rr     	lda shift_table+1,x
005E15r 2  8D rr rr     	sta ddline_shift3+2
005E18r 2  8D rr rr     	sta ddline_shift4+2
005E1Br 2               
005E1Br 2  20 rr rr     	jsr exx  		; store addresses.
005E1Er 2  20 rr rr     	jsr gspran 		; get new sprite addresses.
005E21r 2               
005E21r 2  A5 rr        	lda z80_e		; 3c
005E23r 2  8D rr rr     	sta ddline_spraddr1+1	; 4c
005E26r 2  8D rr rr     	sta ddline_spraddr2+1	; 4c
005E29r 2               
005E29r 2  A5 rr        	lda z80_d		; 3c
005E2Br 2  8D rr rr     	sta ddline_spraddr1+2	; 4c
005E2Er 2  8D rr rr     	sta ddline_spraddr2+2	; 4c
005E31r 2               
005E31r 2  A6 rr        	ldx sprshft
005E33r 2  BD rr rr     	lda shift_table,x
005E36r 2  8D rr rr     	sta ddline_shift1+1
005E39r 2  8D rr rr     	sta ddline_shift2+1
005E3Cr 2  BD rr rr     	lda shift_table+1,x
005E3Fr 2  8D rr rr     	sta ddline_shift1+2
005E42r 2  8D rr rr     	sta ddline_shift2+2
005E45r 2               
005E45r 2  A2 00        	ldx #0
005E47r 2               lloop:
005E47r 2  20 rr rr     	jsr ddline 		; draw a line.
005E4Ar 2                 .if bflag
005E4Ar 2               	cpx #48
005E4Ar 2                 .else
005E4Ar 2  E0 20        	cpx #32
005E4Cr 2                 .endif
005E4Cr 2  D0 F9        	bne lloop
005E4Er 2  60           	rts
005E4Fr 2               
005E4Fr 2               shift_table:
005E4Fr 2  00 A0        	.word shift0
005E51r 2  00 A1        	.word shift2
005E53r 2  00 A2        	.word shift4
005E55r 2  00 A3        	.word shift6
005E57r 2               
005E57r 2               ;------------------------------------------------------------------
005E57r 2               ; DLINE
005E57r 2               ;
005E57r 2               ; Draw a sprite line, now work out next target address.
005E57r 2               ;
005E57r 2               ; Input:
005E57r 2               ;  B  = right mask
005E57r 2               ;  C  = left mask
005E57r 2               ;  DE = spriteaddress
005E57r 2               ;  scraddr = screen address
005E57r 2               ;------------------------------------------------------------------
005E57r 2               
005E57r 2               dline:
005E57r 2               
005E57r 2               dline_spraddr1:
005E57r 2  BC FF FF     	ldy $ffff,x 		; get graphic data as pointer.
005E5Ar 2               dline_shift1:
005E5Ar 2  B9 FF FF     	lda $ffff,y		; get pre-shifted data
005E5Dr 2  85 rr        	sta sprtmp		; save byte
005E5Fr 2  25 rr        	and z80_c 		; mask right for left byte
005E61r 2               
005E61r 2  A0 00        	ldy #0
005E63r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005E65r 2  91 rr        	sta (scraddr),y 	; display left byte
005E67r 2               
005E67r 2               ; carry to next screen byte
005E67r 2               
005E67r 2  A5 rr        	lda sprtmp		; fetch data.
005E69r 2  25 rr        	and z80_b 		; mask for left part
005E6Br 2  85 rr        	sta sprtmp
005E6Dr 2               
005E6Dr 2               ; middle screen byte
005E6Dr 2               
005E6Dr 2  E8           	inx
005E6Er 2               dline_spraddr2:
005E6Er 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005E71r 2               dline_shift2:
005E71r 2  B9 FF FF     	lda $ffff,y
005E74r 2  85 rr        	sta sprtmp2
005E76r 2  25 rr        	and z80_c 		; mask away what's not needed.
005E78r 2  05 rr        	ora sprtmp
005E7Ar 2  A0 10        	ldy #16
005E7Cr 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005E7Er 2  91 rr        	sta (scraddr),y 	; display middle bye.
005E80r 2               
005E80r 2               ; carry to last screen byte
005E80r 2               
005E80r 2  A5 rr        	lda sprtmp2
005E82r 2  25 rr        	and z80_b 		; mask away unwanted
005E84r 2               
005E84r 2  A0 20        	ldy #32
005E86r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005E88r 2  91 rr        	sta (scraddr),y 	; display right byte.
005E8Ar 2               
005E8Ar 2  E8           	inx
005E8Br 2               .else
005E8Br 2               
005E8Br 2               	jsr gsprad 		; get old sprite address.
005E8Br 2               	jsr exx  		; store addresses.
005E8Br 2               	jsr gspran 		; get new sprite addresses.
005E8Br 2               
005E8Br 2               .if bflag
005E8Br 2               	lda #23
005E8Br 2               .else
005E8Br 2               	lda #15
005E8Br 2               .endif
005E8Br 2               	sta ccnt
005E8Br 2               lloop:
005E8Br 2               	jsr dline 		; draw a line.
005E8Br 2               	jsr exx  		; restore old addresses.
005E8Br 2               	jsr dline 		; delete a line.
005E8Br 2               	jsr exx  		; flip to new sprite addresses.
005E8Br 2               	dec ccnt
005E8Br 2               	bne lloop
005E8Br 2               
005E8Br 2               	jsr dline		; draw a line.
005E8Br 2               	jsr exx 		; restore old addresses.
005E8Br 2               
005E8Br 2               ;-------------------------------------------------------------
005E8Br 2               ; Drop through.
005E8Br 2               ; Line drawn, now work out next target address.
005E8Br 2               ;
005E8Br 2               ; Input:
005E8Br 2               ;  B  = right mask
005E8Br 2               ;  C  = left mask
005E8Br 2               ;  DE = spriteaddress
005E8Br 2               ;  scraddr = screen address
005E8Br 2               ;-------------------------------------------------------------
005E8Br 2               
005E8Br 2               dline:
005E8Br 2               	ldy #0
005E8Br 2               	lda (z80_de),y 		; graphic data.
005E8Br 2               	pha
005E8Br 2               	and z80_c 		; mask away what's not needed.
005E8Br 2               	eor (scraddr),y 	; XOR with what's there.
005E8Br 2               	sta (scraddr),y 	; left byte on screen.
005E8Br 2               
005E8Br 2               	pla
005E8Br 2               	and z80_b 		; mask away unwanted bits.
005E8Br 2               	ldy #32
005E8Br 2               	eor (scraddr),y 	; XOR with what's there.
005E8Br 2               	sta (scraddr),y 	; right byte on screen
005E8Br 2               
005E8Br 2               	inc z80_e 		; next graphic.
005E8Br 2               	bne :+
005E8Br 2               	inc z80_d
005E8Br 2               :
005E8Br 2               ; _BEEB screen arrangement
005E8Br 2               ;	sec
005E8Br 2               ;	lda scraddr 		; one character cell to the left.
005E8Br 2               ;	sbc #8
005E8Br 2               ;	sta scraddr
005E8Br 2               ;	lda scraddr+1
005E8Br 2               ;	sbc #0
005E8Br 2               ;	sta scraddr+1
005E8Br 2               	ldy #0
005E8Br 2               	lda (z80_de),y 		; second bit of data.
005E8Br 2               	ldy #16
005E8Br 2               	eor (scraddr),y 	; XOR with what's there.
005E8Br 2               	sta (scraddr),y 	; middle byte on screen.
005E8Br 2               
005E8Br 2               	inc z80_e 		; point to next line of data.
005E8Br 2               	bne :+
005E8Br 2               	inc z80_d
005E8Br 2               :
005E8Br 2               ; _BEEB screen arrangement
005E8Br 2               ;	sec
005E8Br 2               ;	lda scraddr 		; another char left.
005E8Br 2               ;	sbc #8
005E8Br 2               ;	sta scraddr
005E8Br 2               ;	lda scraddr+1
005E8Br 2               ;	sbc #0
005E8Br 2               ;	sta scraddr+1
005E8Br 2               .endif
005E8Br 2               
005E8Br 2               ;----------------------------------------------------------------------
005E8Br 2               ; Line drawn, now work out next target address.
005E8Br 2               ;----------------------------------------------------------------------
005E8Br 2               
005E8Br 2               ; _BEEB screen arrangement
005E8Br 2               
005E8Br 2               nline:
005E8Br 2  A5 rr        	lda scraddr 			; get low byte of address.
005E8Dr 2  29 0F        	and #15
005E8Fr 2  C9 0F        	cmp #15				; is this last line of row?
005E91r 2  F0 03        	beq beeb_next_row
005E93r 2               
005E93r 2               	; within same row
005E93r 2  E6 rr        	inc scraddr			; new low byte of address.
005E95r 2  60           	rts
005E96r 2               
005E96r 2               beeb_next_row:
005E96r 2  18           	clc
005E97r 2  A5 rr        	lda scraddr
005E99r 2  69 51        	adc #<(ScreenRowBytes-15)
005E9Br 2  85 rr        	sta scraddr			; new low byte of address.
005E9Dr 2  A5 rr        	lda scraddr+1
005E9Fr 2  69 01        	adc #>(ScreenRowBytes-15)
005EA1r 2  85 rr        	sta scraddr+1			; new high byte of address.
005EA3r 2  60           	rts
005EA4r 2               
005EA4r 2               .if rflag
005EA4r 2               ;-------------------------------------------------------------
005EA4r 2               ; Drop through.
005EA4r 2               ; Line drawn, now work out next target address.
005EA4r 2               ;
005EA4r 2               ; Input:
005EA4r 2               ;  B  = right mask
005EA4r 2               ;  C  = left mask
005EA4r 2               ;  DE = spriteaddress
005EA4r 2               ;  scraddr = screen address
005EA4r 2               ;-------------------------------------------------------------
005EA4r 2               
005EA4r 2               ddline:
005EA4r 2               
005EA4r 2               ; NEW SPRITE
005EA4r 2               
005EA4r 2               ; first screen byte
005EA4r 2               
005EA4r 2               ddline_spraddr1:
005EA4r 2  BC FF FF     	ldy $ffff,x 		; graphic data.
005EA7r 2               ddline_shift1:
005EA7r 2  B9 FF FF     	lda $ffff,y
005EAAr 2  85 rr        	sta sprtmp
005EACr 2  25 rr        	and z80_c 			; mask away what's not needed.
005EAEr 2               
005EAEr 2  A0 00        	ldy #0
005EB0r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005EB2r 2  91 rr        	sta (scraddr),y 	; bung it in.
005EB4r 2               
005EB4r 2               ; carry to next screen byte
005EB4r 2               
005EB4r 2  A5 rr        	lda sprtmp			; fetch data.
005EB6r 2  25 rr        	and z80_b 			; mask away unwanted
005EB8r 2  85 rr        	sta sprtmp
005EBAr 2               
005EBAr 2               ; middle screen byte
005EBAr 2               
005EBAr 2  E8           	inx
005EBBr 2               ddline_spraddr2:
005EBBr 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005EBEr 2               ddline_shift2:
005EBEr 2  B9 FF FF     	lda $ffff,y
005EC1r 2  85 rr        	sta sprtmp2
005EC3r 2  25 rr        	and z80_c 			; mask away what's not needed.
005EC5r 2  05 rr        	ora sprtmp
005EC7r 2               
005EC7r 2  A0 10        	ldy #16
005EC9r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005ECBr 2  91 rr        	sta (scraddr),y 	; bung it in.
005ECDr 2               
005ECDr 2               ; carry to last screen byte
005ECDr 2               
005ECDr 2  A5 rr        	lda sprtmp2
005ECFr 2  25 rr        	and z80_b 			; mask away unwanted
005ED1r 2               
005ED1r 2  A0 20        	ldy #32
005ED3r 2  51 rr        	eor (scraddr),y 	; XOR with what's there.
005ED5r 2  91 rr        	sta (scraddr),y 	; bung it in.
005ED7r 2               
005ED7r 2               ; _BEEB next row
005ED7r 2               
005ED7r 2  A5 rr        	lda scraddr 		; get low byte of address.
005ED9r 2  29 0F        	and #15
005EDBr 2  C9 0F        	cmp #15				; is this last line of row?
005EDDr 2  F0 04        	beq :+
005EDFr 2               
005EDFr 2               	; within same row can't increment page
005EDFr 2  E6 rr        	inc scraddr			; new low byte of address.
005EE1r 2  D0 0D        	bne ddline2
005EE3r 2               
005EE3r 2               :
005EE3r 2  18           	clc
005EE4r 2  A5 rr        	lda scraddr
005EE6r 2  69 51        	adc #<(ScreenRowBytes-15)
005EE8r 2  85 rr        	sta scraddr			; new low byte of address.
005EEAr 2  A5 rr        	lda scraddr+1
005EECr 2  69 01        	adc #>(ScreenRowBytes-15)
005EEEr 2  85 rr        	sta scraddr+1		; new high byte of address.
005EF0r 2               
005EF0r 2               ; OLD SPRITE
005EF0r 2               
005EF0r 2               ddline2:
005EF0r 2               
005EF0r 2               ; still first row but different data!
005EF0r 2               
005EF0r 2  CA           	dex
005EF1r 2               
005EF1r 2               ; first screen byte
005EF1r 2               
005EF1r 2               ddline_spraddr3:
005EF1r 2  BC FF FF     	ldy $ffff,x			; graphic data.
005EF4r 2               ddline_shift3:
005EF4r 2  B9 FF FF     	lda $ffff,y
005EF7r 2  85 rr        	sta sprtmp
005EF9r 2  25 rr        	and z80_cp 			; mask away what's not needed.
005EFBr 2               
005EFBr 2  A0 00        	ldy #0
005EFDr 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
005EFFr 2  91 rr        	sta (z80_hlp),y 	; bung it in.
005F01r 2               
005F01r 2               ; carry to next screen byte
005F01r 2               
005F01r 2  A5 rr        	lda sprtmp			; fetch data.
005F03r 2  25 rr        	and z80_bp 			; mask away unwanted
005F05r 2  85 rr        	sta sprtmp
005F07r 2               
005F07r 2               ; middle screen byte
005F07r 2               
005F07r 2  E8           	inx
005F08r 2               ddline_spraddr4:
005F08r 2  BC FF FF     	ldy $ffff,x 		; second bit of data.
005F0Br 2               ddline_shift4:
005F0Br 2  B9 FF FF     	lda $ffff,y
005F0Er 2  85 rr        	sta sprtmp2
005F10r 2  25 rr        	and z80_cp 			; mask away what's not needed.
005F12r 2  05 rr        	ora sprtmp
005F14r 2               
005F14r 2  A0 10        	ldy #16
005F16r 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
005F18r 2  91 rr        	sta (z80_hlp),y 	; bung it in.
005F1Ar 2               
005F1Ar 2               ; last screen byte
005F1Ar 2               
005F1Ar 2  A5 rr        	lda sprtmp2			; fetch data.
005F1Cr 2  25 rr        	and z80_bp 			; mask away unwanted
005F1Er 2               
005F1Er 2  A0 20        	ldy #32
005F20r 2  51 rr        	eor (z80_hlp),y 	; XOR with what's there.
005F22r 2  91 rr        	sta (z80_hlp),y 	; bung it in.
005F24r 2               
005F24r 2               ; next row of sprite data
005F24r 2               
005F24r 2  E8           	inx
005F25r 2               
005F25r 2               ; _BEEB screen arrangement
005F25r 2               
005F25r 2  A5 rr        	lda z80_lp 			; get low byte of address.
005F27r 2  29 0F        	and #15
005F29r 2  C9 0F        	cmp #15				; is this last line of row?
005F2Br 2  F0 03        	beq :+
005F2Dr 2               
005F2Dr 2               	; within same row can't increment page
005F2Dr 2  E6 rr        	inc z80_lp			; new low byte of address.
005F2Fr 2  60           	rts
005F30r 2               
005F30r 2               :
005F30r 2  18           	clc
005F31r 2  A5 rr        	lda z80_lp
005F33r 2  69 51        	adc #<(ScreenRowBytes-15)
005F35r 2  85 rr        	sta z80_lp			; new low byte of address.
005F37r 2  A5 rr        	lda z80_lp+1
005F39r 2  69 01        	adc #>(ScreenRowBytes-15)
005F3Br 2  85 rr        	sta z80_lp+1		; new high byte of address.
005F3Dr 2  60           	rts
005F3Er 2               .endif
005F3Er 2               
005F3Er 2               ;----------------------------------------------------
005F3Er 2               ; Display character in A at dispx,dispy.
005F3Er 2               ;
005F3Er 2               ; Input:
005F3Er 2               ;  A 	   = character to print
005F3Er 2               ;----------------------------------------------------
005F3Er 2               
005F3Er 2               pchar:
005F3Er 2  85 rr        	sta fntaddr
005F40r 2  A9 00        	lda #0
005F42r 2  85 rr        	sta fntaddr+1
005F44r 2  06 rr        	asl fntaddr  		; multiply char by 8.
005F46r 2  26 rr        	rol fntaddr+1
005F48r 2  06 rr        	asl fntaddr
005F4Ar 2  26 rr        	rol fntaddr+1
005F4Cr 2  06 rr        	asl fntaddr
005F4Er 2  26 rr        	rol fntaddr+1
005F50r 2               
005F50r 2  A5 rr        	lda fntaddr
005F52r 2  18           	clc
005F53r 2  69 rr        	adc #<(FONT-256)
005F55r 2  85 rr        	sta fntaddr		; that's the low byte.
005F57r 2  A5 rr        	lda fntaddr+1
005F59r 2  69 rr        	adc #>(FONT-256)
005F5Br 2  85 rr        	sta fntaddr+1		; add displacement.
005F5Dr 2               
005F5Dr 2               pchark:
005F5Dr 2  20 rr rr     	jsr gaadd		; set colour attribute
005F60r 2  AD rr rr     	lda fontcol
005F63r 2  A0 00        	ldy #0
005F65r 2  91 rr        	sta (bufaddr),y
005F67r 2               
005F67r 2  20 rr rr     	jsr gprad		; get screen address.
005F6Ar 2  A2 07        	ldx #7			; lines to write.
005F6Cr 2               pchar0:
005F6Cr 2  A0 00        	ldy #0
005F6Er 2  B1 rr        	lda (fntaddr),y 	; get image byte.
005F70r 2  BC rr rr     	ldy scrtab,x		; Get rowoffset
005F73r 2               .if iflag
005F73r 2               	eor #TxtInvert		; Invert
005F73r 2               .endif
005F73r 2  91 rr        	sta (scraddr),y 	; copy to screen.
005F75r 2  E6 rr        	inc fntaddr		; next image byte.
005F77r 2  D0 02        	bne :+
005F79r 2  E6 rr        	inc fntaddr+1
005F7Br 2               :
005F7Br 2  CA           	dex			; next screen row down.
005F7Cr 2  10 EE        	bpl pchar0		; repeat.
005F7Er 2               
005F7Er 2  60           	rts
005F7Fr 2               
005F7Fr 2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
005F83r 2  03 02 01 00  
005F87r 2               
005F87r 2               
005F87r 1               	.include "z80.asm"
005F87r 2               ;------------------------------------------------------
005F87r 2               ; z80.asm
005F87r 2               ; spectrum stuff
005F87r 2               ; adresses
005F87r 2               
005F87r 2               ;ws	 = $60
005F87r 2               
005F87r 2               ;z80_f	 = ws+$00
005F87r 2               ;z80_a	 = ws+$01
005F87r 2               ;z80_af	 = z80_f
005F87r 2               
005F87r 2               ;z80_c	 = ws+$02
005F87r 2               ;z80_b	 = ws+$03
005F87r 2               ;z80_bc	 = z80_c
005F87r 2               
005F87r 2               ;z80_e	 = ws+$04
005F87r 2               ;z80_d	 = ws+$05
005F87r 2               ;z80_de	 = z80_e
005F87r 2               
005F87r 2               ;z80_l	 = ws+$06
005F87r 2               ;z80_h	 = ws+$07
005F87r 2               ;z80_hl	 = z80_l
005F87r 2               
005F87r 2               ;z80_x    = ws+$08
005F87r 2               ;z80_i    = ws+$09
005F87r 2               ;z80_ix	 = z80_x
005F87r 2               
005F87r 2               ;z80_iy	 = ws+$0a
005F87r 2               
005F87r 2               ;z80_fp	 = ws+$0c
005F87r 2               ;z80_ap	 = ws+$0d
005F87r 2               
005F87r 2               ;z80_cp	 = ws+$0e
005F87r 2               ;z80_bp	 = ws+$0f
005F87r 2               ;z80_bcp = z80_cp
005F87r 2               
005F87r 2               ;z80_ep	 = ws+$10
005F87r 2               ;z80_dp	 = ws+$11
005F87r 2               ;z80_dep = z80_ep
005F87r 2               
005F87r 2               ;z80_lp	 = ws+$12
005F87r 2               ;z80_hp	 = ws+$13
005F87r 2               ;z80_hlp = z80_lp
005F87r 2               
005F87r 2               ;z80_sp   = ws+$14
005F87r 2               
005F87r 2               ;z80_reg0 = ws+$16
005F87r 2               ;z80_reg1 = ws+$17
005F87r 2               ;z80_reg2 = ws+$18
005F87r 2               ;z80_reg3 = ws+$19
005F87r 2               
005F87r 2               ;z80_r	 = ws+$1a
005F87r 2               
005F87r 2               ; Contains seperatly 1 bit set
005F87r 2               ; _BEEB this is not safe memory to use as required by MOS
005F87r 2               
005F87r 2               _bitmem0	= $f8
005F87r 2               _bitmem1	= $f9
005F87r 2               _bitmem2	= $fa
005F87r 2               _bitmem3	= $fb
005F87r 2               _bitmem4	= $fc
005F87r 2               _bitmem5	= $fd
005F87r 2               _bitmem6	= $fe
005F87r 2               _bitmem7	= $ff
005F87r 2               
005F87r 2               ; constants
005F87r 2               _bitvalue0	= $01
005F87r 2               _bitvalue1	= $02
005F87r 2               _bitvalue2	= $04
005F87r 2               _bitvalue3	= $08
005F87r 2               _bitvalue4	= $10
005F87r 2               _bitvalue5	= $20
005F87r 2               _bitvalue6	= $40
005F87r 2               _bitvalue7	= $80
005F87r 2               
005F87r 2               _notbitvalue0	= $fe
005F87r 2               _notbitvalue1	= $fd
005F87r 2               _notbitvalue2	= $fb
005F87r 2               _notbitvalue3	= $f7
005F87r 2               _notbitvalue4	= $ef
005F87r 2               _notbitvalue5	= $df
005F87r 2               _notbitvalue6	= $bf
005F87r 2               _notbitvalue7	= $7f
005F87r 2               
005F87r 2               
005F87r 2               ;add_hl_bc:
005F87r 2               ;		lda z80_l
005F87r 2               ;		clc
005F87r 2               ;		adc z80_c
005F87r 2               ;		sta z80_l
005F87r 2               ;		lda z80_h
005F87r 2               ;		adc z80_b
005F87r 2               ;		sta z80_h
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;add_ix_de:
005F87r 2               ;		lda z80_ix
005F87r 2               ;		clc
005F87r 2               ;		adc z80_e
005F87r 2               ;		sta z80_ix
005F87r 2               ;		lda z80_ix+1
005F87r 2               ;		adc z80_d
005F87r 2               ;		sta z80_ix+1
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;add_iy_de:
005F87r 2               ;		lda z80_iy
005F87r 2               ;		clc
005F87r 2               ;		adc z80_e
005F87r 2               ;		sta z80_iy
005F87r 2               ;		lda z80_iy+1
005F87r 2               ;		adc z80_d
005F87r 2               ;		sta z80_iy+1
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;add_hl_de:
005F87r 2               ;		lda z80_l
005F87r 2               ;		clc
005F87r 2               ;		adc z80_e
005F87r 2               ;		sta z80_l
005F87r 2               ;		lda z80_h
005F87r 2               ;		adc z80_d
005F87r 2               ;		sta z80_h
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;add_ix_bc:
005F87r 2               ;		lda z80_ix
005F87r 2               ;		clc
005F87r 2               ;		adc z80_c
005F87r 2               ;		sta z80_ix
005F87r 2               ;		lda z80_ix+1
005F87r 2               ;		adc z80_b
005F87r 2               ;		sta z80_ix+1
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;add_iy_bc:
005F87r 2               ;		lda z80_iy
005F87r 2               ;		clc
005F87r 2               ;		adc z80_c
005F87r 2               ;		sta z80_iy
005F87r 2               ;		lda z80_iy+1
005F87r 2               ;		adc z80_b
005F87r 2               ;		sta z80_iy+1
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;sbc_hl_de:
005F87r 2               ;		lda z80_l
005F87r 2               ;		sbc z80_e
005F87r 2               ;		sta z80_l
005F87r 2               ;		lda z80_h
005F87r 2               ;		sbc z80_d
005F87r 2               ;		sta z80_h
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;sbc_hl_bc:
005F87r 2               ;		lda z80_l
005F87r 2               ;		sbc z80_c
005F87r 2               ;		sta z80_l
005F87r 2               ;		lda z80_h
005F87r 2               ;		sbc z80_b
005F87r 2               ;		sta z80_h
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;cmp_hl_bc:
005F87r 2               ;		lda z80_l
005F87r 2               ;		cmp z80_c
005F87r 2               ;		bne cmp_hl_bc_end
005F87r 2               ;		lda z80_h
005F87r 2               ;		cmp z80_b
005F87r 2               ;cmp_hl_bc_end:
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;cmp_iy_ix:
005F87r 2               ;		lda z80_iy
005F87r 2               ;		cmp z80_ix
005F87r 2               ;		bne cmp_iy_ix_end
005F87r 2               ;		lda z80_iy+1
005F87r 2               ;		cmp z80_ix+1
005F87r 2               ;cmp_iy_ix_end:
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;dec_hl:
005F87r 2               ;		lda z80_l
005F87r 2               ;		bne dec_hl_no_dec_h
005F87r 2               ;		dec z80_h
005F87r 2               ;dec_hl_no_dec_h:
005F87r 2               ;		dec z80_l
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;dec_ix:
005F87r 2               ;		lda z80_ix
005F87r 2               ;		bne dec_ix_no_dec_h
005F87r 2               ;		dec z80_ix+1
005F87r 2               ;dec_ix_no_dec_h:
005F87r 2               ;		dec z80_ix
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;dec_bc:
005F87r 2               ;		lda z80_c
005F87r 2               ;		bne dec_bc_no_dec_b
005F87r 2               ;		dec z80_b
005F87r 2               ;dec_bc_no_dec_b:
005F87r 2               ;		dec z80_c
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;dec_de:
005F87r 2               ;		lda z80_e
005F87r 2               ;		bne dec_de_no_dec_d
005F87r 2               ;		dec z80_d
005F87r 2               ;dec_de_no_dec_d:
005F87r 2               ;		dec z80_e
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               ;ex_af_afs:
005F87r 2               ;	rts
005F87r 2               ;ex_de_hl:
005F87r 2               ;		lda z80_e
005F87r 2               ;		ldx z80_l
005F87r 2               ;		stx z80_e
005F87r 2               ;		sta z80_l
005F87r 2               ;		lda z80_d
005F87r 2               ;		ldx z80_h
005F87r 2               ;		stx z80_d
005F87r 2               ;		sta z80_h
005F87r 2               ;		rts
005F87r 2               ;
005F87r 2               exx:
005F87r 2  A5 rr        		lda z80_c
005F89r 2  A4 rr        		ldy z80_cp
005F8Br 2  84 rr        		sty z80_c
005F8Dr 2  85 rr        		sta z80_cp
005F8Fr 2  A5 rr        		lda z80_b
005F91r 2  A4 rr        		ldy z80_bp
005F93r 2  84 rr        		sty z80_b
005F95r 2  85 rr        		sta z80_bp
005F97r 2  A5 rr        		lda z80_e
005F99r 2  A4 rr        		ldy z80_ep
005F9Br 2  84 rr        		sty z80_e
005F9Dr 2  85 rr        		sta z80_ep
005F9Fr 2  A5 rr        		lda z80_d
005FA1r 2  A4 rr        		ldy z80_dp
005FA3r 2  84 rr        		sty z80_d
005FA5r 2  85 rr        		sta z80_dp
005FA7r 2  A5 rr        		lda scraddr
005FA9r 2  A4 rr        		ldy z80_lp
005FABr 2  84 rr        		sty scraddr
005FADr 2  85 rr        		sta z80_lp
005FAFr 2  A5 rr        		lda scraddr+1
005FB1r 2  A4 rr        		ldy z80_hp
005FB3r 2  84 rr        		sty scraddr+1
005FB5r 2  85 rr        		sta z80_hp
005FB7r 2  60           		rts
005FB8r 2               
005FB8r 2               ;ex_sp_hl:
005FB8r 2               ;		tsx
005FB8r 2               ;		lda $0103,x
005FB8r 2               ;		ldy z80_h
005FB8r 2               ;		sta z80_h
005FB8r 2               ;		tya
005FB8r 2               ;		sta $0103,x
005FB8r 2               ;		lda $0104,x
005FB8r 2               ;		ldy z80_l
005FB8r 2               ;		sta z80_l
005FB8r 2               ;		tya
005FB8r 2               ;		sta $104,x
005FB8r 2               ;		rts
005FB8r 2               ;
005FB8r 2               ;ldi:
005FB8r 2               ;	rts
005FB8r 2               ;ldir:
005FB8r 2               ;		ldy #$00
005FB8r 2               ;		ldx z80_b
005FB8r 2               ;		beq ldir_last_page
005FB8r 2               ;ldir_loop:
005FB8r 2               ;		lda (z80_hl),y
005FB8r 2               ;		sta (z80_de),y
005FB8r 2               ;		iny
005FB8r 2               ;		bne ldir_loop
005FB8r 2               ;		inc z80_h
005FB8r 2               ;		inc z80_d
005FB8r 2               ;		dex
005FB8r 2               ;		bne ldir_loop
005FB8r 2               ;ldir_last_page:
005FB8r 2               ;		lda z80_c
005FB8r 2               ;		beq ldir_end
005FB8r 2               ;ldir_last_page_loop:
005FB8r 2               ;		lda (z80_hl),y
005FB8r 2               ;		sta (z80_de),y
005FB8r 2               ;		iny
005FB8r 2               ;		cpy z80_c
005FB8r 2               ;		bne ldir_last_page_loop
005FB8r 2               ;ldir_end:
005FB8r 2               ;		stx z80_c
005FB8r 2               ;		stx z80_b
005FB8r 2               ;		tya
005FB8r 2               ;		clc
005FB8r 2               ;		adc z80_l
005FB8r 2               ;		sta z80_l
005FB8r 2               ;		bcc *+4
005FB8r 2               ;		inc z80_h
005FB8r 2               ;		tya
005FB8r 2               ;		clc
005FB8r 2               ;		adc z80_e
005FB8r 2               ;		sta z80_e
005FB8r 2               ;		bcc *+4
005FB8r 2               ;		inc z80_d
005FB8r 2               ;		rts
005FB8r 2               ;
005FB8r 2               ;lddr:		ldy #$00
005FB8r 2               ;lddr_loop:
005FB8r 2               ;		lda (z80_hl),y
005FB8r 2               ;		sta (z80_de),y
005FB8r 2               ;		jsr dec_hl
005FB8r 2               ;		jsr dec_de
005FB8r 2               ;		jsr dec_bc
005FB8r 2               ;		lda z80_b
005FB8r 2               ;		ora z80_c
005FB8r 2               ;		bne lddr_loop
005FB8r 2               ;		rts
005FB8r 2               ;ei:
005FB8r 2               ;		rts
005FB8r 2               ;di:
005FB8r 2               ;		rts
005FB8r 2               
005FB8r 2               ;-------------------------------------------------------------
005FB8r 2               ; Set bits in bitmem
005FB8r 2               ;-------------------------------------------------------------
005FB8r 2               
005FB8r 2               .if 0
005FB8r 2               z80_init:
005FB8r 2               	ldx #$00
005FB8r 2               	lda #$01
005FB8r 2               z80_init_loop:
005FB8r 2               	sta _bitmem0,x
005FB8r 2               	inx
005FB8r 2               	asl a
005FB8r 2               	bne z80_init_loop
005FB8r 2               	rts
005FB8r 2               .endif
005FB8r 2               
005FB8r 2               push_af:
005FB8r 2               push_bc:
005FB8r 2               push_de:
005FB8r 2               push_hl:
005FB8r 2               
005FB8r 2               pop_af:
005FB8r 2               pop_bc:
005FB8r 2               pop_de:
005FB8r 2               pop_ix:
005FB8r 2               pop_hl:
005FB8r 2               
005FB8r 2               add_hl_hl:
005FB8r 2               
005FB8r 2               inc_bc:
005FB8r 2               inc_de:
005FB8r 2               inc_hl:
005FB8r 2               inc_ix:
005FB8r 2               inc_sp:
005FB8r 2               
005FB8r 2               cpir:
005FB8r 2               
005FB8r 2               ex_af_af:
005FB8r 2               ;	rts
005FB8r 2               
005FB8r 1               
005FB8r 1               eind_asm:
005FB8r 1               eop:					; End Of Program
005FB8r 1               
005FB8r 1               .out .sprintf("Gamecode size = %d bytes, free space = %d bytes", (eind_asm - main),(24576-eind_asm + main))
005FB8r 1               
