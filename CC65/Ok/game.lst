ca65 V2.13.3 - (C) Copyright 1998-2012 Ullrich von Bassewitz
Main file   : game.asm
Current file: game.asm

000000r 1               ;----------------------------------------------
000000r 1               ; BBC AGD Engine
000000r 1               ; Z80 conversion by Kees van Oss 2017
000000r 1               ; BBC Micro version by Kieran Connell 2018
000000r 1               ;----------------------------------------------
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ;BBC configuration
000000r 1               
000000r 1               swrflag	= 0				; SW RAM
000000r 1               scrchar = 32				; chars/line
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               .DEFINE asm_code 	$2600		; assembly address _BEEB
000000r 1               .DEFINE load_address 	$2600		; load address _BEEB
000000r 1               
000000r 1               .if swrflag
000000r 1               	.DEFINE data_address $8000	; data address _SWRAM
000000r 1               .endif
000000r 1               	.include "game.cfg"
000000r 2               ; Flags saved by AGD Compiler
000000r 2               
000000r 2               mflag = 0 ;
000000r 2               pflag = 0 ;
000000r 2               sflag = 0 ;
000000r 2               dflag = 0 ;
000000r 2               cflag = 0 ;
000000r 2               oflag = 1 ;
000000r 2               lflag = 1 ;
000000r 2               bflag = 0 ;
000000r 2               rflag = 0 ;
000000r 2               kflag = 0 ;
000000r 2               
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ; BBC MICRO PLATFORM DEFINES
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               ; _BEEB MOS calls
000000r 1               
000000r 1               	OSBYTE	 = $fff4
000000r 1               	OSFILE	 = $ffdd
000000r 1               	OSWRCH	 = $ffee
000000r 1               	OSASCI	 = $ffe3
000000r 1               	OSWORD	 = $fff1
000000r 1               	OSFIND	 = $ffce
000000r 1               	OSGBPB	 = $ffd1
000000r 1               	OSARGS	 = $ffda
000000r 1               
000000r 1               	EVENTV	 = $0220
000000r 1               
000000r 1               	PAL_black = 0 ^ 7
000000r 1               	PAL_white = 7 ^ 7
000000r 1               
000000r 1               ; System constants
000000r 1               
000000r 1               	ScreenSize	= scrchar*24*8		; Startaddress video RAM _BEEB
000000r 1               	ScreenAddr 	= $0e00			; Screen size bytes _BEEB
000000r 1               	ScreenRowBytes	= scrchar*8		; columns
000000r 1               	SpriteMaxY	= 177			; used for clipping bottom of screen
000000r 1               
000000r 1               ; AGD Engine Workspace
000000r 1               
000000r 1               	MAP 		= $300				; properties map buffer (3x256 bytes)
000000r 1               	SCADTB_lb	= MAP + $300
000000r 1               	SCADTB_hb	= SCADTB_lb + $100
000000r 1               .if pflag
000000r 1                   SHRAPN 		= $B00 - (NUMSHR * SHRSIZ)	; shrapnel table (55x6 bytes)
000000r 1               .endif
000000r 1               	sprtab		= $B00				; NUMSPR*TABSIZ
000000r 1               
000000r 1               ;----------------------------------------------------------------------
000000r 1               ; ZERO PAGE SEGMENT
000000r 1               ;----------------------------------------------------------------------
000000r 1               
000000r 1               .segment "ZEROPAGE"
000000r 1               
000000r 1               .include "z80-zp.inc"
000000r 2               ;ws	 = $60
000000r 2               
000000r 2  xx           z80_f: .res 1;	 = ws+$00
000001r 2  xx           z80_a: .res 1;	 = ws+$01
000002r 2               z80_af	 = z80_f
000002r 2               
000002r 2  xx           z80_c: .res 1;	 = ws+$02
000003r 2  xx           z80_b: .res 1;	 = ws+$03
000004r 2               z80_bc	 = z80_c
000004r 2               
000004r 2  xx           z80_e: .res 1;	 = ws+$04
000005r 2  xx           z80_d: .res 1;	 = ws+$05
000006r 2               z80_de	 = z80_e
000006r 2               
000006r 2  xx           z80_l: .res 1;	 = ws+$06
000007r 2  xx           z80_h: .res 1;	 = ws+$07
000008r 2               z80_hl	 = z80_l
000008r 2               
000008r 2  xx           z80_x: .res 1;    = ws+$08
000009r 2  xx           z80_i: .res 1;    = ws+$09
00000Ar 2               z80_ix	 = z80_x
00000Ar 2               
00000Ar 2  xx xx        z80_iy: .res 2;	 = ws+$0a
00000Cr 2               
00000Cr 2  xx           z80_fp: .res 1;	 = ws+$0c
00000Dr 2  xx           z80_ap: .res 1;	 = ws+$0d
00000Er 2               
00000Er 2  xx           z80_cp: .res 1;	 = ws+$0e
00000Fr 2  xx           z80_bp: .res 1;	 = ws+$0f
000010r 2               z80_bcp	 = z80_cp
000010r 2               
000010r 2  xx           z80_ep: .res 1;	 = ws+$10
000011r 2  xx           z80_dp: .res 1;	 = ws+$11
000012r 2               z80_dep	 = z80_ep
000012r 2               
000012r 2  xx           z80_lp: .res 1;	 = ws+$12
000013r 2  xx           z80_hp: .res 1;	 = ws+$13
000014r 2               z80_hlp	 = z80_lp
000014r 2               
000014r 2  xx xx        z80_sp: .res 2;   = ws+$14
000016r 2               
000016r 2  xx           z80_reg0: .res 1; = ws+$16
000017r 2  xx           z80_reg1: .res 1; = ws+$17
000018r 2  xx           z80_reg2: .res 1; = ws+$18
000019r 2  xx           z80_reg3: .res 1; = ws+$19
00001Ar 2               
00001Ar 2               ;z80_r: .res 1;	 = ws+$1a
00001Ar 2               
00001Ar 1               .include "engine-zp.inc"
00001Ar 2               ;----------------------------------------------------------------------
00001Ar 2               ; AGD 6502 Engine Zero Page Variables
00001Ar 2               ;----------------------------------------------------------------------
00001Ar 2               
00001Ar 2               ; Variables start here.
00001Ar 2               
00001Ar 2  xx           scno:	.res 1			; present screen number.
00001Br 2  xx           numlif:	.res 1			; number of lives.
00001Cr 2               
00001Cr 2  xx           vara:	.res 1			; general-purpose variable.
00001Dr 2  xx           varb:	.res 1			; general-purpose variable.
00001Er 2  xx           varc:	.res 1			; general-purpose variable.
00001Fr 2  xx           vard:	.res 1			; general-purpose variable.
000020r 2  xx           vare:	.res 1			; general-purpose variable.
000021r 2  xx           varf:	.res 1			; general-purpose variable.
000022r 2  xx           varg:	.res 1			; general-purpose variable.
000023r 2  xx           varh:	.res 1			; general-purpose variable.
000024r 2  xx           vari:	.res 1			; general-purpose variable.
000025r 2  xx           varj:	.res 1			; general-purpose variable.
000026r 2  xx           vark:	.res 1			; general-purpose variable.
000027r 2  xx           varl:	.res 1			; general-purpose variable.
000028r 2  xx           varm:	.res 1			; general-purpose variable.
000029r 2  xx           varn:	.res 1			; general-purpose variable.
00002Ar 2  xx           varo:	.res 1			; general-purpose variable.
00002Br 2  xx           varp:	.res 1			; general-purpose variable.
00002Cr 2  xx           varq:	.res 1			; general-purpose variable.
00002Dr 2  xx           varr:	.res 1			; general-purpose variable.
00002Er 2  xx           vars:	.res 1			; general-purpose variable.
00002Fr 2  xx           vart:	.res 1			; general-purpose variable.
000030r 2  xx           varu:	.res 1			; general-purpose variable.
000031r 2  xx           varv:	.res 1			; general-purpose variable.
000032r 2  xx           varw:	.res 1			; general-purpose variable.
000033r 2  xx           varz:	.res 1			; general-purpose variable.
000034r 2               
000034r 2  xx           charx:	.res 1			; cursor x position.
000035r 2  xx           chary:	.res 1			; cursor y position.
000036r 2               
000036r 2  xx           clock:	.res 1			; last clock reading.
000037r 2  xx           varrnd:	.res 1	        ; last random number.
000038r 2  xx           varobj:	.res 1  	    ; last object number.
000039r 2  xx           varopt:	.res 1     		; last option chosen from menu.
00003Ar 2  xx           varblk:	.res 1  		; block type.
00003Br 2  xx           nexlev:	.res 1			; next level flag.
00003Cr 2  xx           restfl:	.res 1			; restart screen flag.
00003Dr 2  xx           deadf:	.res 1			; dead flag.
00003Er 2  xx           gamwon:	.res 1			; game won flag.
00003Fr 2  xx           dispx:	.res 1			; cursor x position.
000040r 2  xx           dispy:	.res 1			; cursor y position.
000041r 2               
000041r 2  xx           contrl:	.res 1			; control = keyboard, 1 = Kempston, 2 = Sinclair, 3 = Mouse.
000042r 2  xx           joyval:	.res 1			; joystick reading.
000043r 2  xx           frmno:	.res 1			; selected frame.
000044r 2               
000044r 2               ;----------------------------------------------------
000044r 2               ; Missing vars
000044r 2               ;----------------------------------------------------
000044r 2               
000044r 2  xx           loopa:		.res 1
000045r 2  xx           loopb:		.res 1
000046r 2  xx           loopc:		.res 1
000047r 2  xx xx        FontPtr:    .res 2
000049r 2               
000049r 2               ; Local vars
000049r 2               
000049r 2  xx xx        scraddr:    .res 2
00004Br 2  xx xx        fntaddr:    .res 2
00004Dr 2  xx xx        tileaddr:   .res 2
00004Fr 2  xx xx        bufaddr:    .res 2
000051r 2               
000051r 2  xx xx        tmp:        .res 2
000053r 2  xx xx        scr_l:      .res 2
000055r 2  xx xx        scr_r:      .res 2
000057r 2  xx xx        scr_txt:    .res 2
000059r 2               
000059r 2  xx           xtmp:	    .res 1
00005Ar 2  xx           spcnt:	    .res 1
00005Br 2  xx xx        spptr:	    .res 2		; spawned sprite pointer.
00005Dr 2  xx           seed:	    .res 1		; seed for random numbers.
00005Er 2               
00005Er 2  xx           ccnt:       .res 1
00005Fr 2  xx           flag:	    .res 1
000060r 2  xx           rcol:	    .res 1
000061r 2  xx           rrow:	    .res 1
000062r 2               
000062r 2  xx           combyt:	    .res 1		; byte type compressed.
000063r 2  xx           comcnt:	    .res 1		; compression counter.
000064r 2  xx           prtmod:	    .res 1      ; print mode, 0 = standard, 1 = double-height.
000065r 2  xx           qscnt:	    .res 1
000066r 2               
000066r 2  xx           sprptr:	    .res 1      ; not a ptr
000067r 2  xx           sprcnt:	    .res 1
000068r 2               
000068r 2  xx xx        skptr:	    .res 2		; search pointer.
00006Ar 2  xx           sktptr:	    .res 1      ; not a ptr
00006Br 2  xx           tmproom:	.res 1
00006Cr 2  xx xx        ogptr:	    .res 2		; original sprite pointer.
00006Er 2               
00006Er 2  xx xx xx     spr:	    .res 3      ; static sprite data
000071r 2  xx           vsync_count:.res 1
000072r 2  xx           colpatt:	.res 1
000073r 2  xx           sprtmp:     .res 1
000074r 2  xx           sprtmp2:    .res 1
000075r 2  xx           sprshft:    .res 1
000076r 2               
000076r 2  xx           spriteink:  .res 1
000077r 2  xx           colour_byte:.res 1
000078r 2  xx           colour_xor: .res 1
000079r 2               
000079r 2               .if mflag
000079r 2               TmpAddr:	.res 2
000079r 2               bwid:	    .res 1     ; box/menu width.
000079r 2               blen:	    .res 1     ; box/menu height.
000079r 2               btop:	    .res 1     ; box coordinates.
000079r 2               blft:	    .res 1
000079r 2               .endif
000079r 2               
000079r 2               .if pflag
000079r 2               shrctr:	    .res 1
000079r 2               explcnt:	.res 1
000079r 2               seed3:	    .res 1
000079r 2               .endif
000079r 2               
000079r 2               .if aflag
000079r 2               pbptr:      .res 2
000079r 2               .endif
000079r 2               
000079r 2  xx           tmp1:       .res 1
00007Ar 2  xx           tmp2:       .res 1
00007Br 2               
00007Br 1               
00007Br 1               ;----------------------------------------------------------------------
00007Br 1               ; ZCODE SEGMENT
00007Br 1               ;----------------------------------------------------------------------
00007Br 1               
00007Br 1               .segment "CODE"
000000r 1               .org asm_code
002600  1               
002600  1               start_asm:
002600  1               
002600  1  4C 0B A2     	jmp relocate + load_address - asm_code
002603  1               
002603  1               boot_game:
002603  1               
002603  1               ; Zero ZP vars
002603  1               
002603  1               clear_zp:
002603  1  A2 00        	ldx #0
002605  1  8A           	txa
002606  1               	:
002606  1  95 00        	sta $00, x
002608  1  E8           	inx
002609  1  E0 A0        	cpx #$a0
00260B  1  D0 F9        	bne :-
00260D  1               
00260D  1               	; Init non-zero vars
00260D  1  A9 03        	lda #3
00260F  1  85 rr        	sta numlif
002611  1               
002611  1  A2 FF        	ldx #255
002613  1  86 rr        	stx varrnd
002615  1  86 rr        	stx varopt
002617  1  86 rr        	stx varblk
002619  1  CA           	dex
00261A  1  86 rr        	stx varobj
00261C  1               
00261C  1  20 84 26     	jsr bbcinit
00261F  1               
00261F  1               	; Call AGD Engine start game
00261F  1  20 FD 28     	jsr start_game
002622  1               
002622  1  20 A3 26     	jsr bbckill
002625  1               
002625  1                   ; Wait for keypress
002625  1  A2 FF        	ldx #$ff
002627  1  A0 7F        	ldy #$7f
002629  1  A9 81        	lda #$81
00262B  1  20 F4 FF     	jsr OSBYTE
00262E  1               
00262E  1               	; Restart or exit
00262E  1  4C 03 26     	jmp boot_game
002631  1               
002631  1               ;----------------------------------------------------------------------
002631  1               ; PLATFORM SPECIFIC ENGINE CODE
002631  1               ;----------------------------------------------------------------------
002631  1               
002631  1               	.include "z80.asm"
002631  2               ;------------------------------------------------------
002631  2               ; z80.asm
002631  2               ; spectrum stuff
002631  2               ; adresses
002631  2               
002631  2               ;ws	 = $60
002631  2               
002631  2               ;z80_f	 = ws+$00
002631  2               ;z80_a	 = ws+$01
002631  2               ;z80_af	 = z80_f
002631  2               
002631  2               ;z80_c	 = ws+$02
002631  2               ;z80_b	 = ws+$03
002631  2               ;z80_bc	 = z80_c
002631  2               
002631  2               ;z80_e	 = ws+$04
002631  2               ;z80_d	 = ws+$05
002631  2               ;z80_de	 = z80_e
002631  2               
002631  2               ;z80_l	 = ws+$06
002631  2               ;z80_h	 = ws+$07
002631  2               ;z80_hl	 = z80_l
002631  2               
002631  2               ;z80_x    = ws+$08
002631  2               ;z80_i    = ws+$09
002631  2               ;z80_ix	 = z80_x
002631  2               
002631  2               ;z80_iy	 = ws+$0a
002631  2               
002631  2               ;z80_fp	 = ws+$0c
002631  2               ;z80_ap	 = ws+$0d
002631  2               
002631  2               ;z80_cp	 = ws+$0e
002631  2               ;z80_bp	 = ws+$0f
002631  2               ;z80_bcp = z80_cp
002631  2               
002631  2               ;z80_ep	 = ws+$10
002631  2               ;z80_dp	 = ws+$11
002631  2               ;z80_dep = z80_ep
002631  2               
002631  2               ;z80_lp	 = ws+$12
002631  2               ;z80_hp	 = ws+$13
002631  2               ;z80_hlp = z80_lp
002631  2               
002631  2               ;z80_sp   = ws+$14
002631  2               
002631  2               ;z80_reg0 = ws+$16
002631  2               ;z80_reg1 = ws+$17
002631  2               ;z80_reg2 = ws+$18
002631  2               ;z80_reg3 = ws+$19
002631  2               
002631  2               ;z80_r	 = ws+$1a
002631  2               
002631  2               ; Contains seperatly 1 bit set
002631  2               ; _BEEB this is not safe memory to use as required by MOS
002631  2               
002631  2               _bitmem0	= $f8
002631  2               _bitmem1	= $f9
002631  2               _bitmem2	= $fa
002631  2               _bitmem3	= $fb
002631  2               _bitmem4	= $fc
002631  2               _bitmem5	= $fd
002631  2               _bitmem6	= $fe
002631  2               _bitmem7	= $ff
002631  2               
002631  2               ; constants
002631  2               _bitvalue0	= $01
002631  2               _bitvalue1	= $02
002631  2               _bitvalue2	= $04
002631  2               _bitvalue3	= $08
002631  2               _bitvalue4	= $10
002631  2               _bitvalue5	= $20
002631  2               _bitvalue6	= $40
002631  2               _bitvalue7	= $80
002631  2               
002631  2               _notbitvalue0	= $fe
002631  2               _notbitvalue1	= $fd
002631  2               _notbitvalue2	= $fb
002631  2               _notbitvalue3	= $f7
002631  2               _notbitvalue4	= $ef
002631  2               _notbitvalue5	= $df
002631  2               _notbitvalue6	= $bf
002631  2               _notbitvalue7	= $7f
002631  2               
002631  2               
002631  2               ;add_hl_bc:
002631  2               ;		lda z80_l
002631  2               ;		clc
002631  2               ;		adc z80_c
002631  2               ;		sta z80_l
002631  2               ;		lda z80_h
002631  2               ;		adc z80_b
002631  2               ;		sta z80_h
002631  2               ;		rts
002631  2               ;
002631  2               ;add_ix_de:
002631  2               ;		lda z80_ix
002631  2               ;		clc
002631  2               ;		adc z80_e
002631  2               ;		sta z80_ix
002631  2               ;		lda z80_ix+1
002631  2               ;		adc z80_d
002631  2               ;		sta z80_ix+1
002631  2               ;		rts
002631  2               ;
002631  2               ;add_iy_de:
002631  2               ;		lda z80_iy
002631  2               ;		clc
002631  2               ;		adc z80_e
002631  2               ;		sta z80_iy
002631  2               ;		lda z80_iy+1
002631  2               ;		adc z80_d
002631  2               ;		sta z80_iy+1
002631  2               ;		rts
002631  2               ;
002631  2               ;add_hl_de:
002631  2               ;		lda z80_l
002631  2               ;		clc
002631  2               ;		adc z80_e
002631  2               ;		sta z80_l
002631  2               ;		lda z80_h
002631  2               ;		adc z80_d
002631  2               ;		sta z80_h
002631  2               ;		rts
002631  2               ;
002631  2               ;add_ix_bc:
002631  2               ;		lda z80_ix
002631  2               ;		clc
002631  2               ;		adc z80_c
002631  2               ;		sta z80_ix
002631  2               ;		lda z80_ix+1
002631  2               ;		adc z80_b
002631  2               ;		sta z80_ix+1
002631  2               ;		rts
002631  2               ;
002631  2               ;add_iy_bc:
002631  2               ;		lda z80_iy
002631  2               ;		clc
002631  2               ;		adc z80_c
002631  2               ;		sta z80_iy
002631  2               ;		lda z80_iy+1
002631  2               ;		adc z80_b
002631  2               ;		sta z80_iy+1
002631  2               ;		rts
002631  2               ;
002631  2               ;sbc_hl_de:
002631  2               ;		lda z80_l
002631  2               ;		sbc z80_e
002631  2               ;		sta z80_l
002631  2               ;		lda z80_h
002631  2               ;		sbc z80_d
002631  2               ;		sta z80_h
002631  2               ;		rts
002631  2               ;
002631  2               ;sbc_hl_bc:
002631  2               ;		lda z80_l
002631  2               ;		sbc z80_c
002631  2               ;		sta z80_l
002631  2               ;		lda z80_h
002631  2               ;		sbc z80_b
002631  2               ;		sta z80_h
002631  2               ;		rts
002631  2               ;
002631  2               ;cmp_hl_bc:
002631  2               ;		lda z80_l
002631  2               ;		cmp z80_c
002631  2               ;		bne cmp_hl_bc_end
002631  2               ;		lda z80_h
002631  2               ;		cmp z80_b
002631  2               ;cmp_hl_bc_end:
002631  2               ;		rts
002631  2               ;
002631  2               ;cmp_iy_ix:
002631  2               ;		lda z80_iy
002631  2               ;		cmp z80_ix
002631  2               ;		bne cmp_iy_ix_end
002631  2               ;		lda z80_iy+1
002631  2               ;		cmp z80_ix+1
002631  2               ;cmp_iy_ix_end:
002631  2               ;		rts
002631  2               ;
002631  2               ;dec_hl:
002631  2               ;		lda z80_l
002631  2               ;		bne dec_hl_no_dec_h
002631  2               ;		dec z80_h
002631  2               ;dec_hl_no_dec_h:
002631  2               ;		dec z80_l
002631  2               ;		rts
002631  2               ;
002631  2               ;dec_ix:
002631  2               ;		lda z80_ix
002631  2               ;		bne dec_ix_no_dec_h
002631  2               ;		dec z80_ix+1
002631  2               ;dec_ix_no_dec_h:
002631  2               ;		dec z80_ix
002631  2               ;		rts
002631  2               ;
002631  2               ;dec_bc:
002631  2               ;		lda z80_c
002631  2               ;		bne dec_bc_no_dec_b
002631  2               ;		dec z80_b
002631  2               ;dec_bc_no_dec_b:
002631  2               ;		dec z80_c
002631  2               ;		rts
002631  2               ;
002631  2               ;dec_de:
002631  2               ;		lda z80_e
002631  2               ;		bne dec_de_no_dec_d
002631  2               ;		dec z80_d
002631  2               ;dec_de_no_dec_d:
002631  2               ;		dec z80_e
002631  2               ;		rts
002631  2               ;
002631  2               ;ex_af_afs:
002631  2               ;	rts
002631  2               ;ex_de_hl:
002631  2               ;		lda z80_e
002631  2               ;		ldx z80_l
002631  2               ;		stx z80_e
002631  2               ;		sta z80_l
002631  2               ;		lda z80_d
002631  2               ;		ldx z80_h
002631  2               ;		stx z80_d
002631  2               ;		sta z80_h
002631  2               ;		rts
002631  2               ;
002631  2               exx:
002631  2  A5 rr        		lda z80_c
002633  2  A4 rr        		ldy z80_cp
002635  2  84 rr        		sty z80_c
002637  2  85 rr        		sta z80_cp
002639  2  A5 rr        		lda z80_b
00263B  2  A4 rr        		ldy z80_bp
00263D  2  84 rr        		sty z80_b
00263F  2  85 rr        		sta z80_bp
002641  2  A5 rr        		lda z80_e
002643  2  A4 rr        		ldy z80_ep
002645  2  84 rr        		sty z80_e
002647  2  85 rr        		sta z80_ep
002649  2  A5 rr        		lda z80_d
00264B  2  A4 rr        		ldy z80_dp
00264D  2  84 rr        		sty z80_d
00264F  2  85 rr        		sta z80_dp
002651  2  A5 rr        		lda scraddr
002653  2  A4 rr        		ldy z80_lp
002655  2  84 rr        		sty scraddr
002657  2  85 rr        		sta z80_lp
002659  2  A5 rr        		lda scraddr+1
00265B  2  A4 rr        		ldy z80_hp
00265D  2  84 rr        		sty scraddr+1
00265F  2  85 rr        		sta z80_hp
002661  2  60           		rts
002662  2               
002662  2               ;ex_sp_hl:
002662  2               ;		tsx
002662  2               ;		lda $0103,x
002662  2               ;		ldy z80_h
002662  2               ;		sta z80_h
002662  2               ;		tya
002662  2               ;		sta $0103,x
002662  2               ;		lda $0104,x
002662  2               ;		ldy z80_l
002662  2               ;		sta z80_l
002662  2               ;		tya
002662  2               ;		sta $104,x
002662  2               ;		rts
002662  2               ;
002662  2               ;ldi:
002662  2               ;	rts
002662  2               ;ldir:
002662  2               ;		ldy #$00
002662  2               ;		ldx z80_b
002662  2               ;		beq ldir_last_page
002662  2               ;ldir_loop:
002662  2               ;		lda (z80_hl),y
002662  2               ;		sta (z80_de),y
002662  2               ;		iny
002662  2               ;		bne ldir_loop
002662  2               ;		inc z80_h
002662  2               ;		inc z80_d
002662  2               ;		dex
002662  2               ;		bne ldir_loop
002662  2               ;ldir_last_page:
002662  2               ;		lda z80_c
002662  2               ;		beq ldir_end
002662  2               ;ldir_last_page_loop:
002662  2               ;		lda (z80_hl),y
002662  2               ;		sta (z80_de),y
002662  2               ;		iny
002662  2               ;		cpy z80_c
002662  2               ;		bne ldir_last_page_loop
002662  2               ;ldir_end:
002662  2               ;		stx z80_c
002662  2               ;		stx z80_b
002662  2               ;		tya
002662  2               ;		clc
002662  2               ;		adc z80_l
002662  2               ;		sta z80_l
002662  2               ;		bcc *+4
002662  2               ;		inc z80_h
002662  2               ;		tya
002662  2               ;		clc
002662  2               ;		adc z80_e
002662  2               ;		sta z80_e
002662  2               ;		bcc *+4
002662  2               ;		inc z80_d
002662  2               ;		rts
002662  2               ;
002662  2               ;lddr:		ldy #$00
002662  2               ;lddr_loop:
002662  2               ;		lda (z80_hl),y
002662  2               ;		sta (z80_de),y
002662  2               ;		jsr dec_hl
002662  2               ;		jsr dec_de
002662  2               ;		jsr dec_bc
002662  2               ;		lda z80_b
002662  2               ;		ora z80_c
002662  2               ;		bne lddr_loop
002662  2               ;		rts
002662  2               ;ei:
002662  2               ;		rts
002662  2               ;di:
002662  2               ;		rts
002662  2               
002662  2               ;-------------------------------------------------------------
002662  2               ; Set bits in bitmem
002662  2               ;-------------------------------------------------------------
002662  2               
002662  2               .if 0
002662  2               z80_init:
002662  2               	ldx #$00
002662  2               	lda #$01
002662  2               z80_init_loop:
002662  2               	sta _bitmem0,x
002662  2               	inx
002662  2               	asl a
002662  2               	bne z80_init_loop
002662  2               	rts
002662  2               .endif
002662  2               
002662  2               push_af:
002662  2               push_bc:
002662  2               push_de:
002662  2               push_hl:
002662  2               
002662  2               pop_af:
002662  2               pop_bc:
002662  2               pop_de:
002662  2               pop_ix:
002662  2               pop_hl:
002662  2               
002662  2               add_hl_hl:
002662  2               
002662  2               inc_bc:
002662  2               inc_de:
002662  2               inc_hl:
002662  2               inc_ix:
002662  2               inc_sp:
002662  2               
002662  2               cpir:
002662  2               
002662  2               ex_af_af:
002662  2               ;	rts
002662  2               
002662  1               	.include "bbc.inc"
002662  2               ;----------------------------------------------------------------------
002662  2               ; BBC Platform Specific functions
002662  2               ;----------------------------------------------------------------------
002662  2               
002662  2               ;--------------------------------------------------------
002662  2               ; Keys
002662  2               ;
002662  2               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
002662  2               ;             ||||||||
002662  2               ;             |||||||+> Right    KEY 0  - X
002662  2               ;             ||||||+-> Left     KEY 1  - Z
002662  2               ;             |||||+--> Down     KEY 2  - .
002662  2               ;             ||||+---> Up       KEY 3  - ;
002662  2               ;             |||+----> Fire1    KEY 4  - SPC
002662  2               ;             ||+-----> Fire2    KEY 5  - Q
002662  2               ;             |+------> Fire3    KEY 6  - P
002662  2               ;             +-------> Not used
002662  2               ;
002662  2               ;                       Option1  KEY 7  - 1
002662  2               ;                       Option2  KEY 8  - 2
002662  2               ;                       Option3  KEY 9  - 3
002662  2               ;                       Option4  KEY 10 - 4
002662  2               ;--------------------------------------------------------
002662  2               
002662  2               ;              X   Z   .   ;  SPC  Q   P
002662  2               ;keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
002662  2               ;        .byte $30,$31,$11,$12                   ; menu options.
002662  2               
002662  2  42 61 68 48  jkeys:  .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
002666  2  62 10 37     
002669  2  30 31 11 12          .byte $30,$31,$11,$12                   ; menu options.
00266D  2               
00266D  2               ;----------------------------------------------------
00266D  2               ; Wait for keypress.
00266D  2               ;----------------------------------------------------
00266D  2               
00266D  2               prskey:
00266D  2  8A           	txa
00266E  2  48           	pha
00266F  2               prsloop:
00266F  2  20 24 27     	jsr vsync
002672  2               
002672  2  A9 79        	lda #$79
002674  2  A2 01        	ldx #$01
002676  2  20 F4 FF     	jsr OSBYTE
002679  2               
002679  2  E0 FF        	cpx #$ff
00267B  2  F0 F2        	beq prsloop		; wait until key pressed
00267D  2  8A           	txa
00267E  2  20 85 32     	jsr joykey
002681  2  68           	pla
002682  2  AA           	tax
002683  2  60           	rts
002684  2               
002684  2               bbcinit:
002684  2  78           	sei
002685  2  AD 20 02     	lda EVENTV
002688  2  8D B8 26     	sta old_eventv
00268B  2  AD 21 02     	lda EVENTV+1
00268E  2  8D B9 26     	sta old_eventv+1
002691  2               
002691  2  A9 BA        	lda #<event_handler
002693  2  8D 20 02     	sta EVENTV
002696  2  A9 26        	lda #>event_handler
002698  2  8D 21 02     	sta EVENTV+1
00269B  2  58           	cli
00269C  2               
00269C  2               	; Enable VSYNC event.
00269C  2  A9 0E        	lda #14
00269E  2  A2 04        	ldx #4
0026A0  2  4C F4 FF     	jmp OSBYTE
0026A3  2               
0026A3  2               bbckill:
0026A3  2  78           	sei
0026A4  2  AD B8 26     	lda old_eventv
0026A7  2  8D 20 02     	sta EVENTV
0026AA  2  AD B9 26     	lda old_eventv+1
0026AD  2  8D 21 02     	sta EVENTV+1
0026B0  2  58           	cli
0026B1  2               
0026B1  2               	; Disable VSYNC event.
0026B1  2  A9 0D        	lda #13
0026B3  2  A2 04        	ldx #4
0026B5  2  4C F4 FF     	jmp OSBYTE
0026B8  2               
0026B8  2               
0026B8  2               old_eventv:
0026B8  2  xx xx        	.res 2
0026BA  2               
0026BA  2               event_handler:
0026BA  2  08           	php
0026BB  2  C9 04        	cmp #4
0026BD  2  D0 02        	bne not_vsync
0026BF  2               
0026BF  2  E6 rr        	inc vsync_count
0026C1  2               
0026C1  2               not_vsync:
0026C1  2  28           	plp
0026C2  2  6C B8 26     	jmp (old_eventv)
0026C5  2               
0026C5  2               bbcsync:
0026C5  2  A5 rr        	lda vsync_count
0026C7  2  C9 02        	cmp #2
0026C9  2  90 FA        	bcc bbcsync
0026CB  2  A9 00        	lda #0
0026CD  2  85 rr        	sta vsync_count
0026CF  2  60           	rts
0026D0  2               
0026D0  2               ;--------------------------------------------------------
0026D0  2               ; Keyboard test routine.
0026D0  2               ;
0026D0  2               ; Input:
0026D0  2               ;  A = key to read, high nibble=row and low nibble=col
0026D0  2               ;
0026D0  2               ; Output:
0026D0  2               ;  carry clr = key pressed
0026D0  2               ;  carry set = key not pressed
0026D0  2               ;--------------------------------------------------------
0026D0  2               
0026D0  2               ktest:
0026D0  2  85 rr        	sta z80_a		; save key
0026D2  2  98           	tya
0026D3  2  48           	pha
0026D4  2               
0026D4  2               ; _BEEB keyboard read
0026D4  2  A5 rr        	lda z80_a
0026D6  2  49 80        	eor #$80		; _BEEB just look for this key
0026D8  2  AA           	tax
0026D9  2               
0026D9  2  A9 79        	lda #$79
0026DB  2  20 F4 FF     	jsr OSBYTE
0026DE  2               
0026DE  2  8A           	txa
0026DF  2  30 04        	bmi pressed 	; _BEEB X is negative if key is pressed
0026E1  2               
0026E1  2  38           	sec			; key not pressed
0026E2  2  68           	pla
0026E3  2  A8           	tay
0026E4  2  60           	rts
0026E5  2               
0026E5  2               pressed:
0026E5  2  A5 rr         lda z80_a
0026E7  2  8D FF 67      sta $67ff
0026EA  2  18           	clc			; key pressed
0026EB  2  68           	pla
0026EC  2  A8           	tay
0026ED  2  60           	rts
0026EE  2               
0026EE  2               ;---------------------------------------------------------------
0026EE  2               ; Getkey in column,row format
0026EE  2               ;
0026EE  2               ; Output:
0026EE  2               ;  A = high nibble=row and low nibble=column key in matrix
0026EE  2               ;---------------------------------------------------------------
0026EE  2               
0026EE  2               kget:
0026EE  2  86 rr        	stx xtmp
0026F0  2               kget1:
0026F0  2  A9 79        	lda #$79			; _BEEB read keyboard with OSBYTE &79
0026F2  2  A2 01        	ldx #$01
0026F4  2  20 F4 FF     	jsr OSBYTE
0026F7  2               
0026F7  2  E0 FF        	cpx #$ff
0026F9  2  F0 F5        	beq kget1
0026FB  2               
0026FB  2  8A           	txa
0026FC  2  48           	pha
0026FD  2               kget2:
0026FD  2  A9 79        	lda #$79			; wait for released key
0026FF  2  A2 01        	ldx #$01
002701  2  20 F4 FF     	jsr OSBYTE
002704  2               
002704  2  E0 FF        	cpx #$ff
002706  2  D0 F5        	bne kget2
002708  2               
002708  2  68           	pla
002709  2  A6 rr        	ldx xtmp
00270B  2  60           	rts
00270C  2               
00270C  2               ;----------------------------------------------------
00270C  2               ; AtoMMC joystick controls.
00270C  2               ; _BEEB TODO
00270C  2               ;----------------------------------------------------
00270C  2               
00270C  2               joyinit:
00270C  2               joysin:
00270C  2  60           	rts
00270D  2               
00270D  2               
00270D  2               ;----------------------------------------------------
00270D  2               ; Delay routine 1/50 sec
00270D  2               ;
00270D  2               ; Wait 1/60 sec = 16666 usec
00270D  2               ; Wait 208 x 16 =  3328 usec
00270D  2               ;                 19994 usec
00270D  2               ; rts           =     6 usec
00270D  2               ; Total         = 20000 usec
00270D  2               ;----------------------------------------------------
00270D  2               
00270D  2               delay:
00270D  2  85 rr        	sta xtmp
00270F  2               del_loop:
00270F  2  A9 13        	lda #19
002711  2  20 F4 FF     	jsr OSBYTE		; wait for vsync _BEEB
002714  2               
002714  2  A0 D0        	ldy #208		; wait 208 x 16 = 3328 usec
002716  2               delay1:
002716  2  61 80        	adc ($80,x)		;	 6 usec
002718  2  61 80        	adc ($80,x)		;	 6 usec
00271A  2  88           	dey			;	 2 usec
00271B  2  D0 F9        	bne delay1		;	 2 usec
00271D  2  EA           	nop			; 2 usec
00271E  2  EA           	nop			; 2 usec
00271F  2               				; tot: 20000 usec
00271F  2  C6 rr        	dec xtmp
002721  2  D0 EC        	bne del_loop
002723  2  60           	rts
002724  2               
002724  2               ;-------------------------------------------------------------
002724  2               ; Screen synchronisation.
002724  2               ;
002724  2               ;  - read joystick/keyboard
002724  2               ;  - handle sound
002724  2               ;  - sync framerate with clock
002724  2               ;  - handle shrapnel every even frame
002724  2               ;-------------------------------------------------------------
002724  2               
002724  2               vsync:
002724  2  48           	pha
002725  2  98           	tya
002726  2  48           	pha
002727  2  8A           	txa
002728  2  48           	pha
002729  2  20 85 32     	jsr joykey		; read joystick/keyboard.
00272C  2               vsync1:
00272C  2  A9 13        	lda #19
00272E  2  20 F4 FF     	jsr OSBYTE		; _BEEB vsync
002731  2               
002731  2  A5 rr        	lda clock
002733  2  29 01        	and #1
002735  2  D0 03        	bne:+
002737  2  20 A6 29     	jsr proshr		; handle shrapnel every even frame
00273A  2               :
00273A  2  AD 85 27     	lda sndtyp
00273D  2  F0 40        	beq sndskip
00273F  2               
00273F  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
00273F  2               ; beep effect using psg channel 0
00273F  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
00273F  2               
00273F  2  08           	php			; save irq interrupt state
002740  2               
002740  2  78           	sei			; disable interrupts
002741  2               
002741  2  A9 0B        	lda #$0b		; disable keyboard output that drives bit 7 of via port A
002743  2  8D 40 FE     	sta $fe40
002746  2               
002746  2  A9 FF        	lda #$ff		; via port A bits 0 - 7 output
002748  2  8D 43 FE     	sta $fe43
00274B  2               
00274B  2  A9 90        	lda #$90		; psg channel 0 full volume
00274D  2  20 86 27     	jsr psgWrite
002750  2               
002750  2               beepLoop:
002750  2               
002750  2  AD 85 27     	lda sndtyp	; update low 4 bits of psg channel 0 tone register with 2 bits from sndtyp
002753  2  29 03        	and #3
002755  2  0A           	asl a
002756  2  0A           	asl a
002757  2  09 80        	ora #$80
002759  2  20 86 27     	jsr psgWrite
00275C  2               
00275C  2  AD 85 27     	lda sndtyp	; update high 6 bits of psg channel 0 tone register with 6 bits from sndtyp
00275F  2  4A           	lsr a
002760  2  4A           	lsr a
002761  2  20 86 27     	jsr psgWrite
002764  2               
002764  2  AC 85 27     	ldy sndtyp		; do the half cycle delay
002767  2               
002767  2               beepWait:
002767  2               
002767  2  88           	dey
002768  2  D0 FD        	bne beepWait
00276A  2               
00276A  2  CE 85 27     	dec sndtyp			; reduce delay by 1
00276D  2  D0 E1        	bne beepLoop		; repeat above until delay = 0
00276F  2               
00276F  2  A9 9F        	lda #$9f				; channel 0 volume off
002771  2  20 86 27     	jsr psgWrite
002774  2               
002774  2  A9 7F        	lda #$7f		; via port A bit 7 input from keyboard output
002776  2  8D 4F FE     	sta $fe4f
002779  2               
002779  2  A9 03        	lda #$03		; enable keyboard output
00277B  2  8D 40 FE     	sta $fe40
00277E  2               
00277E  2  28           	plp			; restore irq state
00277F  2               
00277F  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
00277F  2               
00277F  2               sndskip:
00277F  2  68           	pla
002780  2  AA           	tax
002781  2  68           	pla
002782  2  A8           	tay
002783  2  68           	pla
002784  2  60           	rts
002785  2               
002785  2  00           sndtyp:		.byte 0
002786  2               
002786  2               
002786  2               
002786  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
002786  2               ; psgWrite 					write data to psg
002786  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
002786  2               ; entry			A			data to be written to 76489 psg
002786  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
002786  2               ; exit			A			destroyed
002786  2               ;-----------------------------------------------------------------------------------------------------------------------------------------------------
002786  2               
002786  2               psgWrite:
002786  2               
002786  2  8D 4F FE     	sta $fe4f				; place psg data on port a
002789  2               
002789  2  A9 00        	lda #0 + 0				; psg -we low
00278B  2  8D 40 FE     	sta $fe40
00278E  2               
00278E  2  48           	pha					; 5uS delay
00278F  2  68           	pla
002790  2  EA           	nop
002791  2  EA           	nop
002792  2               
002792  2  A9 08        	lda #0 + 8				; psg -we high
002794  2  8D 40 FE     	sta $fe40
002797  2               
002797  2  60           	rts					; return
002798  2               
002798  2               
002798  2               
002798  2               ;----------------------------------------------------------------------
002798  2               ; BBC video hardware fns
002798  2               ;----------------------------------------------------------------------
002798  2               
002798  2               screeninit:
002798  2  A2 0D        	ldx #13
00279A  2               crtcloop:
00279A  2  8E 00 FE     	stx $FE00
00279D  2  BD BA 27     	lda crtc_regs_high,x
0027A0  2  8D 01 FE     	sta $FE01
0027A3  2  CA           	dex
0027A4  2  10 F4        	bpl crtcloop
0027A6  2               
0027A6  2                   ; Set ULA
0027A6  2  A9 88            lda #$88            ; MODE 4
0027A8  2  8D 48 02         sta $248            ; Tell the OS or it will mess with ULA settings at vsync
0027AB  2  8D 20 FE         sta $FE20
0027AE  2               
0027AE  2               ; fall through to palette
0027AE  2               
0027AE  2               setpal:
0027AE  2  A2 0F        	ldx #15
0027B0  2               palloop:
0027B0  2  BD C8 27     	lda ula_pal,x
0027B3  2  8D 21 FE     	sta $fe21
0027B6  2  CA           	dex
0027B7  2  10 F7        	bpl palloop
0027B9  2  60           	rts
0027BA  2               
0027BA  2               crtc_regs_high:
0027BA  2  3F           	.byte 63				; R0  horizontal total
0027BB  2  20           	.byte 32				; R1  horizontal displayed
0027BC  2  31           	.byte 49				; R2  horizontal position
0027BD  2  24           	.byte $24				; R3  sync width 40 = &28
0027BE  2  26           	.byte 38				; R4  vertical total
0027BF  2  00           	.byte 0					; R5  vertical total adjust
0027C0  2  18           	.byte 24				; R6  vertical displayed
0027C1  2  23           	.byte 35				; R7  vertical position; 35=top of screen
0027C2  2  00           	.byte $00				; R8  interlace
0027C3  2  07           	.byte 7					; R9  scanlines per row
0027C4  2  20           	.byte 32				; R10 cursor start
0027C5  2  08           	.byte 8					; R11 cursor end
0027C6  2  01           	.byte >(ScreenAddr/8)	; R12 screen start address, high
0027C7  2  C0           	.byte <(ScreenAddr/8)	; R13 screen start address, low
0027C8  2               
0027C8  2               ula_pal:
0027C8  2  07           	.byte $00 + PAL_black
0027C9  2  17           	.byte $10 + PAL_black
0027CA  2  27           	.byte $20 + PAL_black
0027CB  2  37           	.byte $30 + PAL_black
0027CC  2  47           	.byte $40 + PAL_black
0027CD  2  57           	.byte $50 + PAL_black
0027CE  2  67           	.byte $60 + PAL_black
0027CF  2  77           	.byte $70 + PAL_black
0027D0  2  80           	.byte $80 + PAL_white
0027D1  2  90           	.byte $90 + PAL_white
0027D2  2  A0           	.byte $a0 + PAL_white
0027D3  2  B0           	.byte $b0 + PAL_white
0027D4  2  C0           	.byte $c0 + PAL_white
0027D5  2  D0           	.byte $d0 + PAL_white
0027D6  2  E0           	.byte $e0 + PAL_white
0027D7  2  F0           	.byte $f0 + PAL_white
0027D8  2               
0027D8  2               ;----------------------------------------------------
0027D8  2               ; Draw sprite
0027D8  2               ;----------------------------------------------------
0027D8  2               .if oflag
0027D8  2               sprite:
0027D8  2  86 rr        	stx xtmp		; Save X-reg
0027DA  2  20 2C 28     	jsr scadd 		; get screen address in scraddr.
0027DD  2               
0027DD  2  A5 rr        	lda dispx 		; x position.
0027DF  2  29 07        	and #7 			; position straddling cells.
0027E1  2  85 rr        	sta z80_b		; store in b register.
0027E3  2               
0027E3  2  A5 rr        	lda z80_l		; store sprite graphic address.
0027E5  2  8D F8 27     	sta sprit1+1
0027E8  2  8D FE 27     	sta sprit2+1
0027EB  2  A5 rr        	lda z80_h
0027ED  2  8D F9 27     	sta sprit1+2
0027F0  2  8D FF 27     	sta sprit2+2
0027F3  2               
0027F3  2  A2 00        	ldx #0			; pixel height.
0027F5  2  A0 00        	ldy #0
0027F7  2               sprit1:
0027F7  2               .if swrflag
0027F7  2               	lda objdta + data_address - data_start,x		; fetch first byte.
0027F7  2               .else
0027F7  2  BD D6 9C     	lda objdta,x		; fetch first byte.
0027FA  2               .endif
0027FA  2  85 rr        	sta spr
0027FC  2  E8           	inx
0027FD  2               sprit2:
0027FD  2               .if swrflag
0027FD  2               	lda objdta + data_address - data_start,x
0027FD  2               .else
0027FD  2  BD D6 9C     	lda objdta,x
002800  2               .endif
002800  2  85 rr        	sta spr+1
002802  2               
002802  2  A9 00        	lda #0
002804  2  85 rr        	sta spr+2
002806  2  20 81 2F     	jsr sprit7		; shift sprite
002809  2               
002809  2  A5 rr        	lda spr			; fetch graphic.
00280B  2  A0 00        	ldy #0			; _BEEB
00280D  2  51 rr        	eor (scraddr),y		; merge with screen image.
00280F  2  91 rr        	sta (scraddr),y		; write to screen.
002811  2               
002811  2  A5 rr        	lda spr+1		; fetch graphic.
002813  2  A0 08        	ldy #8			; _BEEB
002815  2  51 rr        	eor (scraddr),y		; merge with screen image.
002817  2  91 rr        	sta (scraddr),y		; write to screen.
002819  2               
002819  2  A5 rr        	lda spr+2		; fetch graphic.
00281B  2  A0 10        	ldy #16			; _BEEB
00281D  2  51 rr        	eor (scraddr),y		; merge with screen image.
00281F  2  91 rr        	sta (scraddr),y		; write to screen.
002821  2               
002821  2  20 A5 28     	jsr nline
002824  2               
002824  2  E8           	inx			; next source byte.
002825  2  E0 20        	cpx #32
002827  2  D0 CE        	bne sprit1		; repeat
002829  2               
002829  2  A6 rr        	ldx xtmp		; retreive X-reg
00282B  2  60           	rts
00282C  2               
00282C  2               ;spr:	.byte 0,0,0
00282C  2               .endif
00282C  2               ;------------------------------------------------------------------
00282C  2               ; This routine returns a screen address for (dispx, dispy) in scraddr.
00282C  2               ;------------------------------------------------------------------
00282C  2               
00282C  2               scadd:
00282C  2  A6 rr        	ldx dispy
00282E  2  A5 rr        	lda dispx
002830  2  29 F8        	and #$f8
002832  2  18           	clc
002833  2  7D 00 06     	adc SCADTB_lb,x
002836  2  85 rr        	sta scraddr
002838  2  BD 00 07     	lda SCADTB_hb,x
00283B  2  69 00        	adc #0
00283D  2  85 rr        	sta scraddr+1
00283F  2  60           	rts
002840  2               
002840  2               ;-----------------------------------------------------------------
002840  2               ; These are the sprite routines.
002840  2               ; sspria = single sprite, old (ix).
002840  2               ; ssprib = single sprite, new (ix+5).
002840  2               ; sspric = both sprites, old (ix) and new (ix+5).
002840  2               ;-----------------------------------------------------------------
002840  2               
002840  2               sspria:
002840  2  20 CF 35     	jsr gsprad		; get old sprite address.
002843  2               sspri2:
002843  2               .if rflag
002843  2               	lda z80_e				; 3c
002843  2               	sta dline_spraddr1+1	; 4c
002843  2               	sta dline_spraddr2+1	; 4c
002843  2               	lda z80_d				; 3c
002843  2               	sta dline_spraddr1+2	; 4c
002843  2               	sta dline_spraddr2+2	; 4c
002843  2               
002843  2               	ldx sprshft
002843  2               	lda shift_table,x
002843  2               	sta dline_shift1+1
002843  2               	sta dline_shift2+1
002843  2               	lda shift_table+1,x
002843  2               	sta dline_shift1+2
002843  2               	sta dline_shift2+2
002843  2               
002843  2               	ldx #0			; vertical lines.
002843  2               sspri0:
002843  2               	jsr dline		; draw a line.
002843  2                 .if bflag
002843  2               	cpx #48
002843  2                 .else
002843  2               	cpx #32
002843  2                 .endif
002843  2               	bne sspri0		; repeat 16 times x 2 bytes
002843  2               	rts
002843  2               .else
002843  2                 .if bflag
002843  2               	lda #24
002843  2                 .else
002843  2  A9 10        	lda #16			; vertical lines.
002845  2                 .endif
002845  2  8D 51 28     	sta acnt
002848  2               sspri0:
002848  2  20 7B 28     	jsr dline		; draw a line.
00284B  2  CE 51 28     	dec acnt
00284E  2  D0 F8        	bne sspri0		; repeat 16 times
002850  2  60           	rts
002851  2               
002851  2  00           acnt:	.byte 0
002852  2               .endif
002852  2               
002852  2               ;-----------------------------------------------------------------
002852  2               
002852  2               ssprib:
002852  2  20 B0 35     	jsr gspran 		; get new sprite address.
002855  2  4C 43 28     	jmp sspri2
002858  2               
002858  2               ;-----------------------------------------------------------------
002858  2               
002858  2               sspric:
002858  2               .if rflag
002858  2               	jsr gsprad 		; get old sprite address.
002858  2               
002858  2               	lda z80_e				; 3c
002858  2               	sta ddline_spraddr3+1	; 4c
002858  2               	sta ddline_spraddr4+1	; 4c
002858  2               
002858  2               	lda z80_d				; 3c
002858  2               	sta ddline_spraddr3+2	; 4c
002858  2               	sta ddline_spraddr4+2	; 4c
002858  2               
002858  2               	ldx sprshft
002858  2               	lda shift_table,x
002858  2               	sta ddline_shift3+1
002858  2               	sta ddline_shift4+1
002858  2               	lda shift_table+1,x
002858  2               	sta ddline_shift3+2
002858  2               	sta ddline_shift4+2
002858  2               
002858  2               	jsr exx  		; store addresses.
002858  2               	jsr gspran 		; get new sprite addresses.
002858  2               
002858  2               	lda z80_e				; 3c
002858  2               	sta ddline_spraddr1+1	; 4c
002858  2               	sta ddline_spraddr2+1	; 4c
002858  2               
002858  2               	lda z80_d				; 3c
002858  2               	sta ddline_spraddr1+2	; 4c
002858  2               	sta ddline_spraddr2+2	; 4c
002858  2               
002858  2               	ldx sprshft
002858  2               	lda shift_table,x
002858  2               	sta ddline_shift1+1
002858  2               	sta ddline_shift2+1
002858  2               	lda shift_table+1,x
002858  2               	sta ddline_shift1+2
002858  2               	sta ddline_shift2+2
002858  2               
002858  2               	ldx #0
002858  2               lloop:
002858  2               	jsr ddline 		; draw a line.
002858  2                 .if bflag
002858  2               	cpx #48
002858  2                 .else
002858  2               	cpx #32
002858  2                 .endif
002858  2               	bne lloop
002858  2               	rts
002858  2               
002858  2               shift_table:
002858  2               .word shift0
002858  2               .word shift2
002858  2               .word shift4
002858  2               .word shift6
002858  2               
002858  2               ;-------------------------------------------------------------
002858  2               ; Drop through.
002858  2               ; Line drawn, now work out next target address.
002858  2               ;
002858  2               ; Input:
002858  2               ;  B  = right mask
002858  2               ;  C  = left mask
002858  2               ;  DE = spriteaddress
002858  2               ;  scraddr = screen address
002858  2               ;-------------------------------------------------------------
002858  2               
002858  2               dline:
002858  2               
002858  2               ; first screen byte
002858  2               
002858  2               dline_spraddr1:
002858  2               	ldy $ffff,x 		; graphic data.
002858  2               dline_shift1:
002858  2               	lda $ffff,y
002858  2               	sta sprtmp
002858  2               	and z80_c 			; mask away what's not needed.
002858  2               
002858  2               	ldy #0
002858  2               	eor (scraddr),y 	; XOR with what's there.
002858  2               	sta (scraddr),y 	; bung it in.
002858  2               
002858  2               ; carry to next screen byte
002858  2               
002858  2               	lda sprtmp			; fetch data.
002858  2               	and z80_b 			; mask away unwanted
002858  2               	sta sprtmp
002858  2               
002858  2               ; middle screen byte
002858  2               
002858  2               	inx
002858  2               dline_spraddr2:
002858  2               	ldy $ffff,x 		; second bit of data.
002858  2               dline_shift2:
002858  2               	lda $ffff,y
002858  2               	sta sprtmp2
002858  2               	and z80_c 			; mask away what's not needed.
002858  2               	ora sprtmp
002858  2               
002858  2               	ldy #8
002858  2               	eor (scraddr),y 	; XOR with what's there.
002858  2               	sta (scraddr),y 	; bung it in.
002858  2               
002858  2               ; carry to last screen byte
002858  2               
002858  2               	lda sprtmp2
002858  2               	and z80_b 			; mask away unwanted
002858  2               
002858  2               	ldy #16
002858  2               	eor (scraddr),y 	; XOR with what's there.
002858  2               	sta (scraddr),y 	; bung it in.
002858  2               
002858  2               	inx
002858  2               .else
002858  2  20 CF 35     	jsr gsprad 		; get old sprite address.
00285B  2  20 31 26     	jsr exx  		; store addresses.
00285E  2  20 B0 35     	jsr gspran 		; get new sprite addresses.
002861  2               
002861  2               .if bflag
002861  2               	lda #23
002861  2               .else
002861  2  A9 0F        	lda #15
002863  2               .endif
002863  2  85 rr        	sta ccnt
002865  2               lloop:
002865  2  20 7B 28     	jsr dline 		; draw a line.
002868  2  20 31 26     	jsr exx  		; restore old addresses.
00286B  2  20 7B 28     	jsr dline 		; delete a line.
00286E  2  20 31 26     	jsr exx  		; flip to new sprite addresses.
002871  2  C6 rr        	dec ccnt
002873  2  D0 F0        	bne lloop
002875  2               
002875  2  20 7B 28     	jsr dline		; draw a line.
002878  2  20 31 26     	jsr exx 		; restore old addresses.
00287B  2               
00287B  2               ;-------------------------------------------------------------
00287B  2               ; Drop through.
00287B  2               ; Line drawn, now work out next target address.
00287B  2               ;
00287B  2               ; Input:
00287B  2               ;  B  = right mask
00287B  2               ;  C  = left mask
00287B  2               ;  DE = spriteaddress
00287B  2               ;  scraddr = screen address
00287B  2               ;-------------------------------------------------------------
00287B  2               
00287B  2               dline:
00287B  2  A0 00        	ldy #0
00287D  2  B1 rr        	lda (z80_de),y 		; graphic data.
00287F  2  48           	pha
002880  2  25 rr        	and z80_c 		; mask away what's not needed.
002882  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
002884  2  91 rr        	sta (scraddr),y 	; bung it in.
002886  2               
002886  2               ; _BEEB screen arrangement
002886  2               ;	clc
002886  2               ;	lda scraddr
002886  2               ;	adc #16
002886  2               ;	sta scraddr
002886  2               ;	bcc :+
002886  2               ;	inc scraddr+1
002886  2               ;:
002886  2  68           	pla
002887  2  25 rr        	and z80_b 		; mask away unwanted bits.
002889  2  A0 10        	ldy #16
00288B  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00288D  2  91 rr        	sta (scraddr),y 	; bung it in.
00288F  2               
00288F  2  E6 rr        	inc z80_e 		; next graphic.
002891  2  D0 02        	bne :+
002893  2  E6 rr        	inc z80_d
002895  2               :
002895  2               ; _BEEB screen arrangement
002895  2               ;	sec
002895  2               ;	lda scraddr 		; one character cell to the left.
002895  2               ;	sbc #8
002895  2               ;	sta scraddr
002895  2               ;	lda scraddr+1
002895  2               ;	sbc #0
002895  2               ;	sta scraddr+1
002895  2               
002895  2  A0 00        	ldy #0
002897  2  B1 rr        	lda (z80_de),y 		; second bit of data.
002899  2  A0 08        	ldy #8
00289B  2  51 rr        	eor (scraddr),y 	; XOR with what's there.
00289D  2  91 rr        	sta (scraddr),y 	; bung it in.
00289F  2               
00289F  2  E6 rr        	inc z80_e 		; point to next line of data.
0028A1  2  D0 02        	bne :+
0028A3  2  E6 rr        	inc z80_d
0028A5  2               :
0028A5  2               ; _BEEB screen arrangement
0028A5  2               ;	sec
0028A5  2               ;	lda scraddr 		; another char left.
0028A5  2               ;	sbc #8
0028A5  2               ;	sta scraddr
0028A5  2               ;	lda scraddr+1
0028A5  2               ;	sbc #0
0028A5  2               ;	sta scraddr+1
0028A5  2               .endif
0028A5  2               
0028A5  2               ;----------------------------------------------------------------------
0028A5  2               ; Line drawn, now work out next target address.
0028A5  2               ;----------------------------------------------------------------------
0028A5  2               
0028A5  2               ; _BEEB screen arrangement
0028A5  2               
0028A5  2               nline:
0028A5  2  A5 rr        	lda scraddr 		; get low byte of address.
0028A7  2  29 07        	and #7
0028A9  2  C9 07        	cmp #7				; is this last line of row?
0028AB  2  F0 03        	beq beeb_next_row
0028AD  2               
0028AD  2               	; within same row
0028AD  2  E6 rr        	inc scraddr			; new low byte of address.
0028AF  2               ;	bne :+
0028AF  2               ;	inc scraddr+1		; new high byte of address.
0028AF  2               ;:
0028AF  2  60           	rts
0028B0  2               
0028B0  2               beeb_next_row:
0028B0  2  18           	clc
0028B1  2  A5 rr        	lda scraddr
0028B3  2  69 F9        	adc #<(ScreenRowBytes-7)
0028B5  2  85 rr        	sta scraddr			; new low byte of address.
0028B7  2  A5 rr        	lda scraddr+1
0028B9  2  69 00        	adc #>(ScreenRowBytes-7)
0028BB  2  85 rr        	sta scraddr+1		; new high byte of address.
0028BD  2  60           	rts
0028BE  2               
0028BE  2               .if rflag
0028BE  2               ;-------------------------------------------------------------
0028BE  2               ; Drop through.
0028BE  2               ; Line drawn, now work out next target address.
0028BE  2               ;
0028BE  2               ; Input:
0028BE  2               ;  B  = right mask
0028BE  2               ;  C  = left mask
0028BE  2               ;  DE = spriteaddress
0028BE  2               ;  scraddr = screen address
0028BE  2               ;-------------------------------------------------------------
0028BE  2               
0028BE  2               ddline:
0028BE  2               
0028BE  2               ; NEW SPRITE
0028BE  2               
0028BE  2               ; first screen byte
0028BE  2               
0028BE  2               ddline_spraddr1:
0028BE  2               	ldy $ffff,x 		; graphic data.
0028BE  2               ddline_shift1:
0028BE  2               	lda $ffff,y
0028BE  2               	sta sprtmp
0028BE  2               	and z80_c 			; mask away what's not needed.
0028BE  2               
0028BE  2               	ldy #0
0028BE  2               	eor (scraddr),y 	; XOR with what's there.
0028BE  2               	sta (scraddr),y 	; bung it in.
0028BE  2               
0028BE  2               ; carry to next screen byte
0028BE  2               
0028BE  2               	lda sprtmp			; fetch data.
0028BE  2               	and z80_b 			; mask away unwanted
0028BE  2               	sta sprtmp
0028BE  2               
0028BE  2               ; middle screen byte
0028BE  2               
0028BE  2               	inx
0028BE  2               ddline_spraddr2:
0028BE  2               	ldy $ffff,x 		; second bit of data.
0028BE  2               ddline_shift2:
0028BE  2               	lda $ffff,y
0028BE  2               	sta sprtmp2
0028BE  2               	and z80_c 			; mask away what's not needed.
0028BE  2               	ora sprtmp
0028BE  2               
0028BE  2               	ldy #8
0028BE  2               	eor (scraddr),y 	; XOR with what's there.
0028BE  2               	sta (scraddr),y 	; bung it in.
0028BE  2               
0028BE  2               ; carry to last screen byte
0028BE  2               
0028BE  2               	lda sprtmp2
0028BE  2               	and z80_b 			; mask away unwanted
0028BE  2               
0028BE  2               	ldy #16
0028BE  2               	eor (scraddr),y 	; XOR with what's there.
0028BE  2               	sta (scraddr),y 	; bung it in.
0028BE  2               
0028BE  2               ; _BEEB next row
0028BE  2               
0028BE  2               	lda scraddr 		; get low byte of address.
0028BE  2               	and #7
0028BE  2               	cmp #7				; is this last line of row?
0028BE  2               	beq :+
0028BE  2               
0028BE  2               	; within same row can't increment page
0028BE  2               	inc scraddr			; new low byte of address.
0028BE  2               	bne ddline2
0028BE  2               
0028BE  2               :
0028BE  2               	clc
0028BE  2               	lda scraddr
0028BE  2               	adc #<(ScreenRowBytes-7)
0028BE  2               	sta scraddr			; new low byte of address.
0028BE  2               	lda scraddr+1
0028BE  2               	adc #>(ScreenRowBytes-7)
0028BE  2               	sta scraddr+1		; new high byte of address.
0028BE  2               
0028BE  2               ; OLD SPRITE
0028BE  2               
0028BE  2               ddline2:
0028BE  2               
0028BE  2               ; still first row but different data!
0028BE  2               
0028BE  2               	dex
0028BE  2               
0028BE  2               ; first screen byte
0028BE  2               
0028BE  2               ddline_spraddr3:
0028BE  2               	ldy $ffff,x			; graphic data.
0028BE  2               ddline_shift3:
0028BE  2               	lda $ffff,y
0028BE  2               	sta sprtmp
0028BE  2               	and z80_cp 			; mask away what's not needed.
0028BE  2               
0028BE  2               	ldy #0
0028BE  2               	eor (z80_hlp),y 	; XOR with what's there.
0028BE  2               	sta (z80_hlp),y 	; bung it in.
0028BE  2               
0028BE  2               ; carry to next screen byte
0028BE  2               
0028BE  2               	lda sprtmp			; fetch data.
0028BE  2               	and z80_bp 			; mask away unwanted
0028BE  2               	sta sprtmp
0028BE  2               
0028BE  2               ; middle screen byte
0028BE  2               
0028BE  2               	inx
0028BE  2               ddline_spraddr4:
0028BE  2               	ldy $ffff,x 		; second bit of data.
0028BE  2               ddline_shift4:
0028BE  2               	lda $ffff,y
0028BE  2               	sta sprtmp2
0028BE  2               	and z80_cp 			; mask away what's not needed.
0028BE  2               	ora sprtmp
0028BE  2               
0028BE  2               	ldy #8
0028BE  2               	eor (z80_hlp),y 	; XOR with what's there.
0028BE  2               	sta (z80_hlp),y 	; bung it in.
0028BE  2               
0028BE  2               ; last screen byte
0028BE  2               
0028BE  2               	lda sprtmp2			; fetch data.
0028BE  2               	and z80_bp 			; mask away unwanted
0028BE  2               
0028BE  2               	ldy #16
0028BE  2               	eor (z80_hlp),y 	; XOR with what's there.
0028BE  2               	sta (z80_hlp),y 	; bung it in.
0028BE  2               
0028BE  2               ; next row of sprite data
0028BE  2               
0028BE  2               	inx
0028BE  2               
0028BE  2               ; _BEEB screen arrangement
0028BE  2               
0028BE  2               	lda z80_lp 			; get low byte of address.
0028BE  2               	and #7
0028BE  2               	cmp #7				; is this last line of row?
0028BE  2               	beq :+
0028BE  2               
0028BE  2               	; within same row can't increment page
0028BE  2               	inc z80_lp			; new low byte of address.
0028BE  2               	rts
0028BE  2               
0028BE  2               :
0028BE  2               	clc
0028BE  2               	lda z80_lp
0028BE  2               	adc #<(ScreenRowBytes-7)
0028BE  2               	sta z80_lp			; new low byte of address.
0028BE  2               	lda z80_lp+1
0028BE  2               	adc #>(ScreenRowBytes-7)
0028BE  2               	sta z80_lp+1		; new high byte of address.
0028BE  2               	rts
0028BE  2               .endif
0028BE  2               
0028BE  2               ;----------------------------------------------------
0028BE  2               ; Display character in A at dispx,dispy.
0028BE  2               ;
0028BE  2               ; Input:
0028BE  2               ;  A 	   = character to print
0028BE  2               ;----------------------------------------------------
0028BE  2               
0028BE  2               pchar:
0028BE  2  85 rr        	sta fntaddr
0028C0  2  A9 00        	lda #0
0028C2  2  85 rr        	sta fntaddr+1
0028C4  2  06 rr        	asl fntaddr  		; multiply char by 8.
0028C6  2  26 rr        	rol fntaddr+1
0028C8  2  06 rr        	asl fntaddr
0028CA  2  26 rr        	rol fntaddr+1
0028CC  2  06 rr        	asl fntaddr
0028CE  2  26 rr        	rol fntaddr+1
0028D0  2               
0028D0  2  A5 rr        	lda fntaddr
0028D2  2  18           	clc
0028D3  2  69 EA        	adc #<(FONT-256)
0028D5  2  85 rr        	sta fntaddr		; that's the low byte.
0028D7  2  A5 rr        	lda fntaddr+1
0028D9  2  69 9D        	adc #>(FONT-256)
0028DB  2  85 rr        	sta fntaddr+1		; add displacement.
0028DD  2               pchark:
0028DD  2  20 B4 2E     	jsr gprad		; get screen address.
0028E0  2  A2 07        	ldx #7			; lines to write.
0028E2  2               pchar0:
0028E2  2  A0 00        	ldy #0
0028E4  2  B1 rr        	lda (fntaddr),y 	; get image byte.
0028E6  2  BC F5 28     	ldy scrtab,x		; Get rowoffset
0028E9  2               .if iflag
0028E9  2               	eor #TxtInvert		; Invert
0028E9  2               .endif
0028E9  2  91 rr        	sta (scraddr),y 	; copy to screen.
0028EB  2  E6 rr        	inc fntaddr		; next image byte.
0028ED  2  D0 02        	bne :+
0028EF  2  E6 rr        	inc fntaddr+1
0028F1  2               :
0028F1  2  CA           	dex			; next screen row down.
0028F2  2  10 EE        	bpl pchar0		; repeat.
0028F4  2  60           	rts
0028F5  2               
0028F5  2  07 06 05 04  scrtab:		.byte $07,$06,$05,$04,$03,$02,$01,$00
0028F9  2  03 02 01 00  
0028FD  2               ;scrtab:	.byte $e0,$c0,$a0,$80,$60,$40,$20,$00
0028FD  2               
0028FD  2               .if rflag
0028FD  2               ;----------------------------------------------------
0028FD  2               ; Shift tables
0028FD  2               ;----------------------------------------------------
0028FD  2               
0028FD  2               .align 256
0028FD  2               shift0:
0028FD  2               .repeat 256, i
0028FD  2               	.byte i
0028FD  2               .endrep
0028FD  2               
0028FD  2               shift2:
0028FD  2               .repeat 256, i
0028FD  2               	.byte (i >> 2) | (i << 6) & $c0
0028FD  2               .endrep
0028FD  2               
0028FD  2               shift4:
0028FD  2               .repeat 256, i
0028FD  2               	.byte (i >> 4) | ((i << 4) & $f0)
0028FD  2               .endrep
0028FD  2               
0028FD  2               shift6:
0028FD  2               .repeat 256, i
0028FD  2               	.byte (i >> 6) | ((i << 2) & $fc)
0028FD  2               .endrep
0028FD  2               .endif
0028FD  2               
0028FD  1               
0028FD  1               ;----------------------------------------------------------------------
0028FD  1               ; AGD 6502 ENGINE CODE + COMPILED GAME SCRIPT
0028FD  1               ;----------------------------------------------------------------------
0028FD  1               
0028FD  1               start_game:
0028FD  1               
0028FD  1               	.include "game.inc"
0028FD  2               .include "nixy.inc"
0028FD  3               ; Game engine code --------------------------------------------------------------
0028FD  3               
0028FD  3               ; Arcade Game Designer.
0028FD  3               ; (C) 2008 Jonathan Cauldwell.
0028FD  3               ; ZX Spectrum Next Engine v0.1.
0028FD  3               
0028FD  3               ; Conditional compilation flags
0028FD  3               ; Code is installed if flag is set
0028FD  3               ; Flags are set in commandline assembly or by the compiler
0028FD  3               
0028FD  3               ; Flags set by AGD compiler
0028FD  3               ;	mflag  			; MENU + INV
0028FD  3               ;	pflag 			; particle engine
0028FD  3               ;	sflag 			; scrollytext
0028FD  3               ;	dflag 			; digging mode
0028FD  3               ;	cflag			; collectable blocks
0028FD  3               ;	oflag			; objects
0028FD  3               ;	lflag			; ladders
0028FD  3               ;
0028FD  3               ; Flags set manually
0028FD  3               ;	aflag			; adventure mode
0028FD  3               ;	bflag			; big sprites (16x24)
0028FD  3               ;	fflag			; floppy version (skip #0axx)
0028FD  3               ;	gflag			; graphic colour mode
0028FD  3               ;	hflag			; hidden sprite mode
0028FD  3               ;	iflag			; invert mode
0028FD  3               
0028FD  3               .if mflag
0028FD  3               	.out "- MEN/INV enabled"
0028FD  3               .endif
0028FD  3               .if pflag
0028FD  3               	.out "- Particles enabled"
0028FD  3               .endif
0028FD  3               .if sflag
0028FD  3               	.out "- Scrolling enabled"
0028FD  3               .endif
0028FD  3               .if dflag
0028FD  3               	.out "- Digging enabled"
0028FD  3               .endif
0028FD  3               .if cflag
0028FD  3               	.out "- Collectable blocks enabled"
0028FD  3               .endif
0028FD  3               .if oflag
0028FD  3               	.out "- Objects enabled"
0028FD  3               .endif
0028FD  3               .if lflag
0028FD  3               	.out "- Ladders enabled"
0028FD  3               .endif
0028FD  3               .if aflag
0028FD  3               	.out "- Adventure mode enabled"
0028FD  3               .endif
0028FD  3               .if bflag
0028FD  3               	.out "- Big Sprites (16x24) enabled"
0028FD  3               .endif
0028FD  3               .if gflag
0028FD  3               	.out "- Colourmode enabled"
0028FD  3               .endif
0028FD  3               .if hflag
0028FD  3               	.out "- Hidden sprites/foregroundblocks enabled"
0028FD  3               .endif
0028FD  3               .if iflag
0028FD  3               	.out "- Invert mode enabled"
0028FD  3               .endif
0028FD  3               .if rflag
0028FD  3               	.out "- RAM saving sprites enabled"
0028FD  3               .endif
0028FD  3               .if xflag
0028FD  3               	.out "- Metablocks 16x6"
0028FD  3               .endif
0028FD  3               
0028FD  3               ; Global definitions ------------------------------------------------------------
0028FD  3               
0028FD  3               .if swrflag
0028FD  3               	FONT = font + data_address - data_start				; Font address
0028FD  3               .else
0028FD  3               	FONT = font
0028FD  3               .endif
0028FD  3               
0028FD  3               ; Block characteristics.
0028FD  3               
0028FD  3               	PLATFM	= 1		; platform.
0028FD  3               	WALL	= PLATFM + 1	; solid wall.
0028FD  3               	LADDER	= WALL + 1	; ladder.
0028FD  3               	FODDER	= LADDER + 1	; fodder block.
0028FD  3               	DEADLY	= FODDER + 1	; deadly block.
0028FD  3               	CUSTOM	= DEADLY + 1	; custom block.
0028FD  3               	WATER	= CUSTOM + 1	; water block.
0028FD  3                       COLECT	= WATER + 1	; collectable block.
0028FD  3                       NUMTYP	= COLECT + 1	; number of types.
0028FD  3               
0028FD  3               ; Sprites.
0028FD  3               
0028FD  3               .if bflag
0028FD  3               	SPR_HGT	= 24		; Sprite height
0028FD  3               	SPR_WID = 16		; Sprite width
0028FD  3               	NUMSPR	= 8		; number of sprites.
0028FD  3               .else				; 16x16 sprites
0028FD  3               	SPR_HGT = 16		; Sprite height
0028FD  3               	SPR_WID = 16		; Sprite width
0028FD  3               	NUMSPR	= 12		; number of sprites.
0028FD  3               .endif
0028FD  3               	TABSIZ = 17			; size of each entry.
0028FD  3               	SPRBUF = NUMSPR * TABSIZ; size of entire table.
0028FD  3               	NMESIZ = 4			; bytes stored in nmetab for each sprite.
0028FD  3               
0028FD  3               ; Sprite table variable offsets.
0028FD  3               
0028FD  3               	var_Type = 0		; sprite type
0028FD  3               	var_Image = 1		; sprite time number
0028FD  3               	var_Frame = 2		; sprite frame
0028FD  3               	var_Y = 3			; sprite y coordinate
0028FD  3               	var_X = 4			; sprite X coordinate
0028FD  3               
0028FD  3               	var_newType = 5		; sprite new type
0028FD  3               	var_newImage = 6	; sprite new image number
0028FD  3               	var_newFrame = 7	; sprite new frame
0028FD  3               	var_newY = 8		; sprite new y coordinate
0028FD  3               	var_newX = 9		; sprite new x coordinate
0028FD  3               
0028FD  3               	var_Direction = 10	; sprite direction
0028FD  3               	var_Param1 = 11		; sprite parameter 1
0028FD  3               	var_Param2 = 12		; sprite parameter 2
0028FD  3               
0028FD  3               	var_jumpLo = 13		; sprite jump ptr low
0028FD  3               	var_jumpHi = 14		; sprite jump ptr high
0028FD  3               	var_dataLo = 15		; sprite data ptr low
0028FD  3               	var_dataHi = 16		; sprite data ptr high
0028FD  3               
0028FD  3               ; Particle engine.
0028FD  3               
0028FD  3               	NUMSHR = 55			; pieces of shrapnel.
0028FD  3               	SHRSIZ = 6			; bytes per particle.
0028FD  3               
0028FD  3               .if iflag
0028FD  3               	TxtInvert   = $ff	; Invert byte for character printing
0028FD  3               	ScrFillByte = $ff	; Screen fill byte for CLS
0028FD  3               .else
0028FD  3               	TxtInvert   = $00	; Invert byte for character printing
0028FD  3               	ScrFillByte = $00	; Screen fill byte for CLS
0028FD  3               .endif
0028FD  3               
0028FD  3               	ASCII_NEWLINE = 13
0028FD  3               
0028FD  3               ;===============================================================
0028FD  3               ; Game starts here
0028FD  3               ;===============================================================
0028FD  3               
0028FD  3               ;--------------------------------------------------------------
0028FD  3               ; If a font is required...
0028FD  3               ;--------------------------------------------------------------
0028FD  3               
0028FD  3  20 A7 29     	jsr game	 		; start the game.
002900  3  60           	rts
002901  3               
002901  3               ; Don't change the order of these four.
002901  3               ; Menu routine relies on winlft following wintop.
002901  3               
002901  3  01           wintop:	.byte WINDOWTOP		; top of window.
002902  3  01           winlft:	.byte WINDOWLFT		; left edge.
002903  3  13           winhgt:	.byte WINDOWHGT		; window height.
002904  3  1E           winwid:	.byte WINDOWWID		; window width.
002905  3  0E           numob:	.byte NUMOBJ		; number of objects in game.
002906  3               
002906  3               ; Pixel versions of wintop, winlft, winhgt, winwid.
002906  3               
002906  3  08           wntopx:	.byte (8 * WINDOWTOP)
002907  3  08           wnlftx:	.byte (8 * WINDOWLFT)
002908  3  90           wnbotx:	.byte ((WINDOWTOP * 8) + (WINDOWHGT * 8) - 16)
002909  3  E6           wnrgtx:	.byte ((WINDOWLFT * 8) + (WINDOWWID * 8) - 16)-2
00290A  3               
00290A  3               ; Make sure pointers are arranged in the same order as the data itself.
00290A  3               
00290A  3               .if swrflag
00290A  3               frmptr:	.word frmlst + data_address - data_start        ; sprite frames.
00290A  3               .else
00290A  3  B1 6F        frmptr:	.word frmlst        ; sprite frames.
00290C  3               .endif
00290C  3               
00290C  3               ; Assorted game routines which can go in contended memory.
00290C  3               
00290C  3               ;--------------------------------------------------------------
00290C  3               ; Modify for inventory.
00290C  3               ; called by the INV command
00290C  3               ;
00290C  3               ; Input:
00290C  3               ;  X   = message nr with objects seperated with ,
00290C  3               ;
00290C  3               ; Output:
00290C  3               ;  OPT = selected line nr of INV menu
00290C  3               ;--------------------------------------------------------------
00290C  3               
00290C  3               .if mflag
00290C  3               minve:
00290C  3               .if xflag
00290C  3               	lda #WINDOWHGT
00290C  3               	asl a
00290C  3               	sta winhgt
00290C  3               	lda #WINDOWWID
00290C  3               	asl a
00290C  3               	sta winwid
00290C  3               .endif
00290C  3               	lda #<(invdis)		; routine address.
00290C  3               	sta mod0+1		; set up menu routine.
00290C  3               	sta mod2+1		; set up count routine.
00290C  3               	lda #>(invdis)
00290C  3               	sta mod0+2
00290C  3               	sta mod2+2
00290C  3               	lda #<(fopt)		; find option from available objects.
00290C  3               	sta mod1+1		; set up routine.
00290C  3               	lda #>(fopt)
00290C  3               	sta mod1+1+1
00290C  3               	jmp dbox		; do menu routine.
00290C  3               
00290C  3               ;--------------------------------------------------------------
00290C  3               ; Modify for menu.
00290C  3               ; called by the MENU command
00290C  3               ;
00290C  3               ; Input:
00290C  3               ;  X   = message nr with menu items seperated with ,
00290C  3               ;
00290C  3               ; Output:
00290C  3               ;  OPT = selected line nr of MENU menu
00290C  3               ;--------------------------------------------------------------
00290C  3               
00290C  3               mmenu:
00290C  3               	lda #<(always)		; routine address.
00290C  3               	sta mod0+1		; set up routine.
00290C  3               	sta mod2+1		; set up count routine.
00290C  3               	lda #>(always)
00290C  3               	sta mod0+2
00290C  3               	sta mod2+2
00290C  3               
00290C  3               	lda #<(fstd)		; standard option selection.
00290C  3               	sta mod1+1		; set up routine.
00290C  3               	lda #>(fstd)
00290C  3               	sta mod1+2
00290C  3               
00290C  3               ; Drop through into box routine.
00290C  3               
00290C  3               ;--------------------------------------------------------------
00290C  3               ; Work out size of box for message or menu.
00290C  3               ;--------------------------------------------------------------
00290C  3               
00290C  3               dbox:
00290C  3               .if swrflag
00290C  3               	lda #<(msgdat + data_address - data_start)		; pointer to messages.
00290C  3               	sta z80_l
00290C  3               	lda #>(msgdat + data_address - data_start)
00290C  3               	sta z80_h
00290C  3               .else
00290C  3               	lda #<msgdat		; pointer to messages.
00290C  3               	sta z80_l
00290C  3               	lda #>msgdat
00290C  3               	sta z80_h
00290C  3               .endif
00290C  3               
00290C  3               	jsr getwrd		; get message number.
00290C  3               
00290C  3               	lda z80_h		; store pointer to message.
00290C  3               	sta TmpAddr
00290C  3               	lda z80_l
00290C  3               	sta TmpAddr+1
00290C  3               
00290C  3               	lda #1			; height.
00290C  3               	sta z80_d
00290C  3               	lda #0			; start at object zero.
00290C  3               	sta combyt		; store number of object in combyt.
00290C  3               	sta z80_e		; maximum width.
00290C  3               dbox5:
00290C  3               	lda #0			; this line"s width.
00290C  3               	sta z80_b
00290C  3               mod2:
00290C  3               	jsr always		; item in player"s possession?
00290C  3               	cmp #255
00290C  3               	bne dbox6		; not in inventory, skip this line.
00290C  3               	inc z80_d		; add to tally.
00290C  3               dbox6:
00290C  3               	ldy #0			; get character.
00290C  3               	lda (z80_hl),y
00290C  3               	sta z80_a
00290C  3               	inc z80_l		; next character.
00290C  3               	bne :+
00290C  3               	inc z80_h
00290C  3               :
00290C  3               	lda z80_a		; reached end of line?
00290C  3               	cmp #','
00290C  3               	beq dbox3		; yes.
00290C  3               	cmp #ASCII_NEWLINE
00290C  3               	beq dbox3		; yes.
00290C  3               	inc z80_b		; add to this line"s width.
00290C  3               	lda z80_a
00290C  3               	bmi dbox4		; end of message? yes, end count.
00290C  3               	jmp dbox6		; repeat until we find the end.
00290C  3               dbox3:
00290C  3               	lda z80_e		; maximum line width.
00290C  3               	cmp z80_b		; have we exceeded longest so far?
00290C  3               	bpl dbox5		; no, carry on looking.
00290C  3               	lda z80_b		; make this the widest so far.
00290C  3               	sta z80_e
00290C  3               	jmp dbox5		; keep looking.
00290C  3               dbox4:
00290C  3               	lda z80_e		; maximum line width.
00290C  3               	cmp z80_b		; have we exceeded longest so far?
00290C  3               	bpl dbox8		; no, carry on looking.
00290C  3               	lda z80_b		; final line is the longest so far.
00290C  3               	sta z80_e
00290C  3               dbox8:
00290C  3               	dec z80_d		; decrement items found.
00290C  3               	bne :+			; total was zero.
00290C  3               	lda #255
00290C  3               	sta varopt
00290C  3               	jmp dbox15
00290C  3               :
00290C  3               	lda z80_e		; longest line.
00290C  3               	bne :+			; was it zero?
00290C  3               	jmp dbox15		; total was zero.
00290C  3               :
00290C  3               	sta bwid		; set up size.
00290C  3               	lda z80_d
00290C  3               	sta blen
00290C  3               
00290C  3               ;--------------------------------------------------------------
00290C  3               ; That's set up our box size.
00290C  3               ;--------------------------------------------------------------
00290C  3               
00290C  3               	lda winhgt		; window height in characters.
00290C  3               	sec
00290C  3               	sbc z80_d		; subtract height of box.
00290C  3               	lsr a			; divide by 2.
00290C  3               	clc
00290C  3               	adc wintop		; add top edge of window.
00290C  3               	sta btop		; set up box top.
00290C  3               
00290C  3               	lda winwid		; window width in characters.
00290C  3               	sec
00290C  3               	sbc z80_e		; subtract box width.
00290C  3               	lsr a			; divide by 2.
00290C  3               	clc
00290C  3               	adc winlft		; add left edge of window.
00290C  3               	sta blft		; box left.
00290C  3               
00290C  3               	lda #<(FONT-256)		; font.
00290C  3               	sta grbase		; set up for text display.
00290C  3               	lda #>(FONT-256)
00290C  3               	sta grbase+1
00290C  3               
00290C  3               	lda TmpAddr+1		; restore message pointer.
00290C  3               	sta z80_l
00290C  3               	lda TmpAddr
00290C  3               	sta z80_h
00290C  3               
00290C  3               	lda btop		; box top.
00290C  3               	sta dispy		; set display coordinate.
00290C  3               	lda #0			; start at object zero.
00290C  3               	sta combyt		; store number of object in combyt.
00290C  3               dbox2:
00290C  3               	lda combyt		; get object number.
00290C  3               	sta z80_a
00290C  3               mod0:
00290C  3               	jsr always		; check inventory for display.
00290C  3               	cmp #255
00290C  3               	beq :+
00290C  3               	jmp dbox13		; not in inventory, skip this line.
00290C  3               :
00290C  3               	lda blft		; box left.
00290C  3               	sta dispx		; set left display position.
00290C  3               	lda bwid		; box width.
00290C  3               	sta z80_b		; store width.
00290C  3               dbox0:
00290C  3               	ldy #0			; get character.
00290C  3               	lda (z80_hl),y
00290C  3               	cmp #','		; end of line?
00290C  3               	beq dbox1		; yes, next one.
00290C  3               	cmp #ASCII_NEWLINE			; end of line?
00290C  3               	beq dbox1		; yes, next one.
00290C  3               
00290C  3               	cmp #141			; end of line?
00290C  3               	bne :+
00290C  3               	dec bwid
00290C  3               	jmp dbox7		; yes, next one.
00290C  3               :
00290C  3               	dec z80_b		; one less to display.
00290C  3               	and #127		; remove terminator.
00290C  3               
00290C  3               	jsr pchr		; display on screen.
00290C  3               
00290C  3               	ldy #0
00290C  3               	lda (z80_hl),y		; get character.
00290C  3               	sta z80_a
00290C  3               	inc z80_l		; next character.
00290C  3               	bne :+
00290C  3               	inc z80_h
00290C  3               :
00290C  3               	lda z80_a
00290C  3               	cmp #128		; end of message?
00290C  3               	bmi :+
00290C  3               	jmp dbox7		; yes, job done.
00290C  3               :
00290C  3               	lda z80_b		; chars remaining.
00290C  3               	beq :+			; are any left?
00290C  3               	jmp dbox0		; yes, continue.
00290C  3               :
00290C  3               ;---------------------------------------------------
00290C  3               ; Reached limit of characters per line.
00290C  3               ;---------------------------------------------------
00290C  3               
00290C  3               dbox9:
00290C  3               	ldy #0
00290C  3               	lda (z80_hl),y		; get character.
00290C  3               	inc z80_l		; next one.
00290C  3               	bne :+
00290C  3               	inc z80_h
00290C  3               :
00290C  3               	cmp #','		; another line?
00290C  3               	beq dbox10		; yes, do next line.
00290C  3               	cmp #ASCII_NEWLINE			; another line?
00290C  3               	beq dbox10		; yes, do next line.
00290C  3               	cmp #128		; end of message?
00290C  3               	bcs :+
00290C  3               	jmp dbox11		; yes, finish message.
00290C  3               :
00290C  3               	jmp dbox9
00290C  3               
00290C  3               ;---------------------------------------------------
00290C  3               ; Fill box to end of line.
00290C  3               ;---------------------------------------------------
00290C  3               
00290C  3               dboxf:
00290C  3               	lda #32			; space character.
00290C  3               	jsr pchr		; display character.
00290C  3               	dec z80_b
00290C  3               	beq :+
00290C  3               	jmp dboxf		; repeat for remaining chars on line.
00290C  3               :
00290C  3               	rts
00290C  3               dbox1:
00290C  3               	inc z80_l		; skip character.
00290C  3               	bne :+
00290C  3               	inc z80_h
00290C  3               :
00290C  3               	jsr dboxf		; fill box out to right side.
00290C  3               dbox10:
00290C  3               	inc dispy		; y coordinate down a line next position.
00290C  3               	jmp dbox2		; next line.
00290C  3               dbox7:
00290C  3               	lda z80_b		; chars remaining.
00290C  3               	bne :+			; are any left?
00290C  3               	jmp dbox11		; no, nothing to draw.
00290C  3               :
00290C  3               	jsr dboxf		; fill message to line.
00290C  3               
00290C  3               ;------------------------------------------------------
00290C  3               ; Drawn the box menu, now select option.
00290C  3               ;------------------------------------------------------
00290C  3               
00290C  3               dbox11:
00290C  3               	lda btop		; box top.
00290C  3               	sta dispy		; set bar position.
00290C  3               dbox14:
00290C  3               	jsr joykey		; get controls.
00290C  3               	cmp #$7f		; anything pressed?
00290C  3               	bne dbox14		; yes, debounce it.
00290C  3               	jsr dbar		; draw bar.
00290C  3               dbox12:
00290C  3               	jsr joykey		; get controls.
00290C  3               	cmp #$7f		; anything pressed?
00290C  3               	beq dbox12		; no, nothing.
00290C  3               	and #16			; fire button pressed?
00290C  3               	bne :+
00290C  3               mod1:
00290C  3               	jmp fstd		; yes, job done.
00290C  3               :
00290C  3               	jsr dbar		; delete bar.
00290C  3               
00290C  3               	lda joyval		; joystick reading.
00290C  3               	and #8			; going up?
00290C  3               	beq dboxu		; yes, go up.
00290C  3               
00290C  3               	ldx dispy		; vertical position of bar.
00290C  3               	inx			; look down.
00290C  3               	txa
00290C  3               	sec
00290C  3               	sbc btop		; find distance from top.
00290C  3               	cmp blen		; top of box.
00290C  3               	bne :+
00290C  3               	jmp dbox14		; yes, go no further.
00290C  3               :
00290C  3               	inc dispy		; move bar.
00290C  3               	jmp dbox14		; continue.
00290C  3               dboxu:
00290C  3               	lda dispy		; vertical position of bar.
00290C  3               	cmp btop		; are we at the top?
00290C  3               	bne :+
00290C  3               	jmp dbox14		; yes, go no further.
00290C  3               :
00290C  3               	dec dispy		; move bar.
00290C  3               	jmp dbox14		; continue.
00290C  3               fstd:
00290C  3               	lda dispy		; bar position.
00290C  3               	sec
00290C  3               	sbc btop		; find selected option.
00290C  3               	sta varopt		; store the option.
00290C  3               	jmp redraw		; redraw the screen.
00290C  3               
00290C  3               ;------------------------------------------------------
00290C  3               ; Option not available.  Skip this line.
00290C  3               ;------------------------------------------------------
00290C  3               
00290C  3               dbox13:
00290C  3               	ldy #0
00290C  3               	lda (z80_hl),y		; get character.
00290C  3               	inc z80_l		; next one.
00290C  3               
00290C  3               	bne :+
00290C  3               	inc z80_h
00290C  3               :
00290C  3               	cmp #','		; another line?
00290C  3               	bne :+
00290C  3               	jmp dbox2		; yes, do next line.
00290C  3               :
00290C  3               	cmp #ASCII_NEWLINE			; another line?
00290C  3               	bne :+
00290C  3               	jmp dbox2		; yes, do next line.
00290C  3               :
00290C  3               
00290C  3               	bpl :+			; end of message?
00290C  3               	jmp dbox11		; yes, finish message.
00290C  3               :
00290C  3               	jmp dbox13
00290C  3               dbox15:
00290C  3               .if xflag
00290C  3               	lda #WINDOWWID
00290C  3               	sta winwid
00290C  3               	lda #WINDOWHGT
00290C  3               	sta winhgt
00290C  3               .endif
00290C  3               	lda TmpAddr		; pop message pointer from the stack.
00290C  3               	sta z80_h
00290C  3               	lda TmpAddr+1
00290C  3               	sta z80_l
00290C  3               	rts
00290C  3               
00290C  3               ;------------------------------------------------------
00290C  3               ; Invert bar
00290C  3               ;------------------------------------------------------
00290C  3               
00290C  3               dbar:
00290C  3               	lda blft		; box left.
00290C  3               	sta dispx		; set display coordinate.
00290C  3               	jsr gprad		; get printing address.
00290C  3               
00290C  3               	lda bwid		; box width.
00290C  3               	sta z80_c		; loop counter in c.
00290C  3               	lda z80_h
00290C  3               	sta z80_d		; store screen address high byte.
00290C  3               dbar1:
00290C  3               	ldx #7			; pixel height in b.
00290C  3               dbar0:
00290C  3               	ldy scrtab,x
00290C  3               	lda (scraddr),y		; get screen byte.
00290C  3               	eor #255		; reverse all bits.
00290C  3               	sta (scraddr),y		; write back to screen.
00290C  3               	dex			; next line down.
00290C  3               	bpl dbar0		; draw rest of character.
00290C  3               
00290C  3               	lda scraddr
00290C  3               	adc #8
00290C  3               	sta scraddr
00290C  3               	bcc :+
00290C  3               	inc scraddr+1
00290C  3               :
00290C  3               	dec z80_c		; decrement character counter.
00290C  3               	bne dbar1		; repeat for whole line.
00290C  3               	rts
00290C  3               
00290C  3               ;------------------------------------------------------
00290C  3               ; Point to object
00290C  3               ;
00290C  3               ; Input:
00290C  3               ;  -
00290C  3               ;
00290C  3               ; Output:
00290C  3               ;  A = object number, A=255 if already in possession
00290C  3               ;------------------------------------------------------
00290C  3               
00290C  3               invdis:
00290C  3               	lda z80_l		; store message text pointer.
00290C  3               	pha
00290C  3               	lda z80_h
00290C  3               	pha
00290C  3               	lda combyt		; object number.
00290C  3               	inc combyt		; ready for next one.
00290C  3               	jsr gotob		; check if we have object.
00290C  3               	tay
00290C  3               	pla
00290C  3               	sta z80_h
00290C  3               	pla
00290C  3               	sta z80_l
00290C  3               	tya
00290C  3               	rts
00290C  3               
00290C  3               ;------------------------------------------------------
00290C  3               ; Find option selected.
00290C  3               ;
00290C  3               ; Input:
00290C  3               ;  -
00290C  3               ;
00290C  3               ; Output:
00290C  3               ;  OPT = selected object
00290C  3               ;------------------------------------------------------
00290C  3               
00290C  3               fopt:
00290C  3               	lda dispy
00290C  3               	sec
00290C  3               	sbc btop		; find selected option.
00290C  3               	sta tmp+2		; option selected in b register.
00290C  3               	inc tmp+2
00290C  3               
00290C  3               	lda #0			; set to first item.
00290C  3               	sta combyt		; object number.
00290C  3               fopt0:
00290C  3               	jsr fobj		; find next object in inventory.
00290C  3               	dec tmp+2
00290C  3               	bne fopt0		; repeat for relevant steps down the list.
00290C  3               
00290C  3               	lda combyt		; get option.
00290C  3               	sta varopt		; store the option.
00290C  3               	dec varopt		; one less, due to where we increment combyt.
00290C  3               	jmp redraw		; redraw the screen.
00290C  3               fobj:
00290C  3               	ldy combyt		; object number.
00290C  3               	inc combyt		; ready for next item.
00290C  3               	tya
00290C  3               	jsr gotob		; do we have this item?
00290C  3               	cmp #255
00290C  3               	bne :+
00290C  3               	rts
00290C  3               :
00290C  3               	jmp fobj		; yes, it's on the list.
00290C  3               .endif
00290C  3               
00290C  3               ;----------------------------------------------------
00290C  3               ; Clear sprite table.
00290C  3               ;
00290C  3               ; sprtab[0] - sprtab[SPRBUF-1] = 255
00290C  3               ;----------------------------------------------------
00290C  3               
00290C  3               xspr:
00290C  3  A9 FF        	lda #255		; clear byte.
00290E  3  A2 00        	ldx #0			; length of table.
002910  3               xspr0:
002910  3  9D 00 0B     	sta sprtab,x		; sprite table.
002913  3  E8           	inx			; move to next byte.
002914  3  E0 CC        	cpx #SPRBUF
002916  3  D0 F8        	bne xspr0		; repeat for rest of table.
002918  3  60           	rts
002919  3               
002919  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
002919  3               ; Sound, NOT IMPLEMENTED!!!
002919  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
002919  3               ;
002919  3               ;silenc:
002919  3               ;	jsr silen1 		; silence channel 1.
002919  3               ;	jsr silen2 		; silence channel 2.
002919  3               ;	jsr silen3 		; silence channel 3.
002919  3               ;	jmp plsnd 		; play all channels to switch them off.
002919  3               ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
002919  3               
002919  3               ;-------------------------------------------------------------
002919  3               ; Initialise all objects.
002919  3               ;
002919  3               ; Reset current room,y,x to start room,y,x for all objects
002919  3               ;-------------------------------------------------------------
002919  3               
002919  3               .if oflag
002919  3               iniob:
002919  3               .if swrflag
002919  3               	lda #<(objdta + data_address - data_start) 		; objects table.
002919  3               	sta z80_x
002919  3               	lda #>(objdta + data_address - data_start)
002919  3               	sta z80_i
002919  3               .else
002919  3  A9 D6        	lda #<objdta		; objects table.
00291B  3  85 rr        	sta z80_x
00291D  3  A9 9C        	lda #>objdta
00291F  3  85 rr        	sta z80_i
002921  3               .endif
002921  3               
002921  3  AE 05 29     	ldx numob 		; number of objects in the game.
002924  3               iniob0:
002924  3  A0 23        	ldy #35
002926  3  B1 rr        	lda (z80_ix),y 		; start screen.
002928  3  A0 20        	ldy #32
00292A  3  91 rr        	sta (z80_ix),y 		; set start screen.
00292C  3               
00292C  3  A0 24        	ldy #36
00292E  3  B1 rr        	lda (z80_ix),y 		; find start y.
002930  3  A0 21        	ldy #33
002932  3  91 rr        	sta (z80_ix),y 		; set start y.
002934  3               
002934  3  A0 25        	ldy #37
002936  3  B1 rr        	lda (z80_ix),y 		; get initial x.
002938  3  A0 22        	ldy #34
00293A  3  91 rr        	sta (z80_ix),y 		; set x coord.
00293C  3               
00293C  3  18           	clc 			; point to next object.
00293D  3  A5 rr        	lda z80_x
00293F  3  69 26        	adc #38			; distance between objects.
002941  3  85 rr        	sta z80_x
002943  3  90 02        	bcc :+
002945  3  E6 rr        	inc z80_i
002947  3               :
002947  3  CA           	dex 			; repeat.
002948  3  D0 DA        	bne iniob0
00294A  3               
00294A  3  60           	rts
00294B  3               .endif
00294B  3               
00294B  3               ;-----------------------------------------------
00294B  3               ; Redraw the screen.
00294B  3               ;
00294B  3               ; Remove old copy of all sprites for redraw.
00294B  3               ;-----------------------------------------------
00294B  3               
00294B  3               redraw:
00294B  3               .if xflag
00294B  3               	lda #WINDOWWID
00294B  3               	sta winwid
00294B  3               	lda #WINDOWHGT
00294B  3               	sta winhgt
00294B  3               .endif
00294B  3  A5 rr        	lda z80_i 		; place sprite pointer on stack.
00294D  3  48           	pha
00294E  3  A5 rr        	lda z80_x
002950  3  48           	pha
002951  3               
002951  3  20 C7 2F     	jsr droom		; show screen layout.
002954  3               .if oflag
002954  3  20 99 2B     	jsr shwob		; draw objects.
002957  3               .endif
002957  3               numsp0:
002957  3  A9 0C        	lda #NUMSPR		; sprites to draw.
002959  3  85 rr        	sta tmp
00295B  3               
00295B  3  A9 00        	lda #<sprtab		; sprite table.
00295D  3  85 rr        	sta z80_x
00295F  3  A9 0B        	lda #>sprtab
002961  3  85 rr        	sta z80_i
002963  3               redrw0:
002963  3  A0 00        	ldy #0
002965  3  B1 rr        	lda (z80_ix),y		; old sprite type.
002967  3  C9 FF        	cmp #255		; is it enabled?
002969  3  F0 0B        	beq redrw1 		; no, find next one.
00296B  3               
00296B  3  A0 03        	ldy #var_Y
00296D  3  B1 rr        	lda (z80_ix),y 		; sprite y.
00296F  3  C9 B1        	cmp #177		; beyond maximum?
002971  3  B0 03        	bcs redrw1		; yes, nothing to draw.
002973  3               
002973  3  20 40 28     	jsr sspria		; show single sprite.
002976  3               
002976  3               redrw1:
002976  3  18           	clc			; next sprite.
002977  3  A5 rr        	lda z80_x
002979  3  69 11        	adc #TABSIZ		; distance to next odd/even entry.
00297B  3  85 rr        	sta z80_x
00297D  3  90 02        	bcc :+
00297F  3  E6 rr        	inc z80_i
002981  3               :
002981  3  C6 rr        	dec tmp			; repeat for remaining sprites.
002983  3  D0 DE        	bne redrw0
002985  3               
002985  3               rpblc1:
002985  3               ;	jsr dshrp		; redraw shrapnel.
002985  3               
002985  3               .if aflag
002985  3               	jsr rbloc		; draw blocks for this screen
002985  3               .endif
002985  3  68           	pla			; retrieve sprite pointer.
002986  3  85 rr        	sta z80_x
002988  3  68           	pla
002989  3  85 rr        	sta z80_i
00298B  3               
00298B  3  60           	rts
00298C  3               
00298C  3               ;----------------------------------------------------------------------
00298C  3               ; Clear screen routine.
00298C  3               ;
00298C  3               ; Fill screenmem $8000-$97ff with ScrFillByte
00298C  3               ;----------------------------------------------------------------------
00298C  3               
00298C  3               cls:
00298C  3  A9 0E        	lda #>ScreenAddr		; screen address.
00298E  3  8D 97 29     	sta clsloop+2
002991  3  A9 00        	lda #ScrFillByte
002993  3  A0 00        	ldy #0
002995  3               clsloop:
002995  3  99 00 0E     	sta ScreenAddr,y
002998  3  C8           	iny
002999  3  D0 FA        	bne clsloop
00299B  3  EE 97 29     	inc clsloop+2
00299E  3  AE 97 29     	ldx clsloop+2
0029A1  3  E0 26        	cpx #>(ScreenAddr+ScreenSize)		; _BEEB
0029A3  3  D0 F0        	bne clsloop
0029A5  3  60           	rts
0029A6  3               
0029A6  3               ;----------------------------------------------------------------------
0029A6  3               ; FODDER check
0029A6  3               ;----------------------------------------------------------------------
0029A6  3               
0029A6  3               .if pflag .or dflag
0029A6  3               fdchk:
0029A6  3               	cmp #FODDER 		; is it fodder?
0029A6  3               	beq :+
0029A6  3               	rts 			; no.
0029A6  3               :
0029A6  3               	lda #0			; wipe fodder in MAP
0029A6  3               	ldy #0
0029A6  3               	sta (bufaddr),y 	; rewrite block type.
0029A6  3               
0029A6  3               	lda dispx		; x=x/8
0029A6  3               	pha
0029A6  3               	lsr a
0029A6  3               	lsr a
0029A6  3               	lsr a
0029A6  3               	sta dispx
0029A6  3               
0029A6  3               	lda dispy		; y=y/8
0029A6  3               	pha
0029A6  3               	lsr a
0029A6  3               	lsr a
0029A6  3               	lsr a
0029A6  3               	sta dispy
0029A6  3               
0029A6  3               	lda #0 			; block to write.
0029A6  3               	jsr pattr 		; write block.
0029A6  3               
0029A6  3               	pla
0029A6  3               	sta dispy
0029A6  3               	pla
0029A6  3               	sta dispx
0029A6  3               	rts
0029A6  3               .endif
0029A6  3               
0029A6  3               ;----------------------------------------------------
0029A6  3               ; Scrolly text and puzzle variables.
0029A6  3               ;----------------------------------------------------
0029A6  3               
0029A6  3               .if sflag
0029A6  3               txtbit:	.byte 128		; bit to write.
0029A6  3               txtwid:	.byte 16		; width of ticker message.
0029A6  3               .if swrflag
0029A6  3               txtpos:	.word (msgdat + data_address - data_start)
0029A6  3               txtini:	.word (msgdat + data_address - data_start)
0029A6  3               .else
0029A6  3               txtpos:	.word msgdat
0029A6  3               txtini:	.word msgdat
0029A6  3               .endif
0029A6  3               txtscr:	.word ScreenAddr
0029A6  3               .endif
0029A6  3               
0029A6  3               ;----------------------------------------------------
0029A6  3               ; Specialist routines.
0029A6  3               ; Process shrapnel.
0029A6  3               ;----------------------------------------------------
0029A6  3               proshr:
0029A6  3               .if pflag
0029A6  3               	lda #<SHRAPN		; table.
0029A6  3               	sta z80_x
0029A6  3               	lda #>SHRAPN
0029A6  3               	sta z80_i
0029A6  3               
0029A6  3               	lda #NUMSHR		; shrapnel pieces to process.
0029A6  3               	sta shrctr
0029A6  3               prosh0:
0029A6  3               	ldy #0
0029A6  3               	lda (z80_ix),y		; on/off marker.
0029A6  3               	asl a
0029A6  3               proshx:
0029A6  3               	bcs :+
0029A6  3               	jsr prosh1 		; on, so process it.
0029A6  3               :
0029A6  3               	clc
0029A6  3               	lda z80_x
0029A6  3               	adc #SHRSIZ
0029A6  3               	sta z80_x
0029A6  3               	bcc :+
0029A6  3               	inc z80_i
0029A6  3               :
0029A6  3               	dec shrctr		; round again.
0029A6  3               	bne prosh0
0029A6  3               .endif
0029A6  3               .if sflag
0029A6  3               	jsr scrly
0029A6  3               .endif
0029A6  3  60           	rts
0029A7  3               
0029A7  3               .if pflag
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Proces shrapnel piece
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               prosh1:
0029A7  3               	jsr plot 		; delete the pixel.
0029A7  3               
0029A7  3               	lda #<shrptr		; shrapnel routine pointers.
0029A7  3               	sta z80_l
0029A7  3               	lda #>shrptr
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	ldy #0
0029A7  3               	lda (z80_ix),y		; restore shrapnel type.
0029A7  3               	jsr prosh2 		; run the routine.
0029A7  3               	jsr chkxy		; check x and y are good before we redisplay.
0029A7  3               
0029A7  3               	lda #<SHRSIZ 		; distance to next.
0029A7  3               	sta z80_e
0029A7  3               	lda #>SHRSIZ
0029A7  3               	sta z80_d
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Run the routine
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               prosh2:
0029A7  3               	asl a 			; 2 bytes per address.
0029A7  3               	tay
0029A7  3               	lda shrptr,y
0029A7  3               	sta z80_l
0029A7  3               	lda shrptr+1,y 		; fetch high byte from table.
0029A7  3               	sta z80_h
0029A7  3               	jmp (z80_hl) 		; jump to routine.
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Paricle routine table
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               shrptr:	.word laser		; laser.
0029A7  3               	.word trail		; vapour trail.
0029A7  3               	.word shrap		; shrapnel from explosion.
0029A7  3               	.word dotl		; horizontal starfield left.
0029A7  3               	.word dotr		; horizontal starfield right.
0029A7  3               	.word dotu		; vertical starfield up.
0029A7  3               	.word dotd		; vertical starfield down.
0029A7  3               	.word ptcusr		; user particle.
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Explosion shrapnel.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               shrap:
0029A7  3               	ldy #1
0029A7  3               	lda (z80_ix),y 		; get the angle.
0029A7  3               	clc
0029A7  3               	adc #<shrsin		; shrapnel sine table.
0029A7  3               	sta z80_l
0029A7  3               	lda #>shrsin
0029A7  3               	adc #0
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	ldy #0
0029A7  3               	lda (z80_hl),y 		; fetch value from table.
0029A7  3               	sta z80_e
0029A7  3               	inc z80_l 		; next byte of table.
0029A7  3               	bne :+
0029A7  3               	inc z80_h
0029A7  3               :
0029A7  3               	ldy #0
0029A7  3               	lda (z80_hl),y		; fetch value from table.
0029A7  3               	sta z80_d
0029A7  3               	inc z80_l		; next byte of table.
0029A7  3               	bne :+
0029A7  3               	inc z80_h
0029A7  3               :
0029A7  3               	ldy #0
0029A7  3               	lda (z80_hl),y 		; fetch value from table.
0029A7  3               	sta z80_c
0029A7  3               	inc z80_l 		; next byte of table.
0029A7  3               	bne :+
0029A7  3               	inc z80_h
0029A7  3               :
0029A7  3               	ldy #0
0029A7  3               	lda (z80_hl),y 		; fetch value from table.
0029A7  3               	sta z80_b
0029A7  3               
0029A7  3               	ldy #2
0029A7  3               	lda (z80_ix),y 		; x coordinate in hl.
0029A7  3               	clc
0029A7  3               	adc z80_e		; add sine lb
0029A7  3               	sta (z80_ix),y		; store new coordinate lb.
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y
0029A7  3               	adc z80_d		; add sine hb
0029A7  3               	sta (z80_ix),y		; store new coordinate hb.
0029A7  3               
0029A7  3               	ldy #4
0029A7  3               	lda (z80_ix),y	 	; y coordinate in hl.
0029A7  3               	clc
0029A7  3               	adc z80_c		; add cosine lb
0029A7  3               	sta (z80_ix),y		; store new coordinate lb.
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y
0029A7  3               	adc z80_b		; add cosine lb
0029A7  3               	sta (z80_ix),y		; store new coordinate hb.
0029A7  3               
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Move dots
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               dotl:
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y
0029A7  3               	sec
0029A7  3               	sbc #1		 	; move left.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               dotr:
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y
0029A7  3               	clc
0029A7  3               	adc #1		 	; move left.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               dotu:
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y
0029A7  3               	sec
0029A7  3               	sbc #1		 	; move up.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               dotd:
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y
0029A7  3               	clc
0029A7  3               	adc #1			; move down.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Check if coordinates are ok before redrawing at new position.
0029A7  3               ;
0029A7  3               ; left:   X>L		X=L	Ok
0029A7  3               ; right:  R+15>X	X=R	Ok
0029A7  3               ; top:    Y>T		Y=T	Ok
0029A7  3               ; bottom: B+15>Y	Y=B	Ok
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               chkxy:
0029A7  3               
0029A7  3               ; top:    Y>T		Y=T	Ok
0029A7  3               
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0029A7  3               	cmp wntopx		; window top.
0029A7  3               	bcs :+			; compare with top window limit.
0029A7  3               	jmp kilshr		; out of window, kill shrapnel.
0029A7  3               :
0029A7  3               ; left:   X>L		X=L	Ok
0029A7  3               
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y	 	; fetch shrapnel coordinate.
0029A7  3               	cmp wnlftx		; left edge.
0029A7  3               	bcs :+			; compare with left window limit.
0029A7  3               	jmp kilshr		; out of window, kill shrapnel.
0029A7  3               :
0029A7  3               ; bottom: B+15>Y	Y=B	Ok
0029A7  3               
0029A7  3               	lda wnbotx		; point to bottom.
0029A7  3               	clc
0029A7  3               	adc #15
0029A7  3               	ldy #3
0029A7  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0029A7  3               	bcs :+			; compare with shrapnel x coordinate.
0029A7  3               	jmp kilshr		; off screen, kill shrapnel..
0029A7  3               :
0029A7  3               ; right:  R+15>X	X=R	Ok
0029A7  3               
0029A7  3               	lda wnrgtx		; point to right edge.
0029A7  3               	clc
0029A7  3               	adc #15
0029A7  3               	ldy #5
0029A7  3               	cmp (z80_ix),y	 	; fetch shrapnel coordinate.
0029A7  3               	bcs :+			; compare with window limit.
0029A7  3               	jmp kilshr		; off screen, kill shrapnel.
0029A7  3               :
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Drop through.
0029A7  3               ; Display shrapnel.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               plot:
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y		; y integer.
0029A7  3               	sta dispy	 	; workspace coordinates.
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y	 	; x integer.
0029A7  3               	sta dispx 		; workspace coordinates.
0029A7  3               
0029A7  3               	ldy #0
0029A7  3               	lda (z80_ix),y 		; type.
0029A7  3               	bne :+			; is it a laser?
0029A7  3               	jmp plot1 		; yes, draw laser instead.
0029A7  3               :
0029A7  3               plot0:
0029A7  3               	lda dispx		; which pixel within byte do we
0029A7  3               	and #7			; want to set first?
0029A7  3               	tay
0029A7  3               	lda dots,y 		; table of small pixel positions.
0029A7  3               	sta z80_e 		; get value.
0029A7  3               
0029A7  3               	jsr scadd 		; screen address.
0029A7  3               	ldy #0
0029A7  3               	lda (scraddr),y		; see what's already there.
0029A7  3               	eor z80_e
0029A7  3               	sta (scraddr),y 	; put back on screen.
0029A7  3               	rts
0029A7  3               
0029A7  3               plot1:
0029A7  3               	jsr scadd 		; screen address.
0029A7  3               	ldy #0
0029A7  3               	lda (scraddr),y 	; fetch byte there.
0029A7  3               	eor #255 		; toggle all bits.
0029A7  3               	sta (scraddr),y 	; new byte.
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Switch off shrapnel
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               kilshr:
0029A7  3               	lda #128
0029A7  3               	ldy #0
0029A7  3               	sta (z80_ix),y	; switch off shrapnel.
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Sine/cosine table
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               shrsin:	.word 0,1024,391,946,724,724,946,391
0029A7  3               	.word 1024,0,946,65144,724,64811,391,64589
0029A7  3               	.word 0,64512,65144,64589,64811,64811,64589,65144
0029A7  3               	.word 64512,0,64589,391,64811,724,65144,946
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Create trail
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               trail:
0029A7  3               	ldy #1
0029A7  3               	lda (z80_ix),y 	; time remaining.
0029A7  3               	sec
0029A7  3               	sbc #1
0029A7  3               	sta (z80_ix),y
0029A7  3               	bne :+
0029A7  3               	jmp trailk		; time to switch it off.
0029A7  3               :
0029A7  3               	jsr qrand		; get a random number.
0029A7  3               	lsr a 			; x or y axis?
0029A7  3               	bcc :+
0029A7  3               	jmp trailv		; use y.
0029A7  3               :
0029A7  3               ; Trail horizontal
0029A7  3               
0029A7  3               	lsr a 			; which direction?
0029A7  3               	bcc :+
0029A7  3               	jmp traill		; go left.
0029A7  3               :
0029A7  3               ; Trail right
0029A7  3               
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y
0029A7  3               	clc
0029A7  3               	adc #1	 		; go right.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               
0029A7  3               ; Trail left
0029A7  3               
0029A7  3               traill:
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y
0029A7  3               	sec
0029A7  3               	sbc #1 			; go left.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               
0029A7  3               ; Trail vertical
0029A7  3               
0029A7  3               trailv:
0029A7  3               	lsr a		 	; which direction?
0029A7  3               	bcc :+
0029A7  3               	jmp trailu		; go up.
0029A7  3               :
0029A7  3               ; Trail down
0029A7  3               
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y
0029A7  3               	clc
0029A7  3               	adc #1 			; go down.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               
0029A7  3               ; Trail up
0029A7  3               
0029A7  3               trailu:
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y
0029A7  3               	sec
0029A7  3               	sbc #1 			; go up.
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               
0029A7  3               ; Kill trail
0029A7  3               
0029A7  3               trailk:
0029A7  3               	lda #200		; set off-screen to kill vapour trail.
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Create laser beam
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               laser:
0029A7  3               	ldy #1
0029A7  3               	lda (z80_ix),y 		; direction.
0029A7  3               	ror a 			; left or right?
0029A7  3               	bcs :+
0029A7  3               	jmp laserl		; move left.
0029A7  3               :
0029A7  3               ; Laser right
0029A7  3               
0029A7  3               	lda #8			; distance to travel.
0029A7  3               	sta z80_b
0029A7  3               	jmp laserm		; move laser.
0029A7  3               
0029A7  3               ; Laser left
0029A7  3               
0029A7  3               laserl:
0029A7  3               	lda #248		; distance to travel.
0029A7  3               	sta z80_b
0029A7  3               laserm:
0029A7  3               	ldy #5
0029A7  3               	lda (z80_ix),y		; x position.
0029A7  3               	clc
0029A7  3               	adc z80_b		; add distance.
0029A7  3               	sta (z80_ix),y		; set new x coordinate.
0029A7  3               
0029A7  3               ; Test new block.
0029A7  3               
0029A7  3               	sta dispx 		; set x for block collision detection purposes.
0029A7  3               	ldy #3
0029A7  3               	lda (z80_ix),y 		; get y.
0029A7  3               	sta dispy		; set coordinate for collision test.
0029A7  3               	jsr tstbl 		; get block type there.
0029A7  3               	cmp #WALL		; is it solid?
0029A7  3               	bne :+
0029A7  3               	jmp trailk		; yes, it cannot pass.
0029A7  3               :
0029A7  3               .if pflag .or dflag
0029A7  3                       cmp #FODDER             ; is it fodder?
0029A7  3                       bne :+
0029A7  3                       jsr fdchk               ; remove fodder block.
0029A7  3                       jmp trailk              ; destroy laser.
0029A7  3               :
0029A7  3               .endif
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Dots mask
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               dots:	.byte 128,64,32,16,8,4,2,1
0029A7  3               
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Plot, preserving de.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               plotde:
0029A7  3               	lda z80_d 		; put de on stack.
0029A7  3               	pha
0029A7  3               	lda z80_e
0029A7  3               	pha
0029A7  3               
0029A7  3               	jsr plot 		; plot pixel.
0029A7  3               
0029A7  3               	pla			; restore de from stack.
0029A7  3               	sta z80_e
0029A7  3               	pla
0029A7  3               	sta z80_d
0029A7  3               
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Shoot a laser.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               shoot:
0029A7  3               	sta z80_c		; store direction in c register.
0029A7  3               	ldy #8
0029A7  3               	lda (z80_ix),y 		; y coordinate.
0029A7  3               	clc
0029A7  3               shoot1:
0029A7  3               	adc #(SPR_HGT/2-1)	; down 7 pixels.
0029A7  3               	sta z80_l 		; puty y coordinate in l.
0029A7  3               
0029A7  3               	ldy #9
0029A7  3               	lda (z80_ix),y 		; x coordinate in h.
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	lda z80_i		; store pointer to sprite.
0029A7  3               	pha
0029A7  3               	lda z80_x
0029A7  3               	pha
0029A7  3               
0029A7  3               	jsr fpslot 		; find particle slot.
0029A7  3               	bcs :+
0029A7  3               	jmp vapou2		; failed, restore ix.
0029A7  3               :
0029A7  3               	lda #0
0029A7  3               	ldy #0
0029A7  3               	sta (z80_ix),y 		; set up a laser.
0029A7  3               
0029A7  3               	lda z80_c
0029A7  3               	ldy #1
0029A7  3               	sta (z80_ix),y 		; set the direction.
0029A7  3               
0029A7  3               	lda z80_l
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y		; set y coordinate.
0029A7  3               
0029A7  3               	ror z80_c		; check direction we want.
0029A7  3               	bcc :+
0029A7  3               	jmp shootr		; shoot right.
0029A7  3               :
0029A7  3               	lda z80_h		; X position.
0029A7  3               shoot0:
0029A7  3               	and #248		; align on character boundary.
0029A7  3               	ldy #5
0029A7  3               	sta (z80_ix),y		; set x coordinate.
0029A7  3               	jmp vapou0 		; draw first image.
0029A7  3               shootr:
0029A7  3               	lda z80_h		; x position.
0029A7  3               	clc
0029A7  3               	adc #15			; look right.
0029A7  3               	jmp shoot0		; align and continue.
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Create a bit of vapour trail.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               vapour:
0029A7  3               	lda z80_i		; store pointer to sprite.
0029A7  3               	pha
0029A7  3               	lda z80_x
0029A7  3               	pha
0029A7  3               
0029A7  3               	ldy #8
0029A7  3               	lda (z80_ix),y 		; y coordinate.
0029A7  3               	clc
0029A7  3               vapou3:
0029A7  3               	adc #(SPR_HGT/2-1)	; mid-point of sprite.
0029A7  3               	sta z80_l
0029A7  3               
0029A7  3               	ldy #9
0029A7  3               	lda (z80_ix),y 		; x coordinate.
0029A7  3               	adc #7
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	jsr fpslot 		; find particle slot.
0029A7  3               	bcc :+
0029A7  3               	jmp vapou1		; no, we can use it.
0029A7  3               :
0029A7  3               vapou2:
0029A7  3               	pla
0029A7  3               	sta z80_x
0029A7  3               	pla
0029A7  3               	sta z80_i
0029A7  3               	rts
0029A7  3               vapou1:
0029A7  3               	lda z80_l
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y		; set up y.
0029A7  3               
0029A7  3               	lda z80_h
0029A7  3               	ldy #5
0029A7  3               	sta (z80_ix),y 		; set up x coordinate.
0029A7  3               
0029A7  3               	jsr qrand		; get quick random number.
0029A7  3               	and #15			; random time.
0029A7  3               	clc
0029A7  3               	adc #15			; minimum time on screen.
0029A7  3               	ldy #1
0029A7  3               	sta (z80_ix),y		; set time on screen.
0029A7  3               
0029A7  3               	lda #1
0029A7  3               	ldy #0
0029A7  3               	sta (z80_ix),y		; define particle as vapour trail.
0029A7  3               vapou0:
0029A7  3               	jsr chkxy		; plot first position.
0029A7  3               	jmp vapou2
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Create a user particle.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               ptusr:
0029A7  3               	sta z80_f		; store timer.
0029A7  3               
0029A7  3               	ldy #8
0029A7  3               	lda (z80_ix),y 		; y coordinate.
0029A7  3               	clc
0029A7  3               	adc #7			; mid-point of sprite.
0029A7  3               	sta z80_l
0029A7  3               
0029A7  3               	ldy #9
0029A7  3               	lda (z80_ix),y 		; x coordinate.
0029A7  3               	clc
0029A7  3               	adc #7			; mid-point of sprite.
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	jsr fpslot 		; find particle slot.
0029A7  3               	bcs ptusr1
0029A7  3               	rts 			; out of slots, can't generate anything.
0029A7  3               ptusr1:
0029A7  3               	lda z80_l
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y 		; set up y.
0029A7  3               
0029A7  3               	lda z80_h
0029A7  3               	ldy #5
0029A7  3               	sta (z80_ix),y		; set up x coordinate.
0029A7  3               
0029A7  3               	lda z80_f 		; restore timer.
0029A7  3               	ldy #1
0029A7  3               	sta (z80_ix),y		; set time on screen.
0029A7  3               
0029A7  3               	lda #7
0029A7  3               	ldy #0
0029A7  3               	sta (z80_ix),y		; define particle as user particle.
0029A7  3               
0029A7  3               	jmp chkxy		; plot first position.
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Create a vertical or horizontal star.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               star:
0029A7  3               	lda z80_i		; store pointer to sprite.
0029A7  3               	pha
0029A7  3               	lda z80_x
0029A7  3               	pha
0029A7  3               
0029A7  3               	jsr fpslot 		; find particle slot.
0029A7  3               	bcs star7		; found one we can use.
0029A7  3               star0:
0029A7  3               	pla 			; restore sprite pointer.
0029A7  3               	sta z80_x
0029A7  3               	pla
0029A7  3               	sta z80_i
0029A7  3               	rts 			; out of slots, can't generate anything.
0029A7  3               star7:
0029A7  3               	lda z80_c		; direction.
0029A7  3               	and #3 			; is it left?
0029A7  3               	bne :+
0029A7  3               	jmp star1 		; yes, it's left.
0029A7  3               :
0029A7  3               	cmp #1 			; is it right?
0029A7  3               	bne :+
0029A7  3               	jmp star2 		; yes, it's right.
0029A7  3               :
0029A7  3               	cmp #2 			; is it up?
0029A7  3               	bne :+
0029A7  3               	jmp star3 		; yes, it's up.
0029A7  3               :
0029A7  3               	ldy wntopx 		; get edge of screen.
0029A7  3               	iny			; down one pixel.
0029A7  3               	tya
0029A7  3               star8:
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y 		; set y coord.
0029A7  3               	jsr qrand 		; get quick random number.
0029A7  3               star9:
0029A7  3               	ldy #5
0029A7  3               	sta (z80_ix),y		; set x position.
0029A7  3               
0029A7  3               	lda z80_c		; direction.
0029A7  3               	and #3			; zero to three.
0029A7  3               	clc
0029A7  3               	adc #3			; 3 to 6 for starfield.
0029A7  3               	ldy #0
0029A7  3               	sta (z80_ix),y		; define particle as star.
0029A7  3               	jsr chkxy		; plot first position.
0029A7  3               	jmp star0
0029A7  3               star1:
0029A7  3               	jsr qrand		; get quick random number.
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y 		; set y coord.
0029A7  3               
0029A7  3               	lda wnrgtx 		; get edge of screen.
0029A7  3               	clc
0029A7  3               	adc #15			; add width of sprite minus 1.
0029A7  3               	jmp star9
0029A7  3               star2:
0029A7  3               	jsr qrand 		; get quick random number.
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y		; set y coord.
0029A7  3               
0029A7  3               	lda wnlftx		; get edge of screen.
0029A7  3               	jmp star9
0029A7  3               star3:
0029A7  3               	lda wnbotx 		; get edge of screen.
0029A7  3               	clc
0029A7  3               	adc #15 		; height of sprite minus one pixel.
0029A7  3               	jmp star8
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Find particle slot for lasers or vapour trail.
0029A7  3               ; can't use alternate accumulator.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               fpslot:
0029A7  3               	lda #<SHRAPN 		; shrapnel table.
0029A7  3               	sta z80_x
0029A7  3               	lda #>SHRAPN
0029A7  3               	sta z80_i
0029A7  3               
0029A7  3               	lda #NUMSHR		; number of pieces in table.
0029A7  3               	sta z80_b
0029A7  3               fpslt0:
0029A7  3               	ldy #0
0029A7  3               	lda (z80_ix),y		; get type.
0029A7  3               	asl a  			; is this slot in use?
0029A7  3               	bcc :+
0029A7  3               	rts			; no, we can use it.
0029A7  3               :
0029A7  3               	clc			; point to more shrapnel.
0029A7  3               	lda z80_x
0029A7  3               	adc #SHRSIZ
0029A7  3               	sta z80_x
0029A7  3               	bcc :+
0029A7  3               	inc z80_i
0029A7  3               :
0029A7  3               	dec z80_b		; repeat for all shrapnel.
0029A7  3               	bne fpslt0
0029A7  3               
0029A7  3               	clc
0029A7  3               	rts 			; out of slots, can't generate anything.
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Create an explosion at sprite position.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               explod:
0029A7  3               	sta z80_c 		; particles to create.
0029A7  3               
0029A7  3               	lda z80_i 		; store pointer to sprite.
0029A7  3               	pha
0029A7  3               	lda z80_x
0029A7  3               	pha
0029A7  3               
0029A7  3               	ldy #8
0029A7  3               	lda (z80_ix),y 		; y coordinate.
0029A7  3               	sta z80_l
0029A7  3               	ldy #9
0029A7  3               	lda (z80_ix),y		; x coordinate.
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	lda #<SHRAPN		; shrapnel table.
0029A7  3               	sta z80_x
0029A7  3               	lda #>SHRAPN
0029A7  3               	sta z80_i
0029A7  3               
0029A7  3               	lda #NUMSHR		; number of pieces in table.
0029A7  3               	sta explcnt
0029A7  3               expld0:
0029A7  3               	ldy #0
0029A7  3               	lda (z80_ix),y		; get type.
0029A7  3               	asl a 			; is this slot in use?
0029A7  3               	bcs expld1		; no, we can use it.
0029A7  3               expld2:
0029A7  3               	clc
0029A7  3               	lda z80_x
0029A7  3               	adc #SHRSIZ
0029A7  3               	sta z80_x
0029A7  3               	bcc :+
0029A7  3               	inc z80_i
0029A7  3               :
0029A7  3               	dec explcnt		; repeat for all shrapnel.
0029A7  3               	bne expld0
0029A7  3               expld3:
0029A7  3               	pla			; restore sprite pointer.
0029A7  3               	sta z80_x
0029A7  3               	pla
0029A7  3               	sta z80_i
0029A7  3               	rts 			; out of slots, can't generate any more.
0029A7  3               
0029A7  3               expld1:
0029A7  3               	lda z80_c		; shrapnel counter.
0029A7  3               	and #15			; 0 to 15.
0029A7  3               	clc			; add to x.
0029A7  3               	adc z80_l
0029A7  3               	ldy #3
0029A7  3               	sta (z80_ix),y		; y coord.
0029A7  3               
0029A7  3               	lda seed3 		; crap random number.
0029A7  3               	and #15			; 0 to 15.
0029A7  3               	clc 			; add to y.
0029A7  3               	adc z80_h
0029A7  3               	ldy #5
0029A7  3               	sta (z80_ix),y		; x coord.
0029A7  3               
0029A7  3               	lda #2
0029A7  3               	ldy #0
0029A7  3               	sta (z80_ix),y		; switch it on.
0029A7  3               
0029A7  3               	jsr chkxy		; plot first position.
0029A7  3               	jsr qrand		; quick random angle.
0029A7  3               	and #60 		; keep within range.
0029A7  3               	ldy #1
0029A7  3               	sta (z80_ix),y		; angle.
0029A7  3               
0029A7  3               	dec z80_c		; one less piece of shrapnel to generate.
0029A7  3               	bne expld2 		; back to main explosion loop.
0029A7  3               	jmp expld3 		; restore sprite pointer and exit.
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Quick random
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               qrand:
0029A7  3               	jsr random		; r register.
0029A7  3               	eor seed3		; combine with seed.
0029A7  3               	sta seed3 		; new seed.
0029A7  3               	rts
0029A7  3               
0029A7  3               ;----------------------------------------------------
0029A7  3               ; Display all shrapnel.
0029A7  3               ;----------------------------------------------------
0029A7  3               
0029A7  3               dshrp:
0029A7  3               	lda #<plotde		; display routine.
0029A7  3               	sta proshx+1
0029A7  3               	lda #>plotde
0029A7  3               	sta proshx+2
0029A7  3               	jsr proshr		; process shrapnel.
0029A7  3               
0029A7  3               	lda #<prosh1		; processing routine.
0029A7  3               	sta proshx+1
0029A7  3               	lda #>prosh1
0029A7  3               	sta proshx+2
0029A7  3               	rts
0029A7  3               
0029A7  3               ;------------------------------------------------------
0029A7  3               ; Particle engine.
0029A7  3               ;
0029A7  3               ; Init particle data for 55 particles in SHRAPN table.
0029A7  3               ; Every particle has 6 bytes.
0029A7  3               ;
0029A7  3               ; global:	-
0029A7  3               ; local:	x,y,hl
0029A7  3               ; calls:	-
0029A7  3               ;------------------------------------------------------
0029A7  3               
0029A7  3               inishr:
0029A7  3               	lda #<SHRAPN 		; table.
0029A7  3               	sta z80_l
0029A7  3               	lda #>SHRAPN
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	ldy #0
0029A7  3               	ldx #NUMSHR		; shrapnel pieces to process.
0029A7  3               inish0:
0029A7  3               	lda #255 		; kill the shrapnel.
0029A7  3               	sta (z80_hl),y
0029A7  3               
0029A7  3               	clc 			; point there.
0029A7  3               	lda z80_l
0029A7  3               	adc #SHRSIZ		; distance to next.
0029A7  3               	sta z80_l
0029A7  3               	bcc :+
0029A7  3               	inc z80_h
0029A7  3               :
0029A7  3               	dex
0029A7  3               	bne inish0 		; round again.
0029A7  3               	rts
0029A7  3               
0029A7  3               ;------------------------------------------------------
0029A7  3               ; Check for collision between laser and sprite.
0029A7  3               ;------------------------------------------------------
0029A7  3               
0029A7  3               lcol:
0029A7  3               	lda #<SHRAPN		; shrapnel table.
0029A7  3               	sta z80_l
0029A7  3               	lda #>SHRAPN
0029A7  3               	sta z80_h
0029A7  3               
0029A7  3               	lda #NUMSHR		; number of pieces in table.
0029A7  3               	sta z80_b
0029A7  3               lcol0:
0029A7  3               	ldy #0
0029A7  3               	lda (z80_hl),y 		; get type.
0029A7  3               	beq lcol1		; yes, check collision.
0029A7  3               lcol3:
0029A7  3               	clc			; point to more shrapnel.
0029A7  3               	lda z80_l
0029A7  3               	adc #SHRSIZ
0029A7  3               	sta z80_l
0029A7  3               	bcc :+
0029A7  3               	inc z80_h
0029A7  3               :
0029A7  3               	dec z80_b		; repeat for all shrapnel.
0029A7  3               	bne lcol0
0029A7  3               	clc
0029A7  3               	rts 			; no collision, carry not set.
0029A7  3               lcol1:
0029A7  3               	ldy #3
0029A7  3               	lda (z80_hl),y		; get y.
0029A7  3               	sec
0029A7  3               	ldy #8
0029A7  3               	sbc (z80_ix),y		; subtract sprite y.
0029A7  3               lcolh:
0029A7  3               	cmp #SPR_HGT 		; within range?
0029A7  3               	bcc :+
0029A7  3               	jmp lcol2		; no, missed.
0029A7  3               :
0029A7  3               	ldy #5
0029A7  3               	lda (z80_hl),y 		; get x.
0029A7  3               	sec
0029A7  3               	ldy #9
0029A7  3               	sbc (z80_ix),y 		; subtract sprite y.
0029A7  3               	cmp #16			; within range?
0029A7  3               	bcs :+
0029A7  3               	jmp lcol4 		; yes, collision occurred.
0029A7  3               :
0029A7  3               lcol2:
0029A7  3               	jmp lcol3
0029A7  3               lcol4:
0029A7  3               	sec
0029A7  3               	rts 			; return with carry set for collision.
0029A7  3               .endif
0029A7  3               
0029A7  3               ;------------------------------------------------------
0029A7  3               ; Main game engine code starts here.
0029A7  3               ; After initialisation, mloop is the main loop
0029A7  3               ;------------------------------------------------------
0029A7  3               
0029A7  3               game:
0029A7  3               
0029A7  3               ; Set up screen address table.
0029A7  3               
0029A7  3               setsat:
0029A7  3  A9 00        	lda #<ScreenAddr		; start of screen.
0029A9  3  85 rr        	sta scraddr
0029AB  3  A9 0E        	lda #>ScreenAddr
0029AD  3  85 rr        	sta scraddr+1
0029AF  3               
0029AF  3  A0 00        	ldy #0			; vertical lines on screen.
0029B1  3               setsa0:
0029B1  3  A5 rr        	lda scraddr
0029B3  3  99 00 06     	sta SCADTB_lb,y		; write low byte.
0029B6  3  A5 rr        	lda scraddr+1
0029B8  3  99 00 07     	sta SCADTB_hb,y		; write high byte.
0029BB  3  20 A5 28     	jsr nline		; next line down.
0029BE  3  C8           	iny			; next position in table.
0029BF  3  D0 F0        	bne setsa0
0029C1  3               
0029C1  3               ; Init graphics mode
0029C1  3               
0029C1  3  20 98 27     	jsr screeninit
0029C4  3               
0029C4  3               ; Init AtoMMC joystick
0029C4  3  20 0C 27     	jsr joyinit		; AtoMMC joystick on PORT B
0029C7  3               
0029C7  3               rpblc2:
0029C7  3               .if pflag
0029C7  3               	jsr inishr 		; initialise particle engine.
0029C7  3               .endif
0029C7  3               evintr:
0029C7  3  20 30 47     	jsr evnt12 		; call intro/menu event.
0029CA  3               
0029CA  3  A9 02        	lda #WALL 		; write default property.
0029CC  3  A2 00        	ldx #0
0029CE  3               clrmap:
0029CE  3  9D 00 03     	sta MAP,x 		; block properties.
0029D1  3  9D 00 04     	sta MAP+256,x
0029D4  3  9D 00 05     	sta MAP+512,x
0029D7  3  E8           	inx			; next byte.
0029D8  3  D0 F4        	bne clrmap
0029DA  3               .if oflag
0029DA  3  20 19 29     	jsr iniob 		; initialise objects.
0029DD  3               .endif
0029DD  3  A9 00        	lda #0			; put zero in accumulator.
0029DF  3  85 rr        	sta gamwon		; reset game won flag.
0029E1  3               
0029E1  3  20 49 2B     	jsr inisc 		; init the score.
0029E4  3               mapst:
0029E4  3  AD F0 3A     	lda stmap 		; start position on map.
0029E7  3  8D 9E 3A     	sta roomtb		; set up position in table, if there is one.
0029EA  3               
0029EA  3               inipbl:
0029EA  3               .if aflag
0029EA  3               .if swrflag
0029EA  3               	lda #<(eop + data_address - data_start)		; reset blockpointer
0029EA  3               	sta pbptr
0029EA  3               	lda #>(eop + data_address - data_start)
0029EA  3               	sta pbptr+1
0029EA  3               .else
0029EA  3               	lda #<eop		; reset blockpointer
0029EA  3               	sta pbptr
0029EA  3               	lda #>eop
0029EA  3               	sta pbptr+1
0029EA  3               .endif
0029EA  3               .endif
0029EA  3  20 32 37     	jsr initsc 		; set up first screen.
0029ED  3               
0029ED  3  A9 8D        	lda #<ssprit 		; default to spare sprite in table.
0029EF  3  85 rr        	sta z80_x
0029F1  3  A9 3A        	lda #>ssprit
0029F3  3  85 rr        	sta z80_i
0029F5  3               evini:
0029F5  3  20 31 47     	jsr evnt13 		; initialisation.
0029F8  3               
0029F8  3               ; Two restarts.
0029F8  3               ; First restart - clear all sprites and initialise everything.
0029F8  3               
0029F8  3               rstrt:
0029F8  3  20 E9 2A     	jsr rsevt 		; restart events.
0029FB  3  20 0C 29     	jsr xspr 		; clear sprite table.
0029FE  3  20 9E 38     	jsr sprlst 		; fetch pointer to screen sprites.
002A01  3  20 27 39     	jsr ispr 		; initialise sprite table.
002A04  3               
002A04  3  4C 13 2A     	jmp rstrt0
002A07  3               
002A07  3               ; Second restart - clear all but player, and don't initialise him.
002A07  3               
002A07  3               rstrtn:
002A07  3  20 E9 2A     	jsr rsevt		; restart events.
002A0A  3  20 CB 38     	jsr nspr 		; clear all non-player sprites.
002A0D  3  20 9E 38     	jsr sprlst 		; fetch pointer to screen sprites.
002A10  3  20 64 39     	jsr kspr 		; initialise sprite table, no more players.
002A13  3               
002A13  3               ; Set up the player and/or enemy sprites.
002A13  3               
002A13  3               rstrt0:
002A13  3  A9 00        	lda #0 			; zero in accumulator.
002A15  3  85 rr        	sta nexlev 		; reset next level flag.
002A17  3  85 rr        	sta restfl 		; reset restart flag.
002A19  3  85 rr        	sta deadf 		; reset dead flag.
002A1B  3  20 C7 2F     	jsr droom 		; show screen layout.
002A1E  3               rpblc0:
002A1E  3               .if pflag
002A1E  3               	jsr inishr 		; initialise particle engine.
002A1E  3               .endif
002A1E  3               .if aflag
002A1E  3               	jsr rbloc		; draw blocks for this screen
002A1E  3               .endif
002A1E  3               .if oflag
002A1E  3  20 99 2B     	jsr shwob		; draw objects.
002A21  3               .endif
002A21  3               
002A21  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
002A23  3  85 rr        	sta z80_x
002A25  3  A9 0B        	lda #>sprtab
002A27  3  85 rr        	sta z80_i
002A29  3  20 FF 34     	jsr dspr 		; display sprites.
002A2C  3               
002A2C  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002A2E  3  85 rr        	sta z80_x
002A30  3  A9 0B        	lda #>(sprtab+TABSIZ)
002A32  3  85 rr        	sta z80_i
002A34  3  20 FF 34     	jsr dspr 		; display sprites.
002A37  3               mloop:
002A37  3  20 24 27     	jsr vsync 		; synchronise with display.
002A3A  3               
002A3A  3  A9 00        	lda #<sprtab 		; address of sprite table, even sprites.
002A3C  3  85 rr        	sta z80_x
002A3E  3  A9 0B        	lda #>sprtab
002A40  3  85 rr        	sta z80_i
002A42  3  20 FF 34     	jsr dspr 		; display even sprites.
002A45  3               
002A45  3               ;	jsr plsnd 		; play sounds.
002A45  3  20 24 27     	jsr vsync 		; synchronise with display.
002A48  3  20 A6 29     	jsr proshr
002A4B  3               
002A4B  3  A9 11        	lda #<(sprtab+TABSIZ) 	; address of first odd sprite.
002A4D  3  85 rr        	sta z80_x
002A4F  3  A9 0B        	lda #>(sprtab+TABSIZ)
002A51  3  85 rr        	sta z80_i
002A53  3  20 FF 34     	jsr dspr 		; display odd sprites.
002A56  3               
002A56  3  A9 8D        	lda #<(ssprit) 		; point to spare sprite for spawning purposes.
002A58  3  85 rr        	sta z80_x
002A5A  3  A9 3A        	lda #>(ssprit)
002A5C  3  85 rr        	sta z80_i
002A5E  3               evlp1:
002A5E  3  20 CB 45     	jsr evnt10 		; called once per main loop.
002A61  3  20 7D 34     	jsr pspr 		; process sprites.
002A64  3               
002A64  3               ; Main loop events.
002A64  3               
002A64  3  A9 8D        	lda #<ssprit 		; point to spare sprite for spawning purposes.
002A66  3  85 rr        	sta z80_x
002A68  3  A9 3A        	lda #>ssprit
002A6A  3  85 rr        	sta z80_i
002A6C  3               evlp2:
002A6C  3  20 FB 46     	jsr evnt11 		; called once per main loop.
002A6F  3               bsortx:
002A6F  3  20 F3 33     	jsr bsort 		; sort sprites.
002A72  3               
002A72  3  A5 rr        	lda nexlev		; finished level flag.
002A74  3  D0 1F        	bne newlev		; is set, go to next level.
002A76  3  A5 rr        	lda gamwon		; finished game flag.
002A78  3  D0 2A        	bne evwon		; is set, finish the game.
002A7A  3  A5 rr        	lda restfl 		; finished level flag.
002A7C  3  C9 01        	cmp #1			; has it been set?
002A7E  3  D0 03        	bne :+
002A80  3  4C F8 29     	jmp rstrt		; yes, go to next level.
002A83  3               :
002A83  3  C9 02        	cmp #2			; has it been set?
002A85  3  D0 03        	bne :+
002A87  3  4C 07 2A     	jmp rstrtn		; yes, go to next level.
002A8A  3               :
002A8A  3  A5 rr        	lda deadf 		; dead flag.
002A8C  3  D0 1C        	bne pdead		; yes, player dead.
002A8E  3               
002A8E  3               ; back to start of main loop.
002A8E  3               
002A8E  3  E6 rr        	inc frmno
002A90  3  E6 rr        	inc clock
002A92  3  4C 37 2A     	jmp mloop		; switched to a jmp mloop during test mode.
002A95  3               
002A95  3               ;----------------------------------------------------------
002A95  3               ; Read blocks from list and update screen accordingly.
002A95  3               ;----------------------------------------------------------
002A95  3               
002A95  3               .if aflag
002A95  3               rbloc:
002A95  3               .if swrflag
002A95  3               	lda #<(eop + data_address - data_start)		; reset blockpointer
002A95  3               	sta pbbuf
002A95  3               	lda #>(eop + data_address - data_start)
002A95  3               	sta pbbuf+1
002A95  3               .else
002A95  3               	lda #<eop		; reset blockpointer
002A95  3               	sta pbbuf
002A95  3               	lda #>eop
002A95  3               	sta pbbuf+1
002A95  3               .endif
002A95  3               
002A95  3               rbloc2:
002A95  3               	lda pbbuf			; check for last block
002A95  3               	cmp pbptr
002A95  3               	bne rbloc1
002A95  3               	lda pbbuf+1
002A95  3               	cmp pbptr+1
002A95  3               	bne rbloc1
002A95  3               	rts
002A95  3               rbloc1:
002A95  3               	ldy #0
002A95  3               	lda (pbbuf),y		; check if block for this scno
002A95  3               	cmp scno
002A95  3               	bne rbloc0		; if not, skip
002A95  3               	iny
002A95  3               	lda (pbbuf),y		; get y
002A95  3               	sta dispy
002A95  3               	iny
002A95  3               	lda (pbbuf),y		; get x
002A95  3               	sta dispx
002A95  3               	iny
002A95  3               	lda (pbbuf),y		; get blocknr
002A95  3               	jsr pattr2		; draw block
002A95  3               rbloc0:
002A95  3               	clc			; point to next block
002A95  3               	lda pbbuf
002A95  3               	adc #4
002A95  3               	sta pbbuf
002A95  3               	bcc rbloc2
002A95  3               	inc pbbuf+1
002A95  3               	jmp rbloc2
002A95  3               .endif
002A95  3               
002A95  3               ;----------------------------------------------------------
002A95  3               ; New level
002A95  3               ;----------------------------------------------------------
002A95  3               
002A95  3               newlev:
002A95  3  A5 rr        	lda scno 			; current screen.
002A97  3  18           	clc
002A98  3  69 01        	adc #1				; next screen.
002A9A  3               .if swrflag
002A9A  3               	cmp numsc + data_address - data_start			; total number of screens.
002A9A  3               .else
002A9A  3  CD 26 9B     	cmp numsc 			; total number of screens.
002A9D  3               .endif
002A9D  3  B0 05        	bcs evwon			; yes, game finished.
002A9F  3  85 rr        	sta scno			; set new level number.
002AA1  3  4C F8 29     	jmp rstrt			; restart, clearing all aliens.
002AA4  3               
002AA4  3               evwon:
002AA4  3  20 8E 48     	jsr evnt18		 	; game completed.
002AA7  3  4C BE 2A     	jmp tidyup			; tidy up and return to BASIC/calling routine.
002AAA  3               
002AAA  3               ;----------------------------------------------------------
002AAA  3               ; Player dead.
002AAA  3               ;----------------------------------------------------------
002AAA  3               
002AAA  3               pdead:
002AAA  3  A9 00        	lda #0				; zeroise accumulator.
002AAC  3  85 rr        	sta deadf			; reset dead flag.
002AAE  3               evdie:
002AAE  3  20 51 48     	jsr evnt16 			; death subroutine.
002AB1  3  A5 rr        	lda numlif			; number of lives.
002AB3  3  F0 03        	beq :+
002AB5  3  4C F8 29     	jmp rstrt 			; restart game.
002AB8  3               :
002AB8  3               evfail:
002AB8  3  20 84 48     	jsr evnt17 			; failure event.
002ABB  3  4C A7 29     	jmp game			; restart game
002ABE  3               
002ABE  3               ;----------------------------------------------------------
002ABE  3               ; Tidy things up
002ABE  3               ;----------------------------------------------------------
002ABE  3               
002ABE  3               tidyup:
002ABE  3  A0 00        	ldy #0				; digits to check.
002AC0  3               tidyu2:
002AC0  3  B9 5B 2D     	lda score,y 			; get score digit.
002AC3  3  CD 61 2D     	cmp hiscor 			; are we larger than high score digit?
002AC6  3  90 07        	bcc tidyu0			; high score is bigger.
002AC8  3  D0 0E        	bne tidyu1			; score is greater, record new high score.
002ACA  3  C8           	iny				; next digit of high score.
002ACB  3  C0 06        	cpy #6
002ACD  3  D0 F1        	bne tidyu2			; repeat for all digits
002ACF  3               tidyu0:
002ACF  3  A9 5B        	lda #<score			; return pointing to score.
002AD1  3  85 rr        	sta z80_c
002AD3  3  A9 2D        	lda #>score
002AD5  3  85 rr        	sta z80_b
002AD7  3  60           	rts
002AD8  3               tidyu1:
002AD8  3  A0 05        	ldy #5
002ADA  3               tidyu3:
002ADA  3  B9 5B 2D     	lda score,y			; score.
002ADD  3  99 61 2D     	sta hiscor,y			; high score.
002AE0  3  88           	dey
002AE1  3  10 F7        	bpl tidyu3 			; copy score to high score.
002AE3  3               evnewh:
002AE3  3  20 29 49     	jsr evnt19			; new high score event.
002AE6  3  4C CF 2A     	jmp tidyu0			; tidy up.
002AE9  3               
002AE9  3               ;--------------------------------------------------
002AE9  3               ; Restart event.
002AE9  3               ;--------------------------------------------------
002AE9  3               
002AE9  3               rsevt:
002AE9  3  A9 8D        	lda #<ssprit 			; default to spare element in table.
002AEB  3  85 rr        	sta z80_x
002AED  3  A9 3A        	lda #>ssprit
002AEF  3  85 rr        	sta z80_i
002AF1  3               evrs:
002AF1  3  4C 24 48     	jmp evnt14	 		; call restart event.
002AF4  3               
002AF4  3               ;------------------------------------------------------------------
002AF4  3               ; Copy number passed in a to string position bc, right-justified.
002AF4  3               ;
002AF4  3               ; Input:
002AF4  3               ;  A  = number
002AF4  3               ;  BC = string address
002AF4  3               ;
002AF4  3               ; Output:
002AF4  3               ;  BC = string with number
002AF4  3               ;-----------------------------------------------------------------
002AF4  3               
002AF4  3               num2ch:
002AF4  3  85 rr        	sta z80_d		; Save number
002AF6  3               
002AF6  3  A9 00        	lda #0
002AF8  3  85 rr        	sta flag
002AFA  3               numdg3:
002AFA  3  A2 64        	ldx #100		; hundreds column.
002AFC  3  86 rr        	stx z80_e
002AFE  3  20 0E 2B     	jsr numdg		; show digit.
002B01  3               numdg2:
002B01  3  A2 0A        	ldx #10			; tens column.
002B03  3  86 rr        	stx z80_e
002B05  3  20 0E 2B     	jsr numdg		; show digit.
002B08  3               
002B08  3  E6 rr        	inc flag
002B0A  3  A2 01        	ldx #1			; units column.
002B0C  3  86 rr        	stx z80_e
002B0E  3               numdg:
002B0E  3  A9 30        	lda #48			; clear digit.
002B10  3  85 rr        	sta z80_a
002B12  3               numdg1:
002B12  3  A5 rr        	lda z80_d
002B14  3  C5 rr        	cmp z80_e
002B16  3  90 0E        	bcc numdg0		; nothing to show.
002B18  3  38           	sec
002B19  3  A5 rr        	lda z80_d
002B1B  3  E5 rr        	sbc z80_e		; subtract from column.
002B1D  3  85 rr        	sta z80_d
002B1F  3  E6 rr        	inc z80_a		; increment digit.
002B21  3  E6 rr        	inc flag
002B23  3  4C 12 2B     	jmp numdg1		; repeat until column is zero.
002B26  3               numdg0:
002B26  3  A0 00        	ldy #0
002B28  3  A5 rr        	lda z80_a
002B2A  3  91 rr        	sta (z80_bc),y		; write digit to buffer.
002B2C  3  A5 rr        	lda flag
002B2E  3  F0 06        	beq :+
002B30  3  E6 rr        	inc z80_c		; next buffer position.
002B32  3  D0 02        	bne :+
002B34  3  E6 rr        	inc z80_b
002B36  3               :
002B36  3  60           	rts
002B37  3               num2dd:
002B37  3  85 rr        	sta z80_d		; Save number
002B39  3               
002B39  3  A9 01        	lda #1
002B3B  3  85 rr        	sta flag
002B3D  3               
002B3D  3  4C 01 2B     	jmp numdg2
002B40  3               num2td:
002B40  3  85 rr        	sta z80_d		; Save number
002B42  3               
002B42  3  A9 01        	lda #1
002B44  3  85 rr        	sta flag
002B46  3  4C FA 2A     	jmp numdg3
002B49  3               
002B49  3               ;---------------------------------------------------------
002B49  3               ; Reset score to "000000"
002B49  3               ;---------------------------------------------------------
002B49  3               
002B49  3               inisc:
002B49  3  A9 30        	lda #'0'
002B4B  3  A2 05        	ldx #5			; digits to initialise.
002B4D  3               inisc0:
002B4D  3  9D 5B 2D     	sta score,x 		; write zero digit.
002B50  3  CA           	dex			; next column.
002B51  3  10 FA        	bpl inisc0		; repeat for all digits.
002B53  3               
002B53  3  60           	rts
002B54  3               
002B54  3               ;-----------------------------------------------------
002B54  3               ; Multiply h by d and return in hl.
002B54  3               ;
002B54  3               ; Input:
002B54  3               ;  H = first number
002B54  3               ;  D = second number
002B54  3               ;
002B54  3               ; Output:
002B54  3               ;  HL = result H x D
002B54  3               ;-----------------------------------------------------
002B54  3               
002B54  3               imul:
002B54  3  A5 rr        	lda z80_d		; HL = H * D
002B56  3  85 rr        	sta z80_e
002B58  3  A5 rr        	lda z80_h
002B5A  3  85 rr        	sta z80_c		; make c first multiplier.
002B5C  3               imul0:
002B5C  3  A9 00        	lda #0			; zeroise total.
002B5E  3  85 rr        	sta z80_l
002B60  3  85 rr        	sta z80_h
002B62  3               
002B62  3  A5 rr        	lda z80_h
002B64  3  85 rr        	sta z80_d		; zeroise high byte.
002B66  3               
002B66  3  A9 08        	lda #8			; repeat 8 times.
002B68  3  85 rr        	sta z80_b
002B6A  3               imul1:
002B6A  3  46 rr        	lsr z80_c		; rotate rightmost bit into carry.
002B6C  3  90 0E        	bcc imul2		; wasn't set.
002B6E  3  18           	clc			; bit was set, so add de.
002B6F  3  A5 rr        	lda z80_l
002B71  3  65 rr        	adc z80_e
002B73  3  85 rr        	sta z80_l
002B75  3  A5 rr        	lda z80_h
002B77  3  65 rr        	adc z80_d
002B79  3  85 rr        	sta z80_h
002B7B  3  18           	clc 			; reset carry.
002B7C  3               imul2:
002B7C  3  06 rr        	asl z80_e 		; shift de 1 bit left.
002B7E  3  26 rr        	rol z80_d
002B80  3  C6 rr        	dec z80_b
002B82  3  D0 E6        	bne imul1		; repeat 8 times.
002B84  3               
002B84  3  60           	rts
002B85  3               
002B85  3               ;-----------------------------------------------
002B85  3               ; Divide d by e and return in d, remainder in a.
002B85  3               ;
002B85  3               ; Input:
002B85  3               ;  D = first number
002B85  3               ;  E = second number
002B85  3               ;
002B85  3               ; Output:
002B85  3               ;  D = result D/E
002B85  3               ;  A = remainder
002B85  3               ;-----------------------------------------------
002B85  3               
002B85  3               idiv:
002B85  3  A9 00        	lda #0
002B87  3  A0 08        	ldy #8		 	; bits to shift.
002B89  3  06 rr        	asl z80_d
002B8B  3               idiv0:
002B8B  3  2A           	rol a 			; multiply d by 2.
002B8C  3  C5 rr        	cmp z80_e 		; test if e is smaller.
002B8E  3  90 02        	bcc idiv1		; e is greater, no division this time.
002B90  3  E5 rr        	sbc z80_e		; subtract it.
002B92  3               idiv1:
002B92  3  26 rr        	rol z80_d		; rotate into d.
002B94  3  88           	dey
002B95  3  D0 F4        	bne idiv0		; repeat
002B97  3  60           	rts
002B98  3               
002B98  3               ;---------------------------------------------------
002B98  3               ; Play AY sound effect
002B98  3               ;---------------------------------------------------
002B98  3               
002B98  3               plsnd:
002B98  3  60           	rts
002B99  3               
002B99  3               ;---------------------------------------------------
002B99  3               ; Objects handling.
002B99  3               ; 32 bytes for image
002B99  3               ; 3 for room, y and x
002B99  3               ; 3 for starting room, y and x.
002B99  3               ; 254 = disabled.
002B99  3               ; 255 = object in player"s pockets.
002B99  3               ;---------------------------------------------------
002B99  3               
002B99  3               ;---------------------------------------------------
002B99  3               ; Show items present.
002B99  3               ;---------------------------------------------------
002B99  3               
002B99  3               .if oflag
002B99  3               shwob:
002B99  3               .if swrflag
002B99  3               	lda #<(objdta + data_address - data_start) 			; objects table.
002B99  3               	sta z80_l
002B99  3               	lda #>(objdta + data_address - data_start)
002B99  3               	sta z80_h
002B99  3               .else
002B99  3  A9 D6        	lda #<objdta			; objects table.
002B9B  3  85 rr        	sta z80_l
002B9D  3  A9 9C        	lda #>objdta
002B9F  3  85 rr        	sta z80_h
002BA1  3               .endif
002BA1  3  AD 05 29     	lda numob 			; number of objects in the game.
002BA4  3  85 rr        	sta sprcnt
002BA6  3               shwob0:
002BA6  3  A0 20        	ldy #32 			; distance to room number.
002BA8  3  B1 rr        	lda (z80_hl),y 			; same as an item?
002BAA  3  C5 rr        	cmp scno 			; current location.
002BAC  3  D0 03        	bne :+
002BAE  3  20 C3 2B     	jsr dobj 			; yes, display object.
002BB1  3               :
002BB1  3  18           	clc
002BB2  3  A5 rr        	lda z80_l
002BB4  3  69 26        	adc #38 			; distance to next item.
002BB6  3  85 rr        	sta z80_l
002BB8  3  A5 rr        	lda z80_h
002BBA  3  69 00        	adc #0
002BBC  3  85 rr        	sta z80_h	 		; point to it.
002BBE  3  C6 rr        	dec sprcnt
002BC0  3  D0 E4        	bne shwob0 			; repeat for others.
002BC2  3  60           	rts
002BC3  3               
002BC3  3               ;---------------------------------------------------
002BC3  3               ; Display object.
002BC3  3               ; hl must point to object's start address.
002BC3  3               ;
002BC3  3               ; Input:
002BC3  3               ;  HL = object address
002BC3  3               ;---------------------------------------------------
002BC3  3               
002BC3  3               dobj:
002BC3  3  A0 21        	ldy #33
002BC5  3  B1 rr        	lda (z80_hl),y 			; point to y.
002BC7  3  85 rr        	sta dispy
002BC9  3  C8           	iny
002BCA  3  B1 rr        	lda (z80_hl),y 			; point to x.
002BCC  3  85 rr        	sta dispx
002BCE  3               dobj1:
002BCE  3  4C D8 27     	jmp sprite 			; draw this sprite.
002BD1  3               
002BD1  3               ;--------------------------------------
002BD1  3               ; Remove an object.
002BD1  3               ;
002BD1  3               ; Input:
002BD1  3               ;  A = object number
002BD1  3               ;--------------------------------------
002BD1  3               
002BD1  3               remob:
002BD1  3  CD 05 29     	cmp numob			; number of objects in game.
002BD4  3  90 01        	bcc :+				; are we checking past the end?
002BD6  3  60           	rts				; yes, can't get non-existent item.
002BD7  3               :
002BD7  3  48           	pha				; remember object.
002BD8  3  20 E6 2B     	jsr getob			; pick it up if we haven't already got it.
002BDB  3  68           	pla				; retrieve object number.
002BDC  3  20 15 2C     	jsr gotob			; get its address.
002BDF  3  A9 FE        	lda #254
002BE1  3  A0 20        	ldy #32
002BE3  3  91 rr        	sta (z80_hl),y			; remove it.
002BE5  3  60           	rts
002BE6  3               
002BE6  3               ;---------------------------------------------------
002BE6  3               ; Pick up object number held in the accumulator.
002BE6  3               ;
002BE6  3               ; Input:
002BE6  3               ;  A = object number
002BE6  3               ;---------------------------------------------------
002BE6  3               
002BE6  3               getob:
002BE6  3  CD 05 29     	cmp numob 		; number of objects in game.
002BE9  3  90 01        	bcc :+			; are we checking past the end?
002BEB  3  60           	rts			; yes, can't get non-existent item.
002BEC  3               :
002BEC  3  20 15 2C     	jsr gotob 		; check if we already have it.
002BEF  3  C9 FF        	cmp #255
002BF1  3  D0 01        	bne :+
002BF3  3  60           	rts			; we already do.
002BF4  3               :
002BF4  3  A0 20        	ldy #32
002BF6  3  B1 rr        	lda (z80_hl),y		; is it on this screen?
002BF8  3  C5 rr        	cmp scno 		; current screen.
002BFA  3  D0 14        	bne getob0		; not on screen, so nothing to delete.
002BFC  3               
002BFC  3  A9 FF        	lda #255
002BFE  3  91 rr        	sta (z80_hl),y		; pick it up.
002C00  3  C8           	iny 			; point to y coord.
002C01  3               getob1:
002C01  3  A0 21        	ldy #33
002C03  3  B1 rr        	lda (z80_hl),y		; y coord.
002C05  3  85 rr        	sta dispy
002C07  3  A0 22        	ldy #34
002C09  3  B1 rr        	lda (z80_hl),y 		; x coord.
002C0B  3  85 rr        	sta dispx
002C0D  3  4C CE 2B     	jmp dobj1 		; delete object sprite.
002C10  3               getob0:
002C10  3  A9 FF        	lda #255
002C12  3  91 rr        	sta (z80_hl),y 		; pick it up.
002C14  3  60           	rts
002C15  3               .endif
002C15  3               
002C15  3               ;-----------------------------------------------------------------
002C15  3               ; Got object check.
002C15  3               ; Call with object in accumulator, returns zero set if in pockets.
002C15  3               ;
002C15  3               ; Input:
002C15  3               ;  A = object number
002C15  3               ;-----------------------------------------------------------------
002C15  3               .if oflag .or mflag
002C15  3               gotob:
002C15  3  CD 05 29     	cmp numob 		; number of objects in game.
002C18  3  90 03        	bcc :+ 			; are we checking past the end?
002C1A  3  4C 21 2C     	jmp gotob0 		; yes, we can't have a non-existent object.
002C1D  3               :
002C1D  3  20 26 2C     	jsr findob		; find the object.
002C20  3               gotob1:
002C20  3  60           	rts
002C21  3               
002C21  3               gotob0:
002C21  3  A9 FE        	lda #254 		; missing.
002C23  3  4C 20 2C     	jmp gotob1
002C26  3               
002C26  3               findob:
002C26  3  48           	pha			; save object number
002C27  3               .if swrflag
002C27  3               	lda #<(objdta + data_address - data_start) 		; objects.
002C27  3               	sta z80_l
002C27  3               	lda #>(objdta + data_address - data_start)
002C27  3               	sta z80_h
002C27  3               .else
002C27  3  A9 D6        	lda #<objdta 		; objects.
002C29  3  85 rr        	sta z80_l
002C2B  3  A9 9C        	lda #>objdta
002C2D  3  85 rr        	sta z80_h
002C2F  3               .endif
002C2F  3  68           	pla			; retreive object number
002C30  3  F0 0F        	beq fndob1 		; is it zero? yes, skip loop.
002C32  3  AA           	tax 			; loop counter
002C33  3               fndob2:
002C33  3  18           	clc
002C34  3  A5 rr        	lda z80_l
002C36  3  69 26        	adc #38 		; size of each object.
002C38  3  85 rr        	sta z80_l
002C3A  3  90 02        	bcc :+
002C3C  3  E6 rr        	inc z80_h
002C3E  3               :
002C3E  3  CA           	dex 			; repeat until we find address.
002C3F  3  D0 F2        	bne fndob2
002C41  3               fndob1:
002C41  3  A0 20        	ldy #32			; distance to room it's in.
002C43  3  B1 rr        	lda (z80_hl),y		; fetch status.
002C45  3  60           	rts
002C46  3               .endif
002C46  3               
002C46  3               ;---------------------------------------------
002C46  3               ; Drop object number at (dispx, dispy).
002C46  3               ;
002C46  3               ; Input:
002C46  3               ;  A = object number
002C46  3               ;---------------------------------------------
002C46  3               
002C46  3               .if oflag
002C46  3               drpob:
002C46  3  CD 05 29     	cmp numob 		; are we checking past the end?
002C49  3  90 01        	bcc :+
002C4B  3  60           	rts			; yes, can't drop non-existent item.
002C4C  3               :
002C4C  3  20 15 2C     	jsr gotob		; make sure object is in inventory.
002C4F  3  C5 rr        	cmp scno		; already on this screen?
002C51  3  D0 01        	bne :+
002C53  3  60           	rts			; yes, nothing to do.
002C54  3               :
002C54  3  A0 20        	ldy #32
002C56  3  A5 rr        	lda scno
002C58  3  91 rr        	sta (z80_hl),y		; bring onto screen.
002C5A  3  A5 rr        	lda dispy		; sprite y coordinate.
002C5C  3  C8           	iny
002C5D  3  91 rr        	sta (z80_hl),y		; point to object y.
002C5F  3  A5 rr        	lda dispx 		; sprite x coordinate.
002C61  3  C8           	iny
002C62  3  91 rr        	sta (z80_hl),y 		; point to object x
002C64  3  4C C3 2B     	jmp dobj		; draw the object sprite.
002C67  3               
002C67  3               ;-----------------------------------------------
002C67  3               ; Seek objects at sprite position.
002C67  3               ;
002C67  3               ; Output:
002C67  3               ;  A = object number, if not found A=255
002C67  3               ;-----------------------------------------------
002C67  3               
002C67  3               skobj:
002C67  3               .if swrflag
002C67  3               	lda #<(objdta + data_address - data_start) 		; pointer to objects.
002C67  3               	sta z80_l
002C67  3               	lda #>(objdta + data_address - data_start)
002C67  3               	sta z80_h
002C67  3               .else
002C67  3  A9 D6        	lda #<objdta 		; pointer to objects.
002C69  3  85 rr        	sta z80_l
002C6B  3  A9 9C        	lda #>objdta
002C6D  3  85 rr        	sta z80_h
002C6F  3               .endif
002C6F  3               
002C6F  3  AD 05 29     	lda numob 		; number of objects in game.
002C72  3  85 rr        	sta z80_b 		; set up the loop counter.
002C74  3               skobj0:
002C74  3  A5 rr        	lda scno		; current room number.
002C76  3  A0 20        	ldy #32
002C78  3  D1 rr        	cmp (z80_hl),y		; is object in here?
002C7A  3  D0 03        	bne :+
002C7C  3  20 91 2C     	jsr skobj1		; yes, check coordinates.
002C7F  3               :
002C7F  3  18           	clc			; point to next object in table.
002C80  3  A5 rr        	lda z80_l
002C82  3  69 26        	adc #38			; size of each object.
002C84  3  85 rr        	sta z80_l
002C86  3  90 02        	bcc :+
002C88  3  E6 rr        	inc z80_h
002C8A  3               :
002C8A  3  C6 rr        	dec z80_b
002C8C  3  D0 E6        	bne skobj0		; repeat for all objects.
002C8E  3               
002C8E  3  A9 FF        	lda #255		; end of list and nothing found, return 255.
002C90  3  60           	rts
002C91  3               
002C91  3               skobj1:
002C91  3  A0 21        	ldy #33			; point to y coordinate.
002C93  3  B1 rr        	lda (z80_hl),y		; point to y coordinate.
002C95  3  38           	sec
002C96  3  A0 08        	ldy #var_newY
002C98  3  F1 rr        	sbc (z80_ix),y 		; subtract sprite y.
002C9A  3  18           	clc
002C9B  3  69 0F        	adc #15			; add sprite height minus one.
002C9D  3  C9 1F        	cmp #31			; within range?
002C9F  3  B0 18        	bcs skobj2		; no, ignore object.
002CA1  3               
002CA1  3  A0 22        	ldy #34			; point to x coordinate now.
002CA3  3  B1 rr        	lda (z80_hl),y 		; get coordinate.
002CA5  3  38           	sec
002CA6  3  A0 09        	ldy #var_newX
002CA8  3  F1 rr        	sbc (z80_ix),y 		; subtract the sprite x.
002CAA  3  18           	clc			; add sprite width minus one.
002CAB  3  69 0F        	adc #15
002CAD  3  C9 1F        	cmp #31			; within range?
002CAF  3  B0 08        	bcs skobj2		; no, ignore object.
002CB1  3               
002CB1  3  68           	pla			; remove return address from stack.
002CB2  3  68           	pla
002CB3  3               
002CB3  3  AD 05 29     	lda numob 		; objects in game.
002CB6  3  38           	sec
002CB7  3  E5 rr        	sbc z80_b		; subtract loop counter.
002CB9  3               skobj2:
002CB9  3  60           	rts			; accumulator now points to object.
002CBA  3               .endif
002CBA  3               
002CBA  3               ;---------------------------------------------------------------------
002CBA  3               ; Spawn a new sprite.
002CBA  3               ;---------------------------------------------------------------------
002CBA  3               
002CBA  3               spawn:
002CBA  3  A9 00        	lda #<sprtab		; sprite table.
002CBC  3  85 rr        	sta z80_l
002CBE  3  A9 0B        	lda #>sprtab
002CC0  3  85 rr        	sta z80_h
002CC2  3               numsp1:
002CC2  3  A9 0C        	lda #NUMSPR		; number of sprites.
002CC4  3  85 rr        	sta spcnt
002CC6  3               spaw0:
002CC6  3  A0 00        	ldy #var_Type
002CC8  3  B1 rr        	lda (z80_hl),y		; get sprite type.
002CCA  3  C9 FF        	cmp #255		; is it an unused slot?
002CCC  3  F0 0F        	beq spaw1 		; yes, we can use this one.
002CCE  3               
002CCE  3  18           	clc 			; point to next sprite in table.
002CCF  3  A5 rr        	lda z80_l
002CD1  3  69 11        	adc #TABSIZ		; size of each entry.
002CD3  3  85 rr        	sta z80_l
002CD5  3  90 02        	bcc :+
002CD7  3  E6 rr        	inc z80_h
002CD9  3               :
002CD9  3  C6 rr        	dec spcnt		; one less iteration.
002CDB  3  D0 E9        	bne spaw0		; keep going until we find a slot.
002CDD  3               
002CDD  3               ; Didn't find one but drop through and set up a dummy sprite instead.
002CDD  3               
002CDD  3               spaw1:
002CDD  3  A5 rr        	lda z80_i		; address of original sprite.
002CDF  3  48           	pha
002CE0  3  A5 rr        	lda z80_x
002CE2  3  48           	pha
002CE3  3               
002CE3  3  A5 rr        	lda z80_l		; store spawned sprite address.
002CE5  3  85 rr        	sta spptr
002CE7  3  A5 rr        	lda z80_h
002CE9  3  85 rr        	sta spptr+1
002CEB  3               
002CEB  3  A5 rr        	lda z80_c
002CED  3  A0 00        	ldy #var_Type
002CEF  3  91 rr        	sta (z80_hl),y 		; set the type.
002CF1  3  A0 05        	ldy #var_newType
002CF3  3  91 rr        	sta (z80_hl),y		; copy
002CF5  3               
002CF5  3  A5 rr        	lda z80_b
002CF7  3  A0 01        	ldy #var_Image
002CF9  3  91 rr        	sta (z80_hl),y		; set the image.
002CFB  3  A0 06        	ldy #var_newImage
002CFD  3  91 rr        	sta (z80_hl),y		; copy
002CFF  3               
002CFF  3  A9 00        	lda #0 				; frame zero.
002D01  3  A0 02        	ldy #var_Frame
002D03  3  91 rr        	sta (z80_hl),y		; set frame.
002D05  3  A0 07        	ldy #var_newFrame
002D07  3  91 rr        	sta (z80_hl),y		; copy
002D09  3               
002D09  3  A0 08        	ldy #8
002D0B  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
002D0D  3  A0 03        	ldy #3
002D0F  3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
002D11  3  A0 08        	ldy #8
002D13  3  91 rr        	sta (z80_hl),y		; copy
002D15  3               
002D15  3  A0 09        	ldy #9
002D17  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
002D19  3  A0 04        	ldy #4
002D1B  3  91 rr        	sta (z80_hl),y		; set sprite coordinate.
002D1D  3  A0 09        	ldy #9
002D1F  3  91 rr        	sta (z80_hl),y		; copy
002D21  3               
002D21  3  A0 0A        	ldy #10				; direction of original.
002D23  3  B1 rr        	lda (z80_ix),y
002D25  3  91 rr        	sta (z80_hl),y		; direction
002D27  3               
002D27  3  A9 00        	lda #0
002D29  3  A0 0D        	ldy #var_jumpLo
002D2B  3  91 rr        	sta (z80_hl),y		; reset parameter.
002D2D  3  C8           	iny
002D2E  3  91 rr        	sta (z80_hl),y		; reset parameter.
002D30  3  C8           	iny
002D31  3  91 rr        	sta (z80_hl),y		; reset parameter.
002D33  3  C8           	iny
002D34  3  91 rr        	sta (z80_hl),y		; reset parameter.
002D36  3               rtssp:
002D36  3  A5 rr        	lda spptr			; address of new sprite.
002D38  3  85 rr        	sta z80_x
002D3A  3  A5 rr        	lda spptr+1
002D3C  3  85 rr        	sta z80_i
002D3E  3               evis1:
002D3E  3  20 6B 45     	jsr evnt09 			; call sprite initialisation event.
002D41  3               
002D41  3  A5 rr        	lda spptr 			; address of new sprite.
002D43  3  85 rr        	sta z80_x
002D45  3  A5 rr        	lda spptr+1
002D47  3  85 rr        	sta z80_i
002D49  3               
002D49  3               	; _BEEB clipping code copied from CPC Engine - MISSING?!
002D49  3  A0 03        	ldy #var_Y
002D4B  3  B1 rr        	lda (z80_hl), y		; old x coord
002D4D  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
002D4F  3  B0 03        	bcs :+				; yes, don't draw it.
002D51  3               
002D51  3  20 40 28     	jsr sspria 			; display the new sprite.
002D54  3               :
002D54  3  68           	pla					; address of original sprite.
002D55  3  85 rr        	sta z80_x
002D57  3  68           	pla
002D58  3  85 rr        	sta z80_i
002D5A  3               
002D5A  3  60           	rts
002D5B  3               
002D5B  3  30 30 30 30  score:	.byte "000000"		; player"s score.
002D5F  3  30 30        
002D61  3  30 30 30 30  hiscor:	.byte "000000"		; high score.
002D65  3  30 30        
002D67  3  30 30 30 30  bonus:	.byte "000000"		; bonus.
002D6B  3  30 30        
002D6D  3  00 0E        grbase:	.word ScreenAddr	; graphics base address.
002D6F  3               
002D6F  3               ;----------------------------------------------------
002D6F  3               ; Check y-pos
002D6F  3               ;----------------------------------------------------
002D6F  3               
002D6F  3               checkx:
002D6F  3  A5 rr        	lda dispy		; y position.
002D71  3  C9 18        	cmp #24			; off screen?
002D73  3  B0 01        	bcs :+
002D75  3  60           	rts			; no, it's okay.
002D76  3               :
002D76  3  68           	pla			; remove return address from stack.
002D77  3  85 rr        	sta z80_l
002D79  3  68           	pla
002D7A  3  85 rr        	sta z80_h
002D7C  3  60           	rts
002D7D  3               
002D7D  3               ;-----------------------------------------------
002D7D  3               ; Displays the current high score.
002D7D  3               ;-----------------------------------------------
002D7D  3               
002D7D  3               dhisc:
002D7D  3  A9 61        	lda #<hiscor 		; high score text.
002D7F  3  8D B4 2D     	sta dscor3+1
002D82  3  8D CF 2D     	sta bscor3+1
002D85  3  A9 2D        	lda #>hiscor
002D87  3  8D B5 2D     	sta dscor3+2
002D8A  3  8D D0 2D     	sta bscor3+2
002D8D  3  4C A0 2D     	jmp dscor1		; check in printable range then show 6 digits.
002D90  3               
002D90  3               ;------------------------------------------------------
002D90  3               ; Displays the current score.
002D90  3               ;------------------------------------------------------
002D90  3               
002D90  3               dscor:
002D90  3  A9 5B        	lda #<score		; score text.
002D92  3  8D B4 2D     	sta dscor3+1
002D95  3  8D CF 2D     	sta bscor3+1
002D98  3  A9 2D        	lda #>score
002D9A  3  8D B5 2D     	sta dscor3+2
002D9D  3  8D D0 2D     	sta bscor3+2
002DA0  3               dscor1:
002DA0  3  8C CB 2D     	sty tmpscr
002DA3  3  20 C7 33     	jsr preprt		; set up font and print position.
002DA6  3  20 6F 2D     	jsr checkx		; make sure we're in a printable range.
002DA9  3               
002DA9  3               ;	lda #6			; digits to display.
002DA9  3               ;	sta z80_b
002DA9  3  A5 rr        	lda prtmod		; get print mode.
002DAB  3  F0 03        	beq :+			; standard size text?
002DAD  3  4C CC 2D     	jmp bscor0		; no, show double-height.
002DB0  3               :
002DB0  3               dscor0:
002DB0  3               ;	ldy #0
002DB0  3               ;	lda (z80_hl),y 		; fetch character.
002DB0  3  AC CB 2D     	ldy tmpscr
002DB3  3               dscor3:
002DB3  3  B9 5B 2D     	lda score,y
002DB6  3  20 BE 28     	jsr pchar 		; display character.
002DB9  3  E6 rr        	inc dispx		; move along x coordinate
002DBB  3               
002DBB  3               ;	inc z80_l		; next score column.
002DBB  3               ;	bne :+
002DBB  3               ;	inc z80_h
002DBB  3               ;:
002DBB  3  EE CB 2D     	inc tmpscr
002DBE  3  C6 rr        	dec z80_b
002DC0  3  D0 EE        	bne dscor0 		; repeat for all digits.
002DC2  3               dscor2:
002DC2  3  A5 rr        	lda dispx 		; set up display coordinates.
002DC4  3  85 rr        	sta charx
002DC6  3  A5 rr        	lda dispy
002DC8  3  85 rr        	sta chary
002DCA  3  60           	rts
002DCB  3               
002DCB  3  00           tmpscr:	.byte 0
002DCC  3               ;------------------------------------------------------
002DCC  3               ; Displays the current score in double-height characters.
002DCC  3               ;
002DCC  3               ; Input:
002DCC  3               ;  B  = digit number
002DCC  3               ;  HL = score string
002DCC  3               ;------------------------------------------------------
002DCC  3               
002DCC  3               bscor0:
002DCC  3               ;	ldy #0
002DCC  3               
002DCC  3               ;	lda (z80_hl),y 		; fetch character.
002DCC  3  A4 rr        	ldy tmp
002DCE  3               bscor3:
002DCE  3  B9 5B 2D     	lda score,y
002DD1  3  20 4E 33     	jsr bchar 		; display big char.
002DD4  3               
002DD4  3               ;	inc z80_l 		; next score column.
002DD4  3               ;	bne :+
002DD4  3               ;	inc z80_h
002DD4  3               ;:
002DD4  3  E6 rr        	inc tmp
002DD6  3  C6 rr        	dec z80_b
002DD8  3  F0 03        	beq :+
002DDA  3  4C CC 2D     	jmp bscor0 		; repeat for all digits.
002DDD  3               :
002DDD  3  4C C2 2D     	jmp dscor2 		; tidy up line and column variables.
002DE0  3               
002DE0  3               ;-----------------------------------------------------
002DE0  3               ; Adds number in the hl pair to the score.
002DE0  3               ;-----------------------------------------------------
002DE0  3               
002DE0  3               addsc:
002DE0  3  A9 5C        	lda #<(score+1) 	; ten thousands column.
002DE2  3  85 rr        	sta z80_e
002DE4  3  A9 2D        	lda #>(score+1)
002DE6  3  85 rr        	sta z80_d
002DE8  3  A9 10        	lda #<10000		; amount to add each time.
002DEA  3  85 rr        	sta z80_c
002DEC  3  A9 27        	lda #>10000
002DEE  3  85 rr        	sta z80_b
002DF0  3  20 34 2E     	jsr incsc		; add to score.
002DF3  3               
002DF3  3  E6 rr        	inc z80_e		; thousands column.
002DF5  3  D0 02        	bne :+
002DF7  3  E6 rr        	inc z80_d
002DF9  3               :
002DF9  3  A9 E8        	lda #<1000		; amount to add each time.
002DFB  3  85 rr        	sta z80_c
002DFD  3  A9 03        	lda #>1000
002DFF  3  85 rr        	sta z80_b
002E01  3  20 34 2E     	jsr incsc 		; add to score.
002E04  3               
002E04  3  E6 rr        	inc z80_e		; hundreds column.
002E06  3  D0 02        	bne :+
002E08  3  E6 rr        	inc z80_d
002E0A  3               :
002E0A  3  A9 64        	lda #<100		; amount to add each time.
002E0C  3  85 rr        	sta z80_c
002E0E  3  A9 00        	lda #>100
002E10  3  85 rr        	sta z80_b
002E12  3  20 34 2E     	jsr incsc		; add to score.
002E15  3               
002E15  3  E6 rr        	inc z80_e 		; tens column.
002E17  3  D0 02        	bne :+
002E19  3  E6 rr        	inc z80_d
002E1B  3               :
002E1B  3  A9 0A        	lda #<10		; amount to add each time.
002E1D  3  85 rr        	sta z80_c
002E1F  3  A9 00        	lda #>10
002E21  3  85 rr        	sta z80_b
002E23  3  20 34 2E     	jsr incsc 		; add to score.
002E26  3               
002E26  3  E6 rr        	inc z80_e		; units column.
002E28  3  D0 02        	bne :+
002E2A  3  E6 rr        	inc z80_d
002E2C  3               :
002E2C  3  A9 01        	lda #<1			; units.
002E2E  3  85 rr        	sta z80_c
002E30  3  A9 00        	lda #>1
002E32  3  85 rr        	sta z80_b
002E34  3               incsc:
002E34  3  A5 rr        	lda z80_h		; store amount to add.
002E36  3  48           	pha
002E37  3  A5 rr        	lda z80_l
002E39  3  48           	pha
002E3A  3               
002E3A  3  38           	sec			; subtract from amount to add.
002E3B  3  A5 rr        	lda z80_l
002E3D  3  E5 rr        	sbc z80_c
002E3F  3  85 rr        	sta z80_l
002E41  3  A5 rr        	lda z80_h
002E43  3  E5 rr        	sbc z80_b
002E45  3  85 rr        	sta z80_h
002E47  3  90 14        	bcc incsc0		; too much, restore value.
002E49  3               
002E49  3  68           	pla			; delete the previous amount from the stack.
002E4A  3  68           	pla
002E4B  3               
002E4B  3  A5 rr        	lda z80_d 		; store column position.
002E4D  3  48           	pha
002E4E  3  A5 rr        	lda z80_e
002E50  3  48           	pha
002E51  3  20 64 2E     	jsr incsc2		; do the increment.
002E54  3               
002E54  3  68           	pla			; restore column.
002E55  3  85 rr        	sta z80_e
002E57  3  68           	pla
002E58  3  85 rr        	sta z80_d
002E5A  3  4C 34 2E     	jmp incsc		; repeat until all added.
002E5D  3               
002E5D  3               incsc0:
002E5D  3  68           	pla			; restore previous value.
002E5E  3  85 rr        	sta z80_l
002E60  3  68           	pla
002E61  3  85 rr        	sta z80_h
002E63  3  60           	rts
002E64  3               incsc2:
002E64  3  A0 00        	ldy #0
002E66  3  B1 rr        	lda (z80_de),y 		; get amount.
002E68  3  18           	clc
002E69  3  69 01        	adc #1			; add one to column.
002E6B  3  91 rr        	sta (z80_de),y		; write new column total.
002E6D  3  C9 3A        	cmp #'9'+1		; gone beyond range of digits?
002E6F  3  B0 01        	bcs :+
002E71  3  60           	rts			; no, carry on.
002E72  3               :
002E72  3  A9 30        	lda #'0'		; make it zero.
002E74  3  91 rr        	sta (z80_de),y		; write new column total.
002E76  3  C6 rr        	dec z80_e		; back one column.
002E78  3  D0 02        	bne :+
002E7A  3  C6 rr        	dec z80_d
002E7C  3               :
002E7C  3  4C 64 2E     	jmp incsc2
002E7F  3               
002E7F  3               ;------------------------------------
002E7F  3               ; Add bonus to score and reset bonus
002E7F  3               ;------------------------------------
002E7F  3               
002E7F  3               addbo:
002E7F  3  A2 05        	ldx #5			; last digit.
002E81  3  18           	clc
002E82  3               addbo0:
002E82  3  BD 5B 2D     	lda score,x		; get score.
002E85  3  7D 67 2D     	adc bonus,x		; add bonus.
002E88  3  38           	sec			; 0 to 18.
002E89  3  E9 30        	sbc #48
002E8B  3  48           	pha
002E8C  3  A9 30        	lda #'0'
002E8E  3  9D 67 2D     	sta bonus,x
002E91  3  68           	pla
002E92  3  C9 3A        	cmp #58
002E94  3  90 03        	bcc addbo1
002E96  3  38           	sec
002E97  3  E9 0A        	sbc #10
002E99  3               addbo1:
002E99  3  9D 5B 2D     	sta score,x		; zeroise bonus.
002E9C  3  CA           	dex			; next digit.
002E9D  3  10 E3        	bpl addbo0		; repeat for all 6 digits.
002E9F  3  60           	rts
002EA0  3               
002EA0  3               ;------------------------------------
002EA0  3               ; Swap score and bonus.
002EA0  3               ;------------------------------------
002EA0  3               
002EA0  3               swpsb:
002EA0  3  A2 05        	ldx #5			; digits to add.
002EA2  3               swpsb0:
002EA2  3  BD 5B 2D     	lda score,x 		; get score digits.
002EA5  3  48           	pha			; save digit
002EA6  3  BD 67 2D     	lda bonus,x 		; get bonus digits.
002EA9  3  9D 5B 2D     	sta score,x		; switch score-bonus
002EAC  3  68           	pla
002EAD  3  9D 67 2D     	sta bonus,x
002EB0  3  CA           	dex 			; repeat for all 6 digits.
002EB1  3  10 EF        	bpl swpsb0
002EB3  3  60           	rts
002EB4  3               
002EB4  3               ;----------------------------------------------------
002EB4  3               ; Get print address.
002EB4  3               ;----------------------------------------------------
002EB4  3               
002EB4  3               gprad:
002EB4  3  98           	tya
002EB5  3  48           	pha
002EB6  3               
002EB6  3  A5 rr        	lda dispx 		; x coordinate.
002EB8  3  85 rr        	sta scraddr
002EBA  3  A9 00        	lda #0
002EBC  3  85 rr        	sta scraddr+1
002EBE  3  06 rr        	asl scraddr  	; multiply char by 8
002EC0  3  26 rr        	rol scraddr+1
002EC2  3  06 rr        	asl scraddr
002EC4  3  26 rr        	rol scraddr+1
002EC6  3  06 rr        	asl scraddr
002EC8  3  26 rr        	rol scraddr+1
002ECA  3               
002ECA  3  A5 rr        	lda dispy		; y coordinate.
002ECC  3  0A           	asl a
002ECD  3  0A           	asl a
002ECE  3  0A           	asl a			; multiply char by 8
002ECF  3  A8           	tay
002ED0  3               
002ED0  3  18           	clc
002ED1  3  A5 rr        	lda scraddr
002ED3  3  79 00 06     	adc SCADTB_lb,y
002ED6  3  85 rr        	sta scraddr
002ED8  3  A5 rr        	lda scraddr+1
002EDA  3  79 00 07     	adc SCADTB_hb,y
002EDD  3  85 rr        	sta scraddr+1
002EDF  3               
002EDF  3  A5 rr        	lda prtmod		; Double line if bigtxt
002EE1  3  F0 08        	beq noskip
002EE3  3  A5 rr        	lda dispx
002EE5  3  29 E0        	and #$e0
002EE7  3  F0 02        	beq noskip
002EE9  3  E6 rr        	inc scraddr+1
002EEB  3               noskip:
002EEB  3               
002EEB  3  68           	pla
002EEC  3  A8           	tay
002EED  3  60           	rts
002EEE  3               ;--------------------------------------------------------------
002EEE  3               ; Get property buffer address of char at (dispx, dispy) in hl.
002EEE  3               ;
002EEE  3               ; Output:
002EEE  3               ;  buffaddr = bufaddr = MAP + dispy*32 + dispx
002EEE  3               ;--------------------------------------------------------------
002EEE  3               
002EEE  3               pradd:
002EEE  3  A5 rr        	lda dispy 		; y coordinate.
002EF0  3  85 rr        	sta bufaddr
002EF2  3  A9 00        	lda #0
002EF4  3  85 rr        	sta bufaddr+1
002EF6  3  06 rr        	asl bufaddr  		; multiply char by 32
002EF8  3  26 rr        	rol bufaddr+1
002EFA  3  06 rr        	asl bufaddr
002EFC  3  26 rr        	rol bufaddr+1
002EFE  3  06 rr        	asl bufaddr
002F00  3  26 rr        	rol bufaddr+1
002F02  3  06 rr        	asl bufaddr
002F04  3  26 rr        	rol bufaddr+1
002F06  3  06 rr        	asl bufaddr
002F08  3  26 rr        	rol bufaddr+1
002F0A  3  18           	clc			; add address of MAP graphics.
002F0B  3  A5 rr        	lda bufaddr
002F0D  3  65 rr        	adc dispx
002F0F  3  69 00        	adc #<MAP
002F11  3  85 rr        	sta bufaddr
002F13  3  A5 rr        	lda bufaddr+1
002F15  3  69 03        	adc #>MAP
002F17  3  85 rr        	sta bufaddr+1
002F19  3  60           	rts
002F1A  3               
002F1A  3               ;.if kflag
002F1A  3               ;gaadd:
002F1A  3               ;	lda dispy 		; y coordinate.
002F1A  3               ;	sta bufaddr
002F1A  3               ;	lda #0
002F1A  3               ;	sta bufaddr+1
002F1A  3               ;	asl bufaddr  		; multiply char by 32
002F1A  3               ;	rol bufaddr+1
002F1A  3               ;	asl bufaddr
002F1A  3               ;	rol bufaddr+1
002F1A  3               ;	asl bufaddr
002F1A  3               ;	rol bufaddr+1
002F1A  3               ;	asl bufaddr
002F1A  3               ;	rol bufaddr+1
002F1A  3               ;	asl bufaddr
002F1A  3               ;	rol bufaddr+1
002F1A  3               ;	clc			; add address of MAP graphics.
002F1A  3               ;	lda bufaddr
002F1A  3               ;	adc dispx
002F1A  3               ;	adc #<att_table
002F1A  3               ;	sta bufaddr
002F1A  3               ;	lda bufaddr+1
002F1A  3               ;	adc #>att_table
002F1A  3               ;	sta bufaddr+1
002F1A  3               ;	rts
002F1A  3               ;.endif
002F1A  3               
002F1A  3               ;----------------------------------------------
002F1A  3               ; Print attributes, properties and pixels.
002F1A  3               ;
002F1A  3               ; Input:
002F1A  3               ;  A	= tile number
002F1A  3               ;----------------------------------------------
002F1A  3               
002F1A  3               pbpattr:			; entry PUTBLOCK command
002F1A  3  A4 rr        	ldy charx
002F1C  3  84 rr        	sty dispx
002F1E  3  A4 rr        	ldy chary
002F20  3  84 rr        	sty dispy
002F22  3               pattr:
002F22  3               .if aflag
002F22  3               	pha
002F22  3               	jsr wbloc		; save blockinfo
002F22  3               	pla
002F22  3               .endif
002F22  3               
002F22  3               pattr2:
002F22  3  85 rr        	sta z80_b		; store cell in b register for now.
002F24  3  AA           	tax
002F25  3               .if swrflag
002F25  3               	lda bprop + data_address - data_start,x 		; block properties.
002F25  3               .else
002F25  3  BD 19 50     	lda bprop,x 		; block properties.
002F28  3               .endif
002F28  3  85 rr        	sta z80_c
002F2A  3  C9 08        	cmp #COLECT
002F2C  3  D0 04        	bne :+
002F2E  3  A5 rr        	lda z80_b
002F30  3  85 rr        	sta colpatt
002F32  3               :
002F32  3  20 EE 2E     	jsr pradd 		; get property buffer address.
002F35  3  A5 rr        	lda z80_c
002F37  3  A0 00        	ldy #0
002F39  3  91 rr        	sta (bufaddr),y 	; write property.
002F3B  3  A5 rr        	lda z80_b 		; restore cell.
002F3D  3  4C 40 2F     	jmp panp
002F40  3               ; Print attributes, no properties.
002F40  3               
002F40  3               ;colpatt:	.byte 0
002F40  3               
002F40  3               panp:
002F40  3  85 rr        	sta z80_e		; displacement in e.
002F42  3  A9 00        	lda #0
002F44  3  85 rr        	sta z80_d		; no high byte.
002F46  3  06 rr        	asl z80_e  		; multiply char by 8.
002F48  3  26 rr        	rol z80_d
002F4A  3  06 rr        	asl z80_e
002F4C  3  26 rr        	rol z80_d
002F4E  3  06 rr        	asl z80_e
002F50  3  26 rr        	rol z80_d
002F52  3  18           	clc
002F53  3  A5 rr        	lda z80_e
002F55  3               .if swrflag
002F55  3               	adc #<(chgfx + data_address - data_start) 		; address of graphics.
002F55  3               	sta tileaddr
002F55  3               	lda z80_d
002F55  3               	adc #>(chgfx + data_address - data_start)
002F55  3               .else
002F55  3  69 59        	adc #<chgfx 		; address of graphics.
002F57  3  85 rr        	sta tileaddr
002F59  3  A5 rr        	lda z80_d
002F5B  3  69 4B        	adc #>chgfx
002F5D  3               .endif
002F5D  3  85 rr        	sta tileaddr+1
002F5F  3  20 B4 2E     	jsr gprad 		; get screen address.
002F62  3  A2 07        	ldx #7			; number of pixel rows to write.
002F64  3               panp0:
002F64  3  A0 00        	ldy #0
002F66  3  B1 rr        	lda (tileaddr),y 	; get image byte.
002F68  3               .if iflag
002F68  3               	eor #$ff		; Invert
002F68  3               .endif
002F68  3  BC F5 28     	ldy scrtab,x
002F6B  3  91 rr        	sta (scraddr),y 	; copy to screen.
002F6D  3  E6 rr        	inc tileaddr 		; next image byte.
002F6F  3  D0 02        	bne :+
002F71  3  E6 rr        	inc tileaddr+1
002F73  3               :
002F73  3  CA           	dex	 		; repeat for 8 pixel rows.
002F74  3  10 EE        	bpl panp0
002F76  3  E6 rr        	inc dispx 		; move along one.
002F78  3  E6 rr        	inc charx
002F7A  3  60           	rts
002F7B  3               
002F7B  3               ;----------------------------------------------
002F7B  3               ; Write block
002F7B  3               ;----------------------------------------------
002F7B  3               
002F7B  3               .if aflag
002F7B  3               wbloc:
002F7B  3               	ldy #3
002F7B  3               	sta (pbptr),y		; store block number
002F7B  3               	dey
002F7B  3               	lda dispx
002F7B  3               	sta (pbptr),y		; write x position of block.
002F7B  3               	dey
002F7B  3               	lda dispy
002F7B  3               	sta (pbptr),y		; write y position of block.
002F7B  3               	dey
002F7B  3               	lda scno
002F7B  3               	sta (pbptr),y		; write screen.
002F7B  3               	clc			; point to next free location
002F7B  3               	lda pbptr
002F7B  3               	adc #4
002F7B  3               	sta pbptr
002F7B  3               	bcc :+
002F7B  3               	inc pbptr+1
002F7B  3               :
002F7B  3               	rts
002F7B  3               .endif
002F7B  3               
002F7B  3               ;.if kflag
002F7B  3               ;panp:
002F7B  3               ;.endif
002F7B  3               
002F7B  3               ;----------------------------------------------
002F7B  3               ; Print character pixels, no more.
002F7B  3               ;
002F7B  3               ; Input:
002F7B  3               ;  A	= character to print
002F7B  3               ;----------------------------------------------
002F7B  3               
002F7B  3               pchr:
002F7B  3  20 BE 28     	jsr pchar 		; show character in accumulator.
002F7E  3  E6 rr        	inc dispx		; move along one.
002F80  3  60           	rts
002F81  3               
002F81  3               ;----------------------------------------------------
002F81  3               ; Shifter sprite routine for objects.
002F81  3               ;----------------------------------------------------
002F81  3               
002F81  3               .if oflag
002F81  3               sprit7:
002F81  3  A5 rr        	lda z80_b
002F83  3  F0 0C        	beq sprit0
002F85  3  85 rr        	sta z80_a
002F87  3               sprit3:
002F87  3  46 rr        	lsr spr			; shift into position.
002F89  3  66 rr        	ror spr+1
002F8B  3  66 rr        	ror spr+2
002F8D  3  C6 rr        	dec z80_a		; one less iteration.
002F8F  3  D0 F6        	bne sprit3
002F91  3               sprit0:
002F91  3  60           	rts 			; now apply to screen.
002F92  3               .endif
002F92  3               
002F92  3               ;-----------------------------------------------------------
002F92  3               ; Get room address.
002F92  3               ;-----------------------------------------------------------
002F92  3               
002F92  3               groom:
002F92  3  A6 rr        	ldx scno 		; screen number.
002F94  3  A0 00        	ldy #0
002F96  3               groomx:
002F96  3               .if swrflag
002F96  3               	lda #<(scdat + data_address - data_start) 		; pointer to screens.
002F96  3               	sta z80_l
002F96  3               	lda #>(scdat + data_address - data_start)
002F96  3               	sta z80_h
002F96  3               .else
002F96  3  A9 CD        	lda #<scdat 		; pointer to screens.
002F98  3  85 rr        	sta z80_l
002F9A  3  A9 6F        	lda #>scdat
002F9C  3  85 rr        	sta z80_h
002F9E  3               .endif
002F9E  3               groom1:
002F9E  3  E0 00        	cpx #0			; is it the first one?
002FA0  3  F0 15        	beq groom0 		; no more screens to skip.
002FA2  3               
002FA2  3  18           	clc
002FA3  3  A5 rr        	lda z80_l
002FA5  3               .if swrflag
002FA5  3               	adc scdat + data_address - data_start,y 		; low byte of screen size.
002FA5  3               	sta z80_l
002FA5  3               	iny			; point to high byte.
002FA5  3               	lda z80_h
002FA5  3               	adc scdat+ data_address - data_start,y 		; high byte of screen size.
002FA5  3               	sta z80_h
002FA5  3               .else
002FA5  3  79 CD 6F     	adc scdat,y 		; low byte of screen size.
002FA8  3  85 rr        	sta z80_l
002FAA  3  C8           	iny			; point to high byte.
002FAB  3  A5 rr        	lda z80_h
002FAD  3  79 CD 6F     	adc scdat,y 		; high byte of screen size.
002FB0  3  85 rr        	sta z80_h
002FB2  3               .endif
002FB2  3  C8           	iny			; next address.
002FB3  3               
002FB3  3  CA           	dex 			; one less iteration.
002FB4  3  4C 9E 2F     	jmp groom1 		; loop until we reach the end.
002FB7  3               groom0:
002FB7  3               .if swrflag
002FB7  3               	lda numsc + data_address - data_start		; add displacement.
002FB7  3               .else
002FB7  3  AD 26 9B     	lda numsc		; add displacement.
002FBA  3               .endif
002FBA  3  0A           	asl a
002FBB  3  18           	clc			; add double displacement to address.
002FBC  3  65 rr        	adc z80_l
002FBE  3  85 rr        	sta z80_l
002FC0  3  A5 rr        	lda z80_h
002FC2  3  69 00        	adc #0
002FC4  3  85 rr        	sta z80_h
002FC6  3  60           	rts
002FC7  3               
002FC7  3               ;-----------------------------------------------------------
002FC7  3               ; Draw present room.
002FC7  3               ;-----------------------------------------------------------
002FC7  3               
002FC7  3               droom:
002FC7  3  AD 01 29     	lda wintop 		; window top.
002FCA  3  85 rr        	sta dispy		; set cursor y position.
002FCC  3               droom2:
002FCC  3  20 92 2F     	jsr groom 		; get address of current room.
002FCF  3  A9 00        	lda #0	 		; zero in accumulator.
002FD1  3  85 rr        	sta comcnt 		; reset compression counter.
002FD3  3  AD 03 29     	lda winhgt 		; height of window.
002FD6  3  85 rr        	sta rrow		; set row counter
002FD8  3               droom0:
002FD8  3  AD 02 29     	lda winlft 		; window left edge.
002FDB  3  85 rr        	sta dispx 		; set cursor x position.
002FDD  3  AD 04 29     	lda winwid 		; width of window.
002FE0  3  85 rr        	sta rcol		; set column counter
002FE2  3               droom1:
002FE2  3  20 F3 2F     	jsr flbyt 		; decompress next byte on the fly.
002FE5  3               .if xflag
002FE5  3               	jsr drwmeta
002FE5  3               .else
002FE5  3  20 22 2F     	jsr pattr2 		; show attributes and block.
002FE8  3               .endif
002FE8  3  C6 rr        	dec rcol		; one less column.
002FEA  3  D0 F6        	bne droom1 		; repeat for entire line.
002FEC  3  E6 rr        	inc dispy		; move down one line.
002FEE  3               .if xflag
002FEE  3               	inc dispy		; move down one line.
002FEE  3               .endif
002FEE  3  C6 rr        	dec rrow 		; one less row.
002FF0  3  D0 E6        	bne droom0 		; repeat for all rows.
002FF2  3  60           	rts
002FF3  3               
002FF3  3               ;----------------------------------------------
002FF3  3               ; Decompress bytes on-the-fly.
002FF3  3               ;----------------------------------------------
002FF3  3               
002FF3  3               flbyt:
002FF3  3  A5 rr        	lda comcnt 		; compression counter.
002FF5  3  D0 21        	bne flbyt1		; any more to decompress?  yes.
002FF7  3               
002FF7  3  A0 00        	ldy #0
002FF9  3  B1 rr        	lda (z80_hl),y 		; fetch next byte.
002FFB  3  E6 rr        	inc z80_l 		; point to next cell.
002FFD  3  D0 02        	bne :+
002FFF  3  E6 rr        	inc z80_h
003001  3               :
003001  3  C9 FF        	cmp #255 		; is this byte a control code?
003003  3  F0 01        	beq :+
003005  3  60           	rts 			; no, this byte is uncompressed.
003006  3               :
003006  3  B1 rr        	lda (z80_hl),y 		; fetch byte type.
003008  3  85 rr        	sta combyt 		; set up the type.
00300A  3  E6 rr        	inc z80_l 		; point to quantity.
00300C  3  D0 02        	bne :+
00300E  3  E6 rr        	inc z80_h
003010  3               :
003010  3  B1 rr        	lda (z80_hl),y 		; get quantity.
003012  3  E6 rr        	inc z80_l 		; point to next byte.
003014  3  D0 02        	bne :+
003016  3  E6 rr        	inc z80_h
003018  3               :
003018  3               flbyt1:
003018  3  85 rr        	sta comcnt 		; store new quantity.
00301A  3  C6 rr        	dec comcnt		; one less.
00301C  3  A5 rr        	lda combyt 		; byte to expand.
00301E  3  60           	rts
00301F  3               
00301F  3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00301F  3               ; Drawing a MetaBlock (4 tiles 8x8 => 16x16)
00301F  3               ; param in regA tells the block number to use, if 0 use 0,0,0,0  else use N,N+2 || N+1,N+3
00301F  3               ; ------------------------------------------------------------------------------------------------------------------------------------------
00301F  3               .if xflag
00301F  3               drwmeta:
00301F  3               	sta tmpblk
00301F  3               	jsr pattr2
00301F  3               
00301F  3               	inc dispy
00301F  3               	dec dispx
00301F  3               	ldx tmpblk
00301F  3               	beq :+
00301F  3               	inx
00301F  3               :
00301F  3               	txa
00301F  3               	jsr pattr2
00301F  3               
00301F  3               	ldx tmpblk
00301F  3               	beq :+
00301F  3               	inx
00301F  3               	inx
00301F  3               	inx
00301F  3               :
00301F  3               	txa
00301F  3               	jsr pattr2
00301F  3               
00301F  3               	dec dispy
00301F  3               	dec dispx
00301F  3               	ldx tmpblk
00301F  3               	beq :+
00301F  3               	inx
00301F  3               	inx
00301F  3               :
00301F  3               	txa
00301F  3               	jsr pattr2
00301F  3               	rts
00301F  3               
00301F  3               tmpblk:	.byte 0
00301F  3               
00301F  3               .endif
00301F  3               
00301F  3               ;------------------------------------------
00301F  3               ; Ladder down check.
00301F  3               ;
00301F  3               ; Input:
00301F  3               ;  IX = sprite pointer
00301F  3               ;------------------------------------------
00301F  3               
00301F  3               .if lflag
00301F  3               laddd:
00301F  3  A0 09        	ldy #9
003021  3  B1 rr        	lda (z80_ix),y		; x coordinate.
003023  3  85 rr        	sta dispx
003025  3               
003025  3  A0 08        	ldy #8
003027  3  B1 rr        	lda (z80_ix),y		; y coordinate.
003029  3  29 FE        	and #254		; make it even.
00302B  3  91 rr        	sta (z80_ix),y 		; reset it.
00302D  3  18           	clc 			; look down 16 pixels.
00302E  3               numsp5:
00302E  3  69 10        	adc #SPR_HGT
003030  3  85 rr        	sta dispy		; coords in dispx,dispy.
003032  3  4C 48 30     	jmp laddv
003035  3               
003035  3               ;------------------------------------------
003035  3               ; Ladder up check.
003035  3               ;
003035  3               ; Input:
003035  3               ;  IX = sprite pointer
003035  3               ;
003035  3               ; Output:
003035  3               ;  A  = 0 is ok, A <>0 is not ok
003035  3               ;------------------------------------------
003035  3               
003035  3               laddu:
003035  3  A0 09        	ldy #9
003037  3  B1 rr        	lda (z80_ix),y		; x coordinate.
003039  3  85 rr        	sta dispx
00303B  3               
00303B  3  A0 08        	ldy #8
00303D  3  B1 rr        	lda (z80_ix),y		; y coordinate.
00303F  3  29 FE        	and #254 		; make it even.
003041  3  91 rr        	sta (z80_ix),y		; reset it.
003043  3  18           	clc 			; look 2 pixels above feet.
003044  3               numsp6:
003044  3  69 0E        	adc #SPR_HGT-2
003046  3  85 rr        	sta dispy		; coords in dispx,dispy.
003048  3               laddv:
003048  3  20 1A 32     	jsr tstbl 		; get map address.
00304B  3  20 51 31     	jsr ldchk 		; standard ladder check.
00304E  3  F0 01        	beq :+
003050  3  60           	rts 			; no way through.
003051  3               :
003051  3  E6 rr        	inc bufaddr 		; look right one cell.
003053  3  D0 02        	bne :+
003055  3  E6 rr        	inc bufaddr+1
003057  3               :
003057  3  20 51 31     	jsr ldchk 		; do the check.
00305A  3  F0 01        	beq :+
00305C  3  60           	rts 			; impassable.
00305D  3               :
00305D  3  A5 rr        	lda dispx 		; y coordinate.
00305F  3  29 07        	and #7 			; position straddling block cells.
003061  3  D0 01        	bne :+
003063  3  60           	rts 			; no more checks needed.
003064  3               :
003064  3  E6 rr        	inc bufaddr 		; look to third cell.
003066  3  D0 02        	bne :+
003068  3  E6 rr        	inc bufaddr+1
00306A  3               :
00306A  3  20 51 31     	jsr ldchk 		; do the check.
00306D  3  60           	rts  			; return with zero flag set accordingly.
00306E  3               .endif
00306E  3               
00306E  3               ;---------------------------------------------------------
00306E  3               ; Can go up check.
00306E  3               ;
00306E  3               ; Input:
00306E  3               ;  IX = sprite pointer
00306E  3               ;
00306E  3               ; Output:
00306E  3               ;  A  = 0 is ok, A <>0 is not ok
00306E  3               ;---------------------------------------------------------
00306E  3               
00306E  3               cangu:
00306E  3  A0 09        	ldy #9
003070  3  B1 rr        	lda (z80_ix),y		; x coordinate.
003072  3  85 rr        	sta dispx
003074  3  A0 08        	ldy #8
003076  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
003078  3  38           	sec
003079  3  E9 02        	sbc #2
00307B  3  85 rr        	sta dispy		; coords in dispx,dispy.
00307D  3  20 1A 32     	jsr tstbl 		; get map address.
003080  3  20 20 31     	jsr lrchk 		; standard left/right check.
003083  3  F0 01        	beq :+
003085  3  60           	rts			; no way through.
003086  3               :
003086  3  E6 rr        	inc bufaddr		; look right one cell.
003088  3  D0 02        	bne :+
00308A  3  E6 rr        	inc bufaddr+1
00308C  3               :
00308C  3  20 20 31     	jsr lrchk 		; do the check.
00308F  3  F0 01        	beq :+
003091  3  60           	rts			; impassable.
003092  3               :
003092  3  A5 rr        	lda dispx		; x coordinate.
003094  3  29 07        	and #7			; position straddling block cells.
003096  3  D0 01        	bne :+
003098  3  60           	rts			; no more checks needed.
003099  3               :
003099  3  E6 rr        	inc bufaddr		; look to third cell.
00309B  3  D0 02        	bne :+
00309D  3  E6 rr        	inc bufaddr+1
00309F  3               :
00309F  3  20 20 31     	jsr lrchk		; do the check.
0030A2  3  60           	rts 			; return with zero flag set accordingly.
0030A3  3               
0030A3  3               ;---------------------------------------------------------
0030A3  3               ; Can go down check.
0030A3  3               ;
0030A3  3               ; Input:
0030A3  3               ;  IX = sprite pointer
0030A3  3               ;
0030A3  3               ; Output:
0030A3  3               ;  A  = 0 is ok, A <>0 is not ok
0030A3  3               ;---------------------------------------------------------
0030A3  3               
0030A3  3               cangd:
0030A3  3  A0 09        	ldy #9
0030A5  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0030A7  3  85 rr        	sta dispx
0030A9  3  A0 08        	ldy #8
0030AB  3  B1 rr        	lda (z80_ix),y		; y coordinate.
0030AD  3  18           	clc
0030AE  3               numsp3:
0030AE  3  69 10        	adc #SPR_HGT 		; look down 16 pixels.
0030B0  3  85 rr        	sta dispy		; coords in dispx,dispy.
0030B2  3  20 1A 32     	jsr tstbl 		; get map address.
0030B5  3  20 35 31     	jsr plchk 		; block, platform check.
0030B8  3  F0 01        	beq :+
0030BA  3  60           	rts			; no way through.
0030BB  3               :
0030BB  3  E6 rr        	inc bufaddr		; look right one cell.
0030BD  3  D0 02        	bne :+
0030BF  3  E6 rr        	inc bufaddr+1
0030C1  3               :
0030C1  3  20 35 31     	jsr plchk		; block, platform check.
0030C4  3  F0 01        	beq :+
0030C6  3  60           	rts			; impassable.
0030C7  3               :
0030C7  3  A5 rr        	lda dispx		; x coordinate.
0030C9  3  29 07        	and #7			; position straddling block cells.
0030CB  3  D0 01        	bne :+
0030CD  3  60           	rts			; no more checks needed.
0030CE  3               :
0030CE  3  E6 rr        	inc bufaddr		; look to third cell.
0030D0  3  D0 02        	bne :+
0030D2  3  E6 rr        	inc bufaddr+1
0030D4  3               :
0030D4  3  20 35 31     	jsr plchk		; block, platform check.
0030D7  3  60           	rts			; return with zero flag set accordingly.
0030D8  3               
0030D8  3               ;---------------------------------------------------------
0030D8  3               ; Can go left check.
0030D8  3               ;
0030D8  3               ; Input:
0030D8  3               ;  IX = sprite pointer
0030D8  3               ;
0030D8  3               ; Output:
0030D8  3               ;  A  = 0 is ok, A <>0 is not ok
0030D8  3               ;---------------------------------------------------------
0030D8  3               
0030D8  3               cangl:
0030D8  3  A0 08        	ldy #8
0030DA  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
0030DC  3  85 rr        	sta dispy
0030DE  3  A0 09        	ldy #9
0030E0  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
0030E2  3  38           	sec
0030E3  3  E9 02        	sbc #2			; look left 2 pixels.
0030E5  3  85 rr        	sta dispx		; coords in dispx,dispy.
0030E7  3  4C F9 30     	jmp cangh		; test if we can go there.
0030EA  3               
0030EA  3               ;---------------------------------------------------------
0030EA  3               ; Can go right check.
0030EA  3               ;
0030EA  3               ; Input:
0030EA  3               ;  IX = sprite pointer
0030EA  3               ;
0030EA  3               ; Output:
0030EA  3               ;  A  = 0 is ok, A <>0 is not ok
0030EA  3               ;---------------------------------------------------------
0030EA  3               
0030EA  3               cangr:
0030EA  3  A0 08        	ldy #8
0030EC  3  B1 rr        	lda (z80_ix),y		; y coordinate.
0030EE  3  85 rr        	sta dispy
0030F0  3  A0 09        	ldy #9
0030F2  3  B1 rr        	lda (z80_ix),y		; x coordinate.
0030F4  3  18           	clc
0030F5  3  69 10        	adc #16			; look right 16 pixels.
0030F7  3  85 rr        	sta dispx		; coords in dispx,dispy.
0030F9  3               cangh:
0030F9  3               cangh2:
0030F9  3  A9 03        	lda #(SPR_HGT/8+1)	; default rows to write.
0030FB  3  85 rr        	sta z80_b
0030FD  3  A5 rr        	lda dispy		; y position.
0030FF  3  29 07        	and #7			; does x straddle cells?
003101  3  D0 02        	bne cangh0		; yes, loop counter is good.
003103  3  C6 rr        	dec z80_b		; one less row to write.
003105  3               cangh0:
003105  3  20 1A 32     	jsr tstbl		; get map address.
003108  3               cangh1:
003108  3  20 20 31     	jsr lrchk		; standard left/right check.
00310B  3  F0 01        	beq :+
00310D  3  60           	rts			; no way through.
00310E  3               :
00310E  3  48           	pha
00310F  3  18           	clc
003110  3  A5 rr        	lda bufaddr
003112  3  69 20        	adc #32			; look down.
003114  3  85 rr        	sta bufaddr
003116  3  90 02        	bcc :+
003118  3  E6 rr        	inc bufaddr+1
00311A  3               :
00311A  3  68           	pla
00311B  3               
00311B  3  C6 rr        	dec z80_b
00311D  3  D0 E9        	bne cangh1
00311F  3  60           	rts
003120  3               
003120  3               ;-------------------------------------
003120  3               ; Check left/right movement is okay.
003120  3               ;
003120  3               ; Input:
003120  3               ;  bufaddr = MAP + x/8 + y/8*32
003120  3               ;
003120  3               ; Output:
003120  3               ;  A  = 0 is ok, A <>0 is not ok
003120  3               ;-------------------------------------
003120  3               
003120  3               lrchk:
003120  3  A0 00        	ldy #0
003122  3  B1 rr        	lda (bufaddr),y		; fetch map cell.
003124  3  C9 02        	cmp #WALL 		; is it passable?
003126  3  F0 0A        	beq lrchkx		; no.
003128  3               
003128  3  C9 04        	cmp #FODDER		; fodder has to be dug.
00312A  3  F0 06        	beq lrchkx		; not passable.
00312C  3  A9 00        	lda #0
00312E  3  60           	rts
00312F  3               
00312F  3               ;--------------------------------------------------------------
00312F  3               ; Called by mmenu
00312F  3               ;--------------------------------------------------------------
00312F  3               
00312F  3               always:
00312F  3  A9 FF        	lda #255		; report it as okay.
003131  3  60           	rts
003132  3               
003132  3               lrchkx:
003132  3  A9 01        	lda #1 			; reset all bits.
003134  3  60           	rts
003135  3               
003135  3               
003135  3               ;--------------------------------------------------------------
003135  3               ; Check platform or solid item is not in way.
003135  3               ;
003135  3               ; Input:
003135  3               ;  bufaddr = MAP + x/8 + y/8*32
003135  3               ;
003135  3               ; Output:
003135  3               ;  A  = 0 is ok, A <>0 is not ok
003135  3               ;--------------------------------------------------------------
003135  3               
003135  3               plchk:
003135  3  A0 00        	ldy #0
003137  3  B1 rr        	lda (bufaddr),y 	; fetch map cell.
003139  3  C9 02        	cmp #WALL 		; is it passable?
00313B  3  F0 F5        	beq lrchkx		; no.
00313D  3               .if pflag .or dflag
00313D  3               	cmp #FODDER		; fodder has to be dug.
00313D  3               	beq lrchkx		; not passable.
00313D  3               .endif
00313D  3  C9 01        	cmp #PLATFM		; platform is solid.
00313F  3  F0 07        	beq plchkx		; not passable.
003141  3               .if lflag
003141  3  C9 03        	cmp #LADDER		; is it a ladder?
003143  3  F0 ED        	beq lrchkx		; on ladder, deny movement.
003145  3               .endif
003145  3               plchk0:
003145  3  A9 00        	lda #0			; report as ok
003147  3  60           	rts
003148  3               plchkx:
003148  3  A5 rr        	lda dispy		; x coordinate.
00314A  3  29 07        	and #7			; position straddling blocks.
00314C  3  F0 E4        	beq lrchkx		; on platform, deny movement.
00314E  3  4C 45 31     	jmp plchk0
003151  3               
003151  3               ;--------------------------------------------------------------
003151  3               ; Check ladder is available.
003151  3               ;
003151  3               ; Input:
003151  3               ;  bufaddr = MAP + x/8 + y/8*32
003151  3               ;
003151  3               ; Output:
003151  3               ;  A  = 0 is ok, A <>0 is not ok
003151  3               ;--------------------------------------------------------------
003151  3               
003151  3               .if lflag
003151  3               ldchk:
003151  3  A0 00        	ldy #0
003153  3  B1 rr        	lda (bufaddr),y 	; fetch cell.
003155  3  C9 03        	cmp #LADDER 		; is it a ladder?
003157  3  F0 03        	beq ldchk1
003159  3  A9 01        	lda #1
00315B  3  60           	rts  			; return with zero flag set accordingly.
00315C  3               ldchk1:
00315C  3  A9 00        	lda #0
00315E  3  60           	rts
00315F  3               .endif
00315F  3               
00315F  3               ;--------------------------------------------------------------
00315F  3               ; Get collectables.
00315F  3               ;--------------------------------------------------------------
00315F  3               
00315F  3               .if cflag
00315F  3               getcol:
00315F  3                       lda #COLECT             ; collectable blocks.
00315F  3                       sta z80_b
00315F  3                       jsr tded                ; test for collectable blocks.
00315F  3                       cmp z80_b               ; did we find one?
00315F  3                       beq :+
00315F  3                       rts                     ; none were found, job done.
00315F  3               :
00315F  3                       jsr gtblk               ; get block.
00315F  3                       jsr evnt20              ; collected block event.
00315F  3                       jmp getcol              ; repeat until none left.
00315F  3               
00315F  3               ; Get collectable block.
00315F  3               
00315F  3               gtblk:
00315F  3               	ldy #0
00315F  3               	lda (bufaddr),y
00315F  3               	sta z80_a
00315F  3                       lda #0
00315F  3                       sta (bufaddr),y		; make it empty now.
00315F  3               
00315F  3               	lda bufaddr		; set dispx
00315F  3               	and #31
00315F  3               	sta dispx
00315F  3               
00315F  3               	lda bufaddr+1		; Set dispy
00315F  3               	sec
00315F  3               	sbc #>MAP
00315F  3               	sta bufaddr+1
00315F  3               	asl bufaddr
00315F  3               	rol bufaddr+1
00315F  3               	asl bufaddr
00315F  3               	rol bufaddr+1
00315F  3               	asl bufaddr
00315F  3               	rol bufaddr+1
00315F  3               	lda bufaddr+1
00315F  3               	sta dispy
00315F  3               
00315F  3               	lda colpatt		; get blocknr
00315F  3               	sta z80_e		; displacement in e.
00315F  3               	lda #0
00315F  3               	sta z80_d		; no high byte.
00315F  3               	asl z80_e  		; multiply char by 8.
00315F  3               	rol z80_d
00315F  3               	asl z80_e
00315F  3               	rol z80_d
00315F  3               	asl z80_e
00315F  3               	rol z80_d
00315F  3               	clc
00315F  3               	lda z80_e
00315F  3               .if swrflag
00315F  3               	adc #<(chgfx + data_address - data_start) 		; address of graphics.
00315F  3               	sta tileaddr
00315F  3               	lda z80_d
00315F  3               	adc #>(chgfx + data_address - data_start)
00315F  3               .else
00315F  3               	adc #<chgfx 		; address of graphics.
00315F  3               	sta tileaddr
00315F  3               	lda z80_d
00315F  3               	adc #>chgfx
00315F  3               .endif
00315F  3               	sta tileaddr+1
00315F  3               	jsr gprad 		; get screen address.
00315F  3               	ldx #7			; number of pixel rows to write.
00315F  3               gtblk0:
00315F  3               	ldy #0
00315F  3               	lda (tileaddr),y 	; get image byte.
00315F  3               	ldy scrtab,x
00315F  3               	eor (scraddr),y 	; XOR tile on screen
00315F  3               	sta (scraddr),y 	; copy to screen.
00315F  3               	inc tileaddr 		; next image byte.
00315F  3               	bne :+
00315F  3               	inc tileaddr+1
00315F  3               :
00315F  3               	dex	 		; repeat for 8 pixel rows.
00315F  3               	bpl gtblk0
00315F  3               	rts
00315F  3               .endif
00315F  3               
00315F  3               ;--------------------------------------------------------------
00315F  3               ; Touched deadly block check.
00315F  3               ; returns with DEADLY (must be non-zero) in accumulator if true.
00315F  3               ;
00315F  3               ; Input:
00315F  3               ;  IX = sprite address
00315F  3               ;
00315F  3               ; Output:
00315F  3               ;  A  = 0 is ok, A=5 is not ok
00315F  3               ;--------------------------------------------------------------
00315F  3               
00315F  3               tded:
00315F  3  A0 08        	ldy #8
003161  3  B1 rr        	lda (z80_ix),y 		; y coordinate.
003163  3  85 rr        	sta dispy
003165  3  C8           	iny
003166  3  B1 rr        	lda (z80_ix),y 		; x coordinate.
003168  3  85 rr        	sta dispx		; coords in dispx,dispy.
00316A  3  20 1A 32     	jsr tstbl		; get map address.
00316D  3  48           	pha
00316E  3  A9 1F        	lda #31			; default distance to next line down.
003170  3  85 rr        	sta z80_e
003172  3  68           	pla
003173  3  C5 rr        	cmp z80_b		; is this the required block?
003175  3  D0 01        	bne :+
003177  3  60           	rts			; yes.
003178  3               :
003178  3  E6 rr        	inc bufaddr 		; next cell.
00317A  3  D0 02        	bne :+
00317C  3  E6 rr        	inc bufaddr+1
00317E  3               :
00317E  3  A0 00        	ldy #0
003180  3  B1 rr        	lda (bufaddr),y		; fetch type.
003182  3  C5 rr        	cmp z80_b 		; is this deadly/custom?
003184  3  D0 01        	bne :+
003186  3  60           	rts			; yes.
003187  3               :
003187  3  A5 rr        	lda dispx		; horizontal position.
003189  3  85 rr        	sta z80_c 		; store column in c register.
00318B  3  29 07        	and #7			; is it straddling cells?
00318D  3  D0 03        	bne :+
00318F  3  4C A3 31     	jmp tded0		; no.
003192  3               :
003192  3  E6 rr        	inc bufaddr 		; last cell.
003194  3  D0 02        	bne :+
003196  3  E6 rr        	inc bufaddr+1
003198  3               :
003198  3  A0 00        	ldy #0
00319A  3  B1 rr        	lda (bufaddr),y 	; fetch type.
00319C  3  C5 rr        	cmp z80_b		; is this the block?
00319E  3  D0 01        	bne :+
0031A0  3  60           	rts			; yes.
0031A1  3               :
0031A1  3  C6 rr        	dec z80_e		; one less cell to next row down.
0031A3  3               tded0:
0031A3  3  18           	clc 			; point to next row.
0031A4  3  A5 rr        	lda bufaddr
0031A6  3  65 rr        	adc z80_e
0031A8  3  85 rr        	sta bufaddr
0031AA  3  90 02        	bcc :+
0031AC  3  E6 rr        	inc bufaddr+1
0031AE  3               :
0031AE  3  A0 00        	ldy #0
0031B0  3  B1 rr        	lda (bufaddr),y		; fetch left cell block.
0031B2  3  C5 rr        	cmp z80_b		; is this fatal?
0031B4  3  D0 01        	bne :+
0031B6  3  60           	rts			; yes.
0031B7  3               :
0031B7  3  E6 rr        	inc bufaddr 		; next cell.
0031B9  3  D0 02        	bne :+
0031BB  3  E6 rr        	inc bufaddr+1
0031BD  3               :
0031BD  3  A0 00        	ldy #0
0031BF  3  B1 rr        	lda (bufaddr),y 	; fetch type.
0031C1  3  C5 rr        	cmp z80_b		; is this fatal?
0031C3  3  D0 01        	bne :+
0031C5  3  60           	rts			; yes.
0031C6  3               :
0031C6  3  A5 rr        	lda z80_c		; horizontal position.
0031C8  3  29 07        	and #7			; is it straddling cells?
0031CA  3  D0 03        	bne :+
0031CC  3  4C DE 31     	jmp tded1 		; no.
0031CF  3               :
0031CF  3  E6 rr        	inc bufaddr		; last cell.
0031D1  3  D0 02        	bne :+
0031D3  3  E6 rr        	inc bufaddr+1
0031D5  3               :
0031D5  3  A0 00        	ldy #0
0031D7  3  B1 rr        	lda (bufaddr),y		; fetch type.
0031D9  3  C5 rr        	cmp z80_b		; is this fatal?
0031DB  3  D0 01        	bne :+
0031DD  3  60           	rts			; yes.
0031DE  3               :
0031DE  3               tded1:
0031DE  3  A5 rr        	lda dispy		; vertical position.
0031E0  3  29 07        	and #7 			; is it straddling cells?
0031E2  3  D0 01        	bne :+
0031E4  3  60           	rts			; no, job done.
0031E5  3               :
0031E5  3  18           	clc			; point to next row.
0031E6  3  A5 rr        	lda bufaddr
0031E8  3  65 rr        	adc z80_e
0031EA  3  85 rr        	sta bufaddr
0031EC  3  90 02        	bcc :+
0031EE  3  E6 rr        	inc bufaddr+1
0031F0  3               :
0031F0  3  A0 00        	ldy #0
0031F2  3  B1 rr        	lda (bufaddr),y 	; fetch left cell block.
0031F4  3  C5 rr        	cmp z80_b		; is this fatal?
0031F6  3  D0 01        	bne :+
0031F8  3  60           	rts			; yes.
0031F9  3               :
0031F9  3  E6 rr        	inc bufaddr		; next cell.
0031FB  3  D0 02        	bne :+
0031FD  3  E6 rr        	inc bufaddr+1
0031FF  3               :
0031FF  3  A0 00        	ldy #0
003201  3  B1 rr        	lda (bufaddr),y 	; fetch type.
003203  3  C5 rr        	cmp z80_b		; is this fatal?
003205  3  D0 01        	bne :+
003207  3  60           	rts			; yes.
003208  3               :
003208  3  A5 rr        	lda z80_c		; horizontal position.
00320A  3  29 07        	and #7			; is it straddling cells?
00320C  3  D0 01        	bne :+
00320E  3  60           	rts			; no.
00320F  3               :
00320F  3  E6 rr        	inc bufaddr		; last cell.
003211  3  D0 02        	bne :+
003213  3  E6 rr        	inc bufaddr+1
003215  3               :
003215  3  A0 00        	ldy #0
003217  3  B1 rr        	lda (bufaddr),y		; fetch final type.
003219  3  60           	rts 			; return with final type in accumulator.
00321A  3               
00321A  3               ;---------------------------------------------------
00321A  3               ; Fetch block type at (dispx, dispy).
00321A  3               ;
00321A  3               ; Output:
00321A  3               ;  A = block type
00321A  3               ;---------------------------------------------------
00321A  3               
00321A  3               tstbl:
00321A  3  A5 rr        	lda dispy 		; fetch y coord.
00321C  3  4A           	lsr a			; bufaddr = y/8
00321D  3  4A           	lsr a
00321E  3  4A           	lsr a
00321F  3               ;	sta chary
00321F  3               
00321F  3  85 rr        	sta bufaddr
003221  3  A9 00        	lda #0
003223  3  85 rr        	sta bufaddr+1
003225  3               
003225  3  06 rr        	asl bufaddr  		; bufaddr = y/8 * 32
003227  3  26 rr        	rol bufaddr+1
003229  3  06 rr        	asl bufaddr
00322B  3  26 rr        	rol bufaddr+1
00322D  3  06 rr        	asl bufaddr
00322F  3  26 rr        	rol bufaddr+1
003231  3  06 rr        	asl bufaddr
003233  3  26 rr        	rol bufaddr+1
003235  3  06 rr        	asl bufaddr
003237  3  26 rr        	rol bufaddr+1
003239  3               
003239  3  A5 rr        	lda dispx		; x/8
00323B  3  4A           	lsr a
00323C  3  4A           	lsr a
00323D  3  4A           	lsr a
00323E  3               ;	sta charx
00323E  3               
00323E  3  18           	clc			; bufaddr = MAP + x/8 + y/8*32
00323F  3  65 rr        	adc bufaddr
003241  3  69 00        	adc #<MAP
003243  3  85 rr        	sta bufaddr
003245  3  A5 rr        	lda bufaddr+1
003247  3  69 03        	adc #>MAP
003249  3  85 rr        	sta bufaddr+1
00324B  3               
00324B  3  A0 00        	ldy #0
00324D  3  B1 rr        	lda (bufaddr),y 	; fetch byte there.
00324F  3  60           	rts
003250  3               
003250  3               ;-------------------------------------------------------------------
003250  3               ; Jump - if we can.
003250  3               ; Requires initial speed to be set up in accumulator prior to call.
003250  3               ;
003250  3               ; Input:
003250  3               ;  IX = sprite address
003250  3               ;-------------------------------------------------------------------
003250  3               
003250  3               jump:
003250  3  A0 0D        	ldy #var_jumpLo
003252  3  B1 rr        	lda (z80_ix),y		; jump table low.
003254  3  A0 0E        	ldy #var_jumpHi
003256  3  11 rr        	ora (z80_ix),y		; jump table high.
003258  3  F0 01        	beq :+
00325A  3  60           	rts			; already in the air.
00325B  3               :
00325B  3               .if swrflag
00325B  3               	lda #>(jtab + data_address - data_start)
00325B  3               	ldy #var_jumpHi
00325B  3               	sta (z80_ix),y		; set jump high.
00325B  3               	lda #<(jtab + data_address - data_start)		; jump table start.
00325B  3               .else
00325B  3  A9 A1        	lda #>jtab
00325D  3  A0 0E        	ldy #var_jumpHi
00325F  3  91 rr        	sta (z80_ix),y		; set jump high.
003261  3  A9 EA        	lda #<jtab		; jump table start.
003263  3               .endif
003263  3  A0 0D        	ldy #var_jumpLo
003265  3  91 rr        	sta (z80_ix),y		; set jump low.
003267  3  60           	rts
003268  3               
003268  3               ; Jump table.
003268  3               ; _BEEB - jump table must reside entirely in a page otherwise grav fn breaks
003268  3               ;.align 32
003268  3               ;jtab:
003268  3               ;	.byte 248,250,252
003268  3               ;	.byte 254,254,255
003268  3               ;	.byte 255,255,0,0
003268  3               ;	.byte 0,1,1,1,2,2
003268  3               ;	.byte 4,6,8,8,8,99
003268  3               
003268  3               ;------------------------------------------------
003268  3               ; Random numbers code.
003268  3               ; Pseudo-random number generator, 8-bit.
003268  3               ;
003268  3               ; Output:
003268  3               ;  RND = random number
003268  3               ;------------------------------------------------
003268  3               
003268  3               random:
003268  3  A5 rr        	lda seed
00326A  3  F0 05        	beq doEor
00326C  3  0A           	asl a
00326D  3  F0 04        	beq noEor
00326F  3  90 02        	bcc noEor
003271  3  49 1D        doEor:	eor #$1d
003273  3  85 rr        noEor:	sta seed
003275  3  60           	rts
003276  3               
003276  3  A5 rr        	lda seed		; get last random number.
003278  3  0A           	asl a
003279  3  0A           	asl a
00327A  3  18           	clc
00327B  3  65 rr        	adc seed
00327D  3  18           	clc
00327E  3  69 45        	adc #$45
003280  3  85 rr        	sta seed		; store new seed.
003282  3  85 rr        	sta varrnd		; return number in variable.
003284  3  60           	rts
003285  3               
003285  3               ;--------------------------------------------------------
003285  3               ; Keys
003285  3               ;
003285  3               ; Out: joyval=x65FUDLR (bit cleared if key pressed)
003285  3               ;             ||||||||
003285  3               ;             |||||||+> Right    KEY 0  - X
003285  3               ;             ||||||+-> Left     KEY 1  - Z
003285  3               ;             |||||+--> Down     KEY 2  - .
003285  3               ;             ||||+---> Up       KEY 3  - ;
003285  3               ;             |||+----> Fire1    KEY 4  - SPC
003285  3               ;             ||+-----> Fire2    KEY 5  - Q
003285  3               ;             |+------> Fire3    KEY 6  - P
003285  3               ;             +-------> Not used
003285  3               ;
003285  3               ;                       Option1  KEY 7  - 1
003285  3               ;                       Option2  KEY 8  - 2
003285  3               ;                       Option3  KEY 9  - 3
003285  3               ;                       Option4  KEY 10 - 4
003285  3               ;--------------------------------------------------------
003285  3               
003285  3               ;              X   Z   .   ;  SPC  Q   P
003285  3               ;keys:   .byte $42,$61,$68,$48,$62,$10,$37       ; Keys defined by game designer.
003285  3               ;        .byte $30,$31,$11,$12                   ; menu options.;
003285  3               ;
003285  3               ;jkeys:  .byte $36,$37,$68,$48,$62,$10,$37       ; Keys defined by game designer.
003285  3               ;        .byte $30,$31,$11,$12                   ; menu options.
003285  3               
003285  3               ;-------------------------------------------------------
003285  3               ; Joystick and keyboard reading routines.
003285  3               ;
003285  3               ; contrl = 0, Keyboard
003285  3               ;          1, JoyKeyb
003285  3               ;          2, JoyMMC
003285  3               ;-------------------------------------------------------
003285  3               
003285  3               joykey:
003285  3  A5 rr        	lda contrl 		; control flag.
003287  3  C9 01        	cmp #1
003289  3  D0 03        	bne :+
00328B  3  4C A9 32     	jmp joyjoy 		; read keyboard joystick
00328E  3               :
00328E  3  C9 02        	cmp #2
003290  3  D0 03        	bne :+
003292  3  4C 0C 27     	jmp joysin 		; read MMC joystick.
003295  3               :
003295  3               ; Keyboard controls.
003295  3               
003295  3  A9 00        	lda #0		 	; zero reading.
003297  3  85 rr        	sta z80_e
003299  3               
003299  3  A0 06        	ldy #6	 		; address of last key.
00329B  3               joyke0:
00329B  3               .if swrflag
00329B  3               	lda keys + data_address - data_start,y 		; get key from table.
00329B  3               .else
00329B  3  B9 00 A2     	lda keys,y 		; get key from table.
00329E  3               .endif
00329E  3  20 D0 26     	jsr ktest		; being pressed?
0032A1  3  26 rr        	rol z80_e 		; rotate into reading.
0032A3  3               
0032A3  3  88           	dey		 	; next key.
0032A4  3  10 F5        	bpl joyke0 		; repeat for all keys.
0032A6  3  4C BA 32     	jmp joyjo1 		; store the value.
0032A9  3               
0032A9  3               ; Keyboard joystick controls.
0032A9  3               
0032A9  3               joyjoy:
0032A9  3  A9 00        	lda #0		 	; zero reading.
0032AB  3  85 rr        	sta z80_e
0032AD  3               
0032AD  3  A0 06        	ldy #6	 		; address of last key.
0032AF  3               joyjo3:
0032AF  3  B9 62 26     	lda jkeys,y 		; get key from table.
0032B2  3  20 D0 26     	jsr ktest		; being pressed?
0032B5  3  26 rr        	rol z80_e 		; rotate into reading.
0032B7  3               
0032B7  3  88           	dey		 	; next key.
0032B8  3  10 F5        	bpl joyjo3 		; repeat for all keys.
0032BA  3               joyjo1:
0032BA  3  A5 rr        	lda z80_e 		; copy e register to accumulator.
0032BC  3               joyjo2:
0032BC  3  85 rr        	sta joyval		; remember value.
0032BE  3  60           	rts
0032BF  3               
0032BF  3               ;---------------------------------------------------------------
0032BF  3               ; Display message.
0032BF  3               ;
0032BF  3               ; Input:
0032BF  3               ;  A = message number
0032BF  3               ;---------------------------------------------------------------
0032BF  3               
0032BF  3               dmsg:
0032BF  3  AA           	tax
0032C0  3               .if swrflag
0032C0  3               	lda #<(msgdat + data_address - data_start)		; pointer to messages.
0032C0  3               	sta z80_l
0032C0  3               	lda #>(msgdat + data_address - data_start)
0032C0  3               	sta z80_h
0032C0  3               .else
0032C0  3  A9 2C        	lda #<msgdat		; pointer to messages.
0032C2  3  85 rr        	sta z80_l
0032C4  3  A9 49        	lda #>msgdat
0032C6  3  85 rr        	sta z80_h
0032C8  3               .endif
0032C8  3  20 DA 33     	jsr getwrd		; get message number.
0032CB  3               dmsg3:
0032CB  3  20 C7 33     	jsr preprt		; pre-printing stuff.
0032CE  3  20 6F 2D     	jsr checkx		; make sure we"re in a printable range.
0032D1  3  A5 rr        	lda prtmod		; print mode.
0032D3  3  D0 47        	bne bmsg1		; no, double-height text.
0032D5  3               dmsg0:
0032D5  3  A5 rr        	lda z80_h		; store string pointer.
0032D7  3  48           	pha
0032D8  3  A5 rr        	lda z80_l
0032DA  3  48           	pha
0032DB  3               
0032DB  3  A0 00        	ldy #0
0032DD  3  B1 rr        	lda (z80_hl),y		; fetch byte to display.
0032DF  3  29 7F        	and #127		; remove any end marker.
0032E1  3  C9 0D        	cmp #ASCII_NEWLINE
0032E3  3  F0 24        	beq dmsg1
0032E5  3  20 BE 28     	jsr pchar		; display character.
0032E8  3  20 B4 33     	jsr nexpos 		; display position.
0032EB  3  D0 03        	bne dmsg2		; not on a new line.
0032ED  3  20 B9 33     	jsr nexlin		; next line down.
0032F0  3               dmsg2:
0032F0  3  68           	pla			; retrieve string pointer
0032F1  3  85 rr        	sta z80_l
0032F3  3  68           	pla
0032F4  3  85 rr        	sta z80_h
0032F6  3               
0032F6  3  A0 00        	ldy #0
0032F8  3  B1 rr        	lda (z80_hl),y		; fetch last character.
0032FA  3  0A           	asl a  			; was it the end?
0032FB  3  90 03        	bcc :+
0032FD  3  4C C2 2D     	jmp dscor2		; yes, job done.
003300  3               :
003300  3  E6 rr        	inc z80_l		; next character to display.
003302  3  D0 02        	bne :+
003304  3  E6 rr        	inc z80_h
003306  3               :
003306  3  4C D5 32     	jmp dmsg0
003309  3               dmsg1:
003309  3  E6 rr        	inc dispy
00330B  3  A5 rr        	lda dispy
00330D  3  C9 18        	cmp #24
00330F  3  90 04        	bcc dmsg4
003311  3  A9 00        	lda #0
003313  3  85 rr        	sta dispy
003315  3               dmsg4:
003315  3  A9 00        	lda #0
003317  3  85 rr        	sta dispx
003319  3  4C F0 32     	jmp dmsg2
00331C  3               
00331C  3               
00331C  3               ;----------------------------------------------------------
00331C  3               ; Display message in big text.
00331C  3               ;
00331C  3               ; Input:
00331C  3               ;  HL = string pointer
00331C  3               ;----------------------------------------------------------
00331C  3               
00331C  3               bmsg1:
00331C  3  A0 00        	ldy #0
00331E  3  B1 rr        	lda (z80_hl),y 		; get character to display.
003320  3  29 7F        	and #127		; only want 7 bits.
003322  3  C9 0D        	cmp #ASCII_NEWLINE
003324  3  F0 13        	beq bmsg2
003326  3  20 4E 33     	jsr bchar 		; display big char.
003329  3               bmsg3:
003329  3  A0 00        	ldy #0
00332B  3  B1 rr        	lda (z80_hl),y 		; look at last character.
00332D  3  48           	pha
00332E  3  E6 rr        	inc z80_l 		; next character in list.
003330  3  D0 02        	bne :+
003332  3  E6 rr        	inc z80_h
003334  3               :
003334  3  68           	pla
003335  3  0A           	asl a  			; was terminator flag set?
003336  3  90 E4        	bcc bmsg1		; no, keep going.
003338  3               
003338  3  60           	rts
003339  3               bmsg2:
003339  3  A9 00        	lda #0
00333B  3  85 rr        	sta dispx
00333D  3  E6 rr        	inc dispy
00333F  3  E6 rr        	inc dispy
003341  3  A5 rr        	lda dispy
003343  3  C9 17        	cmp #23
003345  3  90 E2        	bcc bmsg3
003347  3  A9 00        	lda #0
003349  3  85 rr        	sta dispy
00334B  3  4C 29 33     	jmp bmsg3
00334E  3               
00334E  3               ;----------------------------------------------------------
00334E  3               ; Big character display.
00334E  3               ;
00334E  3               ; Input:
00334E  3               ;  A = character
00334E  3               ;----------------------------------------------------------
00334E  3               
00334E  3               bchar:
00334E  3  85 rr        	sta z80_e		; save char in lb
003350  3  A9 00        	lda #0
003352  3  85 rr        	sta z80_d		; reset hb
003354  3               
003354  3  06 rr        	asl z80_e 		; multiply char by 8.
003356  3  26 rr        	rol z80_d
003358  3  06 rr        	asl z80_e
00335A  3  26 rr        	rol z80_d
00335C  3  06 rr        	asl z80_e
00335E  3  26 rr        	rol z80_d		; de = a*8
003360  3               
003360  3  18           	clc			; de = #<(FONT-256) + a*8
003361  3  A5 rr        	lda z80_e
003363  3  69 EA        	adc #<(FONT-256) 		; address of font.
003365  3  85 rr        	sta z80_e
003367  3  A5 rr        	lda z80_d
003369  3  69 9D        	adc #>(FONT-256)
00336B  3  85 rr        	sta z80_d
00336D  3               
00336D  3  20 B4 2E     	jsr gprad 		; get screen address.
003370  3               
003370  3  A2 00        	ldx #0			; height of character in font.
003372  3               bchar0:
003372  3  A0 00        	ldy #0
003374  3  B1 rr        	lda (z80_de),y 		; get a bit of the font.
003376  3               
003376  3               .if iflag
003376  3               	eor #$ff
003376  3               .endif
003376  3               
003376  3  91 rr        	sta (scraddr),y
003378  3  48           	pha
003379  3  20 A5 28     	jsr nline 		; next line down.
00337C  3  68           	pla
00337D  3  91 rr        	sta (scraddr),y
00337F  3  20 A5 28     	jsr nline 		; next line down.
003382  3               
003382  3  18           	clc
003383  3  E6 rr        	inc z80_e 		; next line of font.
003385  3  D0 02        	bne :+
003387  3  E6 rr        	inc z80_d
003389  3               :
003389  3  E8           	inx
00338A  3  E0 08        	cpx #8
00338C  3  D0 E4        	bne bchar0
00338E  3               
00338E  3  20 B4 33     	jsr nexpos		; display position.
003391  3  D0 05        	bne bchar2 		; not on a new line.
003393  3               bchar3:
003393  3  E6 rr        	inc dispy
003395  3  20 B9 33     	jsr nexlin 		; next line check.
003398  3               bchar2:
003398  3  4C C2 2D     	jmp dscor2		; tidy up line and column variables.
00339B  3               
00339B  3               
00339B  3               ;-------------------------------------------------
00339B  3               ; Display a character.
00339B  3               ;
00339B  3               ; Input:
00339B  3               ;  A = character
00339B  3               ;-------------------------------------------------
00339B  3               
00339B  3               achar:
00339B  3  85 rr        	sta z80_b 		; copy to b.
00339D  3  20 C7 33     	jsr preprt 		; get ready to print.
0033A0  3  A5 rr        	lda z80_b		; character in accumulator.
0033A2  3  A6 rr        	ldx prtmod 		; print mode.
0033A4  3  F0 03        	beq :+
0033A6  3  4C 4E 33     	jmp bchar 		; no, double-height text.
0033A9  3               :
0033A9  3  20 BE 28     	jsr pchar 		; display character.
0033AC  3  20 B4 33     	jsr nexpos 		; display position.
0033AF  3  F0 E2        	beq bchar3		; next line down.
0033B1  3  4C 98 33     	jmp bchar2 		; tidy up.
0033B4  3               
0033B4  3               
0033B4  3               ;-------------------------------------------------
0033B4  3               ; Get next print column position.
0033B4  3               ;-------------------------------------------------
0033B4  3               
0033B4  3               nexpos:
0033B4  3  E6 rr        	inc dispx		; move along one position.
0033B6  3  A5 rr        	lda dispx 		; get coordinate.
0033B8  3               ;	and #31
0033B8  3  60           	rts 			; return with status in zero flag.
0033B9  3               
0033B9  3               ;-------------------------------------------------
0033B9  3               ; Get next print line position.
0033B9  3               ;-------------------------------------------------
0033B9  3               
0033B9  3               nexlin:
0033B9  3  E6 rr        	inc dispy 		; newline.
0033BB  3  A5 rr        	lda dispy		; vertical position.
0033BD  3  C9 18        	cmp #24			; past screen edge?
0033BF  3  B0 01        	bcs :+
0033C1  3  60           	rts			; no, still okay.
0033C2  3               :
0033C2  3  A9 00        	lda #0			; restart at top.
0033C4  3  85 rr        	sta dispy
0033C6  3  60           	rts
0033C7  3               
0033C7  3               ;--------------------------------------------------------
0033C7  3               ; Pre-print preliminaries.
0033C7  3               ;--------------------------------------------------------
0033C7  3               
0033C7  3               preprt:
0033C7  3  A9 EA        	lda #<(FONT-256)		; font pointer.
0033C9  3  8D 6D 2D     	sta grbase		; set up graphics base.
0033CC  3  A9 9D        	lda #>(FONT-256)
0033CE  3  8D 6E 2D     	sta grbase+1
0033D1  3               prescr:
0033D1  3  A5 rr        	lda charx 		; display coordinates.
0033D3  3  85 rr        	sta dispx		; set up general coordinates.
0033D5  3  A5 rr        	lda chary
0033D7  3  85 rr        	sta dispy
0033D9  3  60           	rts
0033DA  3               
0033DA  3               ;--------------------------------------------------------------
0033DA  3               ; Get messagenr x in hl
0033DA  3               ;
0033DA  3               ; Input:
0033DA  3               ;  HL = pointer to message list
0033DA  3               ;  X  = message number.
0033DA  3               ;--------------------------------------------------------------
0033DA  3               
0033DA  3               getwrd:
0033DA  3  E0 00        	cpx #0
0033DC  3  D0 01        	bne:+ 			; first word in list?
0033DE  3  60           	rts 			; yep, don't search.
0033DF  3               :
0033DF  3  A0 00        	ldy #0
0033E1  3               getwd0:
0033E1  3  B1 rr        	lda (z80_hl),y
0033E3  3  48           	pha
0033E4  3  E6 rr        	inc z80_l
0033E6  3  D0 02        	bne :+
0033E8  3  E6 rr        	inc z80_h
0033EA  3               :
0033EA  3  68           	pla
0033EB  3  C9 80        	cmp #128		; found end?
0033ED  3  30 F2        	bmi getwd0		; no, carry on.
0033EF  3  CA           	dex			; until we have right number.
0033F0  3  D0 EF        	bne getwd0
0033F2  3  60           	rts
0033F3  3               
0033F3  3               ;-----------------------------------------------------------
0033F3  3               ; Bubble sort.
0033F3  3               ;-----------------------------------------------------------
0033F3  3               
0033F3  3               bsort:
0033F3  3  A9 0B        	lda #NUMSPR - 1		; sprites to swap.
0033F5  3  85 rr        	sta qscnt
0033F7  3               
0033F7  3  A9 00        	lda #<sprtab 		; sprite table.
0033F9  3  85 rr        	sta z80_x
0033FB  3  A9 0B        	lda #>sprtab
0033FD  3  85 rr        	sta z80_i
0033FF  3               bsort0:
0033FF  3  A0 00        	ldy #0
003401  3  B1 rr        	lda (z80_ix),y 		; first sprite type.
003403  3  C9 FF        	cmp #255 		; is it switched off?
003405  3  F0 30        	beq swemp		; yes, may need to switch another in here.
003407  3               
003407  3  A0 11        	ldy #TABSIZ
003409  3  B1 rr        	lda (z80_ix),y 		; check next slot exists.
00340B  3  C9 FF        	cmp #255 		; is it enabled?
00340D  3  F0 0A        	beq bsort2 		; no, nothing to swap.
00340F  3               
00340F  3  A0 14        	ldy #TABSIZ+3
003411  3  B1 rr        	lda (z80_ix),y 		; fetch next sprite's coordinate.
003413  3  A0 03        	ldy #3
003415  3  D1 rr        	cmp (z80_ix),y 		; compare with this x coordinate.
003417  3  90 10        	bcc bsort1		; next sprite is higher - may need to switch.
003419  3               bsort2:
003419  3  18           	clc
00341A  3  A5 rr        	lda z80_x
00341C  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
00341E  3  85 rr        	sta z80_x
003420  3  90 02        	bcc :+
003422  3  E6 rr        	inc z80_i
003424  3               :
003424  3  C6 rr        	dec qscnt
003426  3  D0 D7        	bne bsort0		; repeat for remaining sprites.
003428  3  60           	rts
003429  3               
003429  3               bsort1:
003429  3  A0 11        	ldy #TABSIZ
00342B  3  B1 rr        	lda (z80_ix),y		; sprite on/off flag.
00342D  3  C9 FF        	cmp #255		; is it enabled?
00342F  3  F0 E8        	beq bsort2		; no, nothing to swap.
003431  3  20 45 34     	jsr swspr		; swap positions.
003434  3  4C 19 34     	jmp bsort2
003437  3               swemp:
003437  3  A0 11        	ldy #TABSIZ
003439  3  B1 rr        	lda (z80_ix),y		; next table entry.
00343B  3  C9 FF        	cmp #255		; is that one on?
00343D  3  F0 DA        	beq bsort2		; no, nothing to swap.
00343F  3  20 45 34     	jsr swspr		; swap positions.
003442  3  4C 19 34     	jmp bsort2
003445  3               
003445  3               ; Swap sprites.
003445  3               
003445  3               swspr:
003445  3  A5 rr        	lda z80_x		; table address
003447  3  85 rr        	sta z80_e		; copy to de pair.
003449  3  85 rr        	sta z80_l		; copy to hl pair.
00344B  3  A5 rr        	lda z80_i
00344D  3  85 rr        	sta z80_h
00344F  3  85 rr        	sta z80_d
003451  3               
003451  3  18           	clc
003452  3  A5 rr        	lda z80_l
003454  3  69 11        	adc #TABSIZ		; distance to second entry.
003456  3  85 rr        	sta z80_l
003458  3  90 02        	bcc :+
00345A  3  E6 rr        	inc z80_h
00345C  3               :
00345C  3  A9 11        	lda #TABSIZ		; bytes to swap.
00345E  3  85 rr        	sta z80_b
003460  3  A0 00        	ldy #0
003462  3               swspr0:
003462  3  B1 rr        	lda (z80_hl),y		; fetch second byte.
003464  3  48           	pha
003465  3  B1 rr        	lda (z80_de),y 		; fetch first byte.
003467  3  91 rr        	sta (z80_hl),y 		; copy to second.
003469  3  68           	pla
00346A  3  91 rr        	sta (z80_de),y 		; copy to first sprite entry.
00346C  3               
00346C  3  E6 rr        	inc z80_e 		; next byte.
00346E  3  D0 02        	bne :+
003470  3  E6 rr        	inc z80_d
003472  3               :
003472  3  E6 rr        	inc z80_l 		; next byte.
003474  3  D0 02        	bne :+
003476  3  E6 rr        	inc z80_h
003478  3               :
003478  3  C6 rr        	dec z80_b
00347A  3  D0 E6        	bne swspr0 		; swap all bytes in table entry.
00347C  3  60           	rts
00347D  3               
00347D  3               ;----------------------------------------------------
00347D  3               ; Process sprites.
00347D  3               ;----------------------------------------------------
00347D  3               
00347D  3               pspr:
00347D  3  A9 0C        	lda #NUMSPR		; sprites to process.
00347F  3  85 rr        	sta sprptr
003481  3               
003481  3  A9 00        	lda #<sprtab 		; sprite table.
003483  3  85 rr        	sta z80_x
003485  3  A9 0B        	lda #>sprtab
003487  3  85 rr        	sta z80_i
003489  3               pspr1:
003489  3  A0 00        	ldy #0
00348B  3  B1 rr        	lda (z80_ix),y		; fetch sprite type.
00348D  3  C9 09        	cmp #9 			; within range of sprite types?
00348F  3  B0 03        	bcs :+
003491  3  20 A4 34     	jsr pspr2 		; yes, process this one.
003494  3               :
003494  3  18           	clc
003495  3  A5 rr        	lda z80_x
003497  3  69 11        	adc #TABSIZ 		; distance to next odd/even entry.
003499  3  85 rr        	sta z80_x
00349B  3  90 02        	bcc :+
00349D  3  E6 rr        	inc z80_i		; next sprite.
00349F  3               :
00349F  3  C6 rr        	dec sprptr 		; repeat for remaining sprites.
0034A1  3  D0 E6        	bne pspr1
0034A3  3  60           	rts
0034A4  3               
0034A4  3               pspr2:
0034A4  3  A5 rr        	lda z80_x 		; store original sprite pointer.
0034A6  3  85 rr        	sta ogptr
0034A8  3  A5 rr        	lda z80_i
0034AA  3  85 rr        	sta ogptr+1
0034AC  3  20 B8 34     	jsr pspr3		; do the routine.
0034AF  3               rtorg:
0034AF  3  A5 rr        	lda ogptr 		; restore original pointer to sprite.
0034B1  3  85 rr        	sta z80_x
0034B3  3  A5 rr        	lda ogptr+1
0034B5  3  85 rr        	sta z80_i
0034B7  3               rtorg0:
0034B7  3  60           	rts
0034B8  3               
0034B8  3               pspr3:
0034B8  3  A9 ED        	lda #<evtyp0		; sprite type events list.
0034BA  3  85 rr        	sta z80_l
0034BC  3  A9 34        	lda #>evtyp0
0034BE  3  85 rr        	sta z80_h
0034C0  3               pspr4:
0034C0  3  B1 rr        	lda (z80_ix),y
0034C2  3  0A           	asl a			; double accumulator.
0034C3  3  18           	clc
0034C4  3  65 rr        	adc z80_l
0034C6  3  85 rr        	sta z80_l
0034C8  3  90 02        	bcc :+
0034CA  3  E6 rr        	inc z80_h
0034CC  3               :
0034CC  3  B1 rr        	lda (z80_hl),y
0034CE  3  85 rr        	sta z80_e 		; copy to de.
0034D0  3  48           	pha
0034D1  3               
0034D1  3  E6 rr        	inc z80_l 		; next byte of address.
0034D3  3  D0 02        	bne :+
0034D5  3  E6 rr        	inc z80_h
0034D7  3               :
0034D7  3  B1 rr        	lda (z80_hl),y 		; address high.
0034D9  3  85 rr        	sta z80_d
0034DB  3               
0034DB  3  48           	pha	 		; swap address into hl.
0034DC  3  A5 rr        	lda z80_h
0034DE  3  85 rr        	sta z80_d
0034E0  3  68           	pla
0034E1  3  85 rr        	sta z80_h
0034E3  3  68           	pla
0034E4  3  85 rr        	sta z80_l
0034E6  3  A5 rr        	lda z80_l
0034E8  3  85 rr        	sta z80_e
0034EA  3               
0034EA  3  6C rr rr     	jmp (z80_hl) 		; go there.
0034ED  3               
0034ED  3               ; Address of each sprite type's routine.
0034ED  3               
0034ED  3  F1 3A        evtyp0:	.word evnt00
0034EF  3  0C 3F        evtyp1:	.word evnt01
0034F1  3  1D 40        evtyp2:	.word evnt02
0034F3  3  68 41        evtyp3:	.word evnt03
0034F5  3  AD 42        evtyp4:	.word evnt04
0034F7  3  AE 42        evtyp5:	.word evnt05
0034F9  3  F3 42        evtyp6:	.word evnt06
0034FB  3  0D 44        evtyp7:	.word evnt07
0034FD  3  E2 44        evtyp8:	.word evnt08
0034FF  3               
0034FF  3               ;--------------------------------------------------------------
0034FF  3               ; Display sprites.
0034FF  3               ;
0034FF  3               ; Input:
0034FF  3               ;  IX = sprite table
0034FF  3               ;--------------------------------------------------------------
0034FF  3               
0034FF  3               dspr:
0034FF  3  A9 06        	lda #(NUMSPR/2)		; number of sprites to display.
003501  3  85 rr        	sta sprcnt
003503  3               
003503  3               dspr0:
003503  3  A0 00        	ldy #var_Type
003505  3  B1 rr        	lda (z80_ix),y 		; get sprite type.
003507  3  C9 FF        	cmp #255 			; is it enabled?
003509  3  D0 45        	bne dspr1 			; yes, it needs deleting.
00350B  3               dspr5:
00350B  3  A0 05        	ldy #var_newType
00350D  3  B1 rr        	lda (z80_ix),y 		; new type.
00350F  3  C9 FF        	cmp #255			; is it enabled?
003511  3  F0 03        	beq dspr2
003513  3  4C 9F 35     	jmp dspr3 			; yes, it needs drawing.
003516  3               dspr2:
003516  3  A0 05        	ldy #var_newType
003518  3  B1 rr        	lda (z80_ix),y 		; copy new type.
00351A  3  A0 00        	ldy #var_Type
00351C  3  91 rr        	sta (z80_ix),y
00351E  3  A0 06        	ldy #var_newImage
003520  3  B1 rr        	lda (z80_ix),y 		; copy new image number.
003522  3  A0 01        	ldy #var_Image
003524  3  91 rr        	sta (z80_ix),y
003526  3  A0 07        	ldy #var_newFrame
003528  3  B1 rr        	lda (z80_ix),y 		; copy new frame.
00352A  3  A0 02        	ldy #var_Frame
00352C  3  91 rr        	sta (z80_ix),y
00352E  3  A0 08        	ldy #var_newY
003530  3  B1 rr        	lda (z80_ix),y 		; copy new y.
003532  3  A0 03        	ldy #var_Y
003534  3  91 rr        	sta (z80_ix),y
003536  3  A0 09        	ldy #var_newX
003538  3  B1 rr        	lda (z80_ix),y 		; copy new x.
00353A  3  A0 04        	ldy #var_X
00353C  3  91 rr        	sta (z80_ix),y
00353E  3               
00353E  3  18           	clc
00353F  3  A5 rr        	lda z80_x
003541  3  69 22        	adc #(TABSIZ*2)		; distance to next odd/even entry.
003543  3  85 rr        	sta z80_x
003545  3  A5 rr        	lda z80_i
003547  3  69 00        	adc #0
003549  3  85 rr        	sta z80_i 			; next sprite.
00354B  3  C6 rr        	dec sprcnt
00354D  3  D0 B4        	bne dspr0			; repeat for remaining sprites.
00354F  3  60           	rts
003550  3               
003550  3               dspr1:
003550  3               	; _BEEB clipping code copied from CPC Engine
003550  3  A0 03        	ldy #var_Y
003552  3  B1 rr        	lda (z80_ix), y		; old x coord
003554  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
003556  3  B0 B3        	bcs dspr5			; yes, don't delete it.
003558  3               
003558  3  A0 05        	ldy #var_newType
00355A  3  B1 rr        	lda (z80_ix),y 		; type of new sprite.
00355C  3  C9 FF        	cmp #255			; is this enabled?
00355E  3  D0 06        	bne dspr4 			; yes, display both.
003560  3               
003560  3               dspr6:
003560  3  20 40 28     	jsr sspria 			; show single sprite.
003563  3  4C 16 35     	jmp dspr2
003566  3               
003566  3               ; Displaying two sprites.  Don't bother redrawing if nothing has changed.
003566  3               
003566  3               dspr4:
003566  3               	; _BEEB clipping code copied from CPC Engine
003566  3  A0 08        	ldy #var_newY
003568  3  B1 rr        	lda (z80_ix), y		; old x coord
00356A  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
00356C  3  B0 F2        	bcs dspr6			; yes, don't display it.
00356E  3               
00356E  3  A0 04        	ldy #var_X
003570  3  B1 rr        	lda (z80_ix),y		; old x.
003572  3  A0 09        	ldy #var_newX
003574  3  D1 rr        	cmp (z80_ix),y 		; compare with new value.
003576  3  D0 21        	bne dspr7 			; they differ, need to redraw.
003578  3               
003578  3  A0 03        	ldy #var_Y
00357A  3  B1 rr        	lda (z80_ix),y		; old y.
00357C  3  A0 08        	ldy #var_newY
00357E  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
003580  3  D0 17        	bne dspr7			; they differ, need to redraw.
003582  3               
003582  3  A0 02        	ldy #var_Frame
003584  3  B1 rr        	lda (z80_ix),y 		; old frame.
003586  3  A0 07        	ldy #var_newFrame
003588  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
00358A  3  D0 0D        	bne dspr7 			; they differ, need to redraw.
00358C  3               
00358C  3  A0 01        	ldy #var_Image
00358E  3  B1 rr        	lda (z80_ix),y 		; old image.
003590  3  A0 06        	ldy #var_newImage
003592  3  D1 rr        	cmp (z80_ix),y 		; compare against new value.
003594  3  D0 03        	bne dspr7 			; they differ, need to redraw.
003596  3  4C 16 35     	jmp dspr2			; everything is the same, don't redraw.
003599  3               dspr7:
003599  3  20 58 28     	jsr sspric 			; delete old sprite, draw new one simultaneously.
00359C  3  4C 16 35     	jmp dspr2
00359F  3               dspr3:
00359F  3               	; _BEEB clipping code copied from CPC Engine
00359F  3  A0 08        	ldy #var_newY
0035A1  3  B1 rr        	lda (z80_ix), y		; old x coord
0035A3  3  C9 B1        	cmp #SpriteMaxY     ; beyond maximum?
0035A5  3  90 03        	bcc :+				; no, continue
0035A7  3  4C 16 35     	jmp dspr2			; yes, don't display it.
0035AA  3               :
0035AA  3  20 52 28     	jsr ssprib 			; show single sprite.
0035AD  3  4C 16 35     	jmp dspr2
0035B0  3               
0035B0  3               ;-----------------------------------------
0035B0  3               ; Get sprite address calculations.
0035B0  3               ; gspran = new sprite, gsprad = old sprite.
0035B0  3               ;
0035B0  3               ; Input:
0035B0  3               ;  IX = sprite address
0035B0  3               ;-----------------------------------------
0035B0  3               
0035B0  3               gspran:
0035B0  3  A0 08        	ldy #var_newY
0035B2  3  B1 rr        	lda (z80_ix),y 		; new y coordinate.
0035B4  3  85 rr        	sta dispy
0035B6  3  A0 09        	ldy #var_newX
0035B8  3  B1 rr        	lda (z80_ix),y 		; new x coordinate.
0035BA  3  85 rr        	sta dispx
0035BC  3  A0 06        	ldy #var_newImage
0035BE  3  B1 rr        	lda (z80_ix),y 		; new sprite image.
0035C0  3  20 8F 38     	jsr gfrm		; fetch start frame for this sprite.
0035C3  3               
0035C3  3  A0 00        	ldy #0
0035C5  3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
0035C7  3  A0 07        	ldy #var_newFrame
0035C9  3  18           	clc
0035CA  3  71 rr        	adc (z80_ix),y 		; new add frame number.
0035CC  3  4C EB 35     	jmp gspra0
0035CF  3               
0035CF  3               ;-----------------------------------------
0035CF  3               ; Calculate old sprite address
0035CF  3               ;
0035CF  3               ; Input:
0035CF  3               ;  IX = sprite address
0035CF  3               ;
0035CF  3               ; Output:
0035CF  3               ;  B  = right byte mask
0035CF  3               ;  C  = left byte mask
0035CF  3               ;  DE = spriteframe address
0035CF  3               ;  scraddr = screenaddress(dispx,dispy)
0035CF  3               ;-----------------------------------------
0035CF  3               
0035CF  3               gsprad:
0035CF  3  A0 03        	ldy #var_Y
0035D1  3  B1 rr        	lda (z80_ix),y		; y coordinate.
0035D3  3  85 rr        	sta dispy
0035D5  3  A0 04        	ldy #var_X
0035D7  3  B1 rr        	lda (z80_ix),y		; x coordinate.
0035D9  3  85 rr        	sta dispx
0035DB  3  A0 01        	ldy #var_Image
0035DD  3  B1 rr        	lda (z80_ix),y 		; sprite image.
0035DF  3  20 8F 38     	jsr gfrm 		; fetch start frame for this sprite.
0035E2  3               
0035E2  3  A0 00        	ldy #0
0035E4  3  B1 rr        	lda (z80_hl),y 		; frame in accumulator.
0035E6  3  A0 02        	ldy #var_Frame
0035E8  3  18           	clc
0035E9  3  71 rr        	adc (z80_ix),y 		; add frame number.
0035EB  3               
0035EB  3               gspra0:
0035EB  3               .if rflag
0035EB  3               	sta z80_e		; multiply by 32.
0035EB  3               	lda #0
0035EB  3               	sta z80_d
0035EB  3               
0035EB  3               	asl z80_e
0035EB  3               	rol z80_d
0035EB  3               	asl z80_e
0035EB  3               	rol z80_d
0035EB  3               	asl z80_e
0035EB  3               	rol z80_d
0035EB  3               	asl z80_e
0035EB  3               	rol z80_d
0035EB  3               .if bflag
0035EB  3               	lda z80_e		; multiply by 48
0035EB  3               	sta tmp1
0035EB  3               	lda z80_d
0035EB  3               	sta tmp2
0035EB  3               .endif
0035EB  3               	asl z80_e
0035EB  3               	rol z80_d
0035EB  3               .if bflag
0035EB  3               	clc
0035EB  3               	lda z80_e
0035EB  3               	adc tmp1
0035EB  3               	sta z80_e
0035EB  3               	lda z80_d
0035EB  3               	adc tmp2
0035EB  3               	sta z80_d
0035EB  3               .endif
0035EB  3               .else
0035EB  3  4A           	lsr a	  		; multiply by 128.
0035EC  3  85 rr        	sta z80_d 		; store in d.
0035EE  3  85 rr        	sta tmp1
0035F0  3  A9 00        	lda #0
0035F2  3  6A           	ror a
0035F3  3  85 rr        	sta z80_e 		; got low byte.
0035F5  3  85 rr        	sta tmp2
0035F7  3               .if bflag
0035F7  3               	lsr tmp1		; multiply by 192
0035F7  3               	ror tmp2
0035F7  3               	clc
0035F7  3               	lda tmp2
0035F7  3               	adc z80_e
0035F7  3               	sta z80_e
0035F7  3               	lda tmp1
0035F7  3               	adc z80_d
0035F7  3               	sta z80_d
0035F7  3               .endif
0035F7  3               .endif
0035F7  3  18           	clc 			; address of play sprites.
0035F8  3  A5 rr        	lda z80_e
0035FA  3               .if swrflag
0035FA  3               	adc #<(sprgfx + data_address - data_start)
0035FA  3               	sta z80_e
0035FA  3               	lda z80_d
0035FA  3               	adc #>(sprgfx + data_address - data_start)
0035FA  3               	sta z80_d
0035FA  3               .else
0035FA  3  69 B1        	adc #<sprgfx
0035FC  3  85 rr        	sta z80_e
0035FE  3  A5 rr        	lda z80_d
003600  3  69 50        	adc #>sprgfx
003602  3  85 rr        	sta z80_d
003604  3               .endif
003604  3               
003604  3  A5 rr        	lda dispx 		; y coordinate.
003606  3  29 06        	and #6 			; position within byte boundary.
003608  3  AA           	tax	 		; low byte of table displacement.
003609  3               .if rflag
003609  3               	stx sprshft
003609  3               .else
003609  3  0A           	asl a	  		; multiply by 32.
00360A  3  0A           	asl a  			; already a multiple
00360B  3  0A           	asl a  			; of 2, so just 4
00360C  3               .if bflag
00360C  3               	sta tmp1
00360C  3               	asl a  			; shifts needed.
00360C  3               	clc
00360C  3               	adc tmp1
00360C  3               .else
00360C  3  0A           	asl a  			; shifts needed.
00360D  3               .endif
00360D  3  18           	clc 			; add to sprite address.
00360E  3  65 rr        	adc z80_e
003610  3  85 rr        	sta z80_e
003612  3  90 02        	bcc :+
003614  3  E6 rr        	inc z80_d
003616  3               :
003616  3               .endif
003616  3  BD 23 36     	lda spmask,x		 ; pointer to mask table.
003619  3  85 rr        	sta z80_c 		; left mask.
00361B  3  BD 24 36     	lda spmask+1,x
00361E  3  85 rr        	sta z80_b 		; right mask.
003620  3               ; Drop into screen address routine.
003620  3  4C 2C 28     	jmp scadd
003623  3               
003623  3  FF 00 3F C0  spmask:	.byte 255,0,63,192,15,240,3,252
003627  3  0F F0 03 FC  
00362B  3               
00362B  3               
00362B  3               ;-----------------------------------------------------------
00362B  3               ; Animates a sprite.
00362B  3               ;
00362B  3               ; Input:
00362B  3               ;  IX = sprite address
00362B  3               ;  HL = last sprite address
00362B  3               ;-----------------------------------------------------------
00362B  3               
00362B  3               animsp:
00362B  3  25 rr        	and frmno
00362D  3  F0 01        	beq :+
00362F  3  60           	rts
003630  3               :
003630  3  A0 06        	ldy #var_newImage
003632  3  B1 rr        	lda (z80_ix),y		; sprite image
003634  3  20 8F 38     	jsr gfrm		; get frame data.
003637  3               
003637  3  E6 rr        	inc z80_l		; point to frames.
003639  3  D0 02        	bne :+
00363B  3  E6 rr        	inc z80_h
00363D  3               :
00363D  3  A0 07        	ldy #var_newFrame
00363F  3  B1 rr        	lda (z80_ix),y		; sprite frame.
003641  3  18           	clc
003642  3  69 01        	adc #1			; next one along.
003644  3  A0 00        	ldy #0
003646  3  D1 rr        	cmp (z80_hl),y		; reached the last frame?
003648  3  90 02        	bcc anims0		; no, not yet.
00364A  3  A9 00        	lda #0			; start at first frame.
00364C  3               anims0:
00364C  3  A0 07        	ldy #var_newFrame
00364E  3  91 rr        	sta (z80_ix),y		; new frame.
003650  3  60           	rts
003651  3               
003651  3               ;--------------------------------------------------------------
003651  3               ; Animate back
003651  3               ;
003651  3               ; Input:
003651  3               ;  IX = sprite address
003651  3               ;  HL = last sprite address
003651  3               ;--------------------------------------------------------------
003651  3               
003651  3               animbk:
003651  3  25 rr        	and frmno
003653  3  F0 01        	beq :+
003655  3  60           	rts
003656  3               :
003656  3  A0 06        	ldy #var_newImage
003658  3  B1 rr        	lda (z80_ix),y		; sprite image.
00365A  3  20 8F 38     	jsr gfrm		; get frame data.
00365D  3               
00365D  3  E6 rr        	inc z80_l 		; point to frames.
00365F  3  D0 02        	bne :+
003661  3  E6 rr        	inc z80_h
003663  3               :
003663  3  A0 07        	ldy #var_newFrame
003665  3  B1 rr        	lda (z80_ix),y 		; sprite frame.
003667  3  F0 03        	beq :+
003669  3  4C 70 36     	jmp rtanb0 		; yes, start at end.
00366C  3               :
00366C  3  A0 00        	ldy #0
00366E  3  B1 rr        	lda (z80_hl),y 		; last sprite.
003670  3               rtanb0:
003670  3  38           	sec
003671  3  E9 01        	sbc #1			; next one along.
003673  3  4C 4C 36     	jmp anims0		; set new frame.
003676  3               
003676  3               ;--------------------------------------------------------------
003676  3               ; Check for collision with other sprite, strict enforcement.
003676  3               ;
003676  3               ; Input:
003676  3               ;  b		= sprite to test for
003676  3               ;  ix		= current sprite pointer
003676  3               ;
003676  3               ; global:	b
003676  3               ; local:	x,y,hl,de,skptr
003676  3               ; calls:	-
003676  3               ;--------------------------------------------------------------
003676  3               
003676  3               sktyp:
003676  3  A9 00        	lda #<sprtab				; sprite table.
003678  3  85 rr        	sta z80_l
00367A  3  A9 0B        	lda #>sprtab
00367C  3  85 rr        	sta z80_h
00367E  3               numsp2:
00367E  3  A9 0C        	lda #NUMSPR				; number of sprites.
003680  3  85 rr        	sta sktptr
003682  3               sktyp0:
003682  3  A5 rr        	lda z80_l 				; store pointer to sprite.
003684  3  85 rr        	sta skptr
003686  3  A5 rr        	lda z80_h
003688  3  85 rr        	sta skptr+1
00368A  3               
00368A  3  A0 00        	ldy #0
00368C  3  B1 rr        	lda (z80_hl),y 				; get sprite type.
00368E  3  C5 rr        	cmp z80_b				; is it the type we seek?
003690  3  F0 1D        	beq coltyp				; yes, we can use this one.
003692  3               sktyp1:
003692  3  18           	clc
003693  3  A5 rr        	lda skptr				; retrieve sprite pointer.
003695  3  69 11        	adc #TABSIZ				; size of each entry.
003697  3  85 rr        	sta z80_l
003699  3  A5 rr        	lda skptr+1
00369B  3  69 00        	adc #0
00369D  3  85 rr        	sta z80_h
00369F  3  C6 rr        	dec sktptr					; one less iteration.
0036A1  3  D0 DF        	bne sktyp0				; keep going until we find a slot.
0036A3  3  A9 00        	lda #0					; default to ROM address - no sprite.
0036A5  3  85 rr        	sta z80_l
0036A7  3  85 rr        	sta z80_h
0036A9  3  85 rr        	sta skptr				; store pointer to sprite.
0036AB  3  85 rr        	sta skptr+1
0036AD  3               
0036AD  3  18           	clc					; don't return with zero flag set.
0036AE  3  60           	rts 					; didn't find one.
0036AF  3               
0036AF  3               coltyp:
0036AF  3  A0 00        	ldy #0
0036B1  3  B1 rr        	lda (z80_ix),y				; current sprite type.
0036B3  3  C5 rr        	cmp z80_b				; seeking sprite of same type?
0036B5  3  F0 3D        	beq colty1				; yes, need to check we're not detecting ourselves.
0036B7  3               colty0:
0036B7  3  A0 09        	ldy #9					; distance to x position in table.
0036B9  3  B1 rr        	lda (z80_hl),y				; fetch x coordinate.
0036BB  3  85 rr        	sta z80_e
0036BD  3  88           	dey
0036BE  3  B1 rr        	lda (z80_hl),y				; fetch y coordinate.
0036C0  3  85 rr        	sta z80_d
0036C2  3               
0036C2  3               ; Drop into collision detection.
0036C2  3               
0036C2  3               colc16:
0036C2  3  A0 09        	ldy #9
0036C4  3  B1 rr        	lda (z80_ix),y			 	; x coord.
0036C6  3  38           	sec					; subtract x.
0036C7  3  E5 rr        	sbc z80_e
0036C9  3  B0 05        	bcs  colc1a 				; result is positive.
0036CB  3  49 FF        	eor #$ff				; make negative positive.
0036CD  3  18           	clc
0036CE  3  69 01        	adc #1
0036D0  3               colc1a:
0036D0  3  C9 10        	cmp #16 				; within x range?
0036D2  3  B0 BE        	bcs sktyp1				; no - they"ve missed.
0036D4  3  85 rr        	sta z80_c				; store difference.
0036D6  3               
0036D6  3  A0 08        	ldy #8
0036D8  3  B1 rr        	lda (z80_ix),y				; y coord.
0036DA  3  38           	sec
0036DB  3  E5 rr        	sbc z80_d				; subtract y.
0036DD  3  B0 05        	bcs colc1b				; result is positive.
0036DF  3  49 FF        	eor #$ff				; make negative positive.
0036E1  3  18           	clc
0036E2  3  69 01        	adc #1
0036E4  3               colc1b:
0036E4  3  C9 10        	cmp #16					; within y range?
0036E6  3  B0 AA        	bcs sktyp1 				; no - they've missed.
0036E8  3  18           	clc					; add x difference.
0036E9  3  65 rr        	adc z80_c
0036EB  3  C9 1A        	cmp #26					; only 5 corner pixels touching?
0036ED  3  B0 02        	bcs :+
0036EF  3  38           	sec
0036F0  3  60           	rts 					; carry set if there's a collision.
0036F1  3               :
0036F1  3  4C 92 36     	jmp sktyp1				; try next sprite in table.
0036F4  3               colty1:
0036F4  3  A5 rr        	lda z80_x  				; compare the two.
0036F6  3  C5 rr        	cmp z80_l
0036F8  3  D0 09        	bne end_col
0036FA  3  A5 rr        	lda z80_i
0036FC  3  C5 rr        	cmp z80_h
0036FE  3  D0 03        	bne end_col
003700  3  4C 92 36     	jmp sktyp1 				; addresses are identical.
003703  3               end_col:
003703  3  4C B7 36     	jmp colty0
003706  3               
003706  3               ;-----------------------------------------------------------
003706  3               ; Display number, left aligned
003706  3               ;
003706  3               ; Input:
003706  3               ;  a		= number
003706  3               ;
003706  3               ; global:	-
003706  3               ; local:	a,y,bc,hl,displ0
003706  3               ; calls:	num2ch,dmsg3
003706  3               ;-----------------------------------------------------------
003706  3               
003706  3               disply:
003706  3  85 rr        	sta z80_a
003708  3  A9 2E        	lda #<displ0				; display workspace.
00370A  3  85 rr        	sta z80_c
00370C  3  A9 37        	lda #>displ0
00370E  3  85 rr        	sta z80_b
003710  3  A5 rr        	lda z80_a
003712  3  20 F4 2A     	jsr num2ch				; convert accumulator to string.
003715  3               displ1:
003715  3  C6 rr        	dec z80_c				; back one character.
003717  3  D0 02        	bne :+
003719  3  C6 rr        	dec z80_b
00371B  3               :
00371B  3  A0 00        	ldy #0
00371D  3  B1 rr        	lda (z80_bc),y				; fetch digit.
00371F  3  09 80        	ora #128				; insert end marker.
003721  3  91 rr        	sta (z80_bc),y				; new value.
003723  3               
003723  3  A9 2E        	lda #<displ0				; display space.
003725  3  85 rr        	sta z80_l
003727  3  A9 37        	lda #>displ0
003729  3  85 rr        	sta z80_h
00372B  3  4C CB 32     	jmp dmsg3				; display the string.
00372E  3               
00372E  3  00 00 00 8D  displ0:	.byte 0,0,0,13+128
003732  3               
003732  3               ;----------------------------------------------------------------
003732  3               ; Initialise screen.
003732  3               ;
003732  3               ; global:	roomtb,scno
003732  3               ; local:	-
003732  3               ; calls:	tstcs
003732  3               ;----------------------------------------------------------------
003732  3               
003732  3               initsc:
003732  3  AD 9E 3A     	lda roomtb 			; whereabouts in the map are we?
003735  3  20 3F 37     	jsr tstsc 			; find displacement.
003738  3  C9 FF        	cmp #255 			; is it valid?
00373A  3  F0 02        	beq init_end 			; no, it's rubbish.
00373C  3  85 rr        	sta scno			; store new room number.
00373E  3               init_end:
00373E  3  60           	rts
00373F  3               
00373F  3               ;----------------------------------------------------------------
00373F  3               ; Test screen.
00373F  3               ;
00373F  3               ; global:	-
00373F  3               ; local:	x
00373F  3               ; calls:	-
00373F  3               ;----------------------------------------------------------------
00373F  3               
00373F  3               tstsc:
00373F  3  85 rr        	sta tmproom
003741  3  18           	clc
003742  3  69 0D        	adc #MAPWID 			; add width in case we"re negative.
003744  3  AA           	tax 				; add displacement to map data.
003745  3  BD A2 3A     	lda mapdat-MAPWID,x 		; find room number there.
003748  3  60           	rts
003749  3               
003749  3               ;--------------------------
003749  3               ; Screen left.
003749  3               ;--------------------------
003749  3               
003749  3               scrl:
003749  3  AD 9E 3A     	lda roomtb 			; present room table pointer.
00374C  3  38           	sec
00374D  3  E9 01        	sbc #1				; room left.
00374F  3               scrl0:
00374F  3  20 3F 37     	jsr tstsc			; test screen.
003752  3  C9 FF        	cmp #255			; is there a screen this way?
003754  3  D0 01        	bne :+
003756  3  60           	rts				; no, return to loop.
003757  3               :
003757  3  A5 rr        	lda tmproom			; restore room displacement.
003759  3  8D 9E 3A     	sta roomtb			; new room table position.
00375C  3               scrl1:
00375C  3  20 32 37     	jsr initsc 			; set new screen.
00375F  3  A9 02        	lda #2
003761  3  85 rr        	sta restfl 			; set it.
003763  3  60           	rts
003764  3               scrr:
003764  3  AD 9E 3A     	lda roomtb 			; room table pointer.
003767  3  18           	clc
003768  3  69 01        	adc #1				; room right.
00376A  3  4C 4F 37     	jmp scrl0
00376D  3               scru:
00376D  3  AD 9E 3A     	lda roomtb 			; room table pointer.
003770  3  38           	sec
003771  3  E9 0D        	sbc #MAPWID 			; room up.
003773  3  4C 4F 37     	jmp scrl0
003776  3               scrd:
003776  3  AD 9E 3A     	lda roomtb 			; room table pointer.
003779  3  18           	clc
00377A  3  69 0D        	adc #MAPWID 			; room down.
00377C  3  4C 4F 37     	jmp scrl0
00377F  3               
00377F  3               ;-----------------------------------------
00377F  3               ; Jump to new screen.
00377F  3               ;-----------------------------------------
00377F  3               
00377F  3               nwscr:
00377F  3  A2 00        	ldx #0				; start of map data.
003781  3               nwscr0:
003781  3  DD AF 3A     	cmp mapdat,x
003784  3  F0 06        	beq nwscr1			; have we found a match for screen?
003786  3  E8           	inx 				; next room.
003787  3  E0 50        	cpx #80				; zero room count, 80 to search.
003789  3  D0 F6        	bne nwscr0			; keep looking.
00378B  3  60           	rts
00378C  3               nwscr1:
00378C  3  8E 9E 3A     	stx roomtb			; set the map position.
00378F  3  4C 5C 37     	jmp scrl1			; draw new room.
003792  3               
003792  3               
003792  3               ;----------------------------------------------------------
003792  3               ; Gravity processing.
003792  3               ;----------------------------------------------------------
003792  3               
003792  3               grav:
003792  3  A0 0D        	ldy #13
003794  3  B1 rr        	lda (z80_ix),y			; jump pointer low.
003796  3  85 rr        	sta z80_l
003798  3  A0 0E        	ldy #14
00379A  3  B1 rr        	lda (z80_ix),y			; jump pointer high.
00379C  3  85 rr        	sta z80_h
00379E  3  05 rr        	ora z80_l			; merge in low byte.
0037A0  3  D0 01        	bne :+
0037A2  3  60           	rts				; if neither is set, we're not in the air.
0037A3  3               :
0037A3  3  A0 00        	ldy #0
0037A5  3  B1 rr        	lda (z80_hl),y			; pixels to move.
0037A7  3  85 rr        	sta z80_a
0037A9  3  C9 63        	cmp #99				; reached the end?
0037AB  3  D0 0C        	bne grav0			; no, continue.
0037AD  3               grav2:
0037AD  3  C6 rr        	dec z80_l			; go back to previous value.
0037AF  3  C9 FF        	cmp #$ff
0037B1  3  D0 02        	bne :+
0037B3  3  C6 rr        	dec z80_h
0037B5  3               :
0037B5  3  B1 rr        	lda (z80_hl),y			; fetch that from table.
0037B7  3  85 rr        	sta z80_a
0037B9  3               grav0:
0037B9  3  E6 rr        	inc z80_l			; point to next table entry.
0037BB  3  D0 02        	bne :+
0037BD  3  E6 rr        	inc z80_h
0037BF  3               :
0037BF  3  A5 rr        	lda z80_l
0037C1  3  A0 0D        	ldy #13
0037C3  3  91 rr        	sta (z80_ix),y			; store new pointer low.
0037C5  3  A5 rr        	lda z80_h
0037C7  3  A0 0E        	ldy #14
0037C9  3  91 rr        	sta (z80_ix),y			; store new pointer high.
0037CB  3               grav1:
0037CB  3  A5 rr        	lda z80_a
0037CD  3  D0 01        	bne :+				; any movement required?
0037CF  3  60           	rts				; no, not this time.
0037D0  3               :
0037D0  3  A5 rr        	lda z80_a
0037D2  3  C9 80        	cmp #128			; is it up or down?
0037D4  3  B0 15        	bcs gravu			; it's up.
0037D6  3               gravd:
0037D6  3  85 rr        	sta z80_b			; set pixels to move.
0037D8  3               gravd0:
0037D8  3  20 A3 30     	jsr cangd			; can we go down?
0037DB  3  D0 28        	bne gravst			; can't move down, so stop.
0037DD  3  A0 08        	ldy #8
0037DF  3  B1 rr        	lda (z80_ix),y			; adjust new x coord.
0037E1  3  18           	clc
0037E2  3  69 01        	adc #1
0037E4  3  91 rr        	sta (z80_ix),y
0037E6  3  C6 rr        	dec z80_b
0037E8  3  D0 EE        	bne gravd0
0037EA  3  60           	rts
0037EB  3               gravu:
0037EB  3  49 FF        	eor #$ff			; flip the sign so it's positive.
0037ED  3  18           	clc
0037EE  3  69 01        	adc #1
0037F0  3  85 rr        	sta z80_b			; set pixels to move.
0037F2  3               gravu0:
0037F2  3  20 6E 30     	jsr cangu			; can we go up?
0037F5  3  D0 6E        	bne ifalls			; can't move up, go down next.
0037F7  3  A0 08        	ldy #8
0037F9  3  B1 rr        	lda (z80_ix),y
0037FB  3  38           	sec
0037FC  3  E9 01        	sbc #1
0037FE  3  91 rr        	sta (z80_ix),y			; adjust new x coord.
003800  3  C6 rr        	dec z80_b
003802  3  D0 EE        	bne gravu0
003804  3  60           	rts
003805  3               gravst:
003805  3  A0 0D        	ldy #var_jumpLo
003807  3  B1 rr        	lda (z80_ix),y			; jump pointer low.
003809  3  85 rr        	sta z80_l
00380B  3  A0 0E        	ldy #var_jumpHi
00380D  3  B1 rr        	lda (z80_ix),y			; jump pointer high.
00380F  3  85 rr        	sta z80_h
003811  3               
003811  3  A9 00        	lda #0				; null value in pointer.
003813  3  A0 0D        	ldy #var_jumpLo
003815  3  91 rr        	sta (z80_ix),y			; store new pointer low.
003817  3  C8           	iny
003818  3  91 rr        	sta (z80_ix),y			; store new pointer high.
00381A  3               
00381A  3  A0 00        	ldy #0
00381C  3  B1 rr        	lda (z80_hl),y			; fetch byte from table.
00381E  3  C9 63        	cmp #99				; is it the end marker?
003820  3               evftf:
003820  3  F0 01        	beq :+				; yes, fallen too far.
003822  3  60           	rts
003823  3               :
003823  3  4C 25 48     	jmp evnt15			; EVENT FELLTOOFAR
003826  3               
003826  3               ;------------------------------------------------
003826  3               ; Initiate fall check.
003826  3               ;------------------------------------------------
003826  3               
003826  3               ifall:
003826  3  A0 0D        	ldy #var_jumpLo
003828  3  B1 rr        	lda (z80_ix),y 			; jump pointer low.
00382A  3  85 rr        	sta z80_l
00382C  3  A0 0E        	ldy #var_jumpHi
00382E  3  B1 rr        	lda (z80_ix),y 			; jump pointer high.
003830  3  85 rr        	sta z80_h			; high byte in accumulator.
003832  3  05 rr        	ora z80_l			; merge in low byte.
003834  3  F0 01        	beq :+
003836  3  60           	rts				; if either is set, we're already in the air.
003837  3               :
003837  3  A0 09        	ldy #9
003839  3  B1 rr        	lda (z80_ix),y			; y coordinate.
00383B  3  85 rr        	sta dispx
00383D  3  A0 08        	ldy #8
00383F  3  B1 rr        	lda (z80_ix),y			; look x coordinate.
003841  3  18           	clc
003842  3               numsp7:
003842  3  69 10        	adc #SPR_HGT			; add 16 pixels.
003844  3  85 rr        	sta dispy			; set up test coordinates.
003846  3  20 1A 32     	jsr tstbl			; get map address.
003849  3  20 35 31     	jsr plchk			; block, platform check.
00384C  3  F0 01        	beq :+
00384E  3  60           	rts				; it's solid, don't fall.
00384F  3               :
00384F  3  E6 rr        	inc bufaddr			; look right one cell.
003851  3  20 35 31     	jsr plchk			; block, platform check.
003854  3  F0 01        	beq :+
003856  3  60           	rts				; it's solid, don't fall.
003857  3               :
003857  3  A5 rr        	lda dispx			; y coordinate.
003859  3  29 07        	and #7				; position straddling block cells.
00385B  3  F0 08        	beq ifalls			; no more checks needed.
00385D  3  E6 rr        	inc bufaddr			; look to third cell.
00385F  3  20 35 31     	jsr plchk			; block, platform check.
003862  3  F0 01        	beq :+
003864  3  60           	rts				; it's solid, don't fall.
003865  3               :
003865  3               ifalls:
003865  3               .if swrflag
003865  3               	lda #<(jtab + data_address - data_start)			; jump table start.
003865  3               	sta z80_l
003865  3               	lda #>(jtab + data_address - data_start)
003865  3               	sta z80_h
003865  3               .else
003865  3  A9 EA        	lda #<jtab			; jump table start.
003867  3  85 rr        	sta z80_l
003869  3  A9 A1        	lda #>jtab
00386B  3  85 rr        	sta z80_h
00386D  3               .endif
00386D  3               ifal0:
00386D  3  E6 rr        	inc z80_l			; point to next value.
00386F  3  D0 02        	bne :+
003871  3  E6 rr        	inc z80_h
003873  3               :
003873  3  A0 00        	ldy #0
003875  3  B1 rr        	lda (z80_hl),y			; fetch value.
003877  3  F0 F4        	beq ifal0			; no, get next value.
003879  3  C9 63        	cmp #99				; reached end of table?
00387B  3  D0 01        	bne :+
00387D  3  60           	rts				; yes, don't fall.
00387E  3               :
00387E  3  C9 80        	cmp #128			; is it going up?
003880  3  B0 EB        	bcs ifal0			; yes, looking for first movement down.
003882  3               
003882  3  A0 0D        	ldy #13
003884  3  A5 rr        	lda z80_l
003886  3  91 rr        	sta (z80_ix),y 			; set jump low.
003888  3  A0 0E        	ldy #14
00388A  3  A5 rr        	lda z80_h
00388C  3  91 rr        	sta (z80_ix),y 			; set jump high.
00388E  3  60           	rts
00388F  3               
00388F  3               
00388F  3               ;----------------------------------------------------
00388F  3               ; Get frame data for a particular sprite.
00388F  3               ; Input:
00388F  3               ;  a		= framenumer
00388F  3               ; Output:
00388F  3               ;  hl		= frame address
00388F  3               ;
00388F  3               ; global:	hl,frmptr
00388F  3               ; local:	-
00388F  3               ; calls:	-
00388F  3               ;----------------------------------------------------
00388F  3               
00388F  3               gfrm:
00388F  3  0A           	asl a	 		 	; multiple of 2.
003890  3  18           	clc
003891  3  6D 0A 29     	adc frmptr 			; frames used by game.
003894  3  85 rr        	sta z80_l
003896  3  AD 0B 29     	lda frmptr+1
003899  3  69 00        	adc #0
00389B  3  85 rr        	sta z80_h 			; point to frame start.
00389D  3  60           	rts
00389E  3               
00389E  3               ;----------------------------------------------------
00389E  3               ; Find sprite list for current room.
00389E  3               ;
00389E  3               ; global:	hl
00389E  3               ; local:	x,y
00389E  3               ; calls:	-
00389E  3               ;----------------------------------------------------
00389E  3               
00389E  3               sprlst:
00389E  3               .if swrflag
00389E  3               	lda #<(nmedat + data_address - data_start) 			; list of enemy sprites.
00389E  3               	sta z80_l
00389E  3               	lda #>(nmedat + data_address - data_start)
00389E  3               	sta z80_h
00389E  3               .else
00389E  3  A9 27        	lda #<nmedat 			; list of enemy sprites.
0038A0  3  85 rr        	sta z80_l
0038A2  3  A9 9B        	lda #>nmedat
0038A4  3  85 rr        	sta z80_h
0038A6  3               .endif
0038A6  3  A6 rr        	ldx scno 			; screen number.
0038A8  3  D0 01        	bne sprls2 			; is it the first screen?
0038AA  3  60           	rts 				; yes, don't need to search data.
0038AB  3               sprls2:
0038AB  3  A0 00        	ldy #0
0038AD  3               sprls1:
0038AD  3  B1 rr        	lda (z80_hl),y 			; fetch type of sprite.
0038AF  3  C9 FF        	cmp #255			; is it an end marker?
0038B1  3  F0 0E        	beq sprls0 			; yes, end of this room.
0038B3  3               
0038B3  3  18           	clc 				; point to next sprite in list.
0038B4  3  A5 rr        	lda z80_l
0038B6  3  69 04        	adc #NMESIZ
0038B8  3  85 rr        	sta z80_l
0038BA  3  90 02        	bcc :+
0038BC  3  E6 rr        	inc z80_h
0038BE  3               :
0038BE  3  4C AD 38     	jmp sprls1 			; continue until end of room.
0038C1  3               sprls0:
0038C1  3  E6 rr        	inc z80_l 			; point to start of next screen.s
0038C3  3  D0 02        	bne :+
0038C5  3  E6 rr        	inc z80_h
0038C7  3               :
0038C7  3  CA           	dex
0038C8  3  D0 E3        	bne sprls1 			; continue until room found.
0038CA  3  60           	rts
0038CB  3               
0038CB  3               
0038CB  3               ;----------------------------------------------------
0038CB  3               ; Clear all but a single player sprite.
0038CB  3               ;
0038CB  3               ; global:	-
0038CB  3               ; local:	x,y,ix
0038CB  3               ; calls:	-
0038CB  3               ;----------------------------------------------------
0038CB  3               
0038CB  3               nspr:
0038CB  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
0038CD  3  85 rr        	sta sprcnt
0038CF  3  A9 00        	lda #<sprtab 			; sprite table.
0038D1  3  85 rr        	sta z80_x
0038D3  3  A9 0B        	lda #>sprtab
0038D5  3  85 rr        	sta z80_i
0038D7  3               nspr0:
0038D7  3  A0 00        	ldy #0 				; fetch sprite type.
0038D9  3  B1 rr        	lda (z80_ix),y 			; is it a player?
0038DB  3  F0 1A        	beq nspr1 			; yes, keep this one.
0038DD  3               
0038DD  3  A9 FF        	lda #255
0038DF  3  A0 00        	ldy #0 				; fetch sprite type.
0038E1  3  91 rr        	sta (z80_ix),y 			; delete sprite.
0038E3  3  A0 05        	ldy #5
0038E5  3  91 rr        	sta (z80_ix),y 			; remove next type.
0038E7  3               
0038E7  3  18           	clc	 			; next sprite.
0038E8  3  A5 rr        	lda z80_x
0038EA  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
0038EC  3  85 rr        	sta z80_x
0038EE  3  90 02        	bcc :+
0038F0  3  E6 rr        	inc z80_i
0038F2  3               :
0038F2  3  C6 rr        	dec sprcnt	 			; one less space in the table.
0038F4  3  D0 E1        	bne nspr0
0038F6  3  60           	rts
0038F7  3               nspr1:
0038F7  3  A9 FF        	lda #255
0038F9  3  A0 00        	ldy #0
0038FB  3  91 rr        	sta (z80_ix),y 			; delete sprite.
0038FD  3               
0038FD  3  18           	clc	 			; point to next sprite.
0038FE  3  A5 rr        	lda z80_x
003900  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
003902  3  85 rr        	sta z80_x
003904  3  90 02        	bcc :+
003906  3  E6 rr        	inc z80_i
003908  3               :
003908  3  C6 rr        	dec sprcnt	 			; one less to do.
00390A  3  D0 01        	bne nspr2
00390C  3  60           	rts
00390D  3               nspr2:
00390D  3  A9 FF        	lda #255
00390F  3  A0 00        	ldy #0
003911  3  91 rr        	sta (z80_ix),y 			; delete sprite.
003913  3  A0 05        	ldy #5
003915  3  91 rr        	sta (z80_ix),y 			; remove next type.
003917  3               
003917  3  18           	clc	 			; next sprite.
003918  3  A5 rr        	lda z80_x
00391A  3  69 11        	adc #TABSIZ 			; distance to next odd/even entry.
00391C  3  85 rr        	sta z80_x
00391E  3  90 02        	bcc :+
003920  3  E6 rr        	inc z80_i
003922  3               :
003922  3  C6 rr        	dec sprcnt	 			; one less space in table.
003924  3  D0 E7        	bne nspr2
003926  3  60           	rts
003927  3               
003927  3               ;----------------------------------------------------------
003927  3               ; Two initialisation routines.
003927  3               ; Initialise sprites - copy everything from list to table.
003927  3               ;
003927  3               ; global:	-
003927  3               ; local:	x,y,ix
003927  3               ; calls:	cpsp
003927  3               ;----------------------------------------------------------
003927  3               
003927  3               ispr:
003927  3  A9 0C        	lda #NUMSPR			; sprite slots in table.
003929  3  85 rr        	sta sprcnt
00392B  3  A9 00        	lda #<sprtab			; sprite table.
00392D  3  85 rr        	sta z80_x
00392F  3  A9 0B        	lda #>sprtab
003931  3  85 rr        	sta z80_i
003933  3               ispr2:
003933  3  A0 00        	ldy #0
003935  3  B1 rr        	lda (z80_hl),y 			; fetch byte.
003937  3  C9 FF        	cmp #255 			; is it an end marker?
003939  3  D0 01        	bne :+
00393B  3  60           	rts 				; yes, no more to do.
00393C  3               :
00393C  3               ispr1:
00393C  3  A0 00        	ldy #0
00393E  3  B1 rr        	lda (z80_ix),y 			; fetch sprite type.
003940  3  C9 FF        	cmp #255 			; is it enabled yet?
003942  3  D0 08        	bne ispr4			; yes, try another slot.
003944  3               
003944  3  A0 05        	ldy #5
003946  3  B1 rr        	lda (z80_ix),y		 	; next type.
003948  3  C9 FF        	cmp #255 			; is it enabled yet?
00394A  3  F0 10        	beq ispr3 			; no, process this one.
00394C  3               ispr4:
00394C  3  18           	clc 				; next sprite.
00394D  3  A5 rr        	lda z80_x
00394F  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
003951  3  85 rr        	sta z80_x
003953  3  90 02        	bcc :+
003955  3  E6 rr        	inc z80_i
003957  3               :
003957  3  C6 rr        	dec sprcnt
003959  3  D0 E1        	bne ispr1 			; repeat for remaining sprites.
00395B  3  60           	rts  				; no more room in table.
00395C  3               ispr3:
00395C  3  20 AF 39     	jsr cpsp			; initialise a sprite.
00395F  3  C6 rr        	dec sprcnt			; one less space in the table.
003961  3  D0 D0        	bne ispr2
003963  3  60           	rts
003964  3               
003964  3               
003964  3               ;-----------------------------------------------------------------------
003964  3               ; Initialise sprites - but not player, we're keeping the old one.
003964  3               ;
003964  3               ; global:	-
003964  3               ; local:	x,y,ix
003964  3               ; calls:	cpsp
003964  3               ;-----------------------------------------------------------------------
003964  3               
003964  3               kspr:
003964  3  A2 0C        	ldx #NUMSPR			; sprite slots in table.
003966  3  A9 00        	lda #<sprtab 			; sprite table.
003968  3  85 rr        	sta z80_x
00396A  3  A9 0B        	lda #>sprtab
00396C  3  85 rr        	sta z80_i
00396E  3               kspr2:
00396E  3  A0 00        	ldy #0
003970  3  B1 rr        	lda (z80_hl),y 			; fetch byte.
003972  3  C9 FF        	cmp #255 			; is it an end marker?
003974  3  D0 01        	bne :+
003976  3  60           	rts 				; yes, no more to do.
003977  3               :
003977  3  C9 00        	cmp #0
003979  3  D0 0E        	bne kspr1 			; no, add to table as normal.
00397B  3               
00397B  3  18           	clc 				; next sprite.
00397C  3  A5 rr        	lda z80_l
00397E  3  69 04        	adc #NMESIZ		 	; distance to next odd/even entry.
003980  3  85 rr        	sta z80_l
003982  3  90 02        	bcc :+
003984  3  E6 rr        	inc z80_h
003986  3               :
003986  3  4C 6E 39     	jmp kspr2
003989  3               kspr1:
003989  3  A0 00        	ldy #0 				; fetch sprite type.
00398B  3  B1 rr        	lda (z80_ix),y
00398D  3  C9 FF        	cmp #255 			; is it enabled yet?
00398F  3  D0 08        	bne kspr4 			; yes, try another slot.
003991  3               
003991  3  A0 05        	ldy #5 				; next type.
003993  3  B1 rr        	lda (z80_ix),y
003995  3  C9 FF        	cmp #255 			; is it enabled yet?
003997  3  F0 0F        	beq kspr3 			; no, process this one.
003999  3               kspr4:
003999  3  18           	clc 				; next sprite.
00399A  3  A5 rr        	lda z80_x
00399C  3  69 11        	adc #TABSIZ		 	; distance to next odd/even entry.
00399E  3  85 rr        	sta z80_x
0039A0  3  90 02        	bcc :+
0039A2  3  E6 rr        	inc z80_i
0039A4  3               :
0039A4  3  CA           	dex	 			; repeat for remaining sprites.
0039A5  3  D0 E2        	bne kspr1
0039A7  3  60           	rts  				; no more room in table.
0039A8  3               kspr3:
0039A8  3  20 AF 39     	jsr cpsp 			; copy sprite to table.
0039AB  3  CA           	dex	 			; one less space in the table.
0039AC  3  D0 C0        	bne kspr2
0039AE  3  60           	rts
0039AF  3               
0039AF  3               ;----------------------------------------------
0039AF  3               ; Copy sprite from list to table.
0039AF  3               ;
0039AF  3               ; global:	hl,ix
0039AF  3               ; local:	y
0039AF  3               ; calls:	evnt09
0039AF  3               ;----------------------------------------------
0039AF  3               
0039AF  3               cpsp:
0039AF  3  A0 00        	ldy #0					; fetch byte from table.
0039B1  3  B1 rr        	lda (z80_hl),y
0039B3  3               	; y=var_Type
0039B3  3  91 rr        	sta (z80_ix),y			; set up type.
0039B5  3  A0 05        	ldy #var_newType
0039B7  3  91 rr        	sta (z80_ix),y 			; set up type.
0039B9  3               
0039B9  3  E6 rr        	inc z80_l 				; move to next byte.
0039BB  3  D0 02        	bne :+
0039BD  3  E6 rr        	inc z80_h
0039BF  3               :
0039BF  3  A0 00        	ldy #0 					; fetch byte from table.
0039C1  3  B1 rr        	lda (z80_hl),y
0039C3  3  A0 06        	ldy #var_newImage
0039C5  3  91 rr        	sta (z80_ix),y			; set up image.
0039C7  3               
0039C7  3  E6 rr        	inc z80_l 				; move to next byte.
0039C9  3  D0 02        	bne :+
0039CB  3  E6 rr        	inc z80_h
0039CD  3               :
0039CD  3  A0 00        	ldy #0
0039CF  3  B1 rr        	lda (z80_hl),y 			; fetch byte from table.
0039D1  3  A0 08        	ldy #var_newY
0039D3  3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0039D5  3               
0039D5  3  A9 C8        	lda #200 				; set initial coordinate off screen.
0039D7  3  A0 03        	ldy #var_Y
0039D9  3  91 rr        	sta (z80_ix),y
0039DB  3               
0039DB  3  E6 rr        	inc z80_l 				; move to next byte.
0039DD  3  D0 02        	bne :+
0039DF  3  E6 rr        	inc z80_h
0039E1  3               :
0039E1  3  A0 00        	ldy #0 					; fetch byte from table.
0039E3  3  B1 rr        	lda (z80_hl),y
0039E5  3  A0 09        	ldy #var_newX
0039E7  3  91 rr        	sta (z80_ix),y 			; set up coordinate.
0039E9  3               
0039E9  3  E6 rr        	inc z80_l 				; move to next byte.
0039EB  3  D0 02        	bne :+
0039ED  3  E6 rr        	inc z80_h
0039EF  3               :
0039EF  3  A9 00        	lda #0					; zeroes in accumulator.
0039F1  3  A0 07        	ldy #var_newFrame 		; reset frame number.
0039F3  3  91 rr        	sta (z80_ix),y
0039F5  3  A0 0A        	ldy #var_Direction 		; reset direction.
0039F7  3  91 rr        	sta (z80_ix),y
0039F9  3  A0 0D        	ldy #var_jumpLo			; reset jump pointer low.
0039FB  3  91 rr        	sta (z80_ix),y
0039FD  3  A0 0E        	ldy #var_jumpHi	 		; reset jump pointer high.
0039FF  3  91 rr        	sta (z80_ix),y
003A01  3               
003A01  3  A9 FF        	lda #255 				; reset data pointer to auto-restore.
003A03  3  A0 10        	ldy #var_dataHi
003A05  3  91 rr        	sta (z80_ix),y
003A07  3               evis0:
003A07  3  A5 rr        	lda z80_i
003A09  3  48           	pha
003A0A  3  A5 rr        	lda z80_x
003A0C  3  48           	pha
003A0D  3  A5 rr        	lda z80_h
003A0F  3  48           	pha
003A10  3  A5 rr        	lda z80_l
003A12  3  48           	pha
003A13  3               
003A13  3  20 6B 45     	jsr evnt09 				; perform event.
003A16  3               
003A16  3  68           	pla
003A17  3  85 rr        	sta z80_l
003A19  3  68           	pla
003A1A  3  85 rr        	sta z80_h
003A1C  3  68           	pla
003A1D  3  85 rr        	sta z80_x
003A1F  3  68           	pla
003A20  3  85 rr        	sta z80_i
003A22  3               
003A22  3  18           	clc
003A23  3  A5 rr        	lda z80_x 			; distance to next odd/even entry.
003A25  3  69 11        	adc #TABSIZ		 	; next sprite.
003A27  3  85 rr        	sta z80_x
003A29  3  90 02        	bcc :+
003A2B  3  E6 rr        	inc z80_i
003A2D  3               :
003A2D  3  60           	rts
003A2E  3               
003A2E  3               
003A2E  3               ;-------------------------------------
003A2E  3               ; Clear the play area window.
003A2E  3               ;-------------------------------------
003A2E  3               
003A2E  3               clw:
003A2E  3  AD 01 29     	lda wintop			; get coordinates of window.
003A31  3  85 rr        	sta dispy			; put into dispx for calculation.
003A33  3  AD 02 29     	lda winlft
003A36  3  85 rr        	sta dispx
003A38  3               
003A38  3  AD 03 29     	lda winhgt			; height of window.
003A3B  3  85 rr        	sta rrow			; copy to b register.
003A3D  3               clw3:
003A3D  3  AD 04 29     	lda winwid 			; width of window.
003A40  3  85 rr        	sta rcol
003A42  3               clw2:
003A42  3  20 B4 2E     	jsr gprad 			; get print address.
003A45  3  A9 00        	lda #0				; zero byte to write.
003A47  3  A2 07        	ldx #7				; pixel height of each cell.
003A49  3               clw1:
003A49  3  BC F5 28     	ldy scrtab,x
003A4C  3  91 rr        	sta (scraddr),y 			; copy to screen.
003A4E  3  CA           	dex				; next screen row down.
003A4F  3  10 F8        	bpl clw1
003A51  3               
003A51  3  E6 rr        	inc dispx			; next column.
003A53  3  C6 rr        	dec rcol			; one less to do.
003A55  3  D0 EB        	bne clw2			; repeat for remaining columns.
003A57  3               
003A57  3  AD 02 29     	lda winlft			; get left edge.
003A5A  3  85 rr        	sta dispx 			; reset x.
003A5C  3  E6 rr        	inc dispy 			; next line down.
003A5E  3               
003A5E  3  C6 rr        	dec rrow
003A60  3  D0 DB        	bne clw3			; repeat down the screen.
003A62  3               
003A62  3  AD 01 29     	lda wintop			; get coordinates of window.
003A65  3  85 rr        	sta chary			; put into display position.
003A67  3  AD 02 29     	lda winlft
003A6A  3  85 rr        	sta charx
003A6C  3  60           	rts
003A6D  3               
003A6D  3               
003A6D  3               ;----------------------------------------------------------
003A6D  3               ; Effects code.
003A6D  3               ; Ticker routine is called 25 times per second.
003A6D  3               ;
003A6D  3               ; txtini = text scroller address
003A6D  3               ; txtscr = left text screen address
003A6D  3               ; txtwid = scroller width
003A6D  3               ; txtbit = 128
003A6D  3               ; X      = message nr
003A6D  3               ;----------------------------------------------------------
003A6D  3               
003A6D  3  00 08 10 18  scrollpos:	.byte   0,  8, 16, 24, 32, 40, 48, 56
003A71  3  20 28 30 38  
003A75  3  40 48 50 58  		.byte  64, 72, 80, 88, 96,104,112,120
003A79  3  60 68 70 78  
003A7D  3  80 88 90 98  		.byte 128,136,144,152,160,168,176,184
003A81  3  A0 A8 B0 B8  
003A85  3  C0 C8 D0 D8  		.byte 192,200,208,216,224,232,240,248
003A89  3  E0 E8 F0 F8  
003A8D  3               .if sflag
003A8D  3               scrly:
003A8D  3               	rts
003A8D  3               	.word txtscr         	; set scr_l = left screen address.
003A8D  3               	sta scr_l
003A8D  3               	sta tmp_byte		; tmp_byte = lb left screen address
003A8D  3               	lda txtscr+1
003A8D  3               	sta scr_l+1
003A8D  3               	sta scr_r+1		; set hb scr_r = hb left screen address
003A8D  3               
003A8D  3               	stx xtmp		; save x
003A8D  3               
003A8D  3               	ldx txtwid
003A8D  3               	dex
003A8D  3               	ldy scrollpos,x
003A8D  3               	tya
003A8D  3               	clc
003A8D  3               	adc scr_l
003A8D  3               	sta scr_r		; set lb scr_r = scr_l + (txtwid - 1) * 8
003A8D  3               
003A8D  3               	lda #8
003A8D  3               	sta line_cnt
003A8D  3               scrly1:
003A8D  3               	ldx txtwid		; set txtwide
003A8D  3               	dex
003A8D  3               	clc
003A8D  3               scrly0:
003A8D  3               	ldy scrollpos,x
003A8D  3               	lda (scr_l),y		; scroll 1 line
003A8D  3               	rol a
003A8D  3               	sta (scr_l),y
003A8D  3               	dex
003A8D  3               	bpl scrly0
003A8D  3               
003A8D  3               	inc scr_l
003A8D  3               	dec line_cnt
003A8D  3               	bne scrly1		; repeat 8 times
003A8D  3               
003A8D  3               	lda txtpos 		; get text pointer.
003A8D  3               	sta scr_txt
003A8D  3               	lda txtpos+1
003A8D  3               	sta scr_txt+1
003A8D  3               
003A8D  3               	ldy #0
003A8D  3               	lda (scr_txt),y 	; find character we're displaying.
003A8D  3               	and #127 		; remove end marker bit if applicable.
003A8D  3               	cmp #13			; is it newline?
003A8D  3               	bne scrly5 		; no, it's okay.
003A8D  3               	lda #32			; convert to a space instead.
003A8D  3               scrly5:
003A8D  3               	sta fntaddr		; calculate char address
003A8D  3               	lda #0
003A8D  3               	sta fntaddr+1
003A8D  3               	asl fntaddr  		; multiply char by 8.
003A8D  3               	rol fntaddr+1
003A8D  3               	asl fntaddr
003A8D  3               	rol fntaddr+1
003A8D  3               	asl fntaddr
003A8D  3               	rol fntaddr+1
003A8D  3               	lda fntaddr
003A8D  3               	clc
003A8D  3               	adc #<(FONT-256)
003A8D  3               	sta scrly3+1		; that's the low byte.
003A8D  3               	lda fntaddr+1
003A8D  3               	adc #>(FONT-256)
003A8D  3               	sta scrly3+2		; add displacement.
003A8D  3               
003A8D  3               	ldy #0
003A8D  3               scrly3:
003A8D  3               	lda $3333,y		; get image of char line.
003A8D  3               	and txtbit
003A8D  3               	beq scrly2		; don't plot pixel
003A8D  3               ;	ldy scrline,x
003A8D  3               	lda (scr_r),y
003A8D  3               	clc
003A8D  3               	ora #1
003A8D  3               	sta (scr_r),y		; plot pixel
003A8D  3               scrly2:
003A8D  3               	iny			; next line of char.
003A8D  3               	cpy #8
003A8D  3               	bne scrly3
003A8D  3               
003A8D  3               	lsr txtbit		; bit of text to display.
003A8D  3               	bcs :+
003A8D  3               	rts
003A8D  3               :
003A8D  3               	ldy #0
003A8D  3               	lda (scr_txt),y 	; what was the character?
003A8D  3               	asl a	  		; end of message?
003A8D  3               	bcs scrly4
003A8D  3               	inc txtpos
003A8D  3               	bne :+
003A8D  3               	inc txtpos+1
003A8D  3               :
003A8D  3               	jmp scrly6 		; not yet - continue.
003A8D  3               scrly4:
003A8D  3               	lda txtini 		; start of scrolling message.
003A8D  3               	sta txtpos
003A8D  3               	lda txtini+1
003A8D  3               	sta txtpos+1
003A8D  3               scrly6:
003A8D  3               	lda #128
003A8D  3               	sta txtbit
003A8D  3               	ldx xtmp
003A8D  3               	rts
003A8D  3               
003A8D  3               scrline:	.byte $00,$20,$40,$60,$80,$a0,$c0,$e0
003A8D  3               tmp_byte:	.byte 0
003A8D  3               line_cnt:	.byte 0
003A8D  3               
003A8D  3               ;-------------------------------------------------------
003A8D  3               ; Entry TICKER command
003A8D  3               ;
003A8D  3               ; Entry:
003A8D  3               ;  z80_b = message nr
003A8D  3               ;  z80_c = width
003A8D  3               ;-------------------------------------------------------
003A8D  3               
003A8D  3               iscrly:
003A8D  3               	jsr prescr 		; set up display position.
003A8D  3               .if swrflag
003A8D  3               	lda #<(msgdat + data_address - data_start) 		; text messages.
003A8D  3               	sta z80_l
003A8D  3               	lda #>(msgdat + data_address - data_start)
003A8D  3               	sta z80_h
003A8D  3               .else
003A8D  3               	lda #<msgdat 		; text messages.
003A8D  3               	sta z80_l
003A8D  3               	lda #>msgdat
003A8D  3               	sta z80_h
003A8D  3               .endif
003A8D  3               	lda z80_c 		; width.
003A8D  3               	sec
003A8D  3               	sbc #1			; subtract one.
003A8D  3               	cmp #32 		; is it between 1 and 32?
003A8D  3               	bcc :+
003A8D  3               	lda #$60
003A8D  3               	jmp iscrl0		; no, disable messages.
003A8D  3               :
003A8D  3               	ldx z80_b		; message number.
003A8D  3               	jsr getwrd 		; find message start.
003A8D  3               
003A8D  3               	lda z80_l		; set initial text position.
003A8D  3               	sta txtini
003A8D  3               	lda z80_h
003A8D  3               	sta txtini+1
003A8D  3               
003A8D  3               	lda #$ad		; code for lda adrr
003A8D  3               iscrl0:
003A8D  3               	sta scrly		; enable/disable scrolling routine.
003A8D  3               
003A8D  3               	jsr prescr 		; set up display position.
003A8D  3               	jsr gprad 		; get print address.
003A8D  3               
003A8D  3               	lda scraddr 		; set text screen address.
003A8D  3               	sta txtscr
003A8D  3               	lda scraddr+1
003A8D  3               	sta txtscr+1
003A8D  3               
003A8D  3               	lda z80_c		; width.
003A8D  3               	sta txtwid		; set width in working storage.
003A8D  3               
003A8D  3               	lda #128 		; start with leftmost bit.
003A8D  3               	sta txtbit
003A8D  3               
003A8D  3               	jmp scrly4
003A8D  3               .endif
003A8D  3               
003A8D  3               ;------------------------------------------------------------------
003A8D  3               ; Dig routine, conditional assembly depending on dflag
003A8D  3               ;------------------------------------------------------------------
003A8D  3               .if dflag
003A8D  3               dig:
003A8D  3               	and #3
003A8D  3               	beq digr		; dig right
003A8D  3               	cmp #1
003A8D  3               	beq digl		; dig left
003A8D  3               	cmp #2
003A8D  3               	beq digd		; dig down
003A8D  3               
003A8D  3               ; Dig up.
003A8D  3               
003A8D  3               digu:				; dig up
003A8D  3               	ldy #8
003A8D  3               	lda (z80_ix),y
003A8D  3               	sec
003A8D  3               	sbc #2
003A8D  3               	sta dispy		; set y
003A8D  3               
003A8D  3               	iny
003A8D  3               	lda (z80_ix),y
003A8D  3               	sta dispx		; set x
003A8D  3               	jmp digv
003A8D  3               
003A8D  3               ; Dig down.
003A8D  3               
003A8D  3               digd:
003A8D  3               	ldy #9
003A8D  3               	lda (z80_ix),y
003A8D  3               	sta dispx		; set y
003A8D  3               
003A8D  3               	dey
003A8D  3               	clc
003A8D  3               	lda (z80_ix),y
003A8D  3               	adc #16
003A8D  3               	sta dispy		; set y
003A8D  3               	jmp digv
003A8D  3               
003A8D  3               ; Dig left.
003A8D  3               
003A8D  3               digl:
003A8D  3               	ldy #8
003A8D  3               	lda (z80_ix),y
003A8D  3               	sta dispy		; set y
003A8D  3               
003A8D  3               	iny
003A8D  3               	lda (z80_ix),y
003A8D  3               	sec
003A8D  3               	sbc #2			; x=x-2
003A8D  3               	sta dispx		; set x
003A8D  3               	jmp digh
003A8D  3               
003A8D  3               ; Dig right.
003A8D  3               
003A8D  3               digr:
003A8D  3               	ldy #8
003A8D  3               	lda (z80_ix),y
003A8D  3               	sta dispy		; set y
003A8D  3               
003A8D  3               	iny
003A8D  3               	lda (z80_ix),y
003A8D  3               	clc
003A8D  3               	adc #16
003A8D  3               	sta dispx		; set x+16
003A8D  3               	jmp digh
003A8D  3               
003A8D  3               ; Vertical digging
003A8D  3               
003A8D  3               digv:
003A8D  3               	jsr tstbl		; check blocktype in MAP
003A8D  3               	jsr fdchk		; test if FODDER
003A8D  3               
003A8D  3               	clc
003A8D  3               	lda dispx		; look 1 cell down
003A8D  3               	adc #8
003A8D  3               	sta dispx
003A8D  3               	jsr tstbl		; check blocktype in MAP
003A8D  3               	jsr fdchk
003A8D  3               	lda dispx
003A8D  3               	and #7
003A8D  3               	bne :+
003A8D  3               	rts
003A8D  3               :
003A8D  3               	clc
003A8D  3               	lda dispx		; look 1 cell down
003A8D  3               	adc #8
003A8D  3               	sta dispx
003A8D  3               	jsr tstbl		; check blocktype in MAP
003A8D  3               	jmp fdchk
003A8D  3               
003A8D  3               ; Horizontal digging
003A8D  3               
003A8D  3               digh:
003A8D  3               	jsr tstbl		; check blocktype in MAP
003A8D  3               	jsr fdchk		; test if FODDER
003A8D  3               
003A8D  3               	clc
003A8D  3               	lda dispy		; look 1 cell down
003A8D  3               	adc #8
003A8D  3               	sta dispy
003A8D  3               	jsr tstbl		; check blocktype in MAP
003A8D  3               	jsr fdchk
003A8D  3               	lda dispy
003A8D  3               	and #7
003A8D  3               	bne :+
003A8D  3               	rts
003A8D  3               :
003A8D  3               	clc
003A8D  3               	lda dispy		; look 1 cell down
003A8D  3               	adc #8
003A8D  3               	sta dispy
003A8D  3               	jsr tstbl		; check blocktype in MAP
003A8D  3               	jmp fdchk
003A8D  3               
003A8D  3               digcnt:	.byte 0
003A8D  3               
003A8D  3               .endif
003A8D  3               
003A8D  3               ;------------------------------------------------------------------
003A8D  3               ; Sprite table
003A8D  3               ;------------------------------------------------------------------
003A8D  3               
003A8D  3               
003A8D  3               ; ix+0  = type.
003A8D  3               ; ix+1  = sprite image number.
003A8D  3               ; ix+2  = frame.
003A8D  3               ; ix+3  = y coord.
003A8D  3               ; ix+4  = x coord.
003A8D  3               
003A8D  3               ; ix+5  = new type.
003A8D  3               ; ix+6  = new image number.
003A8D  3               ; ix+7  = new frame.
003A8D  3               ; ix+8  = new y coord.
003A8D  3               ; ix+9  = new x coord.
003A8D  3               
003A8D  3               ; ix+10 = direction.
003A8D  3               ; ix+11 = parameter 1.
003A8D  3               ; ix+12 = parameter 2.
003A8D  3               ; ix+13 = jump pointer low.
003A8D  3               ; ix+14 = jump pointer high.
003A8D  3               ; ix+15 = data pointer low.
003A8D  3               ; ix+16 = data pointer high.
003A8D  3               
003A8D  3               ; block NUMSPR * TABSIZ,255
003A8D  3               
003A8D  3               ;sprtab:	.res NUMSPR*TABSIZ,255
003A8D  3  FF FF FF FF  ssprit:	.byte 255,255,255,255,255,255,255,0,192,120,0,0,0,255,255,255,255
003A91  3  FF FF FF 00  
003A95  3  C0 78 00 00  
003A9E  3  07           roomtb:	.byte 7                      ; start room map offset.
003A9F  3               
003A9F  3               setfgcol:
003A9F  3               setbgcol:
003A9F  3  60           	rts
003AA0  3               
003AA0  3               ; User routine.  Put your own code in here to be called with USER instruction.
003AA0  3               ; if USER has an argument it will be passed in the accumulator.
003AA0  3               
003AA0  3               user:
003AA0  3  60           	rts
003AA1  3               
003AA1  3               ; Everything below here will be generated by the editors.
003AA1  3               
003AA1  3               
003AA1  3  60                   rts
003AA2  3               WINDOWTOP = 1
003AA2  3               WINDOWLFT = 1
003AA2  3               WINDOWHGT = 19
003AA2  3               WINDOWWID = 30 ;a
003AA2  3               MAPWID = 13
003AA2  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
003AA6  3  FF FF FF FF  
003AAA  3  FF FF FF FF  
003AAF  3               mapdat:
003AAF  3  FF 11 06 14          .byte 255,17,6,20,16,7,26,2,1,18,19,21,255,255,255,255,14,23,5,4,8,9,25,255,22,255,255,255,255,13,12,11,10,0,15,255,255,255,255,255,255,255,3,255,255,255,255,24,255,255,255,255
003AB3  3  10 07 1A 02  
003AB7  3  01 12 13 15  
003AE3  3  FF FF FF FF          .byte 255,255,255,255,255,255,255,255,255,255,255,255,255
003AE7  3  FF FF FF FF  
003AEB  3  FF FF FF FF  
003AF0  3  05           stmap:  .byte 5
003AF1  3               
003AF1  3               evnt00:
003AF1  3  A5 rr                lda joyval	; KEY
003AF3  3  29 01                and #1
003AF5  3  F0 03                beq :+
003AF7  3  4C 03 3B             jmp a00039
003AFA  3               :
003AFA  3  A9 01                lda #1
003AFC  3  A0 0B                ldy #11
003AFE  3  91 rr                sta (z80_ix),y
003B00  3  4C 5A 3B             jmp a00218
003B03  3  A5 rr        a00039: lda joyval	; KEY
003B05  3  29 02                and #2
003B07  3  F0 03                beq :+
003B09  3  4C 15 3B             jmp a00076
003B0C  3               :
003B0C  3  A9 01                lda #1
003B0E  3  A0 0B                ldy #11
003B10  3  91 rr                sta (z80_ix),y
003B12  3  4C 5A 3B             jmp a00218
003B15  3  A5 rr        a00076: lda joyval	; KEY
003B17  3  29 04                and #4
003B19  3  F0 03                beq :+
003B1B  3  4C 27 3B             jmp a00113
003B1E  3               :
003B1E  3  A9 01                lda #1
003B20  3  A0 0B                ldy #11
003B22  3  91 rr                sta (z80_ix),y
003B24  3  4C 5A 3B             jmp a00218
003B27  3  A5 rr        a00113: lda joyval	; KEY
003B29  3  29 08                and #8
003B2B  3  F0 03                beq :+
003B2D  3  4C 39 3B             jmp a00151
003B30  3               :
003B30  3  A9 01                lda #1
003B32  3  A0 0B                ldy #11
003B34  3  91 rr                sta (z80_ix),y
003B36  3  4C 5A 3B             jmp a00218
003B39  3  A5 rr        a00151: lda joyval	; KEY
003B3B  3  29 10                and #16
003B3D  3  F0 03                beq :+
003B3F  3  4C 4B 3B             jmp a00188
003B42  3               :
003B42  3  A9 01                lda #1
003B44  3  A0 0B                ldy #11
003B46  3  91 rr                sta (z80_ix),y
003B48  3  4C 5A 3B             jmp a00218
003B4B  3  A9 01        a00188: lda #1
003B4D  3  C5 rr                cmp varb
003B4F  3  90 03                bcc *+5
003B51  3  4C 5A 3B             jmp a00218
003B54  3  A9 00                lda #0
003B56  3  A0 0B                ldy #11
003B58  3  91 rr                sta (z80_ix),y
003B5A  3  A9 00        a00218: lda #0
003B5C  3  C5 rr                cmp varl
003B5E  3  F0 03                beq *+5
003B60  3  4C 74 3B             jmp a00271
003B63  3  A9 00                lda #0
003B65  3  A0 0B                ldy #11
003B67  3  D1 rr                cmp (z80_ix),y
003B69  3  F0 03                beq *+5
003B6B  3  4C 74 3B             jmp a00271
003B6E  3  A9 00                lda #0
003B70  3  A0 07                ldy #7
003B72  3  91 rr                sta (z80_ix),y
003B74  3  A5 rr        a00271: lda joyval	; KEY
003B76  3  29 20                and #32
003B78  3  F0 03                beq :+
003B7A  3  4C A4 3B             jmp a00366
003B7D  3               :
003B7D  3  A9 00                lda #0
003B7F  3  C5 rr                cmp vara
003B81  3  F0 03                beq *+5
003B83  3  4C A4 3B             jmp a00366
003B86  3  A9 1E                lda #30
003B88  3  C5 rr                cmp varm
003B8A  3  F0 03                beq *+5
003B8C  3  4C 9B 3B             jmp a00347
003B8F  3  A9 1F                lda #31
003B91  3  85 rr                sta varm
003B93  3  A9 05                lda #5 	; DELAY
003B95  3  20 0D 27             jsr delay
003B98  3  4C A4 3B             jmp a00366
003B9B  3  A9 1E        a00347: lda #30
003B9D  3  85 rr                sta varm
003B9F  3  A9 05                lda #5 	; DELAY
003BA1  3  20 0D 27             jsr delay
003BA4  3  A9 00        a00366: lda #0
003BA6  3  C5 rr                cmp varj
003BA8  3  F0 03                beq *+5
003BAA  3  4C DB 3B             jmp a00482
003BAD  3  A9 05                lda #DEADLY	; DEADLY
003BAF  3  85 rr                sta z80_b
003BB1  3  20 5F 31             jsr tded
003BB4  3  C5 rr                cmp z80_b
003BB6  3  F0 03                beq :+
003BB8  3  4C DB 3B             jmp a00482
003BBB  3               :
003BBB  3  A9 01                lda #1
003BBD  3  85 rr                sta varj
003BBF  3  A9 FF                lda #255	; REMOVE
003BC1  3  A0 05                ldy #5
003BC3  3  91 rr                sta (z80_ix),y
003BC5  3  A9 05                lda #5	; SPAWN
003BC7  3  85 rr                sta z80_c
003BC9  3  A9 09                lda #9
003BCB  3  85 rr                sta z80_b
003BCD  3  20 BA 2C             jsr spawn
003BD0  3  A9 08                lda #8	; SPAWN
003BD2  3  85 rr                sta z80_c
003BD4  3  A9 07                lda #7
003BD6  3  85 rr                sta z80_b
003BD8  3  20 BA 2C             jsr spawn
003BDB  3  A9 00        a00482: lda #0
003BDD  3  C5 rr                cmp vark
003BDF  3  F0 03                beq *+5
003BE1  3  4C 10 3C             jmp a00591
003BE4  3  A9 01                lda #1
003BE6  3  C5 rr                cmp vars
003BE8  3  F0 03                beq *+5
003BEA  3  4C 0D 3C             jmp a00587
003BED  3  20 67 2C             jsr skobj	; DETECTOBJECT
003BF0  3  85 rr                sta varobj
003BF2  3  A9 FF                lda #255
003BF4  3  C5 rr                cmp varobj
003BF6  3  D0 03                bne *+5
003BF8  3  4C 0D 3C             jmp a00587
003BFB  3  A5 rr                lda varobj	; GET
003BFD  3  20 E6 2B             jsr getob
003C00  3  A5 rr                lda varc
003C02  3  18                   clc
003C03  3  69 01                adc #1
003C05  3  85 rr                sta varc
003C07  3  A9 3C                lda #60		; BEEP
003C09  3  0A                   asl a
003C0A  3  8D 85 27             sta sndtyp
003C0D  3  4C 30 3C     a00587: jmp a00663
003C10  3  20 67 2C     a00591: jsr skobj	; DETECTOBJECT
003C13  3  85 rr                sta varobj
003C15  3  A9 FF                lda #255
003C17  3  C5 rr                cmp varobj
003C19  3  D0 03                bne *+5
003C1B  3  4C 30 3C             jmp a00663
003C1E  3  A5 rr                lda varobj	; GET
003C20  3  20 E6 2B             jsr getob
003C23  3  A5 rr                lda numlif
003C25  3  18                   clc
003C26  3  69 01                adc #1
003C28  3  85 rr                sta numlif
003C2A  3  A9 3C                lda #60		; BEEP
003C2C  3  0A                   asl a
003C2D  3  8D 85 27             sta sndtyp
003C30  3  20 A3 30     a00663: jsr cangd	; CANGODOWN
003C33  3  F0 03                beq :+
003C35  3  4C 3F 3C             jmp a00694
003C38  3               :
003C38  3  20 26 38             jsr ifall	; FALL
003C3B  3  A9 00                lda #0
003C3D  3  85 rr                sta varb
003C3F  3  A9 00        a00694: lda #0
003C41  3  C5 rr                cmp varl
003C43  3  F0 03                beq *+5
003C45  3  4C 5C 3C             jmp a00751
003C48  3  A9 01                lda #1
003C4A  3  C5 rr                cmp varb
003C4C  3  F0 03                beq *+5
003C4E  3  4C 5C 3C             jmp a00751
003C51  3  A9 08                lda #8	; SPAWN
003C53  3  85 rr                sta z80_c
003C55  3  A9 03                lda #3
003C57  3  85 rr                sta z80_b
003C59  3  20 BA 2C             jsr spawn
003C5C  3  A9 E7        a00751: lda #231
003C5E  3  A0 09                ldy #9
003C60  3  D1 rr                cmp (z80_ix),y
003C62  3  90 03                bcc *+5
003C64  3  4C 80 3C             jmp a00830
003C67  3  20 64 37             jsr scrr	; SCREENRIGHT
003C6A  3  A9 00                lda #0
003C6C  3  85 rr                sta varf
003C6E  3  A9 0A                lda #10
003C70  3  A0 09                ldy #9
003C72  3  91 rr                sta (z80_ix),y
003C74  3  A0 08                ldy #8
003C76  3  B1 rr                lda (z80_ix),y
003C78  3  85 rr                sta varo
003C7A  3  A0 09                ldy #9
003C7C  3  B1 rr                lda (z80_ix),y
003C7E  3  85 rr                sta varp
003C80  3  A9 09        a00830: lda #9
003C82  3  A0 09                ldy #9
003C84  3  D1 rr                cmp (z80_ix),y
003C86  3  B0 03                bcs *+5
003C88  3  4C A4 3C             jmp a00909
003C8B  3  A9 01                lda #1
003C8D  3  85 rr                sta varf
003C8F  3  20 49 37             jsr scrl	; SCREENLEFT
003C92  3  A9 E6                lda #230
003C94  3  A0 09                ldy #9
003C96  3  91 rr                sta (z80_ix),y
003C98  3  A0 08                ldy #8
003C9A  3  B1 rr                lda (z80_ix),y
003C9C  3  85 rr                sta varo
003C9E  3  A0 09                ldy #9
003CA0  3  B1 rr                lda (z80_ix),y
003CA2  3  85 rr                sta varp
003CA4  3  A9 8C        a00909: lda #140
003CA6  3  A0 08                ldy #8
003CA8  3  D1 rr                cmp (z80_ix),y
003CAA  3  90 03                bcc *+5
003CAC  3  4C C4 3C             jmp a00980
003CAF  3  20 76 37             jsr scrd	; SCREENDOWN
003CB2  3  A9 0A                lda #10
003CB4  3  A0 08                ldy #8
003CB6  3  91 rr                sta (z80_ix),y
003CB8  3  A0 08                ldy #8
003CBA  3  B1 rr                lda (z80_ix),y
003CBC  3  85 rr                sta varo
003CBE  3  A0 09                ldy #9
003CC0  3  B1 rr                lda (z80_ix),y
003CC2  3  85 rr                sta varp
003CC4  3  A9 09        a00980: lda #9
003CC6  3  A0 08                ldy #8
003CC8  3  D1 rr                cmp (z80_ix),y
003CCA  3  B0 03                bcs *+5
003CCC  3  4C E4 3C             jmp a01050
003CCF  3  20 6D 37             jsr scru	; SCREENUP
003CD2  3  A9 88                lda #136
003CD4  3  A0 08                ldy #8
003CD6  3  91 rr                sta (z80_ix),y
003CD8  3  A0 08                ldy #8
003CDA  3  B1 rr                lda (z80_ix),y
003CDC  3  85 rr                sta varo
003CDE  3  A0 09                ldy #9
003CE0  3  B1 rr                lda (z80_ix),y
003CE2  3  85 rr                sta varp
003CE4  3  20 35 30     a01050: jsr laddu	; CANGOUP
003CE7  3  F0 03                beq :+
003CE9  3  4C F3 3C             jmp a01079
003CEC  3               :
003CEC  3  A9 01                lda #1
003CEE  3  85 rr                sta varl
003CF0  3  4C 06 3D             jmp a01116
003CF3  3  20 1F 30     a01079: jsr laddd	; LADDERBELOW
003CF6  3  F0 03                beq :+
003CF8  3  4C 02 3D             jmp a01108
003CFB  3               :
003CFB  3  A9 02                lda #2
003CFD  3  85 rr                sta varl
003CFF  3  4C 06 3D             jmp a01116
003D02  3  A9 00        a01108: lda #0
003D04  3  85 rr                sta varl
003D06  3  A5 rr        a01116: lda joyval	; KEY
003D08  3  29 01                and #1
003D0A  3  F0 03                beq :+
003D0C  3  4C B8 3D             jmp a01501
003D0F  3               :
003D0F  3  20 EA 30             jsr cangr	; CANGORIGHT
003D12  3  F0 03                beq :+
003D14  3  4C B8 3D             jmp a01501
003D17  3               :
003D17  3  A5 rr                lda joyval	; KEY
003D19  3  29 04                and #4
003D1B  3  F0 03                beq :+
003D1D  3  4C 4B 3D             jmp a01265
003D20  3               :
003D20  3  20 1F 30             jsr laddd	; LADDERBELOW
003D23  3  F0 03                beq :+
003D25  3  4C 2B 3D             jmp a01193
003D28  3               :
003D28  3  4C 48 3D             jmp a01260
003D2B  3  A9 00        a01193: lda #0
003D2D  3  C5 rr                cmp vara
003D2F  3  F0 03                beq *+5
003D31  3  4C 39 3D             jmp a01221
003D34  3  A9 00                lda #0		; ANIMATE
003D36  3  20 2B 36             jsr animsp
003D39  3  A9 01        a01221: lda #1
003D3B  3  A0 06                ldy #6
003D3D  3  91 rr                sta (z80_ix),y
003D3F  3  A0 09                ldy #9 		; SPRITERIGHT
003D41  3  B1 rr                lda (z80_ix),y
003D43  3  18                   clc
003D44  3  69 02                adc #2
003D46  3  91 rr                sta (z80_ix),y
003D48  3  4C B8 3D     a01260: jmp a01501
003D4B  3  A5 rr        a01265: lda joyval	; KEY
003D4D  3  29 08                and #8
003D4F  3  F0 03                beq :+
003D51  3  4C 7F 3D             jmp a01377
003D54  3               :
003D54  3  20 35 30             jsr laddu	; CANGOUP
003D57  3  F0 03                beq :+
003D59  3  4C 5F 3D             jmp a01305
003D5C  3               :
003D5C  3  4C 7C 3D             jmp a01372
003D5F  3  A9 01        a01305: lda #1
003D61  3  A0 06                ldy #6
003D63  3  91 rr                sta (z80_ix),y
003D65  3  A9 00                lda #0
003D67  3  C5 rr                cmp vara
003D69  3  F0 03                beq *+5
003D6B  3  4C 73 3D             jmp a01346
003D6E  3  A9 00                lda #0		; ANIMATE
003D70  3  20 2B 36             jsr animsp
003D73  3  A0 09        a01346: ldy #9 		; SPRITERIGHT
003D75  3  B1 rr                lda (z80_ix),y
003D77  3  18                   clc
003D78  3  69 02                adc #2
003D7A  3  91 rr                sta (z80_ix),y
003D7C  3  4C B8 3D     a01372: jmp a01501
003D7F  3  A9 01        a01377: lda #1
003D81  3  A0 06                ldy #6
003D83  3  91 rr                sta (z80_ix),y
003D85  3  A9 00                lda #0
003D87  3  C5 rr                cmp vara
003D89  3  F0 03                beq *+5
003D8B  3  4C AF 3D             jmp a01475
003D8E  3  A9 00                lda #0		; ANIMATE
003D90  3  20 2B 36             jsr animsp
003D93  3  A9 00                lda #0
003D95  3  A0 07                ldy #7
003D97  3  D1 rr                cmp (z80_ix),y
003D99  3  F0 03                beq *+5
003D9B  3  4C AF 3D             jmp a01475
003D9E  3  20 A3 30             jsr cangd	; CANGODOWN
003DA1  3  F0 03                beq :+
003DA3  3  4C A9 3D             jmp a01461
003DA6  3               :
003DA6  3  4C AF 3D             jmp a01475
003DA9  3  A9 05        a01461: lda #5		; BEEP
003DAB  3  0A                   asl a
003DAC  3  8D 85 27             sta sndtyp
003DAF  3  A0 09        a01475: ldy #9 		; SPRITERIGHT
003DB1  3  B1 rr                lda (z80_ix),y
003DB3  3  18                   clc
003DB4  3  69 02                adc #2
003DB6  3  91 rr                sta (z80_ix),y
003DB8  3  A5 rr        a01501: lda joyval	; KEY
003DBA  3  29 02                and #2
003DBC  3  F0 03                beq :+
003DBE  3  4C 6A 3E             jmp a01885
003DC1  3               :
003DC1  3  20 D8 30             jsr cangl	; CANGOLEFT
003DC4  3  F0 03                beq :+
003DC6  3  4C 6A 3E             jmp a01885
003DC9  3               :
003DC9  3  A5 rr                lda joyval	; KEY
003DCB  3  29 04                and #4
003DCD  3  F0 03                beq :+
003DCF  3  4C FD 3D             jmp a01649
003DD2  3               :
003DD2  3  20 1F 30             jsr laddd	; LADDERBELOW
003DD5  3  F0 03                beq :+
003DD7  3  4C DD 3D             jmp a01577
003DDA  3               :
003DDA  3  4C FA 3D             jmp a01644
003DDD  3  A9 00        a01577: lda #0
003DDF  3  C5 rr                cmp vara
003DE1  3  F0 03                beq *+5
003DE3  3  4C EB 3D             jmp a01605
003DE6  3  A9 00                lda #0		; ANIMATE
003DE8  3  20 2B 36             jsr animsp
003DEB  3  A9 02        a01605: lda #2
003DED  3  A0 06                ldy #6
003DEF  3  91 rr                sta (z80_ix),y
003DF1  3  A0 09                ldy #9 		; SPRITELEFT
003DF3  3  B1 rr                lda (z80_ix),y
003DF5  3  38                   sec
003DF6  3  E9 02                sbc #2
003DF8  3  91 rr                sta (z80_ix),y
003DFA  3  4C 6A 3E     a01644: jmp a01885
003DFD  3  A5 rr        a01649: lda joyval	; KEY
003DFF  3  29 08                and #8
003E01  3  F0 03                beq :+
003E03  3  4C 31 3E             jmp a01761
003E06  3               :
003E06  3  20 35 30             jsr laddu	; CANGOUP
003E09  3  F0 03                beq :+
003E0B  3  4C 11 3E             jmp a01689
003E0E  3               :
003E0E  3  4C 2E 3E             jmp a01756
003E11  3  A9 02        a01689: lda #2
003E13  3  A0 06                ldy #6
003E15  3  91 rr                sta (z80_ix),y
003E17  3  A9 00                lda #0
003E19  3  C5 rr                cmp vara
003E1B  3  F0 03                beq *+5
003E1D  3  4C 25 3E             jmp a01730
003E20  3  A9 00                lda #0		; ANIMATE
003E22  3  20 2B 36             jsr animsp
003E25  3  A0 09        a01730: ldy #9 		; SPRITELEFT
003E27  3  B1 rr                lda (z80_ix),y
003E29  3  38                   sec
003E2A  3  E9 02                sbc #2
003E2C  3  91 rr                sta (z80_ix),y
003E2E  3  4C 6A 3E     a01756: jmp a01885
003E31  3  A9 02        a01761: lda #2
003E33  3  A0 06                ldy #6
003E35  3  91 rr                sta (z80_ix),y
003E37  3  A9 00                lda #0
003E39  3  C5 rr                cmp vara
003E3B  3  F0 03                beq *+5
003E3D  3  4C 61 3E             jmp a01859
003E40  3  A9 00                lda #0		; ANIMATE
003E42  3  20 2B 36             jsr animsp
003E45  3  A9 00                lda #0
003E47  3  A0 07                ldy #7
003E49  3  D1 rr                cmp (z80_ix),y
003E4B  3  F0 03                beq *+5
003E4D  3  4C 61 3E             jmp a01859
003E50  3  20 A3 30             jsr cangd	; CANGODOWN
003E53  3  F0 03                beq :+
003E55  3  4C 5B 3E             jmp a01845
003E58  3               :
003E58  3  4C 61 3E             jmp a01859
003E5B  3  A9 05        a01845: lda #5		; BEEP
003E5D  3  0A                   asl a
003E5E  3  8D 85 27             sta sndtyp
003E61  3  A0 09        a01859: ldy #9 		; SPRITELEFT
003E63  3  B1 rr                lda (z80_ix),y
003E65  3  38                   sec
003E66  3  E9 02                sbc #2
003E68  3  91 rr                sta (z80_ix),y
003E6A  3  A5 rr        a01885: lda joyval	; KEY
003E6C  3  29 08                and #8
003E6E  3  F0 03                beq :+
003E70  3  4C 98 3E             jmp a01986
003E73  3               :
003E73  3  20 35 30             jsr laddu	; CANGOUP
003E76  3  F0 03                beq :+
003E78  3  4C 98 3E             jmp a01986
003E7B  3               :
003E7B  3  A9 00                lda #0
003E7D  3  A0 06                ldy #6
003E7F  3  91 rr                sta (z80_ix),y
003E81  3  A9 00                lda #0
003E83  3  C5 rr                cmp vara
003E85  3  F0 03                beq *+5
003E87  3  4C 8F 3E             jmp a01961
003E8A  3  A9 00                lda #0		; ANIMATE
003E8C  3  20 2B 36             jsr animsp
003E8F  3  A0 08        a01961: ldy #8 		; SPRITEUP
003E91  3  B1 rr                lda (z80_ix),y
003E93  3  38                   sec
003E94  3  E9 02                sbc #2
003E96  3  91 rr                sta (z80_ix),y
003E98  3  A5 rr        a01986: lda joyval	; KEY
003E9A  3  29 04                and #4
003E9C  3  F0 03                beq :+
003E9E  3  4C C6 3E             jmp a02089
003EA1  3               :
003EA1  3  20 1F 30             jsr laddd	; LADDERBELOW
003EA4  3  F0 03                beq :+
003EA6  3  4C C6 3E             jmp a02089
003EA9  3               :
003EA9  3  A9 00                lda #0
003EAB  3  A0 06                ldy #6
003EAD  3  91 rr                sta (z80_ix),y
003EAF  3  A9 00                lda #0
003EB1  3  C5 rr                cmp vara
003EB3  3  F0 03                beq *+5
003EB5  3  4C BD 3E             jmp a02064
003EB8  3  A9 00                lda #0		; ANIMATE
003EBA  3  20 2B 36             jsr animsp
003EBD  3  A0 08        a02064: ldy #8 		; SPRITEDOWN
003EBF  3  B1 rr                lda (z80_ix),y
003EC1  3  18                   clc
003EC2  3  69 02                adc #2
003EC4  3  91 rr                sta (z80_ix),y
003EC6  3  20 6E 30     a02089: jsr cangu	; CANGOUP
003EC9  3  F0 03                beq :+
003ECB  3  4C 09 3F             jmp a02228
003ECE  3               :
003ECE  3  A5 rr                lda joyval	; KEY
003ED0  3  29 10                and #16
003ED2  3  F0 03                beq :+
003ED4  3  4C 09 3F             jmp a02228
003ED7  3               :
003ED7  3  20 A3 30             jsr cangd	; CANGODOWN
003EDA  3  F0 03                beq :+
003EDC  3  4C E2 3E             jmp a02146
003EDF  3               :
003EDF  3  4C 09 3F             jmp a02228
003EE2  3  A9 00        a02146: lda #0
003EE4  3  C5 rr                cmp varl
003EE6  3  F0 03                beq *+5
003EE8  3  4C 09 3F             jmp a02228
003EEB  3  A9 01                lda #1
003EED  3  C5 rr                cmp varb
003EEF  3  90 03                bcc *+5
003EF1  3  4C 09 3F             jmp a02228
003EF4  3  20 50 32             jsr jump	; JUMP
003EF7  3  A9 05                lda #5		; BEEP
003EF9  3  0A                   asl a
003EFA  3  8D 85 27             sta sndtyp
003EFD  3  A9 0A                lda #10		; BEEP
003EFF  3  0A                   asl a
003F00  3  8D 85 27             sta sndtyp
003F03  3  A9 0F                lda #15		; BEEP
003F05  3  0A                   asl a
003F06  3  8D 85 27             sta sndtyp
003F09  3  4C 92 37     a02228: jmp grav
003F0C  3               evnt01:
003F0C  3  A9 00                lda #0 	; COLLISION
003F0E  3  85 rr                sta z80_b
003F10  3  20 76 36             jsr sktyp
003F13  3  B0 03                bcs :+
003F15  3  4C 40 3F             jmp b00117
003F18  3               :
003F18  3  A5 rr                lda skptr	; OTHER
003F1A  3  85 rr                sta z80_x
003F1C  3  A5 rr                lda skptr+1
003F1E  3  85 rr                sta z80_i
003F20  3  A9 01                lda #1
003F22  3  85 rr                sta varj
003F24  3  A9 05                lda #5	; SPAWN
003F26  3  85 rr                sta z80_c
003F28  3  A9 09                lda #9
003F2A  3  85 rr                sta z80_b
003F2C  3  20 BA 2C             jsr spawn
003F2F  3  A9 FF                lda #255	; REMOVE
003F31  3  A0 05                ldy #5
003F33  3  91 rr                sta (z80_ix),y
003F35  3  A9 08                lda #8	; SPAWN
003F37  3  85 rr                sta z80_c
003F39  3  A9 07                lda #7
003F3B  3  85 rr                sta z80_b
003F3D  3  20 BA 2C             jsr spawn
003F40  3  A9 06        b00117: lda #CUSTOM	; CUSTOM
003F42  3  85 rr                sta z80_b
003F44  3  20 5F 31             jsr tded
003F47  3  C5 rr                cmp z80_b
003F49  3  F0 03                beq :+
003F4B  3  4C 68 3F             jmp b00201
003F4E  3               :
003F4E  3  A9 00                lda #0
003F50  3  A0 0B                ldy #11
003F52  3  D1 rr                cmp (z80_ix),y
003F54  3  F0 03                beq *+5
003F56  3  4C 62 3F             jmp b00187
003F59  3  A9 01                lda #1
003F5B  3  A0 0B                ldy #11
003F5D  3  91 rr                sta (z80_ix),y
003F5F  3  4C 68 3F             jmp b00201
003F62  3  A9 00        b00187: lda #0
003F64  3  A0 0B                ldy #11
003F66  3  91 rr                sta (z80_ix),y
003F68  3  A9 00        b00201: lda #0
003F6A  3  A0 0B                ldy #11
003F6C  3  D1 rr                cmp (z80_ix),y
003F6E  3  F0 03                beq *+5
003F70  3  4C C2 3F             jmp b00401
003F73  3  20 D8 30             jsr cangl	; CANGOLEFT
003F76  3  F0 03                beq :+
003F78  3  4C B9 3F             jmp b00383
003F7B  3               :
003F7B  3  A0 09                ldy #9 		; SPRITELEFT
003F7D  3  B1 rr                lda (z80_ix),y
003F7F  3  38                   sec
003F80  3  E9 02                sbc #2
003F82  3  91 rr                sta (z80_ix),y
003F84  3  A9 05                lda #5
003F86  3  A0 06                ldy #6
003F88  3  91 rr                sta (z80_ix),y
003F8A  3  A9 10                lda #16
003F8C  3  85 rr                sta z80_c
003F8E  3  A0 09                ldy #9
003F90  3  B1 rr                lda (z80_ix),y
003F92  3  38                   sec
003F93  3  E5 rr                sbc z80_c
003F95  3  A0 09                ldy #9
003F97  3  91 rr                sta (z80_ix),y
003F99  3  20 A3 30             jsr cangd	; CANGODOWN
003F9C  3  F0 03                beq :+
003F9E  3  4C A7 3F             jmp b00343
003FA1  3               :
003FA1  3  A9 01                lda #1
003FA3  3  A0 0B                ldy #11
003FA5  3  91 rr                sta (z80_ix),y
003FA7  3  A9 10        b00343: lda #16
003FA9  3  85 rr                sta z80_c
003FAB  3  A0 09                ldy #9
003FAD  3  B1 rr                lda (z80_ix),y
003FAF  3  18                   clc
003FB0  3  65 rr                adc z80_c
003FB2  3  A0 09                ldy #9
003FB4  3  91 rr                sta (z80_ix),y
003FB6  3  4C BF 3F             jmp b00397
003FB9  3  A9 01        b00383: lda #1
003FBB  3  A0 0B                ldy #11
003FBD  3  91 rr                sta (z80_ix),y
003FBF  3  4C 0E 40     b00397: jmp b00576
003FC2  3  20 EA 30     b00401: jsr cangr	; CANGORIGHT
003FC5  3  F0 03                beq :+
003FC7  3  4C 08 40             jmp b00562
003FCA  3               :
003FCA  3  A0 09                ldy #9 		; SPRITERIGHT
003FCC  3  B1 rr                lda (z80_ix),y
003FCE  3  18                   clc
003FCF  3  69 02                adc #2
003FD1  3  91 rr                sta (z80_ix),y
003FD3  3  A9 06                lda #6
003FD5  3  A0 06                ldy #6
003FD7  3  91 rr                sta (z80_ix),y
003FD9  3  A9 10                lda #16
003FDB  3  85 rr                sta z80_c
003FDD  3  A0 09                ldy #9
003FDF  3  B1 rr                lda (z80_ix),y
003FE1  3  18                   clc
003FE2  3  65 rr                adc z80_c
003FE4  3  A0 09                ldy #9
003FE6  3  91 rr                sta (z80_ix),y
003FE8  3  20 A3 30             jsr cangd	; CANGODOWN
003FEB  3  F0 03                beq :+
003FED  3  4C F6 3F             jmp b00522
003FF0  3               :
003FF0  3  A9 00                lda #0
003FF2  3  A0 0B                ldy #11
003FF4  3  91 rr                sta (z80_ix),y
003FF6  3  A9 10        b00522: lda #16
003FF8  3  85 rr                sta z80_c
003FFA  3  A0 09                ldy #9
003FFC  3  B1 rr                lda (z80_ix),y
003FFE  3  38                   sec
003FFF  3  E5 rr                sbc z80_c
004001  3  A0 09                ldy #9
004003  3  91 rr                sta (z80_ix),y
004005  3  4C 0E 40             jmp b00576
004008  3  A9 00        b00562: lda #0
00400A  3  A0 0B                ldy #11
00400C  3  91 rr                sta (z80_ix),y
00400E  3  A9 00        b00576: lda #0
004010  3  C5 rr                cmp vara
004012  3  F0 03                beq *+5
004014  3  4C 1C 40             jmp b00604
004017  3  A9 00                lda #0		; ANIMATE
004019  3  20 2B 36             jsr animsp
00401C  3  60           b00604: rts
00401D  3               evnt02:
00401D  3  A9 01                lda #1
00401F  3  C5 rr                cmp scno
004021  3  F0 03                beq *+5
004023  3  4C 8F 40             jmp c00231
004026  3  A9 01                lda #1
004028  3  C5 rr                cmp vart
00402A  3  F0 03                beq *+5
00402C  3  4C 40 40             jmp c00071
00402F  3  A9 0B                lda #11
004031  3  A0 06                ldy #6
004033  3  D1 rr                cmp (z80_ix),y
004035  3  F0 03                beq *+5
004037  3  4C 40 40             jmp c00071
00403A  3  A9 0A                lda #10
00403C  3  A0 06                ldy #6
00403E  3  91 rr                sta (z80_ix),y
004040  3  A9 00        c00071: lda #0 	; COLLISION
004042  3  85 rr                sta z80_b
004044  3  20 76 36             jsr sktyp
004047  3  B0 03                bcs :+
004049  3  4C 8F 40             jmp c00231
00404C  3               :
00404C  3  A9 0A                lda #10
00404E  3  A0 06                ldy #6
004050  3  D1 rr                cmp (z80_ix),y
004052  3  F0 03                beq *+5
004054  3  4C 7C 40             jmp c00193
004057  3  A9 02                lda #2
004059  3  C5 rr                cmp vars
00405B  3  F0 03                beq *+5
00405D  3  4C 69 40             jmp c00154
004060  3  A9 32                lda #50		; BEEP
004062  3  0A                   asl a
004063  3  8D 85 27             sta sndtyp
004066  3  4C 7C 40             jmp c00193
004069  3  A9 00        c00154: lda #0
00406B  3  C5 rr                cmp vars
00406D  3  F0 03                beq *+5
00406F  3  4C 7C 40             jmp c00193
004072  3  A9 32                lda #50		; BEEP
004074  3  0A                   asl a
004075  3  8D 85 27             sta sndtyp
004078  3  A9 00                lda #0
00407A  3  85 rr                sta vart
00407C  3  A9 00        c00193: lda #0
00407E  3  C5 rr                cmp varc
004080  3  F0 03                beq *+5
004082  3  4C 8F 40             jmp c00231
004085  3  A9 00                lda #0
004087  3  85 rr                sta vart
004089  3  A9 0B                lda #11
00408B  3  A0 06                ldy #6
00408D  3  91 rr                sta (z80_ix),y
00408F  3  A9 06        c00231: lda #6
004091  3  C5 rr                cmp scno
004093  3  F0 03                beq *+5
004095  3  4C 05 41             jmp c00472
004098  3  A9 00                lda #0
00409A  3  C5 rr                cmp vart
00409C  3  F0 03                beq *+5
00409E  3  4C D1 40             jmp c00364
0040A1  3  A9 00                lda #0
0040A3  3  C5 rr                cmp vars
0040A5  3  F0 03                beq *+5
0040A7  3  4C D1 40             jmp c00364
0040AA  3  A9 00                lda #0 	; COLLISION
0040AC  3  85 rr                sta z80_b
0040AE  3  20 76 36             jsr sktyp
0040B1  3  B0 03                bcs :+
0040B3  3  4C D1 40             jmp c00364
0040B6  3               :
0040B6  3  A9 0B                lda #11
0040B8  3  A0 06                ldy #6
0040BA  3  D1 rr                cmp (z80_ix),y
0040BC  3  F0 03                beq *+5
0040BE  3  4C C7 40             jmp c00343
0040C1  3  A9 32                lda #50		; BEEP
0040C3  3  0A                   asl a
0040C4  3  8D 85 27             sta sndtyp
0040C7  3  A9 0A        c00343: lda #10
0040C9  3  A0 06                ldy #6
0040CB  3  91 rr                sta (z80_ix),y
0040CD  3  A9 01                lda #1
0040CF  3  85 rr                sta vars
0040D1  3  A9 0A        c00364: lda #10
0040D3  3  C5 rr                cmp varc
0040D5  3  F0 03                beq *+5
0040D7  3  4C 05 41             jmp c00472
0040DA  3  A9 01                lda #1
0040DC  3  C5 rr                cmp vars
0040DE  3  F0 03                beq *+5
0040E0  3  4C 05 41             jmp c00472
0040E3  3  A9 0A                lda #10
0040E5  3  A0 06                ldy #6
0040E7  3  91 rr                sta (z80_ix),y
0040E9  3  A9 00                lda #0 	; COLLISION
0040EB  3  85 rr                sta z80_b
0040ED  3  20 76 36             jsr sktyp
0040F0  3  B0 03                bcs :+
0040F2  3  4C 05 41             jmp c00472
0040F5  3               :
0040F5  3  A9 32                lda #50		; BEEP
0040F7  3  0A                   asl a
0040F8  3  8D 85 27             sta sndtyp
0040FB  3  A9 0B                lda #11
0040FD  3  A0 06                ldy #6
0040FF  3  91 rr                sta (z80_ix),y
004101  3  A9 02                lda #2
004103  3  85 rr                sta vars
004105  3  A9 06        c00472: lda #6
004107  3  C5 rr                cmp scno
004109  3  F0 03                beq *+5
00410B  3  4C 26 41             jmp c00536
00410E  3  A9 09                lda #9
004110  3  C5 rr                cmp varc
004112  3  B0 03                bcs *+5
004114  3  4C 26 41             jmp c00536
004117  3  A9 01                lda #1
004119  3  C5 rr                cmp vars
00411B  3  F0 03                beq *+5
00411D  3  4C 26 41             jmp c00536
004120  3  A9 0A                lda #10
004122  3  A0 06                ldy #6
004124  3  91 rr                sta (z80_ix),y
004126  3  A9 01        c00536: lda #1
004128  3  C5 rr                cmp scno
00412A  3  F0 03                beq *+5
00412C  3  4C 67 41             jmp c00669
00412F  3  A9 02                lda #2
004131  3  C5 rr                cmp vars
004133  3  F0 03                beq *+5
004135  3  4C 67 41             jmp c00669
004138  3  A9 0B                lda #11
00413A  3  A0 06                ldy #6
00413C  3  D1 rr                cmp (z80_ix),y
00413E  3  F0 03                beq *+5
004140  3  4C 67 41             jmp c00669
004143  3  A9 00                lda #0 	; COLLISION
004145  3  85 rr                sta z80_b
004147  3  20 76 36             jsr sktyp
00414A  3  B0 03                bcs :+
00414C  3  4C 67 41             jmp c00669
00414F  3               :
00414F  3  A9 32                lda #50		; BEEP
004151  3  0A                   asl a
004152  3  8D 85 27             sta sndtyp
004155  3  A9 0A                lda #10
004157  3  A0 06                ldy #6
004159  3  91 rr                sta (z80_ix),y
00415B  3  A9 03                lda #3
00415D  3  85 rr                sta vars
00415F  3  A9 28                lda #40
004161  3  85 rr                sta vari
004163  3  A9 00                lda #0
004165  3  85 rr                sta vart
004167  3  60           c00669: rts
004168  3               evnt03:
004168  3  A9 03                lda #3
00416A  3  C5 rr                cmp vars
00416C  3  F0 03                beq *+5
00416E  3  4C 82 41             jmp d00057
004171  3  A9 FF                lda #255	; REMOVE
004173  3  A0 05                ldy #5
004175  3  91 rr                sta (z80_ix),y
004177  3  A9 05                lda #5	; SPAWN
004179  3  85 rr                sta z80_c
00417B  3  A9 09                lda #9
00417D  3  85 rr                sta z80_b
00417F  3  20 BA 2C             jsr spawn
004182  3  A9 00        d00057: lda #0 	; COLLISION
004184  3  85 rr                sta z80_b
004186  3  20 76 36             jsr sktyp
004189  3  B0 03                bcs :+
00418B  3  4C C4 41             jmp d00200
00418E  3               :
00418E  3  A9 01                lda #1
004190  3  A0 07                ldy #7
004192  3  D1 rr                cmp (z80_ix),y
004194  3  B0 03                bcs *+5
004196  3  4C 9C 41             jmp d00109
004199  3  4C C4 41             jmp d00200
00419C  3  A9 01        d00109: lda #1
00419E  3  85 rr                sta varj
0041A0  3  A5 rr                lda skptr	; OTHER
0041A2  3  85 rr                sta z80_x
0041A4  3  A5 rr                lda skptr+1
0041A6  3  85 rr                sta z80_i
0041A8  3  A9 05                lda #5	; SPAWN
0041AA  3  85 rr                sta z80_c
0041AC  3  A9 09                lda #9
0041AE  3  85 rr                sta z80_b
0041B0  3  20 BA 2C             jsr spawn
0041B3  3  A9 FF                lda #255	; REMOVE
0041B5  3  A0 05                ldy #5
0041B7  3  91 rr                sta (z80_ix),y
0041B9  3  A9 08                lda #8	; SPAWN
0041BB  3  85 rr                sta z80_c
0041BD  3  A9 07                lda #7
0041BF  3  85 rr                sta z80_b
0041C1  3  20 BA 2C             jsr spawn
0041C4  3  A9 0C        d00200: lda #12
0041C6  3  A0 06                ldy #6
0041C8  3  D1 rr                cmp (z80_ix),y
0041CA  3  F0 03                beq *+5
0041CC  3  4C CF 41             jmp d00222
0041CF  3  A9 32        d00222: lda #50
0041D1  3  85 rr                sta z80_d	; GETRANDOM
0041D3  3  20 68 32             jsr random
0041D6  3  85 rr                sta z80_h
0041D8  3  20 54 2B             jsr imul
0041DB  3  A5 rr                lda z80_h
0041DD  3  85 rr                sta varrnd
0041DF  3  A9 19                lda #25
0041E1  3  C5 rr                cmp varrnd
0041E3  3  B0 03                bcs *+5
0041E5  3  4C EF 41             jmp d00287
0041E8  3  A9 19                lda #25
0041EA  3  85 rr                sta varopt
0041EC  3  4C F3 41             jmp d00297
0041EF  3  A5 rr        d00287: lda varrnd
0041F1  3  85 rr                sta varopt
0041F3  3  A9 00        d00297: lda #0
0041F5  3  A0 0B                ldy #11
0041F7  3  D1 rr                cmp (z80_ix),y
0041F9  3  F0 03                beq *+5
0041FB  3  4C 96 42             jmp d00646
0041FE  3  A9 00                lda #0
004200  3  A0 0A                ldy #10
004202  3  D1 rr                cmp (z80_ix),y
004204  3  F0 03                beq *+5
004206  3  4C 71 42             jmp d00567
004209  3  A9 00                lda #0
00420B  3  C5 rr                cmp vara
00420D  3  F0 03                beq *+5
00420F  3  4C 6E 42             jmp d00562
004212  3  A9 00                lda #0		; ANIMATE
004214  3  20 2B 36             jsr animsp
004217  3  A9 05                lda #5
004219  3  A0 07                ldy #7
00421B  3  D1 rr                cmp (z80_ix),y
00421D  3  F0 03                beq *+5
00421F  3  4C 6E 42             jmp d00562
004222  3  A9 04                lda #4
004224  3  A0 06                ldy #6
004226  3  D1 rr                cmp (z80_ix),y
004228  3  F0 03                beq *+5
00422A  3  4C 68 42             jmp d00549
00422D  3  A9 10                lda #16
00422F  3  85 rr                sta z80_c
004231  3  A0 08                ldy #8
004233  3  B1 rr                lda (z80_ix),y
004235  3  38                   sec
004236  3  E5 rr                sbc z80_c
004238  3  A0 08                ldy #8
00423A  3  91 rr                sta (z80_ix),y
00423C  3  A9 08                lda #8	; SPAWN
00423E  3  85 rr                sta z80_c
004240  3  A9 03                lda #3
004242  3  85 rr                sta z80_b
004244  3  20 BA 2C             jsr spawn
004247  3  A9 10                lda #16
004249  3  85 rr                sta z80_c
00424B  3  A0 08                ldy #8
00424D  3  B1 rr                lda (z80_ix),y
00424F  3  18                   clc
004250  3  65 rr                adc z80_c
004252  3  A0 08                ldy #8
004254  3  91 rr                sta (z80_ix),y
004256  3  A9 0F                lda #15		; BEEP
004258  3  0A                   asl a
004259  3  8D 85 27             sta sndtyp
00425C  3  A9 0F                lda #15		; BEEP
00425E  3  0A                   asl a
00425F  3  8D 85 27             sta sndtyp
004262  3  A9 0F                lda #15		; BEEP
004264  3  0A                   asl a
004265  3  8D 85 27             sta sndtyp
004268  3  A9 01        d00549: lda #1
00426A  3  A0 0A                ldy #10
00426C  3  91 rr                sta (z80_ix),y
00426E  3  4C 96 42     d00562: jmp d00646
004271  3  A9 00        d00567: lda #0
004273  3  C5 rr                cmp vara
004275  3  F0 03                beq *+5
004277  3  4C 96 42             jmp d00646
00427A  3  A9 00                lda #0		; ANIMATEBACK
00427C  3  20 51 36             jsr animbk
00427F  3  A9 00                lda #0
004281  3  A0 07                ldy #7
004283  3  D1 rr                cmp (z80_ix),y
004285  3  F0 03                beq *+5
004287  3  4C 96 42             jmp d00646
00428A  3  A5 rr                lda varopt
00428C  3  A0 0B                ldy #11
00428E  3  91 rr                sta (z80_ix),y
004290  3  A9 00                lda #0
004292  3  A0 0A                ldy #10
004294  3  91 rr                sta (z80_ix),y
004296  3  A9 00        d00646: lda #0
004298  3  A0 0B                ldy #11
00429A  3  D1 rr                cmp (z80_ix),y
00429C  3  90 03                bcc *+5
00429E  3  4C AC 42             jmp d00695
0042A1  3  A0 0B                ldy #11
0042A3  3  B1 rr                lda (z80_ix),y
0042A5  3  38                   sec
0042A6  3  E9 01                sbc #1
0042A8  3  A0 0B                ldy #11
0042AA  3  91 rr                sta (z80_ix),y
0042AC  3  60           d00695: rts
0042AD  3               evnt04:
0042AD  3  60                   rts
0042AE  3               evnt05:
0042AE  3  A9 14                lda #20
0042B0  3  85 rr                sta varr
0042B2  3  A9 06                lda #6
0042B4  3  A0 07                ldy #7
0042B6  3  D1 rr                cmp (z80_ix),y
0042B8  3  B0 03                bcs *+5
0042BA  3  4C D4 42             jmp f00077
0042BD  3  A9 00                lda #0
0042BF  3  C5 rr                cmp varj
0042C1  3  F0 03                beq *+5
0042C3  3  4C C6 42             jmp f00049
0042C6  3  A9 00        f00049: lda #0
0042C8  3  C5 rr                cmp vara
0042CA  3  F0 03                beq *+5
0042CC  3  4C D4 42             jmp f00077
0042CF  3  A9 00                lda #0		; ANIMATE
0042D1  3  20 2B 36             jsr animsp
0042D4  3  A9 07        f00077: lda #7
0042D6  3  A0 07                ldy #7
0042D8  3  D1 rr                cmp (z80_ix),y
0042DA  3  F0 03                beq *+5
0042DC  3  4C F2 42             jmp f00140
0042DF  3  A9 FF                lda #255	; REMOVE
0042E1  3  A0 05                ldy #5
0042E3  3  91 rr                sta (z80_ix),y
0042E5  3  A9 03                lda #3
0042E7  3  C5 rr                cmp vars
0042E9  3  F0 03                beq *+5
0042EB  3  4C F2 42             jmp f00140
0042EE  3  A9 14                lda #20
0042F0  3  85 rr                sta vari
0042F2  3  60           f00140: rts
0042F3  3               evnt06:
0042F3  3  A9 00                lda #0
0042F5  3  C5 rr                cmp varr
0042F7  3  90 03                bcc *+5
0042F9  3  4C 03 43             jmp g00034
0042FC  3  A5 rr                lda varr
0042FE  3  38                   sec
0042FF  3  E9 01                sbc #1
004301  3  85 rr                sta varr
004303  3  A9 03        g00034: lda #3
004305  3  A0 07                ldy #7
004307  3  D1 rr                cmp (z80_ix),y
004309  3  B0 03                bcs *+5
00430B  3  4C 2F 43             jmp g00127
00430E  3  A0 08                ldy #8
004310  3  B1 rr                lda (z80_ix),y
004312  3  A0 0B                ldy #11
004314  3  91 rr                sta (z80_ix),y
004316  3  A0 09                ldy #9
004318  3  B1 rr                lda (z80_ix),y
00431A  3  A0 0C                ldy #12
00431C  3  91 rr                sta (z80_ix),y
00431E  3  A9 00                lda #0
004320  3  C5 rr                cmp vara
004322  3  F0 03                beq *+5
004324  3  4C 2C 43             jmp g00122
004327  3  A9 00                lda #0		; ANIMATE
004329  3  20 2B 36             jsr animsp
00432C  3  4C 7A 43     g00122: jmp g00293
00432F  3  20 A3 30     g00127: jsr cangd	; CANGODOWN
004332  3  F0 03                beq :+
004334  3  4C 4F 43             jmp g00196
004337  3               :
004337  3  A9 04                lda #4
004339  3  A0 07                ldy #7
00433B  3  91 rr                sta (z80_ix),y
00433D  3  A9 04                lda #4
00433F  3  85 rr                sta z80_c
004341  3  A0 08                ldy #8
004343  3  B1 rr                lda (z80_ix),y
004345  3  18                   clc
004346  3  65 rr                adc z80_c
004348  3  A0 08                ldy #8
00434A  3  91 rr                sta (z80_ix),y
00434C  3  4C 7A 43             jmp g00293
00434F  3  A9 00        g00196: lda #0
004351  3  A0 07                ldy #7
004353  3  91 rr                sta (z80_ix),y
004355  3  A9 05                lda #5	; SPAWN
004357  3  85 rr                sta z80_c
004359  3  A9 09                lda #9
00435B  3  85 rr                sta z80_b
00435D  3  20 BA 2C             jsr spawn
004360  3  A9 14                lda #20		; BEEP
004362  3  0A                   asl a
004363  3  8D 85 27             sta sndtyp
004366  3  A9 14                lda #20
004368  3  85 rr                sta varr
00436A  3  A0 0B                ldy #11
00436C  3  B1 rr                lda (z80_ix),y
00436E  3  A0 08                ldy #8
004370  3  91 rr                sta (z80_ix),y
004372  3  A0 0C                ldy #12
004374  3  B1 rr                lda (z80_ix),y
004376  3  A0 09                ldy #9
004378  3  91 rr                sta (z80_ix),y
00437A  3  A9 00        g00293: lda #0 	; COLLISION
00437C  3  85 rr                sta z80_b
00437E  3  20 76 36             jsr sktyp
004381  3  B0 03                bcs :+
004383  3  4C B9 43             jmp g00431
004386  3               :
004386  3  A9 04                lda #4
004388  3  A0 07                ldy #7
00438A  3  D1 rr                cmp (z80_ix),y
00438C  3  F0 03                beq *+5
00438E  3  4C B9 43             jmp g00431
004391  3  A5 rr                lda skptr	; OTHER
004393  3  85 rr                sta z80_x
004395  3  A5 rr                lda skptr+1
004397  3  85 rr                sta z80_i
004399  3  A9 01                lda #1
00439B  3  85 rr                sta varj
00439D  3  A9 05                lda #5	; SPAWN
00439F  3  85 rr                sta z80_c
0043A1  3  A9 09                lda #9
0043A3  3  85 rr                sta z80_b
0043A5  3  20 BA 2C             jsr spawn
0043A8  3  A9 FF                lda #255	; REMOVE
0043AA  3  A0 05                ldy #5
0043AC  3  91 rr                sta (z80_ix),y
0043AE  3  A9 08                lda #8	; SPAWN
0043B0  3  85 rr                sta z80_c
0043B2  3  A9 07                lda #7
0043B4  3  85 rr                sta z80_b
0043B6  3  20 BA 2C             jsr spawn
0043B9  3  A9 05        g00431: lda #DEADLY	; DEADLY
0043BB  3  85 rr                sta z80_b
0043BD  3  20 5F 31             jsr tded
0043C0  3  C5 rr                cmp z80_b
0043C2  3  F0 03                beq :+
0043C4  3  4C 0C 44             jmp g00619
0043C7  3               :
0043C7  3  A9 00                lda #0
0043C9  3  A0 07                ldy #7
0043CB  3  91 rr                sta (z80_ix),y
0043CD  3  A9 04                lda #4
0043CF  3  85 rr                sta z80_c
0043D1  3  A0 08                ldy #8
0043D3  3  B1 rr                lda (z80_ix),y
0043D5  3  38                   sec
0043D6  3  E5 rr                sbc z80_c
0043D8  3  A0 08                ldy #8
0043DA  3  91 rr                sta (z80_ix),y
0043DC  3  A9 05                lda #5	; SPAWN
0043DE  3  85 rr                sta z80_c
0043E0  3  A9 09                lda #9
0043E2  3  85 rr                sta z80_b
0043E4  3  20 BA 2C             jsr spawn
0043E7  3  A9 14                lda #20		; BEEP
0043E9  3  0A                   asl a
0043EA  3  8D 85 27             sta sndtyp
0043ED  3  A9 04                lda #4
0043EF  3  85 rr                sta z80_c
0043F1  3  A0 08                ldy #8
0043F3  3  B1 rr                lda (z80_ix),y
0043F5  3  18                   clc
0043F6  3  65 rr                adc z80_c
0043F8  3  A0 08                ldy #8
0043FA  3  91 rr                sta (z80_ix),y
0043FC  3  A0 0B                ldy #11
0043FE  3  B1 rr                lda (z80_ix),y
004400  3  A0 08                ldy #8
004402  3  91 rr                sta (z80_ix),y
004404  3  A0 0C                ldy #12
004406  3  B1 rr                lda (z80_ix),y
004408  3  A0 09                ldy #9
00440A  3  91 rr                sta (z80_ix),y
00440C  3  60           g00619: rts
00440D  3               evnt07:
00440D  3  A9 00                lda #0
00440F  3  A0 0B                ldy #11
004411  3  D1 rr                cmp (z80_ix),y
004413  3  F0 03                beq *+5
004415  3  4C 35 44             jmp h00088
004418  3  20 6E 30             jsr cangu	; CANGOUP
00441B  3  F0 03                beq :+
00441D  3  4C 2C 44             jmp h00070
004420  3               :
004420  3  A0 08                ldy #8 		; SPRITEUP
004422  3  B1 rr                lda (z80_ix),y
004424  3  38                   sec
004425  3  E9 02                sbc #2
004427  3  91 rr                sta (z80_ix),y
004429  3  4C 32 44             jmp h00083
00442C  3  A9 01        h00070: lda #1
00442E  3  A0 0B                ldy #11
004430  3  91 rr                sta (z80_ix),y
004432  3  4C 4F 44     h00083: jmp h00149
004435  3  20 A3 30     h00088: jsr cangd	; CANGODOWN
004438  3  F0 03                beq :+
00443A  3  4C 49 44             jmp h00135
00443D  3               :
00443D  3  A0 08                ldy #8 		; SPRITEDOWN
00443F  3  B1 rr                lda (z80_ix),y
004441  3  18                   clc
004442  3  69 02                adc #2
004444  3  91 rr                sta (z80_ix),y
004446  3  4C 4F 44             jmp h00149
004449  3  A9 00        h00135: lda #0
00444B  3  A0 0B                ldy #11
00444D  3  91 rr                sta (z80_ix),y
00444F  3  A9 06        h00149: lda #CUSTOM	; CUSTOM
004451  3  85 rr                sta z80_b
004453  3  20 5F 31             jsr tded
004456  3  C5 rr                cmp z80_b
004458  3  F0 03                beq :+
00445A  3  4C 77 44             jmp h00232
00445D  3               :
00445D  3  A9 01                lda #1
00445F  3  A0 0B                ldy #11
004461  3  D1 rr                cmp (z80_ix),y
004463  3  F0 03                beq *+5
004465  3  4C 71 44             jmp h00219
004468  3  A9 00                lda #0
00446A  3  A0 0B                ldy #11
00446C  3  91 rr                sta (z80_ix),y
00446E  3  4C 77 44             jmp h00232
004471  3  A9 01        h00219: lda #1
004473  3  A0 0B                ldy #11
004475  3  91 rr                sta (z80_ix),y
004477  3  A9 05        h00232: lda #DEADLY	; DEADLY
004479  3  85 rr                sta z80_b
00447B  3  20 5F 31             jsr tded
00447E  3  C5 rr                cmp z80_b
004480  3  F0 03                beq :+
004482  3  4C 9F 44             jmp h00316
004485  3               :
004485  3  A9 01                lda #1
004487  3  A0 0B                ldy #11
004489  3  D1 rr                cmp (z80_ix),y
00448B  3  F0 03                beq *+5
00448D  3  4C 99 44             jmp h00302
004490  3  A9 00                lda #0
004492  3  A0 0B                ldy #11
004494  3  91 rr                sta (z80_ix),y
004496  3  4C 9F 44             jmp h00316
004499  3  A9 01        h00302: lda #1
00449B  3  A0 0B                ldy #11
00449D  3  91 rr                sta (z80_ix),y
00449F  3  A9 00        h00316: lda #0
0044A1  3  C5 rr                cmp vard
0044A3  3  F0 03                beq *+5
0044A5  3  4C AD 44             jmp h00344
0044A8  3  A9 00                lda #0		; ANIMATE
0044AA  3  20 2B 36             jsr animsp
0044AD  3  A9 00        h00344: lda #0 	; COLLISION
0044AF  3  85 rr                sta z80_b
0044B1  3  20 76 36             jsr sktyp
0044B4  3  B0 03                bcs :+
0044B6  3  4C E1 44             jmp h00459
0044B9  3               :
0044B9  3  A9 01                lda #1
0044BB  3  85 rr                sta varj
0044BD  3  A5 rr                lda skptr	; OTHER
0044BF  3  85 rr                sta z80_x
0044C1  3  A5 rr                lda skptr+1
0044C3  3  85 rr                sta z80_i
0044C5  3  A9 05                lda #5	; SPAWN
0044C7  3  85 rr                sta z80_c
0044C9  3  A9 09                lda #9
0044CB  3  85 rr                sta z80_b
0044CD  3  20 BA 2C             jsr spawn
0044D0  3  A9 FF                lda #255	; REMOVE
0044D2  3  A0 05                ldy #5
0044D4  3  91 rr                sta (z80_ix),y
0044D6  3  A9 08                lda #8	; SPAWN
0044D8  3  85 rr                sta z80_c
0044DA  3  A9 07                lda #7
0044DC  3  85 rr                sta z80_b
0044DE  3  20 BA 2C             jsr spawn
0044E1  3  60           h00459: rts
0044E2  3               evnt08:
0044E2  3  A9 03                lda #3
0044E4  3  A0 06                ldy #6
0044E6  3  D1 rr                cmp (z80_ix),y
0044E8  3  F0 03                beq *+5
0044EA  3  4C 06 45             jmp i00078
0044ED  3  A9 00                lda #0		; ANIMATE
0044EF  3  20 2B 36             jsr animsp
0044F2  3  A9 05                lda #5
0044F4  3  A0 07                ldy #7
0044F6  3  D1 rr                cmp (z80_ix),y
0044F8  3  B0 03                bcs *+5
0044FA  3  4C 00 45             jmp i00062
0044FD  3  4C 06 45             jmp i00078
004500  3  A9 FF        i00062: lda #255	; REMOVE
004502  3  A0 05                ldy #5
004504  3  91 rr                sta (z80_ix),y
004506  3  A9 07        i00078: lda #7
004508  3  A0 06                ldy #6
00450A  3  D1 rr                cmp (z80_ix),y
00450C  3  F0 03                beq *+5
00450E  3  4C 40 45             jmp i00200
004511  3  A9 00                lda #0
004513  3  C5 rr                cmp vard
004515  3  F0 03                beq *+5
004517  3  4C 1F 45             jmp i00128
00451A  3  A9 00                lda #0		; ANIMATE
00451C  3  20 2B 36             jsr animsp
00451F  3  A9 09        i00128: lda #9
004521  3  A0 08                ldy #8
004523  3  D1 rr                cmp (z80_ix),y
004525  3  90 03                bcc *+5
004527  3  4C 3C 45             jmp i00189
00452A  3  A9 02                lda #2
00452C  3  85 rr                sta z80_c
00452E  3  A0 08                ldy #8
004530  3  B1 rr                lda (z80_ix),y
004532  3  38                   sec
004533  3  E5 rr                sbc z80_c
004535  3  A0 08                ldy #8
004537  3  91 rr                sta (z80_ix),y
004539  3  4C 40 45             jmp i00200
00453C  3  A9 01        i00189: lda #1 		; KILL
00453E  3  85 rr                sta deadf
004540  3  A9 09        i00200: lda #9
004542  3  A0 06                ldy #6
004544  3  D1 rr                cmp (z80_ix),y
004546  3  F0 03                beq *+5
004548  3  4C 6A 45             jmp i00288
00454B  3  A9 00                lda #0
00454D  3  C5 rr                cmp vara
00454F  3  F0 03                beq *+5
004551  3  4C 6A 45             jmp i00288
004554  3  A9 00                lda #0		; ANIMATE
004556  3  20 2B 36             jsr animsp
004559  3  A9 07                lda #7
00455B  3  A0 07                ldy #7
00455D  3  D1 rr                cmp (z80_ix),y
00455F  3  F0 03                beq *+5
004561  3  4C 6A 45             jmp i00288
004564  3  A9 FF                lda #255	; REMOVE
004566  3  A0 05                ldy #5
004568  3  91 rr                sta (z80_ix),y
00456A  3  60           i00288: rts
00456B  3               evnt09:
00456B  3  A9 07                lda #7
00456D  3  A0 05                ldy #5
00456F  3  D1 rr                cmp (z80_ix),y
004571  3  F0 03                beq *+5
004573  3  4C 7C 45             jmp j00037
004576  3  A9 00                lda #0
004578  3  A0 0B                ldy #11
00457A  3  91 rr                sta (z80_ix),y
00457C  3  A9 00        j00037: lda #0
00457E  3  A0 05                ldy #5
004580  3  D1 rr                cmp (z80_ix),y
004582  3  F0 03                beq *+5
004584  3  4C 93 45             jmp j00087
004587  3  A5 rr                lda varo
004589  3  A0 08                ldy #8
00458B  3  91 rr                sta (z80_ix),y
00458D  3  A5 rr                lda varp
00458F  3  A0 09                ldy #9
004591  3  91 rr                sta (z80_ix),y
004593  3  A9 03        j00087: lda #3
004595  3  A0 05                ldy #5
004597  3  D1 rr                cmp (z80_ix),y
004599  3  F0 03                beq *+5
00459B  3  4C AA 45             jmp j00136
00459E  3  A9 00                lda #0
0045A0  3  A0 0B                ldy #11
0045A2  3  91 rr                sta (z80_ix),y
0045A4  3  A9 00                lda #0
0045A6  3  A0 0A                ldy #10
0045A8  3  91 rr                sta (z80_ix),y
0045AA  3  A9 06        j00136: lda #6
0045AC  3  A0 05                ldy #5
0045AE  3  D1 rr                cmp (z80_ix),y
0045B0  3  F0 03                beq *+5
0045B2  3  4C B9 45             jmp j00166
0045B5  3  A9 00                lda #0
0045B7  3  85 rr                sta varr
0045B9  3  A9 01        j00166: lda #1
0045BB  3  A0 05                ldy #5
0045BD  3  D1 rr                cmp (z80_ix),y
0045BF  3  F0 03                beq *+5
0045C1  3  4C CA 45             jmp j00201
0045C4  3  A9 00                lda #0
0045C6  3  A0 0C                ldy #12
0045C8  3  91 rr                sta (z80_ix),y
0045CA  3  60           j00201: rts
0045CB  3               evnt10:
0045CB  3  A9 16                lda #22
0045CD  3  C5 rr                cmp scno
0045CF  3  90 03                bcc *+5
0045D1  3  4C DB 45             jmp k00031
0045D4  3  A9 01                lda #1
0045D6  3  85 rr                sta vark
0045D8  3  4C EF 45             jmp k00069
0045DB  3  A9 13        k00031: lda #19
0045DD  3  C5 rr                cmp scno
0045DF  3  F0 03                beq *+5
0045E1  3  4C EB 45             jmp k00061
0045E4  3  A9 01                lda #1
0045E6  3  85 rr                sta vark
0045E8  3  4C EF 45             jmp k00069
0045EB  3  A9 00        k00061: lda #0
0045ED  3  85 rr                sta vark
0045EF  3  A9 00        k00069: lda #0
0045F1  3  C5 rr                cmp vart
0045F3  3  F0 03                beq *+5
0045F5  3  4C 0E 46             jmp k00131
0045F8  3  A9 00                lda #0
0045FA  3  C5 rr                cmp vars
0045FC  3  F0 03                beq *+5
0045FE  3  4C 0E 46             jmp k00131
004601  3  A9 16                lda #22
004603  3  85 rr                sta chary
004605  3  A9 03                lda #3
004607  3  85 rr                sta charx
004609  3  A9 0A                lda #10  	; MESSAGE
00460B  3  20 BF 32             jsr dmsg
00460E  3  A9 01        k00131: lda #1
004610  3  C5 rr                cmp vart
004612  3  F0 03                beq *+5
004614  3  4C 2D 46             jmp k00192
004617  3  A9 00                lda #0
004619  3  C5 rr                cmp vars
00461B  3  F0 03                beq *+5
00461D  3  4C 2D 46             jmp k00192
004620  3  A9 16                lda #22
004622  3  85 rr                sta chary
004624  3  A9 03                lda #3
004626  3  85 rr                sta charx
004628  3  A9 09                lda #9  	; MESSAGE
00462A  3  20 BF 32             jsr dmsg
00462D  3  A9 00        k00192: lda #0
00462F  3  C5 rr                cmp vart
004631  3  F0 03                beq *+5
004633  3  4C 55 46             jmp k00270
004636  3  A9 01                lda #1
004638  3  C5 rr                cmp vars
00463A  3  F0 03                beq *+5
00463C  3  4C 55 46             jmp k00270
00463F  3  A9 00                lda #0
004641  3  C5 rr                cmp varc
004643  3  F0 03                beq *+5
004645  3  4C 55 46             jmp k00270
004648  3  A9 16                lda #22
00464A  3  85 rr                sta chary
00464C  3  A9 02                lda #2
00464E  3  85 rr                sta charx
004650  3  A9 0B                lda #11  	; MESSAGE
004652  3  20 BF 32             jsr dmsg
004655  3  A9 01        k00270: lda #1
004657  3  C5 rr                cmp vars
004659  3  F0 03                beq *+5
00465B  3  4C 74 46             jmp k00332
00465E  3  A9 0A                lda #10
004660  3  C5 rr                cmp varc
004662  3  F0 03                beq *+5
004664  3  4C 74 46             jmp k00332
004667  3  A9 16                lda #22
004669  3  85 rr                sta chary
00466B  3  A9 02                lda #2
00466D  3  85 rr                sta charx
00466F  3  A9 0D                lda #13  	; MESSAGE
004671  3  20 BF 32             jsr dmsg
004674  3  A9 02        k00332: lda #2
004676  3  C5 rr                cmp vars
004678  3  F0 03                beq *+5
00467A  3  4C 93 46             jmp k00394
00467D  3  A9 0A                lda #10
00467F  3  C5 rr                cmp varc
004681  3  F0 03                beq *+5
004683  3  4C 93 46             jmp k00394
004686  3  A9 16                lda #22
004688  3  85 rr                sta chary
00468A  3  A9 02                lda #2
00468C  3  85 rr                sta charx
00468E  3  A9 0C                lda #12  	; MESSAGE
004690  3  20 BF 32             jsr dmsg
004693  3  A9 03        k00394: lda #3
004695  3  C5 rr                cmp vars
004697  3  F0 03                beq *+5
004699  3  4C BC 46             jmp k00475
00469C  3  A9 00                lda #0
00469E  3  C5 rr                cmp vari
0046A0  3  90 03                bcc *+5
0046A2  3  4C B8 46             jmp k00464
0046A5  3  A9 00                lda #0
0046A7  3  C5 rr                cmp vard
0046A9  3  F0 03                beq *+5
0046AB  3  4C B5 46             jmp k00459
0046AE  3  A5 rr                lda vari
0046B0  3  38                   sec
0046B1  3  E9 01                sbc #1
0046B3  3  85 rr                sta vari
0046B5  3  4C BC 46     k00459: jmp k00475
0046B8  3  A9 01        k00464: lda #1		; ENDGAME
0046BA  3  85 rr                sta gamwon
0046BC  3  A9 01        k00475: lda #1
0046BE  3  C5 rr                cmp vara
0046C0  3  F0 03                beq *+5
0046C2  3  4C DC 46             jmp k00537
0046C5  3  A9 00                lda #0
0046C7  3  85 rr                sta vara
0046C9  3  A9 FE                lda #254
0046CB  3  C5 rr                cmp varb
0046CD  3  B0 03                bcs *+5
0046CF  3  4C D9 46             jmp k00532
0046D2  3  A5 rr                lda varb
0046D4  3  18                   clc
0046D5  3  69 01                adc #1
0046D7  3  85 rr                sta varb
0046D9  3  4C E3 46     k00532: jmp k00552
0046DC  3  A5 rr        k00537: lda vara
0046DE  3  18                   clc
0046DF  3  69 01                adc #1
0046E1  3  85 rr                sta vara
0046E3  3  A9 03        k00552: lda #3
0046E5  3  C5 rr                cmp vard
0046E7  3  F0 03                beq *+5
0046E9  3  4C F3 46             jmp k00582
0046EC  3  A9 00                lda #0
0046EE  3  85 rr                sta vard
0046F0  3  4C FA 46             jmp k00597
0046F3  3  A5 rr        k00582: lda vard
0046F5  3  18                   clc
0046F6  3  69 01                adc #1
0046F8  3  85 rr                sta vard
0046FA  3  60           k00597: rts
0046FB  3               evnt11:
0046FB  3  A9 15                lda #21
0046FD  3  85 rr                sta chary
0046FF  3  A9 04                lda #4
004701  3  85 rr                sta charx
004703  3  A9 07                lda #7  	; MESSAGE
004705  3  20 BF 32             jsr dmsg
004708  3  A9 15                lda #21
00470A  3  85 rr                sta chary
00470C  3  A9 0A                lda #10
00470E  3  85 rr                sta charx
004710  3  A5 rr                lda numlif	; DISPLAY
004712  3  20 06 37             jsr disply
004715  3  A9 15                lda #21
004717  3  85 rr                sta chary
004719  3  A9 14                lda #20
00471B  3  85 rr                sta charx
00471D  3  A9 08                lda #8  	; MESSAGE
00471F  3  20 BF 32             jsr dmsg
004722  3  A9 15                lda #21
004724  3  85 rr                sta chary
004726  3  A9 1B                lda #27
004728  3  85 rr                sta charx
00472A  3  A5 rr                lda varc	; DISPLAY
00472C  3  20 06 37             jsr disply
00472F  3  60                   rts
004730  3               evnt12:
004730  3  60                   rts
004731  3               evnt13:
004731  3  A9 02                lda #2
004733  3  85 rr                sta varm
004735  3  A9 00                lda #0
004737  3  85 rr                sta varj
004739  3  A9 58                lda #88
00473B  3  85 rr                sta varo
00473D  3  A9 58                lda #88
00473F  3  85 rr                sta varp
004741  3  A9 00                lda #0
004743  3  85 rr                sta varc
004745  3  A9 00                lda #0
004747  3  85 rr                sta vars
004749  3  A9 01                lda #1
00474B  3  85 rr                sta vart
00474D  3  A9 0F                lda #15
00474F  3  85 rr                sta varh
004751  3  A9 C8                lda #200
004753  3  85 rr                sta vari
004755  3  A9 03                lda #3
004757  3  85 rr                sta numlif
004759  3  20 8C 29             jsr cls		; CLS
00475C  3  A9 00                lda #0
00475E  3  85 rr                sta chary
004760  3  A9 00                lda #0
004762  3  85 rr                sta charx
004764  3  A9 02                lda #2  	; MESSAGE
004766  3  20 BF 32             jsr dmsg
004769  3  A9 04                lda #4  	; MESSAGE
00476B  3  20 BF 32             jsr dmsg
00476E  3  A9 04                lda #4  	; MESSAGE
004770  3  20 BF 32             jsr dmsg
004773  3  A9 05                lda #5  	; MESSAGE
004775  3  20 BF 32             jsr dmsg
004778  3  A9 04                lda #4 	; REPEAT
00477A  3  85 rr                sta loopa
00477C  3  A9 04        n00160: lda #4  	; MESSAGE
00477E  3  20 BF 32             jsr dmsg
004781  3  C6 rr                dec loopa	; ENDREPEAT
004783  3  F0 03                beq :+
004785  3  4C 7C 47             jmp n00160
004788  3               :
004788  3  A9 05                lda #5  	; MESSAGE
00478A  3  20 BF 32             jsr dmsg
00478D  3  A9 03                lda #3 	; REPEAT
00478F  3  85 rr                sta loopa
004791  3  A9 04        n00210: lda #4  	; MESSAGE
004793  3  20 BF 32             jsr dmsg
004796  3  C6 rr                dec loopa	; ENDREPEAT
004798  3  F0 03                beq :+
00479A  3  4C 91 47             jmp n00210
00479D  3               :
00479D  3  A9 05                lda #5  	; MESSAGE
00479F  3  20 BF 32             jsr dmsg
0047A2  3  A9 04                lda #4 	; REPEAT
0047A4  3  85 rr                sta loopa
0047A6  3  A9 04        n00259: lda #4  	; MESSAGE
0047A8  3  20 BF 32             jsr dmsg
0047AB  3  C6 rr                dec loopa	; ENDREPEAT
0047AD  3  F0 03                beq :+
0047AF  3  4C A6 47             jmp n00259
0047B2  3               :
0047B2  3  A9 05                lda #5  	; MESSAGE
0047B4  3  20 BF 32             jsr dmsg
0047B7  3  A9 04                lda #4  	; MESSAGE
0047B9  3  20 BF 32             jsr dmsg
0047BC  3  A9 04                lda #4  	; MESSAGE
0047BE  3  20 BF 32             jsr dmsg
0047C1  3  A9 02                lda #2  	; MESSAGE
0047C3  3  20 BF 32             jsr dmsg
0047C6  3  A9 04                lda #4  	; MESSAGE
0047C8  3  20 BF 32             jsr dmsg
0047CB  3  A9 04                lda #4  	; MESSAGE
0047CD  3  20 BF 32             jsr dmsg
0047D0  3  A9 02                lda #2  	; MESSAGE
0047D2  3  20 BF 32             jsr dmsg
0047D5  3  A9 00                lda #0
0047D7  3  85 rr                sta chary
0047D9  3  A9 00                lda #0
0047DB  3  85 rr                sta charx
0047DD  3  A9 06                lda #6  	; MESSAGE
0047DF  3  20 BF 32             jsr dmsg
0047E2  3  A9 00                lda #0
0047E4  3  85 rr                sta chary
0047E6  3  A9 1F                lda #31
0047E8  3  85 rr                sta charx
0047EA  3  A9 06                lda #6  	; MESSAGE
0047EC  3  20 BF 32             jsr dmsg
0047EF  3  A9 17                lda #23
0047F1  3  85 rr                sta chary
0047F3  3  A9 1F                lda #31
0047F5  3  85 rr                sta charx
0047F7  3  A9 06                lda #6  	; MESSAGE
0047F9  3  20 BF 32             jsr dmsg
0047FC  3  A9 17                lda #23
0047FE  3  85 rr                sta chary
004800  3  A9 00                lda #0
004802  3  85 rr                sta charx
004804  3  A9 06                lda #6  	; MESSAGE
004806  3  20 BF 32             jsr dmsg
004809  3  A9 14                lda #20
00480B  3  85 rr                sta chary
00480D  3  A9 00                lda #0
00480F  3  85 rr                sta charx
004811  3  A9 06                lda #6  	; MESSAGE
004813  3  20 BF 32             jsr dmsg
004816  3  A9 14                lda #20
004818  3  85 rr                sta chary
00481A  3  A9 1F                lda #31
00481C  3  85 rr                sta charx
00481E  3  A9 06                lda #6  	; MESSAGE
004820  3  20 BF 32             jsr dmsg
004823  3  60                   rts
004824  3               evnt14:
004824  3  60                   rts
004825  3               evnt15:
004825  3  A9 00                lda #0
004827  3  A0 05                ldy #5
004829  3  D1 rr                cmp (z80_ix),y
00482B  3  F0 03                beq *+5
00482D  3  4C 50 48             jmp p00094
004830  3  A9 01                lda #1
004832  3  85 rr                sta varj
004834  3  A9 05                lda #5	; SPAWN
004836  3  85 rr                sta z80_c
004838  3  A9 09                lda #9
00483A  3  85 rr                sta z80_b
00483C  3  20 BA 2C             jsr spawn
00483F  3  A9 FF                lda #255	; REMOVE
004841  3  A0 05                ldy #5
004843  3  91 rr                sta (z80_ix),y
004845  3  A9 08                lda #8	; SPAWN
004847  3  85 rr                sta z80_c
004849  3  A9 07                lda #7
00484B  3  85 rr                sta z80_b
00484D  3  20 BA 2C             jsr spawn
004850  3  60           p00094: rts
004851  3               evnt16:
004851  3  A9 0A                lda #10 	; DELAY
004853  3  20 0D 27             jsr delay
004856  3  A9 00                lda #0
004858  3  85 rr                sta varj
00485A  3  A9 00                lda #0
00485C  3  85 rr                sta varb
00485E  3  A5 rr                lda varo
004860  3  A0 08                ldy #8
004862  3  91 rr                sta (z80_ix),y
004864  3  A5 rr                lda varp
004866  3  A0 09                ldy #9
004868  3  91 rr                sta (z80_ix),y
00486A  3  A9 0A                lda #10
00486C  3  85 rr                sta chary
00486E  3  A9 08                lda #8
004870  3  85 rr                sta charx
004872  3  A9 0E                lda #14  	; MESSAGE
004874  3  20 BF 32             jsr dmsg
004877  3  A5 rr                lda numlif
004879  3  38                   sec
00487A  3  E9 01                sbc #1
00487C  3  85 rr                sta numlif
00487E  3  A9 32                lda #50 	; DELAY
004880  3  20 0D 27             jsr delay
004883  3  60                   rts
004884  3               evnt17:
004884  3  A9 1F                lda #31
004886  3  85 rr                sta varm
004888  3  A9 32                lda #50 	; DELAY
00488A  3  20 0D 27             jsr delay
00488D  3  60                   rts
00488E  3               evnt18:
00488E  3  A9 5A                lda #90 	; DELAY
004890  3  20 0D 27             jsr delay
004893  3  A9 05                lda #5
004895  3  85 rr                sta chary
004897  3  A9 08                lda #8
004899  3  85 rr                sta charx
00489B  3  A9 13                lda #19  	; MESSAGE
00489D  3  20 BF 32             jsr dmsg
0048A0  3  A9 5A                lda #90 	; DELAY
0048A2  3  20 0D 27             jsr delay
0048A5  3  A9 08                lda #8
0048A7  3  85 rr                sta chary
0048A9  3  A9 04                lda #4
0048AB  3  85 rr                sta charx
0048AD  3  A9 14                lda #20  	; MESSAGE
0048AF  3  20 BF 32             jsr dmsg
0048B2  3  A9 5A                lda #90 	; DELAY
0048B4  3  20 0D 27             jsr delay
0048B7  3  A9 0A                lda #10
0048B9  3  85 rr                sta chary
0048BB  3  A9 07                lda #7
0048BD  3  85 rr                sta charx
0048BF  3  A9 15                lda #21  	; MESSAGE
0048C1  3  20 BF 32             jsr dmsg
0048C4  3  A9 5A                lda #90 	; DELAY
0048C6  3  20 0D 27             jsr delay
0048C9  3  A9 0C                lda #12
0048CB  3  85 rr                sta chary
0048CD  3  A9 07                lda #7
0048CF  3  85 rr                sta charx
0048D1  3  A9 16                lda #22  	; MESSAGE
0048D3  3  20 BF 32             jsr dmsg
0048D6  3  A9 5A                lda #90 	; DELAY
0048D8  3  20 0D 27             jsr delay
0048DB  3  A9 0E                lda #14
0048DD  3  85 rr                sta chary
0048DF  3  A9 05                lda #5
0048E1  3  85 rr                sta charx
0048E3  3  A9 17                lda #23  	; MESSAGE
0048E5  3  20 BF 32             jsr dmsg
0048E8  3  A9 C8                lda #200 	; DELAY
0048EA  3  20 0D 27             jsr delay
0048ED  3  A9 1E                lda #30 	; DELAY
0048EF  3  20 0D 27             jsr delay
0048F2  3  A9 09                lda #9
0048F4  3  85 rr                sta chary
0048F6  3  A9 0A                lda #10
0048F8  3  85 rr                sta charx
0048FA  3  A9 21                lda #33  	; MESSAGE
0048FC  3  20 BF 32             jsr dmsg
0048FF  3  A9 5A                lda #90 	; DELAY
004901  3  20 0D 27             jsr delay
004904  3  A9 0B                lda #11
004906  3  85 rr                sta chary
004908  3  A9 0C                lda #12
00490A  3  85 rr                sta charx
00490C  3  A9 1F                lda #31  	; MESSAGE
00490E  3  20 BF 32             jsr dmsg
004911  3  A9 5A                lda #90 	; DELAY
004913  3  20 0D 27             jsr delay
004916  3  A9 0D                lda #13
004918  3  85 rr                sta chary
00491A  3  A9 07                lda #7
00491C  3  85 rr                sta charx
00491E  3  A9 20                lda #32  	; MESSAGE
004920  3  20 BF 32             jsr dmsg
004923  3  A9 64                lda #100 	; DELAY
004925  3  20 0D 27             jsr delay
004928  3  60                   rts
004929  3               evnt19:
004929  3  60                   rts
00492A  3               evnt20:
00492A  3  60                   rts
00492B  3  60           ptcusr: rts
00492C  3               data_start:
00492C  3               msgdat:
00492C  3  47 41 4D 45          .byte "GAMEfOVER",141
004930  3  66 4F 56 45  
004934  3  52 8D        
004936  3  47 45 54 20          .byte "GET READY",141
00493A  3  52 45 41 44  
00493E  3  59 8D        
004940  3  61 62 62 62          .byte "abbbbbcbbbbbcbbbbbbcbbbbbcbbbbba",141
004944  3  62 62 63 62  
004948  3  62 62 62 62  
004961  3  61 69 69 69          .byte "aiiiiijiiiiijiiiiiijiiiiijiiiiia",141
004965  3  69 69 6A 69  
004969  3  69 69 69 69  
004982  3  64 66 66 66          .byte "dffffffffffffffffffffffffffffffg",141
004986  3  66 66 66 66  
00498A  3  66 66 66 66  
0049A3  3  65 66 66 66          .byte "effffffffffffffffffffffffffffffh",141
0049A7  3  66 66 66 66  
0049AB  3  66 66 66 66  
0049C4  3  61 8D                .byte "a",141
0049C6  3  4C 49 56 45          .byte "LIVESk",141
0049CA  3  53 6B 8D     
0049CD  3  42 4C 4F 4F          .byte "BLOOMSk",141
0049D1  3  4D 53 6B 8D  
0049D5  3  66 66 66 46          .byte "fffFINDfTHEfGAIAfSTONEfffff",141
0049D9  3  49 4E 44 66  
0049DD  3  54 48 45 66  
0049F1  3  66 66 4E 4F          .byte "ffNOWfFINDfTHEfMOONfPOOLff",141
0049F5  3  57 66 46 49  
0049F9  3  4E 44 66 54  
004A0C  3  66 66 4E 4F          .byte "ffNOWfFINDfTENfMOONfBLOOMSff",141
004A10  3  57 66 46 49  
004A14  3  4E 44 66 54  
004A29  3  66 66 66 66          .byte "ffffRETURNfTHEfGAIAfSTONEffff",141
004A2D  3  52 45 54 55  
004A31  3  52 4E 66 54  
004A47  3  66 54 41 4B          .byte "fTAKEfTHEfBLOOMSfTOfTHEfPOOLf",141
004A4B  3  45 66 54 48  
004A4F  3  45 66 42 4C  
004A65  3  4F 55 43 48          .byte "OUCHfTHATfHURTrr",141
004A69  3  66 54 48 41  
004A6D  3  54 66 48 55  
004A76  3  6C 6D 8D             .byte "lm",141
004A79  3  6F 6E 8D             .byte "on",141
004A7C  3  71 8D                .byte "q",141
004A7E  3  70 8D                .byte "p",141
004A80  3  43 4F 4E 47          .byte "CONGRATULATIONSrr",141
004A84  3  52 41 54 55  
004A88  3  4C 41 54 49  
004A92  3  4E 49 58 59          .byte "NIXYfHASfSAVEDfTHEfGLADE",141
004A96  3  66 48 41 53  
004A9A  3  66 53 41 56  
004AAB  3  46 52 4F 4D          .byte "FROMfCERTAINfDOOM",141
004AAF  3  66 43 45 52  
004AB3  3  54 41 49 4E  
004ABD  3  42 55 54 66          .byte "BUTfWHEREfDIDfTHE",141
004AC1  3  57 48 45 52  
004AC5  3  45 66 44 49  
004ACF  3  43 4F 52 52          .byte "CORRUPTIONfCOMEfFROM?",141
004AD3  3  55 50 54 49  
004AD7  3  4F 4E 66 43  
004AE5  3  61 66 4B 45          .byte "afKEYBOARDfa",141
004AE9  3  59 42 4F 41  
004AED  3  52 44 66 61  
004AF2  3  61 66 4B 45          .byte "afKEMPSTONfa",141
004AF6  3  4D 50 53 54  
004AFA  3  4F 4E 66 61  
004AFF  3  61 66 53 49          .byte "afSINCLAIRfa",141
004B03  3  4E 43 4C 41  
004B07  3  49 52 66 61  
004B0C  3  73 74 8D             .byte "st",141
004B0F  3  43 48 41 4E          .byte "CHANGEKEYS",141
004B13  3  47 45 4B 45  
004B17  3  59 53 8D     
004B1A  3  66 50 4C 41          .byte "fPLAYGAMEf",141
004B1E  3  59 47 41 4D  
004B22  3  45 66 8D     
004B25  3  50 52 45 53          .byte "PRESSfANYfKEY",141
004B29  3  53 66 41 4E  
004B2D  3  59 66 4B 45  
004B33  3  4E 49 58 59          .byte "NIXYf2",141
004B37  3  66 32 8D     
004B3A  3  54 48 45 66          .byte "THEfSEEDSfOFfDOOM",141
004B3E  3  53 45 45 44  
004B42  3  53 66 4F 46  
004B4C  3  43 4F 4D 49          .byte "COMINGfSOON",141
004B50  3  4E 47 66 53  
004B54  3  4F 4F 4E 8D  
004B58  3               nummsg:
004B58  3  22                   .byte 34
004B59  3               chgfx:
004B59  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004B5D  3  00 00 00 00  
004B61  3  61 D4 D0 66          .byte 97,212,208,102,13,77,6,8
004B65  3  0D 4D 06 08  
004B69  3  86 29 0D 86          .byte 134,41,13,134,48,73,104,50
004B6D  3  30 49 68 32  
004B71  3  02 80 08 00          .byte 2,128,8,0,64,1,0,16
004B75  3  40 01 00 10  
004B79  3  60 EE EE 06          .byte 96,238,238,6,112,119,55,6
004B7D  3  70 77 37 06  
004B81  3  E0 EE CE 0C          .byte 224,238,206,12,96,119,119,6
004B85  3  60 77 77 06  
004B89  3  60 AE EA 06          .byte 96,174,234,6,112,87,53,6
004B8D  3  70 57 35 06  
004B91  3  60 AE CA 04          .byte 96,174,202,4,112,86,37,3
004B95  3  70 56 25 03  
004B99  3  60 6C 0E 2E          .byte 96,108,14,46,0,11,3,0
004B9D  3  00 0B 03 00  
004BA1  3  00 06 06 00          .byte 0,6,6,0,8,99,103,7
004BA5  3  08 63 67 07  
004BA9  3  00 C0 D0 00          .byte 0,192,208,0,100,112,118,6
004BAD  3  64 70 76 06  
004BB1  3  60 E6 E6 00          .byte 96,230,230,0,8,96,96,0
004BB5  3  08 60 60 00  
004BB9  3  60 6C 0A 2E          .byte 96,108,10,46,0,11,3,0
004BBD  3  00 0B 03 00  
004BC1  3  00 03 03 08          .byte 0,3,3,8,0,99,101,7
004BC5  3  00 63 65 07  
004BC9  3  00 C0 D0 00          .byte 0,192,208,0,100,80,118,6
004BCD  3  64 50 76 06  
004BD1  3  60 A6 E6 00          .byte 96,166,230,0,8,96,96,0
004BD5  3  08 60 60 00  
004BD9  3  60 F9 9E 9F          .byte 96,249,158,159,255,255,253,255
004BDD  3  FF FF FD FF  
004BE1  3  60 F9 FF F3          .byte 96,249,255,243,225,97,243,255
004BE5  3  E1 61 F3 FF  
004BE9  3  60 F9 FF BF          .byte 96,249,255,191,251,255,239,255
004BED  3  FB FF EF FF  
004BF1  3  08 00 00 00          .byte 8,0,0,0,0,64,2,0
004BF5  3  00 40 02 00  
004BF9  3  38 74 DC F0          .byte 56,116,220,240,164,109,7,1
004BFD  3  A4 6D 07 01  
004C01  3  0C 16 3D A3          .byte 12,22,61,163,202,112,128,0
004C05  3  CA 70 80 00  
004C09  3  00 1C 3E 63          .byte 0,28,62,99,73,44,4,12
004C0D  3  49 2C 04 0C  
004C11  3  18 2C 3C 7A          .byte 24,44,60,122,70,18,24,56
004C15  3  46 12 18 38  
004C19  3  00 1E 3F 61          .byte 0,30,63,97,77,42,24,24
004C1D  3  4D 2A 18 18  
004C21  3  00 CC 32 28          .byte 0,204,50,40,20,20,16,32
004C25  3  14 14 10 20  
004C29  3  00 33 4E 12          .byte 0,51,78,18,36,36,4,0
004C2D  3  24 24 04 00  
004C31  3  00 00 40 A6          .byte 0,0,64,166,41,84,16,16
004C35  3  29 54 10 10  
004C39  3  00 00 00 00          .byte 0,0,0,0,8,9,37,21
004C3D  3  08 09 25 15  
004C41  3  00 00 20 A0          .byte 0,0,32,160,146,84,85,85
004C45  3  92 54 55 55  
004C49  3  00 38 CE 33          .byte 0,56,206,51,29,13,7,1
004C4D  3  1D 0D 07 01  
004C51  3  00 1C 33 6C          .byte 0,28,51,108,220,184,224,0
004C55  3  DC B8 E0 00  
004C59  3  01 01 C1 30          .byte 1,1,193,48,13,7,3,0
004C5D  3  0D 07 03 00  
004C61  3  00 80 83 8C          .byte 0,128,131,140,80,224,192,128
004C65  3  50 E0 C0 80  
004C69  3  00 80 80 80          .byte 0,128,128,128,0,128,128,128
004C6D  3  00 80 80 80  
004C71  3  01 01 01 00          .byte 1,1,1,0,1,1,1,0
004C75  3  01 01 01 00  
004C79  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
004C7D  3  12 40 02 40  
004C81  3  00 00 00 18          .byte 0,0,0,24,164,36,194,7
004C85  3  A4 24 C2 07  
004C89  3  00 00 00 18          .byte 0,0,0,24,37,68,82,224
004C8D  3  25 44 52 E0  
004C91  3  18 1C 0B 10          .byte 24,28,11,16,24,24,8,16
004C95  3  18 18 08 10  
004C99  3  18 18 08 D0          .byte 24,24,8,208,56,24,8,16
004C9D  3  38 18 08 10  
004CA1  3  18 18 08 10          .byte 24,24,8,16,8,0,8,0
004CA5  3  08 00 08 00  
004CA9  3  00 08 00 08          .byte 0,8,0,8,16,8,24,24
004CAD  3  10 08 18 18  
004CB1  3  4C 14 0C 54          .byte 76,20,12,84,12,20,76,16
004CB5  3  0C 14 4C 10  
004CB9  3  01 01 01 00          .byte 1,1,1,0,29,35,41,198
004CBD  3  1D 23 29 C6  
004CC1  3  00 80 80 80          .byte 0,128,128,128,0,156,178,201
004CC5  3  00 9C B2 C9  
004CC9  3  00 00 00 00          .byte 0,0,0,0,0,57,127,198
004CCD  3  00 39 7F C6  
004CD1  3  00 01 03 1F          .byte 0,1,3,31,124,241,198,24
004CD5  3  7C F1 C6 18  
004CD9  3  80 C0 E0 7C          .byte 128,192,224,124,31,195,48,140
004CDD  3  1F C3 30 8C  
004CE1  3  00 00 00 00          .byte 0,0,0,0,192,248,60,131
004CE5  3  C0 F8 3C 83  
004CE9  3  55 6B 55 AB          .byte 85,107,85,171,213,235,46,50
004CED  3  D5 EB 2E 32  
004CF1  3  DD EF FD AB          .byte 221,239,253,171,253,191,245,239
004CF5  3  FD BF F5 EF  
004CF9  3  DD EF FD AB          .byte 221,239,253,171,253,191,245,239
004CFD  3  FD BF F5 EF  
004D01  3  01 EE 99 FF          .byte 1,238,153,255,85,170,21,0
004D05  3  55 AA 15 00  
004D09  3  60 E0 E8 02          .byte 96,224,232,2,112,123,75,120
004D0D  3  70 7B 4B 78  
004D11  3  00 0E 0E 2E          .byte 0,14,14,46,0,119,87,118
004D15  3  00 77 57 76  
004D19  3  00 80 60 BF          .byte 0,128,96,191,217,102,157,0
004D1D  3  D9 66 9D 00  
004D21  3  DD FF CD C7          .byte 221,255,205,199,197,191,245,239
004D25  3  C5 BF F5 EF  
004D29  3  00 00 30 F0          .byte 0,0,48,240,208,224,128,0
004D2D  3  D0 E0 80 00  
004D31  3  1C 1F 17 09          .byte 28,31,23,9,6,1,0,0
004D35  3  06 01 00 00  
004D39  3  84 11 40 05          .byte 132,17,64,5,16,129,4,32
004D3D  3  10 81 04 20  
004D41  3  C0 50 88 B0          .byte 192,80,136,176,18,141,180,19
004D45  3  12 8D B4 13  
004D49  3  C6 5A 89 B6          .byte 198,90,137,182,18,141,180,19
004D4D  3  12 8D B4 13  
004D51  3  06 0A 69 26          .byte 6,10,105,38,26,197,180,19
004D55  3  1A C5 B4 13  
004D59  3  C0 56 02 58          .byte 192,86,2,88,10,96,43,1
004D5D  3  0A 60 2B 01  
004D61  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004D65  3  00 00 00 00  
004D69  3  4C 14 00 54          .byte 76,20,0,84,0,16,0,0
004D6D  3  00 10 00 00  
004D71  3  E0 B8 FC 9E          .byte 224,184,252,158,159,253,223,251
004D75  3  9F FD DF FB  
004D79  3  0F 3F 7D EF          .byte 15,63,125,239,127,251,191,255
004D7D  3  7F FB BF FF  
004D81  3  12 40 12 40          .byte 18,64,18,64,2,0,0,0
004D85  3  02 00 00 00  
004D89  3  FF F5 F7 EA          .byte 255,245,247,234,156,248,176,224
004D8D  3  9C F8 B0 E0  
004D91  3  FF AF EF 77          .byte 255,175,239,119,57,31,13,7
004D95  3  39 1F 0D 07  
004D99  3  07 0D 1F 39          .byte 7,13,31,57,119,235,175,255
004D9D  3  77 EB AF FF  
004DA1  3  E0 B0 F8 9C          .byte 224,176,248,156,238,215,181,255
004DA5  3  EE D7 B5 FF  
004DA9  3  9A 00 A4 00          .byte 154,0,164,0,1,8,64,0
004DAD  3  01 08 40 00  
004DB1  3  00 00 B8 7C          .byte 0,0,184,124,190,156,64,60
004DB5  3  BE 9C 40 3C  
004DB9  3  00 00 1D 3E          .byte 0,0,29,62,125,57,2,60
004DBD  3  7D 39 02 3C  
004DC1  3  00 00 C6 29          .byte 0,0,198,41,16,169,70,0
004DC5  3  10 A9 46 00  
004DC9  3  82 00 10 00          .byte 130,0,16,0,1,8,0,64
004DCD  3  01 08 00 40  
004DD1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004DD5  3  00 00 00 00  
004DD9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004DDD  3  00 00 00 00  
004DE1  3  18 18 08 10          .byte 24,24,8,16,24,24,8,16
004DE5  3  18 18 08 10  
004DE9  3  93 54 20 20          .byte 147,84,32,32,32,16,146,84
004DED  3  20 10 92 54  
004DF1  3  00 00 10 BA          .byte 0,0,16,186,166,78,108,56
004DF5  3  A6 4E 6C 38  
004DF9  3  18 26 24 30          .byte 24,38,36,48,216,86,20,16
004DFD  3  D8 56 14 10  
004E01  3  00 00 44 54          .byte 0,0,68,84,146,186,186,84
004E05  3  92 BA BA 54  
004E09  3  60 F9 FF BF          .byte 96,249,255,191,251,255,239,255
004E0D  3  FB FF EF FF  
004E11  3  00 00 40 02          .byte 0,0,64,2,0,0,4,0
004E15  3  00 00 04 00  
004E19  3  02 00 40 08          .byte 2,0,64,8,20,8,0,16
004E1D  3  14 08 00 10  
004E21  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004E25  3  00 00 00 00  
004E29  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004E2D  3  00 00 00 00  
004E31  3  20 80 20 20          .byte 32,128,32,32,128,32,0,32
004E35  3  80 20 00 20  
004E39  3  4C 14 0C 54          .byte 76,20,12,84,12,20,76,16
004E3D  3  0C 14 4C 10  
004E41  3  40 A4 4A 04          .byte 64,164,74,4,32,82,37,2
004E45  3  20 52 25 02  
004E49  3  00 03 18 40          .byte 0,3,24,64,0,128,32,0
004E4D  3  00 80 20 00  
004E51  3  6D 00 08 10          .byte 109,0,8,16,16,0,40,68
004E55  3  10 00 28 44  
004E59  3  00 02 01 08          .byte 0,2,1,8,4,35,16,140
004E5D  3  04 23 10 8C  
004E61  3  BC 26 5E 25          .byte 188,38,94,37,37,16,14,0
004E65  3  25 10 0E 00  
004E69  3  A0 80 20 A0          .byte 160,128,32,160,0,32,160,128
004E6D  3  00 20 A0 80  
004E71  3  05 01 04 05          .byte 5,1,4,5,0,5,4,1
004E75  3  00 05 04 01  
004E79  3  00 05 01 04          .byte 0,5,1,4,5,0,1,0
004E7D  3  05 00 01 00  
004E81  3  20 A0 80 20          .byte 32,160,128,32,160,0,32,0
004E85  3  A0 00 20 00  
004E89  3  24 08 04 28          .byte 36,8,4,40,4,8,36,8
004E8D  3  04 08 24 08  
004E91  3  00 6A D5 74          .byte 0,106,213,116,17,68,16,0
004E95  3  11 44 10 00  
004E99  3  00 2B 55 17          .byte 0,43,85,23,68,17,4,0
004E9D  3  44 11 04 00  
004EA1  3  24 08 04 28          .byte 36,8,4,40,0,8,0,0
004EA5  3  00 08 00 00  
004EA9  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004EAD  3  00 00 00 00  
004EB1  3  14 28 80 20          .byte 20,40,128,32,128,0,0,0
004EB5  3  80 00 00 00  
004EB9  3  28 14 01 04          .byte 40,20,1,4,1,0,0,0
004EBD  3  01 00 00 00  
004EC1  3  21 04 50 02          .byte 33,4,80,2,168,1,68,16
004EC5  3  A8 01 44 10  
004EC9  3  48 82 14 41          .byte 72,130,20,65,8,162,8,82
004ECD  3  08 A2 08 52  
004ED1  3  00 00 00 10          .byte 0,0,0,16,0,0,0,0
004ED5  3  00 00 00 00  
004ED9  3  E0 38 1C 0E          .byte 224,56,28,14,14,7,7,7
004EDD  3  0E 07 07 07  
004EE1  3  07 07 07 0E          .byte 7,7,7,14,14,28,56,224
004EE5  3  0E 1C 38 E0  
004EE9  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
004EED  3  12 40 02 40  
004EF1  3  02 07 06 0B          .byte 2,7,6,11,10,203,38,89
004EF5  3  0A CB 26 59  
004EF9  3  C0 60 E0 50          .byte 192,96,224,80,208,83,228,154
004EFD  3  D0 53 E4 9A  
004F01  3  07 1F 3F 26          .byte 7,31,63,38,106,102,106,127
004F05  3  6A 66 6A 7F  
004F09  3  E0 F8 FC 9C          .byte 224,248,252,156,174,158,190,254
004F0D  3  AE 9E BE FE  
004F11  3  79 76 77 77          .byte 121,118,119,119,123,125,126,87
004F15  3  7B 7D 7E 57  
004F19  3  9E 6E EE EE          .byte 158,110,238,238,222,190,126,218
004F1D  3  DE BE 7E DA  
004F21  3  00 00 04 05          .byte 0,0,4,5,73,74,42,42
004F25  3  49 4A 2A 2A  
004F29  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
004F2D  3  AA 55 88 00  
004F31  3  00 2B 55 17          .byte 0,43,85,23,68,17,4,0
004F35  3  44 11 04 00  
004F39  3  00 92 D6 54          .byte 0,146,214,84,108,56,56,16
004F3D  3  6C 38 38 10  
004F41  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
004F45  3  AA 55 88 00  
004F49  3  00 00 EE 51          .byte 0,0,238,81,170,0,0,0
004F4D  3  AA 00 00 00  
004F51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F55  3  00 00 00 00  
004F59  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F5D  3  00 00 00 00  
004F61  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F65  3  00 00 00 00  
004F69  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F6D  3  00 00 00 00  
004F71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F75  3  00 00 00 00  
004F79  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F7D  3  00 00 00 00  
004F81  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F85  3  00 00 00 00  
004F89  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F8D  3  00 00 00 00  
004F91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F95  3  00 00 00 00  
004F99  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
004F9D  3  00 00 00 00  
004FA1  3  00 00 01 03          .byte 0,0,1,3,6,13,13,19
004FA5  3  06 0D 0D 13  
004FA9  3  00 00 E0 90          .byte 0,0,224,144,96,160,176,224
004FAD  3  60 A0 B0 E0  
004FB1  3  C0 00 40 40          .byte 192,0,64,64,192,96,144,192
004FB5  3  C0 60 90 C0  
004FB9  3  23 20 01 03          .byte 35,32,1,3,3,6,9,1
004FBD  3  03 06 09 01  
004FC1  3  00 3C 66 FB          .byte 0,60,102,251,253,255,255,255
004FC5  3  FD FF FF FF  
004FC9  3  00 3C 66 FB          .byte 0,60,102,251,253,253,253,255
004FCD  3  FD FD FD FF  
004FD1  3  7F 3F 1F 0F          .byte 127,63,31,15,7,3,1,0
004FD5  3  07 03 01 00  
004FD9  3  FE FC F8 F0          .byte 254,252,248,240,224,192,128,0
004FDD  3  E0 C0 80 00  
004FE1  3  66 FF FF FF          .byte 102,255,255,255,126,60,24,0
004FE5  3  7E 3C 18 00  
004FE9  3  00 3C 4A BF          .byte 0,60,74,191,70,44,24,0
004FED  3  46 2C 18 00  
004FF1  3  0A 65 B7 02          .byte 10,101,183,2,9,7,1,0
004FF5  3  09 07 01 00  
004FF9  3  50 A6 ED C0          .byte 80,166,237,192,64,144,224,128
004FFD  3  40 90 E0 80  
005001  3  80 00 00 00          .byte 128,0,0,0,0,0,0,0
005005  3  00 00 00 00  
005009  3  00 6B DD 77          .byte 0,107,221,119,18,64,2,64
00500D  3  12 40 02 40  
005011  3  00 6B DD 77          .byte 0,107,221,119,170,85,136,0
005015  3  AA 55 88 00  
005019  3               bprop:
005019  3  00                   .byte 0
00501A  3  02                   .byte 2
00501B  3  02                   .byte 2
00501C  3  00                   .byte 0
00501D  3  02                   .byte 2
00501E  3  02                   .byte 2
00501F  3  01                   .byte 1
005020  3  01                   .byte 1
005021  3  02                   .byte 2
005022  3  02                   .byte 2
005023  3  02                   .byte 2
005024  3  02                   .byte 2
005025  3  01                   .byte 1
005026  3  01                   .byte 1
005027  3  01                   .byte 1
005028  3  01                   .byte 1
005029  3  05                   .byte 5
00502A  3  05                   .byte 5
00502B  3  05                   .byte 5
00502C  3  08                   .byte 8
00502D  3  00                   .byte 0
00502E  3  00                   .byte 0
00502F  3  00                   .byte 0
005030  3  00                   .byte 0
005031  3  00                   .byte 0
005032  3  00                   .byte 0
005033  3  00                   .byte 0
005034  3  00                   .byte 0
005035  3  00                   .byte 0
005036  3  00                   .byte 0
005037  3  00                   .byte 0
005038  3  00                   .byte 0
005039  3  03                   .byte 3
00503A  3  03                   .byte 3
00503B  3  03                   .byte 3
00503C  3  03                   .byte 3
00503D  3  01                   .byte 1
00503E  3  00                   .byte 0
00503F  3  00                   .byte 0
005040  3  00                   .byte 0
005041  3  00                   .byte 0
005042  3  00                   .byte 0
005043  3  00                   .byte 0
005044  3  00                   .byte 0
005045  3  03                   .byte 3
005046  3  03                   .byte 3
005047  3  00                   .byte 0
005048  3  00                   .byte 0
005049  3  00                   .byte 0
00504A  3  00                   .byte 0
00504B  3  00                   .byte 0
00504C  3  00                   .byte 0
00504D  3  00                   .byte 0
00504E  3  01                   .byte 1
00504F  3  02                   .byte 2
005050  3  02                   .byte 2
005051  3  01                   .byte 1
005052  3  00                   .byte 0
005053  3  00                   .byte 0
005054  3  00                   .byte 0
005055  3  06                   .byte 6
005056  3  06                   .byte 6
005057  3  06                   .byte 6
005058  3  06                   .byte 6
005059  3  06                   .byte 6
00505A  3  05                   .byte 5
00505B  3  06                   .byte 6
00505C  3  05                   .byte 5
00505D  3  05                   .byte 5
00505E  3  06                   .byte 6
00505F  3  00                   .byte 0
005060  3  00                   .byte 0
005061  3  00                   .byte 0
005062  3  00                   .byte 0
005063  3  07                   .byte 7
005064  3  00                   .byte 0
005065  3  00                   .byte 0
005066  3  00                   .byte 0
005067  3  08                   .byte 8
005068  3  00                   .byte 0
005069  3  00                   .byte 0
00506A  3  00                   .byte 0
00506B  3  00                   .byte 0
00506C  3  00                   .byte 0
00506D  3  00                   .byte 0
00506E  3  00                   .byte 0
00506F  3  05                   .byte 5
005070  3  07                   .byte 7
005071  3  08                   .byte 8
005072  3  06                   .byte 6
005073  3  00                   .byte 0
005074  3  00                   .byte 0
005075  3  07                   .byte 7
005076  3  00                   .byte 0
005077  3  00                   .byte 0
005078  3  00                   .byte 0
005079  3  00                   .byte 0
00507A  3  00                   .byte 0
00507B  3  00                   .byte 0
00507C  3  00                   .byte 0
00507D  3  00                   .byte 0
00507E  3  00                   .byte 0
00507F  3  00                   .byte 0
005080  3  01                   .byte 1
005081  3  01                   .byte 1
005082  3  00                   .byte 0
005083  3  02                   .byte 2
005084  3  00                   .byte 0
005085  3  00                   .byte 0
005086  3  00                   .byte 0
005087  3  00                   .byte 0
005088  3  08                   .byte 8
005089  3  00                   .byte 0
00508A  3  00                   .byte 0
00508B  3  02                   .byte 2
00508C  3  00                   .byte 0
00508D  3  00                   .byte 0
00508E  3  00                   .byte 0
00508F  3  00                   .byte 0
005090  3  00                   .byte 0
005091  3  00                   .byte 0
005092  3  00                   .byte 0
005093  3  01                   .byte 1
005094  3  02                   .byte 2
005095  3  00                   .byte 0
005096  3  00                   .byte 0
005097  3  00                   .byte 0
005098  3  00                   .byte 0
005099  3  00                   .byte 0
00509A  3  00                   .byte 0
00509B  3  00                   .byte 0
00509C  3  00                   .byte 0
00509D  3  00                   .byte 0
00509E  3  00                   .byte 0
00509F  3  00                   .byte 0
0050A0  3  00                   .byte 0
0050A1  3  00                   .byte 0
0050A2  3  00                   .byte 0
0050A3  3  00                   .byte 0
0050A4  3  00                   .byte 0
0050A5  3  00                   .byte 0
0050A6  3  00                   .byte 0
0050A7  3  00                   .byte 0
0050A8  3  00                   .byte 0
0050A9  3  00                   .byte 0
0050AA  3  00                   .byte 0
0050AB  3  08                   .byte 8
0050AC  3  03                   .byte 3
0050AD  3  03                   .byte 3
0050AE  3  00                   .byte 0
0050AF  3  02                   .byte 2
0050B0  3  01                   .byte 1
0050B1  3               sprgfx:
0050B1  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,216,13,216,13,216,6,176,16,132,27,108,11,232,3,224,6,48,5,80,3,96,3,96
0050B5  3  07 F0 0B E8  
0050B9  3  0D D8 0D D8  
0050D1  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,118,3,118,3,118,1,172,4,33,6,219,2,250,0,248,1,140,1,84,0,216,0,216
0050D5  3  01 FC 02 FA  
0050D9  3  03 76 03 76  
0050F1  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,221,128,221,128,221,0,107,65,8,193,182,128,190,0,62,0,99,0,85,0,54,0,54
0050F5  3  00 7F 80 BE  
0050F9  3  80 DD 80 DD  
005111  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,55,96,55,96,55,192,26,16,66,176,109,160,47,128,15,192,24,64,21,128,13,128,13
005115  3  C0 1F A0 2F  
005119  3  60 37 60 37  
005131  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,232,13,232,14,216,23,80,24,64,11,168,3,236,7,244,12,24,3,72,3,96,0,96
005135  3  07 F0 0B E8  
005139  3  0D E8 0D E8  
005151  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,122,3,122,3,182,5,212,6,16,2,234,0,251,1,253,3,6,0,210,0,216,0,24
005155  3  01 FC 02 FA  
005159  3  03 7A 03 7A  
005171  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,222,128,222,128,237,1,117,1,132,128,186,192,62,64,127,128,193,128,52,0,54,0,6
005175  3  00 7F 80 BE  
005179  3  80 DE 80 DE  
005191  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,160,55,160,55,96,59,64,93,0,97,160,46,176,15,208,31,96,48,32,13,128,13,128,1
005195  3  C0 1F A0 2F  
005199  3  A0 37 A0 37  
0051B1  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,13,216,13,216,13,216,6,176,16,132,27,108,11,232,3,224,6,48,5,80,3,96,0,0
0051B5  3  07 F0 0B E8  
0051B9  3  0D D8 0D D8  
0051D1  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,3,118,3,118,3,118,1,172,4,33,6,219,2,250,0,248,1,140,1,84,0,216,0,0
0051D5  3  01 FC 02 FA  
0051D9  3  03 76 03 76  
0051F1  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,221,128,221,128,221,0,107,65,8,193,182,128,190,0,62,0,99,0,85,0,54,0,0
0051F5  3  00 7F 80 BE  
0051F9  3  80 DD 80 DD  
005211  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,55,96,55,96,55,192,26,16,66,176,109,160,47,128,15,192,24,64,21,128,13,0,0
005215  3  C0 1F A0 2F  
005219  3  60 37 60 37  
005231  3  00 00 03 E0          .byte 0,0,3,224,7,240,11,232,11,216,11,216,13,184,5,116,1,12,10,232,27,224,23,240,12,24,9,96,3,96,3,0
005235  3  07 F0 0B E8  
005239  3  0B D8 0B D8  
005251  3  00 00 00 F8          .byte 0,0,0,248,1,252,2,250,2,246,2,246,3,110,1,93,0,67,2,186,6,248,5,252,3,6,2,88,0,216,0,192
005255  3  01 FC 02 FA  
005259  3  02 F6 02 F6  
005271  3  00 00 00 3E          .byte 0,0,0,62,0,127,128,190,128,189,128,189,128,219,64,87,192,16,128,174,1,190,1,127,128,193,0,150,0,54,0,48
005275  3  00 7F 80 BE  
005279  3  80 BD 80 BD  
005291  3  00 00 80 0F          .byte 0,0,128,15,192,31,160,47,96,47,96,47,224,54,208,21,48,4,160,43,128,111,192,95,96,48,128,37,128,13,0,12
005295  3  C0 1F A0 2F  
005299  3  60 2F 60 2F  
0052B1  3  00 00 01 B0          .byte 0,0,1,176,7,72,14,176,13,80,18,216,37,240,4,224,0,0,3,64,5,32,5,192,4,0,9,128,1,128,1,192
0052B5  3  07 48 0E B0  
0052B9  3  0D 50 12 D8  
0052D1  3  00 00 00 6C          .byte 0,0,0,108,1,210,3,172,3,84,4,182,9,124,1,56,0,0,0,208,1,72,1,112,1,0,2,96,0,96,0,112
0052D5  3  01 D2 03 AC  
0052D9  3  03 54 04 B6  
0052F1  3  00 00 00 1B          .byte 0,0,0,27,128,116,0,235,0,213,129,45,2,95,0,78,0,0,0,52,0,82,0,92,0,64,0,152,0,24,0,28
0052F5  3  80 74 00 EB  
0052F9  3  00 D5 81 2D  
005311  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,58,64,53,96,75,192,151,128,19,0,0,0,13,128,20,0,23,0,16,0,38,0,6,0,7
005315  3  20 1D C0 3A  
005319  3  40 35 60 4B  
005331  3  00 00 01 B0          .byte 0,0,1,176,7,72,14,176,29,80,34,216,5,240,8,224,0,0,3,192,5,240,9,192,16,0,3,96,6,96,7,112
005335  3  07 48 0E B0  
005339  3  1D 50 22 D8  
005351  3  00 00 00 6C          .byte 0,0,0,108,1,210,3,172,7,84,8,182,1,124,2,56,0,0,0,240,1,124,2,112,4,0,0,216,1,152,1,220
005355  3  01 D2 03 AC  
005359  3  07 54 08 B6  
005371  3  00 00 00 1B          .byte 0,0,0,27,128,116,0,235,1,213,130,45,0,95,0,142,0,0,0,60,0,95,0,156,1,0,0,54,0,102,0,119
005375  3  80 74 00 EB  
005379  3  01 D5 82 2D  
005391  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,58,64,117,96,139,192,23,128,35,0,0,0,15,192,23,0,39,0,64,128,13,128,25,192,29
005395  3  20 1D C0 3A  
005399  3  40 75 60 8B  
0053B1  3  00 00 01 B0          .byte 0,0,1,176,7,72,30,176,37,80,2,216,5,240,8,224,0,0,2,224,13,24,49,192,0,32,7,104,12,56,14,48
0053B5  3  07 48 1E B0  
0053B9  3  25 50 02 D8  
0053D1  3  00 00 00 6C          .byte 0,0,0,108,1,210,7,172,9,84,0,182,1,124,2,56,0,0,0,184,3,70,12,112,0,8,1,218,3,14,3,140
0053D5  3  01 D2 07 AC  
0053D9  3  09 54 00 B6  
0053F1  3  00 00 00 1B          .byte 0,0,0,27,128,116,1,235,2,85,128,45,0,95,0,142,0,0,0,46,128,209,3,28,0,2,128,118,128,195,0,227
0053F5  3  80 74 01 EB  
0053F9  3  02 55 80 2D  
005411  3  00 00 C0 06          .byte 0,0,192,6,32,29,192,122,64,149,96,11,192,23,128,35,0,0,128,11,96,52,0,199,128,0,160,29,224,48,192,56
005415  3  20 1D C0 7A  
005419  3  40 95 60 0B  
005431  3  01 B0 07 48          .byte 1,176,7,72,30,176,37,80,2,216,13,240,0,224,0,0,2,224,13,24,49,192,0,32,7,104,12,56,14,48,0,0
005435  3  1E B0 25 50  
005439  3  02 D8 0D F0  
005451  3  00 6C 01 D2          .byte 0,108,1,210,7,172,9,84,0,182,3,124,0,56,0,0,0,184,3,70,12,112,0,8,1,218,3,14,3,140,0,0
005455  3  07 AC 09 54  
005459  3  00 B6 03 7C  
005471  3  00 1B 80 74          .byte 0,27,128,116,1,235,2,85,128,45,0,223,0,14,0,0,0,46,128,209,3,28,0,2,128,118,128,195,0,227,0,0
005475  3  01 EB 02 55  
005479  3  80 2D 00 DF  
005491  3  C0 06 20 1D          .byte 192,6,32,29,192,122,64,149,96,11,192,55,128,3,0,0,128,11,96,52,0,199,128,0,160,29,224,48,192,56,0,0
005495  3  C0 7A 40 95  
005499  3  60 0B C0 37  
0054B1  3  00 00 01 B0          .byte 0,0,1,176,39,72,30,176,13,80,2,216,5,240,8,224,0,0,34,224,29,24,1,192,0,32,7,104,12,56,14,48
0054B5  3  27 48 1E B0  
0054B9  3  0D 50 02 D8  
0054D1  3  00 00 00 6C          .byte 0,0,0,108,9,210,7,172,3,84,0,182,1,124,2,56,0,0,8,184,7,70,0,112,0,8,1,218,3,14,3,140
0054D5  3  09 D2 07 AC  
0054D9  3  03 54 00 B6  
0054F1  3  00 00 00 1B          .byte 0,0,0,27,130,116,1,235,0,213,128,45,0,95,0,142,0,0,2,46,129,209,0,28,0,2,128,118,128,195,0,227
0054F5  3  82 74 01 EB  
0054F9  3  00 D5 80 2D  
005511  3  00 00 C0 06          .byte 0,0,192,6,32,157,192,122,64,53,96,11,192,23,128,35,0,0,128,139,96,116,0,7,128,0,160,29,224,48,192,56
005515  3  20 9D C0 7A  
005519  3  40 35 60 0B  
005531  3  00 00 00 00          .byte 0,0,0,0,1,176,7,72,30,176,37,80,2,216,13,240,0,224,2,0,5,240,9,192,16,0,3,96,6,96,7,112
005535  3  01 B0 07 48  
005539  3  1E B0 25 50  
005551  3  00 00 00 00          .byte 0,0,0,0,0,108,1,210,7,172,9,84,0,182,3,124,0,56,0,128,1,124,2,112,4,0,0,216,1,152,1,220
005555  3  00 6C 01 D2  
005559  3  07 AC 09 54  
005571  3  00 00 00 00          .byte 0,0,0,0,0,27,128,116,1,235,2,85,128,45,0,223,0,14,0,32,0,95,0,156,1,0,0,54,0,102,0,119
005575  3  00 1B 80 74  
005579  3  01 EB 02 55  
005591  3  00 00 00 00          .byte 0,0,0,0,192,6,32,29,192,122,64,149,96,11,192,55,128,3,0,8,192,23,0,39,0,64,128,13,128,25,192,29
005595  3  C0 06 20 1D  
005599  3  C0 7A 40 95  
0055B1  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,176,27,72,15,164,7,32,0,0,2,192,4,160,3,160,0,32,1,144,1,128,3,128
0055B5  3  12 E0 0D 70  
0055B9  3  0A B0 1B 48  
0055D1  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,172,6,210,3,233,1,200,0,0,0,176,1,40,0,232,0,8,0,100,0,96,0,224
0055D5  3  04 B8 03 5C  
0055D9  3  02 AC 06 D2  
0055F1  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,0,171,129,180,64,250,0,114,0,0,0,44,0,74,0,58,0,2,0,25,0,24,0,56
0055F5  3  01 2E 00 D7  
0055F9  3  00 AB 81 B4  
005611  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,192,42,32,109,144,62,128,28,0,0,0,11,128,18,128,14,128,0,64,6,0,6,0,14
005615  3  80 4B C0 35  
005619  3  C0 2A 20 6D  
005631  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,184,27,68,15,160,7,16,0,0,3,192,15,160,3,144,0,8,6,192,6,96,14,224
005635  3  12 E0 0D 70  
005639  3  0A B8 1B 44  
005651  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,174,6,209,3,232,1,196,0,0,0,240,3,232,0,228,0,2,1,176,1,152,3,184
005655  3  04 B8 03 5C  
005659  3  02 AE 06 D1  
005671  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,128,171,65,180,0,250,0,113,0,0,0,60,0,250,0,57,128,0,0,108,0,102,0,238
005675  3  01 2E 00 D7  
005679  3  80 AB 41 B4  
005691  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,224,42,16,109,128,62,64,28,0,0,0,15,128,62,64,14,32,0,0,27,128,25,128,59
005695  3  80 4B C0 35  
005699  3  E0 2A 10 6D  
0056B1  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,120,10,164,27,64,15,160,7,16,0,0,7,64,24,176,3,140,4,0,22,224,28,48,12,112
0056B5  3  12 E0 0D 78  
0056B9  3  0A A4 1B 40  
0056D1  3  00 00 03 60          .byte 0,0,3,96,4,184,3,94,2,169,6,208,3,232,1,196,0,0,1,208,6,44,0,227,1,0,5,184,7,12,3,28
0056D5  3  04 B8 03 5E  
0056D9  3  02 A9 06 D0  
0056F1  3  00 00 00 D8          .byte 0,0,0,216,1,46,128,215,64,170,1,180,0,250,0,113,0,0,0,116,1,139,192,56,0,64,1,110,1,195,0,199
0056F5  3  01 2E 80 D7  
0056F9  3  40 AA 01 B4  
005711  3  00 00 00 36          .byte 0,0,0,54,128,75,224,53,144,42,0,109,128,62,64,28,0,0,0,29,192,98,48,14,0,16,128,91,192,112,192,49
005715  3  80 4B E0 35  
005719  3  90 2A 00 6D  
005731  3  0D 80 12 E0          .byte 13,128,18,224,13,120,10,164,27,64,15,176,7,0,0,0,7,64,24,176,3,140,4,0,22,224,28,48,12,112,0,0
005735  3  0D 78 0A A4  
005739  3  1B 40 0F B0  
005751  3  03 60 04 B8          .byte 3,96,4,184,3,94,2,169,6,208,3,236,1,192,0,0,1,208,6,44,0,227,1,0,5,184,7,12,3,28,0,0
005755  3  03 5E 02 A9  
005759  3  06 D0 03 EC  
005771  3  00 D8 01 2E          .byte 0,216,1,46,128,215,64,170,1,180,0,251,0,112,0,0,0,116,1,139,192,56,0,64,1,110,1,195,0,199,0,0
005775  3  80 D7 40 AA  
005779  3  01 B4 00 FB  
005791  3  00 36 80 4B          .byte 0,54,128,75,224,53,144,42,0,109,192,62,0,28,0,0,0,29,192,98,48,14,0,16,128,91,192,112,192,49,0,0
005795  3  E0 35 90 2A  
005799  3  00 6D C0 3E  
0057B1  3  00 00 0D 80          .byte 0,0,13,128,18,228,13,120,10,176,27,64,15,160,7,16,0,0,7,68,24,184,3,128,4,0,22,224,28,48,12,112
0057B5  3  12 E4 0D 78  
0057B9  3  0A B0 1B 40  
0057D1  3  00 00 03 60          .byte 0,0,3,96,4,185,3,94,2,172,6,208,3,232,1,196,0,0,1,209,6,46,0,224,1,0,5,184,7,12,3,28
0057D5  3  04 B9 03 5E  
0057D9  3  02 AC 06 D0  
0057F1  3  00 00 00 D8          .byte 0,0,0,216,65,46,128,215,0,171,1,180,0,250,0,113,0,0,64,116,129,139,0,56,0,64,1,110,1,195,0,199
0057F5  3  41 2E 80 D7  
0057F9  3  00 AB 01 B4  
005811  3  00 00 00 36          .byte 0,0,0,54,144,75,224,53,192,42,0,109,128,62,64,28,0,0,16,29,224,98,0,14,0,16,128,91,192,112,192,49
005815  3  90 4B E0 35  
005819  3  C0 2A 00 6D  
005831  3  00 00 0D 80          .byte 0,0,13,128,18,224,13,112,10,184,27,68,15,160,7,16,0,0,3,192,15,160,3,156,0,0,6,192,6,96,14,224
005835  3  12 E0 0D 70  
005839  3  0A B8 1B 44  
005851  3  00 00 03 60          .byte 0,0,3,96,4,184,3,92,2,174,6,209,3,232,1,196,0,0,0,240,3,232,0,231,0,0,1,176,1,152,3,184
005855  3  04 B8 03 5C  
005859  3  02 AE 06 D1  
005871  3  00 00 00 D8          .byte 0,0,0,216,1,46,0,215,128,171,65,180,0,250,0,113,0,0,0,60,0,250,192,57,0,0,0,108,0,102,0,238
005875  3  01 2E 00 D7  
005879  3  80 AB 41 B4  
005891  3  00 00 00 36          .byte 0,0,0,54,128,75,192,53,224,42,16,109,128,62,64,28,0,0,0,15,128,62,112,14,0,0,0,27,128,25,128,59
005895  3  80 4B C0 35  
005899  3  E0 2A 10 6D  
0058B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,10,48
0058B5  3  00 00 00 00  
0058B9  3  00 00 00 00  
0058D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,140
0058D5  3  00 00 00 00  
0058D9  3  00 00 00 00  
0058F1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,163
0058F5  3  00 00 00 00  
0058F9  3  00 00 00 00  
005911  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,192,40
005915  3  00 00 00 00  
005919  3  00 00 00 00  
005931  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,136,4,32,0,0
005935  3  00 00 00 00  
005939  3  00 00 00 00  
005951  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,34,1,8,0,0
005955  3  00 00 00 00  
005959  3  00 00 00 00  
005971  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,8,0,66,0,0
005975  3  00 00 00 00  
005979  3  00 00 00 00  
005991  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,66,128,16,0,0
005995  3  00 00 00 00  
005999  3  00 00 00 00  
0059B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,132,4,32,0,0,0,0
0059B5  3  00 00 00 00  
0059B9  3  00 00 00 00  
0059D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,33,1,8,0,0,0,0
0059D5  3  00 00 00 00  
0059D9  3  00 00 00 00  
0059F1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,8,0,66,0,0,0,0
0059F5  3  00 00 00 00  
0059F9  3  00 00 00 00  
005A11  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,128,16,0,0,0,0
005A15  3  00 00 00 00  
005A19  3  00 00 00 00  
005A31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,145,0,0,0,0
005A35  3  00 00 00 00  
005A39  3  00 00 00 00  
005A51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,36,0,0,0,0
005A55  3  00 00 00 00  
005A59  3  00 00 00 00  
005A71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,137,0,0,0,0
005A75  3  00 00 00 00  
005A79  3  00 00 00 00  
005A91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,34,0,0,0,0
005A95  3  00 00 00 00  
005A99  3  00 00 00 00  
005AB1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,129,128,8
005AB5  3  00 00 00 00  
005AB9  3  00 00 00 00  
005AD1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,32,32,2
005AD5  3  00 00 00 00  
005AD9  3  00 00 00 00  
005AF1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,8,136,0
005AF5  3  00 00 00 00  
005AF9  3  00 00 00 00  
005B11  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,66,34,0
005B15  3  00 00 00 00  
005B19  3  00 00 00 00  
005B31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,137
005B35  3  00 00 00 00  
005B39  3  00 00 00 00  
005B51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,34
005B55  3  00 00 00 00  
005B59  3  00 00 00 00  
005B71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,8
005B75  3  00 00 00 00  
005B79  3  00 00 00 00  
005B91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,66
005B95  3  00 00 00 00  
005B99  3  00 00 00 00  
005BB1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005BB5  3  00 00 00 00  
005BB9  3  00 00 00 00  
005BD1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005BD5  3  00 00 00 00  
005BD9  3  00 00 00 00  
005BF1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005BF5  3  00 00 00 00  
005BF9  3  00 00 00 00  
005C11  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
005C15  3  00 00 00 00  
005C19  3  00 00 00 00  
005C31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,136,114,76,188,62,158,250,47,124,55,252,79,242
005C35  3  00 00 00 00  
005C39  3  00 00 00 00  
005C51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,98,28,147,175,15,167,190,11,223,13,255,147,252
005C55  3  00 00 00 00  
005C59  3  00 00 00 00  
005C71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,24,199,36,235,195,169,239,194,247,195,127,36,255
005C75  3  00 00 00 00  
005C79  3  00 00 00 00  
005C91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,134,49,201,250,240,234,123,240,189,240,223,201,63
005C95  3  00 00 00 00  
005C99  3  00 00 00 00  
005CB1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,17,136,98,70,244,45,185,28,46,188,95,126,94,254,47,124,55,252,79,242
005CB5  3  00 00 00 00  
005CB9  3  00 00 00 00  
005CD1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,4,98,152,145,125,11,46,71,11,175,151,223,151,191,11,223,13,255,147,252
005CD5  3  00 00 00 00  
005CD9  3  00 00 00 00  
005CF1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,129,24,102,36,223,66,203,145,194,235,229,247,229,239,194,247,195,127,36,255
005CF5  3  00 00 00 00  
005CF9  3  00 00 00 00  
005D11  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,32,70,25,137,183,208,114,228,240,186,249,125,249,123,240,189,240,223,201,63
005D15  3  00 00 00 00  
005D19  3  00 00 00 00  
005D31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,2,145,129,226,74,116,38,56,46,45,28,46,188,95,126,94,254,47,124,55,252,79,242
005D35  3  00 00 00 00  
005D39  3  00 02 91 81  
005D51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,128,0,100,96,184,146,157,9,142,11,11,71,11,175,151,223,151,191,11,223,13,255,147,252
005D55  3  00 00 00 00  
005D59  3  80 00 64 60  
005D71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,32,0,25,24,174,36,103,66,227,130,194,209,194,235,229,247,229,239,194,247,195,127,36,255
005D75  3  00 00 00 00  
005D79  3  20 00 19 18  
005D91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,8,0,6,70,43,137,153,208,184,224,112,180,240,186,249,125,249,123,240,189,240,223,201,63
005D95  3  00 00 00 00  
005D99  3  08 00 06 46  
005DB1  3  00 00 00 00          .byte 0,0,0,0,17,136,34,68,52,44,24,24,20,56,22,120,44,56,46,252,94,124,95,126,94,254,47,124,55,252,79,242
005DB5  3  11 88 22 44  
005DB9  3  34 2C 18 18  
005DD1  3  00 00 00 00          .byte 0,0,0,0,4,98,8,145,13,11,6,6,5,14,5,158,11,14,11,191,23,159,151,223,151,191,11,223,13,255,147,252
005DD5  3  04 62 08 91  
005DD9  3  0D 0B 06 06  
005DF1  3  00 00 00 00          .byte 0,0,0,0,129,24,66,36,195,66,129,129,129,67,129,103,130,195,194,239,197,231,229,247,229,239,194,247,195,127,36,255
005DF5  3  81 18 42 24  
005DF9  3  C3 42 81 81  
005E11  3  00 00 00 00          .byte 0,0,0,0,32,70,16,137,176,208,96,96,224,80,224,89,224,176,240,187,241,121,249,125,249,123,240,189,240,223,201,63
005E15  3  20 46 10 89  
005E19  3  B0 D0 60 60  
005E31  3  00 00 01 00          .byte 0,0,1,0,2,192,3,64,6,224,5,96,14,240,21,120,22,248,47,124,46,252,95,126,94,254,47,124,63,252,79,242
005E35  3  02 C0 03 40  
005E39  3  06 E0 05 60  
005E51  3  00 00 00 40          .byte 0,0,0,64,0,176,0,208,1,184,1,88,3,188,5,94,5,190,11,223,11,191,151,223,151,191,11,223,15,255,147,252
005E55  3  00 B0 00 D0  
005E59  3  01 B8 01 58  
005E71  3  00 00 00 10          .byte 0,0,0,16,0,44,0,52,0,110,0,86,0,239,129,87,129,111,194,247,194,239,229,247,229,239,194,247,195,255,36,255
005E75  3  00 2C 00 34  
005E79  3  00 6E 00 56  
005E91  3  00 00 00 04          .byte 0,0,0,4,0,11,0,13,128,27,128,21,192,59,224,85,224,91,240,189,240,187,249,125,249,123,240,189,240,255,201,63
005E95  3  00 0B 00 0D  
005E99  3  80 1B 80 15  
005EB1  3  00 00 01 00          .byte 0,0,1,0,2,192,3,64,6,224,5,96,14,240,21,120,22,248,47,124,46,252,95,126,94,254,47,124,63,252,79,242
005EB5  3  02 C0 03 40  
005EB9  3  06 E0 05 60  
005ED1  3  00 00 00 40          .byte 0,0,0,64,0,176,0,208,1,184,1,88,3,188,5,94,5,190,11,223,11,191,151,223,151,191,11,223,15,255,147,252
005ED5  3  00 B0 00 D0  
005ED9  3  01 B8 01 58  
005EF1  3  00 00 00 10          .byte 0,0,0,16,0,44,0,52,0,110,0,86,0,239,129,87,129,111,194,247,194,239,229,247,229,239,194,247,195,255,36,255
005EF5  3  00 2C 00 34  
005EF9  3  00 6E 00 56  
005F11  3  00 00 00 04          .byte 0,0,0,4,0,11,0,13,128,27,128,21,192,59,224,85,224,91,240,189,240,187,249,125,249,123,240,189,240,255,201,63
005F15  3  00 0B 00 0D  
005F19  3  80 1B 80 15  
005F31  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,2,128,3,64,0,0,6,192,6,96,14,224
005F35  3  3B F0 5F B8  
005F39  3  70 EC 16 3E  
005F51  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,0,160,0,208,0,0,1,176,1,152,3,184
005F55  3  0E FC 17 EE  
005F59  3  1C 3B 85 8F  
005F71  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,40,0,52,0,0,0,108,0,102,0,238
005F75  3  03 BF 85 FB  
005F79  3  C7 0E E1 63  
005F91  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,10,0,13,0,0,0,27,128,25,128,59
005F95  3  C0 EF E1 7E  
005F99  3  B1 C3 F8 58  
005FB1  3  00 00 07 80          .byte 0,0,7,128,30,224,27,240,127,184,112,236,23,62,5,142,15,162,3,156,0,0,11,160,0,16,1,128,1,128,3,128
005FB5  3  1E E0 1B F0  
005FB9  3  7F B8 70 EC  
005FD1  3  00 00 01 E0          .byte 0,0,1,224,7,184,6,252,31,238,28,59,133,207,129,99,131,232,0,231,0,0,2,232,0,4,0,96,0,96,0,224
005FD5  3  07 B8 06 FC  
005FD9  3  1F EE 1C 3B  
005FF1  3  00 00 00 78          .byte 0,0,0,120,1,238,1,191,135,251,199,14,225,115,224,88,32,250,192,57,0,0,0,186,0,1,0,24,0,24,0,56
005FF5  3  01 EE 01 BF  
005FF9  3  87 FB C7 0E  
006011  3  00 00 00 1E          .byte 0,0,0,30,128,123,192,111,225,254,177,195,248,92,56,22,136,62,112,14,0,0,128,46,64,0,0,6,0,6,0,14
006015  3  80 7B C0 6F  
006019  3  E1 FE B1 C3  
006031  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,2,128,3,64,0,0,6,192,6,96,14,224
006035  3  3B F0 5F B8  
006039  3  70 EC 16 3E  
006051  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,0,160,0,208,0,0,1,176,1,152,3,184
006055  3  0E FC 17 EE  
006059  3  1C 3B 85 8F  
006071  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,40,0,52,0,0,0,108,0,102,0,238
006075  3  03 BF 85 FB  
006079  3  C7 0E E1 63  
006091  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,10,0,13,0,0,0,27,128,25,128,59
006095  3  C0 EF E1 7E  
006099  3  B1 C3 F8 58  
0060B1  3  07 80 1E E0          .byte 7,128,30,224,59,240,95,184,112,236,22,62,5,142,15,162,3,156,0,0,7,128,11,160,0,0,22,224,28,48,12,112
0060B5  3  3B F0 5F B8  
0060B9  3  70 EC 16 3E  
0060D1  3  01 E0 07 B8          .byte 1,224,7,184,14,252,23,238,28,59,133,143,129,99,131,232,0,231,0,0,1,224,2,232,0,0,5,184,7,12,3,28
0060D5  3  0E FC 17 EE  
0060D9  3  1C 3B 85 8F  
0060F1  3  00 78 01 EE          .byte 0,120,1,238,3,191,133,251,199,14,225,99,224,88,32,250,192,57,0,0,0,120,0,186,0,0,1,110,1,195,0,199
0060F5  3  03 BF 85 FB  
0060F9  3  C7 0E E1 63  
006111  3  00 1E 80 7B          .byte 0,30,128,123,192,239,225,126,177,195,248,88,56,22,136,62,112,14,0,0,0,30,128,46,0,0,128,91,192,112,192,49
006115  3  C0 EF E1 7E  
006119  3  B1 C3 F8 58  
006131  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,64,2,192,0,0,3,96,6,96,7,112
006135  3  0F DC 1D FA  
006139  3  37 0E 7C 68  
006151  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,80,0,176,0,0,0,216,1,152,1,220
006155  3  03 F7 87 7E  
006159  3  8D C3 1F 1A  
006171  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,20,0,44,0,0,0,54,0,102,0,119
006175  3  C0 FD A1 DF  
006179  3  E3 70 87 C6  
006191  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,0,5,0,11,0,0,128,13,128,25,192,29
006195  3  70 3F E8 77  
006199  3  38 DC A1 F1  
0061B1  3  00 00 01 E0          .byte 0,0,1,224,7,120,15,216,29,254,55,14,124,232,113,160,69,240,57,192,0,0,5,208,8,0,1,128,1,128,1,192
0061B5  3  07 78 0F D8  
0061B9  3  1D FE 37 0E  
0061D1  3  00 00 00 78          .byte 0,0,0,120,1,222,3,246,135,127,141,195,31,58,28,104,17,124,14,112,0,0,1,116,2,0,0,96,0,96,0,112
0061D5  3  01 DE 03 F6  
0061D9  3  87 7F 8D C3  
0061F1  3  00 00 00 1E          .byte 0,0,0,30,128,119,128,253,225,223,227,112,135,206,7,26,4,95,3,156,0,0,0,93,0,128,0,24,0,24,0,28
0061F5  3  80 77 80 FD  
0061F9  3  E1 DF E3 70  
006211  3  00 00 80 07          .byte 0,0,128,7,224,29,96,63,248,119,56,220,161,243,129,198,193,23,0,231,0,0,64,23,0,32,0,6,0,6,0,7
006215  3  E0 1D 60 3F  
006219  3  F8 77 38 DC  
006231  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,64,1,160,0,0,3,96,6,96,7,112
006235  3  0F DC 1D FA  
006239  3  37 0E 7C 68  
006251  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,80,0,104,0,0,0,216,1,152,1,220
006255  3  03 F7 87 7E  
006259  3  8D C3 1F 1A  
006271  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,20,0,26,0,0,0,54,0,102,0,119
006275  3  C0 FD A1 DF  
006279  3  E3 70 87 C6  
006291  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,0,5,128,6,0,0,128,13,128,25,192,29
006295  3  70 3F E8 77  
006299  3  38 DC A1 F1  
0062B1  3  01 E0 07 78          .byte 1,224,7,120,15,220,29,250,55,14,124,104,113,160,69,240,57,192,0,0,1,224,5,208,0,0,7,104,12,56,14,48
0062B5  3  0F DC 1D FA  
0062B9  3  37 0E 7C 68  
0062D1  3  00 78 01 DE          .byte 0,120,1,222,3,247,135,126,141,195,31,26,28,104,17,124,14,112,0,0,0,120,1,116,0,0,1,218,3,14,3,140
0062D5  3  03 F7 87 7E  
0062D9  3  8D C3 1F 1A  
0062F1  3  00 1E 80 77          .byte 0,30,128,119,192,253,161,223,227,112,135,198,7,26,4,95,3,156,0,0,0,30,0,93,0,0,128,118,128,195,0,227
0062F5  3  C0 FD A1 DF  
0062F9  3  E3 70 87 C6  
006311  3  80 07 E0 1D          .byte 128,7,224,29,112,63,232,119,56,220,161,241,129,198,193,23,0,231,0,0,128,7,64,23,0,0,160,29,224,48,192,56
006315  3  70 3F E8 77  
006319  3  38 DC A1 F1  
006331  3  02 00 01 00          .byte 2,0,1,0,1,0,3,0,7,128,15,192,10,192,10,192,7,128,3,0,0,32,15,192,23,128,3,192,1,192,0,96
006335  3  01 00 03 00  
006339  3  07 80 0F C0  
006351  3  00 80 00 40          .byte 0,128,0,64,0,64,0,192,1,224,3,240,2,176,2,176,1,224,0,192,0,8,3,240,5,224,0,240,0,112,0,24
006355  3  00 40 00 C0  
006359  3  01 E0 03 F0  
006371  3  00 20 00 10          .byte 0,32,0,16,0,16,0,48,0,120,0,252,0,172,0,172,0,120,0,48,0,2,0,252,1,120,0,60,0,28,0,6
006375  3  00 10 00 30  
006379  3  00 78 00 FC  
006391  3  00 08 00 04          .byte 0,8,0,4,0,4,0,12,0,30,0,63,0,43,0,43,0,30,0,12,128,0,0,63,0,94,0,15,0,7,128,1
006395  3  00 04 00 0C  
006399  3  00 1E 00 3F  
0063B1  3  00 80 01 00          .byte 0,128,1,0,0,128,1,128,3,192,7,224,5,96,5,96,3,192,1,128,12,0,3,240,3,192,1,192,1,128,0,128
0063B5  3  00 80 01 80  
0063B9  3  03 C0 07 E0  
0063D1  3  00 20 00 40          .byte 0,32,0,64,0,32,0,96,0,240,1,248,1,88,1,88,0,240,0,96,3,0,0,252,0,240,0,112,0,96,0,32
0063D5  3  00 20 00 60  
0063D9  3  00 F0 01 F8  
0063F1  3  00 08 00 10          .byte 0,8,0,16,0,8,0,24,0,60,0,126,0,86,0,86,0,60,0,24,0,192,0,63,0,60,0,28,0,24,0,8
0063F5  3  00 08 00 18  
0063F9  3  00 3C 00 7E  
006411  3  00 02 00 04          .byte 0,2,0,4,0,2,0,6,0,15,128,31,128,21,128,21,0,15,0,6,0,48,192,15,0,15,0,7,0,6,0,2
006415  3  00 02 00 06  
006419  3  00 0F 80 1F  
006431  3  00 40 00 80          .byte 0,64,0,128,0,128,0,192,1,224,3,240,3,80,3,80,1,224,0,192,4,0,3,240,1,232,3,192,3,128,6,0
006435  3  00 80 00 C0  
006439  3  01 E0 03 F0  
006451  3  00 10 00 20          .byte 0,16,0,32,0,32,0,48,0,120,0,252,0,212,0,212,0,120,0,48,1,0,0,252,0,122,0,240,0,224,1,128
006455  3  00 20 00 30  
006459  3  00 78 00 FC  
006471  3  00 04 00 08          .byte 0,4,0,8,0,8,0,12,0,30,0,63,0,53,0,53,0,30,0,12,0,64,0,63,128,30,0,60,0,56,0,96
006475  3  00 08 00 0C  
006479  3  00 1E 00 3F  
006491  3  00 01 00 02          .byte 0,1,0,2,0,2,0,3,128,7,192,15,64,13,64,13,128,7,0,3,0,16,192,15,160,7,0,15,0,14,0,24
006495  3  00 02 00 03  
006499  3  80 07 C0 0F  
0064B1  3  01 00 00 80          .byte 1,0,0,128,1,0,1,128,3,192,7,224,6,160,6,160,3,192,1,128,0,48,15,192,3,192,3,128,1,128,1,0
0064B5  3  01 00 01 80  
0064B9  3  03 C0 07 E0  
0064D1  3  00 40 00 20          .byte 0,64,0,32,0,64,0,96,0,240,1,248,1,168,1,168,0,240,0,96,0,12,3,240,0,240,0,224,0,96,0,64
0064D5  3  00 40 00 60  
0064D9  3  00 F0 01 F8  
0064F1  3  00 10 00 08          .byte 0,16,0,8,0,16,0,24,0,60,0,126,0,106,0,106,0,60,0,24,0,3,0,252,0,60,0,56,0,24,0,16
0064F5  3  00 10 00 18  
0064F9  3  00 3C 00 7E  
006511  3  00 04 00 02          .byte 0,4,0,2,0,4,0,6,0,15,128,31,128,26,128,26,0,15,0,6,192,0,0,63,0,15,0,14,0,6,0,4
006515  3  00 04 00 06  
006519  3  00 0F 80 1F  
006531  3  0F E0 00 00          .byte 15,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006535  3  00 00 00 00  
006539  3  00 00 00 00  
006551  3  03 F8 00 00          .byte 3,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006555  3  00 00 00 00  
006559  3  00 00 00 00  
006571  3  00 FE 00 00          .byte 0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006575  3  00 00 00 00  
006579  3  00 00 00 00  
006591  3  80 3F 00 00          .byte 128,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006595  3  00 00 00 00  
006599  3  00 00 00 00  
0065B1  3  07 C0 03 80          .byte 7,192,3,128,3,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0065B5  3  03 80 01 00  
0065B9  3  00 00 00 00  
0065D1  3  01 F0 00 E0          .byte 1,240,0,224,0,224,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0065D5  3  00 E0 00 40  
0065D9  3  00 00 00 00  
0065F1  3  00 7C 00 38          .byte 0,124,0,56,0,56,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0065F5  3  00 38 00 10  
0065F9  3  00 00 00 00  
006611  3  00 1F 00 0E          .byte 0,31,0,14,0,14,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006615  3  00 0E 00 04  
006619  3  00 00 00 00  
006631  3  03 80 01 00          .byte 3,128,1,0,2,128,2,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006635  3  02 80 02 80  
006639  3  01 00 00 00  
006651  3  00 E0 00 40          .byte 0,224,0,64,0,160,0,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006655  3  00 A0 00 A0  
006659  3  00 40 00 00  
006671  3  00 38 00 10          .byte 0,56,0,16,0,40,0,40,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006675  3  00 28 00 28  
006679  3  00 10 00 00  
006691  3  00 0E 00 04          .byte 0,14,0,4,0,10,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006695  3  00 0A 00 0A  
006699  3  00 04 00 00  
0066B1  3  01 00 01 00          .byte 1,0,1,0,1,0,3,128,3,128,7,64,7,64,2,128,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0066B5  3  01 00 03 80  
0066B9  3  03 80 07 40  
0066D1  3  00 40 00 40          .byte 0,64,0,64,0,64,0,224,0,224,1,208,1,208,0,160,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0066D5  3  00 40 00 E0  
0066D9  3  00 E0 01 D0  
0066F1  3  00 10 00 10          .byte 0,16,0,16,0,16,0,56,0,56,0,116,0,116,0,40,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0066F5  3  00 10 00 38  
0066F9  3  00 38 00 74  
006711  3  00 04 00 04          .byte 0,4,0,4,0,4,0,14,0,14,0,29,0,29,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006715  3  00 04 00 0E  
006719  3  00 0E 00 1D  
006731  3  00 00 00 00          .byte 0,0,0,0,1,0,1,0,1,0,3,128,3,128,2,128,7,64,7,64,7,64,2,128,1,0,0,0,0,0,0,0
006735  3  01 00 01 00  
006739  3  01 00 03 80  
006751  3  00 00 00 00          .byte 0,0,0,0,0,64,0,64,0,64,0,224,0,224,0,160,1,208,1,208,1,208,0,160,0,64,0,0,0,0,0,0
006755  3  00 40 00 40  
006759  3  00 40 00 E0  
006771  3  00 00 00 00          .byte 0,0,0,0,0,16,0,16,0,16,0,56,0,56,0,40,0,116,0,116,0,116,0,40,0,16,0,0,0,0,0,0
006775  3  00 10 00 10  
006779  3  00 10 00 38  
006791  3  00 00 00 00          .byte 0,0,0,0,0,4,0,4,0,4,0,14,0,14,0,10,0,29,0,29,0,29,0,10,0,4,0,0,0,0,0,0
006795  3  00 04 00 04  
006799  3  00 04 00 0E  
0067B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,128,7,192
0067B5  3  00 00 00 00  
0067B9  3  00 00 00 00  
0067D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,240
0067D5  3  00 00 00 00  
0067D9  3  00 00 00 00  
0067F1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,124
0067F5  3  00 00 00 00  
0067F9  3  00 00 00 00  
006811  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,31
006815  3  00 00 00 00  
006819  3  00 00 00 00  
006831  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,4,64,1,0,27,176
006835  3  00 00 00 00  
006839  3  00 00 00 00  
006851  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,1,16,0,64,6,236
006855  3  00 00 00 00  
006859  3  00 00 00 00  
006871  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,68,0,16,1,187
006875  3  00 00 00 00  
006879  3  00 00 00 00  
006891  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,17,0,4,192,110
006895  3  00 00 00 00  
006899  3  00 00 00 00  
0068B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,17,16,8,32,0,0,0,0,49,24
0068B5  3  00 00 00 00  
0068B9  3  00 00 00 00  
0068D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,4,68,2,8,0,0,0,0,12,70
0068D5  3  00 00 00 00  
0068D9  3  00 00 00 00  
0068F1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,1,17,0,130,0,0,0,0,131,17
0068F5  3  00 00 00 00  
0068F9  3  00 00 00 00  
006911  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,64,68,128,32,0,0,0,0,96,196
006915  3  00 00 00 00  
006919  3  00 00 00 00  
006931  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,48,24,0,0,0,0,0,0,65,4
006935  3  00 00 00 00  
006939  3  00 00 00 00  
006951  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,64,12,6,0,0,0,0,0,0,16,65
006955  3  00 00 00 00  
006959  3  00 00 00 00  
006971  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,131,1,0,0,0,0,0,0,68,16
006975  3  00 00 00 00  
006979  3  00 00 00 00  
006991  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,96,192,0,0,0,0,0,0,17,4
006995  3  00 00 00 00  
006999  3  00 00 00 00  
0069B1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,33,8,64,4,0,0,0,0,0,0
0069B5  3  00 00 00 00  
0069B9  3  00 00 00 00  
0069D1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,8,66,16,1,0,0,0,0,0,0
0069D5  3  00 00 00 00  
0069D9  3  00 00 00 00  
0069F1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,130,16,68,0,0,0,0,0,0,0
0069F5  3  00 00 00 00  
0069F9  3  00 00 00 00  
006A11  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,32,132,17,0,0,0,0,0,0,0
006A15  3  00 00 00 00  
006A19  3  00 00 00 00  
006A31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,65,4,64,4,0,0,0,0
006A35  3  00 00 00 00  
006A39  3  00 00 00 00  
006A51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,65,16,1,0,0,0,0
006A55  3  00 00 00 00  
006A59  3  00 00 00 00  
006A71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,16,68,0,0,0,0,0
006A75  3  00 00 00 00  
006A79  3  00 00 00 00  
006A91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,4,17,0,0,0,0,0
006A95  3  00 00 00 00  
006A99  3  00 00 00 00  
006AB1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,64,4,0,0
006AB5  3  00 00 00 00  
006AB9  3  00 00 00 00  
006AD1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,16,1,0,0
006AD5  3  00 00 00 00  
006AD9  3  00 00 00 00  
006AF1  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,68,0,0,0
006AF5  3  00 00 00 00  
006AF9  3  00 00 00 00  
006B11  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,17,0,0,0
006B15  3  00 00 00 00  
006B19  3  00 00 00 00  
006B31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B35  3  00 00 00 00  
006B39  3  00 00 00 00  
006B51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B55  3  00 00 00 00  
006B59  3  00 00 00 00  
006B71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B75  3  00 00 00 00  
006B79  3  00 00 00 00  
006B91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006B95  3  00 00 00 00  
006B99  3  00 00 00 00  
006BB1  3  00 00 03 80          .byte 0,0,3,128,6,64,15,160,14,160,31,208,28,80,31,208,60,104,58,168,59,168,28,112,26,176,15,224,5,64,0,0
006BB5  3  06 40 0F A0  
006BB9  3  0E A0 1F D0  
006BD1  3  00 00 00 E0          .byte 0,0,0,224,1,144,3,232,3,168,7,244,7,20,7,244,15,26,14,170,14,234,7,28,6,172,3,248,1,80,0,0
006BD5  3  01 90 03 E8  
006BD9  3  03 A8 07 F4  
006BF1  3  00 00 00 38          .byte 0,0,0,56,0,100,0,250,0,234,1,253,1,197,1,253,131,198,131,170,131,186,1,199,1,171,0,254,0,84,0,0
006BF5  3  00 64 00 FA  
006BF9  3  00 EA 01 FD  
006C11  3  00 00 00 0E          .byte 0,0,0,14,0,25,128,62,128,58,64,127,64,113,64,127,160,241,160,234,160,238,192,113,192,106,128,63,0,21,0,0
006C15  3  00 19 80 3E  
006C19  3  80 3A 40 7F  
006C31  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006C35  3  00 00 00 00  
006C39  3  00 00 00 00  
006C51  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006C55  3  00 00 00 00  
006C59  3  00 00 00 00  
006C71  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006C75  3  00 00 00 00  
006C79  3  00 00 00 00  
006C91  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006C95  3  00 00 00 00  
006C99  3  00 00 00 00  
006CB1  3  4A A9 37 F6          .byte 74,169,55,246,12,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006CB5  3  0C 18 00 00  
006CB9  3  00 00 00 00  
006CD1  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006CD5  3  03 06 00 00  
006CD9  3  00 00 00 00  
006CF1  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006CF5  3  80 C1 00 00  
006CF9  3  00 00 00 00  
006D11  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006D15  3  60 30 00 00  
006D19  3  00 00 00 00  
006D31  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,13,192,3,160,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006D35  3  0C 18 01 C0  
006D39  3  0D C0 03 A0  
006D51  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,3,112,0,232,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006D55  3  03 06 00 70  
006D59  3  03 70 00 E8  
006D71  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,220,0,58,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006D75  3  80 C1 00 1C  
006D79  3  00 DC 00 3A  
006D91  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,55,128,14,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
006D95  3  60 30 00 07  
006D99  3  00 37 80 0E  
006DB1  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,27,128,7,0,14,128,12,64,12,0,10,0,0,0,0,0,0,0,0,0,0,0
006DB5  3  0C 18 01 C0  
006DB9  3  01 C0 1B 80  
006DD1  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,6,224,1,192,3,160,3,16,3,0,2,128,0,0,0,0,0,0,0,0,0,0
006DD5  3  03 06 00 70  
006DD9  3  00 70 06 E0  
006DF1  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,1,184,0,112,0,232,0,196,0,192,0,160,0,0,0,0,0,0,0,0,0,0
006DF5  3  80 C1 00 1C  
006DF9  3  00 1C 01 B8  
006E11  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,0,110,0,28,0,58,0,49,0,48,0,40,0,0,0,0,0,0,0,0,0,0
006E15  3  60 30 00 07  
006E19  3  00 07 00 6E  
006E31  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,3,128,3,192,3,32,7,0,3,128,1,224,0,192,1,192,0,192,0,128,0,0
006E35  3  0C 18 01 C0  
006E39  3  01 C0 03 80  
006E51  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,224,0,240,0,200,1,192,0,224,0,120,0,48,0,112,0,48,0,32,0,0
006E55  3  03 06 00 70  
006E59  3  00 70 00 E0  
006E71  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,0,56,0,60,0,50,0,112,0,56,0,30,0,12,0,28,0,12,0,8,0,0
006E75  3  80 C1 00 1C  
006E79  3  00 1C 00 38  
006E91  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,0,14,0,15,128,12,0,28,0,14,128,7,0,3,0,7,0,3,0,2,0,0
006E95  3  60 30 00 07  
006E99  3  00 07 00 0E  
006EB1  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,0,216,0,224,0,224,1,100,2,120,0,48,0,56,0,88,0,12,0,0,0,0
006EB5  3  0C 18 01 C0  
006EB9  3  01 C0 00 D8  
006ED1  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,54,0,56,0,56,0,89,0,158,0,12,0,14,0,22,0,3,0,0,0,0
006ED5  3  03 06 00 70  
006ED9  3  00 70 00 36  
006EF1  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,128,13,0,14,0,14,64,22,128,39,0,3,128,3,128,5,192,0,0,0,0,0
006EF5  3  80 C1 00 1C  
006EF9  3  00 1C 80 0D  
006F11  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,96,3,128,3,128,3,144,5,224,9,192,0,224,0,96,1,48,0,0,0,0,0
006F15  3  60 30 00 07  
006F19  3  00 07 60 03  
006F31  3  4A A9 37 F6          .byte 74,169,55,246,12,24,1,192,1,192,0,216,0,224,0,224,1,100,2,121,0,62,0,28,0,0,0,0,0,0,0,0
006F35  3  0C 18 01 C0  
006F39  3  01 C0 00 D8  
006F51  3  52 AA 8D FD          .byte 82,170,141,253,3,6,0,112,0,112,0,54,0,56,0,56,0,89,64,158,128,15,0,7,0,0,0,0,0,0,0,0
006F55  3  03 06 00 70  
006F59  3  00 70 00 36  
006F71  3  94 AA 63 7F          .byte 148,170,99,127,128,193,0,28,0,28,128,13,0,14,0,14,64,22,144,39,224,3,192,1,0,0,0,0,0,0,0,0
006F75  3  80 C1 00 1C  
006F79  3  00 1C 80 0D  
006F91  3  A5 2A D8 DF          .byte 165,42,216,223,96,48,0,7,0,7,96,3,128,3,128,3,144,5,228,9,248,0,112,0,0,0,0,0,0,0,0,0
006F95  3  60 30 00 07  
006F99  3  00 07 60 03  
006FB1  3               frmlst:
006FB1  3  00 04                .byte 0,4
006FB3  3  04 06                .byte 4,6
006FB5  3  0A 06                .byte 10,6
006FB7  3  10 07                .byte 16,7
006FB9  3  17 06                .byte 23,6
006FBB  3  1D 04                .byte 29,4
006FBD  3  21 04                .byte 33,4
006FBF  3  25 04                .byte 37,4
006FC1  3  29 05                .byte 41,5
006FC3  3  2E 08                .byte 46,8
006FC5  3  36 01                .byte 54,1
006FC7  3  37 01                .byte 55,1
006FC9  3  38 06 3E 00          .byte 56,6,62,0
006FCD  3               scdat:
006FCD  3  8E 01 A0 01          .word 398,416,332,458,428,440,440,427,380,471,415,374,457,398,433,474,417,423,297,451,292,525,475,244,450,421
006FD1  3  4C 01 CA 01  
006FD5  3  AC 01 B8 01  
007001  3  33 01                .word 307
007003  3  03 02 01 09          .byte 3,2,1,9,4,4,32,33,4,14,13,5,7,4,4,11,255,106,6,8,5,6,5,4,4,10,1,1,9,4,11,3,39
007007  3  04 04 20 21  
00700B  3  04 0E 0D 05  
007024  3  23 22 1A 08          .byte 35,34,26,8,11,3,0,0,3,98,255,0,9,3,40,3,8,10,9,11,100,0,0,41,35,33,30,3,255,0,16,41,0
007028  3  0B 03 00 00  
00702C  3  03 62 FF 00  
007045  3  03 07 06 FF          .byte 3,7,6,255,0,4,31,32,34,255,0,9,128,127,255,0,9,3,4,12,4,11,0,0,0,35,34,255,0,7,28,29,128
007049  3  00 04 1F 20  
00704D  3  22 FF 00 09  
007066  3  7F 1D 1C FF          .byte 127,29,28,255,0,7,13,11,13,11,3,0,76,37,44,45,38,255,0,5,104,36,103,147,148,104,36,103,255,0,5,26,8
00706A  3  00 07 0D 0B  
00706E  3  0D 0B 03 00  
007087  3  0A 04 19 00          .byte 10,4,25,0,0,26,104,36,36,103,0,27,255,0,4,101,0,35,34,0,0,98,255,0,6,3,5,7,255,0,8,104,103
00708B  3  00 1A 68 24  
00708F  3  24 67 00 1B  
0070A8  3  FF 00 05 1F          .byte 255,0,5,31,32,33,75,255,0,9,7,8,10,255,0,6,26,8,11,255,0,6,44,45,28,29,255,0,6,37,38,5,26
0070AC  3  20 21 4B FF  
0070B0  3  00 09 07 08  
0070C9  3  08 0A FF 00          .byte 8,10,255,0,6,100,255,0,7,12,7,7,6,6,15,255,0,4,147,148,4,0,3,4,25,255,0,13,99,255,0,8,31
0070CD  3  06 64 FF 00  
0070D1  3  07 0C 07 07  
0070EA  3  20 22 06 00          .byte 32,34,6,0,0,99,255,0,17,80,80,255,0,5,35,33,4,0,0,100,255,0,14,29,0,0,79,79,0,0,0,76,37
0070EE  3  00 63 FF 00  
0070F2  3  11 50 50 FF  
00710B  3  2C 2D 07 FF          .byte 44,45,7,255,0,16,9,6,7,4,6,5,11,0,0,0,12,5,6,15,255,0,5,28,115,116,29,23,29,0,0,0,9
00710F  3  00 10 09 06  
007113  3  07 04 06 05  
00712C  3  04 0B 01 02          .byte 4,11,1,2,1,2,1,3,255,0,4,3,1,2,6,6,4,7,6,5,6,4,5,6,6,5,4,6,11,2,1,255,3,5
007130  3  01 02 01 03  
007134  3  FF 00 04 03  
00714E  3  FF 00 06 03          .byte 255,0,6,3,3,3,2,1,2,1,2,1,2,1,2,1,1,2,1,2,3,3,255,0,13,255,3,15,255,0,6,65,65
007152  3  03 03 02 01  
007156  3  02 01 02 01  
00716F  3  00 00 41 41          .byte 0,0,65,65,65,0,0,18,17,18,16,18,17,18,16,18,16,18,17,18,16,17,18,16,16,18,17,18,255,86,6,17,18
007173  3  41 00 00 12  
007177  3  11 12 10 12  
007190  3  10                   .byte 16
007191  3  FF 00 07 6F          .byte 255,0,7,111,0,0,63,255,62,6,61,255,0,6,111,255,0,9,111,255,0,4,63,64,62,62,62,64,62,62,64,62,61
007195  3  00 00 3F FF  
007199  3  3E 06 3D FF  
0071B2  3  00 6F FF 00          .byte 0,111,255,0,5,111,255,0,10,63,62,62,64,64,64,62,64,62,64,62,62,61,255,0,10,111,255,0,5,63,62,62,64
0071B6  3  05 6F FF 00  
0071BA  3  0A 3F 3E 3E  
0071D3  3  3E 40 3E 40          .byte 62,64,62,64,62,64,62,64,62,62,255,0,16,60,109,64,62,64,60,64,60,64,60,64,62,64,60,0,0,0,111,255,0,10
0071D7  3  3E 40 3E 40  
0071DB  3  3E 3E FF 00  
0071F5  3  6F 00 29 3C          .byte 111,0,41,60,109,60,109,60,109,60,109,60,64,62,60,41,255,0,7,111,255,0,10,39,60,60,59,52,52,109,60,60,39
0071F9  3  6D 3C 6D 3C  
0071FD  3  6D 3C 6D 3C  
007216  3  29 FF 00 0C          .byte 41,255,0,12,111,255,0,4,111,0,41,0,39,26,52,57,58,39,0,41,0,0,0,111,255,0,18,41,0,52,51,25,39
00721A  3  6F FF 00 04  
00721E  3  6F 00 29 00  
007237  3  FF 00 07 3F          .byte 255,0,7,63,62,62,62,61,255,0,6,63,62,61,255,0,5,57,51,0,41,255,0,6,63,63,255,64,4,61,255,0,4
00723B  3  3E 3E 3E 3D  
00723F  3  FF 00 06 3F  
007258  3  3F 3C 3C 3E          .byte 63,60,60,62,61,255,0,4,52,51,58,0,0,0,63,63,63,109,60,64,60,60,60,64,60,255,0,4,41,60,60,60,41
00725C  3  3D FF 00 04  
007260  3  34 33 3A 00  
007279  3  FF 00 04 46          .byte 255,0,4,70,71,0,0,0,63,64,62,64,62,109,41,102,60,43,60,41,255,0,6,43,41,0,0,0,59,53,73,72,0,0,0
00727D  3  47 00 00 00  
007281  3  3F 40 3E 40  
00729C  3  29 FF 3C 04          .byte 41,255,60,4,0,0,102,0,66,255,0,8,66,132,131,255,0,4,57,51,0,0,0,134,133,108,43,0,0,85,255,0,8
0072A0  3  00 00 66 00  
0072A4  3  42 FF 00 08  
0072BD  3  1B 00 1C 1D          .byte 27,0,28,29,132,131,28,38,46,47,50,50,48,49,37,134,133,0,66,28,0,82,28,255,0,4,7,255,6,6,7,7,6,6
0072C1  3  84 83 1C 26  
0072C5  3  2E 2F 32 32  
0072DF  3  07 07 07 06          .byte 7,7,7,6,7,6,6,6,7,7,6,6,7,7,6,7,6,6,7,1,1,2,1,2,1,2,1,2,1,1,2,1,1
0072E3  3  07 06 06 06  
0072E7  3  07 07 06 06  
007300  3  02 01 02 01          .byte 2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,255,3,30,16,17,16,18,16,18,16,17,16,18,16,18,17,16
007304  3  01 02 01 02  
007308  3  01 02 01 02  
007321  3  12 10 12 11          .byte 18,16,18,17,16,18,16,18,16,18,17,16,18,16,17,18
007325  3  10 12 10 12  
007329  3  10 12 11 10  
007331  3  FF 00 0D 6F          .byte 255,0,13,111,255,0,15,111,255,0,4,111,255,0,18,111,255,0,16,111,255,0,6,111,255,0,13,111,255,0,4,111,255,0,14
007335  3  FF 00 0F 6F  
007339  3  FF 00 04 6F  
007354  3  6F 00 00 00          .byte 111,0,0,0,111,255,0,20,63,62,62,62,61,255,0,24,109,60,64,62,64,61,61,255,0,6,111,255,0,4,111,255,0,5
007358  3  6F FF 00 14  
00735C  3  3F 3E 3E 3E  
007376  3  6F 00 00 00          .byte 111,0,0,0,63,62,61,109,60,60,64,64,109,255,0,20,63,64,62,64,61,108,43,109,60,60,0,0,111,255,0,17,64
00737A  3  3F 3E 3D 6D  
00737E  3  3C 3C 40 40  
007397  3  FF 3C 04 00          .byte 255,60,4,0,43,41,255,0,22,41,40,43,107,0,0,43,255,0,8,63,62,61,255,0,13,41,43,0,0,0,66,255,0,8
00739B  3  2B 29 FF 00  
00739F  3  16 29 28 2B  
0073B9  3  40 3C 40 FF          .byte 64,60,64,255,0,6,29,0,83,255,0,5,66,255,0,6,135,136,255,0,4,41,43,255,0,6,9,6,10,82,255,0,10
0073BD  3  00 06 1D 00  
0073C1  3  53 FF 00 05  
0073DA  3  4C 25 87 88          .byte 76,37,135,136,38,75,0,0,0,66,255,0,5,9,11,1,8,6,10,255,0,10,9,6,6,6,10,255,0,7,28,29,5
0073DE  3  26 4B 00 00  
0073E2  3  00 42 FF 00  
0073FB  3  01 03 01 02          .byte 1,3,1,2,8,10,0,28,0,0,28,24,29,28,9,11,2,1,2,12,10,28,29,0,0,6,7,6,7,11,2,3,3,3
0073FF  3  08 0A 00 1C  
007403  3  00 00 1C 18  
00741D  3  02 08 04 06          .byte 2,8,4,6,7,6,7,6,7,6,11,1,3,3,3,2,12,6,7,6,7,1,2,1,1,2,3,0,0,0,3,2,1
007421  3  07 06 07 06  
007425  3  07 06 0B 01  
00743E  3  02 01 02 01          .byte 2,1,2,1,2,1,2,1,3,0,0,0,3,1,2,1,2,1,255,3,5,255,0,5,255,3,10,255,0,5,255,3,5
007442  3  02 01 02 01  
007446  3  03 00 00 00  
00745F  3  12 12 10 12          .byte 18,18,16,18,17,18,16,18,16,18,17,18,16,18,17,18,16,18,18,18,16,17,18,16,17,18,18,16,17,18
007463  3  11 12 10 12  
007467  3  10 12 11 12  
00747D  3  FF 00 07 03          .byte 255,0,7,3,2,5,32,34,6,2,3,255,0,6,255,3,4,255,0,12,3,1,4,35,34,5,1,3,255,0,5,3,1
007481  3  02 05 20 22  
007485  3  06 02 03 FF  
00749E  3  02 01 02 03          .byte 2,1,2,3,3,255,0,8,3,3,1,9,11,35,33,8,10,1,3,0,0,0,3,2,9,6,5,10,1,2,3,3,255,0,5
0074A2  3  03 FF 00 08  
0074A6  3  03 03 01 09  
0074C1  3  03 02 01 09          .byte 3,2,1,9,11,31,32,34,26,5,2,3,0,0,3,2,1,5,39,0,8,5,10,1,2,3,0,0,0,3,2,9,5
0074C5  3  0B 1F 20 22  
0074C9  3  1A 05 02 03  
0074E2  3  0B 00 00 23          .byte 11,0,0,35,34,0,6,5,1,3,3,1,9,4,15,41,0,0,69,12,6,10,1,0,0,3,2,9,11,0,0,37,38
0074E6  3  22 00 06 05  
0074EA  3  01 03 03 01  
007503  3  2C 2D 1C 05          .byte 44,45,28,5,11,2,3,2,9,15,69,255,0,6,26,5,2,0,0,3,1,4,25,0,31,147,148,8,5,4,11,1,3,3
007507  3  0B 02 03 02  
00750B  3  09 0F 45 FF  
007525  3  01 05 00 50          .byte 1,5,0,80,80,255,0,6,6,1,0,0,3,2,8,10,0,0,35,34,20,5,1,1,3,0,3,2,8,10,79,79,255,0,6
007529  3  50 FF 00 06  
00752D  3  06 01 00 00  
007548  3  04 02 00 00          .byte 4,2,0,0,0,3,2,7,21,31,32,34,26,6,2,1,255,3,4,1,6,104,125,103,255,0,5,6,1,0,0,3,2
00754C  3  00 03 02 07  
007550  3  15 1F 20 22  
007569  3  09 0B 00 00          .byte 9,11,0,0,35,34,0,8,6,10,2,1,2,1,2,5,126,107,255,0,5,9,11,2,0,0,3,1,5,91,0,0,35
00756D  3  23 22 00 08  
007571  3  06 0A 02 01  
00758A  3  21 1E 00 51          .byte 33,30,0,81,8,6,5,4,7,6,11,25,255,0,4,104,103,7,1,3,0,0,3,2,7,0,0,0,35,34,0,0,81
00758E  3  08 06 05 04  
007592  3  07 06 0B 19  
0075AB  3  00 45 51 45          .byte 0,69,81,69,81,255,0,7,108,9,11,2,3,0,0,3,1,8,10,23,0,35,34,0,0,41,0,0,81,0,41,255,0,7
0075AF  3  51 FF 00 07  
0075B3  3  6C 09 0B 02  
0075CD  3  17 05 01 03          .byte 23,5,1,3,255,0,4,3,1,8,5,11,35,33,30,255,0,4,41,255,0,5,9,7,6,5,6,11,2,3,255,0,5
0075D1  3  FF 00 04 03  
0075D5  3  01 08 05 0B  
0075EE  3  03 01 08 0A          .byte 3,1,8,10,44,45,0,0,83,255,0,4,22,0,0,9,11,1,2,1,2,1,3,255,0,7,3,1,8,4,7,10,0
0075F2  3  2C 2D 00 00  
0075F6  3  53 FF 00 04  
00760F  3  52 00 18 09          .byte 82,0,24,9,4,7,5,4,11,1,255,3,5,255,0,9,3,1,2,1,8,7,5,6,5,11,1,2,1,2,1,3,255,0,15
007613  3  04 07 05 04  
007617  3  0B 01 FF 03  
007632  3  03 03 03 02          .byte 3,3,3,2,1,2,1,2,1,255,3,5,255,0,19,255,3,6,255,0,14
007636  3  01 02 01 02  
00763A  3  01 FF 03 05  
007647  3  05 04 05 06          .byte 5,4,5,6,5,4,4,5,6,11,35,34,12,6,5,4,5,6,14,2,1,2,1,2,13,6,5,4,6,6,3,3,91
00764B  3  05 04 04 05  
00764F  3  06 0B 23 22  
007668  3  03 03 03 64          .byte 3,3,3,100,98,3,0,35,33,75,255,3,5,12,4,4,6,5,5,11,255,3,4,4,255,0,7,98,0,0,35,34,255,0,6
00766C  3  62 03 00 23  
007670  3  21 4B FF 03  
00768B  3  03 03 51 08          .byte 3,3,81,8,10,3,3,0,0,80,80,6,255,0,9,31,32,34,255,0,7,31,40,3,8,10,0,0,0,79,79,4,255,0,4
00768F  3  0A 03 03 00  
007693  3  00 50 50 06  
0076AE  3  1C 00 00 00          .byte 28,0,0,0,28,29,44,45,38,28,255,0,6,41,0,3,4,0,0,0,4,5,15,4,6,7,6,6,7,6,6,7,7,7
0076B2  3  1C 1D 2C 2D  
0076B6  3  26 1C FF 00  
0076D0  3  06 06 07 0F          .byte 6,6,7,15,0,0,0,83,0,0,0,20,6,0,0,0,100,41,0,3,3,100,255,3,11,255,0,4,82,29,0,0,3
0076D4  3  00 00 00 53  
0076D8  3  00 00 00 14  
0076F1  3  08 0A FF 00          .byte 8,10,255,0,22,12,7,15,0,0,0,3,12,7,5,4,7,5,255,0,4,130,129,0,0,0,132,131,255,0,12,13,11
0076F5  3  16 0C 07 0F  
0076F9  3  00 00 00 03  
007712  3  03 29 28 03          .byte 3,41,40,3,3,0,0,76,37,130,129,38,0,37,132,131,38,75,255,0,7,28,29,0,5,3,0,0,39,30,0,6,7,7
007716  3  03 00 00 4C  
00771A  3  25 82 81 26  
007734  3  06 06 06 07          .byte 6,6,6,7,7,7,4,4,7,7,7,6,6,7,6,7,6,6,6,7,15,3,0,0,41,0,0,255,3,5,100,81,98
007738  3  07 07 04 04  
00773C  3  07 07 07 06  
007755  3  03 03 03 63          .byte 3,3,3,99,3,100,3,91,3,81,41,3,3,3,100,3,255,0,11,31,40,101,0,0,0,99,255,0,5,41,255,0,18
007759  3  03 64 03 5B  
00775D  3  03 51 29 03  
007776  3  29 FF 00 1C          .byte 41,255,0,28,124,255,0,5,28,29,0,23,28,255,0,11,85,255,0,5,28,29,82,28,0,0,0,104,255,36,6,103,0,0,0
00777A  3  7C FF 00 05  
00777E  3  1C 1D 00 17  
007799  3  1C FF 00 04          .byte 28,255,0,4,37,82,38,0,255,36,7,103,0,0,0,108,43,107,69,43,107,0,0,0,104,36,103,0,0,0,104,36,36,36
00779D  3  25 52 26 00  
0077A1  3  FF 24 07 67  
0077BB  3  FF 03 05 6C          .byte 255,3,5,108,43,255,65,5,43,0,0,43,0,65,65,65,3,43,65,65,65,0,0,108,43,3,18,16,17,18,18,16,92
0077BF  3  2B FF 41 05  
0077C3  3  2B 00 00 2B  
0077DC  3  12 10 12 12          .byte 18,16,18,18,16,92,18,17,92,18,18,17,18,18,92,18,18,16,17,18,16,92,16
0077E0  3  10 5C 12 11  
0077E4  3  5C 12 12 11  
0077F3  3  02 01 04 00          .byte 2,1,4,0,35,33,30,0,4,1,2,3,3,2,13,4,5,6,4,4,6,11,0,5,6,5,4,11,0,5,3,2,5
0077F7  3  23 21 1E 00  
0077FB  3  04 01 02 03  
007814  3  00 23 22 00          .byte 0,35,34,0,0,12,4,10,1,2,13,11,255,3,5,39,0,0,41,3,3,3,0,0,3,3,1,8,4,35,34,0,0
007818  3  00 0C 04 0A  
00781C  3  01 02 0D 0B  
007835  3  03 29 08 06          .byte 3,41,8,6,4,11,25,255,0,5,40,255,0,9,3,2,13,11,35,33,30,0,0,0,3,0,0,3,255,0,6,41,255,0,9
007839  3  04 0B 19 FF  
00783D  3  00 05 28 FF  
007858  3  03 01 04 65          .byte 3,1,4,101,35,34,255,0,10,134,133,255,0,12,2,13,11,31,32,34,255,0,10,134,133,255,0,5,28,29,0,0,9
00785C  3  23 22 FF 00  
007860  3  0A 86 85 FF  
007879  3  05 04 01 04          .byte 5,4,1,4,0,0,35,34,255,0,9,31,147,148,75,8,7,6,5,4,4,6,4,11,3,3,2,4,23,0,35,33,30
00787D  3  00 00 23 22  
007881  3  FF 00 09 1F  
00789A  3  FF 00 09 23          .byte 255,0,9,35,34,0,0,9,11,3,3,40,3,41,3,3,0,1,8,11,37,44,45,38,255,0,9,35,33,30,0,6,3
00789E  3  22 00 00 09  
0078A2  3  0B 03 03 28  
0078BB  3  00 00 28 FF          .byte 0,0,40,255,0,5,3,1,8,6,5,4,11,255,0,8,31,32,34,0,0,5,3,0,0,39,255,0,6,3,1,2,1
0078BF  3  00 05 03 01  
0078C3  3  08 06 05 04  
0078DC  3  06 68 67 FF          .byte 6,104,103,255,0,6,28,37,44,45,38,9,11,3,0,0,41,0,0,9,4,5,2,1,3,3,2,5,107,0,0,0,83
0078E0  3  00 06 1C 25  
0078E4  3  2C 2D 26 09  
0078FD  3  00 00 68 24          .byte 0,0,104,36,122,122,122,36,103,3,255,0,5,9,11,3,3,5,10,2,1,9,11,255,0,4,82,0,0,0,69,108,102
007901  3  7A 7A 7A 24  
007905  3  67 03 FF 00  
00791E  3  6B 45 FF 00          .byte 107,69,255,0,6,8,11,3,0,0,1,8,5,5,11,25,0,0,104,36,103,255,0,5,102,255,0,4,84,0,0,0,100
007922  3  06 08 0B 03  
007926  3  00 00 01 08  
00793F  3  03 00 00 00          .byte 3,0,0,0,3,3,0,0,0,80,80,0,0,102,107,255,0,5,105,255,0,4,82,29,255,0,12,79,79,0,0,105,255,0,10
007943  3  03 03 00 00  
007947  3  00 50 50 00  
007962  3  1A 08 05 04          .byte 26,8,5,4,10,0,28,29,0,0,255,5,4,6,5,6,10,255,0,14,3,3,8,104,122,122,36,36,255,3,8,65,65,65
007966  3  0A 00 1C 1D  
00796A  3  00 00 FF 05  
007984  3  00 00 FF 41          .byte 0,0,255,65,10,0,3,3,43,107,3,3,18,18,17,18,18,16,18,16,18,255,86,6,18,18,16,17,18,18,16,18,17
007988  3  0A 00 03 03  
00798C  3  2B 6B 03 03  
0079A5  3  12 10 5C 10          .byte 18,16,92,16,16,17
0079A9  3  10 11        
0079AB  3  FF 00 0E 6F          .byte 255,0,14,111,255,0,18,111,0,63,62,62,62,61,255,0,8,111,0,0,0,63,62,62,61,255,0,4,111,0,0,63,62,62
0079AF  3  FF 00 12 6F  
0079B3  3  00 3F 3E 3E  
0079CD  3  40 3E 40 3E          .byte 64,62,64,62,62,61,0,0,0,112,255,0,5,63,62,62,64,62,61,0,111,0,0,0,63,64,62,64,62,64,62,64,62
0079D1  3  3E 3D 00 00  
0079D5  3  00 70 FF 00  
0079EE  3  40 3D 00 00          .byte 64,61,0,0,113,0,0,0,63,62,64,62,64,62,64,62,62,61,0,0,63,62,255,64,10,255,0,5,63,62,64,62,64
0079F2  3  71 00 00 00  
0079F6  3  3F 3E 40 3E  
007A0F  3  3E 40 3E 40          .byte 62,64,62,64,62,62,0,0,64,62,62,64,62,64,62,64,62,64,62,62,255,0,4,63,62,64,62,64,62,64,62,64,62
007A13  3  3E 3E 00 00  
007A17  3  40 3E 3E 40  
007A30  3  40 3E 3D 00          .byte 64,62,61,0,60,64,60,64,60,109,60,109,64,60,60,64,111,0,0,0,109,62,64,60,109,60,109,60,109,60,64,62,64
007A34  3  3C 40 3C 40  
007A38  3  3C 6D 3C 6D  
007A51  3  00 45 3C 3C          .byte 0,69,60,60,59,53,52,52,56,58,60,60,69,255,0,4,109,60,109,60,59,52,52,56,60,109,109,64,64,0,111,0,40
007A55  3  3B 35 34 34  
007A59  3  38 3A 3C 3C  
007A72  3  3C 29 34 34          .byte 60,41,52,52,60,60,40,41,255,0,5,69,255,60,4,52,52,56,58,60,60,60,69,0,0,0,41,0,108,52,51,0,0
007A76  3  3C 3C 28 29  
007A7A  3  FF 00 05 45  
007A93  3  29 FF 00 07          .byte 41,255,0,7,40,41,59,53,52,52,41,0,0,39,255,0,8,52,51,255,0,10,41,0,0,0,52,51,107,0,0,41,255,0,8
007A97  3  28 29 3B 35  
007A9B  3  34 34 29 00  
007AB6  3  34 33 3A 00          .byte 52,51,58,0,0,19,255,0,6,19,0,0,0,52,51,255,0,11,59,52,51,255,0,4,88,19,0,0,19,88,255,0,4
007ABA  3  00 13 FF 00  
007ABE  3  06 13 00 00  
007AD7  3  34 33 3A FF          .byte 52,51,58,255,0,8,85,0,0,52,51,0,124,0,0,19,78,0,0,78,0,0,0,124,0,52,51,0,0,83,255,0,4
007ADB  3  00 08 55 00  
007ADF  3  00 34 33 00  
007AF8  3  1C 1D 52 2E          .byte 28,29,82,46,47,50,50,48,82,19,19,19,88,0,0,88,19,19,19,82,47,50,50,48,49,82,0,0,28,255,4,10,54
007AFC  3  2F 32 32 30  
007B00  3  52 13 13 13  
007B19  3  FF 4A 08 37          .byte 255,74,8,55,255,4,10,2,1,2,1,2,1,2,1,2,1,8,5,6,4,7,4,6,5,4,11,2,1,2,1,2,1
007B1D  3  FF 04 0A 02  
007B21  3  01 02 01 02  
007B3A  3  02 01 02 01          .byte 2,1,2,1,255,3,10,1,2,1,2,1,2,1,2,1,2,255,3,10,18,17,16,18,16,17,18,18,67,255,3,12,68
007B3E  3  FF 03 0A 01  
007B42  3  02 01 02 01  
007B5B  3  11 10 11 12          .byte 17,16,17,18,16,18,17,16
007B5F  3  10 12 11 10  
007B63  3  00 03 02 09          .byte 0,3,2,9,4,4,6,6,6,10,109,110,109,110,110,109,110,109,110,110,110,60,0,0,111,255,0,5,3,2,9,4,11
007B67  3  04 04 06 06  
007B6B  3  06 0A 6D 6E  
007B84  3  03 27 1E 03          .byte 3,39,30,3,12,6,10,108,9,6,10,107,110,13,107,41,81,255,0,7,111,3,1,4,11,41,0,41,0,0,3,3,12
007B88  3  0C 06 0A 6C  
007B8C  3  09 06 0A 6B  
007BA5  3  06 0B 03 0C          .byte 6,11,3,12,6,6,11,3,0,39,255,0,4,111,0,0,0,3,2,6,3,255,0,7,3,3,3,0,255,3,4,0,0
007BA9  3  06 06 0B 03  
007BAD  3  00 27 FF 00  
007BC6  3  29 FF 00 08          .byte 41,255,0,8,3,1,12,10,255,0,9,134,133,0,0,80,80,255,0,4,111,255,0,6,3,146,1,4,255,0,8,37,134
007BCA  3  03 01 0C 0A  
007BCE  3  FF 00 09 86  
007BE7  3  85 26 00 4F          .byte 133,38,0,79,79,255,0,11,3,2,9,4,21,0,0,0,9,10,0,9,4,6,5,10,0,9,4,11,255,0,7,111,0,0
007BEB  3  4F FF 00 0B  
007BEF  3  03 02 09 04  
007C09  3  01 09 04 0B          .byte 1,9,4,11,0,0,104,103,4,12,4,11,0,0,0,12,7,11,3,101,255,0,10,2,4,11,3,0,0,0,108,12,10
007C0D  3  00 00 68 67  
007C11  3  04 0C 04 0B  
007C2A  3  03 03 00 00          .byte 3,3,0,0,0,3,3,3,255,0,12,1,12,4,104,103,0,0,0,13,11,255,0,20,2,9,4,107,255,0,4,4,255,0,21
007C2E  3  00 03 03 03  
007C32  3  FF 00 0C 01  
007C4D  3  09 04 0B FF          .byte 9,4,11,255,0,5,4,29,255,0,20,4,11,3,0,0,0,104,151,151,122,122,103,255,0,8,132,131,255,0,8,6,25
007C51  3  00 05 04 1D  
007C55  3  FF 00 14 04  
007C6E  3  FF 00 05 6C          .byte 255,0,5,108,8,5,107,28,0,85,0,0,0,76,77,37,132,131,38,75,29,255,0,5,4,0,0,0,37,38,0,0,0
007C72  3  08 05 6B 1C  
007C76  3  00 55 00 00  
007C8F  3  08 04 06 0A          .byte 8,4,6,10,82,9,7,6,4,7,6,4,5,6,4,6,4,10,0,0,0,6,0,0,0,147,148,0,0,37,9,5,2
007C93  3  52 09 07 06  
007C97  3  04 07 06 04  
007CB0  3  0C 04 07 04          .byte 12,4,7,4,11,2,1,2,1,2,1,2,1,2,8,7,6,4,8,10,0,0,35,33,30,0,9,11,12,10,1,2,1
007CB4  3  0B 02 01 02  
007CB8  3  01 02 01 02  
007CD1  3  02 01 FF 03          .byte 2,1,255,3,7,146,3,1,2,1,2,2,8,10,31,32,34,0,0,7,1,1,6,255,3,6,255,0,7,255,3,6,1
007CD5  3  07 92 03 01  
007CD9  3  02 01 02 02  
007CF2  3  05 00 23 22          .byte 5,0,35,34,0,0,5,1,1,4,18,17,16,18,18,16,18,16,18,17,18,18,16,17,18,18,16,18
007CF6  3  00 00 05 01  
007CFA  3  01 04 12 11  
007D0E  3  92 03 03 02          .byte 146,3,3,2,13,5,11,10,2,1,2,255,3,8,2,9,11,0,8,10,1,2,1,2,1,3,1,2,13,11,3,3,8
007D12  3  0D 05 0B 0A  
007D16  3  02 01 02 FF  
007D2F  3  05 06 0A 01          .byte 5,6,10,1,2,1,2,1,2,1,2,9,11,0,0,26,8,7,6,4,5,4,2,9,5,11,25,255,0,4,98,6,5
007D33  3  02 01 02 01  
007D37  3  02 01 02 09  
007D50  3  06 05 04 06          .byte 6,5,4,6,5,4,6,11,25,0,0,0,255,3,6,9,11,3,81,255,0,5,101,0,0,0,101,99,100,255,0,14,11
007D54  3  05 04 06 0B  
007D58  3  19 00 00 00  
007D71  3  62 00 29 FF          .byte 98,0,41,255,0,10,100,255,0,21,9,5,10,28,255,0,9,28,255,0,4,83,255,0,10,9,11,81,8,6,4,5,4
007D75  3  00 0A 64 FF  
007D79  3  00 15 09 05  
007D92  3  06 04 07 04          .byte 6,4,7,4,5,6,7,6,10,0,0,82,255,0,5,5,6,4,7,5,11,25,81,3,3,76,40,0,31,40,41,3,3
007D96  3  05 06 07 06  
007D9A  3  0A 00 00 52  
007DB3  3  00 51 03 08          .byte 0,81,3,8,5,6,7,5,6,4,5,7,3,3,81,3,81,3,0,39,30,0,0,39,30,0,41,0,0,0,31,40,0
007DB7  3  05 06 07 05  
007DBB  3  06 04 05 07  
007DD4  3  03 51 00 00          .byte 3,81,0,0,255,3,5,0,31,40,0,39,30,0,81,0,0,0,41,255,0,7,41,0,31,40,255,0,9,81,0,81,0,0
007DD8  3  FF 03 05 00  
007DDC  3  1F 28 00 27  
007DF6  3  29 FF 00 0E          .byte 41,255,0,14,81,255,0,9,41,31,40,255,0,17,41,255,0,11,81,255,0,29,41,255,0,9,28,29,0,24,255,0,24
007DFA  3  51 FF 00 09  
007DFE  3  29 1F 28 FF  
007E17  3  09 07 04 06          .byte 9,7,4,6,5,6,4,5,6,11,25,0,0,26,12,5,6,4,0,0,28,27,0,0,37,38,0,23,28,9,11,2,1
007E1B  3  05 06 04 05  
007E1F  3  06 0B 19 00  
007E38  3  02 01 02 01          .byte 2,1,2,1,2,1,101,255,0,5,1,2,1,7,6,6,5,11,31,147,148,104,122,103,6,255,3,8,255,0,8,3,3
007E3C  3  02 01 65 FF  
007E40  3  00 05 01 02  
007E59  3  02 01 02 07          .byte 2,1,2,7,98,0,35,33,30,9,7,11,255,0,9,65,65,0,0,255,65,4,0,18,17,16,6,0,76,32,34,0,6
007E5D  3  62 00 23 21  
007E61  3  1E 09 07 0B  
007E7A  3  11 12 10 12          .byte 17,18,16,18,18,16,18,17,18,16,18,255,86,7,17,18
007E7E  3  12 10 12 11  
007E82  3  12 10 12 FF  
007E8A  3  02 01 02 01          .byte 2,1,2,1,9,4,5,5,6,5,10,1,2,1,2,9,4,6,5,5,6,5,10,1,255,3,6,5,6,5,4,11,3
007E8E  3  09 04 05 05  
007E92  3  06 05 0A 01  
007EAB  3  51 03 51 03          .byte 81,3,81,3,8,6,5,4,7,11,3,0,0,81,3,81,8,10,2,1,2,1,2,1,3,3,81,3,0,0,81,0,39
007EAF  3  08 06 05 04  
007EB3  3  07 0B 03 00  
007ECC  3  1E FF 03 04          .byte 30,255,3,4,81,3,0,0,0,81,76,40,3,8,6,4,5,5,5,10,0,0,41,0,0,0,39,77,40,255,0,4,76
007ED0  3  51 03 00 00  
007ED4  3  00 51 4C 28  
007EED  3  28 FF 00 04          .byte 40,255,0,4,81,0,41,0,3,81,255,3,4,5,255,0,6,39,30,41,255,0,5,41,255,0,4,41,134,133,0,0,81
007EF1  3  51 00 29 00  
007EF5  3  03 51 FF 03  
007F0E  3  00 00 00 09          .byte 0,0,0,9,11,0,0,84,0,0,0,41,255,0,13,134,133,0,0,41,0,0,9,11,2,0,0,82,255,0,5,130,129
007F12  3  0B 00 00 54  
007F16  3  00 00 00 29  
007F2F  3  FF 00 04 1C          .byte 255,0,4,28,255,0,4,123,147,148,103,0,0,0,9,11,1,3,5,4,6,11,255,0,4,130,129,0,28,23,123,151,122,122
007F33  3  FF 00 04 7B  
007F37  3  93 94 67 00  
007F51  3  72 67 00 23          .byte 114,103,0,35,34,0,0,0,26,12,10,2,255,3,4,0,0,0,104,36,147,148,104,151,151,103,8,6,107,0,0,0,35
007F55  3  22 00 00 00  
007F59  3  1A 0C 0A 02  
007F72  3  22 FF 00 04          .byte 34,255,0,4,3,8,10,1,255,0,8,35,34,0,0,108,8,7,7,10,0,0,0,35,33,30,255,0,4,3,12,5,255,0,8
007F76  3  03 08 0A 01  
007F7A  3  FF 00 08 23  
007F95  3  23 21 1E 00          .byte 35,33,30,0,0,26,8,6,11,0,0,0,35,34,255,0,6,3,3,255,0,7,31,32,34,255,0,4,20,5,25,0,0,0
007F99  3  00 1A 08 06  
007F9D  3  0B 00 00 00  
007FB7  3  23 22 FF 00          .byte 35,34,255,0,16,35,34,255,0,5,6,21,0,0,31,32,34,255,0,10,28,29,0,0,76,37,44,45,38,75,0,0,9
007FBB  3  10 23 22 FF  
007FBF  3  00 05 06 15  
007FD8  3  0B FF 00 04          .byte 11,255,0,4,35,34,255,0,8,12,7,5,4,5,4,7,6,7,6,6,6,7,6,15,98,255,0,4,35,33,75,255,0,4
007FDC  3  23 22 FF 00  
007FE0  3  08 0C 07 05  
007FFA  3  1C 00 00 09          .byte 28,0,0,9,11,3,3,0,0,0,255,3,4,100,3,3,3,101,255,0,4,35,34,255,0,5,8,6,5,5,255,0,12
007FFE  3  0B 03 03 00  
008002  3  00 00 FF 03  
00801B  3  53 FF 00 06          .byte 83,255,0,6,35,34,255,0,5,9,11,2,4,37,38,75,0,28,0,0,0,89,0,0,0,82,255,0,5,28,44,45,38
00801F  3  23 22 FF 00  
008023  3  05 09 0B 02  
00803C  3  4B 00 09 06          .byte 75,0,9,6,11,2,3,5,32,33,8,4,5,6,11,0,8,7,5,5,4,4,7,4,5,6,4,5,6,7,5,4,11
008040  3  0B 02 03 05  
008044  3  20 21 08 04  
00805D  3  02 01 03 92          .byte 2,1,3,146
008061  3  00 08 06 04          .byte 0,8,6,4,10,1,1,1,9,6,4,6,11,255,106,4,8,5,11,255,106,5,8,6,10,2,3,0,100,3,3,8,10
008065  3  0A 01 01 01  
008069  3  09 06 04 06  
008082  3  09 06 0B 00          .byte 9,6,11,0,0,3,255,0,6,3,255,0,7,3,8,10,1,255,0,4,3,12,11,25,3,255,0,18,26,4,2,255,0,5
008086  3  00 03 FF 00  
00808A  3  06 03 FF 00  
0080A4  3  03 03 FF 00          .byte 3,3,255,0,20,3,5,1,255,0,18,27,0,0,28,255,0,5,3,4,2,255,0,17,9,4,10,104,151,122,103,0,0,0
0080A8  3  14 03 05 01  
0080AC  3  FF 00 12 1B  
0080C6  3  03 06 01 FF          .byte 3,6,1,255,0,13,28,29,0,0,4,2,5,0,102,107,255,0,4,28,8,10,255,0,5,128,127,255,0,4,104,36,122,122
0080CA  3  00 0D 1C 1D  
0080CE  3  00 00 04 02  
0080E8  3  67 09 0B 01          .byte 103,9,11,1,4,21,102,255,0,4,104,151,103,8,255,0,4,28,128,127,255,0,6,108,102,0,6,1,2,4,0,105,255,0,5
0080EC  3  04 15 66 FF  
0080F0  3  00 04 68 97  
00810B  3  69 6B FF 00          .byte 105,107,255,0,4,104,36,147,148,36,103,255,0,5,105,9,11,2,1,5,104,151,122,103,132,131,255,0,9,35,34,69,255,0,6
00810F  3  04 68 24 93  
008113  3  94 24 67 FF  
00812E  3  09 0B 02 92          .byte 9,11,2,146,2,8,10,102,107,0,132,131,255,0,9,35,33,30,255,0,6,5,1,3,3,3,1,8,7,10,31,147,148
008132  3  02 08 0A 66  
008136  3  6B 00 84 83  
00814F  3  4B FF 00 07          .byte 75,255,0,7,31,32,34,255,0,6,26,4,2,3,0,0,3,1,2,5,0,35,34,255,0,9,35,34,255,0,7,8,10
008153  3  1F 20 22 FF  
008157  3  00 06 1A 04  
008170  3  01 03 00 00          .byte 1,3,0,0,3,1,4,25,35,33,30,255,0,5,76,77,37,44,45,38,9,4,5,10,28,24,29,5,2,3,0,0,3
008174  3  03 01 04 19  
008178  3  23 21 1E FF  
008191  3  02 08 0A 2C          .byte 2,8,10,44,45,38,0,0,0,4,5,6,4,5,6,4,5,11,1,2,8,5,6,5,11,1,3,0,0,0,3,1,8
008195  3  2D 26 00 00  
008199  3  00 04 05 06  
0081B2  3  07 05 04 06          .byte 7,5,4,6,5,4,2,1,2,1,2,1,2,1,2,3,3,1,2,1,2,1,3,255,0,5,3,2,1,2,1,2,1
0081B6  3  05 04 02 01  
0081BA  3  02 01 02 01  
0081D3  3  02 FF 03 09          .byte 2,255,3,9,0,0,255,3,5,255,0,7,255,3,7,17,18,16,18,17,18,16,18,18,16,18,17,18,16,17,18,18,16
0081D7  3  00 00 FF 03  
0081DB  3  05 FF 00 07  
0081F4  3  12 12 12 10          .byte 18,18,18,16,18,17,18,18,16,17,18,16
0081F8  3  12 11 12 12  
0081FC  3  10 11 12 10  
008200  3  FF 00 04 03          .byte 255,0,4,3,2,5,0,8,5,4,7,4,14,2,1,2,13,6,4,11,106,106,106,8,10,2,1,2,3,0,3,3,3
008204  3  02 05 00 08  
008208  3  05 04 07 04  
008221  3  02 09 0F 00          .byte 2,9,15,0,3,39,30,41,3,8,7,5,6,11,41,40,3,0,0,0,99,8,6,5,10,1,3,2,2,2,9,15,3
008225  3  03 27 1E 29  
008229  3  03 08 07 05  
008242  3  00 4C 28 00          .byte 0,76,40,0,0,0,3,39,3,40,3,0,39,30,0,0,0,100,3,40,41,8,10,2,9,5,5,11,25,0,0,0,39
008246  3  00 00 03 27  
00824A  3  03 28 03 00  
008263  3  1E 00 00 1F          .byte 30,0,0,31,40,0,41,0,31,40,255,0,6,41,0,3,8,9,15,40,41,98,255,0,4,41,255,0,4,39,30,0,0,0
008267  3  28 00 29 00  
00826B  3  1F 28 FF 00  
008285  3  29 FF 00 09          .byte 41,255,0,9,9,15,3,39,75,98,0,28,121,255,0,6,39,75,255,0,12,9,6,0,31,40,0,101,104,151,122,103,255,0,4
008289  3  09 0F 03 27  
00828D  3  4B 62 00 1C  
0082A8  3  4C 28 FF 00          .byte 76,40,255,0,12,26,8,7,0,0,41,0,0,0,102,107,255,0,6,41,255,0,6,28,29,121,255,0,4,100,8,255,0,6
0082AC  3  0C 1A 08 07  
0082B0  3  00 00 29 00  
0082CA  3  69 FF 00 0E          .byte 105,255,0,14,104,151,122,103,255,0,4,3,255,0,69,132,131,0,0,134,133,0,0,130,129,255,0,18,76,37,132,131,38
0082CE  3  68 97 7A 67  
0082D2  3  FF 00 04 03  
0082EB  3  25 86 85 26          .byte 37,134,133,38,37,130,129,38,75,255,0,15,29,9,4,7,5,4,7,7,4,5,7,5,4,7,10,255,0,12,28,29,9
0082EF  3  25 82 81 26  
0082F3  3  4B FF 00 0F  
00830C  3  04 0B 02 01          .byte 4,11,2,1,2,1,2,1,2,1,2,1,2,1,8,10,28,29,23,255,0,4,28,4,7,4,5,4,11,2,1,255,3,12
008310  3  02 01 02 01  
008314  3  02 01 02 01  
00832E  3  01 08 05 07          .byte 1,8,5,7,4,7,4,5,6,4,1,2,1,2,1,2,3,3,3,255,0,10,3,3,1,2,1,2,1,2,1,2,1
008332  3  04 07 04 05  
008336  3  06 04 01 02  
00834F  3  FF 03 07 FF          .byte 255,3,7,255,0,13,255,3,10,18,16,17,18,16,18,18,16,17,18,18,16,17,18,16,18,16,18,17,16,18,18,16,18
008353  3  00 0D FF 03  
008357  3  0A 12 10 11  
008370  3  11 12 10 12          .byte 17,18,16,18,18,16
008374  3  12 10        
008376  3  04 04 0A 02          .byte 4,4,10,2,1,9,4,11,0,8,4,10,1,2,13,6,4,4,10,2,1,2,13,6,4,5,6,14,1,3,3,3,12
00837A  3  01 09 04 0B  
00837E  3  00 08 04 0A  
008397  3  06 04 05 06          .byte 6,4,5,6,101,0,0,0,8,4,4,4,11,81,81,12,6,10,13,11,3,0,0,3,8,14,1,0,0,255,3,4,8
00839B  3  65 00 00 00  
00839F  3  08 04 04 04  
0083B8  3  0A 00 00 00          .byte 10,0,0,0,3,81,3,3,3,81,81,3,99,8,11,25,255,0,4,3,8,6,255,0,6,3,6,21,0,0,0,81,0,0,0
0083BC  3  03 51 03 03  
0083C0  3  03 51 51 03  
0083DB  3  29 27 1E 64          .byte 41,39,30,100,3,3,255,0,6,3,8,255,0,6,3,8,10,0,0,0,39,30,0,0,0,41,255,0,10,3,9,4,6
0083DF  3  03 03 FF 00  
0083E3  3  06 03 08 FF  
0083FC  3  0F FF 00 04          .byte 15,255,0,4,3,6,0,0,0,81,0,132,131,255,0,11,3,9,11,0,41,98,255,0,4,9,15,0,0,0,41,0,132
008400  3  03 06 00 00  
008404  3  00 51 00 84  
00841D  3  83 00 26 4B          .byte 131,0,38,75,255,0,8,26,8,10,0,0,101,0,0,12,7,15,255,0,5,31,147,148,8,6,6,6,10,255,0,7,3
008421  3  FF 00 08 1A  
008425  3  08 0A 00 00  
00843E  3  05 FF 00 05          .byte 5,255,0,5,23,5,98,255,0,6,35,34,100,41,81,0,8,104,103,255,0,5,3,5,0,0,28,29,9,6,11,255,0,6
008442  3  17 05 62 FF  
008446  3  00 06 23 22  
008460  3  4C 20 22 00          .byte 76,32,34,0,0,81,13,11,107,101,255,0,6,5,7,6,7,7,4,11,255,0,8,35,33,30,0,41,6,255,0,7,104
008464  3  00 51 0D 0B  
008468  3  6B 65 FF 00  
008481  3  24 67 00 00          .byte 36,103,0,0,31,40,100,41,255,0,8,35,34,0,0,0,12,10,255,0,6,31,40,101,0,0,0,41,255,0,9,31,32
008485  3  1F 28 64 29  
008489  3  FF 00 08 23  
0084A2  3  22 00 00 00          .byte 34,0,0,0,100,12,6,104,103,255,0,4,41,255,0,5,130,129,255,0,8,35,33,75,0,0,22,0,100,8,10,255,0,8
0084A6  3  64 0C 06 68  
0084AA  3  67 FF 00 04  
0084C4  3  4C 25 82 81          .byte 76,37,130,129,38,77,75,0,0,76,77,37,44,45,38,9,4,5,10,24,23,5,255,0,6,5,5,6,5,7,7,6,4
0084C8  3  26 4D 4B 00  
0084CC  3  00 4C 4D 25  
0084E5  3  05 07 07 06          .byte 5,7,7,6,4,5,7,5,5,11,2,1,8,7,5,5,4,5,6,4,5,4,1,2,1,2,1,2,1,2,1,2,1
0084E9  3  04 05 07 05  
0084ED  3  05 0B 02 01  
008506  3  02 02 01 02          .byte 2,2,1,2,2,1,2,3,3,1,2,1,2,1,2,1,2,1,2,255,3,18,0,0,255,3,10,18,16,17,18,16,18
00850A  3  02 01 02 03  
00850E  3  03 01 02 01  
008527  3  11 10 12 12          .byte 17,16,18,18,18,16,18,18,17,16,18,16,18,17,16,18,16,18,18,16,17,18,18,16
00852B  3  12 10 12 12  
00852F  3  11 10 12 10  
00853F  3  04 23 21 1E          .byte 4,35,33,30,8,6,5,11,0,8,5,6,5,11,0,8,6,11,0,8,11,0,8,5,11,0,8,6,4,4,5,35,34
008543  3  08 06 05 0B  
008547  3  00 08 05 06  
008560  3  00 00 00 03          .byte 0,0,0,3,3,0,3,3,39,41,3,0,31,40,3,0,3,3,0,3,41,3,0,100,41,81,3,7,35,33,75,255,0,4
008564  3  03 00 03 03  
008568  3  27 29 03 00  
008582  3  84 83 00 29          .byte 132,131,0,41,255,0,4,41,255,0,4,128,127,255,0,5,39,30,4,44,45,38,0,0,0,37,132,131,38,75,255,0,7
008586  3  FF 00 04 29  
00858A  3  FF 00 04 80  
0085A3  3  4C 25 80 7F          .byte 76,37,128,127,38,255,0,4,41,0,8,4,7,10,0,0,0,9,7,4,7,10,255,0,4,28,29,0,9,4,6,4,6
0085A7  3  26 FF 00 04  
0085AB  3  29 00 08 04  
0085C4  3  0A FF 00 05          .byte 10,255,0,5,3,2,1,5,5,7,7,11,30,0,26,12,6,6,15,0,12,7,6,15,3,3,3,26,8,4,6,4,6
0085C8  3  03 02 01 05  
0085CC  3  05 07 07 0B  
0085E5  3  04 92 01 09          .byte 4,146,1,9,11,31,40,3,3,0,0,0,3,3,3,0,0,0,3,3,3,0,0,0,255,3,7,1,9,11,101,0,39
0085E9  3  0B 1F 28 03  
0085ED  3  03 00 00 00  
008606  3  1E FF 00 17          .byte 30,255,0,23,9,11,98,0,0,41,255,0,24,7,21,101,255,0,27,5,255,0,6,104,6,10,0,28,29,255,0,5,24
00860A  3  09 0B 62 00  
00860E  3  00 29 FF 00  
008627  3  00 00 00 1B          .byte 0,0,0,27,0,0,9,4,7,6,6,8,10,255,0,6,101,12,6,7,6,7,6,6,255,7,4,6,6,6,7,6,11
00862B  3  00 00 09 04  
00862F  3  07 06 06 08  
008648  3  19 00 00 00          .byte 25,0,0,0,2,8,4,11,25,255,0,5,101,255,0,5,100,255,0,7,100,255,0,5,3,2,8,10,255,0,27,3,2
00864C  3  02 08 04 0B  
008650  3  19 FF 00 05  
008669  3  08 07 06 0A          .byte 8,7,6,10,27,255,0,9,76,37,0,0,38,28,255,0,9,3,2,1,2,8,7,10,76,37,38,75,0,9,7,4,5
00866D  3  1B FF 00 09  
008671  3  4C 25 00 00  
00868A  3  06 07 05 06          .byte 6,7,5,6,4,7,4,7,5,6,4,7,0,0,0,3,3,3,2,1,8,10,147,148,9,7,11,2,1,2,1,2,1
00868E  3  04 07 04 07  
008692  3  05 06 04 07  
0086AB  3  02 01 02 01          .byte 2,1,2,1,2,1,2,1,2,255,0,6,3,3,2,5,35,33,7,1,2,255,3,15,255,18,9,4,32,34,5,255,18,17
0086AF  3  02 01 02 01  
0086B3  3  02 FF 00 06  
0086CD  3  04 23 21 1E          .byte 4,35,33,30,8,7,5,10,1,2,1,2,3,3,1,2,1,2,9,7,4,7,4,10,1,2,1,3,0,0,7,35,34
0086D1  3  08 07 05 0A  
0086D5  3  01 02 01 02  
0086EE  3  00 00 03 03          .byte 0,0,3,3,8,6,5,4,10,8,5,5,4,6,4,11,3,3,39,3,8,7,5,10,2,3,3,5,35,34,255,0,4
0086F2  3  08 06 05 04  
0086F6  3  0A 08 05 05  
00870F  3  03 64 00 00          .byte 3,100,0,0,255,3,4,25,3,41,3,0,76,40,0,3,40,3,8,10,1,2,7,35,34,255,0,18,41,0,31,40,0
008713  3  FF 03 04 19  
008717  3  03 29 03 00  
008730  3  03 08 04 0A          .byte 3,8,4,10,4,35,33,30,255,0,20,39,30,0,3,3,4,5,35,34,255,0,21,41,0,134,133,9,11,7,44,45,38
008734  3  04 23 21 1E  
008738  3  FF 00 14 27  
008751  3  FF 00 0B 1B          .byte 255,0,11,27,255,0,10,134,133,4,1,8,4,7,10,0,28,29,255,0,5,104,36,122,122,122,103,8,6,5,4,4,6
008755  3  FF 00 0A 86  
008759  3  85 04 01 08  
008772  3  0B 1F 93 94          .byte 11,31,147,148,8,10,2,1,2,8,4,7,4,5,10,0,0,0,100,0,0,0,80,80,100,81,91,4,25,0,0,0,35
008776  3  08 0A 02 01  
00877A  3  02 08 04 07  
008793  3  21 1E 05 03          .byte 33,30,5,3,3,3,1,2,1,2,4,11,255,0,4,115,116,0,79,79,31,40,0,11,255,0,4,35,34,20,4,0,0,0
008797  3  03 03 01 02  
00879B  3  01 02 04 0B  
0087B5  3  03 03 02 01          .byte 3,3,2,1,4,25,255,0,4,147,148,104,36,103,0,41,0,98,0,0,0,37,44,45,38,6,0,0,3,3,1,9,4
0087B9  3  04 19 FF 00  
0087BD  3  04 93 94 68  
0087D6  3  0B FF 00 05          .byte 11,255,0,5,35,33,30,255,0,9,12,5,6,4,11,3,3,2,1,2,4,25,255,0,6,35,34,255,0,11,4,1,2
0087DA  3  23 21 1E FF  
0087DE  3  00 09 0C 05  
0087F7  3  01 03 01 09          .byte 1,3,1,9,4,7,11,255,0,7,35,33,75,0,0,124,255,0,5,28,29,7,2,3,3,2,9,11,255,0,9,31,32
0087FB  3  04 07 0B FF  
0087FF  3  00 07 23 21  
008818  3  22 00 00 00          .byte 34,0,0,0,82,0,0,0,22,9,4,7,11,1,3,0,9,11,25,255,0,9,37,44,45,38,9,4,6,7,4,7,4
00881C  3  52 00 00 00  
008820  3  16 09 04 07  
008839  3  0B 01 02 01          .byte 11,1,2,1,2,3,0,4,255,0,10,8,5,5,4,6,11,1,2,1,2,1,2,1,255,3,5,0,7,115,116,255,0,4
00883D  3  02 03 00 04  
008841  3  FF 00 0A 08  
00885B  3  1D 17 00 00          .byte 29,23,0,0,9,11,1,2,1,2,255,3,8,255,0,5,4,147,148,8,6,5,6,7,6,4,5,11,2,255,3,5,255,0,12
00885F  3  09 0B 01 02  
008863  3  01 02 FF 03  
00887E  3  05 23 21 4B          .byte 5,35,33,75,5,1,3,255,0,23,4,32,34,3,8,10,2,3,0,0,0,255,3,6,255,0,13,7,35,34,0,3,8
008882  3  05 01 03 FF  
008886  3  00 17 04 20  
00889F  3  0A 01 03 03          .byte 10,1,3,3,3,2,1,2,1,2,1,3,255,0,4,3,3,255,0,6,5,32,34,0,0,3,8,10,2,1,2,13,5,5
0088A3  3  03 02 01 02  
0088A7  3  01 02 01 03  
0088C1  3  04 04 0A 01          .byte 4,4,10,1,3,3,3,2,1,2,3,3,255,0,4,7,35,33,30,134,133,3,8,5,4,4,11,100,3,81,3,8,10
0088C5  3  03 03 03 02  
0088C9  3  01 02 03 03  
0088E2  3  01 02 01 09          .byte 1,2,1,9,5,10,1,2,3,0,0,0,4,44,45,29,134,133,0,3,81,101,81,3,0,0,41,31,40,8,7,5,5
0088E6  3  05 0A 01 02  
0088EA  3  03 00 00 00  
008903  3  0B 51 08 07          .byte 11,81,8,7,10,2,3,0,0,8,4,6,4,147,148,30,0,41,0,39,30,255,0,4,41,39,30,0,0,31,40,0,3
008907  3  0A 02 03 00  
00890B  3  00 08 04 06  
008924  3  05 01 03 00          .byte 5,1,3,0,0,3,1,13,11,35,34,255,0,4,41,255,0,6,41,255,0,4,41,0,0,6,2,3,0,0,3,2,5
008928  3  00 03 01 0D  
00892C  3  0B 23 22 FF  
008945  3  65 23 22 FF          .byte 101,35,34,255,0,18,20,5,1,3,0,0,3,1,5,31,32,33,75,255,0,15,80,80,0,8,10,2,3,0,2,13,11
008949  3  00 12 14 05  
00894D  3  01 03 00 00  
008966  3  00 23 22 FF          .byte 0,35,34,255,0,9,128,127,255,0,5,79,79,28,0,4,1,3,0,1,5,21,0,35,33,30,0,0,28,13,5,10,0
00896A  3  00 09 80 7F  
00896E  3  FF 00 05 4F  
008987  3  25 80 7F 26          .byte 37,128,127,38,0,0,0,104,151,36,36,36,6,2,3,0,13,11,0,76,32,34,0,0,9,5,11,2,8,10,104,151,36,36
00898B  3  00 00 00 68  
00898F  3  97 24 24 24  
0089A9  3  67 00 00 00          .byte 103,0,0,0,105,0,69,43,8,10,1,3,5,0,0,0,35,34,0,0,5,11,1,3,1,8,10,69,108,43,0,0,0
0089AD  3  69 00 45 2B  
0089B1  3  08 0A 01 03  
0089CA  3  68 24 67 00          .byte 104,36,103,0,43,0,5,2,3,4,0,0,37,44,45,38,9,11,2,3,0,3,2,8,4,74,92,255,74,4,92,74,74
0089CE  3  2B 00 05 02  
0089D2  3  03 04 00 00  
0089EB  3  5C 4A 05 01          .byte 92,74,5,1,3,5,147,148,30,9,5,5,11,2,3,0,0,0,3,1,6,87,92,87,87,55,5,4,6,5,4,6,11
0089EF  3  03 05 93 94  
0089F3  3  1E 09 05 05  
008A0C  3  02 03 06 23          .byte 2,3,6,35,34,0,5,11,2,1,3,255,0,4,3,2,5,87,92,87,55,11,1,2,1,2,1,2,1,3,0,5,35
008A10  3  22 00 05 0B  
008A14  3  02 01 03 FF  
008A2D  3  21 1E 06 01          .byte 33,30,6,1,146,3,3,255,0,4,3,1,8,6,6,6,11,2,255,3,7,0,0,5,32,34,0,5,2,3,255,0,7
008A31  3  92 03 03 FF  
008A35  3  00 04 03 01  
008A4E  3  03 01 02 01          .byte 3,1,2,1,2,1,3,255,0,9
008A52  3  02 01 03 FF  
008A56  3  00 09        
008A58  3  FF 00 04 6F          .byte 255,0,4,111,255,0,6,63,62,62,61,255,0,8,106,111,255,0,5,111,255,0,6,111,0,63,63,255,62,5,61,0,111
008A5C  3  FF 00 06 3F  
008A60  3  3E 3E 3D FF  
008A79  3  FF 00 04 6A          .byte 255,0,4,106,0,0,0,111,255,0,9,63,62,62,62,64,62,64,62,64,62,62,61,0,0,0,111,106,255,0,4,9,5
008A7D  3  00 00 00 6F  
008A81  3  FF 00 09 3F  
008A9A  3  00 00 6F 00          .byte 0,0,111,0,0,0,63,62,64,62,64,62,64,62,64,62,64,62,64,61,255,106,4,0,0,9,5,11,1,255,0,6,64,64
008A9E  3  00 00 3F 3E  
008AA2  3  40 3E 40 3E  
008ABC  3  3E 40 3E 40          .byte 62,64,62,64,62,64,62,64,62,64,62,64,106,0,0,9,5,7,11,1,2,3,255,0,6,60,64,64,64,60,64,60,64
008AC0  3  3E 40 3E 40  
008AC4  3  3E 40 3E 40  
008ADD  3  3C 40 3C 3E          .byte 60,64,60,62,60,64,0,0,0,5,2,1,2,3,3,0,111,255,0,5,255,60,4,59,53,52,52,56,58,255,60,4,0,0
008AE1  3  3C 40 00 00  
008AE5  3  00 05 02 01  
008AFF  3  1A 0C 0A 02          .byte 26,12,10,2,3,146,3,255,0,4,111,0,0,0,255,60,5,52,52,255,60,4,81,0,0,0,80,80,5,1,3,3,255,0,9
008B03  3  03 92 03 FF  
008B07  3  00 04 6F 00  
008B22  3  29 3C 3C 51          .byte 41,60,60,81,108,57,51,25,60,60,0,81,0,0,0,79,79,5,2,3,255,0,13,41,0,52,51,107,0,41,0,41,0,0,0
008B26  3  6C 39 33 19  
008B2A  3  3C 3C 00 51  
008B45  3  09 05 0B 01          .byte 9,5,11,1,3,255,0,15,52,51,58,255,0,4,135,136,0,6,1,2,3,255,0,15,59,52,51,255,0,4,37,135,136
008B49  3  03 FF 00 0F  
008B4D  3  34 33 3A FF  
008B66  3  09 0B 02 03          .byte 9,11,2,3,255,0,17,57,51,255,0,4,8,5,6,11,1,3,255,0,13,83,255,0,4,52,51,0,0,0,84,0,100
008B6A  3  FF 00 11 39  
008B6E  3  33 FF 00 04  
008B87  3  05 01 92 03          .byte 5,1,146,3,255,0,10,28,28,29,82,28,23,46,47,50,50,48,49,28,82,29,9,11,2,3,255,0,7,4,6,5,6
008B8B  3  FF 00 0A 1C  
008B8F  3  1C 1D 52 1C  
008BA8  3  07 05 06 04          .byte 7,5,6,4,5,4,4,6,5,6,6,6,5,6,7,11,1,3,255,0,8,1,2,1,2,1,2,1,2,1,2,1,2
008BAC  3  05 04 04 06  
008BB0  3  05 06 06 06  
008BC9  3  01 02 01 02          .byte 1,2,1,2,1,2,1,2,3,255,0,9,255,3,20,255,0,10,18,17,18,16,18,18,16,17,18,18,16,18,18,16,18
008BCD  3  01 02 01 02  
008BD1  3  03 FF 00 09  
008BEA  3  11 10 12 10          .byte 17,16,18,16,18,17,18,18,16,18,16,18,17,16,18
008BEE  3  12 11 12 12  
008BF2  3  10 12 10 12  
008BF9  3  FF 00 05 6F          .byte 255,0,5,111,255,0,8,111,255,0,9,111,255,0,6,111,255,0,7,111,0,63,62,61,0,0,111,0,63,62,62,61,255,0,4
008BFD  3  FF 00 08 6F  
008C01  3  FF 00 09 6F  
008C1C  3  6F FF 00 07          .byte 111,255,0,7,63,61,0,63,62,61,109,62,62,62,61,109,62,61,109,62,62,63,62,61,255,0,6,106,0,63,64,62,62
008C20  3  3F 3D 00 3F  
008C24  3  3E 3D 6D 3E  
008C3D  3  6D 3E 3E 3E          .byte 109,62,62,62,64,109,62,62,64,109,62,64,109,62,62,64,62,62,61,255,0,4,111,111,0,64,62,64,109,64,62,64,62
008C41  3  40 6D 3E 3E  
008C45  3  40 6D 3E 40  
008C5E  3  40 6D 40 3E          .byte 64,109,64,62,64,62,62,62,64,109,64,62,64,62,64,62,0,111,0,0,106,0,64,64,64,109,64,64,60,64,64,60,60,60
008C62  3  40 3E 3E 3E  
008C66  3  40 6D 40 3E  
008C80  3  40 6D 3C 40          .byte 64,109,60,64,60,60,60,64,60,64,64,64,255,0,4,106,0,0,60,108,102,60,60,43,60,60,60,43,60,60,60,102,60,60
008C84  3  3C 3C 3C 40  
008C88  3  3C 40 40 40  
008CA2  3  2B 3C 3C 66          .byte 43,60,60,102,60,60,255,0,5,106,255,0,4,102,89,89,43,0,0,108,43,107,89,89,102,0,0,43,107,0,102,255,0,5
008CA6  3  3C 3C FF 00  
008CAA  3  05 6A FF 00  
008CC4  3  6F 00 6A FF          .byte 111,0,106,255,0,4,105,0,0,43,0,0,0,43,0,0,0,105,0,0,43,0,0,105,255,0,7,106,0,0,0,80,80
008CC8  3  00 04 69 00  
008CCC  3  00 2B 00 00  
008CE5  3  FF 00 06 2B          .byte 255,0,6,43,255,0,6,66,255,0,10,106,0,0,0,79,79,255,0,6,66,255,0,17,106,0,0,104,122,103,255,0,4
008CE9  3  FF 00 06 42  
008CED  3  FF 00 0A 6A  
008D06  3  82 81 FF 00          .byte 130,129,255,0,18,106,0,0,0,102,0,0,0,76,37,130,129,38,75,255,0,5,29,28,22,255,0,8,106,0,0,0,105
008D0A  3  12 6A 00 00  
008D0E  3  00 66 00 00  
008D27  3  00 00 00 68          .byte 0,0,0,104,151,122,122,36,103,255,0,4,104,151,122,36,103,255,0,7,106,255,0,8,69,43,107,255,0,7,69,43,107
008D2B  3  97 7A 7A 24  
008D2F  3  67 FF 00 04  
008D48  3  00 00 00 1C          .byte 0,0,0,28,28,29,0,0,106,255,0,9,43,255,0,9,43,0,0,0,8,5,6,7,5,4,106,255,0,9,43,255,0,9
008D4C  3  1C 1D 00 00  
008D50  3  6A FF 00 09  
008D6A  3  2B 00 00 00          .byte 43,0,0,0,3,2,1,2,1,2,255,65,10,43,255,65,9,43,255,65,4,255,3,5,16,18,18,18,16,16,18,17,18
008D6E  3  03 02 01 02  
008D72  3  01 02 FF 41  
008D8B  3  10 5C 12 10          .byte 16,92,18,16,17,18,18,16,18,17,18,92,18,18,16,17,18,16,18,16,18
008D8F  3  11 12 12 10  
008D93  3  12 11 12 5C  
008DA0  3  00 00 00 6F          .byte 0,0,0,111,255,0,10,111,0,8,10,2,1,2,1,2,1,3,3,3,0,0,0,111,255,0,6,111,255,0,8,26,8
008DA4  3  FF 00 0A 6F  
008DA8  3  00 08 0A 02  
008DC1  3  05 04 05 06          .byte 5,4,5,6,5,10,1,2,1,3,255,0,15,111,0,0,0,3,81,98,0,0,26,8,6,5,10,1,3,3,0,0,111
008DC5  3  05 0A 01 02  
008DC9  3  01 03 FF 00  
008DE2  3  FF 00 05 6F          .byte 255,0,5,111,255,0,9,81,101,0,0,0,99,81,98,8,10,1,2,255,0,18,81,255,0,4,99,81,0,26,8,6,5
008DE6  3  FF 00 09 51  
008DEA  3  65 00 00 00  
008E03  3  FF 00 0B 6F          .byte 255,0,11,111,255,0,6,41,255,0,4,100,41,0,0,3,81,98,111,255,0,27,41,255,0,6,111,255,0,81,24,255,0,16
008E07  3  FF 00 06 29  
008E0B  3  FF 00 04 64  
008E25  3  55 FF 00 07          .byte 85,255,0,7,27,28,29,9,4,6,4,4,255,0,14,82,0,0,28,29,9,7,4,6,4,6,11,1,2,1,2,255,0,9
008E29  3  1B 1C 1D 09  
008E2D  3  04 06 04 04  
008E47  3  54 00 00 00          .byte 84,0,0,0,9,4,7,4,6,7,11,1,2,1,2,1,2,255,3,4,255,0,6,83,0,0,82,28,27,9,11,2,1
008E4B  3  09 04 07 04  
008E4F  3  06 07 0B 01  
008E68  3  02 01 02 01          .byte 2,1,2,1,255,3,7,255,0,4,23,0,28,29,0,82,9,4,6,7,4,11,2,255,3,7,255,0,9,4,7,6,4
008E6C  3  FF 03 07 FF  
008E70  3  00 04 17 00  
008E89  3  07 06 04 0B          .byte 7,6,4,11,2,1,2,1,2,3,3,255,0,15,1,2,1,2,1,2,1,2,255,3,6,255,0,16,255,3,9,255,0,21
008E8D  3  02 01 02 01  
008E91  3  02 03 03 FF  
008EAB  3  12 10 12 11          .byte 18,16,18,17,18,16,18,17,18,18,16,18,18,16,17,18,18,16,17,18,16,18,18,16,18,18,16,18,17,18
008EAF  3  12 10 12 11  
008EB3  3  12 12 10 12  
008EC9  3  FF 00 06 FF          .byte 255,0,6,255,3,5,146,3,3,2,1,2,1,9,5,4,6,4,6,6,5,10,2,1,2,255,0,4,3,3,2,1,2
008ECD  3  03 05 92 03  
008ED1  3  03 02 01 02  
008EEA  3  01 02 03 01          .byte 1,2,3,1,2,9,5,4,6,11,81,0,0,3,81,3,99,8,4,7,4,255,3,4,2,1,9,4,6,5,10,2,9
008EEE  3  02 09 05 04  
008EF2  3  06 0B 51 00  
008F0B  3  06 0B 03 64          .byte 6,11,3,100,81,3,81,0,0,0,81,0,100,3,81,3,3,1,2,1,2,9,5,11,0,0,3,8,5,11,81,0,0,0
008F0F  3  51 03 51 00  
008F13  3  00 00 51 00  
008F2D  3  51 1F 28 00          .byte 81,31,40,0,0,0,41,0,0,0,81,0,0,4,5,6,4,11,81,255,0,4,3,25,3,39,0,0,0,41,0,81,0,0
008F31  3  00 00 29 00  
008F35  3  00 00 51 00  
008F4F  3  54 00 86 85          .byte 84,0,134,133,0,41,0,0,3,100,99,3,3,81,255,0,7,41,255,0,5,81,0,0,82,0,134,133,0,0,28,0,0,0
008F53  3  00 29 00 00  
008F57  3  03 64 63 03  
008F71  3  64 00 00 27          .byte 100,0,0,39,75,255,0,10,90,90,41,0,0,8,15,147,148,8,4,5,7,255,0,4,31,40,255,0,10,22,255,0,7
008F75  3  4B FF 00 0A  
008F79  3  5A 5A 29 00  
008F92  3  23 22 00 63          .byte 35,34,0,99,0,4,255,0,5,41,255,0,10,104,151,122,103,255,0,4,35,33,30,0,26,5,255,0,17,102,107,255,0,4
008F96  3  00 04 FF 00  
008F9A  3  05 29 FF 00  
008FB4  3  4C 20 22 00          .byte 76,32,34,0,0,0,6,5,5,5,10,255,0,13,105,255,0,6,35,34,0,0,0,4,2,1,8,6,10,24,23,255,0,17
008FB8  3  00 00 06 05  
008FBC  3  05 05 0A FF  
008FD6  3  23 21 4B 00          .byte 35,33,75,0,0,5,3,3,1,8,255,5,4,10,255,0,8,135,136,255,0,4,31,32,34,0,0,9,11,0,0,3,1
008FDA  3  00 05 03 03  
008FDE  3  01 08 FF 05  
008FF7  3  02 01 02 01          .byte 2,1,2,1,4,83,255,0,6,37,135,136,38,255,0,4,35,34,0,26,4,1,0,0,0,255,3,4,2,6,82,255,0,4
008FFB  3  04 53 FF 00  
008FFF  3  06 25 87 88  
009019  3  08 07 05 06          .byte 8,7,5,6,4,5,6,5,10,37,44,45,38,0,5,2,255,0,6,3,1,8,5,10,28,29,0,22,5,2,1,2,1
00901D  3  04 05 06 05  
009021  3  0A 25 2C 2D  
00903A  3  02 01 0C 05          .byte 2,1,12,5,6,4,5,6,11,1,255,0,7,3,1,2,8,5,4,6,5,11,1,255,3,5,1,2,1,2,1,2,1
00903E  3  06 04 05 06  
009042  3  0B 01 FF 00  
00905B  3  02 FF 00 08          .byte 2,255,0,8,3,3,1,2,1,2,1,2,3,255,0,5,255,3,8,18,16,17,18,16,18,18,16,17,18,16,17,18,18
00905F  3  03 03 01 02  
009063  3  01 02 01 02  
00907C  3  10 12 12 12          .byte 16,18,18,18,16,18,16,18,18,17,18,16,18,18,67,0
009080  3  10 12 10 12  
009084  3  12 11 12 10  
00908C  3  FF 00 08 6F          .byte 255,0,8,111,255,0,16,111,255,0,5,111,255,0,18,111,255,0,49,111,255,0,5,111,255,0,17,63,62,62,62,61,255,0,13
009090  3  FF 00 10 6F  
009094  3  FF 00 05 6F  
0090AF  3  3F 3E 3E 3E          .byte 63,62,62,62,61,0,0,111,0,0,0,109,255,62,5,61,255,0,8,111,0,0,109,109,255,62,4,61,255,0,4,111,109,109
0090B3  3  3D 00 00 6F  
0090B7  3  00 00 00 6D  
0090D1  3  40 3E 40 3E          .byte 64,62,64,62,64,255,0,11,109,62,64,62,64,62,64,255,0,5,26,64,60,60,60,109,25,0,0,0,111,255,0,7,26
0090D5  3  40 FF 00 0B  
0090D9  3  6D 3E 40 3E  
0090F2  3  40 6D 3C 6D          .byte 64,109,60,109,64,25,255,0,6,26,108,43,107,25,255,0,13,26,60,43,107,25,255,0,9,43,255,0,17,43,0,0,0
0090F6  3  40 19 FF 00  
0090FA  3  06 1A 6C 2B  
009113  3  6F FF 00 07          .byte 111,255,0,7,66,255,0,17,66,255,0,43,84,0,0,132,131,255,0,5,128,127,0,0,85,255,0,13,83,0,82,28,37
009117  3  42 FF 00 11  
00911B  3  42 FF 00 2B  
009134  3  84 83 26 79          .byte 132,131,38,121,0,76,37,128,127,38,75,82,0,121,0,83,255,0,4,115,116,0,28,29,82,9,255,5,17,10,82,28,29
009138  3  00 4C 25 80  
00913C  3  7F 26 4B 52  
009155  3  00 0A 93 94          .byte 0,10,147,148,9,6,6,7,11,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,8,6,4,5,4,6,35
009159  3  09 06 06 07  
00915D  3  0B 02 01 02  
009176  3  22 08 0A 01          .byte 34,8,10,1,2,1,255,3,17,1,2,1,2,1,5,35,33,30,8,10,3,3,255,0,17,255,3,5,4,32,34,0,100
00917A  3  02 01 FF 03  
00917E  3  11 01 02 01  
009197  3  06 11 12 12          .byte 6,17,18,18,16,18,18,16,18,17,18,18,16,18,17,18,18,16,18,18,18,16,18,17,18
00919B  3  10 12 12 10  
00919F  3  12 11 12 12  
0091B0  3  01 02 01 02          .byte 1,2,1,2,1,3,3,3,146,255,0,4,3,2,1,2,3,3,3,1,2,1,9,10,2,3,3,0,0,4,6,5,4
0091B4  3  01 03 03 03  
0091B8  3  92 FF 00 04  
0091D1  3  0E 02 01 02          .byte 14,2,1,2,3,0,0,0,3,1,13,4,14,1,2,1,9,4,7,15,8,10,1,2,3,0,3,3,81,8,4,5,4
0091D5  3  03 00 00 00  
0091D9  3  03 01 0D 04  
0091F2  3  0E 02 03 00          .byte 14,2,3,0,3,2,13,11,0,12,4,7,4,11,81,3,0,0,8,4,10,1,3,0,0,81,81,0,0,3,5,1,3
0091F6  3  03 02 0D 0B  
0091FA  3  00 0C 04 07  
009213  3  00 03 01 04          .byte 0,3,1,4,0,0,3,3,0,0,3,39,30,0,0,3,3,8,10,2,0,0,41,40,0,0,0,6,2,3,3,2,13
009217  3  00 00 03 03  
00921B  3  00 00 03 27  
009234  3  0B FF 00 07          .byte 11,255,0,7,81,255,0,5,3,4,1,0,0,0,81,0,0,0,8,14,1,1,13,11,98,255,0,7,41,255,0,5,3
009238  3  51 FF 00 05  
00923C  3  03 04 01 00  
009255  3  07 02 06 05          .byte 7,2,6,5,0,41,0,0,0,26,5,2,2,4,0,98,255,0,4,9,4,10,255,0,6,3,4,1,1,4,104,103,255,0,4
009259  3  00 29 00 00  
00925D  3  00 1A 05 02  
009278  3  06 01 01 05          .byte 6,1,1,5,0,101,255,0,4,7,1,8,10,255,0,5,3,7,2,2,6,107,255,0,5,5,2,2,7,255,0,5,9
00927C  3  00 65 FF 00  
009280  3  04 07 01 08  
009299  3  0B 02 01 05          .byte 11,2,1,5,103,255,0,4,9,11,1,9,11,255,0,4,12,4,11,1,1,4,104,103,0,0,0,4,2,1,9,11,107
00929D  3  67 FF 00 04  
0092A1  3  09 0B 01 09  
0092BA  3  FF 00 04 07          .byte 255,0,4,7,1,3,5,23,255,0,4,26,4,2,3,2,7,107,255,0,4,5,1,2,4,101,255,0,5,4,2,3,6
0092BE  3  01 03 05 17  
0092C2  3  FF 00 04 1A  
0092DB  3  68 24 67 00          .byte 104,36,103,0,0,0,7,1,3,2,4,255,0,4,104,103,10,1,8,10,0,0,0,104,36,5,1,3,8,10,107,98,0,0,0
0092DF  3  00 00 07 01  
0092E3  3  03 02 04 FF  
0092FE  3  04 02 03 01          .byte 4,2,3,1,12,10,255,0,4,108,7,2,1,5,255,0,4,108,6,2,3,2,6,255,0,4,12,4,1,2,2,1,12
009302  3  0C 0A FF 00  
009306  3  04 6C 07 02  
00931F  3  0A 00 00 00          .byte 10,0,0,0,26,4,1,13,11,255,0,5,8,10,1,1,5,25,255,0,4,8,4,7,4,10,9,11,255,0,4,5,2
009323  3  1A 04 01 0D  
009327  3  0B FF 00 05  
009340  3  05 68 67 59          .byte 5,104,103,89,89,0,0,24,4,2,2,4,255,0,5,31,40,100,81,8,11,101,0,0,0,22,4,1,4,107,0,0,0
009344  3  59 00 00 18  
009348  3  04 02 02 04  
009361  3  68 24 05 0B          .byte 104,36,5,11,1,1,8,4,15,255,0,4,81,83,41,255,0,5,12,4,11,2,7,0,115,116,0,0,108,4,2,3,3
009365  3  01 01 08 04  
009369  3  0F FF 00 04  
009382  3  01 08 0A 00          .byte 1,8,10,0,0,28,29,41,82,0,28,29,0,0,0,13,11,1,1,8,10,147,148,30,0,9,11,1,3,0,3,1,8
009386  3  00 1C 1D 29  
00938A  3  52 00 1C 1D  
0093A3  3  04 05 04 04          .byte 4,5,4,4,5,5,4,4,5,4,5,4,11,2,3,3,2,4,35,34,0,0,4,2,3,146
0093A7  3  05 05 04 04  
0093AB  3  05 04 05 04  
0093BD  3  FF 00 13 03          .byte 255,0,19,3,1,5,32,33,30,0,7,2,3,255,0,8,255,3,7,255,0,5,3,2,4,35,34,0,0,4,1,3,0,0,0
0093C1  3  01 05 20 21  
0093C5  3  1E 00 07 02  
0093E0  3  FF 03 06 02          .byte 255,3,6,2,1,2,1,2,255,3,5,0,3,1,7,35,34,0,0,6,2,3,0,0,3,2,1,2,1,2,1,9,7
0093E4  3  01 02 01 02  
0093E8  3  FF 03 05 00  
009401  3  04 05 0A 01          .byte 4,5,10,1,2,1,2,3,3,2,9,11,32,33,30,26,4,10,1,3,3,2,9,7,4,5,7,4,11,0,3,81,8
009405  3  02 01 02 03  
009409  3  03 02 09 0B  
009422  3  05 06 04 0A          .byte 5,6,4,10,1,2,1,7,25,35,34,0,0,81,8,10,2,3,1,4,3,81,39,30,81,0,0,31,40,3,81,101,3
009426  3  01 02 01 07  
00942A  3  19 23 22 00  
009443  3  08 06 04 07          .byte 8,6,4,7,11,0,35,34,0,31,40,3,4,1,1,9,11,3,41,41,31,40,0,0,0,41,0,41,0,80,80,3,81,81
009447  3  0B 00 23 22  
00944B  3  00 1F 28 03  
009465  3  00 1F 20 21          .byte 0,31,32,33,75,0,41,3,8,10,9,11,3,255,0,4,81,255,0,4,28,29,0,79,79,31,40,39,30,0,35,34,255,0,4
009469  3  4B 00 29 03  
00946D  3  08 0A 09 0B  
009488  3  03 06 05 03          .byte 3,6,5,3,255,0,5,41,0,0,104,36,122,122,122,114,103,0,81,41,0,0,35,33,30,0,0,0,23,4,4,25,0,0
00948C  3  FF 00 05 29  
009490  3  00 00 68 24  
0094AA  3  16 73 74 FF          .byte 22,115,116,255,0,4,69,108,102,107,0,0,0,41,0,0,76,32,34,255,0,4,5,11,8,10,0,0,104,151,122,103,255,0,5
0094AE  3  00 04 45 6C  
0094B2  3  66 6B 00 00  
0094CD  3  66 FF 00 08          .byte 102,255,0,8,35,34,255,0,4,6,1,1,8,10,0,0,43,107,255,0,5,29,105,255,0,7,31,32,34,0,0,0,9
0094D1  3  23 22 FF 00  
0094D5  3  04 06 01 01  
0094EE  3  0B 02 02 09          .byte 11,2,2,9,11,0,0,43,255,0,5,104,151,122,103,255,0,7,35,33,75,0,9,11,1,3,9,11,101,0,0,43,255,0,6
0094F2  3  0B 00 00 2B  
0094F6  3  FF 00 05 68  
009511  3  2B 6B 00 00          .byte 43,107,0,0,0,130,129,0,0,37,44,45,38,9,11,1,3,0,5,24,0,0,0,43,0,0,65,65,0,0,43,0,0
009515  3  00 82 81 00  
009519  3  00 25 2C 2D  
009532  3  4C 25 82 81          .byte 76,37,130,129,38,75,9,5,6,4,11,1,3,0,0,8,5,18,16,17,92,16,18,17,18,18,16,92,18,16,5,6,5
009536  3  26 4B 09 05  
00953A  3  06 04 0B 01  
009553  3  06 06 05 04          .byte 6,6,5,4,11,1,2,1,3,0,0,0,1,8,4,6,4,7,5,4,6,5,6,4,5,6,5,11,2,1,2,1,2
009557  3  0B 01 02 01  
00955B  3  03 00 00 00  
009574  3  01 02 92 03          .byte 1,2,146,3,3,255,0,4,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,255,3,8,255,0,7,255,3,16
009578  3  03 FF 00 04  
00957C  3  03 01 02 01  
009595  3  FF 00 0D             .byte 255,0,13
009598  3  FF 00 60 03          .byte 255,0,96,3,0,0,3,255,0,24,3,0,255,3,5,255,0,23,3,3,96,95,97,3,3,255,0,21,3,3,94,95,255,3,4
00959C  3  00 00 03 FF  
0095A0  3  00 18 03 00  
0095BB  3  FF 00 17 FF          .byte 255,0,23,255,3,4,0,3,0,3,255,0,10,3,3,3,255,0,10,3,0,3,255,0,11,3,3,3,2,1,2,3,255,0,19
0095BF  3  03 04 00 03  
0095C3  3  00 03 FF 00  
0095DE  3  03 03 03 92          .byte 3,3,3,146,1,2,1,9,6,10,1,3,255,0,17,3,1,2,1,2,9,6,6,11,3,8,10,2,255,3,4,255,0,12
0095E2  3  01 02 01 09  
0095E6  3  06 0A 01 03  
009600  3  03 02 09 06          .byte 3,2,9,6,6,6,11,81,81,3,0,26,8,10,2,1,2,1,255,0,11,3,1,9,11,98,101,81,3,81,39,75,0,0
009604  3  06 06 0B 51  
009608  3  51 03 00 1A  
009622  3  03 08 FF 06          .byte 3,8,255,6,4,255,0,11,3,2,6,3,101,0,81,76,40,41,255,0,4,3,101,99,3,3,255,0,11,3,1,6,21
009626  3  04 FF 00 0B  
00962A  3  03 02 06 03  
009643  3  00 00 29 00          .byte 0,0,41,0,41,255,0,7,100,255,0,13,3,2,8,10,90,90,255,0,8,28,29,255,0,15,3,1,6,255,0,8,9
009647  3  29 FF 00 07  
00964B  3  64 FF 00 0D  
009664  3  FF 06 06 FF          .byte 255,6,6,255,0,12,3,2,8,6,6,10,0,0,22,23,9,11,2,1,2,1,2,1,255,0,13,3,1,2,1,8,255,6,4
009668  3  00 0C 03 02  
00966C  3  08 06 06 0A  
009687  3  0B 01 FF 00          .byte 11,1,255,0,6
00968B  3  06           
00968C  3  04 23 21 04          .byte 4,35,33,4,2,3,3,1,2,1,9,4,6,4,7,10,2,1,255,3,4,255,0,8,5,35,34,8,5,6,5,4,4,4
009690  3  02 03 03 01  
009694  3  02 01 09 04  
0096AE  3  0B 03 03 00          .byte 11,3,3,0,0,8,4,10,1,2,1,2,3,255,0,7,6,32,34,0,3,3,3,81,3,81,3,255,0,4,3,3,8
0096B2  3  00 08 04 0A  
0096B6  3  01 02 01 02  
0096CF  3  07 04 06 0A          .byte 7,4,6,10,2,3,255,0,6,4,35,34,0,0,0,31,40,0,41,255,0,7,3,81,101,3,8,10,2,3,255,0,5
0096D3  3  02 03 FF 00  
0096D7  3  06 04 23 22  
0096F0  3  04 2C 21 1E          .byte 4,44,33,30,0,0,0,41,255,0,10,41,0,0,3,4,1,3,255,0,5,8,6,10,255,0,18,3,8,10,1,3,255,0,4
0096F4  3  00 00 00 29  
0096F8  3  FF 00 0A 29  
009713  3  03 02 08 0A          .byte 3,2,8,10,255,0,4,28,29,0,121,0,0,0,8,6,10,27,0,115,116,3,6,2,3,255,0,4,3,146,2,12,6
009717  3  FF 00 04 1C  
00971B  3  1D 00 79 00  
009734  3  0A 68 97 97          .byte 10,104,151,151,122,122,122,103,0,0,99,81,12,4,11,147,148,30,5,1,3,3,0,0,0,1,2,1,2,9,4,5,4
009738  3  7A 7A 7A 67  
00973C  3  00 00 63 51  
009755  3  06 0B 51 65          .byte 6,11,81,101,91,0,0,100,81,3,3,3,35,34,3,8,10,1,2,3,0,0,9,4,7,5,4,11,101,81,3,3,81
009759  3  5B 00 00 64  
00975D  3  51 03 03 03  
009776  3  FF 00 05 29          .byte 255,0,5,41,0,0,31,32,34,0,3,8,4,10,1,97,0,4,25,3,99,3,3,0,39,30,0,41,255,0,9,35,33
00977A  3  00 00 1F 20  
00977E  3  22 00 03 08  
009797  3  4B 00 03 64          .byte 75,0,3,100,8,10,2,3,8,10,0,100,0,0,0,41,255,0,12,35,34,255,0,4,20,4,2,3,1,7,21,0,0,0
00979B  3  08 0A 02 03  
00979F  3  08 0A 00 64  
0097B9  3  5A 5A 00 00          .byte 90,90,0,0,0,132,131,255,0,7,35,33,30,0,0,84,26,5,1,3,2,4,255,0,6,28,24,29,132,131,0,0,28
0097BD  3  00 84 83 FF  
0097C1  3  00 07 23 21  
0097DA  3  17 1D 00 1F          .byte 23,29,0,31,32,34,0,0,27,82,9,11,2,3,1,4,11,83,0,9,4,7,4,4,6,4,5,4,4,7,7,4,10
0097DE  3  20 22 00 00  
0097E2  3  1B 52 09 0B  
0097FB  3  25 2C 2D 26          .byte 37,44,45,38,9,4,5,11,1,3,0,2,7,0,82,9,11,2,1,2,1,2,1,2,1,2,1,2,1,8,4,7,5
0097FF  3  09 04 05 0B  
009803  3  01 03 00 02  
00981C  3  04 0B 02 01          .byte 4,11,2,1,2,3,0,0,1,8,4,4,11,2,255,3,12,1,2,1,2,1,2,3,3,3,0,0,0,3,1,2,1
009820  3  02 03 00 00  
009824  3  01 08 04 04  
00983D  3  02 03 FF 00          .byte 2,3,255,0,12,255,3,6,255,0,7,255,3,4,255,0,25
009841  3  0C FF 03 06  
009845  3  FF 00 07 FF  
00984E  3  00 00 03 01          .byte 0,0,3,1,9,7,5,6,5,5,4,10,1,2,3,3,1,2,1,2,9,5,5,6,5,10,2,3,146,3,0,3,1
009852  3  09 07 05 06  
009856  3  05 05 04 0A  
00986F  3  09 0B FF 03          .byte 9,11,255,3,4,0,0,8,5,10,1,2,9,4,6,7,5,11,3,3,3,8,10,2,1,3,3,1,9,11,3,255,0,6
009873  3  04 00 00 08  
009877  3  05 0A 01 02  
009891  3  03 03 08 05          .byte 3,3,8,5,6,11,3,3,0,0,3,0,0,0,26,8,5,10,1,3,2,4,25,255,0,9,3,0,0,3,255,0,9
009895  3  06 0B 03 03  
009899  3  00 00 03 00  
0098B2  3  03 03 08 0A          .byte 3,3,8,10,3,1,6,3,128,127,255,0,18,134,133,0,0,3,4,1,9,11,0,128,127,255,0,18,134,133,0,0,20
0098B6  3  03 01 06 03  
0098BA  3  80 7F FF 00  
0098D3  3  05 02 04 03          .byte 5,2,4,3,31,147,148,104,36,103,255,0,12,104,36,103,147,148,30,0,3,6,1,6,0,0,35,33,75,102,255,0,13
0098D7  3  1F 93 94 68  
0098DB  3  24 67 FF 00  
0098F4  3  64 66 00 23          .byte 100,102,0,35,34,0,0,3,5,9,11,0,0,35,34,0,102,0,0,0,104,36,103,0,0,104,36,103,0,0,0,102,31
0098F8  3  22 00 00 03  
0098FC  3  05 09 0B 00  
009915  3  20 22 00 17          .byte 32,34,0,23,9,11,15,25,0,76,32,34,0,105,255,0,4,102,107,0,0,0,102,101,0,0,0,105,0,35,34,8,6
009919  3  09 0B 0F 19  
00991D  3  00 4C 20 22  
009936  3  0B 02 FF 00          .byte 11,2,255,0,4,35,34,255,0,6,105,255,0,4,105,255,0,5,76,32,34,0,8,10,1,255,0,4,35,33,75,255,0,17
00993A  3  04 23 22 FF  
00993E  3  00 06 69 FF  
009958  3  23 21 4B 1A          .byte 35,33,75,26,5,2,255,0,4,35,34,255,0,18,35,34,0,0,8,10,0,0,0,31,32,34,0,0,85,255,0,8,90,90
00995C  3  05 02 FF 00  
009960  3  04 23 22 FF  
00997A  3  00 00 53 00          .byte 0,0,83,0,0,35,33,30,0,0,4,0,0,76,37,44,45,38,75,82,255,0,12,82,76,37,44,45,38,75,0,4,5
00997E  3  00 23 21 1E  
009982  3  00 00 04 00  
00999B  3  06 05 06 07          .byte 6,5,6,7,7,5,6,11,255,0,8,8,6,5,6,5,7,7,6,6,5,5,4,11,2,1,2,1,2,1,2,3,255,0,10
00999F  3  07 05 06 0B  
0099A3  3  FF 00 08 08  
0099BE  3  03 02 01 02          .byte 3,2,1,2,1,2,1,2,1,2,1,2,255,3,7,65,65,0,0,65,65,65,0,0,65,65,0,255,3,11,18,16,18
0099C2  3  01 02 01 02  
0099C6  3  01 02 01 02  
0099DF  3  11 12 12 10          .byte 17,18,18,16,17,255,86,10,18,16,17,18,16,18,18,16,18,17,16,18
0099E3  3  11 FF 56 0A  
0099E7  3  12 10 11 12  
0099F3  3  FF 00 06 6F          .byte 255,0,6,111,255,0,18,111,255,0,17,111,255,0,6,111,255,0,19,111,255,0,6,111,255,0,14,111,255,0,25,111,255,0,14
0099F7  3  FF 00 12 6F  
0099FB  3  FF 00 11 6F  
009A16  3  6F FF 00 04          .byte 111,255,0,4,111,255,0,20,111,255,0,14,111,255,0,6,111,255,0,18,111,255,0,19,63,64,62,61,255,0,24,63,62
009A1A  3  6F FF 00 14  
009A1E  3  6F FF 00 0E  
009A37  3  40 3E 40 FF          .byte 64,62,64,255,62,4,61,255,0,9,111,255,0,7,63,62,109,62,64,62,64,64,62,64,109,64,62,62,61,255,0,14,63
009A3B  3  3E 04 3D FF  
009A3F  3  00 09 6F FF  
009A58  3  40 40 6D 40          .byte 64,64,109,64,64,255,60,5,109,60,64,60,64,61,255,0,13,255,60,4,109,60,60,60,43,60,109,255,60,6,255,0,13
009A5C  3  40 FF 3C 05  
009A60  3  6D 3C 40 3C  
009A79  3  64 3C 3C 3C          .byte 100,60,60,60,41,98,100,108,43,0,101,41,100,60,43,107,41,255,0,12,83,0,0,43,0,0,0,132,131,66,0,0,0
009A7D  3  29 62 64 6C  
009A81  3  2B 00 65 29  
009A9A  3  54 00 42 00          .byte 84,0,66,0,24,255,0,11,28,82,0,23,66,0,0,0,132,131,255,0,4,82,29,9,7,6,7,10,115,116,38,255,0,4
009A9E  3  18 FF 00 0B  
009AA2  3  1C 52 00 17  
009ABC  3  06 07 07 07          .byte 6,7,7,7,5,6,7,6,10,31,147,148,30,9,7,4,7,6,11,2,1,2,12,6,7,6,6,5,7,6,1,2,1
009AC0  3  05 06 07 06  
009AC4  3  0A 1F 93 94  
009ADD  3  02 01 02 01          .byte 2,1,2,1,2,5,0,35,34,0,6,1,2,1,2,1,3,3,3,2,1,2,1,2,1,2,1,255,3,8,6,0,35
009AE1  3  02 05 00 23  
009AE5  3  22 00 06 01  
009AFE  3  21 1E 05 FF          .byte 33,30,5,255,3,6,0,255,3,9,16,17,16,18,18,18,16,17,5,0,35,34,0,5,16,17,18,16,18,16,18,16,17
009B02  3  03 06 00 FF  
009B06  3  03 09 10 11  
009B1F  3  10 12 10 12          .byte 16,18,16,18,16,17,16
009B23  3  10 11 10     
009B26  3               numsc:
009B26  3  1B                   .byte 27
009B27  3               nmedat:
009B27  3  00 01 70 20          .byte 0,1,112,32,6,8,16,104,3,4,32,144,6,8,16,192,255
009B2B  3  06 08 10 68  
009B2F  3  03 04 20 90  
009B38  3  02 0B 58 60          .byte 2,11,88,96,0,1,112,24,3,4,112,64,3,4,112,152,255
009B3C  3  00 01 70 18  
009B40  3  03 04 70 40  
009B49  3  00 01 70 08          .byte 0,1,112,8,3,4,96,176,255
009B4D  3  03 04 60 B0  
009B51  3  FF           
009B52  3  00 01 60 38          .byte 0,1,96,56,7,7,88,192,255
009B56  3  07 07 58 C0  
009B5A  3  FF           
009B5B  3  00 01 20 10          .byte 0,1,32,16,3,4,72,40,3,4,72,80,255
009B5F  3  03 04 48 28  
009B63  3  03 04 48 50  
009B68  3  00 01 28 D0          .byte 0,1,40,208,3,4,40,136,6,8,32,96,3,12,120,24,255
009B6C  3  03 04 28 88  
009B70  3  06 08 20 60  
009B79  3  00 01 70 18          .byte 0,1,112,24,2,11,112,120,255
009B7D  3  02 0B 70 78  
009B81  3  FF           
009B82  3  03 04 28 70          .byte 3,4,40,112,0,1,88,88,3,4,104,168,3,12,64,112,255
009B86  3  00 01 58 58  
009B8A  3  03 04 68 A8  
009B93  3  00 01 78 10          .byte 0,1,120,16,6,8,72,192,1,5,104,168,3,12,32,96,3,12,32,144,255
009B97  3  06 08 48 C0  
009B9B  3  01 05 68 A8  
009BA8  3  00 01 68 10          .byte 0,1,104,16,7,7,96,144,7,7,64,40,1,6,136,96,3,12,128,48,3,4,56,72,3,4,40,168,255
009BAC  3  07 07 60 90  
009BB0  3  07 07 40 28  
009BC5  3  00 01 30 60          .byte 0,1,48,96,3,4,64,48,3,4,80,200,6,8,16,80,255
009BC9  3  03 04 40 30  
009BCD  3  03 04 50 C8  
009BD6  3  00 01 70 D8          .byte 0,1,112,216,3,4,96,80,3,4,96,112,3,4,96,144,3,12,80,184,255
009BDA  3  03 04 60 50  
009BDE  3  03 04 60 70  
009BEB  3  00 01 70 D8          .byte 0,1,112,216,7,7,56,200,7,7,104,80,3,4,112,40,3,4,48,120,255
009BEF  3  07 07 38 C8  
009BF3  3  07 07 68 50  
009C00  3  00 01 20 28          .byte 0,1,32,40,3,12,104,160,1,5,80,184,3,4,24,72,3,4,24,176,255
009C04  3  03 0C 68 A0  
009C08  3  01 05 50 B8  
009C15  3  03 04 30 D8          .byte 3,4,48,216,0,1,56,48,6,8,24,80,255
009C19  3  00 01 38 30  
009C1D  3  06 08 18 50  
009C22  3  00 01 70 10          .byte 0,1,112,16,3,4,40,40,3,12,56,160,3,4,88,128,255
009C26  3  03 04 28 28  
009C2A  3  03 0C 38 A0  
009C33  3  00 01 70 10          .byte 0,1,112,16,3,4,88,160,255
009C37  3  03 04 58 A0  
009C3B  3  FF           
009C3C  3  00 02 70 D8          .byte 0,2,112,216,3,4,96,88,7,7,112,120,7,7,96,56,255
009C40  3  03 04 60 58  
009C44  3  07 07 70 78  
009C4D  3  00 01 70 10          .byte 0,1,112,16,7,7,24,168,255
009C51  3  07 07 18 A8  
009C55  3  FF           
009C56  3  00 01 48 10          .byte 0,1,72,16,7,7,48,64,7,7,104,120,7,7,16,168,3,4,104,144,3,4,40,200,255
009C5A  3  07 07 30 40  
009C5E  3  07 07 68 78  
009C6F  3  00 01 70 18          .byte 0,1,112,24,1,5,104,120,3,4,104,96,3,4,104,152,255
009C73  3  01 05 68 78  
009C77  3  03 04 68 60  
009C80  3  00 01 28 10          .byte 0,1,40,16,7,7,120,40,7,7,64,120,7,7,24,192,3,12,32,152,255
009C84  3  07 07 78 28  
009C88  3  07 07 40 78  
009C95  3  00 02 68 C0          .byte 0,2,104,192,3,4,112,144,7,7,64,72,255
009C99  3  03 04 70 90  
009C9D  3  07 07 40 48  
009CA2  3  00 01 88 A0          .byte 0,1,136,160,255
009CA6  3  FF           
009CA7  3  00 01 30 28          .byte 0,1,48,40,7,7,16,112,3,4,104,96,255
009CAB  3  07 07 10 70  
009CAF  3  03 04 68 60  
009CB4  3  00 01 70 10          .byte 0,1,112,16,3,4,40,40,3,4,40,200,6,8,16,80,6,8,24,160,6,8,32,120,255
009CB8  3  03 04 28 28  
009CBC  3  03 04 28 C8  
009CCD  3  00 01 70 18          .byte 0,1,112,24,3,4,112,88,255
009CD1  3  03 04 70 58  
009CD5  3  FF           
009CD6  3               NUMOBJ = 14
009CD6  3               objdta:
009CD6  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,16,64,184,16,64,184
009CDA  3  1B B0 1D 70  
009CDE  3  0D 60 0B A0  
009CFC  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,5,120,48,5,120,48
009D00  3  1B B0 1D 70  
009D04  3  0D 60 0B A0  
009D22  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,7,40,144,7,40,144
009D26  3  1B B0 1D 70  
009D2A  3  0D 60 0B A0  
009D48  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,4,24,224,4,24,224
009D4C  3  1B B0 1D 70  
009D50  3  0D 60 0B A0  
009D6E  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,3,56,168,3,56,168
009D72  3  1B B0 1D 70  
009D76  3  0D 60 0B A0  
009D94  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,14,72,136,14,72,136
009D98  3  1B B0 1D 70  
009D9C  3  0D 60 0B A0  
009DBA  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,17,80,40,17,80,40
009DBE  3  1B B0 1D 70  
009DC2  3  0D 60 0B A0  
009DE0  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,0,96,168,0,96,168
009DE4  3  1B B0 1D 70  
009DE8  3  0D 60 0B A0  
009E06  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,15,80,184,15,80,184
009E0A  3  1B B0 1D 70  
009E0E  3  0D 60 0B A0  
009E2C  3  01 00 13 90          .byte 1,0,19,144,27,176,29,112,13,96,11,160,5,64,0,0,2,128,25,0,37,0,90,0,114,112,66,140,1,120,1,0,22,56,128,22,56,128
009E30  3  1B B0 1D 70  
009E34  3  0D 60 0B A0  
009E52  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,23,128,128,23,128,128
009E56  3  1F D8 36 7C  
009E5A  3  7E 66 CB E6  
009E78  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,24,104,56,24,104,56
009E7C  3  1F D8 36 7C  
009E80  3  7E 66 CB E6  
009E9E  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,19,56,144,19,56,144
009EA2  3  1F D8 36 7C  
009EA6  3  7E 66 CB E6  
009EC4  3  00 00 07 E0          .byte 0,0,7,224,31,216,54,124,126,102,203,230,207,254,120,60,2,128,3,128,2,192,1,64,1,192,1,64,2,160,3,96,25,112,144,25,112,144
009EC8  3  1F D8 36 7C  
009ECC  3  7E 66 CB E6  
009EEA  3               font:
009EEA  3  CD 9A 8A 3E          .byte 205,154,138,62,70,50,141,92
009EEE  3  46 32 8D 5C  
009EF2  3  32 8F 5C 3E          .byte 50,143,92,62,100,71,205,236
009EF6  3  64 47 CD EC  
009EFA  3  7E CD 18 81          .byte 126,205,24,129,201,0,0,0
009EFE  3  C9 00 00 00  
009F02  3  00 6C FE 6C          .byte 0,108,254,108,108,254,108,0
009F06  3  6C FE 6C 00  
009F0A  3  00 18 7E 78          .byte 0,24,126,120,126,30,126,24
009F0E  3  7E 1E 7E 18  
009F12  3  00 E6 EC 18          .byte 0,230,236,24,48,110,206,0
009F16  3  30 6E CE 00  
009F1A  3  00 30 78 30          .byte 0,48,120,48,126,204,126,0
009F1E  3  7E CC 7E 00  
009F22  3  00 18 30 00          .byte 0,24,48,0,0,0,0,0
009F26  3  00 00 00 00  
009F2A  3  00 0C 18 18          .byte 0,12,24,24,24,24,12,0
009F2E  3  18 18 0C 00  
009F32  3  00 60 30 30          .byte 0,96,48,48,48,48,96,0
009F36  3  30 30 60 00  
009F3A  3  00 00 3C 18          .byte 0,0,60,24,126,24,60,0
009F3E  3  7E 18 3C 00  
009F42  3  00 00 18 18          .byte 0,0,24,24,126,24,24,0
009F46  3  7E 18 18 00  
009F4A  3  00 00 00 00          .byte 0,0,0,0,0,24,24,48
009F4E  3  00 18 18 30  
009F52  3  00 00 00 00          .byte 0,0,0,0,126,0,0,0
009F56  3  7E 00 00 00  
009F5A  3  00 00 00 00          .byte 0,0,0,0,0,56,56,0
009F5E  3  00 38 38 00  
009F62  3  00 00 06 0C          .byte 0,0,6,12,24,48,96,0
009F66  3  18 30 60 00  
009F6A  3  00 3C 42 42          .byte 0,60,66,66,132,132,120,0
009F6E  3  84 84 78 00  
009F72  3  00 18 28 10          .byte 0,24,40,16,16,32,112,0
009F76  3  10 20 70 00  
009F7A  3  00 3C 42 04          .byte 0,60,66,4,124,128,248,0
009F7E  3  7C 80 F8 00  
009F82  3  00 1C 22 02          .byte 0,28,34,2,28,132,120,0
009F86  3  1C 84 78 00  
009F8A  3  00 06 0A 14          .byte 0,6,10,20,36,126,8,0
009F8E  3  24 7E 08 00  
009F92  3  00 3E 20 78          .byte 0,62,32,120,4,132,120,0
009F96  3  04 84 78 00  
009F9A  3  00 3C 42 78          .byte 0,60,66,120,132,132,120,0
009F9E  3  84 84 78 00  
009FA2  3  00 3E 02 04          .byte 0,62,2,4,28,8,8,0
009FA6  3  1C 08 08 00  
009FAA  3  00 18 24 7C          .byte 0,24,36,124,132,132,120,0
009FAE  3  84 84 78 00  
009FB2  3  00 1C 22 42          .byte 0,28,34,66,60,132,120,0
009FB6  3  3C 84 78 00  
009FBA  3  00 00 00 30          .byte 0,0,0,48,0,0,48,0
009FBE  3  00 00 30 00  
009FC2  3  00 00 30 00          .byte 0,0,48,0,0,48,48,96
009FC6  3  00 30 30 60  
009FCA  3  00 00 0C 18          .byte 0,0,12,24,48,24,12,0
009FCE  3  30 18 0C 00  
009FD2  3  00 00 00 7E          .byte 0,0,0,126,0,126,0,0
009FD6  3  00 7E 00 00  
009FDA  3  00 00 30 18          .byte 0,0,48,24,12,24,48,0
009FDE  3  0C 18 30 00  
009FE2  3  00 0E 11 01          .byte 0,14,17,1,6,0,8,0
009FE6  3  06 00 08 00  
009FEA  3  00 7C DE FE          .byte 0,124,222,254,254,192,124,0
009FEE  3  FE C0 7C 00  
009FF2  3  00 1C 22 42          .byte 0,28,34,66,124,132,132,0
009FF6  3  7C 84 84 00  
009FFA  3  00 38 24 7C          .byte 0,56,36,124,66,130,252,0
009FFE  3  42 82 FC 00  
00A002  3  00 3C 42 40          .byte 0,60,66,64,128,132,120,0
00A006  3  80 84 78 00  
00A00A  3  00 3C 22 42          .byte 0,60,34,66,68,132,248,0
00A00E  3  44 84 F8 00  
00A012  3  00 3E 20 7C          .byte 0,62,32,124,64,128,252,0
00A016  3  40 80 FC 00  
00A01A  3  00 3E 20 78          .byte 0,62,32,120,64,128,128,0
00A01E  3  40 80 80 00  
00A022  3  00 3C 42 40          .byte 0,60,66,64,140,132,120,0
00A026  3  8C 84 78 00  
00A02A  3  00 22 22 7C          .byte 0,34,34,124,68,136,136,0
00A02E  3  44 88 88 00  
00A032  3  00 3E 08 08          .byte 0,62,8,8,16,16,124,0
00A036  3  10 10 7C 00  
00A03A  3  00 0E 02 04          .byte 0,14,2,4,68,136,112,0
00A03E  3  44 88 70 00  
00A042  3  00 24 28 70          .byte 0,36,40,112,72,132,132,0
00A046  3  48 84 84 00  
00A04A  3  00 10 10 20          .byte 0,16,16,32,32,66,124,0
00A04E  3  20 42 7C 00  
00A052  3  00 14 2A 4A          .byte 0,20,42,74,66,132,132,0
00A056  3  42 84 84 00  
00A05A  3  00 22 22 54          .byte 0,34,34,84,84,136,136,0
00A05E  3  54 88 88 00  
00A062  3  00 3C 42 42          .byte 0,60,66,66,132,132,120,0
00A066  3  84 84 78 00  
00A06A  3  00 3C 22 44          .byte 0,60,34,68,120,128,128,0
00A06E  3  78 80 80 00  
00A072  3  00 3C 42 42          .byte 0,60,66,66,148,140,122,0
00A076  3  94 8C 7A 00  
00A07A  3  00 3C 22 42          .byte 0,60,34,66,124,136,132,0
00A07E  3  7C 88 84 00  
00A082  3  00 3C 42 38          .byte 0,60,66,56,4,132,120,0
00A086  3  04 84 78 00  
00A08A  3  00 7E 08 10          .byte 0,126,8,16,16,32,32,0
00A08E  3  10 20 20 00  
00A092  3  00 22 22 44          .byte 0,34,34,68,68,136,240,0
00A096  3  44 88 F0 00  
00A09A  3  00 44 48 48          .byte 0,68,72,72,80,80,96,0
00A09E  3  50 50 60 00  
00A0A2  3  00 21 21 42          .byte 0,33,33,66,82,148,236,0
00A0A6  3  52 94 EC 00  
00A0AA  3  00 22 24 18          .byte 0,34,36,24,24,36,68,0
00A0AE  3  18 24 44 00  
00A0B2  3  00 22 44 44          .byte 0,34,68,68,56,8,136,112
00A0B6  3  38 08 88 70  
00A0BA  3  00 3F 02 0C          .byte 0,63,2,12,48,64,252,0
00A0BE  3  30 40 FC 00  
00A0C2  3  00 1E 18 18          .byte 0,30,24,24,24,24,30,0
00A0C6  3  18 18 1E 00  
00A0CA  3  00 00 C0 60          .byte 0,0,192,96,48,24,12,0
00A0CE  3  30 18 0C 00  
00A0D2  3  00 F0 30 30          .byte 0,240,48,48,48,48,240,0
00A0D6  3  30 30 F0 00  
00A0DA  3  00 30 78 FC          .byte 0,48,120,252,48,48,48,0
00A0DE  3  30 30 30 00  
00A0E2  3  00 00 00 00          .byte 0,0,0,0,0,0,0,255
00A0E6  3  00 00 00 FF  
00A0EA  3  00 3C 66 F8          .byte 0,60,102,248,96,96,254,0
00A0EE  3  60 60 FE 00  
00A0F2  3  30 46 92 9C          .byte 48,70,146,156,57,73,98,12
00A0F6  3  39 49 62 0C  
00A0FA  3  00 C3 24 08          .byte 0,195,36,8,16,36,195,0
00A0FE  3  10 24 C3 00  
00A102  3  00 C3 3C 42          .byte 0,195,60,66,66,60,195,0
00A106  3  42 3C C3 00  
00A10A  3  42 42 24 10          .byte 66,66,36,16,8,36,66,66
00A10E  3  08 24 42 42  
00A112  3  42 5A 24 24          .byte 66,90,36,36,36,36,90,66
00A116  3  24 24 5A 42  
00A11A  3  00 00 00 00          .byte 0,0,0,0,0,0,0,0
00A11E  3  00 00 00 00  
00A122  3  42 42 24 08          .byte 66,66,36,8,16,36,66,66
00A126  3  10 24 42 42  
00A12A  3  42 5A 24 24          .byte 66,90,36,36,36,36,90,66
00A12E  3  24 24 5A 42  
00A132  3  00 C3 24 10          .byte 0,195,36,16,8,36,195,0
00A136  3  08 24 C3 00  
00A13A  3  00 C3 3C 42          .byte 0,195,60,66,66,60,195,0
00A13E  3  42 3C C3 00  
00A142  3  00 00 00 08          .byte 0,0,0,8,0,16,0,0
00A146  3  00 10 00 00  
00A14A  3  0F 1F 3F 3F          .byte 15,31,63,63,102,106,102,106
00A14E  3  66 6A 66 6A  
00A152  3  E0 F0 F8 FC          .byte 224,240,248,252,156,172,156,188
00A156  3  9C AC 9C BC  
00A15A  3  FC 9C 6C EC          .byte 252,156,108,236,220,188,124,252
00A15E  3  DC BC 7C FC  
00A162  3  7F 79 76 77          .byte 127,121,118,119,123,125,126,127
00A166  3  7B 7D 7E 7F  
00A16A  3  00 00 00 00          .byte 0,0,0,0,72,80,82,84
00A16E  3  48 50 52 54  
00A172  3  00 00 00 02          .byte 0,0,0,2,1,9,5,21
00A176  3  01 09 05 15  
00A17A  3  00 04 04 08          .byte 0,4,4,8,8,0,16,0
00A17E  3  08 00 10 00  
00A182  3  00 78 86 91          .byte 0,120,134,145,96,0,0,0
00A186  3  60 00 00 00  
00A18A  3  00 00 06 89          .byte 0,0,6,137,97,30,0,0
00A18E  3  61 1E 00 00  
00A192  3  00 00 CC CC          .byte 0,0,204,204,204,204,120,0
00A196  3  CC CC 78 00  
00A19A  3  00 00 CC CC          .byte 0,0,204,204,120,120,48,0
00A19E  3  78 78 30 00  
00A1A2  3  00 00 CC FC          .byte 0,0,204,252,252,252,120,0
00A1A6  3  FC FC 78 00  
00A1AA  3  21 00 FD 01          .byte 33,0,253,1,64,2,62,8
00A1AE  3  40 02 3E 08  
00A1B2  3  5F 7E BB C2          .byte 95,126,187,194,223,124,124,198
00A1B6  3  DF 7C 7C C6  
00A1BA  3  5B 57 5D C5          .byte 91,87,93,197,229,1,7,7
00A1BE  3  E5 01 07 07  
00A1C2  3  CD F1 89 E1          .byte 205,241,137,225,193,60,18,35
00A1C6  3  C1 3C 12 23  
00A1CA  3  0B 78 B1 C2          .byte 11,120,177,194,198,124,201,0
00A1CE  3  C6 7C C9 00  
00A1D2  3  00 F0 30 1C          .byte 0,240,48,28,48,48,240,0
00A1D6  3  30 30 F0 00  
00A1DA  3  00 3C 78 00          .byte 0,60,120,0,0,0,0,0
00A1DE  3  00 00 00 00  
00A1E2  3  7C C6 BB E3          .byte 124,198,187,227,227,187,198,124
00A1E6  3  E3 BB C6 7C  
00A1EA  3               jtab:
00A1EA  3  F8 FA FC FE          .byte 248,250,252,254,254,255,255,255,0,0,0,1,1,1,2,2,4,6,8,8,8,99
00A1EE  3  FE FF FF FF  
00A1F2  3  00 00 00 01  
00A200  3  37 36 41 10  keys:   .byte 55,54,65,16,98,101,85,48,49,17,18
00A204  3  62 65 55 30  
00A208  3  31 11 12     
00A20B  3               
00A20B  2               
00A20B  1               
00A20B  1               end_asm:
00A20B  1               
00A20B  1               ;----------------------------------------------------------------------
00A20B  1               ; RELOCATION OF BEEB CODE FROM LOAD ADDRESS
00A20B  1               ;----------------------------------------------------------------------
00A20B  1               
00A20B  1               relocate:
00A20B  1               ; Issue *TAPE otherwise DFS goes mental that we've overwritten workspace from &E00 - &1100
00A20B  1               
00A20B  1  A9 8C            lda #$8C
00A20D  1  A2 0C            ldx #$0C
00A20F  1  A0 00            ldy #$00
00A211  1  20 F4 FF         jsr OSBYTE					; *FX &8C,0,0 - *TAPE 1200
00A214  1               
00A214  1  78           	sei
00A215  1  A9 7F        	lda #$7f
00A217  1  8D 4E FE     	sta $fe4e					; disable all interupts
00A21A  1  A9 82        	lda #$82
00A21C  1  8D 4E FE     	sta $fe4e					; enable vsync interupt only
00A21F  1  58           	cli
00A220  1               
00A220  1               
00A220  1               
00A220  1               
00A220  1               
00A220  1               
00A220  1               
00A220  1               
00A220  1               
00A220  1               ;.if swrflag
00A220  1  A9 04        	lda #4						; select SWRAM
00A222  1  85 F4        	sta $f4
00A224  1  8D 30 FE     	sta $fe30
00A227  1               ;.endif
00A227  1               
00A227  1               
00A227  1               
00A227  1               
00A227  1               
00A227  1               ; Other one off initialisation could happen here...
00A227  1               
00A227  1               ; Relocate all code down to &E00
00A227  1               .if swrflag
00A227  1               	ldx #>(data_start - start_asm) + 1
00A227  1               .else
00A227  1  A2 7D        	ldx #>(end_asm - start_asm) + 1
00A229  1               .endif
00A229  1  A0 00        	ldy #0
00A22B  1               reloop:
00A22B  1  B9 00 26     	lda load_address, y
00A22E  1  99 00 26     	sta asm_code, y
00A231  1  C8           	iny
00A232  1  D0 F7        	bne reloop
00A234  1  EE 2D A2     	inc reloop + 2 + load_address - asm_code
00A237  1  EE 30 A2     	inc reloop + 5 + load_address - asm_code
00A23A  1  CA           	dex
00A23B  1  D0 EE        	bne reloop
00A23D  1               
00A23D  1               .if swrflag
00A23D  1               ; Relocate all data up to &8000
00A23D  1               	ldx #>(end_asm - data_start) + 1
00A23D  1               	ldy #0
00A23D  1               uploop:
00A23D  1               	lda data_start + load_address - asm_code, y
00A23D  1               	sta data_address, y
00A23D  1               	iny
00A23D  1               	bne uploop
00A23D  1               	inc uploop + 2 + load_address - asm_code
00A23D  1               	inc uploop + 5 + load_address - asm_code
00A23D  1               	dex
00A23D  1               	bne uploop
00A23D  1               .endif
00A23D  1               
00A23D  1  4C 03 26     	jmp boot_game
00A240  1               
00A240  1               
00A240  1               
00A240  1               
00A240  1               
00A240  1               .if swrflag
00A240  1               	.out "- SWRAM mode enabled"
00A240  1               	.out "- Memory:"
00A240  1               	.out .sprintf("   CODE  : max %6d bytes, used %6d bytes, free %6d bytes", ($c000-$2600),(end_asm-$2600),($c000-$2600)-(end_asm-$2600))
00A240  1               .else
00A240  1               	.out "- Memory:"
00A240  1               	.out .sprintf("   CODE  : max %6d bytes, used %6d bytes, free %6d bytes",($C000-$2600),(end_asm - start_asm),($C000-$2600)-(end_asm - start_asm))
00A240  1               .endif
00A240  1               .if (end_asm - start_asm) < 23040
00A240  1               	.out "   No SWRAM needed"
00A240  1               .endif
00A240  1               	.out .sprintf("")
00A240  1               eop:					; End Of Program
00A240  1               
